uint64_t re::RenderGraphDataStore::add<re::SceneIndexData,re::SceneIndexData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v4 = (unint64_t)"N2re14SceneIndexDataE";
  if (((unint64_t)"N2re14SceneIndexDataE" & 0x8000000000000000) != 0)
  {
    v5 = (unsigned __int8 *)((unint64_t)"N2re14SceneIndexDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v6 = 5381;
    do
    {
      v4 = v6;
      v7 = *v5++;
      v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  v12 = (a2 + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9) ^ v4;
  v8 = a1 + 64;
  v9 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 16, 8);
  *(void *)v9 = &unk_26E7110D0;
  *(_DWORD *)(v9 + 8) = *(_DWORD *)(a3 + 8);
  v11 = v9;
  return *(void *)re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(v8, (unint64_t *)&v12, &v11);
}

uint64_t re::RenderGraphDataStore::add<re::PipelineCompilationData,re::PipelineCompilationData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = (unint64_t)"N2re23PipelineCompilationDataE";
  if (((unint64_t)"N2re23PipelineCompilationDataE" & 0x8000000000000000) != 0)
  {
    v5 = (unsigned __int8 *)((unint64_t)"N2re23PipelineCompilationDataE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v6 = 5381;
    do
    {
      unint64_t v4 = v6;
      unsigned int v7 = *v5++;
      uint64_t v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  uint64_t v12 = (a2 + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9) ^ v4;
  uint64_t v8 = a1 + 64;
  uint64_t v9 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 16, 8);
  *(void *)uint64_t v9 = &unk_26E6FD650;
  *(_WORD *)(v9 + 8) = *(_WORD *)(a3 + 8);
  uint64_t v11 = v9;
  return re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(v8, (unint64_t *)&v12, &v11);
}

void re::RenderGraphDataStore::add<re::TintContextData,re::TintContextData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)"N2re15TintContextDataE";
  if (((unint64_t)"N2re15TintContextDataE" & 0x8000000000000000) != 0)
  {
    uint64_t v6 = (unsigned __int8 *)((unint64_t)"N2re15TintContextDataE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      unint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  unint64_t v9 = (a2 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9) ^ v5;
  uint64_t v10 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 48, 16);
  *(void *)uint64_t v10 = &unk_26E711010;
  long long v11 = *(_OWORD *)(a3 + 16);
  *(unsigned char *)(v10 + 32) = *(unsigned char *)(a3 + 32);
  *(_OWORD *)(v10 + 16) = v11;
  unint64_t v12 = *(void *)(a1 + 64);
  if (v12)
  {
    unint64_t v12 = v9 % *(unsigned int *)(a1 + 88);
    uint64_t v13 = *(unsigned int *)(*(void *)(a1 + 72) + 4 * v12);
    if (v13 != 0x7FFFFFFF)
    {
      uint64_t v19 = *(void *)(a1 + 80);
      if (*(void *)(v19 + 24 * v13 + 8) == v9) {
        return;
      }
      while (1)
      {
        LODWORD(v13) = *(_DWORD *)(v19 + 24 * v13) & 0x7FFFFFFF;
        if (v13 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v19 + 24 * v13 + 8) == v9) {
          return;
        }
      }
    }
  }
  uint64_t v14 = *(unsigned int *)(a1 + 100);
  if (v14 == 0x7FFFFFFF)
  {
    uint64_t v14 = *(unsigned int *)(a1 + 96);
    int v15 = v14;
    if (v14 == *(_DWORD *)(a1 + 88))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1 + 64, 2 * *(_DWORD *)(a1 + 92));
      LODWORD(v12) = v9 % *(unsigned int *)(a1 + 88);
      int v15 = *(_DWORD *)(a1 + 96);
    }
    *(_DWORD *)(a1 + 96) = v15 + 1;
    uint64_t v16 = *(void *)(a1 + 80);
    int v17 = *(_DWORD *)(v16 + 24 * v14);
  }
  else
  {
    uint64_t v16 = *(void *)(a1 + 80);
    int v17 = *(_DWORD *)(v16 + 24 * v14);
    *(_DWORD *)(a1 + 100) = v17 & 0x7FFFFFFF;
  }
  uint64_t v18 = 24 * v14;
  *(_DWORD *)(v16 + v18) = v17 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 80) + v18) = *(_DWORD *)(*(void *)(a1 + 80) + 24 * v14) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 72) + 4 * v12);
  *(void *)(*(void *)(a1 + 80) + 24 * v14 + 8) = v9;
  *(void *)(*(void *)(a1 + 80) + 24 * v14 + 16) = v10;
  *(_DWORD *)(*(void *)(a1 + 72) + 4 * v12) = v14;
  ++*(_DWORD *)(a1 + 92);
  ++*(_DWORD *)(a1 + 104);
}

uint64_t re::RenderGraphDataStore::addHashed<re::ThreadGroupMemoryData,re::ThreadGroupMemoryData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v12[2] = *MEMORY[0x263EF8340];
  uint64_t v10 = 0;
  unint64_t v11 = 0;
  {
    re::introspect<re::ThreadGroupMemoryData>(void)::info = (_UNKNOWN *)re::introspect_ThreadGroupMemoryData(0);
  }
  uint64_t v10 = re::introspect<re::ThreadGroupMemoryData>(void)::info;
  size_t v6 = strlen(*((const char **)re::introspect<re::ThreadGroupMemoryData>(void)::info + 6));
  if (v6)
  {
    MurmurHash3_x64_128(*((void *)re::introspect<re::ThreadGroupMemoryData>(void)::info + 6), v6, 0, v12);
    unint64_t v7 = (v12[1] - 0x61C8864680B583E9 + (v12[0] << 6) + (v12[0] >> 2)) ^ v12[0];
  }
  else
  {
    unint64_t v7 = 0;
  }
  unint64_t v11 = v7;
  re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(a1 + 176, &v11, &v10);
  v12[0] = (a2 - 0x61C8864680B583E9 + (v11 << 6) + (v11 >> 2)) ^ v11;
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 24, 8);
  *(void *)uint64_t v8 = &unk_26E70E110;
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(a3 + 8);
  uint64_t v10 = (void *)v8;
  return re::HashBrown<unsigned long,re::RenderGraphBuilderData *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<re::RenderGraphBuilderData *>,false>::addNew((_anonymous_namespace_ *)(a1 + 112), v12, (uint64_t *)&v10);
}

uint64_t re::CameraMultiView::prepareEmitDefaultInstancedMode(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  re::CameraView::addPickupScopeLanes((re::CameraView *)a1, (re::RenderFrame *)a2);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v11 = *(const char **)(a1 + 16);
  }
  else {
    unint64_t v11 = (const char *)(a1 + 9);
  }
  unint64_t v12 = 0x9E3779B97F4A7C17;
  size_t v13 = strlen(a6);
  if (v13)
  {
    MurmurHash3_x64_128((uint64_t)a6, v13, 0, &v26);
    unint64_t v14 = (*(void *)v27 - 0x61C8864680B583E9 + (v26 << 6) + (v26 >> 2)) ^ v26;
  }
  else
  {
    unint64_t v14 = 0;
  }
  size_t v15 = strlen(v11);
  if (v15)
  {
    MurmurHash3_x64_128((uint64_t)v11, v15, 0, &v26);
    unint64_t v12 = ((*(void *)v27 - 0x61C8864680B583E9 + (v26 << 6) + (v26 >> 2)) ^ v26) - 0x61C8864680B583E9;
  }
  uint64_t v16 = ((v14 >> 2) + (v14 << 6) + v12) ^ v14;
  re::CameraMultiView::makeCameraDataInstancedMode((_OWORD *)a1, a2[1], a5, (uint64_t)&v26);
  re::RenderGraphDataStore::add<re::CameraData,re::CameraData>(a3, v16, (uint64_t)&v26);
  uint64_t v33 = 0;
  ++v34;
  uint64_t v31 = 0;
  ++v32;
  uint64_t v29 = 0;
  ++v30;
  if (*(void *)v27 && (v27[8] & 1) != 0) {
    (*(void (**)(void))(**(void **)v27 + 40))();
  }
  re::CameraMultiView::makeViewportPercentDataInstancedMode((re::CameraMultiView *)a1, v17, (uint64_t)&v26);
  re::RenderGraphDataStore::add<re::ViewportPercentData,re::ViewportPercentData>(a3, v16, (uint64_t)&v26);
  uint64_t v18 = a2[1];
  unint64_t v26 = (unint64_t)&unk_26E70E0D0;
  *(_DWORD *)v27 = *(_DWORD *)(a1 + 640);
  int v19 = *(unsigned __int8 *)(v18 + 300);
  BOOL v21 = *(_DWORD *)v27 != -1 && v19 != 0;
  v27[4] = v21;
  v27[5] = *(unsigned char *)(a1 + 347);
  re::RenderGraphDataStore::add<re::VRRData,re::VRRData>(a3, v16, (uint64_t)&v26);
  unint64_t v26 = (unint64_t)&unk_26E70E050;
  v27[16] = *(unsigned char *)(a1 + 376);
  *(_OWORD *)v27 = *(_OWORD *)(a1 + 360);
  re::RenderGraphDataStore::add<re::StencilInfoData,re::StencilInfoData>(a3, v16, (uint64_t)&v26);
  re::CameraView::makeMeshLodSelectInputData((__n128 *)a1, (__n128 *)&v26);
  re::RenderGraphDataStore::add<re::MeshLodSelectInputData,re::MeshLodSelectInputData>(a3, v16, (uint64_t)&v26);
  uint64_t v22 = *(void *)(a5 + 56);
  unint64_t v26 = (unint64_t)&unk_26E711090;
  *(void *)v27 = v22;
  re::RenderGraphDataStore::add<re::SceneScope,re::SceneScope>(a3, v16, (uint64_t)&v26);
  unint64_t v26 = (unint64_t)&unk_26E7110D0;
  *(_DWORD *)v27 = *(_DWORD *)(a5 + 440);
  re::RenderGraphDataStore::add<re::SceneIndexData,re::SceneIndexData>(a3, v16, (uint64_t)&v26);
  unint64_t v26 = (unint64_t)&unk_26E6FD650;
  *(_WORD *)v27 = *(_WORD *)(a1 + 653);
  re::RenderGraphDataStore::add<re::PipelineCompilationData,re::PipelineCompilationData>(a3, v16, (uint64_t)&v26);
  v23 = *(float32x4_t **)(a5 + 432);
  if (v23)
  {
    unint64_t v26 = (unint64_t)&unk_26E711010;
    *(float32x4_t *)&v27[8] = vaddq_f32(*(float32x4_t *)(a1 + 320), *v23);
    __int8 v28 = v23[1].i8[0];
    re::RenderGraphDataStore::add<re::TintContextData,re::TintContextData>(a3, v16, (uint64_t)&v26);
  }
  uint64_t v24 = *(unsigned __int8 *)(a2[1] + 303);
  unint64_t v26 = (unint64_t)&unk_26E70E110;
  v27[0] = v24;
  *(void *)&v27[8] = v24 << 9;
  return re::RenderGraphDataStore::addHashed<re::ThreadGroupMemoryData,re::ThreadGroupMemoryData>(a3, v16, (uint64_t)&v26);
}

void re::CameraView::registerFileProviders(char *__s1@<X3>, uint64_t a2@<X0>, re::RenderGraphManager *a3@<X1>, uint64_t a4@<X2>, uint64_t a5@<X8>)
{
  *(void *)(a5 + 32) = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)a5 = 0;
  *(_DWORD *)(a5 + 24) = 0;
  unint64_t v10 = *(void *)(a2 + 240);
  if (v10)
  {
    uint64_t v11 = 0;
    for (unint64_t i = 0; i < v10; ++i)
    {
      uint64_t v13 = *(void *)(a2 + 256) + v11;
      if (*(void *)(v13 + 16)) {
        unint64_t v14 = *(const char **)(v13 + 24);
      }
      else {
        unint64_t v14 = (const char *)(v13 + 17);
      }
      if (!strcmp(__s1, v14))
      {
        re::RenderGraphManager::addProviderInternal(a3, __s1, *(const re::RenderGraphProviderBase **)v13, *(_DWORD *)(v13 + 40), 0, (uint64_t)&v24);
        re::DynamicArray<re::ProviderHandle>::add((_anonymous_namespace_ *)a5, &v24);
        re::StringID::destroyString((re::StringID *)&v24);
        unint64_t v10 = *(void *)(a2 + 240);
      }
      v11 += 48;
    }
  }
  if (!*(unsigned char *)(a2 + 264))
  {
    uint64_t v15 = *(void *)(a4 + 88);
    if (v15)
    {
      if (*(void *)(v15 + 40))
      {
        unint64_t v16 = 0;
        do
        {
          uint64_t v17 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v15, v16);
          unint64_t v18 = *(void *)(v17 + 16);
          if (v18)
          {
            uint64_t v19 = v17;
            uint64_t v20 = 0;
            for (unint64_t j = 0; j < v18; ++j)
            {
              uint64_t v22 = *(void *)(v19 + 32) + v20;
              if (*(void *)(v22 + 16)) {
                v23 = *(const char **)(v22 + 24);
              }
              else {
                v23 = (const char *)(v22 + 17);
              }
              if (!strcmp(__s1, v23))
              {
                re::RenderGraphManager::addProviderInternal(a3, __s1, *(const re::RenderGraphProviderBase **)v22, *(_DWORD *)(v22 + 40), 0, (uint64_t)&v24);
                re::DynamicArray<re::ProviderHandle>::add((_anonymous_namespace_ *)a5, &v24);
                re::StringID::destroyString((re::StringID *)&v24);
                unint64_t v18 = *(void *)(v19 + 16);
              }
              v20 += 48;
            }
          }
          ++v16;
        }
        while (*(void *)(v15 + 40) > v16);
      }
    }
  }
}

re::StringID *re::DynamicArray<re::ProviderHandle>::add(_anonymous_namespace_ *this, StringID *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::ProviderHandle>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  result = re::StringID::StringID((re::StringID *)(*((void *)this + 4) + 24 * v4), a2);
  *((void *)result + 2) = *(void *)&a2[1].var0;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::CameraView::unregisterFileProviders(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 16);
  if ((int)v3 >= 1)
  {
    unint64_t v5 = *(void *)(a2 + 16) + 1;
    do
    {
      unint64_t v6 = (v5 - 2);
      unint64_t v7 = *(void *)(a2 + 16);
      if (v7 <= v6)
      {
        uint64_t v13 = 0;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        long long v22 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v14 = 136315906;
        uint64_t v15 = "operator[]";
        __int16 v16 = 1024;
        int v17 = 789;
        __int16 v18 = 2048;
        uint64_t v19 = (v5 - 2);
        __int16 v20 = 2048;
        unint64_t v21 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v8 = *(void *)(a2 + 32) + 24 * v6;
      re::StringID::StringID((re::StringID *)v11, (const StringID *)v8);
      uint64_t v12 = *(void *)(v8 + 16);
      re::RenderGraphManager::removeProvider(a1, (uint64_t)v11);
      re::StringID::destroyString((re::StringID *)v11);
      --v5;
    }
    while (v5 > 1);
    uint64_t v3 = *(void *)(a2 + 16);
  }
  *(void *)(a2 + 16) = 0;
  if (v3)
  {
    unint64_t v9 = *(re::StringID **)(a2 + 32);
    uint64_t v10 = 24 * v3;
    do
    {
      re::StringID::destroyString(v9);
      unint64_t v9 = (re::StringID *)((char *)v9 + 24);
      v10 -= 24;
    }
    while (v10);
  }
  ++*(_DWORD *)(a2 + 24);
}

re::CameraData *re::CameraData::CameraData(re::CameraData *this, re::Allocator *a2)
{
  *(void *)this = &unk_26E70E230;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  unint64_t v4 = (void *)((char *)this + 8);
  re::DynamicString::setCapacity(v4, 0);
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 16) = 0;
  *((_DWORD *)this + 34) = 0;
  *((void *)this + 34) = 0;
  *((_DWORD *)this + 70) = 0;
  *((void *)this + 52) = 0;
  *((void *)this + 53) = 0;
  *((_DWORD *)this + 108) = 0;
  *((void *)this + 55) = 0;
  *((void *)this + 56) = 0;
  *((_DWORD *)this + 114) = 0;
  *((_DWORD *)this + 115) = 65537;
  *((unsigned char *)this + 464) = 0;
  *((_DWORD *)this + 117) = 1065353216;
  *((_WORD *)this + 236) = 1;
  *((unsigned char *)this + 476) = 0;
  *((_DWORD *)this + 121) = 1;
  *((unsigned char *)this + 490) = 1;
  *((_DWORD *)this + 125) = 2;
  *((void *)this + 63) = 0xFFFFFFFFLL;
  *((unsigned char *)this + 512) = 0;
  *unint64_t v4 = a2;
  re::DynamicString::setCapacity(v4, 0);
  return this;
}

void re::TintContextData::~TintContextData(re::TintContextData *this)
{
}

void re::MeshLodSelectInputData::~MeshLodSelectInputData(re::MeshLodSelectInputData *this)
{
}

void re::SceneScope::~SceneScope(re::SceneScope *this)
{
}

void re::SceneIndexData::~SceneIndexData(re::SceneIndexData *this)
{
}

uint64_t re::DynamicInlineArray<re::RenderCamera,2ul>::ensureCapacity(void *a1, uint64_t a2)
{
  if (*a1 <= 1uLL) {
    return 1;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  if (!*(void *)a1)
  {
    LODWORD(v7) = 0;
    goto LABEL_8;
  }
  unint64_t v7 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v7);
  if (v8 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(a1, v7, v6, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 16) + 24 * v12;
    return v11 + 16;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  while (*(void *)(v9 + 24 * v8 + 8) != v6)
  {
    uint64_t v8 = *(_DWORD *)(v9 + 24 * v8) & 0x7FFFFFFF;
    if (v8 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v10 = 3 * v8;
  *(void *)(v9 + 8 * v10 + 16) = *a3;
  ++*(_DWORD *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 16) + 8 * v10;
  return v11 + 16;
}

uint64_t re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  if (!*(void *)a1)
  {
    LODWORD(v7) = 0;
    goto LABEL_8;
  }
  unint64_t v7 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v7);
  if (v8 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(a1, v7, v6, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 16) + 24 * v11;
    return v10 + 16;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  while (*(void *)(v9 + 24 * v8 + 8) != v6)
  {
    LODWORD(v8) = *(_DWORD *)(v9 + 24 * v8) & 0x7FFFFFFF;
    if (v8 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v10 = v9 + 24 * v8;
  return v10 + 16;
}

unint64_t *re::DynamicInlineArray<re::RenderCamera,2ul>::move(unint64_t *result, unint64_t *a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *a2;
  unint64_t v5 = *result;
  if (*a2 >= *result)
  {
    unint64_t v6 = (uint64_t *)(a2 + 2);
    uint64_t v7 = (uint64_t)&a2[4 * v5 + 2];
    uint64_t v8 = result + 2;
    if (v5) {
      memmove(result + 2, a2 + 2, 32 * v5);
    }
    uint64_t result = (unint64_t *)memcpy(&v8[4 * v5], &a2[4 * v5 + 2], (size_t)&v6[4 * v4] - v7);
  }
  else if (v4)
  {
    uint64_t result = (unint64_t *)memmove(result + 2, a2 + 2, 32 * v4);
  }
  *uint64_t v3 = v4;
  *a2 = 0;
  ++*((_DWORD *)a2 + 2);
  return result;
}

unint64_t *re::DynamicInlineArray<re::Projection,2ul>::move(unint64_t *result, unint64_t *a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *a2;
  unint64_t v5 = *result;
  if (*a2 >= *result)
  {
    unint64_t v6 = (uint64_t *)(a2 + 2);
    uint64_t v7 = (uint64_t)&a2[8 * v5 + 2];
    uint64_t v8 = result + 2;
    if (v5) {
      memmove(result + 2, a2 + 2, v5 << 6);
    }
    uint64_t result = (unint64_t *)memcpy(&v8[8 * v5], &a2[8 * v5 + 2], (size_t)&v6[8 * v4] - v7);
  }
  else if (v4)
  {
    uint64_t result = (unint64_t *)memmove(result + 2, a2 + 2, v4 << 6);
  }
  *uint64_t v3 = v4;
  *a2 = 0;
  ++*((_DWORD *)a2 + 2);
  return result;
}

uint64_t re::HashBrown<unsigned long,re::RenderGraphBuilderData *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<re::RenderGraphBuilderData *>,false>::addNew(_anonymous_namespace_ *a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (v6 != -1) {
    return *((void *)a1 + 1) + 16 * v6 + 8;
  }
  return re::HashBrown<unsigned long,re::RenderGraphBuilderData *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<re::RenderGraphBuilderData *>,false>::internalAdd(a1, a2, a3);
}

uint64_t re::HashBrown<unsigned long,re::RenderGraphBuilderData *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<re::RenderGraphBuilderData *>,false>::internalAdd(_anonymous_namespace_ *a1, void *a2, uint64_t *a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<unsigned long,re::RenderGraphBuilderData *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<re::RenderGraphBuilderData *>,false>::resize((uint64_t *)a1, 1);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = v7 >> 4;
  unint64_t v11 = v9 % (v7 >> 4);
  uint64_t v12 = *(void *)a1;
  unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10) {
        unint64_t v11 = 0;
      }
      else {
        ++v11;
      }
      unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  uint64_t v14 = v12 + 16 * v11;
  BOOL v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(unsigned char *)(v14 + v13) = v9 & 0x7F;
  unint64_t v16 = v13 + 16 * v11;
  uint64_t v17 = *a3;
  __int16 v18 = (void *)(*((void *)a1 + 1) + 16 * v16);
  *__int16 v18 = *a2;
  v18[1] = v17;
  uint64_t v19 = *((void *)a1 + 4) - v15;
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v19;
  re::HashBrown<unsigned long,re::RenderGraphBuilderData *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<re::RenderGraphBuilderData *>,false>::updateHashes((uint64_t)a1, (void *)(*((void *)a1 + 1) + 16 * v16));
  return *((void *)a1 + 1) + 16 * v16 + 8;
}

{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;

  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<unsigned long,re::RenderGraphBuilderData *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<re::RenderGraphBuilderData *>,false>::resize(a1, 1);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = v7 >> 4;
  unint64_t v11 = *(void *)a1;
  uint64_t v12 = v9 % v10;
  while (1)
  {
    unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v11 + 16 * v12)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    if (v13 < 0x40) {
      break;
    }
    if (v12 + 1 == v10) {
      uint64_t v12 = 0;
    }
    else {
      ++v12;
    }
    if (v12 == v9 % v10)
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
      _os_crash();
      __break(1u);
      break;
    }
  }
  uint64_t v14 = v11 + 16 * v12;
  BOOL v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(unsigned char *)(v14 + v13) = v9 & 0x7F;
  unint64_t v16 = v13 + 16 * v12;
  uint64_t v17 = *a3;
  __int16 v18 = (void *)(*((void *)a1 + 1) + 16 * v16);
  *__int16 v18 = *a2;
  v18[1] = v17;
  uint64_t v19 = *((void *)a1 + 4) - v15;
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v19;
  re::HashBrown<unsigned long,re::RenderGraphBuilderData *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<re::RenderGraphBuilderData *>,false>::updateHashes((uint64_t)a1, (void *)(*((void *)a1 + 1) + 16 * v16));
  return *((void *)a1 + 1) + 16 * v16 + 8;
}

uint64_t re::HashBrown<unsigned long,re::RenderGraphBuilderData *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<re::RenderGraphBuilderData *>,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = a1[3] + a2;
  unint64_t v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    unint64_t v5 = 3 * v2;
    unint64_t v6 = v5 << 6;
    uint64_t v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7) {
      unint64_t v4 = v7;
    }
    unint64_t v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<unsigned long,re::RenderGraphBuilderData *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<re::RenderGraphBuilderData *>,false>::doResize(a1, v3);
}

uint64_t re::HashBrown<unsigned long,re::RenderGraphBuilderData *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<re::RenderGraphBuilderData *>,false>::updateHashes(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[1];
  unint64_t v4 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  unint64_t v5 = (0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31);
  *(void *)(a1 + 40) ^= v5;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
  *(void *)(a1 + 48) ^= v5 ^ (result + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9);
  return result;
}

uint64_t re::HashBrown<unsigned long,re::RenderGraphBuilderData *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<re::RenderGraphBuilderData *>,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[7];
  memset(v22, 0, sizeof(v22));
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::init(v22, v4, a2);
  v20[0] = a1;
  unint64_t v5 = a1[2];
  if (v5 >= 0x10)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a1;
    unint64_t v8 = v5 >> 4;
    while (1)
    {
      unsigned __int16 v9 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v7 + v6)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v20[1] = (unsigned __int16)~v9;
      if (v9 != 0xFFFF) {
        break;
      }
      v6 += 16;
      if (!--v8) {
        goto LABEL_9;
      }
    }
    uint64_t v10 = __clz(__rbit64((unsigned __int16)~v9)) + v6;
    uint64_t v21 = v10;
    if (v10 != -1)
    {
      do
      {
        re::HashBrown<unsigned long,re::RenderGraphBuilderData *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<re::RenderGraphBuilderData *>,false>::internalAdd((_anonymous_namespace_ *)v22, (void *)(*(void *)(v20[0] + 8) + 16 * v10), (uint64_t *)(*(void *)(v20[0] + 8) + 16 * v10 + 8));
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v20);
        uint64_t v10 = v21;
      }
      while (v21 != -1);
      unint64_t v5 = a1[2];
    }
  }
LABEL_9:
  uint64_t v12 = *((void *)&v22[3] + 1);
  *((void *)&v22[3] + 1) = a1[7];
  uint64_t result = *((void *)&v22[3] + 1);
  long long v13 = v22[0];
  long long v14 = v22[1];
  *(void *)&v22[1] = v5;
  uint64_t v15 = *a1;
  uint64_t v16 = a1[1];
  *(void *)&v22[0] = *a1;
  *((void *)&v22[0] + 1) = v16;
  long long v17 = v22[2];
  long long v18 = *(_OWORD *)(a1 + 5);
  a1[6] = *(void *)&v22[3];
  a1[7] = v12;
  *(_OWORD *)((char *)&v22[2] + 8) = v18;
  long long v19 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v13;
  *((_OWORD *)a1 + 1) = v14;
  *((_OWORD *)a1 + 2) = v17;
  *(_OWORD *)((char *)&v22[1] + 8) = v19;
  if (result)
  {
    if (v16) {
      *((void *)&v22[0] + 1) = 0;
    }
    if (v15) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
    }
  }
  return result;
}

void *re::DynamicArray<re::ProviderHandle>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::BufferArgument>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::BufferArgument>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

re::WrapDeformerModelBuilder *re::WrapDeformerModelBuilder::WrapDeformerModelBuilder(re::WrapDeformerModelBuilder *this, re::Allocator *a2, const re::mtl::Device *a3, uint64_t a4, unint64_t a5, DeformationModelData *a6)
{
  *(void *)this = a3;
  *((void *)this + 1) = a6;
  uint64_t v10 = (void *)re::DeformationModelData::create<re::WrapDeformer,re::WrapDeformerModel>((uint64_t)a6, (uint64_t)a2);
  re::FixedArray<re::WrapDeformerModel::WrapDeformerTarget>::init<>(v10, (uint64_t)a2, a5);
  re::FixedArray<re::StringID>::init<>(v10 + 6, (uint64_t)a2, a5);
  re::FixedArray<unsigned short>::init<unsigned short const&>(v10 + 3, (uint64_t)a2, a4, &re::WrapDeformerModel::kInvalidIndex);
  return this;
}

uint64_t re::DeformationModelData::create<re::WrapDeformer,re::WrapDeformerModel>(uint64_t a1, uint64_t a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 72, 8);
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(void *)(v4 + 64) = 0;
  v6[0] = &unk_26E711180;
  v6[1] = a2;
  v6[3] = v6;
  uint64_t v7 = v4;
  v8[3] = v8;
  v8[0] = &unk_26E711180;
  v8[1] = a2;
  std::unique_ptr<void,std::function<void ()(void *)>>::operator=[abi:nn180100]((uint64_t *)(a1 + 520), &v7);
  std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:nn180100](&v7);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:nn180100](v6);
  return *(void *)(a1 + 520);
}

void *re::FixedArray<re::WrapDeformerModel::WrapDeformerTarget>::init<>(void *result, uint64_t a2, unint64_t a3)
{
  re::StringID *result = a2;
  result[1] = a3;
  if (!a3) {
    return result;
  }
  if (a3 >= 0x666666666666667)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 40, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = result;
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40 * a3, 8);
  v4[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    uint64_t result = (void *)_os_crash();
    __break(1u);
    return result;
  }
  unint64_t v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      re::StringID *result = 0;
      result[1] = "";
      result[3] = 0;
      result[4] = 0;
      result[2] = 0;
      result += 5;
      --v6;
    }
    while (v6);
  }
  re::StringID *result = 0;
  result[1] = "";
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

float re::WrapDeformerModelBuilder::addWrapTarget(uint64_t a1, unint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v5 = (void **)a2;
  uint64_t v43 = *MEMORY[0x263EF8340];
  unint64_t v6 = *(void **)(*(void *)(a1 + 8) + 520);
  uint64_t v7 = (char **)v6[4];
  if ((unint64_t)v7 <= a2)
  {
LABEL_19:
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    *(_OWORD *)v38 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v33 = 136315906;
    *(void *)&v33[4] = "operator[]";
    *(_WORD *)&v33[12] = 1024;
    *(_DWORD *)&v33[14] = 468;
    __int16 v34 = 2048;
    uint64_t v35 = v5;
    __int16 v36 = 2048;
    v37 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_20:
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    *(_OWORD *)v38 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v33 = 136315906;
    *(void *)&v33[4] = "operator[]";
    *(_WORD *)&v33[12] = 1024;
    *(_DWORD *)&v33[14] = 468;
    __int16 v34 = 2048;
    uint64_t v35 = v4;
    __int16 v36 = 2048;
    v37 = (char **)v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v4 = a3;
  *(_WORD *)(v6[5] + 2 * a2) = (_WORD)a3;
  uint64_t v5 = (void **)v6[1];
  if (v5 <= a3) {
    goto LABEL_20;
  }
  uint64_t v10 = v6[2];
  uint64_t v11 = v10 + 40 * (void)a3;
  unint64_t v12 = *(void *)(a4 + 24);
  v38[0] = objc_msgSend(**(id **)a1, sel_newBufferWithLength_options_, 12 * (v12 / 3), 0);
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v11 + 16), v38);
  if (v38[0]) {

  }
  v38[0] = objc_msgSend(**(id **)a1, sel_newBufferWithLength_options_, 12 * (v12 / 3), 0);
  long long v13 = (void **)(v10 + 40 * (void)v4 + 24);
  NS::SharedPtr<MTL::Texture>::operator=(v13, v38);
  if (v38[0]) {

  }
  v38[0] = objc_msgSend(**(id **)a1, sel_newBufferWithLength_options_, 12 * (v12 / 3), 0);
  uint64_t v4 = (void **)(v10 + 40 * (void)v4 + 32);
  NS::SharedPtr<MTL::Texture>::operator=(v4, v38);
  long long v14 = (_anonymous_namespace_ *)v38[0];
  if (v38[0]) {

  }
  uint64_t v15 = *(const char **)a4;
  *(void *)uint64_t v33 = 0;
  *(void *)&v33[8] = "";
  uint64_t v16 = *(void *)v33;
  uint64_t v17 = *(void *)&v33[8];
  *(void *)uint64_t v33 = 0;
  *(void *)&v33[8] = "";
  long long v18 = *(void **)(v11 + 8);
  long long v19 = (void *)(v16 & 0xFFFFFFFFFFFFFFFELL | *(void *)v11 & 1);
  *(void *)(v11 + 8) = v17;
  v38[0] = v19;
  v38[1] = v18;
  *(void *)uint64_t v11 = v16;
  re::StringID::destroyString((re::StringID *)v38);
  re::StringID::destroyString((re::StringID *)v33);
  uint64_t v7 = &selRef_taskToken;
  memcpy(objc_msgSend(*(id *)(v11 + 16), sel_contents), *(const void **)(a4 + 16), 12 * (v12 / 3));
  uint64_t v5 = (void **)objc_msgSend(*v13, sel_contents);
  __int16 v20 = objc_msgSend(*v4, sel_contents);
  if (v12 >= 3)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *(void *)(a4 + 40);
    unint64_t v25 = v12 / 3;
    uint64_t v26 = *(void *)(a4 + 56);
    if (v12 / 3 <= 1) {
      unint64_t v25 = 1;
    }
    uint64_t v27 = (float *)(*(void *)(a4 + 48) + 8);
    __int8 v28 = (_DWORD *)(*(void *)(a4 + 32) + 8);
    unsigned int v29 = 2;
    while (v24 != v23)
    {
      uint64_t v30 = v29 - 2;
      *((_DWORD *)v5 + v30) = *(v28 - 2);
      uint64_t v31 = v29 - 1;
      *((_DWORD *)v5 + v31) = *(v28 - 1);
      *((_DWORD *)v5 + v29) = *v28;
      if (v26 == v23) {
        goto LABEL_18;
      }
      v20[v30] = *((_DWORD *)v27 - 2);
      v20[v31] = *((_DWORD *)v27 - 1);
      float v32 = *v27;
      v27 += 4;
      float result = v32;
      *(float *)&v20[v29] = v32;
      ++v23;
      v28 += 4;
      v29 += 3;
      if (v25 == v23) {
        return result;
      }
    }
    re::internal::assertLog((re::internal *)6, v21, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v24, v24);
    _os_crash();
    __break(1u);
LABEL_18:
    re::internal::assertLog((re::internal *)6, v21, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v26, v26);
    _os_crash();
    __break(1u);
    goto LABEL_19;
  }
  return result;
}

unint64_t *re::WrapDeformerModelBuilder::setEnvelopeBufferName(re::WrapDeformerModelBuilder *this, unint64_t a2, unint64_t a3, const re::StringID *a4)
{
  uint64_t v4 = *(void **)(*((void *)this + 1) + 520);
  if (v4[4] <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_7:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(_WORD *)(v4[5] + 2 * a2) = a3;
  if (v4[7] <= a3) {
    goto LABEL_7;
  }
  uint64_t v5 = (unint64_t *)(v4[8] + 16 * a3);
  return re::StringID::operator=(v5, (uint64_t *)a4);
}

uint64_t re::WrapDeformer::init(uint64_t this, re::RenderManager *a2)
{
  if (!*(unsigned char *)(this + 24))
  {
    uint64_t v3 = this;
    *(unsigned char *)(this + 24) = 1;
    *(void *)(this + 32) = *((void *)a2 + 4);
    if (*((unsigned char *)a2 + 264))
    {
      char v4 = 0;
      uint64_t v5 = 0;
      v27[0] = 256;
      do
      {
        char v6 = v4;
        uint64_t v7 = *((unsigned __int8 *)v27 + v5);
        v16[0] = 0;
        uint64_t v22 = 0;
        memset(v20, 0, sizeof(v20));
        int v21 = 0;
        char v23 = 0;
        char v24 = 0;
        uint64_t v25 = 0;
        char v26 = 0;
        memset(v11, 0, sizeof(v11));
        unsigned __int16 v9 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v11, 0);
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)v11, v7);
        int v12 = 53;
        re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v20, (re::DynamicString *)v11);
        ComputePipelineState = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)v16);
        NS::SharedPtr<MTL::Texture>::operator=((void **)(v3 + 8 * v7 + 8), ComputePipelineState);
        if (v13)
        {
          if (v14)
          {
            (*(void (**)(void))(*(void *)v13 + 40))();
            uint64_t v14 = 0;
            uint64_t v15 = 0;
          }
          uint64_t v13 = 0;
        }
        if (*(void *)&v11[0] && (BYTE8(v11[0]) & 1) != 0) {
          (*(void (**)(void))(**(void **)&v11[0] + 40))();
        }
        re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v20);
        this = v19[0];
        if (v19[0])
        {
          if (v19[1]) {
            this = (*(uint64_t (**)(void))(*(void *)v19[0] + 40))();
          }
          memset(v19, 0, sizeof(v19));
        }
        if (v16[0])
        {
          this = v17;
          if (v17)
          {
            if (v18) {
              this = (*(uint64_t (**)(void))(*(void *)v17 + 40))();
            }
          }
        }
        char v4 = 1;
        uint64_t v5 = 1;
      }
      while ((v6 & 1) == 0);
      *(unsigned char *)(v3 + 25) = 1;
    }
  }
  return this;
}

double re::WrapDeformer::addDeformationInstance@<D0>(re::WrapDeformer *this@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)&double result = 0xFFFFFFFFLL;
  char v4 = *((unsigned char *)this + 25) ^ 1 | *a2;
  *(_OWORD *)a3 = xmmword_2343E1090;
  *(void *)(a3 + 16) = 2;
  *(unsigned char *)(a3 + 24) = v4 ^ 1;
  *(void *)(a3 + 32) = -1;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  return result;
}

uint64_t re::WrapDeformer::allocateBuffers(uint64_t *a1, re::FrameContext *a2, uint64_t a3, void *a4)
{
  uint64_t v87 = *MEMORY[0x263EF8340];
  re::globalAllocators((re *)a1);
  uint64_t v9 = *((void *)a2 + 3);
  uint64_t v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 24, 8);
  v62 = a4;
  v63 = a2;
  int v12 = (void *)*((void *)a2 + 3);
  unint64_t v13 = *(void *)(*a4 + 48);
  v11[1] = v13;
  _OWORD v11[2] = 0;
  *uint64_t v11 = v12;
  if (v13)
  {
    if (v13 >= 0x492492492492493) {
      goto LABEL_41;
    }
    int v12 = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*(void *)v12 + 32))(v12, 56 * v13, 8);
    _OWORD v11[2] = v12;
    if (!v12)
    {
LABEL_42:
      re::internal::assertLog((re::internal *)4, v14, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
    }
    unint64_t v4 = (unint64_t)v12;
    if (v13 != 1)
    {
      bzero(v12, 56 * v13 - 56);
      v4 += 56 * v13 - 56;
    }
    *(void *)(v4 + 48) = 0;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)unint64_t v4 = 0u;
  }
  uint64_t v15 = re::globalAllocators((re *)v12)[2];
  *(void *)&long long v82 = &unk_26E711128;
  *((void *)&v83 + 1) = v15;
  *(void *)&long long v84 = &v82;
  uint64_t v61 = (*(uint64_t (**)(uint64_t, void *, long long *))(*(void *)v9 + 16))(v9, v11, &v82);
  re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)&v82);
  uint64_t v59 = *(void *)(*v62 + 48);
  if (v59)
  {
    unint64_t v16 = 0;
    while (1)
    {
      uint64_t v17 = a3;
      re::DeformationInstanceIterator::Instance::Instance(&v71, v62, v16);
      char v18 = *(void **)(*(void *)(v73 + 344) + 520);
      unint64_t v19 = *(unsigned __int16 *)(v73 + 392);
      unint64_t v20 = v18[4];
      if (v20 <= v19)
      {
        uint64_t v68 = 0;
        long long v85 = 0u;
        long long v86 = 0u;
        long long v83 = 0u;
        long long v84 = 0u;
        long long v82 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v75 = 136315906;
        *(void *)&v75[4] = "operator[]";
        __int16 v76 = 1024;
        int v77 = 476;
        __int16 v78 = 2048;
        unint64_t v79 = v19;
        __int16 v80 = 2048;
        unint64_t v81 = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_37:
        uint64_t v68 = 0;
        long long v85 = 0u;
        long long v86 = 0u;
        long long v83 = 0u;
        long long v84 = 0u;
        long long v82 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v75 = 136315906;
        *(void *)&v75[4] = "operator[]";
        __int16 v76 = 1024;
        int v77 = 468;
        __int16 v78 = 2048;
        unint64_t v79 = v19;
        __int16 v80 = 2048;
        unint64_t v81 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_38:
        uint64_t v68 = 0;
        long long v85 = 0u;
        long long v86 = 0u;
        long long v83 = 0u;
        long long v84 = 0u;
        long long v82 = 0u;
        unint64_t v13 = &_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v75 = 136315906;
        *(void *)&v75[4] = "operator[]";
        __int16 v76 = 1024;
        int v77 = 476;
        __int16 v78 = 2048;
        unint64_t v79 = v4;
        __int16 v80 = 2048;
        unint64_t v81 = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_39:
        re::internal::assertLog((re::internal *)6, v40, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v41, v40);
        _os_crash();
        __break(1u);
LABEL_40:
        re::internal::assertLog((re::internal *)6, v47, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v48, v47);
        _os_crash();
        __break(1u);
LABEL_41:
        re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 56, v13);
        _os_crash();
        __break(1u);
        goto LABEL_42;
      }
      int v21 = v74;
      unint64_t v4 = *(unsigned __int16 *)(v18[5] + 2 * v19);
      uint64_t v22 = re::DeformationVertexBufferState::inputVertexCount(v74, 1u);
      unint64_t v19 = v72;
      unint64_t v5 = *(void *)(v61 + 8);
      if (v5 <= v72) {
        goto LABEL_37;
      }
      uint64_t v23 = v22;
      unint64_t v13 = *(void *)(v61 + 16);
      char v24 = (void *)(v13 + 56 * v72);
      re::FrameContext::perFrameAlloc(v63, 4uLL, 4uLL, (uint64_t)&v82);
      uint64_t v25 = v82;
      uint64_t v26 = v83;
      uint64_t v27 = *((void *)&v82 + 1);
      *(_DWORD *)(v82 + DWORD2(v82)) = v23;
      *char v24 = v25;
      v24[1] = v27;
      v24[2] = v26;
      unint64_t v20 = v18[7];
      if (v20 <= v4) {
        goto LABEL_38;
      }
      unint64_t v5 = 12 * v23;
      re::StringID::StringID((re::StringID *)v75, (const StringID *)(v18[8] + 16 * v4));
      __int8 v28 = (re::AttributeTable *)re::DeformationInstanceIterator::Instance::meshPart((uint64_t)&v71, a1[4]);
      unsigned int v29 = v28;
      do
      {
        uint64_t v30 = v29;
        unsigned int v29 = (re::AttributeTable *)*((void *)v29 + 1);
      }
      while (v29 && !*((void *)v30 + 9));
      *(void *)&long long v82 = *(void *)v75 >> 1;
      uint64_t v31 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v30 + 6, &v82);
      if (v31 == -1) {
        float v32 = 0;
      }
      else {
        float v32 = (unsigned __int8 *)(*((void *)v30 + 7) + 16 * v31 + 8);
      }
      unint64_t v33 = 4 * v23;
      re::FrameContext::perFrameAlloc(v63, v33, 4uLL, (uint64_t)&v82);
      uint64_t v34 = v82;
      uint64_t v36 = DWORD2(v82);
      unsigned int v35 = HIDWORD(v82);
      uint64_t v37 = v83;
      unint64_t v38 = v13 + 56 * v19;
      *(void *)(v38 + 24) = v82;
      *(_DWORD *)(v38 + 32) = v36;
      *(_DWORD *)(v38 + 36) = v35;
      *(void *)(v38 + 40) = v37;
      unint64_t v4 = v34 + v36;
      if (v32)
      {
        uint64_t v39 = re::AttributeTable::buffers(v28);
        unint64_t v41 = *v32;
        if (v40 <= v41) {
          goto LABEL_39;
        }
        memcpy((void *)v4, (char *)objc_msgSend(*(id *)(v39 + 16 * v41), sel_contents) + *(unsigned int *)(v39 + 16 * v41 + 8), v33);
      }
      else if (v35 >= 4)
      {
        memset_pattern16((void *)(v34 + v36), &unk_2343E10A0, v35 & 0xFFFFFFFC);
      }
      long long v42 = v28;
      do
      {
        uint64_t v43 = v42;
        long long v42 = (re::AttributeTable *)*((void *)v42 + 1);
      }
      while (v42 && !*((void *)v43 + 9));
      *(void *)&long long v82 = 0x2DB839E585F57D8ALL;
      uint64_t v44 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v43 + 6, &v82);
      if (v44 != -1)
      {
        uint64_t v45 = *((void *)v43 + 7) + 16 * v44;
        uint64_t v46 = re::AttributeTable::buffers(v28);
        unint64_t v48 = *(unsigned __int8 *)(v45 + 8);
        if (v47 <= v48) {
          goto LABEL_40;
        }
        *(void *)(v13 + 56 * v19 + 48) = v46 + 16 * v48;
      }
      a3 = v17;
      if (v17 == 1) {
        break;
      }
      if (!v17)
      {
        re::FrameContext::perFrameAlloc(v63, v5, 0x10uLL, (uint64_t)&v82);
        WORD2(v68) = 257;
        LODWORD(v68) = 65548;
        char v70 = 30;
        int v69 = 0;
        uint64_t v49 = (uint64_t)v21;
        uint64_t v50 = 0;
LABEL_33:
        re::DeformationVertexBufferState::setOutputBuffer(v49, 1u, v50, (uint64_t)&v82, (uint64_t)&v68);
      }
      re::StringID::destroyString((re::StringID *)v75);
      if (++v16 == v59) {
        return v61;
      }
    }
    uint64_t v51 = v73;
    uint64_t v52 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](*v71 + 8, v72);
    v53 = *(void **)(v51 + 360);
    uint64_t v54 = v62[2];
    __int16 v65 = 257;
    int v64 = 65548;
    char v67 = 30;
    int v66 = 0;
    unsigned int v55 = re::DeformationBufferAllocator::alloc(v53, v54, 1, (uint64_t)&v64, *(unsigned __int8 *)(v52 + 16), v5);
    unint64_t v4 = re::DeformationBufferAllocator::allocationData(*(re::DeformationBufferAllocator **)(v51 + 360), *(unsigned __int8 *)(v52 + 16), v55);
    WORD2(v68) = 257;
    LODWORD(v68) = 65548;
    char v70 = 30;
    int v69 = 0;
    id v56 = objc_msgSend(*(id *)(v4 + 24), sel_contents);
    uint64_t v57 = *(void *)(v4 + 24);
    *(void *)&long long v82 = v56;
    *((void *)&v82 + 1) = *(void *)(v4 + 32);
    *(void *)&long long v83 = v57;
    uint64_t v49 = (uint64_t)v21;
    uint64_t v50 = 1;
    goto LABEL_33;
  }
  return v61;
}

uint64_t re::DeformationVertexBufferState::inputVertexCount(void *a1, unsigned __int8 a2)
{
  unsigned __int8 v6 = a2;
  re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)a1, a2);
  unsigned int v4 = *(_DWORD *)(a1[8]
                 + 32
                 * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(a1 + 7, &v6)+ 20);
  unsigned __int8 v7 = a2;
  re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)a1, a2);
  return v4
       / *(unsigned __int16 *)(a1[16]
                             + 20
                             * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(a1 + 15, &v7)+ 4);
}

uint64_t re::WrapDeformer::deformGPU(uint64_t a1, uint64_t a2, void **this, void *a4)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  re::mtl::ComputeCommandEncoder::pushDebugGroup(this, (re::ns *)"Perform Wrap");
  uint64_t v32 = *(void *)(*a4 + 48);
  if (v32)
  {
    unint64_t v8 = 0;
    unsigned int v29 = a4;
    do
    {
      uint64_t v9 = (re *)re::DeformationInstanceIterator::Instance::Instance(&v35, a4, v8);
      uint64_t v11 = **(unsigned int **)(*(void *)(v37 + 352) + 128);
      if (v11 == -1)
      {
        uint64_t v27 = *re::graphicsLogObjects(v9);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_233120000, v27, OS_LOG_TYPE_DEFAULT, "Wrap deformer has invalid target index, skipping.", buf, 2u);
        }
      }
      else
      {
        int v12 = *(void **)(*(void *)(v37 + 344) + 520);
        unint64_t v13 = *(unsigned __int16 *)(v37 + 392);
        unint64_t v14 = v12[4];
        if (v14 <= v13)
        {
          uint64_t v39 = 0;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v44 = 0u;
          memset(buf, 0, sizeof(buf));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)unint64_t v40 = 136315906;
          *(void *)&v40[4] = "operator[]";
          *(_WORD *)&v40[12] = 1024;
          *(_DWORD *)&v40[14] = 476;
          *(_WORD *)&v40[18] = 2048;
          *(void *)&v40[20] = v13;
          __int16 v41 = 2048;
          unint64_t v42 = v14;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_16:
          re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v5, v15);
          _os_crash();
          __break(1u);
LABEL_17:
          uint64_t v39 = 0;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v44 = 0u;
          memset(buf, 0, sizeof(buf));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)unint64_t v40 = 136315906;
          *(void *)&v40[4] = "operator[]";
          *(_WORD *)&v40[12] = 1024;
          *(_DWORD *)&v40[14] = 476;
          *(_WORD *)&v40[18] = 2048;
          *(void *)&v40[20] = v4;
          __int16 v41 = 2048;
          unint64_t v42 = v13;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_18:
          uint64_t v39 = 0;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v44 = 0u;
          memset(buf, 0, sizeof(buf));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)unint64_t v40 = 136315906;
          *(void *)&v40[4] = "operator[]";
          *(_WORD *)&v40[12] = 1024;
          *(_DWORD *)&v40[14] = 468;
          *(_WORD *)&v40[18] = 2048;
          *(void *)&v40[20] = v13;
          __int16 v41 = 2048;
          unint64_t v42 = v14;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        unint64_t v5 = *(void *)(v37 + 384) + v11;
        unint64_t v15 = a4[6];
        if (v15 <= v5) {
          goto LABEL_16;
        }
        unsigned int v4 = (void *)*(unsigned __int16 *)(v12[5] + 2 * v13);
        unint64_t v13 = v12[1];
        if (v13 <= (unint64_t)v4) {
          goto LABEL_17;
        }
        unint64_t v13 = v36;
        unint64_t v14 = *(void *)(a2 + 8);
        if (v14 <= v36) {
          goto LABEL_18;
        }
        unint64_t v16 = v38;
        uint64_t v17 = a4[5] + 312 * v5;
        uint64_t v18 = v12[2];
        uint64_t v19 = *(void *)(a2 + 16) + 56 * v36;
        uint64_t v20 = a1 + 8 * (*(void *)(v19 + 48) != 0);
        unsigned int v34 = objc_msgSend(*(id *)(v20 + 8), sel_maxTotalThreadsPerThreadgroup);
        int v33 = re::DeformationVertexBufferState::inputVertexCount(v16, 1u);
        [*this setComputePipelineState:*(void *)(v20 + 8)];
        int v21 = (void *)(v18 + 40 * v4);
        [*this setBuffer:v21[2] offset:0 atIndex:0];
        buf[0] = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v17, 1u);
        unint64_t v5 = v17 + 184;
        uint64_t v22 = *(void *)(*(void *)(v17 + 192)
                        + 32
                        * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((void *)(v17 + 184), buf)+ 24);
        buf[0] = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v17, 1u);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", v22, *(unsigned int *)(*(void *)(v17 + 192)+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((void *)(v17 + 184), buf)+ 16), 1);
        [*this setBuffer:v21[3] offset:0 atIndex:2];
        [*this setBuffer:v21[4] offset:0 atIndex:3];
        [*this setBuffer:*(void *)(v19 + 40) offset:*(unsigned int *)(v19 + 32) atIndex:4];
        [*this setBuffer:*(void *)(v19 + 16) offset:*(unsigned int *)(v19 + 8) atIndex:5];
        uint64_t v23 = *(void *)(v19 + 48);
        if (v23) {
          [*this setBuffer:*(void *)v23 offset:*(unsigned int *)(v23 + 8) atIndex:6];
        }
        buf[0] = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v16, 1u);
        uint64_t v24 = *(void *)(v16[8]
                        + 32
                        * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v16 + 7, buf)+ 24);
        buf[0] = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v16, 1u);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", v24, *(unsigned int *)(v16[8]+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v16 + 7, buf)+ 16), 7);
        buf[0] = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v16, 1u);
        unsigned int v4 = v16 + 23;
        uint64_t v25 = *(void *)(v16[24]
                        + 32
                        * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v16 + 23, buf)+ 24);
        buf[0] = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v16, 1u);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", v25, *(unsigned int *)(v16[24]+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v16 + 23, buf)+ 16), 8);
        uint64_t v26 = *this;
        *(void *)buf = (v33 + v34 - 1) / v34;
        *(int64x2_t *)&buf[8] = vdupq_n_s64(1uLL);
        *(void *)unint64_t v40 = v34;
        *(_OWORD *)&v40[8] = *(_OWORD *)&buf[8];
        [v26 dispatchThreadgroups:buf threadsPerThreadgroup:v40];
        a4 = v29;
      }
      ++v8;
    }
    while (v32 != v8);
  }
  return [*this popDebugGroup];
}

void re::WrapDeformer::deformCPU(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v85 = *MEMORY[0x263EF8340];
  uint64_t v65 = *(void *)(*a3 + 48);
  if (v65)
  {
    uint64_t v5 = a2;
    unint64_t v6 = 0;
    int v66 = a3;
    do
    {
      unsigned __int8 v7 = (re *)re::DeformationInstanceIterator::Instance::Instance(&v67, a3, v6);
      unint64_t v8 = v68;
      unint64_t v9 = *(void *)(v5 + 8);
      if (v9 <= v68) {
        goto LABEL_29;
      }
      uint64_t v10 = *(void *)(v5 + 16);
      uint64_t v11 = *(void *)(v10 + 56 * v68 + 48);
      if (v11)
      {
        unsigned __int8 v7 = (re *)objc_msgSend(*(id *)v11, sel_contents);
        unint64_t v9 = (unint64_t)v7 + *(unsigned int *)(v11 + 8);
      }
      else
      {
        unint64_t v9 = 0;
      }
      int v12 = *(_DWORD **)(*(void *)(v69 + 352) + 128);
      if (!v12 || *v12 == -1)
      {
        uint64_t v57 = *re::graphicsLogObjects(v7);
        if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_233120000, v57, OS_LOG_TYPE_DEFAULT, "Wrap deformer has invalid target index, skipping.", buf, 2u);
        }
      }
      else
      {
        unint64_t v13 = *(void **)(*(void *)(v69 + 344) + 520);
        unint64_t v3 = *(unsigned __int16 *)(v69 + 392);
        unsigned int v4 = (char *)v13[4];
        if ((unint64_t)v4 <= v3) {
          goto LABEL_30;
        }
        unint64_t v3 = *(unsigned __int16 *)(v13[5] + 2 * v3);
        unsigned int v4 = (char *)v13[1];
        if ((unint64_t)v4 <= v3) {
          goto LABEL_31;
        }
        uint64_t v14 = v10 + 56 * v8;
        uint64_t v62 = *(unsigned int *)(v14 + 32);
        uint64_t v63 = *(void *)(v14 + 24);
        unint64_t v15 = v70;
        unint64_t v16 = (id *)(v13[2] + 40 * v3);
        unint64_t v17 = (unint64_t)objc_msgSend(v16[2], sel_length);
        uint64_t v18 = (int *)objc_msgSend(v16[2], sel_contents);
        unint64_t v3 = (unint64_t)objc_msgSend(v16[3], sel_contents);
        unsigned int v4 = (char *)objc_msgSend(v16[4], sel_contents);
        unint64_t v20 = *(void *)(re::BucketArray<re::ActiveDeformation,8ul>::operator[](v66[1], v68) + 384)
            + *v12;
        unint64_t v21 = v66[6];
        if (v21 <= v20) {
          goto LABEL_32;
        }
        uint64_t v22 = v66[5] + 312 * v20;
        buf[0] = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v22, 1u);
        uint64_t v23 = *(void *)(v22 + 192)
            + 32
            * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((void *)(v22 + 184), buf);
        uint64_t v59 = *(unsigned int *)(v23 + 16);
        uint64_t v60 = *(void *)(v23 + 8);
        unsigned int v61 = *(_DWORD *)(v23 + 20);
        buf[0] = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v15, 1u);
        uint64_t v24 = v15[8]
            + 32
            * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v15 + 7, buf);
        uint64_t v58 = *(void *)(v24 + 8);
        unint64_t v8 = *(unsigned int *)(v24 + 16);
        buf[0] = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v15, 1u);
        uint64_t v25 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v15 + 23, buf);
        if (v17 >= 0xC)
        {
          uint64_t v30 = 0;
          uint64_t v31 = v60 + v59;
          unsigned int v32 = v61 / 0xC;
          int v33 = (_DWORD *)(*(void *)(v15[24] + 32 * v25 + 8) + *(unsigned int *)(v15[24] + 32 * v25 + 16) + 8);
          while (1)
          {
            unsigned int v34 = v9 ? *(_DWORD *)(v9 + 4 * v30) : v30;
            int v35 = 3 * v34;
            uint64_t v36 = v18[3 * v34];
            if (v32 <= v36) {
              break;
            }
            uint64_t v37 = v18[v35 + 1];
            if (v32 <= v37) {
              goto LABEL_27;
            }
            uint64_t v38 = v18[v35 + 2];
            if (v32 <= v38) {
              goto LABEL_28;
            }
            uint64_t v39 = v31 + 12 * (int)v36;
            v27.i64[0] = *(void *)v39;
            v27.i32[2] = *(_DWORD *)(v39 + 8);
            uint64_t v40 = v31 + 12 * (int)v37;
            v28.i64[0] = *(void *)v40;
            v28.i32[2] = *(_DWORD *)(v40 + 8);
            uint64_t v41 = v31 + 12 * (int)v38;
            v29.i64[0] = *(void *)v41;
            v29.i32[2] = *(_DWORD *)(v41 + 8);
            float32x4_t v42 = vaddq_f32(vaddq_f32(vmulq_n_f32(v27, *(float *)(v3 + 12 * v34)), vmulq_n_f32(v28, *(float *)(v3 + 12 * v34 + 4))), vmulq_n_f32(v29, *(float *)(v3 + 12 * v34 + 8)));
            float32x4_t v43 = vsubq_f32(v28, v27);
            float32x4_t v44 = vsubq_f32(v29, v27);
            float32x4_t v45 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v44, (int32x4_t)v44), (int8x16_t)v44, 0xCuLL), vnegq_f32(v43)), v44, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v43, (int32x4_t)v43), (int8x16_t)v43, 0xCuLL));
            float32x4_t v46 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v45, (int32x4_t)v45), (int8x16_t)v45, 0xCuLL);
            int32x4_t v47 = (int32x4_t)vmulq_f32(v45, v45);
            v47.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v47.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v47, 2), *(float32x2_t *)v47.i8)).u32[0];
            *(float32x2_t *)v45.f32 = vrsqrte_f32((float32x2_t)v47.u32[0]);
            *(float32x2_t *)v45.f32 = vmul_f32(*(float32x2_t *)v45.f32, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32)));
            v47.i32[0] = vmul_f32(*(float32x2_t *)v45.f32, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32))).u32[0];
            int32x4_t v48 = (int32x4_t)vmulq_f32(v43, v43);
            float32x4_t v49 = vmulq_n_f32(v46, *(float *)v47.i32);
            v47.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v48, 2), vadd_f32(*(float32x2_t *)v48.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v48.i8, 1))).u32[0];
            *(float32x2_t *)v48.i8 = vrsqrte_f32((float32x2_t)v47.u32[0]);
            *(float32x2_t *)v48.i8 = vmul_f32(*(float32x2_t *)v48.i8, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(*(float32x2_t *)v48.i8, *(float32x2_t *)v48.i8)));
            float32x4_t v50 = vmulq_n_f32(v43, vmul_f32(*(float32x2_t *)v48.i8, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(*(float32x2_t *)v48.i8, *(float32x2_t *)v48.i8))).f32[0]);
            int8x16_t v51 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v50, (int32x4_t)v50), (int8x16_t)v50, 0xCuLL), vnegq_f32(v49)), v50, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), (int8x16_t)v49, 0xCuLL));
            float32x4_t v29 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v51, (int32x4_t)v51), v51, 0xCuLL);
            uint64_t v52 = (float *)&v4[12 * v34];
            float32x4_t v53 = vaddq_f32(v42, vmulq_n_f32(v50, *v52));
            float32x4_t v28 = vmulq_n_f32(v29, v52[1]);
            float32x4_t v54 = vaddq_f32(v53, v28);
            float32x4_t v27 = vmulq_n_f32(v49, v52[2]);
            uint64_t v55 = v58 + v8 + 12 * v34;
            v28.i64[0] = *(void *)v55;
            v28.i32[2] = *(_DWORD *)(v55 + 8);
            float32x4_t v56 = vmlaq_n_f32(vmulq_n_f32(vaddq_f32(v27, v54), *(float *)(v63 + v62 + 4 * v30)), v28, 1.0 - *(float *)(v63 + v62 + 4 * v30));
            *((void *)v33 - 1) = v56.i64[0];
            *int v33 = v56.i32[2];
            ++v30;
            v33 += 3;
            if (v17 / 0xC == v30) {
              goto LABEL_24;
            }
          }
          re::internal::assertLog((re::internal *)6, v26, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v36, v32);
          _os_crash();
          __break(1u);
LABEL_27:
          re::internal::assertLog((re::internal *)6, v26, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v37, v32);
          uint64_t v38 = _os_crash();
          __break(1u);
LABEL_28:
          re::internal::assertLog((re::internal *)6, v26, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v38, v32);
          _os_crash();
          __break(1u);
LABEL_29:
          uint64_t v71 = 0;
          long long v83 = 0u;
          long long v84 = 0u;
          long long v81 = 0u;
          long long v82 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v72 = 136315906;
          uint64_t v73 = "operator[]";
          __int16 v74 = 1024;
          int v75 = 468;
          __int16 v76 = 2048;
          unint64_t v77 = v8;
          __int16 v78 = 2048;
          unint64_t v79 = (char *)v9;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_30:
          uint64_t v71 = 0;
          long long v83 = 0u;
          long long v84 = 0u;
          long long v81 = 0u;
          long long v82 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v72 = 136315906;
          uint64_t v73 = "operator[]";
          __int16 v74 = 1024;
          int v75 = 476;
          __int16 v76 = 2048;
          unint64_t v77 = v3;
          __int16 v78 = 2048;
          unint64_t v79 = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_31:
          uint64_t v71 = 0;
          long long v83 = 0u;
          long long v84 = 0u;
          long long v81 = 0u;
          long long v82 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v72 = 136315906;
          uint64_t v73 = "operator[]";
          __int16 v74 = 1024;
          int v75 = 476;
          __int16 v76 = 2048;
          unint64_t v77 = v3;
          __int16 v78 = 2048;
          unint64_t v79 = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_32:
          re::internal::assertLog((re::internal *)6, v19, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v20, v21);
          _os_crash();
          __break(1u);
        }
      }
LABEL_24:
      ++v6;
      a3 = v66;
      uint64_t v5 = a2;
    }
    while (v6 != v65);
  }
}

re::StringID *re::WrapDeformerModelUtil::envelopeBufferNameForWrapDataIndex@<X0>(re::WrapDeformerModelUtil *this@<X0>, const DeformationModelData *a2@<X1>, re::StringID *a3@<X8>)
{
  uint64_t v3 = *((void *)this + 65);
  if (v3 && *(void *)(v3 + 56) > (unint64_t)a2) {
    return re::StringID::StringID(a3, (const StringID *)(*(void *)(v3 + 64) + 16 * a2));
  }
  else {
    return re::StringID::invalid(a3);
  }
}

re::StringID *re::WrapDeformerModelUtil::targetMeshInstanceNameForWrapDataIndex@<X0>(re::WrapDeformerModelUtil *this@<X0>, const DeformationModelData *a2@<X1>, re::StringID *a3@<X8>)
{
  uint64_t v3 = *((void *)this + 65);
  if (v3 && *(void *)(v3 + 8) > (unint64_t)a2) {
    return re::StringID::StringID(a3, (const StringID *)(*(void *)(v3 + 16) + 40 * a2));
  }
  else {
    return re::StringID::invalid(a3);
  }
}

void re::WrapDeformerModelUtil::faceIndicesForWrapDataIndex(re::WrapDeformerModelUtil *this@<X0>, const DeformationModelData *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *((void *)this + 65);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  if (v4 && *(void *)(v4 + 8) > (unint64_t)a2)
  {
    uint64_t v5 = *(void *)(v4 + 16) + 40 * a2;
    id v12 = *(id *)(v5 + 16);
    int v13 = 0;
    unsigned int v14 = objc_msgSend(*(id *)(v5 + 16), sel_length);
    re::ReadOnlyCPUAccessibleBufferSliceContent::make(&v12, (uint64_t)v9);
    if (v9[0])
    {
      unint64_t v7 = v11;
      unint64_t v8 = v11 >> 2;
      memcpy(*(void **)(a3 + 16), __src, v7 & 0xFFFFFFFFFFFFFFFCLL);
    }
    re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result(v9);
    if (v12) {
  }
    }
}

void re::WrapDeformerModelUtil::faceCoordinatesForWrapDataIndex(re::WrapDeformerModelUtil *this@<X0>, const DeformationModelData *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 65);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (v4 && *(void *)(v4 + 8) > (unint64_t)a2)
  {
    uint64_t v5 = *(void *)(v4 + 16) + 40 * a2;
    id v18 = *(id *)(v5 + 24);
    int v19 = 0;
    unsigned int v20 = objc_msgSend(*(id *)(v5 + 24), sel_length);
    re::ReadOnlyCPUAccessibleBufferSliceContent::make(&v18, (uint64_t)v15);
    if (v15[0])
    {
      uint64_t v8 = v16;
      unint64_t v7 = v17;
      unint64_t v9 = v17 / 0xC;
      if (v7 >= 0xC)
      {
        unint64_t v11 = 0;
        if (v9 <= 1) {
          uint64_t v12 = 1;
        }
        else {
          uint64_t v12 = v9;
        }
        int v13 = (_DWORD *)(v8 + 8);
        do
        {
          unint64_t v14 = a3[1];
          if (v14 <= v11)
          {
            uint64_t v21 = 0;
            long long v33 = 0u;
            long long v34 = 0u;
            long long v31 = 0u;
            long long v32 = 0u;
            long long v30 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v22 = 136315906;
            uint64_t v23 = "operator[]";
            __int16 v24 = 1024;
            int v25 = 468;
            __int16 v26 = 2048;
            unint64_t v27 = v11;
            __int16 v28 = 2048;
            unint64_t v29 = v14;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          *(void *)&long long v10 = *((void *)v13 - 1);
          DWORD2(v10) = *v13;
          *(_OWORD *)(a3[2] + 16 * v11++) = v10;
          v13 += 3;
        }
        while (v12 != v11);
      }
    }
    re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result(v15);
    if (v18) {
  }
    }
}

void re::WrapDeformerModelUtil::positionOffsetsForWrapDataIndex(re::WrapDeformerModelUtil *this@<X0>, const DeformationModelData *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 65);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (v4 && *(void *)(v4 + 8) > (unint64_t)a2)
  {
    uint64_t v5 = *(void *)(v4 + 16) + 40 * a2;
    id v18 = *(id *)(v5 + 32);
    int v19 = 0;
    unsigned int v20 = objc_msgSend(*(id *)(v5 + 32), sel_length);
    re::ReadOnlyCPUAccessibleBufferSliceContent::make(&v18, (uint64_t)v15);
    if (v15[0])
    {
      uint64_t v8 = v16;
      unint64_t v7 = v17;
      unint64_t v9 = v17 / 0xC;
      if (v7 >= 0xC)
      {
        unint64_t v11 = 0;
        if (v9 <= 1) {
          uint64_t v12 = 1;
        }
        else {
          uint64_t v12 = v9;
        }
        int v13 = (_DWORD *)(v8 + 8);
        do
        {
          unint64_t v14 = a3[1];
          if (v14 <= v11)
          {
            uint64_t v21 = 0;
            long long v33 = 0u;
            long long v34 = 0u;
            long long v31 = 0u;
            long long v32 = 0u;
            long long v30 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v22 = 136315906;
            uint64_t v23 = "operator[]";
            __int16 v24 = 1024;
            int v25 = 468;
            __int16 v26 = 2048;
            unint64_t v27 = v11;
            __int16 v28 = 2048;
            unint64_t v29 = v14;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          *(void *)&long long v10 = *((void *)v13 - 1);
          DWORD2(v10) = *v13;
          *(_OWORD *)(a3[2] + 16 * v11++) = v10;
          v13 += 3;
        }
        while (v12 != v11);
      }
    }
    re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result(v15);
    if (v18) {
  }
    }
}

uint64_t re::WrapDeformerModelUtil::computeWrapDeformerModelSizeExcludingMetalBuffers(re::WrapDeformerModelUtil *this, const DeformationModelData *a2)
{
  unint64_t v2 = (void *)*((void *)this + 65);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2[7];
  uint64_t v4 = 2 * v2[4] + 16 * v3 + 72;
  if (v3)
  {
    uint64_t v5 = (const char **)(v2[8] + 8);
    do
    {
      if (*(unsigned char *)(v5 - 1)) {
        size_t v6 = strlen(*v5) + 1;
      }
      else {
        size_t v6 = 0;
      }
      v4 += v6;
      v5 += 2;
      --v3;
    }
    while (v3);
  }
  uint64_t v7 = v2[1];
  uint64_t v8 = v4 + 40 * v7;
  if (v7)
  {
    unint64_t v9 = (const char **)(v2[2] + 8);
    do
    {
      if (*(unsigned char *)(v9 - 1)) {
        size_t v10 = strlen(*v9) + 1;
      }
      else {
        size_t v10 = 0;
      }
      v8 += v10;
      v9 += 5;
      --v7;
    }
    while (v7);
  }
  return v8;
}

void re::WrapDeformer::~WrapDeformer(re::WrapDeformer *this)
{
  uint64_t v2 = 16;
  do
  {
    uint64_t v3 = *(void **)((char *)this + v2);
    if (v3)
    {

      *(void *)((char *)this + v2) = 0;
    }
    v2 -= 8;
  }
  while (v2);
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  uint64_t v2 = 16;
  while (1)
  {
    uint64_t v3 = *(void **)((char *)this + v2);
    if (v3)
    {

      *(void *)((char *)this + v2) = 0;
    }
    v2 -= 8;
    if (!v2)
    {
      JUMPOUT(0x237DBCBD0);
    }
  }
}

void re::internal::Callable<re::WrapDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::~Callable()
{
}

uint64_t re::internal::Callable<re::WrapDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = *a2;
  uint64_t result = **a2;
  if (result)
  {
    if (v2[1])
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v2[2]);
      v2[1] = 0;
      v2[2] = 0;
    }
    *uint64_t v2 = 0;
  }
  return result;
}

void *re::internal::Callable<re::WrapDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E711128;
  return result;
}

void *re::internal::Callable<re::WrapDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E711128;
  return result;
}

uint64_t re::internal::Callable<re::WrapDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::size()
{
  return 16;
}

void _ZNSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_12WrapDeformerENS2_17WrapDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_12WrapDeformerENS2_17WrapDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26E711180;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_12WrapDeformerENS2_17WrapDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE7__cloneEPNS0_6__baseISI_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E711180;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_12WrapDeformerENS2_17WrapDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EEclEOSE_(uint64_t result, uint64_t **a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = *(void *)(result + 8);
    re::FixedArray<re::StringID>::deinit(v2 + 6);
    re::FixedArray<CoreIKTransform>::deinit(v2 + 3);
    if (*v2)
    {
      uint64_t v4 = v2[1];
      if (v4)
      {
        uint64_t v5 = (re::StringID *)v2[2];
        uint64_t v6 = 40 * v4;
        do
        {
          uint64_t v7 = (void *)*((void *)v5 + 4);
          if (v7)
          {

            *((void *)v5 + 4) = 0;
          }
          uint64_t v8 = (void *)*((void *)v5 + 3);
          if (v8)
          {

            *((void *)v5 + 3) = 0;
          }
          unint64_t v9 = (void *)*((void *)v5 + 2);
          if (v9)
          {

            *((void *)v5 + 2) = 0;
          }
          re::StringID::destroyString(v5);
          uint64_t v5 = (re::StringID *)((char *)v5 + 40);
          v6 -= 40;
        }
        while (v6);
        (*(void (**)(uint64_t, uint64_t))(*(void *)*v2 + 40))(*v2, v2[2]);
        v2[1] = 0;
        v2[2] = 0;
      }
      *uint64_t v2 = 0;
    }
    size_t v10 = *(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v3 + 40);
    return v10(v3, v2);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_12WrapDeformerENS2_17WrapDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_12WrapDeformerENS2_17WrapDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE11target_typeEv()
{
}

re::RenderGraphManager *re::RenderGraphManager::RenderGraphManager(re::RenderGraphManager *this)
{
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 2) = 0;
  *(_OWORD *)this = 0u;
  *((void *)this + 14) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 16) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_DWORD *)this + 26) = 0;
  *((_WORD *)this + 60) = 257;
  *((unsigned char *)this + 122) = 1;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *(_OWORD *)((char *)this + 156) = 0u;
  *(void *)((char *)this + 172) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_DWORD *)this + 54) = 0;
  *(void *)((char *)this + 220) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_DWORD *)this + 66) = 0;
  *(void *)((char *)this + 268) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  uint64_t v2 = re::globalAllocators(this)[2];
  *((_DWORD *)this + 94) = 0;
  *((unsigned char *)this + 380) = 0;
  *((unsigned char *)this + 400) = 0;
  *((_OWORD *)this + 24) = 0u;
  *((_DWORD *)this + 102) = 0;
  *((unsigned char *)this + 412) = 0;
  *((void *)this + 83) = 0;
  *((_DWORD *)this + 164) = 0;
  *((_OWORD *)this + 40) = 0u;
  *((void *)this + 79) = 0;
  *((_DWORD *)this + 168) = 0;
  *((unsigned char *)this + 368) = 0;
  *((_OWORD *)this + 22) = 0u;
  *((void *)this + 42) = v2;
  *((void *)this + 43) = 0;
  *(_OWORD *)((char *)this + 484) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *((void *)this + 87) = 0;
  *(_OWORD *)((char *)this + 680) = 0u;
  return this;
}

void re::RenderGraphManager::~RenderGraphManager(re::RenderGraphManager *this)
{
  re::RenderGraphManager::deinit(this);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 632);
  *((void *)this + 61) = 0;
  ++*((_DWORD *)this + 124);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 424);
  re::FunctionBase<24ul,void ()(re::RenderFrameWorkload *,re::Slice<re::DetailedError>)>::destroyCallable((uint64_t)this + 312);
  re::HashTable<re::FontID,re::FontAssetInternal *,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::deinit((uint64_t *)this + 29);
  re::HashTable<re::StringID,re::FixedArray<re::RenderGraphProviderBase const*>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 23);
  re::HashTable<re::StringID,re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 17);
  re::RenderGraphProcessorContainer::reset(this);
  re::RenderGraphProcessorContainer::~RenderGraphProcessorContainer(this);
}

re *re::RenderGraphManager::deinit(re::RenderGraphManager *this)
{
  uint64_t v2 = *((void *)this + 81);
  if (v2)
  {
    uint64_t v3 = (void (****)(void))*((void *)this + 83);
    uint64_t v4 = 8 * v2;
    do
    {
      uint64_t v5 = *v3++;
      re::internal::destroyPersistent<re::RenderGraphProviderBase>((re *)"deinit", 128, v5);
      v4 -= 8;
    }
    while (v4);
  }
  *((void *)this + 81) = 0;
  ++*((_DWORD *)this + 164);
  uint64_t v6 = *((unsigned int *)this + 66);
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = (int *)(*((void *)this + 31) + 8);
    while (1)
    {
      int v9 = *v8;
      v8 += 10;
      if (v9 < 0) {
        break;
      }
      if (v6 == ++v7)
      {
        LODWORD(v7) = *((_DWORD *)this + 66);
        break;
      }
    }
  }
  else
  {
    LODWORD(v7) = 0;
  }
  if (v6 != v7)
  {
    uint64_t v10 = v7;
    do
    {
      uint64_t v11 = *((void *)this + 31) + 40 * v10;
      re::StringID::StringID((re::StringID *)v43, (const StringID *)(v11 + 16));
      uint64_t v44 = *(void *)(v11 + 32);
      uint64_t v12 = re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 136, v43);
      if (v12)
      {
        uint64_t v13 = re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>::tryGet(v12, (int *)&v44);
        if (v13)
        {
          if (*(void *)(v13 + 16) > (unint64_t)HIDWORD(v44)) {
            re::internal::destroyPersistent<re::RenderGraphProviderBase>((re *)"deinit", 139, *(void (****)(void))(*(void *)(v13 + 32) + 8 * HIDWORD(v44)));
          }
        }
      }
      re::StringID::destroyString((re::StringID *)v43);
      if (*((_DWORD *)this + 66) <= (v7 + 1)) {
        int v14 = v7 + 1;
      }
      else {
        int v14 = *((_DWORD *)this + 66);
      }
      while (1)
      {
        uint64_t v10 = (v7 + 1);
        if (v14 - 1 == v7) {
          break;
        }
        LODWORD(v7) = v7 + 1;
        int v15 = v10;
        if ((*(_DWORD *)(*((void *)this + 31) + 40 * v10 + 8) & 0x80000000) != 0) {
          goto LABEL_23;
        }
      }
      int v15 = v14;
LABEL_23:
      LODWORD(v7) = v15;
    }
    while (v6 != v15);
  }
  if (*((_DWORD *)this + 41))
  {
    uint64_t v16 = *((unsigned int *)this + 40);
    if (v16) {
      memset_pattern16(*((void **)this + 18), &unk_2343655D0, 4 * v16);
    }
    if (*((_DWORD *)this + 42))
    {
      uint64_t v17 = 0;
      unint64_t v18 = 0;
      do
      {
        re::HashTable<re::StringID,re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(*((void *)this + 19) + v17);
        ++v18;
        v17 += 72;
      }
      while (v18 < *((unsigned int *)this + 42));
    }
    *((_DWORD *)this + 41) = 0;
    *((_DWORD *)this + 42) = 0;
    int v19 = *((_DWORD *)this + 44) + 1;
    *((_DWORD *)this + 43) = 0x7FFFFFFF;
    *((_DWORD *)this + 44) = v19;
  }
  if (*((_DWORD *)this + 53))
  {
    uint64_t v20 = *((unsigned int *)this + 52);
    if (v20) {
      memset_pattern16(*((void **)this + 24), &unk_2343655D0, 4 * v20);
    }
    if (*((_DWORD *)this + 54))
    {
      uint64_t v21 = 0;
      unint64_t v22 = 0;
      do
      {
        re::HashTable<re::StringID,re::FixedArray<re::RenderGraphProviderBase const*>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free((uint64_t *)(*((void *)this + 25) + v21));
        ++v22;
        v21 += 48;
      }
      while (v22 < *((unsigned int *)this + 54));
    }
    *((_DWORD *)this + 53) = 0;
    *((_DWORD *)this + 54) = 0;
    int v23 = *((_DWORD *)this + 56) + 1;
    *((_DWORD *)this + 55) = 0x7FFFFFFF;
    *((_DWORD *)this + 56) = v23;
  }
  v43[0] = (char *)this + 424;
  unint64_t v24 = *((void *)this + 55);
  if (v24 >= 0x10)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *((void *)this + 53);
    unint64_t v27 = v24 >> 4;
    while (1)
    {
      unsigned __int16 v28 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v26 + v25)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v43[1] = (unsigned __int16)~v28;
      if (v28 != 0xFFFF) {
        break;
      }
      v25 += 16;
      if (!--v27) {
        goto LABEL_46;
      }
    }
    uint64_t v29 = __clz(__rbit64((unsigned __int16)~v28)) + v25;
    uint64_t v44 = v29;
    if (v29 != -1)
    {
      do
      {
        re::internal::destroyPersistent<re::RenderGraphCompiled>((re *)"deinit", 147, *(re::RenderGraphCompiled **)(*(void *)(v43[0] + 8) + 24 * v29 + 8));
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v43);
        uint64_t v29 = v44;
      }
      while (v44 != -1);
      unint64_t v24 = *((void *)this + 55);
    }
  }
LABEL_46:
  *((void *)this + 58) = 0;
  *((void *)this + 59) = 0;
  *((void *)this + 56) = 0;
  *((void *)this + 57) = v24;
  if (v24 >= 0x10)
  {
    unint64_t v30 = 0;
    *(void *)&long long v31 = -1;
    *((void *)&v31 + 1) = -1;
    do
      *(_OWORD *)(*((void *)this + 53) + 16 * v30++) = v31;
    while (v30 < *((void *)this + 55) >> 4);
  }
  uint64_t result = (re *)*((void *)this + 16);
  if (result)
  {
    uint64_t result = (re *)re::RenderGraphResourceAllocationManager::deinit((uint64_t)result);
    long long v33 = (re::RenderGraphResourceAllocationManager *)*((void *)this + 16);
    if (v33)
    {
      uint64_t v34 = re::globalAllocators(result)[2];
      re::RenderGraphResourceAllocationManager::~RenderGraphResourceAllocationManager(v33);
      uint64_t result = (re *)(*(uint64_t (**)(uint64_t, re::RenderGraphResourceAllocationManager *))(*(void *)v34 + 40))(v34, v33);
    }
    *((void *)this + 16) = 0;
  }
  uint64_t v35 = (re::RenderGraphPersistentResourceManager *)*((void *)this + 37);
  if (v35)
  {
    uint64_t v36 = re::globalAllocators(result)[2];
    re::RenderGraphPersistentResourceManager::~RenderGraphPersistentResourceManager(v35);
    uint64_t result = (re *)(*(uint64_t (**)(uint64_t, re::RenderGraphPersistentResourceManager *))(*(void *)v36 + 40))(v36, v35);
    *((void *)this + 37) = 0;
  }
  uint64_t v37 = (void *)*((void *)this + 35);
  if (v37)
  {
    uint64_t v38 = re::globalAllocators(result)[2];
    re::StringID::destroyString((re::StringID *)(v37 + 63));
    re::FixedArray<re::StringID>::deinit(v37 + 42);
    re::AttributeTable::~AttributeTable((re::AttributeTable *)v37);
    uint64_t result = (re *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v38 + 40))(v38, v37);
    *((void *)this + 35) = 0;
  }
  uint64_t v39 = (void *)*((void *)this + 36);
  if (v39)
  {
    uint64_t v40 = re::globalAllocators(result)[2];
    re::StringID::destroyString((re::StringID *)(v39 + 63));
    re::FixedArray<re::StringID>::deinit(v39 + 42);
    re::AttributeTable::~AttributeTable((re::AttributeTable *)v39);
    uint64_t result = (re *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v40 + 40))(v40, v39);
    *((void *)this + 36) = 0;
  }
  uint64_t v41 = (void (***)(void))*((void *)this + 86);
  if (v41)
  {
    uint64_t v42 = re::globalAllocators(result)[2];
    (**v41)(v41);
    uint64_t result = (re *)(*(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v42 + 40))(v42, v41);
    *((void *)this + 86) = 0;
  }
  return result;
}

double re::RenderGraphManager::addGraphToCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v25 = a2;
  uint64_t v7 = (_anonymous_namespace_ *)(a1 + 424);
  if (re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((void *)(a1 + 424), &v25) != -1)
  {
    uint64_t v8 = re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(v7, &v25);
    re::internal::destroyPersistent<re::RenderGraphCompiled>((re *)"addGraphToCache", 26, *(re::RenderGraphCompiled **)(*(void *)(a1 + 432) + 24 * v8 + 8));
  }
  if (!*(unsigned char *)(a1 + 380))
  {
    int v9 = (char *)(a1 + 504);
    uint64_t v10 = *(void *)(a1 + 488);
    uint64_t v11 = (char *)(a1 + 504);
    if (v10)
    {
      uint64_t v12 = 8 * v10;
      uint64_t v11 = (char *)(a1 + 504);
      while (*(void *)v11 != v25)
      {
        v11 += 8;
        v12 -= 8;
        if (!v12)
        {
          uint64_t v11 = &v9[8 * v10];
          break;
        }
      }
    }
    uint64_t v13 = (uint64_t *)(a1 + 488);
    uint64_t v14 = (v11 - v9) >> 3;
    if (v14 != v10)
    {
      re::DynamicInlineArray<unsigned long long,16ul>::removeStableAt((uint64_t *)(a1 + 488), v14);
      uint64_t v10 = *v13;
    }
    if (v10 == 16) {
      re::DynamicInlineArray<unsigned long long,16ul>::removeStableAt((uint64_t *)(a1 + 488), 0xFuLL);
    }
    int v15 = (re *)re::DynamicInlineArray<unsigned long long,16ul>::ensureCapacity((void *)(a1 + 488), v14);
    if (v15)
    {
      uint64_t v16 = *v13;
      uint64_t v17 = &v9[8 * *v13];
      if (*v13)
      {
        *(void *)uint64_t v17 = *((void *)v17 - 1);
        if (v17 - 8 != v9)
        {
          int v15 = (re *)memmove((void *)(a1 + 512), (const void *)(a1 + 504), v17 - 8 - v9);
          uint64_t v16 = *v13;
        }
      }
      else
      {
        v9 += 8 * *v13;
      }
      *(void *)int v9 = v25;
      *(void *)(a1 + 488) = v16 + 1;
      ++*(_DWORD *)(a1 + 496);
    }
    unsigned int v18 = *(_DWORD *)(a1 + 672) + 1;
    *(_DWORD *)(a1 + 672) = v18;
    uint64_t v19 = a4 & 0xFFFFFFFFFFFFFFFLL;
    if ((a4 & 0xFFFFFFFFFFFFFFFuLL) - *(void *)(a1 + 680) >= 0x80)
    {
      if (v18 >= 0x20)
      {
        uint64_t v20 = *re::graphicsLogObjects(v15);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          int v21 = *(_DWORD *)(a1 + 672);
          uint64_t v22 = v19 - *(void *)(a1 + 680);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&buf[4] = v21;
          *(_WORD *)&buf[8] = 2048;
          *(void *)&buf[10] = v22;
          _os_log_impl(&dword_233120000, v20, OS_LOG_TYPE_DEFAULT, "WARNING: %u render graphs were cached over %llu frames.A provider might be returning a frequently changing hash.", buf, 0x12u);
        }
      }
      *(_DWORD *)(a1 + 672) = 0;
      *(void *)(a1 + 680) = v19;
    }
  }
  *(void *)buf = a3;
  *(void *)&buf[8] = a4;
  uint64_t v23 = re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(v7, &v25);
  if (v23 == -1)
  {
    *(void *)&double result = re::HashBrown<unsigned long long,re::RenderGraphManager::CachedRenderGraph,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(v7, &v25, (__n128 *)buf).n128_u64[0];
  }
  else
  {
    double result = *(double *)buf;
    *(_OWORD *)(*(void *)(a1 + 432) + 24 * v23 + 8) = *(_OWORD *)buf;
  }
  return result;
}

char *re::DynamicInlineArray<unsigned long long,16ul>::removeStableAt(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (*a1 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "removeStableAt", 555, a2, v2);
    double result = (char *)_os_crash();
    __break(1u);
  }
  else
  {
    uint64_t v4 = v2 - 1;
    BOOL v5 = v2 - 1 > a2;
    uint64_t v6 = a1 + 2;
    double result = (char *)&a1[a2 + 2];
    uint64_t v8 = (uint64_t *)(result + 8);
    int v9 = &v6[v2];
    if (v5 && v9 != v8)
    {
      double result = (char *)memmove(result, v8, (char *)v9 - (char *)v8);
      uint64_t v4 = *a1 - 1;
    }
    *a1 = v4;
    ++*((_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t re::RenderGraphManager::getCachedGraph(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a2;
  uint64_t v5 = re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((void *)(a1 + 424), &v8);
  if (v5 == -1) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 432);
  if ((*(void *)(v6 + 24 * v5 + 16) & 0xFFFFFFFFFFFFFFFuLL) < (a3 & 0xFFFFFFFFFFFFFFFuLL)) {
    return 0;
  }
  else {
    return *(void *)(v6 + 24 * v5 + 8);
  }
}

void re::RenderGraphManager::deleteStaleGraphs(void *a1, uint64_t a2, uint64_t a3)
{
  int v39 = 0;
  memset(v38, 0, sizeof(v38));
  uint64_t v40 = 0x7FFFFFFFLL;
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v38, a3, 16);
  uint64_t v6 = a1[61];
  if (v6)
  {
    uint64_t v7 = a1 + 63;
    uint64_t v8 = 8 * v6;
    do
    {
      uint64_t v9 = *v7++;
      v34[0] = v9;
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)v38, v34);
      v8 -= 8;
    }
    while (v8);
  }
  unint64_t v10 = a1[56];
  uint64_t v37 = 0;
  v34[1] = 0;
  uint64_t v35 = 0;
  int v36 = 0;
  v34[0] = a3;
  re::DynamicArray<float *>::setCapacity(v34, v10);
  ++v36;
  v32[0] = (uint64_t)(a1 + 53);
  unint64_t v11 = a1[55];
  if (v11 >= 0x10)
  {
    uint64_t v12 = 0;
    uint64_t v13 = a1[53];
    unint64_t v14 = v11 >> 4;
    while (1)
    {
      unsigned __int16 v15 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v13 + v12)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v32[1] = (unsigned __int16)~v15;
      if (v15 != 0xFFFF) {
        break;
      }
      v12 += 16;
      if (!--v14) {
        goto LABEL_15;
      }
    }
    uint64_t v16 = __clz(__rbit64((unsigned __int16)~v15)) + v12;
    uint64_t v33 = v16;
    if (v16 != -1)
    {
      unint64_t v17 = a2 & 0xFFFFFFFFFFFFFFFLL;
      do
      {
        unsigned int v18 = (uint64_t *)(*(void *)(v32[0] + 8) + 24 * v16);
        if ((v18[2] & 0xFFFFFFFFFFFFFFFuLL) <= v17
          && !re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains((uint64_t)v38, v18))
        {
          re::DynamicArray<re::TransitionCondition *>::add(v34, v18);
        }
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v32);
        uint64_t v16 = v33;
      }
      while (v33 != -1);
    }
  }
LABEL_15:
  if (v35)
  {
    uint64_t v19 = v37;
    uint64_t v20 = 8 * v35;
    do
    {
      v32[0] = *v19;
      uint64_t v21 = re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(a1 + 53, v32);
      re::internal::destroyPersistent<re::RenderGraphCompiled>((re *)"deleteStaleGraphs", 96, *(re::RenderGraphCompiled **)(a1[54] + 24 * v21 + 8));
      uint64_t v22 = re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(a1 + 53, v32);
      if (v22 != -1)
      {
        uint64_t v23 = (int8x16_t *)(a1[53] + (v22 & 0xFFFFFFFFFFFFFFF0));
        v24.i64[0] = -1;
        v24.i64[1] = -1;
        int8x8_t v25 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v23, v24), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
        if (v25) {
          char v26 = -1;
        }
        else {
          char v26 = 0x80;
        }
        v23->i8[v22 & 0xF] = v26;
        unint64_t v27 = a1[55];
        unint64_t v28 = *(void *)(a1[54] + 24 * v22);
        unint64_t v29 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v28 ^ (v28 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v28 ^ (v28 >> 30))) >> 27));
        a1[58] ^= (v29 >> 31) ^ v29;
        uint64_t v30 = a1[57];
        if (v25) {
          ++v30;
        }
        unint64_t v31 = a1[56] - 1;
        a1[56] = v31;
        a1[57] = v30;
        if (v27 >= 0x11 && v31 < v27 >> 2) {
          re::HashBrown<unsigned long long,re::RenderGraphManager::CachedRenderGraph,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(a1 + 53, 0);
        }
      }
      ++v19;
      v20 -= 8;
    }
    while (v20);
  }
  if (v34[0] && v37) {
    (*(void (**)(void))(*(void *)v34[0] + 40))();
  }
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v38);
}

_anonymous_namespace_ *re::RenderGraphManager::init(re::RenderGraphManager *this, id *a2)
{
  if (*((void *)this + 16))
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) m_resourceAllocationManager was not null before init was called.", "m_resourceAllocationManager == nullptr", "init", 103);
    _os_crash();
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v4 = re::globalAllocators(this);
  uint64_t v5 = (re::RenderGraphResourceAllocationManager *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 1776, 8);
  re::RenderGraphResourceAllocationManager::RenderGraphResourceAllocationManager(v5);
  *((void *)this + 16) = v6;
  re::RenderGraphResourceAllocationManager::init(v6, a2);
  if (*((void *)this + 37))
  {
LABEL_8:
    re::internal::assertLog((re::internal *)4, v8, "assertion failure: '%s' (%s:line %i) m_renderGraphPersistentResourceManager was not null before init was called.", "m_renderGraphPersistentResourceManager == nullptr", "init", 109);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v9 = re::globalAllocators(v7);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9[2] + 32))(v9[2], 120, 8);
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_DWORD *)(v10 + 48) = 0;
  *(void *)(v10 + 52) = 0x7FFFFFFFLL;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_DWORD *)(v10 + 96) = 0;
  *(void *)(v10 + 100) = 0x7FFFFFFFLL;
  *(_DWORD *)(v10 + 112) = 3;
  *((void *)this + 37) = v10;
  *(void *)uint64_t v10 = 0;
  *(void *)(v10 + 8) = a2;
  if (!*re::ObjCObject::operator=((id *)v10, a2 + 23))
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v11, "assertion failure: '%s' (%s:line %i) m_persistentDataManager could not init", "initSuccess", "init", 113);
    double result = (_anonymous_namespace_ *)_os_crash();
    __break(1u);
    return result;
  }
  re::RenderGraphManager::initFullscreenMeshPart((uint64_t)this, a2);
  re::RenderGraphManager::initCubeMeshPart((uint64_t)this, a2);
  *((void *)this + 87) = a2;
  return re::RenderGraphProcessorManager::addDefaultProcessors(this);
}

uint64_t re::RenderGraphManager::initFullscreenMeshPart(uint64_t this, id *a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (!*(void *)(this + 280))
  {
    uint64_t v3 = this;
    uint64_t v21 = 0;
    v18[1] = 0;
    unint64_t v19 = 0;
    v18[0] = 0;
    int v20 = 0;
    re::DynamicArray<re::NamedVertexBuffer>::setCapacity(v18, 3uLL);
    v25[0] = xmmword_2343E12E0;
    v25[1] = unk_2343E12F0;
    v25[2] = xmmword_2343E1300;
    v25[3] = unk_2343E1310;
    uint64_t v4 = (_anonymous_namespace_ *)objc_msgSend(a2[23], sel_newBufferWithBytes_length_options_, v25, 64, 0);
    LOWORD(v16[0]) = 287;
    v16[1] = v4;
    LODWORD(v17) = 0;
    DWORD1(v17) = [(_anonymous_namespace_ *)v4 length];
    *((void *)&v17 + 1) = 0xFFFFFFFF00000000;
    re::DynamicArray<re::NamedVertexBuffer>::add((_anonymous_namespace_ *)v18, (uint64_t)v15);
    if (v16[1])
    {

      v16[1] = 0;
    }
    if (*(void *)&v15[0] && (BYTE8(v15[0]) & 1) != 0) {
      (*(void (**)(void))(**(void **)&v15[0] + 40))();
    }
    if (v4) {

    }
    v24[0] = xmmword_2343E1320;
    v24[1] = unk_2343E1330;
    uint64_t v5 = (_anonymous_namespace_ *)objc_msgSend(a2[23], sel_newBufferWithBytes_length_options_, v24, 32, 0);
    LOWORD(v16[0]) = 285;
    v16[1] = v5;
    LODWORD(v17) = 0;
    DWORD1(v17) = [(_anonymous_namespace_ *)v5 length];
    *((void *)&v17 + 1) = 0xFFFFFFFF00000000;
    re::DynamicArray<re::NamedVertexBuffer>::add((_anonymous_namespace_ *)v18, (uint64_t)v15);
    if (v16[1])
    {

      v16[1] = 0;
    }
    if (*(void *)&v15[0] && (BYTE8(v15[0]) & 1) != 0) {
      (*(void (**)(void))(**(void **)&v15[0] + 40))();
    }
    if (v5) {

    }
    int v23 = 196610;
    uint64_t v22 = 0x200010000;
    uint64_t v6 = (_anonymous_namespace_ *)objc_msgSend(a2[23], sel_newBufferWithBytes_length_options_, &v22, 12, 0);
    LOWORD(v16[0]) = 49;
    v16[1] = v6;
    LODWORD(v17) = 0;
    DWORD1(v17) = [(_anonymous_namespace_ *)v6 length];
    *((void *)&v17 + 1) = 0xFFFFFFFF00000000;
    re::DynamicArray<re::NamedVertexBuffer>::add((_anonymous_namespace_ *)v18, (uint64_t)v15);
    if (v16[1])
    {

      v16[1] = 0;
    }
    uint64_t v7 = *(re **)&v15[0];
    if (*(void *)&v15[0] && (BYTE8(v15[0]) & 1) != 0) {
      uint64_t v7 = (re *)(*(uint64_t (**)(void))(**(void **)&v15[0] + 40))();
    }
    if (v6) {

    }
    *(void *)&long long v8 = 0x7F0000007FLL;
    *((void *)&v8 + 1) = 0x7F0000007FLL;
    v14[0] = vdupq_n_s32(0x7F800000u);
    v14[1] = v8;
    uint64_t v9 = re::globalAllocators(v7);
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9[2] + 32))(v9[2], 560, 16);
    v13[0] = 0x9D2E0E4D76250F84;
    v13[1] = (uint64_t)"FullscreenQuad";
    v15[0] = xmmword_23435FD50;
    v15[1] = xmmword_23435FD60;
    *(_OWORD *)uint64_t v16 = xmmword_23435FD80;
    long long v17 = xmmword_23435FBB0;
    __int16 v12 = 0;
    int v11 = 0;
    *(void *)(v3 + 280) = re::MeshPart::MeshPart(v10, v13, 0, v21, v19, 6, 4, 1, v14, 0, v15, (re::MeshPartFlags *)&v11, -1, 0);
    re::StringID::destroyString((re::StringID *)v13);
    return re::DynamicArray<re::NamedVertexBuffer>::deinit((uint64_t)v18);
  }
  return this;
}

uint64_t re::RenderGraphManager::initCubeMeshPart(uint64_t this, id *a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (!*(void *)(this + 288))
  {
    uint64_t v3 = this;
    uint64_t v25 = 0;
    v22[1] = 0;
    unint64_t v23 = 0;
    v22[0] = 0;
    int v24 = 0;
    re::DynamicArray<re::NamedVertexBuffer>::setCapacity(v22, 2uLL);
    v30[4] = xmmword_2343E1380;
    v30[5] = unk_2343E1390;
    v30[6] = xmmword_2343E13A0;
    v30[7] = unk_2343E13B0;
    v30[0] = xmmword_2343E1340;
    v30[1] = unk_2343E1350;
    v30[2] = xmmword_2343E1360;
    v30[3] = unk_2343E1370;
    uint64_t v4 = (_anonymous_namespace_ *)objc_msgSend(a2[23], sel_newBufferWithBytes_length_options_, v30, 128, 0);
    LOWORD(v27) = 287;
    *((void *)&v27 + 1) = v4;
    LODWORD(v28) = 0;
    DWORD1(v28) = [(_anonymous_namespace_ *)v4 length];
    *((void *)&v28 + 1) = 0xFFFFFFFF00000000;
    re::DynamicArray<re::NamedVertexBuffer>::add((_anonymous_namespace_ *)v22, (uint64_t)v26);
    if (*((void *)&v27 + 1))
    {

      *((void *)&v27 + 1) = 0;
    }
    if (*(void *)&v26[0] && (BYTE8(v26[0]) & 1) != 0) {
      (*(void (**)(void))(**(void **)&v26[0] + 40))();
    }
    if (v4) {

    }
    long long v27 = xmmword_2343E13E0;
    long long v28 = unk_2343E13F0;
    uint64_t v29 = 0x4000300070003;
    v26[0] = xmmword_2343E13C0;
    v26[1] = unk_2343E13D0;
    uint64_t v5 = (_anonymous_namespace_ *)objc_msgSend(a2[23], sel_newBufferWithBytes_length_options_, v26, 72, 0);
    LOWORD(v20[0]) = 49;
    v20[1] = v5;
    LODWORD(v21) = 0;
    DWORD1(v21) = [(_anonymous_namespace_ *)v5 length];
    *((void *)&v21 + 1) = 0xFFFFFFFF00000000;
    re::DynamicArray<re::NamedVertexBuffer>::add((_anonymous_namespace_ *)v22, (uint64_t)v19);
    if (v20[1])
    {

      v20[1] = 0;
    }
    uint64_t v6 = *(re **)&v19[0];
    if (*(void *)&v19[0] && (BYTE8(v19[0]) & 1) != 0) {
      uint64_t v6 = (re *)(*(uint64_t (**)(void))(**(void **)&v19[0] + 40))();
    }
    if (v5) {

    }
    __asm
    {
      FMOV            V0.4S, #-1.0
      FMOV            V1.4S, #1.0
    }
    v18[0] = _Q0;
    v18[1] = _Q1;
    uint64_t v13 = re::globalAllocators(v6);
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13[2] + 32))(v13[2], 560, 16);
    v17[0] = 0x38C142D1FC4;
    v17[1] = (uint64_t)"CubeMesh";
    v19[0] = xmmword_23435FD50;
    v19[1] = xmmword_23435FD60;
    *(_OWORD *)int v20 = xmmword_23435FD80;
    long long v21 = xmmword_23435FBB0;
    __int16 v16 = 0;
    int v15 = 0;
    *(void *)(v3 + 288) = re::MeshPart::MeshPart(v14, v17, 0, v25, v23, 36, 8, 1, v18, 0, v19, (re::MeshPartFlags *)&v15, -1, 0);
    re::StringID::destroyString((re::StringID *)v17);
    return re::DynamicArray<re::NamedVertexBuffer>::deinit((uint64_t)v22);
  }
  return this;
}

re *re::internal::destroyPersistent<re::RenderGraphProviderBase>(re *result, uint64_t a2, void (***a3)(void))
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    (**a3)(a3);
    uint64_t v5 = *(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

uint64_t re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>::tryGet(uint64_t a1, int *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v2 = *a2;
  unint64_t v3 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) >> 27));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((v3 ^ (v3 >> 31)) % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(_DWORD *)(v6 + 56 * v4 + 12) != v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 56 * v4 + 8) & 0x7FFFFFFF;
      if (v4 == 0x7FFFFFFF) {
        break;
      }
      if (*(_DWORD *)(v6 + 56 * v4 + 12) == v2) {
        return v6 + 56 * v4 + 16;
      }
    }
    return 0;
  }
  return v6 + 56 * v4 + 16;
}

uint64_t re::RenderGraphManager::cachePrioritizedProviders(uint64_t a1, StringID *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  unint64_t v8 = *(unsigned int *)(a3 + 28);
  uint64_t v62 = 0;
  v59[1] = 0;
  unint64_t v60 = 0;
  int v61 = 0;
  v59[0] = a4;
  re::DynamicArray<int>::setCapacity(v59, v8);
  ++v61;
  uint64_t v9 = *(unsigned int *)(a3 + 32);
  if (v9)
  {
    uint64_t v10 = 0;
    int v11 = (int *)(*(void *)(a3 + 16) + 8);
    while (1)
    {
      int v12 = *v11;
      v11 += 14;
      if (v12 < 0) {
        break;
      }
      if (v9 == ++v10)
      {
        LODWORD(v10) = *(_DWORD *)(a3 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v10) = 0;
  }
  if (v9 != v10)
  {
    uint64_t v13 = v10;
    uint64_t v14 = *(void *)(a3 + 16);
    do
    {
      re::DynamicArray<int>::add(v59, (_DWORD *)(v14 + 56 * v13 + 12));
      uint64_t v14 = *(void *)(a3 + 16);
      if (*(_DWORD *)(a3 + 32) <= (v10 + 1)) {
        int v15 = v10 + 1;
      }
      else {
        int v15 = *(_DWORD *)(a3 + 32);
      }
      int v16 = v10;
      while (1)
      {
        uint64_t v13 = (v16 + 1);
        if (v15 - 1 == v16) {
          break;
        }
        ++v16;
        LODWORD(v10) = v13;
        if ((*(_DWORD *)(v14 + 56 * v13 + 8) & 0x80000000) != 0) {
          goto LABEL_17;
        }
      }
      LODWORD(v10) = v15;
LABEL_17:
      ;
    }
    while (v9 != v10);
  }
  std::__sort<std::__less<int,int> &,int *>();
  uint64_t v18 = v60;
  unint64_t v57 = v60;
  uint64_t v58 = 0;
  uint64_t v56 = a4;
  if (v60)
  {
    if (v60 >> 61)
    {
LABEL_66:
      re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, v18);
      _os_crash();
      __break(1u);
LABEL_67:
      re::internal::assertLog((re::internal *)4, v20, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
    }
    unint64_t v19 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a4 + 32))(a4, 8 * v60, 8);
    uint64_t v58 = v19;
    if (!v19) {
      goto LABEL_67;
    }
    long long v21 = v19;
    uint64_t v22 = v19;
    if (v18 != 1)
    {
      bzero(v19, 8 * v18 - 8);
      uint64_t v22 = &v21[v18 - 1];
    }
    *uint64_t v22 = 0;
    unint64_t v23 = v60;
    if (v60)
    {
      uint64_t v24 = 0;
      unint64_t v25 = *(unsigned int *)(a3 + 24);
      while (1)
      {
        if (*(void *)a3
          && (unint64_t v26 = *(int *)(v62 + 4 * v24),
              unint64_t v27 = 0x94D049BB133111EBLL
                  * ((0xBF58476D1CE4E5B9 * (v26 ^ (v26 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v26 ^ (v26 >> 30))) >> 27)),
              uint64_t v28 = *(unsigned int *)(*(void *)(a3 + 8) + 4 * ((v27 ^ (v27 >> 31)) % v25)),
              v28 != 0x7FFFFFFF))
        {
          uint64_t v30 = *(void *)(a3 + 16);
          int v31 = *(_DWORD *)(v30 + 56 * v28 + 12);
          for (uint64_t i = v28; v31 != v26; LODWORD(v28) = i)
          {
            uint64_t i = *(_DWORD *)(v30 + 56 * i + 8) & 0x7FFFFFFF;
            LODWORD(v28) = 0x7FFFFFFF;
            if (i == 0x7FFFFFFF) {
              break;
            }
            int v31 = *(_DWORD *)(v30 + 56 * i + 12);
          }
        }
        else
        {
          LODWORD(v28) = 0x7FFFFFFF;
        }
        if (v24 == v18) {
          break;
        }
        uint64_t v29 = *(void *)(a3 + 16) + 56 * v28;
        v21[v24++] = *(void *)(*(void *)(v29 + 48) + 8 * *(void *)(v29 + 32) - 8);
        if (v24 == v23) {
          goto LABEL_35;
        }
      }
      uint64_t v63 = 0;
      long long v75 = 0u;
      long long v76 = 0u;
      long long v73 = 0u;
      long long v74 = 0u;
      long long v72 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v64 = 136315906;
      uint64_t v65 = "operator[]";
      __int16 v66 = 1024;
      int v67 = 468;
      __int16 v68 = 2048;
      uint64_t v69 = v18;
      __int16 v70 = 2048;
      uint64_t v71 = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_66;
    }
  }
LABEL_35:
  uint64_t v55 = a4;
  if (*(void *)(a1 + 184))
  {
    unint64_t v33 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
    unint64_t v34 = ((0x94D049BB133111EBLL * (v33 ^ (v33 >> 27))) ^ ((0x94D049BB133111EBLL * (v33 ^ (v33 >> 27))) >> 31))
        % *(unsigned int *)(a1 + 208);
    uint64_t v35 = *(void *)(a1 + 192);
    uint64_t v36 = *(unsigned int *)(v35 + 4 * v34);
    if (v36 != 0x7FFFFFFF)
    {
      uint64_t v37 = *(void *)(a1 + 200);
      if (re::StringID::operator==((void *)(v37 + 48 * v36 + 8), a2))
      {
        *(_DWORD *)(v35 + 4 * v34) = *(_DWORD *)(v37 + 48 * v36) & 0x7FFFFFFF;
LABEL_42:
        re::HashTable<re::StringID,re::FixedArray<re::RenderGraphProviderBase const*>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free((uint64_t *)(*(void *)(a1 + 200) + 48 * v36));
        *(_DWORD *)(*(void *)(a1 + 200) + 48 * v36) = *(_DWORD *)(*(void *)(a1 + 200) + 48 * v36) & 0x80000000 | *(_DWORD *)(a1 + 220);
        --*(_DWORD *)(a1 + 212);
        int v40 = *(_DWORD *)(a1 + 224) + 1;
        *(_DWORD *)(a1 + 220) = v36;
        *(_DWORD *)(a1 + 224) = v40;
      }
      else
      {
        while (1)
        {
          unsigned int v38 = v36;
          int v39 = *(_DWORD *)(v37 + 48 * v36);
          uint64_t v36 = v39 & 0x7FFFFFFF;
          if ((v39 & 0x7FFFFFFF) == 0x7FFFFFFF) {
            break;
          }
          if (re::StringID::operator==((void *)(v37 + 48 * v36 + 8), a2))
          {
            *(_DWORD *)(v37 + 48 * v38) = *(_DWORD *)(v37 + 48 * v38) & 0x80000000 | *(_DWORD *)(v37 + 48 * v36) & 0x7FFFFFFF;
            goto LABEL_42;
          }
        }
      }
    }
  }
  if (v18)
  {
    uint64_t v41 = a2;
    unint64_t v42 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
    unint64_t v43 = (0x94D049BB133111EBLL * (v42 ^ (v42 >> 27))) ^ ((0x94D049BB133111EBLL * (v42 ^ (v42 >> 27))) >> 31);
    if (*(void *)(a1 + 184))
    {
      unint64_t v44 = v43 % *(unsigned int *)(a1 + 208);
      uint64_t v45 = *(unsigned int *)(*(void *)(a1 + 192) + 4 * v44);
      if (v45 != 0x7FFFFFFF)
      {
        uint64_t v46 = *(void *)(a1 + 200);
        while (!re::StringID::operator==((void *)(v46 + 48 * v45 + 8), v41))
        {
          uint64_t v45 = *(_DWORD *)(v46 + 48 * v45) & 0x7FFFFFFF;
          if (v45 == 0x7FFFFFFF) {
            goto LABEL_51;
          }
        }
        BOOL v53 = 0;
        uint64_t v52 = v55;
        if (!v55) {
          goto LABEL_59;
        }
LABEL_57:
        if (!v53) {
          (*(void (**)(uint64_t, void *))(*(void *)v52 + 40))(v52, v58);
        }
        goto LABEL_59;
      }
    }
    else
    {
      LODWORD(v44) = 0;
    }
LABEL_51:
    uint64_t v47 = *(unsigned int *)(a1 + 220);
    if (v47 == 0x7FFFFFFF)
    {
      uint64_t v47 = *(unsigned int *)(a1 + 216);
      int v48 = v47;
      if (v47 == *(_DWORD *)(a1 + 208))
      {
        re::HashTable<re::StringID,re::FixedArray<re::RenderGraphProviderBase const*>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1 + 184, 2 * *(_DWORD *)(a1 + 212));
        LODWORD(v44) = v43 % *(unsigned int *)(a1 + 208);
        int v48 = *(_DWORD *)(a1 + 216);
      }
      *(_DWORD *)(a1 + 216) = v48 + 1;
      uint64_t v49 = *(void *)(a1 + 200);
      int v50 = *(_DWORD *)(v49 + 48 * v47);
    }
    else
    {
      uint64_t v49 = *(void *)(a1 + 200);
      int v50 = *(_DWORD *)(v49 + 48 * v47);
      *(_DWORD *)(a1 + 220) = v50 & 0x7FFFFFFF;
    }
    uint64_t v51 = 48 * v47;
    *(_DWORD *)(v49 + v51) = v50 | 0x80000000;
    *(_DWORD *)(*(void *)(a1 + 200) + v51) = *(_DWORD *)(*(void *)(a1 + 200) + 48 * v47) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 192) + 4 * v44);
    re::StringID::StringID((re::StringID *)(*(void *)(a1 + 200) + 48 * v47 + 8), v41);
    re::FixedArray<re::RenderGraphProviderBase const*>::FixedArray((uint64_t *)(*(void *)(a1 + 200) + 48 * v47 + 24), (uint64_t)&v56);
    *(_DWORD *)(*(void *)(a1 + 192) + 4 * v44) = v47;
    ++*(_DWORD *)(a1 + 212);
    ++*(_DWORD *)(a1 + 224);
    uint64_t v52 = v56;
    BOOL v53 = v57 == 0;
    if (!v56) {
      goto LABEL_59;
    }
    goto LABEL_57;
  }
LABEL_59:
  uint64_t result = v59[0];
  if (v59[0])
  {
    if (v62) {
      return (*(uint64_t (**)(void))(*(void *)v59[0] + 40))();
    }
  }
  return result;
}

void re::RenderGraphManager::addProviderInternal(re::RenderGraphManager *this@<X0>, const char *a2@<X1>, const re::RenderGraphProviderBase *a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v55 = a4;
  *(void *)&v54.var0 = 0;
  v54.var1 = "";
  uint64_t v11 = re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 136, &v54);
  if (v11) {
    goto LABEL_13;
  }
  long long v52 = 0u;
  long long v53 = 0u;
  long long v51 = 0u;
  DWORD1(v53) = 0x7FFFFFFF;
  unint64_t v12 = *(void *)&v54.var0;
  unint64_t v13 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * ((v12 >> 31) ^ (v12 >> 1))) ^ ((0xBF58476D1CE4E5B9 * ((v12 >> 31) ^ (v12 >> 1))) >> 27));
  unint64_t v14 = v13 ^ (v13 >> 31);
  int v49 = a5;
  if (!*((void *)this + 17))
  {
    LODWORD(v16) = 0;
    goto LABEL_11;
  }
  unint64_t v15 = *((unsigned int *)this + 40);
  unint64_t v16 = v14 % v15;
  uint64_t v17 = *(unsigned int *)(*((void *)this + 18) + 4 * (v14 % v15));
  if (v17 == 0x7FFFFFFF)
  {
LABEL_11:
    re::HashTable<re::StringID,re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove((uint64_t)this + 136, v16, v14, &v54, (uint64_t)&v51);
    ++*((_DWORD *)this + 44);
    goto LABEL_12;
  }
  unint64_t v47 = v14 % v15;
  uint64_t v18 = *((void *)this + 19);
  var1 = v54.var1;
  while (1)
  {
    if ((*(void *)(v18 + 72 * v17 + 8) ^ v12) <= 1)
    {
      uint64_t v20 = *(const char **)(v18 + 72 * v17 + 16);
      if (v20 == var1 || !strcmp(v20, var1)) {
        break;
      }
    }
    uint64_t v17 = *(_DWORD *)(v18 + 72 * v17) & 0x7FFFFFFF;
    if (v17 == 0x7FFFFFFF)
    {
      LODWORD(v16) = v47;
      goto LABEL_11;
    }
  }
LABEL_12:
  re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>::deinit((uint64_t *)&v51);
  uint64_t v11 = re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 136, &v54);
  a5 = v49;
  if (!v11)
  {
    re::internal::assertLog((re::internal *)4, v21, "assertion failure: '%s' (%s:line %i) ", "provideType != nullptr", "addProviderInternal", 209);
    _os_crash();
    __break(1u);
    goto LABEL_54;
  }
LABEL_13:
  uint64_t v22 = re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>::tryGet(v11, &v55);
  if (v22) {
    goto LABEL_25;
  }
  *(void *)&long long v53 = 0;
  *(void *)&long long v52 = 0;
  long long v51 = 0uLL;
  DWORD2(v52) = 0;
  unint64_t v23 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v55 ^ ((unint64_t)v55 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                          * (v55 ^ ((unint64_t)v55 >> 30))) >> 27));
  unint64_t v24 = v23 ^ (v23 >> 31);
  if (*(void *)v11)
  {
    unint64_t v25 = v24 % *(unsigned int *)(v11 + 24);
    uint64_t v26 = *(unsigned int *)(*(void *)(v11 + 8) + 4 * v25);
    if (v26 != 0x7FFFFFFF)
    {
      uint64_t v27 = *(void *)(v11 + 16);
      if (*(_DWORD *)(v27 + 56 * v26 + 12) == v55) {
        goto LABEL_24;
      }
      while (1)
      {
        LODWORD(v26) = *(_DWORD *)(v27 + 56 * v26 + 8) & 0x7FFFFFFF;
        if (v26 == 0x7FFFFFFF) {
          break;
        }
        if (*(_DWORD *)(v27 + 56 * v26 + 12) == v55) {
          goto LABEL_24;
        }
      }
    }
  }
  else
  {
    LODWORD(v25) = 0;
  }
  re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>::addAsMove(v11, v25, v24, &v55, (uint64_t)&v51);
  ++*(_DWORD *)(v11 + 40);
  if ((void)v51 && (void)v53) {
    (*(void (**)(void))(*(void *)v51 + 40))();
  }
LABEL_24:
  uint64_t v22 = re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>::tryGet(v11, &v55);
  if (v22)
  {
LABEL_25:
    re::StringID::invalid((re::StringID *)a6);
    *(void *)(a6 + 16) = 0;
    uint64_t v29 = (_anonymous_namespace_ *)re::StringID::operator=((unint64_t *)a6, (uint64_t *)&v54);
    *(_DWORD *)(a6 + 16) = v55;
    unint64_t v30 = *(void *)(v22 + 16);
    *(_DWORD *)(a6 + 20) = v30;
    unint64_t v31 = *(void *)(v22 + 8);
    if (v30 >= v31)
    {
      unint64_t v32 = v30 + 1;
      if (v31 < v30 + 1)
      {
        if (*(void *)v22)
        {
          unint64_t v33 = 2 * v31;
          if (!v31) {
            unint64_t v33 = 8;
          }
          if (v33 <= v32) {
            unint64_t v34 = v32;
          }
          else {
            unint64_t v34 = v33;
          }
          uint64_t v29 = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity((void *)v22, v34);
        }
        else
        {
          uint64_t v29 = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity((void *)v22, v32);
          ++*(_DWORD *)(v22 + 24);
        }
      }
      unint64_t v30 = *(void *)(v22 + 16);
    }
    *(void *)(*(void *)(v22 + 32) + 8 * v30) = a3;
    *(void *)(v22 + 16) = v30 + 1;
    ++*(_DWORD *)(v22 + 24);
    if (a5)
    {
      re::StringID::StringID((re::StringID *)&v51, (const StringID *)a6);
      *(void *)&long long v52 = *(void *)(a6 + 16);
      unint64_t v35 = re::Hash<re::ProviderHandle>::operator()((uint64_t)&v56, (uint64_t)&v51);
      re::StringID::destroyString((re::StringID *)&v51);
      unint64_t v36 = *((unsigned int *)this + 64);
      if (v36)
      {
        unint64_t v37 = v35 % v36;
        uint64_t v38 = *(unsigned int *)(*((void *)this + 30) + 4 * (v35 % v36));
        if (v38 != 0x7FFFFFFF)
        {
          unint64_t v48 = v35 % v36;
          unint64_t v50 = v35;
          uint64_t v39 = *((void *)this + 31);
          int v40 = *(_DWORD *)(a6 + 16);
          int v41 = *(_DWORD *)(a6 + 20);
          while (1)
          {
            uint64_t v29 = (_anonymous_namespace_ *)re::StringID::operator==((void *)(v39 + 40 * v38 + 16), (void *)a6);
            if (v29)
            {
              if (*(_DWORD *)(v39 + 40 * v38 + 32) == v40 && *(_DWORD *)(v39 + 40 * v38 + 36) == v41) {
                goto LABEL_52;
              }
            }
            uint64_t v38 = *(_DWORD *)(v39 + 40 * v38 + 8) & 0x7FFFFFFF;
            if (v38 == 0x7FFFFFFF)
            {
              LODWORD(v37) = v48;
              unint64_t v35 = v50;
              break;
            }
          }
        }
      }
      else
      {
        LODWORD(v37) = 0;
      }
      uint64_t v42 = *((unsigned int *)this + 67);
      if (v42 == 0x7FFFFFFF)
      {
        uint64_t v42 = *((unsigned int *)this + 66);
        int v43 = v42;
        if (v42 == v36)
        {
          re::HashSetBase<re::ProviderHandle,re::ProviderHandle,re::internal::ValueAsKey<re::ProviderHandle>,re::Hash<re::ProviderHandle>,re::EqualTo<re::ProviderHandle>,true,false>::setCapacity((uint64_t)this + 232, 2 * *((_DWORD *)this + 65));
          LODWORD(v37) = v35 % *((unsigned int *)this + 64);
          int v43 = *((_DWORD *)this + 66);
        }
        *((_DWORD *)this + 66) = v43 + 1;
        uint64_t v44 = *((void *)this + 31);
        int v45 = *(_DWORD *)(v44 + 40 * v42 + 8);
      }
      else
      {
        uint64_t v44 = *((void *)this + 31);
        int v45 = *(_DWORD *)(v44 + 40 * v42 + 8);
        *((_DWORD *)this + 67) = v45 & 0x7FFFFFFF;
      }
      *(_DWORD *)(v44 + 40 * v42 + 8) = v45 | 0x80000000;
      *(_DWORD *)(*((void *)this + 31) + 40 * v42 + 8) = *(_DWORD *)(*((void *)this + 31) + 40 * v42 + 8) & 0x80000000 | *(_DWORD *)(*((void *)this + 30) + 4 * v37);
      *(void *)(*((void *)this + 31) + 40 * v42) = v35;
      uint64_t v46 = *((void *)this + 31) + 40 * v42;
      uint64_t v29 = re::StringID::StringID((re::StringID *)(v46 + 16), (const StringID *)a6);
      *(void *)(v46 + 32) = *(void *)(a6 + 16);
      *(_DWORD *)(*((void *)this + 30) + 4 * v37) = v42;
      ++*((_DWORD *)this + 65);
      ++*((_DWORD *)this + 68);
    }
LABEL_52:
    re::StringID::destroyString((re::StringID *)&v54);
    return;
  }
LABEL_54:
  re::internal::assertLog((re::internal *)4, v28, "assertion failure: '%s' (%s:line %i) ", "provideOrder != nullptr", "addProviderInternal", 216);
  _os_crash();
  __break(1u);
}

uint64_t re::RenderGraphManager::addProvider@<X0>(re *a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  unint64_t v12 = re::globalAllocators(a1);
  unint64_t v13 = (const re::RenderGraphProviderBase *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12[2]
                                                                                                  + 32))(v12[2], 120, 8);
  uint64_t v14 = re::RenderGraphManager::providerCount(a1, a2);
  re::DynamicString::format((re::DynamicString *)"%s_%zu", (re::DynamicString *)&v16, a2, v14);
  uint64_t v22 = *(void *)(a3 + 24);
  uint64_t v23 = 0;
  re::FunctionBase<24ul,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::operator=<24ul>((uint64_t)v21, a3);
  uint64_t v19 = *(void *)(a4 + 24);
  uint64_t v20 = 0;
  re::FunctionBase<24ul,void ()(char const*,char const*,re::RenderFrame &)>::operator=<24ul>((uint64_t)v18, a4);
  re::InlineRenderGraphProvider::InlineRenderGraphProvider(v13, (const re::DynamicString *)&v16, (uint64_t)v21, (uint64_t)v18);
  re::RenderGraphManager::addProviderInternal(a1, a2, v13, a5, 1, a6);
  re::FunctionBase<24ul,void ()(char const*,char const*,re::RenderFrame &)>::destroyCallable((uint64_t)v18);
  re::FunctionBase<24ul,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::destroyCallable((uint64_t)v21);
  uint64_t result = v16;
  if (v16)
  {
    if (v17) {
      return (*(uint64_t (**)(void))(*(void *)v16 + 40))();
    }
  }
  return result;
}

uint64_t re::RenderGraphManager::providerCount(re::RenderGraphManager *this, const char *a2)
{
  unint64_t v3 = (char *)this + 136;
  v6[0] = 0;
  v6[1] = "";
  uint64_t v4 = re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  if (v4) {
    return *(unsigned int *)(v4 + 28);
  }
  else {
    return 0;
  }
}

uint64_t re::RenderGraphManager::removeProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 136;
  uint64_t result = re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 136, (void *)a2);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t result = re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>::tryGet(result, (int *)(a2 + 16));
    if (result)
    {
      uint64_t v7 = result;
      unint64_t v8 = *(unsigned int *)(a2 + 20);
      if (*(void *)(result + 16) <= v8)
      {
        return 0;
      }
      else
      {
        uint64_t v9 = *(void *)(*(void *)(result + 32) + 8 * v8);
        re::DynamicArray<re::Allocator const*>::removeStableAt((void *)result, v8);
        uint64_t v10 = re::HashSetBase<re::ProviderHandle,re::ProviderHandle,re::internal::ValueAsKey<re::ProviderHandle>,re::Hash<re::ProviderHandle>,re::EqualTo<re::ProviderHandle>,true,false>::contains(a1 + 232, a2);
        if (v10)
        {
          uint64_t v11 = v9;
          re::DynamicArray<re::TransitionCondition *>::add((void *)(a1 + 632), &v11);
          uint64_t v10 = re::HashSetBase<re::ProviderHandle,re::ProviderHandle,re::internal::ValueAsKey<re::ProviderHandle>,re::Hash<re::ProviderHandle>,re::EqualTo<re::ProviderHandle>,true,false>::remove(a1 + 232, a2);
        }
        if (!*(void *)(v7 + 16)) {
          uint64_t v10 = re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>::remove(v6, (int *)(a2 + 16));
        }
        if (!*(_DWORD *)(v6 + 28)) {
          uint64_t v10 = re::HashTable<re::StringID,re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v4, (void *)a2);
        }
        return 1;
      }
    }
  }
  return result;
}

BOOL re::HashSetBase<re::ProviderHandle,re::ProviderHandle,re::internal::ValueAsKey<re::ProviderHandle>,re::Hash<re::ProviderHandle>,re::EqualTo<re::ProviderHandle>,true,false>::contains(uint64_t a1, uint64_t a2)
{
  re::StringID::StringID((re::StringID *)v11, (const StringID *)a2);
  _OWORD v11[2] = *(void *)(a2 + 16);
  unint64_t v4 = re::Hash<re::ProviderHandle>::operator()((uint64_t)&v12, (uint64_t)v11);
  re::StringID::destroyString((re::StringID *)v11);
  unint64_t v5 = *(unsigned int *)(a1 + 24);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % v5));
  if (v6 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  int v8 = *(_DWORD *)(a2 + 16);
  int v9 = *(_DWORD *)(a2 + 20);
  while (1)
  {
    BOOL result = re::StringID::operator==((void *)(v7 + 40 * v6 + 16), (void *)a2);
    if (result && *(_DWORD *)(v7 + 40 * v6 + 32) == v8 && *(_DWORD *)(v7 + 40 * v6 + 36) == v9) {
      break;
    }
    uint64_t v6 = *(_DWORD *)(v7 + 40 * v6 + 8) & 0x7FFFFFFF;
    if (v6 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return result;
}

uint64_t re::HashSetBase<re::ProviderHandle,re::ProviderHandle,re::internal::ValueAsKey<re::ProviderHandle>,re::Hash<re::ProviderHandle>,re::EqualTo<re::ProviderHandle>,true,false>::remove(uint64_t a1, uint64_t a2)
{
  re::StringID::StringID((re::StringID *)v22, (const StringID *)a2);
  uint64_t v23 = *(void *)(a2 + 16);
  unint64_t v4 = re::Hash<re::ProviderHandle>::operator()((uint64_t)&v24, (uint64_t)v22);
  re::StringID::destroyString((re::StringID *)v22);
  unint64_t v5 = *(unsigned int *)(a1 + 24);
  if (!v5) {
    return 0;
  }
  unint64_t v6 = v4 % v5;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(unsigned int *)(v7 + 4 * (v4 % v5));
  if (v8 == 0x7FFFFFFF) {
    return 0;
  }
  unint64_t v21 = v6;
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = 0x7FFFFFFFLL;
  int v12 = *(_DWORD *)(a2 + 16);
  int v11 = *(_DWORD *)(a2 + 20);
  while (!re::StringID::operator==((void *)(v9 + 40 * v8 + 16), (void *)a2)
       || *(_DWORD *)(v9 + 40 * v8 + 32) != v12
       || *(_DWORD *)(v9 + 40 * v8 + 36) != v11)
  {
    uint64_t v10 = v8;
    uint64_t v8 = *(_DWORD *)(v9 + 40 * v8 + 8) & 0x7FFFFFFF;
    if (v8 == 0x7FFFFFFF) {
      return 0;
    }
  }
  int v14 = *(_DWORD *)(v9 + 40 * v8 + 8) & 0x7FFFFFFF;
  if (v10 == 0x7FFFFFFF) {
    *(_DWORD *)(v7 + 4 * v21) = v14;
  }
  else {
    *(_DWORD *)(v9 + 40 * v10 + 8) = *(_DWORD *)(v9 + 40 * v10 + 8) & 0x80000000 | v14;
  }
  uint64_t v15 = *(void *)(a1 + 16);
  uint64_t v16 = v15 + 40 * v8;
  int v19 = *(_DWORD *)(v16 + 8);
  uint64_t v18 = (int *)(v16 + 8);
  int v17 = v19;
  if (v19 < 0)
  {
    *uint64_t v18 = v17 & 0x7FFFFFFF;
    re::StringID::destroyString((re::StringID *)(v15 + 40 * v8 + 16));
    uint64_t v15 = *(void *)(a1 + 16);
    int v17 = *(_DWORD *)(v15 + 40 * v8 + 8);
  }
  *(_DWORD *)(v15 + 40 * v8 + 8) = *(_DWORD *)(a1 + 36) | v17 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  int v20 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 36) = v8;
  *(_DWORD *)(a1 + 40) = v20;
  return 1;
}

uint64_t re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>::remove(uint64_t a1, int *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v3 = *a2;
  unint64_t v4 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v3 ^ (v3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v3 ^ (v3 >> 30))) >> 27));
  unint64_t v5 = (v4 ^ (v4 >> 31)) % *(unsigned int *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(v6 + 4 * v5);
  if (v7 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  if (*(_DWORD *)(v9 + 56 * v7 + 12) != v3)
  {
    while (1)
    {
      unsigned int v10 = v7;
      int v11 = *(_DWORD *)(v9 + 56 * v7 + 8);
      uint64_t v7 = v11 & 0x7FFFFFFF;
      if ((v11 & 0x7FFFFFFF) == 0x7FFFFFFF) {
        return 0;
      }
      if (*(_DWORD *)(v9 + 56 * v7 + 12) == v3)
      {
        *(_DWORD *)(v9 + 56 * v10 + 8) = *(_DWORD *)(v9 + 56 * v10 + 8) & 0x80000000 | *(_DWORD *)(v9 + 56 * v7 + 8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v9 + 56 * v7 + 8) & 0x7FFFFFFF;
LABEL_9:
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = v12 + 56 * v7;
  int v16 = *(_DWORD *)(v13 + 8);
  uint64_t v15 = (int *)(v13 + 8);
  int v14 = v16;
  if (v16 < 0)
  {
    *uint64_t v15 = v14 & 0x7FFFFFFF;
    re::DynamicArray<unsigned long>::deinit(v12 + 56 * v7 + 16);
    uint64_t v12 = *(void *)(a1 + 16);
    int v14 = *(_DWORD *)(v12 + 56 * v7 + 8);
  }
  int v17 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v12 + 56 * v7 + 8) = *(_DWORD *)(a1 + 36) | v14 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 40) = v17 + 1;
  return 1;
}

uint64_t re::HashTable<re::StringID,re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(uint64_t a1, void *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v4 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  unint64_t v5 = ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
     % *(unsigned int *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(v6 + 4 * v5);
  if (v7 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  if (!re::StringID::operator==((void *)(v9 + 72 * v7 + 8), a2))
  {
    while (1)
    {
      unsigned int v10 = v7;
      int v11 = *(_DWORD *)(v9 + 72 * v7);
      uint64_t v7 = v11 & 0x7FFFFFFF;
      if ((v11 & 0x7FFFFFFF) == 0x7FFFFFFF) {
        return 0;
      }
      if (re::StringID::operator==((void *)(v9 + 72 * v7 + 8), a2))
      {
        *(_DWORD *)(v9 + 72 * v10) = *(_DWORD *)(v9 + 72 * v10) & 0x80000000 | *(_DWORD *)(v9
                                                                                             + 72 * v7) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v9 + 72 * v7) & 0x7FFFFFFF;
LABEL_9:
  re::HashTable<re::StringID,re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(*(void *)(a1 + 16) + 72 * v7);
  int v12 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(*(void *)(a1 + 16) + 72 * v7) = *(_DWORD *)(*(void *)(a1 + 16) + 72 * v7) & 0x80000000 | *(_DWORD *)(a1 + 36);
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 40) = v12 + 1;
  return 1;
}

void re::RenderGraphManager::getProviderPointers(re::RenderGraphManager *this@<X0>, const char *__s2@<X1>, re::Allocator *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (__s2)
  {
    uint64_t v7 = *__s2;
    if (*__s2)
    {
      char v8 = __s2[1];
      if (v8)
      {
        uint64_t v9 = __s2 + 2;
        do
        {
          uint64_t v7 = 31 * v7 + v8;
          int v10 = *(unsigned __int8 *)v9++;
          char v8 = v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  unint64_t v11 = 2 * v7;
  *(void *)buf = 2 * v7;
  *(void *)&buf[8] = __s2;
  if (!*((void *)this + 23)
    || (unint64_t v12 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v7 & 0x7FFFFFFFFFFFFFFFLL ^ (v11 >> 31))) ^ ((0xBF58476D1CE4E5B9
                                                                                    * (v7 & 0x7FFFFFFFFFFFFFFFLL ^ (v11 >> 31))) >> 27)),
        uint64_t v13 = *(unsigned int *)(*((void *)this + 24) + 4 * ((v12 ^ (v12 >> 31)) % *((unsigned int *)this + 52))),
        v13 == 0x7FFFFFFF))
  {
LABEL_15:
    re::StringID::destroyString((re::StringID *)buf);
    int v17 = *re::graphicsLogObjects(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(void *)&buf[4] = __s2;
      _os_log_impl(&dword_233120000, v17, OS_LOG_TYPE_DEFAULT, "Attempted to emit graph of type %s but no cached providers were found.", buf, 0xCu);
    }
    a4[1] = 0;
    a4[2] = 0;
    *a4 = (uint64_t)a3;
  }
  else
  {
    uint64_t v14 = *((void *)this + 25);
    while (1)
    {
      if ((*(void *)(v14 + 48 * v13 + 8) ^ v11) <= 1)
      {
        uint64_t v15 = *(const char **)(v14 + 48 * v13 + 16);
        if (v15 == __s2 || !strcmp(v15, __s2)) {
          break;
        }
      }
      uint64_t v13 = *(_DWORD *)(v14 + 48 * v13) & 0x7FFFFFFF;
      if (v13 == 0x7FFFFFFF) {
        goto LABEL_15;
      }
    }
    re::StringID::destroyString((re::StringID *)buf);
    uint64_t v18 = v14 + 48 * v13;
    unint64_t v20 = *(void *)(v18 + 32);
    int v19 = *(const void **)(v18 + 40);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    re::FixedArray<unsigned long>::init<>(a4, (uint64_t)a3, v20);
    if (a4[1] != v20)
    {
      re::internal::assertLog((re::internal *)4, v21, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378, *(_OWORD *)buf);
      _os_crash();
      __break(1u);
    }
    if (v20)
    {
      uint64_t v22 = (void *)a4[2];
      memmove(v22, v19, 8 * v20);
    }
  }
}

re *re::RenderGraphManager::deleteRemovedProviders(re *this)
{
  v1 = this;
  uint64_t v2 = *((void *)this + 81);
  if (v2)
  {
    unint64_t v3 = (void (****)(void))*((void *)this + 83);
    uint64_t v4 = 8 * v2;
    do
    {
      unint64_t v5 = *v3++;
      this = re::internal::destroyPersistent<re::RenderGraphProviderBase>((re *)"deleteRemovedProviders", 302, v5);
      v4 -= 8;
    }
    while (v4);
  }
  *((void *)v1 + 81) = 0;
  ++*((_DWORD *)v1 + 164);
  return this;
}

std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep re::RenderGraphManager::checkDisableTimeouts(std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep this)
{
  uint64_t v1 = this;
  if (*(unsigned char *)(this + 412))
  {
    this = std::chrono::steady_clock::now().__d_.__rep_;
    double v2 = 0.0;
    if (*(unsigned char *)(v1 + 400)) {
      double v2 = 1.0;
    }
    if (*(double *)(v1 + 392) + (double)(this - *(void *)(v1 + 384)) / 1000000000.0 * v2 > *(float *)(v1 + 408)) {
      *(unsigned char *)(v1 + 412) = 0;
    }
  }
  if (*(unsigned char *)(v1 + 380) && *(float *)(v1 + 376) > 0.0)
  {
    this = std::chrono::steady_clock::now().__d_.__rep_;
    double v3 = 0.0;
    if (*(unsigned char *)(v1 + 368)) {
      double v3 = 1.0;
    }
    if (*(double *)(v1 + 360) + (double)(this - *(void *)(v1 + 352)) / 1000000000.0 * v3 > *(float *)(v1 + 376)) {
      *(unsigned char *)(v1 + 380) = 0;
    }
  }
  return this;
}

uint64_t re::RenderGraphManager::processRenderGraphErrors(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 344);
  if (result)
  {
    *(unsigned char *)(a1 + 416) = 1;
    uint64_t v5 = *(void *)(a2 + 3168);
    v7[0] = *(void *)(a2 + 3184);
    v7[1] = v5;
    uint64_t v6 = a3;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)result + 16))(result, &v6, v7);
    *(unsigned char *)(a1 + 416) = 0;
  }
  return result;
}

std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep re::RenderGraphManager::disableFileProviders(std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep this, float a2)
{
  if (a2 > 0.0 && *(unsigned char *)(this + 416) != 0)
  {
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v3 = this;
    *(unsigned char *)(this + 412) = 1;
    if (a2 > 2.0) {
      a2 = 2.0;
    }
    *(float *)(this + 408) = a2;
    *(void *)(this + 384) = 0;
    *(void *)(this + 392) = 0;
    *(unsigned char *)(this + 400) = 0;
    this = std::chrono::steady_clock::now().__d_.__rep_;
    *(void *)(v3 + 384) = this;
    *(unsigned char *)(v3 + 400) = 1;
  }
  return this;
}

re *re::RenderGraphManager::setDataPipeFactory(re *result, uint64_t a2)
{
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v3 = result;
  uint64_t v4 = (void (***)(void))*((void *)result + 86);
  if (v4)
  {
    uint64_t v5 = re::globalAllocators(result)[2];
    (**v4)(v4);
    uint64_t result = (re *)(*(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v5 + 40))(v5, v4);
  }
  *((void *)v3 + 86) = a2;
  return result;
}

uint64_t (***re::FunctionBase<24ul,void ()(re::RenderFrameWorkload *,re::Slice<re::DetailedError>)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t re::FunctionBase<24ul,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t re::FunctionBase<24ul,void ()(char const*,char const*,re::RenderFrame &)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(char const*,char const*,re::RenderFrame &)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,void ()(char const*,char const*,re::RenderFrame &)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t re::FunctionBase<24ul,void ()(re::RenderFrameWorkload *,re::Slice<re::DetailedError>)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(re::RenderFrameWorkload *,re::Slice<re::DetailedError>)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

double re::HashTable<re::StringID,re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(a1[2] + v3);
        ++v4;
        v3 += 72;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::StringID,re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(uint64_t a1)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0)
  {
    *(_DWORD *)a1 &= ~0x80000000;
    re::StringID::destroyString((re::StringID *)(a1 + 8));
    return re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>::deinit((uint64_t *)(a1 + 24));
  }
  return result;
}

double re::HashTable<re::StringID,re::FixedArray<re::RenderGraphProviderBase const*>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::FixedArray<re::RenderGraphProviderBase const*>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free((uint64_t *)(a1[2] + v3));
        ++v4;
        v3 += 48;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t *re::HashTable<re::StringID,re::FixedArray<re::RenderGraphProviderBase const*>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(uint64_t *result)
{
  if ((*(_DWORD *)result & 0x80000000) != 0)
  {
    uint64_t v1 = result;
    *(_DWORD *)result &= ~0x80000000;
    re::StringID::destroyString((re::StringID *)(result + 1));
    return (uint64_t *)re::FixedArray<CoreIKTransform>::deinit(v1 + 3);
  }
  return result;
}

uint64_t re::DynamicInlineArray<unsigned long long,16ul>::ensureCapacity(void *a1, uint64_t a2)
{
  if (*a1 <= 0xFuLL) {
    return 1;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

__n128 re::HashBrown<unsigned long long,re::RenderGraphManager::CachedRenderGraph,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(_anonymous_namespace_ *a1, void *a2, __n128 *a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<unsigned long long,re::RenderGraphManager::CachedRenderGraph,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize((uint64_t *)a1, 1u);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = v7 >> 4;
  unint64_t v11 = v9 % (v7 >> 4);
  uint64_t v12 = *(void *)a1;
  unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10) {
        unint64_t v11 = 0;
      }
      else {
        ++v11;
      }
      unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  uint64_t v14 = v12 + 16 * v11;
  BOOL v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(unsigned char *)(v14 + v13) = v9 & 0x7F;
  __n128 result = *a3;
  uint64_t v17 = *((void *)a1 + 1) + 24 * (v13 + 16 * v11);
  *(void *)uint64_t v17 = *a2;
  *(__n128 *)(v17 + 8) = result;
  uint64_t v18 = *((void *)a1 + 4) - v15;
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v18;
  uint64_t v19 = *(void *)(*((void *)a1 + 1) + 24 * (v13 + 16 * v11)) ^ (*(void *)(*((void *)a1 + 1)
                                                                              + 24 * (v13 + 16 * v11)) >> 30);
  unint64_t v20 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v19) ^ ((0xBF58476D1CE4E5B9 * v19) >> 27));
  *((void *)a1 + 5) ^= (v20 >> 31) ^ v20;
  return result;
}

uint64_t re::HashBrown<unsigned long long,re::RenderGraphManager::CachedRenderGraph,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(uint64_t *a1, unsigned int a2)
{
  unint64_t v3 = a1[2];
  uint64_t v4 = a1[3] + a2;
  unint64_t v5 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  unint64_t v6 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v5 > (192 * v3) >> 7) {
    unint64_t v6 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  }
  unint64_t v7 = (v6 << 7) / 0x97;
  uint64_t v8 = a1[7];
  long long v29 = 0u;
  *(_OWORD *)unint64_t v30 = 0u;
  if (v5 > v3) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v4;
  }
  memset(&v30[16], 0, 32);
  re::HashBrown<unsigned long long,re::RenderGraphManager::CachedRenderGraph,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(&v29, v8, v9);
  v27[0] = a1;
  unint64_t v11 = a1[2];
  if (v11 >= 0x10)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a1;
    unint64_t v14 = v11 >> 4;
    __n128 v15 = (__n128)xmmword_2343680E0;
    v10.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      unsigned __int16 v16 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v13 + v12)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v27[1] = (unsigned __int16)~v16;
      if (v16 != 0xFFFF) {
        break;
      }
      v12 += 16;
      if (!--v14) {
        goto LABEL_14;
      }
    }
    uint64_t v17 = __clz(__rbit64((unsigned __int16)~v16)) + v12;
    uint64_t v28 = v17;
    if (v17 != -1)
    {
      do
      {
        re::HashBrown<unsigned long long,re::RenderGraphManager::CachedRenderGraph,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(&v29, *(void *)(v27[0] + 8) + 24 * v17, *(void *)(v27[0] + 8) + 24 * v17 + 8, v15, v10);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v27);
        uint64_t v17 = v28;
      }
      while (v28 != -1);
      unint64_t v11 = a1[2];
    }
  }
LABEL_14:
  uint64_t v19 = *(void *)&v30[40];
  *(void *)&v30[40] = a1[7];
  uint64_t result = *(void *)&v30[40];
  long long v20 = v29;
  long long v21 = *(_OWORD *)v30;
  *(void *)unint64_t v30 = v11;
  uint64_t v22 = *a1;
  uint64_t v23 = a1[1];
  *(void *)&long long v29 = *a1;
  *((void *)&v29 + 1) = v23;
  long long v24 = *(_OWORD *)&v30[16];
  long long v25 = *(_OWORD *)(a1 + 5);
  a1[6] = *(void *)&v30[32];
  a1[7] = v19;
  *(_OWORD *)&v30[24] = v25;
  long long v26 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v20;
  *((_OWORD *)a1 + 1) = v21;
  *((_OWORD *)a1 + 2) = v24;
  *(_OWORD *)&_OWORD v30[8] = v26;
  if (result)
  {
    if (v23) {
      *((void *)&v29 + 1) = 0;
    }
    if (v22) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
    }
  }
  return result;
}

void *re::HashBrown<unsigned long long,re::RenderGraphManager::CachedRenderGraph,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(void *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result;
  result[7] = a2;
  unint64_t v4 = 151 * a3;
  unint64_t v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    unint64_t v6 = v5 >> 4;
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 25 * (v5 & 0x3FFFFFFFFFFFFF0), 16);
    *unint64_t v3 = result;
    if (v4 >= 0x80)
    {
      uint64_t v7 = 0;
      *(void *)&long long v8 = -1;
      *((void *)&v8 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v7++) = v8;
      while (v6 != v7);
      uint64_t result = (void *)*v3;
    }
    v3[1] = &result[2 * v6];
    if (v3[2])
    {
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      do
      {
        unint64_t v11 = (void *)(v3[1] + v9);
        *unint64_t v11 = 0;
        v11[1] = 0;
        _OWORD v11[2] = 0xFFFFFFFFFFFFFFFLL;
        ++v10;
        unint64_t v12 = v3[2];
        v9 += 24;
      }
      while (v10 < v12);
    }
    else
    {
      unint64_t v12 = 0;
    }
  }
  else
  {
    unint64_t v12 = 0;
    _anonymous_namespace_ *result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v12;
  return result;
}

void re::HashTable<re::StringID,re::FixedArray<re::RenderGraphProviderBase const*>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v27, 0, 36);
      *(void *)&v27[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::FixedArray<re::RenderGraphProviderBase const*>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v27, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v27;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v27[8];
      *(_OWORD *)uint64_t v27 = v5;
      *(void *)&v27[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v27[24];
      *(_OWORD *)&unsigned char v27[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v27[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        unint64_t v14 = (StringID *)(v6 + 40);
        do
        {
          if (((uint64_t)v14[-3].var1 & 0x80000000) != 0)
          {
            unint64_t v15 = 0xBF58476D1CE4E5B9 * ((*(void *)&v14[-2].var0 >> 31) ^ (*(void *)&v14[-2].var0 >> 1));
            unint64_t v16 = (0x94D049BB133111EBLL * (v15 ^ (v15 >> 27))) ^ ((0x94D049BB133111EBLL * (v15 ^ (v15 >> 27))) >> 31);
            unint64_t v17 = *(unsigned int *)(a1 + 24);
            unint64_t v18 = v16 % v17;
            uint64_t v19 = *(unsigned int *)(a1 + 36);
            if (v19 == 0x7FFFFFFF)
            {
              uint64_t v19 = *(unsigned int *)(a1 + 32);
              int v20 = v19;
              if (v19 == v17)
              {
                re::HashTable<re::StringID,re::FixedArray<re::RenderGraphProviderBase const*>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, (2 * v12));
                unint64_t v18 = v16 % *(unsigned int *)(a1 + 24);
                int v20 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v20 + 1;
              uint64_t v21 = *(void *)(a1 + 16);
              int v22 = *(_DWORD *)(v21 + 48 * v19);
            }
            else
            {
              uint64_t v21 = *(void *)(a1 + 16);
              int v22 = *(_DWORD *)(v21 + 48 * v19);
              *(_DWORD *)(a1 + 36) = v22 & 0x7FFFFFFF;
            }
            uint64_t v23 = 48 * v19;
            *(_DWORD *)(v21 + v23) = v22 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + v23) = *(_DWORD *)(*(void *)(a1 + 16) + 48 * v19) & 0x80000000 | *(_DWORD *)(v13 + 4 * v18);
            re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 48 * v19 + 8), v14 - 2);
            long long v24 = (void *)(*(void *)(a1 + 16) + 48 * v19);
            v24[3] = 0;
            v24[4] = 0;
            v24[5] = 0;
            v24[3] = *(void *)&v14[-1].var0;
            *(void *)&v14[-1].var0 = 0;
            v24[4] = v14[-1].var1;
            v14[-1].var1 = 0;
            uint64_t v25 = v24[5];
            v24[5] = *(void *)&v14->var0;
            *(void *)&v14->var0 = v25;
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v18) = v19;
            int v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 3;
        }
        while (v11 < v10);
      }
      re::HashTable<re::StringID,re::FixedArray<re::RenderGraphProviderBase const*>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v27);
    }
  }
  else
  {
    if (a2) {
      signed int v26 = a2;
    }
    else {
      signed int v26 = 3;
    }
  }
}

void re::HashTable<re::StringID,re::FixedArray<re::RenderGraphProviderBase const*>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 48 * v10, 16);
  if (v12)
  {
    unint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

double re::HashTable<re::StringID,re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, const StringID *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  uint64_t v10 = &xmmword_234364000;
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v11 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v13 = *(_DWORD *)(a1 + 28);
      signed int v14 = 2 * v13;
      uint64_t v15 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v14) {
          BOOL v16 = v9 == v14;
        }
        else {
          BOOL v16 = 1;
        }
        if (!v16 && (v13 & 0x80000000) == 0)
        {
          memset(v35, 0, 36);
          *(void *)&v35[36] = 0x7FFFFFFFLL;
          re::HashTable<re::StringID,re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v35, v15, v14);
          long long v17 = *(_OWORD *)v35;
          *(_OWORD *)unint64_t v35 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v17;
          uint64_t v18 = *(void *)&v35[16];
          uint64_t v19 = *(void *)(a1 + 16);
          *(void *)&v35[16] = v19;
          *(void *)(a1 + 16) = v18;
          long long v21 = *(_OWORD *)&v35[24];
          *(_OWORD *)&v35[24] = *(_OWORD *)(a1 + 24);
          unsigned int v20 = *(_DWORD *)&v35[32];
          *(_OWORD *)(a1 + 24) = v21;
          unint64_t v22 = v20;
          if (v20)
          {
            unint64_t v23 = 0;
            uint64_t v24 = v19 + 24;
            do
            {
              if ((*(_DWORD *)(v24 - 24) & 0x80000000) != 0)
              {
                unint64_t v25 = 0xBF58476D1CE4E5B9 * ((*(void *)(v24 - 16) >> 31) ^ (*(void *)(v24 - 16) >> 1));
                unint64_t v26 = (0x94D049BB133111EBLL * (v25 ^ (v25 >> 27))) ^ ((0x94D049BB133111EBLL * (v25 ^ (v25 >> 27))) >> 31);
                re::HashTable<re::StringID,re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v26 % *(unsigned int *)(a1 + 24), v26, v24 - 16, v24);
              }
              ++v23;
              v24 += 72;
            }
            while (v23 < v22);
          }
          re::HashTable<re::StringID,re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v35);
          uint64_t v10 = &xmmword_234364000;
        }
      }
      else
      {
        if (v14) {
          signed int v29 = 2 * v13;
        }
        else {
          signed int v29 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v27 = *(void *)(a1 + 16);
    int v28 = *(_DWORD *)(v27 + 72 * v9);
  }
  else
  {
    uint64_t v27 = *(void *)(a1 + 16);
    int v28 = *(_DWORD *)(v27 + 72 * v9);
    *(_DWORD *)(a1 + 36) = v28 & 0x7FFFFFFF;
  }
  uint64_t v30 = 72 * v9;
  *(_DWORD *)(v27 + v30) = v28 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v30) = *(_DWORD *)(*(void *)(a1 + 16) + 72 * v9) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 72 * v9 + 8), a4);
  uint64_t v31 = *(void *)(a1 + 16) + 72 * v9;
  *(_DWORD *)(v31 + 56) = 0;
  *(_OWORD *)(v31 + 40) = 0u;
  *(_OWORD *)(v31 + 24) = 0u;
  double result = *((double *)v10 + 349);
  *(double *)(v31 + 60) = result;
  *(void *)(v31 + 24) = *(void *)a5;
  *(void *)a5 = 0;
  uint64_t v33 = *(void *)(v31 + 32);
  *(void *)(v31 + 32) = *(void *)(a5 + 8);
  *(void *)(a5 + 8) = v33;
  uint64_t v34 = *(void *)(v31 + 40);
  *(void *)(v31 + 40) = *(void *)(a5 + 16);
  *(void *)(a5 + 16) = v34;
  LODWORD(v34) = *(_DWORD *)(v31 + 48);
  *(_DWORD *)(v31 + 48) = *(_DWORD *)(a5 + 24);
  *(_DWORD *)(a5 + 24) = v34;
  LODWORD(v34) = *(_DWORD *)(v31 + 52);
  *(_DWORD *)(v31 + 52) = *(_DWORD *)(a5 + 28);
  *(_DWORD *)(a5 + 28) = v34;
  LODWORD(v34) = *(_DWORD *)(v31 + 56);
  *(_DWORD *)(v31 + 56) = *(_DWORD *)(a5 + 32);
  *(_DWORD *)(a5 + 32) = v34;
  LODWORD(v34) = *(_DWORD *)(v31 + 60);
  *(_DWORD *)(v31 + 60) = *(_DWORD *)(a5 + 36);
  *(_DWORD *)(a5 + 36) = v34;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

void re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v29, 0, 36);
          *(void *)&v29[36] = 0x7FFFFFFFLL;
          re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>::init((uint64_t)v29, v13, v12);
          long long v15 = *(_OWORD *)v29;
          *(_OWORD *)signed int v29 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v29[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v29[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v29[24];
          *(_OWORD *)&v29[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v29[32];
          *(_OWORD *)(a1 + 24) = v19;
          unint64_t v20 = v18;
          if (v18)
          {
            unint64_t v21 = 0;
            uint64_t v22 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0) {
                re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>::addAsMove(a1, *(void *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v22 - 16), v22 - 4, v22);
              }
              ++v21;
              v22 += 56;
            }
            while (v21 < v20);
          }
          re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>::deinit((uint64_t *)v29);
        }
      }
      else
      {
        if (v12) {
          signed int v25 = 2 * v11;
        }
        else {
          signed int v25 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 56 * v9 + 8);
  }
  else
  {
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 56 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 56 * v9 + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 56 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 56 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 56 * v9) = a3;
  *(_DWORD *)(*(void *)(a1 + 16) + 56 * v9 + 12) = *a4;
  uint64_t v26 = *(void *)(a1 + 16) + 56 * v9;
  *(void *)(v26 + 48) = 0;
  *(_DWORD *)(v26 + 40) = 0;
  *(void *)(v26 + 24) = 0;
  *(void *)(v26 + 32) = 0;
  *(void *)(v26 + 16) = 0;
  *(void *)(v26 + 16) = *(void *)a5;
  *(void *)a5 = 0;
  *(void *)(v26 + 24) = *(void *)(a5 + 8);
  *(void *)(a5 + 8) = 0;
  uint64_t v27 = *(void *)(v26 + 32);
  *(void *)(v26 + 32) = *(void *)(a5 + 16);
  *(void *)(a5 + 16) = v27;
  uint64_t v28 = *(void *)(v26 + 48);
  *(void *)(v26 + 48) = *(void *)(a5 + 32);
  *(void *)(a5 + 32) = v28;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v26 + 40);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
}

void re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  signed int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 56 * v10, 16);
  if (v12)
  {
    BOOL v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<re::StringID,re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  signed int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 72 * v10, 16);
  if (v12)
  {
    BOOL v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

double re::HashTable<int,re::DynamicArray<re::RenderGraphProviderBase const*>,re::Hash<int>,re::EqualTo<int>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      unint64_t v4 = 0;
      uint64_t v5 = 8;
      do
      {
        uint64_t v6 = a1[2];
        int v7 = *(_DWORD *)(v6 + v5);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v5) = v7 & 0x7FFFFFFF;
          re::DynamicArray<unsigned long>::deinit(v6 + v5 + 8);
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        ++v4;
        v5 += 56;
      }
      while (v4 < v3);
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::Hash<re::ProviderHandle>::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = 73244475 * (*(_DWORD *)(a2 + 16) ^ HIWORD(*(_DWORD *)(a2 + 16)));
  unint64_t v3 = ((*(void *)a2 >> 3)
      + (*(void *)a2 >> 1 << 6)
      - 0x61C8864680B583E9
      + ((73244475 * (v2 ^ HIWORD(v2))) ^ ((73244475 * (v2 ^ HIWORD(v2))) >> 16))) ^ (*(void *)a2 >> 1);
  unsigned int v4 = 73244475
     * ((73244475 * (*(_DWORD *)(a2 + 20) ^ HIWORD(*(_DWORD *)(a2 + 20)))) ^ ((73244475
                                                                                           * (*(_DWORD *)(a2 + 20) ^ HIWORD(*(_DWORD *)(a2 + 20)))) >> 16));
  return ((v4 ^ HIWORD(v4)) + (v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9) ^ v3;
}

void re::HashSetBase<re::ProviderHandle,re::ProviderHandle,re::internal::ValueAsKey<re::ProviderHandle>,re::Hash<re::ProviderHandle>,re::EqualTo<re::ProviderHandle>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v25, 0, 36);
      *(void *)&v25[36] = 0x7FFFFFFFLL;
      re::HashSetBase<re::ProviderHandle,re::ProviderHandle,re::internal::ValueAsKey<re::ProviderHandle>,re::Hash<re::ProviderHandle>,re::EqualTo<re::ProviderHandle>,true,false>::init((uint64_t)v25, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v25;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v25[8];
      *(_OWORD *)signed int v25 = v5;
      *(void *)&v25[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v25[24];
      *(_OWORD *)&v25[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v25[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        BOOL v14 = (uint64_t *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v14 - 1) & 0x80000000) != 0)
          {
            unint64_t v15 = *(v14 - 2);
            unint64_t v16 = *(unsigned int *)(a1 + 24);
            unint64_t v17 = v15 % v16;
            uint64_t v18 = *(unsigned int *)(a1 + 36);
            if (v18 == 0x7FFFFFFF)
            {
              uint64_t v18 = *(unsigned int *)(a1 + 32);
              int v19 = v18;
              if (v18 == v16)
              {
                re::HashSetBase<re::ProviderHandle,re::ProviderHandle,re::internal::ValueAsKey<re::ProviderHandle>,re::Hash<re::ProviderHandle>,re::EqualTo<re::ProviderHandle>,true,false>::setCapacity(a1, (2 * v12));
                unint64_t v17 = v15 % *(unsigned int *)(a1 + 24);
                int v19 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 40 * v18 + 8);
            }
            else
            {
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 40 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 40 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 40 * v18 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 40 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(void *)(*(void *)(a1 + 16) + 40 * v18) = v15;
            uint64_t v22 = (void *)(*(void *)(a1 + 16) + 40 * v18);
            uint64_t v23 = *v14;
            void v22[2] = v22[2] & 0xFFFFFFFFFFFFFFFELL | *v14 & 1;
            void v22[2] = *v14 & 0xFFFFFFFFFFFFFFFELL | v23 & 1;
            v22[3] = v14[1];
            *BOOL v14 = 0;
            v14[1] = (uint64_t)"";
            _OWORD v22[4] = v14[2];
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            int v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 5;
        }
        while (v11 < v10);
      }
      re::HashTable<re::FontID,re::FontAssetInternal *,re::Hash<re::FontID>,re::EqualTo<re::FontID>,true,false>::deinit((uint64_t *)v25);
    }
  }
  else
  {
    if (a2) {
      signed int v24 = a2;
    }
    else {
      signed int v24 = 3;
    }
  }
}

void re::HashSetBase<re::ProviderHandle,re::ProviderHandle,re::internal::ValueAsKey<re::ProviderHandle>,re::Hash<re::ProviderHandle>,re::EqualTo<re::ProviderHandle>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 40 * v10, 16);
  if (v12)
  {
    BOOL v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 601);
    _os_crash();
    __break(1u);
  }
}

void re::PersistentShadowState::visualizeShadowClusters(re::PersistentShadowState *this, os_unfair_lock_s *a2)
{
  uint64_t v4 = *((unsigned int *)this + 40);
  if (v4)
  {
    uint64_t v5 = 0;
    unint64_t v6 = (_DWORD *)(*((void *)this + 18) + 8);
    while ((*v6 & 0x80000000) == 0)
    {
      v6 += 92;
      if (v4 == ++v5)
      {
        LODWORD(v5) = *((_DWORD *)this + 40);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if (v4 != v5)
  {
    uint64_t v7 = v5;
    do
    {
      unsigned int v8 = (float32x4_t *)(*((void *)this + 18) + 368 * v7);
      signed int v9 = v8 + 10;
      uint64_t v10 = (uint64_t)&v8[5];
      v18[0] = (float32x4_t)xmmword_23435FD50;
      re::DebugRenderer::drawBox(a2, v8 + 10, v8[5].f32, (long long *)v18, 1);
      v18[0] = (float32x4_t)xmmword_23435FD50;
      v18[1] = (float32x4_t)xmmword_23435FD60;
      _OWORD v18[2] = (float32x4_t)xmmword_23435FD80;
      v18[3] = (float32x4_t)xmmword_23435FBB0;
      re::BoundingSphere::BoundingSphere(&v16, v10, v9);
      uint64_t v11 = (const float *)((unint64_t)&v16 | 0xC);
      float32x4_t v12 = vld1q_dup_f32(v11);
      v17[0] = vsubq_f32(v16, v12);
      v17[1] = vaddq_f32(v16, v12);
      long long v15 = xmmword_23435FD80;
      re::DebugRenderer::drawBox(a2, v18, (float *)v17, &v15, 1);
      if (*((_DWORD *)this + 40) <= (v5 + 1)) {
        int v13 = v5 + 1;
      }
      else {
        int v13 = *((_DWORD *)this + 40);
      }
      int v14 = v5;
      while (1)
      {
        uint64_t v7 = (v14 + 1);
        if (v13 - 1 == v14) {
          break;
        }
        ++v14;
        LODWORD(v5) = v7;
        if ((*(_DWORD *)(*((void *)this + 18) + 368 * v7 + 8) & 0x80000000) != 0) {
          goto LABEL_17;
        }
      }
      LODWORD(v5) = v13;
LABEL_17:
      ;
    }
    while (v4 != v5);
  }
}

void re::PersistentShadowState::visualizeShadowClusterInfo(uint64_t a1, os_unfair_lock_s *a2, const StringID *a3, uint64_t a4)
{
  CFAllocatorRef v165 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  cf = CFDateFormatterCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, kCFDateFormatterNoStyle, kCFDateFormatterLongStyle);
  CFDateFormatterSetFormat(cf, @"HH:mm:ss.SSS");
  uint64_t v167 = *(unsigned int *)(a1 + 160);
  uint64_t v5 = 0;
  if (v167)
  {
    unint64_t v6 = (_DWORD *)(*(void *)(a1 + 144) + 8);
    while ((*v6 & 0x80000000) == 0)
    {
      v6 += 92;
      if (v167 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(a1 + 160);
        break;
      }
    }
  }
  if (v167 != v5)
  {
    uint64_t v7 = v5;
    do
    {
      uint64_t v8 = *(void *)(a1 + 144) + 368 * v7;
      CFStringRef StringWithAbsoluteTime = CFDateFormatterCreateStringWithAbsoluteTime(v165, cf, *(CFAbsoluteTime *)(v8 + 248));
      uint64_t v10 = *(void *)(v8 + 224);
      CStringPtr = CFStringGetCStringPtr(StringWithAbsoluteTime, 0x8000100u);
      re::DynamicString::format((re::DynamicString *)"%llu - %s", (re::DynamicString *)&v183, v10, CStringPtr);
      CFRelease(StringWithAbsoluteTime);
      if (!*(void *)(a1 + 80)
        || (unint64_t v13 = *(void *)(v8 + 224),
            unint64_t v14 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v13 ^ (v13 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v13 ^ (v13 >> 30))) >> 27)),
            uint64_t v15 = *(unsigned int *)(*(void *)(a1 + 88)
                                  + 4 * (((v14 ^ (v14 >> 31)) - 0x61C8864680B583E9) % *(unsigned int *)(a1 + 104))),
            v15 == 0x7FFFFFFF))
      {
LABEL_16:
        unint64_t v180 = 0;
        v181 = 0;
        uint64_t v182 = 0;
        re::DynamicString::setCapacity(&v179, 0);
      }
      else
      {
        uint64_t v16 = *(void *)(a1 + 96);
        while (*(void *)(v16 + 72 * v15 + 16) != v13
             || *(void *)(v16 + 72 * v15 + 24)
             || *(unsigned char *)(v16 + 72 * v15 + 32))
        {
          uint64_t v15 = *(_DWORD *)(v16 + 72 * v15 + 8) & 0x7FFFFFFF;
          if (v15 == 0x7FFFFFFF) {
            goto LABEL_16;
          }
        }
        v163 = (float *)re::ShadowTileManager::dataForTile(a1, (unsigned __int16 *)(v16 + 72 * v15 + 64));
        re::DynamicString::format((re::DynamicString *)"%.3f x %.3f", (re::DynamicString *)&v179, (float)((float)(v163[70] - v163[68]) / (float)*(unsigned int *)(a4 + 4)), (float)((float)(v163[71] - v163[69]) / (float)*(unsigned int *)(a4 + 4)));
      }
      unint64_t v17 = (float32x4_t *)(v8 + 32);
      float32x4_t v189 = (float32x4_t)xmmword_23435FD50;
      re::DebugRenderer::drawBox(a2, v17 + 8, v17[3].f32, (long long *)&v189, 1);
      re::DebugRenderer::drawAxis(a2, v17 + 8, 1, 0.5, 0.1);
      re::BoundingSphere::BoundingSphere(&v189, (uint64_t)&v17[3], v17 + 8);
      unint64_t v18 = (unint64_t)&v189 | 0xC;
      v19.columns[0] = (simd_float3)vld1q_dup_f32((const float *)v18);
      v19.columns[1] = (simd_float3)vsubq_f32(v189, (float32x4_t)v19.columns[0]);
      v19.columns[2] = (simd_float3)vaddq_f32(v189, (float32x4_t)v19.columns[0]);
      uint32x4_t v20 = (uint32x4_t)vcgtq_f32((float32x4_t)v19.columns[1], (float32x4_t)v19.columns[2]);
      v20.i32[3] = v20.i32[2];
      LODWORD(v18) = vmaxvq_u32(v20);
      float32x4_t v21 = 0uLL;
      if ((v18 & 0x80000000) == 0)
      {
        v22.i64[0] = 0x3F0000003F000000;
        v22.i64[1] = 0x3F0000003F000000;
        float32x4_t v21 = vmulq_f32(vaddq_f32((float32x4_t)v19.columns[1], (float32x4_t)v19.columns[2]), v22);
      }
      v19.columns[1] = (simd_float3)vsubq_f32((float32x4_t)v19.columns[2], (float32x4_t)v19.columns[1]);
      v19.columns[1].i32[3] = 0;
      v19.columns[0] = (simd_float3)vmaxnmq_f32((float32x4_t)v19.columns[1], (float32x4_t)0);
      float32x4_t v173 = (float32x4_t)v19.columns[0];
      float32x4_t v175 = v21;
      v19.columns[0].i64[0] = v17[8].i64[0];
      v19.columns[1].i64[0] = v17[9].i64[0];
      v19.columns[2].i64[0] = v17[10].i64[0];
      v19.columns[0].i32[2] = v17[8].i32[2];
      v19.columns[1].i32[2] = v17[9].i32[2];
      v19.columns[2].i32[2] = v17[10].i32[2];
      simd_float3x3 v193 = __invert_f3(v19);
      int32x4_t v23 = vzip2q_s32((int32x4_t)v193.columns[0], (int32x4_t)v193.columns[2]);
      float32x4_t v24 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v193.columns[0], (int32x4_t)v193.columns[2]), (int32x4_t)v193.columns[1]);
      v193.columns[0] = (simd_float3)vtrn2q_s32((int32x4_t)v193.columns[0], (int32x4_t)v193.columns[1]);
      v193.columns[0].i32[2] = v193.columns[2].i32[1];
      v193.columns[0] = (simd_float3)vaddq_f32((float32x4_t)vzip1q_s32(v23, vdupq_laneq_s32((int32x4_t)v193.columns[1], 2)), vmlaq_f32(vmulq_f32(v24, (float32x4_t)0), (float32x4_t)0, (float32x4_t)v193.columns[0]));
      v193.columns[1] = (simd_float3)vmulq_f32((float32x4_t)v193.columns[0], (float32x4_t)v193.columns[0]);
      v193.columns[1].i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v193.columns[1], 2), vadd_f32(*(float32x2_t *)v193.columns[1].f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v193.columns[1].f32, 1))).u32[0];
      *(float32x2_t *)v193.columns[2].f32 = vrsqrte_f32((float32x2_t)v193.columns[1].u32[0]);
      *(float32x2_t *)v193.columns[2].f32 = vmul_f32(*(float32x2_t *)v193.columns[2].f32, vrsqrts_f32((float32x2_t)v193.columns[1].u32[0], vmul_f32(*(float32x2_t *)v193.columns[2].f32, *(float32x2_t *)v193.columns[2].f32)));
      float32x4_t v25 = vmulq_n_f32((float32x4_t)v193.columns[0], vmul_f32(*(float32x2_t *)v193.columns[2].f32, vrsqrts_f32((float32x2_t)v193.columns[1].u32[0], vmul_f32(*(float32x2_t *)v193.columns[2].f32, *(float32x2_t *)v193.columns[2].f32))).f32[0]);
      float v26 = vmuls_lane_f32(0.5, *(float32x2_t *)v173.f32, 1);
      v193.columns[0].f32[0] = v26 * 1.1;
      v193.columns[1].i32[0] = 0;
      v193.columns[1].i32[1] = v193.columns[0].i32[0];
      float32x4_t v27 = vaddq_f32((float32x4_t)v193.columns[1].u64[0], v175);
      v193.columns[1] = (simd_float3)vsubq_f32(vaddq_f32(v27, v25), v27);
      v193.columns[2] = (simd_float3)vmulq_f32((float32x4_t)v193.columns[1], (float32x4_t)v193.columns[1]);
      v193.columns[2].i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v193.columns[2], 2), vadd_f32(*(float32x2_t *)v193.columns[2].f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v193.columns[2].f32, 1))).u32[0];
      *(float32x2_t *)v24.f32 = vrsqrte_f32((float32x2_t)v193.columns[2].u32[0]);
      *(float32x2_t *)v24.f32 = vmul_f32(*(float32x2_t *)v24.f32, vrsqrts_f32((float32x2_t)v193.columns[2].u32[0], vmul_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32)));
      float32x4_t v28 = vmulq_n_f32((float32x4_t)v193.columns[1], vmul_f32(*(float32x2_t *)v24.f32, vrsqrts_f32((float32x2_t)v193.columns[2].u32[0], vmul_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32))).f32[0]);
      float32x4_t v29 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v28, (int32x4_t)v28), (int8x16_t)v28, 0xCuLL);
      v193.columns[2] = (simd_float3)vmlaq_f32(vmulq_f32(v29, (float32x4_t)xmmword_23437C080), (float32x4_t)xmmword_23435FD80, v28);
      float32x4_t v30 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v193.columns[2], (int32x4_t)v193.columns[2]), (int8x16_t)v193.columns[2], 0xCuLL);
      v193.columns[2] = (simd_float3)vmulq_f32((float32x4_t)v193.columns[2], (float32x4_t)v193.columns[2]);
      v193.columns[2].i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v193.columns[2].f32, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v193.columns[2], 2), *(float32x2_t *)v193.columns[2].f32)).u32[0];
      *(float32x2_t *)v23.i8 = vrsqrte_f32((float32x2_t)v193.columns[2].u32[0]);
      *(float32x2_t *)v23.i8 = vmul_f32(*(float32x2_t *)v23.i8, vrsqrts_f32((float32x2_t)v193.columns[2].u32[0], vmul_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8)));
      float32x4_t v31 = vmulq_n_f32(v30, vmul_f32(*(float32x2_t *)v23.i8, vrsqrts_f32((float32x2_t)v193.columns[2].u32[0], vmul_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8))).f32[0]);
      float v32 = v31.f32[1];
      float32x4_t v33 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v31, (int32x4_t)v31), (int8x16_t)v31, 0xCuLL), vnegq_f32(v28)), v31, v29);
      float v34 = v28.f32[2] + vaddq_f32(v31, v33).f32[0];
      if (v34 >= 0.0)
      {
        float v35 = 1.0;
        v33.f32[0] = sqrtf(v34 + 1.0);
        v31.f32[0] = v33.f32[0] + v33.f32[0];
        float32x2_t v39 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v33.f32[0] + v33.f32[0]));
        float32x2_t v40 = vmul_f32(v39, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v33.f32[0] + v33.f32[0]), v39));
        float v41 = vmul_f32(v40, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v33.f32[0] + v33.f32[0]), v40)).f32[0];
        v33.f32[0] = (float)(v33.f32[1] - v28.f32[1]) * v41;
        float v36 = (float)(v28.f32[0] - v31.f32[2]) * v41;
        float v37 = (float)(v31.f32[1] - v33.f32[2]) * v41;
        float v38 = v31.f32[0] * 0.25;
      }
      else
      {
        float v35 = 1.0;
        if (v31.f32[0] < v28.f32[2] || (vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v31, v33))).u8[0] & 1) != 0)
        {
          v31.f32[0] = 1.0 - v31.f32[0];
          BOOL v42 = v33.f32[0] < v28.f32[2];
          float v43 = sqrtf(v28.f32[2] + (float)(v31.f32[0] - v33.f32[0]));
          *(float *)&unsigned int v44 = v43 + v43;
          float32x2_t v45 = vrecpe_f32((float32x2_t)v44);
          float32x2_t v46 = vmul_f32(v45, vrecps_f32((float32x2_t)v44, v45));
          float v47 = vmul_f32(v46, vrecps_f32((float32x2_t)v44, v46)).f32[0];
          float v48 = (float)(v28.f32[0] + v31.f32[2]) * v47;
          float v49 = (float)(v28.f32[1] + v33.f32[1]) * v47;
          float v50 = *(float *)&v44 * 0.25;
          float v51 = (float)(v31.f32[1] - v33.f32[2]) * v47;
          v33.f32[0] = sqrtf((float)(v31.f32[0] - v28.f32[2]) + v33.f32[0]);
          v33.f32[0] = v33.f32[0] + v33.f32[0];
          *(float32x2_t *)v31.f32 = vrecpe_f32((float32x2_t)v33.u32[0]);
          *(float32x2_t *)v31.f32 = vmul_f32(*(float32x2_t *)v31.f32, vrecps_f32((float32x2_t)v33.u32[0], *(float32x2_t *)v31.f32));
          float v52 = vmul_f32(*(float32x2_t *)v31.f32, vrecps_f32((float32x2_t)v33.u32[0], *(float32x2_t *)v31.f32)).f32[0];
          float v53 = (float)(v32 + v33.f32[2]) * v52;
          float v54 = v33.f32[0] * 0.25;
          float v55 = (float)(v28.f32[1] + v33.f32[1]) * v52;
          float v56 = (float)(v28.f32[0] - v31.f32[2]) * v52;
          if (v42) {
            v33.f32[0] = v48;
          }
          else {
            v33.f32[0] = v53;
          }
          if (v42) {
            float v36 = v49;
          }
          else {
            float v36 = v54;
          }
          if (v42) {
            float v37 = v50;
          }
          else {
            float v37 = v55;
          }
          if (v42) {
            float v38 = v51;
          }
          else {
            float v38 = v56;
          }
        }
        else
        {
          v33.f32[0] = sqrtf(v31.f32[0] + (float)((float)(1.0 - v33.f32[0]) - v28.f32[2]));
          v33.f32[0] = v33.f32[0] + v33.f32[0];
          *(float32x2_t *)v31.f32 = vrecpe_f32((float32x2_t)v33.u32[0]);
          *(float32x2_t *)v31.f32 = vmul_f32(*(float32x2_t *)v31.f32, vrecps_f32((float32x2_t)v33.u32[0], *(float32x2_t *)v31.f32));
          v31.f32[0] = vmul_f32(*(float32x2_t *)v31.f32, vrecps_f32((float32x2_t)v33.u32[0], *(float32x2_t *)v31.f32)).f32[0];
          v33.f32[0] = v33.f32[0] * 0.25;
          float v36 = (float)(v32 + v33.f32[2]) * v31.f32[0];
          float v37 = (float)(v28.f32[0] + v31.f32[2]) * v31.f32[0];
          float v38 = (float)(v33.f32[1] - v28.f32[1]) * v31.f32[0];
        }
      }
      float32x4_t v57 = vmulq_f32(v173, v173);
      LODWORD(v58) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v57, 2), vaddq_f32(v57, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v57.f32, 1))).u32[0];
      LODWORD(v59) = 0;
      *((float *)&v59 + 1) = v26;
      float32x4_t v60 = vsubq_f32(v175, (float32x4_t)v59);
      float32x4_t v61 = vsubq_f32(vaddq_f32(v60, v25), v60);
      int32x4_t v62 = (int32x4_t)vmulq_f32(v61, v61);
      v62.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v62, 2), vadd_f32(*(float32x2_t *)v62.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v62.i8, 1))).u32[0];
      float32x2_t v63 = vrsqrte_f32((float32x2_t)v62.u32[0]);
      float32x2_t v64 = vmul_f32(v63, vrsqrts_f32((float32x2_t)v62.u32[0], vmul_f32(v63, v63)));
      float32x4_t v65 = vmulq_n_f32(v61, vmul_f32(v64, vrsqrts_f32((float32x2_t)v62.u32[0], vmul_f32(v64, v64))).f32[0]);
      float32x4_t v66 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v65, (int32x4_t)v65), (int8x16_t)v65, 0xCuLL);
      float32x4_t v67 = vmlaq_f32(vmulq_f32(v66, (float32x4_t)xmmword_23437C080), (float32x4_t)xmmword_23435FD80, v65);
      float32x4_t v68 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v67, (int32x4_t)v67), (int8x16_t)v67, 0xCuLL);
      int32x4_t v69 = (int32x4_t)vmulq_f32(v67, v67);
      v69.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v69.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v69, 2), *(float32x2_t *)v69.i8)).u32[0];
      float32x2_t v70 = vrsqrte_f32((float32x2_t)v69.u32[0]);
      float32x2_t v71 = vmul_f32(v70, vrsqrts_f32((float32x2_t)v69.u32[0], vmul_f32(v70, v70)));
      float32x4_t v72 = vmulq_n_f32(v68, vmul_f32(v71, vrsqrts_f32((float32x2_t)v69.u32[0], vmul_f32(v71, v71))).f32[0]);
      float v73 = v72.f32[1];
      float32x4_t v74 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v72, (int32x4_t)v72), (int8x16_t)v72, 0xCuLL), vnegq_f32(v65)), v72, v66);
      float v75 = v65.f32[2] + vaddq_f32(v72, v74).f32[0];
      if (v75 >= 0.0)
      {
        v74.f32[0] = sqrtf(v75 + v35);
        v72.f32[0] = v74.f32[0] + v74.f32[0];
        float32x2_t v78 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v74.f32[0] + v74.f32[0]));
        float32x2_t v79 = vmul_f32(v78, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v74.f32[0] + v74.f32[0]), v78));
        float v80 = vmul_f32(v79, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v74.f32[0] + v74.f32[0]), v79)).f32[0];
        v74.f32[0] = (float)(v74.f32[1] - v65.f32[1]) * v80;
        float v76 = (float)(v65.f32[0] - v72.f32[2]) * v80;
        v65.f32[0] = (float)(v72.f32[1] - v74.f32[2]) * v80;
        float v77 = v72.f32[0] * 0.25;
      }
      else if (v72.f32[0] < v65.f32[2] {
             || (vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v72, v74))).u8[0] & 1) != 0)
      }
      {
        v72.f32[0] = v35 - v72.f32[0];
        BOOL v81 = v74.f32[0] < v65.f32[2];
        float v82 = sqrtf(v65.f32[2] + (float)(v72.f32[0] - v74.f32[0]));
        *(float *)&unsigned int v83 = v82 + v82;
        float32x2_t v84 = vrecpe_f32((float32x2_t)v83);
        float32x2_t v85 = vmul_f32(v84, vrecps_f32((float32x2_t)v83, v84));
        float v86 = vmul_f32(v85, vrecps_f32((float32x2_t)v83, v85)).f32[0];
        float v87 = (float)(v65.f32[0] + v72.f32[2]) * v86;
        float v88 = (float)(v65.f32[1] + v74.f32[1]) * v86;
        float v89 = *(float *)&v83 * 0.25;
        float v90 = (float)(v72.f32[1] - v74.f32[2]) * v86;
        v74.f32[0] = sqrtf((float)(v72.f32[0] - v65.f32[2]) + v74.f32[0]);
        v74.f32[0] = v74.f32[0] + v74.f32[0];
        *(float32x2_t *)v72.f32 = vrecpe_f32((float32x2_t)v74.u32[0]);
        *(float32x2_t *)v72.f32 = vmul_f32(*(float32x2_t *)v72.f32, vrecps_f32((float32x2_t)v74.u32[0], *(float32x2_t *)v72.f32));
        float v91 = vmul_f32(*(float32x2_t *)v72.f32, vrecps_f32((float32x2_t)v74.u32[0], *(float32x2_t *)v72.f32)).f32[0];
        float v92 = (float)(v73 + v74.f32[2]) * v91;
        float v93 = v74.f32[0] * 0.25;
        float v94 = (float)(v65.f32[1] + v74.f32[1]) * v91;
        float v77 = (float)(v65.f32[0] - v72.f32[2]) * v91;
        if (v81) {
          v74.f32[0] = v87;
        }
        else {
          v74.f32[0] = v92;
        }
        if (v81) {
          float v76 = v88;
        }
        else {
          float v76 = v93;
        }
        if (v81) {
          v65.f32[0] = v89;
        }
        else {
          v65.f32[0] = v94;
        }
        if (v81) {
          float v77 = v90;
        }
      }
      else
      {
        v74.f32[0] = sqrtf(v72.f32[0] + (float)((float)(v35 - v74.f32[0]) - v65.f32[2]));
        v74.f32[0] = v74.f32[0] + v74.f32[0];
        *(float32x2_t *)v72.f32 = vrecpe_f32((float32x2_t)v74.u32[0]);
        *(float32x2_t *)v72.f32 = vmul_f32(*(float32x2_t *)v72.f32, vrecps_f32((float32x2_t)v74.u32[0], *(float32x2_t *)v72.f32));
        v72.f32[0] = vmul_f32(*(float32x2_t *)v72.f32, vrecps_f32((float32x2_t)v74.u32[0], *(float32x2_t *)v72.f32)).f32[0];
        v74.f32[0] = v74.f32[0] * 0.25;
        float v76 = (float)(v73 + v74.f32[2]) * v72.f32[0];
        v65.f32[0] = (float)(v65.f32[0] + v72.f32[2]) * v72.f32[0];
        float v77 = (float)(v74.f32[1] - v65.f32[1]) * v72.f32[0];
      }
      uint64_t v95 = 0;
      float v96 = v33.f32[0] + v33.f32[0];
      float v97 = v36 + v36;
      float v98 = v37 + v37;
      float v99 = v33.f32[0] * (float)(v33.f32[0] + v33.f32[0]);
      float v100 = v36 * (float)(v36 + v36);
      float v101 = v37 * (float)(v37 + v37);
      float v102 = (float)(v33.f32[0] + v33.f32[0]) * v36;
      float v103 = (float)(v33.f32[0] + v33.f32[0]) * v37;
      float v104 = v97 * v37;
      float v105 = v97 * v38;
      float v106 = v98 * v38;
      v107.i32[3] = 0;
      v107.f32[0] = v35 - (float)(v100 + v101);
      v107.f32[1] = v102 + v106;
      v107.f32[2] = v103 - v105;
      float v108 = v96 * v38;
      v109.i32[3] = 0;
      v109.f32[0] = v102 - v106;
      v109.f32[1] = v35 - (float)(v99 + v101);
      v109.f32[2] = v104 + v108;
      char v110 = v184[0];
      unint64_t v111 = v184[0] >> 1;
      if ((v184[0] & 1) == 0) {
        unint64_t v111 = LOBYTE(v184[0]) >> 1;
      }
      float v112 = (float)v111;
      char v113 = v180;
      unint64_t v114 = v180 >> 1;
      if ((v180 & 1) == 0) {
        unint64_t v114 = v180 >> 1;
      }
      float32_t v115 = v104 - v108;
      *(float *)&unsigned int v116 = v35 - (float)(v99 + v100);
      v117.f32[0] = v103 + v105;
      v117.f32[1] = v115;
      v117.i64[1] = v116;
      float v118 = sqrtf(v58);
      v27.f32[3] = v35;
      float v119 = v76 + v76;
      float v120 = v65.f32[0] + v65.f32[0];
      float v121 = v76 * (float)(v76 + v76);
      float v122 = v65.f32[0] * (float)(v65.f32[0] + v65.f32[0]);
      float v123 = (float)(v74.f32[0] + v74.f32[0]) * v76;
      float v124 = (float)(v74.f32[0] + v74.f32[0]) * v65.f32[0];
      float v125 = v119 * v65.f32[0];
      float v126 = (float)(v74.f32[0] + v74.f32[0]) * v77;
      float v127 = v119 * v77;
      v128.i32[3] = 0;
      float v129 = v120 * v77;
      v130.i32[3] = 0;
      v131.i32[3] = 0;
      v131.f32[0] = v124 + v127;
      v131.f32[1] = v125 - v126;
      LODWORD(v132) = 0;
      *((float *)&v132 + 1) = v118;
      float v133 = v74.f32[0] * (float)(v74.f32[0] + v74.f32[0]);
      *(void *)&long long v134 = 0;
      *((void *)&v134 + 1) = LODWORD(v118);
      long long v168 = v132;
      long long v169 = LODWORD(v118);
      long long v185 = LODWORD(v118);
      long long v186 = v132;
      long long v187 = v134;
      long long v188 = xmmword_23435FBB0;
      do
      {
        *(float32x4_t *)((char *)&v189 + v95) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v107, COERCE_FLOAT(*(long long *)((char *)&v185 + v95))), v109, *(float32x2_t *)((char *)&v185 + v95), 1), v117, *(float32x4_t *)((char *)&v185 + v95), 2), v27, *(float32x4_t *)((char *)&v185 + v95), 3);
        v95 += 16;
      }
      while (v95 != 64);
      uint64_t v135 = 0;
      v130.f32[2] = v125 + v126;
      float32x4_t v136 = v189;
      float32x4_t v137 = v190;
      float32x4_t v138 = v191;
      float32x4_t v139 = v192;
      long long v185 = xmmword_2343E1410;
      long long v186 = xmmword_2343E1420;
      float v174 = (float)v114 / -3.0;
      long long v187 = xmmword_2343E1430;
      long long v188 = xmmword_23435FBB0;
      do
      {
        *(float32x4_t *)((char *)&v189 + v135) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v136, COERCE_FLOAT(*(long long *)((char *)&v185 + v135))), v137, *(float32x2_t *)((char *)&v185 + v135), 1), v138, *(float32x4_t *)((char *)&v185 + v135), 2), v139, *(float32x4_t *)((char *)&v185 + v135), 3);
        v135 += 16;
      }
      while (v135 != 64);
      v131.f32[2] = v35 - (float)(v133 + v121);
      float32x4_t v170 = v131;
      v130.f32[1] = v35 - (float)(v133 + v122);
      v130.f32[0] = v123 - v129;
      float32x4_t v171 = v130;
      uint64_t v140 = 0;
      *(float *)&long long v141 = v112 / -3.0;
      DWORD1(v141) = 0;
      DWORD2(v141) = 0;
      *((float *)&v141 + 3) = v35;
      float32x4_t v142 = v189;
      float32x4_t v143 = v190;
      float32x4_t v144 = v191;
      float32x4_t v145 = v192;
      long long v185 = xmmword_23435FD50;
      long long v186 = xmmword_23435FD60;
      long long v187 = xmmword_23435FD80;
      long long v188 = v141;
      do
      {
        *(float32x4_t *)((char *)&v189 + v140) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v142, COERCE_FLOAT(*(long long *)((char *)&v185 + v140))), v143, *(float32x2_t *)((char *)&v185 + v140), 1), v144, *(float32x4_t *)((char *)&v185 + v140), 2), v145, *(float32x4_t *)((char *)&v185 + v140), 3);
        v140 += 16;
      }
      while (v140 != 64);
      v128.f32[1] = v123 + v129;
      v60.f32[3] = v35;
      float32x4_t v176 = v60;
      v128.f32[2] = v124 - v127;
      v128.f32[0] = v35 - (float)(v121 + v122);
      float32x4_t v172 = v128;
      if (v110) {
        v146 = (char *)v184[1];
      }
      else {
        v146 = (char *)v184 + 1;
      }
      long long v185 = xmmword_234376D50;
      re::DebugRenderer::drawText((uint64_t)a2, (long long *)&v189, v146, a3, &v185);
      uint64_t v147 = 0;
      long long v185 = v169;
      long long v186 = v168;
      long long v187 = v134;
      long long v188 = xmmword_23435FBB0;
      do
      {
        *(float32x4_t *)((char *)&v189 + v147) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v172, COERCE_FLOAT(*(long long *)((char *)&v185 + v147))), v171, *(float32x2_t *)((char *)&v185 + v147), 1), v170, *(float32x4_t *)((char *)&v185 + v147), 2), v176, *(float32x4_t *)((char *)&v185 + v147), 3);
        v147 += 16;
      }
      while (v147 != 64);
      uint64_t v148 = 0;
      float32x4_t v149 = v189;
      float32x4_t v150 = v190;
      float32x4_t v151 = v191;
      float32x4_t v152 = v192;
      long long v185 = xmmword_2343E1410;
      long long v186 = xmmword_2343E1420;
      long long v187 = xmmword_2343E1430;
      long long v188 = xmmword_23435FBB0;
      do
      {
        *(float32x4_t *)((char *)&v189 + v148) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v149, COERCE_FLOAT(*(long long *)((char *)&v185 + v148))), v150, *(float32x2_t *)((char *)&v185 + v148), 1), v151, *(float32x4_t *)((char *)&v185 + v148), 2), v152, *(float32x4_t *)((char *)&v185 + v148), 3);
        v148 += 16;
      }
      while (v148 != 64);
      uint64_t v153 = 0;
      *(void *)&long long v154 = LODWORD(v174);
      DWORD2(v154) = 0;
      HIDWORD(v154) = 1.0;
      float32x4_t v155 = v189;
      float32x4_t v156 = v190;
      float32x4_t v157 = v191;
      float32x4_t v158 = v192;
      long long v185 = xmmword_23435FD50;
      long long v186 = xmmword_23435FD60;
      long long v187 = xmmword_23435FD80;
      long long v188 = v154;
      do
      {
        *(float32x4_t *)((char *)&v189 + v153) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v155, COERCE_FLOAT(*(long long *)((char *)&v185 + v153))), v156, *(float32x2_t *)((char *)&v185 + v153), 1), v157, *(float32x4_t *)((char *)&v185 + v153), 2), v158, *(float32x4_t *)((char *)&v185 + v153), 3);
        v153 += 16;
      }
      while (v153 != 64);
      uint64_t v159 = v113 & 1;
      if (v159) {
        v160 = v181;
      }
      else {
        v160 = (char *)&v180 + 1;
      }
      long long v185 = xmmword_234376D50;
      re::DebugRenderer::drawText((uint64_t)a2, (long long *)&v189, v160, a3, &v185);
      if (v179 && v159) {
        (*(void (**)(void))(*v179 + 40))();
      }
      if (v183 && (v110 & 1) != 0) {
        (*(void (**)(void))(*(void *)v183 + 40))();
      }
      if (*(_DWORD *)(a1 + 160) <= (v5 + 1)) {
        int v161 = v5 + 1;
      }
      else {
        int v161 = *(_DWORD *)(a1 + 160);
      }
      while (1)
      {
        uint64_t v7 = (v5 + 1);
        if (v161 - 1 == v5) {
          break;
        }
        LODWORD(v5) = v5 + 1;
        int v162 = v7;
        if ((*(_DWORD *)(*(void *)(a1 + 144) + 368 * v7 + 8) & 0x80000000) != 0) {
          goto LABEL_87;
        }
      }
      int v162 = v161;
LABEL_87:
      LODWORD(v5) = v162;
    }
    while (v167 != v162);
  }
  CFRelease(cf);
}

void re::PersistentShadowState::visualizeShadowPlanes(re::PersistentShadowState *this, os_unfair_lock_s *a2)
{
  if (re::internal::shadows::g_enableShadowFlattening)
  {
    uint64_t v4 = *((unsigned int *)this + 40);
    if (v4)
    {
      uint64_t v5 = 0;
      unint64_t v6 = (_DWORD *)(*((void *)this + 18) + 8);
      while ((*v6 & 0x80000000) == 0)
      {
        v6 += 92;
        if (v4 == ++v5)
        {
          LODWORD(v5) = *((_DWORD *)this + 40);
          break;
        }
      }
    }
    else
    {
      LODWORD(v5) = 0;
    }
    if (v4 != v5)
    {
      uint64_t v7 = v5;
      unsigned int v8 = *((_DWORD *)this + 40);
      do
      {
        uint64_t v9 = *((void *)this + 18);
        if (*(unsigned char *)(v9 + 368 * v7 + 272))
        {
          uint64_t v10 = (float32x4_t *)(v9 + 368 * v7);
          v11.i64[0] = 0x3F0000003F000000;
          v11.i64[1] = 0x3F0000003F000000;
          float32x4_t v12 = vaddq_f32(v10[19], vmulq_f32(v10[18], v11));
          long long v16 = xmmword_2343AE460;
          float32x4_t v17 = v12;
          re::DebugRenderer::drawArrow(a2, v10 + 19, &v17, &v16, 1, 0.1);
          float32x4_t v13 = vaddq_f32(v10[13], vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v10[10], (float)(v10[5].f32[0] + v10[6].f32[0]) * 0.5), v10[11], v10[5].f32[1]), v10[12], (float)(v10[5].f32[2] + v10[6].f32[2]) * 0.5));
          long long v16 = xmmword_2343AE470;
          float32x4_t v17 = vdivq_f32(v13, (float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3));
          re::DebugRenderer::drawLine(a2, (long long *)&v10[19], (long long *)&v17, &v16, 1);
          unsigned int v8 = *((_DWORD *)this + 40);
        }
        if (v8 <= (int)v5 + 1) {
          unsigned int v14 = v5 + 1;
        }
        else {
          unsigned int v14 = v8;
        }
        while (1)
        {
          uint64_t v7 = (v5 + 1);
          if (v14 - 1 == v5) {
            break;
          }
          LODWORD(v5) = v5 + 1;
          unsigned int v15 = v7;
          if ((*(_DWORD *)(*((void *)this + 18) + 368 * v7 + 8) & 0x80000000) != 0) {
            goto LABEL_19;
          }
        }
        unsigned int v15 = v14;
LABEL_19:
        LODWORD(v5) = v15;
      }
      while (v4 != v15);
    }
  }
}

void re::PersistentShadowState::visualizeShadowMatrices(re::PersistentShadowState *this, os_unfair_lock_s *a2)
{
  uint64_t v4 = *((unsigned int *)this + 28);
  if (v4)
  {
    uint64_t v5 = 0;
    unint64_t v6 = (int *)(*((void *)this + 12) + 8);
    while (1)
    {
      int v7 = *v6;
      v6 += 18;
      if (v7 < 0) {
        break;
      }
      if (v4 == ++v5)
      {
        LODWORD(v5) = *((_DWORD *)this + 28);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if (v4 != v5)
  {
    uint64_t v8 = v5;
    __asm { FMOV            V0.4S, #-1.0 }
    long long v20 = _Q0;
    __asm { FMOV            V0.4S, #1.0 }
    long long v19 = _Q0;
    do
    {
      uint64_t v15 = re::ShadowTileManager::dataForTile((uint64_t)this, (unsigned __int16 *)(*((void *)this + 12) + 72 * v8 + 64));
      long long v29 = xmmword_2343AD6D0;
      uint64_t v30 = 0x3F8000003F800000;
      uint64_t v31 = 1065353216;
      long long v16 = v20;
      DWORD2(v16) = *(_DWORD *)(v15 + 1664);
      long long v26 = v16;
      uint64_t v27 = 0x3F8000003F800000;
      uint64_t v28 = 1065353216;
      simd_float4x4 v32 = __invert_f4(*(simd_float4x4 *)(v15 + 1456));
      float32x4_t v22 = (float32x4_t)v32.columns[0];
      simd_float4 v23 = v32.columns[1];
      simd_float4 v24 = v32.columns[2];
      simd_float4 v25 = v32.columns[3];
      long long v21 = v19;
      re::DebugRenderer::drawBox(a2, &v22, (float *)&v29, &v21, 1);
      simd_float4x4 v33 = __invert_f4(*(simd_float4x4 *)(v15 + 1456));
      float32x4_t v22 = (float32x4_t)v33.columns[0];
      simd_float4 v23 = v33.columns[1];
      simd_float4 v24 = v33.columns[2];
      simd_float4 v25 = v33.columns[3];
      re::DebugRenderer::drawAxis(a2, &v22, 1, 0.5, 0.1);
      simd_float4x4 v34 = __invert_f4(*(simd_float4x4 *)(v15 + 1520));
      float32x4_t v22 = (float32x4_t)v34.columns[0];
      simd_float4 v23 = v34.columns[1];
      simd_float4 v24 = v34.columns[2];
      simd_float4 v25 = v34.columns[3];
      long long v21 = xmmword_234376D80;
      re::DebugRenderer::drawBox(a2, &v22, (float *)&v26, &v21, 1);
      simd_float4x4 v35 = __invert_f4(*(simd_float4x4 *)(v15 + 1520));
      float32x4_t v22 = (float32x4_t)v35.columns[0];
      simd_float4 v23 = v35.columns[1];
      simd_float4 v24 = v35.columns[2];
      simd_float4 v25 = v35.columns[3];
      re::DebugRenderer::drawAxis(a2, &v22, 1, 0.5, 0.1);
      simd_float4x4 v36 = __invert_f4(*(simd_float4x4 *)(v15 + 1584));
      float32x4_t v22 = (float32x4_t)v36.columns[0];
      simd_float4 v23 = v36.columns[1];
      simd_float4 v24 = v36.columns[2];
      simd_float4 v25 = v36.columns[3];
      re::DebugRenderer::drawAxis(a2, &v22, 1, 0.5, 0.1);
      if (*((_DWORD *)this + 28) <= (v5 + 1)) {
        int v17 = v5 + 1;
      }
      else {
        int v17 = *((_DWORD *)this + 28);
      }
      int v18 = v5;
      while (1)
      {
        uint64_t v8 = (v18 + 1);
        if (v17 - 1 == v18) {
          break;
        }
        ++v18;
        LODWORD(v5) = v8;
        if ((*(_DWORD *)(*((void *)this + 12) + 72 * v8 + 8) & 0x80000000) != 0) {
          goto LABEL_17;
        }
      }
      LODWORD(v5) = v17;
LABEL_17:
      ;
    }
    while (v4 != v5);
  }
}

void re::PersistentShadowState::visualizeCullBoundingBoxes(re::PersistentShadowState *this, os_unfair_lock_s *a2)
{
  uint64_t v4 = *((unsigned int *)this + 28);
  if (v4)
  {
    uint64_t v5 = 0;
    unint64_t v6 = (int *)(*((void *)this + 12) + 8);
    while (1)
    {
      int v7 = *v6;
      v6 += 18;
      if (v7 < 0) {
        break;
      }
      if (v4 == ++v5)
      {
        LODWORD(v5) = *((_DWORD *)this + 28);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if (v4 != v5)
  {
    uint64_t v8 = v5;
    do
    {
      uint64_t v9 = (float32x4_t *)re::ShadowTileManager::dataForTile((uint64_t)this, (unsigned __int16 *)(*((void *)this + 12) + 72 * v8 + 64));
      v10.i32[0] = 0;
      v11.i8[0] = v9[84].i8[0];
      int8x16_t v14 = vbslq_s8(vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v11, v10), 0), (int8x16_t)xmmword_23435FD50, (int8x16_t)xmmword_23435FD60);
      re::DebugRenderer::drawBox(a2, v9 + 87, v9[85].f32, (long long *)v14.i8, 1);
      if (*((_DWORD *)this + 28) <= (v5 + 1)) {
        int v12 = v5 + 1;
      }
      else {
        int v12 = *((_DWORD *)this + 28);
      }
      int v13 = v5;
      while (1)
      {
        uint64_t v8 = (v13 + 1);
        if (v12 - 1 == v13) {
          break;
        }
        ++v13;
        LODWORD(v5) = v8;
        if ((*(_DWORD *)(*((void *)this + 12) + 72 * v8 + 8) & 0x80000000) != 0) {
          goto LABEL_17;
        }
      }
      LODWORD(v5) = v12;
LABEL_17:
      ;
    }
    while (v4 != v5);
  }
}

unint64_t re::Hash<re::ShadowPair>::operator()(uint64_t a1, void *a2)
{
  unint64_t v2 = 0xBF58476D1CE4E5B9 * (a2[1] ^ (a2[1] >> 30));
  unint64_t v3 = (0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31);
  unint64_t v4 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  return (((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
        + (v3 << 6)
        + (v3 >> 2)
        - 0x61C8864680B583E9) ^ v3;
}

uint64_t re::ShadowTileManager::dataForTile(uint64_t a1, unsigned __int16 *a2)
{
  if (*(void *)(a1 + 56) <= (unint64_t)*a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 72) + 1792 * *a2;
}

uint64_t re::useDitherFade(re *this)
{
  uint64_t v1 = (unsigned __int8 *)&unk_2687A0000;
  {
    uint64_t v1 = (unsigned char *)&unk_2687A0000;
    if (v3)
    {
      re::Defaults::BOOLValue((re::Defaults *)"useDitherFade", v4, v6);
      char v5 = v6[1];
      if (!v6[0]) {
        char v5 = 0;
      }
      re::useDitherFade(void)::kUseDitherFade = v5;
      uint64_t v1 = (unsigned char *)&unk_2687A0000;
    }
  }
  return v1[760];
}

double re::DrawingManager::DrawingManager(re::DrawingManager *this)
{
  *((_DWORD *)this + 8) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(void *)((char *)this + 36) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 0;
  *(void *)((char *)this + 84) = 0x7FFFFFFFLL;
  *((void *)this + 25) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 0;
  *((_WORD *)this + 104) = 257;
  *((void *)this + 27) = 0;
  *((void *)this + 28) = "";
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  *((unsigned char *)this + 248) = 0;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((void *)this + 42) = 0;
  for (uint64_t i = 344; i != 472; i += 32)
  {
    unint64_t v2 = (_OWORD *)((char *)this + i);
    *unint64_t v2 = xmmword_2343E1450;
    v2[1] = xmmword_2343E1450;
  }
  do
  {
    int v3 = (_OWORD *)((char *)this + i);
    *int v3 = xmmword_2343E1450;
    v3[1] = xmmword_2343E1450;
    i += 32;
  }
  while (i != 600);
  double result = 0.0;
  *((_OWORD *)this + 39) = 0u;
  *((_DWORD *)this + 160) = 1;
  *(_OWORD *)((char *)this + 648) = 0u;
  *((void *)this + 89) = 0;
  *((_OWORD *)this + 45) = 0u;
  *((_DWORD *)this + 184) = 0;
  *((void *)this + 99) = 0x100000000;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 760) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *((_OWORD *)this + 50) = 0u;
  *((_OWORD *)this + 51) = 0u;
  *((_OWORD *)this + 52) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 54) = 0u;
  *((void *)this + 110) = 0;
  *((_DWORD *)this + 224) = 2;
  *((void *)this + 113) = 0;
  *((unsigned char *)this + 912) = 0;
  *((_DWORD *)this + 238) = 0;
  *(_OWORD *)((char *)this + 920) = 0u;
  *(_OWORD *)((char *)this + 936) = 0u;
  *(void *)((char *)this + 956) = 0x7FFFFFFFLL;
  *((void *)this + 121) = 1;
  *((void *)this + 128) = 0;
  *((_DWORD *)this + 258) = 0;
  *((_OWORD *)this + 63) = 0u;
  *((_OWORD *)this + 61) = 0u;
  *((_DWORD *)this + 264) = 0;
  *((_OWORD *)this + 65) = 0u;
  *(_OWORD *)((char *)this + 1064) = xmmword_2343ACD60;
  *(_OWORD *)((char *)this + 1080) = xmmword_2343ACD60;
  *(_OWORD *)((char *)this + 1096) = xmmword_2343ACD60;
  *(_OWORD *)((char *)this + 1112) = xmmword_2343ACD60;
  *((void *)this + 178) = 0;
  *(_OWORD *)((char *)this + 1128) = 0u;
  *(_OWORD *)((char *)this + 1144) = 0u;
  *(_OWORD *)((char *)this + 1160) = 0u;
  *(_OWORD *)((char *)this + 1176) = 0u;
  *(_OWORD *)((char *)this + 1192) = 0u;
  *(_OWORD *)((char *)this + 1208) = 0u;
  *(_OWORD *)((char *)this + 1224) = 0u;
  *(_OWORD *)((char *)this + 1240) = 0u;
  *(_OWORD *)((char *)this + 1256) = 0u;
  *(_OWORD *)((char *)this + 1272) = 0u;
  *(_OWORD *)((char *)this + 1288) = 0u;
  *(_OWORD *)((char *)this + 1304) = 0u;
  *(_OWORD *)((char *)this + 1320) = 0u;
  *(_OWORD *)((char *)this + 1336) = 0u;
  *(_OWORD *)((char *)this + 1352) = 0u;
  *(_OWORD *)((char *)this + 1368) = 0u;
  *(_OWORD *)((char *)this + 1384) = 0u;
  *(_OWORD *)((char *)this + 1400) = 0u;
  *((_DWORD *)this + 354) = 0;
  *(_OWORD *)((char *)this + 1572) = 0u;
  *(_OWORD *)((char *)this + 1544) = 0u;
  *(_OWORD *)((char *)this + 1560) = 0u;
  *(_OWORD *)((char *)this + 1512) = 0u;
  *(_OWORD *)((char *)this + 1528) = 0u;
  *(_OWORD *)((char *)this + 1496) = 0u;
  *((void *)this + 199) = 0;
  *((_OWORD *)this + 100) = 0u;
  *((unsigned char *)this + 1616) = 0;
  *(_OWORD *)((char *)this + 1624) = 0u;
  *((_DWORD *)this + 410) = 0;
  *((_OWORD *)this + 103) = 0u;
  *((_OWORD *)this + 104) = 0u;
  *((_OWORD *)this + 105) = 0u;
  *((_DWORD *)this + 424) = 0;
  *(_OWORD *)((char *)this + 1704) = 0u;
  *(_OWORD *)((char *)this + 1720) = 0u;
  *((_DWORD *)this + 434) = 0;
  *((void *)this + 219) = 0;
  *((void *)this + 218) = 0;
  *((void *)this + 220) = 1114636288;
  *((unsigned char *)this + 1768) = 1;
  return result;
}

void re::DrawingManager::~DrawingManager(re::DrawingManager *this)
{
  re::DynamicArray<re::CommandBuffer>::deinit((uint64_t)this + 1712);
  uint64_t v2 = *((void *)this + 209);
  if (v2)
  {
    int v3 = (void **)*((void *)this + 213);
    if (v3)
    {
      uint64_t v4 = *((void *)this + 211);
      if (v4)
      {
        uint64_t v5 = 32 * v4;
        do
        {
          unint64_t v6 = *v3;
          v3 += 4;

          v5 -= 32;
        }
        while (v5);
        uint64_t v2 = *((void *)this + 209);
        int v3 = (void **)*((void *)this + 213);
      }
      (*(void (**)(uint64_t, void **))(*(void *)v2 + 40))(v2, v3);
    }
    *((void *)this + 213) = 0;
    *((void *)this + 210) = 0;
    *((void *)this + 211) = 0;
    *((void *)this + 209) = 0;
    ++*((_DWORD *)this + 424);
  }
  uint64_t v7 = *((void *)this + 174);
  if (v7)
  {
    uint64_t v8 = *((void *)this + 178);
    if (v8)
    {
      uint64_t v9 = *((void *)this + 176);
      if (v9)
      {
        uint64_t v10 = 200 * v9;
        uint64_t v11 = v8 + 48;
        do
        {
          re::SampleBufferObjectPool::~SampleBufferObjectPool((re::SampleBufferObjectPool *)(v11 + 40));
          re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::deinit(v11);

          v11 += 200;
          v10 -= 200;
        }
        while (v10);
        uint64_t v7 = *((void *)this + 174);
        uint64_t v8 = *((void *)this + 178);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 40))(v7, v8);
    }
    *((void *)this + 178) = 0;
    *((void *)this + 175) = 0;
    *((void *)this + 176) = 0;
    *((void *)this + 174) = 0;
    ++*((_DWORD *)this + 354);
  }
  for (uint64_t i = 1384; i != 1128; i -= 8)

  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 1008);
  re::HashTable<unsigned short,re::Function<void ()(re::GpuTimingData const&)>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::deinit((uint64_t *)this + 115);

  int v13 = (void *)*((void *)this + 108);
  if (v13)
  {

    *((void *)this + 108) = 0;
  }
  int8x16_t v14 = (void *)*((void *)this + 106);
  if (v14)
  {

    *((void *)this + 106) = 0;
  }
  uint64_t v15 = (void *)*((void *)this + 101);
  if (v15)
  {

    *((void *)this + 101) = 0;
  }

  long long v16 = (void *)*((void *)this + 98);
  if (v16)
  {

    *((void *)this + 98) = 0;
  }
  int v17 = (void *)*((void *)this + 97);
  if (v17)
  {

    *((void *)this + 97) = 0;
  }
  int v18 = (void *)*((void *)this + 96);
  if (v18)
  {

    *((void *)this + 96) = 0;
  }
  long long v19 = (void *)*((void *)this + 95);
  if (v19)
  {

    *((void *)this + 95) = 0;
  }
  long long v20 = (void *)*((void *)this + 94);
  if (v20)
  {

    *((void *)this + 94) = 0;
  }
  re::DynamicArray<re::BufferSlice>::deinit((uint64_t)this + 712);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 624);

  long long v21 = (void *)*((void *)this + 29);
  if (v21)
  {

    *((void *)this + 29) = 0;
  }
  re::StringID::destroyString((re::DrawingManager *)((char *)this + 216));
  uint64_t v22 = *((void *)this + 21);
  if (v22)
  {
    simd_float4 v23 = (id *)*((void *)this + 25);
    if (v23)
    {
      uint64_t v24 = *((void *)this + 23);
      if (v24)
      {
        uint64_t v25 = 8 * v24;
        do
        {
          if (*v23)
          {

            id *v23 = 0;
          }
          ++v23;
          v25 -= 8;
        }
        while (v25);
        uint64_t v22 = *((void *)this + 21);
        simd_float4 v23 = (id *)*((void *)this + 25);
      }
      (*(void (**)(uint64_t, id *))(*(void *)v22 + 40))(v22, v23);
    }
    *((void *)this + 25) = 0;
    *((void *)this + 22) = 0;
    *((void *)this + 23) = 0;
    *((void *)this + 21) = 0;
    ++*((_DWORD *)this + 48);
  }
  uint64_t v26 = *((void *)this + 20);
  if (v26)
  {
    if (*((void *)this + 14)) {
      *((void *)this + 14) = 0;
    }
    if (*((void *)this + 13))
    {
      (*(void (**)(uint64_t))(*(void *)v26 + 40))(v26);
      *((void *)this + 13) = 0;
    }
    *(_OWORD *)((char *)this + 152) = 0u;
    *(_OWORD *)((char *)this + 136) = 0u;
    *(_OWORD *)((char *)this + 120) = 0u;
  }
  re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::deinit((uint64_t *)this + 6);
  re::HashTable<unsigned long,re::CachedTileRenderPipelineState,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)this);
}

BOOL re::DrawingManager::init(re::DrawingManager *this, re::RenderManager *a2, re::ProfilerManager *a3, re::ColorManager *a4)
{
  uint64_t v122 = *MEMORY[0x263EF8340];
  *((void *)this + 32) = a2;
  *((void *)this + 33) = a4;
  id v8 = objc_msgSend(objc_msgSend(MEMORY[0x263F12818], sel_alloc), sel_init);
  p_long long buf = &_MergedGlobals_395;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95F10, memory_order_acquire) & 1) == 0) {
    goto LABEL_96;
  }
  while (1)
  {
    objc_msgSend(v8, sel_setDisableCrossQueueHazardTracking_, *p_buf);
    uint64_t v10 = (re *)objc_msgSend(v8, sel_setMaxCommandBufferCount_, 1024);
    if ((atomic_load_explicit(p_buf + 16, memory_order_acquire) & 1) == 0)
    {
      uint64_t v10 = (re *)__cxa_guard_acquire(&qword_26AF95F18);
      if (v10)
      {
        re::Defaults::BOOLValue((re::Defaults *)"enableSynchronousCommandQueue", v105, (char *)&buf);
        if ((_BYTE)buf) {
          char v106 = BYTE1(buf);
        }
        else {
          char v106 = 1;
        }
        byte_26AF95F09 = v106;
        __cxa_guard_release(&qword_26AF95F18);
      }
    }
    uint64_t v11 = *re::graphicsLogObjects(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      if (byte_26AF95F09) {
        int v12 = "enabled";
      }
      else {
        int v12 = "disabled";
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v12;
      _os_log_impl(&dword_233120000, v11, OS_LOG_TYPE_DEFAULT, "com.apple.re.enableSynchronousCommandQueue is %s", (uint8_t *)&buf, 0xCu);
    }
    int v13 = (re::mtl *)objc_msgSend(v8, sel_setCommitSynchronously_, byte_26AF95F09);
    if (*((unsigned char *)a2 + 270))
    {
      int8x16_t v14 = (re *)re::mtl::commandQueueSupportsDisableAsyncCompletionDispatch(v13);
      if (v14)
      {
        if (*((unsigned char *)a2 + 266))
        {
          uint64_t v15 = *re::graphicsLogObjects(v14);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(buf) = 0;
            long long v16 = "disableMetalAsyncCompletionDispatch is not supported with enableRenderThread";
LABEL_15:
            _os_log_impl(&dword_233120000, v15, OS_LOG_TYPE_DEFAULT, v16, (uint8_t *)&buf, 2u);
          }
        }
        else
        {
          *((unsigned char *)this + 794) = 1;
          objc_msgSend(v8, sel_setDisableAsyncCompletionDispatch_, 1);
          int v17 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INTERACTIVE, 0);
          int v18 = dispatch_queue_attr_make_with_autorelease_frequency(v17, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
          long long v19 = dispatch_queue_create("RE Async Command Buffer Callback Queue", v18);
          id v20 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A00], sel_alloc), sel_initWithDispatchQueue_, v19);
          id v21 = (id)*((void *)this + 108);
          if (v21 == v20)
          {
          }
          else
          {
            if (v21) {

            }
            *((void *)this + 108) = v20;
          }
          dispatch_release(v19);
        }
      }
      else
      {
        uint64_t v15 = *re::graphicsLogObjects(v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf) = 0;
          long long v16 = "DisableAsyncCompletionDispatch is not supported";
          goto LABEL_15;
        }
      }
    }
    p_long long buf = (char *)a2 + 184;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95F20, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF95F20))
    {
      re::Defaults::intValue((re::Defaults *)"backboarddGPUPriorityOverride", v107, (uint64_t)&buf);
      if ((_BYTE)buf) {
        int v108 = DWORD1(buf);
      }
      else {
        int v108 = 1;
      }
      dword_26AF95F0C = v108;
      __cxa_guard_release(&qword_26AF95F20);
    }
    re::mtl::Device::makeCommandQueue((id *)a2 + 23, (uint64_t)v8, &buf);
    uint64_t v22 = (id *)((char *)this + 280);
    if ((long long *)((char *)this + 280) != &buf)
    {
      simd_float4 v23 = (void *)buf;
      *(void *)&long long buf = 0;
      id v24 = *v22;
      *uint64_t v22 = v23;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95F50, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF95F50))
    {
      float32x4_t v109 = re::ns::String::String((re::ns::String *)&qword_26AF95F48, (re::ns *)"RenderManagerQueue");
      __cxa_guard_release((__guard *)v109 + 1);
    }
    id v25 = qword_26AF95F48;
    [*v22 setLabel:v25];

    uint64_t v26 = (re::mtl *)[*v22 setGPUPriority:dword_26AF95F0C];
    if (!*v22)
    {
      re::internal::assertLog((re::internal *)4, v27, "assertion failure: '%s' (%s:line %i) Failed to make command queue.", "m_commandQueue.isValid()", "init", 174);
      _os_crash();
      __break(1u);
LABEL_92:
      re::internal::assertLog((re::internal *)4, v32, "assertion failure: '%s' (%s:line %i) Failed to make command queue.", "m_caCommandQueue.isValid()", "init", 184);
      _os_crash();
      __break(1u);
LABEL_93:
      re::internal::assertLog((re::internal *)4, v52, "assertion failure: '%s' (%s:line %i) PerFrameAllocatorGPU manager is not null before init.", "m_perFrameAllocatorGPUManager == nullptr", "init", 256);
      _os_crash();
      __break(1u);
      goto LABEL_94;
    }
    if (re::mtl::commandQueueSupportsDisableAsyncCompletionDispatch(v26)) {
      objc_msgSend(v8, sel_setDisableAsyncCompletionDispatch_, 0);
    }
    re::mtl::Device::makeCommandQueue((id *)a2 + 23, (uint64_t)v8, &buf);
    uint64_t v22 = (id *)((char *)this + 288);
    if ((long long *)((char *)this + 288) != &buf)
    {
      uint64_t v28 = (void *)buf;
      *(void *)&long long buf = 0;
      id v29 = *v22;
      *uint64_t v22 = v28;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95F60, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF95F60))
    {
      char v110 = re::ns::String::String((re::ns::String *)&qword_26AF95F58, (re::ns *)"CA Command Queue");
      __cxa_guard_release((__guard *)v110 + 1);
    }
    id v30 = qword_26AF95F58;
    [*v22 setLabel:v30];

    uint64_t v31 = (re *)[*v22 setGPUPriority:dword_26AF95F0C];
    if (!*v22) {
      goto LABEL_92;
    }
    simd_float4x4 v33 = re::globalAllocators(v31);
    uint64_t v22 = (id *)*((void *)a2 + 30);
    if (v22)
    {
      if ((unint64_t)v22 >> 60 || (unint64_t)(16 * (void)v22) >= 0xFFFFFFFFFFFFFFF0) {
        goto LABEL_95;
      }
      uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v33[2] + 32))(v33[2], (16 * (void)v22 + 16) | 7, 0);
      simd_float4x4 v36 = (void *)((v35 + 23) & 0xFFFFFFFFFFFFFFF8);
      *(v36 - 2) = v22;
      *(v36 - 1) = v35;
      bzero(v36, 16 * (void)v22);
      uint64_t v37 = *((void *)a2 + 30);
      *((void *)this + 103) = v36;
      if (v37)
      {
        uint64_t v38 = 0;
        unint64_t v39 = 0;
        uint64_t v22 = (id *)&selRef_taskToken;
        do
        {
          *(void *)&long long buf = objc_msgSend(*(id *)p_buf, sel_newFence);
          NS::SharedPtr<MTL::Texture>::operator=((void **)(*((void *)this + 103) + v38 + 8), (void **)&buf);
          if ((void)buf) {

          }
          *(void *)&long long buf = objc_msgSend(*(id *)p_buf, sel_newFence);
          NS::SharedPtr<MTL::Texture>::operator=((void **)(*((void *)this + 103) + v38), (void **)&buf);
          if ((void)buf) {

          }
          ++v39;
          v38 += 16;
        }
        while (*((void *)a2 + 30) > v39);
      }
    }
    else
    {
      *((void *)this + 103) = 0;
    }
    *(void *)&long long buf = objc_msgSend(*(id *)p_buf, sel_newEvent);
    p_long long buf = (char *)&buf;
    NS::SharedPtr<MTL::Texture>::operator=((void **)this + 29, (void **)&buf);
    float32x2_t v40 = (re *)buf;
    if ((void)buf) {

    }
    *((unsigned char *)this + 248) = 1;
    uint64_t v41 = *(void *)(*((void *)this + 32) + 136);
    BOOL v42 = re::globalAllocators(v40);
    float v43 = (re *)re::PerFrameAllocatorManager::addOwner((os_unfair_lock_s *)v42[6], this);
    *(void *)(v41 + 40) = v43;
    *(void *)(v41 + 48) = 0;
    uint64_t v44 = *(void *)(*((void *)this + 32) + 136);
    v120.i64[0] = re::globalAllocators(v43)[2];
    v120.i64[1] = (uint64_t)&buf;
    *(void *)&long long buf = &unk_26E711250;
    *((void *)&buf + 1) = this;
    re::FunctionBase<24ul,void ()(void)>::operator=<24ul>(v44 + 208, (uint64_t)&buf);
    float32x2_t v45 = (re *)re::FunctionBase<24ul,void ()(void)>::destroyCallable((uint64_t)&buf);
    uint64_t v46 = *(void *)(*((void *)this + 32) + 136);
    v120.i64[0] = re::globalAllocators(v45)[2];
    v120.i64[1] = (uint64_t)&buf;
    *(void *)&long long buf = &unk_26E7112A8;
    *((void *)&buf + 1) = this;
    re::FunctionBase<24ul,void ()(re::FrameCount)>::operator=<24ul>(v46 + 128, (uint64_t)&buf);
    float v47 = (re *)re::FunctionBase<24ul,void ()(re::FrameCount)>::destroyCallable((uint64_t)&buf);
    uint64_t v48 = *(void *)(*((void *)this + 32) + 136);
    v120.i64[0] = re::globalAllocators(v47)[2];
    v120.i64[1] = (uint64_t)&buf;
    *(void *)&long long buf = &unk_26E711300;
    *((void *)&buf + 1) = this;
    re::FunctionBase<24ul,void ()(re::FrameCount)>::operator=<24ul>(v48 + 168, (uint64_t)&buf);
    float v49 = (re *)re::FunctionBase<24ul,void ()(re::FrameCount)>::destroyCallable((uint64_t)&buf);
    uint64_t v50 = *(void *)(*((void *)this + 32) + 136);
    v120.i64[0] = re::globalAllocators(v49)[2];
    v120.i64[1] = (uint64_t)&buf;
    *(void *)&long long buf = &unk_26E711358;
    *((void *)&buf + 1) = this;
    re::FunctionBase<24ul,void ()(void)>::operator=<24ul>(v50 + 248, (uint64_t)&buf);
    float v51 = (re *)re::FunctionBase<24ul,void ()(void)>::destroyCallable((uint64_t)&buf);
    if (*((void *)this + 42)) {
      goto LABEL_93;
    }
    float v53 = re::globalAllocators(v51);
    p_long long buf = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v53[2] + 32))(v53[2], 5312, 8);
    char *p_buf = 0;
    *((void *)p_buf + 3) = 0;
    *((void *)p_buf + 4) = 0;
    *((void *)p_buf + 2) = 0;
    *((_DWORD *)p_buf + 10) = 0;
    *((void *)p_buf + 6) = 0;
    *((void *)p_buf + 7) = 0;
    *((_DWORD *)p_buf + 16) = 0;
    *(void *)(p_buf + 68) = 0x1FFFFFFFFLL;
    *((_DWORD *)p_buf + 20) = 0;
    *((void *)p_buf + 12) = 0;
    *((void *)p_buf + 13) = 0;
    *((void *)p_buf + 11) = 0;
    *((_DWORD *)p_buf + 28) = 0;
    *((void *)p_buf + 663) = 0;
    bzero(p_buf + 120, 0x143CuLL);
    *((void *)this + 42) = p_buf;
    re::PerFrameAllocatorGPUManager::init((re::PerFrameAllocatorGPUManager *)p_buf, *((re::RenderManager **)this + 32));
    if (!*((void *)this + 37)) {
      break;
    }
LABEL_94:
    re::internal::assertLog((re::internal *)4, v55, "assertion failure: '%s' (%s:line %i) Render Graph manager is not null before init.", "m_renderGraphManager == nullptr", "init", 260);
    _os_crash();
    __break(1u);
LABEL_95:
    re::internal::assertLog((re::internal *)6, v34, "assertion failure: '%s' (%s:line %i) Size overflow in allocateArray. Element size = %zu, count = %zu", "!overflow", "allocateArray", 61, 16, v22);
    _os_crash();
    __break(1u);
LABEL_96:
    if (__cxa_guard_acquire(&qword_26AF95F10))
    {
      re::Defaults::BOOLValue((re::Defaults *)"disableCrossQueueHazardTracking", v103, (char *)&buf);
      if ((_BYTE)buf) {
        char v104 = BYTE1(buf);
      }
      else {
        char v104 = 0;
      }
      char *p_buf = v104;
      __cxa_guard_release((__guard *)p_buf + 1);
    }
  }
  float v56 = re::globalAllocators(v54);
  float32x4_t v57 = (re::RenderGraphManager *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v56[2] + 32))(v56[2], 704, 8);
  float v58 = re::RenderGraphManager::RenderGraphManager(v57);
  *((void *)this + 37) = v58;
  re::RenderGraphManager::init(v58, *((id **)this + 32));
  re::Defaults::BOOLValue((re::Defaults *)"disableRenderGraphCaching", v59, &v112);
  float32x4_t v61 = (char *)a2 + 268;
  if (v112) {
    float32x4_t v61 = &v113;
  }
  if (*v61)
  {
    uint64_t v62 = *((void *)this + 37);
    *(unsigned char *)(v62 + 380) = 1;
    *(_DWORD *)(v62 + 376) = 0;
    *(void *)(v62 + 352) = 0;
    *(void *)(v62 + 360) = 0;
    *(unsigned char *)(v62 + 368) = 0;
    rep = (re *)std::chrono::steady_clock::now().__d_.__rep_;
    *(void *)(v62 + 352) = rep;
    *(unsigned char *)(v62 + 368) = 1;
    *(_DWORD *)(v62 + 672) = 0;
  }
  float32x2_t v63 = re::globalAllocators(rep);
  float32x2_t v64 = (unsigned char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v63[2] + 32))(v63[2], 912, 16);
  bzero(v64, 0x390uLL);
  *float32x2_t v64 = 1;
  *((void *)v64 + 25) = 0;
  *((void *)v64 + 26) = 0;
  *((void *)v64 + 24) = 0;
  *((_DWORD *)v64 + 54) = 0;
  v64[304] = 0;
  *((void *)v64 + 47) = 0;
  *((void *)v64 + 44) = 0;
  *((void *)v64 + 45) = 0;
  *((void *)v64 + 43) = 0;
  *((_DWORD *)v64 + 92) = 0;
  *((void *)v64 + 60) = 0;
  *((void *)v64 + 57) = 0;
  *((void *)v64 + 58) = 0;
  *((void *)v64 + 56) = 0;
  *((_DWORD *)v64 + 118) = 0;
  *((void *)v64 + 70) = 0;
  *((void *)v64 + 72) = 0;
  *((void *)v64 + 71) = 0;
  *((_DWORD *)v64 + 146) = 0;
  v64[809] = 0;
  *(_OWORD *)(v64 + 148) = 0u;
  *(_OWORD *)(v64 + 136) = 0u;
  *(_OWORD *)(v64 + 120) = 0u;
  *(_OWORD *)(v64 + 104) = 0u;
  *(_OWORD *)(v64 + 88) = 0u;
  *(_OWORD *)(v64 + 72) = 0u;
  *(_OWORD *)(v64 + 56) = 0u;
  *(_OWORD *)(v64 + 40) = 0u;
  *(_OWORD *)(v64 + 24) = 0u;
  *(_OWORD *)(v64 + 8) = 0u;
  v64[184] = 0;
  *((void *)v64 + 21) = 0;
  *((void *)v64 + 22) = 0;
  *((_OWORD *)v64 + 37) = 0u;
  *((_OWORD *)v64 + 38) = 0u;
  *((_DWORD *)v64 + 156) = 0;
  *(_OWORD *)(v64 + 632) = 0u;
  *(_OWORD *)(v64 + 648) = 0u;
  *(_OWORD *)(v64 + 664) = 0u;
  *(_OWORD *)(v64 + 680) = 0u;
  *(_OWORD *)(v64 + 696) = 0u;
  *(_OWORD *)(v64 + 712) = 0u;
  *(_OWORD *)(v64 + 728) = 0u;
  *(_OWORD *)(v64 + 744) = 0u;
  *(_OWORD *)(v64 + 753) = 0u;
  *((_DWORD *)v64 + 203) = 1065353216;
  *((void *)v64 + 102) = 0x3F8000003F000000;
  *(void *)(v64 + 828) = 0x412000003DCCCCCDLL;
  uint64_t v65 = MEMORY[0x263EF89A0];
  long long v66 = *(_OWORD *)(MEMORY[0x263EF89A0] + 16);
  *((_OWORD *)v64 + 53) = *MEMORY[0x263EF89A0];
  *((_OWORD *)v64 + 54) = v66;
  *((_OWORD *)v64 + 55) = *(_OWORD *)(v65 + 32);
  *((void *)this + 40) = v64;
  re::ProbeManager::init((re::ProbeManager *)v64, *((const re::RenderManager **)this + 32));
  if (*((unsigned char *)a2 + 250))
  {
    float32x4_t v68 = re::globalAllocators(v67);
    int32x4_t v69 = (re::DebugRenderer *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v68[2] + 32))(v68[2], 464, 8);
    re::DebugRenderer::DebugRenderer(v69);
    *((void *)this + 38) = v70;
    re::DebugRenderer::init(v70, *((id **)this + 32));
    float32x4_t v72 = re::globalAllocators(v71);
    uint64_t v73 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v72[2] + 32))(v72[2], 304, 16);
    *(_OWORD *)uint64_t v73 = 0u;
    *(_OWORD *)(v73 + 16) = 0u;
    *(_OWORD *)(v73 + 32) = 0u;
    *(_OWORD *)(v73 + 48) = 0u;
    *(_OWORD *)(v73 + 96) = 0u;
    *(_OWORD *)(v73 + 112) = 0u;
    *(_OWORD *)(v73 + 128) = 0u;
    *(_OWORD *)(v73 + 144) = 0u;
    *(_OWORD *)(v73 + 176) = 0u;
    *(_OWORD *)(v73 + 192) = 0u;
    *(_OWORD *)(v73 + 224) = 0u;
    *(_OWORD *)(v73 + 240) = 0u;
    *(_OWORD *)(v73 + 256) = 0u;
    *(_OWORD *)(v73 + 272) = 0u;
    *(_OWORD *)(v73 + 288) = 0u;
    *(_OWORD *)(v73 + 208) = 0u;
    int32x4_t v74 = vdupq_n_s32(0x7F800000u);
    *(int32x4_t *)(v73 + 48) = v74;
    *(_OWORD *)(v73 + 64) = 0u;
    *(void *)&long long v75 = 0x7F0000007FLL;
    *((void *)&v75 + 1) = 0x7F0000007FLL;
    *(_OWORD *)(v73 + 64) = v75;
    *(_OWORD *)(v73 + 80) = 0u;
    *(void *)(v73 + 88) = 0;
    *(void *)(v73 + 96) = 0;
    *(void *)(v73 + 80) = 0;
    *(int32x4_t *)(v73 + 144) = v74;
    *(_OWORD *)(v73 + 160) = 0u;
    *(_OWORD *)(v73 + 160) = v75;
    *(void *)(v73 + 184) = 0;
    *(void *)(v73 + 192) = 0;
    *(void *)(v73 + 176) = 0;
    *(void *)(v73 + 208) = 0;
    *(void *)(v73 + 216) = 0;
    *(void *)(v73 + 224) = 0;
    *(_DWORD *)(v73 + 232) = 0;
    *(_OWORD *)(v73 + 240) = 0u;
    *(_OWORD *)(v73 + 256) = 0u;
    *(_OWORD *)(v73 + 268) = 0u;
    *((void *)this + 39) = v73;
    float32x4_t v67 = (re *)re::PrimitiveRenderer::init((re::PrimitiveRenderer *)v73, *((id **)this + 32));
  }
  *((void *)this + 75) = *((void *)this + 32);
  *((void *)this + 76) = this;
  *((void *)this + 77) = a4;
  *((void *)this + 208) = a3;
  if (a3)
  {
    float32x4_t v67 = (re *)re::ProfilerManager::getProcessor<re::FrameProfiler,void>((uint64_t)a3);
    *((void *)this + 206) = v67;
  }
  int v76 = *((unsigned __int8 *)a2 + 266);
  *((unsigned char *)this + 793) = v76;
  *((unsigned char *)this + 792) = v76;
  if (v76)
  {
    float v77 = re::globalAllocators(v67);
    float32x2_t v78 = (re::RenderThread *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v77[2] + 32))(v77[2], 440, 8);
    re::RenderThread::RenderThread(v78);
    *((void *)this + 41) = v79;
    float32x4_t v67 = (re *)re::RenderThread::init(v79, *((re::RenderManager **)this + 32));
  }
  float v80 = re::globalAllocators(v67);
  re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::init((uint64_t)this + 48, v80[2], 3);
  if (*((unsigned char *)this + 794))
  {
    *(void *)&long long buf = objc_msgSend(*(id *)(*((void *)this + 32) + 184), sel_newSharedEvent);
    NS::SharedPtr<MTL::Texture>::operator=((void **)this + 101, (void **)&buf);
    if ((void)buf) {
  }
    }
  else
  {
    BOOL v81 = dispatch_semaphore_create(*((void *)a2 + 30));

    float v82 = (void *)*((void *)this + 100);
    *((void *)this + 100) = v81;
  }
  *(void *)&long long buf = objc_msgSend(*(id *)(*((void *)this + 32) + 184), sel_newEvent);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 106, (void **)&buf);
  if ((void)buf) {

  }
  id v117 = *(id *)(*((void *)this + 32) + 184);
  id v83 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
  objc_msgSend(v83, sel_setTextureType_, 2);
  objc_msgSend(v83, sel_setWidth_, 128);
  objc_msgSend(v83, sel_setHeight_, 128);
  objc_msgSend(v83, sel_setPixelFormat_, 115);
  objc_msgSend(v83, sel_setMipmapLevelCount_, 1);
  objc_msgSend(v83, sel_setSampleCount_, 1);
  objc_msgSend(v83, sel_setUsage_, 1);
  objc_msgSend(v83, sel_setStorageMode_, 0);
  re::mtl::Device::makeTexture(v83, &v117, &buf);
  float32x2_t v84 = (id *)((char *)this + 752);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 94, (void **)&buf);
  if ((void)buf) {

  }
  objc_msgSend(*v84, sel_setLabel_, @"Brdf Lookup Table");
  id v85 = *v84;
  long long buf = 0uLL;
  uint64_t v119 = 0;
  int64x2_t v120 = vdupq_n_s64(0x80uLL);
  uint64_t v121 = 1;
  objc_msgSend(v85, sel_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_, &buf, 0, 0, &re::brdfMapData, 1024, 0x20000);
  if (v83) {

  }
  id v117 = *(id *)(*((void *)this + 32) + 184);
  id v86 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
  objc_msgSend(v86, sel_setTextureType_, 2);
  objc_msgSend(v86, sel_setWidth_, 128);
  objc_msgSend(v86, sel_setHeight_, 128);
  objc_msgSend(v86, sel_setPixelFormat_, 115);
  objc_msgSend(v86, sel_setMipmapLevelCount_, 1);
  objc_msgSend(v86, sel_setSampleCount_, 1);
  objc_msgSend(v86, sel_setUsage_, 1);
  objc_msgSend(v86, sel_setStorageMode_, 0);
  re::mtl::Device::makeTexture(v86, &v117, &buf);
  float v87 = (id *)((char *)this + 784);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 98, (void **)&buf);
  if ((void)buf) {

  }
  objc_msgSend(*v87, sel_setLabel_, @"Cloth Brdf Lookup Table");
  id v88 = *v87;
  long long buf = 0uLL;
  uint64_t v119 = 0;
  int64x2_t v120 = vdupq_n_s64(0x80uLL);
  uint64_t v121 = 1;
  objc_msgSend(v88, sel_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_, &buf, 0, 0, &re::clothBrdfMapData, 1024, 0x20000);
  if (v86) {

  }
  id v117 = *(id *)(*((void *)this + 32) + 184);
  id v89 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
  objc_msgSend(v89, sel_setTextureType_, 2);
  objc_msgSend(v89, sel_setWidth_, 32);
  objc_msgSend(v89, sel_setHeight_, 32);
  objc_msgSend(v89, sel_setPixelFormat_, 25);
  objc_msgSend(v89, sel_setMipmapLevelCount_, 1);
  objc_msgSend(v89, sel_setSampleCount_, 1);
  objc_msgSend(v89, sel_setUsage_, 1);
  objc_msgSend(v89, sel_setStorageMode_, 0);
  re::mtl::Device::makeTexture(v89, &v117, &buf);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 95, (void **)&buf);
  if ((void)buf) {

  }
  objc_msgSend(*((id *)this + 95), sel_setLabel_, @"Multiscatter Brdf Lookup Table");
  *(void *)&long long buf = objc_msgSend(v117, sel_newBufferWithLength_options_, 64, 0);
  float v90 = (id *)((char *)this + 768);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 96, (void **)&buf);
  if ((void)buf) {

  }
  objc_msgSend(*v90, sel_setLabel_, @"Multiscatter Brdf Averaged Lookup Table");
  float v91 = (void *)*((void *)this + 95);
  long long buf = 0uLL;
  uint64_t v119 = 0;
  int64x2_t v120 = vdupq_n_s64(0x20uLL);
  uint64_t v121 = 1;
  objc_msgSend(v91, sel_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_, &buf, 0, 0, &re::multiscatterBrdfMapData, 64, 2048);
  float v92 = objc_msgSend(*v90, sel_contents);
  *float v92 = re::multiscatterBrdfAvgTableData;
  v92[1] = unk_2343E1CAD;
  v92[2] = xmmword_2343E1CBD;
  v92[3] = unk_2343E1CCD;
  if (v89) {

  }
  id v93 = *(id *)(*((void *)this + 32) + 184);
  uint64_t v116 = 1;
  id v117 = v93;
  uint64_t v114 = 0;
  uint64_t v115 = 115;
  uint64_t TextureCompressionType = re::mtl::getTextureCompressionType(&v117, &v114, &v115, &v116);
  id v95 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
  if ((objc_msgSend(v95, sel_respondsToSelector_, sel_setCompressionType_) & 1) != 0
    || objc_msgSend(v95, sel_methodSignatureForSelector_, sel_setCompressionType_))
  {
    objc_msgSend(v95, sel_setCompressionType_, TextureCompressionType);
  }
  objc_msgSend(v95, sel_setTextureType_, 3);
  objc_msgSend(v95, sel_setWidth_, 64);
  objc_msgSend(v95, sel_setHeight_, 64);
  objc_msgSend(v95, sel_setArrayLength_, 2);
  objc_msgSend(v95, sel_setPixelFormat_, 115);
  objc_msgSend(v95, sel_setSampleCount_, 1);
  objc_msgSend(v95, sel_setMipmapLevelCount_, 1);
  objc_msgSend(v95, sel_setUsage_, 1);
  objc_msgSend(v95, sel_setStorageMode_, 0);
  re::mtl::Device::makeTexture(v95, &v117, &buf);
  float v96 = (id *)((char *)this + 776);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 97, (void **)&buf);
  if ((void)buf) {

  }
  objc_msgSend(*v96, sel_setLabel_, @"Area Light Table Array");
  id v97 = *v96;
  long long buf = 0uLL;
  uint64_t v119 = 0;
  int64x2_t v111 = vdupq_n_s64(0x40uLL);
  int64x2_t v120 = v111;
  uint64_t v121 = 1;
  objc_msgSend(v97, sel_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_, &buf, 0, 0, &re::gAreaLightTable1, 512, 0x8000);
  id v98 = *v96;
  long long buf = 0uLL;
  uint64_t v119 = 0;
  int64x2_t v120 = v111;
  uint64_t v121 = 1;
  objc_msgSend(v98, sel_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_, &buf, 0, 1, &re::gAreaLightTable2, 512, 0x8000);
  if (v95) {

  }
  re::DrawingManager::initShaderSources(this);
  if (*((unsigned char *)a2 + 269))
  {
    uint64_t v100 = re::globalAllocators(v99)[2];
    *(void *)&long long buf = &unk_26E7113B0;
    *((void *)&buf + 1) = this;
    v120.i64[0] = v100;
    v120.i64[1] = (uint64_t)&buf;
    LOWORD(v117) = *((void *)this + 121);
    re::HashTable<unsigned short,re::Function<void ()(re::GpuTimingData const&)>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::add((uint64_t)this + 920, &v117, (uint64_t)&buf);
    ++*((void *)this + 121);
    re::DrawingManager::activatePerfSampling(this);
    re::FunctionBase<24ul,void ()(re::GpuTimingData const&)>::destroyCallable((uint64_t)&buf);
  }
  int v101 = *((unsigned __int8 *)this + 248);
  if (v8) {

  }
  return v101 != 0;
}

void re::DrawingManager::initShaderSources(re::DrawingManager *this)
{
  re::MaterialManager::resizeScenes(*(re::MaterialManager **)(*((void *)this + 32) + 24), 1uLL);
  uint64_t v2 = *((void *)this + 32);
  int v3 = *(void **)(*(void *)(v2 + 24) + 656);
  uint64_t v15 = 0x59C04294BD50;
  re::TextureTable::setTexture(v3, &v15, (id *)(*(void *)(v2 + 64) + 24));
  uint64_t v14 = 0x27635BB0799E8825;
  uint64_t v15 = 0;
  re::TextureTable::setTexture(v3, &v14, (id *)(*(void *)(*((void *)this + 32) + 64) + 24));
  uint64_t v14 = 0;
  uint64_t v4 = *(void *)(*(void *)(*((void *)this + 32) + 24) + 640);
  re::DynamicArray<re::TextureViews<NS::SharedPtr<MTL::Texture>>>::setCapacity((void *)(v4 + 72), 3uLL);
  ++*(_DWORD *)(v4 + 96);
  uint64_t v13 = 0x15085BDF2ALL;
  re::TextureTable::setTexture((void *)v4, &v13, (id *)this + 94);
  uint64_t v12 = 0x242DE8CC841767B0;
  uint64_t v13 = 0;
  re::TextureTable::setTexture((void *)v4, &v12, (id *)this + 98);
  uint64_t v11 = 0x11BEEAE3F6511AA0;
  uint64_t v12 = 0;
  re::TextureTable::setTexture((void *)v4, &v11, (id *)this + 95);
  unint64_t v6 = *(re::BufferTable **)(*(void *)(*((void *)this + 32) + 24) + 712);
  uint64_t v10 = 0x2803BD43311CF958;
  uint64_t v11 = 0;
  id v7 = *((id *)this + 96);
  int v8 = 0;
  unsigned int v9 = objc_msgSend(*((id *)this + 96), sel_length);
  re::BufferTable::setBuffer(v6, (const re::WeakStringID *)&v10, (uint64_t)&v7);
  if (v7) {
}
  }

uint64_t (***re::DrawingManager::activatePerfSampling(re::DrawingManager *this))(void)
{
  v10[5] = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 208);
  if (v2 && re::ProfilerManager::isProcessorEnabled<re::ProfilerDetailedHUDProcessor,void>(v2)
    || (uint64_t v3 = *((void *)this + 206)) != 0 && (*(unsigned char *)(v3 + 177) & 0x10) != 0)
  {
    uint64_t v5 = (re *)re::RenderStat::activatePerfSampling((uint64_t)this + 872, (id *)this + 35, 1);
    uint64_t v6 = re::globalAllocators(v5)[2];
    v10[0] = &unk_26E711578;
    v10[1] = this;
    v10[3] = v6;
    v10[4] = v10;
    id v7 = (re *)re::RenderStat::addMTLCounterHandler((unint64_t)this + 872, (uint64_t)v10, 1u);
    uint64_t v8 = re::globalAllocators(v7)[2];
    v9[0] = &unk_26E7115E0;
    v9[1] = this;
    v9[3] = v8;
    v9[4] = v9;
    re::RenderStat::addMTLCounterHandler((unint64_t)this + 872, (uint64_t)v9, 2u);
    re::FunctionBase<24ul,void ()(re::PerfMTLCounterSamplerResult)>::destroyCallable((uint64_t)v9);
    return re::FunctionBase<24ul,void ()(re::PerfMTLCounterSamplerResult)>::destroyCallable((uint64_t)v10);
  }
  else
  {
    objc_storeStrong((id *)this + 113, *((id *)this + 35));
    atomic_store(1u, (unsigned __int8 *)this + 912);
    return (uint64_t (***)(void))re::RenderStat::setPerfSamplingMode((re::DrawingManager *)((char *)this + 872), 0);
  }
}

void re::DrawingManager::prepareForDeinit(re::DrawingManager *this)
{
  uint64_t v2 = (re::RenderThread *)*((void *)this + 41);
  if (v2) {
    re::RenderThread::join(v2);
  }
  if (*((unsigned char *)this + 794)) {
    [*((id *)this + 35) dispatchAvailableCompletionNotifications];
  }
  if (!atomic_load((unsigned int *)this + 210)) {
    goto LABEL_25;
  }
  unsigned int v4 = 0;
  do
  {
    __ns.__rep_ = 100000000;
    std::this_thread::sleep_for (&__ns);
    unsigned int v5 = v4 + 1;
    if (atomic_load((unsigned int *)this + 210)) {
      BOOL v7 = v4 >= 0x13;
    }
    else {
      BOOL v7 = 1;
    }
    ++v4;
  }
  while (!v7);
  if (v5 != 20)
  {
LABEL_25:
    if (*((unsigned char *)this + 794))
    {
      objc_msgSend(*((id *)this + 101), sel_waitUntilSignaledValue_timeoutMS_, *((void *)this + 102) + *(void *)(*((void *)this + 32) + 240) - 1, 0xFFFFFFFFLL);

      *(_OWORD *)((char *)this + 808) = 0u;
    }
    else
    {
      if (*(void *)(*((void *)this + 32) + 240))
      {
        unsigned int v8 = 1;
        do
        {
          dispatch_semaphore_wait(*((dispatch_semaphore_t *)this + 100), 0xFFFFFFFFFFFFFFFFLL);
          unint64_t v9 = *(void *)(*((void *)this + 32) + 240);
          BOOL v10 = v9 > v8++;
        }
        while (v10);
        if (v9)
        {
          unsigned int v11 = 1;
          do
          {
            dispatch_semaphore_signal(*((dispatch_semaphore_t *)this + 100));
            BOOL v10 = *(void *)(*((void *)this + 32) + 240) > (unint64_t)v11++;
          }
          while (v10);
        }
      }
      uint64_t v12 = (void *)*((void *)this + 100);
      *((void *)this + 100) = 0;
    }
  }
  *((unsigned char *)this + 795) = 1;
}

double re::DrawingManager::deinit(re::DrawingManager *this)
{
  uint64_t v2 = (char *)this + 624;
  if (*((void *)this + 78))
  {
    uint64_t v3 = *((void *)this + 79);
    if (v3)
    {
      if (*((unsigned char *)this + 640)) {
        unsigned int v4 = (id **)((char *)this + 648);
      }
      else {
        unsigned int v4 = (id **)*((void *)this + 82);
      }
      uint64_t v5 = 8 * v3;
      do
      {
        uint64_t v6 = *v4++;
        (*((void (**)(id *))*v6 + 2))(v6);
        objc_destroyWeak(v6 + 1);
        v6[1] = 0;
        v5 -= 8;
      }
      while (v5);
    }
  }
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)v2);
  uint64_t v7 = *((void *)this + 41);
  if (v7)
  {
    if (*(unsigned char *)(v7 + 16))
    {
      re::RenderThread::join(*((re::RenderThread **)this + 41));
      *(void *)(v7 + 8) = 0;
      *(unsigned char *)(v7 + 16) = 0;
      uint64_t v7 = *((void *)this + 41);
    }
    re::internal::destroyPersistent<re::RenderThread>((re *)v7);
    *((void *)this + 41) = 0;
  }

  *((void *)this + 29) = 0;
  *((unsigned char *)this + 248) = 0;
  re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::clear((uint64_t)this + 48);
  re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::deinit((uint64_t *)this + 6);
  re::PerFrameAllocatorGPUManager::freeAllocatorsOlderOrEqual(*((re **)this + 42), *(void *)(*(void *)(*((void *)this + 32) + 136) + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(void *)(*(void *)(*((void *)this + 32) + 136) + 16) << 60));
  unsigned int v8 = (re::RenderGraphManager *)*((void *)this + 37);
  if (v8)
  {
    unint64_t v9 = re::RenderGraphManager::deinit(v8);
    BOOL v10 = (re::RenderGraphManager *)*((void *)this + 37);
    if (v10)
    {
      uint64_t v11 = re::globalAllocators(v9)[2];
      re::RenderGraphManager::~RenderGraphManager(v10);
      (*(void (**)(uint64_t, re::RenderGraphManager *))(*(void *)v11 + 40))(v11, v10);
    }
    *((void *)this + 37) = 0;
  }
  uint64_t v12 = *((void *)this + 40);
  if (v12)
  {
    *(void *)(v12 + 8) = 0;

    *(void *)(v12 + 80) = 0;
    *(void *)(v12 + 128) = 0;
    uint64_t v14 = *((void *)this + 40);
    if (v14)
    {
      uint64_t v15 = re::globalAllocators(v13)[2];
      re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(v14 + 704);
      v16.n128_f64[0] = re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(v14 + 640);
      uint64_t v17 = *(void *)(v14 + 600);
      if (v17)
      {
        uint64_t v18 = *(void *)(v14 + 632);
        if (v18)
        {
          uint64_t v19 = *(void *)(v14 + 616);
          if (v19)
          {
            uint64_t v20 = 80 * v19;
            id v21 = (id *)(v18 + 8);
            do
            {
              if (*v21)
              {

                *id v21 = 0;
              }
              v21 += 10;
              v20 -= 80;
            }
            while (v20);
            uint64_t v17 = *(void *)(v14 + 600);
            uint64_t v18 = *(void *)(v14 + 632);
          }
          (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)v17 + 40))(v17, v18, v16);
        }
        *(void *)(v14 + 632) = 0;
        *(void *)(v14 + 608) = 0;
        *(void *)(v14 + 616) = 0;
        *(void *)(v14 + 600) = 0;
        ++*(_DWORD *)(v14 + 624);
      }
      uint64_t v22 = *(void *)(v14 + 560);
      if (v22)
      {
        uint64_t v23 = *(void *)(v14 + 592);
        if (v23)
        {
          uint64_t v24 = *(void *)(v14 + 576);
          if (v24)
          {
            uint64_t v25 = 24 * v24;
            uint64_t v26 = (id *)(v23 + 8);
            do
            {
              if (*v26)
              {

                *uint64_t v26 = 0;
              }
              v26 += 3;
              v25 -= 24;
            }
            while (v25);
            uint64_t v22 = *(void *)(v14 + 560);
            uint64_t v23 = *(void *)(v14 + 592);
          }
          (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)v22 + 40))(v22, v23, v16);
        }
        *(void *)(v14 + 592) = 0;
        *(void *)(v14 + 568) = 0;
        *(void *)(v14 + 576) = 0;
        *(void *)(v14 + 560) = 0;
        ++*(_DWORD *)(v14 + 584);
      }
      re::Optional<re::ProbeLatLongComputeWorkload>::~Optional(v14 + 488);
      re::DynamicArray<unsigned long>::deinit(v14 + 448);
      re::DynamicArray<unsigned long>::deinit(v14 + 344);
      re::Optional<re::ProbeManager::SliceOperation>::~Optional(v14 + 232);
      uint64_t v27 = *(void *)(v14 + 192);
      if (v27)
      {
        uint64_t v28 = *(void *)(v14 + 224);
        if (v28)
        {
          uint64_t v29 = *(void *)(v14 + 208);
          if (v29)
          {
            uint64_t v30 = v29 << 6;
            uint64_t v31 = (void *)(v28 + 16);
            do
            {
              std::__function::__value_func<void ()(re::ProbeManager &,long long)>::~__value_func[abi:nn180100](v31);
              uint64_t v32 = (void *)*(v31 - 2);
              if (v32)
              {

                *(v31 - 2) = 0;
              }
              v31 += 8;
              v30 -= 64;
            }
            while (v30);
            uint64_t v27 = *(void *)(v14 + 192);
            uint64_t v28 = *(void *)(v14 + 224);
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 40))(v27, v28);
        }
        *(void *)(v14 + 224) = 0;
        *(void *)(v14 + 200) = 0;
        *(void *)(v14 + 208) = 0;
        *(void *)(v14 + 192) = 0;
        ++*(_DWORD *)(v14 + 216);
      }
      uint64_t v33 = *(void *)(v14 + 136);
      if (v33)
      {
        if (*(void *)(v14 + 168)) {
          (*(void (**)(uint64_t))(*(void *)v33 + 40))(v33);
        }
        *(void *)(v14 + 168) = 0;
        *(void *)(v14 + 144) = 0;
        *(void *)(v14 + 152) = 0;
        *(void *)(v14 + 136) = 0;
        ++*(_DWORD *)(v14 + 160);
      }
      uint64_t v34 = *(void **)(v14 + 128);
      if (v34)
      {

        *(void *)(v14 + 128) = 0;
      }
      uint64_t v35 = *(void **)(v14 + 120);
      if (v35)
      {

        *(void *)(v14 + 120) = 0;
      }
      simd_float4x4 v36 = *(void **)(v14 + 112);
      if (v36)
      {

        *(void *)(v14 + 112) = 0;
      }
      uint64_t v37 = *(void **)(v14 + 104);
      if (v37)
      {

        *(void *)(v14 + 104) = 0;
      }
      uint64_t v38 = *(void **)(v14 + 88);
      if (v38)
      {

        *(void *)(v14 + 88) = 0;
      }
      unint64_t v39 = *(void **)(v14 + 80);
      if (v39)
      {

        *(void *)(v14 + 80) = 0;
      }
      uint64_t v40 = *(void *)(v14 + 72);
      if (v40)
      {
        if (*(void *)(v14 + 24)) {
          *(void *)(v14 + 24) = 0;
        }
        if (*(void *)(v14 + 16))
        {
          (*(void (**)(uint64_t))(*(void *)v40 + 40))(v40);
          *(void *)(v14 + 16) = 0;
        }
        *(_OWORD *)(v14 + 48) = 0u;
        *(_OWORD *)(v14 + 64) = 0u;
        *(_OWORD *)(v14 + 32) = 0u;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 40))(v15, v14);
    }
    *((void *)this + 40) = 0;
  }
  uint64_t v41 = (re *)*((void *)this + 38);
  if (v41)
  {
    uint64_t v41 = (re *)re::DebugRenderer::deinit(v41);
    BOOL v42 = (re::DebugRenderer *)*((void *)this + 38);
    if (v42)
    {
      uint64_t v43 = re::globalAllocators(v41)[2];
      re::DebugRenderer::~DebugRenderer(v42);
      uint64_t v41 = (re *)(*(uint64_t (**)(uint64_t, re::DebugRenderer *))(*(void *)v43 + 40))(v43, v42);
    }
    *((void *)this + 38) = 0;
  }
  uint64_t v44 = (re::PrimitiveRenderer *)*((void *)this + 39);
  if (v44)
  {
    *(unsigned char *)uint64_t v44 = 0;
    uint64_t v45 = re::globalAllocators(v41)[2];
    re::PrimitiveRenderer::~PrimitiveRenderer(v44);
    (*(void (**)(uint64_t, re::PrimitiveRenderer *))(*(void *)v45 + 40))(v45, v44);
    *((void *)this + 39) = 0;
  }
  uint64_t v46 = (re *)*((void *)this + 42);
  if (v46)
  {
    uint64_t v46 = (re *)re::PerFrameAllocatorGPUManager::deinit((uint64_t)v46);
    uint64_t v47 = *((void *)this + 42);
    if (v47)
    {
      uint64_t v48 = re::globalAllocators(v46)[2];
      re::DynamicArray<unsigned long>::deinit(v47 + 5272);
      uint64_t v49 = 5120;
      do
      {
        *(void *)(v47 + v49 + 96) = 0;
        v49 -= 40;
      }
      while (v49);
      uint64_t v50 = *(void *)(v47 + 88);
      if (v50)
      {
        uint64_t v51 = *(void *)(v47 + 120);
        if (v51)
        {
          uint64_t v52 = *(void *)(v47 + 104);
          if (v52)
          {
            uint64_t v53 = 88 * v52;
            uint64_t v54 = v51 + 48;
            do
            {
              re::DynamicArray<unsigned long>::deinit(v54);
              re::DynamicArray<unsigned long>::deinit(v54 - 40);
              v54 += 88;
              v53 -= 88;
            }
            while (v53);
            uint64_t v50 = *(void *)(v47 + 88);
            uint64_t v51 = *(void *)(v47 + 120);
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v50 + 40))(v50, v51);
        }
        *(void *)(v47 + 120) = 0;
        *(void *)(v47 + 96) = 0;
        *(void *)(v47 + 104) = 0;
        *(void *)(v47 + 88) = 0;
        ++*(_DWORD *)(v47 + 112);
      }
      re::DataArray<re::PerFrameAllocatorGPU>::deinit(v47 + 16);
      re::DynamicArray<unsigned long>::deinit(v47 + 16);
      uint64_t v46 = (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v48 + 40))(v48, v47);
    }
    *((void *)this + 42) = 0;
  }
  uint64_t v55 = re::globalAllocators(v46);
  uint64_t v56 = *((void *)this + 103);
  if (v56)
  {
    uint64_t v57 = v55[2];
    uint64_t v59 = *(void *)(v56 - 16);
    uint64_t v58 = *(void *)(v56 - 8);
    if (v59 - 1 >= 0)
    {
      float32x4_t v60 = (id *)(v56 + 16 * v59 - 8);
      do
      {
        if (*v60)
        {

          *float32x4_t v60 = 0;
        }
        float32x4_t v61 = *(v60 - 1);
        if (v61)
        {

          *(v60 - 1) = 0;
        }
        --v59;
        v60 -= 2;
      }
      while (v59 > 0);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v57 + 40))(v57, v58);
  }
  *((void *)this + 103) = 0;
  if (*((unsigned char *)this + 912))
  {
    re::RenderStat::clearMTLCounterHandlers((uint64_t (***)(void))this + 109);
    re::RenderStat::deinitializeCurrentMode((re::DrawingManager *)((char *)this + 872));
    uint64_t v62 = (void *)*((void *)this + 113);
    *((void *)this + 113) = 0;
  }
  float32x2_t v63 = *(re::FrameManager **)(*((void *)this + 32) + 136);
  return re::FrameManager::deinitRenderFrameCounting(v63);
}

re *re::internal::destroyPersistent<re::RenderThread>(re *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = re::globalAllocators(result)[2];
    std::condition_variable::~condition_variable((std::condition_variable *)((char *)v1 + 392));
    std::mutex::~mutex((std::mutex *)((char *)v1 + 328));
    std::condition_variable::~condition_variable((std::condition_variable *)((char *)v1 + 272));
    std::mutex::~mutex((std::mutex *)((char *)v1 + 208));
    std::__function::__value_func<void ()(re::EventQueue &)>::~__value_func[abi:nn180100]((void *)v1 + 16);
    for (uint64_t i = 72; i != -8; i -= 40)
      re::DynamicArray<unsigned long>::deinit((uint64_t)v1 + i);
    std::thread::~thread((std::thread *)v1);
    unsigned int v4 = *(uint64_t (**)(uint64_t, re *))(*(void *)v2 + 40);
    return (re *)v4(v2, v1);
  }
  return result;
}

void re::DrawingManager::waitForGPUInternal(re::DrawingManager *this)
{
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v3, 5008, (uint64_t)this);
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v2);
  if (*((unsigned char *)this + 794)) {
    objc_msgSend(*((id *)this + 101), sel_waitUntilSignaledValue_timeoutMS_, *((void *)this + 102), 0xFFFFFFFFLL);
  }
  else {
    dispatch_semaphore_wait(*((dispatch_semaphore_t *)this + 100), 0xFFFFFFFFFFFFFFFFLL);
  }
  re::ProfilerTimeGuard<(re::ProfilerStatistic)12>::end((uint64_t)v2);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v3);
}

uint64_t re::DrawingManager::currentCommandBuffer(re::DrawingManager *this)
{
  uint64_t v2 = *((void *)this + 216);
  if (v2)
  {
    id v3 = *(id *)(*((void *)this + 218) + 24 * v2 - 8);

    if (v3) {
      return *((void *)this + 218) + 24 * *((void *)this + 216) - 24;
    }
  }
  return re::DrawingManager::createQueuedCommandBuffer(this);
}

uint64_t re::DrawingManager::createQueuedCommandBuffer(re::DrawingManager *this)
{
  v9.n128_u32[0] = -1;
  v9.n128_u64[1] = 0;
  id v10 = 0;
  {
    re::Defaults::BOOLValue((re::Defaults *)"enableEncoderExecStateErrorOption", v6, (char *)&v8);
    if ((_BYTE)v8) {
      char v7 = BYTE1(v8);
    }
    else {
      char v7 = 0;
    }
    re::DrawingManager::createQueuedCommandBuffer(void)::enableEncoderExecStateErrorOption = v7;
  }
  if (*(unsigned __int8 *)(*((void *)this + 32) + 273) | re::DrawingManager::createQueuedCommandBuffer(void)::enableEncoderExecStateErrorOption)
  {
    id v2 = objc_msgSend(objc_msgSend(MEMORY[0x263F12810], sel_alloc), sel_init);
    id v3 = v2;
    if (*(unsigned char *)(*((void *)this + 32) + 273)
      && ((objc_msgSend(v2, sel_respondsToSelector_, sel_setDisableFineGrainedComputePreemption_) & 1) != 0
       || objc_msgSend(v3, sel_methodSignatureForSelector_, sel_setDisableFineGrainedComputePreemption_)))
    {
      objc_msgSend(v3, sel_setDisableFineGrainedComputePreemption_, 1);
    }
    if (re::DrawingManager::createQueuedCommandBuffer(void)::enableEncoderExecStateErrorOption) {
      objc_msgSend(v3, sel_setErrorOptions_, 1);
    }
    re::mtl::CommandQueue::makeCommandBufferWithDescriptor((id *)this + 35, (uint64_t)v3, &v8);
    re::ObjCObject::operator=(&v10, &v8);
    v9.n128_u64[1] = 0;

    if (v3) {
  }
    }
  else
  {
    re::mtl::CommandQueue::makeCommandBuffer((id *)this + 35, &v8);
    re::ObjCObject::operator=(&v10, &v8);
    v9.n128_u64[1] = 0;
  }
  re::DynamicArray<re::CommandBuffer>::add((re::DrawingManager *)((char *)this + 1712), &v9);
  uint64_t v4 = *((void *)this + 218) + 24 * *((void *)this + 216) - 24;

  return v4;
}

void re::DrawingManager::finalizeCommandBuffers(re::DrawingManager *this)
{
  if (*((unsigned char *)this + 912))
  {
    id v2 = (uint64_t (***)(void))((char *)this + 872);
    uint64_t v3 = *((void *)this + 218);
    uint64_t v4 = *((void *)this + 216);
    if (v4)
    {
      uint64_t v5 = 24 * v4;
      uint64_t v6 = (id *)(v3 + 16);
      do
      {
        uint64_t v7 = *((unsigned int *)v6 - 4);
        if (v7 != -1)
        {
          id v12 = *v6;
          re::RenderStat::finishMTLCounterSampling(v2, v7, &v12);
        }
        v6 += 3;
        v5 -= 24;
      }
      while (v5);
      uint64_t v3 = *((void *)this + 218);
      uint64_t v8 = *((void *)this + 216) - 1;
    }
    else
    {
      uint64_t v8 = -1;
    }
    __n128 v9 = (id *)(v3 + 24 * v8);
    uint64_t v10 = *(unsigned int *)v9;
    id v11 = v9[2];
    re::RenderStat::finishFrame((uint64_t)v2, v10, &v11);
  }
}

void re::DynamicArray<re::CommandBuffer>::clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2)
  {
    uint64_t v3 = 24 * v2;
    uint64_t v4 = (void **)(*(void *)(a1 + 32) + 16);
    do
    {
      uint64_t v5 = *v4;
      v4 += 3;

      v3 -= 24;
    }
    while (v3);
  }
  ++*(_DWORD *)(a1 + 24);
}

__n128 re::DynamicArray<re::CommandBuffer>::add(_anonymous_namespace_ *this, __n128 *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::CommandBuffer>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 24 * v4;
  __n128 result = *a2;
  *(__n128 *)uint64_t v5 = *a2;
  unint64_t v7 = a2[1].n128_u64[0];
  a2[1].n128_u64[0] = 0;
  *(void *)(v5 + 16) = v7;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::DrawingManager::createReservedCommandBuffer(re::DrawingManager *this, uint64_t a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (*((void *)this + 219) >= *((void *)this + 216))
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "m_nextReservedCommandBuffer < m_currentFrameCommandBufferQueue.size()", "createReservedCommandBuffer", 810);
    _os_crash();
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v4 = this;
  LODWORD(v18) = -1;
  *((void *)&v18 + 1) = 0;
  id v19 = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95F30, memory_order_acquire) & 1) == 0) {
    goto LABEL_24;
  }
  while (1)
  {
    if (*(unsigned __int8 *)(*((void *)v4 + 32) + 273) | byte_26AF95F0B)
    {
      id v5 = objc_msgSend(objc_msgSend(MEMORY[0x263F12810], sel_alloc), sel_init);
      uint64_t v6 = v5;
      if (*(unsigned char *)(*((void *)v4 + 32) + 273)
        && ((objc_msgSend(v5, sel_respondsToSelector_, sel_setDisableFineGrainedComputePreemption_) & 1) != 0
         || objc_msgSend(v6, sel_methodSignatureForSelector_, sel_setDisableFineGrainedComputePreemption_)))
      {
        objc_msgSend(v6, sel_setDisableFineGrainedComputePreemption_, 1, v16, v17);
      }
      if (byte_26AF95F0B) {
        objc_msgSend(v6, sel_setErrorOptions_, 1);
      }
      re::mtl::CommandQueue::makeCommandBufferWithDescriptor((id *)v4 + 35, (uint64_t)v6, &v29);
      re::ObjCObject::operator=(&v19, (id *)&v29);
      *((void *)&v18 + 1) = 0;

      if (v6) {
    }
      }
    else
    {
      re::mtl::CommandQueue::makeCommandBuffer((id *)v4 + 35, &v29);
      re::ObjCObject::operator=(&v19, (id *)&v29);
      *((void *)&v18 + 1) = 0;
    }
    unint64_t v2 = *((void *)v4 + 219);
    unint64_t v3 = *((void *)v4 + 216);
    if (v3 > v2) {
      break;
    }
LABEL_22:
    uint64_t v20 = 0;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v29 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v21 = 136315906;
    uint64_t v22 = "operator[]";
    __int16 v23 = 1024;
    int v24 = 789;
    __int16 v25 = 2048;
    unint64_t v26 = v2;
    __int16 v27 = 2048;
    unint64_t v28 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_23:
    uint64_t v20 = 0;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v29 = 0u;
    unint64_t v4 = (re::DrawingManager *)&_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v21 = 136315906;
    uint64_t v22 = "operator[]";
    __int16 v23 = 1024;
    int v24 = 789;
    __int16 v25 = 2048;
    unint64_t v26 = v3;
    __int16 v27 = 2048;
    unint64_t v28 = v2;
    LODWORD(v17) = 38;
    __n128 v16 = &v21;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_24:
    if (__cxa_guard_acquire(&qword_26AF95F30))
    {
      re::Defaults::BOOLValue((re::Defaults *)"enableEncoderExecStateErrorOption", v14, (char *)&v29);
      if ((_BYTE)v29) {
        char v15 = BYTE1(v29);
      }
      else {
        char v15 = 0;
      }
      byte_26AF95F0B = v15;
      __cxa_guard_release(&qword_26AF95F30);
    }
  }
  uint64_t v7 = *((void *)v4 + 218) + 24 * v2;
  *(_OWORD *)uint64_t v7 = v18;
  if ((long long *)v7 != &v18)
  {
    id v8 = v19;
    id v19 = 0;
    __n128 v9 = *(void **)(v7 + 16);
    *(void *)(v7 + 16) = v8;
  }
  unint64_t v3 = *((void *)v4 + 219);
  unint64_t v2 = *((void *)v4 + 216);
  if (v2 <= v3) {
    goto LABEL_23;
  }
  uint64_t v10 = *((void *)v4 + 218);
  unint64_t v11 = *((void *)v4 + 219);
  do
  {
    id v12 = *(id *)(*((void *)v4 + 218) + 24 * v11 + 16);

    if (!v12) {
      break;
    }
    unint64_t v11 = *((void *)v4 + 219) + 1;
    *((void *)v4 + 219) = v11;
  }
  while (v11 < *((void *)v4 + 216));

  return v10 + 24 * v3;
}

void re::DrawingManager::configureForProfiling(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (*(unsigned char *)(a1 + 912))
  {
    uint64_t v5 = a1 + 872;
    id v6 = *(id *)(a2 + 16);
    *(_DWORD *)a2 = re::RenderStat::beginRecordPassStat(v5, &v6, a3);
  }
}

BOOL re::DrawingManager::shouldRenderProfilerNode(re::DrawingManager *this)
{
  uint64_t v2 = *((void *)this + 206);
  if (v2)
  {
    char v3 = *(unsigned char *)(v2 + 204);
    if (v3) {
      char v3 = *(unsigned char *)(v2 + 17) == 0;
    }
  }
  else
  {
    char v3 = 0;
  }
  uint64_t v4 = *((void *)this + 208);
  BOOL result = v4 != 0;
  if ((v3 & 1) == 0 && v4)
  {
    if (re::ProfilerManager::isProcessorEnabled<re::ProfilerMiniHUDProcessor,void>(*((void *)this + 208))
      || re::ProfilerManager::isProcessorEnabled<re::ProfilerFlameChartProcessor,void>(*((void *)this + 208)))
    {
      return 1;
    }
    else
    {
      uint64_t v6 = *((void *)this + 208);
      return re::ProfilerManager::isProcessorEnabled<re::ProfilerDetailedHUDProcessor,void>(v6);
    }
  }
  return result;
}

void re::DrawingManager::executeFrameInternal(re::DrawingManager *this, re::RenderFrameWorkload *a2)
{
  uint64_t v196 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    re::internal::assertLog((re::internal *)4, 0, "assertion failure: '%s' (%s:line %i) NULL workload passed to RenderManager::executeFrameInternal", "workload", "executeFrameInternal", 881);
    _os_crash();
    __break(1u);
    goto LABEL_172;
  }
  char v3 = a2;
  uint64_t v2 = this;
  unint64_t v6 = *((void *)a2 + 5);
  uint64_t v5 = *((void *)this + 32);
  if ((~v6 & 0xFFFFFFFFFFFFFFFLL) == 0) {
    unint64_t v6 = *(void *)(*(void *)(v5 + 136) + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(void *)(*(void *)(v5 + 136) + 16) << 60);
  }
  uint64_t v7 = re::globalAllocators(this);
  id v8 = (re::Allocator *)re::PerFrameAllocatorManager::perFrameAllocator(v7[6], v6);
  re::FrameContext::FrameContext((re::FrameContext *)&location, v8);
  re::ObjCObject::operator=(&location, (id *)(v5 + 184));
  uint64_t v173 = re::PerFrameAllocatorGPUManager::perFrameAllocatorGPU(*((void *)v2 + 42), v6);
  float v174 = v8;
  unint64_t v175 = v6;
  NS::SharedPtr<MTL::Texture>::operator=(&v176, (void **)(*((void *)v2 + 103) + 16 * *((void *)v2 + 104)));
  NS::SharedPtr<MTL::Texture>::operator=(&v177, (void **)(*((void *)v2 + 103) + 16 * *((void *)v2 + 104) + 8));
  int v172 = *((_DWORD *)v3 + 16);
  re::DynamicArray<re::RenderFrameEvent>::operator=((uint64_t)v179, (uint64_t *)v3 + 13);
  unint64_t v9 = v180;
  if (v180 >= v179[1])
  {
    re::DynamicArray<re::ecs2::HandleTable::HandleSlot>::growCapacity(v179, v180 + 1);
    unint64_t v9 = v180;
  }
  uint64_t v148 = v179;
  uint64_t v10 = (void *)(v182 + 16 * v9);
  *uint64_t v10 = *((id *)v3 + 9);
  v10[1] = *((void *)v3 + 10);
  ++v180;
  ++v181;
  uint64_t v4 = re::RenderFrameBox::get((uint64_t)v2 + 344, v6);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95F40, memory_order_acquire) & 1) == 0) {
    goto LABEL_173;
  }
  while (1)
  {
    uint64_t v11 = *((void *)v2 + 32);
    unint64_t v12 = (unint64_t)"N2re15RendererGlobalsE";
    if (((unint64_t)"N2re15RendererGlobalsE" & 0x8000000000000000) != 0)
    {
      uint64_t v13 = (unsigned __int8 *)((unint64_t)"N2re15RendererGlobalsE" & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v14 = 5381;
      do
      {
        unint64_t v12 = v14;
        unsigned int v15 = *v13++;
        uint64_t v14 = (33 * v14) ^ v15;
      }
      while (v15);
    }
    unint64_t v16 = (qword_26AF95F38 + (v12 << 6) + (v12 >> 2) - 0x61C8864680B583E9) ^ v12;
    uint64_t v17 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v4 + 40) + 32))(*(void *)(v4 + 40), 24, 8);
    v17[1] = &location;
    _OWORD v17[2] = v11;
    unint64_t v18 = *(void *)(v4 + 96);
    *uint64_t v17 = &unk_26E711750;
    if (v18)
    {
      unint64_t v18 = v16 % *(unsigned int *)(v4 + 120);
      uint64_t v19 = *(unsigned int *)(*(void *)(v4 + 104) + 4 * v18);
      if (v19 != 0x7FFFFFFF)
      {
        uint64_t v92 = *(void *)(v4 + 112);
        if (*(void *)(v92 + 24 * v19 + 8) == v16) {
          goto LABEL_18;
        }
        while (1)
        {
          LODWORD(v19) = *(_DWORD *)(v92 + 24 * v19) & 0x7FFFFFFF;
          if (v19 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v92 + 24 * v19 + 8) == v16) {
            goto LABEL_18;
          }
        }
      }
    }
    uint64_t v20 = *(unsigned int *)(v4 + 132);
    if (v20 == 0x7FFFFFFF)
    {
      uint64_t v20 = *(unsigned int *)(v4 + 128);
      int v21 = v20;
      if (v20 == *(_DWORD *)(v4 + 120))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v4 + 96, 2 * *(_DWORD *)(v4 + 124));
        LODWORD(v18) = v16 % *(unsigned int *)(v4 + 120);
        int v21 = *(_DWORD *)(v4 + 128);
      }
      *(_DWORD *)(v4 + 128) = v21 + 1;
      uint64_t v22 = *(void *)(v4 + 112);
      int v23 = *(_DWORD *)(v22 + 24 * v20);
    }
    else
    {
      uint64_t v22 = *(void *)(v4 + 112);
      int v23 = *(_DWORD *)(v22 + 24 * v20);
      *(_DWORD *)(v4 + 132) = v23 & 0x7FFFFFFF;
    }
    uint64_t v24 = 24 * v20;
    *(_DWORD *)(v22 + v24) = v23 | 0x80000000;
    *(_DWORD *)(*(void *)(v4 + 112) + v24) = *(_DWORD *)(*(void *)(v4 + 112) + 24 * v20) & 0x80000000 | *(_DWORD *)(*(void *)(v4 + 104) + 4 * v18);
    *(void *)(*(void *)(v4 + 112) + 24 * v20 + 8) = v16;
    *(void *)(*(void *)(v4 + 112) + 24 * v20 + 16) = v17;
    *(_DWORD *)(*(void *)(v4 + 104) + 4 * v18) = v20;
    ++*(_DWORD *)(v4 + 124);
    ++*(_DWORD *)(v4 + 136);
LABEL_18:
    uint64_t v150 = v5;
    id v157 = *(id *)(*((void *)v2 + 103) + 16 * *((void *)v2 + 104) + 8);
    re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)(v4 + 3912), &v157);
    if (v157)
    {

      id v157 = 0;
    }
    *((void *)v2 + 219) = *((void *)v2 + 216);
    id v193 = 0;
    __n128 buf = (__n128)0xFFFFFFFFuLL;
    float32x4_t v149 = (id *)((char *)v2 + 1712);
    re::DynamicArray<re::CommandBuffer>::add((re::DrawingManager *)((char *)v2 + 1712), &buf);

    uint64_t v26 = re::protectionOptions(v25);
    uint64_t QueuedCommandBuffer = re::DrawingManager::createQueuedCommandBuffer(v2);
    [*(id *)(QueuedCommandBuffer + 16) setProtectionOptions:v26];
    re::DrawingManager::configureForProfiling((uint64_t)v2, QueuedCommandBuffer, 1u);
    id v28 = *(id *)(QueuedCommandBuffer + 16);
    unint64_t v151 = v6 & 0xFFFFFFFFFFFFFFFLL;
    re::ns::String::format((re::ns::String *)"Initial CB %llu", &buf, v6 & 0xFFFFFFFFFFFFFFFLL);
    [v28 setLabel:buf.n128_u64[0]];

    id v29 = *(id *)(QueuedCommandBuffer + 16);
    [v29 addCompletedHandler:&__block_literal_global_30];

    if (re::RenderManager::splitCommandBuffersForDebugging(*((re::RenderManager **)v2 + 32)))
    {
      id v30 = *(id *)(QueuedCommandBuffer + 16);
      [v30 addCompletedHandler:&__block_literal_global_30];
    }
    if (*((void *)v2 + 107))
    {
      id v31 = *(id *)(QueuedCommandBuffer + 16);
      [v31 encodeWaitForEvent:*((void *)v2 + 106) value:*((void *)v2 + 107)];
    }
    if (*((void *)v3 + 9))
    {
      id v32 = *(id *)(QueuedCommandBuffer + 16);
      [v32 encodeWaitForEvent:*((void *)v3 + 9) value:*((void *)v3 + 10)];
    }
    uint64_t v33 = *((void *)v3 + 15);
    if (v33)
    {
      uint64_t v34 = (void *)*((void *)v3 + 17);
      uint64_t v35 = 16 * v33;
      do
      {
        if (*v34)
        {
          id v36 = *(id *)(QueuedCommandBuffer + 16);
          [v36 encodeWaitForEvent:*v34 value:v34[1]];
        }
        v34 += 2;
        v35 -= 16;
      }
      while (v35);
    }
    id v37 = *(id *)(QueuedCommandBuffer + 16);
    uint64_t v38 = *(void *)(v4 + 3128);
    if (v38)
    {
      unint64_t v39 = *(uint64_t **)(v4 + 3144);
      uint64_t v40 = &v39[2 * v38];
      do
      {
        uint64_t v41 = *v39;
        uint64_t v42 = v39[1];
        v39 += 2;
        objc_msgSend(v37, sel_encodeSignalEvent_value_, v41, v42);
      }
      while (v39 != v40);
    }

    uint64_t v44 = re::globalAllocators(v43)[2];
    v168[2] = v3;
    uint64_t v169 = v44;
    v168[0] = &unk_26E711418;
    v168[1] = v2;
    float32x4_t v170 = v168;
    uint64_t v166 = re::globalAllocators((re *)(char *)v3 + 8)[2];
    uint64_t v167 = 0;
    uint64_t v45 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v166 + 32))(v166, 32, 0);
    *uint64_t v45 = &unk_26E711470;
    v45[1] = v2;
    v45[2] = v151;
    v45[3] = v3;
    uint64_t v167 = v45;
    re::RenderFrameWorkload::beforeEncode((uint64_t)v3);
    re::RenderFrame::applyRenderFrameDeltas((re::RenderFrame *)v4);
    *((unsigned char *)v2 + 1768) = 0;
    re::RenderFrame::execute((re::RenderFrame *)v4, (re::FrameContext *)&location);
    uint64_t v46 = (re *)re::RenderFrameWorkload::postEncode((atomic_uchar *)v3);
    if (*(void *)(v4 + 3168))
    {
      unint64_t v147 = v6;
      uint64_t v48 = *re::graphicsLogObjects(v46);
      BOOL v49 = os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT);
      if (v49)
      {
        buf.n128_u16[0] = 0;
        _os_log_impl(&dword_233120000, v48, OS_LOG_TYPE_DEFAULT, "Skipping render frame due to RenderGraph errors:", (uint8_t *)&buf, 2u);
      }
      uint64_t v50 = *(void *)(v4 + 3168);
      if (v50)
      {
        uint64_t v51 = 48 * v50;
        uint64_t v5 = *(void *)(v4 + 3184) + 32;
        do
        {
          uint64_t v52 = *re::graphicsLogObjects((re *)v49);
          BOOL v49 = os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT);
          if (v49)
          {
            if (*(unsigned char *)(v5 - 8)) {
              unint64_t v53 = *(void *)v5;
            }
            else {
              unint64_t v53 = v5 - 7;
            }
            buf.n128_u32[0] = 136315138;
            *(unint64_t *)((char *)buf.n128_u64 + 4) = v53;
            _os_log_impl(&dword_233120000, v52, OS_LOG_TYPE_DEFAULT, "- %s", (uint8_t *)&buf, 0xCu);
          }
          v5 += 48;
          v51 -= 48;
        }
        while (v51);
      }
      uint64_t v54 = *((void *)v2 + 216);
      if (v54)
      {
        uint64_t v5 = 24 * v54;
        uint64_t v55 = (id *)(*((void *)v2 + 218) + 16);
        do
        {
          id v56 = *v55;

          if (v56)
          {
            id v57 = *v55;
            int v58 = [v57 status];

            if (v58 == 1)
            {
              id v59 = *v55;
              id v153 = v59;
              if (v59 != v178)
              {
                float32x4_t v60 = *re::graphicsLogObjects((re *)v59);
                if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t Label = re::mtl::CommandBuffer::getLabel(&v153);
                  buf.n128_u32[0] = 136315138;
                  *(unint64_t *)((char *)buf.n128_u64 + 4) = Label;
                  _os_log_impl(&dword_233120000, v60, OS_LOG_TYPE_DEFAULT, "Enqueued CommandBuffer in RenderManager's queue, cannot invalidate: \"%s\"", (uint8_t *)&buf, 0xCu);
                }
              }
              id v62 = v153;
            }
            else
            {
              id v62 = *v55;
              *uint64_t v55 = 0;
            }
          }
          v55 += 3;
          v5 -= 24;
        }
        while (v5);
      }
      float32x2_t v63 = (re *)re::RenderGraphManager::processRenderGraphErrors(*((void *)v2 + 37), v4, (uint64_t)v3);
      uint64_t v64 = re::protectionOptions(v63);
      uint64_t v65 = re::DrawingManager::createQueuedCommandBuffer(v2);
      [*(id *)(v65 + 16) setProtectionOptions:v64];
      id v66 = *(id *)(v65 + 16);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95F70, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF95F70))
      {
        v146 = re::ns::String::String((re::ns::String *)&qword_26AF95F68, (re::ns *)"Failed command buffer");
        __cxa_guard_release((__guard *)v146 + 1);
      }
      id v67 = (id)qword_26AF95F68;
      [v66 setLabel:v67];

      uint64_t v68 = *((void *)v3 + 9);
      unint64_t v6 = v147;
      if (v68) {
        [v66 encodeWaitForEvent:v68 value:*((void *)v3 + 10)];
      }
      uint64_t v69 = *((void *)v3 + 15);
      if (v69)
      {
        uint64_t v70 = 16 * v69;
        float32x2_t v71 = (void *)(*((void *)v3 + 17) + 8);
        do
        {
          uint64_t v72 = *(v71 - 1);
          if (v72) {
            [v66 encodeWaitForEvent:v72 value:*v71];
          }
          v71 += 2;
          v70 -= 16;
        }
        while (v70);
      }
    }
    uint64_t v156 = 0;
    long long v154 = 0uLL;
    id v153 = 0;
    int v155 = 0;
    uint64_t v73 = *((void *)v2 + 216);
    if (v73)
    {
      int32x4_t v74 = (id *)(*((void *)v2 + 218) + 16);
      uint64_t v75 = 24 * v73;
      uint64_t v5 = 24;
      do
      {
        id v76 = *v74;

        if (v76)
        {
          uint64_t v77 = *((void *)&v154 + 1);
          if (*((void *)&v154 + 1) >= (unint64_t)v154)
          {
            re::DynamicArray<re::CommandBuffer>::growCapacity(&v153, *((void *)&v154 + 1) + 1);
            uint64_t v77 = *((void *)&v154 + 1);
          }
          uint64_t v78 = v156 + 24 * v77;
          *(_OWORD *)uint64_t v78 = *((_OWORD *)v74 - 1);
          *(void *)(v78 + 16) = *v74;
          ++*((void *)&v154 + 1);
          ++v155;
        }
        v74 += 3;
        v75 -= 24;
      }
      while (v75);
    }
    if (v149 == &v153) {
      goto LABEL_77;
    }
    id v79 = *v149;
    if (!*v149 || !v153 || v79 == v153) {
      break;
    }
LABEL_172:
    re::internal::assertLog((re::internal *)4, v47, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
    _os_crash();
    __break(1u);
LABEL_173:
    float32x4_t v142 = (re *)__cxa_guard_acquire(&qword_26AF95F40);
    if (v142)
    {
      qword_26AF95F38 = re::getCombinedScopeHash(v142, v143, v144);
      __cxa_guard_release(&qword_26AF95F40);
    }
  }
  *((void *)v2 + 214) = v153;
  id v153 = v79;
  long long v80 = *(_OWORD *)((char *)v2 + 1720);
  *(_OWORD *)((char *)v2 + 1720) = v154;
  long long v154 = v80;
  uint64_t v81 = *((void *)v2 + 218);
  *((void *)v2 + 218) = v156;
  uint64_t v156 = v81;
  ++v155;
  ++*((_DWORD *)v2 + 434);
LABEL_77:
  *((void *)v2 + 219) = 0;
  uint64_t v82 = re::DrawingManager::currentCommandBuffer(v2);
  id v83 = *(id *)(v82 + 16);
  buf.n128_u64[0] = (unint64_t)v83;
  uint64_t v163 = v166;
  uint64_t v164 = 0;
  re::FunctionBase<24ul,void ()(re::mtl::CommandBuffer const&)>::operator=<24ul>((uint64_t)v162, (uint64_t)v165);
  re::mtl::CommandBuffer::addCompletionHandler((void **)&buf, (uint64_t)v162);
  re::FunctionBase<24ul,void ()(re::mtl::CommandBuffer const&)>::destroyCallable((uint64_t)v162);

  id v84 = *(id *)(v82 + 16);
  buf.n128_u64[0] = (unint64_t)v84;
  uint64_t v160 = v169;
  uint64_t v161 = 0;
  re::FunctionBase<24ul,void ()(re::mtl::CommandBuffer const&)>::operator=<24ul>((uint64_t)v159, (uint64_t)v168);
  re::mtl::CommandBuffer::addScheduledHandler((void **)&buf, (uint64_t)v159);
  re::FunctionBase<24ul,void ()(re::mtl::CommandBuffer const&)>::destroyCallable((uint64_t)v159);

  if (*((unsigned char *)v2 + 794))
  {
    uint64_t v85 = *((void *)v2 + 102);
    uint64_t v86 = *(void *)(v150 + 240) + v85;
    if (*(void *)(v4 + 3888))
    {
      float v87 = (void *)*((void *)v2 + 101);
      uint64_t v88 = *((void *)v2 + 108);
      v152[0] = MEMORY[0x263EF8330];
      v152[1] = 0x40000000;
      v152[2] = ___ZN2re14DrawingManager20executeFrameInternalEPNS_19RenderFrameWorkloadE_block_invoke;
      v152[3] = &__block_descriptor_tmp_27;
      v152[4] = v2;
      v152[5] = v151;
      objc_msgSend(v87, sel_notifyListener_atValue_block_, v88, v86, v152);
      uint64_t v85 = *((void *)v2 + 102);
    }
    *((void *)v2 + 102) = v85 + 1;
  }
  else
  {
    uint64_t v86 = -1;
  }
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::clear(v4 + 4136);
  id v89 = (_opaque_pthread_t **)*((void *)v2 + 41);
  if (v89)
  {
    pthread_t v90 = pthread_self();
    float v91 = *v89;
    if (v90)
    {
      if (!v91 || v90 != v91) {
        goto LABEL_92;
      }
    }
    else if (v91)
    {
      goto LABEL_92;
    }
  }
  else
  {
LABEL_92:
    atomic_fetch_add((atomic_uint *volatile)(re::FrameManager::getFrameRefCount(*(re::FrameManager **)(*((void *)v2 + 32) + 136), v151)+ 128), 1u);
  }
  long long v93 = v188;
  *(_OWORD *)((char *)v2 + 1560) = v187;
  *(_OWORD *)((char *)v2 + 1576) = v93;
  *(_OWORD *)((char *)v2 + 1592) = v189[0];
  *(_OWORD *)((char *)v2 + 1601) = *(_OWORD *)((char *)v189 + 9);
  long long v94 = v184;
  *(_OWORD *)((char *)v2 + 1496) = v183;
  *(_OWORD *)((char *)v2 + 1512) = v94;
  long long v95 = v186;
  *(_OWORD *)((char *)v2 + 1528) = v185;
  *(_OWORD *)((char *)v2 + 1544) = v95;
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  uint64_t v96 = re::internal::enableSignposts(0, 0);
  if (v96) {
    uint64_t v96 = kdebug_trace();
  }
  unint64_t v97 = *((int *)v2 + 375);
  unint64_t v98 = *((int *)v2 + 376);
  unint64_t v99 = *((int *)v2 + 377);
  unint64_t v100 = *((int *)v2 + 378);
  uint64_t isStatisticCollectionEnabled = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v96);
  if (isStatisticCollectionEnabled)
  {
    uint64_t isStatisticCollectionEnabled = re::profilerThreadContext((re *)isStatisticCollectionEnabled);
    float v102 = *(int64x2_t **)(isStatisticCollectionEnabled + 152);
    if (v102)
    {
      unint64_t v103 = v102[140].u64[0];
      if (v103 >= v97) {
        unint64_t v103 = v97;
      }
      v102[140].i64[0] = v103;
      unint64_t v104 = v102[140].u64[1];
      if (v104 <= v97) {
        unint64_t v104 = v97;
      }
      v102[140].i64[1] = v104;
      int64x2_t v105 = vdupq_n_s64(1uLL);
      v105.i64[0] = v97;
      v102[141] = vaddq_s64(v102[141], v105);
      *(unsigned char *)(isStatisticCollectionEnabled + 184) = 0;
    }
  }
  uint64_t v106 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)isStatisticCollectionEnabled);
  if (v106)
  {
    uint64_t v106 = re::profilerThreadContext((re *)v106);
    float32x4_t v107 = *(int64x2_t **)(v106 + 152);
    if (v107)
    {
      unint64_t v108 = v107[144].u64[0];
      if (v108 >= v98) {
        unint64_t v108 = v98;
      }
      v107[144].i64[0] = v108;
      unint64_t v109 = v107[144].u64[1];
      if (v109 <= v98) {
        unint64_t v109 = v98;
      }
      v107[144].i64[1] = v109;
      int64x2_t v110 = vdupq_n_s64(1uLL);
      v110.i64[0] = v98;
      v107[145] = vaddq_s64(v107[145], v110);
      *(unsigned char *)(v106 + 184) = 0;
    }
  }
  uint64_t v111 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v106);
  if (v111)
  {
    uint64_t v111 = re::profilerThreadContext((re *)v111);
    char v112 = *(int64x2_t **)(v111 + 152);
    if (v112)
    {
      unint64_t v113 = v112[148].u64[0];
      if (v113 >= v99) {
        unint64_t v113 = v99;
      }
      v112[148].i64[0] = v113;
      unint64_t v114 = v112[148].u64[1];
      if (v114 <= v99) {
        unint64_t v114 = v99;
      }
      v112[148].i64[1] = v114;
      int64x2_t v115 = vdupq_n_s64(1uLL);
      v115.i64[0] = v99;
      v112[149] = vaddq_s64(v112[149], v115);
      *(unsigned char *)(v111 + 184) = 0;
    }
  }
  uint64_t v116 = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v111);
  if (v116)
  {
    uint64_t v117 = re::profilerThreadContext(v116);
    float v118 = *(int64x2_t **)(v117 + 152);
    if (v118)
    {
      unint64_t v119 = v118[152].u64[0];
      if (v119 >= v100) {
        unint64_t v119 = v100;
      }
      v118[152].i64[0] = v119;
      unint64_t v120 = v118[152].u64[1];
      if (v120 <= v100) {
        unint64_t v120 = v100;
      }
      v118[152].i64[1] = v120;
      int64x2_t v121 = vdupq_n_s64(1uLL);
      v121.i64[0] = v100;
      v118[153] = vaddq_s64(v118[153], v121);
      *(unsigned char *)(v117 + 184) = 0;
    }
  }
  if (*((void *)v2 + 206))
  {
    uint64_t v122 = *((void *)v2 + 208);
    if (v122)
    {
      float v123 = (re *)re::ProfilerManager::isProcessorEnabled<re::ProfilerMiniHUDProcessor,void>(v122);
      if ((v123 & 1) != 0
        || (float v123 = (re *)re::ProfilerManager::isProcessorEnabled<re::ProfilerDetailedHUDProcessor,void>(*((void *)v2 + 208)),
            (v123 & 1) != 0)
        || (float v126 = (unsigned char *)*((void *)v2 + 206), v126[204]) && !v126[17] && (v126[177] & 1) != 0)
      {
        if ((*((unsigned char *)v2 + 912) & 1) == 0) {
          float v123 = (re *)re::DrawingManager::activatePerfSampling(v2);
        }
        if (!*((void *)v2 + 207))
        {
          uint64_t v124 = re::globalAllocators(v123)[2];
          buf.n128_u64[0] = (unint64_t)&unk_26E7116E0;
          buf.n128_u64[1] = (unint64_t)v2;
          uint64_t v194 = v124;
          p___n128 buf = &buf;
          __int16 v158 = *((void *)v2 + 121);
          re::HashTable<unsigned short,re::Function<void ()(re::GpuTimingData const&)>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::add((uint64_t)v2 + 920, &v158, (uint64_t)&buf);
          uint64_t v125 = *((void *)v2 + 121);
          *((void *)v2 + 121) = v125 + 1;
          *((void *)v2 + 207) = v125;
          re::FunctionBase<24ul,void ()(re::GpuTimingData const&)>::destroyCallable((uint64_t)&buf);
        }
      }
      else if (*((void *)v2 + 207))
      {
        buf.n128_u16[0] = *((void *)v2 + 207);
        re::HashTable<unsigned short,re::Function<void ()(re::GpuTimingData const&)>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::remove((uint64_t)v2 + 920, (unsigned __int16 *)&buf);
        *((void *)v2 + 207) = 0;
      }
    }
  }
  if (*((_DWORD *)v2 + 237))
  {
    if ((*((unsigned char *)v2 + 912) & 1) == 0) {
      re::DrawingManager::activatePerfSampling(v2);
    }
  }
  else if (*((unsigned char *)v2 + 912))
  {
    re::RenderStat::clearMTLCounterHandlers((uint64_t (***)(void))v2 + 109);
    re::RenderStat::deinitializeCurrentMode((re::DrawingManager *)((char *)v2 + 872));
    float v127 = (void *)*((void *)v2 + 113);
    *((void *)v2 + 113) = 0;
  }
  float32x4_t v128 = *(void **)(*((void *)v2 + 32) + 72);
  if (v128)
  {
    uint64_t v129 = v128[23];
    if (v129)
    {
      v128[18] = v129;
      v128[19] = v129 + 16;
      v128[20] = v129 + 16;
      v128[24] = 0;
    }
  }
  float32x4_t v130 = (os_unfair_lock_s *)*((void *)v2 + 38);
  if (v130) {
    re::DebugRenderer::endFrame(v130);
  }
  id v131 = *(id *)(re::DrawingManager::createQueuedCommandBuffer(v2) + 16);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95F80, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF95F80))
  {
    float32x4_t v145 = re::ns::String::String((re::ns::String *)&qword_26AF95F78, (re::ns *)"SharedEventSignalBuffer");
    __cxa_guard_release((__guard *)v145 + 1);
  }
  id v132 = (id)qword_26AF95F78;
  [v131 setLabel:v132];

  uint64_t v133 = *((void *)v2 + 29);
  ++*((void *)v2 + 30);
  objc_msgSend(v131, "encodeSignalEvent:value:", v133);
  ++*((void *)v2 + 107);
  long long v134 = (re *)objc_msgSend(v131, "encodeSignalEvent:value:", *((void *)v2 + 106));
  if (v86 != -1) {
    long long v134 = (re *)[v131 encodeSignalEvent:*((void *)v2 + 101) value:v86];
  }
  uint64_t v135 = *((void *)v3 + 11);
  if (v135) {
    long long v134 = (re *)[v131 encodeSignalEvent:v135 value:*((void *)v3 + 12)];
  }
  uint64_t v136 = *((void *)v3 + 20);
  if (v136)
  {
    uint64_t v137 = 16 * v136;
    float32x4_t v138 = (void *)(*((void *)v3 + 22) + 8);
    do
    {
      uint64_t v139 = *(v138 - 1);
      if (v139) {
        long long v134 = (re *)[v131 encodeSignalEvent:v139 value:*v138];
      }
      v138 += 2;
      v137 -= 16;
    }
    while (v137);
  }
  *((void *)v2 + 104) = (unint64_t)(*((void *)v2 + 104) + 1) % *(void *)(v150 + 240);
  atomic_fetch_add((atomic_uint *volatile)v2 + 210, 1u);
  atomic_fetch_add((atomic_uint *volatile)v2 + 211, 1u);
  unint64_t v140 = *((void *)v3 + 6);
  long long v141 = re::globalAllocators(v134);
  re::PerFrameAllocatorManager::freeAllocatorsForFrame((re *)v141[6], v140);
  re::FrameManager::destructOlderOrEqualOnRenderThread(*(void *)(*((void *)v2 + 32) + 136), v6);
  *(unsigned char *)(re::FrameManager::getFrameRefCount(*(re::FrameManager **)(*((void *)v2 + 32) + 136), v151) + 81) = 1;
  *((unsigned char *)v2 + 1768) = 1;

  re::DynamicArray<re::CommandBuffer>::deinit((uint64_t)&v153);
  re::FunctionBase<24ul,void ()(re::mtl::CommandBuffer const&)>::destroyCallable((uint64_t)v165);
  re::FunctionBase<24ul,void ()(re::mtl::CommandBuffer const&)>::destroyCallable((uint64_t)v168);
  re::BufferTable::~BufferTable((re::BufferTable *)&v191);
  re::TextureTableImpl<NS::SharedPtr<MTL::Texture>>::~TextureTableImpl(v190);
  re::DynamicArray<re::BufferSlice>::deinit((uint64_t)v148);

  if (v177)
  {

    id v177 = 0;
  }
  if (v176)
  {

    id v176 = 0;
  }
}

uint64_t re::RenderFrameBox::get(uint64_t a1, unint64_t a2)
{
  v25[5] = *MEMORY[0x263EF8340];
  BOOL isRenderThread = re::RenderManager::isRenderThread(*(re::RenderManager **)(a1 + 256));
  uint64_t v5 = a2 & 0xFFFFFFFFFFFFFFFLL;
  if (isRenderThread)
  {
    if ((a2 & 0xFFFFFFFFFFFFFFFLL) != 0xFFFFFFFFFFFFFFFLL
      && ((uint64_t v6 = a1 + 16 * (a2 & 7), v7 = *(void *)(v6 + 136) & 0xFFFFFFFFFFFFFFFLL, v7 != 0xFFFFFFFFFFFFFFFLL)
        ? (BOOL v8 = v7 == v5)
        : (BOOL v8 = 0),
          v8))
    {
      return *(void *)(v6 + 128);
    }
    else
    {
      return 0;
    }
  }
  if ((a2 & 0xFFFFFFFFFFFFFFFLL) == 0xFFFFFFFFFFFFFFFLL)
  {
    uint64_t v10 = *(void *)(*(void *)(a1 + 256) + 136);
    uint64_t v11 = *(void *)(v10 + 16);
    uint64_t v5 = *(void *)(v10 + 24) & 0xFFFFFFFFFFFFFFFLL;
    a2 = v5 | ((unint64_t)v11 << 60);
  }
  unint64_t v12 = (uint64_t *)(a1 + 16 * (a2 & 7));
  uint64_t v13 = v12[1] & 0xFFFFFFFFFFFFFFFLL;
  if (v13 == 0xFFFFFFFFFFFFFFFLL)
  {
    if (v5 != 0xFFFFFFFFFFFFFFFLL) {
      goto LABEL_16;
    }
    return *v12;
  }
  if (v5 != 0xFFFFFFFFFFFFFFFLL && v13 == v5) {
    return *v12;
  }
LABEL_16:
  unint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 256) + 136) + 48) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(void *)(*(void *)(*(void *)(a1 + 256) + 136) + 40) << 60);
  unsigned int v15 = re::globalAllocators((re *)isRenderThread);
  unint64_t v16 = (re *)re::PerFrameAllocatorManager::perFrameAllocator(v15[6], a2);
  uint64_t v17 = re::globalAllocators(v16);
  unint64_t v18 = (re *)re::PerFrameAllocatorManager::perFrameAllocator(v17[6], v14);
  re::globalAllocators(v18);
  uint64_t v19 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 4288, 8);
  uint64_t v20 = (re *)re::RenderFrame::RenderFrame(v19, *(void *)(a1 + 256), *(void *)(a1 + 264), *(void *)(a1 + 272), a2, (uint64_t)v16, v14, (uint64_t)v18);
  uint64_t v21 = re::globalAllocators(v20)[2];
  v25[0] = &unk_26E711688;
  v25[3] = v21;
  _OWORD v25[4] = v25;
  uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, void *))(*(void *)v16 + 16))(v16, v19, v25);
  re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)v25);
  uint64_t v22 = *(void *)(*(void *)(a1 + 256) + 104);
  if (v22) {
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = *(void *)(v22 + 296);
  }
  else {
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = 0;
  }
  re::RenderGraphManager::checkDisableTimeouts(v23);
  if (*(unsigned char *)(v23 + 412)) {
    *(unsigned char *)(v9 + 424) = 1;
  }
  *(unsigned char *)(v9 + 425) = *(unsigned char *)(v23 + 380);
  *unint64_t v12 = v9;
  v12[1] = a2;
  return v9;
}

unint64_t re::getCombinedScopeHash(re *this, const char *a2, const char *a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  MurmurHash3_x64_128((uint64_t)"RenderGraphGlobals", 18, 0, &v7);
  unint64_t v3 = v7;
  uint64_t v4 = v8;
  MurmurHash3_x64_128((uint64_t)"RenderFrame", 11, 0, &v7);
  unint64_t v5 = (v4 + (v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9) ^ v3;
  return ((v5 << 6) + (v5 >> 2) + ((v8 + (v7 << 6) + (v7 >> 2) - 0x61C8864680B583E9) ^ v7) - 0x61C8864680B583E9) ^ v5;
}

{
  size_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v4 = strlen((const char *)this);
  if (v4)
  {
    MurmurHash3_x64_128((uint64_t)this, v4, 0, &v7);
    unint64_t v5 = (v8 - 0x61C8864680B583E9 + (v7 << 6) + (v7 >> 2)) ^ v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  MurmurHash3_x64_128((uint64_t)"RenderFrame", 11, 0, &v7);
  return ((v5 << 6) - 0x61C8864680B583E9 + (v5 >> 2) + ((v8 - 0x61C8864680B583E9 + (v7 << 6) + (v7 >> 2)) ^ v7)) ^ v5;
}

{
  unint64_t v5;
  size_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  unint64_t v12 = *MEMORY[0x263EF8340];
  unint64_t v5 = 0x9E3779B97F4A7C17;
  uint64_t v6 = strlen((const char *)this);
  if (v6)
  {
    MurmurHash3_x64_128((uint64_t)this, v6, 0, &v10);
    unint64_t v7 = (v11 - 0x61C8864680B583E9 + (v10 << 6) + (v10 >> 2)) ^ v10;
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v8 = strlen(a2);
  if (v8)
  {
    MurmurHash3_x64_128((uint64_t)a2, v8, 0, &v10);
    unint64_t v5 = ((v11 - 0x61C8864680B583E9 + (v10 << 6) + (v10 >> 2)) ^ v10) - 0x61C8864680B583E9;
  }
  return ((v7 >> 2) + (v7 << 6) + v5) ^ v7;
}

{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t v9 = *MEMORY[0x263EF8340];
  MurmurHash3_x64_128((uint64_t)"ToneMapping", 11, 0, &v7);
  unint64_t v3 = v7;
  uint64_t v4 = v8;
  MurmurHash3_x64_128((uint64_t)"RenderFrame", 11, 0, &v7);
  unint64_t v5 = (v4 + (v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9) ^ v3;
  return ((v5 << 6) + (v5 >> 2) + ((v8 + (v7 << 6) + (v7 >> 2) - 0x61C8864680B583E9) ^ v7) - 0x61C8864680B583E9) ^ v5;
}

{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t v9 = *MEMORY[0x263EF8340];
  MurmurHash3_x64_128((uint64_t)"SceneArray", 10, 0, &v7);
  unint64_t v3 = v7;
  uint64_t v4 = v8;
  MurmurHash3_x64_128((uint64_t)"RenderFrame", 11, 0, &v7);
  unint64_t v5 = (v4 + (v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9) ^ v3;
  return ((v5 << 6) + (v5 >> 2) + ((v8 + (v7 << 6) + (v7 >> 2) - 0x61C8864680B583E9) ^ v7) - 0x61C8864680B583E9) ^ v5;
}

{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t v9 = *MEMORY[0x263EF8340];
  MurmurHash3_x64_128((uint64_t)"RenderGraphGlobals", 18, 0, &v7);
  unint64_t v3 = v7;
  uint64_t v4 = v8;
  MurmurHash3_x64_128((uint64_t)"RenderFrame", 11, 0, &v7);
  unint64_t v5 = (v4 + (v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9) ^ v3;
  return ((v5 << 6) + (v5 >> 2) + ((v8 + (v7 << 6) + (v7 >> 2) - 0x61C8864680B583E9) ^ v7) - 0x61C8864680B583E9) ^ v5;
}

{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t v9 = *MEMORY[0x263EF8340];
  MurmurHash3_x64_128((uint64_t)"GuidedFilterOcclusionData", 25, 0, &v7);
  unint64_t v3 = v7;
  uint64_t v4 = v8;
  MurmurHash3_x64_128((uint64_t)"GuidedFilterOcclusion", 21, 0, &v7);
  unint64_t v5 = (v4 + (v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9) ^ v3;
  return ((v5 << 6) + (v5 >> 2) + ((v8 + (v7 << 6) + (v7 >> 2) - 0x61C8864680B583E9) ^ v7) - 0x61C8864680B583E9) ^ v5;
}

{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t v9 = *MEMORY[0x263EF8340];
  MurmurHash3_x64_128((uint64_t)"ProjectiveMeshShadow", 20, 0, &v7);
  unint64_t v3 = v7;
  uint64_t v4 = v8;
  MurmurHash3_x64_128((uint64_t)"RenderFrame", 11, 0, &v7);
  unint64_t v5 = (v4 + (v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9) ^ v3;
  return ((v5 << 6) + (v5 >> 2) + ((v8 + (v7 << 6) + (v7 >> 2) - 0x61C8864680B583E9) ^ v7) - 0x61C8864680B583E9) ^ v5;
}

{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t v9 = *MEMORY[0x263EF8340];
  MurmurHash3_x64_128((uint64_t)"ProjectiveShadow", 16, 0, &v7);
  unint64_t v3 = v7;
  uint64_t v4 = v8;
  MurmurHash3_x64_128((uint64_t)"RenderFrame", 11, 0, &v7);
  unint64_t v5 = (v4 + (v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9) ^ v3;
  return ((v5 << 6) + (v5 >> 2) + ((v8 + (v7 << 6) + (v7 >> 2) - 0x61C8864680B583E9) ^ v7) - 0x61C8864680B583E9) ^ v5;
}

uint64_t (***___ZN2re14DrawingManager20executeFrameInternalEPNS_19RenderFrameWorkloadE_block_invoke(re *a1))(void)
{
  v6[5] = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)a1 + 4);
  uint64_t v1 = *((void *)a1 + 5);
  unint64_t v3 = *(re::FrameManager **)(*(void *)(v2 + 256) + 136);
  uint64_t v4 = re::globalAllocators(a1)[2];
  v6[0] = &unk_26E711520;
  v6[1] = v2;
  v6[3] = v4;
  void v6[4] = v6;
  re::FrameManager::tryExecuteCallbackWithAllocatedFrame(v3, v1, (uint64_t)v6);
  return re::FunctionBase<24ul,void ()(unsigned long long)>::destroyCallable((uint64_t)v6);
}

void re::DrawingManager::sampleComputeEncoderMTLCounterBegin(uint64_t a1, id *a2, unsigned int a3)
{
  uint64_t v4 = a1 + 872;
  id v5 = *a2;
  re::RenderStat::sampleComputeEncoderMTLCounterBegin(v4, &v5, a3);
}

void re::DrawingManager::sampleComputeEncoderMTLCounterEnd(uint64_t a1, id *a2, unsigned int a3)
{
  uint64_t v4 = a1 + 872;
  id v5 = *a2;
  re::RenderStat::sampleComputeEncoderMTLCounterEnd(v4, &v5, a3);
}

void re::DrawingManager::enableMTLCounterSamplingOnRenderPassDescriptor(uint64_t a1, id *a2, unsigned int a3)
{
  uint64_t v4 = a1 + 872;
  id v5 = *a2;
  re::RenderStat::enableMTLCounterSamplingOnRenderPassDescriptor(v4, &v5, a3);
  if (v5) {
}
  }

void re::DrawingManager::makeComputeCommandEncoderWithMTLCounterSampling(uint64_t a1@<X0>, id *a2@<X1>, unsigned int a3@<W2>, void *a4@<X8>)
{
  uint64_t v6 = a1 + 872;
  id v7 = *a2;
  re::RenderStat::makeComputeCommandEncoderWithMTLCounterSampling(&v7, v6, a3, a4);
}

uint64_t re::DrawingManager::reloadLibrary(_anonymous_namespace_ **this, const char *a2, const char *a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (v27) {
    id v7 = *(const char **)&v28[7];
  }
  else {
    id v7 = v28;
  }
  if (v24) {
    uint64_t v8 = *(re::ns **)&v25[7];
  }
  else {
    uint64_t v8 = (re::ns *)v25;
  }
  re::ShaderManager::makeLibraryWithFile(*((void ***)this[32] + 7), v7, v8, 0);
  uint64_t v9 = this[32];
  re::DynamicString::DynamicString((re::DynamicString *)&v17, (const re::DynamicString *)&v26);
  uint64_t v10 = re::DynamicString::DynamicString((re::DynamicString *)&v21, (const re::DynamicString *)&v23);
  uint64_t v30 = re::globalAllocators(v10)[2];
  uint64_t v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v30 + 32))(v30, 80, 0);
  *uint64_t v11 = &unk_26E711638;
  v11[1] = this;
  v11[4] = 0;
  v11[5] = 0;
  _OWORD v11[2] = v17;
  void v11[3] = 0;
  uint64_t v12 = v18;
  v11[4] = v19;
  v11[5] = v20;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v13 = v11[3];
  void v11[3] = v12;
  uint64_t v17 = 0;
  uint64_t v18 = v13;
  v11[8] = 0;
  v11[9] = 0;
  v11[6] = v21;
  v11[7] = 0;
  uint64_t v14 = *((void *)&v21 + 1);
  *((_OWORD *)v11 + 4) = v22;
  long long v22 = 0uLL;
  uint64_t v15 = v11[7];
  v11[7] = v14;
  *(void *)&long long v21 = 0;
  *((void *)&v21 + 1) = v15;
  id v31 = v11;
  re::RenderManager::addDelayedDestructorToRenderThread(v9, (uint64_t)v29);
  re::MoveOnlyFunctionBase<24ul,void ()(void)>::destroyCallable((uint64_t)v29);
  if ((void)v21)
  {
    if (BYTE8(v21)) {
      (*(void (**)(void))(*(void *)v21 + 40))();
    }
    long long v21 = 0u;
    long long v22 = 0u;
  }
  if (v17 && (v18 & 1) != 0) {
    (*(void (**)(void))(*(void *)v17 + 40))();
  }
  if (v23 && (v24 & 1) != 0) {
    (*(void (**)(void))(*(void *)v23 + 40))();
  }
  uint64_t result = v26;
  if (v26)
  {
    if (v27) {
      return (*(uint64_t (**)(void))(*(void *)v26 + 40))();
    }
  }
  return result;
}

uint64_t *re::DrawingManager::removeInvalidPipelineStates(re::DrawingManager *this)
{
  uint64_t v1 = this;
  ValidAllocator = re::getValidAllocator((re *)(*(void *)(*(void *)(*((void *)this + 32) + 136) + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(void *)(*(void *)(*((void *)this + 32) + 136) + 16) << 60)));
  uint64_t v68 = 0;
  unint64_t v65 = 0;
  unint64_t v66 = 0;
  int v67 = 0;
  uint64_t v64 = ValidAllocator;
  re::DynamicArray<re::PipelineStateCacheKey>::setCapacity(&v64, 0);
  int v59 = ++v67;
  uint64_t v3 = *(void *)(*((void *)v1 + 32) + 24);
  uint64_t v4 = *(void *)(v3 + 416);
  if (v4)
  {
    id v5 = *(id **)(v3 + 432);
    uint64_t v50 = &v5[v4];
    uint64_t v6 = (uint64_t)v1 + 48;
    id v57 = v1;
    int v58 = (char *)v1 + 48;
    do
    {
      id to = 0;
      uint64_t v51 = v5;
      objc_copyWeak(&to, v5);
      id v7 = objc_loadWeakRetained(&to);
      if (v7)
      {
        uint64_t v8 = v7[9];
        if (v8)
        {
          uint64_t v9 = (uint64_t *)v7[10];
          uint64_t v52 = &v9[5 * v8];
          unint64_t v53 = v7;
          do
          {
            uint64_t v10 = *v9;
            uint64_t v11 = *(unsigned int *)(*v9 + 120);
            uint64_t v54 = v9;
            uint64_t v12 = 0;
            if (v11)
            {
              uint64_t v13 = (int *)(*(void *)(v10 + 104) + 8);
              while (1)
              {
                int v14 = *v13;
                v13 += 8;
                if (v14 < 0) {
                  break;
                }
                if (v11 == ++v12)
                {
                  LODWORD(v12) = *(_DWORD *)(*v9 + 120);
                  break;
                }
              }
            }
            if (v11 != v12)
            {
              uint64_t v15 = v12;
              int v55 = *(_DWORD *)(*v9 + 120);
              uint64_t v56 = *v9;
              do
              {
                uint64_t v16 = *(void *)(*(void *)(v10 + 104) + 32 * v15 + 24);
                uint64_t v17 = *(unsigned int *)(v16 + 56);
                if (v17)
                {
                  uint64_t v18 = 0;
                  uint64_t v19 = (int *)(*(void *)(v16 + 40) + 8);
                  while (1)
                  {
                    int v20 = *v19;
                    v19 += 24;
                    if (v20 < 0) {
                      break;
                    }
                    if (v17 == ++v18)
                    {
                      LODWORD(v18) = *(_DWORD *)(v16 + 56);
                      break;
                    }
                  }
                }
                else
                {
                  LODWORD(v18) = 0;
                }
                if (v17 != v18)
                {
                  uint64_t v21 = v18;
                  do
                  {
                    uint64_t v22 = v21;
                    if (v17 <= (int)v18 + 1) {
                      int v23 = v18 + 1;
                    }
                    else {
                      int v23 = v17;
                    }
                    uint64_t v24 = *(void *)(v16 + 40);
                    int v25 = v18;
                    while (1)
                    {
                      uint64_t v21 = (v25 + 1);
                      if (v23 - 1 == v25) {
                        break;
                      }
                      ++v25;
                      LODWORD(v18) = v21;
                      if ((*(_DWORD *)(v24 + 96 * v21 + 8) & 0x80000000) != 0) {
                        goto LABEL_29;
                      }
                    }
                    LODWORD(v18) = v23;
LABEL_29:
                    uint64_t v26 = v24 + 96 * v22 + 16;
                    char v27 = (uint64_t *)re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::tryGet(v6, (void *)v26);
                    if (v27)
                    {
                      uint64_t v28 = *v27;
                      if (*v27)
                      {
                        id v29 = (id)(v28 + 8);
                        uint64_t v30 = *((void *)v1 + 32);
                        uint64_t v62 = v28;
                        id v31 = (id)(v28 + 8);
                        LOBYTE(v30) = re::validateCachedPipelineState(v30, (uint64_t)&v62);

                        uint64_t v62 = 0;
                        if (v30)
                        {
                          uint64_t v1 = v57;
                          uint64_t v6 = (uint64_t)v58;
                        }
                        else
                        {
                          unint64_t v33 = v66;
                          if (v66 >= v65)
                          {
                            unint64_t v35 = v66 + 1;
                            int v34 = v59;
                            if (v65 < v66 + 1)
                            {
                              if (v64)
                              {
                                unint64_t v36 = 2 * v65;
                                if (!v65) {
                                  unint64_t v36 = 8;
                                }
                                if (v36 <= v35) {
                                  unint64_t v37 = v66 + 1;
                                }
                                else {
                                  unint64_t v37 = v36;
                                }
                                re::DynamicArray<re::PipelineStateCacheKey>::setCapacity(&v64, v37);
                                int v34 = v67;
                              }
                              else
                              {
                                re::DynamicArray<re::PipelineStateCacheKey>::setCapacity(&v64, v35);
                                int v34 = v67 + 1;
                              }
                            }
                            unint64_t v33 = v66;
                            uint64_t v1 = v57;
                            uint64_t v6 = (uint64_t)v58;
                          }
                          else
                          {
                            uint64_t v1 = v57;
                            uint64_t v6 = (uint64_t)v58;
                            int v34 = v59;
                          }
                          uint64_t v38 = v68 + 72 * v33;
                          *(_OWORD *)uint64_t v38 = *(_OWORD *)v26;
                          long long v40 = *(_OWORD *)(v26 + 32);
                          long long v39 = *(_OWORD *)(v26 + 48);
                          long long v41 = *(_OWORD *)(v26 + 16);
                          *(void *)(v38 + 64) = *(void *)(v26 + 64);
                          *(_OWORD *)(v38 + 32) = v40;
                          *(_OWORD *)(v38 + 48) = v39;
                          *(_OWORD *)(v38 + 16) = v41;
                          unint64_t v66 = v33 + 1;
                          int v59 = v34 + 1;
                          int v67 = v34 + 1;
                        }
                      }
                    }
                    LODWORD(v17) = *(_DWORD *)(v16 + 56);
                  }
                  while (v17 != v18);
                }
                if (v66)
                {
                  uint64_t v42 = v68;
                  uint64_t v43 = 72 * v66;
                  do
                  {
                    v60[0] = *(_OWORD *)v42;
                    long long v44 = *(_OWORD *)(v42 + 16);
                    long long v45 = *(_OWORD *)(v42 + 32);
                    long long v46 = *(_OWORD *)(v42 + 48);
                    uint64_t v61 = *(void *)(v42 + 64);
                    v60[2] = v45;
                    v60[3] = v46;
                    v60[1] = v44;
                    re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::remove(v16 + 24, v60);
                    re::DrawingManager::releasePipelineState((uint64_t)v1, v60);
                    v42 += 72;
                    v43 -= 72;
                  }
                  while (v43);
                }
                unint64_t v66 = 0;
                int v67 = ++v59;
                uint64_t v10 = v56;
                if (*(_DWORD *)(v56 + 120) <= (v12 + 1)) {
                  int v47 = v12 + 1;
                }
                else {
                  int v47 = *(_DWORD *)(v56 + 120);
                }
                while (1)
                {
                  uint64_t v15 = (v12 + 1);
                  if (v47 - 1 == v12) {
                    break;
                  }
                  LODWORD(v12) = v12 + 1;
                  int v48 = v15;
                  if ((*(_DWORD *)(*(void *)(v56 + 104) + 32 * v15 + 8) & 0x80000000) != 0) {
                    goto LABEL_58;
                  }
                }
                int v48 = v47;
LABEL_58:
                LODWORD(v12) = v48;
              }
              while (v55 != v48);
            }
            id v7 = v53;
            uint64_t v9 = v54 + 5;
          }
          while (v54 + 5 != v52);
        }
      }
      objc_destroyWeak(&to);
      id v5 = v51 + 1;
    }
    while (v51 + 1 != v50);
  }
  uint64_t result = v64;
  if (v64)
  {
    if (v68) {
      return (uint64_t *)(*(uint64_t (**)(void))(*v64 + 40))();
    }
  }
  return result;
}

uint64_t re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::remove(uint64_t a1, void *a2)
{
  unint64_t v4 = re::Hash<re::PipelineStateCacheKey>::operator()((int)&v22, a2);
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v5 = v4 % *(unsigned int *)(a1 + 24);
  uint64_t v6 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v5);
  if (v6 == 0x7FFFFFFF) {
    return 0;
  }
  if (!re::EqualTo<re::PipelineStateCacheKey>::operator()((int)&v23, (void *)(*(void *)(a1 + 16) + 96 * v6 + 16), a2))
  {
    while (1)
    {
      unsigned int v8 = v6;
      uint64_t v9 = *(void *)(a1 + 16);
      int v10 = *(_DWORD *)(v9 + 96 * v6 + 8);
      uint64_t v6 = v10 & 0x7FFFFFFF;
      if ((v10 & 0x7FFFFFFF) == 0x7FFFFFFF) {
        return 0;
      }
      if (re::EqualTo<re::PipelineStateCacheKey>::operator()((int)&v23, (void *)(v9 + 96 * v6 + 16), a2))
      {
        *(_DWORD *)(*(void *)(a1 + 16) + 96 * v8 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 96 * v8 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 16) + 96 * v6 + 8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * v5) = *(_DWORD *)(*(void *)(a1 + 16) + 96 * v6 + 8) & 0x7FFFFFFF;
LABEL_9:
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = v11 + 96 * v6;
  int v15 = *(_DWORD *)(v12 + 8);
  uint64_t v13 = (int *)(v12 + 8);
  int v14 = v15;
  if (v15 < 0)
  {
    *uint64_t v13 = v14 & 0x7FFFFFFF;
    uint64_t v16 = v11 + 96 * v6;
    uint64_t v19 = *(void *)(v16 + 88);
    uint64_t v18 = (void *)(v16 + 88);
    uint64_t v17 = v19;
    if (v19)
    {

      *uint64_t v18 = 0;
    }
  }
  uint64_t v20 = *(void *)(a1 + 16) + 96 * v6;
  int v21 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v20 + 8) = *(_DWORD *)(v20 + 8) & 0x80000000 | *(_DWORD *)(a1 + 36);
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v6;
  *(_DWORD *)(a1 + 40) = v21 + 1;
  return 1;
}

uint64_t re::DrawingManager::releasePipelineState(uint64_t a1, void *a2)
{
  uint64_t v3 = a1 + 48;
  uint64_t result = re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::tryGet(a1 + 48, a2);
  if (result)
  {
    uint64_t result = objc_isUniquelyReferenced();
    if (result)
    {
      return re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::remove(v3, a2);
    }
  }
  return result;
}

uint64_t re::DrawingManager::registerRenderLayer(uint64_t a1, id *a2)
{
  if (!*a2) {
    return 0xFFFFFFFFLL;
  }
  [*a2 setProtectionOptions:re::protectionOptions((re *)a1)];
  id location = 0;
  unsigned __int8 v27 = 0;
  unsigned __int8 v29 = 0;
  re::ObjCObject::operator=(&location, a2);
  unint64_t v4 = (CGColorSpace *)[*a2 colorspace];
  if (v4)
  {
    if (*(unsigned char *)(*(void *)(a1 + 264) + 64))
    {
      char v25 = 0;
      CFStringRef Name = CGColorSpaceGetName(v4);
      ColorGamutFromCGColorSpaceCFStringRef Name = (re *)re::ColorHelpers::getColorGamutFromCGColorSpaceName(Name, &v25);
      if (!ColorGamutFromCGColorSpaceName || v25 != *(unsigned char *)(*(void *)(a1 + 264) + 1))
      {
        id v7 = *re::graphicsLogObjects(ColorGamutFromCGColorSpaceName);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          v24[0] = 0;
          _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_DEFAULT, "Registered render layer specified colorspace does not match RE target display color gamut", (uint8_t *)v24, 2u);
        }
      }
    }
  }
  [*a2 setFenceEnabled:1];
  unsigned int v8 = (_anonymous_namespace_ *)[location setDevice:*(void *)(*(void *)(a1 + 256) + 184)];
  unint64_t v9 = *(void *)(a1 + 1688);
  if (!v9) {
    goto LABEL_22;
  }
  unint64_t v10 = 0;
  uint64_t v11 = *(void *)(a1 + 1704) + 12;
  while (*(void *)(v11 - 12))
  {
    ++v10;
    v11 += 32;
    if (v9 == v10) {
      goto LABEL_22;
    }
  }
  if (v10 < v9)
  {
    uint64_t v12 = (void **)(v11 - 12);
    if ((id *)(v11 - 12) != &location)
    {
      id v13 = location;
      id location = 0;
      int v14 = *v12;
      *uint64_t v12 = v13;
    }
    if (*(unsigned char *)(v11 - 4) || v27)
    {
      if (!*(unsigned char *)(v11 - 4) || v27)
      {
        if (!*(unsigned char *)(v11 - 4) && v27) {
          *(unsigned char *)(v11 - 4) = 1;
        }
        *(void *)uint64_t v11 = v28;
      }
      else
      {
        *(unsigned char *)(v11 - 4) = 0;
      }
    }
    if (*(unsigned char *)(v11 + 8) || v29)
    {
      if (!*(unsigned char *)(v11 + 8) || v29)
      {
        if (!*(unsigned char *)(v11 + 8) && v29) {
          *(unsigned char *)(v11 + 8) = 1;
        }
        *(_DWORD *)(v11 + 12) = v30;
      }
      else
      {
        *(unsigned char *)(v11 + 8) = 0;
      }
    }
  }
  else
  {
LABEL_22:
    unint64_t v15 = *(void *)(a1 + 1680);
    if (v9 >= v15)
    {
      unint64_t v16 = v9 + 1;
      if (v15 < v9 + 1)
      {
        if (*(void *)(a1 + 1672))
        {
          unint64_t v17 = 2 * v15;
          if (!v15) {
            unint64_t v17 = 8;
          }
          if (v17 <= v16) {
            unint64_t v18 = v16;
          }
          else {
            unint64_t v18 = v17;
          }
          re::DynamicArray<re::RenderLayer>::setCapacity((void *)(a1 + 1672), v18);
        }
        else
        {
          re::DynamicArray<re::RenderLayer>::setCapacity((void *)(a1 + 1672), v16);
          ++*(_DWORD *)(a1 + 1696);
        }
      }
      unint64_t v9 = *(void *)(a1 + 1688);
    }
    uint64_t v19 = *(void *)(a1 + 1704);
    uint64_t v20 = v19 + 32 * v9;
    id v21 = location;
    id location = 0;
    *(void *)uint64_t v20 = v21;
    LODWORD(v21) = v27;
    *(unsigned char *)(v20 + 8) = v27;
    if (v21) {
      *(void *)(v20 + 12) = v28;
    }
    int v22 = v29;
    *(unsigned char *)(v20 + 20) = v29;
    if (v22) {
      *(_DWORD *)(v19 + 32 * v9 + 24) = v30;
    }
    unint64_t v10 = *(void *)(a1 + 1688);
    *(void *)(a1 + 1688) = v10 + 1;
    ++*(_DWORD *)(a1 + 1696);
  }

  return v10;
}

void re::DrawingManager::unregisterRenderLayer(re::DrawingManager *this, unsigned int a2)
{
  if (*((void *)this + 211) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v2 = (re::RenderLayer *)(*((void *)this + 213) + 32 * a2);
  re::RenderLayer::invalidate(v2);
}

float re::DrawingManager::layerAspect(re::DrawingManager *this, unsigned int a2, double a3)
{
  LODWORD(a3) = 1.0;
  if (a2 != -1 && *((void *)this + 211) > (unint64_t)a2)
  {
    uint64_t v5 = *((void *)this + 213);
    uint64_t v6 = *(void **)(v5 + 32 * a2);
    if (v6)
    {
      uint64_t v7 = v5 + 32 * a2;
      if (*(unsigned char *)(v7 + 8))
      {
        float v8 = *(float *)(v7 + 12);
        float v9 = *(float *)(v7 + 16);
      }
      else
      {
        objc_msgSend(v6, "bounds", a3, v3, v4);
        float v8 = v10;
        float v9 = v11;
      }
      *(float *)&a3 = v8 / v9;
      if ((LODWORD(a3) & 0x7FFFFFFFu) >= 0x7F800000) {
        *(float *)&a3 = 1.0;
      }
    }
  }
  return *(float *)&a3;
}

float re::DrawingManager::getLayerContentsScale(re::DrawingManager *this, unsigned int a2, double a3)
{
  LODWORD(a3) = 1.0;
  if (a2 != -1 && *((void *)this + 211) > (unint64_t)a2)
  {
    uint64_t v5 = *((void *)this + 213);
    uint64_t v6 = *(void **)(v5 + 32 * a2);
    if (v6)
    {
      uint64_t v7 = v5 + 32 * a2;
      if (*(unsigned char *)(v7 + 20))
      {
        LODWORD(a3) = *(_DWORD *)(v7 + 24);
      }
      else
      {
        objc_msgSend(v6, "contentsScale", a3, v3, v4);
        *(float *)&a3 = a3;
      }
    }
  }
  return *(float *)&a3;
}

uint64_t re::DrawingManager::setLayerSize(uint64_t this, unsigned int a2, float a3, float a4)
{
  if (*(void *)(this + 1688) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v4 = *(void *)(this + 1704) + 32 * a2;
  if (!*(unsigned char *)(v4 + 8)) {
    *(unsigned char *)(v4 + 8) = 1;
  }
  *(void *)(v4 + 12) = LODWORD(a3) | ((unint64_t)LODWORD(a4) << 32);
  return this;
}

float re::DrawingManager::getLayerSize(re::DrawingManager *this, unsigned int a2, double a3, double a4)
{
  LODWORD(a3) = 1.0;
  if (a2 != -1 && *((void *)this + 211) > (unint64_t)a2)
  {
    uint64_t v6 = *((void *)this + 213);
    uint64_t v7 = *(void **)(v6 + 32 * a2);
    LODWORD(a4) = 1.0;
    if (v7)
    {
      uint64_t v8 = v6 + 32 * a2;
      if (*(unsigned char *)(v8 + 8))
      {
        LODWORD(a3) = *(_DWORD *)(v8 + 12);
      }
      else
      {
        objc_msgSend(v7, "drawableSize", a3, a4, v4, v5);
        *(float *)&a3 = a3;
      }
    }
  }
  return *(float *)&a3;
}

void *re::DrawingManager::getLayersWithPendingSizeOrScaleChanges@<X0>(void *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
  int v8 = 0;
  unint64_t v3 = this[211];
  if (v3)
  {
    uint64_t v4 = this;
    LODWORD(v5) = 0;
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = v4[213] + 32 * v6;
      if (*(unsigned char *)(v7 + 8) || *(unsigned char *)(v7 + 20))
      {
        this = re::DynamicArray<int>::add((void *)a2, &v8);
        LODWORD(v5) = v8;
        unint64_t v3 = v4[211];
      }
      unint64_t v5 = (v5 + 1);
      int v8 = v5;
      unint64_t v6 = v5;
    }
    while (v3 > v5);
  }
  return this;
}

uint64_t re::DrawingManager::presentDrawablesAndCommit(re::DrawingManager *this, char **a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = a3;
  uint64_t v78 = *MEMORY[0x263EF8340];
  if (a3 != 2)
  {
    unint64_t v10 = re::DrawingManager::currentCommandBuffer(this);
    double v11 = a2[1];
    if (v11)
    {
      for (unint64_t i = 0; i < (unint64_t)v11; ++i)
      {
        if (*(void *)&a2[2][8 * i])
        {
          id v12 = *(id *)(v10 + 16);
          unint64_t v5 = a2[1];
          if ((unint64_t)v5 <= i) {
            goto LABEL_76;
          }
          id v13 = v12;
          [v12 presentDrawable:*(void *)&a2[2][8 * i] afterMinimumDuration:1.0 / *((float *)this + 440)];

          double v11 = a2[1];
        }
      }
    }
    if (a4)
    {
      *(void *)&long long v73 = *(id *)(v10 + 16);
      re::RenderFrameWorkload::presentDrawables((re::RenderFrameWorkload *)a4, (id *)&v73);
    }
  }
  if (re::RenderManager::splitCommandBuffersForDebugging(*((re::RenderManager **)this + 32)))
  {
    uint64_t QueuedCommandBuffer = re::DrawingManager::createQueuedCommandBuffer(this);
    id v15 = *(id *)(QueuedCommandBuffer + 16);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95F90, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF95F90))
    {
      uint64_t v56 = re::ns::String::String((re::ns::String *)&qword_26AF95F88, (re::ns *)"Before CC");
      __cxa_guard_release((__guard *)v56 + 1);
    }
    unint64_t i = (unint64_t)(id)qword_26AF95F88;
    [v15 setLabel:i];

    id v16 = *(id *)(QueuedCommandBuffer + 16);
    [v16 addCompletedHandler:&__block_literal_global_30];
  }
  uint64_t v17 = re::DrawingManager::currentCommandBuffer(this);
  id v18 = *(id *)(v17 + 16);
  [v18 status];

  *(void *)&long long v73 = *(id *)(v17 + 16);
  re::RenderFrameWorkload::beforeCommandBufferCommitted((re::RenderFrameWorkload *)a4, (const re::mtl::CommandBuffer *)&v73);

  re::RenderFrameWorkload::encoded((atomic_uchar *)a4);
  unint64_t v10 = (unint64_t)*(id *)(v17 + 16);
  [(id)v10 status];

  if (v7 == 2)
  {
    re::DrawingManager::finalizeCommandBuffers(this);
    unint64_t v10 = *((void *)this + 216);
    if (v10 == 1)
    {
      unint64_t v23 = 0;
    }
    else
    {
      unint64_t v7 = 0;
      uint64_t v31 = 16;
      do
      {
        if (v10 <= v7) {
          goto LABEL_78;
        }
        uint64_t v32 = *((void *)this + 218);
        [*(id *)(v32 + v31) commit];
        unint64_t v33 = *(void **)(v32 + v31);
        *(void *)(v32 + v31) = 0;

        ++v7;
        unint64_t v10 = *((void *)this + 216);
        unint64_t v23 = v10 - 1;
        v31 += 24;
      }
      while (v7 < v10 - 1);
    }
    unint64_t v10 = *((void *)this + 218) + 24 * v23;
    [*(id *)(v10 + 16) commit];
    [*(id *)(v10 + 16) waitUntilScheduled];
    int v34 = *(void **)(v10 + 16);
    *(void *)(v10 + 16) = 0;

    re::DynamicArray<re::CommandBuffer>::clear((uint64_t)this + 1712);
    unint64_t v35 = a2[1];
    if (v35)
    {
      unint64_t v10 = 0;
      for (unint64_t j = 0; j < (unint64_t)v35; ++j)
      {
        if (a4)
        {
          unint64_t v37 = (id *)&a2[2][v10];
          if (*v37)
          {
            re::DynamicArray<re::mtl::Drawable>::add((_anonymous_namespace_ *)(a4 + 192), v37);
            unint64_t v35 = a2[1];
          }
        }
        v10 += 8;
      }
    }
  }
  else
  {
    if (v7 == 1)
    {
      re::DrawingManager::finalizeCommandBuffers(this);
      a2 = (char **)*((void *)this + 216);
      if (a2 != (char **)1)
      {
        a4 = 0;
        unint64_t v7 = 16;
        do
        {
          if ((unint64_t)a2 <= a4) {
            goto LABEL_77;
          }
          uint64_t v24 = *((void *)this + 218);
          [*(id *)(v24 + v7) commit];
          char v25 = *(void **)(v24 + v7);
          *(void *)(v24 + v7) = 0;

          ++a4;
          a2 = (char **)*((void *)this + 216);
          v7 += 24;
        }
        while (a4 < (unint64_t)a2 - 1);
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF95F28, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF95F28))
      {
        re::Defaults::BOOLValue((re::Defaults *)"useBlockingWaitWithManualDispatch", v57, (char *)&v73);
        if ((_BYTE)v73) {
          char v58 = BYTE1(v73);
        }
        else {
          char v58 = 0;
        }
        byte_26AF95F0A = v58;
        __cxa_guard_release(&qword_26AF95F28);
      }
      uint64_t v26 = *((void *)this + 218) + 24 * *((void *)this + 216);
      unsigned __int8 v29 = *(void **)(v26 - 8);
      uint64_t v28 = (id *)(v26 - 8);
      unsigned __int8 v27 = v29;
      if (!*((unsigned char *)this + 794) || byte_26AF95F0A)
      {
        [v27 commit];
        [*v28 waitUntilCompleted];
        id v38 = *v28;
        *uint64_t v28 = 0;
      }
      else
      {
        id v30 = v27;
        [v30 commit];
        [*((id *)this + 35) dispatchAvailableCompletionNotifications];
        while (([v30 status] & 0xFFFFFFFELL) != 4)
        {
          [*((id *)this + 35) dispatchAvailableCompletionNotifications];
          usleep(0x3E8u);
        }

        [*((id *)this + 35) dispatchAvailableCompletionNotifications];
        id v38 = 0;
      }
    }
    else
    {
      if (v7) {
        goto LABEL_46;
      }
      re::DrawingManager::finalizeCommandBuffers(this);
      uint64_t v19 = *((void *)this + 216);
      if (v19)
      {
        uint64_t v20 = 24 * v19;
        id v21 = (id *)(*((void *)this + 218) + 16);
        do
        {
          [*v21 commit];
          id v22 = *v21;
          *id v21 = 0;
          v21 += 3;

          v20 -= 24;
        }
        while (v20);
      }
    }
    re::DynamicArray<re::CommandBuffer>::clear((uint64_t)this + 1712);
  }
LABEL_46:
  ValidAllocator = re::getValidAllocator((re *)(*(void *)(*(void *)(*((void *)this + 32) + 136) + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(void *)(*(void *)(*((void *)this + 32) + 136) + 16) << 60)));
  *(void *)&v65[2] = 0;
  memset(&v63[8], 0, 20);
  *(void *)float32x2_t v63 = ValidAllocator;
  re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::setCapacity(v63, 0);
  ++*(_DWORD *)&v63[24];
  int v59 = (char *)this + 104;
  uint64_t v60 = 0;
  unint64_t v40 = *((void *)this + 15);
  if (v40 < 0x10)
  {
LABEL_50:
    uint64_t k = -1;
  }
  else
  {
    uint64_t v41 = 0;
    uint64_t v42 = *((void *)this + 13);
    unint64_t v43 = v40 >> 4;
    while (1)
    {
      unsigned __int16 v44 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v42 + v41)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      uint64_t v60 = (unsigned __int16)~v44;
      if (v44 != 0xFFFF) {
        break;
      }
      v41 += 16;
      if (!--v43) {
        goto LABEL_50;
      }
    }
    unint64_t v10 = __clz(__rbit64((unsigned __int16)~v44)) + v41;
    for (k = v10; k != -1; unint64_t v10 = k)
    {
      uint64_t v52 = v59;
      re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v59);
      uint64_t v53 = *((void *)v52 + 1);
      uint64_t v54 = *(void *)(v53 + 48 * v10 + 40);
      if (*(unsigned char *)(v54 + 73))
      {
        *(_WORD *)(v54 + 72) = 0;
      }
      else
      {
        uint64_t v55 = v53 + 48 * v10;

        *(void *)uint64_t v54 = 0;
        *(void *)(v54 + 8) = 0;
        re::internal::destroyPersistent<re::CachedArgumentBuffer>((re *)"destroyCachedArgumentBuffer", 185, v54);
        re::DynamicArray<re::Pair<BOOL,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription,true>>::add((_anonymous_namespace_ *)v63, v55);
      }
    }
  }
  if (*(void *)&v63[16])
  {
    long long v45 = *(long long **)&v65[2];
    uint64_t v46 = 40 * *(void *)&v63[16];
    do
    {
      long long v47 = *v45;
      long long v48 = v45[1];
      *(void *)&long long v75 = *((void *)v45 + 4);
      long long v73 = v47;
      long long v74 = v48;
      re::HashBrown<re::ArgumentBufferCacheKey,re::CachedArgumentBuffer *,re::Hash<re::ArgumentBufferCacheKey>,re::EqualTo<re::ArgumentBufferCacheKey>,void,false>::remove((uint64_t *)this + 13, &v73);
      long long v45 = (long long *)((char *)v45 + 40);
      v46 -= 40;
    }
    while (v46);
  }
  if (*((void *)this + 23))
  {
    a4 = 0;
    a2 = &selRef_stepFunction_0;
    do
    {
      if (objc_msgSend(*(id *)(*((void *)this + 25) + 8 * a4), sel_usedSize))
      {
        ++a4;
        unint64_t v49 = *((void *)this + 23);
      }
      else
      {
        unint64_t v7 = *((void *)this + 23);
        if (v7 <= a4)
        {
          uint64_t v62 = 0;
          long long v76 = 0u;
          long long v77 = 0u;
          long long v74 = 0u;
          long long v75 = 0u;
          long long v73 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)unint64_t v66 = 136315906;
          *(void *)&v66[4] = "removeAt";
          __int16 v67 = 1024;
          int v68 = 931;
          __int16 v69 = 2048;
          unint64_t v70 = a4;
          __int16 v71 = 2048;
          unint64_t v72 = v7;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_76:
          *(void *)unint64_t v66 = 0;
          long long v76 = 0u;
          long long v77 = 0u;
          long long v74 = 0u;
          long long v75 = 0u;
          long long v73 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)float32x2_t v63 = 136315906;
          *(void *)&v63[4] = "operator[]";
          *(_WORD *)&v63[12] = 1024;
          *(_DWORD *)&v63[14] = 476;
          *(_WORD *)&v63[18] = 2048;
          *(void *)&v63[20] = i;
          __int16 v64 = 2048;
          *(void *)unint64_t v65 = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_77:
          *(void *)unint64_t v66 = 0;
          long long v76 = 0u;
          long long v77 = 0u;
          long long v74 = 0u;
          long long v75 = 0u;
          long long v73 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)float32x2_t v63 = 136315906;
          *(void *)&v63[4] = "operator[]";
          *(_WORD *)&v63[12] = 1024;
          *(_DWORD *)&v63[14] = 789;
          *(_WORD *)&v63[18] = 2048;
          *(void *)&v63[20] = a4;
          __int16 v64 = 2048;
          *(void *)unint64_t v65 = a2;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_78:
          *(void *)unint64_t v66 = 0;
          long long v76 = 0u;
          long long v77 = 0u;
          long long v74 = 0u;
          long long v75 = 0u;
          long long v73 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)float32x2_t v63 = 136315906;
          *(void *)&v63[4] = "operator[]";
          *(_WORD *)&v63[12] = 1024;
          *(_DWORD *)&v63[14] = 789;
          *(_WORD *)&v63[18] = 2048;
          *(void *)&v63[20] = v7;
          __int16 v64 = 2048;
          *(void *)unint64_t v65 = v10;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        if (v7 - 1 > a4)
        {
          NS::SharedPtr<MTL::Texture>::operator=((void **)(*((void *)this + 25) + 8 * a4), (void **)(*((void *)this + 25) + 8 * v7 - 8));
          unint64_t v7 = *((void *)this + 23);
        }
        unint64_t v10 = *((void *)this + 25) + 8 * v7;
        uint64_t v50 = *(void **)(v10 - 8);
        if (v50)
        {

          *(void *)(v10 - 8) = 0;
          unint64_t v7 = *((void *)this + 23);
        }
        unint64_t v49 = v7 - 1;
        *((void *)this + 23) = v7 - 1;
        ++*((_DWORD *)this + 48);
      }
    }
    while (a4 < v49);
  }
  uint64_t result = *(void *)v63;
  if (*(void *)v63)
  {
    if (*(void *)&v65[2]) {
      return (*(uint64_t (**)(void))(**(void **)v63 + 40))();
    }
  }
  return result;
}

void re::DrawingManager::createRenderFrameWorkload(re::DrawingManager *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = mach_absolute_time();
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v15, 5079, (uint64_t)this);
  unint64_t v5 = (re::RenderFrame *)re::RenderFrameBox::get((uint64_t)this + 344, 0xFFFFFFFFFFFFFFFuLL);
  Workload = (re::ProfilerConfig *)re::RenderFrame::createWorkload(v5, a2);
  *(unsigned char *)(*a2 + 24) = *((unsigned char *)this + 793);
  uint64_t v7 = *((void *)this + 206);
  if (v7)
  {
    if (!*(unsigned char *)(v7 + 296))
    {
      uint64_t isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(Workload);
      if (isStatisticCollectionEnabled)
      {
        uint64_t v9 = re::profilerThreadContext(isStatisticCollectionEnabled);
        uint64_t v10 = mach_absolute_time();
        double v11 = *(int64x2_t **)(v9 + 152);
        if (v11)
        {
          uint64_t v12 = v11[372].u64[0];
          if (v12 >= v10 - v4) {
            uint64_t v12 = v10 - v4;
          }
          v11[372].i64[0] = v12;
          uint64_t v13 = v11[372].u64[1];
          if (v13 <= v10 - v4) {
            uint64_t v13 = v10 - v4;
          }
          v11[372].i64[1] = v13;
          int64x2_t v14 = vdupq_n_s64(1uLL);
          v14.i64[0] = v10 - v4;
          v11[373] = vaddq_s64(v11[373], v14);
          *(unsigned char *)(v9 + 184) = 0;
        }
      }
    }
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v15);
}

unint64_t re::DrawingManager::commitEmptyWorkload(re::DrawingManager *this)
{
  if (*((unsigned char *)this + 793))
  {
    uint64_t v2 = *((void *)this + 41);
    re::internal::AutoResetEvent::set((re::internal::AutoResetEvent *)(v2 + 320));
    re::RenderThread::waitForIdleInternal((re::RenderThread *)v2);
  }
  if (atomic_load((unsigned int *)this + 210))
  {
    int v4 = -30;
    do
    {
      __ns.__rep_ = 3000000;
      std::this_thread::sleep_for (&__ns);
      unsigned int v6 = atomic_load((unsigned int *)this + 210);
      ++v4;
    }
    while (v6);
    if (!v4)
    {
      uint64_t v7 = *re::graphicsLogObjects(v5);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_DEFAULT, "commitEmptyWorkload: failed to sync the callbacks", v12, 2u);
      }
    }
  }
  int v8 = *(re::FrameManager **)(*((void *)this + 32) + 136);
  uint64_t v9 = *((void *)v8 + 3) & 0xFFFFFFFFFFFFFFFLL;
  unint64_t v10 = v9 | ((unint64_t)*((void *)v8 + 2) << 60);
  atomic_fetch_add((atomic_uint *volatile)(re::FrameManager::getFrameRefCount(v8, v9) + 128), 1u);
  re::FrameManager::destructForFrameOnRenderThread((uint64_t)v8, v10);
  *(unsigned char *)(re::FrameManager::getFrameRefCount(v8, v9) + 81) = 1;
  unint64_t result = re::FrameManager::getFrameRefCount(v8, v9);
  atomic_fetch_add((atomic_uint *volatile)(result + 128), 0xFFFFFFFF);
  return result;
}

void re::DrawingManager::waitUntilScheduled(re::DrawingManager *this)
{
  if (*((unsigned char *)this + 793))
  {
    uint64_t v2 = *((void *)this + 41);
    re::internal::AutoResetEvent::set((re::internal::AutoResetEvent *)(v2 + 320));
    re::RenderThread::waitForIdleInternal((re::RenderThread *)v2);
  }
  if (atomic_load((unsigned int *)this + 211))
  {
    int v4 = -30;
    do
    {
      __ns.__rep_ = 3000000;
      std::this_thread::sleep_for (&__ns);
      unsigned int v6 = atomic_load((unsigned int *)this + 211);
      ++v4;
    }
    while (v6);
    if (!v4)
    {
      uint64_t v7 = *re::graphicsLogObjects(v5);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v8 = 0;
        _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_DEFAULT, "waitUntilScheduled: failed to sync", v8, 2u);
      }
    }
  }
}

void re::DrawingManager::commitFrameInternal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  if (!a3)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) NULL workload passed to RenderManager::commitFrameInternal", "workload", "commitFrameInternal", 2368);
    _os_crash();
    __break(1u);
  }
  int v4 = a2;
  uint64_t isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)a1);
  if (isStatisticCollectionEnabled
    && (uint64_t v7 = (re *)re::profilerThreadContext(isStatisticCollectionEnabled), *((void *)v7 + 9) == *((void *)v7 + 10)))
  {
    uint64_t v28 = (re::ProfilerThreadContext *)re::profilerThreadContext(v7);
    re::ProfilerThreadContext::begin(v28, *(re::ProfilerManager **)(a1 + 1664), 0);
    int v8 = 1;
  }
  else
  {
    int v8 = 0;
  }
  uint64_t v9 = mach_absolute_time();
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v49, 5081, a1);
  re::RenderGraphStats::registerNewFrame((unsigned int *)(a1 + 1624));
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = 0;
  double v47 = 0.0;
  char v48 = 0;
  if (*(unsigned char *)(a1 + 793))
  {
    unint64_t v10 = (uint64_t *)re::RenderFrameBox::get(a1 + 344, *(void *)(*(void *)(*(void *)(a1 + 256) + 136) + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(void *)(*(void *)(*(void *)(a1 + 256) + 136) + 16) << 60));
    re::DynamicArray<re::Pair<NS::SharedPtr<MTL::Event>,unsigned long long,true>>::operator=((uint64_t)(v10 + 389), a1 + 712);
    re::DynamicArray<re::RenderFrameEvent>::clear(a1 + 712);
    if (*(_DWORD *)(a1 + 640)) {
      uint64_t v11 = a1 + 648;
    }
    else {
      uint64_t v11 = *(void *)(a1 + 656);
    }
    uint64_t v12 = *(void *)(a1 + 632);
    uint64_t v50 = v11;
    uint64_t v51 = v12;
    re::DynamicOverflowArray<re::RenderFrameDelta *,5ul>::operator=((uint64_t)(v10 + 381), (uint64_t)&v50);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 624);
    uint64_t v13 = *(void *)(a1 + 1688);
    uint64_t v50 = *(void *)(a1 + 1704);
    uint64_t v51 = v13;
    re::FixedArray<re::RenderLayer>::operator=((_anonymous_namespace_ *)(v10 + 514), &v50);
    re::TextureManager::synchronizeTextures(*(os_unfair_lock_s **)(*(void *)(a1 + 256) + 64));
    re::MaterialManager::resolveArgumentBuffers(*(re::MaterialManager **)(*(void *)(a1 + 256) + 24));
    if (re::DrawingManager::shouldRenderProfilerNode((re::DrawingManager *)a1)
      && *(unsigned char *)(*(void *)(a1 + 1648) + 16))
    {
      re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(&v50);
      re::RenderFrame::emitGraph((re::RenderFrame *)v10, "ProfilerOverlay", "RenderFrame");
      uint64_t v45 = 65290051;
      re::RenderFrame::specifyScopeLane((re::RenderFrame *)v10, (const re::WeakStringID *)&v45, (const unsigned int *)(*(void *)(a1 + 1648) + 12), "ProfilerOverlay");
      re::ProfilerTimeGuard<(re::ProfilerStatistic)23>::end((uint64_t)&v50);
    }
    uint64_t v14 = 1;
    *(unsigned char *)(*(void *)(a1 + 1648) + 16) = 1;
    re::RenderFrame::buildOrRetainCachedGraph((re::RenderFrame *)v10, (re::RenderGraphStats *)(a1 + 1624));
    re::RenderGraphManager::deleteStaleGraphs(*(void **)(a1 + 296), *(void *)(*(void *)(*(void *)(a1 + 256) + 136) + 32) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(void *)(*(void *)(*(void *)(a1 + 256) + 136) + 16) << 60), v10[47]);
    re::RenderFrame::identifyUsedRenderLayers(v10);
    BOOL v15 = 1;
    if (!v10[51]) {
      BOOL v15 = *(void *)(a3 + 208) != 0;
    }
    *(unsigned char *)(a3 + 184) = v15;
    v16.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v16.__d_.__rep_;
    char v48 = 1;
    uint64_t v17 = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v16.__d_.__rep_);
    if (v17)
    {
      uint64_t v18 = re::profilerThreadContext(v17);
      if (*(void *)(v18 + 152)) {
        uint64_t v14 = mach_absolute_time();
      }
      re::RenderThread::commitFrame(*(void *)(a1 + 328), v4, (re::RenderFrameWorkload *)a3);
      if (*(void *)(v18 + 152))
      {
        uint64_t v29 = mach_absolute_time();
        id v30 = *(int64x2_t **)(v18 + 152);
        if (v30)
        {
          uint64_t v31 = v30[44].u64[0];
          if (v31 >= v29 - v14) {
            uint64_t v31 = v29 - v14;
          }
          v30[44].i64[0] = v31;
          uint64_t v32 = v30[44].u64[1];
          if (v32 <= v29 - v14) {
            uint64_t v32 = v29 - v14;
          }
          v30[44].i64[1] = v32;
          int64x2_t v33 = vdupq_n_s64(1uLL);
          v33.i64[0] = v29 - v14;
          v30[45] = vaddq_s64(v30[45], v33);
          *(unsigned char *)(v18 + 184) = 0;
        }
      }
    }
    else
    {
      re::RenderThread::commitFrame(*(void *)(a1 + 328), v4, (re::RenderFrameWorkload *)a3);
    }
    double v34 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v16.__d_.__rep_) / 1000000000.0 + 0.0;
    double v47 = v34;
    v35.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(double *)(a1 + 872) = v34 + (double)(v35.__d_.__rep_ - v16.__d_.__rep_) / 1000000000.0 * 0.0;
    uint64_t v36 = *(void *)(a1 + 1648);
    if (v36)
    {
      if (!*(unsigned char *)(v36 + 296))
      {
        v35.__d_.__rep_ = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v35.__d_.__rep_);
        if (LODWORD(v35.__d_.__rep_))
        {
          uint64_t v37 = re::profilerThreadContext((re *)v35.__d_.__rep_);
          v35.__d_.__rep_ = mach_absolute_time();
          id v38 = *(int64x2_t **)(v37 + 152);
          if (v38)
          {
            uint64_t v39 = v38[368].u64[0];
            if (v39 >= v35.__d_.__rep_ - v9) {
              uint64_t v39 = v35.__d_.__rep_ - v9;
            }
            v38[368].i64[0] = v39;
            uint64_t v40 = v38[368].u64[1];
            if (v40 <= v35.__d_.__rep_ - v9) {
              uint64_t v40 = v35.__d_.__rep_ - v9;
            }
            v38[368].i64[1] = v40;
            int64x2_t v41 = vdupq_n_s64(1uLL);
            v41.i64[0] = v35.__d_.__rep_ - v9;
            v38[369] = vaddq_s64(v38[369], v41);
            *(unsigned char *)(v37 + 184) = 0;
          }
        }
      }
    }
    if (v8)
    {
      uint64_t v27 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v35.__d_.__rep_);
      if (v27)
      {
LABEL_49:
        uint64_t v42 = (re::ProfilerThreadContext *)re::profilerThreadContext((re *)v27);
        re::ProfilerThreadContext::end(v42);
      }
    }
  }
  else
  {
    uint64_t v19 = operator new(0x28uLL);
    *(void *)uint64_t v19 = &unk_26E7117C0;
    long long v19[2] = v4;
    *((void *)v19 + 2) = &rep;
    *((void *)v19 + 3) = a3;
    *((void *)v19 + 4) = a1;
    uint64_t v52 = v19;
    re::runInLocalAutoreleasePool((uint64_t)&v50);
    uint64_t v20 = (re::ProfilerConfig *)std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](&v50);
    uint64_t v21 = *(void *)(a1 + 1648);
    if (v21)
    {
      if (!*(unsigned char *)(v21 + 296))
      {
        uint64_t v20 = (re::ProfilerConfig *)re::ProfilerConfig::isStatisticCollectionEnabled(v20);
        if (v20)
        {
          uint64_t v22 = re::profilerThreadContext(v20);
          uint64_t v20 = (re::ProfilerConfig *)mach_absolute_time();
          unint64_t v23 = *(int64x2_t **)(v22 + 152);
          if (v23)
          {
            uint64_t v24 = (char *)v23[368].i64[0];
            if (v24 >= (char *)v20 - v9) {
              uint64_t v24 = (char *)v20 - v9;
            }
            v23[368].i64[0] = (uint64_t)v24;
            char v25 = (char *)v23[368].i64[1];
            if (v25 <= (char *)v20 - v9) {
              char v25 = (char *)v20 - v9;
            }
            v23[368].i64[1] = (uint64_t)v25;
            int64x2_t v26 = vdupq_n_s64(1uLL);
            v26.i64[0] = (uint64_t)v20 - v9;
            v23[369] = vaddq_s64(v23[369], v26);
            *(unsigned char *)(v22 + 184) = 0;
          }
        }
      }
    }
    if (v8)
    {
      uint64_t v27 = re::ProfilerConfig::isStatisticCollectionEnabled(v20);
      if (v27) {
        goto LABEL_49;
      }
    }
  }
  unint64_t v43 = *(re **)(*(void *)(a1 + 256) + 136);
  uint64_t v44 = *((void *)v43 + 6);
  unint64_t v43 = (re *)((char *)v43 + 48);
  re::updateFrameCountCommon(v43, (unint64_t *)((v44 & 0xFFFFFFFFFFFFFFFLL) + 1), (uint64_t)"RenderFrameCount", 0);
  *((void *)v43 + 1) = *((void *)v43 - 3) & 0xFFFFFFFFFFFFFFFLL;
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v49);
}

void re::DrawingManager::commitQueuedCommandBuffers(re::DrawingManager *this)
{
  if (*((void *)this + 216))
  {
    uint64_t v2 = (char *)this + 1712;
    re::DrawingManager::finalizeCommandBuffers(this);
    uint64_t v3 = *((void *)this + 216);
    if (v3)
    {
      uint64_t v4 = *((void *)this + 218);
      uint64_t v5 = 24 * v3;
      unsigned int v6 = (id *)(v4 + 16);
      do
      {
        [*v6 commit];
        id v7 = *v6;
        *unsigned int v6 = 0;
        v6 += 3;

        v5 -= 24;
      }
      while (v5);
    }
    re::DynamicArray<re::CommandBuffer>::clear((uint64_t)v2);
  }
}

BOOL re::DrawingManager::renderFrameDeltasCanBeEnqueued(re::DrawingManager *this)
{
  if (!*((unsigned char *)this + 792)) {
    return *((unsigned char *)this + 1768) != 0;
  }
  uint64_t v2 = (_opaque_pthread_t **)*((void *)this + 41);
  if (v2)
  {
    pthread_t v3 = pthread_self();
    uint64_t v4 = *v2;
    if (v3)
    {
      if (v4) {
        BOOL v5 = v3 == v4;
      }
      else {
        BOOL v5 = 0;
      }
      if (!v5) {
        return 1;
      }
      return *((unsigned char *)this + 1768) != 0;
    }
    if (!v4) {
      return *((unsigned char *)this + 1768) != 0;
    }
  }
  return 1;
}

void re::DrawingManager::addFrameBeganSignal(uint64_t a1, id *a2, void *a3)
{
  uint64_t v4 = (void *)(a1 + 712);
  v5[0] = *a2;
  v5[1] = a3;
  re::DynamicArray<re::ecs2::HandleTable::HandleSlot>::add(v4, v5);
  if (v5[0]) {
}
  }

BOOL re::DrawingManager::didExceedFlywheelThresholdFrameCount_115383182(re::DrawingManager *this)
{
  uint64_t v1 = &unk_2687A0000;
  {
    id v7 = this;
    uint64_t v1 = (void *)&unk_2687A0000;
    int v5 = v3;
    this = v7;
    if (v5)
    {
      re::Defaults::uint64Value((re::Defaults *)"flywheelFrameCountThreshold", v4, (uint64_t)v8);
      uint64_t v6 = v9;
      if (!v8[0]) {
        uint64_t v6 = 6;
      }
      re::DrawingManager::didExceedFlywheelThresholdFrameCount_115383182(void)::kFlywheelFrameCountThreshold = v6;
      uint64_t v1 = (void *)&unk_2687A0000;
      this = v7;
    }
  }
  return (*(void *)(*(void *)(*((void *)this + 32) + 136) + 24) & 0xFFFFFFFFFFFFFFFLL)
       - (*(void *)(*(void *)(*((void *)this + 32) + 136) + 56) & 0xFFFFFFFFFFFFFFFuLL) > v1[99];
}

void re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_0,void ()(void)>::~Callable()
{
}

void re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_0,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v1 + 793))
  {
    uint64_t v2 = *(void *)(v1 + 328);
    re::internal::AutoResetEvent::set((re::internal::AutoResetEvent *)(v2 + 320));
    re::RenderThread::waitForIdleInternal((re::RenderThread *)v2);
  }
}

void *re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_0,void ()(void)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E711250;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_0,void ()(void)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E711250;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_0,void ()(void)>::size()
{
  return 16;
}

void re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_1,void ()(re::FrameCount)>::~Callable()
{
}

uint64_t re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_1,void ()(re::FrameCount)>::operator()(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8) + 344;
  uint64_t v3 = *a2 & 0xFFFFFFFFFFFFFFFLL;
  uint64_t v4 = *a2 & 7;
  uint64_t v5 = *(void *)(v2 + 16 * v4 + 8) & 0xFFFFFFFFFFFFFFFLL;
  if (v5 == 0xFFFFFFFFFFFFFFFLL)
  {
    if (v3 != 0xFFFFFFFFFFFFFFFLL) {
      return result;
    }
    goto LABEL_9;
  }
  if (v3 != 0xFFFFFFFFFFFFFFFLL && v5 == v3)
  {
LABEL_9:
    unint64_t result = *(void *)(v2 + 16 * v4);
    if (result) {
      return re::RenderFrame::onFrameComplete(result);
    }
  }
  return result;
}

void *re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_1,void ()(re::FrameCount)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E7112A8;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_1,void ()(re::FrameCount)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E7112A8;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_1,void ()(re::FrameCount)>::size()
{
  return 16;
}

void re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_2,void ()(re::FrameCount)>::~Callable()
{
}

void re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_2,void ()(re::FrameCount)>::operator()(uint64_t a1, unint64_t *a2)
{
  unint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  re::PerFrameAllocatorGPUManager::freeAllocatorsForFrame(*(re **)(v3 + 336), *a2);
  uint64_t v4 = *(void *)(*(void *)(v3 + 296) + 296);
  re::RenderGraphPersistentResourceManager::pruneExpiredData(v4, v2);
}

void *re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_2,void ()(re::FrameCount)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E711300;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_2,void ()(re::FrameCount)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E711300;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_2,void ()(re::FrameCount)>::size()
{
  return 16;
}

void re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_3,void ()(void)>::~Callable()
{
}

void re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_3,void ()(void)>::operator()(re *a1, uint64_t a2)
{
  uint64_t v2 = *((void *)a1 + 1);
  if (*(unsigned char *)(v2 + 794)) {
    a1 = (re *)[*(id *)(v2 + 280) dispatchAvailableCompletionNotifications];
  }
  int v3 = *(unsigned __int8 *)(v2 + 793);
  if (*(unsigned __int8 *)(v2 + 792) != v3)
  {
    if (*(unsigned char *)(v2 + 792)) {
      BOOL v4 = v3 == 0;
    }
    else {
      BOOL v4 = 0;
    }
    if (v4)
    {
      id v7 = re::globalAllocators(a1);
      int v8 = (re::RenderThread *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[2] + 32))(v7[2], 440, 8);
      re::RenderThread::RenderThread(v8);
      *(void *)(v2 + 328) = v9;
      re::RenderThread::init(v9, *(re::RenderManager **)(v2 + 256));
    }
    else
    {
      uint64_t v5 = *(void *)(v2 + 328);
      if (!v5)
      {
        re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) RenderThread was disabled or not initialized", "m_renderThread != nullptr", "operator()", 237);
        _os_crash();
        __break(1u);
        return;
      }
      re::internal::AutoResetEvent::set((re::internal::AutoResetEvent *)(v5 + 320));
      re::RenderThread::waitForIdleInternal((re::RenderThread *)v5);
      re::RenderThread::waitForCallbacksCompletion(*(re::RenderThread **)(v2 + 328));
      uint64_t v6 = *(void *)(v2 + 328);
      if (*(unsigned char *)(v6 + 16))
      {
        re::RenderThread::join(*(re::RenderThread **)(v2 + 328));
        *(void *)(v6 + 8) = 0;
        *(unsigned char *)(v6 + 16) = 0;
        uint64_t v6 = *(void *)(v2 + 328);
      }
      re::internal::destroyPersistent<re::RenderThread>((re *)v6);
      *(void *)(v2 + 328) = 0;
    }
    *(unsigned char *)(v2 + 793) = *(unsigned char *)(v2 + 792);
  }
  uint64_t v10 = *(void *)(v2 + 256);
  uint64_t v11 = *(re::MaterialManager **)(v10 + 24);
  if (v11)
  {
    re::MaterialManager::startFrame(v11);
    uint64_t v10 = *(void *)(v2 + 256);
  }
  *(void *)(*(void *)(v2 + 304) + 8) = *(void *)(*(void *)(v10 + 136) + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(void *)(*(void *)(v10 + 136) + 16) << 60);
}

void *re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_3,void ()(void)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E711358;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_3,void ()(void)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E711358;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_3,void ()(void)>::size()
{
  return 16;
}

void re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_4,void ()(re::GpuTimingData const&)>::~Callable()
{
}

float re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_4,void ()(re::GpuTimingData const&)>::operator()(uint64_t a1, double *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(unsigned char *)(*(void *)(v2 + 256) + 269))
  {
    uint64_t v3 = *(void *)(v2 + 1648);
    if (v3)
    {
      float result = *a2;
      *(float *)(v3 + 232) = result;
    }
  }
  return result;
}

void *re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_4,void ()(re::GpuTimingData const&)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E7113B0;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_4,void ()(re::GpuTimingData const&)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E7113B0;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::DrawingManager::init(re::RenderManager *,re::ProfilerManager *,re::ColorManager *)::$_4,void ()(re::GpuTimingData const&)>::size()
{
  return 16;
}

re::FrameContext *re::FrameContext::FrameContext(re::FrameContext *this, re::Allocator *a2)
{
  *(void *)this = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0xFFFFFFFFFFFFFFFLL;
  *((void *)this + 27) = 0;
  *((void *)this + 28) = 0;
  *((void *)this + 26) = 0;
  *((unsigned char *)this + 232) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 84) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_DWORD *)this + 50) = 0;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  re::TextureTableImpl<NS::SharedPtr<MTL::Texture>>::TextureTableImpl((uint64_t)this + 368, (uint64_t)a2, 1u);
  *((void *)this + 46) = &unk_26E710940;
  re::BufferTable::BufferTable((re::FrameContext *)((char *)this + 480), a2, 1u);
  return this;
}

uint64_t re::TextureTableImpl<NS::SharedPtr<MTL::Texture>>::TextureTableImpl(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(void *)a1 = &unk_26E7109B0;
  unint64_t v5 = a3;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::init((void *)(a1 + 8), a2, a3);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = a2;
  re::DynamicArray<re::TextureViews<NS::SharedPtr<MTL::Texture>>>::setCapacity((void *)(a1 + 72), v5);
  ++*(_DWORD *)(a1 + 96);
  return a1;
}

re::BufferTable *re::BufferTable::BufferTable(re::BufferTable *this, re::Allocator *a2, unsigned int a3)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  unint64_t v5 = a3;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::init(this, (uint64_t)a2, a3);
  *((void *)this + 12) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((_DWORD *)this + 22) = 0;
  *((void *)this + 8) = a2;
  re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)this + 8, v5);
  ++*((_DWORD *)this + 22);
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 13) = 0;
  *((_DWORD *)this + 32) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 18) = 0;
  *((_DWORD *)this + 40) = 1;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 21) = 0;
  *((_DWORD *)this + 48) = 0;
  re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::init((uint64_t)this + 144, (uint64_t)a2, v5);
  *((void *)this + 29) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  *((_DWORD *)this + 56) = 0;
  *((void *)this + 25) = a2;
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((void *)this + 25, v5);
  ++*((_DWORD *)this + 56);
  *((void *)this + 34) = 0;
  *((void *)this + 31) = 0;
  *((void *)this + 32) = 0;
  *((_DWORD *)this + 66) = 0;
  *((void *)this + 30) = a2;
  re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity((void *)this + 30, v5);
  ++*((_DWORD *)this + 66);
  *((_DWORD *)this + 70) = 0;
  return this;
}

void re::internal::Callable<re::DrawingManager::executeFrameInternal(re::RenderFrameWorkload *)::$_0,void ()(re::mtl::CommandBuffer const&)>::~Callable()
{
}

void re::internal::Callable<re::DrawingManager::executeFrameInternal(re::RenderFrameWorkload *)::$_0,void ()(re::mtl::CommandBuffer const&)>::operator()(uint64_t a1, id *a2)
{
  id v4 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  re::RenderFrameWorkload::scheduled(*(atomic_uchar **)(a1 + 16));
  atomic_fetch_add((atomic_uint *volatile)(v3 + 844), 0xFFFFFFFF);
}

uint64_t re::internal::Callable<re::DrawingManager::executeFrameInternal(re::RenderFrameWorkload *)::$_0,void ()(re::mtl::CommandBuffer const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E711418;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::DrawingManager::executeFrameInternal(re::RenderFrameWorkload *)::$_0,void ()(re::mtl::CommandBuffer const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E711418;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::DrawingManager::executeFrameInternal(re::RenderFrameWorkload *)::$_0,void ()(re::mtl::CommandBuffer const&)>::size()
{
  return 24;
}

void re::internal::Callable<re::DrawingManager::executeFrameInternal(re::RenderFrameWorkload *)::$_1,void ()(re::mtl::CommandBuffer const&)>::~Callable()
{
}

void re::internal::Callable<re::DrawingManager::executeFrameInternal(re::RenderFrameWorkload *)::$_1,void ()(re::mtl::CommandBuffer const&)>::operator()(uint64_t a1, id *a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 8);
  re::RenderFrameWorkload::completed(*(atomic_uchar **)(a1 + 24));
  unint64_t v5 = (re *)[*a2 status];
  if (v5 == 5)
  {
    re::mtl::CommandBuffer::error(a2, &v15);
    id v7 = *re::graphicsLogObjects(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = (int)[*a2 status];
      id v14 = v15;
      *(_DWORD *)__n128 buf = 134218242;
      *(void *)&buf[4] = v13;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v14;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Command buffer did not complete (status = %zu, error = %@)", buf, 0x16u);
    }
  }
  int v8 = *(re::FrameManager **)(*(void *)(v4 + 256) + 136);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = re::globalAllocators(v5)[2];
  *(void *)&uint8_t buf[16] = v4;
  uint64_t v17 = v11;
  *(void *)__n128 buf = &unk_26E7114C8;
  *(void *)&buf[8] = v10;
  uint64_t v18 = buf;
  re::FrameManager::tryExecuteCallbackWithAllocatedFrame(v8, v9, (uint64_t)buf);
  re::FunctionBase<24ul,void ()(unsigned long long)>::destroyCallable((uint64_t)buf);
  uint64_t v12 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v12 + 24))
  {
    re::RenderThread::workloadGPUCompleted(*(re::RenderThread **)(v4 + 328));
    uint64_t v12 = *(void *)(a1 + 24);
  }

  atomic_fetch_add((atomic_uint *volatile)(v4 + 840), 0xFFFFFFFF);
  if (!*(unsigned char *)(v4 + 794)) {
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v4 + 800));
  }
}

uint64_t re::internal::Callable<re::DrawingManager::executeFrameInternal(re::RenderFrameWorkload *)::$_1,void ()(re::mtl::CommandBuffer const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E711470;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::DrawingManager::executeFrameInternal(re::RenderFrameWorkload *)::$_1,void ()(re::mtl::CommandBuffer const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E711470;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::DrawingManager::executeFrameInternal(re::RenderFrameWorkload *)::$_1,void ()(re::mtl::CommandBuffer const&)>::size()
{
  return 32;
}

void re::internal::Callable<re::DrawingManager::executeFrameInternal(re::RenderFrameWorkload *)::$_1::operator() const(re::mtl::CommandBuffer const&)::{lambda(unsigned long long)#1},void ()(unsigned long long)>::~Callable()
{
}

unint64_t re::internal::Callable<re::DrawingManager::executeFrameInternal(re::RenderFrameWorkload *)::$_1::operator() const(re::mtl::CommandBuffer const&)::{lambda(unsigned long long)#1},void ()(unsigned long long)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 40) & 0xFFFFFFFFFFFFFFFLL;
  uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 40) & 7;
  uint64_t v6 = *(void *)(v3 + 344 + 16 * v5 + 8) & 0xFFFFFFFFFFFFFFFLL;
  if (v6 == 0xFFFFFFFFFFFFFFFLL)
  {
    if (v4 != 0xFFFFFFFFFFFFFFFLL) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  if (v4 != 0xFFFFFFFFFFFFFFFLL && v6 == v4)
  {
LABEL_9:
    int v8 = *(std::mutex **)(v3 + 344 + 16 * v5);
    if (v8) {
      re::RenderFrame::onCommandBuffersComplete(v8);
    }
  }
LABEL_11:
  unint64_t result = re::FrameManager::getFrameRefCount(*(re::FrameManager **)(*(void *)(v3 + 256) + 136), v2);
  atomic_fetch_add((atomic_uint *volatile)(result + 128), 0xFFFFFFFF);
  return result;
}

uint64_t re::internal::Callable<re::DrawingManager::executeFrameInternal(re::RenderFrameWorkload *)::$_1::operator() const(re::mtl::CommandBuffer const&)::{lambda(unsigned long long)#1},void ()(unsigned long long)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7114C8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::DrawingManager::executeFrameInternal(re::RenderFrameWorkload *)::$_1::operator() const(re::mtl::CommandBuffer const&)::{lambda(unsigned long long)#1},void ()(unsigned long long)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7114C8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::DrawingManager::executeFrameInternal(re::RenderFrameWorkload *)::$_1::operator() const(re::mtl::CommandBuffer const&)::{lambda(unsigned long long)#1},void ()(unsigned long long)>::size()
{
  return 24;
}

void _ZN2re8internal8CallableIZZNS_14DrawingManager20executeFrameInternalEPNS_19RenderFrameWorkloadEEUb_E3__7FvyEJEED0Ev()
{
}

void _ZNK2re8internal8CallableIZZNS_14DrawingManager20executeFrameInternalEPNS_19RenderFrameWorkloadEEUb_E3__7FvyEJEEclEOy(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8) + 344;
  uint64_t v3 = *a2 & 0xFFFFFFFFFFFFFFFLL;
  uint64_t v4 = *a2 & 7;
  uint64_t v5 = *(void *)(v2 + 16 * v4 + 8) & 0xFFFFFFFFFFFFFFFLL;
  if (v5 == 0xFFFFFFFFFFFFFFFLL)
  {
    if (v3 != 0xFFFFFFFFFFFFFFFLL) {
      return;
    }
    goto LABEL_9;
  }
  if (v3 != 0xFFFFFFFFFFFFFFFLL && v5 == v3)
  {
LABEL_9:
    id v7 = *(std::mutex **)(v2 + 16 * v4);
    if (v7) {
      re::RenderFrame::onCommandBuffersComplete(v7);
    }
  }
}

void *_ZNK2re8internal8CallableIZZNS_14DrawingManager20executeFrameInternalEPNS_19RenderFrameWorkloadEEUb_E3__7FvyEJEE9cloneIntoEPv(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E711520;
  a2[1] = v2;
  return a2;
}

void *_ZN2re8internal8CallableIZZNS_14DrawingManager20executeFrameInternalEPNS_19RenderFrameWorkloadEEUb_E3__7FvyEJEE8moveIntoEPv(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E711520;
  a2[1] = v2;
  return a2;
}

uint64_t _ZNK2re8internal8CallableIZZNS_14DrawingManager20executeFrameInternalEPNS_19RenderFrameWorkloadEEUb_E3__7FvyEJEE4sizeEv()
{
  return 16;
}

void re::internal::Callable<re::DrawingManager::activatePerfSampling(void)::$_0,void ()(re::PerfMTLCounterSamplerResult)>::~Callable()
{
}

void re::internal::Callable<re::DrawingManager::activatePerfSampling(void)::$_0,void ()(re::PerfMTLCounterSamplerResult)>::operator()(re::ProfilerConfig *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  unint64_t v2 = a2[1];
  unint64_t v4 = a2[2];
  uint64_t v5 = *((void *)a1 + 1);
  uint64_t isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(a1);
  if (isStatisticCollectionEnabled)
  {
    id v7 = (re::ProfilerThreadContext *)re::profilerThreadContext(isStatisticCollectionEnabled);
    re::ProfilerThreadContext::begin(v7, *(re::ProfilerManager **)(v5 + 1664), 0);
  }
  uint64_t v8 = re::ProfilerConfig::isStatisticCollectionEnabled(isStatisticCollectionEnabled);
  if (v8)
  {
    uint64_t v8 = re::profilerThreadContext((re *)v8);
    uint64_t v9 = *(int64x2_t **)(v8 + 152);
    if (v9)
    {
      unint64_t v10 = (unint64_t)(float)((float)v3 * 1000000.0);
      unint64_t v11 = v9[120].u64[0];
      if (v11 >= v10) {
        unint64_t v11 = (unint64_t)(float)((float)v3 * 1000000.0);
      }
      v9[120].i64[0] = v11;
      unint64_t v12 = v9[120].u64[1];
      if (v12 <= v10) {
        unint64_t v12 = (unint64_t)(float)((float)v3 * 1000000.0);
      }
      v9[120].i64[1] = v12;
      int64x2_t v13 = vdupq_n_s64(1uLL);
      v13.i64[0] = (unint64_t)(float)((float)v3 * 1000000.0);
      v9[121] = vaddq_s64(v9[121], v13);
      *(unsigned char *)(v8 + 184) = 0;
    }
  }
  uint64_t v14 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v8);
  if (v14)
  {
    uint64_t v14 = re::profilerThreadContext((re *)v14);
    id v15 = *(int64x2_t **)(v14 + 152);
    if (v15)
    {
      unint64_t v16 = (unint64_t)(float)((float)v2 * 1000000.0);
      unint64_t v17 = v15[124].u64[0];
      if (v17 >= v16) {
        unint64_t v17 = (unint64_t)(float)((float)v2 * 1000000.0);
      }
      v15[124].i64[0] = v17;
      unint64_t v18 = v15[124].u64[1];
      if (v18 <= v16) {
        unint64_t v18 = (unint64_t)(float)((float)v2 * 1000000.0);
      }
      v15[124].i64[1] = v18;
      int64x2_t v19 = vdupq_n_s64(1uLL);
      v19.i64[0] = (unint64_t)(float)((float)v2 * 1000000.0);
      v15[125] = vaddq_s64(v15[125], v19);
      *(unsigned char *)(v14 + 184) = 0;
    }
  }
  uint64_t v20 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v14);
  if (v20)
  {
    uint64_t v20 = re::profilerThreadContext((re *)v20);
    uint64_t v21 = *(int64x2_t **)(v20 + 152);
    if (v21)
    {
      unint64_t v22 = (unint64_t)(float)((float)v4 * 1000000.0);
      unint64_t v23 = v21[128].u64[0];
      if (v23 >= v22) {
        unint64_t v23 = (unint64_t)(float)((float)v4 * 1000000.0);
      }
      v21[128].i64[0] = v23;
      unint64_t v24 = v21[128].u64[1];
      if (v24 <= v22) {
        unint64_t v24 = (unint64_t)(float)((float)v4 * 1000000.0);
      }
      v21[128].i64[1] = v24;
      int64x2_t v25 = vdupq_n_s64(1uLL);
      v25.i64[0] = (unint64_t)(float)((float)v4 * 1000000.0);
      v21[129] = vaddq_s64(v21[129], v25);
      *(unsigned char *)(v20 + 184) = 0;
    }
  }
  int64x2_t v26 = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v20);
  if (v26)
  {
    uint64_t v27 = (re::ProfilerThreadContext *)re::profilerThreadContext(v26);
    re::ProfilerThreadContext::end(v27);
  }
}

void *re::internal::Callable<re::DrawingManager::activatePerfSampling(void)::$_0,void ()(re::PerfMTLCounterSamplerResult)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E711578;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<re::DrawingManager::activatePerfSampling(void)::$_0,void ()(re::PerfMTLCounterSamplerResult)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E711578;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::DrawingManager::activatePerfSampling(void)::$_0,void ()(re::PerfMTLCounterSamplerResult)>::size()
{
  return 16;
}

void re::internal::Callable<re::DrawingManager::activatePerfSampling(void)::$_1,void ()(re::PerfMTLCounterSamplerResult)>::~Callable()
{
}

void re::internal::Callable<re::DrawingManager::activatePerfSampling(void)::$_1,void ()(re::PerfMTLCounterSamplerResult)>::operator()(re::ProfilerConfig *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *((void *)a1 + 1);
  uint64_t isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(a1);
  if (isStatisticCollectionEnabled)
  {
    uint64_t v5 = (re::ProfilerThreadContext *)re::profilerThreadContext(isStatisticCollectionEnabled);
    re::ProfilerThreadContext::begin(v5, *(re::ProfilerManager **)(v3 + 1664), 0);
  }
  uint64_t v6 = re::ProfilerConfig::isStatisticCollectionEnabled(isStatisticCollectionEnabled);
  if (v6)
  {
    uint64_t v6 = re::profilerThreadContext((re *)v6);
    id v7 = *(int64x2_t **)(v6 + 152);
    if (v7)
    {
      unint64_t v8 = (unint64_t)(float)((float)v2 * 1000000.0);
      unint64_t v9 = v7[132].u64[0];
      if (v9 >= v8) {
        unint64_t v9 = (unint64_t)(float)((float)v2 * 1000000.0);
      }
      v7[132].i64[0] = v9;
      unint64_t v10 = v7[132].u64[1];
      if (v10 <= v8) {
        unint64_t v10 = (unint64_t)(float)((float)v2 * 1000000.0);
      }
      v7[132].i64[1] = v10;
      int64x2_t v11 = vdupq_n_s64(1uLL);
      v11.i64[0] = (unint64_t)(float)((float)v2 * 1000000.0);
      v7[133] = vaddq_s64(v7[133], v11);
      *(unsigned char *)(v6 + 184) = 0;
    }
  }
  unint64_t v12 = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v6);
  if (v12)
  {
    int64x2_t v13 = (re::ProfilerThreadContext *)re::profilerThreadContext(v12);
    re::ProfilerThreadContext::end(v13);
  }
}

void *re::internal::Callable<re::DrawingManager::activatePerfSampling(void)::$_1,void ()(re::PerfMTLCounterSamplerResult)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E7115E0;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<re::DrawingManager::activatePerfSampling(void)::$_1,void ()(re::PerfMTLCounterSamplerResult)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E7115E0;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::DrawingManager::activatePerfSampling(void)::$_1,void ()(re::PerfMTLCounterSamplerResult)>::size()
{
  return 16;
}

void *re::internal::MoveOnlyCallable<re::DrawingManager::reloadLibrary(char const*,char const*)::$_0,void ()(void)>::~MoveOnlyCallable(void *a1)
{
  *a1 = &unk_26E711638;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 6));
  re::DynamicString::deinit((re::DynamicString *)(a1 + 2));
  return a1;
}

void re::internal::MoveOnlyCallable<re::DrawingManager::reloadLibrary(char const*,char const*)::$_0,void ()(void)>::~MoveOnlyCallable(void *a1)
{
  *a1 = &unk_26E711638;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 6));
  re::DynamicString::deinit((re::DynamicString *)(a1 + 2));
  JUMPOUT(0x237DBCBD0);
}

uint64_t *re::internal::MoveOnlyCallable<re::DrawingManager::reloadLibrary(char const*,char const*)::$_0,void ()(void)>::operator()(uint64_t a1)
{
  return re::DrawingManager::removeInvalidPipelineStates(*(re::DrawingManager **)(a1 + 8));
}

uint64_t re::internal::MoveOnlyCallable<re::DrawingManager::reloadLibrary(char const*,char const*)::$_0,void ()(void)>::moveInto(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  *(void *)a2 = &unk_26E711638;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(void *)(a2 + 40) = a1[5];
  uint64_t v3 = a1[3];
  *(void *)(a2 + 16) = a1[2];
  a1[2] = 0;
  uint64_t v4 = a1[4];
  a1[5] = 0;
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = v4;
  a1[3] = v6;
  a1[4] = v5;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(void *)(a2 + 72) = a1[9];
  uint64_t v7 = a1[7];
  *(void *)(a2 + 48) = a1[6];
  a1[6] = 0;
  uint64_t v8 = a1[8];
  a1[9] = 0;
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v9 = *(void *)(a2 + 64);
  *(void *)(a2 + 56) = v7;
  *(void *)(a2 + 64) = v8;
  a1[7] = v10;
  a1[8] = v9;
  return a2;
}

uint64_t re::internal::MoveOnlyCallable<re::DrawingManager::reloadLibrary(char const*,char const*)::$_0,void ()(void)>::size()
{
  return 80;
}

void re::internal::Callable<re::RenderFrameBox::get(re::FrameCount)::$_0,void ()(void *)>::~Callable()
{
}

void re::internal::Callable<re::RenderFrameBox::get(re::FrameCount)::$_0,void ()(void *)>::operator()(uint64_t a1, re::RenderFrame **a2)
{
}

void *re::internal::Callable<re::RenderFrameBox::get(re::FrameCount)::$_0,void ()(void *)>::cloneInto(uint64_t a1, void *a2)
{
  unint64_t result = a2;
  *a2 = &unk_26E711688;
  return result;
}

void *re::internal::Callable<re::RenderFrameBox::get(re::FrameCount)::$_0,void ()(void *)>::moveInto(uint64_t a1, void *a2)
{
  unint64_t result = a2;
  *a2 = &unk_26E711688;
  return result;
}

uint64_t re::internal::Callable<re::RenderFrameBox::get(re::FrameCount)::$_0,void ()(void *)>::size()
{
  return 16;
}

void re::internal::Callable<re::DrawingManager::sendGPUStatsToFrameProfiler(void)::$_0,void ()(re::GpuTimingData const&)>::~Callable()
{
}

void re::internal::Callable<re::DrawingManager::sendGPUStatsToFrameProfiler(void)::$_0,void ()(re::GpuTimingData const&)>::operator()(re::ProfilerConfig *a1, double *a2)
{
  uint64_t v3 = *((void *)a1 + 1);
  uint64_t isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(a1);
  if (isStatisticCollectionEnabled)
  {
    uint64_t v5 = (re::ProfilerThreadContext *)re::profilerThreadContext(isStatisticCollectionEnabled);
    re::ProfilerThreadContext::begin(v5, *(re::ProfilerManager **)(v3 + 1664), 0);
  }
  uint64_t v6 = re::ProfilerConfig::isStatisticCollectionEnabled(isStatisticCollectionEnabled);
  if (v6)
  {
    uint64_t v6 = re::profilerThreadContext((re *)v6);
    uint64_t v7 = *(int64x2_t **)(v6 + 152);
    if (v7)
    {
      unint64_t v8 = (unint64_t)(*a2 * 1000000.0);
      unint64_t v9 = v7[100].u64[0];
      if (v9 >= v8) {
        unint64_t v9 = (unint64_t)(*a2 * 1000000.0);
      }
      v7[100].i64[0] = v9;
      unint64_t v10 = v7[100].u64[1];
      if (v10 <= v8) {
        unint64_t v10 = v8;
      }
      v7[100].i64[1] = v10;
      int64x2_t v11 = vdupq_n_s64(1uLL);
      v11.i64[0] = v8;
      v7[101] = vaddq_s64(v7[101], v11);
      *(unsigned char *)(v6 + 184) = 0;
    }
  }
  unint64_t v12 = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v6);
  if (v12)
  {
    int64x2_t v13 = (re::ProfilerThreadContext *)re::profilerThreadContext(v12);
    re::ProfilerThreadContext::end(v13);
  }
}

void *re::internal::Callable<re::DrawingManager::sendGPUStatsToFrameProfiler(void)::$_0,void ()(re::GpuTimingData const&)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E7116E0;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<re::DrawingManager::sendGPUStatsToFrameProfiler(void)::$_0,void ()(re::GpuTimingData const&)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E7116E0;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::DrawingManager::sendGPUStatsToFrameProfiler(void)::$_0,void ()(re::GpuTimingData const&)>::size()
{
  return 16;
}

uint64_t re::DynamicArray<re::CommandBuffer>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 24 * v4;
        uint64_t v6 = (void **)(v3 + 16);
        do
        {
          uint64_t v7 = *v6;
          v6 += 3;

          v5 -= 24;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::ProfilerTimeGuard<(re::ProfilerStatistic)12>::end(uint64_t result)
{
  if (*(void *)result && *(void *)(*(void *)result + 152))
  {
    uint64_t v1 = (void *)result;
    uint64_t result = mach_absolute_time();
    uint64_t v2 = *v1;
    uint64_t v3 = *(int64x2_t **)(*v1 + 152);
    if (v3)
    {
      uint64_t v4 = result - v1[1];
      uint64_t v5 = v3[52].u64[0];
      if (v5 >= v4) {
        uint64_t v5 = result - v1[1];
      }
      v3[52].i64[0] = v5;
      unint64_t v6 = v3[52].u64[1];
      if (v6 <= v4) {
        unint64_t v6 = v4;
      }
      v3[52].i64[1] = v6;
      int64x2_t v7 = vdupq_n_s64(1uLL);
      v7.i64[0] = v4;
      v3[53] = vaddq_s64(v3[53], v7);
      *(unsigned char *)(v2 + 184) = 0;
    }
    void *v1 = 0;
  }
  return result;
}

void *re::DynamicArray<re::CommandBuffer>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::CommandBuffer>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::CommandBuffer>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::CommandBuffer>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::CommandBuffer>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x18uLL))
        {
          uint64_t v2 = 24 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 24 * v9;
        int64x2_t v11 = v7;
        do
        {
          *(_OWORD *)int64x2_t v11 = *(_OWORD *)v8;
          uint64_t v12 = *(void *)(v8 + 16);
          *(void *)(v8 + 16) = 0;
          _OWORD v11[2] = v12;

          v8 += 24;
          v11 += 3;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::RendererGlobals::~RendererGlobals(re::RendererGlobals *this)
{
}

void *re::DynamicArray<re::PipelineStateCacheKey>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (*v5)
      {
        if (!a2)
        {
          unint64_t v7 = 0;
          if (!v3) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x48uLL))
        {
          uint64_t v2 = 72 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 72 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 72 * v5[2]);
            uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 72, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
      }
      else
      {
        uint64_t result = (void *)re::DynamicArray<re::PipelineStateCacheKey>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

void *re::DynamicArray<re::RenderLayer>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::RenderLayer>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 59)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 32, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 32 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_20;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 32 * v9;
        int64x2_t v11 = (char *)v7 + 12;
        uint64_t v12 = v8 + 12;
        do
        {
          uint64_t v14 = v12 - 12;
          uint64_t v13 = *(void *)(v12 - 12);
          *(void *)(v12 - 12) = 0;
          *(void *)(v11 - 12) = v13;
          LODWORD(v13) = *(unsigned __int8 *)(v12 - 4);
          *(v11 - 4) = v13;
          if (v13) {
            *(void *)int64x2_t v11 = *(void *)v12;
          }
          int v15 = *(unsigned __int8 *)(v12 + 8);
          v11[8] = v15;
          if (v15) {
            *((_DWORD *)v11 + 3) = *(_DWORD *)(v12 + 12);
          }

          v11 += 32;
          v12 += 32;
        }
        while (v14 + 32 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

double re::make::shared::object<re::RenderFrameSettings>@<D0>(re *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = re::globalAllocators(a1);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 144, 8);
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v4, 0);
  *(void *)uint64_t v4 = &unk_26E711778;
  *(_DWORD *)(v4 + 24) = 0;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 48) = 0;
  *(void *)(v4 + 72) = 0;
  *(void *)(v4 + 80) = 0;
  *(void *)(v4 + 64) = 0;
  *(_DWORD *)(v4 + 88) = 0;
  *(void *)(v4 + 136) = 0;
  double result = 0.0;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_DWORD *)(v4 + 128) = 0;
  *a2 = v4;
  return result;
}

void re::RenderFrameSettings::~RenderFrameSettings(re::RenderFrameSettings *this)
{
  *(void *)this = &unk_26E711778;
  re::DynamicArray<re::BufferSlice>::deinit((uint64_t)this + 104);
  re::DynamicArray<re::BufferSlice>::deinit((uint64_t)this + 64);
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {

    *((void *)this + 6) = 0;
  }
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {

    *((void *)this + 4) = 0;
  }
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_26E711778;
  re::DynamicArray<re::BufferSlice>::deinit((uint64_t)this + 104);
  re::DynamicArray<re::BufferSlice>::deinit((uint64_t)this + 64);
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {

    *((void *)this + 6) = 0;
  }
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {

    *((void *)this + 4) = 0;
  }
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ProfilerTimeGuard<(re::ProfilerStatistic)23>::end(uint64_t result)
{
  if (*(void *)result && *(void *)(*(void *)result + 152))
  {
    uint64_t v1 = (void *)result;
    double result = mach_absolute_time();
    uint64_t v2 = *v1;
    uint64_t v3 = *(int64x2_t **)(*v1 + 152);
    if (v3)
    {
      uint64_t v4 = result - v1[1];
      uint64_t v5 = v3[96].u64[0];
      if (v5 >= v4) {
        uint64_t v5 = result - v1[1];
      }
      v3[96].i64[0] = v5;
      unint64_t v6 = v3[96].u64[1];
      if (v6 <= v4) {
        unint64_t v6 = v4;
      }
      v3[96].i64[1] = v6;
      int64x2_t v7 = vdupq_n_s64(1uLL);
      v7.i64[0] = v4;
      v3[97] = vaddq_s64(v3[97], v7);
      *(unsigned char *)(v2 + 184) = 0;
    }
    void *v1 = 0;
  }
  return result;
}

void std::__function::__func<re::DrawingManager::commitFrameInternal(re::WorkloadCommitMode,re::RenderFrameWorkload *)::$_0,std::allocator<re::DrawingManager::commitFrameInternal(re::WorkloadCommitMode,re::RenderFrameWorkload *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<re::DrawingManager::commitFrameInternal(re::WorkloadCommitMode,re::RenderFrameWorkload *)::$_0,std::allocator<re::DrawingManager::commitFrameInternal(re::WorkloadCommitMode,re::RenderFrameWorkload *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26E7117C0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<re::DrawingManager::commitFrameInternal(re::WorkloadCommitMode,re::RenderFrameWorkload *)::$_0,std::allocator<re::DrawingManager::commitFrameInternal(re::WorkloadCommitMode,re::RenderFrameWorkload *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7117C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *std::__function::__func<re::DrawingManager::commitFrameInternal(re::WorkloadCommitMode,re::RenderFrameWorkload *)::$_0,std::allocator<re::DrawingManager::commitFrameInternal(re::WorkloadCommitMode,re::RenderFrameWorkload *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 16);
  *(std::chrono::steady_clock::time_point *)uint64_t v3 = std::chrono::steady_clock::now();
  *(unsigned char *)(v3 + 16) = 1;
  re::DrawingManager::waitForGPUInternal((re::DrawingManager *)v2);
  uint64_t v4 = *(void *)(a1 + 16);
  *(double *)(v4 + 8) = *(double *)(v4 + 8)
                      + (double)(std::chrono::steady_clock::now().__d_.__rep_ - *(void *)v4) / 1000000000.0;
  *(unsigned char *)(v4 + 16) = 0;
  uint64_t v5 = (uint64_t *)re::RenderFrameBox::get(v2 + 344, *(void *)(*(void *)(*(void *)(v2 + 256) + 136) + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(void *)(*(void *)(*(void *)(v2 + 256) + 136) + 16) << 60));
  re::DynamicArray<re::Pair<NS::SharedPtr<MTL::Event>,unsigned long long,true>>::operator=((uint64_t)(v5 + 389), v2 + 712);
  re::DynamicArray<re::RenderFrameEvent>::clear(v2 + 712);
  if (*(_DWORD *)(v2 + 640)) {
    unint64_t v6 = (char *)(v2 + 648);
  }
  else {
    unint64_t v6 = *(char **)(v2 + 656);
  }
  uint64_t v7 = *(void *)(v2 + 632);
  uint64_t v21 = v6;
  uint64_t v22 = v7;
  re::DynamicOverflowArray<re::RenderFrameDelta *,5ul>::operator=((uint64_t)(v5 + 381), (uint64_t)&v21);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v2 + 624);
  uint64_t v8 = *(void *)(v2 + 1688);
  uint64_t v21 = *(char **)(v2 + 1704);
  uint64_t v22 = v8;
  re::FixedArray<re::RenderLayer>::operator=((_anonymous_namespace_ *)(v5 + 514), (uint64_t *)&v21);
  re::TextureManager::synchronizeTextures(*(os_unfair_lock_s **)(*(void *)(v2 + 256) + 64));
  re::MaterialManager::resolveArgumentBuffers(*(re::MaterialManager **)(*(void *)(v2 + 256) + 24));
  uint64_t v9 = *(void *)(v2 + 1688);
  if (v9)
  {
    uint64_t v10 = (unsigned char *)(*(void *)(v2 + 1704) + 20);
    do
    {
      if (*(void *)(v10 - 20))
      {
        if (*(v10 - 12)) {
          *(v10 - 12) = 0;
        }
        if (*v10) {
          *uint64_t v10 = 0;
        }
      }
      v10 += 32;
      --v9;
    }
    while (v9);
  }
  if (re::DrawingManager::shouldRenderProfilerNode((re::DrawingManager *)v2)
    && *(unsigned char *)(*(void *)(v2 + 1648) + 16))
  {
    re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard((uint64_t *)&v21);
    re::RenderFrame::emitGraph((re::RenderFrame *)v5, "ProfilerOverlay", "RenderFrame");
    v20[0] = 65290051;
    re::RenderFrame::specifyScopeLane((re::RenderFrame *)v5, (const re::WeakStringID *)v20, (const unsigned int *)(*(void *)(v2 + 1648) + 12), "ProfilerOverlay");
    re::ProfilerTimeGuard<(re::ProfilerStatistic)23>::end((uint64_t)&v21);
  }
  *(unsigned char *)(*(void *)(v2 + 1648) + 16) = 1;
  re::RenderFrame::buildOrRetainCachedGraph((re::RenderFrame *)v5, (re::RenderGraphStats *)(v2 + 1624));
  re::RenderGraphManager::deleteStaleGraphs(*(void **)(v2 + 296), *(void *)(*(void *)(*(void *)(v2 + 256) + 136) + 32) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(void *)(*(void *)(*(void *)(v2 + 256) + 136) + 16) << 60), v5[47]);
  re::RenderFrame::identifyUsedRenderLayers(v5);
  uint64_t v11 = *(void *)(a1 + 24);
  BOOL v12 = 1;
  if (!v5[51]) {
    BOOL v12 = *(void *)(v11 + 208) != 0;
  }
  *(unsigned char *)(v11 + 184) = v12;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v13 = *(void *)(a1 + 16);
  *(std::chrono::steady_clock::time_point *)uint64_t v13 = std::chrono::steady_clock::now();
  *(unsigned char *)(v13 + 16) = 1;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v20);
  re::RenderFrame::acquireDrawables((uint64_t)v5, &v21);
  re::ProfilerTimeGuard<(re::ProfilerStatistic)11>::end((uint64_t)v20);
  uint64_t v14 = *(void *)(a1 + 16);
  *(double *)(v14 + 8) = *(double *)(v14 + 8)
                       + (double)(std::chrono::steady_clock::now().__d_.__rep_ - *(void *)v14) / 1000000000.0;
  *(unsigned char *)(v14 + 16) = 0;
  uint64_t v15 = *(void *)(a1 + 16);
  v16.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  double v17 = 0.0;
  if (*(unsigned char *)(v15 + 16)) {
    double v17 = 1.0;
  }
  *(double *)(v2 + 872) = *(double *)(v15 + 8) + (double)(v16.__d_.__rep_ - *(void *)v15) / 1000000000.0 * v17;
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v20, 5002, v2);
  re::DrawingManager::executeFrameInternal((re::DrawingManager *)v2, *(re::RenderFrameWorkload **)(a1 + 24));
  re::DrawingManager::presentDrawablesAndCommit((re::DrawingManager *)v2, &v21, *(unsigned int *)(a1 + 8), *(void *)(a1 + 24));
  int v18 = *(_DWORD *)(a1 + 8);
  if (v18 == 2)
  {
    re::RenderFrameWorkload::immediatePresentDrawables(*(re::RenderFrameWorkload **)(a1 + 24), 1.0 / *(float *)(v2 + 1760));
    int v18 = *(_DWORD *)(a1 + 8);
  }
  if (v18 == 1) {
    re::RenderFrame::onFrameComplete((uint64_t)v5);
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v20);
  return re::FixedArray<re::mtl::Drawable>::deinit(&v21);
}

uint64_t std::__function::__func<re::DrawingManager::commitFrameInternal(re::WorkloadCommitMode,re::RenderFrameWorkload *)::$_0,std::allocator<re::DrawingManager::commitFrameInternal(re::WorkloadCommitMode,re::RenderFrameWorkload *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::DrawingManager::commitFrameInternal(re::WorkloadCommitMode,re::RenderFrameWorkload *)::$_0,std::allocator<re::DrawingManager::commitFrameInternal(re::WorkloadCommitMode,re::RenderFrameWorkload *)::$_0>,void ()(void)>::target_type()
{
}

uint64_t re::ProfilerTimeGuard<(re::ProfilerStatistic)11>::end(uint64_t result)
{
  if (*(void *)result && *(void *)(*(void *)result + 152))
  {
    uint64_t v1 = (void *)result;
    __n128 result = mach_absolute_time();
    uint64_t v2 = *v1;
    uint64_t v3 = *(int64x2_t **)(*v1 + 152);
    if (v3)
    {
      uint64_t v4 = result - v1[1];
      uint64_t v5 = v3[48].u64[0];
      if (v5 >= v4) {
        uint64_t v5 = result - v1[1];
      }
      v3[48].i64[0] = v5;
      unint64_t v6 = v3[48].u64[1];
      if (v6 <= v4) {
        unint64_t v6 = v4;
      }
      v3[48].i64[1] = v6;
      int64x2_t v7 = vdupq_n_s64(1uLL);
      v7.i64[0] = v4;
      v3[49] = vaddq_s64(v3[49], v7);
      *(unsigned char *)(v2 + 184) = 0;
    }
    void *v1 = 0;
  }
  return result;
}

void *re::FixedArray<re::mtl::Drawable>::deinit(void *result)
{
  if (*result)
  {
    uint64_t v1 = result;
    uint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      uint64_t v4 = (void **)result[2];
      uint64_t v5 = 8 * v2;
      do
      {
        unint64_t v6 = *v4++;

        v5 -= 8;
      }
      while (v5);
      __n128 result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v1 + 40))(*v1, v1[2]);
      *uint64_t v3 = 0;
      v3[1] = 0;
    }
    void *v1 = 0;
  }
  return result;
}

void re::ReadOnlyCPUAccessibleBufferSliceContent::make(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (void *)MEMORY[0x237DBDCF0]();
  if (!*a1)
  {
    int64x2_t v7 = (_anonymous_namespace_ *)std::system_category();
    uint64_t v8 = "Underlying buffer is invalid";
    goto LABEL_8;
  }
  uint64_t v5 = (__IOSurface *)[(id)*a1 iosurface];
  if (v5)
  {
    unint64_t v6 = v5;
    if (IOSurfaceLock(v5, 1u, 0))
    {
LABEL_4:
      int64x2_t v7 = (_anonymous_namespace_ *)std::system_category();
      uint64_t v8 = "Could not allocate ReadOnlyCPUAccessibleBufferSliceContent";
LABEL_8:
      long long v9 = v35[0];
      long long v10 = v35[1];
      *(unsigned char *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = v7;
      *(_OWORD *)(a2 + 24) = v9;
      *(_OWORD *)(a2 + 40) = v10;
      goto LABEL_25;
    }
    BaseAddress = (char *)IOSurfaceGetBaseAddress(v6);
    uint64_t v12 = *((unsigned int *)a1 + 3);
    *(void *)&v35[0] = &BaseAddress[*((unsigned int *)a1 + 2)];
    *((void *)&v35[0] + 1) = v12;
    *(void *)&v35[1] = 0;
    *((void *)&v35[1] + 1) = v6;
    memset(&v35[2], 0, 24);
    CFRetain(v6);
    re::ReadOnlyCPUAccessibleBufferSliceContent::ReadOnlyCPUAccessibleBufferSliceContent(v34, (uint64_t)v35);
    *(unsigned char *)a2 = 1;
    uint64_t v13 = (void *)(a2 + 8);
LABEL_24:
    re::ReadOnlyCPUAccessibleBufferSliceContent::ReadOnlyCPUAccessibleBufferSliceContent(v13, (uint64_t)v34);
    re::ReadOnlyCPUAccessibleBufferSliceContent::~ReadOnlyCPUAccessibleBufferSliceContent((re::ReadOnlyCPUAccessibleBufferSliceContent *)v34);
    re::ReadOnlyCPUAccessibleBufferSliceContent::~ReadOnlyCPUAccessibleBufferSliceContent((re::ReadOnlyCPUAccessibleBufferSliceContent *)v35);
    goto LABEL_25;
  }
  if (objc_msgSend((id)*a1, sel_storageMode) == (id)3)
  {
    int64x2_t v7 = (_anonymous_namespace_ *)std::system_category();
    uint64_t v8 = "Buffer storage is memoryless";
    goto LABEL_8;
  }
  if (objc_msgSend((id)*a1, sel_storageMode) != (id)2)
  {
    int64x2_t v25 = (char *)objc_msgSend((id)*a1, sel_contents);
    uint64_t v26 = *((unsigned int *)a1 + 3);
    uint64_t v27 = &v25[*((unsigned int *)a1 + 2)];
    id v28 = (id)*a1;
    *(void *)&v35[0] = v27;
    *((void *)&v35[0] + 1) = v26;
    *(void *)&v35[1] = v28;
    memset((char *)&v35[1] + 8, 0, 32);
    if (!v28)
    {
LABEL_23:
      re::ReadOnlyCPUAccessibleBufferSliceContent::ReadOnlyCPUAccessibleBufferSliceContent(v34, (uint64_t)v35);
      *(unsigned char *)a2 = 1;
      uint64_t v13 = (void *)(a2 + 8);
      goto LABEL_24;
    }
    unint64_t v24 = v28;
LABEL_21:

    goto LABEL_23;
  }
  if (!*((_DWORD *)a1 + 3))
  {
    memset(v35, 0, 56);
    goto LABEL_23;
  }
  id v14 = objc_msgSend((id)*a1, sel_device);
  if (!v14)
  {
    int64x2_t v7 = (_anonymous_namespace_ *)std::system_category();
    uint64_t v8 = "No render device for private buffer.";
    goto LABEL_8;
  }
  uint64_t v15 = v14;
  id v16 = objc_msgSend(v14, sel_newCommandQueue);
  if (!v16)
  {
    int64x2_t v7 = (_anonymous_namespace_ *)std::system_category();
    uint64_t v8 = "Could not create command queue to blit private storage.";
    goto LABEL_8;
  }
  double v17 = v16;
  id v18 = objc_msgSend(v16, sel_commandBuffer);
  if (!v18
    || (int64x2_t v19 = v18, (v20 = objc_msgSend(v18, sel_blitCommandEncoder)) == 0)
    || (uint64_t v21 = v20, (v22 = objc_msgSend(v15, sel_newBufferWithLength_options_, *((unsigned int *)a1 + 3), 16)) == 0))
  {

    goto LABEL_4;
  }
  uint64_t v23 = v22;
  objc_msgSend(v21, sel_copyFromBuffer_sourceOffset_toBuffer_destinationOffset_size_, *a1, *((unsigned int *)a1 + 2), v22, 0, *((unsigned int *)a1 + 3));
  objc_msgSend(v21, sel_synchronizeResource_, v23);
  objc_msgSend(v21, sel_endEncoding);
  objc_msgSend(v19, sel_commit);
  objc_msgSend(v19, sel_waitUntilCompleted);

  if (objc_msgSend(v15, sel_hasUnifiedMemory))
  {
    *(void *)&v35[0] = objc_msgSend(v23, sel_contents);
    *((void *)&v35[0] + 1) = objc_msgSend(v23, sel_length);
    *(void *)&v35[1] = v23;
    memset((char *)&v35[1] + 8, 0, 32);
    unint64_t v24 = v23;
    goto LABEL_21;
  }
  id v29 = objc_msgSend(v23, sel_contents);
  uint64_t v30 = *((unsigned int *)a1 + 3);
  *(void *)&v35[0] = v29;
  *((void *)&v35[0] + 1) = v30;
  re::FixedArray<unsigned char>::FixedArray((_anonymous_namespace_ *)&v32, (uint64_t)v35);

  v35[1] = 0uLL;
  v35[2] = v32;
  uint64_t v31 = v33;
  uint64_t v33 = 0;
  long long v32 = 0uLL;
  *(void *)&v35[3] = v31;
  *(void *)&v35[0] = v31;
  *((void *)&v35[0] + 1) = *((void *)&v35[2] + 1);
  re::ReadOnlyCPUAccessibleBufferSliceContent::ReadOnlyCPUAccessibleBufferSliceContent(v34, (uint64_t)v35);
  *(unsigned char *)a2 = 1;
  re::ReadOnlyCPUAccessibleBufferSliceContent::ReadOnlyCPUAccessibleBufferSliceContent((void *)(a2 + 8), (uint64_t)v34);
  re::ReadOnlyCPUAccessibleBufferSliceContent::~ReadOnlyCPUAccessibleBufferSliceContent((re::ReadOnlyCPUAccessibleBufferSliceContent *)v34);
  re::ReadOnlyCPUAccessibleBufferSliceContent::~ReadOnlyCPUAccessibleBufferSliceContent((re::ReadOnlyCPUAccessibleBufferSliceContent *)v35);
  if ((void)v32 && *((void *)&v32 + 1)) {
    (*(void (**)(void))(*(void *)v32 + 40))();
  }
LABEL_25:
}

_anonymous_namespace_ *re::FixedArray<unsigned char>::FixedArray(_anonymous_namespace_ *a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    re::FixedArray<unsigned char>::copy(a1, (const void **)a2);
  }
  return a1;
}

void re::VFXLoadTask::~VFXLoadTask(id *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x237DBCBD0);
}

uint64_t re::VFXLoadRuntimeTask::VFXLoadRuntimeTask(uint64_t a1, id *a2, void *aBlock)
{
  *(void *)a1 = &unk_26E711840;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = _Block_copy(aBlock);
  *(_DWORD *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 28) = 0;
  *(void *)a1 = &unk_26E711860;
  *(void *)(a1 + 32) = *a2;
  *(void *)(a1 + 40) = 0;
  return a1;
}

void re::VFXLoadRuntimeTask::~VFXLoadRuntimeTask(id *this)
{
  *this = &unk_26E711860;
}

{
  uint64_t vars8;

  re::VFXLoadRuntimeTask::~VFXLoadRuntimeTask(this);
  JUMPOUT(0x237DBCBD0);
}

void re::VFXManager::appendLoadRuntimeTask(dispatch_queue_t *this, id *a2)
{
  VFXRESceneClass = re::getVFXRESceneClass((re *)this);
  if (!VFXRESceneClass)
  {
    uint64_t v15 = *re::graphicsLogObjects(0);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)__n128 buf = 0;
LABEL_16:
    _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", buf, 2u);
    return;
  }
  uint64_t v5 = VFXRESceneClass;
  VFXSceneLoadOptionsClass = re::getVFXSceneLoadOptionsClass(VFXRESceneClass);
  if (!VFXSceneLoadOptionsClass)
  {
    uint64_t v15 = *re::graphicsLogObjects(0);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)__n128 buf = 0;
    goto LABEL_16;
  }
  int64x2_t v7 = VFXSceneLoadOptionsClass;
  unint64_t v8 = (unint64_t)this[6];
  unint64_t v9 = (unint64_t)this[7];
  if (v9 >= v8)
  {
    unint64_t v10 = v9 + 1;
    if (v8 < v9 + 1)
    {
      if (this[5])
      {
        uint64_t v11 = 2 * v8;
        BOOL v12 = v8 == 0;
        unint64_t v13 = 8;
        if (!v12) {
          unint64_t v13 = v11;
        }
        if (v13 <= v10) {
          unint64_t v14 = v10;
        }
        else {
          unint64_t v14 = v13;
        }
        re::DynamicArray<float *>::setCapacity(this + 5, v14);
      }
      else
      {
        re::DynamicArray<float *>::setCapacity(this + 5, v10);
        ++*((_DWORD *)this + 16);
      }
    }
    unint64_t v9 = (unint64_t)this[7];
  }
  this[9][v9].isa = (Class)a2;
  this[7] = (dispatch_queue_t)(v9 + 1);
  ++*((_DWORD *)this + 16);
  id v16 = a2[4];
  id v17 = objc_alloc_init(v7);
  [v17 setEnableRuntimeScriptCompilation:*((unsigned __int8 *)this + 16)];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3321888768;
  block[2] = ___ZN2re10VFXManager21appendLoadRuntimeTaskEPNS_18VFXLoadRuntimeTaskE_block_invoke;
  block[3] = &__block_descriptor_72_a8_32c76_ZTSKZN2re10VFXManager21appendLoadRuntimeTaskEPNS_18VFXLoadRuntimeTaskEE3__0_e5_v8__0l;
  id v18 = v16;
  block[4] = a2;
  block[5] = v5;
  block[6] = this;
  id v19 = v17;
  id v20 = v18;
  id v23 = v20;
  id v21 = v19;
  id v24 = v21;
  dispatch_async(this[3], block);
}

void ___ZN2re10VFXManager21appendLoadRuntimeTaskEPNS_18VFXLoadRuntimeTaskE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = (os_unfair_lock_s *)(v3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  LODWORD(v3) = *(unsigned __int8 *)(v3 + 8);
  os_unfair_lock_unlock(v4);
  if (v3) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = (void *)[objc_alloc(*(Class *)(a1 + 40)) initWithCommandQueue:*(void *)v2 model:*(void *)(a1 + 56) options:*(void *)(a1 + 64)];
  }
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = ___ZZN2re10VFXManager21appendLoadRuntimeTaskEPNS_18VFXLoadRuntimeTaskEENK3__0clEv_block_invoke;
  block[3] = &unk_264BE3508;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v10 = v2;
  uint64_t v11 = v6;
  id v9 = v5;
  id v7 = v5;
  dispatch_async(*(dispatch_queue_t *)(v2 + 32), block);
}

id __copy_helper_block_a8_32c76_ZTSKZN2re10VFXManager21appendLoadRuntimeTaskEPNS_18VFXLoadRuntimeTaskEE3__0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v4 = *(void **)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  id result = *(id *)(a2 + 64);
  *(void *)(a1 + 64) = result;
  return result;
}

void __destroy_helper_block_a8_32c76_ZTSKZN2re10VFXManager21appendLoadRuntimeTaskEPNS_18VFXLoadRuntimeTaskEE3__0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
}

void re::VFXManager::makeScheduledLoadRuntimeTask(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  operator new();
}

id *re::VFXManager::init(id *this, id *a2)
{
  uint64_t v8 = 0x100000001;
  int v9 = 0;
  uint64_t v10 = 0;
  re::dispatch::Queue::make("VFXRuntimeLoadingQueue", (int *)&v8, &v11);
  uint64_t v4 = this + 3;
  if (this + 3 != (id *)&v11)
  {
    uint64_t v5 = v11;
    uint64_t v11 = 0;
    uint64_t v6 = *v4;
    *uint64_t v4 = v5;
  }
  return re::ObjCObject::operator=(this + 4, a2);
}

void re::VFXManager::setRenderManager(re::VFXManager *this, id *a2)
{
  *((void *)this + 1) = a2;
  if (a2[13])
  {
    id v3 = (id)[a2[23] newCommandQueue];

    uint64_t v4 = *(void **)this;
    *(void *)this = v3;

    uint64_t v5 = @"VFX Renderer";
    [*(id *)this setLabel:@"VFX Renderer"];
  }
}

void *re::allocInfo_VFXManager(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_396, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_396))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF95FA0, "VFXManager");
    __cxa_guard_release(&_MergedGlobals_396);
  }
  return &unk_26AF95FA0;
}

void re::initInfo_VFXManager(re *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x109929CB96DDCALL;
  v5[1] = "VFXManager";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x7800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::initInfo_VFXManager(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::VFXManager>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::VFXManager>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::VFXManager>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::VFXManager>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

double re::internal::defaultConstruct<re::VFXManager>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 16) = 256;
  *(unsigned char *)(a3 + 18) = 0;
  *(void *)(a3 + 112) = 0;
  double result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 52) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_DWORD *)(a3 + 104) = 0;
  return result;
}

void re::internal::defaultDestruct<re::VFXManager>(uint64_t a1, uint64_t a2, void **a3)
{
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a3 + 10));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a3 + 5));

  long long v4 = *a3;
}

double re::internal::defaultConstructV2<re::VFXManager>(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 256;
  *(unsigned char *)(a1 + 18) = 0;
  *(void *)(a1 + 112) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::VFXManager>(void **a1)
{
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 10));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 5));

  uint64_t v2 = *a1;
}

uint64_t re::introspect_VFXManager(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VFXManager", (uint64_t (*)(re::internal *))re::allocInfo_VFXManager, (re::IntrospectionBase *(*)(void))re::initInfo_VFXManager, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::VFXManager>, this);
}

uint64_t ___ZZN2re10VFXManager21appendLoadRuntimeTaskEPNS_18VFXLoadRuntimeTaskEENK3__0clEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  long long v4 = (os_unfair_lock_s *)(v3 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  LODWORD(v3) = *(unsigned __int8 *)(v3 + 8);
  os_unfair_lock_unlock(v4);
  if (!v3)
  {
    re::ObjCObject::operator=((void **)(*(void *)(a1 + 48) + 40), *(void **)(a1 + 32));
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 48) + 16) + 16))();
  }
  uint64_t result = *(void *)(a1 + 48);
  long long v6 = *(void **)(v2 + 72);
  unint64_t v7 = *(void *)(v2 + 56);
  uint64_t v8 = v6;
  if (v7)
  {
    uint64_t v9 = 8 * v7;
    uint64_t v8 = *(void **)(v2 + 72);
    while (*v8 != result)
    {
      ++v8;
      v9 -= 8;
      if (!v9)
      {
        uint64_t v8 = &v6[v7];
        break;
      }
    }
  }
  unint64_t v10 = v8 - v6;
  if (v10 != v7)
  {
    if (v7 <= v10)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (v7 - 1 > v10)
    {
      v6[v10] = v6[v7 - 1];
      uint64_t result = *(void *)(a1 + 48);
    }
    *(void *)(v2 + 56) = v7 - 1;
    ++*(_DWORD *)(v2 + 64);
  }
  if (result)
  {
    uint64_t v11 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v11();
  }
  return result;
}

uint64_t re::DataArray<re::DisplayStatsManager::MetricState>::deinit(uint64_t result)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  if (!*(_DWORD *)(result + 44)) {
    return result;
  }
  long long v4 = (void *)result;
  uint64_t v26 = (void *)result;
  if (*(_DWORD *)(result + 40))
  {
    LODWORD(v27) = 0;
    if (!*(void *)(result + 16)) {
      goto LABEL_53;
    }
    uint64_t v5 = (void *)result;
    if (!**(_DWORD **)(*(void *)(result + 32) + 8))
    {
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v26);
      uint64_t v5 = v26;
    }
  }
  else
  {
    LODWORD(v27) = -1;
    uint64_t v5 = (void *)result;
  }
  uint64_t v26 = v5;
  uint64_t v6 = (unsigned __int16)v27;
  if (v5 != v4 || ((unsigned __int16)v27 == 0xFFFFLL ? (BOOL v7 = (v27 & 0xFFFF0000) == 4294901760) : (BOOL v7 = 0), !v7))
  {
    unint64_t v8 = v27 >> 16;
    unint64_t v1 = 0xFFFFLL;
    do
    {
      unint64_t v9 = (unsigned __int16)v8;
      uint64_t v2 = (void *)v5[2];
      if ((unint64_t)v2 <= (unsigned __int16)v8) {
        goto LABEL_51;
      }
      unint64_t v10 = v4[2];
      if (v10 > (unsigned __int16)v8)
      {
        int v11 = *(_DWORD *)(*(void *)(v5[4] + 16 * (unsigned __int16)v8 + 8) + 4 * v6);
        unsigned int v12 = (unsigned __int16)(v10 - 1) == (unsigned __int16)v8 ? *((_DWORD *)v4 + 12) : *((_DWORD *)v4 + 11);
        if (v12 > (unsigned __int16)v6)
        {
          int v13 = v11 & 0xFFFFFF;
          uint64_t v14 = v4[4];
          int v15 = *(_DWORD *)(*(void *)(v14 + 16 * (unsigned __int16)v8 + 8) + 4 * v6);
          if (v15 && v15 == v13)
          {
            uint64_t v17 = *(void *)(v14 + 16 * (unsigned __int16)v8);
            if (v17)
            {
              uint64_t v2 = (void *)(v17 + 40 * v6);
              uint64_t v18 = *v2;
              *uint64_t v2 = 0;
              if (v18)
              {
                uint64_t v19 = v2[4];
                *(void *)&long long v37 = v18;
                if (!v19)
                {
                  int64x2_t v25 = (re::DisplayStatsManager *)std::__throw_bad_function_call[abi:nn180100]();
                  return re::DisplayStatsManager::init(v25);
                }
                (*(void (**)(uint64_t, long long *))(*(void *)v19 + 48))(v19, &v37);
              }
              id v20 = (void *)v2[4];
              if (v20 == v2 + 1)
              {
                (*(void (**)(void *))(v2[1] + 32))(v2 + 1);
              }
              else if (v20)
              {
                (*(void (**)(void *))(*v20 + 40))(v20);
              }
              unint64_t v3 = v4[2];
              if (v3 <= (unsigned __int16)v8) {
                goto LABEL_52;
              }
              *(_DWORD *)(*(void *)(v4[4] + 16 * (unsigned __int16)v8 + 8) + 4 * v6) = 0;
              *(_DWORD *)uint64_t v2 = *((_DWORD *)v4 + 13);
              *((_WORD *)v4 + 26) = v6;
              *((_WORD *)v4 + 27) = v8;
              --*((_DWORD *)v4 + 10);
            }
          }
        }
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v26);
      uint64_t v5 = v26;
      uint64_t v6 = (unsigned __int16)v27;
      LOWORD(v8) = WORD1(v27);
    }
    while (v26 != v4 || (unsigned __int16)v27 != 0xFFFFLL || WORD1(v27) != 0xFFFF);
  }
  unint64_t v21 = v4[2];
  unint64_t v9 = v21 - 1;
  if (v21 == 1) {
    goto LABEL_46;
  }
  uint64_t v22 = 16 * v21 - 16;
  do
  {
    if (v21 <= v9)
    {
      uint64_t v26 = 0;
      long long v41 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v29 = 136315906;
      uint64_t v30 = "operator[]";
      __int16 v31 = 1024;
      int v32 = 789;
      __int16 v33 = 2048;
      unint64_t v34 = v9;
      __int16 v35 = 2048;
      uint64_t v36 = (void *)v21;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_50:
      uint64_t v26 = 0;
      long long v41 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v29 = 136315906;
      uint64_t v30 = "removeAt";
      __int16 v31 = 1024;
      int v32 = 931;
      __int16 v33 = 2048;
      unint64_t v34 = v9;
      __int16 v35 = 2048;
      uint64_t v36 = (void *)v1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_51:
      uint64_t v28 = 0;
      long long v41 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v29 = 136315906;
      uint64_t v30 = "operator[]";
      __int16 v31 = 1024;
      int v32 = 797;
      __int16 v33 = 2048;
      unint64_t v34 = v9;
      __int16 v35 = 2048;
      uint64_t v36 = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_52:
      uint64_t v28 = 0;
      long long v41 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v29 = 136315906;
      uint64_t v30 = "operator[]";
      __int16 v31 = 1024;
      int v32 = 789;
      __int16 v33 = 2048;
      unint64_t v34 = v9;
      __int16 v35 = 2048;
      uint64_t v36 = (void *)v3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_53:
      uint64_t v28 = 0;
      long long v41 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v29 = 136315906;
      uint64_t v30 = "operator[]";
      __int16 v31 = 1024;
      int v32 = 797;
      __int16 v33 = 2048;
      unint64_t v34 = 0;
      __int16 v35 = 2048;
      uint64_t v36 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    id v23 = (void *)(v4[4] + v22);
    (*(void (**)(void, void))(*(void *)*v4 + 40))(*v4, *v23);
    (*(void (**)(void, void))(*(void *)*v4 + 40))(*v4, v23[1]);
    unint64_t v1 = v4[2];
    if (v1 <= v9) {
      goto LABEL_50;
    }
    unint64_t v21 = v1 - 1;
    if (v1 - 1 > v9)
    {
      *(_OWORD *)(v4[4] + v22) = *(_OWORD *)(v4[4] + 16 * v1 - 16);
      unint64_t v21 = v4[2] - 1;
    }
    v4[2] = v21;
    ++*((_DWORD *)v4 + 6);
    v22 -= 16;
    --v9;
  }
  while (v9);
  v4[6] = 0xFFFFFFFF00000000;
  if (!v21)
  {
    uint64_t v26 = 0;
    long long v41 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v4 = (void *)&_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v29 = 136315906;
    uint64_t v30 = "operator[]";
    __int16 v31 = 1024;
    int v32 = 789;
    __int16 v33 = 2048;
    unint64_t v34 = 0;
    __int16 v35 = 2048;
    uint64_t v36 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_46:
    v4[6] = 0xFFFFFFFF00000000;
  }
  id v24 = (void *)v4[4];
  (*(void (**)(void, void))(*(void *)*v4 + 40))(*v4, *v24);
  (*(void (**)(void, void))(*(void *)*v4 + 40))(*v4, v24[1]);
  uint64_t result = re::DynamicArray<unsigned long>::deinit((uint64_t)v4);
  *((_DWORD *)v4 + 11) = 0;
  return result;
}

void re::DisplayStatsManager::init(re::DisplayStatsManager *this)
{
  re::DynamicArray<re::RigNodeConstraint>::setCapacity(this, 0);
  ++*((_DWORD *)this + 6);
  *((_DWORD *)this + 11) = 4;
  re::DataArray<re::DisplayStatsManager::MetricState>::allocBlock((unsigned int *)this);
}

void re::DataArray<re::DisplayStatsManager::MetricState>::allocBlock(unsigned int *a1)
{
  uint64_t v2 = 40 * a1[11];
  v5.n128_u64[0] = (*(uint64_t (**)(void, uint64_t, void))(**(void **)a1 + 32))(*(void *)a1, v2, 0);
  if (v5.n128_u64[0])
  {
    uint64_t v2 = 4 * a1[11];
    v5.n128_u64[1] = (*(uint64_t (**)(void, uint64_t, void))(**(void **)a1 + 32))(*(void *)a1, v2, 0);
    if (v5.n128_u64[1])
    {
      re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)a1, &v5);
      a1[12] = 0;
      return;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)6, v3, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.elements", "allocBlock", 520, v2, *(void *)(*(void *)a1 + 8), 0);
    _os_crash();
    __break(1u);
  }
  re::internal::assertLog((re::internal *)6, v4, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.allocationCounters", "allocBlock", 528, v2, *(void *)(*(void *)a1 + 8));
  _os_crash();
  __break(1u);
}

uint64_t re::snapshotMapFields<re::snapshot::Reader<re::snapshot::DecoderOPACK>>(uint64_t a1, uint64_t a2)
{
  if (re::snapshot::DecoderOPACK::advanceTo<1>(a1))
  {
    *(_DWORD *)a2 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0);
    uint64_t v4 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v4 >= *(void *)(a1 + 24) || (int v5 = *v4, v5 == 3))
    {
      int Integer = 0x7FFFFFFF;
    }
    else if ((v5 - 7) > 0x28)
    {
      int Integer = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(void *)(a1 + 16) = v4 + 1;
      int Integer = v5 - 8;
    }
    *(_DWORD *)(a1 + 32) = Integer;
  }
  if (re::snapshot::DecoderOPACK::advanceTo<2>(a1))
  {
    *(_DWORD *)(a2 + 4) = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0);
    BOOL v7 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v7 >= *(void *)(a1 + 24) || (int v8 = *v7, v8 == 3))
    {
      int v9 = 0x7FFFFFFF;
    }
    else if ((v8 - 7) > 0x28)
    {
      int v9 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(void *)(a1 + 16) = v7 + 1;
      int v9 = v8 - 8;
    }
    *(_DWORD *)(a1 + 32) = v9;
  }
  if (re::snapshot::DecoderOPACK::advanceTo<3>(a1))
  {
    *(_DWORD *)(a2 + 8) = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0);
    unint64_t v10 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v10 >= *(void *)(a1 + 24) || (int v11 = *v10, v11 == 3))
    {
      int v12 = 0x7FFFFFFF;
    }
    else if ((v11 - 7) > 0x28)
    {
      int v12 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(void *)(a1 + 16) = v10 + 1;
      int v12 = v11 - 8;
    }
    *(_DWORD *)(a1 + 32) = v12;
  }
  if (re::snapshot::DecoderOPACK::advanceTo<4>(a1))
  {
    unint64_t v79 = 0;
    int v13 = (_anonymous_namespace_ *)re::snapshot::DecoderOPACK::beginString((re::snapshot::DecoderOPACK *)a1, &v79);
    if (v13)
    {
      size_t v14 = v79;
      int v15 = *(const char **)(a1 + 16);
      unint64_t v16 = *(void *)(a1 + 24) - (void)v15;
      if (v16 >= v79) {
        unint64_t v16 = v79;
      }
      *(void *)(a1 + 16) = &v15[v16];
      uint64_t v77 = 0;
      uint64_t v78 = "";
      uint64_t v17 = v77;
      uint64_t v18 = v78;
      uint64_t v77 = 0;
      uint64_t v78 = "";
      uint64_t v19 = *(void *)(a2 + 16);
      unint64_t v20 = *(void *)(a2 + 24);
      *(void *)(a2 + 16) = v17;
      *(void *)(a2 + 24) = v18;
      v80[0] = v17 & 0xFFFFFFFFFFFFFFFELL | v19 & 1;
      v80[1] = v20;
      re::StringID::destroyString((re::StringID *)v80);
      re::StringID::destroyString((re::StringID *)&v77);
    }
    unint64_t v21 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v21 >= *(void *)(a1 + 24) || (int v22 = *v21, v22 == 3))
    {
      int v23 = 0x7FFFFFFF;
    }
    else if ((v22 - 7) > 0x28)
    {
      int v23 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(void *)(a1 + 16) = v21 + 1;
      int v23 = v22 - 8;
    }
    *(_DWORD *)(a1 + 32) = v23;
  }
  if (re::snapshot::DecoderOPACK::advanceTo<5>(a1))
  {
    *(_DWORD *)(a2 + 32) = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0);
    id v24 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v24 >= *(void *)(a1 + 24) || (int v25 = *v24, v25 == 3))
    {
      int v26 = 0x7FFFFFFF;
    }
    else if ((v25 - 7) > 0x28)
    {
      int v26 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(void *)(a1 + 16) = v24 + 1;
      int v26 = v25 - 8;
    }
    *(_DWORD *)(a1 + 32) = v26;
  }
  if (re::snapshot::DecoderOPACK::advanceTo<6>(a1))
  {
    *(_WORD *)(a2 + 36) = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0);
    unint64_t v27 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v27 >= *(void *)(a1 + 24) || (int v28 = *v27, v28 == 3))
    {
      uint64_t v29 = 0x7FFFFFFFLL;
    }
    else if ((v28 - 7) > 0x28)
    {
      uint64_t v29 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(void *)(a1 + 16) = v27 + 1;
      uint64_t v29 = (v28 - 8);
    }
    *(_DWORD *)(a1 + 32) = v29;
  }
  else
  {
    uint64_t v29 = *(unsigned int *)(a1 + 32);
  }
  if ((int)v29 <= 6)
  {
    do
    {
      uint64_t v30 = *(unsigned __int8 **)(a1 + 16);
      if ((unint64_t)v30 >= *(void *)(a1 + 24))
      {
        int v31 = 0;
      }
      else
      {
        *(void *)(a1 + 16) = v30 + 1;
        int v31 = *v30;
      }
      re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v31);
      int v32 = *(unsigned __int8 **)(a1 + 16);
      if ((unint64_t)v32 >= *(void *)(a1 + 24)) {
        goto LABEL_50;
      }
      int v33 = *v32;
      if (v33 == 3) {
        goto LABEL_50;
      }
      if ((v33 - 7) > 0x28)
      {
        uint64_t v29 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
      }
      else
      {
        *(void *)(a1 + 16) = v32 + 1;
        uint64_t v29 = (v33 - 8);
      }
      *(_DWORD *)(a1 + 32) = v29;
    }
    while ((int)v29 < 7);
  }
  uint64_t v34 = v29;
  if (v29 == 7)
  {
    *(_DWORD *)(a2 + 64) = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0);
    __int16 v35 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v35 >= *(void *)(a1 + 24) || (int v36 = *v35, v36 == 3))
    {
LABEL_50:
      uint64_t v37 = 0x7FFFFFFFLL;
      *(_DWORD *)(a1 + 32) = 0x7FFFFFFF;
      goto LABEL_120;
    }
    if ((v36 - 7) > 0x28)
    {
      uint64_t v34 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(void *)(a1 + 16) = v35 + 1;
      uint64_t v34 = (v36 - 8);
    }
    *(_DWORD *)(a1 + 32) = v34;
    if ((int)v34 <= 7)
    {
      do
      {
        long long v38 = *(unsigned __int8 **)(a1 + 16);
        if ((unint64_t)v38 >= *(void *)(a1 + 24))
        {
          int v39 = 0;
        }
        else
        {
          *(void *)(a1 + 16) = v38 + 1;
          int v39 = *v38;
        }
        re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v39);
        long long v40 = *(unsigned __int8 **)(a1 + 16);
        if ((unint64_t)v40 >= *(void *)(a1 + 24)) {
          goto LABEL_123;
        }
        int v41 = *v40;
        if (v41 == 3) {
          goto LABEL_123;
        }
        if ((v41 - 7) > 0x28)
        {
          uint64_t v34 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
        }
        else
        {
          *(void *)(a1 + 16) = v40 + 1;
          uint64_t v34 = (v41 - 8);
        }
        *(_DWORD *)(a1 + 32) = v34;
      }
      while ((int)v34 < 8);
    }
  }
  uint64_t v37 = v34;
  if (v34 == 8)
  {
    v80[0] = 0;
    uint64_t v42 = (_anonymous_namespace_ *)re::snapshot::DecoderOPACK::beginArray((re::snapshot::DecoderOPACK *)a1, v80);
    if (v42)
    {
      unint64_t v43 = v80[0];
      if (!*(void *)(a2 + 40) && v80[0] != -1)
      {
      }
      if (v43 == *(void *)(a2 + 48))
      {
        int v44 = 0;
        while (!re::snapshot::DecoderOPACK::endArray((re::snapshot::DecoderOPACK *)a1, v80))
        {
          if (*(void *)(a2 + 48) <= (unint64_t)v44)
          {
            unint64_t v49 = *(unsigned __int8 **)(a1 + 16);
            if ((unint64_t)v49 >= *(void *)(a1 + 24))
            {
              int v50 = 0;
            }
            else
            {
              *(void *)(a1 + 16) = v49 + 1;
              int v50 = *v49;
            }
            re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v50);
          }
          else
          {
            uint64_t v48 = *(void *)(a2 + 56);
            if (re::snapshot::DecoderOPACK::beginObject((re::snapshot::DecoderOPACK *)a1, 0))
            {
              re::snapshotMapFields<re::snapshot::Reader<re::snapshot::DecoderOPACK>>(a1, v48 + 80 * v44);
              re::snapshot::DecoderOPACK::endObject((uint64_t *)a1, 0);
            }
            ++v44;
          }
        }
        if (v43 != v44) {
          re::snapshot::Decoder::error((const char **)a1, "count mismatch: expected %zu, got %d");
        }
      }
      else
      {
        re::snapshot::Decoder::error((const char **)a1, "unexpected FixedArray size: expected %zu, got %zu");
      }
    }
    uint64_t v45 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v45 >= *(void *)(a1 + 24) || (int v46 = *v45, v46 == 3))
    {
      uint64_t v47 = 0x7FFFFFFFLL;
      *(_DWORD *)(a1 + 32) = 0x7FFFFFFF;
      goto LABEL_138;
    }
    if ((v46 - 7) > 0x28)
    {
      uint64_t v37 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(void *)(a1 + 16) = v45 + 1;
      uint64_t v37 = (v46 - 8);
    }
    *(_DWORD *)(a1 + 32) = v37;
    if ((int)v37 <= 8)
    {
      do
      {
        uint64_t v51 = *(unsigned __int8 **)(a1 + 16);
        if ((unint64_t)v51 >= *(void *)(a1 + 24))
        {
          int v52 = 0;
        }
        else
        {
          *(void *)(a1 + 16) = v51 + 1;
          int v52 = *v51;
        }
        re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v52);
        uint64_t v53 = *(unsigned __int8 **)(a1 + 16);
        if ((unint64_t)v53 >= *(void *)(a1 + 24)) {
          goto LABEL_123;
        }
        int v54 = *v53;
        if (v54 == 3) {
          goto LABEL_123;
        }
        if ((v54 - 7) > 0x28)
        {
          uint64_t v37 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
        }
        else
        {
          *(void *)(a1 + 16) = v53 + 1;
          uint64_t v37 = (v54 - 8);
        }
        *(_DWORD *)(a1 + 32) = v37;
      }
      while ((int)v37 < 9);
    }
  }
LABEL_120:
  uint64_t v47 = v37;
  if (v37 == 9)
  {
    re::snapshot::DecoderOPACK::operator>>((uint64_t *)a1, (unsigned char *)(a2 + 68));
    uint64_t v55 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v55 >= *(void *)(a1 + 24) || (int v56 = *v55, v56 == 3))
    {
LABEL_123:
      uint64_t result = 0x7FFFFFFFLL;
      *(_DWORD *)(a1 + 32) = 0x7FFFFFFF;
      goto LABEL_156;
    }
    if ((v56 - 7) > 0x28)
    {
      uint64_t v47 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(void *)(a1 + 16) = v55 + 1;
      uint64_t v47 = (v56 - 8);
    }
    *(_DWORD *)(a1 + 32) = v47;
    if ((int)v47 <= 9)
    {
      do
      {
        char v58 = *(unsigned __int8 **)(a1 + 16);
        if ((unint64_t)v58 >= *(void *)(a1 + 24))
        {
          int v59 = 0;
        }
        else
        {
          *(void *)(a1 + 16) = v58 + 1;
          int v59 = *v58;
        }
        uint64_t result = (uint64_t)re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v59);
        uint64_t v60 = *(unsigned __int8 **)(a1 + 16);
        if ((unint64_t)v60 >= *(void *)(a1 + 24)) {
          goto LABEL_141;
        }
        int v61 = *v60;
        if (v61 == 3) {
          goto LABEL_141;
        }
        if ((v61 - 7) > 0x28)
        {
          uint64_t v47 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
        }
        else
        {
          *(void *)(a1 + 16) = v60 + 1;
          uint64_t v47 = (v61 - 8);
        }
        *(_DWORD *)(a1 + 32) = v47;
      }
      while ((int)v47 < 10);
    }
  }
LABEL_138:
  uint64_t result = v47;
  if (v47 == 10)
  {
    uint64_t result = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0);
    *(_DWORD *)(a2 + 72) = result;
    uint64_t v62 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v62 >= *(void *)(a1 + 24) || (int v63 = *v62, v63 == 3))
    {
LABEL_141:
      int v64 = 0x7FFFFFFF;
      *(_DWORD *)(a1 + 32) = 0x7FFFFFFF;
      goto LABEL_173;
    }
    if ((v63 - 7) > 0x28)
    {
      uint64_t result = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(void *)(a1 + 16) = v62 + 1;
      uint64_t result = (v63 - 8);
    }
    *(_DWORD *)(a1 + 32) = result;
    if ((int)result <= 10)
    {
      do
      {
        unint64_t v65 = *(unsigned __int8 **)(a1 + 16);
        if ((unint64_t)v65 >= *(void *)(a1 + 24))
        {
          int v66 = 0;
        }
        else
        {
          *(void *)(a1 + 16) = v65 + 1;
          int v66 = *v65;
        }
        re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v66);
        __int16 v67 = *(unsigned __int8 **)(a1 + 16);
        if ((unint64_t)v67 >= *(void *)(a1 + 24)) {
          goto LABEL_176;
        }
        int v68 = *v67;
        if (v68 == 3) {
          goto LABEL_176;
        }
        if ((v68 - 7) > 0x28)
        {
          uint64_t result = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
        }
        else
        {
          *(void *)(a1 + 16) = v67 + 1;
          uint64_t result = (v68 - 8);
        }
        *(_DWORD *)(a1 + 32) = result;
      }
      while ((int)result < 11);
    }
  }
LABEL_156:
  int v64 = result;
  if (result == 11)
  {
    uint64_t result = (uint64_t)re::snapshot::DecoderOPACK::operator>>((uint64_t *)a1, (unsigned char *)(a2 + 76));
    __int16 v69 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v69 >= *(void *)(a1 + 24)) {
      goto LABEL_176;
    }
    int v70 = *v69;
    if (v70 == 3) {
      goto LABEL_176;
    }
    if ((v70 - 7) > 0x28)
    {
      uint64_t result = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
      int v64 = result;
    }
    else
    {
      *(void *)(a1 + 16) = v69 + 1;
      int v64 = v70 - 8;
    }
    *(_DWORD *)(a1 + 32) = v64;
    if (v64 <= 11)
    {
      do
      {
        __int16 v71 = *(unsigned __int8 **)(a1 + 16);
        if ((unint64_t)v71 >= *(void *)(a1 + 24))
        {
          int v72 = 0;
        }
        else
        {
          *(void *)(a1 + 16) = v71 + 1;
          int v72 = *v71;
        }
        uint64_t result = (uint64_t)re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v72);
        long long v73 = *(unsigned __int8 **)(a1 + 16);
        if ((unint64_t)v73 >= *(void *)(a1 + 24)) {
          goto LABEL_176;
        }
        int v74 = *v73;
        if (v74 == 3) {
          goto LABEL_176;
        }
        if ((v74 - 7) > 0x28)
        {
          uint64_t result = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
          int v64 = result;
        }
        else
        {
          *(void *)(a1 + 16) = v73 + 1;
          int v64 = v74 - 8;
        }
        *(_DWORD *)(a1 + 32) = v64;
      }
      while (v64 < 12);
    }
  }
LABEL_173:
  if (v64 != 12) {
    return result;
  }
  re::snapshot::DecoderOPACK::operator>>((uint64_t *)a1, (unsigned char *)(a2 + 77));
  long long v75 = *(unsigned __int8 **)(a1 + 16);
  if ((unint64_t)v75 < *(void *)(a1 + 24))
  {
    int v76 = *v75;
    if (v76 != 3)
    {
      if ((v76 - 7) > 0x28)
      {
        uint64_t result = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
      }
      else
      {
        *(void *)(a1 + 16) = v75 + 1;
        uint64_t result = (v76 - 8);
      }
      goto LABEL_177;
    }
  }
LABEL_176:
  uint64_t result = 0x7FFFFFFFLL;
LABEL_177:
  *(_DWORD *)(a1 + 32) = result;
  return result;
}

unsigned int *re::snapshotMapFields<re::snapshot::Writer<re::snapshot::EncoderOPACK>>(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4 = a1[2];
  if (v4 >= a1[3])
  {
    re::snapshot::EncoderOPACK::writeInteger(a1, 1);
  }
  else
  {
    uint64_t v5 = *(void *)a1;
    a1[2] = v4 + 1;
    *(unsigned char *)(v5 + v4) = 9;
  }
  re::snapshot::EncoderOPACK::writeInteger(a1, *a2);
  uint64_t v6 = a1[2];
  if (v6 >= a1[3])
  {
    re::snapshot::EncoderOPACK::writeInteger(a1, 2);
  }
  else
  {
    uint64_t v7 = *(void *)a1;
    a1[2] = v6 + 1;
    *(unsigned char *)(v7 + v6) = 10;
  }
  re::snapshot::EncoderOPACK::writeInteger(a1, a2[1]);
  uint64_t v8 = a1[2];
  if (v8 >= a1[3])
  {
    re::snapshot::EncoderOPACK::writeInteger(a1, 3);
  }
  else
  {
    uint64_t v9 = *(void *)a1;
    a1[2] = v8 + 1;
    *(unsigned char *)(v9 + v8) = 11;
  }
  re::snapshot::EncoderOPACK::writeInteger(a1, a2[2]);
  uint64_t v10 = a1[2];
  if (v10 >= a1[3])
  {
    re::snapshot::EncoderOPACK::writeInteger(a1, 4);
  }
  else
  {
    uint64_t v11 = *(void *)a1;
    a1[2] = v10 + 1;
    *(unsigned char *)(v11 + v10) = 12;
  }
  size_t v12 = strlen(*((const char **)a2 + 3));
  re::snapshot::EncoderOPACK::serializeString(a1, *((const char **)a2 + 3), v12);
  uint64_t v13 = a1[2];
  if (v13 >= a1[3])
  {
    re::snapshot::EncoderOPACK::writeInteger(a1, 5);
  }
  else
  {
    uint64_t v14 = *(void *)a1;
    a1[2] = v13 + 1;
    *(unsigned char *)(v14 + v13) = 13;
  }
  re::snapshot::EncoderOPACK::writeInteger(a1, a2[8]);
  uint64_t v15 = a1[2];
  if (v15 >= a1[3])
  {
    re::snapshot::EncoderOPACK::writeInteger(a1, 6);
  }
  else
  {
    uint64_t v16 = *(void *)a1;
    a1[2] = v15 + 1;
    *(unsigned char *)(v16 + v15) = 14;
  }
  re::snapshot::EncoderOPACK::writeInteger(a1, *((unsigned __int16 *)a2 + 18));
  uint64_t v17 = a1[2];
  if (v17 >= a1[3])
  {
    re::snapshot::EncoderOPACK::writeInteger(a1, 7);
  }
  else
  {
    uint64_t v18 = *(void *)a1;
    a1[2] = v17 + 1;
    *(unsigned char *)(v18 + v17) = 15;
  }
  re::snapshot::EncoderOPACK::writeInteger(a1, a2[16]);
  uint64_t v19 = a1[2];
  if (v19 >= a1[3])
  {
    re::snapshot::EncoderOPACK::writeInteger(a1, 8);
  }
  else
  {
    uint64_t v20 = *(void *)a1;
    a1[2] = v19 + 1;
    *(unsigned char *)(v20 + v19) = 16;
  }
  unint64_t v21 = *((void *)a2 + 6);
  re::snapshot::EncoderOPACK::beginArray(a1, v21);
  uint64_t v22 = *((void *)a2 + 6);
  if (v22)
  {
    uint64_t v23 = *((void *)a2 + 7);
    uint64_t v24 = 80 * v22;
    do
    {
      re::snapshot::EncoderOPACK::beginObject(a1);
      re::snapshotMapFields<re::snapshot::Writer<re::snapshot::EncoderOPACK>>(a1, v23);
      re::snapshot::EncoderOPACK::endObject(a1);
      v23 += 80;
      v24 -= 80;
    }
    while (v24);
  }
  re::snapshot::EncoderOPACK::endArray(a1, v21);
  uint64_t v25 = a1[2];
  if (v25 >= a1[3])
  {
    re::snapshot::EncoderOPACK::writeInteger(a1, 9);
  }
  else
  {
    uint64_t v26 = *(void *)a1;
    a1[2] = v25 + 1;
    *(unsigned char *)(v26 + v25) = 17;
  }
  re::snapshot::EncoderOPACK::operator<<(a1, *((unsigned __int8 *)a2 + 68));
  uint64_t v27 = a1[2];
  if (v27 >= a1[3])
  {
    re::snapshot::EncoderOPACK::writeInteger(a1, 10);
  }
  else
  {
    uint64_t v28 = *(void *)a1;
    a1[2] = v27 + 1;
    *(unsigned char *)(v28 + v27) = 18;
  }
  re::snapshot::EncoderOPACK::writeInteger(a1, a2[18]);
  uint64_t v29 = a1[2];
  if (v29 >= a1[3])
  {
    re::snapshot::EncoderOPACK::writeInteger(a1, 11);
  }
  else
  {
    uint64_t v30 = *(void *)a1;
    a1[2] = v29 + 1;
    *(unsigned char *)(v30 + v29) = 19;
  }
  re::snapshot::EncoderOPACK::operator<<(a1, *((unsigned __int8 *)a2 + 76));
  uint64_t v31 = a1[2];
  if (v31 >= a1[3])
  {
    re::snapshot::EncoderOPACK::writeInteger(a1, 12);
  }
  else
  {
    uint64_t v32 = *(void *)a1;
    a1[2] = v31 + 1;
    *(unsigned char *)(v32 + v31) = 20;
  }
  int v33 = *((unsigned __int8 *)a2 + 77);
  return re::snapshot::EncoderOPACK::operator<<(a1, v33);
}

void re::sg::Material::getCustomUniformsArgument(id *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  uint64_t v3 = [*this customUniformsType];
  uint64_t v4 = v3;
  if (v3
    && ([v3 properties],
        uint64_t v5 = objc_claimAutoreleasedReturnValue(),
        uint64_t v6 = [v5 count],
        v5,
        v6))
  {
    v45[0] = 2330;
    v45[1] = (uint64_t)"$1";
    unint64_t v43 = v4;
    id v7 = v4;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = "";
    *(_WORD *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 32) = 1;
    *(_DWORD *)(a2 + 56) = 0;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = "";
    *(_WORD *)(a2 + 60) = 0;
    *(void *)(a2 + 64) = 0;
    *(_DWORD *)(a2 + 96) = 0;
    *(_WORD *)(a2 + 100) = 256;
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 85) = 0;
    *(unsigned char *)(a2 + 104) = 0;
    re::StringID::operator=((unint64_t *)a2, v45);
    uint64_t v8 = [v7 properties];
    unint64_t v9 = [v8 count];

    uint64_t v49 = 0;
    int v50 = 1;
    uint64_t v51 = 0;
    int v52 = "";
    int v53 = 0;
    __int16 v54 = 0;
    *(_DWORD *)&v57[16] = 0;
    *(_WORD *)&v57[20] = 256;
    unint64_t v56 = 0;
    *(void *)id v57 = 0;
    uint64_t v55 = 0;
    *(void *)&v57[5] = 0;
    if (v9)
    {
      unint64_t v12 = 0;
      char v44 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 77;
      while (1)
      {
        uint64_t v15 = [v7 properties];
        uint64_t v16 = [v15 objectAtIndexedSubscript:v12];

        id v17 = [v16 name];
        uint64_t v18 = (_anonymous_namespace_ *)[v17 UTF8String];
        uint64_t v47 = 0;
        uint64_t v48 = "";
        unint64_t v19 = v56;
        if (v56 <= v12) {
          break;
        }
        uint64_t v20 = *(void *)v57 + v14;
        uint64_t v21 = v47;
        uint64_t v22 = v48;
        uint64_t v47 = 0;
        uint64_t v48 = "";
        unint64_t v23 = v21 & 0xFFFFFFFFFFFFFFFELL | *(void *)(*(void *)v57 + v14 - 61) & 1;
        uint64_t v24 = *(void *)(*(void *)v57 + v14 - 53);
        *(void *)(v20 - 53) = v22;
        *(void *)&long long v67 = v23;
        *((void *)&v67 + 1) = v24;
        *(void *)(v20 - 61) = v21;
        re::StringID::destroyString((re::StringID *)&v67);
        re::StringID::destroyString((re::StringID *)&v47);

        uint64_t v58 = 0;
        uint64_t v25 = [v16 type];
        char v26 = [v25 getMTLDataType:&v58];

        if (v26)
        {
          unint64_t v19 = v56;
          if (v56 <= v12) {
            goto LABEL_35;
          }
          uint64_t v27 = v58;
          *(_WORD *)(*(void *)v57 + v14 - 41) = v58;
        }
        else
        {
          uint64_t v27 = v58;
        }
        if (v27 == 58)
        {
          uint64_t v46 = 0;
          uint64_t v28 = [v16 type];
          int v29 = [v28 getMTLTextureType:&v46];

          if (v29)
          {
            unint64_t v19 = v56;
            if (v56 <= v12) {
              goto LABEL_36;
            }
            *(_DWORD *)(*(void *)v57 + v14 - 13) = v46;
          }
          char v44 = 1;
        }
        unint64_t v19 = v56;
        if (v56 <= v12) {
          goto LABEL_30;
        }
        *(_DWORD *)(*(void *)v57 + v14 - 5) = v12;
        uint64_t v30 = [v16 type];
        int v31 = [v30 size];
        unint64_t v19 = v56;
        if (v56 <= v12) {
          goto LABEL_31;
        }
        *(_DWORD *)(*(void *)v57 + v14 - 73) = v31;

        uint64_t v32 = [v16 type];
        int v33 = [v32 alignment];
        unint64_t v19 = v56;
        if (v56 <= v12) {
          goto LABEL_32;
        }
        *(_DWORD *)(*(void *)v57 + v14 - 69) = v33;

        uint64_t v34 = [v16 type];
        int v35 = [v34 offset];
        unint64_t v19 = v56;
        if (v56 <= v12) {
          goto LABEL_33;
        }
        *(_DWORD *)(*(void *)v57 + v14 - 77) = v35;

        char v36 = [v16 visible];
        unint64_t v19 = v56;
        if (v56 <= v12) {
          goto LABEL_34;
        }
        uint64_t v37 = (unsigned char *)(*(void *)v57 + v14);
        *uint64_t v37 = v36;
        unsigned int v38 = *(_DWORD *)(v37 - 69);
        if (v38 > v13) {
          unsigned int v13 = v38;
        }

        ++v12;
        v14 += 80;
        if (v9 == v12) {
          goto LABEL_26;
        }
      }
      uint64_t v58 = 0;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      uint64_t v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 468;
      __int16 v63 = 2048;
      unint64_t v64 = v12;
      __int16 v65 = 2048;
      unint64_t v66 = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_30:
      uint64_t v47 = 0;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      uint64_t v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 468;
      __int16 v63 = 2048;
      unint64_t v64 = v12;
      __int16 v65 = 2048;
      unint64_t v66 = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_31:
      uint64_t v47 = 0;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      uint64_t v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 468;
      __int16 v63 = 2048;
      unint64_t v64 = v12;
      __int16 v65 = 2048;
      unint64_t v66 = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_32:
      uint64_t v47 = 0;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      uint64_t v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 468;
      __int16 v63 = 2048;
      unint64_t v64 = v12;
      __int16 v65 = 2048;
      unint64_t v66 = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_33:
      uint64_t v47 = 0;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      uint64_t v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 468;
      __int16 v63 = 2048;
      unint64_t v64 = v12;
      __int16 v65 = 2048;
      unint64_t v66 = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_34:
      uint64_t v47 = 0;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      uint64_t v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 468;
      __int16 v63 = 2048;
      unint64_t v64 = v12;
      __int16 v65 = 2048;
      unint64_t v66 = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_35:
      uint64_t v47 = 0;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      uint64_t v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 468;
      __int16 v63 = 2048;
      unint64_t v64 = v12;
      __int16 v65 = 2048;
      unint64_t v66 = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_36:
      uint64_t v47 = 0;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v67 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v59 = 136315906;
      uint64_t v60 = "operator[]";
      __int16 v61 = 1024;
      int v62 = 468;
      __int16 v63 = 2048;
      unint64_t v64 = v12;
      __int16 v65 = 2048;
      unint64_t v66 = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_37:
      re::internal::assertLog((re::internal *)4, v11, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 454);
      _os_crash();
      __break(1u);
    }
    unsigned int v13 = 0;
    char v44 = 0;
LABEL_26:
    v57[20] = v44;
    int v50 = v13;
    if (!v56) {
      goto LABEL_37;
    }
    HIDWORD(v49) = *(_DWORD *)(*(void *)v57 + 80 * v56 - 76) + *(_DWORD *)(*(void *)v57 + 80 * v56 - 80);
    *(_DWORD *)(a2 + 32) = v50;
    *(void *)(a2 + 24) = v49;
    uint64_t v39 = v51;
    long long v40 = v52;
    uint64_t v51 = 0;
    int v52 = "";
    uint64_t v41 = *(void *)(a2 + 40);
    uint64_t v42 = *(void *)(a2 + 48);
    *(void *)(a2 + 40) = v39;
    *(void *)(a2 + 48) = v40;
    *(void *)&long long v67 = v39 & 0xFFFFFFFFFFFFFFFELL | v41 & 1;
    *((void *)&v67 + 1) = v42;
    re::StringID::destroyString((re::StringID *)&v67);
    *(_DWORD *)(a2 + 56) = v53;
    *(_WORD *)(a2 + 60) = v54;
    re::FixedArray<re::MetalTypeInfo>::operator=((uint64_t *)(a2 + 64), &v55);
    *(void *)(a2 + 88) = *(void *)&v57[8];
    *(void *)(a2 + 94) = *(void *)&v57[14];
    re::FixedArray<re::MetalTypeInfo>::deinit(&v55);
    re::StringID::destroyString((re::StringID *)&v51);

    re::StringID::destroyString((re::StringID *)v45);
    *(_WORD *)(a2 + 16) = 1;
    uint64_t v4 = v43;
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = "";
    *(_WORD *)(a2 + 16) = 0;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_DWORD *)(a2 + 32) = 1;
    *(void *)(a2 + 48) = "";
    *(_WORD *)(a2 + 60) = 0;
    *(_WORD *)(a2 + 100) = 256;
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 85) = 0;
    *(unsigned char *)(a2 + 104) = 0;
  }
}

void re::sg::Material::getPublicUniforms(id *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = [*this uniforms];
  uint64_t v4 = (_anonymous_namespace_ *)[v3 count];
  if ([v3 count])
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      id v7 = [v3 objectAtIndex:v6];
      uint64_t v8 = [v7 name];
      v10[0] = v8;

      unint64_t v9 = a2[1];
      if (v9 <= v6)
      {
        v10[1] = 0;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v19 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v11 = 136315906;
        unint64_t v12 = "operator[]";
        __int16 v13 = 1024;
        int v14 = 468;
        __int16 v15 = 2048;
        unint64_t v16 = v6;
        __int16 v17 = 2048;
        unint64_t v18 = v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      NS::SharedPtr<MTL::Texture>::operator=((void **)(a2[2] + v5), v10);
      if (v10[0]) {

      }
      ++v6;
      v5 += 8;
    }
    while (v6 < [v3 count]);
  }
}

uint64_t re::sg::Material::hasGeometryModifierWithModelPositionOffset(id *this)
{
  id v1 = *this;
  if (objc_opt_respondsToSelector()) {
    uint64_t v2 = [v1 hasGeometryModifierOffset];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

uint64_t re::sg::CachedCompilationMaterial::CachedCompilationMaterial(uint64_t a1, id *a2)
{
  *(void *)a1 = &unk_26E7118D8;
  *(void *)(a1 + 24) = *a2;
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 76) = 0x7FFFFFFFLL;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = "";
  *(_WORD *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 1;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = "";
  *(_DWORD *)(a1 + 176) = 0;
  *(_WORD *)(a1 + 180) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 220) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 205) = 0;
  *(void *)(a1 + 200) = 0;
  *(unsigned char *)(a1 + 221) = 1;
  *(unsigned char *)(a1 + 224) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 232) = 0;
  return a1;
}

uint64_t re::sg::CachedCompilationMaterial::CachedCompilationMaterial(uint64_t a1, const __CFData *a2, id *a3)
{
  uint64_t v98 = *MEMORY[0x263EF8340];
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_26E7118D8;
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  unint64_t v6 = (void *)(a1 + 40);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 76) = 0x7FFFFFFFLL;
  *(void *)(a1 + 88) = *a3;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  id v7 = (re::StringID *)(a1 + 120);
  *(void *)(a1 + 128) = "";
  *(_WORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  uint64_t v8 = a1 + 144;
  *(_DWORD *)(a1 + 148) = 0;
  *(_DWORD *)(a1 + 152) = 1;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = "";
  *(_DWORD *)(a1 + 176) = 0;
  *(_WORD *)(a1 + 180) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 220) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 205) = 0;
  *(void *)(a1 + 232) = 0;
  unint64_t v9 = (uint64_t *)(a1 + 232);
  *(unsigned char *)(a1 + 221) = 1;
  *(unsigned char *)(a1 + 224) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  BytePtr = CFDataGetBytePtr(a2);
  Length = (_anonymous_namespace_ *)CFDataGetLength(a2);
  *(void *)&long long v92 = BytePtr;
  *((void *)&v92 + 1) = Length;
  LODWORD(v94) = -1;
  BYTE4(v94) = 0;
  *((void *)&v94 + 1) = 0;
  *(void *)&long long v93 = BytePtr;
  *((void *)&v93 + 1) = (char *)Length + (void)BytePtr;
  unint64_t v12 = (uint64_t *)re::snapshot::DecoderOPACK::beginObject((re::snapshot::DecoderOPACK *)&v92, 0);
  if (v12)
  {
    if (re::snapshot::DecoderOPACK::advanceTo<1>((uint64_t)&v92))
    {
      unint64_t v86 = 0;
      memset(buf, 0, 36);
      *(void *)&buf[36] = 0x7FFFFFFFLL;
      uint64_t v13 = *(unsigned int *)(a1 + 72);
      if (v13)
      {
        uint64_t v14 = 0;
        __int16 v15 = *(int **)(a1 + 56);
        while (1)
        {
          int v16 = *v15;
          v15 += 8;
          if (v16 < 0) {
            break;
          }
          if (v13 == ++v14)
          {
            LODWORD(v14) = *(_DWORD *)(a1 + 72);
            break;
          }
        }
      }
      else
      {
        LODWORD(v14) = 0;
      }
      if (v13 != v14)
      {
        uint64_t v17 = v14;
        uint64_t v18 = *(void *)(a1 + 56);
        do
        {
          re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)buf, (StringID *)(v18 + 32 * v17 + 8));
          uint64_t v18 = *(void *)(a1 + 56);
          if (*(_DWORD *)(a1 + 72) <= (v14 + 1)) {
            int v19 = v14 + 1;
          }
          else {
            int v19 = *(_DWORD *)(a1 + 72);
          }
          int v20 = v14;
          while (1)
          {
            uint64_t v17 = (v20 + 1);
            if (v19 - 1 == v20) {
              break;
            }
            ++v20;
            LODWORD(v14) = v17;
            if ((*(_DWORD *)(v18 + 32 * v17) & 0x80000000) != 0) {
              goto LABEL_19;
            }
          }
          LODWORD(v14) = v19;
LABEL_19:
          ;
        }
        while (v13 != v14);
      }
      if (re::snapshot::DecoderOPACK::beginDictionary((re::snapshot::DecoderOPACK *)&v92, &v86))
      {
        if (v86 != -1) {
          re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1 + 40, v86);
        }
        while (!re::snapshot::DecoderOPACK::endDictionary((re::snapshot::DecoderOPACK *)&v92, &v86))
        {
          *(void *)&v85.char var0 = 0;
          v85.var1 = "";
          unint64_t v89 = 0;
          long long v21 = (_anonymous_namespace_ *)re::snapshot::DecoderOPACK::beginString((re::snapshot::DecoderOPACK *)&v92, &v89);
          if (v21)
          {
            size_t v22 = v89;
            long long v23 = (const char *)v93;
            unint64_t v24 = *((void *)&v93 + 1) - v93;
            if (*((void *)&v93 + 1) - (void)v93 >= v89) {
              unint64_t v24 = v89;
            }
            *(void *)&long long v93 = v93 + v24;
            id v87 = 0;
            uint64_t v88 = "";
            unint64_t v25 = (unint64_t)v87;
            char v26 = (char *)v88;
            id v87 = 0;
            uint64_t v88 = "";
            char var0 = (char)v85.var0;
            var1 = v85.var1;
            *(void *)&v85.char var0 = v25;
            v85.var1 = v26;
            unint64_t Integer = v25 & 0xFFFFFFFFFFFFFFFELL | var0 & 1;
            float v91 = var1;
            re::StringID::destroyString((re::StringID *)&Integer);
            re::StringID::destroyString((re::StringID *)&v87);
          }
          re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)buf, &v85);
          int v29 = (void *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 40, &v85);
          if (v29)
          {
            *int v29 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)&v92, 0);
          }
          else
          {
            unint64_t Integer = 0;
            unint64_t Integer = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)&v92, 0);
            re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(a1 + 40, &v85, &Integer);
          }
          re::StringID::destroyString((re::StringID *)&v85);
        }
      }
      int v30 = *(_DWORD *)&buf[32];
      uint64_t v31 = 0;
      if (*(_DWORD *)&buf[32])
      {
        uint64_t v32 = *(int **)&buf[16];
        while (1)
        {
          int v33 = *v32;
          v32 += 6;
          if (v33 < 0) {
            break;
          }
          if (*(unsigned int *)&buf[32] == ++v31)
          {
            LODWORD(v31) = *(_DWORD *)&buf[32];
            break;
          }
        }
      }
      if (*(_DWORD *)&buf[32] != v31)
      {
        uint64_t v34 = v31;
        uint64_t v35 = *(void *)&buf[16];
        unsigned int v36 = *(_DWORD *)&buf[32];
        int v84 = *(_DWORD *)&buf[32];
        do
        {
          if (*v6)
          {
            uint64_t v37 = (void *)(v35 + 24 * v34 + 8);
            unint64_t v38 = 0xBF58476D1CE4E5B9 * ((*v37 >> 31) ^ (*v37 >> 1));
            unint64_t v39 = ((0x94D049BB133111EBLL * (v38 ^ (v38 >> 27))) ^ ((0x94D049BB133111EBLL * (v38 ^ (v38 >> 27))) >> 31))
                % *(unsigned int *)(a1 + 64);
            uint64_t v40 = *(void *)(a1 + 48);
            uint64_t v41 = *(unsigned int *)(v40 + 4 * v39);
            if (v41 != 0x7FFFFFFF)
            {
              uint64_t v42 = *(void *)(a1 + 56);
              if (re::StringID::operator==((void *)(v42 + 32 * v41 + 8), v37))
              {
                *(_DWORD *)(v40 + 4 * v39) = *(_DWORD *)(v42 + 32 * v41) & 0x7FFFFFFF;
LABEL_46:
                uint64_t v44 = *(void *)(a1 + 56);
                uint64_t v45 = (int *)(v44 + 32 * v41);
                int v46 = *v45;
                unint64_t v6 = (void *)(a1 + 40);
                int v30 = v84;
                if (*v45 < 0)
                {
                  *uint64_t v45 = v46 & 0x7FFFFFFF;
                  re::StringID::destroyString((re::StringID *)(v45 + 2));
                  int v30 = v84;
                  uint64_t v44 = *(void *)(a1 + 56);
                  int v46 = *(_DWORD *)(v44 + 32 * v41);
                }
                *(_DWORD *)(v44 + 32 * v41) = *(_DWORD *)(a1 + 76) | v46 & 0x80000000;
                --*(_DWORD *)(a1 + 68);
                int v47 = *(_DWORD *)(a1 + 80) + 1;
                *(_DWORD *)(a1 + 76) = v41;
                *(_DWORD *)(a1 + 80) = v47;
                unsigned int v36 = *(_DWORD *)&buf[32];
                uint64_t v35 = *(void *)&buf[16];
              }
              else
              {
                while (1)
                {
                  uint64_t v43 = v41;
                  uint64_t v41 = *(_DWORD *)(v42 + 32 * v41) & 0x7FFFFFFF;
                  if (v41 == 0x7FFFFFFF) {
                    break;
                  }
                  if (re::StringID::operator==((void *)(v42 + 32 * v41 + 8), v37))
                  {
                    *(_DWORD *)(v42 + 32 * v43) = *(_DWORD *)(v42 + 32 * v43) & 0x80000000 | *(_DWORD *)(v42 + 32 * v41) & 0x7FFFFFFF;
                    goto LABEL_46;
                  }
                }
                unint64_t v6 = (void *)(a1 + 40);
                int v30 = v84;
              }
            }
          }
          if (v36 <= (int)v31 + 1) {
            unsigned int v48 = v31 + 1;
          }
          else {
            unsigned int v48 = v36;
          }
          while (1)
          {
            uint64_t v34 = (v31 + 1);
            if (v48 - 1 == v31) {
              break;
            }
            LODWORD(v31) = v31 + 1;
            unsigned int v49 = v34;
            if ((*(_DWORD *)(v35 + 24 * v34) & 0x80000000) != 0) {
              goto LABEL_57;
            }
          }
          unsigned int v49 = v48;
LABEL_57:
          LODWORD(v31) = v49;
        }
        while (v30 != v49);
      }
      re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)buf);
      if ((unint64_t)v93 >= *((void *)&v93 + 1))
      {
        int v51 = 0x7FFFFFFF;
        unint64_t v9 = (uint64_t *)(a1 + 232);
        id v7 = (re::StringID *)(a1 + 120);
        uint64_t v8 = a1 + 144;
      }
      else
      {
        int v50 = *(unsigned __int8 *)v93;
        unint64_t v9 = (uint64_t *)(a1 + 232);
        id v7 = (re::StringID *)(a1 + 120);
        uint64_t v8 = a1 + 144;
        if (v50 == 3)
        {
          int v51 = 0x7FFFFFFF;
        }
        else if ((v50 - 7) > 0x28)
        {
          int v51 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)&v92, 0x7FFFFFFFLL);
        }
        else
        {
          *(void *)&long long v93 = v93 + 1;
          int v51 = v50 - 8;
        }
      }
      LODWORD(v94) = v51;
    }
    if (re::snapshot::DecoderOPACK::advanceTo<2>((uint64_t)&v92))
    {
      if (re::snapshot::DecoderOPACK::beginObject((re::snapshot::DecoderOPACK *)&v92, 0))
      {
        if (re::snapshot::DecoderOPACK::advanceTo<1>((uint64_t)&v92))
        {
          id v87 = 0;
          int v52 = (_anonymous_namespace_ *)re::snapshot::DecoderOPACK::beginString((re::snapshot::DecoderOPACK *)&v92, (unint64_t *)&v87);
          if (v52)
          {
            id v53 = v87;
            __int16 v54 = (const char *)v93;
            uint64_t v55 = (char *)(*((void *)&v93 + 1) - v93);
            if (*((void *)&v93 + 1) - (void)v93 >= (unint64_t)v87) {
              uint64_t v55 = (char *)v87;
            }
            *(void *)&long long v93 = &v55[v93];
            unint64_t Integer = 0;
            float v91 = "";
            unint64_t v56 = Integer;
            id v57 = v91;
            unint64_t Integer = 0;
            float v91 = "";
            uint64_t v58 = *(void *)(a1 + 120);
            uint64_t v59 = *(void *)(a1 + 128);
            *(void *)(a1 + 120) = v56;
            *(void *)(a1 + 128) = v57;
            *(void *)__n128 buf = v56 & 0xFFFFFFFFFFFFFFFELL | v58 & 1;
            *(void *)&buf[8] = v59;
            re::StringID::destroyString((re::StringID *)buf);
            re::StringID::destroyString((re::StringID *)&Integer);
          }
          if ((unint64_t)v93 >= *((void *)&v93 + 1) || (int v60 = *(unsigned __int8 *)v93, v60 == 3))
          {
            int v61 = 0x7FFFFFFF;
          }
          else if ((v60 - 7) > 0x28)
          {
            int v61 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)&v92, 0x7FFFFFFFLL);
          }
          else
          {
            *(void *)&long long v93 = v93 + 1;
            int v61 = v60 - 8;
          }
          LODWORD(v94) = v61;
        }
        if (re::snapshot::DecoderOPACK::advanceTo<2>((uint64_t)&v92))
        {
          *(_WORD *)(a1 + 136) = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)&v92, 0);
          if ((unint64_t)v93 >= *((void *)&v93 + 1) || (int v62 = *(unsigned __int8 *)v93, v62 == 3))
          {
            int v63 = 0x7FFFFFFF;
          }
          else if ((v62 - 7) > 0x28)
          {
            int v63 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)&v92, 0x7FFFFFFFLL);
          }
          else
          {
            *(void *)&long long v93 = v93 + 1;
            int v63 = v62 - 8;
          }
          LODWORD(v94) = v63;
        }
        if (re::snapshot::DecoderOPACK::advanceTo<3>((uint64_t)&v92))
        {
          if (re::snapshot::DecoderOPACK::beginObject((re::snapshot::DecoderOPACK *)&v92, 0))
          {
            re::snapshotMapFields<re::snapshot::Reader<re::snapshot::DecoderOPACK>>((uint64_t)&v92, v8);
            re::snapshot::DecoderOPACK::endObject((uint64_t *)&v92, 0);
          }
          if ((unint64_t)v93 >= *((void *)&v93 + 1) || (int v64 = *(unsigned __int8 *)v93, v64 == 3))
          {
            int v65 = 0x7FFFFFFF;
          }
          else if ((v64 - 7) > 0x28)
          {
            int v65 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)&v92, 0x7FFFFFFFLL);
          }
          else
          {
            *(void *)&long long v93 = v93 + 1;
            int v65 = v64 - 8;
          }
          LODWORD(v94) = v65;
        }
        re::snapshot::DecoderOPACK::endObject((uint64_t *)&v92, 0);
      }
      if ((unint64_t)v93 >= *((void *)&v93 + 1) || (int v66 = *(unsigned __int8 *)v93, v66 == 3))
      {
        int v67 = 0x7FFFFFFF;
      }
      else if ((v66 - 7) > 0x28)
      {
        int v67 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)&v92, 0x7FFFFFFFLL);
      }
      else
      {
        *(void *)&long long v93 = v93 + 1;
        int v67 = v66 - 8;
      }
      LODWORD(v94) = v67;
    }
    unint64_t v12 = re::snapshot::DecoderOPACK::endObject((uint64_t *)&v92, 0);
  }
  if (BYTE4(v94))
  {
    long long v68 = *re::graphicsLogObjects((re *)v12);
    if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_error_impl(&dword_233120000, v68, OS_LOG_TYPE_ERROR, "Error decoding shader graph info.", buf, 2u);
    }
    re::snapshot::Decoder::logInput((re::snapshot::Decoder *)&v92);
  }
  unint64_t v69 = *(void *)v7;
  if (*(void *)v7 < 0xFFFFFFFFFFFFFFFELL || (v69 & 1) != 0)
  {
    if (v69 > 1) {
      goto LABEL_105;
    }
    long long v70 = *(unsigned char **)(a1 + 128);
    if (!v70) {
      goto LABEL_105;
    }
  }
  else
  {
    long long v70 = *(unsigned char **)(a1 + 128);
  }
  if (!*v70)
  {
    long long v71 = *re::graphicsLogObjects((re *)v12);
    if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v72 = *(void *)(a1 + 192);
      *(_DWORD *)__n128 buf = 134217984;
      *(void *)&buf[4] = v72;
      _os_log_impl(&dword_233120000, v71, OS_LOG_TYPE_DEFAULT, "No name on TypedArgument with %zu members", buf, 0xCu);
    }
    re::StringID::destroyString(v7);
    *(void *)(a1 + 120) = 0x1A31080F9ALL;
    *(void *)(a1 + 128) = "<empty>";
  }
LABEL_105:
  if (!BYTE4(v94))
  {
    unint64_t v73 = *(unsigned int *)(a1 + 68);
    uint64_t v74 = *(unsigned int *)(a1 + 72);
    if (v74)
    {
      uint64_t v75 = 0;
      int v76 = *(int **)(a1 + 56);
      while (1)
      {
        int v77 = *v76;
        v76 += 8;
        if (v77 < 0) {
          break;
        }
        if (v74 == ++v75)
        {
          LODWORD(v75) = *(_DWORD *)(a1 + 72);
          break;
        }
      }
    }
    else
    {
      LODWORD(v75) = 0;
    }
    if (v74 != v75)
    {
      unint64_t v78 = 0;
      uint64_t v79 = v75;
      do
      {
        id v87 = (id)[NSString stringWithUTF8String:*(void *)(*(void *)(a1 + 56) + 32 * v79 + 16)];
        unint64_t v80 = *(void *)(a1 + 240);
        if (v80 <= v78)
        {
          unint64_t Integer = 0;
          long long v95 = 0u;
          long long v96 = 0u;
          long long v93 = 0u;
          long long v94 = 0u;
          long long v92 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)__n128 buf = 136315906;
          *(void *)&buf[4] = "operator[]";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 468;
          *(_WORD *)&unsigned char buf[18] = 2048;
          *(void *)&buf[20] = v78;
          *(_WORD *)&buf[28] = 2048;
          *(void *)&buf[30] = v80;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        NS::SharedPtr<MTL::Texture>::operator=((void **)(*(void *)(a1 + 248) + 8 * v78), &v87);
        if (v87) {

        }
        ++v78;
        if (*(_DWORD *)(a1 + 72) <= (v75 + 1)) {
          int v81 = v75 + 1;
        }
        else {
          int v81 = *(_DWORD *)(a1 + 72);
        }
        while (1)
        {
          uint64_t v79 = (v75 + 1);
          if (v81 - 1 == v75) {
            break;
          }
          LODWORD(v75) = v75 + 1;
          int v82 = v79;
          if ((*(_DWORD *)(*(void *)(a1 + 56) + 32 * v79) & 0x80000000) != 0) {
            goto LABEL_124;
          }
        }
        int v82 = v81;
LABEL_124:
        LODWORD(v75) = v82;
      }
      while (v74 != v82);
    }
  }
  return a1;
}

void re::sg::CachedCompilationMaterial::~CachedCompilationMaterial(re::sg::CachedCompilationMaterial *this)
{
  *(void *)this = &unk_26E7118D8;
  uint64_t v2 = (void *)*((void *)this + 3);
  *((void *)this + 3) = 0;

  uint64_t v3 = (void *)*((void *)this + 13);
  *((void *)this + 13) = 0;

  re::FixedArray<NS::SharedPtr<NS::String>>::deinit((void *)this + 29);
  re::FixedArray<re::MetalTypeInfo>::deinit((void *)this + 23);
  re::StringID::destroyString((re::sg::CachedCompilationMaterial *)((char *)this + 160));
  re::StringID::destroyString((re::sg::CachedCompilationMaterial *)((char *)this + 120));

  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 5);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::sg::CachedCompilationMaterial::~CachedCompilationMaterial(this);
  JUMPOUT(0x237DBCBD0);
}

void re::sg::CachedCompilationMaterial::ensureFullMaterialIsDeserialized(re::sg::CachedCompilationMaterial *this)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  id v1 = (void **)((char *)this + 24);
  if (!*((void *)this + 3))
  {
    uint64_t v2 = (void *)*((void *)this + 11);
    if (v2)
    {
      id v3 = v2;
      id v10 = 0;
      uint64_t v4 = [MEMORY[0x263F6BC70] materialWithArchiveData:v3 error:&v10];
      id v5 = v10;
      re::ObjCObject::operator=(v1, v4);

      if (v5)
      {
        id v7 = (id)*re::graphicsLogObjects(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          uint64_t v8 = [v5 debugDescription];
          if (v8)
          {
            unint64_t v9 = [v5 debugDescription];
          }
          else
          {
            unint64_t v9 = @"<nil>";
          }
          *(_DWORD *)__n128 buf = 138412290;
          unint64_t v12 = v9;
          _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Failed to create shader graph material from payload. Error: %@", buf, 0xCu);
          if (v8) {
        }
          }
      }
    }
  }
}

void re::sg::CachedCompilationMaterial::compileMetalLibrary(uint64_t a1@<X0>, id *a2@<X1>, CGColorSpace *a3@<X2>, id *a4@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  char v24 = 0;
  CFStringRef Name = CGColorSpaceGetName(a3);
  ColorGamutFromCGColorSpaceCFStringRef Name = re::ColorHelpers::getColorGamutFromCGColorSpaceName(Name, &v24);
  if (ColorGamutFromCGColorSpaceName)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
    if (*(void *)(a1 + 104) && v24 == *(unsigned char *)(a1 + 96))
    {
      *a4 = *(id *)(a1 + 104);
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
      re::sg::CachedCompilationMaterial::getMaterial((re::sg::CachedCompilationMaterial *)a1, &v23);
      id v11 = *a2;
      unint64_t v12 = (void *)[objc_alloc(MEMORY[0x263F6BC68]) initWithWorkingColorSpace:a3];
      uint64_t v13 = (void *)MEMORY[0x263F6BC70];
      uint64_t v14 = v23;
      id v25 = 0;
      id v15 = v11;
      int v16 = [v13 metalLibraryFromMaterial:v14 forDevice:v15 options:v12 error:&v25];
      id v17 = v25;

      id v18 = v16;
      *a4 = v18;

      if (!v18)
      {
        int v20 = *re::graphicsLogObjects(v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          long long v21 = v20;
          size_t v22 = [v14 name];
          *(_DWORD *)__n128 buf = 138412546;
          uint64_t v27 = v22;
          __int16 v28 = 2112;
          id v29 = v17;
          _os_log_error_impl(&dword_233120000, v21, OS_LOG_TYPE_ERROR, "ShaderGraph service could not compile shader graph asset (%@). Error: %@", buf, 0x16u);
        }
      }

      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
      *(unsigned char *)(a1 + 96) = v24;
      re::ObjCObject::operator=((id *)(a1 + 104), a4);
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
    }
  }
  else
  {
    id v10 = *re::graphicsLogObjects((re *)ColorGamutFromCGColorSpaceName);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__n128 buf = 138412290;
      uint64_t v27 = a3;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Attempted to generate a metal library from a ShaderGraphMaterial with a unsupported color space %@", buf, 0xCu);
    }
    *a4 = 0;
  }
}

void re::sg::CachedCompilationMaterial::getMaterial(re::sg::CachedCompilationMaterial *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (os_unfair_lock_s *)((char *)this + 32);
  os_unfair_lock_lock((os_unfair_lock_t)this + 8);
  re::sg::CachedCompilationMaterial::ensureFullMaterialIsDeserialized(this);
  *a2 = *((id *)this + 3);
  os_unfair_lock_unlock(v4);
}

void re::sg::CachedCompilationMaterial::getCustomUniformsArgument(re::sg::CachedCompilationMaterial *this@<X0>, uint64_t a2@<X8>)
{
  re::sg::CachedCompilationMaterial::getMaterial(this, &v28);
  unint64_t v4 = *((void *)this + 15);
  if (v4 >= 0xFFFFFFFFFFFFFFFELL && (*((void *)this + 15) & 1) == 0)
  {
    unint64_t v6 = (unsigned char *)*((void *)this + 16);
  }
  else
  {
    if (v4 > 1) {
      goto LABEL_14;
    }
    unint64_t v6 = (unsigned char *)*((void *)this + 16);
    if (!v6) {
      goto LABEL_14;
    }
  }
  if (*v6) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = v28 == 0;
  }
  if (!v7)
  {
    re::sg::Material::getCustomUniformsArgument(&v28, (uint64_t)&v16);
    uint64_t v8 = v16;
    unint64_t v9 = v17;
    uint64_t v16 = 0;
    id v17 = "";
    uint64_t v10 = *((void *)this + 15);
    uint64_t v11 = *((void *)this + 16);
    *((void *)this + 15) = v8;
    *((void *)this + 16) = v9;
    unint64_t v29 = v8 & 0xFFFFFFFFFFFFFFFELL | v10 & 1;
    uint64_t v30 = v11;
    re::StringID::destroyString((re::StringID *)&v29);
    *((_WORD *)this + 68) = v18;
    *((void *)this + 18) = v19;
    *((_DWORD *)this + 38) = v20;
    uint64_t v12 = v21;
    uint64_t v13 = v22;
    uint64_t v21 = 0;
    size_t v22 = "";
    uint64_t v14 = *((void *)this + 20);
    uint64_t v15 = *((void *)this + 21);
    *((void *)this + 20) = v12;
    *((void *)this + 21) = v13;
    unint64_t v29 = v12 & 0xFFFFFFFFFFFFFFFELL | v14 & 1;
    uint64_t v30 = v15;
    re::StringID::destroyString((re::StringID *)&v29);
    *((_DWORD *)this + 44) = v23;
    *((_WORD *)this + 90) = v24;
    re::FixedArray<re::MetalTypeInfo>::operator=((uint64_t *)this + 23, v25);
    *((void *)this + 26) = v26[0];
    *(void *)((char *)this + 214) = *(void *)((char *)v26 + 6);
    *((unsigned char *)this + 224) = v27;
    re::FixedArray<re::MetalTypeInfo>::deinit(v25);
    re::StringID::destroyString((re::StringID *)&v21);
    re::StringID::destroyString((re::StringID *)&v16);
  }
LABEL_14:
  re::StringID::StringID((re::StringID *)a2, (const StringID *)((char *)this + 120));
  *(_WORD *)(a2 + 16) = *((_WORD *)this + 68);
  *(void *)(a2 + 24) = *((void *)this + 18);
  *(_DWORD *)(a2 + 32) = *((_DWORD *)this + 38);
  re::StringID::StringID((re::StringID *)(a2 + 40), (const StringID *)this + 10);
  *(_DWORD *)(a2 + 56) = *((_DWORD *)this + 44);
  *(_WORD *)(a2 + 60) = *((_WORD *)this + 90);
  re::FixedArray<re::MetalTypeInfo>::FixedArray((void *)(a2 + 64), (uint64_t)this + 184);
  *(void *)(a2 + 88) = *((void *)this + 26);
  *(void *)(a2 + 94) = *(void *)((char *)this + 214);
  *(unsigned char *)(a2 + 104) = *((unsigned char *)this + 224);
}

uint64_t *re::sg::CachedCompilationMaterial::getPublicUniforms@<X0>(re::sg::CachedCompilationMaterial *this@<X0>, uint64_t *a2@<X8>)
{
  id v3 = (uint64_t *)((char *)this + 232);
  if (!*((void *)this + 30))
  {
    re::sg::CachedCompilationMaterial::getMaterial(this, &v5);
    re::sg::Material::getPublicUniforms(&v5, v6);
    re::FixedArray<float>::operator=(v3, v6);
    re::FixedArray<NS::SharedPtr<NS::String>>::deinit(v6);
  }
  return re::FixedArray<NS::SharedPtr<NS::String>>::FixedArray(a2, (uint64_t)v3);
}

BOOL re::sg::CachedCompilationMaterial::encode(re::sg::CachedCompilationMaterial *this, __CFData *a2)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  re::sg::CachedCompilationMaterial::getMaterial(this, &v48);
  MutableBytePtr = CFDataGetMutableBytePtr(a2);
  id v5 = (_anonymous_namespace_ *)CFDataGetLength(a2);
  uint64_t v37 = MutableBytePtr;
  unsigned int length = 0;
  unsigned int length_4 = v5;
  uint64_t v40 = a2;
  uint64_t v41 = re::sg::CachedCompilationMaterial::encode(__CFData *)const::$_0::__invoke;
  unint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  re::DynamicString::setCapacity(&v42, 0);
  int v46 = 6;
  uint64_t v47 = 0;
  re::snapshot::EncoderOPACK::beginObject((unsigned int *)&v37);
  uint64_t v6 = length;
  if (length >= length_4)
  {
    re::snapshot::EncoderOPACK::writeInteger((unsigned int *)&v37, 1);
  }
  else
  {
    ++length;
    v37[v6] = 9;
  }
  id v26 = v48;
  BOOL v7 = [v48 uniforms];
  re::snapshot::EncoderOPACK::beginDictionary((unsigned int *)&v37, [v7 count]);
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id v8 = v7;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v33 objects:v49 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v34;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v34 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = *(void **)(*((void *)&v33 + 1) + 8 * i);
        id v14 = [v13 name];
        uint64_t v15 = (const char *)[v14 UTF8String];
        uint64_t v16 = [v13 name];
        re::snapshot::EncoderOPACK::serializeString((unsigned int *)&v37, v15, [v16 length]);

        re::snapshot::EncoderOPACK::writeInteger((unsigned int *)&v37, [v13 type]);
      }
      uint64_t v10 = [v8 countByEnumeratingWithState:&v33 objects:v49 count:16];
    }
    while (v10);
  }

  re::snapshot::EncoderOPACK::endArray((unsigned int *)&v37, [v8 count]);
  re::sg::CachedCompilationMaterial::getCustomUniformsArgument(this, (uint64_t)v27);
  uint64_t v17 = length;
  if (length >= length_4)
  {
    re::snapshot::EncoderOPACK::writeInteger((unsigned int *)&v37, 2);
  }
  else
  {
    ++length;
    v37[v17] = 10;
  }
  re::snapshot::EncoderOPACK::beginObject((unsigned int *)&v37);
  uint64_t v18 = length;
  if (length >= length_4)
  {
    re::snapshot::EncoderOPACK::writeInteger((unsigned int *)&v37, 1);
  }
  else
  {
    ++length;
    v37[v18] = 9;
  }
  size_t v19 = strlen(__s);
  re::snapshot::EncoderOPACK::serializeString((unsigned int *)&v37, __s, v19);
  uint64_t v20 = length;
  if (length >= length_4)
  {
    re::snapshot::EncoderOPACK::writeInteger((unsigned int *)&v37, 2);
  }
  else
  {
    ++length;
    v37[v20] = 10;
  }
  re::snapshot::EncoderOPACK::writeInteger((unsigned int *)&v37, (unsigned __int16)v29);
  uint64_t v21 = length;
  if (length >= length_4)
  {
    re::snapshot::EncoderOPACK::writeInteger((unsigned int *)&v37, 3);
  }
  else
  {
    ++length;
    v37[v21] = 11;
  }
  re::snapshot::EncoderOPACK::beginObject((unsigned int *)&v37);
  re::snapshotMapFields<re::snapshot::Writer<re::snapshot::EncoderOPACK>>((unsigned int *)&v37, v30);
  re::snapshot::EncoderOPACK::endObject((unsigned int *)&v37);
  re::snapshot::EncoderOPACK::endObject((unsigned int *)&v37);
  re::FixedArray<re::MetalTypeInfo>::deinit(v32);
  re::StringID::destroyString((re::StringID *)&v31);
  re::StringID::destroyString((re::StringID *)v27);
  re::snapshot::EncoderOPACK::endObject((unsigned int *)&v37);
  CFDataSetLength(a2, length);
  unint64_t v22 = v43;

  if (v42 && (v43 & 1) != 0) {
    (*(void (**)(void))(*v42 + 40))();
  }
  unint64_t v23 = v22 >> 1;
  if ((v22 & 1) == 0) {
    unint64_t v23 = v22 >> 1;
  }
  BOOL v24 = v23 == 0;

  return v24;
}

UInt8 *re::sg::CachedCompilationMaterial::encode(__CFData *)const::$_0::__invoke(const __CFData *a1, uint64_t a2, uint64_t a3)
{
  CFIndex Length = CFDataGetLength(a1);
  if (2 * Length <= a3) {
    CFIndex v6 = a3;
  }
  else {
    CFIndex v6 = 2 * Length;
  }
  CFDataSetLength(a1, v6);
  MutableBytePtr = CFDataGetMutableBytePtr(a1);
  CFDataGetLength(a1);
  return MutableBytePtr;
}

uint64_t *re::snapshot::DecoderRaw::operator>><unsigned int>(uint64_t *result, _DWORD *a2)
{
  uint64_t v2 = (_DWORD *)result[2];
  unint64_t v3 = result[3] - (void)v2;
  if (v3 <= 3) {
    return re::snapshot::Decoder::error((const char **)result, "overrun: attempted to read %zu bytes, only %zu remaining", 4uLL, v3);
  }
  *a2 = *v2;
  result[2] += 4;
  return result;
}

uint64_t *re::snapshot::DecoderRaw::operator>><unsigned short>(uint64_t *result, _WORD *a2)
{
  uint64_t v2 = (_WORD *)result[2];
  unint64_t v3 = result[3] - (void)v2;
  if (v3 <= 1) {
    return re::snapshot::Decoder::error((const char **)result, "overrun: attempted to read %zu bytes, only %zu remaining", 2uLL, v3);
  }
  *a2 = *v2;
  result[2] += 2;
  return result;
}

uint64_t *re::FixedArray<NS::SharedPtr<NS::String>>::FixedArray(uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(void *)a2;
  if (v4)
  {
    re::FixedArray<unsigned long>::init<>(a1, v4, *(void *)(a2 + 8));
    re::FixedArray<NS::SharedPtr<NS::String>>::copy((uint64_t)a1, a2);
  }
  return a1;
}

uint64_t re::FixedArray<NS::SharedPtr<NS::String>>::copy(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (v2 == *(void *)(a2 + 8))
  {
    if (v2)
    {
      unint64_t v3 = *(void ***)(a2 + 16);
      uint64_t v4 = *(void ***)(result + 16);
      uint64_t v5 = 8 * v2;
      do
      {
        uint64_t result = (uint64_t)NS::SharedPtr<MTL::Texture>::operator=(v4++, v3++);
        v5 -= 8;
      }
      while (v5);
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TensionDeformer::init(uint64_t this, re::RenderManager *a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(this + 32))
  {
    uint64_t v3 = this;
    *(unsigned char *)(this + 32) = 1;
    *(void *)(this + 8) = *((void *)a2 + 4);
    if (*((unsigned char *)a2 + 261))
    {
      char v4 = 0;
      uint64_t v5 = 0;
      char v6 = 1;
      do
      {
        char v7 = v6;
        char v28 = v4 & 1;
        v17[0] = 0;
        uint64_t v23 = 0;
        memset(v21, 0, sizeof(v21));
        int v22 = 0;
        char v24 = 0;
        char v25 = 0;
        uint64_t v26 = 0;
        char v27 = 0;
        memset(v12, 0, sizeof(v12));
        uint64_t v9 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v12, 0);
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        if (!v15)
        {
          uint64_t v29 = 0;
          long long v41 = 0u;
          long long v42 = 0u;
          long long v39 = 0u;
          long long v40 = 0u;
          long long v38 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v30 = 136315906;
          uint64_t v31 = "operator[]";
          __int16 v32 = 1024;
          int v33 = 468;
          __int16 v34 = 2048;
          uint64_t v35 = 0;
          __int16 v36 = 2048;
          uint64_t v37 = 0;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        *uint64_t v16 = v28;
        int v13 = 53;
        re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v21, (re::DynamicString *)v12);
        id v10 = objc_msgSend(objc_msgSend(MEMORY[0x263F128B0], sel_alloc), sel_init);
        objc_msgSend(v10, sel_setConstantValue_type_atIndex_, &v28, 53, 0);
        ComputePipelineState = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)v17);
        NS::SharedPtr<MTL::Texture>::operator=((void **)(v3 + 8 * v5 + 16), ComputePipelineState);
        if (v10) {

        }
        if (v14)
        {
          if (v15)
          {
            (*(void (**)(void))(*(void *)v14 + 40))();
            uint64_t v15 = 0;
            uint64_t v16 = 0;
          }
          uint64_t v14 = 0;
        }
        if (*(void *)&v12[0] && (BYTE8(v12[0]) & 1) != 0) {
          (*(void (**)(void))(**(void **)&v12[0] + 40))();
        }
        re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v21);
        this = v20[0];
        if (v20[0])
        {
          if (v20[1]) {
            this = (*(uint64_t (**)(void))(*(void *)v20[0] + 40))();
          }
          memset(v20, 0, sizeof(v20));
        }
        if (v17[0])
        {
          this = v18;
          if (v18)
          {
            if (v19) {
              this = (*(uint64_t (**)(void))(*(void *)v18 + 40))();
            }
          }
        }
        char v6 = 0;
        char v4 = 1;
        uint64_t v5 = 1;
      }
      while ((v7 & 1) != 0);
      *(unsigned char *)(v3 + 33) = 1;
    }
  }
  return this;
}

double re::TensionDeformer::addDeformationInstance@<D0>(re::TensionDeformer *this@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  if (*a2)
  {
    BOOL v3 = 0;
  }
  else if (*((unsigned char *)this + 32))
  {
    BOOL v3 = *((unsigned char *)this + 33) != 0;
  }
  else
  {
    BOOL v3 = 1;
  }
  *(void *)a3 = 0xFFFFFFFFLL;
  *(void *)&double result = 3;
  *(_OWORD *)(a3 + 8) = xmmword_2343E1D30;
  *(unsigned char *)(a3 + 24) = v3;
  *(void *)(a3 + 32) = -1;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  return result;
}

uint64_t re::TensionDeformer::allocateBuffers(re *a1, re::FrameContext *a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v5 = a4;
  uint64_t v90 = *MEMORY[0x263EF8340];
  unint64_t v7 = *a4;
  unint64_t v8 = *(void *)(*a4 + 48);
  re::globalAllocators(a1);
  uint64_t v9 = *((void *)a2 + 3);
  uint64_t v11 = (char **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 24, 8);
  int v60 = a2;
  uint64_t v12 = (char *)*((void *)a2 + 3);
  v11[1] = (char *)v8;
  _OWORD v11[2] = 0;
  *uint64_t v11 = v12;
  if (v8)
  {
    if (v8 >= 0x492492492492493)
    {
LABEL_45:
      re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 56, v8);
      _os_crash();
      __break(1u);
      goto LABEL_46;
    }
    uint64_t v12 = (char *)(*(uint64_t (**)(char *, unint64_t, uint64_t))(*(void *)v12 + 32))(v12, 56 * v8, 8);
    _OWORD v11[2] = v12;
    if (!v12)
    {
LABEL_46:
      re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
LABEL_47:
      re::internal::assertLog((re::internal *)5, v48, "assertion failure: '%s' (%s:line %i) Invalid deformation execution mode: %u.", "!\"Unreachable code\"", "allocateBuffers", 144, v49);
      _os_crash();
      __break(1u);
    }
    uint64_t v14 = v12;
    if (v8 != 1)
    {
      bzero(v12, 56 * v8 - 56);
      v14 += 56 * v8 - 56;
    }
    *((void *)v14 + 6) = 0;
    *((_OWORD *)v14 + 1) = 0u;
    *((_OWORD *)v14 + 2) = 0u;
    *(_OWORD *)uint64_t v14 = 0u;
  }
  *((void *)&v86 + 1) = re::globalAllocators((re *)v12)[2];
  *(void *)&long long v87 = &v85;
  *(void *)&long long v85 = &unk_26E711938;
  uint64_t v15 = (*(uint64_t (**)(uint64_t, char **, long long *))(*(void *)v9 + 16))(v9, v11, &v85);
  re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)&v85);
  if (v8)
  {
    unint64_t v16 = 0;
    unint64_t v63 = v8;
    uint64_t v64 = v7 + 8;
    long long v68 = v5;
    uint64_t v62 = v15;
    while (1)
    {
      uint64_t v17 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v64, v16);
      unint64_t v18 = *(void *)(v17 + 8);
      uint64_t v19 = re::BucketArray<re::ActiveDeformation,8ul>::operator[](v5[1], v18);
      unint64_t v21 = v5[6];
      if (v21 <= v18) {
        break;
      }
      uint64_t v22 = v19;
      unint64_t v8 = v5[5];
      uint64_t v23 = re::DataArray<re::MeshModel>::get(*((void *)a1 + 1) + 8, *(void *)(*(void *)(v19 + 368) + 16));
      unint64_t v4 = *(unsigned __int16 *)(v22 + 392);
      unint64_t v7 = *(void *)(v23 + 56);
      if (v7 <= v4) {
        goto LABEL_40;
      }
      unint64_t v7 = *(void *)(v15 + 8);
      if (v7 <= v16) {
        goto LABEL_41;
      }
      uint64_t v66 = v17;
      uint64_t v69 = v8 + 312 * v18;
      uint64_t v70 = *(void *)(v23 + 64);
      char v24 = (re::AttributeTable *)(v70 + 560 * *(unsigned __int16 *)(v22 + 392));
      unint64_t v7 = *(void *)(v15 + 16);
      int v67 = (void *)(v7 + 56 * v16);
      char v25 = v24;
      do
      {
        uint64_t v26 = v25;
        char v25 = (re::AttributeTable *)*((void *)v25 + 1);
      }
      while (v25 && !*((void *)v26 + 9));
      *(void *)&long long v85 = 0x66739F42610D3BC2;
      uint64_t v27 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v26 + 6, &v85);
      if (v27 == -1) {
        long long v71 = 0;
      }
      else {
        long long v71 = (unsigned __int8 *)(*((void *)v26 + 7) + 16 * v27 + 8);
      }
      char v28 = (void *)(v70 + 560 * v4);
      do
      {
        uint64_t v29 = v28;
        char v28 = (void *)v28[1];
      }
      while (v28 && !v29[9]);
      *(void *)&long long v85 = 0x535FC835C0260B06;
      uint64_t v30 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v29 + 6, &v85);
      if (v30 == -1) {
        uint64_t v31 = 0;
      }
      else {
        uint64_t v31 = (unsigned __int8 *)(v29[7] + 16 * v30 + 8);
      }
      __int16 v32 = (void *)(v70 + 560 * v4);
      do
      {
        int v33 = v32;
        __int16 v32 = (void *)v32[1];
      }
      while (v32 && !v33[9]);
      *(void *)&long long v85 = 0x455BD5FA7760EFECLL;
      uint64_t v34 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v33 + 6, &v85);
      if (v34 != -1 && v71 && v31)
      {
        uint64_t v35 = v34;
        uint64_t v36 = v33[7];
        *(void *)(v7 + 56 * v16 + 24) = *(unsigned int *)(v70 + 560 * v4 + 464);
        uint64_t v37 = re::AttributeTable::buffers(v24);
        unint64_t v39 = *v71;
        if (v38 <= v39) {
          goto LABEL_42;
        }
        *(void *)(v7 + 56 * v16 + 32) = v37 + 16 * v39;
        uint64_t v40 = re::AttributeTable::buffers(v24);
        unint64_t v42 = *v31;
        if (v41 <= v42) {
          goto LABEL_43;
        }
        *(void *)(v7 + 56 * v16 + 40) = v40 + 16 * v42;
        uint64_t v43 = re::AttributeTable::buffers(v24);
        unint64_t v45 = *(unsigned __int8 *)(v36 + 16 * v35 + 8);
        if (v44 <= v45) {
          goto LABEL_44;
        }
        *(void *)(v7 + 56 * v16 + 48) = v43 + 16 * v45;
        LOBYTE(v85) = 1;
        unint64_t v4 = v8 + 312 * v18;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v69, 1u);
        int v46 = (void *)v4;
        unsigned int v47 = *(_DWORD *)(v46[8]
                        + 32
                        * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v46 + 7, (unsigned __int8 *)&v85)+ 20);
        LOBYTE(v85) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v69, 1u);
        unint64_t v7 = v47
           / *(unsigned __int16 *)(v46[16]
                                 + 20
                                 * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v46 + 15, (unsigned __int8 *)&v85)+ 4);
        unsigned int v49 = a3;
        if (a3 == 1)
        {
          uint64_t v50 = *(void **)(v22 + 360);
          uint64_t v51 = v68[2];
          __int16 v73 = 257;
          int v72 = 65548;
          char v75 = 30;
          int v74 = 0;
          unsigned int v52 = re::DeformationBufferAllocator::alloc(v50, v51, 1, (uint64_t)&v72, *(unsigned __int8 *)(v66 + 16), 4 * v7);
          uint64_t v53 = re::DeformationBufferAllocator::allocationData(*(re::DeformationBufferAllocator **)(v22 + 360), *(unsigned __int8 *)(v66 + 16), v52);
          LOWORD(v78) = 257;
          int v77 = 65540;
          LOBYTE(v79) = 28;
          HIDWORD(v78) = 0;
          id v54 = objc_msgSend(*(id *)(v53 + 24), sel_contents);
          uint64_t v55 = *(void *)(v53 + 24);
          *(void *)&long long v85 = v54;
          *((void *)&v85 + 1) = *(void *)(v53 + 32);
          *(void *)&long long v86 = v55;
          re::DeformationVertexBufferState::setOutputBuffer(v69, 0x17u, 1, (uint64_t)&v85, (uint64_t)&v77);
          re::FrameContext::perFrameAlloc(v60, 4uLL, 4uLL, (uint64_t)&v85);
          uint64_t v56 = v85;
          uint64_t v57 = v86;
          uint64_t v58 = *((void *)&v85 + 1);
          *(_DWORD *)(v85 + DWORD2(v85)) = v7;
          *int v67 = v56;
          v67[1] = v58;
          v67[2] = v57;
        }
        else
        {
          if (a3) {
            goto LABEL_47;
          }
          re::FrameContext::perFrameAlloc(v60, 4 * v7, 0x10uLL, (uint64_t)&v85);
          LOWORD(v78) = 257;
          int v77 = 65540;
          LOBYTE(v79) = 28;
          HIDWORD(v78) = 0;
          re::DeformationVertexBufferState::setOutputBuffer(v69, 0x17u, 0, (uint64_t)&v85, (uint64_t)&v77);
        }
      }
      ++v16;
      uint64_t v15 = v62;
      uint64_t v5 = v68;
      if (v16 == v63) {
        return v15;
      }
    }
    re::internal::assertLog((re::internal *)6, v20, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v18, v21);
    _os_crash();
    __break(1u);
LABEL_40:
    uint64_t v76 = 0;
    long long v89 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v77 = 136315906;
    unint64_t v78 = "operator[]";
    __int16 v79 = 1024;
    int v80 = 476;
    __int16 v81 = 2048;
    unint64_t v82 = v4;
    __int16 v83 = 2048;
    unint64_t v84 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_41:
    uint64_t v76 = 0;
    long long v89 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v77 = 136315906;
    unint64_t v78 = "operator[]";
    __int16 v79 = 1024;
    int v80 = 468;
    __int16 v81 = 2048;
    unint64_t v82 = v16;
    __int16 v83 = 2048;
    unint64_t v84 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_42:
    re::internal::assertLog((re::internal *)6, v38, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v39, v38);
    _os_crash();
    __break(1u);
LABEL_43:
    re::internal::assertLog((re::internal *)6, v41, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v42, v41);
    _os_crash();
    __break(1u);
LABEL_44:
    re::internal::assertLog((re::internal *)6, v44, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v45, v44);
    _os_crash();
    __break(1u);
    goto LABEL_45;
  }
  return v15;
}

uint64_t re::TensionDeformer::deformGPU(uint64_t a1, uint64_t a2, void **this, void *a4)
{
  unint64_t v4 = a4;
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v7 = *a4;
  re::mtl::ComputeCommandEncoder::pushDebugGroup(this, (re::ns *)"Perform Tension Computation");
  uint64_t v8 = *(void *)(v7 + 48);
  if (v8)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = v7 + 8;
    uint64_t v33 = a2;
    uint64_t v34 = v4;
    uint64_t v31 = v7 + 8;
    uint64_t v32 = *(void *)(v7 + 48);
    do
    {
      uint64_t v12 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v11, v10);
      unint64_t v14 = *(void *)(a2 + 8);
      if (v14 <= v10)
      {
        memset(v41, 0, sizeof(v41));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v38 = 136315906;
        *(void *)&v38[4] = "operator[]";
        *(_WORD *)&v38[12] = 1024;
        *(_DWORD *)&v38[14] = 468;
        *(_WORD *)&v38[18] = 2048;
        *(void *)&v38[20] = v10;
        __int16 v39 = 2048;
        unint64_t v40 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_15:
        re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v17, v18);
        _os_crash();
        __break(1u);
      }
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = v15 + v9;
      if (*(void *)(v15 + v9 + 32) && *(void *)(v16 + 40) && *(void *)(v15 + v9 + 48))
      {
        unint64_t v17 = *(void *)(v12 + 8);
        unint64_t v18 = v4[6];
        if (v18 <= v17) {
          goto LABEL_15;
        }
        uint64_t v19 = (void *)(v4[5] + 312 * v17);
        LOBYTE(v41[0]) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v19, 1u);
        unsigned int v20 = *(_DWORD *)(v19[8]
                        + 32
                        * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v19 + 7, (unsigned __int8 *)v41)+ 20);
        LOBYTE(v41[0]) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v19, 1u);
        unsigned int v21 = v20
            / *(unsigned __int16 *)(v19[16]
                                  + 20
                                  * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v19 + 15, (unsigned __int8 *)v41)+ 4);
        LOBYTE(v41[0]) = 0;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v19, 0);
        if (*(unsigned char *)(v19[16]
                      + 20
                      * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v19 + 15, (unsigned __int8 *)v41)+ 16) == 36)uint64_t v22 = 24;
        else {
          uint64_t v22 = 16;
        }
        unsigned int v36 = objc_msgSend(*(id *)(a1 + v22), sel_maxTotalThreadsPerThreadgroup);
        uint64_t v37 = (v21 + v36 - 1) / v36;
        [*this setComputePipelineState:*(void *)(a1 + v22)];
        LOBYTE(v41[0]) = 23;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v19, 0x17u);
        uint64_t v23 = *(void *)(v19[24]
                        + 32
                        * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v19 + 23, (unsigned __int8 *)v41)+ 24);
        LOBYTE(v41[0]) = 23;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v19, 0x17u);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", v23, *(unsigned int *)(v19[24]+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v19 + 23, (unsigned __int8 *)v41)+ 16), 0);
        LOBYTE(v41[0]) = 0;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v19, 0);
        uint64_t v24 = *(void *)(v19[8]
                        + 32
                        * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v19 + 7, (unsigned __int8 *)v41)+ 24);
        LOBYTE(v41[0]) = 0;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v19, 0);
        objc_msgSend(*this, "setBuffer:offset:atIndex:", v24, *(unsigned int *)(v19[8]+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v19 + 7, (unsigned __int8 *)v41)+ 16), 1);
        LOBYTE(v41[0]) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v19, 1u);
        uint64_t v25 = *(void *)(v19[8]
                        + 32
                        * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v19 + 7, (unsigned __int8 *)v41)+ 24);
        LOBYTE(v41[0]) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v19, 1u);
        uint64_t v11 = v31;
        uint64_t v26 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v19 + 7, (unsigned __int8 *)v41);
        uint64_t v27 = v19[8];
        uint64_t v8 = v32;
        uint64_t v28 = v25;
        unint64_t v4 = v34;
        [*this setBuffer:v28 offset:*(unsigned int *)(v27 + 32 * v26 + 16) atIndex:2];
        [*this setBuffer:**(void **)(v16 + 32) offset:*(unsigned int *)(*(void *)(v16 + 32) + 8) atIndex:3];
        [*this setBuffer:**(void **)(v16 + 40) offset:*(unsigned int *)(*(void *)(v16 + 40) + 8) atIndex:4];
        [*this setBuffer:**(void **)(v15 + v9 + 48) offset:*(unsigned int *)(*(void *)(v15 + v9 + 48) + 8) atIndex:5];
        [*this setBuffer:*(void *)(v15 + v9 + 16) offset:*(unsigned int *)(v15 + v9 + 8) atIndex:6];
        a2 = v33;
        uint64_t v29 = *this;
        *(void *)&v41[0] = v37;
        *(int64x2_t *)((char *)v41 + 8) = vdupq_n_s64(1uLL);
        *(void *)unint64_t v38 = v36;
        *(_OWORD *)&v38[8] = *(_OWORD *)((char *)v41 + 8);
        [v29 dispatchThreadgroups:v41 threadsPerThreadgroup:v38];
      }
      ++v10;
      v9 += 56;
    }
    while (v8 != v10);
  }
  return [*this popDebugGroup];
}

uint64_t re::TensionDeformer::deformCPU(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v145 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a3;
  uint64_t v130 = 0;
  unint64_t v127 = 0;
  float32x4_t v128 = 0;
  uint64_t v125 = 0;
  uint64_t v126 = 0;
  int v129 = 0;
  unint64_t v122 = 0;
  float v123 = 0;
  uint64_t v121 = 0;
  int v124 = 0;
  uint64_t v4 = *(void *)(v3 + 48);
  if (!v4) {
    goto LABEL_53;
  }
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  unint64_t v7 = 0;
  unint64_t v8 = v3 + 8;
  unint64_t v104 = v3 + 8;
  uint64_t v105 = *(void *)(v3 + 48);
  do
  {
    uint64_t v9 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v8, v7);
    uint64_t v11 = *(int **)(v6 + 8);
    if ((unint64_t)v11 <= v7) {
      goto LABEL_66;
    }
    uint64_t v12 = *(void *)(v6 + 16);
    uint64_t v13 = v12 + 56 * v7;
    uint64_t v15 = *(void *)(v13 + 32);
    unint64_t v14 = (id **)(v13 + 32);
    if (v15)
    {
      uint64_t v16 = v12 + 56 * v7;
      uint64_t v18 = *(void *)(v16 + 40);
      unint64_t v17 = (id **)(v16 + 40);
      if (v18)
      {
        uint64_t v19 = v12 + 56 * v7;
        uint64_t v21 = *(void *)(v19 + 48);
        unsigned int v20 = (id **)(v19 + 48);
        if (v21)
        {
          unint64_t v22 = *(void *)(v9 + 8);
          unint64_t v23 = v5[6];
          if (v23 <= v22) {
            goto LABEL_67;
          }
          unint64_t v109 = v17;
          uint64_t v108 = *(void *)(v9 + 8);
          uint64_t v106 = v20;
          uint64_t v107 = v5[5];
          uint64_t v24 = (void *)(v107 + 312 * v22);
          unint64_t v25 = *(void *)(v12 + 56 * v7 + 24);
          LOBYTE(v140) = 1;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v24, 1u);
          int64x2_t v115 = v24 + 7;
          uint64_t v26 = v24 + 8;
          unsigned int v112 = *(_DWORD *)(v24[8]
                           + 32
                           * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v24 + 7, (unsigned __int8 *)&v140)+ 20);
          LOBYTE(v140) = 1;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v24, 1u);
          unsigned int v111 = *(unsigned __int16 *)(v24[16]
                                     + 20
                                     * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v24 + 15, (unsigned __int8 *)&v140)+ 4);
          LOBYTE(v140) = 1;
          uint64_t v110 = (uint64_t)v24;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v24, 1u);
          uint64_t v27 = re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v24 + 15, (unsigned __int8 *)&v140);
          uint64_t v28 = v24[16];
          float v118 = 0;
          __int16 v119 = 0;
          int v120 = 0;
          re::VertexUnpacker::setVertexFormat((uint64_t)&v118, (const VertexBufferFormat *)(v28 + 20 * v27 + 4));
          float32x4_t v128 = 0;
          ++v129;
          if (v127 < v25 / 3) {
            re::DynamicArray<int>::setCapacity(&v126, v25 / 3);
          }
          unint64_t v29 = v112 / v111;
          float v123 = 0;
          ++v124;
          if (v122 < v29) {
            re::DynamicArray<int>::setCapacity(&v121, v112 / v111);
          }
          LOBYTE(v140) = 1;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v24, 1u);
          uint64_t v30 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v115, (unsigned __int8 *)&v140);
          uint64_t v31 = *(void *)(*v26 + 32 * v30 + 8) + *(unsigned int *)(*v26 + 32 * v30 + 16);
          LOBYTE(v140) = 0;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v24, 0);
          if (*(unsigned char *)(v24[16]
                        + 20
                        * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v24 + 15, (unsigned __int8 *)&v140)+ 16) == 36)
          {
            LOBYTE(v140) = 0;
            re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v24, 0);
            uint64_t v32 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v115, (unsigned __int8 *)&v140);
            if (v25)
            {
              uint64_t v11 = 0;
              uint64_t v34 = *v26 + 32 * v32;
              unint64_t v8 = (unint64_t)*(unsigned int *)(v34 + 20) >> 2;
              uint64_t v35 = (unsigned int *)(*(void *)(v34 + 8) + *(unsigned int *)(v34 + 16) + 4);
              while ((unint64_t)v11 < v8)
              {
                uint64_t v36 = v118(v31, *(v35 - 1));
                unint64_t v38 = (char *)v11 + 1;
                if ((unint64_t)v11 + 1 >= v8) {
                  goto LABEL_62;
                }
                uint64_t v39 = v36;
                uint64_t v40 = v37;
                uint64_t v41 = v118(v31, *v35);
                uint64_t v43 = (char *)v11 + 2;
                if ((unint64_t)v11 + 2 >= v8) {
                  goto LABEL_64;
                }
                v44.i64[0] = v39;
                v44.i64[1] = v40;
                float32x4_t v116 = v44;
                v44.i64[0] = v41;
                v44.i64[1] = v42;
                float32x4_t v113 = v44;
                v45.i64[0] = v118(v31, v35[1]);
                v45.i64[1] = v46;
                float32x4_t v47 = vsubq_f32(v113, v116);
                float32x4_t v48 = vsubq_f32(v45, v116);
                float32x4_t v49 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v48, (int32x4_t)v48), (int8x16_t)v48, 0xCuLL), vnegq_f32(v47)), v48, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v47, (int32x4_t)v47), (int8x16_t)v47, 0xCuLL));
                float32x4_t v50 = vmulq_f32(v49, v49);
                *(float *)&long long v140 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v50, 2), v50)).f32[0])* 0.5;
                re::DynamicArray<float>::add((_anonymous_namespace_ *)&v126, (float *)&v140);
                uint64_t v11 = (int *)((char *)v11 + 3);
                v35 += 3;
                if ((unint64_t)v11 >= v25) {
                  goto LABEL_26;
                }
              }
              goto LABEL_60;
            }
          }
          else
          {
            LOBYTE(v140) = 0;
            re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v24, 0);
            uint64_t v51 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v115, (unsigned __int8 *)&v140);
            if (v25)
            {
              uint64_t v11 = 0;
              uint64_t v53 = *v26 + 32 * v51;
              unint64_t v8 = (unint64_t)*(unsigned int *)(v53 + 20) >> 1;
              id v54 = (unsigned __int16 *)(*(void *)(v53 + 8) + *(unsigned int *)(v53 + 16) + 4);
              while ((unint64_t)v11 < v8)
              {
                uint64_t v55 = v118(v31, *(v54 - 2));
                uint64_t v57 = (char *)v11 + 1;
                if ((unint64_t)v11 + 1 >= v8) {
                  goto LABEL_63;
                }
                uint64_t v58 = v55;
                uint64_t v59 = v56;
                uint64_t v60 = v118(v31, *(v54 - 1));
                uint64_t v62 = (char *)v11 + 2;
                if ((unint64_t)v11 + 2 >= v8) {
                  goto LABEL_65;
                }
                v63.i64[0] = v58;
                v63.i64[1] = v59;
                float32x4_t v117 = v63;
                v63.i64[0] = v60;
                v63.i64[1] = v61;
                float32x4_t v114 = v63;
                unsigned int v64 = *v54;
                v54 += 3;
                v65.i64[0] = v118(v31, v64);
                v65.i64[1] = v66;
                float32x4_t v67 = vsubq_f32(v114, v117);
                float32x4_t v68 = vsubq_f32(v65, v117);
                float32x4_t v69 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v68, (int32x4_t)v68), (int8x16_t)v68, 0xCuLL), vnegq_f32(v67)), v68, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v67, (int32x4_t)v67), (int8x16_t)v67, 0xCuLL));
                float32x4_t v70 = vmulq_f32(v69, v69);
                *(float *)&long long v140 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v70.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v70, 2), v70)).f32[0])* 0.5;
                re::DynamicArray<float>::add((_anonymous_namespace_ *)&v126, (float *)&v140);
                uint64_t v11 = (int *)((char *)v11 + 3);
                if ((unint64_t)v11 >= v25) {
                  goto LABEL_26;
                }
              }
              goto LABEL_61;
            }
          }
LABEL_26:
          long long v71 = *v14;
          int v72 = (char *)objc_msgSend(**v14, sel_contents);
          uint64_t v73 = *((unsigned int *)v71 + 2);
          int v74 = *v109;
          id v75 = objc_msgSend(**v109, sel_contents);
          if (v112 >= v111)
          {
            uint64_t v76 = 0;
            int v77 = &v72[v73];
            unint64_t v8 = (unint64_t)v75 + *((unsigned int *)v74 + 2);
            if (v29 <= 1) {
              uint64_t v78 = 1;
            }
            else {
              uint64_t v78 = v112 / v111;
            }
            while (1)
            {
              int v79 = v76 ? *(_DWORD *)(v8 + 4 * v76 - 4) : 0;
              uint64_t v80 = *(int *)(v8 + 4 * v76);
              float v81 = 0.0;
              if ((int)v80 > v79) {
                break;
              }
LABEL_37:
              *(float *)&long long v140 = v81 / (float)(v80 - v79);
              re::DynamicArray<float>::add((_anonymous_namespace_ *)&v121, (float *)&v140);
              if (++v76 == v78) {
                goto LABEL_38;
              }
            }
            unint64_t v82 = v128;
            uint64_t v83 = v80 - v79;
            unint64_t v84 = &v77[4 * v79];
            while (1)
            {
              unint64_t v86 = *(int *)v84;
              v84 += 4;
              unint64_t v85 = v86;
              if ((unint64_t)v128 <= v86) {
                break;
              }
              float v81 = v81 + *(float *)(v130 + 4 * v85);
              if (!--v83) {
                goto LABEL_37;
              }
            }
            uint64_t v131 = 0;
            unint64_t v97 = &v132;
            long long v143 = 0u;
            long long v144 = 0u;
            long long v141 = 0u;
            long long v142 = 0u;
            long long v140 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v132 = 136315906;
            uint64_t v133 = "operator[]";
            __int16 v134 = 1024;
            int v135 = 789;
            __int16 v136 = 2048;
            unint64_t v137 = v85;
            __int16 v138 = 2048;
            uint64_t v139 = v82;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_58;
          }
LABEL_38:
          long long v87 = *v106;
          long long v88 = (char *)objc_msgSend(**v106, sel_contents);
          uint64_t v89 = *((unsigned int *)v87 + 2);
          LOBYTE(v140) = 23;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized(v110, 0x17u);
          uint64_t v11 = (int *)(v107 + 312 * v108);
          uint64_t v90 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((void *)v11 + 23, (unsigned __int8 *)&v140);
          unint64_t v8 = v104;
          uint64_t v4 = v105;
          if (v112 >= v111)
          {
            long long v92 = 0;
            long long v93 = &v88[v89];
            uint64_t v94 = *((void *)v11 + 24) + 32 * v90;
            uint64_t v95 = *(void *)(v94 + 8) + *(unsigned int *)(v94 + 16);
            unint64_t v96 = (unint64_t)*(unsigned int *)(v94 + 20) >> 2;
            unint64_t v97 = v123;
            uint64_t v98 = v125;
            unint64_t v99 = v112 / v111;
            if (v99 <= 1) {
              unint64_t v99 = 1;
            }
            while (v97 != v92)
            {
              if ((int *)v96 == v92) {
                goto LABEL_59;
              }
              float v100 = (float)(*(float *)&v93[4 * (void)v92] - *(float *)(v98 + 4 * (void)v92))
                   / *(float *)&v93[4 * (void)v92];
              if (v100 > 1.0) {
                float v100 = 1.0;
              }
              if (v100 < -1.0) {
                float v100 = -1.0;
              }
              *(float *)(v95 + 4 * (void)v92) = v100;
              long long v92 = (int *)((char *)v92 + 1);
              if ((int *)v99 == v92) {
                goto LABEL_48;
              }
            }
LABEL_58:
            uint64_t v131 = 0;
            uint64_t v11 = &v132;
            long long v143 = 0u;
            long long v144 = 0u;
            long long v141 = 0u;
            long long v142 = 0u;
            long long v140 = 0u;
            unint64_t v7 = &_os_log_internal;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v132 = 136315906;
            uint64_t v133 = "operator[]";
            __int16 v134 = 1024;
            int v135 = 789;
            __int16 v136 = 2048;
            unint64_t v137 = (unint64_t)v97;
            __int16 v138 = 2048;
            uint64_t v139 = v97;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_59:
            re::internal::assertLog((re::internal *)6, v91, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v96, v96);
            _os_crash();
            __break(1u);
LABEL_60:
            re::internal::assertLog((re::internal *)6, v33, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v11, v8);
            _os_crash();
            __break(1u);
LABEL_61:
            re::internal::assertLog((re::internal *)6, v52, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v11, v8);
            _os_crash();
            __break(1u);
LABEL_62:
            re::internal::assertLog((re::internal *)6, v37, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v38, v8);
            _os_crash();
            __break(1u);
LABEL_63:
            re::internal::assertLog((re::internal *)6, v56, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v57, v8);
            _os_crash();
            __break(1u);
LABEL_64:
            re::internal::assertLog((re::internal *)6, v42, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v43, v8);
            _os_crash();
            __break(1u);
LABEL_65:
            re::internal::assertLog((re::internal *)6, v61, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v62, v8);
            _os_crash();
            __break(1u);
LABEL_66:
            float v118 = 0;
            long long v143 = 0u;
            long long v144 = 0u;
            long long v141 = 0u;
            long long v142 = 0u;
            long long v140 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v132 = 136315906;
            uint64_t v133 = "operator[]";
            __int16 v134 = 1024;
            int v135 = 468;
            __int16 v136 = 2048;
            unint64_t v137 = v7;
            __int16 v138 = 2048;
            uint64_t v139 = v11;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_67:
            re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v22, v23);
            _os_crash();
            __break(1u);
          }
LABEL_48:
          uint64_t v6 = a2;
          uint64_t v5 = a3;
        }
      }
    }
    ++v7;
  }
  while (v7 != v4);
  if (v121 && v125) {
    (*(void (**)(void))(*(void *)v121 + 40))();
  }
LABEL_53:
  uint64_t result = v126;
  if (v126)
  {
    if (v130) {
      return (*(uint64_t (**)(void))(*(void *)v126 + 40))();
    }
  }
  return result;
}

void re::TensionDeformer::~TensionDeformer(re::TensionDeformer *this)
{
  for (uint64_t i = 24; i != 8; i -= 8)
  {
    uint64_t v3 = *(void **)((char *)this + i);
    if (v3)
    {

      *(void *)((char *)this + i) = 0;
    }
  }
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  uint64_t v2 = 24;
  while (1)
  {
    uint64_t v3 = *(void **)((char *)this + v2);
    if (v3)
    {

      *(void *)((char *)this + v2) = 0;
    }
    v2 -= 8;
    if (v2 == 8)
    {
      JUMPOUT(0x237DBCBD0);
    }
  }
}

void re::internal::Callable<re::TensionDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::~Callable()
{
}

uint64_t re::internal::Callable<re::TensionDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = *a2;
  uint64_t result = **a2;
  if (result)
  {
    if (v2[1])
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v2[2]);
      v2[1] = 0;
      uint64_t v2[2] = 0;
    }
    *uint64_t v2 = 0;
  }
  return result;
}

void *re::internal::Callable<re::TensionDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E711938;
  return result;
}

void *re::internal::Callable<re::TensionDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E711938;
  return result;
}

uint64_t re::internal::Callable<re::TensionDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::size()
{
  return 16;
}

uint64_t re::VertexUnpacker::setVertexFormat(uint64_t this, const VertexBufferFormat *a2)
{
  *(_WORD *)(this + 8) = *(_WORD *)a2;
  unsigned int v2 = *((unsigned __int8 *)a2 + 12);
  uint64_t v3 = re::VertexUnpacker::unpackHalf3Data;
  if (v2 > 0x19)
  {
    if (v2 == 26)
    {
      int v4 = 1;
      goto LABEL_10;
    }
    if (v2 == 30)
    {
      int v4 = 0;
      uint64_t v3 = re::VertexUnpacker::unpackFloat3Data;
      goto LABEL_10;
    }
  }
  else
  {
    if (v2 == 8)
    {
      int v4 = 2;
      uint64_t v3 = re::VertexUnpacker::unpackUChar3NormalizedData;
      goto LABEL_10;
    }
    if (v2 == 11)
    {
      int v4 = 3;
      uint64_t v3 = re::VertexUnpacker::unpackChar3NormalizedData;
LABEL_10:
      *(void *)this = v3;
      *(_DWORD *)(this + 12) = v4;
      return this;
    }
  }
  re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Unsupported format", "!\"Unreachable code\"", "setVertexFormat", 35);
  this = _os_crash();
  __break(1u);
  return this;
}

double re::VertexUnpacker::unpackHalf3Data(re::VertexUnpacker *this, const void *a2, float16x4_t a3)
{
  uint64_t v3 = (char *)this + 8 * (void)a2;
  a3.i32[0] = *(_DWORD *)v3;
  *(void *)&double result = vcvtq_f32_f16(a3).u64[0];
  _H1 = *((_WORD *)v3 + 2);
  __asm { FCVT            S1, H1 }
  return result;
}

int8x8_t re::VertexUnpacker::unpackChar3NormalizedData(re::VertexUnpacker *this, const void *a2)
{
  unsigned int v2 = (char *)this + 4 * (void)a2;
  v3.i32[0] = *v2;
  v3.i32[1] = v2[1];
  float32x2_t v4 = vdiv_f32(vcvt_f32_s32(v3), (float32x2_t)vdup_n_s32(0x42FE0000u));
  __asm { FMOV            V1.2S, #1.0 }
  return vbsl_s8((int8x8_t)vcgt_f32(v4, _D1), (int8x8_t)_D1, (int8x8_t)v4);
}

float32x2_t re::VertexUnpacker::unpackUChar3NormalizedData(re::VertexUnpacker *this, const void *a2)
{
  unsigned int v2 = (unsigned __int8 *)this + 4 * (void)a2;
  v3.i32[0] = *v2;
  v3.i32[1] = v2[1];
  return vdiv_f32(vcvt_f32_u32(v3), (float32x2_t)vdup_n_s32(0x437F0000u));
}

uint64_t re::VertexUnpacker::unpackFloat3Data(re::VertexUnpacker *this, const void *a2)
{
  return *(void *)((char *)this + 12 * (void)a2);
}

int32x2_t re::FrameContext::perFrameAlloc@<D0>(re::FrameContext *this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4 = a2;
  uint64_t v7 = *((void *)this + 7);
  if (v7)
  {
    int v8 = 0;
    if (a3 <= 0x10) {
      uint64_t v9 = 16;
    }
    else {
      uint64_t v9 = a3;
    }
    uint64_t v10 = (v9 + *(void *)(*(void *)v7 + 40) - 1) & -v9;
    if ((int64_t)(v10 + a2) <= *(void *)(*(void *)v7 + 48))
    {
      *(void *)(*(void *)v7 + 40) = v10 + a2;
      int v8 = v10;
    }
    int v11 = v8 - *(_DWORD *)(v7 + 16);
    id v12 = objc_msgSend(*(id *)(v7 + 8), sel_contents);
    uint64_t v14 = *(void *)(*((void *)this + 7) + 8);
    *(void *)a4 = v12;
    *(_DWORD *)(a4 + 8) = v11;
    *(_DWORD *)(a4 + 12) = v4;
    *(void *)(a4 + 16) = v14;
  }
  else
  {
    re::PerFrameAllocatorGPU::allocInternal(*((re::PerFrameAllocatorGPU **)this + 2), a2, a3, 0, &v16);
    uint64_t v15 = *v18;
    *(void *)a4 = v16;
    int32x2_t result = vmovn_s64(v17);
    *(int32x2_t *)(a4 + 8) = result;
    *(void *)(a4 + 16) = v15;
  }
  return result;
}

int32x2_t re::FrameContext::perFrameAllocTail@<D0>(re::FrameContext *this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    int v5 = a2;
    uint64_t v7 = *((void *)this + 7);
    if (v7)
    {
      int v8 = 0;
      if (a3 <= 0x10) {
        uint64_t v9 = 16;
      }
      else {
        uint64_t v9 = a3;
      }
      int64_t v10 = (*(void *)(*(void *)v7 + 48) - a2) & -v9;
      if (*(void *)(*(void *)v7 + 40) <= v10)
      {
        *(void *)(*(void *)v7 + 48) = v10;
        int v8 = v10;
      }
      int v11 = v8 - *(_DWORD *)(v7 + 16);
      id v12 = objc_msgSend(*(id *)(v7 + 8), sel_contents);
      uint64_t v14 = *(void *)(*((void *)this + 7) + 8);
      *(void *)a4 = v12;
      *(_DWORD *)(a4 + 8) = v11;
      *(_DWORD *)(a4 + 12) = v5;
      *(void *)(a4 + 16) = v14;
    }
    else
    {
      re::PerFrameAllocatorGPU::allocInternal(*((re::PerFrameAllocatorGPU **)this + 2), a2, a3, 0, &v16);
      uint64_t v15 = *v18;
      *(void *)a4 = v16;
      int32x2_t result = vmovn_s64(v17);
      *(int32x2_t *)(a4 + 8) = result;
      *(void *)(a4 + 16) = v15;
    }
  }
  else
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
  }
  return result;
}

double re::LateLatchingManager::processLateLatchAnchorPose(uint64_t a1, uint64_t a2, float32x4_t *a3)
{
  uint64_t v17 = a2;
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 4376) + 136) + 24) & 0xFFFFFFFFFFFFFFFLL;
  uint64_t v5 = 3;
  while (*(void *)(a1 + 1440) != v4)
  {
    a1 += 1456;
    if (!--v5) {
      return result;
    }
  }
  uint64_t v6 = (simd_float4x4 *)re::SmallHashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::tryGet(a1, &v17);
  if (v6)
  {
    int v8 = v6;
    simd_float4x4 v20 = __invert_f4(*v6);
    uint64_t v9 = 0;
    float32x4_t v10 = *a3;
    float32x4_t v11 = a3[1];
    float32x4_t v12 = a3[2];
    float32x4_t v13 = a3[3];
    simd_float4x4 v18 = v20;
    do
    {
      v19[v9] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, COERCE_FLOAT(*(_OWORD *)&v18.columns[v9])), v11, *(float32x2_t *)v18.columns[v9].f32, 1), v12, (float32x4_t)v18.columns[v9], 2), v13, (float32x4_t)v18.columns[v9], 3);
      ++v9;
    }
    while (v9 != 4);
    double result = *(double *)v19;
    simd_float4 v14 = (simd_float4)v19[1];
    simd_float4 v15 = (simd_float4)v19[2];
    simd_float4 v16 = (simd_float4)v19[3];
    v8[1].columns[0] = (simd_float4)v19[0];
    v8[1].columns[1] = v14;
    v8[1].columns[2] = v15;
    v8[1].columns[3] = v16;
  }
  return result;
}

uint64_t re::SmallHashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  if (*(_DWORD *)(a1 + 1212)) {
    return re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(a1 + 1184, a2);
  }
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return 0;
  }
  uint64_t result = a1 + 48;
  uint64_t v4 = 144 * v3;
  while (*(void *)(result - 16) != *a2)
  {
    result += 144;
    v4 -= 144;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

uint64_t re::LateLatchingManager::trackAnchorPose(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3, long long *a4)
{
  int v8 = a1 + 1092;
  os_unfair_lock_lock(a1 + 1092);
  unint64_t v10 = 0;
  unint64_t v11 = 0;
  unint64_t v12 = -1;
  uint64_t v13 = (uint64_t)a1;
  do
  {
    unint64_t v14 = *(void *)(v13 + 1440);
    if (v14 == a3)
    {
      unint64_t v51 = a2;
      if (!re::SmallHashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::containsKey(v13, (uint64_t *)&v51))
      {
        long long v25 = a4[1];
        long long v43 = *a4;
        long long v44 = v25;
        long long v26 = a4[3];
        long long v45 = a4[2];
        long long v46 = v26;
        long long v47 = xmmword_23435FD50;
        long long v48 = xmmword_23435FD60;
        long long v49 = xmmword_23435FD80;
        long long v50 = xmmword_23435FBB0;
        re::SmallHashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::add(v13, (uint64_t *)&v51, &v43);
        if (*(_DWORD *)(v13 + 1212)) {
          unsigned __int8 v27 = *(_DWORD *)(v13 + 1212);
        }
        else {
          unsigned __int8 v27 = *(_DWORD *)(v13 + 16);
        }
        LOBYTE(v43) = v27;
        uint64_t v28 = v13 + 1232;
        goto LABEL_41;
      }
      uint64_t v23 = v13 + 1232;
      unint64_t v24 = v51;
LABEL_35:
      uint64_t v39 = (unsigned __int8 *)re::SmallHashTable<unsigned long long,unsigned char,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::tryGet(v23, v24);
      if (v39) {
        unsigned __int8 v27 = *v39;
      }
      else {
        unsigned __int8 v27 = 0;
      }
LABEL_43:
      os_unfair_lock_unlock(v8);
      return v27;
    }
    if (v14 < v12)
    {
      unint64_t v11 = v10;
      unint64_t v12 = *(void *)(v13 + 1440);
    }
    ++v10;
    v13 += 1456;
  }
  while (v10 != 3);
  if (v11 < 3)
  {
    simd_float4 v15 = &a1[364 * v11];
    *(void *)&v15[360]._uint64_t os_unfair_lock_opaque = a3;
    if (v15[303]._os_unfair_lock_opaque)
    {
      uint64_t os_unfair_lock_opaque = v15[302]._os_unfair_lock_opaque;
      if (os_unfair_lock_opaque) {
        memset_pattern16(*(void **)&v15[298]._os_unfair_lock_opaque, &unk_2343655D0, 4 * os_unfair_lock_opaque);
      }
      uint64_t v17 = v15[304]._os_unfair_lock_opaque;
      if (v17)
      {
        uint64_t v18 = 0;
        uint64_t v19 = 144 * v17;
        do
        {
          uint64_t v20 = *(void *)&v15[300]._os_unfair_lock_opaque;
          int v21 = *(_DWORD *)(v20 + v18);
          if (v21 < 0) {
            *(_DWORD *)(v20 + v18) = v21 & 0x7FFFFFFF;
          }
          v18 += 144;
        }
        while (v19 != v18);
      }
      v15[305]._uint64_t os_unfair_lock_opaque = 0x7FFFFFFF;
      *(void *)&v15[303]._uint64_t os_unfair_lock_opaque = 0;
      unint64_t v22 = v15 + 306;
    }
    else
    {
      *(void *)&v15[4]._uint64_t os_unfair_lock_opaque = 0;
      unint64_t v22 = v15 + 6;
    }
    ++v22->_os_unfair_lock_opaque;
    unint64_t v29 = &a1[364 * v11];
    if (v29[355]._os_unfair_lock_opaque)
    {
      uint64_t v30 = a1[364 * v11 + 354]._os_unfair_lock_opaque;
      if (v30) {
        memset_pattern16(*(void **)&a1[364 * v11 + 350]._os_unfair_lock_opaque, &unk_2343655D0, 4 * v30);
      }
      uint64_t v31 = a1[364 * v11 + 356]._os_unfair_lock_opaque;
      if (v31)
      {
        uint64_t v32 = 0;
        uint64_t v33 = &a1[364 * v11 + 352];
        uint64_t v34 = 24 * v31;
        do
        {
          int v35 = *(_DWORD *)(*(void *)&v33->_os_unfair_lock_opaque + v32);
          if (v35 < 0) {
            *(_DWORD *)(*(void *)&v33->_os_unfair_lock_opaque + v32) = v35 & 0x7FFFFFFF;
          }
          v32 += 24;
        }
        while (v34 != v32);
      }
      uint64_t v36 = &a1[364 * v11];
      v36[357]._uint64_t os_unfair_lock_opaque = 0x7FFFFFFF;
      *(void *)&v29[355]._uint64_t os_unfair_lock_opaque = 0;
      uint64_t v37 = v36 + 358;
    }
    else
    {
      unint64_t v38 = &a1[364 * v11];
      *(void *)&v38[312]._uint64_t os_unfair_lock_opaque = 0;
      uint64_t v37 = v38 + 314;
    }
    ++v37->_os_unfair_lock_opaque;
    unint64_t v51 = a2;
    if (re::SmallHashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::containsKey((uint64_t)&a1[364 * v11], (uint64_t *)&v51))
    {
      unint64_t v24 = v51;
      uint64_t v23 = (uint64_t)&v29[308];
      goto LABEL_35;
    }
    long long v40 = a4[1];
    long long v43 = *a4;
    long long v44 = v40;
    long long v41 = a4[3];
    long long v45 = a4[2];
    long long v46 = v41;
    long long v47 = xmmword_23435FD50;
    long long v48 = xmmword_23435FD60;
    long long v49 = xmmword_23435FD80;
    long long v50 = xmmword_23435FBB0;
    re::SmallHashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::add((uint64_t)&a1[364 * v11], (uint64_t *)&v51, &v43);
    if (v15[303]._os_unfair_lock_opaque) {
      unsigned __int8 v27 = v15[303]._os_unfair_lock_opaque;
    }
    else {
      unsigned __int8 v27 = v15[4]._os_unfair_lock_opaque;
    }
    LOBYTE(v43) = v27;
    uint64_t v28 = (uint64_t)&v29[308];
LABEL_41:
    re::SmallHashTable<unsigned long long,unsigned char,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::add(v28, (uint64_t *)&v51, (char *)&v43);
    goto LABEL_43;
  }
  re::internal::assertLog((re::internal *)6, v9, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, v11, 3);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

void re::LateLatchingManager::getLateLatchPoseCorrections(os_unfair_lock_s *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = this;
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_OWORD *)(a3 + 672) = 0u;
  *(_OWORD *)(a3 + 688) = 0u;
  *(_DWORD *)(a3 + 704) = 0;
  long long v50 = (void *)(a3 + 672);
  *(void *)(a3 + 708) = 0x7FFFFFFFLL;
  locuint64_t k = this + 1092;
  os_unfair_lock_lock(this + 1092);
  uint64_t v9 = v5 + 296;
  uint64_t v10 = 3;
  while (*(void *)&v9[64]._os_unfair_lock_opaque != a2)
  {
    v9 += 364;
    if (!--v10) {
      goto LABEL_69;
    }
  }
  uint32_t os_unfair_lock_opaque = v9[7]._os_unfair_lock_opaque;
  if (os_unfair_lock_opaque)
  {
    uint64_t v5 = (os_unfair_lock_s *)v9[8]._os_unfair_lock_opaque;
    if (v5)
    {
      uint64_t v12 = 0;
      uint64_t v13 = *(int **)&v9[4]._os_unfair_lock_opaque;
      while (1)
      {
        int v14 = *v13;
        v13 += 36;
        if (v14 < 0) {
          break;
        }
        if (v5 == (os_unfair_lock_s *)++v12)
        {
          LODWORD(v12) = v9[8];
          break;
        }
      }
      unsigned int v3 = v12;
    }
    else
    {
      unsigned int v3 = 0;
    }
    simd_float4 v15 = v9;
    uint64_t v16 = (uint64_t)v9;
  }
  else
  {
    simd_float4 v15 = v9 - 288;
    uint64_t v16 = (uint64_t)&v9[36 * *(void *)&v9[-292]._os_unfair_lock_opaque - 288];
  }
  BOOL v17 = v15 == (os_unfair_lock_s *)v16;
  if (os_unfair_lock_opaque) {
    BOOL v17 = v5 == v3;
  }
  if (v17)
  {
LABEL_69:
    os_unfair_lock_unlock(lock);
    return;
  }
  uint64_t v48 = a3 + 32;
  while (1)
  {
    if (os_unfair_lock_opaque)
    {
      uint64_t v18 = *(void *)&v15[4]._os_unfair_lock_opaque + 144 * v3;
      uint64_t v19 = (os_unfair_lock_s *)(v18 + 8);
      uint64_t v20 = v18 + 16;
    }
    else
    {
      uint64_t v20 = (uint64_t)&v15[4];
      uint64_t v19 = v15;
    }
    unint64_t v21 = *(void *)&v19->_os_unfair_lock_opaque;
    if (v9[59]._os_unfair_lock_opaque) {
      break;
    }
    uint64_t v25 = *(void *)&v9[16]._os_unfair_lock_opaque;
    if (v25)
    {
      uint64_t v26 = 16 * v25;
      unsigned __int8 v27 = v9 + 22;
      while (*(void *)&v27[-2]._os_unfair_lock_opaque != v21)
      {
        v27 += 4;
        v26 -= 16;
        if (!v26) {
          goto LABEL_60;
        }
      }
      goto LABEL_35;
    }
LABEL_60:
    if (os_unfair_lock_opaque)
    {
      uint32_t v43 = v3 + 1;
      do
      {
        unsigned int v3 = v43;
        if (v43 >= v15[8]._os_unfair_lock_opaque) {
          break;
        }
        ++v43;
      }
      while ((*(_DWORD *)(*(void *)&v15[4]._os_unfair_lock_opaque + 144 * v3) & 0x80000000) == 0);
    }
    else
    {
      v15 += 36;
    }
    BOOL v44 = v15 == (os_unfair_lock_s *)v16;
    if (os_unfair_lock_opaque) {
      BOOL v44 = v5 == v3;
    }
    if (v44) {
      goto LABEL_69;
    }
  }
  if (!*(void *)&v9[52]._os_unfair_lock_opaque) {
    goto LABEL_60;
  }
  unint64_t v22 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v21 ^ (v21 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v21 ^ (v21 >> 30))) >> 27));
  uint64_t v23 = *(unsigned int *)(*(void *)&v9[54]._os_unfair_lock_opaque
                        + 4 * ((v22 ^ (v22 >> 31)) % v9[58]._os_unfair_lock_opaque));
  if (v23 == 0x7FFFFFFF) {
    goto LABEL_60;
  }
  uint64_t v24 = *(void *)&v9[56]._os_unfair_lock_opaque;
  while (*(void *)(v24 + 24 * v23 + 8) != v21)
  {
    LODWORD(v23) = *(_DWORD *)(v24 + 24 * v23) & 0x7FFFFFFF;
    if (v23 == 0x7FFFFFFF) {
      goto LABEL_60;
    }
  }
  unsigned __int8 v27 = (os_unfair_lock_s *)(v24 + 24 * v23 + 16);
LABEL_35:
  uint64_t v28 = (long long *)(v20 + 64);
  if (*(_DWORD *)(a3 + 700))
  {
LABEL_36:
    re::HashTable<unsigned char,re::Matrix4x4<float>,re::Hash<unsigned char>,re::EqualTo<unsigned char>,false,false>::add((uint64_t)v50, v27, v28);
    goto LABEL_60;
  }
  unint64_t v29 = *(void *)(a3 + 16);
  if (!v29)
  {
    LOBYTE(os_unfair_lock_opaque_low) = v27->_os_unfair_lock_opaque;
    *(_OWORD *)&v51[15] = *v28;
    *(_OWORD *)&v51[31] = v28[1];
    *(_OWORD *)&v51[47] = v28[2];
    *(_OWORD *)&v51[63] = v28[3];
    goto LABEL_59;
  }
  uint64_t v30 = 0;
  int os_unfair_lock_opaque_low = LOBYTE(v27->_os_unfair_lock_opaque);
  do
  {
    if (*(unsigned __int8 *)(a3 + v30 + 32) == os_unfair_lock_opaque_low) {
      goto LABEL_60;
    }
    v30 += 80;
  }
  while (80 * v29 != v30);
  if ((v29 & 0xFFFFFFF8) != 0)
  {
    long long v45 = v28;
    uint64_t v46 = v16;
    long long v47 = v5;
    if (!*v50)
    {
      uint64_t v32 = *(uint64_t **)a3;
      if (!*(void *)a3)
      {
      }
      re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init((uint64_t)v50, (uint64_t)v32, 16);
      unint64_t v29 = *(void *)(a3 + 16);
      if (!v29)
      {
LABEL_56:
        *(void *)(a3 + 16) = 0;
        ++*(_DWORD *)(a3 + 24);
        uint64_t v16 = v46;
        uint64_t v5 = v47;
        uint64_t v28 = v45;
        goto LABEL_36;
      }
    }
    uint64_t v33 = (unsigned char *)(a3 + 32);
    uint64_t v34 = (unsigned char *)(v48 + 80 * v29);
    while (1)
    {
      uint64_t v35 = *v33;
      unint64_t v36 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v35) ^ ((0xBF58476D1CE4E5B9 * v35) >> 27));
      unint64_t v37 = v36 ^ (v36 >> 31);
      if (*v50)
      {
        unint64_t v38 = v37 % *(unsigned int *)(a3 + 696);
        uint64_t v39 = *(unsigned int *)(*(void *)(a3 + 680) + 4 * v38);
        if (v39 != 0x7FFFFFFF)
        {
          uint64_t v40 = *(void *)(a3 + 688);
          while (*(unsigned __int8 *)(v40 + 80 * v39 + 4) != v35)
          {
            LODWORD(v39) = *(_DWORD *)(v40 + 80 * v39) & 0x7FFFFFFF;
            if (v39 == 0x7FFFFFFF) {
              goto LABEL_54;
            }
          }
          goto LABEL_55;
        }
      }
      else
      {
        LODWORD(v38) = 0;
      }
LABEL_54:
      re::HashTable<unsigned char,re::Matrix4x4<float>,re::Hash<unsigned char>,re::EqualTo<unsigned char>,false,false>::addAsMove((uint64_t)v50, v38, v37, v33, (uint64_t)(v33 + 16));
      ++*(_DWORD *)(a3 + 712);
LABEL_55:
      v33 += 80;
      if (v33 == v34) {
        goto LABEL_56;
      }
    }
  }
  *(_OWORD *)&v51[15] = *v28;
  *(_OWORD *)&v51[31] = v28[1];
  *(_OWORD *)&v51[47] = v28[2];
  *(_OWORD *)&v51[63] = v28[3];
  if (v29 < 8)
  {
LABEL_59:
    uint64_t v41 = v48 + 80 * v29;
    *(_OWORD *)(v41 + 49) = *(_OWORD *)&v51[48];
    *(_OWORD *)(v41 + 64) = *(_OWORD *)&v51[63];
    *(_OWORD *)(v41 + 17) = *(_OWORD *)&v51[16];
    *(_OWORD *)(v41 + 33) = *(_OWORD *)&v51[32];
    *(unsigned char *)uint64_t v41 = os_unfair_lock_opaque_low;
    *(_OWORD *)(v41 + 1) = *(_OWORD *)v51;
    uint64_t v42 = *(void *)(a3 + 16);
    ++*(_DWORD *)(a3 + 24);
    *(void *)(a3 + 16) = v42 + 1;
    if (v42 == -1)
    {
      re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, -1, 0);
      _os_crash();
      __break(1u);
    }
    goto LABEL_60;
  }
  re::internal::assertLog((re::internal *)4, v8, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
  _os_crash();
  __break(1u);
}

uint64_t re::LateLatchingManager::isTrackingAnchorId(os_unfair_lock_s *this, uint64_t a2)
{
  unsigned int v2 = (re::LateLatchingManager *)this;
  uint64_t v8 = a2;
  unsigned int v3 = this + 1092;
  os_unfair_lock_lock(this + 1092);
  uint64_t v4 = *(void *)(*(void *)(*((void *)v2 + 547) + 136) + 24) & 0xFFFFFFFFFFFFFFFLL;
  uint64_t v5 = 3;
  while (*((void *)v2 + 180) != v4
       || !re::SmallHashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::containsKey((uint64_t)v2, &v8))
  {
    unsigned int v2 = (re::LateLatchingManager *)((char *)v2 + 1456);
    if (!--v5)
    {
      uint64_t v6 = 0;
      goto LABEL_7;
    }
  }
  uint64_t v6 = 1;
LABEL_7:
  os_unfair_lock_unlock(v3);
  return v6;
}

BOOL re::SmallHashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::containsKey(uint64_t a1, uint64_t *a2)
{
  if (*(_DWORD *)(a1 + 1212)) {
    return re::HashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::containsKey(a1 + 1184, a2);
  }
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = (uint64_t *)(a1 + 32);
  uint64_t v5 = *a2;
  uint64_t v6 = 144 * v3 - 144;
  do
  {
    uint64_t v7 = *v4;
    v4 += 18;
    BOOL result = v7 == v5;
    BOOL v8 = v7 == v5 || v6 == 0;
    v6 -= 144;
  }
  while (!v8);
  return result;
}

uint64_t re::SmallHashTable<unsigned long long,unsigned char,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::tryGet(uint64_t a1, unint64_t a2)
{
  if (!*(_DWORD *)(a1 + 188))
  {
    uint64_t v6 = *(void *)(a1 + 16);
    if (v6)
    {
      uint64_t result = a1 + 40;
      uint64_t v7 = 16 * v6;
      while (*(void *)(result - 8) != a2)
      {
        result += 16;
        v7 -= 16;
        if (!v7) {
          return 0;
        }
      }
      return result;
    }
    return 0;
  }
  if (!*(void *)(a1 + 160)) {
    return 0;
  }
  unint64_t v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 168) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 184)));
  if (v3 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 176);
  if (*(void *)(v4 + 24 * v3 + 8) != a2)
  {
    while (1)
    {
      LODWORD(v3) = *(_DWORD *)(v4 + 24 * v3) & 0x7FFFFFFF;
      if (v3 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v4 + 24 * v3 + 8) == a2) {
        return v4 + 24 * v3 + 16;
      }
    }
    return 0;
  }
  return v4 + 24 * v3 + 16;
}

uint64_t re::SmallHashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::add(uint64_t result, uint64_t *a2, long long *a3)
{
  uint64_t v5 = result;
  if (*(_DWORD *)(result + 1212))
  {
    uint64_t v6 = result + 1184;
LABEL_3:
    return re::HashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(v6, a2, a3);
  }
  else
  {
    uint64_t v7 = result + 32;
    unint64_t v8 = *(void *)(result + 16);
    if (v8)
    {
      uint64_t v9 = 0;
      uint64_t v10 = *a2;
      while (*(void *)(result + v9 + 32) != v10)
      {
        v9 += 144;
        if (144 * v8 == v9)
        {
          if ((v8 & 0xFFFFFFF8) != 0)
          {
            uint64_t v6 = result + 1184;
            if (*(void *)(result + 1184)) {
              goto LABEL_15;
            }
            unint64_t v11 = *(uint64_t **)result;
            if (!*(void *)result)
            {
            }
            re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init(v5 + 1184, (uint64_t)v11, 16);
            unint64_t v8 = *(void *)(v5 + 16);
            if (v8)
            {
LABEL_15:
              unint64_t v12 = v7 + 144 * v8;
              do
              {
                re::HashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(v5 + 1184, (uint64_t *)v7, (long long *)(v7 + 16));
                v7 += 144;
              }
              while (v7 != v12);
            }
            *(void *)(v5 + 16) = 0;
            ++*(_DWORD *)(v5 + 24);
            goto LABEL_3;
          }
          *(_OWORD *)&v15[72] = a3[4];
          *(_OWORD *)&v15[88] = a3[5];
          *(_OWORD *)&v15[104] = a3[6];
          *(_OWORD *)&v15[120] = a3[7];
          *(_OWORD *)&char v15[8] = *a3;
          *(_OWORD *)&v15[24] = a3[1];
          *(_OWORD *)&v15[40] = a3[2];
          *(_OWORD *)&v15[56] = a3[3];
          if (v8 < 8) {
            goto LABEL_20;
          }
          re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
          uint64_t result = _os_crash();
          __break(1u);
          return result;
        }
      }
    }
    else
    {
      *(_OWORD *)&v15[72] = a3[4];
      *(_OWORD *)&v15[88] = a3[5];
      *(_OWORD *)&v15[104] = a3[6];
      *(_OWORD *)&v15[120] = a3[7];
      *(_OWORD *)&char v15[8] = *a3;
      *(_OWORD *)&v15[24] = a3[1];
      *(_OWORD *)&v15[40] = a3[2];
      uint64_t v10 = *a2;
      *(_OWORD *)&v15[56] = a3[3];
LABEL_20:
      unint64_t v13 = v7 + 144 * v8;
      *(_OWORD *)(v13 + 88) = *(_OWORD *)&v15[80];
      *(_OWORD *)(v13 + 104) = *(_OWORD *)&v15[96];
      *(_OWORD *)(v13 + 120) = *(_OWORD *)&v15[112];
      *(_OWORD *)(v13 + 24) = *(_OWORD *)&v15[16];
      *(_OWORD *)(v13 + 40) = *(_OWORD *)&v15[32];
      *(_OWORD *)(v13 + 56) = *(_OWORD *)&v15[48];
      *(_OWORD *)(v13 + 72) = *(_OWORD *)&v15[64];
      *(void *)unint64_t v13 = v10;
      *(void *)(v13 + 136) = *(void *)&v15[128];
      *(_OWORD *)(v13 + 8) = *(_OWORD *)v15;
      uint64_t v14 = *(void *)(result + 16);
      ++*(_DWORD *)(result + 24);
      *(void *)(result + 16) = v14 + 1;
      if (v14 == -1)
      {
        re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, -1, 0);
        _os_crash();
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 144 * v13;
    return v12 + 16;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 144 * v10 + 8) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 144 * v10) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 144 * v10;
  return v12 + 16;
}

uint64_t re::HashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, long long *a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v8 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v37, 0, 36);
          *(void *)&v37[36] = 0x7FFFFFFFLL;
          re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init((uint64_t)v37, v13, v12);
          long long v15 = *(_OWORD *)v37;
          *(_OWORD *)unint64_t v37 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v37[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v37[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v37[24];
          *(_OWORD *)&v37[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v37[32];
          *(_OWORD *)(a1 + 24) = v19;
          unint64_t v20 = v18;
          if (v18)
          {
            unint64_t v21 = 0;
            unint64_t v22 = (void *)(v17 + 8);
            do
            {
              if ((*(_DWORD *)(v22 - 1) & 0x80000000) != 0)
              {
                unint64_t v23 = 0xBF58476D1CE4E5B9 * (*v22 ^ (*v22 >> 30));
                unint64_t v24 = (0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) ^ ((0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) >> 31);
                re::HashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::addAsMove(a1, v24 % *(unsigned int *)(a1 + 24), v24, v22, v22 + 1);
              }
              ++v21;
              v22 += 18;
            }
            while (v21 < v20);
          }
          re::HashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)v37);
        }
      }
      else
      {
        if (v12) {
          signed int v27 = 2 * v11;
        }
        else {
          signed int v27 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    uint64_t v25 = *(void *)(a1 + 16);
    int v26 = *(_DWORD *)(v25 + 144 * v8);
  }
  else
  {
    uint64_t v25 = *(void *)(a1 + 16);
    int v26 = *(_DWORD *)(v25 + 144 * v8);
    *(_DWORD *)(a1 + 36) = v26 & 0x7FFFFFFF;
  }
  uint64_t v28 = 144 * v8;
  *(_DWORD *)(v25 + v28) = v26 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v28) = *(_DWORD *)(*(void *)(a1 + 16) + 144 * v8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 144 * v8 + 8) = *a4;
  unint64_t v29 = (_OWORD *)(*(void *)(a1 + 16) + 144 * v8);
  long long v31 = *a5;
  long long v30 = a5[1];
  long long v32 = a5[3];
  v29[3] = a5[2];
  v29[4] = v32;
  long long v34 = a5[6];
  long long v33 = a5[7];
  long long v35 = a5[5];
  v29[5] = a5[4];
  v29[6] = v35;
  v29[7] = v34;
  v29[8] = v33;
  v29[1] = v31;
  v29[2] = v30;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

double re::HashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 144 * v3;
      do
      {
        uint64_t v6 = a1[2];
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0) {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
        }
        v4 += 144;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::SmallHashTable<unsigned long long,unsigned char,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::add(uint64_t result, uint64_t *a2, char *a3)
{
  uint64_t v5 = result;
  if (!*(_DWORD *)(result + 188))
  {
    uint64_t v7 = result + 32;
    unint64_t v8 = *(void *)(result + 16);
    uint64_t v9 = *a2;
    if (v8)
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)(result + v10 + 32) == v9) {
          return result;
        }
        v10 += 16;
      }
      while (16 * v8 != v10);
      if ((v8 & 0xFFFFFFF8) != 0)
      {
        int v11 = (void *)(result + 160);
        if (!*(void *)(result + 160))
        {
          signed int v12 = *(uint64_t **)result;
          if (!*(void *)result)
          {
          }
          re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init(v5 + 160, (uint64_t)v12, 16);
          unint64_t v8 = *(void *)(v5 + 16);
          if (!v8)
          {
LABEL_25:
            *(void *)(v5 + 16) = 0;
            ++*(_DWORD *)(v5 + 24);
            uint64_t v6 = v5 + 160;
            goto LABEL_3;
          }
        }
        unint64_t v13 = v7 + 16 * v8;
        while (1)
        {
          unint64_t v14 = 0xBF58476D1CE4E5B9 * (*(void *)v7 ^ (*(void *)v7 >> 30));
          unint64_t v15 = (0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) ^ ((0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) >> 31);
          if (*v11)
          {
            unint64_t v16 = v15 % *(unsigned int *)(v5 + 184);
            uint64_t v17 = *(unsigned int *)(*(void *)(v5 + 168) + 4 * v16);
            if (v17 != 0x7FFFFFFF)
            {
              uint64_t v18 = *(void *)(v5 + 176);
              while (*(void *)(v18 + 24 * v17 + 8) != *(void *)v7)
              {
                LODWORD(v17) = *(_DWORD *)(v18 + 24 * v17) & 0x7FFFFFFF;
                if (v17 == 0x7FFFFFFF) {
                  goto LABEL_23;
                }
              }
              goto LABEL_24;
            }
          }
          else
          {
            LODWORD(v16) = 0;
          }
LABEL_23:
          re::HashTable<unsigned long long,unsigned char,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::addAsMove(v5 + 160, v16, v15, (void *)v7, (unsigned char *)(v7 + 8));
          ++*(_DWORD *)(v5 + 200);
LABEL_24:
          v7 += 16;
          if (v7 == v13) {
            goto LABEL_25;
          }
        }
      }
      if (v8 >= 8)
      {
        re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
        double result = _os_crash();
        __break(1u);
        return result;
      }
    }
    unint64_t v19 = v7 + 16 * v8;
    char v20 = *a3;
    *(void *)unint64_t v19 = v9;
    *(unsigned char *)(v19 + 8) = v20;
    *(void *)(result + 16) = v8 + 1;
    ++*(_DWORD *)(result + 24);
    return result;
  }
  uint64_t v6 = result + 160;
LABEL_3:
  return re::HashTable<unsigned long long,unsigned char,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(v6, a2, a3);
}

uint64_t re::HashTable<unsigned long long,unsigned char,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(uint64_t a1, uint64_t *a2, unsigned char *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  unint64_t v9 = *(void *)a1;
  if (*(void *)a1)
  {
    unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
    uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v17 = *(void *)(a1 + 16);
      if (*(void *)(v17 + 24 * v10 + 8) == v6)
      {
LABEL_12:
        uint64_t v16 = v17 + 24 * v10;
        return v16 + 16;
      }
      while (1)
      {
        LODWORD(v10) = *(_DWORD *)(v17 + 24 * v10) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v17 + 24 * v10 + 8) == v6) {
          goto LABEL_12;
        }
      }
    }
  }
  uint64_t v11 = *(unsigned int *)(a1 + 36);
  if (v11 == 0x7FFFFFFF)
  {
    uint64_t v11 = *(unsigned int *)(a1 + 32);
    int v12 = v11;
    if (v11 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,unsigned char,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
      int v12 = *(_DWORD *)(a1 + 32);
      uint64_t v6 = *a2;
    }
    *(_DWORD *)(a1 + 32) = v12 + 1;
    uint64_t v13 = *(void *)(a1 + 16);
    int v14 = *(_DWORD *)(v13 + 24 * v11);
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 16);
    int v14 = *(_DWORD *)(v13 + 24 * v11);
    *(_DWORD *)(a1 + 36) = v14 & 0x7FFFFFFF;
  }
  uint64_t v15 = 24 * v11;
  *(_DWORD *)(v13 + v15) = v14 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v15) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v11) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v9);
  *(void *)(*(void *)(a1 + 16) + 24 * v11 + 8) = v6;
  *(unsigned char *)(*(void *)(a1 + 16) + 24 * v11 + 16) = *a3;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * v9) = v11;
  ++*(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 16) + 24 * v11;
  return v16 + 16;
}

void re::HashTable<unsigned long long,unsigned char,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v16, 0, 36);
      *(void *)&v16[36] = 0x7FFFFFFFLL;
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v16, v4, a2);
      long long v5 = *(_OWORD *)v16;
      *(_OWORD *)uint64_t v16 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v16[16];
      uint64_t v7 = *(void *)(a1 + 16);
      *(void *)&v16[16] = v7;
      *(void *)(a1 + 16) = v6;
      long long v9 = *(_OWORD *)&v16[24];
      *(_OWORD *)&v16[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v16[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        uint64_t v12 = v7 + 8;
        do
        {
          if ((*(_DWORD *)(v12 - 8) & 0x80000000) != 0)
          {
            unint64_t v13 = 0xBF58476D1CE4E5B9 * (*(void *)v12 ^ (*(void *)v12 >> 30));
            unint64_t v14 = (0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) ^ ((0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) >> 31);
            re::HashTable<unsigned long long,unsigned char,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::addAsMove(a1, v14 % *(unsigned int *)(a1 + 24), v14, (void *)v12, (unsigned char *)(v12 + 8));
          }
          ++v11;
          v12 += 24;
        }
        while (v11 < v10);
      }
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)v16);
    }
  }
  else
  {
    if (a2) {
      signed int v15 = a2;
    }
    else {
      signed int v15 = 3;
    }
  }
}

uint64_t re::HashTable<unsigned long long,unsigned char,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::addAsMove(uint64_t result, unsigned int a2, unint64_t a3, void *a4, unsigned char *a5)
{
  uint64_t v7 = result;
  uint64_t v8 = *(unsigned int *)(result + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(result + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(result + 24))
    {
      double result = re::HashTable<unsigned long long,unsigned char,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::setCapacity(result, (2 * *(_DWORD *)(result + 28)));
      a2 = a3 % *(unsigned int *)(v7 + 24);
      int v9 = *(_DWORD *)(v7 + 32);
    }
    *(_DWORD *)(v7 + 32) = v9 + 1;
    uint64_t v11 = *(void *)(v7 + 16);
    int v12 = *(_DWORD *)(v11 + 24 * v8);
  }
  else
  {
    uint64_t v11 = *(void *)(result + 16);
    int v12 = *(_DWORD *)(v11 + 24 * v8);
    *(_DWORD *)(result + 36) = v12 & 0x7FFFFFFF;
  }
  uint64_t v13 = 24 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(v7 + 16) + v13) = *(_DWORD *)(*(void *)(v7 + 16) + 24 * v8) & 0x80000000 | *(_DWORD *)(*(void *)(v7 + 8) + 4 * a2);
  *(void *)(*(void *)(v7 + 16) + 24 * v8 + 8) = *a4;
  *(unsigned char *)(*(void *)(v7 + 16) + 24 * v8 + 16) = *a5;
  *(_DWORD *)(*(void *)(v7 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(v7 + 28);
  return result;
}

BOOL re::HashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::containsKey(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *a2;
  unint64_t v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(void *)(v6 + 144 * v4 + 8) == v2) {
    return 1;
  }
  do
  {
    LODWORD(v4) = *(_DWORD *)(v6 + 144 * v4) & 0x7FFFFFFF;
    BOOL result = v4 != 0x7FFFFFFF;
  }
  while (v4 != 0x7FFFFFFF && *(void *)(v6 + 144 * v4 + 8) != v2);
  return result;
}

double re::HashTable<unsigned char,re::Matrix4x4<float>,re::Hash<unsigned char>,re::EqualTo<unsigned char>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 80 * v3;
      do
      {
        uint64_t v6 = a1[2];
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0) {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
        }
        v4 += 80;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<unsigned char,re::Matrix4x4<float>,re::Hash<unsigned char>,re::EqualTo<unsigned char>,false,false>::add(uint64_t a1, unsigned char *a2, long long *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v6) ^ ((0xBF58476D1CE4E5B9 * v6) >> 27));
  unint64_t v8 = v7 ^ (v7 >> 31);
  unint64_t v9 = *(void *)a1;
  if (*(void *)a1)
  {
    unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
    uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v20 = *(void *)(a1 + 16);
      if (*(unsigned __int8 *)(v20 + 80 * v10 + 4) == v6) {
        return;
      }
      while (1)
      {
        LODWORD(v10) = *(_DWORD *)(v20 + 80 * v10) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF) {
          break;
        }
        if (*(unsigned __int8 *)(v20 + 80 * v10 + 4) == v6) {
          return;
        }
      }
    }
  }
  uint64_t v11 = *(unsigned int *)(a1 + 36);
  if (v11 == 0x7FFFFFFF)
  {
    uint64_t v11 = *(unsigned int *)(a1 + 32);
    int v12 = v11;
    if (v11 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned char,re::Matrix4x4<float>,re::Hash<unsigned char>,re::EqualTo<unsigned char>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
      int v12 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v12 + 1;
    uint64_t v13 = *(void *)(a1 + 16);
    int v14 = *(_DWORD *)(v13 + 80 * v11);
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 16);
    int v14 = *(_DWORD *)(v13 + 80 * v11);
    *(_DWORD *)(a1 + 36) = v14 & 0x7FFFFFFF;
  }
  uint64_t v15 = 80 * v11;
  *(_DWORD *)(v13 + v15) = v14 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v15) = *(_DWORD *)(*(void *)(a1 + 16) + 80 * v11) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v9);
  *(unsigned char *)(*(void *)(a1 + 16) + 80 * v11 + 4) = *a2;
  uint64_t v16 = (_OWORD *)(*(void *)(a1 + 16) + 80 * v11);
  long long v17 = *a3;
  long long v18 = a3[1];
  long long v19 = a3[3];
  v16[3] = a3[2];
  v16[4] = v19;
  v16[1] = v17;
  id v16[2] = v18;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * v9) = v11;
  ++*(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 40);
}

void re::HashTable<unsigned char,re::Matrix4x4<float>,re::Hash<unsigned char>,re::EqualTo<unsigned char>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(void *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init((uint64_t)v15, v4, a2);
      long long v5 = *(_OWORD *)v15;
      *(_OWORD *)uint64_t v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v15[16];
      uint64_t v7 = *(void *)(a1 + 16);
      *(void *)&unsigned char v15[16] = v7;
      *(void *)(a1 + 16) = v6;
      long long v9 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        uint64_t v12 = v7 + 16;
        do
        {
          if ((*(_DWORD *)(v12 - 16) & 0x80000000) != 0)
          {
            unint64_t v13 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * *(unsigned __int8 *)(v12 - 12)) ^ ((0xBF58476D1CE4E5B9
                                                                             * *(unsigned __int8 *)(v12 - 12)) >> 27));
            re::HashTable<unsigned char,re::Matrix4x4<float>,re::Hash<unsigned char>,re::EqualTo<unsigned char>,false,false>::addAsMove(a1, (v13 ^ (v13 >> 31)) % *(unsigned int *)(a1 + 24), v13 ^ (v13 >> 31), (unsigned char *)(v12 - 12), v12);
          }
          ++v11;
          v12 += 80;
        }
        while (v11 < v10);
      }
      re::HashTable<unsigned char,re::Matrix4x4<float>,re::Hash<unsigned char>,re::EqualTo<unsigned char>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2) {
      signed int v14 = a2;
    }
    else {
      signed int v14 = 3;
    }
  }
}

__n128 re::HashTable<unsigned char,re::Matrix4x4<float>,re::Hash<unsigned char>,re::EqualTo<unsigned char>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, unsigned char *a4, uint64_t a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned char,re::Matrix4x4<float>,re::Hash<unsigned char>,re::EqualTo<unsigned char>,false,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 80 * v8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 80 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  uint64_t v13 = 80 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v13) = *(_DWORD *)(*(void *)(a1 + 16) + 80 * v8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(unsigned char *)(*(void *)(a1 + 16) + 80 * v8 + 4) = *a4;
  uint64_t v14 = *(void *)(a1 + 16) + 80 * v8;
  __n128 result = *(__n128 *)a5;
  long long v16 = *(_OWORD *)(a5 + 16);
  long long v17 = *(_OWORD *)(a5 + 48);
  *(_OWORD *)(v14 + 48) = *(_OWORD *)(a5 + 32);
  *(_OWORD *)(v14 + 64) = v17;
  *(__n128 *)(v14 + 16) = result;
  *(_OWORD *)(v14 + 32) = v16;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

re::MeshDefinition::AttributeArray *re::MeshDefinition::AttributeArray::AttributeArray(re::MeshDefinition::AttributeArray *this, unint64_t a2)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)this = &unk_26E7119E0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return this;
}

uint64_t re::MeshDefinition::MeshDefinition(uint64_t a1, void *a2, unint64_t a3, int a4, int a5)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)a1 = &unk_26E711A10;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = a4;
  unint64_t v13 = a2[4];
  *(void *)(a1 + 56) = v13;
  *(void *)(a1 + 64) = 0;
  if (v13)
  {
    if (v13 >= 0x666666666666667)
    {
LABEL_33:
      re::internal::assertLog((re::internal *)6, (uint64_t)v12, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 40, v13);
      _os_crash();
      __break(1u);
LABEL_34:
      re::internal::assertLog((re::internal *)4, (uint64_t)v12, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
    }
    *(void *)(a1 + 64) = v14;
    if (!v14) {
      goto LABEL_34;
    }
    unint64_t v10 = v14;
    if (v13 != 1)
    {
      bzero(v14, 40 * v13 - 40);
      v10 += 5 * v13 - 5;
    }
    v10[4] = 0;
    *(_OWORD *)unint64_t v10 = 0u;
    *((_OWORD *)v10 + 1) = 0u;
    unint64_t v15 = *(void *)(a1 + 56);
  }
  else
  {
    unint64_t v15 = 0;
  }
  long long v16 = &v44;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = a3;
  *(_DWORD *)(a1 + 100) = a5;
  *(unsigned char *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 162) = 0;
  *(unsigned char *)(a1 + 164) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = "";
  int v36 = 0;
  uint64_t v35 = 0;
  if ((int)v15 >= 1)
  {
    uint64_t v17 = 0;
    unint64_t v18 = a2[4];
    while (v18 != v17)
    {
      uint64_t v19 = *(unsigned int *)(*(void *)(a2[5] + 8 * v17) + 12);
      ++*((_DWORD *)&v35 + v19);
      if (v15 == ++v17) {
        goto LABEL_12;
      }
    }
    *(void *)unint64_t v37 = 0;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v44 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v34[0]) = 136315906;
    *(void *)((char *)v34 + 4) = "operator[]";
    WORD6(v34[0]) = 1024;
    *(_DWORD *)((char *)v34 + 14) = 476;
    WORD1(v34[1]) = 2048;
    *(void *)((char *)&v34[1] + 4) = v18;
    WORD6(v34[1]) = 2048;
    *(void *)((char *)&v34[1] + 14) = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_29:
    uint64_t v32 = 0;
    v16[3] = 0u;
    v16[4] = 0u;
    v16[1] = 0u;
    id v16[2] = 0u;
    *long long v16 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unint64_t v37 = 136315906;
    *(void *)&v37[4] = "operator[]";
    __int16 v38 = 1024;
    int v39 = 468;
    __int16 v40 = 2048;
    unint64_t v41 = v18;
    __int16 v42 = 2048;
    uint32_t v43 = (uint64_t *)v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_30;
  }
LABEL_12:
  uint64_t v20 = 0;
  unsigned int v21 = 0;
  memset(v34, 0, sizeof(v34));
  unint64_t v22 = (void *)v34 + 1;
  do
  {
    uint64_t v23 = *((unsigned int *)&v35 + v20);
    unint64_t v18 = v21;
    if (v23)
    {
      if (v15 <= v21) {
        goto LABEL_29;
      }
      *(v22 - 1) = *(void *)(a1 + 64) + 40 * v21;
      *unint64_t v22 = v23;
      uint64_t v24 = v23;
    }
    else
    {
      uint64_t v24 = 0;
    }
    *(void *)(a1 + 72 + 8 * v20) = v18 | (v24 << 32);
    unsigned int v21 = v23 + v18;
    ++v20;
    v22 += 2;
  }
  while (v20 != 3);
  uint64_t v31 = a1;
  int v33 = 0;
  uint64_t v32 = 0;
  if ((int)v15 >= 1)
  {
    a3 = 0;
    for (uint64_t i = 8; ; i += 24)
    {
      unint64_t v10 = (uint64_t *)a2[4];
      if ((unint64_t)v10 <= a3) {
        break;
      }
      uint64_t v26 = *(void *)(a2[5] + 8 * a3);
      uint64_t v27 = *(unsigned int *)(v26 + 12);
      unint64_t v10 = (uint64_t *)*((unsigned int *)&v32 + v27);
      *((_DWORD *)&v32 + v27) = v10 + 1;
      unint64_t v28 = *((void *)&v34[v27] + 1);
      if (v28 <= (unint64_t)v10) {
        goto LABEL_31;
      }
      uint64_t v29 = *(void *)&v34[v27];
      *(void *)(v29 + 40 * v10 + 8) = v26;
      unint64_t v13 = a2[7];
      if (v13 <= a3) {
        goto LABEL_32;
      }
      int v12 = (const StringID *)(a2[8] + i);
      if (LOBYTE(v12[-1].var1))
      {
        LOBYTE(v44) = 1;
        re::StringID::StringID((re::StringID *)((char *)&v44 + 8), v12);
        re::Optional<re::StringID>::operator=(v29 + 40 * v10 + 16, (unsigned __int8 *)&v44);
        if ((_BYTE)v44) {
          re::StringID::destroyString((re::StringID *)((char *)&v44 + 8));
        }
      }
      if (v15 == ++a3) {
        return v31;
      }
    }
LABEL_30:
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v44 = 0u;
    unint64_t v13 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unint64_t v37 = 136315906;
    *(void *)&v37[4] = "operator[]";
    __int16 v38 = 1024;
    int v39 = 476;
    __int16 v40 = 2048;
    unint64_t v41 = a3;
    __int16 v42 = 2048;
    uint32_t v43 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_31:
    re::internal::assertLog((re::internal *)6, (uint64_t)v12, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v10, v28);
    _os_crash();
    __break(1u);
LABEL_32:
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v44 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unint64_t v37 = 136315906;
    *(void *)&v37[4] = "operator[]";
    __int16 v38 = 1024;
    int v39 = 476;
    __int16 v40 = 2048;
    unint64_t v41 = a3;
    __int16 v42 = 2048;
    uint32_t v43 = (uint64_t *)v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_33;
  }
  return v31;
}

void re::MeshDefinition::~MeshDefinition(re::MeshDefinition *this)
{
  *(void *)this = &unk_26E711A10;
  re::StringID::destroyString((re::MeshDefinition *)((char *)this + 168));
  if (*((void *)this + 6))
  {
    uint64_t v2 = *((void *)this + 7);
    if (v2)
    {
      uint64_t v3 = 40 * v2;
      uint64_t v4 = (re::StringID *)(*((void *)this + 8) + 24);
      do
      {
        if (*((unsigned char *)v4 - 8)) {
          re::StringID::destroyString(v4);
        }

        uint64_t v4 = (re::StringID *)((char *)v4 + 40);
        v3 -= 40;
      }
      while (v3);
      (*(void (**)(void, void))(**((void **)this + 6) + 40))(*((void *)this + 6), *((void *)this + 8));
      *((void *)this + 7) = 0;
      *((void *)this + 8) = 0;
    }
    *((void *)this + 6) = 0;
  }

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::MeshDefinition::~MeshDefinition(this);
  JUMPOUT(0x237DBCBD0);
}

void re::MeshDefinition::setIndexData(uint64_t a1, unsigned int a2, void **a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (a2 <= 1)
  {
    uint64_t v6 = *a3;
    if (*a3)
    {
      uint64_t v6 = (void *)[v6 length];
      unint64_t v7 = (unint64_t)v6;
    }
    else
    {
      unint64_t v7 = 0;
    }
    uint64_t v8 = *(unsigned int *)(a1 + 40);
    char v9 = 1;
    if (a2) {
      char v9 = 2;
    }
    uint64_t v10 = v8 << v9;
    if (v7 >= v8 << v9)
    {
      *(unsigned char *)(a1 + 24) = a2;
      unint64_t v13 = (void **)(a1 + 32);
      if ((void **)(a1 + 32) != a3)
      {
        uint64_t v14 = *a3;
        *a3 = 0;
        unint64_t v15 = *v13;
        *unint64_t v13 = v14;
      }
    }
    else
    {
      uint64_t v11 = *re::graphicsLogObjects((re *)v6);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = 134218240;
        uint64_t v17 = v10;
        __int16 v18 = 2048;
        unint64_t v19 = v7;
        _os_log_impl(&dword_233120000, v11, OS_LOG_TYPE_DEFAULT, "Invalid MeshDefinition::setIndexData(), submitted index data buffer is too small.  Expected minimum bufferSize of %zu, but got buffer with size %zu", (uint8_t *)&v16, 0x16u);
      }
      *(unsigned char *)(a1 + 24) = 0;
      int v12 = *(void **)(a1 + 32);
      *(void *)(a1 + 32) = 0;
    }
  }
}

void re::MeshDefinition::setAttribute(re *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)a1 + 7);
  if (v4)
  {
    uint64_t v6 = *((void *)a1 + 8);
    unint64_t v7 = *(const char **)a2;
    int v8 = *(unsigned __int8 *)(a2 + 8);
    int v9 = *(unsigned __int8 *)(a2 + 9);
    uint64_t v10 = 40 * v4;
    while (1)
    {
      uint64_t v11 = *(void *)(v6 + 8);
      if (*(unsigned char *)(v6 + 16))
      {
        int v12 = *(const char **)(v6 + 32);
        LOWORD(v13) = *(_WORD *)(v11 + 8);
      }
      else
      {
        int v12 = *(const char **)v11;
        uint64_t v13 = *(void *)(v11 + 8);
      }
      a1 = (re *)strcmp(v12, v7);
      BOOL v14 = !a1 && v8 == v13;
      if (v14 && v9 == BYTE1(v13)) {
        break;
      }
      v6 += 40;
      v10 -= 40;
      if (!v10) {
        goto LABEL_14;
      }
    }
    if ((uint64_t *)v6 != a3)
    {
      uint64_t v18 = *a3;
      *a3 = 0;
      unint64_t v19 = *(void **)v6;
      *(void *)uint64_t v6 = v18;
    }
  }
  else
  {
LABEL_14:
    int v16 = *re::graphicsLogObjects(a1);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(const char **)a2;
      int v20 = 136315138;
      unsigned int v21 = v17;
      _os_log_impl(&dword_233120000, v16, OS_LOG_TYPE_DEFAULT, "Ignoring MeshDefinition::setAttribute(), since the mesh does not contain attribute '%s'", (uint8_t *)&v20, 0xCu);
    }
  }
}

uint64_t re::MeshDefinition::tryGetAttribute(re::MeshDefinition *this, const char *__s2)
{
  uint64_t v2 = *((void *)this + 7);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 8);
  uint64_t v5 = 40 * v2;
  while (1)
  {
    uint64_t v6 = *(unsigned char *)(v4 + 16) ? *(const char **)(v4 + 32) : **(const char ***)(v4 + 8);
    if (!strcmp(v6, __s2)) {
      break;
    }
    v4 += 40;
    v5 -= 40;
    if (!v5) {
      return 0;
    }
  }
  return v4;
}

uint64_t re::MeshDefinition::attributeElementCount(re::MeshDefinition *this, const VertexAttributeDescriptor *a2)
{
  if (a2 == 1) {
    return *((unsigned int *)this + 24);
  }
  if (a2 - 2 >= 3) {
    return 1;
  }
  re::internal::assertLog((re::internal *)5, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Unsupported vertex step function %d", "false", "attributeElementCount", 313, a2);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

float32x4_t *re::MeshDefinition::computeBoundingBox@<X0>(float32x4_t *this@<X0>, float32x4_t *a2@<X8>)
{
  uint64_t v4 = (re::MeshDefinition *)this;
  if (this[7].i8[0])
  {
    float32x4_t v6 = this[8];
    float32x4_t v7 = this[9];
LABEL_3:
    *a2 = v6;
    a2[1] = v7;
    return this;
  }
  uint64_t Attribute = re::MeshDefinition::tryGetAttribute((re::MeshDefinition *)this, "vertexPosition");
  if (!Attribute)
  {
    re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) Mesh definition should have either a position attribute or an explicit bounding box", "positionAttribute", "computeBoundingBox", 329);
    _os_crash();
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v10 = (id *)Attribute;
  v11.i64[0] = 0x7F0000007FLL;
  v11.i64[1] = 0x7F0000007FLL;
  *(int32x4_t *)a2 = vdupq_n_s32(0x7F800000u);
  a2[1] = v11;
  uint64_t v12 = *(void *)(Attribute + 8);
  if (*(unsigned char *)(Attribute + 16)) {
    unint64_t v3 = *(unsigned __int16 *)(v12 + 8);
  }
  else {
    unint64_t v3 = *(void *)(v12 + 8);
  }
  unint64_t v2 = [*(id *)Attribute length];
  uint64_t v13 = re::MeshDefinition::attributeElementCount(v4, (const VertexAttributeDescriptor *)(v3 >> 8));
  uint64_t v15 = v13;
  if (v3 == 26)
  {
    uint64_t v19 = 8 * v13;
    if (8 * v13 <= v2)
    {
      this = (float32x4_t *)[*v10 bytes];
      if (v15)
      {
        float32x4_t v6 = (float32x4_t)vdupq_n_s32(0x7F800000u);
        v7.i64[0] = 0x7F0000007FLL;
        v7.i32[2] = 127;
        do
        {
          v20.i32[0] = this->i32[0];
          v20.i64[0] = vcvtq_f32_f16(*(float16x4_t *)v20.f32).u64[0];
          _H3 = this->i16[2];
          __asm { FCVT            S3, H3 }
          v6.i32[3] = 0;
          v20.i64[1] = _S3;
          float32x4_t v6 = vminnmq_f32(v6, v20);
          v7.i32[3] = 0;
          float32x4_t v7 = vmaxnmq_f32(v7, v20);
          this = (float32x4_t *)((char *)this + 8);
          --v15;
        }
        while (v15);
        goto LABEL_3;
      }
      return this;
    }
    goto LABEL_23;
  }
  if (v3 != 30)
  {
LABEL_24:
    re::internal::assertLog((re::internal *)5, v14, "assertion failure: '%s' (%s:line %i) Unexpected position vertex format %d", "false", "computeBoundingBox", 371, v3);
    this = (float32x4_t *)_os_crash();
    __break(1u);
    return this;
  }
  uint64_t v16 = 12 * v13;
  if (12 * v13 > v2)
  {
LABEL_22:
    re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Position attribute data is too small (got %zu bytes, expected %zu bytes)", "expectedSizeInBytes <= actualSizeInBytes", "computeBoundingBox", 343, v2, v16);
    _os_crash();
    __break(1u);
LABEL_23:
    re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Position attribute data is too small (got %zu bytes, expected %zu bytes)", "expectedSizeInBytes <= actualSizeInBytes", "computeBoundingBox", 358, v2, v19);
    _os_crash();
    __break(1u);
    goto LABEL_24;
  }
  this = (float32x4_t *)[*v10 bytes];
  if (v15)
  {
    float32x4_t v6 = (float32x4_t)vdupq_n_s32(0x7F800000u);
    uint64_t v17 = &this->u32[2];
    v7.i64[0] = 0x7F0000007FLL;
    v7.i32[2] = 127;
    do
    {
      v18.i64[0] = *((void *)v17 - 1);
      v6.i32[3] = 0;
      v18.i64[1] = *v17;
      float32x4_t v6 = vminnmq_f32(v6, v18);
      v7.i32[3] = 0;
      float32x4_t v7 = vmaxnmq_f32(v7, v18);
      v17 += 3;
      --v15;
    }
    while (v15);
    goto LABEL_3;
  }
  return this;
}

uint64_t re::MeshDefinition::skinningData(re::MeshDefinition *this, uint64_t a2, uint64_t a3)
{
  float32x4_t v6 = (void *)((char *)this + 168);
  if (*((void *)this + 21) <= 1uLL)
  {
    float32x4_t v7 = (unsigned char *)*((void *)this + 22);
    if (v7)
    {
      if (!*v7) {
        return 0;
      }
    }
  }
  uint64_t result = re::MeshDefinition::tryGetAttribute(this, "skinnedAnimationJointInfluences");
  if (result)
  {
    uint64_t v9 = (id *)result;
    uint64_t v10 = [*(id *)result bytes];
    unint64_t v11 = [*v9 length];
    *(void *)(a3 + 8) = v10;
    *(void *)(a3 + 16) = v11 >> 3;
    uint64_t result = re::MeshDefinition::tryGetAttribute(this, "skinnedAnimationInfluenceEndIndices");
    if (result)
    {
      uint64_t v12 = (id *)result;
      uint64_t v13 = [*(id *)result bytes];
      unint64_t v14 = [*v12 length];
      *(void *)(a3 + 24) = v13;
      *(void *)(a3 + 32) = v14 >> 2;
      uint64_t Attribute = (id *)re::MeshDefinition::tryGetAttribute(this, "skinnedAnimationRemappedJointIndices");
      if (Attribute)
      {
        uint64_t v16 = Attribute;
        uint64_t v17 = [*Attribute bytes];
        unint64_t v18 = [*v16 length];
        *(void *)(a3 + 40) = v17;
        *(void *)(a3 + 48) = v18 >> 2;
      }
      uint64_t result = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a2, v6);
      if (result)
      {
        *(_DWORD *)a3 = *(_DWORD *)result;
        return 1;
      }
    }
  }
  return result;
}

BOOL re::MeshDefinition::blendShapeData(uint64_t a1, uint64_t *a2, const char *a3, unsigned int a4, __int16 a5)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  uint64_t v9 = re::MeshDefinition::attributes(a1, 2u);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = v9;
  unint64_t v12 = v10;
  unint64_t v13 = 0;
  uint64_t v57 = 0;
  v54[1] = 0;
  unint64_t v55 = 0;
  unsigned int v53 = a4;
  v54[0] = 0;
  int v56 = 0;
  LODWORD(v58) = 0;
  do
  {
    unint64_t v14 = [*(id *)(v11 + 40 * v13) length];
    if (a4 != v14 / 0xC) {
      goto LABEL_15;
    }
    if (*(unsigned char *)(v11 + 40 * v13 + 16))
    {
      uint64_t v15 = *(const char **)(v11 + 40 * v13 + 32);
      if (!v15) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v15 = **(const char ***)(v11 + 40 * v13 + 8);
      if (!v15) {
        goto LABEL_15;
      }
    }
    *(void *)&long long v64 = 0;
    *((void *)&v64 + 1) = "";
    *(void *)uint64_t v59 = 0;
    *(void *)&v59[8] = "";
    if ((*(void *)v59 ^ (unint64_t)v64) > 1)
    {
      re::StringID::destroyString((re::StringID *)v59);
      re::StringID::destroyString((re::StringID *)&v64);
LABEL_13:
      unint64_t v14 = (unint64_t)re::DynamicArray<int>::add(v54, &v58);
      goto LABEL_15;
    }
    if (*((void *)&v64 + 1) == *(void *)&v59[8])
    {
      re::StringID::destroyString((re::StringID *)v59);
      re::StringID::destroyString((re::StringID *)&v64);
    }
    else
    {
      int v17 = strcmp(*((const char **)&v64 + 1), *(const char **)&v59[8]);
      re::StringID::destroyString((re::StringID *)v59);
      re::StringID::destroyString((re::StringID *)&v64);
      if (v17) {
        goto LABEL_13;
      }
    }
LABEL_15:
    unint64_t v13 = (int)v58 + 1;
    LODWORD(v58) = v58 + 1;
  }
  while (v12 > v13);
  BOOL v49 = v55 != 0;
  if (v55)
  {
    *(void *)&long long v64 = 0;
    *((void *)&v64 + 1) = "";
    *(void *)&long long v66 = 0;
    long long v65 = 0uLL;
    BYTE8(v66) = 2;
    HIDWORD(v66) = a4;
    long long v19 = v64;
    *(void *)&long long v64 = 0;
    *((void *)&v64 + 1) = "";
    uint64_t v20 = *a2;
    uint64_t v21 = a2[1];
    *(_OWORD *)a2 = v19;
    *(void *)uint64_t v59 = v19 & 0xFFFFFFFFFFFFFFFELL | v20 & 1;
    *(void *)&v59[8] = v21;
    re::StringID::destroyString((re::StringID *)v59);
    re::FixedArray<float>::operator=(a2 + 2, (uint64_t *)&v65);
    a2[5] = *((void *)&v66 + 1);
    re::FixedArray<re::BlendShapeDefinition>::deinit(&v65);
    re::StringID::destroyString((re::StringID *)&v64);
    *((_WORD *)a2 + 24) = a5;
    if (v55)
    {
      unint64_t v24 = 0;
      unint64_t __s = 3 * a4;
      unint64_t v52 = v12;
      uint64_t v25 = 3 * a4;
      long long v50 = a2;
      while (1)
      {
        unint64_t v26 = a2[3];
        if (v26 <= v24) {
          goto LABEL_39;
        }
        unint64_t v27 = *(int *)(v57 + 4 * v24);
        if (v12 <= v27) {
          goto LABEL_40;
        }
        uint64_t v28 = v11 + 40 * (int)v27;
        uint64_t v29 = *(unsigned char *)(v28 + 16)
            ? *(const char **)(v11 + 40 * (int)v27 + 32)
            : **(const char ***)(v11 + 40 * (int)v27 + 8);
        unint64_t v30 = a2[4];
        uint64_t v31 = (void *)(v30 + 136 * v24);
        *(void *)uint64_t v59 = 0;
        *(void *)&v59[8] = "";
        uint64_t v32 = *(void *)v59;
        uint64_t v33 = *(void *)&v59[8];
        *(void *)uint64_t v59 = 0;
        *(void *)&v59[8] = "";
        uint64_t v34 = v31[1];
        unint64_t v35 = v32 & 0xFFFFFFFFFFFFFFFELL | *v31 & 1;
        v31[1] = v33;
        *(void *)&long long v64 = v35;
        *((void *)&v64 + 1) = v34;
        *uint64_t v31 = v32;
        re::StringID::destroyString((re::StringID *)&v64);
        re::StringID::destroyString((re::StringID *)v59);
        v31[3] = 0;
        v31[9] = 0;
        v31[12] = 0;
        v31[15] = 0;
        uint64_t v22 = (_anonymous_namespace_ *)[*(id *)v28 bytes];
        unint64_t v12 = v52;
        if (v53) {
          break;
        }
LABEL_30:
        ++v24;
        a2 = v50;
        if (v55 <= v24) {
          goto LABEL_31;
        }
      }
      unint64_t v26 = 0;
      unint64_t v41 = v30 + 136 * v24;
      unint64_t v42 = *(void *)(v41 + 48);
      uint32_t v43 = (uint64_t *)(v41 + 56);
      uint64_t v44 = 8;
      while (v42 > v26)
      {
        int v46 = *(_DWORD *)((char *)v22 + v44 - 4);
        int v45 = *(_DWORD *)((char *)v22 + v44);
        uint64_t v47 = *v43;
        *(_DWORD *)(*v43 + v44 - 8) = *(_DWORD *)((char *)v22 + v44 - 8);
        unint64_t v30 = v26 + 1;
        if (v42 <= v26 + 1) {
          goto LABEL_37;
        }
        *(_DWORD *)(v47 + 4 * v26 + 4) = v46;
        unint64_t v30 = v26 + 2;
        if (v42 <= v26 + 2) {
          goto LABEL_38;
        }
        *(_DWORD *)(v47 + v44) = v45;
        v26 += 3;
        v44 += 12;
        if (v25 == v26) {
          goto LABEL_30;
        }
      }
      uint64_t v58 = 0;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v64 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v59 = 136315906;
      *(void *)&v59[4] = "operator[]";
      *(_WORD *)&v59[12] = 1024;
      *(_DWORD *)&v59[14] = 468;
      __int16 v60 = 2048;
      unint64_t v61 = v26;
      __int16 v62 = 2048;
      unint64_t v63 = v42;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_37:
      uint64_t v58 = 0;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v64 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v59 = 136315906;
      *(void *)&v59[4] = "operator[]";
      *(_WORD *)&v59[12] = 1024;
      *(_DWORD *)&v59[14] = 468;
      __int16 v60 = 2048;
      unint64_t v61 = v30;
      __int16 v62 = 2048;
      unint64_t v63 = v42;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_38:
      uint64_t v58 = 0;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v64 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v59 = 136315906;
      *(void *)&v59[4] = "operator[]";
      *(_WORD *)&v59[12] = 1024;
      *(_DWORD *)&v59[14] = 468;
      __int16 v60 = 2048;
      unint64_t v61 = v30;
      __int16 v62 = 2048;
      unint64_t v63 = v42;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_39:
      uint64_t v58 = 0;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v64 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v59 = 136315906;
      *(void *)&v59[4] = "operator[]";
      *(_WORD *)&v59[12] = 1024;
      *(_DWORD *)&v59[14] = 468;
      __int16 v60 = 2048;
      unint64_t v61 = v24;
      __int16 v62 = 2048;
      unint64_t v63 = v26;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_40:
      re::internal::assertLog((re::internal *)6, v23, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v27, v12);
      _os_crash();
      __break(1u);
    }
  }
LABEL_31:
  if (v54[0])
  {
    if (v57) {
      (*(void (**)(void))(*(void *)v54[0] + 40))();
    }
  }
  return v49;
}

uint64_t re::MeshDefinition::attributes(uint64_t a1, unsigned int a2)
{
  if (!*(_DWORD *)(a1 + 8 * a2 + 76)) {
    return 0;
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8 * a2 + 72);
  if (*(void *)(a1 + 56) <= v2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 64) + 40 * v2;
}

unint64_t re::copyPositionAttribute(const char **a1, float32x4_t *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!strcmp(*a1, "vertexPosition"))
  {
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) ", "0 == strcmp(attributeDescriptor.name, MeshAttributeNames::kVertexPosition.cstr())", "copyPositionAttribute", 773);
    unint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

unint64_t re::anonymous namespace'::copyAttributeValuesThreeComponents(uint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5 = (void *)a1;
  uint64_t v6 = *(unsigned __int8 *)(a1 + 8);
  if (*(unsigned __int8 *)(a1 + 8) > 0x19u)
  {
    if (v6 == 26)
    {
      unint64_t result = 8 * a3;
      if (!a5) {
        return result;
      }
      if (result < a5) {
        goto LABEL_31;
      }
      if (!a3) {
        return 0;
      }
      do
      {
        long long v17 = (__int128)*a2++;
        _S0 = v17;
        __asm { FCVT            H1, S0 }
        *(_WORD *)a4 = _H1;
        _S1 = DWORD1(v17);
        __asm { FCVT            H1, S1 }
        *(_WORD *)(a4 + 2) = _S1;
        _S0 = DWORD2(v17);
        __asm { FCVT            H0, S0 }
        *(_WORD *)(a4 + 4) = _S0;
        a4 += 8;
        --a3;
      }
      while (a3);
    }
    else
    {
      if (v6 != 30) {
        goto LABEL_32;
      }
      unint64_t result = 12 * a3;
      if (!a5) {
        return result;
      }
      if (result < a5)
      {
LABEL_29:
        re::internal::assertLog((re::internal *)7, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Destination buffer is too small for attribute '%s' (got %zu bytes, expected %zu bytes)", "requiredBytes >= availableBytes", "copyAttributeValuesThreeComponents", 595, *v5, a5, result);
        unint64_t result = _os_crash();
        __break(1u);
LABEL_30:
        re::internal::assertLog((re::internal *)7, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Destination buffer is too small for attribute '%s' (got %zu bytes, expected %zu bytes)", "requiredBytes >= availableBytes", "copyAttributeValuesThreeComponents", 655, *v5, a5, result);
        unint64_t result = _os_crash();
        __break(1u);
LABEL_31:
        re::internal::assertLog((re::internal *)7, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Destination buffer is too small for attribute '%s' (got %zu bytes, expected %zu bytes)", "requiredBytes >= availableBytes", "copyAttributeValuesThreeComponents", 615, *v5, a5, result);
        _os_crash();
        __break(1u);
        goto LABEL_32;
      }
      if (!a3) {
        return 0;
      }
      do
      {
        long long v12 = (__int128)*a2++;
        *(void *)a4 = v12;
        *(_DWORD *)(a4 + 8) = DWORD2(v12);
        a4 += 12;
        --a3;
      }
      while (a3);
    }
  }
  else
  {
    if (v6 != 8)
    {
      if (v6 == 23)
      {
        unint64_t result = 8 * a3;
        if (!a5) {
          return result;
        }
        if (result >= a5)
        {
          if (a3)
          {
            do
            {
              float32x4_t v8 = *a2++;
              float32x4_t v9 = v8;
              v9.i32[3] = 0;
              float32x4_t v10 = vmaxnmq_f32(v9, (float32x4_t)xmmword_2343E1E60);
              v10.i32[3] = 0;
              float32x4_t v11 = vminnmq_f32(v10, (float32x4_t)xmmword_2343679C0);
              *(_WORD *)(a4 + 2) = llroundf(vmuls_lane_f32(32767.0, *(float32x2_t *)v11.f32, 1));
              *(_WORD *)a4 = llroundf(32767.0 * v11.f32[0]);
              *(_WORD *)(a4 + 4) = llroundf(vmuls_lane_f32(32767.0, v11, 2));
              a4 += 8;
              --a3;
            }
            while (a3);
            return result;
          }
          return 0;
        }
        re::internal::assertLog((re::internal *)7, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Destination buffer is too small for attribute '%s' (got %zu bytes, expected %zu bytes)", "requiredBytes >= availableBytes", "copyAttributeValuesThreeComponents", 635, *v5, a5, 8 * a3);
        unint64_t result = _os_crash();
        __break(1u);
        goto LABEL_29;
      }
LABEL_32:
      re::internal::assertLog((re::internal *)5, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Unexpected vertex format %d", "false", "copyAttributeValuesThreeComponents", 669, v6);
      unint64_t result = _os_crash();
      __break(1u);
      return result;
    }
    unint64_t result = 4 * a3;
    if (!a5) {
      return result;
    }
    if (result < a5) {
      goto LABEL_30;
    }
    if (!a3) {
      return 0;
    }
    do
    {
      float32x4_t v13 = *a2++;
      float32x4_t v14 = v13;
      v14.i32[3] = 0;
      float32x4_t v15 = vmaxnmq_f32(v14, (float32x4_t)0);
      v15.i32[3] = 0;
      float32x4_t v16 = vminnmq_f32(v15, (float32x4_t)xmmword_2343679C0);
      *(unsigned char *)(a4 + 1) = llroundf(vmuls_lane_f32(255.0, *(float32x2_t *)v16.f32, 1));
      *(unsigned char *)a4 = llroundf(255.0 * v16.f32[0]);
      *(unsigned char *)(a4 + 2) = llroundf(vmuls_lane_f32(255.0, v16, 2));
      a4 += 4;
      --a3;
    }
    while (a3);
  }
  return result;
}

unint64_t re::copyNormalAttribute(const char **a1, float32x4_t *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!strcmp(*a1, "vertexNormal"))
  {
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) ", "0 == strcmp(attributeDescriptor.name, MeshAttributeNames::kVertexNormal.cstr())", "copyNormalAttribute", 780);
    unint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

unint64_t re::copyTangentAttribute(const char **a1, float32x4_t *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!strcmp(*a1, "vertexTangent"))
  {
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) ", "0 == strcmp(attributeDescriptor.name, MeshAttributeNames::kVertexTangent.cstr())", "copyTangentAttribute", 787);
    unint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

unint64_t re::copyBitangentAttribute(const char **a1, float32x4_t *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!strcmp(*a1, "vertexBitangent"))
  {
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) ", "0 == strcmp(attributeDescriptor.name, MeshAttributeNames::kVertexBitangent.cstr())", "copyBitangentAttribute", 794);
    unint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

unint64_t re::copyUVAttribute(const char **a1, uint64_t *a2, uint64_t a3, void *a4, unint64_t a5)
{
  if (!strcmp(*a1, "vertexUV"))
  {
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) ", "0 == strcmp(attributeDescriptor.name, MeshAttributeNames::kVertexUV.cstr())", "copyUVAttribute", 801);
    unint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

unint64_t re::anonymous namespace'::copyAttributeValuesTwoComponents(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4, unint64_t a5)
{
  if (*(unsigned char *)(a1 + 8) != 29)
  {
    re::internal::assertLog((re::internal *)5, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Unexpected vertex format %d", "attributeDescriptor.format == mtl::VertexFormat::kFloat2", "copyAttributeValuesTwoComponents", 579, *(unsigned __int8 *)(a1 + 8));
    unint64_t result = _os_crash();
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v5 = (void *)a1;
  unint64_t result = 8 * a3;
  if (!a5) {
    return result;
  }
  if (result < a5)
  {
LABEL_8:
    re::internal::assertLog((re::internal *)7, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Destination buffer is too small for attribute '%s' (got %zu bytes, expected %zu bytes)", "requiredBytes >= availableBytes", "copyAttributeVectors", 518, *v5, a5, result);
    unint64_t result = _os_crash();
    __break(1u);
    return result;
  }
  for (; a3; --a3)
  {
    uint64_t v7 = *a2++;
    *a4++ = v7;
  }
  return result;
}

unint64_t re::copyColorAttribute(const char **a1, float32x4_t *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!strcmp(*a1, "vertexColor"))
  {
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) ", "0 == strcmp(attributeDescriptor.name, MeshAttributeNames::kVertexColor.cstr())", "copyColorAttribute", 808);
    unint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

unint64_t re::copyColorAttribute(const char **a1, float32x4_t *a2, uint64_t a3, float16x4_t *a4, unint64_t a5)
{
  if (!strcmp(*a1, "vertexColor"))
  {
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) ", "0 == strcmp(attributeDescriptor.name, MeshAttributeNames::kVertexColor.cstr())", "copyColorAttribute", 815);
    unint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

unint64_t re::anonymous namespace'::copyAttributeValuesFourComponents(uint64_t a1, float32x4_t *a2, uint64_t a3, float16x4_t *a4, unint64_t a5)
{
  uint64_t v5 = (void *)a1;
  uint64_t v6 = *(unsigned __int8 *)(a1 + 8);
  if (*(unsigned __int8 *)(a1 + 8) > 0x1Au)
  {
    if (v6 == 27)
    {
      unint64_t result = 8 * a3;
      if (!a5) {
        return result;
      }
      if (result < a5) {
        goto LABEL_33;
      }
      if (!a3) {
        return 0;
      }
      do
      {
        float32x4_t v21 = *a2++;
        *a4++ = vcvt_f16_f32(v21);
        --a3;
      }
      while (a3);
    }
    else
    {
      if (v6 != 31) {
        goto LABEL_34;
      }
      unint64_t result = 16 * a3;
      if (!a5) {
        return result;
      }
      if (result < a5)
      {
LABEL_31:
        re::internal::assertLog((re::internal *)7, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Destination buffer is too small for attribute '%s' (got %zu bytes, expected %zu bytes)", "requiredBytes >= availableBytes", "copyAttributeValuesFourComponents", 685, *v5, a5, result);
        unint64_t result = _os_crash();
        __break(1u);
LABEL_32:
        re::internal::assertLog((re::internal *)7, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Destination buffer is too small for attribute '%s' (got %zu bytes, expected %zu bytes)", "requiredBytes >= availableBytes", "copyAttributeValuesFourComponents", 748, *v5, a5, result);
        unint64_t result = _os_crash();
        __break(1u);
LABEL_33:
        re::internal::assertLog((re::internal *)7, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Destination buffer is too small for attribute '%s' (got %zu bytes, expected %zu bytes)", "requiredBytes >= availableBytes", "copyAttributeValuesFourComponents", 706, *v5, a5, result);
        _os_crash();
        __break(1u);
        goto LABEL_34;
      }
      if (!a3) {
        return 0;
      }
      do
      {
        long long v16 = (__int128)*a2++;
        *(_OWORD *)a4->i8 = v16;
        a4 += 2;
        --a3;
      }
      while (a3);
    }
  }
  else
  {
    if (v6 != 9)
    {
      if (v6 == 24)
      {
        unint64_t result = 8 * a3;
        if (!a5) {
          return result;
        }
        if (result >= a5)
        {
          if (a3)
          {
            __asm
            {
              FMOV            V0.4S, #-1.0
              FMOV            V1.4S, #1.0
            }
            float32x4_t v14 = (float32x4_t)vdupq_n_s32(0x46FFFE00u);
            do
            {
              float32x4_t v15 = *a2++;
              *a4++ = (float16x4_t)vmovn_s32(vcvtq_s32_f32(vrndaq_f32(vmulq_f32(vminnmq_f32(vmaxnmq_f32(v15, _Q0), _Q1), v14))));
              --a3;
            }
            while (a3);
            return result;
          }
          return 0;
        }
        re::internal::assertLog((re::internal *)7, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Destination buffer is too small for attribute '%s' (got %zu bytes, expected %zu bytes)", "requiredBytes >= availableBytes", "copyAttributeValuesFourComponents", 727, *v5, a5, 8 * a3);
        unint64_t result = _os_crash();
        __break(1u);
        goto LABEL_31;
      }
LABEL_34:
      re::internal::assertLog((re::internal *)5, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Unexpected vertex format %d", "false", "copyAttributeValuesFourComponents", 763, v6);
      unint64_t result = _os_crash();
      __break(1u);
      return result;
    }
    unint64_t result = 4 * a3;
    if (!a5) {
      return result;
    }
    if (result < a5) {
      goto LABEL_32;
    }
    if (!a3) {
      return 0;
    }
    __asm { FMOV            V1.4S, #1.0 }
    float32x4_t v18 = (float32x4_t)vdupq_n_s32(0x437F0000u);
    do
    {
      float32x4_t v19 = *a2++;
      int16x8_t v20 = (int16x8_t)vcvtq_s32_f32(vrndaq_f32(vmulq_f32(vminnmq_f32(vmaxnmq_f32(v19, (float32x4_t)0), _Q1), v18)));
      *(int16x4_t *)v20.i8 = vmovn_s32((int32x4_t)v20);
      a4->i32[0] = vmovn_s16(v20).u32[0];
      a4 = (float16x4_t *)((char *)a4 + 4);
      --a3;
    }
    while (a3);
  }
  return result;
}

uint64_t re::copySkinWeightsAttribute(uint64_t a1, const void *a2, size_t a3, void *a4, size_t a5)
{
  uint64_t v10 = *(const char **)a1;
  if (strcmp(*(const char **)a1, "skinnedAnimationWeights"))
  {
    re::internal::assertLog((re::internal *)4, v11, "assertion failure: '%s' (%s:line %i) ", "0 == strcmp(attributeDescriptor.name, MeshAttributeNames::kSkinnedAnimationWeights.cstr())", "copySkinWeightsAttribute", 840);
    _os_crash();
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v12 = *(unsigned __int8 *)(a1 + 8);
  if (v12 != 28)
  {
LABEL_8:
    re::internal::assertLog((re::internal *)5, v11, "assertion failure: '%s' (%s:line %i) Unexpected vertex format %d", "attributeDescriptor.format == mtl::VertexFormat::kFloat", "copyAttributeFloatValues", 552, v12);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  a3 *= 4;
  if (!a5) {
    return a3;
  }
  if (a3 >= a5)
  {
    memcpy(a4, a2, a3);
    return a3;
  }
LABEL_9:
  re::internal::assertLog((re::internal *)7, v11, "assertion failure: '%s' (%s:line %i) Destination buffer is too small for attribute '%s' (got %zu bytes, expected %zu bytes)", "requiredBytes >= availableBytes", "copyAttributeValues", 542, v10, a5, a3);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::copySkinJointIndicesAttribute(const char **a1, const void *a2, uint64_t a3, void *a4, unint64_t a5)
{
  uint64_t v10 = *a1;
  if (!strcmp(*a1, "skinnedAnimationJointIndices") || !strcmp(v10, "skinnedAnimationRemappedJointIndices"))
  {
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v11, "assertion failure: '%s' (%s:line %i) ", "0 == strcmp(attributeDescriptor.name, MeshAttributeNames::kSkinnedAnimationJointIndices.cstr()) || 0 == strcmp(attributeDescriptor.name, MeshAttributeNames::kSkinnedAnimationRemappedJointIndices.cstr())", "copySkinJointIndicesAttribute", 848);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::anonymous namespace'::copyAttributeInt32Values(uint64_t a1, const void *a2, uint64_t a3, void *__dst, unint64_t a5)
{
  if (*(unsigned char *)(a1 + 8) == 32)
  {
    unint64_t v5 = 4 * a3;
    if (!a5) {
      return v5;
    }
    if (v5 >= a5)
    {
      memcpy(__dst, a2, 4 * a3);
      return v5;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)5, (uint64_t)a2, a3, __dst, "assertion failure: '%s' (%s:line %i) Unexpected vertex format %d", "attributeDescriptor.format == mtl::VertexFormat::kInt", "copyAttributeInt32Values", 561, *(unsigned __int8 *)(a1 + 8));
    a1 = _os_crash();
    __break(1u);
  }
  re::internal::assertLog((re::internal *)7, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Destination buffer is too small for attribute '%s' (got %zu bytes, expected %zu bytes)", "requiredBytes >= availableBytes", "copyAttributeValues", 542, *(void *)a1, a5, v5);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::copySkinInfluenceEndIndicesAttribute(const char **a1, const void *a2, uint64_t a3, void *a4, unint64_t a5)
{
  if (!strcmp(*a1, "skinnedAnimationInfluenceEndIndices"))
  {
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) ", "0 == strcmp(attributeDescriptor.name, MeshAttributeNames::kSkinnedAnimationInfluenceEndIndices.cstr())", "copySkinInfluenceEndIndicesAttribute", 855);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::copyAdjacencyAttribute(const char **a1, const void *a2, uint64_t a3, void *a4, unint64_t a5)
{
  if (!strcmp(*a1, "vertexAdjacencies"))
  {
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) ", "0 == strcmp(attributeDescriptor.name, MeshAttributeNames::kVertexAdjacentFaces.cstr())", "copyAdjacencyAttribute", 869);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::anonymous namespace'::copyAttributeUInt32Values(uint64_t a1, const void *a2, uint64_t a3, void *__dst, unint64_t a5)
{
  if (*(unsigned char *)(a1 + 8) == 32)
  {
    unint64_t v5 = 4 * a3;
    if (!a5) {
      return v5;
    }
    if (v5 >= a5)
    {
      memcpy(__dst, a2, 4 * a3);
      return v5;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)5, (uint64_t)a2, a3, __dst, "assertion failure: '%s' (%s:line %i) Unexpected vertex format %d", "attributeDescriptor.format == mtl::VertexFormat::kInt", "copyAttributeUInt32Values", 570, *(unsigned __int8 *)(a1 + 8));
    a1 = _os_crash();
    __break(1u);
  }
  re::internal::assertLog((re::internal *)7, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Destination buffer is too small for attribute '%s' (got %zu bytes, expected %zu bytes)", "requiredBytes >= availableBytes", "copyAttributeValues", 542, *(void *)a1, a5, v5);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::copyValenceAttribute(const char **a1, const void *a2, uint64_t a3, void *a4, unint64_t a5)
{
  if (!strcmp(*a1, "skinnedAnimationRemappedJointIndices"))
  {
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) ", "0 == strcmp(attributeDescriptor.name, MeshAttributeNames::kSkinnedAnimationRemappedJointIndices.cstr())", "copyValenceAttribute", 876);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

unint64_t re::copyInfluenceAttribute(void *a1, int *a2, int *a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t result = 8 * a4;
  if (a6)
  {
    if (result < a6)
    {
      re::internal::assertLog((re::internal *)7, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Destination buffer is too small for attribute '%s' (got %zu bytes, expected %zu bytes)", "requiredBytes >= availableBytes", "copyInfluenceAttribute", 891, *a1, a6, 8 * a4);
      unint64_t result = _os_crash();
      __break(1u);
    }
    else if (a4)
    {
      float32x4_t v8 = (_DWORD *)(a5 + 4);
      do
      {
        int v9 = *a2++;
        *(v8 - 1) = v9;
        int v10 = *a3++;
        *float32x4_t v8 = v10;
        v8 += 2;
        --a4;
      }
      while (a4);
    }
  }
  return result;
}

uint64_t re::copyInfluenceAttribute(void *a1, const void *a2, uint64_t a3, void *__dst, unint64_t a5)
{
  unint64_t v5 = 8 * a3;
  if (!a5) {
    return v5;
  }
  if (v5 >= a5)
  {
    memcpy(__dst, a2, 8 * a3);
    return v5;
  }
  re::internal::assertLog((re::internal *)7, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Destination buffer is too small for attribute '%s' (got %zu bytes, expected %zu bytes)", "requiredBytes >= availableBytes", "copyAttributeValues", 542, *a1, a5, 8 * a3);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

void re::collectMeshAttributeBuffers(uint64_t a1@<X0>, unint64_t a2@<X1>, int *a3@<X2>, unint64_t a4@<X3>, id *Attribute@<X4>, id **a6@<X8>)
{
  if (!a4)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_70;
  }
  unint64_t v9 = *a3;
  if (a2 <= v9)
  {
LABEL_70:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v9, a2);
    _os_crash();
    __break(1u);
LABEL_71:
    re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 56, v6);
    _os_crash();
    __break(1u);
LABEL_72:
    re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
LABEL_73:
    re::internal::assertLog((re::internal *)5, v17, "assertion failure: '%s' (%s:line %i) Unsupported index type %d", "false", "indexDataSlice", 282, v36);
    _os_crash();
    __break(1u);
LABEL_74:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v12 = *(void *)(a1 + 8 * v9);
  uint64_t v13 = *(void *)(v12 + 32);
  re::MeshDefinition::attributes(v12, 0);
  unint64_t v15 = v13 != 0;
  uint64_t v57 = v14;
  if (v13) {
    unint64_t v6 = v14 + 1;
  }
  else {
    unint64_t v6 = v14;
  }
  *a6 = Attribute;
  a6[1] = (id *)v6;
  if (!v6) {
    goto LABEL_74;
  }
  if (v6 >= 0x492492492492493) {
    goto LABEL_71;
  }
  uint64_t v16 = (*((uint64_t (**)(id *, unint64_t, uint64_t))*Attribute + 4))(Attribute, 56 * v6, 8);
  a6[2] = (id *)v16;
  if (!v16) {
    goto LABEL_72;
  }
  unint64_t v18 = v6 - 1;
  if (v6 != 1)
  {
    do
    {
      *(void *)uint64_t v16 = 0;
      *(_WORD *)(v16 + 8) = 256;
      *(_DWORD *)(v16 + 12) = 0;
      *(_DWORD *)(v16 + 16) = 0;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0;
      *(void *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 4;
      v16 += 56;
      --v18;
    }
    while (v18);
  }
  *(void *)uint64_t v16 = 0;
  *(_WORD *)(v16 + 8) = 256;
  *(_DWORD *)(v16 + 12) = 0;
  *(_DWORD *)(v16 + 16) = 0;
  *(void *)(v16 + 24) = 0;
  *(void *)(v16 + 32) = 0;
  *(void *)(v16 + 40) = 0;
  *(void *)(v16 + 48) = 4;
  unint64_t v19 = (unint64_t)a6[1];
  if (v19 <= v15) {
    goto LABEL_74;
  }
  int16x8_t v20 = a6[2];
  if (v13)
  {
    if (*(unsigned char *)(v12 + 24))
    {
      if (*(unsigned char *)(v12 + 24) != 1)
      {
        re::internal::assertLog((re::internal *)5, v17, "assertion failure: '%s' (%s:line %i) Unsupported index type %d", "false", "indexAttributeDescriptor", 261, *(unsigned __int8 *)(v12 + 24));
        _os_crash();
        __break(1u);
        return;
      }
      float32x4_t v21 = &re::MeshDefinition::kIndexUInt32;
    }
    else
    {
      float32x4_t v21 = &re::MeshDefinition::kIndexUInt16;
    }
    *(_OWORD *)int16x8_t v20 = *v21;
    re::FixedArray<re::Slice<unsigned char>>::init<>((uint64_t *)v20 + 3, (uint64_t)Attribute, a4);
  }
  id v54 = &v20[7 * (v13 != 0)];
  uint64_t v56 = (uint64_t)(56 * v19 - 56 * (v13 != 0)) / 56;
  if (v57)
  {
    uint64_t v22 = 0;
    unint64_t v6 = 0;
    uint64_t v23 = (uint64_t *)&v20[7 * (v13 != 0) + 3];
    while (v56 != v6)
    {
      uint64_t v24 = re::MeshDefinition::attributes(v12, 0);
      if (v25 <= v6) {
        goto LABEL_63;
      }
      uint64_t v26 = *(void *)(v24 + v22 + 8);
      if (*(unsigned char *)(v24 + v22 + 16))
      {
        uint64_t v27 = *(void *)(v24 + v22 + 32);
        unint64_t v28 = *(unsigned __int16 *)(v26 + 8) | ((unint64_t)*(unsigned int *)(v26 + 12) << 32);
      }
      else
      {
        uint64_t v27 = *(void *)v26;
        unint64_t v28 = *(void *)(v26 + 8);
      }
      *(v23 - 3) = v27;
      *(v23 - 2) = v28;
      re::FixedArray<re::Slice<unsigned char>>::init<>(v23, (uint64_t)Attribute, a4);
      unint64_t v30 = ((unsigned __int16)re::sizeFromVertexFormat(*((unsigned __int8 *)v23 - 16), v29) + 3) & 0x1FC;
      if (v30 <= v23[3]) {
        unint64_t v30 = v23[3];
      }
      v23[3] = v30;
      ++v6;
      v22 += 40;
      v23 += 7;
      if (v57 == v6) {
        goto LABEL_28;
      }
    }
    goto LABEL_62;
  }
LABEL_28:
  unint64_t v12 = a2;
  if (v13)
  {
    unint64_t v6 = 0;
    unint64_t v15 = 0;
    if (a4 <= 1) {
      uint64_t v31 = 1;
    }
    else {
      uint64_t v31 = a4;
    }
    while (1)
    {
      unint64_t v32 = a3[v15];
      if (a2 <= v32) {
        break;
      }
      uint64_t v33 = *(void *)(a1 + 8 * v32);
      uint64_t v34 = *(void **)(v33 + 32);
      if (!v34) {
        goto LABEL_65;
      }
      uint64_t Attribute = (id *)[v34 bytes];
      unint64_t v35 = [*(id *)(v33 + 32) length];
      uint64_t v36 = *(unsigned __int8 *)(v33 + 24);
      if (*(unsigned char *)(v33 + 24))
      {
        if (v36 != 1) {
          goto LABEL_73;
        }
        unsigned int v37 = 4;
      }
      else
      {
        unsigned int v37 = 2;
      }
      unsigned int v38 = *(_DWORD *)(v33 + 40);
      unint64_t v39 = v37 * (unint64_t)v38;
      if (v39 > v35) {
        goto LABEL_66;
      }
      if ((unint64_t)v20[4] <= v15) {
        goto LABEL_67;
      }
      __int16 v40 = (id **)((char *)v20[5] + v6);
      *__int16 v40 = Attribute;
      v40[1] = (id *)v39;
      *((_DWORD *)v20 + 4) += v38;
      ++v15;
      v6 += 16;
      if (v31 == v15) {
        goto LABEL_41;
      }
    }
LABEL_64:
    re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v32, v12);
    _os_crash();
    __break(1u);
LABEL_65:
    re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) Mesh definition has no index data buffer", "m_indexData.isValid()", "indexDataSlice", 268);
    unint64_t v35 = _os_crash();
    __break(1u);
LABEL_66:
    re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index data buffer is too small (got %zu bytes, expected %zu bytes)", "requiredSize <= dataSize", "indexDataSlice", 288, v35, v39);
    _os_crash();
    __break(1u);
LABEL_67:
    unint64_t v6 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_68:
    re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v56, v56);
    _os_crash();
    __break(1u);
    goto LABEL_69;
  }
LABEL_41:
  if (!v57) {
    return;
  }
  uint64_t v41 = 0;
  if (a4 <= 1) {
    uint64_t v42 = 1;
  }
  else {
    uint64_t v42 = a4;
  }
  uint64_t v58 = v42;
  uint64_t v59 = a3;
  do
  {
    if (v41 == v56) {
      goto LABEL_68;
    }
    uint64_t v43 = 0;
    unint64_t v44 = 0;
    uint64_t v55 = v41;
    int v45 = &v54[7 * v41];
    unint64_t v61 = (unint64_t *)(v45 + 4);
    do
    {
      unint64_t v46 = v59[v44];
      if (v12 <= v46)
      {
        re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v59[v44], v12);
        _os_crash();
        __break(1u);
LABEL_59:
        re::internal::assertLog((re::internal *)5, v48, "assertion failure: '%s' (%s:line %i) Attribute '%s' has no data buffer", "attribute.data.isValid()", "attributeDataSlice", 933, v15);
        _os_crash();
        __break(1u);
LABEL_60:
        re::internal::assertLog((re::internal *)7, v17, "assertion failure: '%s' (%s:line %i) Attribute '%s' data is too small (got %zu bytes, expected %zu bytes)", "requiredSize <= dataSize", "attributeDataSlice", 941, v15, Attribute, v52);
        _os_crash();
        __break(1u);
LABEL_61:
        unint64_t v6 = &_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_62:
        re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v56, v56);
        _os_crash();
        __break(1u);
LABEL_63:
        re::internal::assertLog((re::internal *)6, v25, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v6, v25);
        _os_crash();
        __break(1u);
        goto LABEL_64;
      }
      uint64_t v47 = *(re::MeshDefinition **)(a1 + 8 * v46);
      uint64_t Attribute = (id *)re::MeshDefinition::tryGetAttribute(v47, (const char *)*v45);
      uint64_t v49 = re::MeshDefinition::attributeElementCount(v47, (const VertexAttributeDescriptor *)*((unsigned __int8 *)v45 + 9));
      long long v50 = (unint64_t *)Attribute[1];
      if (*((unsigned char *)Attribute + 16))
      {
        unint64_t v15 = (unint64_t)Attribute[4];
        unint64_t v6 = *((unsigned __int8 *)v50 + 8);
      }
      else
      {
        unint64_t v15 = *v50;
        unint64_t v6 = v50[1];
      }
      if (!*Attribute) {
        goto LABEL_59;
      }
      unint64_t v12 = [*Attribute bytes];
      uint64_t Attribute = (id *)[*Attribute length];
      unint64_t v52 = (((unsigned __int16)re::sizeFromVertexFormat(v6, v51) + 3) & 0x1FC) * v49;
      if (v52 > (unint64_t)Attribute) {
        goto LABEL_60;
      }
      unint64_t v15 = *v61;
      if (*v61 <= v44) {
        goto LABEL_61;
      }
      unsigned int v53 = (unint64_t *)((char *)v45[5] + v43);
      unint64_t *v53 = v12;
      v53[1] = v52;
      *((_DWORD *)v45 + 4) += v49;
      ++v44;
      v43 += 16;
      unint64_t v12 = a2;
    }
    while (v58 != v44);
    uint64_t v41 = v55 + 1;
  }
  while (v55 + 1 != v57);
}

void re::FixedArray<re::Slice<unsigned char>>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  if (a3 >> 60)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 16, a3);
    _os_crash();
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v5 = 16 * a3;
  unint64_t v6 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_7:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  float32x4_t v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 16);
    float32x4_t v8 = (void *)((char *)v8 + v5 - 16);
  }
  *float32x4_t v8 = 0;
  v8[1] = 0;
}

void re::MeshDefinition::AttributeArray::~AttributeArray(re::MeshDefinition::AttributeArray *this)
{
  *(void *)this = &unk_26E7119E0;
  unint64_t v2 = (uint64_t *)((char *)this + 24);
  re::FixedArray<re::Optional<re::StringID>>::deinit((void *)this + 6);
  re::FixedArray<CoreIKTransform>::deinit(v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E7119E0;
  unint64_t v2 = (uint64_t *)((char *)this + 24);
  re::FixedArray<re::Optional<re::StringID>>::deinit((void *)this + 6);
  re::FixedArray<CoreIKTransform>::deinit(v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void re::FixedArray<re::MeshDefinition::VertexAttributeDescriptor const*>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  if (!a3) {
    return;
  }
  if (a3 >> 61)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v5 = 8 * a3;
  unint64_t v6 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 8 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  float32x4_t v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 8);
    float32x4_t v8 = (void *)((char *)v8 + v5 - 8);
  }
  *float32x4_t v8 = 0;
}

void *re::FixedArray<re::Optional<re::StringID>>::init<>(void *result, uint64_t a2, unint64_t a3)
{
  void *result = a2;
  result[1] = a3;
  if (!a3) {
    return result;
  }
  if (a3 >= 0xAAAAAAAAAAAAAABLL)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 24, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = result;
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 24 * a3, 8);
  v4[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    uint64_t result = (void *)_os_crash();
    __break(1u);
    return result;
  }
  unint64_t v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(unsigned char *)uint64_t result = 0;
      result += 3;
      --v6;
    }
    while (v6);
  }
  *(unsigned char *)uint64_t result = 0;
  return result;
}

void *re::FixedArray<re::Optional<re::StringID>>::deinit(void *result)
{
  if (*result)
  {
    id v1 = result;
    unint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      uint64_t v4 = 24 * v2;
      uint64_t v5 = (re::StringID *)(result[2] + 8);
      do
      {
        if (*((unsigned char *)v5 - 8)) {
          re::StringID::destroyString(v5);
        }
        uint64_t v5 = (re::StringID *)((char *)v5 + 24);
        v4 -= 24;
      }
      while (v4);
      uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v1 + 40))(*v1, v1[2]);
      *unint64_t v3 = 0;
      v3[1] = 0;
    }
    void *v1 = 0;
  }
  return result;
}

id *re::RenderGraphNodeBase::getEncoderLabel(re::RenderGraphNodeBase *this)
{
  id v1 = (id *)((char *)this + 88);
  if (!*((void *)this + 11))
  {
    re::ns::String::format((re::ns::String *)"%s::%s::%s", &v5, *((void *)this + 3), *((void *)this + 4), *((void *)this + 2));
    if (v1 != &v5)
    {
      id v2 = v5;
      id v5 = 0;
      id v3 = *v1;
      id *v1 = v2;
    }
  }
  return v1;
}

void *re::allocInfo_RenderGraphNodeBase(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96020, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF96020))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF96048, "RenderGraphNodeBase");
    __cxa_guard_release(&qword_26AF96020);
  }
  return &unk_26AF96048;
}

void re::initInfo_RenderGraphNodeBase(re *this, re::IntrospectionBase *a2)
{
  v22[0] = 0x11A172D93A739296;
  v22[1] = "RenderGraphNodeBase";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + 2) = v23;
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_397, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&_MergedGlobals_397);
    if (v4)
    {
      id v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::StringID>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "name";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 0x800000001;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF96028 = v8;
      unint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::introspect_BOOL((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "AutoMSAA";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x4100000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF96030 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      unint64_t v15 = re::introspect_BOOL((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "EnableVRR";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x4300000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF96038 = v16;
      uint64_t v17 = re::introspectionAllocator((re *)v16);
      unint64_t v19 = re::introspect_BOOL((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "Enabled";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x4000000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF96040 = v20;
      __cxa_guard_release(&_MergedGlobals_397);
    }
  }
  *((void *)this + 2) = 0x6000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF96028;
  re::IntrospectionRegistry::add(this, v3);
  long long v21 = v23;
}

uint64_t re::introspect_RenderGraphNodeBase(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphNodeBase", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphNodeBase, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphNodeBase, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphNodeBase>, this);
}

void re::PlanarReflectionContext::makeReflectionCameraMultiViews(re::PlanarReflectionContext *this@<X0>, re::RenderFrame *a2@<X1>, const re::CameraMultiView *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v116 = *MEMORY[0x263EF8340];
  uint64_t v8 = *((void *)a2 + 47);
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(_DWORD *)(a4 + 24) = 0;
  *(void *)a4 = v8;
  re::DynamicArray<re::CameraMultiView>::setCapacity((void *)a4, 0);
  uint64_t v13 = (_anonymous_namespace_ *)a4;
  ++*(_DWORD *)(a4 + 24);
  if (*((void *)this + 2))
  {
    uint64_t v9 = 0;
    uint64_t v12 = this;
    do
    {
      re::CameraMultiView::CameraMultiView((re::CameraMultiView *)v56, a3);
      re::PlanarReflectionContext::makeReflectionCameraView(this, a2, a3, v9, (uint64_t)&v14);
      re::DynamicString::operator=((re::DynamicString *)v56, (re::DynamicString *)&v14);
      long long v65 = v24;
      long long v66 = v25;
      long long v67 = v26;
      long long v68 = v27;
      long long v61 = v20;
      long long v62 = v21;
      long long v63 = v22;
      long long v64 = v23;
      long long v57 = v16;
      long long v58 = v17;
      long long v59 = v18;
      long long v60 = v19;
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v69, (uint64_t)v28);
      v69[20] = v29;
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v70, (uint64_t)v30);
      v70[5] = v33;
      v70[6] = v34;
      uint64_t v71 = v35;
      v70[3] = v31;
      v70[4] = v32;
      char v72 = v36;
      if (v73 || v37)
      {
        if (!v73 || v37)
        {
          if (!v73) {
            BOOL v73 = v37 != 0;
          }
          char v74 = v38;
        }
        else
        {
          BOOL v73 = 0;
        }
      }
      if (v75 || v39)
      {
        if (!v75 || v39)
        {
          if (!v75) {
            BOOL v75 = v39 != 0;
          }
          int v76 = v40;
        }
        else
        {
          BOOL v75 = 0;
        }
      }
      long long v81 = v45;
      long long v82 = v46;
      long long v83 = v47;
      long long v84 = v48;
      long long v77 = v41;
      long long v78 = v42;
      long long v79 = v43;
      long long v80 = v44;
      long long v87 = v51;
      long long v88 = v52;
      long long v85 = v49;
      long long v86 = v50;
      *(void *)((char *)v91 + 13) = *(void *)((char *)v55 + 13);
      long long v90 = v54;
      v91[0] = v55[0];
      long long v89 = v53;
      re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)v30);
      re::DynamicArray<re::RenderGraphFileProvider>::deinit((uint64_t)v28);
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      re::PlanarReflectionContext::makeReflectionCameraView(this, a2, (const re::CameraMultiView *)((char *)a3 + 672), v9, (uint64_t)&v14);
      re::DynamicString::operator=((re::DynamicString *)v92, (re::DynamicString *)&v14);
      v92[10] = v24;
      v92[11] = v25;
      v92[12] = v26;
      v92[13] = v27;
      v92[6] = v20;
      v92[7] = v21;
      v92[8] = v22;
      v92[9] = v23;
      v92[2] = v16;
      v92[3] = v17;
      v92[4] = v18;
      v92[5] = v19;
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v93, (uint64_t)v28);
      v93[20] = v29;
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v94, (uint64_t)v30);
      v94[5] = v33;
      v94[6] = v34;
      uint64_t v95 = v35;
      v94[3] = v31;
      v94[4] = v32;
      char v96 = v36;
      if (v97 || v37)
      {
        if (!v97 || v37)
        {
          if (!v97) {
            BOOL v97 = v37 != 0;
          }
          char v98 = v38;
        }
        else
        {
          BOOL v97 = 0;
        }
      }
      if (v99 || v39)
      {
        if (!v99 || v39)
        {
          if (!v99) {
            BOOL v99 = v39 != 0;
          }
          int v100 = v40;
        }
        else
        {
          BOOL v99 = 0;
        }
      }
      long long v105 = v45;
      long long v106 = v46;
      long long v107 = v47;
      long long v108 = v48;
      long long v101 = v41;
      long long v102 = v42;
      long long v103 = v43;
      long long v104 = v44;
      long long v111 = v51;
      long long v112 = v52;
      long long v109 = v49;
      long long v110 = v50;
      *(void *)((char *)v115 + 13) = *(void *)((char *)v55 + 13);
      long long v114 = v54;
      v115[0] = v55[0];
      long long v113 = v53;
      re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)v30);
      re::DynamicArray<re::RenderGraphFileProvider>::deinit((uint64_t)v28);
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      uint64_t v10 = v9;
      if (*((unsigned char *)a3 + 1344) == 1 && !*((unsigned char *)a3 + 1345))
      {
        long long v85 = xmmword_2343E1EE0;
        long long v109 = xmmword_2343E1EF0;
      }
      re::DynamicArray<re::CameraMultiView>::add(v13, (uint64_t)v56);
      uint64_t v11 = 1344;
      do
      {
        re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v30[v11]);
        re::DynamicArray<re::RenderGraphFileProvider>::deinit((uint64_t)&v28[v11]);
        re::DynamicString::deinit((re::DynamicString *)((char *)&v14 + v11));
        v11 -= 672;
      }
      while (v11);
      uint64_t v9 = v10 + 1;
      this = v12;
    }
    while (*((void *)v12 + 2) > (unint64_t)(v10 + 1));
  }
}

float32_t re::PlanarReflectionContext::makeReflectionCameraView@<S0>(re::PlanarReflectionContext *this@<X0>, re::RenderFrame *a2@<X1>, const re::CameraView *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v106 = *MEMORY[0x263EF8340];
  uint64_t v10 = (re::DynamicString *)*((void *)a2 + 47);
  re::DynamicString::DynamicString((re::DynamicString *)a5, a3);
  long long v11 = *((_OWORD *)a3 + 11);
  *(_OWORD *)(a5 + 160) = *((_OWORD *)a3 + 10);
  *(_OWORD *)(a5 + 176) = v11;
  long long v12 = *((_OWORD *)a3 + 13);
  *(_OWORD *)(a5 + 192) = *((_OWORD *)a3 + 12);
  *(_OWORD *)(a5 + 208) = v12;
  long long v13 = *((_OWORD *)a3 + 7);
  *(_OWORD *)(a5 + 96) = *((_OWORD *)a3 + 6);
  *(_OWORD *)(a5 + 112) = v13;
  long long v14 = *((_OWORD *)a3 + 9);
  *(_OWORD *)(a5 + 128) = *((_OWORD *)a3 + 8);
  *(_OWORD *)(a5 + 144) = v14;
  long long v15 = *((_OWORD *)a3 + 3);
  *(_OWORD *)(a5 + 32) = *((_OWORD *)a3 + 2);
  *(_OWORD *)(a5 + 48) = v15;
  long long v16 = *((_OWORD *)a3 + 5);
  *(_OWORD *)(a5 + 64) = *((_OWORD *)a3 + 4);
  *(_OWORD *)(a5 + 80) = v16;
  re::DynamicArray<re::RenderGraphFileProvider>::DynamicArray(a5 + 224, (uint64_t *)a3 + 28);
  *(_WORD *)(a5 + 264) = *((_WORD *)a3 + 132);
  re::DynamicArray<re::CameraView::PickupScopeLane>::DynamicArray(a5 + 272, (uint64_t *)a3 + 34);
  long long v17 = *((_OWORD *)a3 + 21);
  *(_OWORD *)(a5 + 320) = *((_OWORD *)a3 + 20);
  *(_OWORD *)(a5 + 336) = v17;
  long long v18 = *((_OWORD *)a3 + 23);
  *(_OWORD *)(a5 + 352) = *((_OWORD *)a3 + 22);
  *(_OWORD *)(a5 + 368) = v18;
  *(unsigned char *)(a5 + 400) = *((unsigned char *)a3 + 400);
  int v19 = *((unsigned __int8 *)a3 + 401);
  *(unsigned char *)(a5 + 401) = v19;
  if (v19) {
    *(unsigned char *)(a5 + 402) = *((unsigned char *)a3 + 402);
  }
  int v20 = *((unsigned __int8 *)a3 + 404);
  *(unsigned char *)(a5 + 404) = v20;
  if (v20) {
    *(_DWORD *)(a5 + 408) = *((_DWORD *)a3 + 102);
  }
  long long v21 = *((_OWORD *)a3 + 31);
  *(_OWORD *)(a5 + 480) = *((_OWORD *)a3 + 30);
  *(_OWORD *)(a5 + 496) = v21;
  long long v22 = *((_OWORD *)a3 + 33);
  *(_OWORD *)(a5 + 512) = *((_OWORD *)a3 + 32);
  *(_OWORD *)(a5 + 528) = v22;
  long long v23 = *((_OWORD *)a3 + 27);
  *(_OWORD *)(a5 + 416) = *((_OWORD *)a3 + 26);
  *(_OWORD *)(a5 + 432) = v23;
  long long v24 = *((_OWORD *)a3 + 29);
  *(_OWORD *)(a5 + 448) = *((_OWORD *)a3 + 28);
  *(_OWORD *)(a5 + 464) = v24;
  long long v25 = *((_OWORD *)a3 + 34);
  long long v26 = *((_OWORD *)a3 + 35);
  long long v27 = *((_OWORD *)a3 + 37);
  *(_OWORD *)(a5 + 576) = *((_OWORD *)a3 + 36);
  *(_OWORD *)(a5 + 592) = v27;
  *(_OWORD *)(a5 + 544) = v25;
  *(_OWORD *)(a5 + 560) = v26;
  long long v28 = *((_OWORD *)a3 + 38);
  long long v29 = *((_OWORD *)a3 + 39);
  long long v30 = *((_OWORD *)a3 + 40);
  *(void *)(a5 + 653) = *(void *)((char *)a3 + 653);
  *(_OWORD *)(a5 + 624) = v29;
  *(_OWORD *)(a5 + 640) = v30;
  long long v31 = (char *)*((void *)a3 + 2);
  BOOL v32 = (*((void *)a3 + 1) & 1) == 0;
  *(_OWORD *)(a5 + 608) = v28;
  long long v33 = (char *)a3 + 9;
  if (!v32) {
    long long v33 = v31;
  }
  *(void *)(a5 + 384) = -1;
  re::DynamicString::format(v10, (re::Allocator *)"%s_R%u", (re::DynamicString *)&v99, v33, a4);
  re::DynamicString::operator=((re::DynamicString *)a5, (re::DynamicString *)&v99);
  if (v99.i64[0] && (v99.i8[8] & 1) != 0) {
    (*(void (**)(void))(*(void *)v99.i64[0] + 40))();
  }
  *(_DWORD *)(a5 + 356) = 1;
  *(_OWORD *)(a5 + 544) = xmmword_2343854A0;
  *(_DWORD *)(a5 + 640) = -1;
  unint64_t v34 = *((void *)this + 2);
  if (v34 <= (int)a4)
  {
    *(void *)&v98[0] = 0;
    float32x4_t v102 = 0u;
    long long v103 = 0u;
    float32x4_t v100 = 0u;
    float32x4_t v101 = 0u;
    float32x4_t v99 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v104 = 136315906;
    *(void *)&v104[4] = "operator[]";
    *(_WORD *)&v104[12] = 1024;
    *(_DWORD *)&v104[14] = 789;
    *(_WORD *)&v104[18] = 2048;
    *(void *)&v104[20] = (int)a4;
    *(_WORD *)&v104[28] = 2048;
    *(void *)&v104[30] = v34;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v35 = *((void *)this + 4);
  float32x4_t v36 = *(float32x4_t *)(v35 + 32 * (int)a4);
  v37.i64[0] = 0xC0000000C0000000;
  v37.i64[1] = 0xC0000000C0000000;
  float32x4_t v38 = vmulq_f32(v36, v37);
  int32x4_t v39 = (int32x4_t)vaddq_f32(vmulq_n_f32(v36, v38.f32[0]), (float32x4_t)xmmword_23435FD50);
  int32x4_t v40 = (int32x4_t)vaddq_f32(vmulq_lane_f32(v36, *(float32x2_t *)v38.f32, 1), (float32x4_t)xmmword_23435FD60);
  float32x4_t v97 = v36;
  int32x4_t v41 = (int32x4_t)vaddq_f32(vmulq_laneq_f32(v36, v38, 2), (float32x4_t)xmmword_23435FD80);
  int32x4_t v42 = vzip1q_s32(v39, v41);
  int32x4_t v43 = vzip2q_s32(v39, v41);
  int32x4_t v44 = vzip1q_s32(v40, (int32x4_t)0);
  int32x4_t v45 = vzip2q_s32(v40, (int32x4_t)xmmword_23435FBB0);
  float32x4_t v95 = (float32x4_t)vzip1q_s32(v42, v44);
  float32x4_t v96 = (float32x4_t)vzip2q_s32(v42, v44);
  float32x4_t v93 = (float32x4_t)vzip2q_s32(v43, v45);
  float32x4_t v94 = (float32x4_t)vzip1q_s32(v43, v45);
  re::RenderCamera::computeLocalTransform((const re::CameraView *)((char *)a3 + 32), (uint64_t)v98);
  uint64_t v46 = 0;
  *(_OWORD *)long long v104 = v98[0];
  *(_OWORD *)&v104[16] = v98[1];
  *(_OWORD *)&v104[32] = v98[2];
  long long v105 = v98[3];
  do
  {
    *(float32x4_t *)((char *)&v99 + v46) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v95, COERCE_FLOAT(*(_OWORD *)&v104[v46])), v96, *(float32x2_t *)&v104[v46], 1), v94, *(float32x4_t *)&v104[v46], 2), v93, *(float32x4_t *)&v104[v46], 3);
    v46 += 16;
  }
  while (v46 != 64);
  uint64_t v47 = 0;
  float32x4_t v48 = v99;
  float32x4_t v49 = v100;
  float32x4_t v50 = v101;
  float32x4_t v51 = v102;
  *(_OWORD *)long long v104 = xmmword_23435FD50;
  *(_OWORD *)&v104[16] = xmmword_23435FD90;
  *(_OWORD *)&v104[32] = xmmword_23435FD80;
  long long v105 = xmmword_23435FBB0;
  do
  {
    *(float32x4_t *)((char *)&v99 + v47) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v48, COERCE_FLOAT(*(_OWORD *)&v104[v47])), v49, *(float32x2_t *)&v104[v47], 1), v50, *(float32x4_t *)&v104[v47], 2), v51, *(float32x4_t *)&v104[v47], 3);
    v47 += 16;
  }
  while (v47 != 64);
  float v52 = (float)(v99.f32[0] + v100.f32[1]) + v101.f32[2];
  if (v52 >= 0.0)
  {
    float v70 = sqrtf(v52 + 1.0);
    float v71 = v70 + v70;
    float32x2_t v72 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v70 + v70));
    float32x2_t v73 = vmul_f32(v72, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v70 + v70), v72));
    float v74 = vmul_f32(v73, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v70 + v70), v73)).f32[0];
    *(float *)&long long v79 = (float)(v100.f32[2] - v101.f32[1]) * v74;
    float v80 = (float)(v101.f32[0] - v99.f32[2]) * v74;
    float v81 = (float)(v99.f32[1] - v100.f32[0]) * v74;
    float v82 = v71 * 0.25;
  }
  else if (v99.f32[0] < v100.f32[1] || v99.f32[0] < v101.f32[2])
  {
    float v54 = sqrtf((float)((float)(1.0 - v99.f32[0]) - v100.f32[1]) + v101.f32[2]);
    *(float *)&unsigned int v55 = v54 + v54;
    float32x2_t v56 = vrecpe_f32((float32x2_t)v55);
    float32x2_t v57 = vmul_f32(v56, vrecps_f32((float32x2_t)v55, v56));
    float v58 = vmul_f32(v57, vrecps_f32((float32x2_t)v55, v57)).f32[0];
    float v59 = (float)(v99.f32[2] + v101.f32[0]) * v58;
    float v60 = (float)(v100.f32[2] + v101.f32[1]) * v58;
    float v61 = *(float *)&v55 * 0.25;
    float v62 = (float)(v99.f32[1] - v100.f32[0]) * v58;
    float v63 = sqrtf(v100.f32[1] + (float)((float)(1.0 - v99.f32[0]) - v101.f32[2]));
    *(float *)&unsigned int v64 = v63 + v63;
    float32x2_t v65 = vrecpe_f32((float32x2_t)v64);
    float32x2_t v66 = vmul_f32(v65, vrecps_f32((float32x2_t)v64, v65));
    float v67 = vmul_f32(v66, vrecps_f32((float32x2_t)v64, v66)).f32[0];
    float v68 = *(float *)&v64 * 0.25;
    float v69 = (float)(v100.f32[2] + v101.f32[1]) * v67;
    float v82 = (float)(v101.f32[0] - v99.f32[2]) * v67;
    if (v100.f32[1] >= v101.f32[2]) {
      *(float *)&long long v79 = (float)(v99.f32[1] + v100.f32[0]) * v67;
    }
    else {
      *(float *)&long long v79 = v59;
    }
    if (v100.f32[1] >= v101.f32[2]) {
      float v80 = v68;
    }
    else {
      float v80 = v60;
    }
    if (v100.f32[1] >= v101.f32[2]) {
      float v81 = v69;
    }
    else {
      float v81 = v61;
    }
    if (v100.f32[1] < v101.f32[2]) {
      float v82 = v62;
    }
  }
  else
  {
    float v75 = sqrtf(v99.f32[0] + (float)((float)(1.0 - v100.f32[1]) - v101.f32[2]));
    *(float *)&unsigned int v76 = v75 + v75;
    float32x2_t v77 = vrecpe_f32((float32x2_t)v76);
    float32x2_t v78 = vmul_f32(v77, vrecps_f32((float32x2_t)v76, v77));
    v78.f32[0] = vmul_f32(v78, vrecps_f32((float32x2_t)v76, v78)).f32[0];
    *(float *)&long long v79 = *(float *)&v76 * 0.25;
    float v80 = (float)(v99.f32[1] + v100.f32[0]) * v78.f32[0];
    float v81 = (float)(v99.f32[2] + v101.f32[0]) * v78.f32[0];
    float v82 = (float)(v100.f32[2] - v101.f32[1]) * v78.f32[0];
  }
  *((float *)&v79 + 1) = v80;
  *((void *)&v79 + 1) = __PAIR64__(LODWORD(v82), LODWORD(v81));
  *(float32x4_t *)(a5 + 32) = v102;
  *(_OWORD *)(a5 + 48) = v79;
  v99.i64[0] = 65290051;
  if (*(void *)(a5 + 8)) {
    long long v83 = *(const char **)(a5 + 16);
  }
  else {
    long long v83 = (const char *)(a5 + 9);
  }
  re::RenderFrame::specifyScopeLane(a2, (uint64_t *)&v99, (void **)(v35 + 32 * (int)a4 + 16), v83);
  re::RenderCamera::computeInverseTransform((float32x4_t *)(a5 + 32), (uint64_t)&v99);
  float32x4_t v84 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v99, v97.f32[0]), v100, *(float32x2_t *)v97.f32, 1), v101, v97, 2);
  int32x4_t v85 = (int32x4_t)vmulq_f32(v84, v84);
  v85.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v85, 2), vadd_f32(*(float32x2_t *)v85.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v85.i8, 1))).u32[0];
  float32x2_t v86 = vrsqrte_f32((float32x2_t)v85.u32[0]);
  float32x2_t v87 = vmul_f32(v86, vrsqrts_f32((float32x2_t)v85.u32[0], vmul_f32(v86, v86)));
  v85.i32[0] = vmul_f32(v87, vrsqrts_f32((float32x2_t)v85.u32[0], vmul_f32(v87, v87))).u32[0];
  float32x4_t v88 = vmulq_n_f32(v97, -v97.f32[3]);
  float32x4_t v89 = vaddq_f32(v102, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v99, v88.f32[0]), v100, *(float32x2_t *)v88.f32, 1), v101, v88, 2));
  float32x4_t v90 = vmulq_n_f32(v84, *(float *)v85.i32);
  float32x4_t v91 = vmulq_f32(v90, vdivq_f32(v89, (float32x4_t)vdupq_laneq_s32((int32x4_t)v89, 3)));
  float32_t result = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v91, 2), vaddq_f32(v91, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v91.f32, 1))).f32[0];
  v90.f32[3] = result;
  *(float32x4_t *)(a5 + 96) = v90;
  *(unsigned char *)(a5 + 92) = 1;
  return result;
}

void *re::PlanarReflectionContext::makeReflectionCameraViews@<X0>(re::PlanarReflectionContext *this@<X0>, re::RenderFrame *a2@<X1>, const re::CameraView *a3@<X2>, uint64_t a4@<X8>)
{
  v14[51] = *MEMORY[0x263EF8340];
  uint64_t v8 = *((void *)a2 + 47);
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(_DWORD *)(a4 + 24) = 0;
  *(void *)a4 = v8;
  float32_t result = re::DynamicArray<re::CameraView>::setCapacity((void *)a4, 0);
  ++*(_DWORD *)(a4 + 24);
  if (*((void *)this + 2))
  {
    unint64_t v10 = 0;
    do
    {
      re::PlanarReflectionContext::makeReflectionCameraView(this, a2, a3, v10, (uint64_t)&v11);
      re::DynamicArray<re::CameraView>::add((_anonymous_namespace_ *)a4, (uint64_t)&v11);
      re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)v14);
      re::DynamicArray<re::RenderGraphFileProvider>::deinit((uint64_t)&v13);
      float32_t result = (void *)v11;
      if (v11)
      {
        if (v12) {
          float32_t result = (void *)(*(uint64_t (**)(void))(*(void *)v11 + 40))();
        }
      }
      ++v10;
    }
    while (*((void *)this + 2) > v10);
  }
  return result;
}

__n128 re::DynamicArray<re::CameraView>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::CameraView>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4);
  uint64_t v6 = v5 + 672 * v4;
  *(_OWORD *)uint64_t v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(void *)(v6 + 24) = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)uint64_t v6 = *(void *)a2;
  *(void *)a2 = 0;
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a2 + 24) = 0;
  uint64_t v10 = *(void *)(v6 + 8);
  uint64_t v9 = *(void *)(v6 + 16);
  *(void *)(v6 + 8) = v7;
  *(void *)(v6 + 16) = v8;
  *(void *)(a2 + 8) = v10;
  *(void *)(a2 + 16) = v9;
  long long v11 = *(_OWORD *)(a2 + 32);
  long long v12 = *(_OWORD *)(a2 + 48);
  long long v13 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v6 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v6 + 80) = v13;
  *(_OWORD *)(v6 + 32) = v11;
  *(_OWORD *)(v6 + 48) = v12;
  long long v14 = *(_OWORD *)(a2 + 96);
  long long v15 = *(_OWORD *)(a2 + 112);
  long long v16 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v6 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v6 + 144) = v16;
  *(_OWORD *)(v6 + 96) = v14;
  *(_OWORD *)(v6 + 112) = v15;
  long long v17 = *(_OWORD *)(a2 + 160);
  long long v18 = *(_OWORD *)(a2 + 176);
  long long v19 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(v6 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(v6 + 208) = v19;
  *(_OWORD *)(v6 + 160) = v17;
  *(_OWORD *)(v6 + 176) = v18;
  *(void *)(v6 + 256) = 0;
  *(_DWORD *)(v6 + 248) = 0;
  *(void *)(v6 + 232) = 0;
  *(void *)(v6 + 240) = 0;
  *(void *)(v6 + 224) = 0;
  uint64_t v20 = *(void *)(a2 + 232);
  *(void *)(v6 + 224) = *(void *)(a2 + 224);
  *(void *)(v6 + 232) = v20;
  *(void *)(a2 + 224) = 0;
  *(void *)(a2 + 232) = 0;
  uint64_t v21 = *(void *)(v6 + 240);
  *(void *)(v6 + 240) = *(void *)(a2 + 240);
  *(void *)(a2 + 240) = v21;
  uint64_t v22 = *(void *)(v6 + 256);
  *(void *)(v6 + 256) = *(void *)(a2 + 256);
  *(void *)(a2 + 256) = v22;
  ++*(_DWORD *)(a2 + 248);
  ++*(_DWORD *)(v6 + 248);
  *(_WORD *)(v6 + 264) = *(_WORD *)(a2 + 264);
  *(void *)(v6 + 304) = 0;
  *(_DWORD *)(v6 + 296) = 0;
  *(void *)(v6 + 280) = 0;
  *(void *)(v6 + 288) = 0;
  *(void *)(v6 + 272) = 0;
  uint64_t v23 = *(void *)(a2 + 280);
  *(void *)(v6 + 272) = *(void *)(a2 + 272);
  *(void *)(v6 + 280) = v23;
  *(void *)(a2 + 272) = 0;
  *(void *)(a2 + 280) = 0;
  uint64_t v24 = *(void *)(v6 + 288);
  *(void *)(v6 + 288) = *(void *)(a2 + 288);
  *(void *)(a2 + 288) = v24;
  uint64_t v25 = *(void *)(v6 + 304);
  *(void *)(v6 + 304) = *(void *)(a2 + 304);
  *(void *)(a2 + 304) = v25;
  ++*(_DWORD *)(a2 + 296);
  ++*(_DWORD *)(v6 + 296);
  *(_OWORD *)(v6 + 320) = *(_OWORD *)(a2 + 320);
  long long v26 = *(_OWORD *)(a2 + 336);
  long long v27 = *(_OWORD *)(a2 + 352);
  long long v28 = *(_OWORD *)(a2 + 368);
  *(void *)(v6 + 384) = *(void *)(a2 + 384);
  *(_OWORD *)(v6 + 352) = v27;
  *(_OWORD *)(v6 + 368) = v28;
  *(_OWORD *)(v6 + 336) = v26;
  *(unsigned char *)(v6 + 400) = *(unsigned char *)(a2 + 400);
  LODWORD(v25) = *(unsigned __int8 *)(a2 + 401);
  *(unsigned char *)(v6 + 401) = v25;
  if (v25) {
    *(unsigned char *)(v5 + 672 * v4 + 402) = *(unsigned char *)(a2 + 402);
  }
  int v29 = *(unsigned __int8 *)(a2 + 404);
  *(unsigned char *)(v5 + 672 * v4 + 404) = v29;
  if (v29) {
    *(_DWORD *)(v5 + 672 * v4 + 408) = *(_DWORD *)(a2 + 408);
  }
  uint64_t v30 = v5 + 672 * v4;
  long long v31 = *(_OWORD *)(a2 + 416);
  long long v32 = *(_OWORD *)(a2 + 432);
  long long v33 = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(v30 + 448) = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(v30 + 464) = v33;
  *(_OWORD *)(v30 + 416) = v31;
  *(_OWORD *)(v30 + 432) = v32;
  long long v34 = *(_OWORD *)(a2 + 480);
  long long v35 = *(_OWORD *)(a2 + 496);
  long long v36 = *(_OWORD *)(a2 + 528);
  *(_OWORD *)(v30 + 512) = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(v30 + 528) = v36;
  *(_OWORD *)(v30 + 480) = v34;
  *(_OWORD *)(v30 + 496) = v35;
  long long v38 = *(_OWORD *)(a2 + 624);
  long long v37 = *(_OWORD *)(a2 + 640);
  long long v39 = *(_OWORD *)(a2 + 608);
  *(void *)(v30 + 653) = *(void *)(a2 + 653);
  *(_OWORD *)(v30 + 624) = v38;
  *(_OWORD *)(v30 + 640) = v37;
  *(_OWORD *)(v30 + 608) = v39;
  __n128 result = *(__n128 *)(a2 + 544);
  long long v41 = *(_OWORD *)(a2 + 560);
  long long v42 = *(_OWORD *)(a2 + 592);
  *(_OWORD *)(v30 + 576) = *(_OWORD *)(a2 + 576);
  *(_OWORD *)(v30 + 592) = v42;
  *(__n128 *)(v30 + 544) = result;
  *(_OWORD *)(v30 + 560) = v41;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

re::mtl::MipGenPolyphase *re::mtl::MipGenPolyphase::MipGenPolyphase(re::mtl::MipGenPolyphase *this, const re::mtl::Library *a2)
{
  id v3 = [[REMipGenPolyphase alloc] initWithLibrary:*(void *)a2];
  *(void *)this = v3;

  return this;
}

uint64_t re::GPUAttributeFormatConverter::getBufferIndex(re *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  unint64_t v2 = *(void *)a1 >> 1;
  if (v2 > 0x16172F2CA64F41ELL)
  {
    if (*(void *)a1 >> 1 > 0x2ED0816D3076E800uLL)
    {
      switch(v2)
      {
        case 0x2ED0816D3076E801uLL:
          return 4;
        case 0x3CB5CD20F43A4EDAuLL:
          return 5;
        case 0x5353CF4AA93DFAB9uLL:
          return 1;
      }
    }
    else
    {
      switch(v2)
      {
        case 0x16172F2CA64F41FuLL:
          return 2;
        case 0x2ACCEB6695018FABuLL:
          return 3;
        case 0x2B3FAC222C23CAEDuLL:
          return 0;
      }
    }
LABEL_25:
    unint64_t v4 = *re::graphicsLogObjects(a1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v5 = *((void *)a1 + 1);
      int v6 = 136315138;
      uint64_t v7 = v5;
      _os_log_debug_impl(&dword_233120000, v4, OS_LOG_TYPE_DEBUG, "Unknown attribute type '%s'", (uint8_t *)&v6, 0xCu);
    }
    return 14;
  }
  else
  {
    switch(v2)
    {
      case 0x5E27ADA1858CuLL:
        uint64_t result = 7;
        break;
      case 0x5E27ADA1858DuLL:
        uint64_t result = 8;
        break;
      case 0x5E27ADA1858EuLL:
        uint64_t result = 9;
        break;
      case 0x5E27ADA1858FuLL:
        uint64_t result = 10;
        break;
      case 0x5E27ADA18590uLL:
        uint64_t result = 11;
        break;
      case 0x5E27ADA18591uLL:
        uint64_t result = 12;
        break;
      case 0x5E27ADA18592uLL:
        uint64_t result = 13;
        break;
      default:
        if (v2 != 0x30989BAE345) {
          goto LABEL_25;
        }
        uint64_t result = 6;
        break;
    }
  }
  return result;
}

uint64_t re::GPUAttributeFormatConverter::getOutputAttributeSize(unint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 >> 1;
  if (a1 >> 1 <= 0x16172F2CA64F41ELL)
  {
    if ((unint64_t)(v2 - 0x5E27ADA1858DLL) >= 6 && (v2 == 0x30989BAE345 || v2 == 0x5E27ADA1858CLL)) {
      return 8;
    }
    return 16;
  }
  uint64_t result = 12;
  if (v2 > 0x2ED0816D3076E800)
  {
    if (v2 != 0x2ED0816D3076E801 && v2 != 0x3CB5CD20F43A4EDALL)
    {
      if (v2 == 0x5353CF4AA93DFAB9) {
        return a2;
      }
      return 16;
    }
  }
  else if (v2 == 0x16172F2CA64F41FLL || v2 != 0x2ACCEB6695018FABLL && v2 != 0x2B3FAC222C23CAEDLL)
  {
    return 16;
  }
  return result;
}

void re::GPUAttributeFormatConverter::convertAttributes(uint64_t a1, id *a2, re::AttributeTable *this, _anonymous_namespace_ *a4)
{
  unint64_t v4 = this;
  uint64_t v130 = *MEMORY[0x263EF8340];
  uint64_t v7 = (id *)*a2;
  uint64_t v8 = (id *)*((void *)*a2 + 7);
  re::AttributeTable::buffers(this);
  uint64_t v96 = v9;
  uint64_t v10 = v4;
  do
  {
    long long v11 = v10;
    uint64_t v10 = (re::AttributeTable *)*((void *)v10 + 1);
  }
  while (v10 && !*((void *)v11 + 4));
  unint64_t v12 = *((unsigned int *)v4 + 117);
  id v114 = v7[23];
  unint64_t v13 = (unint64_t)a2[23];
  v110[0] = (id)v13;
  re::mtl::CommandQueue::makeCommandBufferWithUnretainedReferences(v110, &v113);

  re::mtl::CommandBuffer::makeComputeCommandEncoder(&v113, &v112);
  int v111 = 0;
  memset(v110, 0, sizeof(v110));
  re::createVertexFetchFunctionKey(v4, (uint64_t)v110);
  re::getOrCreateVertexFetchFunction((uint64_t)a2, v8, (uint64_t)v110, *((const char **)v4 + 64), 0, (uint64_t *)&v109);
  int v14 = atomic_load((unsigned __int8 *)v109 + 204);
  if (v14 == 1)
  {
    long long v15 = (char *)v109 + 204;
    unsigned __int8 v16 = atomic_load((unsigned __int8 *)v109 + 204);
    *(void *)&v124[0] = v15;
    BYTE8(v124[0]) = v16;
    HIDWORD(v124[0]) = 5;
    *(void *)__n128 buf = v15;
    *(_OWORD *)&buf[8] = v124[0];
    std::__libcpp_thread_poll_with_backoff[abi:nn180100]<std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<re::VertexFetchCompilationState,std::__cxx_atomic_base_impl<re::VertexFetchCompilationState>>,re::VertexFetchCompilationState> &,std::__libcpp_atomic_wait_backoff_impl<std::__cxx_atomic_impl<re::VertexFetchCompilationState,std::__cxx_atomic_base_impl<re::VertexFetchCompilationState>>,std::__cxx_atomic_wait_test_fn_impl<std::__cxx_atomic_impl<re::VertexFetchCompilationState,std::__cxx_atomic_base_impl<re::VertexFetchCompilationState>>,re::VertexFetchCompilationState>> &>((uint64_t)v124, (uint64_t)buf, 0);
  }
  re::createVertexFetchArgumentBuffer<re::mtl::ComputeCommandEncoder>(&v114, &v112, v4, &v108);
  [v112 setBuffer:v108 offset:0 atIndex:30];
  long long v17 = v4;
  do
  {
    long long v18 = v17;
    long long v17 = (re::AttributeTable *)*((void *)v17 + 1);
  }
  while (v17 && !*((void *)v18 + 9));
  *(void *)__n128 buf = 0x5353CF4AA93DFAB9;
  uint64_t v19 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v18 + 6, buf);
  uint64_t BufferIndex = v19;
  if (v19 == -1)
  {
    float32x4_t v95 = 0;
    int v33 = 0;
    goto LABEL_37;
  }
  uint64_t v21 = *((void *)v18 + 7) + 16 * v19;
  uint64_t v22 = re::AttributeTable::buffers(v4);
  unsigned int v26 = *(unsigned __int8 *)(v21 + 8);
  unint64_t v25 = v21 + 8;
  uint64_t v24 = v26;
  float32x4_t v95 = (unsigned __int8 *)v25;
  if (v23 <= v26) {
    goto LABEL_199;
  }
  uint64_t v27 = v22 + 16 * v24;
  uint64_t v28 = *(unsigned int *)(v27 + 8);
  int v29 = *((unsigned __int8 *)v4 + 472);
  unint64_t v25 = *((unsigned __int8 *)v4 + 476);
  uint64_t v30 = (char *)objc_msgSend(*(id *)v27, sel_contents);
  unint64_t v13 = *((void *)v11 + 4);
  if (v13 <= v25)
  {
LABEL_200:
    *(void *)unint64_t v127 = 0;
    memset(v117, 0, 48);
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v124[0]) = 136315906;
    *(void *)((char *)v124 + 4) = "operator[]";
    WORD6(v124[0]) = 1024;
    *(_DWORD *)((char *)v124 + 14) = 476;
    WORD1(v124[1]) = 2048;
    *(void *)((char *)&v124[1] + 4) = v25;
    WORD6(v124[1]) = 2048;
    *(void *)((char *)&v124[1] + 14) = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_201;
  }
  uint64_t v31 = *((unsigned int *)v4 + 116);
  long long v32 = &v30[v28];
  if (v29) {
    int v33 = 4;
  }
  else {
    int v33 = 2;
  }
  if (v29)
  {
    if (v31)
    {
      unsigned int v34 = 0;
      do
      {
        unsigned int v36 = *(_DWORD *)v32;
        v32 += 4;
        unsigned int v35 = v36;
        if (v34 <= v36) {
          unsigned int v37 = v35;
        }
        else {
          unsigned int v37 = v34;
        }
        if (v35 != -1) {
          unsigned int v34 = v37;
        }
        --v31;
      }
      while (v31);
      goto LABEL_36;
    }
  }
  else if (v31)
  {
    unsigned int v34 = 0;
    do
    {
      unsigned int v39 = *(unsigned __int16 *)v32;
      v32 += 2;
      unsigned int v38 = v39;
      if (v34 <= v39) {
        unsigned int v40 = v38;
      }
      else {
        unsigned int v40 = v34;
      }
      if (v38 != 0xFFFF) {
        unsigned int v34 = v40;
      }
      --v31;
    }
    while (v31);
    goto LABEL_36;
  }
  unsigned int v34 = 0;
LABEL_36:
  unint64_t v12 = v34 + 1;
LABEL_37:
  uint64_t v86 = (uint64_t)v7;
  re::createVertexFetchComputePipeline((id *)v109, (re::CachedVertexFetchFunction *)v7, &v107);
  id v41 = objc_msgSend(v114, sel_newBufferWithLength_options_, 112, 0);
  [v112 setBuffer:v41 offset:0 atIndex:2];
  int v42 = *(_DWORD *)(v107 + 32);
  unsigned int v89 = v33;
  unsigned int v90 = v12;
  unint64_t v88 = (v42 + *((_DWORD *)v4 + 116) - 1) & -v42;
  unint64_t v91 = (v42 + v12 - 1) & -v42;
  uint64_t v104 = (v12 - 1);
  unint64_t v105 = v91 - 1;
  uint64_t v106 = v33;
  [v112 setBytes:&v104 length:24 atIndex:0];
  id v87 = v41;
  int32x4_t v43 = (char *)objc_msgSend(v41, sel_contents);
  uint64_t v94 = BufferIndex;
  if (v96)
  {
    unint64_t v44 = (unint64_t)v43;
    unint64_t v25 = 0;
    unint64_t v13 = 0;
    float32x4_t v84 = v43 + 96;
    int32x4_t v85 = v43 + 104;
    float v82 = v43 + 80;
    long long v83 = v43 + 88;
    float v80 = v43 + 64;
    float v81 = v43 + 72;
    float32x2_t v78 = v43 + 48;
    long long v79 = v43 + 56;
    unsigned int v76 = v43 + 8;
    float32x2_t v77 = v43 + 40;
    float v74 = v43 + 24;
    float v75 = v43 + 32;
    float32x2_t v73 = v43 + 16;
    while (1)
    {
      if (BufferIndex == -1 || (unint64_t v45 = v88, v13 != *v95)) {
        unint64_t v45 = v91;
      }
      unint64_t v46 = *((void *)v4 + 43);
      if (v46 <= v13)
      {
        *(void *)unint64_t v127 = 0;
        memset(v117, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v124[0]) = 136315906;
        *(void *)((char *)v124 + 4) = "operator[]";
        WORD6(v124[0]) = 1024;
        *(_DWORD *)((char *)v124 + 14) = 476;
        WORD1(v124[1]) = 2048;
        *(void *)((char *)&v124[1] + 4) = v13;
        WORD6(v124[1]) = 2048;
        *(void *)((char *)&v124[1] + 14) = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_176:
        uint64_t v115 = 0;
        memset(v117, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v127 = 136315906;
        *(void *)&v127[4] = "operator[]";
        *(_WORD *)&v127[12] = 1024;
        *(_DWORD *)&v127[14] = 476;
        *(_WORD *)&v127[18] = 2048;
        *(void *)&v127[20] = v25;
        __int16 v128 = 2048;
        unint64_t v129 = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_177:
        uint64_t v115 = 0;
        memset(v117, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v127 = 136315906;
        *(void *)&v127[4] = "operator[]";
        *(_WORD *)&v127[12] = 1024;
        *(_DWORD *)&v127[14] = 476;
        *(_WORD *)&v127[18] = 2048;
        *(void *)&v127[20] = v25;
        __int16 v128 = 2048;
        unint64_t v129 = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_178:
        uint64_t v115 = 0;
        memset(v117, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v127 = 136315906;
        *(void *)&v127[4] = "operator[]";
        *(_WORD *)&v127[12] = 1024;
        *(_DWORD *)&v127[14] = 476;
        *(_WORD *)&v127[18] = 2048;
        *(void *)&v127[20] = v25;
        __int16 v128 = 2048;
        unint64_t v129 = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_179:
        uint64_t v115 = 0;
        memset(v117, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v127 = 136315906;
        *(void *)&v127[4] = "operator[]";
        *(_WORD *)&v127[12] = 1024;
        *(_DWORD *)&v127[14] = 476;
        *(_WORD *)&v127[18] = 2048;
        *(void *)&v127[20] = v25;
        __int16 v128 = 2048;
        unint64_t v129 = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_180:
        *(void *)unint64_t v127 = 0;
        memset(v117, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v124[0]) = 136315906;
        *(void *)((char *)v124 + 4) = "operator[]";
        WORD6(v124[0]) = 1024;
        *(_DWORD *)((char *)v124 + 14) = 476;
        WORD1(v124[1]) = 2048;
        *(void *)((char *)&v124[1] + 4) = v13;
        WORD6(v124[1]) = 2048;
        *(void *)((char *)&v124[1] + 14) = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_181:
        *(void *)unint64_t v127 = 0;
        memset(v117, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v124[0]) = 136315906;
        *(void *)((char *)v124 + 4) = "operator[]";
        WORD6(v124[0]) = 1024;
        *(_DWORD *)((char *)v124 + 14) = 476;
        WORD1(v124[1]) = 2048;
        *(void *)((char *)&v124[1] + 4) = v13;
        WORD6(v124[1]) = 2048;
        *(void *)((char *)&v124[1] + 14) = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_182:
        *(void *)unint64_t v127 = 0;
        memset(v117, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v124[0]) = 136315906;
        *(void *)((char *)v124 + 4) = "operator[]";
        WORD6(v124[0]) = 1024;
        *(_DWORD *)((char *)v124 + 14) = 468;
        WORD1(v124[1]) = 2048;
        *(void *)((char *)&v124[1] + 4) = v46;
        WORD6(v124[1]) = 2048;
        *(void *)((char *)&v124[1] + 14) = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_183:
        uint64_t v115 = 0;
        memset(v117, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v127 = 136315906;
        *(void *)&v127[4] = "operator[]";
        *(_WORD *)&v127[12] = 1024;
        *(_DWORD *)&v127[14] = 476;
        *(_WORD *)&v127[18] = 2048;
        *(void *)&v127[20] = v25;
        __int16 v128 = 2048;
        unint64_t v129 = v44;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_184:
        uint64_t v115 = 0;
        memset(v117, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v127 = 136315906;
        *(void *)&v127[4] = "operator[]";
        *(_WORD *)&v127[12] = 1024;
        *(_DWORD *)&v127[14] = 468;
        *(_WORD *)&v127[18] = 2048;
        *(void *)&v127[20] = BufferIndex;
        __int16 v128 = 2048;
        unint64_t v129 = v45;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_185:
        *(void *)unint64_t v127 = 0;
        memset(v117, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v124[0]) = 136315906;
        *(void *)((char *)v124 + 4) = "operator[]";
        WORD6(v124[0]) = 1024;
        *(_DWORD *)((char *)v124 + 14) = 468;
        WORD1(v124[1]) = 2048;
        *(void *)((char *)&v124[1] + 4) = 7;
        WORD6(v124[1]) = 2048;
        *(void *)((char *)&v124[1] + 14) = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_186:
        *(void *)unint64_t v127 = 0;
        memset(v117, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v124[0]) = 136315906;
        *(void *)((char *)v124 + 4) = "operator[]";
        WORD6(v124[0]) = 1024;
        *(_DWORD *)((char *)v124 + 14) = 468;
        WORD1(v124[1]) = 2048;
        *(void *)((char *)&v124[1] + 4) = 0;
        WORD6(v124[1]) = 2048;
        *(void *)((char *)&v124[1] + 14) = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_187:
        *(void *)unint64_t v127 = 0;
        memset(v117, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v124[0]) = 136315906;
        *(void *)((char *)v124 + 4) = "operator[]";
        WORD6(v124[0]) = 1024;
        *(_DWORD *)((char *)v124 + 14) = 468;
        WORD1(v124[1]) = 2048;
        *(void *)((char *)&v124[1] + 4) = 1;
        WORD6(v124[1]) = 2048;
        *(void *)((char *)&v124[1] + 14) = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_188:
        *(void *)unint64_t v127 = 0;
        memset(v117, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v124[0]) = 136315906;
        *(void *)((char *)v124 + 4) = "operator[]";
        WORD6(v124[0]) = 1024;
        *(_DWORD *)((char *)v124 + 14) = 468;
        WORD1(v124[1]) = 2048;
        *(void *)((char *)&v124[1] + 4) = 6;
        WORD6(v124[1]) = 2048;
        *(void *)((char *)&v124[1] + 14) = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_189:
        *(void *)unint64_t v127 = 0;
        memset(v117, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v124[0]) = 136315906;
        *(void *)((char *)v124 + 4) = "operator[]";
        WORD6(v124[0]) = 1024;
        *(_DWORD *)((char *)v124 + 14) = 468;
        WORD1(v124[1]) = 2048;
        *(void *)((char *)&v124[1] + 4) = 8;
        WORD6(v124[1]) = 2048;
        *(void *)((char *)&v124[1] + 14) = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_190:
        *(void *)unint64_t v127 = 0;
        memset(v117, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v124[0]) = 136315906;
        *(void *)((char *)v124 + 4) = "operator[]";
        WORD6(v124[0]) = 1024;
        *(_DWORD *)((char *)v124 + 14) = 468;
        WORD1(v124[1]) = 2048;
        *(void *)((char *)&v124[1] + 4) = 9;
        WORD6(v124[1]) = 2048;
        *(void *)((char *)&v124[1] + 14) = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_191:
        *(void *)unint64_t v127 = 0;
        memset(v117, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v124[0]) = 136315906;
        *(void *)((char *)v124 + 4) = "operator[]";
        WORD6(v124[0]) = 1024;
        *(_DWORD *)((char *)v124 + 14) = 468;
        WORD1(v124[1]) = 2048;
        *(void *)((char *)&v124[1] + 4) = 10;
        WORD6(v124[1]) = 2048;
        *(void *)((char *)&v124[1] + 14) = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_192:
        *(void *)unint64_t v127 = 0;
        memset(v117, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v124[0]) = 136315906;
        *(void *)((char *)v124 + 4) = "operator[]";
        WORD6(v124[0]) = 1024;
        *(_DWORD *)((char *)v124 + 14) = 468;
        WORD1(v124[1]) = 2048;
        *(void *)((char *)&v124[1] + 4) = 11;
        WORD6(v124[1]) = 2048;
        *(void *)((char *)&v124[1] + 14) = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_193:
        *(void *)unint64_t v127 = 0;
        memset(v117, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v124[0]) = 136315906;
        *(void *)((char *)v124 + 4) = "operator[]";
        WORD6(v124[0]) = 1024;
        *(_DWORD *)((char *)v124 + 14) = 468;
        WORD1(v124[1]) = 2048;
        *(void *)((char *)&v124[1] + 4) = 12;
        WORD6(v124[1]) = 2048;
        *(void *)((char *)&v124[1] + 14) = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_194:
        *(void *)unint64_t v127 = 0;
        memset(v117, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v124[0]) = 136315906;
        *(void *)((char *)v124 + 4) = "operator[]";
        WORD6(v124[0]) = 1024;
        *(_DWORD *)((char *)v124 + 14) = 468;
        WORD1(v124[1]) = 2048;
        *(void *)((char *)&v124[1] + 4) = 13;
        WORD6(v124[1]) = 2048;
        *(void *)((char *)&v124[1] + 14) = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_195:
        *(void *)unint64_t v127 = 0;
        memset(v117, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v124[0]) = 136315906;
        *(void *)((char *)v124 + 4) = "operator[]";
        WORD6(v124[0]) = 1024;
        *(_DWORD *)((char *)v124 + 14) = 468;
        WORD1(v124[1]) = 2048;
        *(void *)((char *)&v124[1] + 4) = 2;
        WORD6(v124[1]) = 2048;
        *(void *)((char *)&v124[1] + 14) = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_196:
        *(void *)unint64_t v127 = 0;
        memset(v117, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v124[0]) = 136315906;
        *(void *)((char *)v124 + 4) = "operator[]";
        WORD6(v124[0]) = 1024;
        *(_DWORD *)((char *)v124 + 14) = 468;
        WORD1(v124[1]) = 2048;
        *(void *)((char *)&v124[1] + 4) = 3;
        WORD6(v124[1]) = 2048;
        *(void *)((char *)&v124[1] + 14) = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_197:
        *(void *)unint64_t v127 = 0;
        memset(v117, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v124[0]) = 136315906;
        *(void *)((char *)v124 + 4) = "operator[]";
        WORD6(v124[0]) = 1024;
        *(_DWORD *)((char *)v124 + 14) = 468;
        WORD1(v124[1]) = 2048;
        *(void *)((char *)&v124[1] + 4) = 4;
        WORD6(v124[1]) = 2048;
        *(void *)((char *)&v124[1] + 14) = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_198:
        *(void *)unint64_t v127 = 0;
        memset(v117, 0, 48);
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v124[0]) = 136315906;
        *(void *)((char *)v124 + 4) = "operator[]";
        WORD6(v124[0]) = 1024;
        *(_DWORD *)((char *)v124 + 14) = 468;
        WORD1(v124[1]) = 2048;
        *(void *)((char *)&v124[1] + 4) = 5;
        WORD6(v124[1]) = 2048;
        *(void *)((char *)&v124[1] + 14) = v46;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_199:
        re::internal::assertLog((re::internal *)6, v23, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v24, v23);
        _os_crash();
        __break(1u);
        goto LABEL_200;
      }
      re::StringID::StringID((re::StringID *)v103, (const StringID *)(*((void *)v4 + 44) + v25));
      unint64_t v46 = v45
          * (unint64_t)re::GPUAttributeFormatConverter::getOutputAttributeSize(v103[0], v106);
      re::StringID::destroyString((re::StringID *)v103);
      if (v46) {
        break;
      }
LABEL_105:
      ++v13;
      v25 += 16;
      if (v96 == v13) {
        goto LABEL_106;
      }
    }
    unint64_t v12 = *((void *)v4 + 43);
    if (v12 <= v13) {
      goto LABEL_180;
    }
    re::StringID::StringID((re::StringID *)v102, (const StringID *)(*((void *)v4 + 44) + v25));
    uint64_t BufferIndex = re::GPUAttributeFormatConverter::getBufferIndex((re *)v102);
    re::StringID::destroyString((re::StringID *)v102);
    id v101 = objc_msgSend(v114, sel_newBufferWithLength_options_, v46, 0);
    unint64_t v46 = *((void *)v4 + 43);
    if (v46 <= v13) {
      goto LABEL_181;
    }
    uint64_t v47 = re::StringID::StringID((re::StringID *)v100, (const StringID *)(*((void *)v4 + 44) + v25));
    uint64_t v48 = v100[0] >> 1;
    if (v100[0] >> 1 <= 0x16172F2CA64F41EuLL)
    {
      switch(v48)
      {
        case 0x5E27ADA1858CLL:
          unint64_t v46 = *(void *)(a1 + 8);
          if (v46 <= 7) {
            goto LABEL_185;
          }
          float32x4_t v49 = (void **)(*(void *)(a1 + 16) + 56);
          break;
        case 0x5E27ADA1858DLL:
          unint64_t v46 = *(void *)(a1 + 8);
          if (v46 <= 8) {
            goto LABEL_189;
          }
          float32x4_t v49 = (void **)(*(void *)(a1 + 16) + 64);
          break;
        case 0x5E27ADA1858ELL:
          unint64_t v46 = *(void *)(a1 + 8);
          if (v46 <= 9) {
            goto LABEL_190;
          }
          float32x4_t v49 = (void **)(*(void *)(a1 + 16) + 72);
          break;
        case 0x5E27ADA1858FLL:
          unint64_t v46 = *(void *)(a1 + 8);
          if (v46 <= 0xA) {
            goto LABEL_191;
          }
          float32x4_t v49 = (void **)(*(void *)(a1 + 16) + 80);
          break;
        case 0x5E27ADA18590:
          unint64_t v46 = *(void *)(a1 + 8);
          if (v46 <= 0xB) {
            goto LABEL_192;
          }
          float32x4_t v49 = (void **)(*(void *)(a1 + 16) + 88);
          break;
        case 0x5E27ADA18591:
          unint64_t v46 = *(void *)(a1 + 8);
          if (v46 <= 0xC) {
            goto LABEL_193;
          }
          float32x4_t v49 = (void **)(*(void *)(a1 + 16) + 96);
          break;
        case 0x5E27ADA18592:
          unint64_t v46 = *(void *)(a1 + 8);
          if (v46 <= 0xD) {
            goto LABEL_194;
          }
          float32x4_t v49 = (void **)(*(void *)(a1 + 16) + 104);
          break;
        default:
          if (v48 != 0x30989BAE345) {
            goto LABEL_90;
          }
          unint64_t v46 = *(void *)(a1 + 8);
          if (v46 <= 6) {
            goto LABEL_188;
          }
          float32x4_t v49 = (void **)(*(void *)(a1 + 16) + 48);
          break;
      }
LABEL_84:
      NS::SharedPtr<MTL::Texture>::operator=(v49, &v101);
LABEL_85:
      re::StringID::destroyString((re::StringID *)v100);
      if (v101)
      {

        id v101 = 0;
      }
      unint64_t v46 = BufferIndex;
      unint64_t v12 = *(void *)(a1 + 8);
      if (v12 <= BufferIndex) {
        goto LABEL_182;
      }
      unint64_t v12 = *(void *)(a1 + 16);
      [v112 useResource:*(void *)(v12 + 8 * BufferIndex) usage:2];
      uint64_t BufferIndex = v94;
      float32x4_t v50 = (void *)v44;
      switch((int)v94)
      {
        case 0:
          goto LABEL_104;
        case 1:
          float32x4_t v50 = v76;
          goto LABEL_104;
        case 2:
          float32x4_t v50 = v77;
          goto LABEL_104;
        case 3:
          float32x4_t v50 = v73;
          goto LABEL_104;
        case 4:
          float32x4_t v50 = v74;
          goto LABEL_104;
        case 5:
          float32x4_t v50 = v75;
          goto LABEL_104;
        case 6:
          float32x4_t v50 = v78;
          goto LABEL_104;
        case 7:
          float32x4_t v50 = v79;
          goto LABEL_104;
        case 8:
          float32x4_t v50 = v80;
          goto LABEL_104;
        case 9:
          float32x4_t v50 = v81;
          goto LABEL_104;
        case 10:
          float32x4_t v50 = v82;
          goto LABEL_104;
        case 11:
          float32x4_t v50 = v83;
          goto LABEL_104;
        case 12:
          float32x4_t v50 = v84;
          goto LABEL_104;
        case 13:
          float32x4_t v50 = v85;
LABEL_104:
          *float32x4_t v50 = objc_msgSend(*(id *)(v12 + 8 * v46), sel_gpuAddress);
          break;
        default:
          goto LABEL_105;
      }
      goto LABEL_105;
    }
    if (v100[0] >> 1 > 0x2ED0816D3076E800uLL)
    {
      switch(v48)
      {
        case 0x2ED0816D3076E801:
          unint64_t v46 = *(void *)(a1 + 8);
          if (v46 <= 4) {
            goto LABEL_197;
          }
          float32x4_t v49 = (void **)(*(void *)(a1 + 16) + 32);
          goto LABEL_84;
        case 0x3CB5CD20F43A4EDALL:
          unint64_t v46 = *(void *)(a1 + 8);
          if (v46 <= 5) {
            goto LABEL_198;
          }
          float32x4_t v49 = (void **)(*(void *)(a1 + 16) + 40);
          goto LABEL_84;
        case 0x5353CF4AA93DFAB9:
          unint64_t v46 = *(void *)(a1 + 8);
          if (v46 <= 1) {
            goto LABEL_187;
          }
          float32x4_t v49 = (void **)(*(void *)(a1 + 16) + 8);
          goto LABEL_84;
      }
    }
    else
    {
      switch(v48)
      {
        case 0x16172F2CA64F41FLL:
          unint64_t v46 = *(void *)(a1 + 8);
          if (v46 <= 2) {
            goto LABEL_195;
          }
          float32x4_t v49 = (void **)(*(void *)(a1 + 16) + 16);
          goto LABEL_84;
        case 0x2ACCEB6695018FABLL:
          unint64_t v46 = *(void *)(a1 + 8);
          if (v46 <= 3) {
            goto LABEL_196;
          }
          float32x4_t v49 = (void **)(*(void *)(a1 + 16) + 24);
          goto LABEL_84;
        case 0x2B3FAC222C23CAEDLL:
          if (!*(void *)(a1 + 8)) {
            goto LABEL_186;
          }
          float32x4_t v49 = *(void ***)(a1 + 16);
          goto LABEL_84;
      }
    }
LABEL_90:
    float32x4_t v51 = *re::graphicsLogObjects(v47);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__n128 buf = 136315138;
      *(void *)&uint8_t buf[4] = v100[1];
      _os_log_debug_impl(&dword_233120000, v51, OS_LOG_TYPE_DEBUG, "Unknown attribute type '%s'", buf, 0xCu);
    }
    goto LABEL_85;
  }
LABEL_106:
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF960C8, memory_order_acquire) & 1) == 0) {
    goto LABEL_203;
  }
  while (1)
  {
    id v52 = (id)_MergedGlobals_398;
    [v112 setLabel:v52];

    [v112 setComputePipelineState:*(void *)(v107 + 16)];
    [v112 setVisibleFunctionTable:*(void *)(v107 + 24) atBufferIndex:29];
    uint64_t v53 = *(unsigned int *)(v107 + 32);
    unint64_t v45 = v90;
    *(void *)__n128 buf = v90;
    unint64_t v13 = 1;
    *(int64x2_t *)&buf[8] = vdupq_n_s64(1uLL);
    *(void *)&v124[0] = v53;
    *(_OWORD *)((char *)v124 + 8) = *(_OWORD *)&buf[8];
    float v54 = (_anonymous_namespace_ *)[v112 dispatchThreads:buf threadsPerThreadgroup:v124];
    unint64_t v44 = v89;
    if (BufferIndex == -1) {
      break;
    }
    buf[0] = 0;
    uint64_t v119 = 0;
    memset(&v117[40], 0, 24);
    int v118 = 0;
    __int16 v120 = 257;
    char v121 = 0;
    uint64_t v122 = 0;
    char v123 = 1;
    ComputePipelineState = (void *)re::getOrCreateComputePipelineState(v86, (uint64_t)buf);
    [v112 setComputePipelineState:*ComputePipelineState];
    uint64_t v104 = *((unsigned int *)v4 + 116);
    unint64_t v105 = v88;
    [v112 setBytes:&v104 length:24 atIndex:0];
    uint64_t v56 = re::AttributeTable::buffers(v4);
    unint64_t v58 = *v95;
    if (v57 <= v58)
    {
LABEL_201:
      re::internal::assertLog((re::internal *)6, v57, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v58, v57);
      _os_crash();
      __break(1u);
    }
    else
    {
      [v112 setBuffer:*(void *)(v56 + 16 * v58) offset:*(unsigned int *)(v56 + 16 * v58 + 8) atIndex:1];
      unint64_t v13 = *(void *)(a1 + 8);
      if (v13 > 1)
      {
        [v112 setBuffer:*(void *)(*(void *)(a1 + 16) + 8) offset:0 atIndex:2];
        if (v88)
        {
          uint64_t v59 = *(unsigned int *)(v107 + 32);
          *(void *)&v124[0] = v88;
          *(int64x2_t *)((char *)v124 + 8) = vdupq_n_s64(1uLL);
          *(void *)unint64_t v127 = v59;
          *(_OWORD *)&v127[8] = *(_OWORD *)((char *)v124 + 8);
          [v112 dispatchThreads:v124 threadsPerThreadgroup:v127];
        }
        re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v117[40]);
        if (*(void *)&v117[8])
        {
          if (v117[16]) {
            (*(void (**)(void, void))(**(void **)&v117[8] + 40))(*(void *)&v117[8], *(void *)&v117[24]);
          }
          memset(&v117[8], 0, 32);
        }
        if (buf[0] && *(void *)&buf[8] && (buf[16] & 1) != 0) {
          (*(void (**)(void, void))(**(void **)&buf[8] + 40))(*(void *)&buf[8], *(void *)&buf[24]);
        }
        unint64_t v44 = v89;
        unint64_t v45 = v90;
        break;
      }
    }
    uint64_t v115 = 0;
    unint64_t v4 = (re::AttributeTable *)v124;
    long long v125 = 0u;
    long long v126 = 0u;
    memset(v124, 0, sizeof(v124));
    long long v11 = (re::AttributeTable *)&_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unint64_t v127 = 136315906;
    *(void *)&v127[4] = "operator[]";
    *(_WORD *)&v127[12] = 1024;
    *(_DWORD *)&v127[14] = 468;
    *(_WORD *)&v127[18] = 2048;
    *(void *)&v127[20] = 1;
    __int16 v128 = 2048;
    unint64_t v129 = v13;
    LODWORD(v72) = 38;
    float v71 = v127;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_203:
    if (__cxa_guard_acquire(&qword_26AF960C8))
    {
      float v70 = re::ns::String::String((re::ns::String *)&_MergedGlobals_398, (re::ns *)"serializeLowLevelMeshPartAttributes");
      __cxa_guard_release((__guard *)v70 + 1);
    }
  }
  objc_msgSend(v112, "endEncoding", v71, v72);
  [v113 commit];
  float v60 = (_anonymous_namespace_ *)[v113 waitUntilCompleted];
  if (v96)
  {
    unint64_t v13 = 0;
    unint64_t v25 = 0;
    unint64_t v12 = (unint64_t)&v124[2];
    if (v44 == 2) {
      char v61 = 49;
    }
    else {
      char v61 = 36;
    }
    char v92 = v61;
    while (1)
    {
      memset(v124, 0, 32);
      re::DynamicString::setCapacity(v124, 0);
      *(void *)&long long v126 = 0;
      *(void *)&long long v125 = 0;
      v124[2] = 0uLL;
      DWORD2(v125) = 0;
      WORD4(v126) = 256;
      unint64_t v46 = *((void *)v4 + 43);
      if (v46 <= v25) {
        goto LABEL_176;
      }
      size_t v62 = strlen(*(const char **)(*((void *)v4 + 44) + v13 + 8));
      *(void *)__n128 buf = *(void *)(*((void *)v4 + 44) + v13 + 8);
      *(void *)&buf[8] = v62;
      re::DynamicString::operator=((re::DynamicString *)v124, (uint64_t)buf);
      unint64_t v46 = *((void *)v4 + 43);
      if (v46 <= v25) {
        goto LABEL_177;
      }
      re::StringID::StringID((re::StringID *)v99, (const StringID *)(*((void *)v4 + 44) + v13));
      uint64_t v63 = v99[0] >> 1;
      if (v99[0] >> 1 <= 0x16172F2CA64F41EuLL) {
        break;
      }
      char v64 = 30;
      if (v99[0] >> 1 > 0x2ED0816D3076E800uLL)
      {
        if (v63 != 0x2ED0816D3076E801 && v63 != 0x3CB5CD20F43A4EDALL)
        {
          char v64 = v92;
          uint64_t v65 = 0x5353CF4AA93DFAB9;
          goto LABEL_138;
        }
      }
      else
      {
        if (v63 == 0x16172F2CA64F41FLL)
        {
LABEL_130:
          char v64 = 31;
          goto LABEL_144;
        }
        if (v63 != 0x2ACCEB6695018FABLL)
        {
          uint64_t v65 = 0x2B3FAC222C23CAEDLL;
LABEL_138:
          if (v63 == v65) {
            goto LABEL_144;
          }
LABEL_143:
          char v64 = 0;
        }
      }
LABEL_144:
      BYTE8(v126) = v64;
      re::StringID::destroyString((re::StringID *)v99);
      unint64_t v46 = *((void *)v11 + 4);
      if (v46 <= v25) {
        goto LABEL_178;
      }
      BYTE9(v126) = *(unsigned char *)(*((void *)v11 + 5) + v13 + 5);
      unint64_t v46 = *((void *)v4 + 43);
      if (v46 <= v25) {
        goto LABEL_179;
      }
      re::StringID::StringID((re::StringID *)v98, (const StringID *)(*((void *)v4 + 44) + v13));
      int OutputAttributeSize = re::GPUAttributeFormatConverter::getOutputAttributeSize(v98[0], v44);
      re::StringID::destroyString((re::StringID *)v98);
      if (BufferIndex == -1 || v25 != *v95)
      {
        if (BYTE9(v126)) {
          int v67 = v45;
        }
        else {
          int v67 = 1;
        }
      }
      else
      {
        int v67 = *((_DWORD *)v4 + 116);
      }
      unint64_t v46 = (v67 * OutputAttributeSize);
      if (*((void *)&v124[2] + 1) < v46) {
        re::DynamicArray<BOOL>::setCapacity(&v124[2], v46);
      }
      if (v46)
      {
        unint64_t v44 = *((void *)v4 + 43);
        if (v44 <= v25) {
          goto LABEL_183;
        }
        re::StringID::StringID((re::StringID *)v97, (const StringID *)(*((void *)v4 + 44) + v13));
        unsigned int v68 = re::GPUAttributeFormatConverter::getBufferIndex((re *)v97);
        re::StringID::destroyString((re::StringID *)v97);
        uint64_t BufferIndex = v68;
        unint64_t v45 = *(void *)(a1 + 8);
        if (v45 <= v68) {
          goto LABEL_184;
        }
        re::DynamicArray<REFrameAnalysisBottleneck>::copy(&v124[2], 0, (char *)objc_msgSend(*(id *)(*(void *)(a1 + 16) + 8 * v68), sel_contents), v46);
        unint64_t v44 = v89;
        unint64_t v45 = v90;
        uint64_t BufferIndex = v94;
      }
      v69.n128_f64[0] = re::DynamicArray<re::MeshAssetBuffer>::add(a4, (uint64_t)v124);
      if (*(void *)&v124[2])
      {
        if ((void)v126) {
          (*(void (**)(double))(**(void **)&v124[2] + 40))(v69.n128_f64[0]);
        }
        *(void *)&long long v126 = 0;
        *(void *)&long long v125 = 0;
        v124[2] = 0uLL;
        ++DWORD2(v125);
      }
      float v60 = *(_anonymous_namespace_ **)&v124[0];
      if (*(void *)&v124[0] && (BYTE8(v124[0]) & 1) != 0) {
        float v60 = (_anonymous_namespace_ *)(*(uint64_t (**)(__n128))(**(void **)&v124[0] + 40))(v69);
      }
      ++v25;
      v13 += 16;
      if (v96 == v25) {
        goto LABEL_166;
      }
    }
    if ((unint64_t)(v63 - 0x5E27ADA1858DLL) < 6) {
      goto LABEL_130;
    }
    if (v63 == 0x30989BAE345 || v63 == 0x5E27ADA1858CLL)
    {
      char v64 = 29;
      goto LABEL_144;
    }
    goto LABEL_143;
  }
LABEL_166:
  if (v87) {

  }
  if (v107) {
  if (v108)
  }

  if (v109) {
}
  }

BOOL re::FontID::isValid(re::FontID *this)
{
  re::StringID::invalid((re::StringID *)&v5);
  if ((v5 ^ *(void *)this) > 1)
  {
    BOOL v3 = 1;
  }
  else
  {
    uint64_t v2 = (char *)*((void *)this + 1);
    BOOL v3 = v2 != __s2 && strcmp(v2, __s2) != 0;
  }
  re::StringID::destroyString((re::StringID *)&v5);
  return v3;
}

void re::internal::shadows::initializeMeshShadowDefaults(re::internal::shadows *this, const char *a2)
{
  re::Defaults::BOOLValue((re::Defaults *)"enableShadowFlattening", a2, v8);
  if (v8[0]) {
    re::internal::shadows::g_enableShadowFlattening = v8[1];
  }
  re::Defaults::BOOLValue((re::Defaults *)"enableMeshDepthFallbackWhenFlattening", v2, v7);
  if (v7[0]) {
    re::internal::shadows::g_enableMeshDepthFallbackWhenFlattening = v7[1];
  }
  re::Defaults::BOOLValue((re::Defaults *)"EnableDefaultShadows", v3, v6);
  if (v6[0]) {
    re::internal::shadows::g_enableShadowsByDefault = v6[1];
  }
  re::Defaults::BOOLValue((re::Defaults *)"AllowMultipleShadows", v4, v5);
  if (v5[0]) {
    re::internal::shadows::g_allowMultipleShadowRemovals = v5[1];
  }
}

re::MeshModelDefinition *re::MeshModelDefinition::MeshModelDefinition(re::MeshModelDefinition *this)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)this = &unk_26E711A70;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  re::DynamicString::setCapacity((void *)this + 3, 0);
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 20) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 16) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 0;
  return this;
}

void re::MeshModelDefinition::~MeshModelDefinition(re::MeshModelDefinition *this)
{
  *(void *)this = &unk_26E711A70;
  BOOL v3 = (void *)((char *)this + 96);
  uint64_t v2 = *((void *)this + 12);
  if (v2)
  {
    if (*((void *)this + 16)) {
      (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
    }
    *((void *)this + 16) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *BOOL v3 = 0;
    ++*((_DWORD *)this + 30);
  }
  uint64_t v4 = *((void *)this + 7);
  if (v4)
  {
    uint64_t v5 = *((void *)this + 11);
    if (v5)
    {
      uint64_t v6 = *((void *)this + 9);
      if (v6)
      {
        uint64_t v7 = 56 * v6;
        uint64_t v8 = (re::DynamicString *)(v5 + 16);
        do
        {
          re::DynamicString::deinit(v8);
          uint64_t v9 = *((void *)v8 - 2);
          if (v9)
          {

            *((void *)v8 - 2) = 0;
          }
          uint64_t v8 = (re::DynamicString *)((char *)v8 + 56);
          v7 -= 56;
        }
        while (v7);
        uint64_t v4 = *((void *)this + 7);
        uint64_t v5 = *((void *)this + 11);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 40))(v4, v5);
    }
    *((void *)this + 11) = 0;
    *((void *)this + 8) = 0;
    *((void *)this + 9) = 0;
    *((void *)this + 7) = 0;
    ++*((_DWORD *)this + 20);
  }
  re::DynamicString::deinit((re::MeshModelDefinition *)((char *)this + 24));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::MeshModelDefinition::~MeshModelDefinition(this);
  JUMPOUT(0x237DBCBD0);
}

void re::MeshModelDefinition::append(void *a1, uint64_t *a2, char a3, int a4, int a5, const char *a6)
{
  if (*(_DWORD *)(*a2 + 40) || *(_DWORD *)(*a2 + 96))
  {
    uint64_t v12 = *a2;
    *a2 = 0;
    char v13 = a3;
    int v15 = a4;
    int v16 = a5;
    double v10 = re::DynamicArray<re::MeshModelDefinition::PartEntry>::add((_anonymous_namespace_ *)(a1 + 7), (uint64_t)&v12);
    if (v14[0])
    {
      if (v14[1]) {
        (*(void (**)(double))(*(void *)v14[0] + 40))(v10);
      }
      memset(v14, 0, sizeof(v14));
    }
    if (v12) {

    }
    unint64_t v11 = (a5 + 1);
    if (a1[14] < v11) {
      re::DynamicArray<re::MeshModelDefinition::LevelEntry>::resize(a1 + 12, v11);
    }
  }
}

double re::DynamicArray<re::MeshModelDefinition::PartEntry>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::MeshModelDefinition::PartEntry>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 56 * v4;
  *(void *)uint64_t v5 = *(void *)a2;
  *(void *)a2 = 0;
  *(unsigned char *)(v5 + 8) = *(unsigned char *)(a2 + 8);
  double result = 0.0;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(void *)(v5 + 40) = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(v5 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v8 = *(void *)(a2 + 32);
  *(void *)(a2 + 40) = 0;
  uint64_t v10 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v5 + 32);
  *(void *)(v5 + 24) = v7;
  *(void *)(v5 + 32) = v8;
  *(void *)(a2 + 24) = v10;
  *(void *)(a2 + 32) = v9;
  *(void *)(v5 + 48) = *(void *)(a2 + 48);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void *re::DynamicArray<re::MeshModelDefinition::LevelEntry>::resize(void *result, unint64_t a2)
{
  BOOL v3 = result;
  unint64_t v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
  }
  else
  {
    if (result[1] < a2)
    {
      double result = re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(result, a2);
      unint64_t v4 = v3[2];
    }
    if (v4 < a2)
    {
      uint64_t v5 = v3[4];
      uint64_t v6 = (void *)(v5 + 8 * v4);
      uint64_t v7 = v5 + 8 * a2 - (void)v6;
      if (v7 >= 1)
      {
        unint64_t v8 = ((unint64_t)v7 >> 3) + 1;
        do
        {
          *v6++ = 0x7F7FFFFF00000000;
          --v8;
        }
        while (v8 > 1);
      }
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void *re::MeshModelDefinition::append(void *this, unsigned int a2, float a3, float a4)
{
  uint64_t v7 = this;
  unint64_t v8 = this[14];
  unint64_t v9 = a2 + 1;
  if (v8 < v9)
  {
    this = re::DynamicArray<re::MeshModelDefinition::LevelEntry>::resize(this + 12, v9);
    unint64_t v8 = v7[14];
  }
  if (v8 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v10 = (float *)(v7[16] + 8 * a2);
  *uint64_t v10 = a3;
  v10[1] = a4;
  return this;
}

_anonymous_namespace_ *re::MeshResourceDefinition::MeshResourceDefinition(_anonymous_namespace_ *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, unint64_t a7)
{
  uint64_t v12 = a1;
  uint64_t v223 = *MEMORY[0x263EF8340];
  ArcSharedObject::ArcSharedObject(v12, 0);
  *((void *)v12 + 3) = 0;
  v179 = (_anonymous_namespace_ *)((char *)v12 + 24);
  *(_OWORD *)((char *)v12 + 56) = 0u;
  id v193 = (void *)((char *)v12 + 56);
  *(void *)uint64_t v12 = &unk_26E711AA0;
  *((void *)v12 + 4) = 0;
  *((void *)v12 + 5) = 0;
  *((_OWORD *)v12 + 6) = 0u;
  uint64_t v194 = (uint64_t *)((char *)v12 + 96);
  *((_DWORD *)v12 + 12) = 0;
  *(_OWORD *)((char *)v12 + 72) = 0u;
  *((_DWORD *)v12 + 22) = 0;
  *((_OWORD *)v12 + 7) = 0u;
  *((_DWORD *)v12 + 32) = 0;
  *(_OWORD *)((char *)v12 + 136) = 0u;
  *(_OWORD *)((char *)v12 + 152) = 0u;
  *((_DWORD *)v12 + 42) = 0;
  *((_OWORD *)v12 + 11) = 0u;
  *((_OWORD *)v12 + 12) = 0u;
  *((_DWORD *)v12 + 52) = 0;
  *((_DWORD *)v12 + 62) = 0;
  *(_OWORD *)((char *)v12 + 232) = 0u;
  *(_OWORD *)((char *)v12 + 216) = 0u;
  *(_OWORD *)((char *)v12 + 284) = 0u;
  *((_OWORD *)v12 + 16) = 0u;
  *((_OWORD *)v12 + 17) = 0u;
  uint64_t v183 = (uint64_t)v12 + 264;
  *(void *)((char *)v12 + 300) = 0x7FFFFFFFLL;
  int v199 = 0;
  memset(v198, 0, sizeof(v198));
  if ((2 * a3) <= 1) {
    signed int v14 = 1;
  }
  else {
    signed int v14 = 2 * a3;
  }
  uint64_t v200 = 0x7FFFFFFFLL;
  int v196 = 0;
  memset(v195, 0, sizeof(v195));
  uint64_t v197 = 0x7FFFFFFFLL;
  uint64_t v167 = a5;
  if ((2 * a5) <= 1) {
    signed int v16 = 1;
  }
  else {
    signed int v16 = 2 * a5;
  }
  if (a7)
  {
    id v176 = a2;
    uint64_t v18 = 8 * a7;
    uint64_t v19 = a6;
    uint64_t v20 = (uint64_t)v12 + 264;
    do
    {
      uint64_t v21 = *v19;
      if (*v19) {
        long long v17 = (_anonymous_namespace_ *)(id)(v21 + 8);
      }
      unint64_t v22 = *((void *)v12 + 29);
      unint64_t v23 = *((void *)v12 + 30);
      if (v23 >= v22)
      {
        unint64_t v24 = v23 + 1;
        if (v22 < v23 + 1)
        {
          if (*((void *)v12 + 28))
          {
            if (v22) {
              unint64_t v25 = 2 * v22;
            }
            else {
              unint64_t v25 = 8;
            }
            if (v25 <= v24) {
              unint64_t v26 = v23 + 1;
            }
            else {
              unint64_t v26 = v25;
            }
            long long v17 = (_anonymous_namespace_ *)re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)v12 + 28, v26);
          }
          else
          {
            long long v17 = (_anonymous_namespace_ *)re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)v12 + 28, v24);
            ++*((_DWORD *)v12 + 62);
          }
        }
        unint64_t v23 = *((void *)v12 + 30);
        uint64_t v20 = (uint64_t)v12 + 264;
      }
      *(void *)(*((void *)v12 + 32) + 8 * v23) = v21;
      *((void *)v12 + 30) = v23 + 1;
      ++*((_DWORD *)v12 + 62);
      ++v19;
      v18 -= 8;
    }
    while (v18);
    uint64_t v27 = 0;
    LODWORD(v212[0]) = 0;
    a2 = v176;
    do
    {
      long long v17 = (_anonymous_namespace_ *)re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v20, (StringID *)(a6[v27] + 24), v212);
      ++LODWORD(v212[0]);
      uint64_t v27 = LODWORD(v212[0]);
    }
    while (a7 > LODWORD(v212[0]));
  }
  if (a3)
  {
    float32x4_t v170 = &a2[a3];
    uint64_t v28 = (void *)((char *)v12 + 104);
    int v172 = (void *)((char *)v12 + 144);
    id v178 = (_anonymous_namespace_ *)((char *)v12 + 64);
    int32x4_t v171 = vdupq_n_s32(0x7F800000u);
    float32x4_t v192 = v12;
    uint64_t v169 = (void *)((char *)v12 + 104);
    while (1)
    {
      id v177 = a2;
      uint64_t v29 = *a2;
      uint64_t v30 = *(void *)(*a2 + 112);
      if (v30)
      {
        uint64_t v31 = *(uint64_t **)(v29 + 128);
        unint64_t v32 = *((void *)v12 + 15);
        uint64_t v33 = 8 * v30;
        do
        {
          uint64_t v34 = *v31;
          unint64_t v35 = *((void *)v12 + 14);
          if (v32 >= v35)
          {
            unint64_t v36 = v32 + 1;
            if (v35 < v32 + 1)
            {
              if (*v28)
              {
                unint64_t v37 = 2 * v35;
                if (!v35) {
                  unint64_t v37 = 8;
                }
                if (v37 <= v36) {
                  unint64_t v38 = v36;
                }
                else {
                  unint64_t v38 = v37;
                }
                long long v17 = (_anonymous_namespace_ *)re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(v28, v38);
              }
              else
              {
                long long v17 = (_anonymous_namespace_ *)re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(v28, v36);
                ++*((_DWORD *)v12 + 32);
              }
            }
            unint64_t v32 = *((void *)v12 + 15);
          }
          *(void *)(*((void *)v12 + 17) + 8 * v32++) = v34;
          *((void *)v12 + 15) = v32;
          ++*((_DWORD *)v12 + 32);
          ++v31;
          v33 -= 8;
        }
        while (v33);
      }
      if (*(unsigned char *)(v29 + 32)) {
        unsigned int v39 = *(const char **)(v29 + 40);
      }
      else {
        unsigned int v39 = (const char *)(v29 + 33);
      }
      unsigned int v40 = (_anonymous_namespace_ *)re::UniqueNameGenerator::uniqueName((re::UniqueNameGenerator *)v198, v39, "Model", (re::StringID *)v206);
      *(void *)&v212[2] = 0;
      memset(v212, 0, 28);
      id v41 = v207;
      *(void *)&long long v43 = 0x7F0000007FLL;
      *((void *)&v43 + 1) = 0x7F0000007FLL;
      int32x4_t v213 = v171;
      long long v214 = v43;
      long long v216 = 0uLL;
      uint64_t v215 = 0;
      int v217 = 0;
      uint64_t v221 = 0;
      long long v218 = 0u;
      long long v219 = 0u;
      int v220 = 0;
      unint64_t v44 = *((void *)v12 + 19);
      unint64_t v45 = *((void *)v12 + 20);
      if (v45 >= v44)
      {
        unint64_t v46 = v45 + 1;
        if (v44 < v45 + 1)
        {
          if (*v172)
          {
            uint64_t v47 = 2 * v44;
            BOOL v48 = v44 == 0;
            unint64_t v49 = 8;
            if (!v48) {
              unint64_t v49 = v47;
            }
            if (v49 <= v46) {
              unint64_t v50 = v46;
            }
            else {
              unint64_t v50 = v49;
            }
            re::DynamicArray<re::MeshResourceDefinition::Model>::setCapacity(v172, v50);
          }
          else
          {
            re::DynamicArray<re::MeshResourceDefinition::Model>::setCapacity(v172, v46);
            ++*((_DWORD *)v12 + 42);
          }
        }
        unint64_t v45 = *((void *)v12 + 20);
      }
      uint64_t v51 = *((void *)v12 + 22) + 192 * v45;
      *(void *)(v51 + 32) = 0;
      *(void *)(v51 + 8) = 0;
      *(void *)(v51 + 16) = 0;
      *(void *)uint64_t v51 = 0;
      *(_DWORD *)(v51 + 24) = 0;
      *(void *)uint64_t v51 = *(void *)&v212[0];
      *(void *)&v212[0] = 0;
      *(void *)(v51 + 8) = *((void *)&v212[0] + 1);
      *((void *)&v212[0] + 1) = 0;
      uint64_t v52 = *(void *)(v51 + 16);
      *(void *)(v51 + 16) = *(void *)&v212[1];
      *(void *)&v212[1] = v52;
      uint64_t v53 = *(void *)(v51 + 32);
      *(void *)(v51 + 32) = *(void *)&v212[2];
      *(void *)&v212[2] = v53;
      ++DWORD2(v212[1]);
      ++*(_DWORD *)(v51 + 24);
      *(_OWORD *)(v51 + 40) = 0u;
      *(_OWORD *)(v51 + 56) = 0u;
      *(void *)(v51 + 40) = *((void *)&v212[2] + 1);
      *((void *)&v212[2] + 1) = 0;
      uint64_t v54 = *(void *)(v51 + 56);
      *(void *)(v51 + 56) = *((void *)&v212[3] + 1);
      *((void *)&v212[3] + 1) = v54;
      *(void *)(v51 + 64) = *(void *)&v212[4];
      *(void *)&v212[4] = 0;
      uint64_t v55 = *(void *)(v51 + 48);
      *(void *)(v51 + 48) = *(void *)&v212[3];
      *(void *)&v212[3] = v55;
      long long v56 = v214;
      *(int32x4_t *)(v51 + 80) = v213;
      *(_OWORD *)(v51 + 96) = v56;
      *(void *)(v51 + 144) = 0;
      *(_DWORD *)(v51 + 136) = 0;
      *(void *)(v51 + 120) = 0;
      *(void *)(v51 + 128) = 0;
      *(void *)(v51 + 112) = 0;
      *(void *)(v51 + 112) = v215;
      uint64_t v215 = 0;
      *(void *)(v51 + 120) = v216;
      *(void *)&long long v216 = 0;
      uint64_t v57 = *(void *)(v51 + 128);
      *(void *)(v51 + 128) = *((void *)&v216 + 1);
      *((void *)&v216 + 1) = v57;
      uint64_t v58 = *(void *)(v51 + 144);
      *(void *)(v51 + 144) = v218;
      *(void *)&long long v218 = v58;
      ++v217;
      ++*(_DWORD *)(v51 + 136);
      *(void *)(v51 + 184) = 0;
      *(void *)(v51 + 160) = 0;
      *(void *)(v51 + 168) = 0;
      *(void *)(v51 + 152) = 0;
      *(_DWORD *)(v51 + 176) = 0;
      *(void *)(v51 + 152) = *((void *)&v218 + 1);
      *((void *)&v218 + 1) = 0;
      *(void *)(v51 + 160) = v219;
      *(void *)&long long v219 = 0;
      uint64_t v59 = *(void *)(v51 + 168);
      *(void *)(v51 + 168) = *((void *)&v219 + 1);
      *((void *)&v219 + 1) = v59;
      uint64_t v60 = *(void *)(v51 + 184);
      *(void *)(v51 + 184) = v221;
      uint64_t v221 = v60;
      ++v220;
      ++*(_DWORD *)(v51 + 176);
      ++*((void *)v12 + 20);
      ++*((_DWORD *)v12 + 42);
      re::DynamicArray<re::MeshAssetBlendShapeData>::deinit((uint64_t)&v218 + 8);
      if (v215)
      {
        if ((void)v218) {
          (*(void (**)(void))(*(void *)v215 + 40))();
        }
        *(void *)&long long v218 = 0;
        long long v216 = 0uLL;
        uint64_t v215 = 0;
        ++v217;
      }
      if (*((void *)&v212[2] + 1))
      {
        if (v212[3]) {
          (*(void (**)(void))(**((void **)&v212[2] + 1) + 40))();
        }
        memset((char *)&v212[2] + 8, 0, 32);
      }
      char v61 = (_anonymous_namespace_ *)re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)v212);
      uint64_t v174 = *((void *)v12 + 20) - 1;
      uint64_t v175 = *((void *)v12 + 22);
      uint64_t v62 = v175 + 192 * v174;
      int v63 = *(_DWORD *)(v29 + 72);
      memset(v203, 0, sizeof(v203));
      int v204 = 0;
      uint64_t v205 = 0x7FFFFFFFLL;
      unsigned int v64 = 2 * v63;
      signed int v65 = v64 <= 1 ? 1 : v64;
      uint64_t v66 = *(void *)(v29 + 72);
      if (v66) {
        break;
      }
LABEL_144:
      uint64_t v119 = *(void *)(v62 + 16);
      if (v119)
      {
        __int16 v120 = 0;
        uint64_t v121 = *(void *)(v62 + 32);
        uint64_t v182 = v121 + 40 * v119;
        uint64_t v122 = v175 + 192 * v174;
        long long v187 = (_anonymous_namespace_ *)(v122 + 152);
        char v123 = (unint64_t *)(v122 + 168);
        int v124 = (_DWORD *)(v122 + 176);
        float32x4_t v189 = (void *)(v122 + 184);
        uint64_t v191 = (unint64_t *)(v122 + 160);
        while (1)
        {
          uint64_t v125 = *(void *)(v121 + 16);
          uint64_t v185 = v121;
          if (v125) {
            break;
          }
LABEL_172:
          uint64_t v121 = v185 + 40;
          if (v185 + 40 == v182) {
            goto LABEL_173;
          }
        }
        unint64_t v100 = *(void *)(v121 + 32);
        uint64_t v126 = 4 * v125;
        while (1)
        {
          unint64_t v127 = *(int *)v100;
          *(void *)__src = 0;
          *(void *)&__src[8] = "";
          HIDWORD(v210) = 0;
          memset(&__src[16], 0, 24);
          LOBYTE(v210) = 0;
          unint64_t v128 = *((void *)v12 + 10);
          if (v128 <= v127) {
            break;
          }
          uint64_t v129 = *v194;
          uint64_t v130 = *v194 + 144 * (int)v127;
          if (!*(void *)(v130 + 16)) {
            goto LABEL_197;
          }
          unint64_t v128 = **(int **)(v130 + 32);
          unint64_t v131 = *((void *)v12 + 5);
          if (v131 <= v128) {
            goto LABEL_198;
          }
          uint64_t v132 = *(void *)(*v193 + 8 * v128);
          if (v132) {
            id v133 = (id)(v132 + 8);
          }
          uint64_t v12 = v192;
          if (*(unsigned char *)(v129 + 144 * (int)v127 + 48)) {
            __int16 v134 = *(const char **)(v129 + 144 * (int)v127 + 56);
          }
          else {
            __int16 v134 = (const char *)(v129 + 144 * (int)v127 + 49);
          }
          if (re::MeshDefinition::blendShapeData(v132, (uint64_t *)__src, v134, *(_DWORD *)(v129 + 144 * (int)v127 + 120), v120))
          {
            unint64_t v135 = *v123;
            unint64_t v136 = *v191;
            if (*v123 >= *v191)
            {
              unint64_t v137 = v135 + 1;
              if (v136 < v135 + 1)
              {
                if (*(void *)v187)
                {
                  uint64_t v138 = 2 * v136;
                  BOOL v48 = v136 == 0;
                  unint64_t v139 = 8;
                  if (!v48) {
                    unint64_t v139 = v138;
                  }
                  if (v139 <= v137) {
                    unint64_t v140 = v137;
                  }
                  else {
                    unint64_t v140 = v139;
                  }
                  re::DynamicArray<re::MeshAssetBlendShapeData>::setCapacity(v187, v140);
                }
                else
                {
                  re::DynamicArray<re::MeshAssetBlendShapeData>::setCapacity(v187, v137);
                  ++*v124;
                }
              }
              unint64_t v135 = *v123;
            }
            uint64_t v141 = *v189 + 56 * v135;
            char v142 = __src[0];
            *(void *)uint64_t v141 = *(void *)v141 & 0xFFFFFFFFFFFFFFFELL | __src[0] & 1;
            *(void *)uint64_t v141 = *(void *)__src & 0xFFFFFFFFFFFFFFFELL | v142 & 1;
            *(void *)(v141 + 8) = *(void *)&__src[8];
            *(void *)__src = 0;
            *(void *)&__src[8] = "";
            *(void *)(v141 + 16) = 0;
            *(void *)(v141 + 24) = 0;
            *(void *)(v141 + 32) = 0;
            *(void *)(v141 + 16) = *(void *)&__src[16];
            *(void *)&__src[16] = 0;
            *(void *)(v141 + 24) = *(void *)&__src[24];
            *(void *)&__src[24] = 0;
            uint64_t v143 = *(void *)(v141 + 32);
            *(void *)(v141 + 32) = *(void *)&__src[32];
            *(void *)&__src[32] = v143;
            *(void *)(v141 + 40) = v210;
            *(_WORD *)(v141 + 48) = v211;
            ++*v123;
            ++*v124;
          }
          if (v132) {

          }
          re::FixedArray<re::BlendShapeDefinition>::deinit(&__src[16]);
          re::StringID::destroyString((re::StringID *)__src);
          v100 += 4;
          ++v120;
          v126 -= 4;
          if (!v126) {
            goto LABEL_172;
          }
        }
        v201[0] = 0;
        memset(v212, 0, sizeof(v212));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v222 = 136315906;
        *(void *)&v222[4] = "operator[]";
        *(_WORD *)&v222[12] = 1024;
        *(_DWORD *)&v222[14] = 789;
        *(_WORD *)&v222[18] = 2048;
        *(void *)&v222[20] = v127;
        *(_WORD *)&v222[28] = 2048;
        *(void *)&v222[30] = v128;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_197:
        v201[0] = 0;
        memset(v212, 0, sizeof(v212));
        unint64_t v131 = &_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v222 = 136315906;
        *(void *)&v222[4] = "operator[]";
        *(_WORD *)&v222[12] = 1024;
        *(_DWORD *)&v222[14] = 797;
        *(_WORD *)&v222[18] = 2048;
        *(void *)&v222[20] = 0;
        *(_WORD *)&v222[28] = 2048;
        *(void *)&v222[30] = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_198:
        v201[0] = 0;
        memset(v212, 0, sizeof(v212));
        unint64_t v99 = &_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v222 = 136315906;
        *(void *)&v222[4] = "operator[]";
        *(_WORD *)&v222[12] = 1024;
        *(_DWORD *)&v222[14] = 789;
        *(_WORD *)&v222[18] = 2048;
        *(void *)&v222[20] = v128;
        *(_WORD *)&v222[28] = 2048;
        *(void *)&v222[30] = v131;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_199:
        uint64_t v208 = 0;
        memset(v212, 0, sizeof(v212));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)__src = 136315906;
        *(void *)&__src[4] = "operator[]";
        *(_WORD *)&__src[12] = 1024;
        *(_DWORD *)&__src[14] = 789;
        *(_WORD *)&__src[18] = 2048;
        *(void *)&__src[20] = v99;
        *(_WORD *)&__src[28] = 2048;
        *(void *)&__src[30] = v100;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
LABEL_173:
      re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v203);
      re::StringID::destroyString((re::StringID *)v206);
      a2 = v177 + 1;
      uint64_t v28 = v169;
      if (v177 + 1 == v170) {
        goto LABEL_174;
      }
    }
    uint64_t v67 = *(void *)(v29 + 88);
    uint64_t v68 = v67 + 56 * v66;
    __n128 v69 = (float32x4_t *)(v175 + 192 * v174);
    long long v188 = v69 + 5;
    uint64_t v190 = v68;
    float v70 = v69 + 6;
    uint64_t v173 = v69 + 7;
    long long v184 = (unint64_t *)&v69[8];
    long long v186 = (_anonymous_namespace_ *)&v69[8].u32[2];
    unint64_t v180 = v69 + 9;
    int v181 = &v69[7].u64[1];
    char v71 = 1;
    while (1)
    {
      uint64_t v72 = *(float32x4_t **)v67;
      int v73 = *((_DWORD *)v12 + 10);
      re::MeshDefinition::computeBoundingBox(*(float32x4_t **)v67, (float32x4_t *)v222);
      unint64_t v75 = *((void *)v12 + 4);
      unint64_t v74 = *((void *)v12 + 5);
      if (v74 >= v75)
      {
        unint64_t v76 = v74 + 1;
        if (v75 < v74 + 1)
        {
          if (*(void *)v179)
          {
            unint64_t v77 = 2 * v75;
            if (!v75) {
              unint64_t v77 = 8;
            }
            if (v77 <= v76) {
              unint64_t v78 = v76;
            }
            else {
              unint64_t v78 = v77;
            }
            re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(v179, v78);
          }
          else
          {
            re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(v179, v76);
            ++*((_DWORD *)v12 + 12);
          }
        }
        unint64_t v74 = *((void *)v12 + 5);
      }
      long long v79 = *(float32x4_t **)v67;
      *(void *)(*v193 + 8 * v74) = *(void *)v67;
      if (v79)
      {
        float v80 = &v79->u32[2];
        unint64_t v74 = *((void *)v12 + 5);
      }
      *((void *)v12 + 5) = v74 + 1;
      ++*((_DWORD *)v12 + 12);
      int v202 = *((void *)v12 + 10);
      if (*(unsigned char *)(v67 + 24)) {
        float v81 = *(const char **)(v67 + 32);
      }
      else {
        float v81 = (const char *)(v67 + 25);
      }
      float v82 = (_anonymous_namespace_ *)re::UniqueNameGenerator::uniqueName((re::UniqueNameGenerator *)v203, v81, "Part", (re::StringID *)v201);
      *(_DWORD *)__src = v73;
      *(void *)&v212[2] = 0;
      memset(v212, 0, 28);
      re::DynamicArray<int>::setCapacity(v212, 1uLL);
      ++DWORD2(v212[1]);
      long long v83 = (_anonymous_namespace_ *)re::DynamicArray<float>::copy(v212, 0, __src, 1);
      float32x4_t v84 = (const char *)v201[1];
      int32x4_t v213 = *(int32x4_t *)v222;
      long long v214 = *(_OWORD *)&v222[16];
      LOBYTE(v215) = v72[10].i8[0];
      if ((_BYTE)v215) {
        BYTE1(v215) = v72[10].i8[1];
      }
      BYTE2(v215) = v72[10].i8[2];
      if (BYTE2(v215)) {
        BYTE3(v215) = v72[10].i8[3];
      }
      BYTE4(v215) = v72[10].i8[4];
      if (BYTE4(v215)) {
        BYTE5(v215) = v72[10].i8[5];
      }
      LODWORD(v216) = v72[6].i32[0];
      BYTE4(v216) = *(unsigned char *)(v67 + 8);
      DWORD2(v216) = *(_DWORD *)(v67 + 48);
      HIDWORD(v216) = v72[6].i32[1];
      unint64_t v86 = *((void *)v12 + 9);
      unint64_t v85 = *((void *)v12 + 10);
      if (v85 >= v86)
      {
        unint64_t v87 = v85 + 1;
        if (v86 < v85 + 1)
        {
          if (*(void *)v178)
          {
            unint64_t v88 = 2 * v86;
            if (!v86) {
              unint64_t v88 = 8;
            }
            if (v88 <= v87) {
              unint64_t v89 = v87;
            }
            else {
              unint64_t v89 = v88;
            }
            re::DynamicArray<re::MeshResourceDefinition::Part>::setCapacity(v178, v89);
          }
          else
          {
            re::DynamicArray<re::MeshResourceDefinition::Part>::setCapacity(v178, v87);
            ++*((_DWORD *)v12 + 22);
          }
        }
        unint64_t v85 = *((void *)v12 + 10);
      }
      uint64_t v90 = *v194;
      uint64_t v91 = *v194 + 144 * v85;
      *(void *)(v91 + 32) = 0;
      *(void *)(v91 + 8) = 0;
      *(void *)(v91 + 16) = 0;
      *(void *)uint64_t v91 = 0;
      *(_DWORD *)(v91 + 24) = 0;
      *(void *)uint64_t v91 = *(void *)&v212[0];
      *(void *)&v212[0] = 0;
      *(void *)(v91 + 8) = *((void *)&v212[0] + 1);
      *((void *)&v212[0] + 1) = 0;
      uint64_t v92 = *(void *)(v91 + 16);
      *(void *)(v91 + 16) = *(void *)&v212[1];
      *(void *)&v212[1] = v92;
      uint64_t v93 = *(void *)(v91 + 32);
      *(void *)(v91 + 32) = *(void *)&v212[2];
      *(void *)&v212[2] = v93;
      ++DWORD2(v212[1]);
      ++*(_DWORD *)(v91 + 24);
      *(_OWORD *)(v91 + 40) = 0u;
      *(_OWORD *)(v91 + 56) = 0u;
      *(void *)(v91 + 40) = *((void *)&v212[2] + 1);
      *((void *)&v212[2] + 1) = 0;
      uint64_t v94 = *(void *)(v91 + 56);
      *(void *)(v91 + 56) = *((void *)&v212[3] + 1);
      *((void *)&v212[3] + 1) = v94;
      *(void *)(v91 + 64) = *(void *)&v212[4];
      *(void *)&v212[4] = 0;
      uint64_t v95 = *(void *)(v91 + 48);
      *(void *)(v91 + 48) = *(void *)&v212[3];
      *(void *)&v212[3] = v95;
      long long v96 = v214;
      *(int32x4_t *)(v91 + 80) = v213;
      *(_OWORD *)(v91 + 96) = v96;
      LODWORD(v95) = v215;
      *(unsigned char *)(v91 + 112) = v215;
      if (v95) {
        *(unsigned char *)(v90 + 144 * v85 + 113) = BYTE1(v215);
      }
      int v97 = BYTE2(v215);
      *(unsigned char *)(v90 + 144 * v85 + 114) = BYTE2(v215);
      if (v97) {
        *(unsigned char *)(v90 + 144 * v85 + 115) = BYTE3(v215);
      }
      int v98 = BYTE4(v215);
      *(unsigned char *)(v90 + 144 * v85 + 116) = BYTE4(v215);
      if (v98) {
        *(unsigned char *)(v90 + 144 * v85 + 117) = BYTE5(v215);
      }
      *(_OWORD *)(v90 + 144 * v85 + 120) = v216;
      ++*((void *)v12 + 10);
      ++*((_DWORD *)v12 + 22);
      if (*((void *)&v212[2] + 1))
      {
        if (v212[3]) {
          (*(void (**)(void))(**((void **)&v212[2] + 1) + 40))();
        }
        memset((char *)&v212[2] + 8, 0, 32);
      }
      if (*(void *)&v212[0] && *(void *)&v212[2]) {
        (*(void (**)(void))(**(void **)&v212[0] + 40))();
      }
      unint64_t v99 = *(int *)(v67 + 52);
      unint64_t v100 = *(void *)(v62 + 16);
      if (v100 > v99) {
        goto LABEL_127;
      }
      unint64_t v101 = (int)v99 + 1;
      if (v100 < v101) {
        break;
      }
      if (v100 > (int)v99 + 1)
      {
        uint64_t v105 = 40 * v101;
        unint64_t v106 = (int)v99 + 1;
        do
        {
          re::DynamicArray<unsigned long>::deinit(*(void *)(v62 + 32) + v105);
          ++v106;
          v105 += 40;
        }
        while (v106 < *(void *)(v62 + 16));
LABEL_126:
        *(void *)(v62 + 16) = v101;
        ++*(_DWORD *)(v62 + 24);
        unint64_t v100 = (int)v99 + 1;
        uint64_t v12 = v192;
      }
LABEL_127:
      if (v100 <= v99) {
        goto LABEL_199;
      }
      re::DynamicArray<int>::add((void *)(*(void *)(v62 + 32) + 40 * (int)v99), &v202);
      float32x4_t v107 = *v188;
      float32x4_t v108 = *(float32x4_t *)v222;
      v107.i32[3] = 0;
      v108.i32[3] = 0;
      *long long v188 = vminnmq_f32(v107, v108);
      float32x4_t v109 = *v70;
      float32x4_t v110 = *(float32x4_t *)&v222[16];
      v109.i32[3] = 0;
      v110.i32[3] = 0;
      *float v70 = vmaxnmq_f32(v109, v110);
      LODWORD(v212[0]) = 0;
      memset((char *)v212 + 8, 0, 48);
      if ((v71 & 1) != 0
        && (uint64_t v111 = re::MeshDefinition::skinningData(*(re::MeshDefinition **)v67, v183, (uint64_t)v212), (v111 & 1) != 0))
      {
        unint64_t v112 = *v184;
        unint64_t v113 = *v181;
        if (*v184 >= *v181)
        {
          unint64_t v114 = v112 + 1;
          if (v113 < v112 + 1)
          {
            if (v173->i64[0])
            {
              uint64_t v115 = 2 * v113;
              BOOL v48 = v113 == 0;
              unint64_t v116 = 8;
              if (!v48) {
                unint64_t v116 = v115;
              }
              if (v116 <= v114) {
                unint64_t v117 = v114;
              }
              else {
                unint64_t v117 = v116;
              }
              re::DynamicArray<re::BaseBlendShapeChannelData>::setCapacity(v173, v117);
            }
            else
            {
              re::DynamicArray<re::BaseBlendShapeChannelData>::setCapacity(v173, v114);
              ++*(_DWORD *)v186;
            }
          }
          unint64_t v112 = *v184;
        }
        uint64_t v118 = v180->i64[0] + 56 * v112;
        *(_OWORD *)uint64_t v118 = v212[0];
        *(_OWORD *)(v118 + 16) = v212[1];
        *(_OWORD *)(v118 + 32) = v212[2];
        *(void *)(v118 + 48) = *(void *)&v212[3];
        ++*v184;
        ++*(_DWORD *)v186;
        re::StringID::destroyString((re::StringID *)v201);
        v67 += 56;
        char v71 = 1;
        if (v67 == v190) {
          goto LABEL_144;
        }
      }
      else
      {
        re::StringID::destroyString((re::StringID *)v201);
        char v71 = 0;
        v67 += 56;
        if (v67 == v190)
        {
          *long long v184 = 0;
          ++*(_DWORD *)v186;
          goto LABEL_144;
        }
      }
    }
    if (*(void *)(v62 + 8) < v101)
    {
      re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity((void *)v62, v101);
      unint64_t v100 = *(void *)(v62 + 16);
    }
    unint64_t v102 = v101 - v100;
    if (v101 > v100)
    {
      uint64_t v103 = 40 * v100;
      do
      {
        uint64_t v104 = *(void *)(v62 + 32) + v103;
        *(void *)(v104 + 32) = 0;
        *(void *)(v104 + 8) = 0;
        *(void *)(v104 + 16) = 0;
        *(void *)uint64_t v104 = 0;
        *(_DWORD *)(v104 + 24) = 0;
        v103 += 40;
        --v102;
      }
      while (v102);
    }
    goto LABEL_126;
  }
LABEL_174:
  long long v144 = a4;
  if (v167)
  {
    uint64_t v145 = 8 * v167;
    do
    {
      uint64_t v146 = *v144;
      if (*(unsigned char *)(*v144 + 32)) {
        unint64_t v147 = *(const char **)(v146 + 40);
      }
      else {
        unint64_t v147 = (const char *)(v146 + 33);
      }
      uint64_t v148 = (_anonymous_namespace_ *)re::UniqueNameGenerator::uniqueName((re::UniqueNameGenerator *)v195, v147, "Instance", (re::StringID *)__src);
      float32x4_t v149 = *(const char **)&__src[8];
      LODWORD(v212[2]) = *(_DWORD *)(v146 + 56);
      long long v151 = *(_OWORD *)(v146 + 64);
      long long v152 = *(_OWORD *)(v146 + 80);
      long long v153 = *(_OWORD *)(v146 + 112);
      int32x4_t v213 = *(int32x4_t *)(v146 + 96);
      long long v214 = v153;
      v212[3] = v151;
      v212[4] = v152;
      uint64_t v215 = *(void *)(v146 + 128);
      unint64_t v154 = *((void *)v12 + 24);
      unint64_t v155 = *((void *)v12 + 25);
      if (v155 >= v154)
      {
        unint64_t v156 = v155 + 1;
        if (v154 < v155 + 1)
        {
          if (*((void *)v12 + 23))
          {
            if (v154) {
              unint64_t v157 = 2 * v154;
            }
            else {
              unint64_t v157 = 8;
            }
            if (v157 <= v156) {
              unint64_t v158 = v155 + 1;
            }
            else {
              unint64_t v158 = v157;
            }
            re::DynamicArray<re::MeshResourceDefinition::Instance>::setCapacity((void *)v12 + 23, v158);
          }
          else
          {
            re::DynamicArray<re::MeshResourceDefinition::Instance>::setCapacity((void *)v12 + 23, v156);
            ++*((_DWORD *)v12 + 52);
          }
        }
        unint64_t v155 = *((void *)v12 + 25);
      }
      unint64_t v159 = *((void *)v12 + 27) + (v155 << 7);
      *(_OWORD *)unint64_t v159 = 0u;
      *(_OWORD *)(v159 + 16) = 0u;
      *(void *)unint64_t v159 = *(void *)&v212[0];
      *(void *)&v212[0] = 0;
      uint64_t v160 = *(void *)(v159 + 16);
      *(void *)(v159 + 16) = *(void *)&v212[1];
      *(void *)&v212[1] = v160;
      *(void *)(v159 + 24) = *((void *)&v212[1] + 1);
      *((void *)&v212[1] + 1) = 0;
      uint64_t v161 = *(void *)(v159 + 8);
      *(void *)(v159 + 8) = *((void *)&v212[0] + 1);
      *((void *)&v212[0] + 1) = v161;
      long long v162 = v212[4];
      int32x4_t v163 = v213;
      long long v164 = v214;
      *(void *)(v159 + 112) = v215;
      *(int32x4_t *)(v159 + 80) = v163;
      *(_OWORD *)(v159 + 96) = v164;
      *(_OWORD *)(v159 + 64) = v162;
      long long v165 = v212[3];
      *(_OWORD *)(v159 + 32) = v212[2];
      *(_OWORD *)(v159 + 48) = v165;
      ++*((void *)v12 + 25);
      ++*((_DWORD *)v12 + 52);
      if (*(void *)&v212[0] && (BYTE8(v212[0]) & 1) != 0) {
        (*(void (**)(void))(**(void **)&v212[0] + 40))();
      }
      re::StringID::destroyString((re::StringID *)__src);
      ++v144;
      v145 -= 8;
    }
    while (v145);
  }
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v195);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v198);
  return v12;
}

void re::MeshResourceDefinition::~MeshResourceDefinition(re::MeshResourceDefinition *this)
{
  *(void *)this = &unk_26E711AA0;
  uint64_t v2 = (char *)this + 24;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 33);
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)this + 224);
  re::DynamicArray<re::MeshResourceDefinition::Instance>::deinit((uint64_t)this + 184);
  re::DynamicArray<re::MeshResourceDefinition::Model>::deinit((uint64_t)this + 144);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 104);
  re::DynamicArray<re::MeshResourceDefinition::Part>::deinit((uint64_t)this + 64);
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E711AA0;
  uint64_t v2 = (char *)this + 24;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 33);
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)this + 224);
  re::DynamicArray<re::MeshResourceDefinition::Instance>::deinit((uint64_t)this + 184);
  re::DynamicArray<re::MeshResourceDefinition::Model>::deinit((uint64_t)this + 144);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 104);
  re::DynamicArray<re::MeshResourceDefinition::Part>::deinit((uint64_t)this + 64);
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void *re::DynamicArray<re::MeshModelDefinition::PartEntry>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::MeshModelDefinition::PartEntry>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MeshModelDefinition::PartEntry>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::MeshModelDefinition::PartEntry>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::MeshModelDefinition::PartEntry>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x38uLL))
        {
          uint64_t v2 = 56 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 56 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_18;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 56, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 56 * v9;
        unint64_t v11 = v7;
        do
        {
          *unint64_t v11 = *(void *)v8;
          *(void *)uint64_t v8 = 0;
          *((unsigned char *)v11 + 8) = *(unsigned char *)(v8 + 8);
          *((_OWORD *)v11 + 1) = 0u;
          *((_OWORD *)v11 + 2) = 0u;
          _OWORD v11[2] = *(void *)(v8 + 16);
          *(void *)(v8 + 16) = 0;
          v11[5] = *(void *)(v8 + 40);
          *(void *)(v8 + 40) = 0;
          uint64_t v13 = v11[3];
          uint64_t v12 = v11[4];
          uint64_t v14 = *(void *)(v8 + 32);
          void v11[3] = *(void *)(v8 + 24);
          v11[4] = v14;
          *(void *)(v8 + 24) = v13;
          *(void *)(v8 + 32) = v12;
          v11[6] = *(void *)(v8 + 48);
          re::DynamicString::deinit((re::DynamicString *)(v8 + 16));
          if (*(void *)v8)
          {

            *(void *)uint64_t v8 = 0;
          }
          v8 += 56;
          v11 += 7;
          v10 -= 56;
        }
        while (v10);
        uint64_t v8 = v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

void *re::DynamicArray<re::MeshResourceDefinition::Model>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::MeshResourceDefinition::Model>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xC0uLL))
        {
          uint64_t v2 = 192 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 192 * a2, 16);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 192, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        unint64_t v10 = 0;
        uint64_t v11 = v8 + 192 * v9;
        do
        {
          uint64_t v12 = v8 + v10;
          uint64_t v13 = &v7[v10 / 8];
          v13[4] = 0;
          v13[1] = 0;
          uint64_t v13[2] = 0;
          *uint64_t v13 = 0;
          *((_DWORD *)v13 + 6) = 0;
          uint64_t v14 = *(void *)(v8 + v10 + 8);
          *uint64_t v13 = *(void *)(v8 + v10);
          v13[1] = v14;
          *(void *)uint64_t v12 = 0;
          *(void *)(v12 + 8) = 0;
          uint64_t v15 = v7[v10 / 8 + 2];
          uint64_t v13[2] = *(void *)(v8 + v10 + 16);
          *(void *)(v12 + 16) = v15;
          uint64_t v16 = v7[v10 / 8 + 4];
          v13[4] = *(void *)(v8 + v10 + 32);
          *(void *)(v12 + 32) = v16;
          *(_DWORD *)(v12 + 24) = *(_DWORD *)(v8 + v10 + 24) + 1;
          LODWORD(v16) = LODWORD(v7[v10 / 8 + 3]) + 1;
          *(_OWORD *)(v13 + 5) = 0u;
          *(_OWORD *)(v13 + 7) = 0u;
          uint64_t v17 = *(void *)(v8 + v10 + 40);
          *((_DWORD *)v13 + 6) = v16;
          v13[5] = v17;
          *(void *)(v8 + v10 + 40) = 0;
          v13[8] = *(void *)(v8 + v10 + 64);
          *(void *)(v12 + 64) = 0;
          uint64_t v19 = v7[v10 / 8 + 6];
          uint64_t v18 = v7[v10 / 8 + 7];
          uint64_t v20 = *(void *)(v8 + v10 + 56);
          v13[6] = *(void *)(v8 + v10 + 48);
          v13[7] = v20;
          *(void *)(v12 + 48) = v19;
          *(void *)(v12 + 56) = v18;
          long long v21 = *(_OWORD *)(v8 + v10 + 96);
          *((_OWORD *)v13 + 5) = *(_OWORD *)(v8 + v10 + 80);
          *((_OWORD *)v13 + 6) = v21;
          v13[18] = 0;
          *((_DWORD *)v13 + 34) = 0;
          v13[15] = 0;
          v13[16] = 0;
          v13[14] = 0;
          uint64_t v22 = *(void *)(v8 + v10 + 120);
          v13[14] = *(void *)(v8 + v10 + 112);
          *(void *)(v8 + v10 + 112) = 0;
          v13[15] = v22;
          *(void *)(v12 + 120) = 0;
          uint64_t v23 = v7[v10 / 8 + 16];
          v13[16] = *(void *)(v8 + v10 + 128);
          *(void *)(v12 + 128) = v23;
          uint64_t v24 = v7[v10 / 8 + 18];
          v13[18] = *(void *)(v8 + v10 + 144);
          *(void *)(v12 + 144) = v24;
          *(_DWORD *)(v12 + 136) = *(_DWORD *)(v8 + v10 + 136) + 1;
          *((_DWORD *)v13 + 34) = LODWORD(v7[v10 / 8 + 17]) + 1;
          v13[23] = 0;
          v13[20] = 0;
          v13[21] = 0;
          v13[19] = 0;
          *((_DWORD *)v13 + 44) = 0;
          unint64_t v25 = (void *)(v8 + v10 + 152);
          uint64_t v26 = *(void *)(v8 + v10 + 160);
          v13[19] = *v25;
          *unint64_t v25 = 0;
          v13[20] = v26;
          *(void *)(v12 + 160) = 0;
          uint64_t v27 = v7[v10 / 8 + 21];
          v13[21] = *(void *)(v8 + v10 + 168);
          *(void *)(v12 + 168) = v27;
          uint64_t v28 = v7[v10 / 8 + 23];
          v13[23] = *(void *)(v8 + v10 + 184);
          *(void *)(v12 + 184) = v28;
          *(_DWORD *)(v12 + 176) = *(_DWORD *)(v8 + v10 + 176) + 1;
          *((_DWORD *)v13 + 44) = LODWORD(v7[v10 / 8 + 22]) + 1;
          re::DynamicArray<re::MeshAssetBlendShapeData>::deinit((uint64_t)v25);
          re::DynamicArray<unsigned long>::deinit(v8 + v10 + 112);
          re::DynamicString::deinit((re::DynamicString *)(v8 + v10 + 40));
          re::DynamicArray<re::DynamicArray<unsigned char>>::deinit(v8 + v10);
          v10 += 192;
        }
        while (v12 + 192 != v11);
        uint64_t v8 = v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::DynamicArray<re::MeshResourceDefinition::Part>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::MeshResourceDefinition::Part>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x90uLL))
        {
          uint64_t v2 = 144 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 144 * a2, 16);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_22;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 144, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_22:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        unint64_t v10 = 0;
        uint64_t v11 = v8 + 144 * v9;
        do
        {
          uint64_t v12 = v8 + v10;
          uint64_t v13 = &v7[v10 / 8];
          v13[4] = 0;
          v13[1] = 0;
          uint64_t v13[2] = 0;
          *uint64_t v13 = 0;
          *((_DWORD *)v13 + 6) = 0;
          uint64_t v14 = *(void *)(v8 + v10 + 8);
          *uint64_t v13 = *(void *)(v8 + v10);
          v13[1] = v14;
          *(void *)uint64_t v12 = 0;
          *(void *)(v12 + 8) = 0;
          uint64_t v15 = v7[v10 / 8 + 2];
          uint64_t v13[2] = *(void *)(v8 + v10 + 16);
          *(void *)(v12 + 16) = v15;
          uint64_t v16 = v7[v10 / 8 + 4];
          v13[4] = *(void *)(v8 + v10 + 32);
          *(void *)(v12 + 32) = v16;
          *(_DWORD *)(v12 + 24) = *(_DWORD *)(v8 + v10 + 24) + 1;
          *((_DWORD *)v13 + 6) = LODWORD(v7[v10 / 8 + 3]) + 1;
          *(_OWORD *)(v13 + 5) = 0u;
          *(_OWORD *)(v13 + 7) = 0u;
          v13[8] = *(void *)(v8 + v10 + 64);
          uint64_t v17 = *(void *)(v8 + v10 + 48);
          v13[5] = *(void *)(v8 + v10 + 40);
          *(void *)(v12 + 40) = 0;
          uint64_t v18 = *(void *)(v8 + v10 + 56);
          *(void *)(v12 + 64) = 0;
          uint64_t v20 = v7[v10 / 8 + 6];
          uint64_t v19 = v7[v10 / 8 + 7];
          v13[6] = v17;
          v13[7] = v18;
          *(void *)(v12 + 48) = v20;
          *(void *)(v12 + 56) = v19;
          long long v21 = *(_OWORD *)(v8 + v10 + 96);
          *((_OWORD *)v13 + 5) = *(_OWORD *)(v8 + v10 + 80);
          *((_OWORD *)v13 + 6) = v21;
          LODWORD(v18) = *(unsigned __int8 *)(v8 + v10 + 112);
          *((unsigned char *)v13 + 112) = v18;
          if (v18) {
            *((unsigned char *)v13 + 113) = *(unsigned char *)(v12 + 113);
          }
          int v22 = *(unsigned __int8 *)(v12 + 114);
          *((unsigned char *)v13 + 114) = v22;
          if (v22) {
            BYTE3(v7[v10 / 8 + 14]) = *(unsigned char *)(v8 + v10 + 115);
          }
          uint64_t v23 = &v7[v10 / 8];
          int v24 = *(unsigned __int8 *)(v12 + 116);
          BYTE4(v7[v10 / 8 + 14]) = v24;
          if (v24) {
            *((unsigned char *)v23 + 117) = *(unsigned char *)(v8 + v10 + 117);
          }
          *(_OWORD *)(v23 + 15) = *(_OWORD *)(v12 + 120);
          re::DynamicString::deinit((re::DynamicString *)(v12 + 40));
          re::DynamicArray<unsigned long>::deinit(v8 + v10);
          v10 += 144;
        }
        while (v12 + 144 != v11);
        uint64_t v8 = v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_22;
    }
  }
  return result;
}

void *re::DynamicArray<re::MeshResourceDefinition::Instance>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::MeshResourceDefinition::Instance>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 57)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 128, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          unint64_t v2 = a2 << 7;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, a2 << 7, 16);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + (v9 << 7);
        uint64_t v11 = v7;
        do
        {
          *(_OWORD *)uint64_t v11 = 0u;
          *((_OWORD *)v11 + 1) = 0u;
          void v11[3] = *(void *)(v8 + 24);
          uint64_t v12 = *(void *)(v8 + 8);
          *uint64_t v11 = *(void *)v8;
          *(void *)uint64_t v8 = 0;
          uint64_t v13 = *(void *)(v8 + 16);
          *(void *)(v8 + 24) = 0;
          uint64_t v15 = v11[1];
          uint64_t v14 = v11[2];
          v11[1] = v12;
          _OWORD v11[2] = v13;
          *(void *)(v8 + 8) = v15;
          *(void *)(v8 + 16) = v14;
          long long v16 = *(_OWORD *)(v8 + 64);
          long long v17 = *(_OWORD *)(v8 + 80);
          long long v18 = *(_OWORD *)(v8 + 96);
          v11[14] = *(void *)(v8 + 112);
          *((_OWORD *)v11 + 5) = v17;
          *((_OWORD *)v11 + 6) = v18;
          *((_OWORD *)v11 + 4) = v16;
          long long v19 = *(_OWORD *)(v8 + 48);
          *((_OWORD *)v11 + 2) = *(_OWORD *)(v8 + 32);
          *((_OWORD *)v11 + 3) = v19;
          re::DynamicString::deinit((re::DynamicString *)v8);
          v8 += 128;
          v11 += 16;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::MeshResourceDefinition::Instance>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(re::DynamicString **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = v4 << 7;
        do
        {
          re::DynamicString::deinit(v3);
          uint64_t v3 = (re::DynamicString *)((char *)v3 + 128);
          v5 -= 128;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(re::DynamicString **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, re::DynamicString *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::MeshResourceDefinition::Model>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 192 * v4;
        do
        {
          re::DynamicArray<re::MeshAssetBlendShapeData>::deinit(v3 + 152);
          re::DynamicArray<unsigned long>::deinit(v3 + 112);
          re::DynamicString::deinit((re::DynamicString *)(v3 + 40));
          re::DynamicArray<re::DynamicArray<unsigned char>>::deinit(v3);
          v3 += 192;
          v5 -= 192;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::MeshResourceDefinition::Part>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 144 * v4;
        do
        {
          re::DynamicString::deinit((re::DynamicString *)(v3 + 40));
          re::DynamicArray<unsigned long>::deinit(v3);
          v3 += 144;
          v5 -= 144;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::getOrCreateComputePipelineState(uint64_t a1, uint64_t a2)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)a2) {
    unint64_t v4 = re::Hash<re::DynamicString>::operator()((uint64_t)info, a2 + 8);
  }
  else {
    unint64_t v4 = 0;
  }
  unint64_t v5 = re::Hash<re::DynamicString>::operator()((uint64_t)info, a2 + 40);
  unint64_t v6 = re::TechniqueDefinitionBuilder::hashFunctionConstants(*(void *)(a2 + 104), *(void *)(a2 + 88), 1);
  if (*(unsigned char *)(a2 + 112)) {
    unsigned __int8 v7 = *(unsigned char *)(a2 + 113);
  }
  else {
    unsigned __int8 v7 = 0;
  }
  if (*(unsigned char *)(a2 + 114)) {
    unsigned __int8 v8 = *(unsigned char *)(a2 + 115);
  }
  else {
    unsigned __int8 v8 = 0;
  }
  unint64_t v9 = ((((unint64_t)v8 << 6) | 0x9E3779B97F4A7C17)
      + (((((v6 << 6)
          + (v6 >> 2)
          + (((v5 << 6) + (v5 >> 2) + (((v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9) ^ v4) - 0x61C8864680B583E9) ^ v5)
          - 0x61C8864680B583E9) ^ v6)
        + ((unint64_t)v7 << 6)
        - 0x61C8864680B583E9) ^ v7)) ^ v8;
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = (void *)(v10 + 48);
  if (*(void *)(v10 + 48))
  {
    uint64_t v12 = *(unsigned int *)(*(void *)(v10 + 56) + 4 * (v9 % *(unsigned int *)(v10 + 72)));
    if (v12 != 0x7FFFFFFF)
    {
      uint64_t v15 = *(void *)(v10 + 64);
      if (*(void *)(v15 + 24 * v12 + 8) == v9) {
        return v15 + 24 * v12 + 16;
      }
      while (1)
      {
        LODWORD(v12) = *(_DWORD *)(v15 + 24 * v12) & 0x7FFFFFFF;
        if (v12 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v15 + 24 * v12 + 8) == v9) {
          return v15 + 24 * v12 + 16;
        }
      }
    }
  }
  if (!*(unsigned char *)(a2 + 128))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF960D8, memory_order_acquire) & 1) == 0)
    {
      uint64_t v66 = (re::AppleBuild *)__cxa_guard_acquire(&qword_26AF960D8);
      if (v66)
      {
        _MergedGlobals_399 = *re::AppleBuild::get(v66) == 1;
        __cxa_guard_release(&qword_26AF960D8);
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF960E0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF960E0))
    {
      re::Defaults::BOOLValue((re::Defaults *)"shouldCrashOnRuntimeCompilation", v67, info);
      if (info[0]) {
        uint64_t v68 = &info[1];
      }
      else {
        uint64_t v68 = &_MergedGlobals_399;
      }
      byte_26AF960D1 = *v68;
      __cxa_guard_release(&qword_26AF960E0);
    }
  }
  uint64_t v13 = mach_absolute_time();
  if (*(void *)(a2 + 120))
  {
    uint64_t v14 = *(void *)(a1 + 56) + 264;
    *(void *)info = *(void *)(a2 + 120);
  }
  else
  {
    uint64_t v17 = *(void *)(a1 + 56);
    if (!*(unsigned char *)a2)
    {
      uint64_t v20 = (id *)(v17 + 248);
      goto LABEL_29;
    }
    if (*(void *)(a2 + 16)) {
      long long v18 = *(const char **)(a2 + 24);
    }
    else {
      long long v18 = (const char *)(a2 + 17);
    }
    *(void *)info = re::ShaderManager::getLibraryHash(*(re::ShaderManager **)(a1 + 56), v18);
    uint64_t v14 = v17 + 264;
  }
  uint64_t v19 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v14, (uint64_t *)info);
  if (v19) {
    uint64_t v20 = (id *)(v19 + 8);
  }
  else {
    uint64_t v20 = 0;
  }
LABEL_29:
  id v75 = objc_msgSend(objc_msgSend(MEMORY[0x263F128B0], sel_alloc), sel_init);
  uint64_t v21 = *(void *)(a2 + 88);
  if (v21)
  {
    uint64_t v22 = v21 << 6;
    uint64_t v23 = (unsigned __int16 *)(*(void *)(a2 + 104) + 32);
    do
    {
      objc_msgSend(v75, sel_setConstantValue_type_atIndex_, *((void *)v23 + 3), *v23, v23[1]);
      v23 += 32;
      v22 -= 64;
    }
    while (v22);
  }
  int v24 = *(re::ShaderManager **)(a1 + 56);
  if (*(unsigned char *)a2)
  {
    if (*(void *)(a2 + 16)) {
      unint64_t v25 = *(const char **)(a2 + 24);
    }
    else {
      unint64_t v25 = (const char *)(a2 + 17);
    }
    unint64_t LibraryHash = re::ShaderManager::getLibraryHash(v24, v25);
    int v24 = *(re::ShaderManager **)(a1 + 56);
  }
  else
  {
    unint64_t LibraryHash = *((void *)v24 + 32);
  }
  if (*(void *)(a2 + 120)) {
    uint64_t v27 = *(void *)(a2 + 120);
  }
  else {
    uint64_t v27 = LibraryHash;
  }
  if (*(void *)(a2 + 48)) {
    uint64_t v28 = *(void *)(a2 + 56);
  }
  else {
    uint64_t v28 = a2 + 49;
  }
  re::ShaderManager::makeFunctionDescriptor((uint64_t)v24, v28, &v75, v20, v27, &v74);
  re::mtl::Library::makeFunctionWithDescriptor(v20, v74, &v73);
  re::ShaderManager::makeComputePipelineDescriptor(*(re::ShaderManager **)(a1 + 56), &v72);
  if (*(unsigned char *)(a2 + 114)) {
    objc_msgSend(v72, sel_setSupportAddingBinaryFunctions_, *(unsigned __int8 *)(a2 + 115));
  }
  objc_msgSend(v72, sel_setComputeFunction_, v73);
  if (*(unsigned char *)(a2 + 112)) {
    objc_msgSend(v72, sel_setThreadGroupSizeIsMultipleOfThreadExecutionWidth_, *(unsigned __int8 *)(a2 + 113));
  }
  uint64_t v29 = (re::mtl::Device *)(a1 + 184);
  re::mtl::Device::makeComputePipelineState((id *)(a1 + 184), &v72, info);
  uint64_t v30 = *(void **)info;
  if (!*(void *)info) {

  }
  uint64_t v31 = mach_absolute_time();
  uint64_t v32 = v31;
  double v33 = *(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale;
  if (*(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale < 0.0)
  {
    uint64_t v31 = mach_timebase_info((mach_timebase_info_t)info);
    if (v31)
    {
      double v36 = NAN;
      goto LABEL_55;
    }
    LODWORD(v34) = *(_DWORD *)info;
    LODWORD(v35) = *(_DWORD *)&info[4];
    double v33 = (double)v34 / (double)v35;
    re::convertMachTimeToNanoSecs(unsigned long long)::tmscale = *(void *)&v33;
  }
  double v36 = v33 * (double)(v32 - v13);
LABEL_55:
  int v37 = (int)(v36 / 1000000.0);
  unint64_t v38 = *re::graphicsLogObjects((re *)v31);
  unsigned int v39 = (_anonymous_namespace_ *)os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
  if (v39)
  {
    if (*(void *)(a2 + 48)) {
      uint64_t v40 = *(void *)(a2 + 56);
    }
    else {
      uint64_t v40 = a2 + 49;
    }
    *(_DWORD *)info = 136446466;
    *(void *)&info[4] = v40;
    *(_WORD *)&info[12] = 1024;
    *(_DWORD *)&info[14] = v37;
    _os_log_impl(&dword_233120000, v38, OS_LOG_TYPE_DEFAULT, "PSO compilation completed for compute pipeline %{public}s in %d", info, 0x12u);
  }
  if (!*v11)
  {
    LODWORD(v41) = 0;
    goto LABEL_67;
  }
  unint64_t v41 = v9 % *(unsigned int *)(v10 + 72);
  uint64_t v42 = *(unsigned int *)(*(void *)(v10 + 56) + 4 * v41);
  if (v42 == 0x7FFFFFFF)
  {
LABEL_67:
    uint64_t v45 = *(unsigned int *)(v10 + 84);
    if (v45 == 0x7FFFFFFF)
    {
      uint64_t v45 = *(unsigned int *)(v10 + 80);
      int v46 = v45;
      if (v45 == *(_DWORD *)(v10 + 72))
      {
        re::HashTable<unsigned long,re::CachedTileRenderPipelineState,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v11, 2 * *(_DWORD *)(v10 + 76));
        LODWORD(v41) = v9 % *(unsigned int *)(v10 + 72);
        int v46 = *(_DWORD *)(v10 + 80);
      }
      *(_DWORD *)(v10 + 80) = v46 + 1;
      uint64_t v47 = *(void *)(v10 + 64);
      int v48 = *(_DWORD *)(v47 + 24 * v45);
    }
    else
    {
      uint64_t v47 = *(void *)(v10 + 64);
      int v48 = *(_DWORD *)(v47 + 24 * v45);
      *(_DWORD *)(v10 + 84) = v48 & 0x7FFFFFFF;
    }
    uint64_t v49 = 24 * v45;
    *(_DWORD *)(v47 + v49) = v48 | 0x80000000;
    *(_DWORD *)(*(void *)(v10 + 64) + v49) = *(_DWORD *)(*(void *)(v10 + 64) + 24 * v45) & 0x80000000 | *(_DWORD *)(*(void *)(v10 + 56) + 4 * v41);
    *(void *)(*(void *)(v10 + 64) + 24 * v45 + 8) = v9;
    uint64_t v50 = *(void *)(v10 + 64) + 24 * v45;
    unsigned int v39 = v30;
    *(void *)(v50 + 16) = v39;
    *(_DWORD *)(*(void *)(v10 + 56) + 4 * v41) = v45;
    ++*(_DWORD *)(v10 + 76);
    ++*(_DWORD *)(v10 + 88);
    uint64_t v44 = *(void *)(v10 + 64) + 24 * v45;
    goto LABEL_73;
  }
  uint64_t v43 = *(void *)(v10 + 64);
  while (*(void *)(v43 + 24 * v42 + 8) != v9)
  {
    LODWORD(v42) = *(_DWORD *)(v43 + 24 * v42) & 0x7FFFFFFF;
    if (v42 == 0x7FFFFFFF) {
      goto LABEL_67;
    }
  }
  uint64_t v44 = v43 + 24 * v42;
LABEL_73:
  uint64_t v16 = v44 + 16;
  if (v37 >= 11)
  {
    uint64_t v81 = 0;
    *(_OWORD *)&info[8] = 0uLL;
    re::DynamicString::setCapacity(info, 0x80uLL);
    uint64_t v51 = *(void *)(a2 + 88);
    if (v51)
    {
      uint64_t v52 = *(void *)(a2 + 104);
      uint64_t v53 = v51 << 6;
      do
      {
        if (*(unsigned char *)(v52 + 8)) {
          uint64_t v54 = *(const char **)(v52 + 16);
        }
        else {
          uint64_t v54 = (const char *)(v52 + 9);
        }
        uint64_t As64Bits = re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v52);
        re::DynamicString::appendf((re::DynamicString *)info, "%s=%llu ", v54, As64Bits);
        v52 += 64;
        v53 -= 64;
      }
      while (v53);
    }
    if (*(void *)(a2 + 48)) {
      uint64_t v56 = *(void *)(a2 + 56);
    }
    else {
      uint64_t v56 = a2 + 49;
    }
    if (*(unsigned char *)(a2 + 112)) {
      unsigned __int8 v57 = *(unsigned char *)(a2 + 113);
    }
    else {
      unsigned __int8 v57 = 0;
    }
    if (*(unsigned char *)(a2 + 114)) {
      unsigned __int8 v58 = *(unsigned char *)(a2 + 115);
    }
    else {
      unsigned __int8 v58 = 0;
    }
    if (info[8]) {
      uint64_t v59 = *(unsigned char **)&info[16];
    }
    else {
      uint64_t v59 = &info[9];
    }
    re::DynamicString::format((re::DynamicString *)"name=%s tgsimotew=%d sabf=%d fc=%s", (re::DynamicString *)&v69, v56, v57, v58, v59);
    isFrameCaptureEnabled = (re *)re::mtl::Device::isFrameCaptureEnabled(v29);
    int v61 = (int)isFrameCaptureEnabled;
    uint64_t v62 = *re::graphicsLogObjects(isFrameCaptureEnabled);
    if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
    {
      int v63 = *(unsigned char **)&v71[7];
      unsigned int v64 = "";
      if ((v70 & 1) == 0) {
        int v63 = v71;
      }
      if (v61) {
        unsigned int v64 = "(frame capture enabled)";
      }
      *(_DWORD *)__n128 buf = 136446466;
      unint64_t v77 = v63;
      __int16 v78 = 2080;
      long long v79 = v64;
      _os_log_impl(&dword_233120000, v62, OS_LOG_TYPE_DEFAULT, "Compiling PSO RT %{public}s %s", buf, 0x16u);
    }
    if (v69 && (v70 & 1) != 0) {
      (*(void (**)(void))(*(void *)v69 + 40))();
    }
    if (*(void *)info && (info[8] & 1) != 0) {
      (*(void (**)(void))(**(void **)info + 40))();
    }
  }
  if (v30) {

  }
  if (v72) {
  if (v73)
  }

  if (v74) {
  if (v75)
  }

  return v16;
}

uint64_t re::MeshPart::MeshPart(uint64_t a1, uint64_t *a2, __int16 a3, uint64_t a4, unint64_t a5, int a6, int a7, int a8, _OWORD *a9, uint64_t a10, long long *a11, re::MeshPartFlags *a12, int a13, int a14)
{
  uint64_t v16 = a1;
  uint64_t v176 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 184) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 208) = 1;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_DWORD *)(a1 + 312) = 0;
  uint64_t v17 = (void *)(a1 + 336);
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 368) = xmmword_23435FD50;
  *(_OWORD *)(a1 + 384) = xmmword_23435FD60;
  *(_OWORD *)(a1 + 400) = xmmword_23435FD80;
  *(_OWORD *)(a1 + 416) = xmmword_23435FBB0;
  *(void *)&long long v18 = 0x7F0000007FLL;
  *((void *)&v18 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(a1 + 432) = vdupq_n_s32(0x7F800000u);
  *(_OWORD *)(a1 + 448) = v18;
  *(_WORD *)(a1 + 474) = 0;
  *(unsigned char *)(a1 + 472) = 0;
  *(void *)(a1 + 464) = 0;
  *(unsigned char *)(a1 + 476) = -1;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = "";
  *(void *)(a1 + 528) = 0;
  *(unsigned char *)(a1 + 536) = 3;
  *(void *)(a1 + 540) = 0x180197E00000001;
  int v83 = 0;
  long long v81 = 0u;
  long long v82 = 0u;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  uint64_t v84 = 0;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  int v80 = 0;
  int v87 = 1;
  uint64_t v89 = 0;
  uint64_t v90 = 0;
  uint64_t v88 = 0;
  int v91 = 0;
  uint64_t v92 = 0;
  uint64_t v93 = 0;
  int v95 = 0;
  uint64_t v94 = 0;
  uint64_t v99 = 0;
  unsigned int v100 = 0;
  long long v96 = 0u;
  long long v97 = 0u;
  int v98 = 0;
  char v101 = 0;
  uint64_t v72 = 0;
  uint64_t v19 = (_anonymous_namespace_ *)re::BufferTable::deinit((re::BufferTable *)((char *)&v74 + 8));
  char v71 = (re::MeshPartFlags *)a5;
  if (a5)
  {
    unint64_t v21 = 0;
    unsigned __int8 v22 = 0;
    uint64_t v70 = v16;
    do
    {
      unint64_t v23 = a4 + (v21 << 6);
      unint64_t v24 = *(void *)(v23 + 8);
      if (v24)
      {
        uint64_t v26 = *(unsigned char **)(v23 + 16);
        if (!v26)
        {
          uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_14;
        }
        LOBYTE(v25) = *v26;
      }
      else
      {
        uint64_t v25 = v24 >> 8;
        uint64_t v26 = (unsigned char *)(v23 + 9);
      }
      if ((_BYTE)v25)
      {
        uint64_t v25 = (char)v25;
        char v27 = v26[1];
        if (v27)
        {
          uint64_t v28 = v26 + 2;
          do
          {
            uint64_t v25 = 31 * v25 + v27;
            int v29 = *v28++;
            char v27 = v29;
          }
          while (v29);
        }
        uint64_t v30 = v25 & 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v30 = 0;
      }
LABEL_14:
      *(void *)&long long v103 = v30;
      LOBYTE(v175[0]) = v22;
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::addNew((_anonymous_namespace_ *)((char *)&v74 + 8), &v103, (char *)v175);
      if (v100 <= v22) {
        unsigned int v100 = v22 + 1;
      }
      uint64_t v31 = a4;
      uint64_t v32 = a4 + (v21 << 6);
      double v33 = (_anonymous_namespace_ *)re::BufferTable::setBuffer((uint64_t)&v74 + 8, v22, v32 + 40);
      unsigned int v35 = *(unsigned __int8 *)(v32 + 32);
      int v36 = *(unsigned __int8 *)(v32 + 33);
      __int16 v37 = *(unsigned char *)(v32 + 33) != 0;
      uint64_t v40 = v32 + 56;
      int v39 = *(_DWORD *)(v32 + 56);
      int v38 = *(_DWORD *)(v40 + 4);
      if (v38 == -1)
      {
        double v33 = (_anonymous_namespace_ *)re::sizeFromVertexFormat(v35, v34);
        LOWORD(v38) = ((_WORD)v33 + 3) & 0x1FC;
        if (!v36) {
          LOWORD(v38) = (_WORD)v33;
        }
      }
      unint64_t v41 = (unsigned __int8 *)*((void *)&v73 + 1);
      if (*((void *)&v73 + 1) <= v21) {
        goto LABEL_45;
      }
      uint64_t v42 = v74 + 16 * v21;
      *(_WORD *)uint64_t v42 = v38;
      *(_WORD *)(v42 + 2) = v37;
      *(unsigned char *)(v42 + 4) = 1;
      *(unsigned char *)(v42 + 5) = v36;
      *(_DWORD *)(v42 + 8) = v39;
      *(unsigned char *)(v42 + 12) = v35;
      if (*(unsigned char *)(v23 + 8)) {
        uint64_t v43 = *(const char **)(v23 + 16);
      }
      else {
        uint64_t v43 = (const char *)(v23 + 9);
      }
      a4 = v31;
      *(void *)float32x4_t v170 = 0;
      *(void *)&v170[8] = "";
      uint64_t v16 = v70;
      unint64_t v23 = *(void *)(v70 + 344);
      if (v23 <= v21) {
        goto LABEL_46;
      }
      uint64_t v44 = (void *)(*(void *)(v70 + 352) + 16 * v21);
      uint64_t v45 = *(void *)v170;
      uint64_t v46 = *(void *)&v170[8];
      *(void *)float32x4_t v170 = 0;
      *(void *)&v170[8] = "";
      uint64_t v47 = v44[1];
      unint64_t v48 = v45 & 0xFFFFFFFFFFFFFFFELL | *v44 & 1;
      v44[1] = v46;
      *(void *)&long long v103 = v48;
      *((void *)&v103 + 1) = v47;
      *uint64_t v44 = v45;
      re::StringID::destroyString((re::StringID *)&v103);
      re::StringID::destroyString((re::StringID *)v170);
      unint64_t v21 = ++v22;
    }
    while ((unint64_t)v71 > v22);
  }
  unint64_t v21 = 0;
  uint64_t v49 = (unsigned __int8 *)(v16 + 476);
  LOBYTE(v103) = 0;
  *((void *)&v103 + 1) = 0x5353CF4AA93DFAB9;
  *(void *)&long long v104 = "indexTriangles";
  BYTE8(v104) = 1;
  *(void *)&long long v105 = 0x2B3FAC222C23CAEDLL;
  *((void *)&v105 + 1) = "vertexPosition";
  LOBYTE(v106) = 2;
  *((void *)&v106 + 1) = 0x2ACCEB6695018FABLL;
  *(void *)&long long v107 = "vertexNormal";
  BYTE8(v107) = 3;
  uint64_t v108 = 0x2ED0816D3076E801;
  float32x4_t v109 = "vertexTangent";
  char v110 = 4;
  uint64_t v111 = 0x3CB5CD20F43A4EDALL;
  unint64_t v112 = "vertexBitangent";
  char v113 = 5;
  uint64_t v114 = 0x17D0D13783;
  uint64_t v115 = "patchId";
  char v116 = 6;
  uint64_t v117 = 0x70C8BB7245F8AB8ALL;
  uint64_t v118 = "controlIndices";
  char v119 = 7;
  uint64_t v120 = 0x535464BC4EA1E0C3;
  uint64_t v121 = "tessellationFactors";
  char v122 = 11;
  uint64_t v123 = 0x51F9ECFD55626B9FLL;
  int v124 = "stencilWeights";
  char v125 = 9;
  uint64_t v126 = 0x29E88D2A9E60D836;
  unint64_t v127 = "stencilSizes";
  char v128 = 10;
  uint64_t v129 = 0x51F9ECFBAFC08CE4;
  uint64_t v130 = "stencilOffsets";
  char v131 = 12;
  uint64_t v132 = 0x51F9ECFA7FE12A4BLL;
  id v133 = "stencilIndices";
  char v134 = 8;
  uint64_t v135 = 0x14F9B341A90AFEELL;
  unint64_t v136 = "patchParams";
  char v137 = 13;
  uint64_t v138 = 0x3CE8D825115C062ELL;
  unint64_t v139 = "bspline_and_patch_points";
  char v140 = 14;
  uint64_t v141 = 0x5DDE4F761BC41E2;
  char v142 = "tessellationHi";
  char v143 = 15;
  uint64_t v144 = 0x5DDE4F761BC4264;
  uint64_t v145 = "tessellationLo";
  char v146 = 16;
  uint64_t v147 = 80;
  uint64_t v148 = "P";
  char v149 = 17;
  uint64_t v150 = 2529;
  long long v151 = "P1";
  char v152 = 18;
  uint64_t v153 = 2530;
  unint64_t v154 = "P2";
  char v155 = 19;
  uint64_t v156 = 0x51A5C348207ED4AELL;
  unint64_t v157 = "simplifiedVertexPositions";
  char v158 = 20;
  uint64_t v159 = 0x4E47373A437E60EELL;
  uint64_t v160 = "simplifiedFaceVertices";
  char v161 = 21;
  uint64_t v162 = 0x3F885CFB6A669EDBLL;
  int32x4_t v163 = "simplifiedAnimationSkinningInfluences";
  char v164 = 22;
  uint64_t v165 = 0xF742AA0C4B59C75;
  uint64_t v166 = "simplifiedAnimationInfluenceEndIndices";
  char v167 = 23;
  uint64_t v168 = 0x18AAF04852;
  unint64_t v23 = (unint64_t)&v103;
  uint64_t v169 = "tension";
  do
  {
    unint64_t v41 = (unsigned __int8 *)&v103 + v21;
    *(void *)&v175[0] = *(void *)((unsigned char *)&v103 + v21 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v50 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)&v74 + 1, v175);
    if (v50 == -1) {
      char v52 = -1;
    }
    else {
      char v52 = *(unsigned char *)(v75 + 16 * v50 + 8);
    }
    unint64_t v53 = *v41;
    if (v53 >= 0x18)
    {
      re::internal::assertLog((re::internal *)6, v51, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, *v41, 24);
      _os_crash();
      __break(1u);
LABEL_45:
      *(void *)float32x4_t v170 = 0;
      long long v106 = 0u;
      long long v107 = 0u;
      long long v104 = 0u;
      long long v105 = 0u;
      long long v103 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v175[0]) = 136315906;
      *(void *)((char *)v175 + 4) = "operator[]";
      WORD6(v175[0]) = 1024;
      *(_DWORD *)((char *)v175 + 14) = 468;
      WORD1(v175[1]) = 2048;
      *(void *)((char *)&v175[1] + 4) = v21;
      WORD6(v175[1]) = 2048;
      *(void *)((char *)&v175[1] + 14) = v41;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_46:
      uint64_t v102 = 0;
      long long v106 = 0u;
      long long v107 = 0u;
      long long v104 = 0u;
      long long v105 = 0u;
      long long v103 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v175[0]) = 136315906;
      *(void *)((char *)v175 + 4) = "operator[]";
      WORD6(v175[0]) = 1024;
      *(_DWORD *)((char *)v175 + 14) = 468;
      WORD1(v175[1]) = 2048;
      *(void *)((char *)&v175[1] + 4) = v21;
      WORD6(v175[1]) = 2048;
      *(void *)((char *)&v175[1] + 14) = v23;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_47;
    }
    v49[v53] = v52;
    v21 += 24;
  }
  while (v21 != 576);
  *(void *)&v175[0] = 0x5353CF4AA93DFAB9;
  uint64_t v54 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)&v74 + 1, v175);
  re::AttributeTableBuilder::makeAttributeTableAndReset((re::AttributeTableBuilder *)&v72, (re::AttributeTable *)v16);
  if (v54 != -1)
  {
    uint64_t v55 = v16;
    do
    {
      uint64_t v56 = v55;
      uint64_t v55 = *(void *)(v55 + 8);
      unint64_t v21 = *(void *)(v56 + 32);
      if (v55) {
        BOOL v57 = v21 == 0;
      }
      else {
        BOOL v57 = 0;
      }
    }
    while (v57);
    unint64_t v23 = *v49;
    if (v21 > v23)
    {
      BOOL v58 = *(unsigned char *)(*(void *)(v56 + 40) + 16 * v23 + 12) == 36;
      *(_DWORD *)(v16 + 464) = a6;
      *(unsigned char *)(v16 + 472) = v58;
      goto LABEL_40;
    }
LABEL_47:
    uint64_t v102 = 0;
    memset(v175, 0, sizeof(v175));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)float32x4_t v170 = 136315906;
    *(void *)&v170[4] = "operator[]";
    *(_WORD *)&v170[12] = 1024;
    *(_DWORD *)&v170[14] = 476;
    __int16 v171 = 2048;
    unint64_t v172 = v23;
    __int16 v173 = 2048;
    unint64_t v174 = v21;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(_DWORD *)(v16 + 464) = 0;
LABEL_40:
  *(_DWORD *)(v16 + 468) = a7;
  re::StringID::operator=((unint64_t *)(v16 + 504), a2);
  *(void *)(v16 + 520) = a10;
  *(_WORD *)(v16 + 474) = a3;
  *(_DWORD *)(v16 + 532) = a14;
  if (a13 == -1) {
    int v59 = a7;
  }
  else {
    int v59 = a13;
  }
  *(_DWORD *)(v16 + 528) = v59;
  long long v60 = a9[1];
  *(_OWORD *)(v16 + 432) = *a9;
  *(_OWORD *)(v16 + 448) = v60;
  *(_DWORD *)(v16 + 544) = re::MeshPartFlags::flattenToRenderFlags(a12);
  *(_DWORD *)(v16 + 540) = a8;
  long long v61 = *a11;
  long long v62 = a11[1];
  long long v63 = a11[3];
  *(_OWORD *)(v16 + 400) = a11[2];
  *(_OWORD *)(v16 + 416) = v63;
  *(_OWORD *)(v16 + 368) = v61;
  *(_OWORD *)(v16 + 384) = v62;
  re::AttributeTableBuilder::~AttributeTableBuilder((re::AttributeTableBuilder *)&v72);
  return v16;
}

void re::MeshPart::~MeshPart(re::MeshPart *this)
{
  re::StringID::destroyString((re::MeshPart *)((char *)this + 504));
  re::FixedArray<re::StringID>::deinit((void *)this + 42);
  re::AttributeTable::~AttributeTable(this);
}

unint64_t re::MeshPart::computeTriangleCount(re::MeshPart *this)
{
  id v1 = this;
  uint64_t v54 = *MEMORY[0x263EF8340];
  int v2 = *((unsigned __int8 *)this + 536);
  if (v2 != 4)
  {
    if (v2 == 3) {
      return *((unsigned int *)this + 116) / 3uLL;
    }
    return 0;
  }
  unint64_t v4 = *((unsigned __int8 *)this + 476);
  if (v4 == 255) {
    return *((unsigned int *)this + 117) / 3uLL;
  }
  if (*((_DWORD *)this + 116) < 3u) {
    return 0;
  }
  re::AttributeTable::buffers(this);
  if (v5 <= v4) {
    return 0;
  }
  unint64_t v6 = v1;
  do
  {
    unint64_t v7 = *((void *)v6 + 4);
    unint64_t v6 = (re::MeshPart *)*((void *)v6 + 1);
    if (v6) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 0;
    }
  }
  while (v8);
  if (v7 <= v4) {
    return 0;
  }
  uint64_t v9 = re::AttributeTable::buffers(v1);
  if (v10 <= v4)
  {
    re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v4, v10);
    _os_crash();
    __break(1u);
    goto LABEL_77;
  }
  uint64_t v11 = v9 + 16 * v4;
  do
  {
    uint64_t v12 = v1;
    id v1 = (re::MeshPart *)*((void *)v1 + 1);
    unint64_t v13 = *((void *)v12 + 4);
    if (v1) {
      BOOL v14 = v13 == 0;
    }
    else {
      BOOL v14 = 0;
    }
  }
  while (v14);
  if (v13 <= v4)
  {
LABEL_77:
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v49 = 0u;
    unint64_t v43 = v13;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v44 = 136315906;
    *(void *)&v44[4] = "operator[]";
    *(_WORD *)&v44[12] = 1024;
    *(_DWORD *)&v44[14] = 476;
    __int16 v45 = 2048;
    unint64_t v46 = v4;
    __int16 v47 = 2048;
    unint64_t v48 = v43;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v15 = re::sizeFromVertexFormat(*(unsigned __int8 *)(*((void *)v12 + 5) + 16 * v4 + 12), v10);
  id v16 = *(id *)v11;
  uint64_t v17 = *(void *)(v11 + 8);
  if (*(void *)v11) {
    id v16 = v16;
  }
  *(void *)uint64_t v44 = v16;
  *(void *)&v44[8] = v17;
  re::ReadOnlyCPUAccessibleBufferSliceContent::make(v44, (uint64_t)&v49);
  uint64_t v18 = 2 * v15;
  unint64_t v19 = 0;
  unint64_t v20 = (unint64_t)v50 / v15 - 2;
  if ((unint64_t)v50 / v15 != 2)
  {
    uint64_t v21 = *((void *)&v49 + 1) + 1;
    unint64_t v22 = v15 - 1;
    uint64_t v23 = *((void *)&v49 + 1) + 1 + v18;
    do
    {
      if (v15)
      {
        if (*(unsigned char *)(*((void *)&v49 + 1) + v19) == 15)
        {
          unint64_t v24 = 0;
          while (v22 != v24)
          {
            int v25 = *(unsigned __int8 *)(v21 + v24++);
            if (v25 != 15)
            {
              if (v24 >= v15) {
                break;
              }
              goto LABEL_30;
            }
          }
        }
        else
        {
LABEL_30:
          if (*(unsigned char *)(*((void *)&v49 + 1) + v19 + v15) == 15)
          {
            unint64_t v26 = 0;
            while (v22 != v26)
            {
              int v27 = *(unsigned __int8 *)(v21 + v15 + v26++);
              if (v27 != 15)
              {
                if (v26 >= v15) {
                  break;
                }
                goto LABEL_35;
              }
            }
          }
          else
          {
LABEL_35:
            if (*(unsigned char *)(*((void *)&v49 + 1) + v19 + v18) != 15) {
              break;
            }
            unint64_t v28 = 0;
            while (v22 != v28)
            {
              int v29 = *(unsigned __int8 *)(v23 + v28++);
              if (v29 != 15)
              {
                if (v28 < v15) {
                  goto LABEL_41;
                }
                break;
              }
            }
          }
        }
      }
      v19 += v15;
      v21 += v15;
      v23 += v15;
    }
    while (v19 < v20);
  }
LABEL_41:
  if (v19 < v20)
  {
    uint64_t v3 = 0;
    uint64_t v30 = *((void *)&v49 + 1) + 1 + v18;
    unint64_t v31 = v15 - 1;
    while (1)
    {
      if (!v15) {
        goto LABEL_50;
      }
      if (*(unsigned char *)(*((void *)&v49 + 1) + v19 + v18) == 15) {
        break;
      }
LABEL_49:
      uint64_t v3 = (v3 + 1);
      v19 += v15;
LABEL_68:
      if (v19 >= v20) {
        goto LABEL_74;
      }
    }
    unint64_t v32 = 0;
    while (v31 != v32)
    {
      int v33 = *(unsigned __int8 *)(v30 + v19 + v32++);
      if (v33 != 15)
      {
        if (v32 >= v15) {
          break;
        }
        goto LABEL_49;
      }
    }
LABEL_50:
    unint64_t v34 = *((void *)&v49 + 1) + 1 + v19;
    unint64_t v35 = v30 + v19;
    do
    {
      if (v15)
      {
        if (*(unsigned char *)(*((void *)&v49 + 1) + v19) == 15)
        {
          unint64_t v36 = 0;
          while (v31 != v36)
          {
            int v37 = *(unsigned __int8 *)(v34 + v36++);
            if (v37 != 15)
            {
              if (v36 >= v15) {
                break;
              }
              goto LABEL_57;
            }
          }
        }
        else
        {
LABEL_57:
          if (*(unsigned char *)(*((void *)&v49 + 1) + v19 + v15) == 15)
          {
            unint64_t v38 = 0;
            while (v31 != v38)
            {
              int v39 = *(unsigned __int8 *)(v34 + v15 + v38++);
              if (v39 != 15)
              {
                if (v38 >= v15) {
                  break;
                }
                goto LABEL_62;
              }
            }
          }
          else
          {
LABEL_62:
            if (*(unsigned char *)(*((void *)&v49 + 1) + v19 + v18) != 15) {
              goto LABEL_68;
            }
            unint64_t v40 = 0;
            while (v31 != v40)
            {
              int v41 = *(unsigned __int8 *)(v35 + v40++);
              if (v41 != 15)
              {
                if (v40 < v15) {
                  goto LABEL_68;
                }
                break;
              }
            }
          }
        }
      }
      v19 += v15;
      v34 += v15;
      v35 += v15;
    }
    while (v19 < v20);
    goto LABEL_68;
  }
  uint64_t v3 = 0;
LABEL_74:
  re::Result<re::ReadOnlyCPUAccessibleBufferSliceContent,re::DetailedError>::~Result(&v49);
  if (*(void *)v44) {

  }
  return v3;
}

__n128 re::makeDrawCallHelper(__n128 *a1, __n128 *a2, uint64_t a3, unsigned __int32 a4, char a5)
{
  unint64_t v5 = a2[1].n128_u64[0];
  if (a2[11].n128_u8[0]) {
    a1[4].n128_u8[8] = a2[11].n128_u8[1] | a5;
  }
  a1[4].n128_u64[0] = a2[3].n128_u64[0];
  unsigned __int16 v6 = a1->n128_u16[0] & 0xFFFE | (*(unsigned __int8 *)(v5 + 476) != 255);
  a1->n128_u16[0] = v6;
  unsigned __int16 v7 = v6 & 0xFFF1 | (2 * (*(unsigned char *)(v5 + 536) & 7));
  a1->n128_u16[0] = v7;
  unsigned __int16 v8 = v7 & 0xFFBF | ((a2[11].n128_u16[2] & 1) << 6);
  a1->n128_u16[0] = v8;
  unsigned __int32 v9 = a2[11].n128_u32[1];
  if ((v9 & 0x800) != 0) {
    __int16 v10 = -1;
  }
  else {
    __int16 v10 = -2;
  }
  __int16 v11 = v10 & a1->n128_u16[5];
  if ((v9 & 0x1000) != 0) {
    __int16 v12 = -1;
  }
  else {
    __int16 v12 = -3;
  }
  a1->n128_u16[5] = v11 & v12;
  unsigned __int16 v13 = v8 & 0xFDFF | (((v9 & 0x60) != 96) << 9);
  a1->n128_u16[0] = v13;
  if ((v9 & 0x60) != 0x60)
  {
    unsigned __int32 v14 = a2[11].n128_u32[1];
    if ((v14 & 0x20) != 0) {
      __int16 v15 = 1024;
    }
    else {
      __int16 v15 = 2048;
    }
    if ((v14 & 0x40) != 0) {
      __int16 v16 = 0;
    }
    else {
      __int16 v16 = v15;
    }
    unsigned __int16 v13 = v16 | v13 & 0xF3FF;
    a1->n128_u16[0] = v13;
  }
  int v17 = a2[11].n128_u32[1] & 0x300000;
  unsigned __int16 v18 = v13 & 0xEFFF | ((v17 != 0) << 12);
  a1->n128_u16[0] = v18;
  if (v17)
  {
    unsigned __int32 v19 = a2[11].n128_u32[1];
    if ((v19 & 0x100000) != 0) {
      LOWORD(v20) = 0;
    }
    else {
      int v20 = ((v19 >> 21) & 1) << 13;
    }
    unsigned __int16 v18 = v20 | v18 & 0xDFFF;
    a1->n128_u16[0] = v18;
  }
  unsigned __int32 v21 = *(_DWORD *)(v5 + 464);
  unsigned __int16 v22 = v18 & 0xFF7F | ((*(unsigned char *)(v5 + 472) & 1) << 7);
  a1->n128_u16[0] = v22;
  a1->n128_u16[0] = v22 & 0xFEFF | (((a2[11].n128_u8[4] & 2) != 0) << 8);
  a1[1].n128_u32[0] = *(_DWORD *)(v5 + 468);
  a1[1].n128_u32[1] = v21;
  a1->n128_u8[2] = *(unsigned char *)(v5 + 476);
  unint64_t v23 = a2[2].n128_u64[1];
  if (!v23) {
    unint64_t v23 = v5;
  }
  a1[3].n128_u64[1] = v23;
  a1->n128_u32[1] = a2[3].n128_u32[3];
  a1[2].n128_u32[3] = a2[9].n128_u32[0];
  a1[1].n128_u32[2] = *(_DWORD *)(v5 + 532);
  a1->n128_u8[8] = *(unsigned char *)(v5 + 483);
  a1[2].n128_u32[0] = *(_DWORD *)(v5 + 540);
  a1[2].n128_u32[1] = a4;
  a1[5].n128_u64[0] = a2->n128_u64[0];
  a1[5].n128_u32[2] = a2[3].n128_u32[2];
  a1->n128_u8[9] = a2[9].n128_u8[7];
  a1[5].n128_u16[6] = *(_WORD *)(v5 + 474);
  unint64_t v24 = (void *)a2[13].n128_u64[1];
  if (v24) {
    LOBYTE(v24) = *v24 != 0;
  }
  a1->n128_u8[3] = v24;
  __n128 result = a2[13];
  a1[6] = result;
  a1[7].n128_u64[1] = *(void *)(v5 + 520);
  return result;
}

uint64_t re::addDrawCall(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int32 a4, uint64_t a5)
{
  uint64_t v10 = re::BucketArray<re::DrawCall,128ul>::addUninitialized(a1);
  re::DrawCall::DrawCall((re::DrawCall *)v10);
  re::makeDrawCallHelper(v11, (__n128 *)a2, a3, a4, *(unsigned char *)(a5 + 8));
  *(_DWORD *)(v10 + 76) = *(void *)(a1 + 96);
  __int16 v12 = (_OWORD *)re::BucketArray<re::Matrix4x4<float>,128ul>::addUninitialized(a1 + 56);
  long long v13 = *(_OWORD *)(a2 + 112);
  long long v15 = *(_OWORD *)(a2 + 64);
  long long v14 = *(_OWORD *)(a2 + 80);
  _OWORD v12[2] = *(_OWORD *)(a2 + 96);
  unint64_t v12[3] = v13;
  *__int16 v12 = v15;
  v12[1] = v14;
  uint64_t v16 = *(void *)(*(void *)(v10 + 64) + 80);
  if (v16) {
    uint64_t v17 = v16 + 152;
  }
  else {
    uint64_t v17 = 0;
  }
  *(void *)re::BucketArray<re::ConstantTable const*,128ul>::addUninitialized(a1 + 112) = v17;
  float v18 = *(float *)(a2 + 192) * (float)*(int *)(a2 + 184);
  *(float *)re::BucketArray<float,128ul>::addUninitialized(a1 + 168) = v18;
  *(_DWORD *)re::BucketArray<unsigned int,128ul>::addUninitialized(a1 + 224) = *(_DWORD *)(a2 + 200);
  if (*(unsigned char *)a5)
  {
    int v20 = *(_DWORD *)(a5 + 4);
    if (!*(unsigned char *)(v10 + 48)) {
      *(unsigned char *)(v10 + 48) = 1;
    }
    *(_DWORD *)(v10 + 52) = v20;
  }
  return v10;
}

uint64_t re::addInstancedDrawCall(re::DrawTable *a1, __n128 *a2, uint64_t a3, unsigned __int32 a4, unsigned int a5, uint64_t a6)
{
  uint64_t v12 = re::BucketArray<re::DrawCall,128ul>::addUninitialized((uint64_t)a1);
  re::DrawCall::DrawCall((re::DrawCall *)v12);
  re::makeDrawCallHelper(v13, a2, a3, a4, *(unsigned char *)(a6 + 8));
  *(unsigned char *)(v12 + 3) = 2;
  *(_DWORD *)(v12 + 32) = a5;
  *(_DWORD *)(v12 + 76) = *((void *)a1 + 12);
  re::DrawTable::expandCompanionData(a1, a5);
  if (*(unsigned char *)a6)
  {
    int v15 = *(_DWORD *)(a6 + 4);
    if (!*(unsigned char *)(v12 + 48)) {
      *(unsigned char *)(v12 + 48) = 1;
    }
    *(_DWORD *)(v12 + 52) = v15;
  }
  return v12;
}

uint64_t *re::DrawTable::expandCompanionData(re::DrawTable *this, uint64_t a2)
{
  unint64_t v3 = *((void *)this + 12) + a2;
  re::BucketArray<re::Matrix4x4<float>,128ul>::resize((unint64_t)this + 56, v3);
  re::BucketArray<re::ConstantTable const*,128ul>::resize((uint64_t *)this + 14, v3);
  re::BucketArray<float,128ul>::resize((uint64_t *)this + 21, v3);
  return re::BucketArray<unsigned int,128ul>::resize((uint64_t *)this + 28, v3);
}

uint64_t re::FixedArray<re::VertexBufferFormat>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(void *)__n128 result = a2;
  *(void *)(result + 8) = a3;
  if (!a3) {
    return result;
  }
  if (a3 >> 60)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 16, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = result;
  __n128 result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16 * a3, 4);
  *(void *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    __n128 result = _os_crash();
    __break(1u);
    return result;
  }
  unint64_t v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_DWORD *)__n128 result = 0x10000;
      *(_WORD *)(result + 4) = 256;
      result += 16;
      --v6;
    }
    while (v6);
  }
  *(_DWORD *)__n128 result = 0x10000;
  *(_WORD *)(result + 4) = 256;
  return result;
}

void re::AttributeTableBuilder::~AttributeTableBuilder(re::AttributeTableBuilder *this)
{
  *(void *)this = 0;
  int v2 = (uint64_t *)((char *)this + 8);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 1);
  re::BufferTable::deinit((re::AttributeTableBuilder *)((char *)this + 32));
  *((unsigned char *)this + 320) = 0;
  re::BufferTable::~BufferTable((re::AttributeTableBuilder *)((char *)this + 32));
  re::FixedArray<CoreIKTransform>::deinit(v2);
}

unint64_t re::BucketArray<re::Matrix4x4<float>,128ul>::resize(unint64_t result, unint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *(void *)(result + 40);
  if (v4 >= a2)
  {
    if (v4 > a2)
    {
      unint64_t v5 = a2;
      do
        __n128 result = re::BucketArray<re::Matrix4x4<float>,128ul>::operator[](v3, v5++);
      while (v5 != *(void *)(v3 + 40));
      *(void *)(v3 + 40) = a2;
    }
  }
  else
  {
    if (a2 > *(void *)(result + 8) << 7)
    {
      __n128 result = (unint64_t)re::BucketArray<re::Matrix4x4<float>,128ul>::setBucketsCapacity((uint64_t *)result, (a2 + 127) >> 7);
      unint64_t v4 = *(void *)(v3 + 40);
    }
    for (*(void *)(v3 + 40) = a2; v4 != *(void *)(v3 + 40); ++v4)
    {
      __n128 result = re::BucketArray<re::Matrix4x4<float>,128ul>::operator[](v3, v4);
      *(_OWORD *)__n128 result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 48) = 0u;
    }
  }
  ++*(_DWORD *)(v3 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ConstantTable const*,128ul>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = (uint64_t)result;
  unint64_t v4 = result[5];
  if (v4 >= a2)
  {
    if (v4 > a2)
    {
      unint64_t v5 = a2;
      do
        __n128 result = (uint64_t *)re::BucketArray<re::ConstantTable const*,128ul>::operator[](v3, v5++);
      while (v5 != *(void *)(v3 + 40));
      *(void *)(v3 + 40) = a2;
    }
  }
  else
  {
    if (a2 > result[1] << 7)
    {
      __n128 result = re::BucketArray<re::ConstantTable const*,128ul>::setBucketsCapacity(result, (a2 + 127) >> 7);
      unint64_t v4 = *(void *)(v3 + 40);
    }
    for (*(void *)(v3 + 40) = a2; v4 != *(void *)(v3 + 40); ++v4)
    {
      __n128 result = (uint64_t *)re::BucketArray<re::ConstantTable const*,128ul>::operator[](v3, v4);
      void *result = 0;
    }
  }
  ++*(_DWORD *)(v3 + 48);
  return result;
}

uint64_t *re::BucketArray<float,128ul>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = (uint64_t)result;
  unint64_t v4 = result[5];
  if (v4 >= a2)
  {
    if (v4 > a2)
    {
      unint64_t v5 = a2;
      do
        __n128 result = (uint64_t *)re::BucketArray<unsigned int,128ul>::operator[](v3, v5++);
      while (v5 != *(void *)(v3 + 40));
      *(void *)(v3 + 40) = a2;
    }
  }
  else
  {
    if (a2 > result[1] << 7)
    {
      __n128 result = re::BucketArray<float,128ul>::setBucketsCapacity(result, (a2 + 127) >> 7);
      unint64_t v4 = *(void *)(v3 + 40);
    }
    for (*(void *)(v3 + 40) = a2; v4 != *(void *)(v3 + 40); ++v4)
    {
      __n128 result = (uint64_t *)re::BucketArray<unsigned int,128ul>::operator[](v3, v4);
      *(_DWORD *)__n128 result = 0;
    }
  }
  ++*(_DWORD *)(v3 + 48);
  return result;
}

uint64_t *re::BucketArray<unsigned int,128ul>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = (uint64_t)result;
  unint64_t v4 = result[5];
  if (v4 >= a2)
  {
    if (v4 > a2)
    {
      unint64_t v5 = a2;
      do
        __n128 result = (uint64_t *)re::BucketArray<unsigned int,128ul>::operator[](v3, v5++);
      while (v5 != *(void *)(v3 + 40));
      *(void *)(v3 + 40) = a2;
    }
  }
  else
  {
    if (a2 > result[1] << 7)
    {
      __n128 result = re::BucketArray<unsigned int,128ul>::setBucketsCapacity(result, (a2 + 127) >> 7);
      unint64_t v4 = *(void *)(v3 + 40);
    }
    for (*(void *)(v3 + 40) = a2; v4 != *(void *)(v3 + 40); ++v4)
    {
      __n128 result = (uint64_t *)re::BucketArray<unsigned int,128ul>::operator[](v3, v4);
      *(_DWORD *)__n128 result = 0;
    }
  }
  ++*(_DWORD *)(v3 + 48);
  return result;
}

uint64_t re::BucketArray<re::ConstantTable const*,128ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > v3 << 7)
  {
    re::BucketArray<re::ConstantTable const*,128ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 128) >> 7);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 7)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 7));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 8 * (v2 & 0x7F);
}

uint64_t re::BucketArray<float,128ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > v3 << 7)
  {
    re::BucketArray<float,128ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 128) >> 7);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 7)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 7));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 4 * (v2 & 0x7F);
}

uint64_t re::BucketArray<re::Matrix4x4<float>,128ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > v3 << 7)
  {
    re::BucketArray<re::Matrix4x4<float>,128ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 128) >> 7);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 7)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 7));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + ((v2 & 0x7F) << 6);
}

uint64_t re::BucketArray<unsigned int,128ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > v3 << 7)
  {
    re::BucketArray<unsigned int,128ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 128) >> 7);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 7)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 7));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 4 * (v2 & 0x7F);
}

void re::RenderGraphPersistentResourceManager::~RenderGraphPersistentResourceManager(re::RenderGraphPersistentResourceManager *this)
{
  unint64_t v2 = (uint64_t *)((char *)this + 64);
  re::HashTable<unsigned long long,re::RenderGraphPersistentResourceManager::LiveBuffer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)this + 64);
  re::HashTable<unsigned long long,re::RenderGraphPersistentResourceManager::LiveBuffer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(v2);
  re::HashTable<unsigned long long,re::RenderGraphPersistentResourceManager::LiveTexture,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)this + 16);
  re::HashTable<unsigned long long,re::RenderGraphPersistentResourceManager::LiveTexture,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 2);
  re::HashTable<unsigned long long,re::RenderGraphPersistentResourceManager::LiveBuffer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(v2);
  re::HashTable<unsigned long long,re::RenderGraphPersistentResourceManager::LiveTexture,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 2);
}

void re::HashTable<unsigned long long,re::RenderGraphPersistentResourceManager::LiveBuffer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &unk_2343655D0, 4 * v2);
    }
    unint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = *(void *)(a1 + 16) + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          unsigned __int16 v8 = *(void **)(v6 + 24);
          if (v8)
          {

            *(void *)(v6 + 24) = 0;
            unint64_t v3 = *(unsigned int *)(a1 + 32);
          }
        }
        v4 += 56;
      }
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v9 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v9;
  }
}

double re::HashTable<unsigned long long,re::RenderGraphPersistentResourceManager::LiveBuffer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          unsigned __int16 v8 = *(void **)(v6 + 24);
          if (v8)
          {

            *(void *)(v6 + 24) = 0;
            unint64_t v3 = *((unsigned int *)a1 + 8);
          }
        }
        v4 += 56;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<unsigned long long,re::RenderGraphPersistentResourceManager::LiveTexture,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &unk_2343655D0, 4 * v2);
    }
    unint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = *(void *)(a1 + 16) + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          unsigned __int16 v8 = *(void **)(v6 + 24);
          if (v8)
          {

            *(void *)(v6 + 24) = 0;
            unint64_t v3 = *(unsigned int *)(a1 + 32);
          }
        }
        v4 += 72;
      }
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v9 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v9;
  }
}

double re::HashTable<unsigned long long,re::RenderGraphPersistentResourceManager::LiveTexture,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          unsigned __int16 v8 = *(void **)(v6 + 24);
          if (v8)
          {

            *(void *)(v6 + 24) = 0;
            unint64_t v3 = *((unsigned int *)a1 + 8);
          }
        }
        v4 += 72;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::RenderGraphPersistentResourceManager::pruneExpiredData(BOOL this, unsigned int a2)
{
  uint64_t v3 = this;
  uint64_t v72 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(unsigned int *)(this + 48);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (int *)(*(void *)(this + 32) + 8);
    while (1)
    {
      int v7 = *v6;
      v6 += 18;
      if (v7 < 0) {
        break;
      }
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(this + 48);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if (v4 != v5)
  {
    uint64_t v8 = v5;
    do
    {
      uint64_t v9 = *(void *)(v3 + 32) + 72 * v8;
      int v11 = *(_DWORD *)(v9 + 32);
      uint64_t v10 = (int *)(v9 + 32);
      if (*(_DWORD *)(v3 + 112) + v11 < a2)
      {
        uint64_t v12 = (uint64_t *)(v10 - 4);
        long long v13 = *re::graphicsLogObjects((re *)this);
        this = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
        if (this)
        {
          uint64_t v14 = *v12;
          int v15 = *v10;
          *(_DWORD *)__n128 buf = 134218496;
          uint64_t v67 = v14;
          __int16 v68 = 1024;
          unsigned int v69 = a2;
          __int16 v70 = 1024;
          int v71 = v15;
          _os_log_impl(&dword_233120000, v13, OS_LOG_TYPE_DEFAULT, "Deleting Expired Texture %llu - currentFrame = %d, lastFrameUsed = %d \n", buf, 0x18u);
        }
        if (*(void *)(v3 + 16))
        {
          uint64_t v16 = *v12;
          unint64_t v17 = 0xBF58476D1CE4E5B9 * (*v12 ^ ((unint64_t)*v12 >> 30));
          unint64_t v18 = ((0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) ^ ((0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) >> 31))
              % *(unsigned int *)(v3 + 40);
          uint64_t v19 = *(void *)(v3 + 24);
          uint64_t v20 = *(unsigned int *)(v19 + 4 * v18);
          if (v20 != 0x7FFFFFFF)
          {
            uint64_t v21 = *(void *)(v3 + 32);
            if (*(void *)(v21 + 72 * v20 + 16) == v16)
            {
              *(_DWORD *)(v19 + 4 * v18) = *(_DWORD *)(v21 + 72 * v20 + 8) & 0x7FFFFFFF;
LABEL_19:
              uint64_t v23 = *(void *)(v3 + 32);
              uint64_t v24 = v23 + 72 * v20;
              int v27 = *(_DWORD *)(v24 + 8);
              int v25 = (int *)(v24 + 8);
              int v26 = v27;
              if (v27 < 0)
              {
                *int v25 = v26 & 0x7FFFFFFF;
                uint64_t v28 = v23 + 72 * v20;
                uint64_t v30 = *(re::RenderGraphPersistentResourceManager **)(v28 + 24);
                int v29 = (void *)(v28 + 24);
                this = (BOOL)v30;
                if (v30)
                {

                  *int v29 = 0;
                }
              }
              uint64_t v31 = *(void *)(v3 + 32) + 72 * v20;
              *(_DWORD *)(v31 + 8) = *(_DWORD *)(v31 + 8) & 0x80000000 | *(_DWORD *)(v3 + 52);
              --*(_DWORD *)(v3 + 44);
              int v32 = *(_DWORD *)(v3 + 56) + 1;
              *(_DWORD *)(v3 + 52) = v20;
              *(_DWORD *)(v3 + 56) = v32;
            }
            else
            {
              while (1)
              {
                uint64_t v22 = v20;
                uint64_t v20 = *(_DWORD *)(v21 + 72 * v20 + 8) & 0x7FFFFFFF;
                if (v20 == 0x7FFFFFFF) {
                  break;
                }
                if (*(void *)(v21 + 72 * v20 + 16) == v16)
                {
                  *(_DWORD *)(v21 + 72 * v22 + 8) = *(_DWORD *)(v21 + 72 * v22 + 8) & 0x80000000 | *(_DWORD *)(v21 + 72 * v20 + 8) & 0x7FFFFFFF;
                  goto LABEL_19;
                }
              }
            }
          }
        }
        LODWORD(v4) = *(_DWORD *)(v3 + 48);
      }
      if (v4 <= (int)v5 + 1) {
        int v33 = v5 + 1;
      }
      else {
        int v33 = v4;
      }
      while (1)
      {
        uint64_t v8 = (v5 + 1);
        if (v33 - 1 == v5) {
          break;
        }
        LODWORD(v5) = v5 + 1;
        int v34 = v8;
        if ((*(_DWORD *)(*(void *)(v3 + 32) + 72 * v8 + 8) & 0x80000000) != 0) {
          goto LABEL_31;
        }
      }
      int v34 = v33;
LABEL_31:
      LODWORD(v5) = v34;
    }
    while (v4 != v34);
  }
  uint64_t v35 = *(unsigned int *)(v3 + 96);
  if (v35)
  {
    uint64_t v36 = 0;
    int v37 = (int *)(*(void *)(v3 + 80) + 8);
    while (1)
    {
      int v38 = *v37;
      v37 += 14;
      if (v38 < 0) {
        break;
      }
      if (v35 == ++v36)
      {
        LODWORD(v36) = *(_DWORD *)(v3 + 96);
        break;
      }
    }
  }
  else
  {
    LODWORD(v36) = 0;
  }
  if (v35 != v36)
  {
    uint64_t v39 = v36;
    do
    {
      uint64_t v40 = *(void *)(v3 + 80) + 56 * v39;
      int v42 = *(_DWORD *)(v40 + 32);
      int v41 = (int *)(v40 + 32);
      if (*(_DWORD *)(v3 + 112) + v42 < a2)
      {
        unint64_t v43 = (uint64_t *)(v41 - 4);
        uint64_t v44 = *re::graphicsLogObjects((re *)this);
        this = os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT);
        if (this)
        {
          uint64_t v45 = *v43;
          int v46 = *v41;
          *(_DWORD *)__n128 buf = 134218496;
          uint64_t v67 = v45;
          __int16 v68 = 1024;
          unsigned int v69 = a2;
          __int16 v70 = 1024;
          int v71 = v46;
          _os_log_impl(&dword_233120000, v44, OS_LOG_TYPE_DEFAULT, "Deleting Expired Buffer %llu - currentFrame = %d, lastFrameUsed = %d \n", buf, 0x18u);
        }
        if (*(void *)(v3 + 64))
        {
          uint64_t v47 = *v43;
          unint64_t v48 = 0xBF58476D1CE4E5B9 * (*v43 ^ ((unint64_t)*v43 >> 30));
          unint64_t v49 = ((0x94D049BB133111EBLL * (v48 ^ (v48 >> 27))) ^ ((0x94D049BB133111EBLL * (v48 ^ (v48 >> 27))) >> 31))
              % *(unsigned int *)(v3 + 88);
          uint64_t v50 = *(void *)(v3 + 72);
          uint64_t v51 = *(unsigned int *)(v50 + 4 * v49);
          if (v51 != 0x7FFFFFFF)
          {
            uint64_t v52 = *(void *)(v3 + 80);
            if (*(void *)(v52 + 56 * v51 + 16) == v47)
            {
              *(_DWORD *)(v50 + 4 * v49) = *(_DWORD *)(v52 + 56 * v51 + 8) & 0x7FFFFFFF;
LABEL_50:
              uint64_t v54 = *(void *)(v3 + 80);
              uint64_t v55 = v54 + 56 * v51;
              int v58 = *(_DWORD *)(v55 + 8);
              uint64_t v56 = (int *)(v55 + 8);
              int v57 = v58;
              if (v58 < 0)
              {
                *uint64_t v56 = v57 & 0x7FFFFFFF;
                uint64_t v59 = v54 + 56 * v51;
                long long v61 = *(re::RenderGraphPersistentResourceManager **)(v59 + 24);
                long long v60 = (void *)(v59 + 24);
                this = (BOOL)v61;
                if (v61)
                {

                  *long long v60 = 0;
                }
              }
              uint64_t v62 = *(void *)(v3 + 80) + 56 * v51;
              *(_DWORD *)(v62 + 8) = *(_DWORD *)(v62 + 8) & 0x80000000 | *(_DWORD *)(v3 + 100);
              --*(_DWORD *)(v3 + 92);
              int v63 = *(_DWORD *)(v3 + 104) + 1;
              *(_DWORD *)(v3 + 100) = v51;
              *(_DWORD *)(v3 + 104) = v63;
            }
            else
            {
              while (1)
              {
                uint64_t v53 = v51;
                uint64_t v51 = *(_DWORD *)(v52 + 56 * v51 + 8) & 0x7FFFFFFF;
                if (v51 == 0x7FFFFFFF) {
                  break;
                }
                if (*(void *)(v52 + 56 * v51 + 16) == v47)
                {
                  *(_DWORD *)(v52 + 56 * v53 + 8) = *(_DWORD *)(v52 + 56 * v53 + 8) & 0x80000000 | *(_DWORD *)(v52 + 56 * v51 + 8) & 0x7FFFFFFF;
                  goto LABEL_50;
                }
              }
            }
          }
        }
        LODWORD(v35) = *(_DWORD *)(v3 + 96);
      }
      if (v35 <= (int)v36 + 1) {
        int v64 = v36 + 1;
      }
      else {
        int v64 = v35;
      }
      while (1)
      {
        uint64_t v39 = (v36 + 1);
        if (v64 - 1 == v36) {
          break;
        }
        LODWORD(v36) = v36 + 1;
        int v65 = v39;
        if ((*(_DWORD *)(*(void *)(v3 + 80) + 56 * v39 + 8) & 0x80000000) != 0) {
          goto LABEL_62;
        }
      }
      int v65 = v64;
LABEL_62:
      LODWORD(v36) = v65;
    }
    while (v35 != v65);
  }
}

void re::RenderGraphPersistentResourceManager::registerPersistentTexture(re::RenderGraphPersistentResourceManager *this, const re::WeakStringID *a2, const re::WeakStringID *a3, const re::WeakStringID *a4, re::RenderFrame *a5, const re::RenderGraphTargetDescription *a6, BOOL *a7)
{
  id v10 = *(id *)re::RenderGraphPersistentResourceManager::getOrCreateTextureInternal(this, a2, a4, a5, a6, a7);
  id v11 = v10;
  re::RenderFrame::registerExternalTexture((uint64_t)a5, &v11, a3, a2, 0);
  if (v10)
  {
  }
}

uint64_t re::RenderGraphPersistentResourceManager::getOrCreateTextureInternal(re::RenderGraphPersistentResourceManager *this, const re::WeakStringID *a2, const re::WeakStringID *a3, re::RenderFrame *a4, const re::RenderGraphTargetDescription *a5, BOOL *a6)
{
  unint64_t v10 = (*(void *)a3 + (*(void *)a2 << 6) + (*(void *)a2 >> 2) - 0x61C8864680B583E9) ^ *(void *)a2;
  unint64_t v34 = v10;
  uint64_t v12 = *((void *)this + 2);
  id v11 = (char *)this + 16;
  unint64_t v13 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) >> 27));
  unint64_t v14 = v13 ^ (v13 >> 31);
  if (!v12)
  {
    LODWORD(v22) = 0;
    memset(v33, 0, 48);
LABEL_19:
    unsigned int v30 = re::HashTable<unsigned long long,re::RenderGraphPersistentResourceManager::LiveTexture,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)v11, v22, v14, &v34, (uint64_t)v33);
    ++*((_DWORD *)this + 14);
    uint64_t v29 = *((void *)this + 4) + 72 * v30;
    goto LABEL_20;
  }
  uint64_t v15 = *(unsigned int *)(*((void *)this + 3) + 4 * (v14 % *((unsigned int *)this + 10)));
  if (v15 != 0x7FFFFFFF)
  {
    uint64_t v16 = *((void *)this + 4);
    if (*(void *)(v16 + 72 * v15 + 16) == v10)
    {
LABEL_6:
      uint64_t v17 = v16 + 72 * v15;
      v18.i32[0] = *(_DWORD *)(v17 + 44);
      v18.i32[1] = *(_DWORD *)(v17 + 64);
      v18.i64[1] = *(void *)(v17 + 36);
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v18, *(int32x4_t *)((char *)a5 + 4))))) & 1) == 0&& *(_DWORD *)(v17 + 48) == *((_DWORD *)a5 + 6)&& *(void *)(v17 + 56) == *((void *)a5 + 11))
      {
        BOOL v20 = 0;
        uint64_t v21 = v17 + 24;
        goto LABEL_27;
      }
    }
    else
    {
      while (1)
      {
        LODWORD(v15) = *(_DWORD *)(v16 + 72 * v15 + 8) & 0x7FFFFFFF;
        if (v15 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v16 + 72 * v15 + 16) == v10) {
          goto LABEL_6;
        }
      }
    }
  }
  memset(v33, 0, 48);
  unint64_t v22 = v14 % *((unsigned int *)this + 10);
  uint64_t v23 = *(unsigned int *)(*((void *)this + 3) + 4 * v22);
  if (v23 == 0x7FFFFFFF) {
    goto LABEL_19;
  }
  uint64_t v24 = *((void *)this + 4);
  while (*(void *)(v24 + 72 * v23 + 16) != v10)
  {
    uint64_t v23 = *(_DWORD *)(v24 + 72 * v23 + 8) & 0x7FFFFFFF;
    if (v23 == 0x7FFFFFFF) {
      goto LABEL_19;
    }
  }
  uint64_t v25 = 9 * v23;
  uint64_t v26 = v24 + 72 * v23;
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v26 + 24), v33);
  int v27 = (int)v33[5];
  long long v28 = *(_OWORD *)&v33[3];
  *(_OWORD *)(v26 + 32) = *(_OWORD *)&v33[1];
  *(_OWORD *)(v26 + 48) = v28;
  *(_DWORD *)(v26 + 64) = v27;
  ++*((_DWORD *)this + 14);
  uint64_t v29 = *((void *)this + 4) + 8 * v25;
LABEL_20:
  uint64_t v21 = v29 + 24;
  if (v33[0]) {

  }
  textureDescFromTargetDesc((uint64_t)a5, &v32);
  re::mtl::Device::makeTexture(v32, (id *)this, v33);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v21, v33);
  if (v33[0])
  {

    v33[0] = 0;
  }
  if (v32) {

  }
  *(void *)(v21 + 12) = *(void *)((char *)a5 + 12);
  *(_DWORD *)(v21 + 20) = *((_DWORD *)a5 + 1);
  *(_DWORD *)(v21 + 40) = *((_DWORD *)a5 + 2);
  *(_DWORD *)(v21 + 24) = *((_DWORD *)a5 + 6);
  *(void *)(v21 + 32) = *((void *)a5 + 11);
  BOOL v20 = 1;
LABEL_27:
  *a6 = v20;
  *(_DWORD *)(v21 + 8) = *((void *)a4 + 46);
  return v21;
}

void re::RenderGraphPersistentResourceManager::registerPersistentBuffer(re::RenderGraphPersistentResourceManager *this, const re::WeakStringID *a2, const re::WeakStringID *a3, const re::WeakStringID *a4, re::RenderFrame *a5, const re::RenderGraphBufferDescription *a6, BOOL *a7, int a8)
{
  BufferInternal = (id *)re::RenderGraphPersistentResourceManager::getOrCreateBufferInternal((uint64_t)this, a2, a4, (uint64_t)a5, (uint64_t)a6, (char *)a7, a8);
  id v12 = *BufferInternal;
  LODWORD(v14) = 0;
  HIDWORD(v14) = objc_msgSend(*BufferInternal, sel_length, v12, v14);
  re::RenderFrame::registerExternalBuffer((uint64_t)a5, (uint64_t)&v13, a3, a2, 0);
  if (v12)
  {
  }
}

uint64_t re::RenderGraphPersistentResourceManager::getOrCreateBufferInternal(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, char *a6, int a7)
{
  unint64_t v11 = (*a3 + (*a2 << 6) + (*a2 >> 2) - 0x61C8864680B583E9) ^ *a2;
  unint64_t v37 = v11;
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v12 = a1 + 64;
  unint64_t v14 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) >> 27));
  unint64_t v15 = v14 ^ (v14 >> 31);
  if (!v13)
  {
    LODWORD(v24) = 0;
    memset(v36, 0, 32);
LABEL_21:
    unsigned int v31 = re::HashTable<unsigned long long,re::RenderGraphPersistentResourceManager::LiveBuffer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(v12, v24, v15, &v37, (uint64_t)v36);
    ++*(_DWORD *)(a1 + 104);
    uint64_t v30 = *(void *)(a1 + 80) + 56 * v31;
    goto LABEL_22;
  }
  uint64_t v16 = *(unsigned int *)(*(void *)(a1 + 72) + 4 * (v15 % *(unsigned int *)(a1 + 88)));
  if (v16 != 0x7FFFFFFF)
  {
    uint64_t v17 = *(void *)(a1 + 80);
    if (*(void *)(v17 + 56 * v16 + 16) == v11)
    {
LABEL_6:
      uint64_t v18 = v17 + 56 * v16;
      unint64_t v19 = *(void *)(v18 + 40);
      unint64_t v20 = *(void *)(a5 + 8);
      BOOL v23 = v19 == v20;
      BOOL v21 = v19 >= v20;
      int v22 = v23;
      if (!a7) {
        BOOL v21 = v22;
      }
      BOOL v23 = v21 && *(_DWORD *)(v18 + 48) == *(_DWORD *)(a5 + 24);
      if (v23)
      {
        char v34 = 0;
        uint64_t v32 = v18 + 24;
        goto LABEL_29;
      }
    }
    else
    {
      while (1)
      {
        LODWORD(v16) = *(_DWORD *)(v17 + 56 * v16 + 8) & 0x7FFFFFFF;
        if (v16 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v17 + 56 * v16 + 16) == v11) {
          goto LABEL_6;
        }
      }
    }
  }
  memset(v36, 0, 32);
  unint64_t v24 = v15 % *(unsigned int *)(a1 + 88);
  uint64_t v25 = *(unsigned int *)(*(void *)(a1 + 72) + 4 * v24);
  if (v25 == 0x7FFFFFFF) {
    goto LABEL_21;
  }
  uint64_t v26 = *(void *)(a1 + 80);
  while (*(void *)(v26 + 56 * v25 + 16) != v11)
  {
    uint64_t v25 = *(_DWORD *)(v26 + 56 * v25 + 8) & 0x7FFFFFFF;
    if (v25 == 0x7FFFFFFF) {
      goto LABEL_21;
    }
  }
  uint64_t v27 = 56 * v25;
  uint64_t v28 = v26 + 56 * v25;
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v28 + 24), v36);
  int v29 = (int)v36[3];
  *(_OWORD *)(v28 + 32) = *(_OWORD *)&v36[1];
  *(_DWORD *)(v28 + 48) = v29;
  ++*(_DWORD *)(a1 + 104);
  uint64_t v30 = *(void *)(a1 + 80) + v27;
LABEL_22:
  uint64_t v32 = v30 + 24;
  if (v36[0]) {

  }
  int v33 = *(_DWORD *)(a5 + 24);
  if (v33 == 0xFFFF) {
    int v33 = 0;
  }
  v36[0] = objc_msgSend(*(id *)a1, sel_newBufferWithLength_options_, *(void *)(a5 + 8), v33, v36[0], v36[1], *(_OWORD *)&v36[2]);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v32, v36);
  if (v36[0]) {

  }
  *(void *)(v32 + 16) = *(void *)(a5 + 8);
  *(_DWORD *)(v32 + 24) = *(_DWORD *)(a5 + 24);
  char v34 = 1;
LABEL_29:
  *a6 = v34;
  *(_DWORD *)(v32 + 8) = *(void *)(a4 + 368);
  return v32;
}

uint64_t re::HashTable<unsigned long long,re::RenderGraphPersistentResourceManager::LiveTexture,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v30, 0, 36);
          *(void *)&v30[36] = 0x7FFFFFFFLL;
          re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v30, v13, v12);
          long long v15 = *(_OWORD *)v30;
          *(_OWORD *)uint64_t v30 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v30[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v30[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v30[24];
          *(_OWORD *)&v30[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v30[32];
          *(_OWORD *)(a1 + 24) = v19;
          unint64_t v20 = v18;
          if (v18)
          {
            unint64_t v21 = 0;
            uint64_t v22 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0) {
                re::HashTable<unsigned long long,re::RenderGraphPersistentResourceManager::LiveTexture,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v22 - 16), v22, v22 + 8);
              }
              ++v21;
              v22 += 72;
            }
            while (v21 < v20);
          }
          re::HashTable<unsigned long long,re::RenderGraphPersistentResourceManager::LiveTexture,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v30);
        }
      }
      else
      {
        if (v12) {
          signed int v25 = 2 * v11;
        }
        else {
          signed int v25 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 72 * v9 + 8);
  }
  else
  {
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 72 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 72 * v9 + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 72 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 72 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 72 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 72 * v9 + 16) = *a4;
  uint64_t v26 = *(void *)(a1 + 16) + 72 * v9;
  *(void *)(v26 + 24) = *(void *)a5;
  *(void *)a5 = 0;
  long long v27 = *(_OWORD *)(a5 + 8);
  long long v28 = *(_OWORD *)(a5 + 24);
  *(_DWORD *)(v26 + 64) = *(_DWORD *)(a5 + 40);
  *(_OWORD *)(v26 + 32) = v27;
  *(_OWORD *)(v26 + 48) = v28;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::HashTable<unsigned long long,re::RenderGraphPersistentResourceManager::LiveBuffer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v29, 0, 36);
          *(void *)&v29[36] = 0x7FFFFFFFLL;
          re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)v29, v13, v12);
          long long v15 = *(_OWORD *)v29;
          *(_OWORD *)int v29 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v29[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v29[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v29[24];
          *(_OWORD *)&unsigned char v29[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v29[32];
          *(_OWORD *)(a1 + 24) = v19;
          unint64_t v20 = v18;
          if (v18)
          {
            unint64_t v21 = 0;
            uint64_t v22 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0) {
                re::HashTable<unsigned long long,re::RenderGraphPersistentResourceManager::LiveBuffer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v22 - 16), v22, v22 + 8);
              }
              ++v21;
              v22 += 56;
            }
            while (v21 < v20);
          }
          re::HashTable<unsigned long long,re::RenderGraphPersistentResourceManager::LiveBuffer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v29);
        }
      }
      else
      {
        if (v12) {
          signed int v25 = 2 * v11;
        }
        else {
          signed int v25 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 56 * v9 + 8);
  }
  else
  {
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 56 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 56 * v9 + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 56 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 56 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 56 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 56 * v9 + 16) = *a4;
  uint64_t v26 = *(void *)(a1 + 16) + 56 * v9;
  *(void *)(v26 + 24) = *(void *)a5;
  *(void *)a5 = 0;
  long long v27 = *(_OWORD *)(a5 + 8);
  *(_DWORD *)(v26 + 48) = *(_DWORD *)(a5 + 24);
  *(_OWORD *)(v26 + 32) = v27;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::DrawCallMeshVisitor::visitMeshScene(uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(float *)(a2 + 376) != 0.0 && *(unsigned char *)(a2 + 646) == 0;
  uint64_t v3 = v2;
  if (v2)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 160);
    *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 176);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 216);
    *(void *)(a1 + 200) = *(void *)(a2 + 248);
    re::DrawCallMeshVisitor::visitScene(a1, a2);
  }
  return v3;
}

float re::DrawCallMeshVisitor::visitScene(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 376);
  uint64_t v2 = a2 + 256;
  if (!*(void *)(a2 + 280)) {
    uint64_t v2 = 0;
  }
  *(void *)(a1 + 208) = v2;
  *(_DWORD *)(a1 + 218) = *(_DWORD *)(a2 + 320);
  *(void *)(a1 + 240) = *(void *)(a2 + 368);
  float v3 = 0.0;
  if (*(unsigned char *)(a2 + 642)) {
    float v3 = 1.0;
  }
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 380);
  *(float *)(a1 + 256) = v3;
  if (*(unsigned char *)(a2 + 328))
  {
    uint64_t v4 = *(void *)(a2 + 336);
    if (!*(unsigned char *)(a1 + 224)) {
      *(unsigned char *)(a1 + 224) = 1;
    }
    *(void *)(a1 + 232) = v4;
  }
  else if (*(unsigned char *)(a1 + 224))
  {
    *(unsigned char *)(a1 + 224) = 0;
  }
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 344);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 352);
  *(_DWORD *)(a1 + 304) = *(_DWORD *)(a2 + 432);
  if (*(unsigned char *)(a1 + 320) || *(unsigned char *)(a2 + 496))
  {
    if (!*(unsigned char *)(a1 + 320) || *(unsigned char *)(a2 + 496))
    {
      if (!*(unsigned char *)(a1 + 320) && *(unsigned char *)(a2 + 496)) {
        *(unsigned char *)(a1 + 320) = 1;
      }
      long long v5 = *(_OWORD *)(a2 + 528);
      *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 512);
      *(_OWORD *)(a1 + 352) = v5;
    }
    else
    {
      *(unsigned char *)(a1 + 320) = 0;
    }
  }
  float result = *(float *)(a2 + 384);
  *(float *)(a1 + 260) = result;
  return result;
}

uint64_t re::DrawCallMeshVisitor::visitMeshInstance(uint64_t a1, uint64_t a2)
{
  uint64_t result = re::MeshVisitor::visitMeshInstance(a1, a2);
  if (result) {
    *(void *)(a1 + 296) = *(void *)(a2 + 96);
  }
  return result;
}

double re::DrawCallMeshVisitor::visitMeshPart(uint64_t a1, uint64_t *a2)
{
  uint64_t v118 = *MEMORY[0x263EF8340];
  uint64_t LevelIndex = re::MeshVisitor::findLevelIndex((re::MeshVisitor *)a1, *((unsigned int *)a2 + 6));
  if ((LevelIndex & 0x80000000) != 0) {
    return result;
  }
  uint64_t v8 = LevelIndex;
  unint64_t v9 = *((int *)a2 + 18);
  uint64_t v10 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(*(void *)(a1 + 376) + 24) + 32))(*(void *)(*(void *)(a1 + 376) + 24), 224, 16);
  uint64_t v12 = v10;
  *(_OWORD *)(v10 + 128) = 0u;
  *(_OWORD *)(v10 + 144) = 0u;
  *(_OWORD *)(v10 + 160) = 0u;
  *(_OWORD *)(v10 + 176) = 0u;
  *(_OWORD *)(v10 + 192) = 0u;
  *(_OWORD *)(v10 + 208) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_OWORD *)(v10 + 112) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(v10 + 152) = _D0;
  *(_DWORD *)(v10 + 160) = 1065353216;
  if (*(void *)(a1 + 128) <= v9)
  {
    uint64_t v17 = *(void *)(a1 + 288);
    *(void *)(v10 + 40) = v17;
    if (*(void *)(a1 + 72) <= v9)
    {
      if (*(void *)(a1 + 88) <= v9) {
        goto LABEL_13;
      }
      uint64_t v18 = 0;
      goto LABEL_12;
    }
    uint64_t v18 = 0;
    *(void *)uint64_t v10 = 0;
    if (*(void *)(a1 + 88) > v9) {
LABEL_12:
    }
      *(void *)(v10 + 8) = v18;
  }
  else
  {
    uint64_t v17 = *(void *)(*(void *)(a1 + 120) + 8 * v9);
    *(void *)(v10 + 40) = v17;
    if (*(void *)(a1 + 72) > v9) {
      *(void *)uint64_t v10 = *(void *)(a1 + 64) + 24 * (int)v9;
    }
    if (*(void *)(a1 + 88) > v9)
    {
      uint64_t v18 = *(void *)(a1 + 80) + 24 * (int)v9;
      goto LABEL_12;
    }
  }
LABEL_13:
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(a1 + 96);
  *(unsigned char *)(v10 + 32) = *(unsigned char *)(a1 + 112);
  if (*(void *)(a1 + 160) <= v9) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(a1 + 152) + 8 * v9);
  }
  *(void *)(v10 + 56) = v19;
  if (*(void *)(a1 + 176) <= v9) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(a1 + 168) + 8 * v9);
  }
  *(void *)(v10 + 64) = v20;
  if (*(void *)(a1 + 144) <= v9) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = *(void *)(*(void *)(a1 + 136) + 8 * v9);
  }
  *(void *)(v10 + 48) = v21;
  unint64_t v22 = *(void *)(a1 + 296);
  if (v22 < *(void *)(a1 + 192))
  {
    uint64_t v23 = (void *)(*(void *)(a1 + 184) + 16 * v22);
    if (v23[1] <= v9) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = *(void *)(*v23 + 8 * v9);
    }
    *(void *)(v10 + 80) = v24;
  }
  *(void *)(v10 + 72) = *(void *)(a1 + 200);
  *(_DWORD *)(v10 + 120) = *(_DWORD *)(a1 + 218);
  if (*(unsigned char *)(a1 + 224))
  {
    *(unsigned char *)(v10 + 128) = 1;
    *(void *)(v10 + 136) = *(void *)(a1 + 232);
  }
  *(void *)(v10 + 144) = *(void *)(a1 + 240);
  uint64_t v25 = *(void *)(a1 + 248);
  *(void *)(v10 + 152) = v25;
  *(_DWORD *)(v10 + 160) = *(_DWORD *)(a1 + 260);
  *(unsigned char *)(v10 + 164) = *(float *)(a1 + 256) != 0.0;
  if (!v17 && !*((unsigned char *)a2 + 128))
  {
    uint64_t v26 = *re::graphicsLogObjects((re *)v10);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v27 = *(void *)(a2[4] + 512);
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v27;
      _os_log_impl(&dword_233120000, v26, OS_LOG_TYPE_DEFAULT, "Failed to find a materialInstance to draw mesh part [%s]. Check material index.", (uint8_t *)&buf, 0xCu);
    }
    return result;
  }
  p_long long buf = &buf;
  memset(v106, 0, sizeof(v106));
  uint64_t v107 = 0;
  uint64_t v108 = 0;
  __int16 v109 = 0;
  *(void *)&long long v110 = 25172350;
  *((void *)&v110 + 1) = 0x7FFFFFFFLL;
  uint64_t v114 = 0;
  int v113 = 0;
  unint64_t v29 = *a2;
  uint64_t v30 = a2[1];
  *(void *)&long long buf = *a2;
  *((void *)&buf + 1) = v30;
  int v31 = *((_DWORD *)a2 + 4);
  int v105 = -1;
  int v98 = v31;
  v106[3] = *((unsigned char *)a2 + 20);
  uint64_t v32 = (long long *)a2[5];
  uint64_t v94 = a2[4];
  long long v95 = *(_OWORD *)(a2 + 7);
  long long v34 = v32[2];
  long long v33 = v32[3];
  long long v35 = v32[1];
  long long v100 = *v32;
  long long v101 = v35;
  long long v102 = v34;
  long long v103 = v33;
  uint64_t v96 = a2[6];
  uint64_t v97 = v10;
  if (v8 >= 2)
  {
    re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 242, v8, 2);
    _os_crash();
    __break(1u);
    goto LABEL_118;
  }
  int v99 = *(_DWORD *)(a1 + 4 * v8 + 48);
  int v3 = *(unsigned __int8 *)(a1 + 264);
  v106[4] = *(unsigned char *)(a1 + 264);
  long long v104 = *(_OWORD *)(a1 + 272);
  uint64_t v36 = *(void *)(a1 + 296);
  int v111 = *(_DWORD *)(a1 + 304);
  int v112 = v36;
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  if (!v2) {
    goto LABEL_93;
  }
  uint64_t v37 = *v2;
  if (!*v2) {
    goto LABEL_93;
  }
  uint64_t v92 = *(void *)(a1 + 376);
  if (!*(void *)v37) {
    goto LABEL_53;
  }
  unint64_t v38 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v29 ^ (v29 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v29 ^ (v29 >> 30))) >> 27));
  uint64_t v39 = *(unsigned int *)(*(void *)(v37 + 8) + 4 * ((v38 ^ (v38 >> 31)) % *(unsigned int *)(v37 + 24)));
  if (v39 == 0x7FFFFFFF) {
    goto LABEL_53;
  }
  unint64_t v40 = a2[3];
  uint64_t v41 = *(void *)(v37 + 16);
  if (*(void *)(v41 + 120 * v39 + 16) != v29)
  {
    uint64_t v48 = v39;
    while (1)
    {
      LODWORD(v48) = *(_DWORD *)(v41 + 120 * v48 + 8) & 0x7FFFFFFF;
      if (v48 == 0x7FFFFFFF) {
        goto LABEL_53;
      }
      if (*(void *)(v41 + 120 * v48 + 16) == v29)
      {
        while (1)
        {
          LODWORD(v39) = *(_DWORD *)(v41 + 120 * v39 + 8) & 0x7FFFFFFF;
          if (v39 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v41 + 120 * v39 + 16) == v29) {
            goto LABEL_39;
          }
        }
        LODWORD(v39) = 0x7FFFFFFF;
        break;
      }
    }
  }
LABEL_39:
  unint64_t v42 = *(void *)(v41 + 120 * v39 + 24);
  if (!v42)
  {
LABEL_53:
    char v90 = 0;
    int v49 = 1;
    goto LABEL_54;
  }
  int v89 = v3;
  unsigned int v43 = v39;
  LODWORD(v44) = 0x7FFFFFFF;
  if (v2[2])
  {
    unint64_t v45 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v42 ^ (v42 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v42 ^ (v42 >> 30))) >> 27));
    uint64_t v46 = *(unsigned int *)(v2[3] + 4 * ((v45 ^ (v45 >> 31)) % *((unsigned int *)v2 + 10)));
    if (v46 != 0x7FFFFFFF)
    {
      uint64_t v47 = v2[4];
      LODWORD(v44) = v46;
      if (*(void *)(v47 + 40 * v46 + 16) != v42)
      {
        uint64_t v44 = v46;
        while (1)
        {
          LODWORD(v44) = *(_DWORD *)(v47 + 40 * v44 + 8) & 0x7FFFFFFF;
          if (v44 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v47 + 40 * v44 + 16) == v42) {
            goto LABEL_109;
          }
        }
        LODWORD(v44) = 0x7FFFFFFF;
      }
    }
  }
LABEL_109:
  uint64_t v74 = v2[4];
  uint64_t v75 = v74 + 40 * v44;
  v106[5] = 1;
  v106[7] = *(unsigned char *)(v75 + 32);
  HIDWORD(v107) = *(_DWORD *)(v75 + 24);
  v106[10] = *(unsigned char *)(v75 + 33);
  v106[9] = *(unsigned char *)(v75 + 34);
  uint64_t v76 = v41 + 120 * v43;
  unint64_t v79 = *(void *)(v76 + 56);
  long long v78 = (uint64_t *)(v76 + 56);
  unint64_t v77 = v79;
  if (v79 <= v40)
  {
    if (!v77)
    {
LABEL_115:
      int v49 = 0;
      *(void *)((char *)&v110 + 4) = *(void *)(v41 + 120 * v43 + 32);
      HIDWORD(v110) = *(_DWORD *)(v74 + 40 * v44 + 28);
      goto LABEL_116;
    }
LABEL_113:
    unint64_t v85 = v40;
    uint64_t v87 = v74;
    unsigned int v91 = v43;
    uint64_t v84 = v78;
    log = *re::graphicsLogObjects((re *)v10);
    BOOL v81 = os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT);
    uint64_t v74 = v87;
    unsigned int v43 = v91;
    if (v81)
    {
      uint64_t v82 = *v84;
      *(_DWORD *)uint64_t v115 = 134218240;
      *(void *)&v115[4] = v82;
      __int16 v116 = 2048;
      unint64_t v117 = v85;
      _os_log_impl(&dword_233120000, log, OS_LOG_TYPE_DEFAULT, "'meshPartPrioritiesInGroup' contains fewer elements (%zu) than current MeshPart index (%zu).", v115, 0x16u);
      uint64_t v74 = v87;
      unsigned int v43 = v91;
    }
    goto LABEL_115;
  }
  if (*(void *)(v41 + 120 * v43 + 96) <= v40) {
    goto LABEL_113;
  }
  int v49 = 0;
  uint64_t v80 = v41 + 120 * v43;
  DWORD1(v110) = *(_DWORD *)(*(void *)(v80 + 72) + 4 * v40);
  DWORD2(v110) = *(_DWORD *)(*(void *)(v80 + 112) + 4 * v40);
LABEL_116:
  char v90 = 1;
  int v3 = v89;
LABEL_54:
  *(void *)uint64_t v115 = v30;
  uint64_t v10 = re::HashTable<unsigned long long,re::MeshSortingCollection::EntityRenderPassGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(v37 + 48, (uint64_t *)v115);
  if (v10)
  {
    LODWORD(v50) = 0x7FFFFFFF;
    if (*(void *)(v37 + 48))
    {
      unint64_t v51 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (*(void *)v115 ^ (*(void *)v115 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                    * (*(void *)v115 ^ (*(void *)v115 >> 30))) >> 27));
      uint64_t v52 = *(unsigned int *)(*(void *)(v37 + 56) + 4 * ((v51 ^ (v51 >> 31)) % *(unsigned int *)(v37 + 72)));
      if (v52 != 0x7FFFFFFF)
      {
        uint64_t v53 = *(void *)(v37 + 64);
        LODWORD(v50) = v52;
        if (*(void *)(v53 + 40 * v52 + 16) != *(void *)v115)
        {
          uint64_t v50 = v52;
          while (1)
          {
            LODWORD(v50) = *(_DWORD *)(v53 + 40 * v50 + 8) & 0x7FFFFFFF;
            if (v50 == 0x7FFFFFFF) {
              break;
            }
            if (*(void *)(v53 + 40 * v50 + 16) == *(void *)v115) {
              goto LABEL_63;
            }
          }
          LODWORD(v50) = 0x7FFFFFFF;
        }
      }
    }
LABEL_63:
    int v86 = v49;
    uint64_t v30 = *(void *)(v37 + 64);
    LODWORD(p_buf) = v50;
    uint64_t v8 = v30 + 40 * v50;
    uint64_t v88 = *(void *)(v12 + 144);
    if (re::MaterialParameterTable::kFadeNameHash(void)::once == -1)
    {
LABEL_64:
      uint64_t v54 = (uint64_t *)(v8 + 24);
      uint64_t v55 = re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash;
      uint64_t v56 = v30 + 40 * p_buf;
      uint64_t v58 = *(void *)(v56 + 32);
      int v57 = (uint64_t *)(v56 + 32);
      if (v58)
      {
        uint64_t v10 = v2[1];
        if (v10)
        {
          uint64_t v10 = re::HashTable<unsigned long long,re::MeshRenderPassGroups::RenderPassGroupSortData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v10, v57);
          if (v10 && v88 == v55)
          {
            v106[5] = v90 | 2;
            if (v3 == 5 || !v3)
            {
              if (v86)
              {
                v106[5] = v90 | 6;
                HIDWORD(v107) = *(_DWORD *)v10;
                v106[7] = *(unsigned char *)(v10 + 4);
              }
              uint64_t v10 = re::populateInsideOutsideSortDataForMeshPartDrawContext((uint64_t)&buf, *(void *)(v92 + 24), v10 + 16);
            }
          }
        }
      }
      if (!*v54) {
        goto LABEL_92;
      }
      uint64_t v10 = v2[1];
      if (!v10) {
        goto LABEL_92;
      }
      uint64_t v10 = re::HashTable<unsigned long long,re::MeshRenderPassGroups::RenderPassGroupSortData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v10, v54);
      if (!v10) {
        goto LABEL_92;
      }
      int v60 = *(unsigned __int8 *)(v10 + 5);
      if (*(unsigned char *)(v10 + 5))
      {
        if (v60 == 3)
        {
          if (v88 != v55 && !*(unsigned char *)(v10 + 7)) {
            goto LABEL_85;
          }
        }
        else if (v60 != 2 || v88 != v55)
        {
LABEL_85:
          char v62 = *(unsigned char *)(v10 + 80);
          if (v62) {
            char v62 = 16 * *(unsigned char *)(v10 + 8);
          }
          goto LABEL_91;
        }
      }
      char v62 = 16;
LABEL_91:
      v106[5] = v106[5] & 0xCF | v62 | (32 * *(unsigned char *)(v10 + 6)) | 8;
      v106[8] = *(unsigned char *)(v10 + 9);
      LODWORD(v107) = *(_DWORD *)v10;
      v106[6] = *(unsigned char *)(v10 + 4);
      uint64_t v10 = re::populateInsideOutsideSortDataForMeshPartDrawContext((uint64_t)&buf, *(void *)(v92 + 24), v10 + 16);
      goto LABEL_92;
    }
LABEL_118:
    dispatch_once(&re::MaterialParameterTable::kFadeNameHash(void)::once, &__block_literal_global_4_1);
    goto LABEL_64;
  }
LABEL_92:
  LODWORD(v25) = *(_DWORD *)(v12 + 152);
LABEL_93:
  unsigned int v63 = *(_DWORD *)(a1 + 218);
  if (*(float *)&v25 == 1.0 && v63 < 0x10000) {
    char v64 = 0;
  }
  else {
    char v64 = re::useDitherFade((re *)v10) | (2 * ((v63 & 0xFFFF0000) != 0));
  }
  long long v65 = *(_OWORD *)(a1 + 392);
  *(void *)(v12 + 88) = *(void *)(a1 + 208);
  *(_OWORD *)(v12 + 96) = v65;
  *(unsigned char *)(v12 + 112) = v64;
  if (v17)
  {
    int v67 = *(_DWORD *)(v17 + 216);
    int v66 = *(_DWORD *)(v17 + 220);
  }
  else
  {
    int v66 = 0;
    int v67 = 0;
  }
  int v68 = (*(_DWORD *)(a2[4] + 544) ^ v67) & ~v66 | v67 & v66;
  LODWORD(v110) = v68;
  unsigned int v69 = (re::MaterialRenderFlags *)a2[11];
  if (v69)
  {
    unint64_t v70 = re::MaterialRenderFlags::flattenToOverrideFlags(v69);
    int v68 = (v68 ^ v70) & ~HIDWORD(v70) | HIDWORD(v70) & v70;
    LODWORD(v110) = v68;
  }
  int v71 = (_DWORD *)a2[10];
  if (v71) {
    LODWORD(v110) = (*v71 ^ v68) & ~*(_DWORD *)(a2[10] + 4) | *v71 & *(_DWORD *)(a2[10] + 4);
  }
  uint64_t v72 = *(void *)(a1 + 376);
  uint64_t v73 = *(void *)(a1 + 384);
  if (!*((unsigned char *)a2 + 128)) {
    return re::bucketMeshPart((uint64_t)&buf, (int8x16_t *)v12, v72, v73, (_WORD *)(a1 + 368));
  }
  re::bucketVFXMeshPart((uint64_t)&buf, v12, v72, v73, (void *)a2[17]);
  return result;
}

uint64_t re::populateInsideOutsideSortDataForMeshPartDrawContext(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)a3)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)result;
    double result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 32, 16);
    *(_OWORD *)double result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    long long v6 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)double result = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(result + 16) = v6;
    *(void *)(v4 + 168) = result;
    if ((*(unsigned char *)(v4 + 153) & 1) == 0) {
      *(unsigned char *)(v4 + 157) = *(void *)(a3 + 48) == v5;
    }
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,re::MeshRenderPassGroups::RenderPassGroupSortData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *a2;
  unint64_t v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(void *)(v6 + (v4 << 7) + 16) != v2)
  {
    while (1)
    {
      uint64_t v4 = *(_DWORD *)(v6 + (v4 << 7) + 8) & 0x7FFFFFFF;
      if (v4 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v6 + (v4 << 7) + 16) == v2) {
        return v6 + (v4 << 7) + 32;
      }
    }
    return 0;
  }
  return v6 + (v4 << 7) + 32;
}

uint64_t re::DrawCallMeshVisitor::visitVFXScene(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 795)) {
    return 0;
  }
  if (*(float *)(a2 + 376) == 0.0 || *(unsigned char *)(a2 + 646) != 0) {
    return 0;
  }
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 200) = *(void *)(a2 + 248);
  re::DrawCallMeshVisitor::visitScene(a1, a2);
  return 1;
}

re::DeformationCommandBuffer *re::DeformationCommandBuffer::DeformationCommandBuffer(re::DeformationCommandBuffer *this, re::RenderManager *a2, const re::mtl::CommandBuffer *a3, re::DeformationFencePool *a4)
{
  *(void *)this = a2;
  *((void *)this + 1) = (char *)a2 + 184;
  *((void *)this + 2) = a3;
  *((void *)this + 3) = a4;
  *((unsigned char *)this + 32) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 22) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((_DWORD *)this + 28) = 1;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 15) = 0;
  *((_DWORD *)this + 36) = 0;
  *((void *)this + 23) = 0;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  return this;
}

uint64_t re::DeformationCommandBuffer::setEncoderType(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(unsigned __int8 *)(result + 32);
  if (v3 == a2) {
    return result;
  }
  unsigned int v4 = a2;
  uint64_t v5 = result;
  if (!*(unsigned char *)(result + 32))
  {
LABEL_8:
    int v7 = 0;
    if (!v4) {
      goto LABEL_24;
    }
    goto LABEL_12;
  }
  if (v3 == 2)
  {
    [*(id *)(result + 184) updateFence:**(void **)(result + 160)];
    uint64_t v8 = *(void *)v5;
    id v26 = *(id *)(v5 + 184);
    re::RenderManager::sampleComputeEncoderMTLCounterEnd(v8, &v26, 2u);

    [*(id *)(v5 + 184) endEncoding];
    unint64_t v9 = *(void **)(v5 + 184);
    *(void *)(v5 + 184) = 0;

    goto LABEL_8;
  }
  if (v3 != 1)
  {
    re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Unknown encoder type: %u", "!\"Unreachable code\"", "setEncoderType", 276, v3);
    _os_crash();
    __break(1u);
    goto LABEL_32;
  }
  if (a2 == 2)
  {
    Fence = (void *)re::DeformationFencePool::allocateFence(*(re::DeformationFencePool **)(result + 24));
    int v7 = Fence;
  }
  else
  {
    int v7 = 0;
    Fence = *(void **)(result + 160);
  }
  [*(id *)(v5 + 176) updateFence:*Fence];
  [*(id *)(v5 + 176) endEncoding];
  uint64_t v10 = *(void **)(v5 + 176);
  *(void *)(v5 + 176) = 0;

  if (!v4) {
    goto LABEL_24;
  }
LABEL_12:
  if (v4 != 2)
  {
    if (v4 == 1)
    {
      re::mtl::CommandBuffer::makeBlitCommandEncoder(*(id **)(v5 + 16), &v25);
      uint64_t v2 = (id *)(v5 + 176);
      if ((id *)(v5 + 176) != &v25)
      {
        id v11 = v25;
        id v25 = 0;
        id v12 = *v2;
        *uint64_t v2 = v11;
      }
      if (atomic_load_explicit((atomic_uchar *volatile)&qword_26AF960F0, memory_order_acquire)) {
        goto LABEL_17;
      }
      goto LABEL_33;
    }
LABEL_32:
    re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Unknown encoder type: %u", "!\"Unreachable code\"", "setEncoderType", 312, v4);
    _os_crash();
    __break(1u);
LABEL_33:
    if (__cxa_guard_acquire(&qword_26AF960F0))
    {
      unint64_t v22 = re::ns::String::String((re::ns::String *)&_MergedGlobals_400, (re::ns *)"DeformerBlitEncoder");
      __cxa_guard_release((__guard *)v22 + 1);
    }
LABEL_17:
    id v13 = (id)_MergedGlobals_400;
    [*(id *)(v5 + 176) setLabel:v13];

    goto LABEL_22;
  }
  uint64_t v14 = *(void *)v5;
  id v24 = **(id **)(v5 + 16);
  re::RenderManager::makeComputeCommandEncoderWithMTLCounterSampling(v14, &v24, 2u, &v25);
  uint64_t v2 = (id *)(v5 + 184);
  if ((id *)(v5 + 184) != &v25)
  {
    id v15 = v25;
    id v25 = 0;
    id v16 = *v2;
    *uint64_t v2 = v15;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96100, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF96100))
  {
    uint64_t v23 = re::ns::String::String((re::ns::String *)&qword_26AF960F8, (re::ns *)"DeformerEncoder");
    __cxa_guard_release((__guard *)v23 + 1);
  }
  id v17 = (id)qword_26AF960F8;
  [*v2 setLabel:v17];

  if (v7) {
    goto LABEL_23;
  }
LABEL_22:
  int v7 = *(void **)(v5 + 152);
  if (v7) {
LABEL_23:
  }
    [*v2 waitForFence:*v7];
LABEL_24:
  uint64_t v18 = *(void *)(v5 + 136);
  if (v18)
  {
    for (unint64_t i = 0; i != v18; ++i)
    {
      uint64_t v20 = (uint64_t *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](v5 + 96, i);
      if (*v20 != *(void *)(v5 + 160))
      {
        uint64_t v21 = *v20;
        *(void *)re::BucketArray<NS::SharedPtr<MTL::Fence> const*,8ul>::addUninitialized(v5 + 40) = v21;
      }
    }
  }
  re::BucketArray<NS::SharedPtr<MTL::Fence> const*,8ul>::clear(v5 + 96);
  double result = re::BucketArray<NS::SharedPtr<MTL::Fence> const*,8ul>::addUninitialized(v5 + 96);
  *(void *)double result = *(void *)(v5 + 160);
  *(unsigned char *)(v5 + 32) = v4;
  return result;
}

void re::DeformationCommandBuffer::encodeSharedEventForSynchronization(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  re::DeformationCommandBuffer::setEncoderType(a1, 0);
  [**(id **)(a1 + 16) encodeSignalEvent:*a2 value:a3];
  [**(id **)(a1 + 16) encodeWaitForEvent:*a2 value:a4];
  re::mtl::CommandBuffer::makeBlitCommandEncoder(*(id **)(a1 + 16), &v9);
  {
    re::ns::String::String((re::ns::String *)&re::DeformationCommandBuffer::encodeSharedEventForSynchronization(NS::SharedPtr<MTL::SharedEvent> &,unsigned long long,unsigned long long)::$_0::operator() const(void)::s_ns_string, (re::ns *)"DeformerCPUSynchronization");
  }
  id v8 = (id)re::DeformationCommandBuffer::encodeSharedEventForSynchronization(NS::SharedPtr<MTL::SharedEvent> &,unsigned long long,unsigned long long)::$_0::operator() const(void)::s_ns_string;
  [v9 setLabel:v8];

  [v9 updateFence:**(void **)(a1 + 168)];
  [v9 updateFence:**(void **)(a1 + 160)];
  [v9 endEncoding];
}

void re::DeformationCommandBuffer::encodePostDeformationBlits(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 40))
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "first", 761);
    _os_crash();
    __break(1u);
LABEL_15:
    {
      re::ns::String::String((re::ns::String *)&re::DeformationCommandBuffer::encodePostDeformationBlits(re::BucketArray<re::DynamicArray<re::PostDeformationBlit>,8ul> const&)::$_0::operator() const(void)::s_ns_string, (re::ns *)"PostDeformationBlit");
    }
    goto LABEL_4;
  }
  uint64_t v3 = a2;
  uint64_t v2 = a1;
  re::DeformationCommandBuffer::setEncoderType(v2, 0);
  re::mtl::CommandBuffer::makeBlitCommandEncoder(*(id **)(v2 + 16), &v12);
LABEL_4:
  id v4 = (id)re::DeformationCommandBuffer::encodePostDeformationBlits(re::BucketArray<re::DynamicArray<re::PostDeformationBlit>,8ul> const&)::$_0::operator() const(void)::s_ns_string;
  [v12 setLabel:v4];

  [v12 waitForFence:**(void **)(v2 + 168)];
  uint64_t v5 = *(void *)(v3 + 40);
  if (v5)
  {
    BOOL v6 = 0;
    for (unint64_t i = 0; i != v5; ++i)
    {
      uint64_t v9 = *(void *)(v8 + 16);
      if (v9)
      {
        uint64_t v10 = *(void *)(v8 + 32);
        uint64_t v11 = v10 + 48 * v9;
        do
        {
          [v12 copyFromBuffer:*(void *)v10 sourceOffset:*(void *)(v10 + 8) toBuffer:*(void *)(v10 + 16) destinationOffset:*(void *)(v10 + 24) size:*(void *)(v10 + 32)];
          BOOL v6 = (*(unsigned __int8 *)(v10 + 40) | v6) != 0;
          v10 += 48;
        }
        while (v10 != v11);
      }
    }
    if (v6) {
      [v12 updateFence:**(void **)(v2 + 160)];
    }
  }
  [v12 endEncoding];
}

uint64_t re::DeformationCommandBuffer::endDeformation(uint64_t this, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(this + 32);
  if (*(unsigned char *)(this + 32))
  {
    if (v2 == 2)
    {
      uint64_t v3 = (void **)(this + 184);
    }
    else
    {
      if (v2 != 1)
      {
        re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Unknown encoder type: %u", "!\"Unreachable code\"", "endDeformation", 115, *(unsigned __int8 *)(this + 32));
        this = _os_crash();
        __break(1u);
        return this;
      }
      uint64_t v3 = (void **)(this + 176);
    }
    id v4 = *(uint64_t **)(this + 168);
    uint64_t v5 = *v3;
    uint64_t v6 = *v4;
    return [v5 updateFence:v6];
  }
  return this;
}

void *re::DeformationCommandBuffer::beginDeformationPass(re::DeformationCommandBuffer *this)
{
  *((void *)this + 21) = re::DeformationFencePool::allocateFence(*((re::DeformationFencePool **)this + 3));
  *((void *)this + 20) = re::DeformationFencePool::allocateFence(*((re::DeformationFencePool **)this + 3));
  double result = (void *)re::BucketArray<NS::SharedPtr<MTL::Fence> const*,8ul>::addUninitialized((uint64_t)this + 96);
  void *result = *((void *)this + 20);
  return result;
}

uint64_t re::DeformationCommandBuffer::endDeformationPass(uint64_t this, uint64_t a2)
{
  uint64_t v2 = this;
  int v3 = *(unsigned __int8 *)(this + 32);
  if (*(unsigned char *)(this + 32))
  {
    if (v3 != 2)
    {
      if (v3 == 1) {
        goto LABEL_8;
      }
      re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Unknown encoder type: %u", "!\"Unreachable code\"", "endDeformationPass", 161, *(unsigned __int8 *)(this + 32));
      _os_crash();
      __break(1u);
    }
    if ([**(id **)(v2 + 8) supportsFamily:1003])
    {
      [*(id *)(v2 + 184) memoryBarrierWithScope:1];
      this = [*(id *)(v2 + 184) updateFence:**(void **)(v2 + 160)];
      goto LABEL_9;
    }
    [*(id *)(v2 + 184) updateFence:**(void **)(v2 + 160)];
LABEL_8:
    this = re::DeformationCommandBuffer::setEncoderType(v2, 0);
  }
LABEL_9:
  *(void *)(v2 + 152) = *(void *)(v2 + 160);
  *(void *)(v2 + 160) = 0;
  return this;
}

uint64_t re::DeformationCommandBuffer::finalizeFinalEncoder(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 80) + *(void *)(result + 136))
  {
    uint64_t v2 = result;
    uint64_t v3 = result + 40;
    *(void *)(result + 152) = 0;
    *(void *)(result + 160) = a2;
    uint64_t v4 = *(unsigned __int8 *)(result + 32);
    if (!*(unsigned char *)(result + 32))
    {
      re::DeformationCommandBuffer::setEncoderType(result, 1);
      uint64_t v4 = *(unsigned __int8 *)(v2 + 32);
    }
    if (v4 == 2)
    {
      uint64_t v7 = *(void *)(v2 + 80);
      if (v7)
      {
        for (unint64_t i = 0; i != v7; ++i)
          objc_msgSend(*(id *)(v2 + 184), "waitForFence:", **(void **)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](v3, i));
      }
    }
    else
    {
      if (v4 != 1)
      {
        re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Unknown encoder type: %u", "!\"Unreachable code\"", "finalizeFinalEncoder", 209, v4);
        double result = _os_crash();
        __break(1u);
        return result;
      }
      uint64_t v5 = *(void *)(v2 + 80);
      if (v5)
      {
        for (unint64_t j = 0; j != v5; ++j)
          objc_msgSend(*(id *)(v2 + 176), "waitForFence:", **(void **)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](v3, j));
      }
    }
    double result = re::DeformationCommandBuffer::setEncoderType(v2, 0);
    *(void *)(v2 + 160) = 0;
  }
  return result;
}

uint64_t re::SmoothDampener::smooth(uint64_t a1, uint64_t a2, uint64_t a3, float a4, float a5, float a6)
{
  uint64_t v6 = 0;
  float v7 = 2.0 / a4;
  float v8 = 1.0
     / (float)((float)((float)((float)((float)((float)((float)((float)(2.0 / a4) * a6) * 0.235) + 0.48)
                                     * (float)((float)(2.0 / a4) * a6))
                             + 1.0)
                     * (float)((float)(2.0 / a4) * a6))
             + 1.0);
  float v9 = a4 * a5;
  float v10 = -(float)(a4 * a5);
  do
  {
    float v11 = *(float *)(a1 + v6);
    float v12 = *(float *)(a2 + v6) - v11;
    if (v12 < v10) {
      float v12 = v10;
    }
    if (v9 < v12) {
      float v12 = v9;
    }
    float v13 = *(float *)(a3 + v6);
    float v14 = (float)(v13 + (float)(v7 * v12)) * a6;
    *(float *)(a3 + v6) = v8 * (float)(v13 + (float)((float)-v7 * v14));
    *(float *)((char *)&v16 + v6) = v11 + (float)((float)(v12 + v14) * v8);
    v6 += 4;
  }
  while (v6 != 12);
  return v16;
}

void *re::introspect_REMeshOffsetsBlendingMode(re *this, const re::IntrospectionBase *a2)
{
  int v2 = (int)this;
  {
    if (v9)
    {
      float v10 = re::introspectionAllocator(v9);
      float v11 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 24, 8);
      *(_DWORD *)float v11 = 1;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = "Additive";
      re::introspect_REMeshOffsetsBlendingMode(BOOL)::enumAttributes = (uint64_t)v11;
      float v12 = re::introspectionAllocator(v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 24, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = 1;
      *(void *)(v13 + 16) = "Override";
      qword_2687A0358 = v13;
    }
  }
  {
    float v14 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::introspect_REMeshOffsetsBlendingMode(BOOL)::info, "REMeshOffsetsBlendingMode", 4, 4, 1, 1);
    *(void *)float v14 = &unk_26E715E00;
    *((void *)v14 + 8) = &re::introspect_REMeshOffsetsBlendingMode(BOOL)::enumTable;
    *((_DWORD *)v14 + 4) = 9;
  }
  if (v2)
  {
    if (re::introspect_REMeshOffsetsBlendingMode(BOOL)::isInitialized) {
      return &re::introspect_REMeshOffsetsBlendingMode(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v16);
    char v3 = re::introspect_REMeshOffsetsBlendingMode(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v16);
    if (v3) {
      return &re::introspect_REMeshOffsetsBlendingMode(BOOL)::info;
    }
    uint64_t v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
    if (re::introspect_REMeshOffsetsBlendingMode(BOOL)::isInitialized)
    {
LABEL_9:
      float v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
      return &re::introspect_REMeshOffsetsBlendingMode(BOOL)::info;
    }
  }
  re::introspect_REMeshOffsetsBlendingMode(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::introspect_REMeshOffsetsBlendingMode(BOOL)::info, a2);
  v15[0] = 0x3D7D20A70EDE8D68;
  v15[1] = (uint64_t)"REMeshOffsetsBlendingMode";
  xmmword_2687A0388 = v16;
  re::StringID::destroyString((re::StringID *)v15);
  if ((v2 & 1) == 0) {
    goto LABEL_9;
  }
  return &re::introspect_REMeshOffsetsBlendingMode(BOOL)::info;
}

void *re::allocInfo_MeshLodLevelInfo(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96110, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF96110))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF96228, "MeshLodLevelInfo");
    __cxa_guard_release(&qword_26AF96110);
  }
  return &unk_26AF96228;
}

void re::initInfo_MeshLodLevelInfo(re *this, re::IntrospectionBase *a2)
{
  v18[0] = 0xCB9A0A380331B57CLL;
  v18[1] = "MeshLodLevelInfo";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96118, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF96118);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      float v7 = re::introspect_float((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "minScreenArea";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF96188 = v8;
      float v9 = re::introspectionAllocator((re *)v8);
      float v11 = re::introspect_float((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "maxViewDepth";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x400000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF96190 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      id v15 = re::introspect_uint32_t((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "meshPartEnd";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x800000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF96198 = v16;
      __cxa_guard_release(&qword_26AF96118);
    }
  }
  *((void *)this + 2) = 0xC00000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF96188;
  *((void *)this + 9) = re::internal::defaultConstruct<re::MeshLodLevelInfo>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::MeshLodLevelInfo>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::MeshLodLevelInfo>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::MeshLodLevelInfo>;
  re::IntrospectionRegistry::add(this, v3);
  long long v17 = v19;
}

uint64_t re::introspect_MeshLodLevelInfo(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshLodLevelInfo", (uint64_t (*)(re::internal *))re::allocInfo_MeshLodLevelInfo, (re::IntrospectionBase *(*)(void))re::initInfo_MeshLodLevelInfo, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::MeshLodLevelInfo>, this);
}

void re::introspect_MeshLodSelectStrategy(re *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96120, memory_order_acquire) & 1) == 0)
  {
    id v24 = (re *)__cxa_guard_acquire(&qword_26AF96120);
    if (v24)
    {
      id v25 = re::introspectionAllocator(v24);
      id v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)id v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "ScreenArea";
      qword_26AF96158 = (uint64_t)v26;
      uint64_t v27 = re::introspectionAllocator(v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + 8) = 1;
      *(void *)(v28 + 16) = "ViewDepth";
      qword_26AF96160 = v28;
      __cxa_guard_release(&qword_26AF96120);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96128, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF96128))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF961E0, "MeshLodSelectStrategy", 1, 1, 1, 1);
    qword_26AF961E0 = (uint64_t)&unk_26E715E00;
    qword_26AF96220 = (uint64_t)&re::introspect_MeshLodSelectStrategy(BOOL)::enumTable;
    dword_26AF961F0 = 9;
    __cxa_guard_release(&qword_26AF96128);
  }
  if ((_MergedGlobals_401 & 1) == 0)
  {
    _MergedGlobals_401 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF961E0, a2);
    uint64_t v30 = 0x55B1F1035B4A3746;
    int v31 = "MeshLodSelectStrategy";
    v34[0] = 0x31CD534126;
    v34[1] = "uint8_t";
    int v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v34);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v34);
      uint64_t v4 = (unsigned int *)qword_26AF96220;
      v33[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v34, &v30, 1, 1, (uint64_t)v33);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            float v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  uint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v32.char var0 = 2 * v10;
            v32.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v34, v14, &v32);
            re::StringID::destroyString((re::StringID *)&v32);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              long long v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v32.char var0 = 2 * v18;
              v32.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v34, v22, &v32);
              re::StringID::destroyString((re::StringID *)&v32);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v34, v23);
      xmmword_26AF96200 = (__int128)v32;
      re::StringID::destroyString((re::StringID *)&v30);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v34);
      re::internal::assertLog((re::internal *)5, v29, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "MeshLodSelectStrategy", v30, v31);
      _os_crash();
      __break(1u);
    }
  }
}

void *re::allocInfo_MeshLodSelectOptions(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96130, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF96130))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF962A0, "MeshLodSelectOptions");
    __cxa_guard_release(&qword_26AF96130);
  }
  return &unk_26AF962A0;
}

void re::initInfo_MeshLodSelectOptions(re *this, re::IntrospectionBase *a2)
{
  v13[0] = 0x9768D638359290DCLL;
  v13[1] = "MeshLodSelectOptions";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96138, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF96138);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      re::introspect_MeshLodSelectStrategy(v5, v6);
      uint64_t v7 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "strategy";
      *(void *)(v7 + 16) = &qword_26AF961E0;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF96168 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_float((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "bias";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x400000004;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF96170 = v11;
      __cxa_guard_release(&qword_26AF96138);
    }
  }
  *((void *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF96168;
  *((void *)this + 9) = re::internal::defaultConstruct<re::MeshLodSelectOptions>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::MeshLodSelectOptions>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::MeshLodSelectOptions>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::MeshLodSelectOptions>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

void re::internal::defaultConstruct<re::MeshLodSelectOptions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a3 = 0;
  *(_DWORD *)(a3 + 4) = 1065353216;
}

uint64_t re::internal::defaultConstructV2<re::MeshLodSelectOptions>(uint64_t result)
{
  *(unsigned char *)double result = 0;
  *(_DWORD *)(result + 4) = 1065353216;
  return result;
}

uint64_t re::introspect_MeshLodSelectOptions(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshLodSelectOptions", (uint64_t (*)(re::internal *))re::allocInfo_MeshLodSelectOptions, (re::IntrospectionBase *(*)(void))re::initInfo_MeshLodSelectOptions, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::MeshLodSelectOptions>, this);
}

void *re::allocInfo_MeshLodSelectOverrideOptions(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96140, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF96140))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF96318, "MeshLodSelectOverrideOptions");
    __cxa_guard_release(&qword_26AF96140);
  }
  return &unk_26AF96318;
}

void re::initInfo_MeshLodSelectOverrideOptions(re *this, re::IntrospectionBase *a2)
{
  v13[0] = 0x825FEA2A55FEAE04;
  v13[1] = "MeshLodSelectOverrideOptions";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96148, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF96148);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      re::IntrospectionInfo<re::Optional<re::MeshLodSelectStrategy>>::get(v5, v6);
      uint64_t v7 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "strategy";
      *(void *)(v7 + 16) = &qword_26AF961A0;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0x100000001;
      *(_DWORD *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF96178 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::IntrospectionInfo<re::Optional<float>>::get(1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "bias";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x400000004;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF96180 = v11;
      __cxa_guard_release(&qword_26AF96148);
    }
  }
  *((void *)this + 2) = 0xC00000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF96178;
  *((void *)this + 9) = re::internal::defaultConstruct<re::MeshLodSelectOverrideOptions>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::MeshLodSelectOverrideOptions>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::MeshLodSelectOverrideOptions>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::MeshLodSelectOverrideOptions>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

void re::IntrospectionInfo<re::Optional<re::MeshLodSelectStrategy>>::get(re *a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96150, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF96150);
    if (a1)
    {
      re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_26AF961A0);
      qword_26AF961A0 = (uint64_t)&unk_26E711B48;
      __cxa_guard_release(&qword_26AF96150);
    }
  }
  if ((byte_26AF96109 & 1) == 0)
  {
    re::introspect_MeshLodSelectStrategy(a1, a2);
    if ((byte_26AF96109 & 1) == 0)
    {
      byte_26AF96109 = 1;
      int v2 = *(_DWORD *)&algn_26AF961F4[4];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF961A0, 0);
      *(void *)&algn_26AF961A8[8] = 0x20000000DLL;
      *(_DWORD *)&algn_26AF961A8[16] = v2;
      *(_WORD *)&algn_26AF961A8[20] = 0;
      *(void *)&xmmword_26AF961C0 = 0;
      *((void *)&xmmword_26AF961C0 + 1) = 0xFFFFFFFFLL;
      *(void *)algn_26AF961D0 = &qword_26AF961E0;
      *(void *)&algn_26AF961D0[8] = 0;
      qword_26AF961A0 = (uint64_t)&unk_26E711B48;
      re::IntrospectionRegistry::add(v3, v4);
      re::getPrettyTypeName((re *)&qword_26AF961A0, (const re::IntrospectionBase *)&v13);
      if (v14) {
        uint64_t v5 = *(const char **)&v15[7];
      }
      else {
        uint64_t v5 = v15;
      }
      if (v13 && (v14 & 1) != 0) {
        (*(void (**)(void))(*(void *)v13 + 40))();
      }
      long long v10 = xmmword_26AF96200;
      unint64_t v6 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v11);
      if (v6)
      {
        uint64_t v7 = *v6;
        *((void *)&v9 + 1) = v7;
      }
      else
      {
        long long v12 = v10;
        re::TypeBuilder::beginOptionalType((uint64_t)&v13, v11, 2uLL, 1uLL, &v12);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v13, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::MeshLodSelectStrategy>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::MeshLodSelectStrategy>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v13, v8);
      }
      xmmword_26AF961C0 = v9;
      re::StringID::destroyString((re::StringID *)v11);
    }
  }
}

void re::internal::defaultConstruct<re::MeshLodSelectOverrideOptions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a3 = 1;
  *(unsigned char *)(a3 + 4) = 0;
}

uint64_t re::internal::defaultConstructV2<re::MeshLodSelectOverrideOptions>(uint64_t result)
{
  *(_WORD *)double result = 1;
  *(unsigned char *)(result + 4) = 0;
  return result;
}

uint64_t re::introspect_MeshLodSelectOverrideOptions(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshLodSelectOverrideOptions", (uint64_t (*)(re::internal *))re::allocInfo_MeshLodSelectOverrideOptions, (re::IntrospectionBase *(*)(void))re::initInfo_MeshLodSelectOverrideOptions, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::MeshLodSelectOverrideOptions>, this);
}

uint64_t re::selectMeshLodByScreenArea(uint64_t a1, uint64_t a2, float *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a1 + 80);
  if (v6)
  {
    float32x4_t v7 = *(float32x4_t *)(a1 + 16);
    float32x4_t v8 = *(float32x4_t *)(a1 + 32);
    uint32x4_t v9 = (uint32x4_t)vcgtq_f32(v7, v8);
    v9.i32[3] = v9.i32[2];
    if ((vmaxvq_u32(v9) & 0x80000000) != 0)
    {
      float32x4_t v11 = 0uLL;
    }
    else
    {
      v10.i64[0] = 0x3F0000003F000000;
      v10.i64[1] = 0x3F0000003F000000;
      float32x4_t v11 = vmulq_f32(vaddq_f32(v7, v8), v10);
    }
    float32x4_t v13 = *(float32x4_t *)(a2 + 16);
    float32x4_t v14 = *(float32x4_t *)(a2 + 32);
    float32x4_t v15 = *(float32x4_t *)(a2 + 48);
    float32x4_t v16 = vaddq_f32(v15, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)a2, v11.f32[0]), v13, *(float32x2_t *)v11.f32, 1), v14, v11, 2));
    float32x4_t v17 = vaddq_f32(v15, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)a2, v7.f32[0]), v13, *(float32x2_t *)v7.f32, 1), v14, v7, 2));
    float32x4_t v18 = vdivq_f32(v16, (float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 3));
    float32x4_t v19 = vsubq_f32(vdivq_f32(v17, (float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 3)), v18);
    float32x4_t v20 = vmulq_f32(v19, v19);
    float32x4_t v21 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1)));
    float32x4_t v22 = vmulq_f32(v18, v18);
    float32x4_t v23 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1)));
    double v25 = COERCE_DOUBLE(vmovn_s32(vcgtq_f32(v23, v21)));
    char v24 = LOBYTE(v25);
    LODWORD(v25) = 1.0;
    float v26 = 1.0;
    if (v24)
    {
      float v27 = a3[1] / (float)((float)(a3[5] - a3[6]) * 0.5);
      float v28 = (float)((float)((float)(v27 * (float)(v27 * 3.1416)) * v21.f32[0]) / vsubq_f32(v23, v21).f32[0]) * 0.25;
      if (v28 > 1.0) {
        float v28 = 1.0;
      }
      if (v28 >= 0.0) {
        float v26 = v28;
      }
      else {
        float v26 = 0.0;
      }
    }
    float v29 = *(float *)(a4 + 4);
    if (v29 != 0.0) {
      *(float *)&double v25 = v26 / v29;
    }
    if (v6)
    {
      uint64_t v12 = 0;
      uint64_t v30 = *(float **)(a1 + 88);
      while (v6 != v12)
      {
        if (*(float *)&v25 >= *v30) {
          goto LABEL_22;
        }
        ++v12;
        v30 += 3;
        if (*(void *)(a1 + 80) == v12) {
          return 0;
        }
      }
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_28;
    }
    LODWORD(v12) = 0;
LABEL_22:
    if (v12 == v6) {
      return 0;
    }
    if (!a6) {
      goto LABEL_29;
    }
  }
  else
  {
    if (!a6)
    {
LABEL_28:
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
      _os_crash();
      __break(1u);
LABEL_29:
      re::internal::assertLog((re::internal *)6, a2, v25, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
      _os_crash();
      __break(1u);
    }
    LOBYTE(v12) = 0;
  }
  *(unsigned char *)a5 = v12;
  uint64_t result = 1;
  *(unsigned char *)(a5 + 1) = 1;
  *(_WORD *)(a5 + 2) = -1;
  return result;
}

uint64_t re::selectMeshLodByViewDepth(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a1[5].i64[0];
  if (v5)
  {
    float32x4_t v6 = a1[1];
    float32x4_t v7 = a1[2];
    uint32x4_t v8 = (uint32x4_t)vcgtq_f32(v6, v7);
    v8.i32[3] = v8.i32[2];
    if ((vmaxvq_u32(v8) & 0x80000000) != 0)
    {
      v11.i64[0] = 0;
      v11.i32[2] = 0;
      if (v5)
      {
LABEL_4:
        uint64_t v12 = 0;
        float32x4_t v13 = *(float32x4_t *)(a2 + 8);
        v13.i32[1] = *(_DWORD *)(a2 + 24);
        v13.i32[2] = *(_DWORD *)(a2 + 40);
        v13.i32[3] = *(_DWORD *)(a2 + 56);
        v11.i32[3] = 1.0;
        float32x4_t v11 = vmulq_f32(v13, v11);
        *(float32x2_t *)v11.f32 = vadd_f32(*(float32x2_t *)v11.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL));
        v11.f32[0] = *(float *)(a3 + 4) * fabsf(vaddv_f32(*(float32x2_t *)v11.f32));
        float32x4_t v14 = (float *)(a1[5].i64[1] + 4);
        while (v5 != v12)
        {
          if (v11.f32[0] <= *v14) {
            goto LABEL_13;
          }
          ++v12;
          v14 += 3;
          if (a1[5].i64[0] == v12) {
            return 0;
          }
        }
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_19;
      }
    }
    else
    {
      float32x4_t v9 = vaddq_f32(v6, v7);
      v10.i64[0] = 0x3F0000003F000000;
      v10.i64[1] = 0x3F0000003F000000;
      float32x4_t v11 = vmulq_f32(v9, v10);
      if (v5) {
        goto LABEL_4;
      }
    }
    LODWORD(v12) = 0;
LABEL_13:
    if (v12 == v5) {
      return 0;
    }
    if (!a5) {
      goto LABEL_20;
    }
  }
  else
  {
    if (!a5)
    {
LABEL_19:
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
      _os_crash();
      __break(1u);
LABEL_20:
      re::internal::assertLog((re::internal *)6, a2, *(double *)v11.i64, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
      _os_crash();
      __break(1u);
    }
    LOBYTE(v12) = 0;
  }
  *(unsigned char *)a4 = v12;
  uint64_t result = 1;
  *(unsigned char *)(a4 + 1) = 1;
  *(_WORD *)(a4 + 2) = -1;
  return result;
}

void *re::IntrospectionOptional<re::MeshLodSelectStrategy>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::MeshLodSelectStrategy>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionOptional<re::MeshLodSelectStrategy>::construct(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::MeshLodSelectStrategy>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::MeshLodSelectStrategy>::setHasValue(uint64_t a1, unsigned char *a2, int a3)
{
  if (a3)
  {
    if (!*a2) {
      *a2 = 1;
    }
    ++a2;
  }
  else if (!*a2)
  {
    return;
  }
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::MeshLodSelectStrategy>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 1;
}

{
  return a2 + 1;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::MeshLodSelectStrategy>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  int v2 = *a1;
  uint64_t result = a1 + 1;
  if (!v2) {
    return 0;
  }
  return result;
}

unsigned char *re::TypeBuilderHelper::registerOptional<re::MeshLodSelectStrategy>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(unsigned char *result, char *a2)
{
  if (a2)
  {
    char v2 = *a2;
    if (!*result) {
      unsigned __int8 *result = 1;
    }
    result[1] = v2;
  }
  else if (*result)
  {
    unsigned __int8 *result = 0;
  }
  return result;
}

uint64_t (***re::DrawCallHandler::registerHandler(uint64_t a1, uint64_t a2, void *a3))(void)
{
  v14[5] = *MEMORY[0x263EF8340];
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32);
  id v6 = a3;
  float32x4_t v7 = (void **)v5(a2, 8, 8);
  *float32x4_t v7 = 0;
  uint32x4_t v8 = _Block_copy(v6);
  float32x4_t v9 = *v7;
  *float32x4_t v7 = v8;

  *(void *)(a1 + 8) = v7;
  uint64_t v11 = re::globalAllocators(v10)[2];
  v14[0] = &unk_26E711BC8;
  v14[3] = v11;
  void v14[4] = v14;
  uint64_t v12 = *(void (**)(uint64_t, void **, void *))(*(void *)a2 + 16);

  v12(a2, v7, v14);
  return re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)v14);
}

void re::internal::Callable<re::DrawCallHandler::registerHandler(re::Allocator &,void({block_pointer})(objc_object  {objcproto23MTLRenderCommandEncoder}*,re::DrawCallHandlerContext))::$_0,void ()(void *)>::~Callable()
{
}

void re::internal::Callable<re::DrawCallHandler::registerHandler(re::Allocator &,void({block_pointer})(objc_object  {objcproto23MTLRenderCommandEncoder}*,re::DrawCallHandlerContext))::$_0,void ()(void *)>::operator()(uint64_t a1, id **a2)
{
}

void *re::internal::Callable<re::DrawCallHandler::registerHandler(re::Allocator &,void({block_pointer})(objc_object  {objcproto23MTLRenderCommandEncoder}*,re::DrawCallHandlerContext))::$_0,void ()(void *)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E711BC8;
  return result;
}

void *re::internal::Callable<re::DrawCallHandler::registerHandler(re::Allocator &,void({block_pointer})(objc_object  {objcproto23MTLRenderCommandEncoder}*,re::DrawCallHandlerContext))::$_0,void ()(void *)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E711BC8;
  return result;
}

uint64_t re::internal::Callable<re::DrawCallHandler::registerHandler(re::Allocator &,void({block_pointer})(objc_object  {objcproto23MTLRenderCommandEncoder}*,re::DrawCallHandlerContext))::$_0,void ()(void *)>::size()
{
  return 16;
}

re::RenderGraph *re::RenderGraph::RenderGraph(re::RenderGraph *this, const char *a2, unint64_t a3, const char *a4, const char *a5, uint64_t a6)
{
  *((void *)this + 4) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = 0;
  *((_DWORD *)this + 6) = 0;
  uint64_t v12 = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity(this, a3);
  ++*((_DWORD *)this + 6);
  *((void *)this + 9) = 0;
  *((void *)this + 10) = "";
  *((void *)this + 11) = 0;
  *((void *)this + 12) = "";
  *((void *)this + 13) = a6;
  return this;
}

void re::RenderGraph::~RenderGraph(re::RenderGraph *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = (void (****)(void))*((void *)this + 4);
    uint64_t v4 = 8 * v2;
    do
    {
      uint64_t v5 = *v3++;
      re::internal::destroyPersistent<re::RenderGraphNodeBase>((re *)"~RenderGraph", 28, v5);
      v4 -= 8;
    }
    while (v4);
  }
  *((void *)this + 2) = 0;
  ++*((_DWORD *)this + 6);
  re::StringID::destroyString((re::RenderGraph *)((char *)this + 88));
  re::StringID::destroyString((re::RenderGraph *)((char *)this + 72));
  re::DynamicString::deinit((re::RenderGraph *)((char *)this + 40));
  re::DynamicArray<unsigned long>::deinit((uint64_t)this);
}

void re::RenderGraph::setup(re::RenderGraph *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  uint64_t v3 = *((void *)this + 2);
  if (v3)
  {
    id v6 = (re::RenderGraphNodeBase **)*((void *)this + 4);
    uint64_t v7 = 8 * v3;
    do
    {
      uint32x4_t v8 = *v6;
      if (*((unsigned char *)*v6 + 64))
      {
        re::RenderGraphBuilder::startNode(a2, *v6);
        (*(void (**)(re::RenderGraphNodeBase *, re::RenderGraphBuilder *, re::RenderGraphDataStore *))(*(void *)v8 + 88))(v8, a2, a3);
        if (*((unsigned char *)v8 + 65)) {
          re::RenderGraphBuilder::handleAutoMsaaTargets(a2);
        }
        if (*((unsigned char *)v8 + 66)) {
          re::RenderGraphBuilder::handleForceResolve(a2);
        }
        if (*((unsigned char *)v8 + 67)) {
          *((unsigned char *)a2 + 595) = 1;
        }
        if (*((unsigned char *)a2 + 609)) {
          re::RenderGraphBuilder::handleProgrammableBlendingTargets(a2);
        }
        re::RenderGraphBuilder::finishNode(a2, v8);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
}

void re::makeCompilingVisualsRenderPipeline(uint64_t a1, unsigned int *a2, unsigned char *a3, void **a4, void **a5)
{
  uint32x4_t v8 = *(uint64_t **)(a1 + 56);
  re::ShaderManager::makeRenderPipelineDescriptor((re::ShaderManager *)v8, &v28);
  objc_msgSend(v28, sel_setLabel_, @"CompilationRenderPipeline");
  objc_msgSend(v28, sel_setRasterSampleCount_, *a2);
  objc_msgSend(v28, sel_setInputPrimitiveTopology_, 3);
  uint64_t v21 = a1;
  if (*(unsigned char *)(a1 + 302)) {
    objc_msgSend(v28, sel_setMaxVertexAmplificationCount_, 2);
  }
  uint64_t v9 = 0;
  float32x4_t v10 = a2 + 1;
  do
  {
    if (v10[v9])
    {
      objc_msgSend(objc_msgSend(objc_msgSend(v28, sel_colorAttachments), sel_objectAtIndexedSubscript_, v9), sel_setPixelFormat_, (int)v10[v9]);
      objc_msgSend(objc_msgSend(objc_msgSend(v28, sel_colorAttachments), sel_objectAtIndexedSubscript_, v9), sel_setBlendingEnabled_, 0);
      objc_msgSend(objc_msgSend(objc_msgSend(v28, sel_colorAttachments), sel_objectAtIndexedSubscript_, v9), sel_setWriteMask_, 15);
    }
    ++v9;
  }
  while (v9 != 8);
  unsigned int v11 = a2[9];
  if (v11 - 250 > 0xA || ((1 << (v11 + 6)) & 0x425) == 0)
  {
    int v13 = 0;
  }
  else
  {
    objc_msgSend(v28, sel_setDepthAttachmentPixelFormat_);
    int v13 = 1;
  }
  int v14 = 0;
  if (a2[10] - 253 <= 9 && ((1 << (*((unsigned char *)a2 + 40) + 3)) & 0x385) != 0)
  {
    objc_msgSend(v28, sel_setStencilAttachmentPixelFormat_);
    int v14 = 1;
  }
  id v15 = objc_msgSend(objc_msgSend(MEMORY[0x263F128A0], sel_alloc), sel_init);
  float32x4_t v16 = v15;
  if (v13)
  {
    objc_msgSend(v15, sel_setDepthCompareFunction_, 7);
    objc_msgSend(v16, sel_setDepthWriteEnabled_, 1);
  }
  if (v14)
  {
    if (*a3)
    {
      id v17 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A20], sel_alloc), sel_init);
      objc_msgSend(v17, sel_setReadMask_, a3[1]);
      objc_msgSend(v17, sel_setWriteMask_, a3[2]);
      objc_msgSend(v17, sel_setStencilCompareFunction_, a3[3]);
      objc_msgSend(v17, sel_setStencilFailureOperation_, a3[4]);
      objc_msgSend(v17, sel_setDepthFailureOperation_, a3[5]);
      objc_msgSend(v17, sel_setDepthStencilPassOperation_, a3[6]);
      objc_msgSend(v16, sel_setFrontFaceStencil_, v17);
      if (v17) {
    }
      }
    if (a3[8])
    {
      id v18 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A20], sel_alloc), sel_init);
      objc_msgSend(v18, sel_setReadMask_, a3[9]);
      objc_msgSend(v18, sel_setWriteMask_, a3[10]);
      objc_msgSend(v18, sel_setStencilCompareFunction_, a3[11]);
      objc_msgSend(v18, sel_setStencilFailureOperation_, a3[12]);
      objc_msgSend(v18, sel_setDepthFailureOperation_, a3[13]);
      objc_msgSend(v18, sel_setDepthStencilPassOperation_, a3[14]);
      objc_msgSend(v16, sel_setBackFaceStencil_, v18);
      if (v18) {
    }
      }
  }
  id v27 = objc_msgSend(*(id *)(v21 + 184), sel_newDepthStencilStateWithDescriptor_, v16);
  NS::SharedPtr<MTL::Texture>::operator=(a5, &v27);
  if (v27) {

  }
  re::ShaderManager::makeFunctionDescriptor((re::ShaderManager *)v8, &v27);
  float32x4_t v19 = NSString;
  objc_msgSend(v27, sel_setName_, objc_msgSend(NSString, sel_stringWithCString_encoding_, "vsCompilingVisuals", 4));
  re::ShaderManager::makeFunctionWithDescriptor((uint64_t)v8, v8[32], &v27, &v26);
  re::ShaderManager::makeFunctionDescriptor((re::ShaderManager *)v8, &v25);
  objc_msgSend(v25, sel_setName_, objc_msgSend(v19, sel_stringWithCString_encoding_, "fsCompilingVisuals", 4));
  re::ShaderManager::makeFunctionWithDescriptor((uint64_t)v8, v8[32], &v25, &v24);
  objc_msgSend(v28, sel_setVertexFunction_, v26);
  objc_msgSend(v28, sel_setFragmentFunction_, v24);
  re::mtl::Device::makeRenderPipelineState((id *)(v21 + 184), (uint64_t)v28, &v23);
  NS::SharedPtr<MTL::Texture>::operator=(a4, &v23);
  if (v23) {

  }
  if (v24) {
  if (v25)
  }

  if (v26) {
  if (v27)
  }

  if (v16) {
  if (v28)
  }
}

void *re::allocInfo_DeformationDefinition(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96398, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF96398))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF96420, "DeformationDefinition");
    __cxa_guard_release(&qword_26AF96398);
  }
  return &unk_26AF96420;
}

void re::initInfo_DeformationDefinition(re *this, re::IntrospectionBase *a2)
{
  v14[0] = 0x6DEEB11F44CBF546;
  v14[1] = "DeformationDefinition";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF963A0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF963A0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::StringID>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "deformerName";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF963D0 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      unsigned int v11 = re::IntrospectionInfo<re::FixedArray<unsigned char>>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "deformationOptions";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x1000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF963D8 = v12;
      __cxa_guard_release(&qword_26AF963A0);
    }
  }
  *((void *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF963D0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::DeformationDefinition>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::DeformationDefinition>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::DeformationDefinition>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::DeformationDefinition>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

void re::internal::defaultConstruct<re::DeformationDefinition>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  a3[1] = "";
  a3[3] = 0;
  a3[4] = 0;
  a3[2] = 0;
}

void re::internal::defaultDestruct<re::DeformationDefinition>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  re::FixedArray<CoreIKTransform>::deinit(a3 + 2);
  re::StringID::destroyString((re::StringID *)a3);
}

void *re::internal::defaultConstructV2<re::DeformationDefinition>(void *result)
{
  void *result = 0;
  result[1] = "";
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

void re::internal::defaultDestructV2<re::DeformationDefinition>(uint64_t *a1)
{
  re::FixedArray<CoreIKTransform>::deinit(a1 + 2);
  re::StringID::destroyString((re::StringID *)a1);
}

void *re::allocInfo_DeformationStackDefinition(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF963B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF963B0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF96498, "DeformationStackDefinition");
    __cxa_guard_release(&qword_26AF963B0);
  }
  return &unk_26AF96498;
}

void re::initInfo_DeformationStackDefinition(re *this, re::IntrospectionBase *a2)
{
  v8[0] = 0x9F611EC88668AD56;
  v8[1] = "DeformationStackDefinition";
  re::StringID::destroyString((re::StringID *)v8);
  *((_OWORD *)this + 2) = v9;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF963C0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF963C0);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      re::IntrospectionInfo<re::DynamicArray<re::DeformationDefinition>>::get(v5);
      uint64_t v6 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v6 = 1;
      *(void *)(v6 + 8) = "deformationStack";
      *(void *)(v6 + 16) = &qword_26AF963E0;
      *(void *)(v6 + 24) = 0;
      *(void *)(v6 + 32) = 1;
      *(_DWORD *)(v6 + 40) = 0;
      *(void *)(v6 + 48) = 0;
      *(void *)(v6 + 56) = 0;
      *(_DWORD *)(v6 + 64) = 0;
      qword_26AF963B8 = v6;
      __cxa_guard_release(&qword_26AF963C0);
    }
  }
  *((void *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF963B8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::DeformationStackDefinition>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::DeformationStackDefinition>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::DeformationStackDefinition>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::DeformationStackDefinition>;
  re::IntrospectionRegistry::add(this, v3);
  long long v7 = v9;
}

void re::IntrospectionInfo<re::DynamicArray<re::DeformationDefinition>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF963C8, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF963C8);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF963E0);
      qword_26AF963E0 = (uint64_t)&unk_26E711C20;
      __cxa_guard_release(&qword_26AF963C8);
    }
  }
  if ((_MergedGlobals_402 & 1) == 0)
  {
    id v1 = (void *)qword_26AF963A8;
    if (qword_26AF963A8
      || (id v1 = re::allocInfo_DeformationDefinition(a1),
          qword_26AF963A8 = (uint64_t)v1,
          re::initInfo_DeformationDefinition((re *)v1, v2),
          (_MergedGlobals_402 & 1) == 0))
    {
      _MergedGlobals_402 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF963E0, 0);
      qword_26AF963F0 = 0x2800000003;
      dword_26AF963F8 = v3;
      word_26AF963FC = 0;
      *(void *)&xmmword_26AF96400 = 0;
      *((void *)&xmmword_26AF96400 + 1) = 0xFFFFFFFFLL;
      qword_26AF96410 = (uint64_t)v1;
      unk_26AF96418 = 0;
      qword_26AF963E0 = (uint64_t)&unk_26E711C20;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF963E0, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      long long v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DeformationDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DeformationDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DeformationDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DeformationDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::DeformationDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::DeformationDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::DeformationDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::DeformationDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF96400 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::internal::defaultConstruct<re::DeformationStackDefinition>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
}

uint64_t re::internal::defaultDestruct<re::DeformationStackDefinition>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicArray<re::DeformationDefinition>::deinit(a3);
}

uint64_t re::internal::defaultConstructV2<re::DeformationStackDefinition>(uint64_t result)
{
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t re::introspect_DeformationStackDefinition(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DeformationStackDefinition", (uint64_t (*)(re::internal *))re::allocInfo_DeformationStackDefinition, (re::IntrospectionBase *(*)(void))re::initInfo_DeformationStackDefinition, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::DeformationStackDefinition>, this);
}

void *re::IntrospectionDynamicArray<re::DeformationDefinition>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::DeformationDefinition>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::DeformationDefinition>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::DeformationDefinition>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::DeformationDefinition>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::DeformationDefinition>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::DeformationDefinition>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::DeformationDefinition>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::DeformationDefinition>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::DeformationDefinition>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::DeformationDefinition>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::DeformationDefinition>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::DeformationDefinition>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  v10[0] = 0;
  v10[1] = (uint64_t)"";
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = 0;
  re::DynamicArray<re::DeformationDefinition>::add(this, v10);
  if (v11)
  {
    if (v12)
    {
      (*(void (**)(void))(*(void *)v11 + 40))();
      uint64_t v12 = 0;
      uint64_t v13 = 0;
    }
    uint64_t v11 = 0;
  }
  re::StringID::destroyString((re::StringID *)v10);
  uint64_t v8 = (re::IntrospectionBase *)(*((void *)this + 4) + 40 * *((void *)this + 2) - 40);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::DeformationDefinition>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::DeformationDefinition>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 40 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 40 * a3;
}

void re::DynamicArray<re::DeformationDefinition>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 40 * a2;
    unint64_t v9 = a2;
    do
    {
      unint64_t v10 = (uint64_t *)(*(void *)(a1 + 32) + v8);
      re::FixedArray<CoreIKTransform>::deinit(v10 + 2);
      re::StringID::destroyString((re::StringID *)v10);
      ++v9;
      v8 += 40;
    }
    while (v9 < *(void *)(a1 + 16));
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::DeformationDefinition>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 40 * v4;
      do
      {
        long long v7 = (void *)(*(void *)(a1 + 32) + v6);
        *long long v7 = 0;
        v7[1] = "";
        v7[3] = 0;
        v7[4] = 0;
        char v7[2] = 0;
        v6 += 40;
        --v5;
      }
      while (v5);
    }
  }
  *(void *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void *re::TypeBuilderHelper::registerDynamicArray<re::DeformationDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::DeformationDefinition>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DeformationDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::DeformationDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::DeformationDefinition>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::DeformationDefinition>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::DeformationDefinition>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::DeformationDefinition>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      unint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 40 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 40;
        v11 -= 40;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DeformationDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 40 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DeformationDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DeformationDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 40 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DeformationDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void re::RenderManager::RenderManager(re::RenderManager *this)
{
  *(unsigned char *)this = 1;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = "";
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((void *)this + 21) = 0;
  *((_DWORD *)this + 44) = 1;
  *((_WORD *)this + 90) = 0;
  *((void *)this + 23) = 0;
  uint64_t v2 = (char *)this + 184;
  int v3 = re::globalAllocators(this);
  *((void *)this + 27) = v3[2];
  *((void *)this + 28) = 0;
  *(_OWORD *)((char *)this + 232) = xmmword_23436C450;
  *((void *)this + 31) = 0x101010101010101;
  *((void *)this + 32) = 0x101010101010101;
  *((_DWORD *)this + 66) = 257;
  *((unsigned char *)this + 268) = 1;
  *(_DWORD *)(v2 + 85) = 0;
  *(_WORD *)(v2 + 89) = 1;
  *((unsigned char *)this + 275) = 0;
  *((_WORD *)this + 140) = 257;
  *((unsigned char *)this + 282) = 1;
  *((_DWORD *)this + 74) = 1;
  *((_WORD *)this + 154) = 0;
  *(void *)((char *)this + 300) = 0;
  *((unsigned char *)this + 312) = 0;
  unint64_t v4 = re::globalAllocators((re *)v3);
  *((void *)this + 43) = v4[2];
  *((void *)this + 44) = 0;
  {
    if (v4)
    {
      re::introspect<re::TriangleFillModeData>(void)::info = (_UNKNOWN *)re::introspect_TriangleFillModeData(0);
    }
  }
  unint64_t v5 = re::globalAllocators((re *)v4);
  uint64_t v6 = (re::TargetDisplayInfoProvider *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 1328, 16);
  re::TargetDisplayInfoProvider::TargetDisplayInfoProvider(v6);
}

void re::RenderManager::~RenderManager(re::RenderManager *this)
{
  *((void *)this + 36) = 0;
  re::FunctionBase<24ul,BOOL ()(void)>::destroyCallable((uint64_t)this + 320);
  re::FunctionBase<24ul,void ()(void)>::destroyCallable((uint64_t)this + 192);

  re::StringID::destroyString((re::RenderManager *)((char *)this + 8));
}

re *re::internal::destroyPersistent<re::TargetDisplayInfoProvider>(re *result, uint64_t a2, re::TargetDisplayInfoProvider *a3)
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    re::TargetDisplayInfoProvider::~TargetDisplayInfoProvider(a3);
    unint64_t v5 = *(uint64_t (**)(uint64_t, re::TargetDisplayInfoProvider *))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

BOOL re::RenderManager::init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, re::ProfilerManager *a5, uint64_t a6, re::VFXManager *a7, uint64_t a8, char a9)
{
  uint64_t v393 = *MEMORY[0x263EF8340];
  float32x4_t v16 = (uint8_t *)(a1 + 184);
  re::ObjCObject::operator=((id *)(a1 + 184), (id *)a3);
  re::FunctionBase<24ul,void ()(void)>::operator=<24ul>(a1 + 192, a3 + 8);
  long long v17 = *(_OWORD *)(a3 + 76);
  long long v18 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a1 + 248) = v18;
  *(_OWORD *)(v16 + 76) = v17;
  *(unsigned char *)(a1 + 181) = a9;
  id v19 = *(id *)(a1 + 184);
  if (!v19)
  {
    re::mtl::makeDefaultDevice(buf);
    if (v16 != buf)
    {
      id v20 = *(id *)buf;
      *(void *)long long buf = 0;
      id v21 = *(id *)v16;
      *(void *)float32x4_t v16 = v20;
    }
    id v19 = *(id *)v16;
  }
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(a1 + 252);
  *(_WORD *)(a1 + 281) = *(_WORD *)(a1 + 253);
  if (!v19) {
    return 0;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96518, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF96518))
  {
    re::Defaults::intValue((re::Defaults *)"compilerProcessCount", v328, (uint64_t)&_MergedGlobals_403);
    __cxa_atexit((void (*)(void *))re::Optional<int>::~Optional, &_MergedGlobals_403, &dword_233120000);
    __cxa_guard_release(&qword_26AF96518);
  }
  if (_MergedGlobals_403) {
    [*(id *)v16 setCompilerProcessesCount:dword_26AF96514];
  }
  float32x4_t v22 = *(void **)(a1 + 184);
  *(unsigned char *)(a1 + 180) = v22 != 0;
  int v23 = 16;
  if (([v22 supportsFamily:1005] & 1) == 0)
  {
    if ([*(id *)v16 supportsFamily:2002]) {
      int v23 = 16;
    }
    else {
      int v23 = 1;
    }
  }
  *(_DWORD *)(a1 + 296) = v23;
  *(unsigned char *)(a1 + 300) = [*(id *)(a1 + 184) supportsRasterizationRateMapWithLayerCount:2];
  *(unsigned char *)(a1 + 301) = re::mtl::Device::areProgrammableSamplePositionsSupported((id *)v16);
  *(unsigned char *)(a1 + 302) = [*(id *)(a1 + 184) supportsVertexAmplificationCount:2];
  *(unsigned char *)(a1 + 303) = [*(id *)(a1 + 184) supportsFamily:1004];
  *(unsigned char *)(a1 + 304) = [*(id *)(a1 + 184) supportsLayeredRendering];
  *(unsigned char *)(a1 + 305) = [*(id *)(a1 + 184) supportsFamily:1004];
  if ([*(id *)(a1 + 184) supportsFamily:1007]) {
    char v24 = 1;
  }
  else {
    char v24 = [*(id *)v16 supportsFamily:2002];
  }
  *(unsigned char *)(a1 + 306) = v24;
  *(unsigned char *)(a1 + 307) = [*(id *)(a1 + 184) supportsFamily:1002];
  *(unsigned char *)(a1 + 308) = [*(id *)(a1 + 184) supportsSeparateDepthStencil];
  if ([*(id *)(a1 + 184) supportsFamily:1004]) {
    uint64_t v27 = 1;
  }
  else {
    uint64_t v27 = [*(id *)v16 supportsFamily:2002];
  }
  *(unsigned char *)(a1 + 309) = v27;
  if (*(void *)(a1 + 24))
  {
    re::internal::assertLog((re::internal *)4, v26, "assertion failure: '%s' (%s:line %i) Material manager is not null before init.", "m_materialManager == nullptr", "init", 157);
    _os_crash();
    __break(1u);
  }
  id v28 = re::globalAllocators((re *)v27);
  uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v28[2] + 32))(v28[2], 1240, 8);
  bzero((void *)v29, 0x4D8uLL);
  *(_DWORD *)(v29 + 36) = 0x7FFFFFFF;
  *(_OWORD *)(v29 + 48) = 0u;
  *(_OWORD *)(v29 + 64) = 0u;
  *(void *)(v29 + 80) = 0x7FFFFFFF00000000;
  *(_OWORD *)(v29 + 96) = 0u;
  *(_OWORD *)(v29 + 112) = 0u;
  *(void *)(v29 + 128) = 0x7FFFFFFF00000000;
  *(_OWORD *)(v29 + 144) = 0u;
  *(_OWORD *)(v29 + 160) = 0u;
  *(void *)(v29 + 176) = 0x7FFFFFFF00000000;
  *(_OWORD *)(v29 + 192) = 0u;
  *(_OWORD *)(v29 + 208) = 0u;
  *(void *)(v29 + 224) = 0x7FFFFFFF00000000;
  *(_OWORD *)(v29 + 240) = 0u;
  *(_OWORD *)(v29 + 256) = 0u;
  *(void *)(v29 + 272) = 0x7FFFFFFF00000000;
  *(_DWORD *)(v29 + 320) = 0;
  *(_OWORD *)(v29 + 288) = 0u;
  *(_OWORD *)(v29 + 304) = 0u;
  *(_DWORD *)(v29 + 324) = 0x7FFFFFFF;
  *(_OWORD *)(v29 + 412) = 0u;
  *(_OWORD *)(v29 + 384) = 0u;
  *(_OWORD *)(v29 + 400) = 0u;
  *(_OWORD *)(v29 + 352) = 0u;
  *(_OWORD *)(v29 + 368) = 0u;
  *(_OWORD *)(v29 + 336) = 0u;
  *(_OWORD *)(v29 + 460) = 0u;
  *(_OWORD *)(v29 + 432) = 0u;
  *(_OWORD *)(v29 + 448) = 0u;
  *(_DWORD *)(v29 + 476) = 0x7FFFFFFF;
  *(_DWORD *)(v29 + 488) = 0;
  *(_OWORD *)(v29 + 496) = 0u;
  *(_OWORD *)(v29 + 512) = 0u;
  *(void *)(v29 + 528) = 0x7FFFFFFF00000000;
  *(_OWORD *)(v29 + 544) = 0u;
  *(_OWORD *)(v29 + 560) = 0u;
  *(_DWORD *)(v29 + 576) = 0;
  *(_DWORD *)(v29 + 580) = 0x7FFFFFFF;
  *(_DWORD *)(v29 + 624) = 0;
  *(_OWORD *)(v29 + 592) = 0u;
  *(_OWORD *)(v29 + 608) = 0u;
  *(_DWORD *)(v29 + 628) = 0x7FFFFFFF;
  *(void *)(v29 + 936) = 0;
  *(_OWORD *)(v29 + 684) = 0u;
  *(_OWORD *)(v29 + 656) = 0u;
  *(_OWORD *)(v29 + 672) = 0u;
  *(_OWORD *)(v29 + 640) = 0u;
  *(_DWORD *)(v29 + 928) = 0;
  *(_OWORD *)(v29 + 896) = 0u;
  *(_OWORD *)(v29 + 912) = 0u;
  *(_OWORD *)(v29 + 864) = 0u;
  *(_OWORD *)(v29 + 880) = 0u;
  *(_OWORD *)(v29 + 832) = 0u;
  *(_OWORD *)(v29 + 848) = 0u;
  *(_OWORD *)(v29 + 800) = 0u;
  *(_OWORD *)(v29 + 816) = 0u;
  *(_OWORD *)(v29 + 768) = 0u;
  *(_OWORD *)(v29 + 784) = 0u;
  *(_OWORD *)(v29 + 736) = 0u;
  *(_OWORD *)(v29 + 752) = 0u;
  *(_OWORD *)(v29 + 704) = 0u;
  *(_OWORD *)(v29 + 720) = 0u;
  *(_DWORD *)(v29 + 1064) = 0;
  *(_OWORD *)(v29 + 1032) = 0u;
  *(_OWORD *)(v29 + 1048) = 0u;
  *(_OWORD *)(v29 + 1000) = 0u;
  *(_OWORD *)(v29 + 1016) = 0u;
  *(_OWORD *)(v29 + 968) = 0u;
  *(_OWORD *)(v29 + 984) = 0u;
  *(_DWORD *)(v29 + 1068) = 0x7FFFFFFF;
  *(_DWORD *)(v29 + 1104) = 0;
  *(void *)(v29 + 1096) = 0;
  *(_OWORD *)(v29 + 1080) = 0u;
  *(void *)(v29 + 1120) = 0;
  *(void *)(v29 + 1112) = 0;
  *(_DWORD *)(v29 + 1128) = 0;
  *(void *)(v29 + 1132) = 0x1FFFFFFFFLL;
  *(_DWORD *)(v29 + 1176) = 0;
  *(_OWORD *)(v29 + 1144) = 0u;
  *(_OWORD *)(v29 + 1160) = 0u;
  *(_DWORD *)(v29 + 1180) = 0x7FFFFFFF;
  *(_DWORD *)(v29 + 1224) = 0;
  *(_OWORD *)(v29 + 1192) = 0u;
  *(_OWORD *)(v29 + 1208) = 0u;
  *(_DWORD *)(v29 + 1228) = 0x7FFFFFFF;
  *(void *)(a1 + 24) = v29;
  uint64_t v36 = re::MaterialManager::init((re::MaterialManager *)v29, (re::RenderManager *)a1, v30, v31, v32, v33, v34, v35, v329, v330, v331, v332, v333, v334, v335, v336, a2, v338, a6,
          v341,
          v342,
          v343[0],
          v343[1],
          v343[2],
          (uint64_t)v344,
          v345,
          v346[0],
          v346[1],
          v346[2],
          (uint64_t)v347,
          v348[0],
          v348[1],
          v349,
          v350,
          v351,
          v352[0],
          v352[1],
          v353,
          v354,
          v355,
          v356[0],
          v356[1],
          v357,
          v358[0],
          v358[1],
          v358[2],
          (uint64_t)v359,
          v360[0],
          v360[1],
          v361,
          v362,
          v363,
          v364[0]);
  uint64_t v37 = re::globalAllocators(v36);
  uint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v37[2] + 32))(v37[2], 192, 8);
  *(_OWORD *)(v38 + 64) = 0u;
  *(_OWORD *)(v38 + 80) = 0u;
  *(_OWORD *)(v38 + 96) = 0u;
  *(_OWORD *)(v38 + 112) = 0u;
  *(_OWORD *)uint64_t v38 = 0u;
  *(_OWORD *)(v38 + 16) = 0u;
  *(_OWORD *)(v38 + 32) = 0u;
  *(_OWORD *)(v38 + 48) = 0u;
  *(_OWORD *)(v38 + 128) = 0u;
  *(_OWORD *)(v38 + 144) = 0u;
  *(_OWORD *)(v38 + 160) = 0u;
  *(void *)(v38 + 60) = 0x1FFFFFFFFLL;
  *(void *)(v38 + 72) = 0;
  *(void *)(v38 + 80) = 0;
  *(void *)(v38 + 88) = 0;
  *(_DWORD *)(v38 + 96) = 0;
  *(_DWORD *)(v38 + 120) = 0;
  *(void *)(v38 + 104) = 0;
  *(void *)(v38 + 112) = 0;
  *(void *)(v38 + 124) = 0x1FFFFFFFFLL;
  *(_OWORD *)(v38 + 152) = 0u;
  *(_OWORD *)(v38 + 136) = 0u;
  *(_DWORD *)(v38 + 168) = 0;
  *(_DWORD *)(v38 + 172) = 0x7FFFFFFF;
  *(void *)(v38 + 176) = 0;
  *(void *)(v38 + 184) = 0;
  *(void *)(a1 + 32) = v38;
  re::MeshManager::init((re::MeshManager *)v38, (id *)a1, 256, 256);
  unint64_t v40 = re::globalAllocators(v39);
  uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v40[2] + 32))(v40[2], 1480, 8);
  unint64_t v42 = (_OWORD *)(v41 + 528);
  bzero((void *)v41, 0x5C8uLL);
  uint64_t v43 = 16;
  do
  {
    uint64_t v44 = v41 + v43;
    *(void *)(v44 + 8) = 0;
    *(void *)(v44 + 16) = 0;
    *(void *)uint64_t v44 = 0xFFFFFFFFFFFFFFFLL;
    *(_DWORD *)(v44 + 24) = 1;
    *(void *)(v44 + 40) = 0;
    *(void *)(v44 + 48) = 0;
    *(void *)(v44 + 32) = 0;
    v43 += 64;
    *(_DWORD *)(v44 + 56) = 0;
  }
  while ((_OWORD *)(v44 + 64) != v42);
  *(void *)(v41 + 544) = 0;
  *unint64_t v42 = 0u;
  *(_DWORD *)(v41 + 552) = 1;
  *(void *)(v41 + 560) = 0;
  *(_DWORD *)(v41 + 584) = 0;
  *(_OWORD *)(v41 + 568) = 0u;
  *(_OWORD *)(v41 + 592) = 0u;
  *(_DWORD *)(v41 + 608) = 1;
  *(void *)(v41 + 616) = 0;
  *(void *)(v41 + 632) = 0;
  *(void *)(v41 + 624) = 0;
  unint64_t v45 = (_OWORD *)(v41 + 1368);
  uint64_t v46 = 648;
  *(_DWORD *)(v41 + 640) = 0;
  do
  {
    uint64_t v47 = (void *)(v41 + v46);
    *uint64_t v47 = 0;
    v47[4] = 0;
    v46 += 40;
  }
  while (v47 + 5 != (void *)v45);
  *(_DWORD *)(v41 + 1400) = 0;
  *unint64_t v45 = 0u;
  *(_OWORD *)(v41 + 1384) = 0u;
  *(void *)(v41 + 1404) = 0x7FFFFFFFLL;
  *(void *)(v41 + 1416) = 0;
  *(void *)(v41 + 1432) = 0;
  *(void *)(v41 + 1424) = 0;
  *(_DWORD *)(v41 + 1440) = 0;
  *(void *)(v41 + 1456) = 0;
  *(void *)(v41 + 1448) = 0;
  *(_DWORD *)(v41 + 1464) = 0;
  *(void *)(v41 + 1468) = 0x1FFFFFFFFLL;
  *(void *)(a1 + 40) = v41;
  re::DeformationManager::init((re::DeformationManager *)v41, (re::RenderManager *)a1);
  int v49 = re::globalAllocators(v48);
  uint64_t v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v49[2] + 32))(v49[2], 160, 8);
  *(void *)(v50 + 144) = 0;
  *(void *)(v50 + 152) = 0;
  *(void *)(v50 + 136) = 0;
  *(_OWORD *)(v50 + 40) = 0u;
  *(_OWORD *)(v50 + 56) = 0u;
  *(_OWORD *)(v50 + 72) = 0u;
  *(_OWORD *)(v50 + 88) = 0u;
  *(_OWORD *)(v50 + 104) = 0u;
  *(void *)(v50 + 120) = 0;
  *(_OWORD *)uint64_t v50 = 0u;
  *(_OWORD *)(v50 + 16) = 0u;
  *(_DWORD *)(v50 + 32) = 0;
  *(void *)(a1 + 48) = v50;
  BOOL v51 = re::SamplerManager::init((id *)v50, (id *)a1);
  uint64_t v52 = re::globalAllocators((re *)v51);
  uint64_t v53 = (re::ShaderManager *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v52[2] + 32))(v52[2], 904, 8);
  uint64_t v54 = re::ShaderManager::ShaderManager(v53);
  *(void *)(a1 + 56) = v54;
  BOOL v55 = re::ShaderManager::init(v54, (id *)a1);
  uint64_t v56 = re::globalAllocators((re *)v55);
  uint64_t v57 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v56[2] + 32))(v56[2], 480, 8);
  *(_OWORD *)(v57 + 248) = 0u;
  *(_DWORD *)(v57 + 296) = 0;
  *(_OWORD *)(v57 + 232) = 0u;
  *(_OWORD *)(v57 + 264) = 0u;
  *(_OWORD *)(v57 + 280) = 0u;
  *(_OWORD *)uint64_t v57 = 0u;
  *(_OWORD *)(v57 + 16) = 0u;
  *(_OWORD *)(v57 + 32) = 0u;
  *(_OWORD *)(v57 + 48) = 0u;
  *(_OWORD *)(v57 + 64) = 0u;
  *(_OWORD *)(v57 + 80) = 0u;
  *(_OWORD *)(v57 + 96) = 0u;
  *(_OWORD *)(v57 + 112) = 0u;
  *(_OWORD *)(v57 + 128) = 0u;
  *(_OWORD *)(v57 + 144) = 0u;
  *(_OWORD *)(v57 + 160) = 0u;
  *(_OWORD *)(v57 + 176) = 0u;
  *(_OWORD *)(v57 + 192) = 0u;
  *(_OWORD *)(v57 + 208) = 0u;
  *(void *)(v57 + 300) = 0x7FFFFFFFLL;
  *(_DWORD *)(v57 + 312) = 0;
  *(void *)(v57 + 328) = 0;
  *(void *)(v57 + 336) = 0;
  *(_DWORD *)(v57 + 344) = 0;
  *(void *)(v57 + 320) = 0;
  *(_DWORD *)(v57 + 368) = 0;
  *(void *)(v57 + 352) = 0;
  *(void *)(v57 + 360) = 0;
  *(void *)(v57 + 372) = 0x1FFFFFFFFLL;
  *(_DWORD *)(v57 + 384) = 0;
  *(void *)(v57 + 424) = 0;
  *(void *)(v57 + 400) = 0;
  *(void *)(v57 + 408) = 0;
  *(_DWORD *)(v57 + 416) = 0;
  *(void *)(v57 + 392) = 0;
  *(_DWORD *)(v57 + 432) = 0;
  *(void *)(v57 + 472) = 0;
  *(void *)(v57 + 440) = 0;
  *(void *)(v57 + 448) = 0;
  *(_DWORD *)(v57 + 464) = 0;
  *(void *)(v57 + 456) = 0;
  *(void *)(a1 + 64) = v57;
  BOOL v58 = re::TextureManager::init((id *)v57, (id *)a1);
  if (*(unsigned char *)(a1 + 248))
  {
    int v60 = re::globalAllocators((re *)v58);
    uint64_t v61 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v60[2] + 32))(v60[2], 256, 8);
    *(_OWORD *)(v61 + 64) = 0u;
    *(_OWORD *)(v61 + 80) = 0u;
    *(_OWORD *)(v61 + 32) = 0u;
    *(_OWORD *)(v61 + 48) = 0u;
    *(_OWORD *)uint64_t v61 = 0u;
    *(_OWORD *)(v61 + 16) = 0u;
    *(_OWORD *)(v61 + 96) = 0u;
    *(_OWORD *)(v61 + 112) = 0u;
    *(_OWORD *)(v61 + 128) = 0u;
    *(_OWORD *)(v61 + 144) = 0u;
    *(_OWORD *)(v61 + 160) = 0u;
    *(_OWORD *)(v61 + 176) = 0u;
    *(_OWORD *)(v61 + 192) = 0u;
    *(_OWORD *)(v61 + 208) = 0u;
    *(_OWORD *)(v61 + 224) = 0u;
    *(_OWORD *)(v61 + 240) = 0u;
    *(_DWORD *)(v61 + 44) = 0x7FFFFFFF;
    *(_OWORD *)(v61 + 72) = 0u;
    *(_OWORD *)(v61 + 56) = 0u;
    *(_DWORD *)(v61 + 88) = 0;
    *(_DWORD *)(v61 + 92) = 0x7FFFFFFF;
    *(void *)(v61 + 104) = 0;
    char v62 = re::Allocator::Allocator((re::Allocator *)(v61 + 120), "TextManager LinearAllocator", 1);
    *(void *)(v61 + 120) = &unk_26E70F0E8;
    *(_OWORD *)(v61 + 208) = 0u;
    *(_OWORD *)(v61 + 224) = 0u;
    *(_DWORD *)(v61 + 240) = 0;
    *(_OWORD *)(v61 + 144) = 0u;
    *(_OWORD *)(v61 + 160) = 0u;
    *(_OWORD *)(v61 + 176) = 0u;
    *(_OWORD *)(v61 + 188) = 0u;
    *(void *)(v61 + 244) = 0x7FFFFFFFLL;
    *(void *)(a1 + 72) = v61;
    *(void *)(v61 + 160) = 0;
    *(void *)(v61 + 168) = 1024;
    *(void *)(v61 + 144) = 0;
    *(void *)(v61 + 152) = 0;
    *(void *)(v61 + 184) = 0;
    *(void *)(v61 + 192) = 0;
    *(void *)uint64_t v61 = a1;
    *(unsigned char *)(v61 + 112) = 1;
  }
  *(void *)(a1 + 96) = a8;
  re::Defaults::intValue((re::Defaults *)"graphics.enableDebugSettingsManager", v59, (uint64_t)buf);
  if (buf[0] && *(_DWORD *)&buf[4])
  {
    if (!*(void *)(a1 + 88))
    {
      char v64 = *re::graphicsLogObjects(v63);
      BOOL v65 = os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT);
      if (v65)
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_233120000, v64, OS_LOG_TYPE_DEFAULT, "Initializing DebugSettingsManager", buf, 2u);
      }
      int v66 = re::globalAllocators((re *)v65);
      uint64_t v67 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v66[2] + 32))(v66[2], 120, 8);
      *(_OWORD *)(v67 + 32) = 0u;
      *(_OWORD *)(v67 + 48) = 0u;
      *(_OWORD *)(v67 + 64) = 0u;
      *(_OWORD *)(v67 + 80) = 0u;
      *(_OWORD *)(v67 + 96) = 0u;
      *(void *)(v67 + 112) = 0;
      *(_OWORD *)uint64_t v67 = 0u;
      *(_OWORD *)(v67 + 16) = 0u;
      *(_DWORD *)(v67 + 36) = 0x7FFFFFFF;
      *(void *)(v67 + 48) = 850045863;
      *(_OWORD *)(v67 + 56) = 0u;
      *(_OWORD *)(v67 + 72) = 0u;
      *(_OWORD *)(v67 + 88) = 0u;
      *(_OWORD *)(v67 + 97) = 0u;
      *(void *)(a1 + 88) = v67;
      re::DebugSettingsManager::init((re::DebugSettingsManager *)v67);
      re::s_debugSettingsManager = *(void *)(a1 + 88);
    }
  }
  else
  {
    int v68 = *re::graphicsLogObjects(v63);
    if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_233120000, v68, OS_LOG_TYPE_DEFAULT, "DebugSettingsManager has been disabled and not initialized", buf, 2u);
    }
  }
  *(void *)(a1 + 136) = v337;
  *(void *)(a1 + 144) = a4;
  size_t v341 = 8;
  unsigned int v69 = (re *)sysctlbyname("hw.physicalcpu", (void *)(a1 + 176), &v341, 0, 0);
  if (a9)
  {
    unint64_t v70 = re::globalAllocators(v69);
    int v71 = (re::DrawingManager *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v70[2] + 32))(v70[2], 1776, 8);
    re::DrawingManager::DrawingManager(v71);
    *(void *)(a1 + 104) = v72;
    unsigned int v69 = (re *)re::DrawingManager::init(v72, (re::RenderManager *)a1, a5, v340);
  }
  uint64_t v73 = *(void *)(a1 + 40);
  uint64_t v74 = re::globalAllocators(v69);
  uint64_t v75 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v74[2] + 32))(v74[2], 64, 8);
  *(void *)(v75 + 56) = 0;
  *(void *)uint64_t v75 = &unk_26E710850;
  *(_OWORD *)(v75 + 24) = 0u;
  *(_OWORD *)(v75 + 8) = 0u;
  *(_OWORD *)(v75 + 40) = 0u;
  *(_WORD *)(v75 + 56) = 0;
  v378[0] = &unk_26E711D20;
  v379 = v378;
  uint64_t v380 = v75;
  v382 = v381;
  v381[0] = &unk_26E711D20;
  uint64_t v76 = re::globalAllocators((re *)v75)[2];
  uint64_t v391 = v76;
  if (v76) {
    unint64_t v77 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 40, 0);
  }
  else {
    unint64_t v77 = 0;
  }
  *unint64_t v77 = &unk_26E711DB0;
  if (v382)
  {
    if (v382 == v381)
    {
      v77[4] = v77 + 1;
      (*(void (**)(void *))(*v382 + 24))(v382);
    }
    else
    {
      v77[4] = v382;
      v382 = 0;
    }
  }
  else
  {
    v77[4] = 0;
  }
  v392 = v77;
  uint64_t v78 = v380;
  uint64_t v380 = 0;
  uint64_t v384 = v76;
  v385 = 0;
  re::FunctionBase<24ul,void ()(re::BlendShapeDeformer *)>::operator=<24ul>((uint64_t)v383, (uint64_t)buf);
  unint64_t v79 = operator new(0x30uLL);
  *unint64_t v79 = &unk_26E711E18;
  uint64_t v80 = (uint64_t)(v79 + 1);
  v79[4] = v384;
  v79[5] = 0;
  re::FunctionBase<24ul,void ()(re::BlendShapeDeformer *)>::destroyCallable((uint64_t)(v79 + 1));
  BOOL v81 = v385;
  if (v79[4] == v384)
  {
    if (v385 != v383)
    {
      v79[5] = v385;
      v385 = 0;
      goto LABEL_56;
    }
    BOOL v81 = v383;
  }
  else if (!v385)
  {
    goto LABEL_56;
  }
  unint64_t v82 = (*(uint64_t (**)(unsigned char *))(*(void *)v81 + 40))(v81);
  if (v82 >= 0x19)
  {
    unint64_t v83 = v82;
    uint64_t v84 = v79[4];
    if (v84) {
      uint64_t v80 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v84 + 32))(v84, v83, 0);
    }
    else {
      uint64_t v80 = 0;
    }
  }
  v79[5] = v80;
  (*(void (**)(unsigned char *, uint64_t))(*(void *)v385 + 32))(v385, v80);
  re::FunctionBase<24ul,void ()(re::BlendShapeDeformer *)>::destroyCallable((uint64_t)v383);
LABEL_56:
  uint64_t v387 = 0;
  *(void *)&v388[0].char var0 = v78;
  v389 = v79;
  std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::operator=[abi:nn180100]((uint64_t *)(v73 + 648), (uint64_t *)v388);
  std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v388);
  std::__function::__value_func<void ()(re::Deformer *)>::~__value_func[abi:nn180100](v386);
  re::FunctionBase<24ul,void ()(re::BlendShapeDeformer *)>::destroyCallable((uint64_t)v383);
  *(void *)&v388[0].char var0 = 0x1954B86F1FEF5A4;
  v388[0].var1 = "Blend Shape";
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v73 + 1368, v388, &re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::kDeformerIndex);
  re::StringID::destroyString((re::StringID *)v388);
  re::FunctionBase<24ul,void ()(re::BlendShapeDeformer *)>::destroyCallable((uint64_t)buf);
  uint64_t v85 = v380;
  uint64_t v380 = 0;
  if (v85) {
    std::function<void ()(re::BlendShapeDeformer *)>::operator()((uint64_t)v382, v85);
  }
  std::__function::__value_func<void ()(re::BlendShapeDeformer *)>::~__value_func[abi:nn180100](v381);
  int v86 = (re *)std::__function::__value_func<void ()(re::BlendShapeDeformer *)>::~__value_func[abi:nn180100](v378);
  uint64_t v87 = *(void *)(a1 + 40);
  uint64_t v88 = re::globalAllocators(v86);
  uint64_t v89 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v88[2] + 32))(v88[2], 32792, 8);
  *(void *)uint64_t v89 = &unk_26E714098;
  *(void *)(v89 + 8) = a1;
  *(unsigned char *)(v89 + 16) = 0;
  bzero((void *)(v89 + 24), 0x8000uLL);
  v378[0] = &unk_26E711EA8;
  v379 = v378;
  uint64_t v375 = v89;
  v377 = v376;
  v376[0] = &unk_26E711EA8;
  uint64_t v91 = re::globalAllocators(v90)[2];
  uint64_t v391 = v91;
  if (v91) {
    uint64_t v92 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v91 + 32))(v91, 40, 0);
  }
  else {
    uint64_t v92 = 0;
  }
  *uint64_t v92 = &unk_26E711F38;
  if (v377)
  {
    if (v377 == v376)
    {
      v92[4] = v92 + 1;
      (*(void (**)(void *))(*v377 + 24))(v377);
    }
    else
    {
      v92[4] = v377;
      v377 = 0;
    }
  }
  else
  {
    v92[4] = 0;
  }
  v392 = v92;
  uint64_t v93 = v375;
  uint64_t v375 = 0;
  uint64_t v384 = v91;
  v385 = 0;
  re::FunctionBase<24ul,void ()(re::SkinningDeformer *)>::operator=<24ul>((uint64_t)v383, (uint64_t)buf);
  uint64_t v94 = operator new(0x30uLL);
  *uint64_t v94 = &unk_26E711FA0;
  uint64_t v95 = (uint64_t)(v94 + 1);
  v94[4] = v384;
  v94[5] = 0;
  re::FunctionBase<24ul,void ()(re::SkinningDeformer *)>::destroyCallable((uint64_t)(v94 + 1));
  uint64_t v96 = v385;
  if (v94[4] == v384)
  {
    if (v385 != v383)
    {
      v94[5] = v385;
      v385 = 0;
      goto LABEL_77;
    }
    uint64_t v96 = v383;
  }
  else if (!v385)
  {
    goto LABEL_77;
  }
  unint64_t v97 = (*(uint64_t (**)(unsigned char *))(*(void *)v96 + 40))(v96);
  if (v97 >= 0x19)
  {
    unint64_t v98 = v97;
    uint64_t v99 = v94[4];
    if (v99) {
      uint64_t v95 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v99 + 32))(v99, v98, 0);
    }
    else {
      uint64_t v95 = 0;
    }
  }
  v94[5] = v95;
  (*(void (**)(unsigned char *, uint64_t))(*(void *)v385 + 32))(v385, v95);
  re::FunctionBase<24ul,void ()(re::SkinningDeformer *)>::destroyCallable((uint64_t)v383);
LABEL_77:
  uint64_t v387 = 0;
  *(void *)&v388[0].char var0 = v93;
  v389 = v94;
  std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::operator=[abi:nn180100]((uint64_t *)(v87 + 728), (uint64_t *)v388);
  std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v388);
  std::__function::__value_func<void ()(re::Deformer *)>::~__value_func[abi:nn180100](v386);
  re::FunctionBase<24ul,void ()(re::SkinningDeformer *)>::destroyCallable((uint64_t)v383);
  *(void *)&v388[0].char var0 = 0x4550755B7A2;
  v388[0].var1 = "Skinning";
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v87 + 1368, v388, &re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::kDeformerIndex);
  re::StringID::destroyString((re::StringID *)v388);
  re::FunctionBase<24ul,void ()(re::SkinningDeformer *)>::destroyCallable((uint64_t)buf);
  uint64_t v100 = v375;
  uint64_t v375 = 0;
  if (v100) {
    std::function<void ()(re::SkinningDeformer *)>::operator()((uint64_t)v377, v100);
  }
  std::__function::__value_func<void ()(re::SkinningDeformer *)>::~__value_func[abi:nn180100](v376);
  long long v101 = (re *)std::__function::__value_func<void ()(re::SkinningDeformer *)>::~__value_func[abi:nn180100](v378);
  uint64_t v102 = *(void *)(a1 + 40);
  long long v103 = re::globalAllocators(v101);
  long long v104 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v103[2] + 32))(v103[2], 32, 8);
  v104[2] = 0;
  v104[3] = 0;
  *long long v104 = &unk_26E713E58;
  v104[1] = 0;
  *((_WORD *)v104 + 12) = 0;
  v378[0] = &unk_26E712020;
  v379 = v378;
  v372 = v104;
  v374 = v373;
  v373[0] = &unk_26E712020;
  uint64_t v105 = re::globalAllocators((re *)v104)[2];
  uint64_t v391 = v105;
  if (v105) {
    long long v106 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v105 + 32))(v105, 40, 0);
  }
  else {
    long long v106 = 0;
  }
  *long long v106 = &unk_26E7120B0;
  if (v374)
  {
    if (v374 == v373)
    {
      v106[4] = v106 + 1;
      (*(void (**)(void *))(*v374 + 24))(v374);
    }
    else
    {
      v106[4] = v374;
      v374 = 0;
    }
  }
  else
  {
    v106[4] = 0;
  }
  v392 = v106;
  uint64_t v107 = v372;
  v372 = 0;
  uint64_t v384 = v105;
  v385 = 0;
  re::FunctionBase<24ul,void ()(re::SmoothDeformer *)>::operator=<24ul>((uint64_t)v383, (uint64_t)buf);
  uint64_t v108 = operator new(0x30uLL);
  *uint64_t v108 = &unk_26E712118;
  uint64_t v109 = (uint64_t)(v108 + 1);
  v108[4] = v384;
  v108[5] = 0;
  re::FunctionBase<24ul,void ()(re::SmoothDeformer *)>::destroyCallable((uint64_t)(v108 + 1));
  long long v110 = v385;
  if (v108[4] == v384)
  {
    if (v385 != v383)
    {
      v108[5] = v385;
      v385 = 0;
      goto LABEL_98;
    }
    long long v110 = v383;
  }
  else if (!v385)
  {
    goto LABEL_98;
  }
  unint64_t v111 = (*(uint64_t (**)(unsigned char *))(*(void *)v110 + 40))(v110);
  if (v111 >= 0x19)
  {
    unint64_t v112 = v111;
    uint64_t v113 = v108[4];
    if (v113) {
      uint64_t v109 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v113 + 32))(v113, v112, 0);
    }
    else {
      uint64_t v109 = 0;
    }
  }
  v108[5] = v109;
  (*(void (**)(unsigned char *, uint64_t))(*(void *)v385 + 32))(v385, v109);
  re::FunctionBase<24ul,void ()(re::SmoothDeformer *)>::destroyCallable((uint64_t)v383);
LABEL_98:
  uint64_t v387 = 0;
  *(void *)&v388[0].char var0 = v107;
  v389 = v108;
  std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::operator=[abi:nn180100]((uint64_t *)(v102 + 1088), (uint64_t *)v388);
  std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v388);
  std::__function::__value_func<void ()(re::Deformer *)>::~__value_func[abi:nn180100](v386);
  re::FunctionBase<24ul,void ()(re::SmoothDeformer *)>::destroyCallable((uint64_t)v383);
  *(void *)&v388[0].char var0 = 0x5ADE39698BF7F040;
  v388[0].var1 = "SmoothDeformer";
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v102 + 1368, v388, "\v");
  re::StringID::destroyString((re::StringID *)v388);
  re::FunctionBase<24ul,void ()(re::SmoothDeformer *)>::destroyCallable((uint64_t)buf);
  uint64_t v114 = (uint64_t)v372;
  v372 = 0;
  if (v114) {
    std::function<void ()(re::SmoothDeformer *)>::operator()((uint64_t)v374, v114);
  }
  std::__function::__value_func<void ()(re::SmoothDeformer *)>::~__value_func[abi:nn180100](v373);
  uint64_t v115 = (re *)std::__function::__value_func<void ()(re::SmoothDeformer *)>::~__value_func[abi:nn180100](v378);
  uint64_t v116 = *(void *)(a1 + 40);
  unint64_t v117 = re::globalAllocators(v115);
  uint64_t v118 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v117[2] + 32))(v117[2], 152, 8);
  *(void *)uint64_t v118 = &unk_26E710AF0;
  *(void *)(v118 + 8) = 0;
  *(_OWORD *)(v118 + 16) = 0u;
  *(_OWORD *)(v118 + 32) = 0u;
  *(_OWORD *)(v118 + 48) = 0u;
  *(_OWORD *)(v118 + 64) = 0u;
  *(_OWORD *)(v118 + 80) = 0u;
  *(_OWORD *)(v118 + 96) = 0u;
  *(_OWORD *)(v118 + 112) = 0u;
  *(_OWORD *)(v118 + 128) = 0u;
  *(void *)(v118 + 144) = 0;
  v378[0] = &unk_26E712198;
  v379 = v378;
  uint64_t v369 = v118;
  v371 = v370;
  v370[0] = &unk_26E712198;
  uint64_t v119 = re::globalAllocators((re *)v118)[2];
  uint64_t v391 = v119;
  if (v119) {
    uint64_t v120 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v119 + 32))(v119, 40, 0);
  }
  else {
    uint64_t v120 = 0;
  }
  *uint64_t v120 = &unk_26E712228;
  if (v371)
  {
    if (v371 == v370)
    {
      v120[4] = v120 + 1;
      (*(void (**)(void *))(*v371 + 24))(v371);
    }
    else
    {
      v120[4] = v371;
      v371 = 0;
    }
  }
  else
  {
    v120[4] = 0;
  }
  v392 = v120;
  uint64_t v121 = v369;
  uint64_t v369 = 0;
  uint64_t v384 = v119;
  v385 = 0;
  re::FunctionBase<24ul,void ()(re::RenormalizationDeformer *)>::operator=<24ul>((uint64_t)v383, (uint64_t)buf);
  char v122 = operator new(0x30uLL);
  *char v122 = &unk_26E712290;
  uint64_t v123 = (uint64_t)(v122 + 1);
  v122[4] = v384;
  v122[5] = 0;
  re::FunctionBase<24ul,void ()(re::RenormalizationDeformer *)>::destroyCallable((uint64_t)(v122 + 1));
  int v124 = v385;
  if (v122[4] == v384)
  {
    if (v385 != v383)
    {
      v122[5] = v385;
      v385 = 0;
      goto LABEL_119;
    }
    int v124 = v383;
  }
  else if (!v385)
  {
    goto LABEL_119;
  }
  unint64_t v125 = (*(uint64_t (**)(unsigned char *))(*(void *)v124 + 40))(v124);
  if (v125 >= 0x19)
  {
    unint64_t v126 = v125;
    uint64_t v127 = v122[4];
    if (v127) {
      uint64_t v123 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v127 + 32))(v127, v126, 0);
    }
    else {
      uint64_t v123 = 0;
    }
  }
  v122[5] = v123;
  (*(void (**)(unsigned char *, uint64_t))(*(void *)v385 + 32))(v385, v123);
  re::FunctionBase<24ul,void ()(re::RenormalizationDeformer *)>::destroyCallable((uint64_t)v383);
LABEL_119:
  uint64_t v387 = 0;
  *(void *)&v388[0].char var0 = v121;
  v389 = v122;
  std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::operator=[abi:nn180100]((uint64_t *)(v116 + 768), (uint64_t *)v388);
  std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v388);
  std::__function::__value_func<void ()(re::Deformer *)>::~__value_func[abi:nn180100](v386);
  re::FunctionBase<24ul,void ()(re::RenormalizationDeformer *)>::destroyCallable((uint64_t)v383);
  *(void *)&v388[0].char var0 = 0xABCEC87F22A13454;
  v388[0].var1 = "Renormalization";
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v116 + 1368, v388, &re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::kDeformerIndex);
  re::StringID::destroyString((re::StringID *)v388);
  re::FunctionBase<24ul,void ()(re::RenormalizationDeformer *)>::destroyCallable((uint64_t)buf);
  uint64_t v128 = v369;
  uint64_t v369 = 0;
  if (v128) {
    std::function<void ()(re::RenormalizationDeformer *)>::operator()((uint64_t)v371, v128);
  }
  std::__function::__value_func<void ()(re::RenormalizationDeformer *)>::~__value_func[abi:nn180100](v370);
  uint64_t v129 = (re *)std::__function::__value_func<void ()(re::RenormalizationDeformer *)>::~__value_func[abi:nn180100](v378);
  uint64_t v130 = *(void *)(a1 + 40);
  char v131 = re::globalAllocators(v129);
  uint64_t v132 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v131[2] + 32))(v131[2], 56, 8);
  *(void *)uint64_t v132 = &unk_26E713F40;
  *(void *)(v132 + 8) = 0;
  *(_OWORD *)(v132 + 16) = 0u;
  *(_OWORD *)(v132 + 32) = 0u;
  *(void *)(v132 + 48) = 0;
  v378[0] = &unk_26E712310;
  v379 = v378;
  uint64_t v366 = v132;
  v368 = v367;
  v367[0] = &unk_26E712310;
  uint64_t v133 = re::globalAllocators((re *)v132)[2];
  uint64_t v391 = v133;
  if (v133) {
    char v134 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v133 + 32))(v133, 40, 0);
  }
  else {
    char v134 = 0;
  }
  *char v134 = &unk_26E7123A0;
  if (v368)
  {
    if (v368 == v367)
    {
      v134[4] = v134 + 1;
      (*(void (**)(void *))(*v368 + 24))(v368);
    }
    else
    {
      v134[4] = v368;
      v368 = 0;
    }
  }
  else
  {
    v134[4] = 0;
  }
  v392 = v134;
  uint64_t v135 = v366;
  uint64_t v366 = 0;
  uint64_t v384 = v133;
  v385 = 0;
  re::FunctionBase<24ul,void ()(re::OffsetsDeformer *)>::operator=<24ul>((uint64_t)v383, (uint64_t)buf);
  unint64_t v136 = operator new(0x30uLL);
  *unint64_t v136 = &unk_26E712408;
  uint64_t v137 = (uint64_t)(v136 + 1);
  v136[4] = v384;
  v136[5] = 0;
  re::FunctionBase<24ul,void ()(re::OffsetsDeformer *)>::destroyCallable((uint64_t)(v136 + 1));
  uint64_t v138 = v385;
  if (v136[4] == v384)
  {
    if (v385 != v383)
    {
      v136[5] = v385;
      v385 = 0;
      goto LABEL_140;
    }
    uint64_t v138 = v383;
  }
  else if (!v385)
  {
    goto LABEL_140;
  }
  unint64_t v139 = (*(uint64_t (**)(unsigned char *))(*(void *)v138 + 40))(v138);
  if (v139 >= 0x19)
  {
    unint64_t v140 = v139;
    uint64_t v141 = v136[4];
    if (v141) {
      uint64_t v137 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v141 + 32))(v141, v140, 0);
    }
    else {
      uint64_t v137 = 0;
    }
  }
  v136[5] = v137;
  (*(void (**)(unsigned char *, uint64_t))(*(void *)v385 + 32))(v385, v137);
  re::FunctionBase<24ul,void ()(re::OffsetsDeformer *)>::destroyCallable((uint64_t)v383);
LABEL_140:
  uint64_t v387 = 0;
  *(void *)&v388[0].char var0 = v135;
  v389 = v136;
  std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::operator=[abi:nn180100]((uint64_t *)(v130 + 1048), (uint64_t *)v388);
  std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v388);
  std::__function::__value_func<void ()(re::Deformer *)>::~__value_func[abi:nn180100](v386);
  re::FunctionBase<24ul,void ()(re::OffsetsDeformer *)>::destroyCallable((uint64_t)v383);
  *(void *)&v388[0].char var0 = 0x70EBDC9CD6B5D4E4;
  v388[0].var1 = "OffsetsDeformer";
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v130 + 1368, v388, "\n");
  re::StringID::destroyString((re::StringID *)v388);
  re::FunctionBase<24ul,void ()(re::OffsetsDeformer *)>::destroyCallable((uint64_t)buf);
  uint64_t v142 = v366;
  uint64_t v366 = 0;
  if (v142) {
    std::function<void ()(re::OffsetsDeformer *)>::operator()((uint64_t)v368, v142);
  }
  std::__function::__value_func<void ()(re::OffsetsDeformer *)>::~__value_func[abi:nn180100](v367);
  char v143 = (re *)std::__function::__value_func<void ()(re::OffsetsDeformer *)>::~__value_func[abi:nn180100](v378);
  uint64_t v144 = *(void *)(a1 + 40);
  uint64_t v145 = re::globalAllocators(v143);
  uint64_t v146 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v145[2] + 32))(v145[2], 48, 8);
  *(void *)(v146 + 32) = 0;
  *(void *)(v146 + 40) = 0;
  *(void *)uint64_t v146 = &unk_26E713FA8;
  *(void *)(v146 + 8) = 0;
  *(void *)(v146 + 16) = 0;
  *(void *)(v146 + 24) = 0;
  *(_DWORD *)(v146 + 31) = 0;
  *(_DWORD *)(v146 + 40) = 12;
  v378[0] = &unk_26E712488;
  v379 = v378;
  v365 = (long long *)((char *)v364 + 8);
  *(void *)&v364[0] = v146;
  *((void *)&v364[0] + 1) = &unk_26E712488;
  uint64_t v147 = re::globalAllocators((re *)v146)[2];
  uint64_t v391 = v147;
  if (v147) {
    uint64_t v148 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v147 + 32))(v147, 40, 0);
  }
  else {
    uint64_t v148 = 0;
  }
  *uint64_t v148 = &unk_26E712518;
  if (v365)
  {
    if (v365 == (long long *)((char *)v364 + 8))
    {
      v148[4] = v148 + 1;
      (*(void (**)(long long *))(*(void *)v365 + 24))(v365);
    }
    else
    {
      v148[4] = v365;
      v365 = 0;
    }
  }
  else
  {
    v148[4] = 0;
  }
  v392 = v148;
  uint64_t v149 = *(void *)&v364[0];
  *(void *)&v364[0] = 0;
  uint64_t v384 = v147;
  v385 = 0;
  re::FunctionBase<24ul,void ()(re::BoundingBoxCalculation *)>::operator=<24ul>((uint64_t)v383, (uint64_t)buf);
  uint64_t v150 = operator new(0x30uLL);
  *uint64_t v150 = &unk_26E712580;
  uint64_t v151 = (uint64_t)(v150 + 1);
  v150[4] = v384;
  v150[5] = 0;
  re::FunctionBase<24ul,void ()(re::BoundingBoxCalculation *)>::destroyCallable((uint64_t)(v150 + 1));
  char v152 = v385;
  if (v150[4] == v384)
  {
    if (v385 != v383)
    {
      v150[5] = v385;
      v385 = 0;
      goto LABEL_161;
    }
    char v152 = v383;
  }
  else if (!v385)
  {
    goto LABEL_161;
  }
  unint64_t v153 = (*(uint64_t (**)(unsigned char *))(*(void *)v152 + 40))(v152);
  if (v153 >= 0x19)
  {
    unint64_t v154 = v153;
    uint64_t v155 = v150[4];
    if (v155) {
      uint64_t v151 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v155 + 32))(v155, v154, 0);
    }
    else {
      uint64_t v151 = 0;
    }
  }
  v150[5] = v151;
  (*(void (**)(unsigned char *, uint64_t))(*(void *)v385 + 32))(v385, v151);
  re::FunctionBase<24ul,void ()(re::BoundingBoxCalculation *)>::destroyCallable((uint64_t)v383);
LABEL_161:
  uint64_t v387 = 0;
  *(void *)&v388[0].char var0 = v149;
  v389 = v150;
  std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::operator=[abi:nn180100]((uint64_t *)(v144 + 808), (uint64_t *)v388);
  std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v388);
  std::__function::__value_func<void ()(re::Deformer *)>::~__value_func[abi:nn180100](v386);
  re::FunctionBase<24ul,void ()(re::BoundingBoxCalculation *)>::destroyCallable((uint64_t)v383);
  *(void *)&v388[0].char var0 = 0x32458CCC0A585AB0;
  v388[0].var1 = "Bounding Box Calculation";
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v144 + 1368, v388, &re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::kDeformerIndex);
  re::StringID::destroyString((re::StringID *)v388);
  re::FunctionBase<24ul,void ()(re::BoundingBoxCalculation *)>::destroyCallable((uint64_t)buf);
  uint64_t v156 = *(void *)&v364[0];
  *(void *)&v364[0] = 0;
  if (v156) {
    std::function<void ()(re::BoundingBoxCalculation *)>::operator()((uint64_t)v365, v156);
  }
  std::__function::__value_func<void ()(re::BoundingBoxCalculation *)>::~__value_func[abi:nn180100]((void *)v364 + 1);
  unint64_t v157 = (re *)std::__function::__value_func<void ()(re::BoundingBoxCalculation *)>::~__value_func[abi:nn180100](v378);
  uint64_t v158 = *(void *)(a1 + 40);
  uint64_t v159 = re::globalAllocators(v157);
  uint64_t v160 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v159[2] + 32))(v159[2], 40, 8);
  v160[3] = 0;
  v160[4] = 0;
  void *v160 = &unk_26E711990;
  v160[1] = 0;
  v160[2] = 0;
  *((_WORD *)v160 + 16) = 0;
  v378[0] = &unk_26E712600;
  v379 = v378;
  *((void *)&v363 + 1) = &v362;
  *((void *)&v361 + 1) = v160;
  *(void *)&long long v362 = &unk_26E712600;
  uint64_t v161 = re::globalAllocators((re *)v160)[2];
  uint64_t v391 = v161;
  if (v161) {
    uint64_t v162 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v161 + 32))(v161, 40, 0);
  }
  else {
    uint64_t v162 = 0;
  }
  *uint64_t v162 = &unk_26E712690;
  if (*((void *)&v363 + 1))
  {
    if (*((long long **)&v363 + 1) == &v362)
    {
      v162[4] = v162 + 1;
      (*(void (**)(void))(**((void **)&v363 + 1) + 24))(*((void *)&v363 + 1));
    }
    else
    {
      v162[4] = *((void *)&v363 + 1);
      *((void *)&v363 + 1) = 0;
    }
  }
  else
  {
    v162[4] = 0;
  }
  v392 = v162;
  uint64_t v163 = *((void *)&v361 + 1);
  *((void *)&v361 + 1) = 0;
  uint64_t v384 = v161;
  v385 = 0;
  re::FunctionBase<24ul,void ()(re::TensionDeformer *)>::operator=<24ul>((uint64_t)v383, (uint64_t)buf);
  char v164 = operator new(0x30uLL);
  *char v164 = &unk_26E7126F8;
  uint64_t v165 = (uint64_t)(v164 + 1);
  v164[4] = v384;
  v164[5] = 0;
  re::FunctionBase<24ul,void ()(re::TensionDeformer *)>::destroyCallable((uint64_t)(v164 + 1));
  uint64_t v166 = v385;
  if (v164[4] == v384)
  {
    if (v385 != v383)
    {
      v164[5] = v385;
      v385 = 0;
      goto LABEL_182;
    }
    uint64_t v166 = v383;
  }
  else if (!v385)
  {
    goto LABEL_182;
  }
  unint64_t v167 = (*(uint64_t (**)(unsigned char *))(*(void *)v166 + 40))(v166);
  if (v167 >= 0x19)
  {
    unint64_t v168 = v167;
    uint64_t v169 = v164[4];
    if (v169) {
      uint64_t v165 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v169 + 32))(v169, v168, 0);
    }
    else {
      uint64_t v165 = 0;
    }
  }
  v164[5] = v165;
  (*(void (**)(unsigned char *, uint64_t))(*(void *)v385 + 32))(v385, v165);
  re::FunctionBase<24ul,void ()(re::TensionDeformer *)>::destroyCallable((uint64_t)v383);
LABEL_182:
  uint64_t v387 = 0;
  *(void *)&v388[0].char var0 = v163;
  v389 = v164;
  std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::operator=[abi:nn180100]((uint64_t *)(v158 + 1008), (uint64_t *)v388);
  std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v388);
  std::__function::__value_func<void ()(re::Deformer *)>::~__value_func[abi:nn180100](v386);
  re::FunctionBase<24ul,void ()(re::TensionDeformer *)>::destroyCallable((uint64_t)v383);
  *(void *)&v388[0].char var0 = 0x241C51C064;
  v388[0].var1 = "Tension";
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v158 + 1368, v388, "\t");
  re::StringID::destroyString((re::StringID *)v388);
  re::FunctionBase<24ul,void ()(re::TensionDeformer *)>::destroyCallable((uint64_t)buf);
  uint64_t v170 = *((void *)&v361 + 1);
  *((void *)&v361 + 1) = 0;
  if (v170) {
    std::function<void ()(re::TensionDeformer *)>::operator()(*((uint64_t *)&v363 + 1), v170);
  }
  std::__function::__value_func<void ()(re::TensionDeformer *)>::~__value_func[abi:nn180100](&v362);
  __int16 v171 = (re *)std::__function::__value_func<void ()(re::TensionDeformer *)>::~__value_func[abi:nn180100](v378);
  uint64_t v172 = *(void *)(a1 + 40);
  __int16 v173 = re::globalAllocators(v171);
  unint64_t v174 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v173[2] + 32))(v173[2], 40, 8);
  v174[3] = 0;
  v174[4] = 0;
  v174[1] = 0;
  v174[2] = 0;
  *unint64_t v174 = &unk_26E711200;
  *((_WORD *)v174 + 12) = 0;
  v378[0] = &unk_26E712778;
  v379 = v378;
  *(void *)&long long v361 = (char *)v360 + 8;
  *(void *)&v360[0] = v174;
  *((void *)&v360[0] + 1) = &unk_26E712778;
  uint64_t v175 = re::globalAllocators((re *)v174)[2];
  uint64_t v391 = v175;
  if (v175) {
    uint64_t v176 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v175 + 32))(v175, 40, 0);
  }
  else {
    uint64_t v176 = 0;
  }
  *uint64_t v176 = &unk_26E712808;
  if ((void)v361)
  {
    if ((long long *)v361 == (long long *)((char *)v360 + 8))
    {
      v176[4] = v176 + 1;
      (*(void (**)(void))(*(void *)v361 + 24))(v361);
    }
    else
    {
      v176[4] = v361;
      *(void *)&long long v361 = 0;
    }
  }
  else
  {
    v176[4] = 0;
  }
  v392 = v176;
  uint64_t v177 = *(void *)&v360[0];
  *(void *)&v360[0] = 0;
  uint64_t v384 = v175;
  v385 = 0;
  re::FunctionBase<24ul,void ()(re::WrapDeformer *)>::operator=<24ul>((uint64_t)v383, (uint64_t)buf);
  id v178 = operator new(0x30uLL);
  *id v178 = &unk_26E712870;
  uint64_t v179 = (uint64_t)(v178 + 1);
  v178[4] = v384;
  v178[5] = 0;
  re::FunctionBase<24ul,void ()(re::WrapDeformer *)>::destroyCallable((uint64_t)(v178 + 1));
  unint64_t v180 = v385;
  if (v178[4] == v384)
  {
    if (v385 != v383)
    {
      v178[5] = v385;
      v385 = 0;
      goto LABEL_203;
    }
    unint64_t v180 = v383;
  }
  else if (!v385)
  {
    goto LABEL_203;
  }
  unint64_t v181 = (*(uint64_t (**)(unsigned char *))(*(void *)v180 + 40))(v180);
  if (v181 >= 0x19)
  {
    unint64_t v182 = v181;
    uint64_t v183 = v178[4];
    if (v183) {
      uint64_t v179 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v183 + 32))(v183, v182, 0);
    }
    else {
      uint64_t v179 = 0;
    }
  }
  v178[5] = v179;
  (*(void (**)(unsigned char *, uint64_t))(*(void *)v385 + 32))(v385, v179);
  re::FunctionBase<24ul,void ()(re::WrapDeformer *)>::destroyCallable((uint64_t)v383);
LABEL_203:
  uint64_t v387 = 0;
  *(void *)&v388[0].char var0 = v177;
  v389 = v178;
  std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::operator=[abi:nn180100]((uint64_t *)(v172 + 1168), (uint64_t *)v388);
  std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v388);
  std::__function::__value_func<void ()(re::Deformer *)>::~__value_func[abi:nn180100](v386);
  re::FunctionBase<24ul,void ()(re::WrapDeformer *)>::destroyCallable((uint64_t)v383);
  *(void *)&v388[0].char var0 = 0x4005A4B50800FD78;
  v388[0].var1 = "WrapDeformer";
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v172 + 1368, v388, "\r");
  re::StringID::destroyString((re::StringID *)v388);
  re::FunctionBase<24ul,void ()(re::WrapDeformer *)>::destroyCallable((uint64_t)buf);
  uint64_t v184 = *(void *)&v360[0];
  *(void *)&v360[0] = 0;
  if (v184) {
    std::function<void ()(re::WrapDeformer *)>::operator()(v361, v184);
  }
  std::__function::__value_func<void ()(re::WrapDeformer *)>::~__value_func[abi:nn180100]((void *)v360 + 1);
  uint64_t v185 = (re *)std::__function::__value_func<void ()(re::WrapDeformer *)>::~__value_func[abi:nn180100](v378);
  uint64_t v186 = *(void *)(a1 + 40);
  long long v187 = re::globalAllocators(v185);
  long long v188 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v187[2] + 32))(v187[2], 40, 8);
  v188[3] = 0;
  v188[4] = 0;
  *long long v188 = &unk_26E70F098;
  v188[1] = 0;
  v188[2] = 0;
  *((_WORD *)v188 + 16) = 0;
  v378[0] = &unk_26E7128F0;
  v379 = v378;
  v359 = v358;
  *((void *)&v357 + 1) = v188;
  v358[0] = (uint64_t)&unk_26E7128F0;
  uint64_t v189 = re::globalAllocators((re *)v188)[2];
  uint64_t v391 = v189;
  if (v189) {
    uint64_t v190 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v189 + 32))(v189, 40, 0);
  }
  else {
    uint64_t v190 = 0;
  }
  *uint64_t v190 = &unk_26E712980;
  if (v359)
  {
    if (v359 == v358)
    {
      v190[4] = v190 + 1;
      (*(void (**)(uint64_t *))(*v359 + 24))(v359);
    }
    else
    {
      v190[4] = v359;
      v359 = 0;
    }
  }
  else
  {
    v190[4] = 0;
  }
  v392 = v190;
  uint64_t v191 = *((void *)&v357 + 1);
  *((void *)&v357 + 1) = 0;
  uint64_t v384 = v189;
  v385 = 0;
  re::FunctionBase<24ul,void ()(re::ContactDeformer *)>::operator=<24ul>((uint64_t)v383, (uint64_t)buf);
  float32x4_t v192 = operator new(0x30uLL);
  *float32x4_t v192 = &unk_26E7129E8;
  uint64_t v193 = (uint64_t)(v192 + 1);
  v192[4] = v384;
  v192[5] = 0;
  re::FunctionBase<24ul,void ()(re::ContactDeformer *)>::destroyCallable((uint64_t)(v192 + 1));
  uint64_t v194 = v385;
  if (v192[4] == v384)
  {
    if (v385 != v383)
    {
      v192[5] = v385;
      v385 = 0;
      goto LABEL_224;
    }
    uint64_t v194 = v383;
  }
  else if (!v385)
  {
    goto LABEL_224;
  }
  unint64_t v195 = (*(uint64_t (**)(unsigned char *))(*(void *)v194 + 40))(v194);
  if (v195 >= 0x19)
  {
    unint64_t v196 = v195;
    uint64_t v197 = v192[4];
    if (v197) {
      uint64_t v193 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v197 + 32))(v197, v196, 0);
    }
    else {
      uint64_t v193 = 0;
    }
  }
  v192[5] = v193;
  (*(void (**)(unsigned char *, uint64_t))(*(void *)v385 + 32))(v385, v193);
  re::FunctionBase<24ul,void ()(re::ContactDeformer *)>::destroyCallable((uint64_t)v383);
LABEL_224:
  uint64_t v387 = 0;
  *(void *)&v388[0].char var0 = v191;
  v389 = v192;
  std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::operator=[abi:nn180100]((uint64_t *)(v186 + 1248), (uint64_t *)v388);
  std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v388);
  std::__function::__value_func<void ()(re::Deformer *)>::~__value_func[abi:nn180100](v386);
  re::FunctionBase<24ul,void ()(re::ContactDeformer *)>::destroyCallable((uint64_t)v383);
  *(void *)&v388[0].char var0 = 0x22F387A552F200A4;
  v388[0].var1 = "ContactDeformer";
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v186 + 1368, v388, &re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::kDeformerIndex);
  re::StringID::destroyString((re::StringID *)v388);
  re::FunctionBase<24ul,void ()(re::ContactDeformer *)>::destroyCallable((uint64_t)buf);
  uint64_t v198 = *((void *)&v357 + 1);
  *((void *)&v357 + 1) = 0;
  if (v198) {
    std::function<void ()(re::ContactDeformer *)>::operator()((uint64_t)v359, v198);
  }
  std::__function::__value_func<void ()(re::ContactDeformer *)>::~__value_func[abi:nn180100](v358);
  int v199 = (re *)std::__function::__value_func<void ()(re::ContactDeformer *)>::~__value_func[abi:nn180100](v378);
  uint64_t v200 = *(void *)(a1 + 40);
  v201 = re::globalAllocators(v199);
  uint64_t v202 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v201[2] + 32))(v201[2], 344, 8);
  uint64_t v203 = 0;
  *(_OWORD *)(v202 + 24) = 0u;
  *(_OWORD *)(v202 + 40) = 0u;
  *(_OWORD *)(v202 + 56) = 0u;
  *(_OWORD *)(v202 + 72) = 0u;
  *(_OWORD *)(v202 + 88) = 0u;
  *(_OWORD *)(v202 + 104) = 0u;
  *(_OWORD *)(v202 + 120) = 0u;
  *(_OWORD *)(v202 + 136) = 0u;
  *(_OWORD *)(v202 + 152) = 0u;
  *(_OWORD *)(v202 + 168) = 0u;
  *(_OWORD *)(v202 + 184) = 0u;
  *(_OWORD *)(v202 + 200) = 0u;
  *(_OWORD *)(v202 + 216) = 0u;
  *(_OWORD *)(v202 + 232) = 0u;
  *(_OWORD *)(v202 + 248) = 0u;
  *(_OWORD *)(v202 + 8) = 0u;
  *(_OWORD *)(v202 + 264) = 0u;
  *(_OWORD *)(v202 + 280) = 0u;
  *(_OWORD *)(v202 + 296) = 0u;
  *(_OWORD *)(v202 + 312) = 0u;
  *(_OWORD *)(v202 + 328) = 0u;
  *(void *)uint64_t v202 = &unk_26E713A00;
  do
  {
    uint64_t v204 = v202 + v203;
    *(void *)(v204 + 40) = 0;
    *(void *)(v204 + 16) = 0;
    *(void *)(v204 + 24) = 0;
    *(void *)(v204 + 8) = 0;
    v203 += 40;
    *(_DWORD *)(v204 + 32) = 0;
  }
  while (v203 != 320);
  *(void *)(v202 + 328) = 0;
  *(_WORD *)(v202 + 336) = 0;
  v378[0] = &unk_26E712A68;
  v379 = v378;
  *(void *)&long long v357 = (char *)v356 + 8;
  *(void *)&v356[0] = v202;
  *((void *)&v356[0] + 1) = &unk_26E712A68;
  uint64_t v205 = re::globalAllocators((re *)v202)[2];
  uint64_t v391 = v205;
  if (v205) {
    v206 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v205 + 32))(v205, 40, 0);
  }
  else {
    v206 = 0;
  }
  void *v206 = &unk_26E712AF8;
  if ((void)v357)
  {
    if ((long long *)v357 == (long long *)((char *)v356 + 8))
    {
      v206[4] = v206 + 1;
      (*(void (**)(void))(*(void *)v357 + 24))(v357);
    }
    else
    {
      v206[4] = v357;
      *(void *)&long long v357 = 0;
    }
  }
  else
  {
    v206[4] = 0;
  }
  v392 = v206;
  uint64_t v207 = *(void *)&v356[0];
  *(void *)&v356[0] = 0;
  uint64_t v384 = v205;
  v385 = 0;
  re::FunctionBase<24ul,void ()(re::PrepareSimplifiedMeshBuffer *)>::operator=<24ul>((uint64_t)v383, (uint64_t)buf);
  uint64_t v208 = operator new(0x30uLL);
  *uint64_t v208 = &unk_26E712B60;
  uint64_t v209 = (uint64_t)(v208 + 1);
  v208[4] = v384;
  v208[5] = 0;
  re::FunctionBase<24ul,void ()(re::PrepareSimplifiedMeshBuffer *)>::destroyCallable((uint64_t)(v208 + 1));
  uint64_t v210 = v385;
  if (v208[4] == v384)
  {
    if (v385 != v383)
    {
      v208[5] = v385;
      v385 = 0;
      goto LABEL_247;
    }
    uint64_t v210 = v383;
  }
  else if (!v385)
  {
    goto LABEL_247;
  }
  unint64_t v211 = (*(uint64_t (**)(unsigned char *))(*(void *)v210 + 40))(v210);
  if (v211 >= 0x19)
  {
    unint64_t v212 = v211;
    uint64_t v213 = v208[4];
    if (v213) {
      uint64_t v209 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v213 + 32))(v213, v212, 0);
    }
    else {
      uint64_t v209 = 0;
    }
  }
  v208[5] = v209;
  (*(void (**)(unsigned char *, uint64_t))(*(void *)v385 + 32))(v385, v209);
  re::FunctionBase<24ul,void ()(re::PrepareSimplifiedMeshBuffer *)>::destroyCallable((uint64_t)v383);
LABEL_247:
  uint64_t v387 = 0;
  *(void *)&v388[0].char var0 = v207;
  v389 = v208;
  std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::operator=[abi:nn180100]((uint64_t *)(v200 + 968), (uint64_t *)v388);
  std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v388);
  std::__function::__value_func<void ()(re::Deformer *)>::~__value_func[abi:nn180100](v386);
  re::FunctionBase<24ul,void ()(re::PrepareSimplifiedMeshBuffer *)>::destroyCallable((uint64_t)v383);
  *(void *)&v388[0].char var0 = 0x906B1D4E64D3F318;
  v388[0].var1 = "PrepareSimplifiedMeshBuffer";
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v200 + 1368, v388, "\b");
  re::StringID::destroyString((re::StringID *)v388);
  re::FunctionBase<24ul,void ()(re::PrepareSimplifiedMeshBuffer *)>::destroyCallable((uint64_t)buf);
  uint64_t v214 = *(void *)&v356[0];
  *(void *)&v356[0] = 0;
  if (v214) {
    std::function<void ()(re::PrepareSimplifiedMeshBuffer *)>::operator()(v357, v214);
  }
  std::__function::__value_func<void ()(re::PrepareSimplifiedMeshBuffer *)>::~__value_func[abi:nn180100]((void *)v356 + 1);
  uint64_t v215 = (re *)std::__function::__value_func<void ()(re::PrepareSimplifiedMeshBuffer *)>::~__value_func[abi:nn180100](v378);
  uint64_t v216 = *(void *)(a1 + 40);
  int v217 = re::globalAllocators(v215);
  long long v218 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v217[2] + 32))(v217[2], 40, 8);
  *((void *)v218 + 1) = 0;
  *((void *)v218 + 2) = 0;
  *(void *)long long v218 = &unk_26E714260;
  *((void *)v218 + 3) = 0;
  *((void *)v218 + 4) = 0;
  v378[0] = &unk_26E712BE0;
  v379 = v378;
  *((void *)&v355 + 1) = &v354;
  *((void *)&v353 + 1) = v218;
  *(void *)&long long v354 = &unk_26E712BE0;
  uint64_t v219 = re::globalAllocators(v218)[2];
  uint64_t v391 = v219;
  if (v219) {
    int v220 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v219 + 32))(v219, 40, 0);
  }
  else {
    int v220 = 0;
  }
  *int v220 = &unk_26E712C70;
  if (*((void *)&v355 + 1))
  {
    if (*((long long **)&v355 + 1) == &v354)
    {
      v220[4] = v220 + 1;
      (*(void (**)(void))(**((void **)&v355 + 1) + 24))(*((void *)&v355 + 1));
    }
    else
    {
      v220[4] = *((void *)&v355 + 1);
      *((void *)&v355 + 1) = 0;
    }
  }
  else
  {
    v220[4] = 0;
  }
  v392 = v220;
  uint64_t v221 = *((void *)&v353 + 1);
  *((void *)&v353 + 1) = 0;
  uint64_t v384 = v219;
  v385 = 0;
  re::FunctionBase<24ul,void ()(re::OpenSubdivViewIndependentComputeStep *)>::operator=<24ul>((uint64_t)v383, (uint64_t)buf);
  v222 = operator new(0x30uLL);
  void *v222 = &unk_26E712CD8;
  uint64_t v223 = (uint64_t)(v222 + 1);
  v222[4] = v384;
  v222[5] = 0;
  re::FunctionBase<24ul,void ()(re::OpenSubdivViewIndependentComputeStep *)>::destroyCallable((uint64_t)(v222 + 1));
  v224 = v385;
  if (v222[4] == v384)
  {
    if (v385 != v383)
    {
      v222[5] = v385;
      v385 = 0;
      goto LABEL_268;
    }
    v224 = v383;
  }
  else if (!v385)
  {
    goto LABEL_268;
  }
  unint64_t v225 = (*(uint64_t (**)(unsigned char *))(*(void *)v224 + 40))(v224);
  if (v225 >= 0x19)
  {
    unint64_t v226 = v225;
    uint64_t v227 = v222[4];
    if (v227) {
      uint64_t v223 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v227 + 32))(v227, v226, 0);
    }
    else {
      uint64_t v223 = 0;
    }
  }
  v222[5] = v223;
  (*(void (**)(unsigned char *, uint64_t))(*(void *)v385 + 32))(v385, v223);
  re::FunctionBase<24ul,void ()(re::OpenSubdivViewIndependentComputeStep *)>::destroyCallable((uint64_t)v383);
LABEL_268:
  uint64_t v387 = 0;
  *(void *)&v388[0].char var0 = v221;
  v389 = v222;
  std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::operator=[abi:nn180100]((uint64_t *)(v216 + 888), (uint64_t *)v388);
  std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v388);
  std::__function::__value_func<void ()(re::Deformer *)>::~__value_func[abi:nn180100](v386);
  re::FunctionBase<24ul,void ()(re::OpenSubdivViewIndependentComputeStep *)>::destroyCallable((uint64_t)v383);
  *(void *)&v388[0].char var0 = 0xA6B838C1BF1BB512;
  v388[0].var1 = "OpenSubdivViewIndependentComputeStep";
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v216 + 1368, v388, &re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::kDeformerIndex);
  re::StringID::destroyString((re::StringID *)v388);
  re::FunctionBase<24ul,void ()(re::OpenSubdivViewIndependentComputeStep *)>::destroyCallable((uint64_t)buf);
  uint64_t v228 = *((void *)&v353 + 1);
  *((void *)&v353 + 1) = 0;
  if (v228) {
    std::function<void ()(re::OpenSubdivViewIndependentComputeStep *)>::operator()(*((uint64_t *)&v355 + 1), v228);
  }
  std::__function::__value_func<void ()(re::OpenSubdivViewIndependentComputeStep *)>::~__value_func[abi:nn180100](&v354);
  v229 = (re *)std::__function::__value_func<void ()(re::OpenSubdivViewIndependentComputeStep *)>::~__value_func[abi:nn180100](v378);
  uint64_t v230 = *(void *)(a1 + 40);
  v231 = re::globalAllocators(v229);
  v232 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v231[2] + 32))(v231[2], 32, 8);
  *(void *)v232 = &unk_26E7142B0;
  *((void *)v232 + 1) = 0;
  *((void *)v232 + 2) = 0;
  *((void *)v232 + 3) = 0;
  v378[0] = &unk_26E712D58;
  v379 = v378;
  *(void *)&long long v353 = (char *)v352 + 8;
  *(void *)&v352[0] = v232;
  *((void *)&v352[0] + 1) = &unk_26E712D58;
  uint64_t v233 = re::globalAllocators(v232)[2];
  uint64_t v391 = v233;
  if (v233) {
    v234 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v233 + 32))(v233, 40, 0);
  }
  else {
    v234 = 0;
  }
  void *v234 = &unk_26E712DE8;
  if ((void)v353)
  {
    if ((long long *)v353 == (long long *)((char *)v352 + 8))
    {
      v234[4] = v234 + 1;
      (*(void (**)(void))(*(void *)v353 + 24))(v353);
    }
    else
    {
      v234[4] = v353;
      *(void *)&long long v353 = 0;
    }
  }
  else
  {
    v234[4] = 0;
  }
  v392 = v234;
  uint64_t v235 = *(void *)&v352[0];
  *(void *)&v352[0] = 0;
  uint64_t v384 = v233;
  v385 = 0;
  re::FunctionBase<24ul,void ()(re::OpenSubdivViewDependentComputeStep *)>::operator=<24ul>((uint64_t)v383, (uint64_t)buf);
  v236 = operator new(0x30uLL);
  void *v236 = &unk_26E712E50;
  uint64_t v237 = (uint64_t)(v236 + 1);
  v236[4] = v384;
  v236[5] = 0;
  re::FunctionBase<24ul,void ()(re::OpenSubdivViewDependentComputeStep *)>::destroyCallable((uint64_t)(v236 + 1));
  v238 = v385;
  if (v236[4] == v384)
  {
    if (v385 != v383)
    {
      v236[5] = v385;
      v385 = 0;
      goto LABEL_289;
    }
    v238 = v383;
  }
  else if (!v385)
  {
    goto LABEL_289;
  }
  unint64_t v239 = (*(uint64_t (**)(unsigned char *))(*(void *)v238 + 40))(v238);
  if (v239 >= 0x19)
  {
    unint64_t v240 = v239;
    uint64_t v241 = v236[4];
    if (v241) {
      uint64_t v237 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v241 + 32))(v241, v240, 0);
    }
    else {
      uint64_t v237 = 0;
    }
  }
  v236[5] = v237;
  (*(void (**)(unsigned char *, uint64_t))(*(void *)v385 + 32))(v385, v237);
  re::FunctionBase<24ul,void ()(re::OpenSubdivViewDependentComputeStep *)>::destroyCallable((uint64_t)v383);
LABEL_289:
  uint64_t v387 = 0;
  *(void *)&v388[0].char var0 = v235;
  v389 = v236;
  std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::operator=[abi:nn180100]((uint64_t *)(v230 + 928), (uint64_t *)v388);
  std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v388);
  std::__function::__value_func<void ()(re::Deformer *)>::~__value_func[abi:nn180100](v386);
  re::FunctionBase<24ul,void ()(re::OpenSubdivViewDependentComputeStep *)>::destroyCallable((uint64_t)v383);
  *(void *)&v388[0].char var0 = 0xC6F7B7A81D0D03C8;
  v388[0].var1 = "OpenSubdivViewDependentComputeStep";
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v230 + 1368, v388, "\a");
  re::StringID::destroyString((re::StringID *)v388);
  re::FunctionBase<24ul,void ()(re::OpenSubdivViewDependentComputeStep *)>::destroyCallable((uint64_t)buf);
  uint64_t v242 = *(void *)&v352[0];
  *(void *)&v352[0] = 0;
  if (v242) {
    std::function<void ()(re::OpenSubdivViewDependentComputeStep *)>::operator()(v353, v242);
  }
  std::__function::__value_func<void ()(re::OpenSubdivViewDependentComputeStep *)>::~__value_func[abi:nn180100]((void *)v352 + 1);
  v243 = (re *)std::__function::__value_func<void ()(re::OpenSubdivViewDependentComputeStep *)>::~__value_func[abi:nn180100](v378);
  uint64_t v244 = *(void *)(a1 + 40);
  v245 = re::globalAllocators(v243);
  v246 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v245[2] + 32))(v245[2], 168, 8);
  v378[0] = &unk_26E712ED0;
  v379 = v378;
  *((void *)&v351 + 1) = &v350;
  *((void *)&v349 + 1) = v246;
  *(void *)&long long v350 = &unk_26E712ED0;
  uint64_t v248 = re::globalAllocators(v247)[2];
  uint64_t v391 = v248;
  if (v248) {
    v249 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v248 + 32))(v248, 40, 0);
  }
  else {
    v249 = 0;
  }
  void *v249 = &unk_26E712F60;
  if (*((void *)&v351 + 1))
  {
    if (*((long long **)&v351 + 1) == &v350)
    {
      v249[4] = v249 + 1;
      (*(void (**)(void))(**((void **)&v351 + 1) + 24))(*((void *)&v351 + 1));
    }
    else
    {
      v249[4] = *((void *)&v351 + 1);
      *((void *)&v351 + 1) = 0;
    }
  }
  else
  {
    v249[4] = 0;
  }
  v392 = v249;
  uint64_t v250 = *((void *)&v349 + 1);
  *((void *)&v349 + 1) = 0;
  uint64_t v384 = v248;
  v385 = 0;
  re::FunctionBase<24ul,void ()(re::CustomDeformers *)>::operator=<24ul>((uint64_t)v383, (uint64_t)buf);
  v251 = operator new(0x30uLL);
  void *v251 = &unk_26E712FC8;
  uint64_t v252 = (uint64_t)(v251 + 1);
  v251[4] = v384;
  v251[5] = 0;
  re::FunctionBase<24ul,void ()(re::CustomDeformers *)>::destroyCallable((uint64_t)(v251 + 1));
  v253 = v385;
  if (v251[4] == v384)
  {
    if (v385 != v383)
    {
      v251[5] = v385;
      v385 = 0;
      goto LABEL_310;
    }
    v253 = v383;
  }
  else if (!v385)
  {
    goto LABEL_310;
  }
  unint64_t v254 = (*(uint64_t (**)(unsigned char *))(*(void *)v253 + 40))(v253);
  if (v254 >= 0x19)
  {
    unint64_t v255 = v254;
    uint64_t v256 = v251[4];
    if (v256) {
      uint64_t v252 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v256 + 32))(v256, v255, 0);
    }
    else {
      uint64_t v252 = 0;
    }
  }
  v251[5] = v252;
  (*(void (**)(unsigned char *, uint64_t))(*(void *)v385 + 32))(v385, v252);
  re::FunctionBase<24ul,void ()(re::CustomDeformers *)>::destroyCallable((uint64_t)v383);
LABEL_310:
  uint64_t v387 = 0;
  *(void *)&v388[0].char var0 = v250;
  v389 = v251;
  std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::operator=[abi:nn180100]((uint64_t *)(v244 + 1128), (uint64_t *)v388);
  std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v388);
  std::__function::__value_func<void ()(re::Deformer *)>::~__value_func[abi:nn180100](v386);
  re::FunctionBase<24ul,void ()(re::CustomDeformers *)>::destroyCallable((uint64_t)v383);
  *(void *)&v388[0].char var0 = 0xEAA1CBFA3D5AC124;
  v388[0].var1 = "Custom Deformers";
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v244 + 1368, v388, &re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::kDeformerIndex);
  re::StringID::destroyString((re::StringID *)v388);
  re::FunctionBase<24ul,void ()(re::CustomDeformers *)>::destroyCallable((uint64_t)buf);
  uint64_t v257 = *((void *)&v349 + 1);
  *((void *)&v349 + 1) = 0;
  if (v257) {
    std::function<void ()(re::CustomDeformers *)>::operator()(*((uint64_t *)&v351 + 1), v257);
  }
  std::__function::__value_func<void ()(re::CustomDeformers *)>::~__value_func[abi:nn180100](&v350);
  v258 = (re *)std::__function::__value_func<void ()(re::CustomDeformers *)>::~__value_func[abi:nn180100](v378);
  uint64_t v259 = *(void *)(a1 + 40);
  v260 = re::globalAllocators(v258);
  v261 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v260[2] + 32))(v260[2], 8, 8);
  *(void *)v261 = &unk_26E711CB8;
  v378[0] = &unk_26E713048;
  v379 = v378;
  *(void *)&long long v349 = (char *)v348 + 8;
  *(void *)&v348[0] = v261;
  *((void *)&v348[0] + 1) = &unk_26E713048;
  uint64_t v262 = re::globalAllocators(v261)[2];
  uint64_t v391 = v262;
  if (v262) {
    v263 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v262 + 32))(v262, 40, 0);
  }
  else {
    v263 = 0;
  }
  void *v263 = &unk_26E7130D8;
  if ((void)v349)
  {
    if ((long long *)v349 == (long long *)((char *)v348 + 8))
    {
      v263[4] = v263 + 1;
      (*(void (**)(void))(*(void *)v349 + 24))(v349);
    }
    else
    {
      v263[4] = v349;
      *(void *)&long long v349 = 0;
    }
  }
  else
  {
    v263[4] = 0;
  }
  v392 = v263;
  uint64_t v264 = *(void *)&v348[0];
  *(void *)&v348[0] = 0;
  uint64_t v384 = v262;
  v385 = 0;
  re::FunctionBase<24ul,void ()(re::FenceDeformer *)>::operator=<24ul>((uint64_t)v383, (uint64_t)buf);
  v265 = operator new(0x30uLL);
  void *v265 = &unk_26E713140;
  uint64_t v266 = (uint64_t)(v265 + 1);
  v265[4] = v384;
  v265[5] = 0;
  re::FunctionBase<24ul,void ()(re::FenceDeformer *)>::destroyCallable((uint64_t)(v265 + 1));
  v267 = v385;
  if (v265[4] == v384)
  {
    if (v385 != v383)
    {
      v265[5] = v385;
      v385 = 0;
      goto LABEL_331;
    }
    v267 = v383;
  }
  else if (!v385)
  {
    goto LABEL_331;
  }
  unint64_t v268 = (*(uint64_t (**)(unsigned char *))(*(void *)v267 + 40))(v267);
  if (v268 >= 0x19)
  {
    unint64_t v269 = v268;
    uint64_t v270 = v265[4];
    if (v270) {
      uint64_t v266 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v270 + 32))(v270, v269, 0);
    }
    else {
      uint64_t v266 = 0;
    }
  }
  v265[5] = v266;
  (*(void (**)(unsigned char *, uint64_t))(*(void *)v385 + 32))(v385, v266);
  re::FunctionBase<24ul,void ()(re::FenceDeformer *)>::destroyCallable((uint64_t)v383);
LABEL_331:
  uint64_t v387 = 0;
  *(void *)&v388[0].char var0 = v264;
  v389 = v265;
  std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::operator=[abi:nn180100]((uint64_t *)(v259 + 1208), (uint64_t *)v388);
  std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v388);
  std::__function::__value_func<void ()(re::Deformer *)>::~__value_func[abi:nn180100](v386);
  re::FunctionBase<24ul,void ()(re::FenceDeformer *)>::destroyCallable((uint64_t)v383);
  *(void *)&v388[0].char var0 = 0x4425D6C2BB3546C6;
  v388[0].var1 = "FenceDeformer";
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v259 + 1368, v388, &re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::kDeformerIndex);
  re::StringID::destroyString((re::StringID *)v388);
  re::FunctionBase<24ul,void ()(re::FenceDeformer *)>::destroyCallable((uint64_t)buf);
  uint64_t v271 = *(void *)&v348[0];
  *(void *)&v348[0] = 0;
  if (v271) {
    std::function<void ()(re::FenceDeformer *)>::operator()(v349, v271);
  }
  std::__function::__value_func<void ()(re::FenceDeformer *)>::~__value_func[abi:nn180100]((void *)v348 + 1);
  v272 = (re *)std::__function::__value_func<void ()(re::FenceDeformer *)>::~__value_func[abi:nn180100](v378);
  uint64_t v273 = *(void *)(a1 + 40);
  v274 = re::globalAllocators(v272);
  uint64_t v275 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v274[2] + 32))(v274[2], 48, 8);
  *(void *)(v275 + 40) = 0;
  *(void *)uint64_t v275 = &unk_26E70EED0;
  *(_OWORD *)(v275 + 8) = 0u;
  *(_OWORD *)(v275 + 24) = 0u;
  *(_WORD *)(v275 + 40) = 0;
  v378[0] = &unk_26E7131C0;
  v379 = v378;
  v347 = v346;
  uint64_t v345 = v275;
  v346[0] = (uint64_t)&unk_26E7131C0;
  uint64_t v276 = re::globalAllocators((re *)v275)[2];
  uint64_t v391 = v276;
  if (v276) {
    v277 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v276 + 32))(v276, 40, 0);
  }
  else {
    v277 = 0;
  }
  void *v277 = &unk_26E713250;
  if (v347)
  {
    if (v347 == v346)
    {
      v277[4] = v277 + 1;
      (*(void (**)(uint64_t *))(*v347 + 24))(v347);
    }
    else
    {
      v277[4] = v347;
      v347 = 0;
    }
  }
  else
  {
    v277[4] = 0;
  }
  v392 = v277;
  uint64_t v278 = v345;
  uint64_t v345 = 0;
  uint64_t v384 = v276;
  v385 = 0;
  re::FunctionBase<24ul,void ()(re::VertexCacheDeformer *)>::operator=<24ul>((uint64_t)v383, (uint64_t)buf);
  v279 = operator new(0x30uLL);
  void *v279 = &unk_26E7132B8;
  uint64_t v280 = (uint64_t)(v279 + 1);
  v279[4] = v384;
  v279[5] = 0;
  re::FunctionBase<24ul,void ()(re::VertexCacheDeformer *)>::destroyCallable((uint64_t)(v279 + 1));
  v281 = v385;
  if (v279[4] == v384)
  {
    if (v385 != v383)
    {
      v279[5] = v385;
      v385 = 0;
      goto LABEL_352;
    }
    v281 = v383;
  }
  else if (!v385)
  {
    goto LABEL_352;
  }
  unint64_t v282 = (*(uint64_t (**)(unsigned char *))(*(void *)v281 + 40))(v281);
  if (v282 >= 0x19)
  {
    unint64_t v283 = v282;
    uint64_t v284 = v279[4];
    if (v284) {
      uint64_t v280 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v284 + 32))(v284, v283, 0);
    }
    else {
      uint64_t v280 = 0;
    }
  }
  v279[5] = v280;
  (*(void (**)(unsigned char *, uint64_t))(*(void *)v385 + 32))(v385, v280);
  re::FunctionBase<24ul,void ()(re::VertexCacheDeformer *)>::destroyCallable((uint64_t)v383);
LABEL_352:
  uint64_t v387 = 0;
  *(void *)&v388[0].char var0 = v278;
  v389 = v279;
  std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::operator=[abi:nn180100]((uint64_t *)(v273 + 1288), (uint64_t *)v388);
  std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v388);
  std::__function::__value_func<void ()(re::Deformer *)>::~__value_func[abi:nn180100](v386);
  re::FunctionBase<24ul,void ()(re::VertexCacheDeformer *)>::destroyCallable((uint64_t)v383);
  *(void *)&v388[0].char var0 = 0x20889405B90383CLL;
  v388[0].var1 = "VertexCache";
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v273 + 1368, v388, &re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::kDeformerIndex);
  re::StringID::destroyString((re::StringID *)v388);
  re::FunctionBase<24ul,void ()(re::VertexCacheDeformer *)>::destroyCallable((uint64_t)buf);
  uint64_t v285 = v345;
  uint64_t v345 = 0;
  if (v285) {
    std::function<void ()(re::VertexCacheDeformer *)>::operator()((uint64_t)v347, v285);
  }
  std::__function::__value_func<void ()(re::VertexCacheDeformer *)>::~__value_func[abi:nn180100](v346);
  v286 = (re *)std::__function::__value_func<void ()(re::VertexCacheDeformer *)>::~__value_func[abi:nn180100](v378);
  uint64_t v287 = *(void *)(a1 + 40);
  v288 = re::globalAllocators(v286);
  uint64_t v289 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v288[2] + 32))(v288[2], 208, 8);
  *(_OWORD *)(v289 + 8) = 0u;
  *(_OWORD *)(v289 + 24) = 0u;
  *(_OWORD *)(v289 + 40) = 0u;
  *(_OWORD *)(v289 + 56) = 0u;
  *(_OWORD *)(v289 + 72) = 0u;
  *(_OWORD *)(v289 + 88) = 0u;
  *(_OWORD *)(v289 + 104) = 0u;
  *(_OWORD *)(v289 + 120) = 0u;
  *(_OWORD *)(v289 + 136) = 0u;
  *(_OWORD *)(v289 + 152) = 0u;
  *(_OWORD *)(v289 + 168) = 0u;
  *(_OWORD *)(v289 + 184) = 0u;
  *(void *)uint64_t v289 = &unk_26E713D18;
  *(void *)(v289 + 16) = 0;
  *(void *)(v289 + 24) = 0;
  *(void *)(v289 + 32) = 0;
  *(_DWORD *)(v289 + 40) = 1;
  *(void *)(v289 + 48) = 0;
  *(void *)(v289 + 56) = 0;
  *(void *)(v289 + 64) = 0;
  *(_DWORD *)(v289 + 72) = 0;
  *(void *)(v289 + 80) = 0;
  *(void *)(v289 + 88) = 0;
  *(_DWORD *)(v289 + 104) = 0;
  *(void *)(v289 + 96) = 0;
  *(void *)(v289 + 112) = 0;
  *(void *)(v289 + 120) = 0;
  *(_DWORD *)(v289 + 128) = 0;
  *(void *)(v289 + 132) = 0x1FFFFFFFFLL;
  *(void *)(v289 + 144) = 0;
  *(void *)(v289 + 152) = 0;
  *(_DWORD *)(v289 + 160) = 1;
  *(void *)(v289 + 168) = 0;
  *(void *)(v289 + 176) = 0;
  *(_DWORD *)(v289 + 192) = 0;
  *(void *)(v289 + 184) = 0;
  *(void *)(v289 + 200) = 0;
  v378[0] = &unk_26E713338;
  v379 = v378;
  v344 = v343;
  uint64_t v342 = v289;
  v343[0] = (uint64_t)&unk_26E713338;
  uint64_t v290 = re::globalAllocators((re *)v289)[2];
  uint64_t v391 = v290;
  if (v290) {
    v291 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v290 + 32))(v290, 40, 0);
  }
  else {
    v291 = 0;
  }
  void *v291 = &unk_26E7133C8;
  if (v344)
  {
    if (v344 == v343)
    {
      v291[4] = v291 + 1;
      (*(void (**)(uint64_t *))(*v344 + 24))(v344);
    }
    else
    {
      v291[4] = v344;
      v344 = 0;
    }
  }
  else
  {
    v291[4] = 0;
  }
  v392 = v291;
  uint64_t v292 = v342;
  uint64_t v342 = 0;
  uint64_t v384 = v290;
  v385 = 0;
  re::FunctionBase<24ul,void ()(re::JiggleDeformer *)>::operator=<24ul>((uint64_t)v383, (uint64_t)buf);
  v293 = operator new(0x30uLL);
  void *v293 = &unk_26E713430;
  uint64_t v294 = (uint64_t)(v293 + 1);
  v293[4] = v384;
  v293[5] = 0;
  re::FunctionBase<24ul,void ()(re::JiggleDeformer *)>::destroyCallable((uint64_t)(v293 + 1));
  v295 = v385;
  if (v293[4] != v384)
  {
    v296 = &xmmword_234364000;
    if (!v385) {
      goto LABEL_373;
    }
LABEL_368:
    unint64_t v297 = (*(uint64_t (**)(unsigned char *))(*(void *)v295 + 40))(v295);
    if (v297 >= 0x19)
    {
      unint64_t v298 = v297;
      uint64_t v299 = v293[4];
      if (v299) {
        uint64_t v294 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v299 + 32))(v299, v298, 0);
      }
      else {
        uint64_t v294 = 0;
      }
    }
    v293[5] = v294;
    (*(void (**)(unsigned char *, uint64_t))(*(void *)v385 + 32))(v385, v294);
    re::FunctionBase<24ul,void ()(re::JiggleDeformer *)>::destroyCallable((uint64_t)v383);
    goto LABEL_373;
  }
  if (v385 == v383)
  {
    v295 = v383;
    v296 = &xmmword_234364000;
    goto LABEL_368;
  }
  v293[5] = v385;
  v385 = 0;
  v296 = &xmmword_234364000;
LABEL_373:
  uint64_t v387 = 0;
  *(void *)&v388[0].char var0 = v292;
  v389 = v293;
  std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::operator=[abi:nn180100]((uint64_t *)(v287 + 1328), (uint64_t *)v388);
  std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v388);
  std::__function::__value_func<void ()(re::Deformer *)>::~__value_func[abi:nn180100](v386);
  re::FunctionBase<24ul,void ()(re::JiggleDeformer *)>::destroyCallable((uint64_t)v383);
  *(void *)&v388[0].char var0 = 0x2A152C09AEB06114;
  v388[0].var1 = "JiggleDeformer";
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>(v287 + 1368, v388, &re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::kDeformerIndex);
  re::StringID::destroyString((re::StringID *)v388);
  re::FunctionBase<24ul,void ()(re::JiggleDeformer *)>::destroyCallable((uint64_t)buf);
  uint64_t v300 = v342;
  uint64_t v342 = 0;
  if (v300) {
    std::function<void ()(re::JiggleDeformer *)>::operator()((uint64_t)v344, v300);
  }
  std::__function::__value_func<void ()(re::JiggleDeformer *)>::~__value_func[abi:nn180100](v343);
  v301 = (re *)std::__function::__value_func<void ()(re::JiggleDeformer *)>::~__value_func[abi:nn180100](v378);
  v302 = re::globalAllocators(v301);
  v303 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v302[2] + 32))(v302[2], 2192, 16);
  bzero(v303, 0x890uLL);
  *((_DWORD *)v303 + 437) = 0x7FFFFFFF;
  v304 = (long long *)MEMORY[0x263EF89A8];
  long long v305 = *(_OWORD *)(MEMORY[0x263EF89A8] + 16);
  *((_OWORD *)v303 + 110) = *MEMORY[0x263EF89A8];
  *((_OWORD *)v303 + 111) = v305;
  long long v306 = v304[3];
  *((_OWORD *)v303 + 112) = v304[2];
  *((_OWORD *)v303 + 113) = v306;
  v303[230] = 0;
  v303[229] = 0;
  v303[232] = 256;
  *((_DWORD *)v303 + 466) = 256;
  v303[234] = 0;
  v303[236] = 0;
  v303[235] = 0;
  v303[237] = 0x10000000100;
  *((_DWORD *)v303 + 476) = 200;
  v303[247] = 0;
  *(_OWORD *)(v303 + 243) = 0u;
  *(_OWORD *)(v303 + 245) = 0u;
  *(_OWORD *)(v303 + 239) = 0u;
  *(_OWORD *)(v303 + 241) = 0u;
  *((_OWORD *)v303 + 124) = xmmword_23435FD50;
  *((_OWORD *)v303 + 125) = xmmword_23435FD60;
  *((_OWORD *)v303 + 126) = xmmword_23435FD80;
  *((_OWORD *)v303 + 127) = xmmword_23435FD50;
  *((_OWORD *)v303 + 128) = xmmword_23435FD60;
  *((_OWORD *)v303 + 129) = xmmword_23435FD80;
  *((_OWORD *)v303 + 130) = xmmword_23435FD50;
  *((_OWORD *)v303 + 131) = xmmword_23435FD60;
  *((_OWORD *)v303 + 132) = xmmword_23435FD80;
  *((_OWORD *)v303 + 133) = xmmword_23435FD50;
  *((_OWORD *)v303 + 134) = xmmword_23435FD60;
  *((_OWORD *)v303 + 135) = xmmword_23435FD80;
  v303[272] = 0x3D4CCCCD3F800000;
  *(void *)(a1 + 112) = v303;
  void *v303 = *(void *)(a1 + 88);
  v307 = (re *)re::CameraStreamContext::init((re::CameraStreamContext *)(v303 + 2));
  v303[232] = 256;
  *((_OWORD *)v303 + 124) = xmmword_23435FD50;
  *((_OWORD *)v303 + 125) = xmmword_23435FD60;
  *((_OWORD *)v303 + 126) = xmmword_23435FD80;
  *((_OWORD *)v303 + 127) = xmmword_23435FD50;
  *((_OWORD *)v303 + 128) = xmmword_23435FD60;
  *((_OWORD *)v303 + 129) = xmmword_23435FD80;
  *((_OWORD *)v303 + 130) = xmmword_23435FD50;
  *((_OWORD *)v303 + 131) = xmmword_23435FD60;
  *((_OWORD *)v303 + 132) = xmmword_23435FD80;
  *((_OWORD *)v303 + 133) = xmmword_23435FD50;
  *((_OWORD *)v303 + 134) = xmmword_23435FD60;
  *((_OWORD *)v303 + 135) = xmmword_23435FD80;
  v308 = re::globalAllocators(v307);
  uint64_t v309 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v308[2] + 32))(v308[2], 288, 16);
  *(_OWORD *)uint64_t v309 = 0u;
  *(_OWORD *)(v309 + 16) = 0u;
  *(_OWORD *)(v309 + 32) = 0u;
  *(_OWORD *)(v309 + 48) = 0u;
  *(_OWORD *)(v309 + 64) = 0u;
  *(_OWORD *)(v309 + 80) = 0u;
  *(_OWORD *)(v309 + 96) = 0u;
  *(_OWORD *)(v309 + 112) = 0u;
  *(_OWORD *)(v309 + 128) = 0u;
  *(_OWORD *)(v309 + 144) = 0u;
  *(_OWORD *)(v309 + 192) = 0u;
  *(_OWORD *)(v309 + 160) = 0u;
  *(_OWORD *)(v309 + 176) = 0u;
  *(_OWORD *)(v309 + 208) = 0u;
  *(_OWORD *)(v309 + 224) = 0u;
  *(_OWORD *)(v309 + 240) = 0u;
  *(_OWORD *)(v309 + 256) = 0u;
  *(_OWORD *)(v309 + 272) = 0u;
  long long v310 = *v304;
  long long v311 = v304[1];
  long long v312 = v304[3];
  *(_OWORD *)(v309 + 32) = v304[2];
  *(_OWORD *)(v309 + 48) = v312;
  *(_OWORD *)uint64_t v309 = v310;
  *(_OWORD *)(v309 + 16) = v311;
  long long v313 = v304[1];
  *(_OWORD *)(v309 + 64) = *v304;
  *(_OWORD *)(v309 + 80) = v313;
  long long v314 = v304[3];
  *(_OWORD *)(v309 + 96) = v304[2];
  *(_OWORD *)(v309 + 112) = v314;
  *(_OWORD *)(v309 + 144) = 0u;
  *(_OWORD *)(v309 + 160) = 0u;
  *(_OWORD *)(v309 + 208) = 0u;
  *(_OWORD *)(v309 + 192) = 0u;
  v315 = (re *)re::DynamicString::setCapacity((void *)(v309 + 192), 0);
  long long v316 = v304[1];
  *(_OWORD *)(v309 + 224) = *v304;
  *(_OWORD *)(v309 + 240) = v316;
  long long v317 = v304[3];
  *(_OWORD *)(v309 + 256) = v304[2];
  *(_OWORD *)(v309 + 272) = v317;
  *(void *)(a1 + 120) = v309;
  v318 = re::globalAllocators(v315);
  uint64_t v319 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v318[2] + 32))(v318[2], 80, 8);
  *(_OWORD *)uint64_t v319 = 0u;
  *(_OWORD *)(v319 + 16) = 0u;
  *(_OWORD *)(v319 + 32) = 0u;
  *(_OWORD *)(v319 + 48) = 0u;
  *(void *)(v319 + 52) = 0x1FFFFFFFFLL;
  *(void *)(v319 + 64) = 0;
  *(void *)(v319 + 72) = 0;
  *(void *)(a1 + 128) = v319;
  re::DisplayStatsManager::init((re::DisplayStatsManager *)v319);
  *(void *)(a1 + 152) = v340;
  v321 = re::globalAllocators(v320);
  uint64_t v322 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v321[2] + 32))(v321[2], 4384, 16);
  uint64_t v323 = -4368;
  uint64_t v324 = *((void *)v296 + 349);
  do
  {
    uint64_t v325 = v322 + v323;
    *(void *)(v325 + 4368) = 0;
    *(_DWORD *)(v325 + 4376) = 0;
    *(void *)(v325 + 4384) = 0;
    *(_DWORD *)(v325 + 4392) = 0;
    *(_OWORD *)(v325 + 5552) = 0uLL;
    *(_OWORD *)(v325 + 5568) = 0uLL;
    *(void *)(v325 + 5588) = 0x7FFFFFFFLL;
    *(_DWORD *)(v325 + 5584) = 0;
    *(void *)(v325 + 5600) = 0;
    *(_DWORD *)(v325 + 5608) = 0;
    *(void *)(v325 + 5616) = 0;
    *(_DWORD *)(v325 + 5624) = 0;
    *(_OWORD *)(v325 + 5760) = 0uLL;
    *(_OWORD *)(v325 + 5776) = 0uLL;
    *(_DWORD *)(v325 + 5792) = 0;
    *(void *)(v325 + 5796) = v324;
    *(void *)(v325 + 5808) = 0;
    v323 += 1456;
  }
  while (v323);
  *(_DWORD *)(v322 + 4368) = 0;
  *(void *)(v322 + 4376) = a1;
  *(void *)(a1 + 160) = v322;
  v326 = re::globalAllocators((re *)v322);
  v327 = (re::ShadowRenderManager *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v326[2] + 32))(v326[2], 896, 16);
  *(void *)(a1 + 168) = re::ShadowRenderManager::ShadowRenderManager(v327, (const re::RenderManager *)a1);
  *(void *)(a1 + 80) = a7;
  if (a7)
  {
    re::VFXManager::setRenderManager(a7, (id *)a1);
    *(unsigned char *)(*(void *)(a1 + 80) + 16) = *(unsigned char *)(a1 + 249);
  }
  return *(unsigned char *)(a1 + 180) != 0;
}

uint64_t (***re::RenderManager::deinit(re::RenderManager *this))(void)
{
  uint64_t v102 = *MEMORY[0x263EF8340];
  uint64_t v2 = (re::DrawingManager *)*((void *)this + 13);
  if (v2 && !*((unsigned char *)v2 + 795)) {
    re::DrawingManager::prepareForDeinit(v2);
  }
  int v3 = (re::ShaderManager *)*((void *)this + 7);
  if (v3) {
    re::ShaderManager::prepareForDeinit(v3);
  }
  re::FrameManager::prepareForDeinit(*((os_unfair_lock_s **)this + 17));
  unint64_t v5 = (re::DrawingManager *)*((void *)this + 13);
  if (v5)
  {
    re::DrawingManager::deinit(v5);
    uint64_t v6 = (re::DrawingManager *)*((void *)this + 13);
    if (v6)
    {
      uint64_t v7 = re::globalAllocators(v5)[2];
      re::DrawingManager::~DrawingManager(v6);
      unint64_t v5 = (re::DrawingManager *)(*(uint64_t (**)(uint64_t, re::DrawingManager *))(*(void *)v7 + 40))(v7, v6);
    }
    *((void *)this + 13) = 0;
  }
  uint64_t v8 = *((void *)this + 20);
  if (v8)
  {
    uint64_t v9 = re::globalAllocators(v5)[2];
    uint64_t v10 = 4368;
    do
    {
      uint64_t v11 = v8 + v10;
      *(void *)(v11 - 208) = 0;
      *(_DWORD *)(v11 - 200) = *(_DWORD *)(v8 + v10 - 200) + 1;
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(v8 + v10 - 64));
      *(void *)(v11 - 224) = 0;
      *(_DWORD *)(v11 - 216) = 0;
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(v8 + v10 - 64));
      *(void *)(v11 - 208) = 0;
      ++*(_DWORD *)(v11 - 200);
      *(void *)(v11 - 1440) = 0;
      ++*(_DWORD *)(v11 - 1432);
      re::HashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)(v8 + v10 - 272));
      *(void *)(v8 + v10 - 1456) = 0;
      *(_DWORD *)(v11 - 1448) = 0;
      double v12 = re::HashTable<unsigned long long,re::LateLatchingManager::AnchorEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)(v8 + v10 - 272));
      *(void *)(v11 - 1440) = 0;
      ++*(_DWORD *)(v11 - 1432);
      v10 -= 1456;
    }
    while (v10);
    unint64_t v5 = (re::DrawingManager *)(*(uint64_t (**)(uint64_t, uint64_t, double))(*(void *)v9 + 40))(v9, v8, v12);
    *((void *)this + 20) = 0;
  }
  uint64_t v13 = *((void *)this + 21);
  if (v13)
  {
    uint64_t v14 = re::globalAllocators(v5)[2];
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(v13 + 864));
    uint64_t v15 = *(void *)(v13 + 856);
    if (v15)
    {

      *(void *)(v13 + 856) = 0;
    }
    re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(v13 + 808));
    re::DynamicArray<unsigned long>::deinit(v13 + 768);
    re::HashTable<unsigned long long,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)(v13 + 720));
    float32x4_t v16 = *(void **)(v13 + 712);
    if (v16)
    {

      *(void *)(v13 + 712) = 0;
    }
    long long v17 = *(void **)(v13 + 704);
    if (v17)
    {

      *(void *)(v13 + 704) = 0;
    }
    long long v18 = *(void **)(v13 + 696);
    if (v18)
    {

      *(void *)(v13 + 696) = 0;
    }
    re::MeshShadowGenerationBacklog::~MeshShadowGenerationBacklog((re::MeshShadowGenerationBacklog *)(v13 + 600));
    double v19 = re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)(v13 + 552));
    uint64_t v20 = *(void *)(v13 + 512);
    if (v20)
    {
      if (*(void *)(v13 + 544)) {
        (*(void (**)(uint64_t, double))(*(void *)v20 + 40))(v20, v19);
      }
      *(void *)(v13 + 544) = 0;
      *(void *)(v13 + 520) = 0;
      *(void *)(v13 + 528) = 0;
      *(void *)(v13 + 512) = 0;
      ++*(_DWORD *)(v13 + 536);
    }
    re::HashTable<unsigned long long,re::PersistentShadowState::ClusterInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)(v13 + 464));
    double v21 = re::HashTable<re::ShadowPair,re::AllocatedShadowHandle,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::deinit((uint64_t *)(v13 + 416));
    uint64_t v22 = *(void *)(v13 + 376);
    if (v22)
    {
      if (*(void *)(v13 + 408)) {
        (*(void (**)(uint64_t, double))(*(void *)v22 + 40))(v22, v21);
      }
      *(void *)(v13 + 408) = 0;
      *(void *)(v13 + 384) = 0;
      *(void *)(v13 + 392) = 0;
      *(void *)(v13 + 376) = 0;
      ++*(_DWORD *)(v13 + 400);
    }
    re::DynamicArray<unsigned long>::deinit(v13 + 336);
    std::unique_ptr<re::MeshPart,std::function<void ()(re::MeshPart*)>>::~unique_ptr[abi:nn180100]((uint64_t *)(v13 + 296));
    std::unique_ptr<re::MeshPart,std::function<void ()(re::MeshPart*)>>::~unique_ptr[abi:nn180100]((uint64_t *)(v13 + 256));
    (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 40))(v14, v13);
    *((void *)this + 21) = 0;
  }
  int v23 = (re::MaterialManager *)*((void *)this + 3);
  if (v23)
  {
    char v24 = (re *)re::MaterialManager::deinit(v23);
    uint64_t v25 = *((void *)this + 3);
    if (v25)
    {
      uint64_t v26 = re::globalAllocators(v24)[2];
      re::HashSetBase<re::UnresolvedArgumentBufferEntry,re::UnresolvedArgumentBufferEntry,re::internal::ValueAsKey<re::UnresolvedArgumentBufferEntry>,re::Hash<re::UnresolvedArgumentBufferEntry>,re::EqualTo<re::UnresolvedArgumentBufferEntry>,true,false>::deinit((uint64_t *)(v25 + 1192));
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v25 + 1144));
      re::DataArray<re::MaterialParameterBlock>::deinit(v25 + 1080);
      re::DynamicArray<unsigned long>::deinit(v25 + 1080);
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(v25 + 1032));
      v27.n128_f64[0] = re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::deinit(v25 + 968);
      uint64_t v28 = *(void *)(v25 + 904);
      if (v28)
      {
        uint64_t v29 = *(void *)(v25 + 936);
        if (v29)
        {
          uint64_t v30 = *(void *)(v25 + 920);
          if (v30)
          {
            uint64_t v31 = v30 << 6;
            do
            {
              v27.n128_f64[0] = re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit(v29);
              v29 += 64;
              v31 -= 64;
            }
            while (v31);
            uint64_t v28 = *(void *)(v25 + 904);
            uint64_t v29 = *(void *)(v25 + 936);
          }
          (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)v28 + 40))(v28, v29, v27);
        }
        *(void *)(v25 + 936) = 0;
        *(void *)(v25 + 912) = 0;
        *(void *)(v25 + 920) = 0;
        *(void *)(v25 + 904) = 0;
        ++*(_DWORD *)(v25 + 928);
      }
      uint64_t v32 = *(void **)(v25 + 880);
      if (v32)
      {

        *(void *)(v25 + 880) = 0;
      }
      uint64_t v33 = *(void **)(v25 + 872);
      if (v33)
      {

        *(void *)(v25 + 872) = 0;
      }
      uint64_t v34 = *(void **)(v25 + 864);
      if (v34)
      {

        *(void *)(v25 + 864) = 0;
      }
      uint64_t v35 = *(void **)(v25 + 856);
      if (v35)
      {

        *(void *)(v25 + 856) = 0;
      }
      uint64_t v36 = *(void **)(v25 + 848);
      if (v36)
      {

        *(void *)(v25 + 848) = 0;
      }
      uint64_t v37 = *(void **)(v25 + 840);
      if (v37)
      {

        *(void *)(v25 + 840) = 0;
      }
      uint64_t v38 = *(void **)(v25 + 832);
      if (v38)
      {

        *(void *)(v25 + 832) = 0;
      }
      uint64_t v39 = *(void **)(v25 + 824);
      if (v39)
      {

        *(void *)(v25 + 824) = 0;
      }
      unint64_t v40 = *(void **)(v25 + 816);
      if (v40)
      {

        *(void *)(v25 + 816) = 0;
      }
      uint64_t v41 = *(void **)(v25 + 808);
      if (v41)
      {

        *(void *)(v25 + 808) = 0;
      }
      unint64_t v42 = *(void **)(v25 + 800);
      if (v42)
      {

        *(void *)(v25 + 800) = 0;
      }
      uint64_t v43 = *(void **)(v25 + 792);
      if (v43)
      {

        *(void *)(v25 + 792) = 0;
      }
      uint64_t v44 = *(void **)(v25 + 784);
      if (v44)
      {

        *(void *)(v25 + 784) = 0;
      }
      unint64_t v45 = *(void **)(v25 + 776);
      if (v45)
      {

        *(void *)(v25 + 776) = 0;
      }
      uint64_t v46 = *(void **)(v25 + 768);
      if (v46)
      {

        *(void *)(v25 + 768) = 0;
      }
      uint64_t v47 = *(void **)(v25 + 760);
      if (v47)
      {

        *(void *)(v25 + 760) = 0;
      }
      re::FixedArray<re::DynamicString>::deinit((void *)(v25 + 736));
      uint64_t v48 = *(void *)(v25 + 672);
      if (v48)
      {
        if (*(void *)(v25 + 704)) {
          (*(void (**)(uint64_t))(*(void *)v48 + 40))(v48);
        }
        *(void *)(v25 + 704) = 0;
        *(void *)(v25 + 680) = 0;
        *(void *)(v25 + 688) = 0;
        *(void *)(v25 + 672) = 0;
        ++*(_DWORD *)(v25 + 696);
      }
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(v25 + 592));
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(v25 + 544));
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(v25 + 496));
      re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)(v25 + 440));
      re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::deinit(v25 + 400);
      uint64_t v49 = *(void *)(v25 + 392);
      if (v49)
      {
        if (*(void *)(v25 + 344)) {
          *(void *)(v25 + 344) = 0;
        }
        if (*(void *)(v25 + 336))
        {
          (*(void (**)(uint64_t))(*(void *)v49 + 40))(v49);
          *(void *)(v25 + 336) = 0;
        }
        *(_OWORD *)(v25 + 368) = 0u;
        *(_OWORD *)(v25 + 384) = 0u;
        *(_OWORD *)(v25 + 352) = 0u;
      }
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(v25 + 288));
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(v25 + 240));
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(v25 + 192));
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(v25 + 144));
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(v25 + 96));
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(v25 + 48));
      double v50 = re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)v25);
      (*(void (**)(uint64_t, uint64_t, double))(*(void *)v26 + 40))(v26, v25, v50);
    }
    *((void *)this + 3) = 0;
  }
  BOOL v51 = (void *)*((void *)this + 4);
  if (v51)
  {
    re::DataArray<re::MeshModel>::deinit((uint64_t)(v51 + 1));
    uint64_t v52 = (re *)re::DataArray<re::MeshInstance>::deinit((uint64_t)(v51 + 9));
    *BOOL v51 = 0;
    uint64_t v53 = *((void *)this + 4);
    if (v53)
    {
      uint64_t v54 = re::globalAllocators(v52)[2];
      re::DataArray<re::MeshModel>::deinit(v53 + 8);
      re::DataArray<re::MeshInstance>::deinit(v53 + 72);
      *(void *)uint64_t v53 = 0;

      re::HashTable<re::CachedStandardVertexFetchFunctionKey,re::SharedPtr<re::CachedVertexFetchPipeline>,re::Hash<re::CachedStandardVertexFetchFunctionKey>,re::EqualTo<re::CachedStandardVertexFetchFunctionKey>,true,false>::deinit((uint64_t *)(v53 + 136));
      re::DataArray<re::MeshInstance>::deinit(v53 + 72);
      re::DynamicArray<unsigned long>::deinit(v53 + 72);
      re::DataArray<re::MeshModel>::deinit(v53 + 8);
      re::DynamicArray<unsigned long>::deinit(v53 + 8);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v54 + 40))(v54, v53);
    }
    *((void *)this + 4) = 0;
  }
  BOOL v55 = (re::DeformationManager *)*((void *)this + 5);
  if (v55)
  {
    uint64_t v56 = (re *)re::DeformationManager::deinit(v55);
    uint64_t v57 = *((void *)this + 5);
    if (v57)
    {
      uint64_t v58 = re::globalAllocators(v56)[2];
      re::DataArray<re::DeformationStack>::deinit(v57 + 1416);
      re::DynamicArray<unsigned long>::deinit(v57 + 1416);
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v57 + 1368));
      for (uint64_t i = 1328; i != 608; i -= 40)
        std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::~unique_ptr[abi:nn180100]((uint64_t *)(v57 + i));
      re::BucketArray<NS::SharedPtr<MTL::Fence>,32ul>::deinit(v57 + 592);
      re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v57 + 592);
      re::BucketArray<unsigned long,8ul>::deinit(v57 + 536);
      re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v57 + 536);
      for (uint64_t j = 472; j != -40; j -= 64)
      {
        re::BucketArray<unsigned long,8ul>::deinit(v57 + j);
        re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v57 + j);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v58 + 40))(v58, v57);
    }
    *((void *)this + 5) = 0;
  }
  uint64_t v61 = (re::SamplerManager *)*((void *)this + 6);
  if (v61)
  {
    re::SamplerManager::deinit(v61);
    unsigned int v63 = (re::SamplerManager *)*((void *)this + 6);
    if (v63)
    {
      uint64_t v64 = re::globalAllocators(v62)[2];
      re::SamplerManager::~SamplerManager(v63);
      (*(void (**)(uint64_t, re::SamplerManager *))(*(void *)v64 + 40))(v64, v63);
    }
    *((void *)this + 6) = 0;
  }
  BOOL v65 = (re::ShaderManager *)*((void *)this + 7);
  if (v65)
  {
    int v66 = re::ShaderManager::deinit(v65, v4);
    uint64_t v67 = (re::ShaderManager *)*((void *)this + 7);
    if (v67)
    {
      uint64_t v68 = re::globalAllocators(v66)[2];
      re::ShaderManager::~ShaderManager(v67);
      (*(void (**)(uint64_t, re::ShaderManager *))(*(void *)v68 + 40))(v68, v67);
    }
    *((void *)this + 7) = 0;
  }
  unsigned int v69 = (re::TextureManager *)*((void *)this + 8);
  if (v69)
  {
    re::TextureManager::deinit(v69);
    int v71 = (re::TextureManager *)*((void *)this + 8);
    if (v71)
    {
      uint64_t v72 = re::globalAllocators(v70)[2];
      re::TextureManager::~TextureManager(v71);
      (*(void (**)(uint64_t, re::TextureManager *))(*(void *)v72 + 40))(v72, v71);
    }
    *((void *)this + 8) = 0;
  }
  uint64_t v73 = (re::TextManager *)*((void *)this + 9);
  if (v73)
  {
    re::TextManager::deinit(v73);
    uint64_t v74 = (re::TextManager *)*((void *)this + 9);
    if (v74)
    {
      uint64_t v75 = re::globalAllocators(v73)[2];
      re::TextManager::~TextManager(v74);
      uint64_t v73 = (re::TextManager *)(*(uint64_t (**)(uint64_t, re::TextManager *))(*(void *)v75 + 40))(v75, v74);
    }
    *((void *)this + 9) = 0;
  }
  *((void *)this + 10) = 0;
  uint64_t v76 = *((void *)this + 11);
  if (v76)
  {
    re::s_debugSettingsManager = 0;
    uint64_t v77 = re::globalAllocators(v73)[2];
    std::mutex::~mutex((std::mutex *)(v76 + 48));
    double v78 = re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v76);
    uint64_t v73 = (re::TextManager *)(*(uint64_t (**)(uint64_t, uint64_t, double))(*(void *)v77 + 40))(v77, v76, v78);
    *((void *)this + 11) = 0;
  }
  unint64_t v79 = (uint64_t *)*((void *)this + 14);
  if (v79)
  {
    uint64_t v80 = re::globalAllocators(v73)[2];
    re::FixedArray<CoreIKTransform>::deinit(v79 + 245);
    re::FixedArray<CoreIKTransform>::deinit(v79 + 242);
    re::FixedArray<CoreIKTransform>::deinit(v79 + 239);
    BOOL v81 = (void *)v79[230];
    if (v81)
    {

      v79[230] = 0;
    }
    unint64_t v82 = (void *)v79[229];
    if (v82)
    {

      v79[229] = 0;
    }
    re::SmallHashTable<re::WeakStringID,re::CameraStreamParams,4ul,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false>::~SmallHashTable((uint64_t)(v79 + 2));
    uint64_t v73 = (re::TextManager *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v80 + 40))(v80, v79);
    *((void *)this + 14) = 0;
  }
  uint64_t v83 = *((void *)this + 15);
  if (v83)
  {
    uint64_t v84 = re::globalAllocators(v73)[2];
    v85.n128_f64[0] = re::DynamicString::deinit((re::DynamicString *)(v83 + 192));
    int v86 = *(void (**)(void, uint64_t, void, void, void, double))(v83 + 160);
    if (v86) {
      v86(0, v83 + 160, 0, 0, 0, v85.n128_f64[0]);
    }
    uint64_t v73 = (re::TextManager *)(*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(void *)v84 + 40))(v84, v83, v85);
    *((void *)this + 15) = 0;
  }
  uint64_t v87 = *((void *)this + 16);
  if (v87)
  {
    uint64_t v88 = re::globalAllocators(v73)[2];
    re::DataArray<re::DisplayStatsManager::MetricState>::deinit(v87);
    re::DataArray<re::DisplayStatsManager::MetricState>::deinit(v87);
    re::DynamicArray<unsigned long>::deinit(v87);
    uint64_t v73 = (re::TextManager *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v88 + 40))(v88, v87);
    *((void *)this + 16) = 0;
  }
  *((unsigned char *)this + 180) = 0;
  uint64_t v89 = *((void *)this + 17);
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  uint64_t v100 = re::globalAllocators(v73)[2];
  uint64_t v101 = 0;
  re::FunctionBase<24ul,void ()(re::FrameCount)>::operator=<24ul>(v89 + 128, (uint64_t)&v97);
  char v90 = (re *)re::FunctionBase<24ul,void ()(re::FrameCount)>::destroyCallable((uint64_t)&v97);
  uint64_t v91 = *((void *)this + 17);
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  uint64_t v100 = re::globalAllocators(v90)[2];
  uint64_t v101 = 0;
  re::FunctionBase<24ul,void ()(re::FrameCount)>::operator=<24ul>(v91 + 168, (uint64_t)&v97);
  uint64_t v92 = (re *)re::FunctionBase<24ul,void ()(re::FrameCount)>::destroyCallable((uint64_t)&v97);
  uint64_t v93 = *((void *)this + 17);
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  uint64_t v100 = re::globalAllocators(v92)[2];
  uint64_t v101 = 0;
  re::FunctionBase<24ul,void ()(void)>::operator=<24ul>(v93 + 208, (uint64_t)&v97);
  uint64_t v94 = (re *)re::FunctionBase<24ul,void ()(void)>::destroyCallable((uint64_t)&v97);
  uint64_t v95 = *((void *)this + 17);
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  uint64_t v100 = re::globalAllocators(v94)[2];
  uint64_t v101 = 0;
  re::FunctionBase<24ul,void ()(void)>::operator=<24ul>(v95 + 248, (uint64_t)&v97);
  uint64_t result = re::FunctionBase<24ul,void ()(void)>::destroyCallable((uint64_t)&v97);
  *((void *)this + 17) = 0;
  *((void *)this + 12) = 0;
  return result;
}

uint64_t re::RenderManager::perFrameAllocator(re::RenderManager *this)
{
  id v1 = this;
  uint64_t v2 = *((void *)this + 13);
  if (v2)
  {
    this = (re::RenderManager *)re::RenderFrameBox::get(v2 + 344, *(void *)(*((void *)this + 17) + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(void *)(*((void *)this + 17) + 16) << 60));
    if (this) {
      return *((void *)this + 47);
    }
  }
  uint64_t v4 = re::globalAllocators(this);
  unint64_t v5 = *(void *)(*((void *)v1 + 17) + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(void *)(*((void *)v1 + 17) + 16) << 60);
  uint64_t v6 = v4[6];
  return re::PerFrameAllocatorManager::perFrameAllocator(v6, v5);
}

void re::RenderManager::addDelayedDestructor(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[13];
  if (!v4
    || (unsigned int v5 = atomic_load((unsigned int *)(v4 + 840))) != 0
    || (uint64_t v7 = a1[44]) == 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7) & 1) != 0)
  {
    uint64_t v6 = a1[17];
    re::FrameManager::addDelayedDestructor(v6, a2);
  }
  else
  {
    uint64_t v8 = *(void (**)(void))(**(void **)(a2 + 32) + 16);
    v8();
  }
}

void re::RenderManager::addDelayedDestructorToRenderThread(_anonymous_namespace_ *a1, uint64_t a2)
{
  int v3 = a1;
  uint64_t v4 = *((void *)a1 + 13);
  if (!v4) {
    goto LABEL_13;
  }
  unsigned int v5 = *(_anonymous_namespace_ ***)(v4 + 328);
  if (!v5)
  {
LABEL_11:
    uint64_t v8 = v3[13];
    if (v8)
    {
      if (!atomic_load((unsigned int *)(v8 + 840)))
      {
        a1 = (_anonymous_namespace_ *)v3[44];
        if (a1)
        {
          a1 = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *))(*(void *)a1 + 16))(a1);
          if ((a1 & 1) == 0) {
            goto LABEL_18;
          }
        }
      }
    }
LABEL_13:
    uint64_t v10 = (os_unfair_lock_s *)v3[17];
    return;
  }
  a1 = (_anonymous_namespace_ *)pthread_self();
  uint64_t v6 = *v5;
  if (a1)
  {
    if (v6) {
      BOOL v7 = a1 == v6;
    }
    else {
      BOOL v7 = 0;
    }
    if (!v7) {
      goto LABEL_11;
    }
  }
  else if (v6)
  {
    goto LABEL_11;
  }
LABEL_18:
  uint64_t v11 = *(void (**)(void))(**(void **)(a2 + 32) + 16);
  v11();
}

BOOL re::RenderManager::isRenderThread(re::RenderManager *this)
{
  uint64_t v1 = *((void *)this + 13);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(_opaque_pthread_t ***)(v1 + 328);
  if (!v2) {
    return 0;
  }
  pthread_t v3 = pthread_self();
  uint64_t v4 = *v2;
  if (v3) {
    return v4 && v3 == v4;
  }
  else {
    return v4 == 0;
  }
}

void re::RenderManager::sampleComputeEncoderMTLCounterBegin(uint64_t a1, id *a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(a1 + 104);
  if (v3)
  {
    id v5 = *a2;
    re::DrawingManager::sampleComputeEncoderMTLCounterBegin(v3, &v5, a3);
  }
}

void re::RenderManager::sampleComputeEncoderMTLCounterEnd(uint64_t a1, id *a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(a1 + 104);
  if (v3)
  {
    id v5 = *a2;
    re::DrawingManager::sampleComputeEncoderMTLCounterEnd(v3, &v5, a3);
  }
}

void re::RenderManager::enableMTLCounterSamplingOnRenderPassDescriptor(uint64_t a1, id *a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(a1 + 104);
  if (v3)
  {
    id v5 = *a2;
    id v6 = v5;
    re::DrawingManager::enableMTLCounterSamplingOnRenderPassDescriptor(v3, &v6, a3);
    if (v5)
    {
    }
  }
}

void re::RenderManager::makeComputeCommandEncoderWithMTLCounterSampling(uint64_t a1@<X0>, id *a2@<X1>, unsigned int a3@<W2>, void *a4@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 104);
  id v7 = *a2;
  re::DrawingManager::makeComputeCommandEncoderWithMTLCounterSampling(v6, &v7, a3, a4);
}

void re::RenderManager::reloadLibrary(re::RenderManager *this, const char *a2, const char *a3)
{
  uint64_t v3 = (_anonymous_namespace_ **)*((void *)this + 13);
  if (v3)
  {
    re::DrawingManager::reloadLibrary(v3, a2, a3);
  }
  else
  {
    uint64_t v4 = *re::graphicsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "RenderManager::reloadLibrary called, but DrawingManager does not exist!", v5, 2u);
    }
  }
}

uint64_t re::RenderManager::registerRenderLayer(uint64_t a1, id *a2)
{
  uint64_t v2 = *(void *)(a1 + 104);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  id v5 = *a2;
  uint64_t v3 = re::DrawingManager::registerRenderLayer(v2, &v5);

  return v3;
}

float re::RenderManager::getLayerSize(re::RenderManager *this, unsigned int a2, double a3, double a4)
{
  uint64_t v4 = (re::DrawingManager *)*((void *)this + 13);
  if (v4) {
    return re::DrawingManager::getLayerSize(v4, a2, a3, a4);
  }
  else {
    return 1.0;
  }
}

re::RenderManager *re::RenderManager::createDrawingManager(re::RenderManager *this)
{
  if (!*((void *)this + 13))
  {
    uint64_t v1 = this;
    uint64_t v2 = re::globalAllocators(this);
    uint64_t v3 = (re::DrawingManager *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 1776, 8);
    re::DrawingManager::DrawingManager(v3);
    *((void *)v1 + 13) = v4;
    id v5 = (re::ColorManager *)*((void *)v1 + 19);
    return (re::RenderManager *)re::DrawingManager::init(v4, v1, 0, v5);
  }
  return this;
}

uint64_t re::RenderManager::splitCommandBuffersForDebugging(re::RenderManager *this)
{
  uint64_t v1 = (unsigned __int8 *)&unk_2687A0000;
  {
    uint64_t v1 = (unsigned char *)&unk_2687A0000;
    if (v3)
    {
      re::Defaults::BOOLValue((re::Defaults *)"splitCommandBuffersForDebugging", v4, v6);
      char v5 = v6[1];
      if (!v6[0]) {
        char v5 = 0;
      }
      re::RenderManager::splitCommandBuffersForDebugging(void)const::kSplitCommandBuffersForDebugging = v5;
      uint64_t v1 = (unsigned char *)&unk_2687A0000;
    }
  }
  return v1[960];
}

uint64_t re::RenderManager::isProtoStereoRenderingEnabled(re::RenderManager *this)
{
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZN2re13RenderManager29isProtoStereoRenderingEnabledEv_block_invoke;
  block[3] = &__block_descriptor_tmp_28;
  void block[4] = this;
  if (re::RenderManager::isProtoStereoRenderingEnabled(void)::onceToken != -1) {
    dispatch_once(&re::RenderManager::isProtoStereoRenderingEnabled(void)::onceToken, block);
  }
  return *((unsigned __int8 *)this + 312);
}

void ___ZN2re13RenderManager29isProtoStereoRenderingEnabledEv_block_invoke(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  re::Defaults::BOOLValue((re::Defaults *)"ProtoStereoRendering", a2, &v10);
  if (v10)
  {
    int v4 = v11;
    *(unsigned char *)(v2 + 312) = v11;
    if (v4)
    {
      char v5 = *re::graphicsLogObjects(v3);
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      __int16 v8 = 0;
      uint64_t v6 = "Proto stereo rendering is enabled.";
      id v7 = (uint8_t *)&v8;
      goto LABEL_8;
    }
  }
  else
  {
    *(unsigned char *)(v2 + 312) = 0;
  }
  char v5 = *re::graphicsLogObjects(v3);
  if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
    return;
  }
  *(_WORD *)long long buf = 0;
  uint64_t v6 = "Proto stereo rendering is disabled.";
  id v7 = buf;
LABEL_8:
  _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, v6, v7, 2u);
}

void *re::allocInfo_RenderManager(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96520, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF96520))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF96528, "RenderManager");
    __cxa_guard_release(&qword_26AF96520);
  }
  return &unk_26AF96528;
}

void re::initInfo_RenderManager(re *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x4A7E34345895822ELL;
  v5[1] = "RenderManager";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x16800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::initInfo_RenderManager(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RenderManager>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RenderManager>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RenderManager>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::RenderManager>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

void re::internal::defaultConstruct<re::RenderManager>(int a1, int a2, re::RenderManager *this)
{
}

void re::internal::defaultDestruct<re::RenderManager>(int a1, int a2, re::RenderManager *this)
{
}

uint64_t re::introspect_RenderManager(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderManager", (uint64_t (*)(re::internal *))re::allocInfo_RenderManager, (re::IntrospectionBase *(*)(void))re::initInfo_RenderManager, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderManager>, this);
}

void re::FenceDeformer::~FenceDeformer(re::FenceDeformer *this)
{
}

void re::FenceDeformer::addDeformationInstance(re::FenceDeformer *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  *(void *)a3 = 0xFFFFFFFFLL;
  *(int64x2_t *)(a3 + 8) = vdupq_n_s64(2uLL);
  *(unsigned char *)(a3 + 24) = 1;
  if (*a2)
  {
    *(void *)&v21[0] = 0;
    *((void *)&v21[0] + 1) = "";
    uint64_t v5 = *(void *)&v21[0] >> 1;
    *(void *)(a3 + 40) = 0;
    long long v6 = (uint64_t *)(a3 + 40);
    *(v6 - 1) = v5;
    v6[1] = 0;
    char v6[2] = 0;
    re::StringID::destroyString((re::StringID *)v21);
  }
  else
  {
    *(void *)(a3 + 40) = 0;
    long long v6 = (uint64_t *)(a3 + 40);
    *(void *)(a3 + 32) = -1;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
  }
  if (*((unsigned __int8 *)a2 + 256) != 255)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    unsigned __int8 v11 = 0;
    if (!v10)
    {
      uint64_t v12 = 0;
      memset(v21, 0, sizeof(v21));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v13 = 136315906;
      uint64_t v14 = "operator[]";
      __int16 v15 = 1024;
      int v16 = 468;
      __int16 v17 = 2048;
      uint64_t v18 = 0;
      __int16 v19 = 2048;
      uint64_t v20 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    __int16 v8 = v11;
    *unsigned __int8 v11 = a2[256];
    *(void *)&v21[0] = 0;
    *((void *)&v21[0] + 1) = "";
    *((void *)v8 + 1) = *(void *)&v21[0] >> 1;
    re::StringID::destroyString((re::StringID *)v21);
    re::FixedArray<float>::operator=(v6, &v9);
    if (v9)
    {
      if (v10) {
        (*(void (**)(void))(*(void *)v9 + 40))();
      }
    }
  }
}

uint64_t re::FenceDeformer::allocateBuffers()
{
  return 0;
}

void *re::FixedArray<re::Pair<re::DeformerType,unsigned long long,true>>::init<>(void *result, uint64_t a2, unint64_t a3)
{
  void *result = a2;
  result[1] = a3;
  if (!a3) {
    return result;
  }
  if (a3 >> 60)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 16, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  long long v4 = result;
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16 * a3, 8);
  v4[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    uint64_t result = (void *)_os_crash();
    __break(1u);
    return result;
  }
  unint64_t v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(unsigned char *)uint64_t result = 0;
      result[1] = 0;
      result += 2;
      --v6;
    }
    while (v6);
  }
  *(unsigned char *)uint64_t result = 0;
  result[1] = 0;
  return result;
}

uint64_t re::FunctionBase<24ul,BOOL ()(void)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,BOOL ()(void)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_0,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_0>,void ()(re::BlendShapeDeformer *)>::~__func()
{
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_0,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_0>,void ()(re::BlendShapeDeformer *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E711D20;
  return result;
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_0,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_0>,void ()(re::BlendShapeDeformer *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E711D20;
}

re *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_0,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_0>,void ()(re::BlendShapeDeformer *)>::operator()(re *result, re::BlendShapeDeformer **a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = re::globalAllocators(result)[2];
    re::BlendShapeDeformer::~BlendShapeDeformer(v2);
    uint64_t v4 = *(uint64_t (**)(uint64_t, re::BlendShapeDeformer *))(*(void *)v3 + 40);
    return (re *)v4(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_0,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_0>,void ()(re::BlendShapeDeformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_0,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_0>,void ()(re::BlendShapeDeformer *)>::target_type()
{
}

void *std::__function::__value_func<void ()(re::BlendShapeDeformer *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(re::BlendShapeDeformer *)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = v3;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::function<void ()(re::BlendShapeDeformer *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (a1) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v4);
  }
  uint64_t v3 = std::__throw_bad_function_call[abi:nn180100]();
  return std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::operator=[abi:nn180100](v3);
}

uint64_t *std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::operator=[abi:nn180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *a1;
  *a1 = v4;
  if (v5) {
    std::function<void ()(re::Deformer *)>::operator()((uint64_t)(a1 + 1), v5);
  }
  uint64_t v6 = a1 + 1;
  unint64_t v7 = (uint64_t *)a1[4];
  a1[4] = 0;
  if (v7 == a1 + 1)
  {
    (*(void (**)(uint64_t *))(*v6 + 32))(a1 + 1);
  }
  else if (v7)
  {
    (*(void (**)(uint64_t *))(*v7 + 40))(v7);
  }
  uint64_t v8 = (uint64_t *)a2[4];
  if (v8)
  {
    if (v8 == a2 + 1)
    {
      a1[4] = (uint64_t)v6;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a2[4] + 24))(a2[4], a1 + 1);
    }
    else
    {
      a1[4] = (uint64_t)v8;
      a2[4] = 0;
    }
  }
  else
  {
    a1[4] = 0;
  }
  return a1;
}

void *re::internal::Callable<std::function<void ()(re::BlendShapeDeformer *)>,void ()(re::BlendShapeDeformer *)>::~Callable(void *a1)
{
  *a1 = &unk_26E711DB0;
  std::__function::__value_func<void ()(re::BlendShapeDeformer *)>::~__value_func[abi:nn180100](a1 + 1);
  return a1;
}

void re::internal::Callable<std::function<void ()(re::BlendShapeDeformer *)>,void ()(re::BlendShapeDeformer *)>::~Callable(void *a1)
{
  *a1 = &unk_26E711DB0;
  std::__function::__value_func<void ()(re::BlendShapeDeformer *)>::~__value_func[abi:nn180100](a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<std::function<void ()(re::BlendShapeDeformer *)>,void ()(re::BlendShapeDeformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return std::function<void ()(re::BlendShapeDeformer *)>::operator()(*(void *)(a1 + 32), *a2);
}

void *re::internal::Callable<std::function<void ()(re::BlendShapeDeformer *)>,void ()(re::BlendShapeDeformer *)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E711DB0;
  uint64_t v3 = a2 + 1;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
    }
    else
    {
      a2[4] = (*(uint64_t (**)(void, void *))(*(void *)v4 + 16))(*(void *)(a1 + 32), v3);
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

void *re::internal::Callable<std::function<void ()(re::BlendShapeDeformer *)>,void ()(re::BlendShapeDeformer *)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E711DB0;
  std::__function::__value_func<void ()(re::BlendShapeDeformer *)>::__value_func[abi:nn180100]((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<std::function<void ()(re::BlendShapeDeformer *)>,void ()(re::BlendShapeDeformer *)>::size()
{
  return 40;
}

uint64_t re::FunctionBase<24ul,void ()(re::BlendShapeDeformer *)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(re::BlendShapeDeformer *)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,void ()(re::BlendShapeDeformer *)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(void *a1)
{
  *a1 = &unk_26E711E18;
  re::FunctionBase<24ul,void ()(re::BlendShapeDeformer *)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(void *a1)
{
  *a1 = &unk_26E711E18;
  re::FunctionBase<24ul,void ()(re::BlendShapeDeformer *)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *uint64_t v3 = &unk_26E711E18;
  v3[4] = *(void *)(a1 + 32);
  v3[5] = 0;
  re::FunctionBase<24ul,void ()(re::BlendShapeDeformer *)>::operator=<24ul>((uint64_t)(v3 + 1), v2);
  return v3;
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E711E18;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  return re::FunctionBase<24ul,void ()(re::BlendShapeDeformer *)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t (***std::__function::__func<void re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy(uint64_t a1))(void)
{
  return re::FunctionBase<24ul,void ()(re::BlendShapeDeformer *)>::destroyCallable(a1 + 8);
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy_deallocate(void *a1)
{
  re::FunctionBase<24ul,void ()(re::BlendShapeDeformer *)>::destroyCallable((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  return (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v3);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::BlendShapeDeformer>(std::unique_ptr<re::BlendShapeDeformer,std::function<void ()(re::BlendShapeDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target_type()
{
}

uint64_t std::function<void ()(re::Deformer *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::~unique_ptr[abi:nn180100](v4);
}

uint64_t *std::unique_ptr<re::Deformer,std::function<void ()(re::Deformer*)>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    std::function<void ()(re::Deformer *)>::operator()((uint64_t)(a1 + 1), v2);
  }
  std::__function::__value_func<void ()(re::Deformer *)>::~__value_func[abi:nn180100](a1 + 1);
  return a1;
}

void *std::__function::__value_func<void ()(re::Deformer *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_1,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_1>,void ()(re::SkinningDeformer *)>::~__func()
{
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_1,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_1>,void ()(re::SkinningDeformer *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E711EA8;
  return result;
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_1,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_1>,void ()(re::SkinningDeformer *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E711EA8;
}

re *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_1,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_1>,void ()(re::SkinningDeformer *)>::operator()(re *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = re::globalAllocators(result)[2];
    for (uint64_t i = 32784; i != 16; i -= 8)
    {
      uint64_t v5 = *(void **)(v2 + i);
      if (v5)
      {

        *(void *)(v2 + i) = 0;
      }
    }
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 40);
    return (re *)v6(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_1,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_1>,void ()(re::SkinningDeformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_1,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_1>,void ()(re::SkinningDeformer *)>::target_type()
{
}

void *std::__function::__value_func<void ()(re::SkinningDeformer *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(re::SkinningDeformer *)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = v3;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::function<void ()(re::SkinningDeformer *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (a1) {
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v4);
  }
  uint64_t v3 = std::__throw_bad_function_call[abi:nn180100]();
  return re::internal::Callable<std::function<void ()(re::SkinningDeformer *)>,void ()(re::SkinningDeformer *)>::~Callable(v3);
}

void *re::internal::Callable<std::function<void ()(re::SkinningDeformer *)>,void ()(re::SkinningDeformer *)>::~Callable(void *a1)
{
  *a1 = &unk_26E711F38;
  std::__function::__value_func<void ()(re::SkinningDeformer *)>::~__value_func[abi:nn180100](a1 + 1);
  return a1;
}

void re::internal::Callable<std::function<void ()(re::SkinningDeformer *)>,void ()(re::SkinningDeformer *)>::~Callable(void *a1)
{
  *a1 = &unk_26E711F38;
  std::__function::__value_func<void ()(re::SkinningDeformer *)>::~__value_func[abi:nn180100](a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *re::internal::Callable<std::function<void ()(re::SkinningDeformer *)>,void ()(re::SkinningDeformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return std::function<void ()(re::SkinningDeformer *)>::operator()(*(void *)(a1 + 32), *a2);
}

void *re::internal::Callable<std::function<void ()(re::SkinningDeformer *)>,void ()(re::SkinningDeformer *)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E711F38;
  uint64_t v3 = a2 + 1;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
    }
    else
    {
      a2[4] = (*(uint64_t (**)(void, void *))(*(void *)v4 + 16))(*(void *)(a1 + 32), v3);
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

void *re::internal::Callable<std::function<void ()(re::SkinningDeformer *)>,void ()(re::SkinningDeformer *)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E711F38;
  std::__function::__value_func<void ()(re::SkinningDeformer *)>::__value_func[abi:nn180100]((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<std::function<void ()(re::SkinningDeformer *)>,void ()(re::SkinningDeformer *)>::size()
{
  return 40;
}

uint64_t re::FunctionBase<24ul,void ()(re::SkinningDeformer *)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(re::SkinningDeformer *)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,void ()(re::SkinningDeformer *)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(void *a1)
{
  *a1 = &unk_26E711FA0;
  re::FunctionBase<24ul,void ()(re::SkinningDeformer *)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(void *a1)
{
  *a1 = &unk_26E711FA0;
  re::FunctionBase<24ul,void ()(re::SkinningDeformer *)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *uint64_t v3 = &unk_26E711FA0;
  v3[4] = *(void *)(a1 + 32);
  v3[5] = 0;
  re::FunctionBase<24ul,void ()(re::SkinningDeformer *)>::operator=<24ul>((uint64_t)(v3 + 1), v2);
  return v3;
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E711FA0;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  return re::FunctionBase<24ul,void ()(re::SkinningDeformer *)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t (***std::__function::__func<void re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy(uint64_t a1))(void)
{
  return re::FunctionBase<24ul,void ()(re::SkinningDeformer *)>::destroyCallable(a1 + 8);
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy_deallocate(void *a1)
{
  re::FunctionBase<24ul,void ()(re::SkinningDeformer *)>::destroyCallable((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  return (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v3);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::SkinningDeformer>(std::unique_ptr<re::SkinningDeformer,std::function<void ()(re::SkinningDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target_type()
{
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_2,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_2>,void ()(re::SmoothDeformer *)>::~__func()
{
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_2,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_2>,void ()(re::SmoothDeformer *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E712020;
  return result;
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_2,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_2>,void ()(re::SmoothDeformer *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712020;
}

re *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_2,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_2>,void ()(re::SmoothDeformer *)>::operator()(re *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = re::globalAllocators(result)[2];
    uint64_t v4 = *(void **)(v2 + 16);
    if (v4)
    {

      *(void *)(v2 + 16) = 0;
    }
    unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 40);
    return (re *)v5(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_2,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_2>,void ()(re::SmoothDeformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_2,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_2>,void ()(re::SmoothDeformer *)>::target_type()
{
}

void *std::__function::__value_func<void ()(re::SmoothDeformer *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(re::SmoothDeformer *)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = v3;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::function<void ()(re::SmoothDeformer *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (a1) {
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v4);
  }
  uint64_t v3 = std::__throw_bad_function_call[abi:nn180100]();
  return re::internal::Callable<std::function<void ()(re::SmoothDeformer *)>,void ()(re::SmoothDeformer *)>::~Callable(v3);
}

void *re::internal::Callable<std::function<void ()(re::SmoothDeformer *)>,void ()(re::SmoothDeformer *)>::~Callable(void *a1)
{
  *a1 = &unk_26E7120B0;
  std::__function::__value_func<void ()(re::SmoothDeformer *)>::~__value_func[abi:nn180100](a1 + 1);
  return a1;
}

void re::internal::Callable<std::function<void ()(re::SmoothDeformer *)>,void ()(re::SmoothDeformer *)>::~Callable(void *a1)
{
  *a1 = &unk_26E7120B0;
  std::__function::__value_func<void ()(re::SmoothDeformer *)>::~__value_func[abi:nn180100](a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *re::internal::Callable<std::function<void ()(re::SmoothDeformer *)>,void ()(re::SmoothDeformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return std::function<void ()(re::SmoothDeformer *)>::operator()(*(void *)(a1 + 32), *a2);
}

void *re::internal::Callable<std::function<void ()(re::SmoothDeformer *)>,void ()(re::SmoothDeformer *)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7120B0;
  uint64_t v3 = a2 + 1;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
    }
    else
    {
      a2[4] = (*(uint64_t (**)(void, void *))(*(void *)v4 + 16))(*(void *)(a1 + 32), v3);
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

void *re::internal::Callable<std::function<void ()(re::SmoothDeformer *)>,void ()(re::SmoothDeformer *)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7120B0;
  std::__function::__value_func<void ()(re::SmoothDeformer *)>::__value_func[abi:nn180100]((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<std::function<void ()(re::SmoothDeformer *)>,void ()(re::SmoothDeformer *)>::size()
{
  return 40;
}

uint64_t re::FunctionBase<24ul,void ()(re::SmoothDeformer *)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(re::SmoothDeformer *)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,void ()(re::SmoothDeformer *)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::SmoothDeformer>(std::unique_ptr<re::SmoothDeformer,std::function<void ()(re::SmoothDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::SmoothDeformer>(std::unique_ptr<re::SmoothDeformer,std::function<void ()(re::SmoothDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(void *a1)
{
  *a1 = &unk_26E712118;
  re::FunctionBase<24ul,void ()(re::SmoothDeformer *)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::SmoothDeformer>(std::unique_ptr<re::SmoothDeformer,std::function<void ()(re::SmoothDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::SmoothDeformer>(std::unique_ptr<re::SmoothDeformer,std::function<void ()(re::SmoothDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(void *a1)
{
  *a1 = &unk_26E712118;
  re::FunctionBase<24ul,void ()(re::SmoothDeformer *)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::SmoothDeformer>(std::unique_ptr<re::SmoothDeformer,std::function<void ()(re::SmoothDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::SmoothDeformer>(std::unique_ptr<re::SmoothDeformer,std::function<void ()(re::SmoothDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *uint64_t v3 = &unk_26E712118;
  v3[4] = *(void *)(a1 + 32);
  v3[5] = 0;
  re::FunctionBase<24ul,void ()(re::SmoothDeformer *)>::operator=<24ul>((uint64_t)(v3 + 1), v2);
  return v3;
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::SmoothDeformer>(std::unique_ptr<re::SmoothDeformer,std::function<void ()(re::SmoothDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::SmoothDeformer>(std::unique_ptr<re::SmoothDeformer,std::function<void ()(re::SmoothDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712118;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  return re::FunctionBase<24ul,void ()(re::SmoothDeformer *)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t (***std::__function::__func<void re::DeformationManager::registerDeformer<re::SmoothDeformer>(std::unique_ptr<re::SmoothDeformer,std::function<void ()(re::SmoothDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::SmoothDeformer>(std::unique_ptr<re::SmoothDeformer,std::function<void ()(re::SmoothDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy(uint64_t a1))(void)
{
  return re::FunctionBase<24ul,void ()(re::SmoothDeformer *)>::destroyCallable(a1 + 8);
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::SmoothDeformer>(std::unique_ptr<re::SmoothDeformer,std::function<void ()(re::SmoothDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::SmoothDeformer>(std::unique_ptr<re::SmoothDeformer,std::function<void ()(re::SmoothDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy_deallocate(void *a1)
{
  re::FunctionBase<24ul,void ()(re::SmoothDeformer *)>::destroyCallable((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::SmoothDeformer>(std::unique_ptr<re::SmoothDeformer,std::function<void ()(re::SmoothDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::SmoothDeformer>(std::unique_ptr<re::SmoothDeformer,std::function<void ()(re::SmoothDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  return (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v3);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::SmoothDeformer>(std::unique_ptr<re::SmoothDeformer,std::function<void ()(re::SmoothDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::SmoothDeformer>(std::unique_ptr<re::SmoothDeformer,std::function<void ()(re::SmoothDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::SmoothDeformer>(std::unique_ptr<re::SmoothDeformer,std::function<void ()(re::SmoothDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::SmoothDeformer>(std::unique_ptr<re::SmoothDeformer,std::function<void ()(re::SmoothDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target_type()
{
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_3,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_3>,void ()(re::RenormalizationDeformer *)>::~__func()
{
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_3,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_3>,void ()(re::RenormalizationDeformer *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E712198;
  return result;
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_3,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_3>,void ()(re::RenormalizationDeformer *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712198;
}

re *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_3,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_3>,void ()(re::RenormalizationDeformer *)>::operator()(re *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = re::globalAllocators(result)[2];
    for (uint64_t i = 144; i != 16; i -= 8)
    {
      unint64_t v5 = *(void **)(v2 + i);
      if (v5)
      {

        *(void *)(v2 + i) = 0;
      }
    }
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 40);
    return (re *)v6(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_3,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_3>,void ()(re::RenormalizationDeformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_3,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_3>,void ()(re::RenormalizationDeformer *)>::target_type()
{
}

void *std::__function::__value_func<void ()(re::RenormalizationDeformer *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(re::RenormalizationDeformer *)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = v3;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::function<void ()(re::RenormalizationDeformer *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (a1) {
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v4);
  }
  uint64_t v3 = std::__throw_bad_function_call[abi:nn180100]();
  return re::internal::Callable<std::function<void ()(re::RenormalizationDeformer *)>,void ()(re::RenormalizationDeformer *)>::~Callable(v3);
}

void *re::internal::Callable<std::function<void ()(re::RenormalizationDeformer *)>,void ()(re::RenormalizationDeformer *)>::~Callable(void *a1)
{
  *a1 = &unk_26E712228;
  std::__function::__value_func<void ()(re::RenormalizationDeformer *)>::~__value_func[abi:nn180100](a1 + 1);
  return a1;
}

void re::internal::Callable<std::function<void ()(re::RenormalizationDeformer *)>,void ()(re::RenormalizationDeformer *)>::~Callable(void *a1)
{
  *a1 = &unk_26E712228;
  std::__function::__value_func<void ()(re::RenormalizationDeformer *)>::~__value_func[abi:nn180100](a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *re::internal::Callable<std::function<void ()(re::RenormalizationDeformer *)>,void ()(re::RenormalizationDeformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return std::function<void ()(re::RenormalizationDeformer *)>::operator()(*(void *)(a1 + 32), *a2);
}

void *re::internal::Callable<std::function<void ()(re::RenormalizationDeformer *)>,void ()(re::RenormalizationDeformer *)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712228;
  uint64_t v3 = a2 + 1;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
    }
    else
    {
      a2[4] = (*(uint64_t (**)(void, void *))(*(void *)v4 + 16))(*(void *)(a1 + 32), v3);
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

void *re::internal::Callable<std::function<void ()(re::RenormalizationDeformer *)>,void ()(re::RenormalizationDeformer *)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712228;
  std::__function::__value_func<void ()(re::RenormalizationDeformer *)>::__value_func[abi:nn180100]((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<std::function<void ()(re::RenormalizationDeformer *)>,void ()(re::RenormalizationDeformer *)>::size()
{
  return 40;
}

uint64_t re::FunctionBase<24ul,void ()(re::RenormalizationDeformer *)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(re::RenormalizationDeformer *)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,void ()(re::RenormalizationDeformer *)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(void *a1)
{
  *a1 = &unk_26E712290;
  re::FunctionBase<24ul,void ()(re::RenormalizationDeformer *)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(void *a1)
{
  *a1 = &unk_26E712290;
  re::FunctionBase<24ul,void ()(re::RenormalizationDeformer *)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *uint64_t v3 = &unk_26E712290;
  v3[4] = *(void *)(a1 + 32);
  v3[5] = 0;
  re::FunctionBase<24ul,void ()(re::RenormalizationDeformer *)>::operator=<24ul>((uint64_t)(v3 + 1), v2);
  return v3;
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712290;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  return re::FunctionBase<24ul,void ()(re::RenormalizationDeformer *)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t (***std::__function::__func<void re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy(uint64_t a1))(void)
{
  return re::FunctionBase<24ul,void ()(re::RenormalizationDeformer *)>::destroyCallable(a1 + 8);
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy_deallocate(void *a1)
{
  re::FunctionBase<24ul,void ()(re::RenormalizationDeformer *)>::destroyCallable((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  return (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v3);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::RenormalizationDeformer>(std::unique_ptr<re::RenormalizationDeformer,std::function<void ()(re::RenormalizationDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target_type()
{
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_4,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_4>,void ()(re::OffsetsDeformer *)>::~__func()
{
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_4,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_4>,void ()(re::OffsetsDeformer *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E712310;
  return result;
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_4,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_4>,void ()(re::OffsetsDeformer *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712310;
}

re *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_4,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_4>,void ()(re::OffsetsDeformer *)>::operator()(re *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = re::globalAllocators(result)[2];
    for (uint64_t i = 48; i != 16; i -= 8)
    {
      unint64_t v5 = *(void **)(v2 + i);
      if (v5)
      {

        *(void *)(v2 + i) = 0;
      }
    }
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 40);
    return (re *)v6(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_4,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_4>,void ()(re::OffsetsDeformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_4,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_4>,void ()(re::OffsetsDeformer *)>::target_type()
{
}

void *std::__function::__value_func<void ()(re::OffsetsDeformer *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(re::OffsetsDeformer *)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = v3;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::function<void ()(re::OffsetsDeformer *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (a1) {
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v4);
  }
  uint64_t v3 = std::__throw_bad_function_call[abi:nn180100]();
  return re::internal::Callable<std::function<void ()(re::OffsetsDeformer *)>,void ()(re::OffsetsDeformer *)>::~Callable(v3);
}

void *re::internal::Callable<std::function<void ()(re::OffsetsDeformer *)>,void ()(re::OffsetsDeformer *)>::~Callable(void *a1)
{
  *a1 = &unk_26E7123A0;
  std::__function::__value_func<void ()(re::OffsetsDeformer *)>::~__value_func[abi:nn180100](a1 + 1);
  return a1;
}

void re::internal::Callable<std::function<void ()(re::OffsetsDeformer *)>,void ()(re::OffsetsDeformer *)>::~Callable(void *a1)
{
  *a1 = &unk_26E7123A0;
  std::__function::__value_func<void ()(re::OffsetsDeformer *)>::~__value_func[abi:nn180100](a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *re::internal::Callable<std::function<void ()(re::OffsetsDeformer *)>,void ()(re::OffsetsDeformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return std::function<void ()(re::OffsetsDeformer *)>::operator()(*(void *)(a1 + 32), *a2);
}

void *re::internal::Callable<std::function<void ()(re::OffsetsDeformer *)>,void ()(re::OffsetsDeformer *)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7123A0;
  uint64_t v3 = a2 + 1;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
    }
    else
    {
      a2[4] = (*(uint64_t (**)(void, void *))(*(void *)v4 + 16))(*(void *)(a1 + 32), v3);
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

void *re::internal::Callable<std::function<void ()(re::OffsetsDeformer *)>,void ()(re::OffsetsDeformer *)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7123A0;
  std::__function::__value_func<void ()(re::OffsetsDeformer *)>::__value_func[abi:nn180100]((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<std::function<void ()(re::OffsetsDeformer *)>,void ()(re::OffsetsDeformer *)>::size()
{
  return 40;
}

uint64_t re::FunctionBase<24ul,void ()(re::OffsetsDeformer *)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(re::OffsetsDeformer *)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,void ()(re::OffsetsDeformer *)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::OffsetsDeformer>(std::unique_ptr<re::OffsetsDeformer,std::function<void ()(re::OffsetsDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OffsetsDeformer>(std::unique_ptr<re::OffsetsDeformer,std::function<void ()(re::OffsetsDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(void *a1)
{
  *a1 = &unk_26E712408;
  re::FunctionBase<24ul,void ()(re::OffsetsDeformer *)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::OffsetsDeformer>(std::unique_ptr<re::OffsetsDeformer,std::function<void ()(re::OffsetsDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OffsetsDeformer>(std::unique_ptr<re::OffsetsDeformer,std::function<void ()(re::OffsetsDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(void *a1)
{
  *a1 = &unk_26E712408;
  re::FunctionBase<24ul,void ()(re::OffsetsDeformer *)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::OffsetsDeformer>(std::unique_ptr<re::OffsetsDeformer,std::function<void ()(re::OffsetsDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OffsetsDeformer>(std::unique_ptr<re::OffsetsDeformer,std::function<void ()(re::OffsetsDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *uint64_t v3 = &unk_26E712408;
  v3[4] = *(void *)(a1 + 32);
  v3[5] = 0;
  re::FunctionBase<24ul,void ()(re::OffsetsDeformer *)>::operator=<24ul>((uint64_t)(v3 + 1), v2);
  return v3;
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::OffsetsDeformer>(std::unique_ptr<re::OffsetsDeformer,std::function<void ()(re::OffsetsDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OffsetsDeformer>(std::unique_ptr<re::OffsetsDeformer,std::function<void ()(re::OffsetsDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712408;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  return re::FunctionBase<24ul,void ()(re::OffsetsDeformer *)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t (***std::__function::__func<void re::DeformationManager::registerDeformer<re::OffsetsDeformer>(std::unique_ptr<re::OffsetsDeformer,std::function<void ()(re::OffsetsDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OffsetsDeformer>(std::unique_ptr<re::OffsetsDeformer,std::function<void ()(re::OffsetsDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy(uint64_t a1))(void)
{
  return re::FunctionBase<24ul,void ()(re::OffsetsDeformer *)>::destroyCallable(a1 + 8);
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::OffsetsDeformer>(std::unique_ptr<re::OffsetsDeformer,std::function<void ()(re::OffsetsDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OffsetsDeformer>(std::unique_ptr<re::OffsetsDeformer,std::function<void ()(re::OffsetsDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy_deallocate(void *a1)
{
  re::FunctionBase<24ul,void ()(re::OffsetsDeformer *)>::destroyCallable((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::OffsetsDeformer>(std::unique_ptr<re::OffsetsDeformer,std::function<void ()(re::OffsetsDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OffsetsDeformer>(std::unique_ptr<re::OffsetsDeformer,std::function<void ()(re::OffsetsDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  return (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v3);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::OffsetsDeformer>(std::unique_ptr<re::OffsetsDeformer,std::function<void ()(re::OffsetsDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OffsetsDeformer>(std::unique_ptr<re::OffsetsDeformer,std::function<void ()(re::OffsetsDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::OffsetsDeformer>(std::unique_ptr<re::OffsetsDeformer,std::function<void ()(re::OffsetsDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OffsetsDeformer>(std::unique_ptr<re::OffsetsDeformer,std::function<void ()(re::OffsetsDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target_type()
{
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_5,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_5>,void ()(re::BoundingBoxCalculation *)>::~__func()
{
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_5,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_5>,void ()(re::BoundingBoxCalculation *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E712488;
  return result;
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_5,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_5>,void ()(re::BoundingBoxCalculation *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712488;
}

re *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_5,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_5>,void ()(re::BoundingBoxCalculation *)>::operator()(re *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = re::globalAllocators(result)[2];
    uint64_t v4 = *(void **)(v2 + 8);
    if (v4)
    {

      *(void *)(v2 + 8) = 0;
    }
    unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 40);
    return (re *)v5(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_5,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_5>,void ()(re::BoundingBoxCalculation *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_5,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_5>,void ()(re::BoundingBoxCalculation *)>::target_type()
{
}

void *std::__function::__value_func<void ()(re::BoundingBoxCalculation *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(re::BoundingBoxCalculation *)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = v3;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::function<void ()(re::BoundingBoxCalculation *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (a1) {
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v4);
  }
  uint64_t v3 = std::__throw_bad_function_call[abi:nn180100]();
  return re::internal::Callable<std::function<void ()(re::BoundingBoxCalculation *)>,void ()(re::BoundingBoxCalculation *)>::~Callable(v3);
}

void *re::internal::Callable<std::function<void ()(re::BoundingBoxCalculation *)>,void ()(re::BoundingBoxCalculation *)>::~Callable(void *a1)
{
  *a1 = &unk_26E712518;
  std::__function::__value_func<void ()(re::BoundingBoxCalculation *)>::~__value_func[abi:nn180100](a1 + 1);
  return a1;
}

void re::internal::Callable<std::function<void ()(re::BoundingBoxCalculation *)>,void ()(re::BoundingBoxCalculation *)>::~Callable(void *a1)
{
  *a1 = &unk_26E712518;
  std::__function::__value_func<void ()(re::BoundingBoxCalculation *)>::~__value_func[abi:nn180100](a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *re::internal::Callable<std::function<void ()(re::BoundingBoxCalculation *)>,void ()(re::BoundingBoxCalculation *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return std::function<void ()(re::BoundingBoxCalculation *)>::operator()(*(void *)(a1 + 32), *a2);
}

void *re::internal::Callable<std::function<void ()(re::BoundingBoxCalculation *)>,void ()(re::BoundingBoxCalculation *)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712518;
  uint64_t v3 = a2 + 1;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
    }
    else
    {
      a2[4] = (*(uint64_t (**)(void, void *))(*(void *)v4 + 16))(*(void *)(a1 + 32), v3);
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

void *re::internal::Callable<std::function<void ()(re::BoundingBoxCalculation *)>,void ()(re::BoundingBoxCalculation *)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712518;
  std::__function::__value_func<void ()(re::BoundingBoxCalculation *)>::__value_func[abi:nn180100]((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<std::function<void ()(re::BoundingBoxCalculation *)>,void ()(re::BoundingBoxCalculation *)>::size()
{
  return 40;
}

uint64_t re::FunctionBase<24ul,void ()(re::BoundingBoxCalculation *)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(re::BoundingBoxCalculation *)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,void ()(re::BoundingBoxCalculation *)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(void *a1)
{
  *a1 = &unk_26E712580;
  re::FunctionBase<24ul,void ()(re::BoundingBoxCalculation *)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(void *a1)
{
  *a1 = &unk_26E712580;
  re::FunctionBase<24ul,void ()(re::BoundingBoxCalculation *)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *uint64_t v3 = &unk_26E712580;
  v3[4] = *(void *)(a1 + 32);
  v3[5] = 0;
  re::FunctionBase<24ul,void ()(re::BoundingBoxCalculation *)>::operator=<24ul>((uint64_t)(v3 + 1), v2);
  return v3;
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712580;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  return re::FunctionBase<24ul,void ()(re::BoundingBoxCalculation *)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t (***std::__function::__func<void re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy(uint64_t a1))(void)
{
  return re::FunctionBase<24ul,void ()(re::BoundingBoxCalculation *)>::destroyCallable(a1 + 8);
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy_deallocate(void *a1)
{
  re::FunctionBase<24ul,void ()(re::BoundingBoxCalculation *)>::destroyCallable((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  return (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v3);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::BoundingBoxCalculation>(std::unique_ptr<re::BoundingBoxCalculation,std::function<void ()(re::BoundingBoxCalculation*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target_type()
{
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_6,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_6>,void ()(re::TensionDeformer *)>::~__func()
{
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_6,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_6>,void ()(re::TensionDeformer *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E712600;
  return result;
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_6,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_6>,void ()(re::TensionDeformer *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712600;
}

re *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_6,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_6>,void ()(re::TensionDeformer *)>::operator()(re *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = re::globalAllocators(result)[2];
    for (uint64_t i = 24; i != 8; i -= 8)
    {
      unint64_t v5 = *(void **)(v2 + i);
      if (v5)
      {

        *(void *)(v2 + i) = 0;
      }
    }
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 40);
    return (re *)v6(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_6,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_6>,void ()(re::TensionDeformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_6,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_6>,void ()(re::TensionDeformer *)>::target_type()
{
}

void *std::__function::__value_func<void ()(re::TensionDeformer *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(re::TensionDeformer *)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = v3;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::function<void ()(re::TensionDeformer *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (a1) {
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v4);
  }
  uint64_t v3 = std::__throw_bad_function_call[abi:nn180100]();
  return re::internal::Callable<std::function<void ()(re::TensionDeformer *)>,void ()(re::TensionDeformer *)>::~Callable(v3);
}

void *re::internal::Callable<std::function<void ()(re::TensionDeformer *)>,void ()(re::TensionDeformer *)>::~Callable(void *a1)
{
  *a1 = &unk_26E712690;
  std::__function::__value_func<void ()(re::TensionDeformer *)>::~__value_func[abi:nn180100](a1 + 1);
  return a1;
}

void re::internal::Callable<std::function<void ()(re::TensionDeformer *)>,void ()(re::TensionDeformer *)>::~Callable(void *a1)
{
  *a1 = &unk_26E712690;
  std::__function::__value_func<void ()(re::TensionDeformer *)>::~__value_func[abi:nn180100](a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *re::internal::Callable<std::function<void ()(re::TensionDeformer *)>,void ()(re::TensionDeformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return std::function<void ()(re::TensionDeformer *)>::operator()(*(void *)(a1 + 32), *a2);
}

void *re::internal::Callable<std::function<void ()(re::TensionDeformer *)>,void ()(re::TensionDeformer *)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712690;
  uint64_t v3 = a2 + 1;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
    }
    else
    {
      a2[4] = (*(uint64_t (**)(void, void *))(*(void *)v4 + 16))(*(void *)(a1 + 32), v3);
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

void *re::internal::Callable<std::function<void ()(re::TensionDeformer *)>,void ()(re::TensionDeformer *)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712690;
  std::__function::__value_func<void ()(re::TensionDeformer *)>::__value_func[abi:nn180100]((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<std::function<void ()(re::TensionDeformer *)>,void ()(re::TensionDeformer *)>::size()
{
  return 40;
}

uint64_t re::FunctionBase<24ul,void ()(re::TensionDeformer *)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(re::TensionDeformer *)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,void ()(re::TensionDeformer *)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::TensionDeformer>(std::unique_ptr<re::TensionDeformer,std::function<void ()(re::TensionDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::TensionDeformer>(std::unique_ptr<re::TensionDeformer,std::function<void ()(re::TensionDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(void *a1)
{
  *a1 = &unk_26E7126F8;
  re::FunctionBase<24ul,void ()(re::TensionDeformer *)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::TensionDeformer>(std::unique_ptr<re::TensionDeformer,std::function<void ()(re::TensionDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::TensionDeformer>(std::unique_ptr<re::TensionDeformer,std::function<void ()(re::TensionDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(void *a1)
{
  *a1 = &unk_26E7126F8;
  re::FunctionBase<24ul,void ()(re::TensionDeformer *)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::TensionDeformer>(std::unique_ptr<re::TensionDeformer,std::function<void ()(re::TensionDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::TensionDeformer>(std::unique_ptr<re::TensionDeformer,std::function<void ()(re::TensionDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *uint64_t v3 = &unk_26E7126F8;
  v3[4] = *(void *)(a1 + 32);
  v3[5] = 0;
  re::FunctionBase<24ul,void ()(re::TensionDeformer *)>::operator=<24ul>((uint64_t)(v3 + 1), v2);
  return v3;
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::TensionDeformer>(std::unique_ptr<re::TensionDeformer,std::function<void ()(re::TensionDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::TensionDeformer>(std::unique_ptr<re::TensionDeformer,std::function<void ()(re::TensionDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7126F8;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  return re::FunctionBase<24ul,void ()(re::TensionDeformer *)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t (***std::__function::__func<void re::DeformationManager::registerDeformer<re::TensionDeformer>(std::unique_ptr<re::TensionDeformer,std::function<void ()(re::TensionDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::TensionDeformer>(std::unique_ptr<re::TensionDeformer,std::function<void ()(re::TensionDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy(uint64_t a1))(void)
{
  return re::FunctionBase<24ul,void ()(re::TensionDeformer *)>::destroyCallable(a1 + 8);
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::TensionDeformer>(std::unique_ptr<re::TensionDeformer,std::function<void ()(re::TensionDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::TensionDeformer>(std::unique_ptr<re::TensionDeformer,std::function<void ()(re::TensionDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy_deallocate(void *a1)
{
  re::FunctionBase<24ul,void ()(re::TensionDeformer *)>::destroyCallable((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::TensionDeformer>(std::unique_ptr<re::TensionDeformer,std::function<void ()(re::TensionDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::TensionDeformer>(std::unique_ptr<re::TensionDeformer,std::function<void ()(re::TensionDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  return (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v3);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::TensionDeformer>(std::unique_ptr<re::TensionDeformer,std::function<void ()(re::TensionDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::TensionDeformer>(std::unique_ptr<re::TensionDeformer,std::function<void ()(re::TensionDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::TensionDeformer>(std::unique_ptr<re::TensionDeformer,std::function<void ()(re::TensionDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::TensionDeformer>(std::unique_ptr<re::TensionDeformer,std::function<void ()(re::TensionDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target_type()
{
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_7,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_7>,void ()(re::WrapDeformer *)>::~__func()
{
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_7,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_7>,void ()(re::WrapDeformer *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E712778;
  return result;
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_7,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_7>,void ()(re::WrapDeformer *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712778;
}

re *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_7,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_7>,void ()(re::WrapDeformer *)>::operator()(re *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = re::globalAllocators(result)[2];
    uint64_t v4 = 16;
    do
    {
      unint64_t v5 = *(void **)(v2 + v4);
      if (v5)
      {

        *(void *)(v2 + v4) = 0;
      }
      v4 -= 8;
    }
    while (v4);
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 40);
    return (re *)v6(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_7,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_7>,void ()(re::WrapDeformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_7,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_7>,void ()(re::WrapDeformer *)>::target_type()
{
}

void *std::__function::__value_func<void ()(re::WrapDeformer *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(re::WrapDeformer *)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = v3;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::function<void ()(re::WrapDeformer *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (a1) {
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v4);
  }
  uint64_t v3 = std::__throw_bad_function_call[abi:nn180100]();
  return re::internal::Callable<std::function<void ()(re::WrapDeformer *)>,void ()(re::WrapDeformer *)>::~Callable(v3);
}

void *re::internal::Callable<std::function<void ()(re::WrapDeformer *)>,void ()(re::WrapDeformer *)>::~Callable(void *a1)
{
  *a1 = &unk_26E712808;
  std::__function::__value_func<void ()(re::WrapDeformer *)>::~__value_func[abi:nn180100](a1 + 1);
  return a1;
}

void re::internal::Callable<std::function<void ()(re::WrapDeformer *)>,void ()(re::WrapDeformer *)>::~Callable(void *a1)
{
  *a1 = &unk_26E712808;
  std::__function::__value_func<void ()(re::WrapDeformer *)>::~__value_func[abi:nn180100](a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *re::internal::Callable<std::function<void ()(re::WrapDeformer *)>,void ()(re::WrapDeformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return std::function<void ()(re::WrapDeformer *)>::operator()(*(void *)(a1 + 32), *a2);
}

void *re::internal::Callable<std::function<void ()(re::WrapDeformer *)>,void ()(re::WrapDeformer *)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712808;
  uint64_t v3 = a2 + 1;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
    }
    else
    {
      a2[4] = (*(uint64_t (**)(void, void *))(*(void *)v4 + 16))(*(void *)(a1 + 32), v3);
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

void *re::internal::Callable<std::function<void ()(re::WrapDeformer *)>,void ()(re::WrapDeformer *)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712808;
  std::__function::__value_func<void ()(re::WrapDeformer *)>::__value_func[abi:nn180100]((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<std::function<void ()(re::WrapDeformer *)>,void ()(re::WrapDeformer *)>::size()
{
  return 40;
}

uint64_t re::FunctionBase<24ul,void ()(re::WrapDeformer *)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(re::WrapDeformer *)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,void ()(re::WrapDeformer *)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::WrapDeformer>(std::unique_ptr<re::WrapDeformer,std::function<void ()(re::WrapDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::WrapDeformer>(std::unique_ptr<re::WrapDeformer,std::function<void ()(re::WrapDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(void *a1)
{
  *a1 = &unk_26E712870;
  re::FunctionBase<24ul,void ()(re::WrapDeformer *)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::WrapDeformer>(std::unique_ptr<re::WrapDeformer,std::function<void ()(re::WrapDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::WrapDeformer>(std::unique_ptr<re::WrapDeformer,std::function<void ()(re::WrapDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(void *a1)
{
  *a1 = &unk_26E712870;
  re::FunctionBase<24ul,void ()(re::WrapDeformer *)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::WrapDeformer>(std::unique_ptr<re::WrapDeformer,std::function<void ()(re::WrapDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::WrapDeformer>(std::unique_ptr<re::WrapDeformer,std::function<void ()(re::WrapDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *uint64_t v3 = &unk_26E712870;
  v3[4] = *(void *)(a1 + 32);
  v3[5] = 0;
  re::FunctionBase<24ul,void ()(re::WrapDeformer *)>::operator=<24ul>((uint64_t)(v3 + 1), v2);
  return v3;
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::WrapDeformer>(std::unique_ptr<re::WrapDeformer,std::function<void ()(re::WrapDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::WrapDeformer>(std::unique_ptr<re::WrapDeformer,std::function<void ()(re::WrapDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712870;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  return re::FunctionBase<24ul,void ()(re::WrapDeformer *)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t (***std::__function::__func<void re::DeformationManager::registerDeformer<re::WrapDeformer>(std::unique_ptr<re::WrapDeformer,std::function<void ()(re::WrapDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::WrapDeformer>(std::unique_ptr<re::WrapDeformer,std::function<void ()(re::WrapDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy(uint64_t a1))(void)
{
  return re::FunctionBase<24ul,void ()(re::WrapDeformer *)>::destroyCallable(a1 + 8);
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::WrapDeformer>(std::unique_ptr<re::WrapDeformer,std::function<void ()(re::WrapDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::WrapDeformer>(std::unique_ptr<re::WrapDeformer,std::function<void ()(re::WrapDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy_deallocate(void *a1)
{
  re::FunctionBase<24ul,void ()(re::WrapDeformer *)>::destroyCallable((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::WrapDeformer>(std::unique_ptr<re::WrapDeformer,std::function<void ()(re::WrapDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::WrapDeformer>(std::unique_ptr<re::WrapDeformer,std::function<void ()(re::WrapDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  return (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v3);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::WrapDeformer>(std::unique_ptr<re::WrapDeformer,std::function<void ()(re::WrapDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::WrapDeformer>(std::unique_ptr<re::WrapDeformer,std::function<void ()(re::WrapDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::WrapDeformer>(std::unique_ptr<re::WrapDeformer,std::function<void ()(re::WrapDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::WrapDeformer>(std::unique_ptr<re::WrapDeformer,std::function<void ()(re::WrapDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target_type()
{
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_8,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_8>,void ()(re::ContactDeformer *)>::~__func()
{
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_8,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_8>,void ()(re::ContactDeformer *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E7128F0;
  return result;
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_8,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_8>,void ()(re::ContactDeformer *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7128F0;
}

re *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_8,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_8>,void ()(re::ContactDeformer *)>::operator()(re *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = re::globalAllocators(result)[2];
    for (uint64_t i = 24; i != 8; i -= 8)
    {
      unint64_t v5 = *(void **)(v2 + i);
      if (v5)
      {

        *(void *)(v2 + i) = 0;
      }
    }
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 40);
    return (re *)v6(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_8,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_8>,void ()(re::ContactDeformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_8,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_8>,void ()(re::ContactDeformer *)>::target_type()
{
}

void *std::__function::__value_func<void ()(re::ContactDeformer *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(re::ContactDeformer *)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = v3;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::function<void ()(re::ContactDeformer *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (a1) {
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v4);
  }
  uint64_t v3 = std::__throw_bad_function_call[abi:nn180100]();
  return re::internal::Callable<std::function<void ()(re::ContactDeformer *)>,void ()(re::ContactDeformer *)>::~Callable(v3);
}

void *re::internal::Callable<std::function<void ()(re::ContactDeformer *)>,void ()(re::ContactDeformer *)>::~Callable(void *a1)
{
  *a1 = &unk_26E712980;
  std::__function::__value_func<void ()(re::ContactDeformer *)>::~__value_func[abi:nn180100](a1 + 1);
  return a1;
}

void re::internal::Callable<std::function<void ()(re::ContactDeformer *)>,void ()(re::ContactDeformer *)>::~Callable(void *a1)
{
  *a1 = &unk_26E712980;
  std::__function::__value_func<void ()(re::ContactDeformer *)>::~__value_func[abi:nn180100](a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *re::internal::Callable<std::function<void ()(re::ContactDeformer *)>,void ()(re::ContactDeformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return std::function<void ()(re::ContactDeformer *)>::operator()(*(void *)(a1 + 32), *a2);
}

void *re::internal::Callable<std::function<void ()(re::ContactDeformer *)>,void ()(re::ContactDeformer *)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712980;
  uint64_t v3 = a2 + 1;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
    }
    else
    {
      a2[4] = (*(uint64_t (**)(void, void *))(*(void *)v4 + 16))(*(void *)(a1 + 32), v3);
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

void *re::internal::Callable<std::function<void ()(re::ContactDeformer *)>,void ()(re::ContactDeformer *)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712980;
  std::__function::__value_func<void ()(re::ContactDeformer *)>::__value_func[abi:nn180100]((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<std::function<void ()(re::ContactDeformer *)>,void ()(re::ContactDeformer *)>::size()
{
  return 40;
}

uint64_t re::FunctionBase<24ul,void ()(re::ContactDeformer *)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(re::ContactDeformer *)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,void ()(re::ContactDeformer *)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(void *a1)
{
  *a1 = &unk_26E7129E8;
  re::FunctionBase<24ul,void ()(re::ContactDeformer *)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(void *a1)
{
  *a1 = &unk_26E7129E8;
  re::FunctionBase<24ul,void ()(re::ContactDeformer *)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *uint64_t v3 = &unk_26E7129E8;
  v3[4] = *(void *)(a1 + 32);
  v3[5] = 0;
  re::FunctionBase<24ul,void ()(re::ContactDeformer *)>::operator=<24ul>((uint64_t)(v3 + 1), v2);
  return v3;
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7129E8;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  return re::FunctionBase<24ul,void ()(re::ContactDeformer *)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t (***std::__function::__func<void re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy(uint64_t a1))(void)
{
  return re::FunctionBase<24ul,void ()(re::ContactDeformer *)>::destroyCallable(a1 + 8);
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy_deallocate(void *a1)
{
  re::FunctionBase<24ul,void ()(re::ContactDeformer *)>::destroyCallable((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  return (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v3);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::ContactDeformer>(std::unique_ptr<re::ContactDeformer,std::function<void ()(re::ContactDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target_type()
{
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_9,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_9>,void ()(re::PrepareSimplifiedMeshBuffer *)>::~__func()
{
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_9,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_9>,void ()(re::PrepareSimplifiedMeshBuffer *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E712A68;
  return result;
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_9,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_9>,void ()(re::PrepareSimplifiedMeshBuffer *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712A68;
}

re *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_9,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_9>,void ()(re::PrepareSimplifiedMeshBuffer *)>::operator()(re *result, re::PrepareSimplifiedMeshBuffer **a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = re::globalAllocators(result)[2];
    re::PrepareSimplifiedMeshBuffer::~PrepareSimplifiedMeshBuffer(v2);
    uint64_t v4 = *(uint64_t (**)(uint64_t, re::PrepareSimplifiedMeshBuffer *))(*(void *)v3 + 40);
    return (re *)v4(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_9,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_9>,void ()(re::PrepareSimplifiedMeshBuffer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_9,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_9>,void ()(re::PrepareSimplifiedMeshBuffer *)>::target_type()
{
}

void re::PrepareSimplifiedMeshBuffer::~PrepareSimplifiedMeshBuffer(re::PrepareSimplifiedMeshBuffer *this)
{
  uint64_t v2 = (void *)*((void *)this + 41);
  if (v2)
  {

    *((void *)this + 41) = 0;
  }
  for (uint64_t i = 288; i != -32; i -= 40)
    re::DynamicArray<unsigned long>::deinit((uint64_t)this + i);
}

{
  uint64_t vars8;

  re::PrepareSimplifiedMeshBuffer::~PrepareSimplifiedMeshBuffer(this);
  JUMPOUT(0x237DBCBD0);
}

void *std::__function::__value_func<void ()(re::PrepareSimplifiedMeshBuffer *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(re::PrepareSimplifiedMeshBuffer *)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = v3;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::function<void ()(re::PrepareSimplifiedMeshBuffer *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (a1) {
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v4);
  }
  uint64_t v3 = std::__throw_bad_function_call[abi:nn180100]();
  return re::internal::Callable<std::function<void ()(re::PrepareSimplifiedMeshBuffer *)>,void ()(re::PrepareSimplifiedMeshBuffer *)>::~Callable(v3);
}

void *re::internal::Callable<std::function<void ()(re::PrepareSimplifiedMeshBuffer *)>,void ()(re::PrepareSimplifiedMeshBuffer *)>::~Callable(void *a1)
{
  *a1 = &unk_26E712AF8;
  std::__function::__value_func<void ()(re::PrepareSimplifiedMeshBuffer *)>::~__value_func[abi:nn180100](a1 + 1);
  return a1;
}

void re::internal::Callable<std::function<void ()(re::PrepareSimplifiedMeshBuffer *)>,void ()(re::PrepareSimplifiedMeshBuffer *)>::~Callable(void *a1)
{
  *a1 = &unk_26E712AF8;
  std::__function::__value_func<void ()(re::PrepareSimplifiedMeshBuffer *)>::~__value_func[abi:nn180100](a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *re::internal::Callable<std::function<void ()(re::PrepareSimplifiedMeshBuffer *)>,void ()(re::PrepareSimplifiedMeshBuffer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return std::function<void ()(re::PrepareSimplifiedMeshBuffer *)>::operator()(*(void *)(a1 + 32), *a2);
}

void *re::internal::Callable<std::function<void ()(re::PrepareSimplifiedMeshBuffer *)>,void ()(re::PrepareSimplifiedMeshBuffer *)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712AF8;
  uint64_t v3 = a2 + 1;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
    }
    else
    {
      a2[4] = (*(uint64_t (**)(void, void *))(*(void *)v4 + 16))(*(void *)(a1 + 32), v3);
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

void *re::internal::Callable<std::function<void ()(re::PrepareSimplifiedMeshBuffer *)>,void ()(re::PrepareSimplifiedMeshBuffer *)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712AF8;
  std::__function::__value_func<void ()(re::PrepareSimplifiedMeshBuffer *)>::__value_func[abi:nn180100]((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<std::function<void ()(re::PrepareSimplifiedMeshBuffer *)>,void ()(re::PrepareSimplifiedMeshBuffer *)>::size()
{
  return 40;
}

uint64_t re::FunctionBase<24ul,void ()(re::PrepareSimplifiedMeshBuffer *)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(re::PrepareSimplifiedMeshBuffer *)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,void ()(re::PrepareSimplifiedMeshBuffer *)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::PrepareSimplifiedMeshBuffer>(std::unique_ptr<re::PrepareSimplifiedMeshBuffer,std::function<void ()(re::PrepareSimplifiedMeshBuffer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::PrepareSimplifiedMeshBuffer>(std::unique_ptr<re::PrepareSimplifiedMeshBuffer,std::function<void ()(re::PrepareSimplifiedMeshBuffer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(void *a1)
{
  *a1 = &unk_26E712B60;
  re::FunctionBase<24ul,void ()(re::PrepareSimplifiedMeshBuffer *)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::PrepareSimplifiedMeshBuffer>(std::unique_ptr<re::PrepareSimplifiedMeshBuffer,std::function<void ()(re::PrepareSimplifiedMeshBuffer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::PrepareSimplifiedMeshBuffer>(std::unique_ptr<re::PrepareSimplifiedMeshBuffer,std::function<void ()(re::PrepareSimplifiedMeshBuffer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(void *a1)
{
  *a1 = &unk_26E712B60;
  re::FunctionBase<24ul,void ()(re::PrepareSimplifiedMeshBuffer *)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::PrepareSimplifiedMeshBuffer>(std::unique_ptr<re::PrepareSimplifiedMeshBuffer,std::function<void ()(re::PrepareSimplifiedMeshBuffer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::PrepareSimplifiedMeshBuffer>(std::unique_ptr<re::PrepareSimplifiedMeshBuffer,std::function<void ()(re::PrepareSimplifiedMeshBuffer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *uint64_t v3 = &unk_26E712B60;
  v3[4] = *(void *)(a1 + 32);
  v3[5] = 0;
  re::FunctionBase<24ul,void ()(re::PrepareSimplifiedMeshBuffer *)>::operator=<24ul>((uint64_t)(v3 + 1), v2);
  return v3;
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::PrepareSimplifiedMeshBuffer>(std::unique_ptr<re::PrepareSimplifiedMeshBuffer,std::function<void ()(re::PrepareSimplifiedMeshBuffer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::PrepareSimplifiedMeshBuffer>(std::unique_ptr<re::PrepareSimplifiedMeshBuffer,std::function<void ()(re::PrepareSimplifiedMeshBuffer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712B60;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  return re::FunctionBase<24ul,void ()(re::PrepareSimplifiedMeshBuffer *)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t (***std::__function::__func<void re::DeformationManager::registerDeformer<re::PrepareSimplifiedMeshBuffer>(std::unique_ptr<re::PrepareSimplifiedMeshBuffer,std::function<void ()(re::PrepareSimplifiedMeshBuffer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::PrepareSimplifiedMeshBuffer>(std::unique_ptr<re::PrepareSimplifiedMeshBuffer,std::function<void ()(re::PrepareSimplifiedMeshBuffer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy(uint64_t a1))(void)
{
  return re::FunctionBase<24ul,void ()(re::PrepareSimplifiedMeshBuffer *)>::destroyCallable(a1 + 8);
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::PrepareSimplifiedMeshBuffer>(std::unique_ptr<re::PrepareSimplifiedMeshBuffer,std::function<void ()(re::PrepareSimplifiedMeshBuffer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::PrepareSimplifiedMeshBuffer>(std::unique_ptr<re::PrepareSimplifiedMeshBuffer,std::function<void ()(re::PrepareSimplifiedMeshBuffer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy_deallocate(void *a1)
{
  re::FunctionBase<24ul,void ()(re::PrepareSimplifiedMeshBuffer *)>::destroyCallable((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::PrepareSimplifiedMeshBuffer>(std::unique_ptr<re::PrepareSimplifiedMeshBuffer,std::function<void ()(re::PrepareSimplifiedMeshBuffer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::PrepareSimplifiedMeshBuffer>(std::unique_ptr<re::PrepareSimplifiedMeshBuffer,std::function<void ()(re::PrepareSimplifiedMeshBuffer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  return (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v3);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::PrepareSimplifiedMeshBuffer>(std::unique_ptr<re::PrepareSimplifiedMeshBuffer,std::function<void ()(re::PrepareSimplifiedMeshBuffer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::PrepareSimplifiedMeshBuffer>(std::unique_ptr<re::PrepareSimplifiedMeshBuffer,std::function<void ()(re::PrepareSimplifiedMeshBuffer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::PrepareSimplifiedMeshBuffer>(std::unique_ptr<re::PrepareSimplifiedMeshBuffer,std::function<void ()(re::PrepareSimplifiedMeshBuffer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::PrepareSimplifiedMeshBuffer>(std::unique_ptr<re::PrepareSimplifiedMeshBuffer,std::function<void ()(re::PrepareSimplifiedMeshBuffer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target_type()
{
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_10,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_10>,void ()(re::OpenSubdivViewIndependentComputeStep *)>::~__func()
{
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_10,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_10>,void ()(re::OpenSubdivViewIndependentComputeStep *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E712BE0;
  return result;
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_10,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_10>,void ()(re::OpenSubdivViewIndependentComputeStep *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712BE0;
}

re *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_10,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_10>,void ()(re::OpenSubdivViewIndependentComputeStep *)>::operator()(re *result, re::OpenSubdivViewIndependentComputeStep **a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = re::globalAllocators(result)[2];
    re::OpenSubdivViewIndependentComputeStep::~OpenSubdivViewIndependentComputeStep(v2);
    uint64_t v4 = *(uint64_t (**)(uint64_t, re::OpenSubdivViewIndependentComputeStep *))(*(void *)v3 + 40);
    return (re *)v4(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_10,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_10>,void ()(re::OpenSubdivViewIndependentComputeStep *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_10,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_10>,void ()(re::OpenSubdivViewIndependentComputeStep *)>::target_type()
{
}

void re::OpenSubdivViewIndependentComputeStep::~OpenSubdivViewIndependentComputeStep(re::OpenSubdivViewIndependentComputeStep *this)
{
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {

    *((void *)this + 4) = 0;
  }
  uint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {

    *((void *)this + 3) = 0;
  }
}

{
  uint64_t vars8;

  re::OpenSubdivViewIndependentComputeStep::~OpenSubdivViewIndependentComputeStep(this);
  JUMPOUT(0x237DBCBD0);
}

void *std::__function::__value_func<void ()(re::OpenSubdivViewIndependentComputeStep *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(re::OpenSubdivViewIndependentComputeStep *)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = v3;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::function<void ()(re::OpenSubdivViewIndependentComputeStep *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (a1) {
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v4);
  }
  uint64_t v3 = std::__throw_bad_function_call[abi:nn180100]();
  return re::internal::Callable<std::function<void ()(re::OpenSubdivViewIndependentComputeStep *)>,void ()(re::OpenSubdivViewIndependentComputeStep *)>::~Callable(v3);
}

void *re::internal::Callable<std::function<void ()(re::OpenSubdivViewIndependentComputeStep *)>,void ()(re::OpenSubdivViewIndependentComputeStep *)>::~Callable(void *a1)
{
  *a1 = &unk_26E712C70;
  std::__function::__value_func<void ()(re::OpenSubdivViewIndependentComputeStep *)>::~__value_func[abi:nn180100](a1 + 1);
  return a1;
}

void re::internal::Callable<std::function<void ()(re::OpenSubdivViewIndependentComputeStep *)>,void ()(re::OpenSubdivViewIndependentComputeStep *)>::~Callable(void *a1)
{
  *a1 = &unk_26E712C70;
  std::__function::__value_func<void ()(re::OpenSubdivViewIndependentComputeStep *)>::~__value_func[abi:nn180100](a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *re::internal::Callable<std::function<void ()(re::OpenSubdivViewIndependentComputeStep *)>,void ()(re::OpenSubdivViewIndependentComputeStep *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return std::function<void ()(re::OpenSubdivViewIndependentComputeStep *)>::operator()(*(void *)(a1 + 32), *a2);
}

void *re::internal::Callable<std::function<void ()(re::OpenSubdivViewIndependentComputeStep *)>,void ()(re::OpenSubdivViewIndependentComputeStep *)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712C70;
  uint64_t v3 = a2 + 1;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
    }
    else
    {
      a2[4] = (*(uint64_t (**)(void, void *))(*(void *)v4 + 16))(*(void *)(a1 + 32), v3);
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

void *re::internal::Callable<std::function<void ()(re::OpenSubdivViewIndependentComputeStep *)>,void ()(re::OpenSubdivViewIndependentComputeStep *)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712C70;
  std::__function::__value_func<void ()(re::OpenSubdivViewIndependentComputeStep *)>::__value_func[abi:nn180100]((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<std::function<void ()(re::OpenSubdivViewIndependentComputeStep *)>,void ()(re::OpenSubdivViewIndependentComputeStep *)>::size()
{
  return 40;
}

uint64_t re::FunctionBase<24ul,void ()(re::OpenSubdivViewIndependentComputeStep *)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(re::OpenSubdivViewIndependentComputeStep *)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,void ()(re::OpenSubdivViewIndependentComputeStep *)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(void *a1)
{
  *a1 = &unk_26E712CD8;
  re::FunctionBase<24ul,void ()(re::OpenSubdivViewIndependentComputeStep *)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(void *a1)
{
  *a1 = &unk_26E712CD8;
  re::FunctionBase<24ul,void ()(re::OpenSubdivViewIndependentComputeStep *)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *uint64_t v3 = &unk_26E712CD8;
  v3[4] = *(void *)(a1 + 32);
  v3[5] = 0;
  re::FunctionBase<24ul,void ()(re::OpenSubdivViewIndependentComputeStep *)>::operator=<24ul>((uint64_t)(v3 + 1), v2);
  return v3;
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712CD8;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  return re::FunctionBase<24ul,void ()(re::OpenSubdivViewIndependentComputeStep *)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t (***std::__function::__func<void re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy(uint64_t a1))(void)
{
  return re::FunctionBase<24ul,void ()(re::OpenSubdivViewIndependentComputeStep *)>::destroyCallable(a1 + 8);
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy_deallocate(void *a1)
{
  re::FunctionBase<24ul,void ()(re::OpenSubdivViewIndependentComputeStep *)>::destroyCallable((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  return (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v3);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OpenSubdivViewIndependentComputeStep>(std::unique_ptr<re::OpenSubdivViewIndependentComputeStep,std::function<void ()(re::OpenSubdivViewIndependentComputeStep*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target_type()
{
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_11,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_11>,void ()(re::OpenSubdivViewDependentComputeStep *)>::~__func()
{
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_11,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_11>,void ()(re::OpenSubdivViewDependentComputeStep *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E712D58;
  return result;
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_11,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_11>,void ()(re::OpenSubdivViewDependentComputeStep *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712D58;
}

re *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_11,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_11>,void ()(re::OpenSubdivViewDependentComputeStep *)>::operator()(re *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = re::globalAllocators(result)[2];
    uint64_t v4 = *(void **)(v2 + 24);
    if (v4)
    {

      *(void *)(v2 + 24) = 0;
    }
    unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 40);
    return (re *)v5(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_11,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_11>,void ()(re::OpenSubdivViewDependentComputeStep *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_11,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_11>,void ()(re::OpenSubdivViewDependentComputeStep *)>::target_type()
{
}

void *std::__function::__value_func<void ()(re::OpenSubdivViewDependentComputeStep *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(re::OpenSubdivViewDependentComputeStep *)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = v3;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::function<void ()(re::OpenSubdivViewDependentComputeStep *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (a1) {
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v4);
  }
  uint64_t v3 = std::__throw_bad_function_call[abi:nn180100]();
  return re::internal::Callable<std::function<void ()(re::OpenSubdivViewDependentComputeStep *)>,void ()(re::OpenSubdivViewDependentComputeStep *)>::~Callable(v3);
}

void *re::internal::Callable<std::function<void ()(re::OpenSubdivViewDependentComputeStep *)>,void ()(re::OpenSubdivViewDependentComputeStep *)>::~Callable(void *a1)
{
  *a1 = &unk_26E712DE8;
  std::__function::__value_func<void ()(re::OpenSubdivViewDependentComputeStep *)>::~__value_func[abi:nn180100](a1 + 1);
  return a1;
}

void re::internal::Callable<std::function<void ()(re::OpenSubdivViewDependentComputeStep *)>,void ()(re::OpenSubdivViewDependentComputeStep *)>::~Callable(void *a1)
{
  *a1 = &unk_26E712DE8;
  std::__function::__value_func<void ()(re::OpenSubdivViewDependentComputeStep *)>::~__value_func[abi:nn180100](a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *re::internal::Callable<std::function<void ()(re::OpenSubdivViewDependentComputeStep *)>,void ()(re::OpenSubdivViewDependentComputeStep *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return std::function<void ()(re::OpenSubdivViewDependentComputeStep *)>::operator()(*(void *)(a1 + 32), *a2);
}

void *re::internal::Callable<std::function<void ()(re::OpenSubdivViewDependentComputeStep *)>,void ()(re::OpenSubdivViewDependentComputeStep *)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712DE8;
  uint64_t v3 = a2 + 1;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
    }
    else
    {
      a2[4] = (*(uint64_t (**)(void, void *))(*(void *)v4 + 16))(*(void *)(a1 + 32), v3);
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

void *re::internal::Callable<std::function<void ()(re::OpenSubdivViewDependentComputeStep *)>,void ()(re::OpenSubdivViewDependentComputeStep *)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712DE8;
  std::__function::__value_func<void ()(re::OpenSubdivViewDependentComputeStep *)>::__value_func[abi:nn180100]((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<std::function<void ()(re::OpenSubdivViewDependentComputeStep *)>,void ()(re::OpenSubdivViewDependentComputeStep *)>::size()
{
  return 40;
}

uint64_t re::FunctionBase<24ul,void ()(re::OpenSubdivViewDependentComputeStep *)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(re::OpenSubdivViewDependentComputeStep *)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,void ()(re::OpenSubdivViewDependentComputeStep *)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::OpenSubdivViewDependentComputeStep>(std::unique_ptr<re::OpenSubdivViewDependentComputeStep,std::function<void ()(re::OpenSubdivViewDependentComputeStep*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OpenSubdivViewDependentComputeStep>(std::unique_ptr<re::OpenSubdivViewDependentComputeStep,std::function<void ()(re::OpenSubdivViewDependentComputeStep*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(void *a1)
{
  *a1 = &unk_26E712E50;
  re::FunctionBase<24ul,void ()(re::OpenSubdivViewDependentComputeStep *)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::OpenSubdivViewDependentComputeStep>(std::unique_ptr<re::OpenSubdivViewDependentComputeStep,std::function<void ()(re::OpenSubdivViewDependentComputeStep*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OpenSubdivViewDependentComputeStep>(std::unique_ptr<re::OpenSubdivViewDependentComputeStep,std::function<void ()(re::OpenSubdivViewDependentComputeStep*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(void *a1)
{
  *a1 = &unk_26E712E50;
  re::FunctionBase<24ul,void ()(re::OpenSubdivViewDependentComputeStep *)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::OpenSubdivViewDependentComputeStep>(std::unique_ptr<re::OpenSubdivViewDependentComputeStep,std::function<void ()(re::OpenSubdivViewDependentComputeStep*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OpenSubdivViewDependentComputeStep>(std::unique_ptr<re::OpenSubdivViewDependentComputeStep,std::function<void ()(re::OpenSubdivViewDependentComputeStep*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *uint64_t v3 = &unk_26E712E50;
  v3[4] = *(void *)(a1 + 32);
  v3[5] = 0;
  re::FunctionBase<24ul,void ()(re::OpenSubdivViewDependentComputeStep *)>::operator=<24ul>((uint64_t)(v3 + 1), v2);
  return v3;
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::OpenSubdivViewDependentComputeStep>(std::unique_ptr<re::OpenSubdivViewDependentComputeStep,std::function<void ()(re::OpenSubdivViewDependentComputeStep*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OpenSubdivViewDependentComputeStep>(std::unique_ptr<re::OpenSubdivViewDependentComputeStep,std::function<void ()(re::OpenSubdivViewDependentComputeStep*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712E50;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  return re::FunctionBase<24ul,void ()(re::OpenSubdivViewDependentComputeStep *)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t (***std::__function::__func<void re::DeformationManager::registerDeformer<re::OpenSubdivViewDependentComputeStep>(std::unique_ptr<re::OpenSubdivViewDependentComputeStep,std::function<void ()(re::OpenSubdivViewDependentComputeStep*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OpenSubdivViewDependentComputeStep>(std::unique_ptr<re::OpenSubdivViewDependentComputeStep,std::function<void ()(re::OpenSubdivViewDependentComputeStep*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy(uint64_t a1))(void)
{
  return re::FunctionBase<24ul,void ()(re::OpenSubdivViewDependentComputeStep *)>::destroyCallable(a1 + 8);
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::OpenSubdivViewDependentComputeStep>(std::unique_ptr<re::OpenSubdivViewDependentComputeStep,std::function<void ()(re::OpenSubdivViewDependentComputeStep*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OpenSubdivViewDependentComputeStep>(std::unique_ptr<re::OpenSubdivViewDependentComputeStep,std::function<void ()(re::OpenSubdivViewDependentComputeStep*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy_deallocate(void *a1)
{
  re::FunctionBase<24ul,void ()(re::OpenSubdivViewDependentComputeStep *)>::destroyCallable((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::OpenSubdivViewDependentComputeStep>(std::unique_ptr<re::OpenSubdivViewDependentComputeStep,std::function<void ()(re::OpenSubdivViewDependentComputeStep*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OpenSubdivViewDependentComputeStep>(std::unique_ptr<re::OpenSubdivViewDependentComputeStep,std::function<void ()(re::OpenSubdivViewDependentComputeStep*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  return (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v3);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::OpenSubdivViewDependentComputeStep>(std::unique_ptr<re::OpenSubdivViewDependentComputeStep,std::function<void ()(re::OpenSubdivViewDependentComputeStep*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OpenSubdivViewDependentComputeStep>(std::unique_ptr<re::OpenSubdivViewDependentComputeStep,std::function<void ()(re::OpenSubdivViewDependentComputeStep*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::OpenSubdivViewDependentComputeStep>(std::unique_ptr<re::OpenSubdivViewDependentComputeStep,std::function<void ()(re::OpenSubdivViewDependentComputeStep*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::OpenSubdivViewDependentComputeStep>(std::unique_ptr<re::OpenSubdivViewDependentComputeStep,std::function<void ()(re::OpenSubdivViewDependentComputeStep*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target_type()
{
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_12,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_12>,void ()(re::CustomDeformers *)>::~__func()
{
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_12,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_12>,void ()(re::CustomDeformers *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E712ED0;
  return result;
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_12,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_12>,void ()(re::CustomDeformers *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712ED0;
}

re *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_12,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_12>,void ()(re::CustomDeformers *)>::operator()(re *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = re::globalAllocators(result)[2];
    re::DynamicArray<unsigned long>::deinit(v2 + 128);
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v2 + 72));
    re::DataArray<re::CustomDeformers::CustomDeformerData>::deinit(v2 + 8);
    re::DynamicArray<unsigned long>::deinit(v2 + 8);
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 40);
    return (re *)v4(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_12,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_12>,void ()(re::CustomDeformers *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_12,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_12>,void ()(re::CustomDeformers *)>::target_type()
{
}

void *std::__function::__value_func<void ()(re::CustomDeformers *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(re::CustomDeformers *)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = v3;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::function<void ()(re::CustomDeformers *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (a1) {
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v4);
  }
  uint64_t v3 = std::__throw_bad_function_call[abi:nn180100]();
  return re::internal::Callable<std::function<void ()(re::CustomDeformers *)>,void ()(re::CustomDeformers *)>::~Callable(v3);
}

void *re::internal::Callable<std::function<void ()(re::CustomDeformers *)>,void ()(re::CustomDeformers *)>::~Callable(void *a1)
{
  *a1 = &unk_26E712F60;
  std::__function::__value_func<void ()(re::CustomDeformers *)>::~__value_func[abi:nn180100](a1 + 1);
  return a1;
}

void re::internal::Callable<std::function<void ()(re::CustomDeformers *)>,void ()(re::CustomDeformers *)>::~Callable(void *a1)
{
  *a1 = &unk_26E712F60;
  std::__function::__value_func<void ()(re::CustomDeformers *)>::~__value_func[abi:nn180100](a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *re::internal::Callable<std::function<void ()(re::CustomDeformers *)>,void ()(re::CustomDeformers *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return std::function<void ()(re::CustomDeformers *)>::operator()(*(void *)(a1 + 32), *a2);
}

void *re::internal::Callable<std::function<void ()(re::CustomDeformers *)>,void ()(re::CustomDeformers *)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712F60;
  uint64_t v3 = a2 + 1;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
    }
    else
    {
      a2[4] = (*(uint64_t (**)(void, void *))(*(void *)v4 + 16))(*(void *)(a1 + 32), v3);
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

void *re::internal::Callable<std::function<void ()(re::CustomDeformers *)>,void ()(re::CustomDeformers *)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712F60;
  std::__function::__value_func<void ()(re::CustomDeformers *)>::__value_func[abi:nn180100]((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<std::function<void ()(re::CustomDeformers *)>,void ()(re::CustomDeformers *)>::size()
{
  return 40;
}

uint64_t re::FunctionBase<24ul,void ()(re::CustomDeformers *)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(re::CustomDeformers *)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,void ()(re::CustomDeformers *)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(void *a1)
{
  *a1 = &unk_26E712FC8;
  re::FunctionBase<24ul,void ()(re::CustomDeformers *)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(void *a1)
{
  *a1 = &unk_26E712FC8;
  re::FunctionBase<24ul,void ()(re::CustomDeformers *)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *uint64_t v3 = &unk_26E712FC8;
  v3[4] = *(void *)(a1 + 32);
  v3[5] = 0;
  re::FunctionBase<24ul,void ()(re::CustomDeformers *)>::operator=<24ul>((uint64_t)(v3 + 1), v2);
  return v3;
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E712FC8;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  return re::FunctionBase<24ul,void ()(re::CustomDeformers *)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t (***std::__function::__func<void re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy(uint64_t a1))(void)
{
  return re::FunctionBase<24ul,void ()(re::CustomDeformers *)>::destroyCallable(a1 + 8);
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy_deallocate(void *a1)
{
  re::FunctionBase<24ul,void ()(re::CustomDeformers *)>::destroyCallable((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  return (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v3);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::CustomDeformers>(std::unique_ptr<re::CustomDeformers,std::function<void ()(re::CustomDeformers*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target_type()
{
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_13,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_13>,void ()(re::FenceDeformer *)>::~__func()
{
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_13,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_13>,void ()(re::FenceDeformer *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E713048;
  return result;
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_13,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_13>,void ()(re::FenceDeformer *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E713048;
}

re *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_13,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_13>,void ()(re::FenceDeformer *)>::operator()(re *result, void *a2)
{
  if (*a2)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)re::globalAllocators(result)[2] + 40);
    return (re *)v2();
  }
  return result;
}

uint64_t std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_13,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_13>,void ()(re::FenceDeformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_13,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_13>,void ()(re::FenceDeformer *)>::target_type()
{
}

void *std::__function::__value_func<void ()(re::FenceDeformer *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(re::FenceDeformer *)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = v3;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::function<void ()(re::FenceDeformer *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (a1) {
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v4);
  }
  uint64_t v3 = std::__throw_bad_function_call[abi:nn180100]();
  return re::internal::Callable<std::function<void ()(re::FenceDeformer *)>,void ()(re::FenceDeformer *)>::~Callable(v3);
}

void *re::internal::Callable<std::function<void ()(re::FenceDeformer *)>,void ()(re::FenceDeformer *)>::~Callable(void *a1)
{
  *a1 = &unk_26E7130D8;
  std::__function::__value_func<void ()(re::FenceDeformer *)>::~__value_func[abi:nn180100](a1 + 1);
  return a1;
}

void re::internal::Callable<std::function<void ()(re::FenceDeformer *)>,void ()(re::FenceDeformer *)>::~Callable(void *a1)
{
  *a1 = &unk_26E7130D8;
  std::__function::__value_func<void ()(re::FenceDeformer *)>::~__value_func[abi:nn180100](a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *re::internal::Callable<std::function<void ()(re::FenceDeformer *)>,void ()(re::FenceDeformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return std::function<void ()(re::FenceDeformer *)>::operator()(*(void *)(a1 + 32), *a2);
}

void *re::internal::Callable<std::function<void ()(re::FenceDeformer *)>,void ()(re::FenceDeformer *)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7130D8;
  uint64_t v3 = a2 + 1;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
    }
    else
    {
      a2[4] = (*(uint64_t (**)(void, void *))(*(void *)v4 + 16))(*(void *)(a1 + 32), v3);
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

void *re::internal::Callable<std::function<void ()(re::FenceDeformer *)>,void ()(re::FenceDeformer *)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7130D8;
  std::__function::__value_func<void ()(re::FenceDeformer *)>::__value_func[abi:nn180100]((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<std::function<void ()(re::FenceDeformer *)>,void ()(re::FenceDeformer *)>::size()
{
  return 40;
}

uint64_t re::FunctionBase<24ul,void ()(re::FenceDeformer *)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(re::FenceDeformer *)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,void ()(re::FenceDeformer *)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(void *a1)
{
  *a1 = &unk_26E713140;
  re::FunctionBase<24ul,void ()(re::FenceDeformer *)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(void *a1)
{
  *a1 = &unk_26E713140;
  re::FunctionBase<24ul,void ()(re::FenceDeformer *)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *uint64_t v3 = &unk_26E713140;
  v3[4] = *(void *)(a1 + 32);
  v3[5] = 0;
  re::FunctionBase<24ul,void ()(re::FenceDeformer *)>::operator=<24ul>((uint64_t)(v3 + 1), v2);
  return v3;
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E713140;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  return re::FunctionBase<24ul,void ()(re::FenceDeformer *)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t (***std::__function::__func<void re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy(uint64_t a1))(void)
{
  return re::FunctionBase<24ul,void ()(re::FenceDeformer *)>::destroyCallable(a1 + 8);
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy_deallocate(void *a1)
{
  re::FunctionBase<24ul,void ()(re::FenceDeformer *)>::destroyCallable((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  return (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v3);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::FenceDeformer>(std::unique_ptr<re::FenceDeformer,std::function<void ()(re::FenceDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target_type()
{
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_14,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_14>,void ()(re::VertexCacheDeformer *)>::~__func()
{
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_14,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_14>,void ()(re::VertexCacheDeformer *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E7131C0;
  return result;
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_14,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_14>,void ()(re::VertexCacheDeformer *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7131C0;
}

re *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_14,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_14>,void ()(re::VertexCacheDeformer *)>::operator()(re *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = re::globalAllocators(result)[2];
    uint64_t v4 = 32;
    do
    {
      unint64_t v5 = *(void **)(v2 + v4);
      if (v5)
      {

        *(void *)(v2 + v4) = 0;
      }
      v4 -= 8;
    }
    while (v4);
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 40);
    return (re *)v6(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_14,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_14>,void ()(re::VertexCacheDeformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_14,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_14>,void ()(re::VertexCacheDeformer *)>::target_type()
{
}

void *std::__function::__value_func<void ()(re::VertexCacheDeformer *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(re::VertexCacheDeformer *)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = v3;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::function<void ()(re::VertexCacheDeformer *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (a1) {
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v4);
  }
  uint64_t v3 = std::__throw_bad_function_call[abi:nn180100]();
  return re::internal::Callable<std::function<void ()(re::VertexCacheDeformer *)>,void ()(re::VertexCacheDeformer *)>::~Callable(v3);
}

void *re::internal::Callable<std::function<void ()(re::VertexCacheDeformer *)>,void ()(re::VertexCacheDeformer *)>::~Callable(void *a1)
{
  *a1 = &unk_26E713250;
  std::__function::__value_func<void ()(re::VertexCacheDeformer *)>::~__value_func[abi:nn180100](a1 + 1);
  return a1;
}

void re::internal::Callable<std::function<void ()(re::VertexCacheDeformer *)>,void ()(re::VertexCacheDeformer *)>::~Callable(void *a1)
{
  *a1 = &unk_26E713250;
  std::__function::__value_func<void ()(re::VertexCacheDeformer *)>::~__value_func[abi:nn180100](a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *re::internal::Callable<std::function<void ()(re::VertexCacheDeformer *)>,void ()(re::VertexCacheDeformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return std::function<void ()(re::VertexCacheDeformer *)>::operator()(*(void *)(a1 + 32), *a2);
}

void *re::internal::Callable<std::function<void ()(re::VertexCacheDeformer *)>,void ()(re::VertexCacheDeformer *)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E713250;
  uint64_t v3 = a2 + 1;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
    }
    else
    {
      a2[4] = (*(uint64_t (**)(void, void *))(*(void *)v4 + 16))(*(void *)(a1 + 32), v3);
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

void *re::internal::Callable<std::function<void ()(re::VertexCacheDeformer *)>,void ()(re::VertexCacheDeformer *)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E713250;
  std::__function::__value_func<void ()(re::VertexCacheDeformer *)>::__value_func[abi:nn180100]((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<std::function<void ()(re::VertexCacheDeformer *)>,void ()(re::VertexCacheDeformer *)>::size()
{
  return 40;
}

uint64_t re::FunctionBase<24ul,void ()(re::VertexCacheDeformer *)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(re::VertexCacheDeformer *)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,void ()(re::VertexCacheDeformer *)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(void *a1)
{
  *a1 = &unk_26E7132B8;
  re::FunctionBase<24ul,void ()(re::VertexCacheDeformer *)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(void *a1)
{
  *a1 = &unk_26E7132B8;
  re::FunctionBase<24ul,void ()(re::VertexCacheDeformer *)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *uint64_t v3 = &unk_26E7132B8;
  v3[4] = *(void *)(a1 + 32);
  v3[5] = 0;
  re::FunctionBase<24ul,void ()(re::VertexCacheDeformer *)>::operator=<24ul>((uint64_t)(v3 + 1), v2);
  return v3;
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7132B8;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  return re::FunctionBase<24ul,void ()(re::VertexCacheDeformer *)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t (***std::__function::__func<void re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy(uint64_t a1))(void)
{
  return re::FunctionBase<24ul,void ()(re::VertexCacheDeformer *)>::destroyCallable(a1 + 8);
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy_deallocate(void *a1)
{
  re::FunctionBase<24ul,void ()(re::VertexCacheDeformer *)>::destroyCallable((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  return (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v3);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::VertexCacheDeformer>(std::unique_ptr<re::VertexCacheDeformer,std::function<void ()(re::VertexCacheDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target_type()
{
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_15,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_15>,void ()(re::JiggleDeformer *)>::~__func()
{
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_15,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_15>,void ()(re::JiggleDeformer *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E713338;
  return result;
}

void std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_15,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_15>,void ()(re::JiggleDeformer *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E713338;
}

re *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_15,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_15>,void ()(re::JiggleDeformer *)>::operator()(re *result, re::JiggleDeformer **a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = re::globalAllocators(result)[2];
    re::JiggleDeformer::~JiggleDeformer(v2);
    uint64_t v4 = *(uint64_t (**)(uint64_t, re::JiggleDeformer *))(*(void *)v3 + 40);
    return (re *)v4(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_15,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_15>,void ()(re::JiggleDeformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_15,std::allocator<re::RenderManager::init(re::FrameManager *,re::RenderManagerConfiguration const&,re::JobService *,re::ProfilerManager *,re::ColorManager *,re::VFXManager *,re::ImportGraphicsResources *,BOOL)::$_15>,void ()(re::JiggleDeformer *)>::target_type()
{
}

void re::JiggleDeformer::~JiggleDeformer(re::JiggleDeformer *this)
{
  uint64_t v2 = (void *)*((void *)this + 25);
  if (v2)
  {

    *((void *)this + 25) = 0;
  }
  re::BucketArray<re::JiggleDeformer::DynamicsState,64ul>::deinit((uint64_t)this + 144);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 144);
  re::DataArray<unsigned long>::deinit((uint64_t)this + 80);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 80);
  re::BucketArray<unsigned long,64ul>::deinit((uint64_t)this + 24);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 24);
}

{
  uint64_t vars8;

  re::JiggleDeformer::~JiggleDeformer(this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::BucketArray<re::JiggleDeformer::DynamicsState,64ul>::deinit(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    for (unint64_t i = 0; i != v2; ++i)
    {
      uint64_t v4 = re::BucketArray<re::JiggleDeformer::DynamicsState,64ul>::operator[](a1, i);
      unint64_t v5 = *(void **)(v4 + 8);
      if (v5)
      {

        *(void *)(v4 + 8) = 0;
      }
      if (*(void *)v4)
      {

        *(void *)uint64_t v4 = 0;
      }
    }
  }
  while (*(void *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  uint64_t result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(void *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<re::JiggleDeformer::DynamicsState,64ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 6) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 6)) + 16 * (a2 & 0x3F);
}

uint64_t re::DataArray<unsigned long>::deinit(uint64_t result)
{
  if (*(_DWORD *)(result + 44))
  {
    uint64_t v1 = (void *)result;
    double v2 = re::DataArray<unsigned long>::clear((void *)result);
    if (!v1[2])
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v3 = (void *)v1[4];
    (*(void (**)(void, void, double))(*(void *)*v1 + 40))(*v1, *v3, v2);
    (*(void (**)(void, void))(*(void *)*v1 + 40))(*v1, v3[1]);
    uint64_t result = re::DynamicArray<unsigned long>::deinit((uint64_t)v1);
    *((_DWORD *)v1 + 11) = 0;
  }
  return result;
}

double re::DataArray<unsigned long>::clear(void *a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  re::DataArray<unsigned long>::DataArrayIterator<unsigned long,unsigned long &>::DataArrayIterator((uint64_t)v12, (uint64_t)a1, 0);
  if (*(void **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFFLL || (DWORD2(v12[0]) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      unint64_t v4 = re::DataArray<unsigned long>::DataArrayIterator<unsigned long,unsigned long &>::handle((unsigned __int16 *)v12);
      re::DataArray<unsigned long>::destroy((uint64_t)a1, v4);
      re::DataArray<unsigned long>::DataArrayIterator<unsigned long,unsigned long &>::increment(v12);
    }
    while (*(void **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFF || WORD5(v12[0]) != 0xFFFF);
  }
  uint64_t v7 = a1[2];
  unint64_t v8 = v7 - 1;
  if (v7 != 1)
  {
    uint64_t v9 = 16 * v7;
    do
    {
      if (a1[2] <= v8)
      {
        memset(v12, 0, sizeof(v12));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v10 = a1[4] + v9;
      (*(void (**)(void, void))(*(void *)*a1 + 40))(*a1, *(void *)(v10 - 16));
      (*(void (**)(void, void))(*(void *)*a1 + 40))(*a1, *(void *)(v10 - 8));
      re::DynamicArray<re::DataArray<unsigned long>::ElementBlock>::removeAt((uint64_t)a1, v8);
      v9 -= 16;
      --v8;
    }
    while (v8);
  }
  double result = NAN;
  a1[6] = 0xFFFFFFFF00000000;
  return result;
}

_DWORD *re::DataArray<unsigned long>::destroy(uint64_t a1, unint64_t a2)
{
  int v2 = a2;
  unint64_t v4 = a2 >> 16;
  double result = (_DWORD *)re::DataArray<re::ecs2::Component *>::tryGet(a1, a2 & 0xFFFFFFFF00000000 | ((unint64_t)WORD1(a2) << 16) | (unsigned __int16)a2);
  if (result)
  {
    if (*(void *)(a1 + 16) <= (unint64_t)HIWORD(v2))
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 16 * HIWORD(v2) + 8) + 4 * (unsigned __int16)v2) = 0;
    _DWORD *result = *(_DWORD *)(a1 + 52);
    *(_WORD *)(a1 + 52) = v2;
    *(_WORD *)(a1 + 54) = v4;
    --*(_DWORD *)(a1 + 40);
  }
  return result;
}

unint64_t re::DataArray<unsigned long>::DataArrayIterator<unsigned long,unsigned long &>::handle(unsigned __int16 *a1)
{
  unint64_t v1 = a1[5];
  if (*(void *)(*(void *)a1 + 16) <= v1)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return (v1 << 16) | ((unint64_t)(*(_DWORD *)(*(void *)(*(void *)(*(void *)a1 + 32) + 16 * v1 + 8)
                                                    + 4 * a1[4]) & 0xFFFFFF) << 32) | a1[4];
}

uint64_t re::DynamicArray<re::DataArray<unsigned long>::ElementBlock>::removeAt(uint64_t result, unint64_t a2)
{
  unint64_t v2 = *(void *)(result + 16);
  if (v2 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v3 = v2 - 1;
  if (v2 - 1 > a2)
  {
    *(_OWORD *)(*(void *)(result + 32) + 16 * a2) = *(_OWORD *)(*(void *)(result + 32) + 16 * v2 - 16);
    uint64_t v3 = *(void *)(result + 16) - 1;
  }
  *(void *)(result + 16) = v3;
  ++*(_DWORD *)(result + 24);
  return result;
}

uint64_t re::DataArray<unsigned long>::DataArrayIterator<unsigned long,unsigned long &>::DataArrayIterator(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)a1 = a2;
  if ((a3 & 1) != 0 || !*(_DWORD *)(a2 + 40))
  {
    *(_DWORD *)(a1 + 8) = -1;
  }
  else
  {
    *(_DWORD *)(a1 + 8) = 0;
    if (!*(void *)(a2 + 16))
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (!**(_DWORD **)(*(void *)(a2 + 32) + 8)) {
      re::DataArray<unsigned long>::DataArrayIterator<unsigned long,unsigned long &>::increment((_WORD *)a1);
    }
  }
  return a1;
}

_WORD *re::DataArray<unsigned long>::DataArrayIterator<unsigned long,unsigned long &>::increment(_WORD *result)
{
  uint64_t v1 = *(void *)result;
  unint64_t v2 = *(void *)(*(void *)result + 16);
  unsigned __int16 v3 = v2 - 1;
  unsigned __int16 v4 = result[4];
  unsigned __int16 v5 = result[5];
  while (1)
  {
    ++v4;
    if (v5 < v3 && *(_DWORD *)(v1 + 44) <= v4)
    {
      unsigned __int16 v4 = 0;
      result[5] = ++v5;
    }
    if (v5 == v3 && *(_DWORD *)(v1 + 48) <= v4) {
      break;
    }
    if (v2 <= v5)
    {
      result[4] = v4;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (*(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 16 * v5 + 8) + 4 * v4))
    {
      result[4] = v4;
      return result;
    }
  }
  *((_DWORD *)result + 2) = -1;
  return result;
}

uint64_t re::BucketArray<unsigned long,64ul>::deinit(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    for (unint64_t i = 0; i != v2; ++i)
      re::BucketArray<unsigned long,64ul>::operator[](a1, i);
  }
  while (*(void *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  uint64_t result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(void *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<unsigned long,64ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 6) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 6)) + 8 * (a2 & 0x3F);
}

void *std::__function::__value_func<void ()(re::JiggleDeformer *)>::~__value_func[abi:nn180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(re::JiggleDeformer *)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = v3;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::function<void ()(re::JiggleDeformer *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (a1) {
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v4);
  }
  uint64_t v3 = std::__throw_bad_function_call[abi:nn180100]();
  return re::internal::Callable<std::function<void ()(re::JiggleDeformer *)>,void ()(re::JiggleDeformer *)>::~Callable(v3);
}

void *re::internal::Callable<std::function<void ()(re::JiggleDeformer *)>,void ()(re::JiggleDeformer *)>::~Callable(void *a1)
{
  *a1 = &unk_26E7133C8;
  std::__function::__value_func<void ()(re::JiggleDeformer *)>::~__value_func[abi:nn180100](a1 + 1);
  return a1;
}

void re::internal::Callable<std::function<void ()(re::JiggleDeformer *)>,void ()(re::JiggleDeformer *)>::~Callable(void *a1)
{
  *a1 = &unk_26E7133C8;
  std::__function::__value_func<void ()(re::JiggleDeformer *)>::~__value_func[abi:nn180100](a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void *re::internal::Callable<std::function<void ()(re::JiggleDeformer *)>,void ()(re::JiggleDeformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return std::function<void ()(re::JiggleDeformer *)>::operator()(*(void *)(a1 + 32), *a2);
}

void *re::internal::Callable<std::function<void ()(re::JiggleDeformer *)>,void ()(re::JiggleDeformer *)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7133C8;
  uint64_t v3 = a2 + 1;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      a2[4] = v3;
      (*(void (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
    }
    else
    {
      a2[4] = (*(uint64_t (**)(void, void *))(*(void *)v4 + 16))(*(void *)(a1 + 32), v3);
    }
  }
  else
  {
    a2[4] = 0;
  }
  return a2;
}

void *re::internal::Callable<std::function<void ()(re::JiggleDeformer *)>,void ()(re::JiggleDeformer *)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E7133C8;
  std::__function::__value_func<void ()(re::JiggleDeformer *)>::__value_func[abi:nn180100]((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<std::function<void ()(re::JiggleDeformer *)>,void ()(re::JiggleDeformer *)>::size()
{
  return 40;
}

uint64_t re::FunctionBase<24ul,void ()(re::JiggleDeformer *)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(re::JiggleDeformer *)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,void ()(re::JiggleDeformer *)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(void *a1)
{
  *a1 = &unk_26E713430;
  re::FunctionBase<24ul,void ()(re::JiggleDeformer *)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::~__func(void *a1)
{
  *a1 = &unk_26E713430;
  re::FunctionBase<24ul,void ()(re::JiggleDeformer *)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *uint64_t v3 = &unk_26E713430;
  v3[4] = *(void *)(a1 + 32);
  v3[5] = 0;
  re::FunctionBase<24ul,void ()(re::JiggleDeformer *)>::operator=<24ul>((uint64_t)(v3 + 1), v2);
  return v3;
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E713430;
  a2[4] = *(void *)(a1 + 32);
  a2[5] = 0;
  return re::FunctionBase<24ul,void ()(re::JiggleDeformer *)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t (***std::__function::__func<void re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy(uint64_t a1))(void)
{
  return re::FunctionBase<24ul,void ()(re::JiggleDeformer *)>::destroyCallable(a1 + 8);
}

void std::__function::__func<void re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::destroy_deallocate(void *a1)
{
  re::FunctionBase<24ul,void ()(re::JiggleDeformer *)>::destroyCallable((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  return (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), &v3);
}

uint64_t std::__function::__func<void re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::{lambda(re::Deformer *)#1},std::allocator<void re::DeformationManager::registerDeformer<re::JiggleDeformer>(std::unique_ptr<re::JiggleDeformer,std::function<void ()(re::JiggleDeformer*)>>)::{lambda(re::Deformer *)#1}>,void ()(re::Deformer *)>::target_type()
{
}

double re::HashTable<unsigned long long,re::PersistentShadowState::ClusterInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::DynamicArray<unsigned long>::deinit(v6 + 32);
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 368;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::ShadowPair,re::AllocatedShadowHandle,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 72 * v3;
      do
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0) {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        }
        v4 += 72;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t std::unique_ptr<re::MeshPart,std::function<void ()(re::MeshPart*)>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (!v2) {
    goto LABEL_4;
  }
  uint64_t v3 = a1[4];
  uint64_t v6 = v2;
  if (v3)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, &v6);
LABEL_4:
    std::__function::__value_func<void ()(re::MeshPart *)>::~__value_func[abi:nn180100](a1 + 1);
    return (uint64_t)a1;
  }
  uint64_t v5 = std::__throw_bad_function_call[abi:nn180100]();
  return re::DataArray<re::MeshInstance>::deinit(v5);
}

uint64_t re::DataArray<re::MeshInstance>::deinit(uint64_t result)
{
  if (*(_DWORD *)(result + 44))
  {
    uint64_t v1 = (void *)result;
    double v2 = re::DataArray<re::MeshInstance>::clear((void *)result);
    if (!v1[2])
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v3 = (void *)v1[4];
    (*(void (**)(void, void, double))(*(void *)*v1 + 40))(*v1, *v3, v2);
    (*(void (**)(void, void))(*(void *)*v1 + 40))(*v1, v3[1]);
    double result = re::DynamicArray<unsigned long>::deinit((uint64_t)v1);
    *((_DWORD *)v1 + 11) = 0;
  }
  return result;
}

double re::DataArray<re::MeshInstance>::clear(void *a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  re::DataArray<unsigned long>::DataArrayIterator<unsigned long,unsigned long &>::DataArrayIterator((uint64_t)v12, (uint64_t)a1, 0);
  if (*(void **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFFLL || (DWORD2(v12[0]) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      unint64_t v4 = re::DataArray<unsigned long>::DataArrayIterator<unsigned long,unsigned long &>::handle((unsigned __int16 *)v12);
      re::DataArray<re::MeshInstance>::destroy((uint64_t)a1, v4);
      re::DataArray<unsigned long>::DataArrayIterator<unsigned long,unsigned long &>::increment(v12);
    }
    while (*(void **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFF || WORD5(v12[0]) != 0xFFFF);
  }
  uint64_t v7 = a1[2];
  unint64_t v8 = v7 - 1;
  if (v7 != 1)
  {
    uint64_t v9 = 16 * v7;
    do
    {
      if (a1[2] <= v8)
      {
        memset(v12, 0, sizeof(v12));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v10 = a1[4] + v9;
      (*(void (**)(void, void))(*(void *)*a1 + 40))(*a1, *(void *)(v10 - 16));
      (*(void (**)(void, void))(*(void *)*a1 + 40))(*a1, *(void *)(v10 - 8));
      re::DynamicArray<re::DataArray<unsigned long>::ElementBlock>::removeAt((uint64_t)a1, v8);
      v9 -= 16;
      --v8;
    }
    while (v8);
  }
  double result = NAN;
  a1[6] = 0xFFFFFFFF00000000;
  return result;
}

void re::DataArray<re::MeshInstance>::destroy(uint64_t a1, unint64_t a2)
{
  int v2 = a2;
  unint64_t v4 = a2 >> 16;
  uint64_t v5 = re::DataArray<re::MeshInstance>::tryGet(a1, a2 & 0xFFFFFFFF00000000 | ((unint64_t)WORD1(a2) << 16) | (unsigned __int16)a2);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)v5;
    re::FixedArray<re::SharedPtr<re::MaterialParameterBlock>>::deinit((void *)(v5 + 120));
    re::FixedArray<CoreIKTransform>::deinit(v6 + 12);
    re::StringID::destroyString((re::StringID *)v6);
    if (*(void *)(a1 + 16) <= (unint64_t)HIWORD(v2))
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 16 * HIWORD(v2) + 8) + 4 * (unsigned __int16)v2) = 0;
    *(_DWORD *)uint64_t v6 = *(_DWORD *)(a1 + 52);
    *(_WORD *)(a1 + 52) = v2;
    *(_WORD *)(a1 + 54) = v4;
    --*(_DWORD *)(a1 + 40);
  }
}

uint64_t re::DataArray<re::MeshModel>::deinit(uint64_t result)
{
  if (*(_DWORD *)(result + 44))
  {
    uint64_t v1 = (void *)result;
    double v2 = re::DataArray<re::MeshModel>::clear((void *)result);
    if (!v1[2])
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v3 = (void *)v1[4];
    (*(void (**)(void, void, double))(*(void *)*v1 + 40))(*v1, *v3, v2);
    (*(void (**)(void, void))(*(void *)*v1 + 40))(*v1, v3[1]);
    double result = re::DynamicArray<unsigned long>::deinit((uint64_t)v1);
    *((_DWORD *)v1 + 11) = 0;
  }
  return result;
}

double re::DataArray<re::MeshModel>::clear(void *a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  re::DataArray<unsigned long>::DataArrayIterator<unsigned long,unsigned long &>::DataArrayIterator((uint64_t)v12, (uint64_t)a1, 0);
  if (*(void **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFFLL || (DWORD2(v12[0]) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      unint64_t v4 = re::DataArray<unsigned long>::DataArrayIterator<unsigned long,unsigned long &>::handle((unsigned __int16 *)v12);
      re::DataArray<re::MeshModel>::destroy((uint64_t)a1, v4);
      re::DataArray<unsigned long>::DataArrayIterator<unsigned long,unsigned long &>::increment(v12);
    }
    while (*(void **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFF || WORD5(v12[0]) != 0xFFFF);
  }
  uint64_t v7 = a1[2];
  unint64_t v8 = v7 - 1;
  if (v7 != 1)
  {
    uint64_t v9 = 16 * v7;
    do
    {
      if (a1[2] <= v8)
      {
        memset(v12, 0, sizeof(v12));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v10 = a1[4] + v9;
      (*(void (**)(void, void))(*(void *)*a1 + 40))(*a1, *(void *)(v10 - 16));
      (*(void (**)(void, void))(*(void *)*a1 + 40))(*a1, *(void *)(v10 - 8));
      re::DynamicArray<re::DataArray<unsigned long>::ElementBlock>::removeAt((uint64_t)a1, v8);
      v9 -= 16;
      --v8;
    }
    while (v8);
  }
  double result = NAN;
  a1[6] = 0xFFFFFFFF00000000;
  return result;
}

void re::DataArray<re::MeshModel>::destroy(uint64_t a1, unint64_t a2)
{
  int v2 = a2;
  unint64_t v4 = a2 >> 16;
  uint64_t v5 = (re::MeshModel *)re::DataArray<re::MeshModel>::tryGet(a1, a2 & 0xFFFFFFFF00000000 | ((unint64_t)WORD1(a2) << 16) | (unsigned __int16)a2);
  if (v5)
  {
    re::MeshModel::~MeshModel(v5);
    if (*(void *)(a1 + 16) <= (unint64_t)HIWORD(v2))
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 16 * HIWORD(v2) + 8) + 4 * (unsigned __int16)v2) = 0;
    *uint64_t v6 = *(_DWORD *)(a1 + 52);
    *(_WORD *)(a1 + 52) = v2;
    *(_WORD *)(a1 + 54) = v4;
    --*(_DWORD *)(a1 + 40);
  }
}

uint64_t re::DataArray<re::DeformationStack>::deinit(uint64_t result)
{
  if (*(_DWORD *)(result + 44))
  {
    uint64_t v1 = (void *)result;
    double v2 = re::DataArray<re::DeformationStack>::clear((void *)result);
    if (!v1[2])
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v3 = (void *)v1[4];
    (*(void (**)(void, void, double))(*(void *)*v1 + 40))(*v1, *v3, v2);
    (*(void (**)(void, void))(*(void *)*v1 + 40))(*v1, v3[1]);
    double result = re::DynamicArray<unsigned long>::deinit((uint64_t)v1);
    *((_DWORD *)v1 + 11) = 0;
  }
  return result;
}

double re::DataArray<re::DeformationStack>::clear(void *a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  re::DataArray<unsigned long>::DataArrayIterator<unsigned long,unsigned long &>::DataArrayIterator((uint64_t)v12, (uint64_t)a1, 0);
  if (*(void **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFFLL || (DWORD2(v12[0]) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      unint64_t v4 = re::DataArray<unsigned long>::DataArrayIterator<unsigned long,unsigned long &>::handle((unsigned __int16 *)v12);
      re::DataArray<re::DeformationStack>::destroy((uint64_t)a1, v4);
      re::DataArray<unsigned long>::DataArrayIterator<unsigned long,unsigned long &>::increment(v12);
    }
    while (*(void **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFF || WORD5(v12[0]) != 0xFFFF);
  }
  uint64_t v7 = a1[2];
  unint64_t v8 = v7 - 1;
  if (v7 != 1)
  {
    uint64_t v9 = 16 * v7;
    do
    {
      if (a1[2] <= v8)
      {
        memset(v12, 0, sizeof(v12));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v10 = a1[4] + v9;
      (*(void (**)(void, void))(*(void *)*a1 + 40))(*a1, *(void *)(v10 - 16));
      (*(void (**)(void, void))(*(void *)*a1 + 40))(*a1, *(void *)(v10 - 8));
      re::DynamicArray<re::DataArray<unsigned long>::ElementBlock>::removeAt((uint64_t)a1, v8);
      v9 -= 16;
      --v8;
    }
    while (v8);
  }
  double result = NAN;
  a1[6] = 0xFFFFFFFF00000000;
  return result;
}

uint64_t re::DataArray<re::DeformationStack>::destroy(uint64_t a1, unint64_t a2)
{
  int v2 = a2;
  unint64_t v4 = a2 >> 16;
  uint64_t result = re::DataArray<re::DeformationStack>::tryGet(a1, a2 & 0xFFFFFFFF00000000 | ((unint64_t)WORD1(a2) << 16) | (unsigned __int16)a2);
  if (result)
  {
    uint64_t v6 = (_DWORD *)result;
    for (uint64_t i = 252; i != 192; i -= 6)
      re::FixedArray<CoreIKTransform>::deinit((uint64_t *)&v6[i]);
    for (uint64_t j = 166; j != 6; j -= 16)
      uint64_t result = re::FixedArray<CoreIKTransform>::deinit((uint64_t *)&v6[j]);
    if (*(void *)(a1 + 16) <= (unint64_t)HIWORD(v2))
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 16 * HIWORD(v2) + 8) + 4 * (unsigned __int16)v2) = 0;
    *uint64_t v6 = *(_DWORD *)(a1 + 52);
    *(_WORD *)(a1 + 52) = v2;
    *(_WORD *)(a1 + 54) = v4;
    --*(_DWORD *)(a1 + 40);
  }
  return result;
}

uint64_t re::DataArray<re::DeformationStack>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (WORD1(a2) < v2
    && ((unsigned __int16)(v2 - 1) != WORD1(a2) ? (unsigned int v3 = *(_DWORD *)(a1 + 44)) : (unsigned int v3 = *(_DWORD *)(a1 + 48)),
        (unsigned __int16)a2 < v3
     && ((uint64_t v4 = *(void *)(a1 + 32),
          (int v5 = *(_DWORD *)(*(void *)(v4 + 16 * WORD1(a2) + 8) + 4 * (unsigned __int16)a2)) != 0)
       ? (BOOL v6 = v5 == (HIDWORD(a2) & 0xFFFFFF))
       : (BOOL v6 = 0),
         v6)))
  {
    return *(void *)(v4 + 16 * WORD1(a2)) + 1032 * (unsigned __int16)a2;
  }
  else
  {
    return 0;
  }
}

uint64_t re::MaterialParameterBlock::MaterialParameterBlock(re::MaterialParameterBlock *this, const re::MaterialParameterBlock *a2)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *((void *)this + 3) = 0;
  *(void *)this = &unk_26E7027B0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 0;
  bzero((char *)this + 176, 0x2ECuLL);
  *(void *)((char *)this + 924) = 0x7FFFFFFFLL;
  *((unsigned char *)this + 936) = 0;
  *((unsigned char *)this + 948) = 0;
  *((void *)this + 121) = 0;
  *((void *)this + 123) = 0xFFFFFFFFFFFFFFFLL;
  *((void *)this + 124) = 0;
  *((void *)this + 125) = 0xFFFFFFFFFFFFFFFLL;
  return re::MaterialParameterBlock::operator=((uint64_t)this, (uint64_t)a2);
}

uint64_t re::MaterialParameterBlock::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  re::MaterialParameterBlock::disconnectFromTextureHandles((void *)a1);
  re::DynamicArray<BOOL>::operator=(a1 + 24, (uint64_t *)(a2 + 24));
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a2 + 64);
    if (*(void *)(a1 + 64))
    {
      int v5 = (void *)(a1 + 64);
      if (v4)
      {
        re::DynamicArray<re::TextureHandle>::copy(v5, a2 + 64);
        ++*(_DWORD *)(a1 + 88);
      }
      else
      {
        re::DynamicArray<re::TextureHandle>::clear((uint64_t)v5);
      }
    }
    else if (v4)
    {
      unint64_t v6 = *(void *)(a2 + 80);
      *(void *)(a1 + 64) = v4;
      re::DynamicArray<re::TextureHandle>::setCapacity((void *)(a1 + 64), v6);
      ++*(_DWORD *)(a1 + 88);
      re::DynamicArray<re::TextureHandle>::copy((void *)(a1 + 64), a2 + 64);
    }
    uint64_t v7 = *(void *)(a2 + 104);
    if (*(void *)(a1 + 104))
    {
      unint64_t v8 = (void *)(a1 + 104);
      if (v7)
      {
        re::DynamicArray<re::BufferSlice>::copy(v8, a2 + 104);
        ++*(_DWORD *)(a1 + 128);
      }
      else
      {
        re::DynamicArray<re::RenderFrameEvent>::clear((uint64_t)v8);
      }
    }
    else if (v7)
    {
      unint64_t v9 = *(void *)(a2 + 120);
      *(void *)(a1 + 104) = v7;
      re::DynamicArray<re::BufferSlice>::setCapacity((void *)(a1 + 104), v9);
      ++*(_DWORD *)(a1 + 128);
      re::DynamicArray<re::BufferSlice>::copy((void *)(a1 + 104), a2 + 104);
    }
    uint64_t v10 = *(void *)(a2 + 144);
    if (*(void *)(a1 + 144))
    {
      unsigned __int8 v11 = (void *)(a1 + 144);
      if (v10)
      {
        re::DynamicArray<NS::SharedPtr<MTL::ArgumentDescriptor>>::copy(v11, a2 + 144);
        ++*(_DWORD *)(a1 + 168);
      }
      else
      {
        re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::clear((uint64_t)v11);
      }
    }
    else if (v10)
    {
      unint64_t v12 = *(void *)(a2 + 160);
      *(void *)(a1 + 144) = v10;
      re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)(a1 + 144), v12);
      ++*(_DWORD *)(a1 + 168);
      re::DynamicArray<NS::SharedPtr<MTL::ArgumentDescriptor>>::copy((void *)(a1 + 144), a2 + 144);
    }
    re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::copy((_anonymous_namespace_ *)(a1 + 184), (uint64_t *)(a2 + 184));
    re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::copy((_anonymous_namespace_ *)(a1 + 248), (uint64_t *)(a2 + 248));
    re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::copy((_anonymous_namespace_ *)(a1 + 312), (uint64_t *)(a2 + 312));
    re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::copy((_anonymous_namespace_ *)(a1 + 376), (uint64_t *)(a2 + 376));
    re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::copy((_anonymous_namespace_ *)(a1 + 440), (uint64_t *)(a2 + 440));
    re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::copy((_anonymous_namespace_ *)(a1 + 504), (uint64_t *)(a2 + 504));
    re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::copy((_anonymous_namespace_ *)(a1 + 568), (uint64_t *)(a2 + 568));
    re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::copy((_anonymous_namespace_ *)(a1 + 632), (uint64_t *)(a2 + 632));
    re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::copy((_anonymous_namespace_ *)(a1 + 696), (uint64_t *)(a2 + 696));
    re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::copy((_anonymous_namespace_ *)(a1 + 760), (uint64_t *)(a2 + 760));
  }
  re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::operator=(a1 + 888, a2 + 888);
  *(void *)(a1 + 968) = *(void *)(a2 + 968);
  if (*(unsigned char *)(a1 + 936) || *(unsigned char *)(a2 + 936))
  {
    if (!*(unsigned char *)(a1 + 936) || *(unsigned char *)(a2 + 936))
    {
      if (!*(unsigned char *)(a1 + 936) && *(unsigned char *)(a2 + 936)) {
        *(unsigned char *)(a1 + 936) = 1;
      }
      *(void *)(a1 + 937) = *(void *)(a2 + 937);
    }
    else
    {
      *(unsigned char *)(a1 + 936) = 0;
    }
  }
  if (*(unsigned char *)(a1 + 948) || *(unsigned char *)(a2 + 948))
  {
    if (!*(unsigned char *)(a1 + 948) || *(unsigned char *)(a2 + 948))
    {
      if (!*(unsigned char *)(a1 + 948) && *(unsigned char *)(a2 + 948)) {
        *(unsigned char *)(a1 + 948) = 1;
      }
      uint64_t v13 = *(void *)(a2 + 952);
      *(_DWORD *)(a1 + 960) = *(_DWORD *)(a2 + 960);
      *(void *)(a1 + 952) = v13;
    }
    else
    {
      *(unsigned char *)(a1 + 948) = 0;
    }
  }
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(a1 + 992), *(void *)(a2 + 992));
  *(void *)(a1 + 1000) = *(void *)(a2 + 1000);
  v26[0] = a1 + 312;
  unint64_t v14 = *(void *)(a1 + 328);
  if (v14 >= 0x10)
  {
    uint64_t v15 = 0;
    uint64_t v16 = *(void *)(a1 + 312);
    unint64_t v17 = v14 >> 4;
    while (1)
    {
      unsigned __int16 v18 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v16 + v15)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v26[1] = (unsigned __int16)~v18;
      if (v18 != 0xFFFF) {
        break;
      }
      v15 += 16;
      if (!--v17) {
        return a1;
      }
    }
    uint64_t v19 = __clz(__rbit64((unsigned __int16)~v18)) + v15;
    for (i = v19; i != -1; uint64_t v19 = i)
    {
      uint64_t v20 = *(void *)(v26[0] + 8);
      unint64_t v21 = *(unsigned int *)(v20 + 16 * v19 + 8);
      unint64_t v22 = *(void *)(a1 + 80);
      if (v22 <= v21)
      {
        uint64_t v28 = 0;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v37 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v29 = 136315906;
        uint64_t v30 = "operator[]";
        __int16 v31 = 1024;
        int v32 = 789;
        __int16 v33 = 2048;
        unint64_t v34 = v21;
        __int16 v35 = 2048;
        unint64_t v36 = v22;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v23 = *(void *)(a1 + 96) + 16 * v21;
      uint64_t v25 = *(void *)(v20 + 16 * v19);
      re::TextureHandle::startTrackingMaterialParameterBlock(v23, a1, &v25);
      uint64_t v25 = 0;
      re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v26);
    }
  }
  return a1;
}

re::MaterialParameterBlock *re::MaterialParameterBlock::MaterialParameterBlock(re::MaterialParameterBlock *this, re::RenderManager *a2)
{
  *((void *)this + 3) = 0;
  *(void *)this = &unk_26E7027B0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 0;
  bzero((char *)this + 176, 0x2ECuLL);
  *(void *)((char *)this + 924) = 0x7FFFFFFFLL;
  *((unsigned char *)this + 936) = 0;
  *((unsigned char *)this + 948) = 0;
  *((void *)this + 121) = a2;
  *((void *)this + 123) = 0xFFFFFFFFFFFFFFFLL;
  *((void *)this + 124) = 0;
  *((void *)this + 125) = 0xFFFFFFFFFFFFFFFLL;
  return this;
}

void *re::MaterialParameterBlock::disconnectFromTextureHandles(void *this)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  v13[0] = this + 39;
  unint64_t v1 = this[41];
  if (v1 >= 0x10)
  {
    uint64_t v2 = (uint64_t)this;
    uint64_t v3 = 0;
    uint64_t v4 = this[39];
    unint64_t v5 = v1 >> 4;
    while (1)
    {
      unsigned __int16 v6 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v4 + v3)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v13[1] = (unsigned __int16)~v6;
      if (v6 != 0xFFFF) {
        break;
      }
      v3 += 16;
      if (!--v5) {
        return this;
      }
    }
    uint64_t v7 = __clz(__rbit64((unsigned __int16)~v6)) + v3;
    for (i = v7; i != -1; uint64_t v7 = i)
    {
      uint64_t v8 = *(void *)(v13[0] + 8);
      unint64_t v9 = *(unsigned int *)(v8 + 16 * v7 + 8);
      unint64_t v10 = *(void *)(v2 + 80);
      if (v10 <= v9)
      {
        uint64_t v15 = 0;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v24 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v16 = 136315906;
        unint64_t v17 = "operator[]";
        __int16 v18 = 1024;
        int v19 = 789;
        __int16 v20 = 2048;
        unint64_t v21 = v9;
        __int16 v22 = 2048;
        unint64_t v23 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v11 = *(void *)(v2 + 96) + 16 * v9;
      uint64_t v12 = *(void *)(v8 + 16 * v7);
      re::TextureHandle::stopTrackingMaterialParameterBlock(v11, v2, &v12);
      uint64_t v12 = 0;
      this = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v13);
    }
  }
  return this;
}

void re::MaterialParameterBlock::deinit(re::MaterialParameterBlock *this)
{
  re::MaterialParameterBlock::disconnectFromTextureHandles(this);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 24);
  re::DynamicArray<re::TextureHandle>::deinit((uint64_t)this + 64);
  re::DynamicArray<re::BufferSlice>::deinit((uint64_t)this + 104);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)this + 144);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 184);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 248);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 312);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 376);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 440);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 504);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 568);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 632);
  re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::deinit((uint64_t)this + 696);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 760);
  re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)this + 111);
  *((void *)this + 121) = 0;
  uint64_t v2 = *((void *)this + 124);
  if (v2)
  {

    *((void *)this + 124) = 0;
  }
  *((void *)this + 125) = 0xFFFFFFFFFFFFFFFLL;
}

uint64_t re::MaterialParameterBlock::clear(re::MaterialParameterBlock *this)
{
  re::MaterialParameterBlock::disconnectFromTextureHandles(this);
  *((void *)this + 5) = 0;
  ++*((_DWORD *)this + 12);
  re::DynamicArray<re::TextureHandle>::clear((uint64_t)this + 64);
  re::DynamicArray<re::RenderFrameEvent>::clear((uint64_t)this + 104);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::clear((uint64_t)this + 144);
  re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::clear((void *)this + 23);
  re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::clear((void *)this + 31);
  re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::clear((void *)this + 39);
  re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::clear((void *)this + 47);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::clear((void *)this + 55);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::clear((void *)this + 63);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::clear((void *)this + 71);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::clear((void *)this + 79);
  re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::clear((uint64_t)this + 696);
  re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::clear((void *)this + 95);
  re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear((uint64_t)this + 888);
  uint64_t result = re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated(this);
  if (result) {
    uint64_t result = re::MaterialParameterTableDelta::encodeClear(*((re::MaterialParameterTableDelta **)this + 122));
  }
  *((void *)this + 125) = 0xFFFFFFFFFFFFFFFLL;
  if (*((unsigned char *)this + 948)) {
    *((unsigned char *)this + 948) = 0;
  }
  if (*((unsigned char *)this + 936)) {
    *((unsigned char *)this + 936) = 0;
  }
  return result;
}

void re::DynamicArray<re::TextureHandle>::clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2)
  {
    uint64_t v3 = *(re::TextureHandle **)(a1 + 32);
    uint64_t v4 = 16 * v2;
    do
    {
      re::TextureHandle::invalidate(v3);
      uint64_t v3 = (re::TextureHandle *)((char *)v3 + 16);
      v4 -= 16;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated(re::MaterialParameterBlock *this)
{
  uint64_t v2 = *((void *)this + 121);
  uint64_t v3 = *(void *)(v2 + 104);
  if (v3
    && (re::DrawingManager::checkDeltasCanBeEnqueuedOrDropDelta_115383182<re::PbrParameterDelta>(*(re::DrawingManager **)(v2 + 104), *((void *)this + 122)) & 1) != 0)
  {
    uint64_t v4 = *(void *)(*((void *)this + 121) + 136);
    uint64_t v5 = *(void *)(v4 + 40);
    uint64_t v6 = *(void *)(v4 + 48);
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFLL;
    uint64_t v8 = *((void *)this + 123) & 0xFFFFFFFFFFFFFFFLL;
    if (v8 == 0xFFFFFFFFFFFFFFFLL)
    {
      if (v7 == 0xFFFFFFFFFFFFFFFLL) {
        return 1;
      }
    }
    else if (v7 != 0xFFFFFFFFFFFFFFFLL && v8 == v7)
    {
      return 1;
    }
    *((void *)this + 123) = v6 & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)v5 << 60);
    re::MaterialParameterBlock::createMaterialParameterTableIfNeeded(this, &v12);
    *((void *)this + 122) = re::DrawingManager::addRenderFrameDeltaForNextFrame<re::MaterialParameterTableDelta,re::MaterialParameterTable>(v3, &v12);
    if (v12) {

    }
    return 1;
  }
  *((void *)this + 122) = 0;
  uint64_t v9 = *((void *)this + 124);
  if (!v9) {
    return 0;
  }

  uint64_t result = 0;
  *((void *)this + 124) = 0;
  return result;
}

unint64_t re::MaterialParameterBlock::handle@<X0>(re::MaterialParameterBlock *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)a1 + 23, a2);
  if (v6 != -1)
  {
    uint64_t v7 = *((void *)a1 + 24) + 16 * v6;
    LOWORD(v8) = *(_WORD *)(v7 + 8);
    __int16 v9 = *(unsigned __int8 *)(v7 + 10);
    unint64_t result = re::MaterialParameterBlock::keysHash(a1);
    char v11 = *(unsigned char *)(v7 + 11);
    char v12 = 9;
    goto LABEL_10;
  }
  if (re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find((void *)a1 + 55, a2) != -1)
  {
    unint64_t result = re::MaterialParameterBlock::keysHash(a1);
    LOWORD(v8) = 0;
    __int16 v9 = 0;
    char v11 = 0;
    char v12 = 25;
    goto LABEL_10;
  }
  uint64_t v13 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)a1 + 39, a2);
  if (v13 != -1)
  {
    int v8 = *(_DWORD *)(*((void *)a1 + 40) + 16 * v13 + 8);
    unint64_t result = re::MaterialParameterBlock::keysHash(a1);
    char v11 = 0;
    char v12 = 10;
LABEL_7:
    __int16 v9 = 1;
    goto LABEL_10;
  }
  if (re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find((void *)a1 + 71, a2) != -1)
  {
    unint64_t result = re::MaterialParameterBlock::keysHash(a1);
    LOWORD(v8) = 0;
    __int16 v9 = 0;
    char v11 = 0;
    char v12 = 26;
    goto LABEL_10;
  }
  uint64_t v14 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)a1 + 31, a2);
  if (v14 != -1)
  {
    int v8 = *(_DWORD *)(*((void *)a1 + 32) + 16 * v14 + 8);
    unint64_t result = re::MaterialParameterBlock::keysHash(a1);
    char v11 = 0;
    char v12 = 11;
    goto LABEL_7;
  }
  if (re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find((void *)a1 + 63, a2) != -1)
  {
    unint64_t result = re::MaterialParameterBlock::keysHash(a1);
    LOWORD(v8) = 0;
    __int16 v9 = 0;
    char v11 = 0;
    char v12 = 27;
    goto LABEL_10;
  }
  uint64_t v15 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)a1 + 47, a2);
  if (v15 != -1)
  {
    int v8 = *(_DWORD *)(*((void *)a1 + 48) + 16 * v15 + 8);
    unint64_t result = re::MaterialParameterBlock::keysHash(a1);
    char v11 = 0;
    char v12 = 12;
    goto LABEL_7;
  }
  if (re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find((void *)a1 + 79, a2) == -1)
  {
    LOWORD(v8) = 0;
    __int16 v9 = 0;
    char v12 = 0;
    unint64_t result = 0;
    char v11 = 0;
  }
  else
  {
    unint64_t result = re::MaterialParameterBlock::keysHash(a1);
    LOWORD(v8) = 0;
    __int16 v9 = 0;
    char v11 = 0;
    char v12 = 28;
  }
LABEL_10:
  *(void *)a3 = *a2;
  *(_WORD *)(a3 + 8) = v8;
  *(_WORD *)(a3 + 1ArcSharedObject::ArcSharedObject(this, 0) = v9;
  *(unsigned char *)(a3 + 12) = v12;
  *(void *)(a3 + 16) = result;
  *(unsigned char *)(a3 + 24) = v11;
  return result;
}

unint64_t re::MaterialParameterBlock::keysHash(re::MaterialParameterBlock *this)
{
  unint64_t v1 = (*((void *)this + 76) + (*((void *)this + 60) << 6) + (*((void *)this + 60) >> 2) - 0x61C8864680B583E9) ^ *((void *)this + 60);
  unint64_t v2 = (*((void *)this + 68) + (v1 << 6) + (v1 >> 2) - 0x61C8864680B583E9) ^ v1;
  unint64_t v3 = (*((void *)this + 84) + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  unint64_t v4 = (*((void *)this + 28) + (v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9) ^ v3;
  unint64_t v5 = (*((void *)this + 44) + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9) ^ v4;
  unint64_t v6 = (*((void *)this + 36) + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9) ^ v5;
  return (*((void *)this + 52) + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583E9) ^ v6;
}

unint64_t re::MaterialParameterBlock::handle@<X0>(re::MaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  if (a2)
  {
    uint64_t v3 = *a2;
    if (*a2)
    {
      char v4 = a2[1];
      if (v4)
      {
        unint64_t v5 = a2 + 2;
        do
        {
          uint64_t v3 = 31 * v3 + v4;
          int v6 = *(unsigned __int8 *)v5++;
          char v4 = v6;
        }
        while (v6);
      }
      v3 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v3 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v8 = v3;
  return re::MaterialParameterBlock::handle(this, &v8, a3);
}

uint64_t re::MaterialParameterBlock::colorGamut3FValue(uint64_t a1, uint64_t a2)
{
  return *(void *)re::ShaderGraphMaterial::getConstant(a1, a2);
}

void *re::MaterialParameterBlock::colorGamut4FValue@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result = (void *)re::ShaderGraphMaterial::getConstant(a1, a2);
  uint64_t v6 = result[1];
  uint64_t v7 = *(void *)(a1 + 968);
  if (v7)
  {
    uint64_t v7 = *(void *)(v7 + 152);
    if (v7) {
      LOBYTE(v7) = *(unsigned char *)v7;
    }
  }
  *(void *)a3 = *result;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = v7;
  return result;
}

re::TextureHandle *re::MaterialParameterBlock::textureHandleValue@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, re::TextureHandle *a3@<X8>)
{
  unint64_t v3 = *(unsigned __int16 *)(a2 + 8);
  if (*(void *)(a1 + 80) <= v3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  char v4 = (const re::TextureHandle *)(*(void *)(a1 + 96) + 16 * v3);
  return re::TextureHandle::TextureHandle(a3, v4);
}

uint64_t re::MaterialParameterBlock::bufferValue(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int16 *)(a2 + 8);
  if (*(void *)(a1 + 120) <= v2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 136) + 16 * v2;
}

id re::MaterialParameterBlock::samplerValue@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = *(unsigned __int16 *)(a2 + 8);
  if (*(void *)(a1 + 160) <= v4)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  id result = *(id *)(*(void *)(a1 + 176) + 8 * v4);
  *a3 = result;
  return result;
}

void re::MaterialParameterBlock::bindingValue(re *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  switch(*((unsigned char *)a2 + 12) & 7)
  {
    case 1:
      *(void *)long long buf = *a2;
      uint64_t v6 = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find((void *)a1 + 55, (uint64_t *)buf);
      uint64_t v7 = *((void *)a1 + 56);
      goto LABEL_8;
    case 2:
      *(void *)long long buf = *a2;
      uint64_t v6 = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find((void *)a1 + 71, (uint64_t *)buf);
      uint64_t v7 = *((void *)a1 + 72);
      goto LABEL_8;
    case 3:
      *(void *)long long buf = *a2;
      uint64_t v6 = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find((void *)a1 + 63, (uint64_t *)buf);
      uint64_t v7 = *((void *)a1 + 64);
      goto LABEL_8;
    case 4:
      *(void *)long long buf = *a2;
      uint64_t v6 = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find((void *)a1 + 79, (uint64_t *)buf);
      uint64_t v7 = *((void *)a1 + 80);
LABEL_8:
      uint64_t v9 = v7 + 40 * v6;
      *(_DWORD *)a3 = *(_DWORD *)(v9 + 8);
      *(void *)(a3 + 8) = *(void *)(v9 + 16);
      *(unsigned char *)(a3 + 16) = *(unsigned char *)(v9 + 24);
      *(void *)(a3 + 24) = *(void *)(v9 + 32);
      break;
    default:
      uint64_t v8 = *re::graphicsLogObjects(a1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = *a2;
        if (*a2 == 0x7FFFFFFFFFFFFFFFLL)
        {
          char v11 = 0;
        }
        else if (v10)
        {
          char v11 = re::WeakStringID::debugStr(void)const::msg;
          snprintf(re::WeakStringID::debugStr(void)const::msg, 0x50uLL, "%llu", v10);
        }
        else
        {
          char v11 = "";
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v11;
        _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "Attempted to get a binding from an invalid handle %s", buf, 0xCu);
      }
      *(_DWORD *)a3 = 3;
      re::StringID::invalid((re::StringID *)buf);
      *(void *)(a3 + 8) = *(void *)buf >> 1;
      re::StringID::destroyString((re::StringID *)buf);
      *(unsigned char *)(a3 + 16) = 0;
      re::StringID::invalid((re::StringID *)buf);
      *(void *)(a3 + 24) = *(void *)buf >> 1;
      re::StringID::destroyString((re::StringID *)buf);
      break;
  }
}

void re::MaterialParameterBlock::removeParameter(re::MaterialParameterBlock *this, const char *a2)
{
  if (a2)
  {
    uint64_t v3 = *a2;
    if (*a2)
    {
      char v4 = a2[1];
      if (v4)
      {
        unint64_t v5 = a2 + 2;
        do
        {
          uint64_t v3 = 31 * v3 + v4;
          int v6 = *(unsigned __int8 *)v5++;
          char v4 = v6;
        }
        while (v6);
      }
      v3 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v3 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v16 = v3;
  re::MaterialParameterBlock::handle(this, &v16, (uint64_t)&v13);
  if ((v15 & 7) != 0)
  {
    if ((v15 & 0x10) != 0)
    {
      uint64_t v12 = v13;
      re::MaterialParameterBlock::removeBinding((uint64_t *)this, &v12);
    }
    else
    {
      switch(v15 & 7)
      {
        case 1:
          uint64_t v11 = v13;
          re::MaterialParameterBlock::removeConstant((uint64_t *)this, &v11, v14);
          break;
        case 2:
          uint64_t v10 = v13;
          re::MaterialParameterBlock::removeTexture((uint64_t)this, &v10);
          break;
        case 3:
          uint64_t v9 = v13;
          re::MaterialParameterBlock::removeBuffer((uint64_t *)this, &v9);
          break;
        case 4:
          uint64_t v8 = v13;
          re::MaterialParameterBlock::removeSampler((uint64_t *)this, &v8);
          break;
        default:
          re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Trying to remove a paramter which exists but has an invalid type.", "!\"Unreachable code\"", "removeParameter", 423);
          _os_crash();
          __break(1u);
          JUMPOUT(0x233C71E84);
      }
    }
  }
}

re *re::MaterialParameterBlock::removeBinding(uint64_t *a1, uint64_t *a2)
{
  uint64_t v14 = *a2;
  id result = (re *)re::MaterialParameterBlock::handle((re::MaterialParameterBlock *)a1, &v14, (uint64_t)v15);
  uint64_t v14 = 0;
  if ((v16 & 7) != 0 && (v16 & 0x10) != 0)
  {
    int v6 = (v16 & 7) - 1;
    switch(v16 & 7)
    {
      case 1:
        uint64_t v7 = a1 + 55;
        goto LABEL_12;
      case 2:
        uint64_t v7 = a1 + 71;
        goto LABEL_12;
      case 3:
        uint64_t v7 = a1 + 63;
        goto LABEL_12;
      case 4:
        uint64_t v7 = a1 + 79;
LABEL_12:
        re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::remove(v7, a2);
        break;
      default:
        uint64_t v8 = *re::graphicsLogObjects(result);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t v13 = 0;
          _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "Invalid parameter type", v13, 2u);
        }
        break;
    }
    id result = (re *)re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated((re::MaterialParameterBlock *)a1);
    if (result)
    {
      switch(v6)
      {
        case 0:
          uint64_t v9 = a1[122] + 216;
          goto LABEL_19;
        case 1:
          uint64_t v9 = a1[122] + 296;
          goto LABEL_19;
        case 2:
          uint64_t v9 = a1[122] + 256;
          goto LABEL_19;
        case 3:
          uint64_t v9 = a1[122] + 336;
LABEL_19:
          uint64_t v10 = *a2;
          unint64_t v11 = *(void *)(v9 + 16);
          if (v11 >= *(void *)(v9 + 8))
          {
            id result = (re *)re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::growCapacity((void *)v9, v11 + 1);
            unint64_t v11 = *(void *)(v9 + 16);
          }
          uint64_t v12 = *(void *)(v9 + 32) + 48 * v11;
          *(void *)uint64_t v12 = v10;
          *(unsigned char *)(v12 + 8) = 0;
          *(void *)(v9 + 16) = v11 + 1;
          ++*(_DWORD *)(v9 + 24);
          break;
        default:
          return result;
      }
    }
  }
  return result;
}

_anonymous_namespace_ *re::MaterialParameterBlock::removeConstant(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v7 = *a2;
  re::removeNameMappedConstant(&v7, a1 + 23, a1 + 3, a3);
  uint64_t v6 = *a2;
  uint64_t v7 = 0;
  return re::MaterialParameterBlock::addRemoveConstantDelta((re::MaterialParameterBlock *)a1, &v6);
}

void re::MaterialParameterBlock::removeTexture(uint64_t a1, uint64_t *a2)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  unint64_t v5 = (uint64_t *)(a1 + 312);
  uint64_t v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 312), a2);
  if (v6 != -1)
  {
    unint64_t v7 = *(unsigned int *)(*(void *)(a1 + 320) + 16 * v6 + 8);
    unint64_t v8 = *(void *)(a1 + 80);
    if (v8 <= v7)
    {
      uint64_t v30 = 0;
      long long v43 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v31 = 136315906;
      int v32 = "operator[]";
      __int16 v33 = 1024;
      int v34 = 789;
      __int16 v35 = 2048;
      unint64_t v36 = v7;
      __int16 v37 = 2048;
      unint64_t v38 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_26;
    }
    uint64_t v9 = *(void *)(a1 + 96) + 16 * v7;
    uint64_t v29 = *a2;
    re::TextureHandle::stopTrackingMaterialParameterBlock(v9, a1, &v29);
  }
  uint64_t v28 = *a2;
  uint64_t v10 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v5, &v28);
  if (v10 == -1) {
    goto LABEL_21;
  }
  uint64_t v11 = *(void *)(a1 + 320) + 16 * v10;
  unsigned int v13 = *(_DWORD *)(v11 + 8);
  uint64_t v12 = (unsigned int *)(v11 + 8);
  unint64_t v2 = v13;
  unint64_t v8 = *(void *)(a1 + 80);
  if (v8 <= v13)
  {
LABEL_26:
    uint64_t v30 = 0;
    long long v43 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v31 = 136315906;
    int v32 = "removeStableAt";
    __int16 v33 = 1024;
    int v34 = 969;
    __int16 v35 = 2048;
    unint64_t v36 = v2;
    __int16 v37 = 2048;
    unint64_t v38 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v8 - 1 > v2)
  {
    uint64_t v14 = *(void *)(a1 + 96);
    uint64_t v15 = v14 + 16 * v2;
    if (v15 + 16 != v14 + 16 * v8)
    {
      uint64_t v16 = 16 * v8 - 16 * v2 - 16;
      do
      {
        uint64_t v17 = v15 + 16;
        re::TextureHandle::operator=((re::TextureHandle *)v15, (re::TextureHandle *)(v15 + 16));
        uint64_t v15 = v17;
        v16 -= 16;
      }
      while (v16);
      unint64_t v8 = *(void *)(a1 + 80);
    }
  }
  re::TextureHandle::invalidate((re::TextureHandle *)(*(void *)(a1 + 96) + 16 * v8 - 16));
  --*(void *)(a1 + 80);
  ++*(_DWORD *)(a1 + 88);
  unsigned int v18 = *v12;
  *(void *)&long long v39 = v5;
  unint64_t v19 = *(void *)(a1 + 328);
  if (v19 >= 0x10)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *v5;
    unint64_t v22 = v19 >> 4;
    while (1)
    {
      unsigned __int16 v23 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v21 + v20)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      *((void *)&v39 + 1) = (unsigned __int16)~v23;
      if (v23 != 0xFFFF) {
        break;
      }
      v20 += 16;
      if (!--v22) {
        goto LABEL_20;
      }
    }
    uint64_t v24 = __clz(__rbit64((unsigned __int16)~v23)) + v20;
    *(void *)&long long v40 = v24;
    if (v24 != -1)
    {
      do
      {
        re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::updateKvpsHash((uint64_t)v5, *(void *)(a1 + 320) + 16 * v24);
        uint64_t v25 = *(void *)(a1 + 320) + 16 * v40;
        unsigned int v26 = *(_DWORD *)(v25 + 8);
        if (v26 >= v18) {
          *(_DWORD *)(v25 + 8) = v26 - 1;
        }
        re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::updateKvpsHash((uint64_t)v5, v25);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v39);
        uint64_t v24 = v40;
      }
      while ((void)v40 != -1);
    }
  }
LABEL_20:
  re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::remove(v5, &v28);
LABEL_21:
  uint64_t v28 = 0;
  if (re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated((re::MaterialParameterBlock *)a1))
  {
    long long v27 = (void *)(*(void *)(a1 + 976) + 136);
    *(void *)&long long v39 = *a2;
    BYTE8(v39) = 0;
    re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::TextureHandle>,true>>::add(v27, (uint64_t)&v39);
    if (BYTE8(v39)) {
      re::TextureHandle::invalidate((re::TextureHandle *)&v40);
    }
  }
}

void re::MaterialParameterBlock::removeBuffer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v8 = *a2;
  re::removeNameMappedParameter<re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>,re::DynamicArray<re::BufferSlice>>(&v8, a1 + 31, (uint64_t)(a1 + 13));
  uint64_t v8 = 0;
  if (re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated((re::MaterialParameterBlock *)a1))
  {
    char v4 = (void *)(a1[122] + 96);
    uint64_t v5 = *a2;
    char v6 = 0;
    re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::BufferSlice>,true>>::add(v4, (uint64_t)&v5);
    if (v6)
    {
      if (v7) {
    }
      }
  }
}

void re::MaterialParameterBlock::removeSampler(uint64_t *a1, uint64_t *a2)
{
  uint64_t v7 = *a2;
  re::removeNameMappedParameter<re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>,re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>>(&v7, a1 + 47, (uint64_t)(a1 + 18));
  uint64_t v7 = 0;
  if (re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated((re::MaterialParameterBlock *)a1))
  {
    uint64_t v4 = *a2;
    char v5 = 0;
    re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<NS::SharedPtr<MTL::SamplerState>>,true>>::add((void *)(a1[122] + 176), (uint64_t)&v4);
    if (v5)
    {
      if (v6) {
    }
      }
  }
}

void *re::MaterialParameterBlock::addConstant(void *a1, void *a2, size_t a3, const void *a4, int a5)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v10 = (_anonymous_namespace_ *)(a1 + 23);
  uint64_t v11 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1 + 23, a2);
  if (v11 == -1)
  {
    uint64_t v12 = a1[5] + 3;
    *(_WORD *)long long buf = v12 & 0xFFFC;
    uint8_t buf[2] = a3;
    buf[3] = a5;
    re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::addNew(v10, a2, (int *)buf);
    unint64_t v13 = (unsigned __int16)v12 & 0xFFFC;
    re::DynamicArray<BOOL>::resize((uint64_t)(a1 + 3), v13 + a3);
    unint64_t v15 = a1[5];
    if (v15 > v13) {
      goto LABEL_12;
    }
    uint64_t v19 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    *(_OWORD *)long long buf = 0u;
    a5 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v20 = 136315906;
    uint64_t v21 = "operator[]";
    __int16 v22 = 1024;
    int v23 = 789;
    __int16 v24 = 2048;
    unint64_t v25 = (unsigned __int16)v12 & 0xFFFC;
    __int16 v26 = 2048;
    unint64_t v27 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  else
  {
    uint64_t v12 = a1[24] + 16 * v11 + 8;
    unint64_t v13 = *re::graphicsLogObjects((re *)v11);
    if (!os_log_type_enabled((os_log_t)v13, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_11;
    }
    if (*a2 != 0x7FFFFFFFFFFFFFFFLL)
    {
      if (*a2)
      {
        uint64_t v14 = re::WeakStringID::debugStr(void)const::msg;
        snprintf(re::WeakStringID::debugStr(void)const::msg, 0x50uLL, "%llu", *a2);
      }
      else
      {
        uint64_t v14 = "";
      }
      goto LABEL_10;
    }
  }
  uint64_t v14 = 0;
LABEL_10:
  *(_DWORD *)long long buf = 136315138;
  *(void *)&uint8_t buf[4] = v14;
  _os_log_impl(&dword_233120000, (os_log_t)v13, OS_LOG_TYPE_DEFAULT, "Warning - trying to create a mutable constant (%s) that already exists. Overwiting with new values.", buf, 0xCu);
LABEL_11:
  unint64_t v13 = *(unsigned __int16 *)v12;
  unint64_t v16 = a1[5];
  if (v16 <= v13)
  {
    uint64_t v19 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    *(_OWORD *)long long buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v20 = 136315906;
    uint64_t v21 = "operator[]";
    __int16 v22 = 1024;
    int v23 = 789;
    __int16 v24 = 2048;
    unint64_t v25 = v13;
    __int16 v26 = 2048;
    unint64_t v27 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_12:
  memcpy((void *)(a1[7] + v13), a4, a3);
  uint64_t v18 = *a2;
  return re::MaterialParameterBlock::addConstantDelta((re::MaterialParameterBlock *)a1, &v18, a3, a4, a5);
}

void re::MaterialParameterBlock::addBinding(void *a1, uint64_t *a2, char *a3, char *a4, uint64_t a5)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v31 = *a2;
  uint64_t v10 = (re *)re::MaterialParameterBlock::handle((re::MaterialParameterBlock *)a1, &v31, (uint64_t)&v32);
  uint64_t v31 = 0;
  if ((v33 & 7) == 0 || (v33 & 0x10) == 0)
  {
    re::StringID::invalid((re::StringID *)buf);
    re::StringID::destroyString((re::StringID *)buf);
    re::StringID::invalid((re::StringID *)buf);
    re::StringID::destroyString((re::StringID *)buf);
    uint64_t v12 = 0;
    int v27 = 1;
    uint64_t v28 = *a2;
    while (1)
    {
      unint64_t v13 = (re *)strcmp(re::s_materialTableIDMappings[v12], a3);
      if (!v13) {
        break;
      }
      if (++v12 == 168)
      {
        LOBYTE(v12) = 0;
        break;
      }
    }
    char v29 = v12;
    if (a4)
    {
      uint64_t v14 = *a4;
      if (*a4)
      {
        char v15 = a4[1];
        if (v15)
        {
          unint64_t v16 = (unsigned __int8 *)(a4 + 2);
          do
          {
            uint64_t v14 = 31 * v14 + v15;
            int v17 = *v16++;
            char v15 = v17;
          }
          while (v17);
        }
        v14 &= ~0x8000000000000000;
      }
    }
    else
    {
      uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t v30 = v14;
    int v22 = a5 - 1;
    switch(v22)
    {
      case 0:
        int v23 = (_anonymous_namespace_ *)(a1 + 55);
        goto LABEL_28;
      case 1:
        int v23 = (_anonymous_namespace_ *)(a1 + 71);
        goto LABEL_28;
      case 2:
        int v23 = (_anonymous_namespace_ *)(a1 + 63);
        goto LABEL_28;
      case 3:
        int v23 = (_anonymous_namespace_ *)(a1 + 79);
LABEL_28:
        re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::addNew(v23, a2, &v27);
        break;
      default:
        __int16 v24 = *re::graphicsLogObjects(v13);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl(&dword_233120000, v24, OS_LOG_TYPE_ERROR, "Invalid parameter type", buf, 2u);
        }
        break;
    }
    if (re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated((re::MaterialParameterBlock *)a1))
    {
      switch(v22)
      {
        case 0:
          unint64_t v25 = (void *)(a1[122] + 216);
          goto LABEL_39;
        case 1:
          unint64_t v25 = (void *)(a1[122] + 296);
          goto LABEL_39;
        case 2:
          unint64_t v25 = (void *)(a1[122] + 256);
          goto LABEL_39;
        case 3:
          unint64_t v25 = (void *)(a1[122] + 336);
LABEL_39:
          *(void *)long long buf = *a2;
          uint8_t buf[8] = 1;
          *(_DWORD *)((char *)&v36 + 2) = v27;
          uint64_t v38 = v28;
          char v39 = v29;
          uint64_t v40 = v30;
          re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::add(v25, (uint64_t)buf);
          break;
        default:
          return;
      }
    }
  }
  else
  {
    uint64_t v18 = *re::graphicsLogObjects(v10);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = *a2;
      if (*a2 == 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v21 = 0;
      }
      else if (v20)
      {
        uint64_t v21 = re::WeakStringID::debugStr(void)const::msg;
        snprintf(re::WeakStringID::debugStr(void)const::msg, 0x50uLL, "%llu", v20);
      }
      else
      {
        uint64_t v21 = "";
      }
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = v21;
      __int16 v35 = 2080;
      unint64_t v36 = a3;
      __int16 v37 = 2080;
      uint64_t v38 = (uint64_t)a4;
      _os_log_impl(&dword_233120000, v18, OS_LOG_TYPE_DEFAULT, "Warning - trying to create a mutable binding (%s) that already exists. Overwiting with new values (%s, %s).", buf, 0x20u);
    }
    re::MaterialParameterBlock::setBinding(v26, a3, a1, &v32, a4, a5);
  }
}

void *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::add(void *this, uint64_t a2)
{
  uint64_t v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  uint64_t v5 = v3[4];
  uint64_t v6 = v5 + 48 * v4;
  *(void *)uint64_t v6 = *(void *)a2;
  int v7 = *(unsigned __int8 *)(a2 + 8);
  *(unsigned char *)(v6 + 8) = v7;
  if (v7)
  {
    uint64_t v8 = v5 + 48 * v4;
    *(_DWORD *)(v8 + 16) = *(_DWORD *)(a2 + 16);
    *(void *)(v8 + 24) = *(void *)(a2 + 24);
    *(unsigned char *)(v8 + 32) = *(unsigned char *)(a2 + 32);
    *(void *)(v8 + 4ArcSharedObject::ArcSharedObject(this, 0) = *(void *)(a2 + 40);
  }
  v3[2] = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return this;
}

__n128 re::MaterialParameterBlock::setBinding@<Q0>(uint64_t *__return_ptr a1@<X8>, char *__s2@<X2>, void *a3@<X0>, uint64_t *a4@<X1>, char *a5@<X3>, uint64_t a6@<X4>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  char v11 = *((unsigned char *)a4 + 12);
  if ((v11 & 8) != 0)
  {
    uint64_t v13 = 0;
    int v25 = 1;
    uint64_t v14 = *a4;
    uint64_t v26 = *a4;
    while (1)
    {
      char v15 = (re *)strcmp(re::s_materialTableIDMappings[v13], __s2);
      if (!v15) {
        break;
      }
      if (++v13 == 168)
      {
        LOBYTE(v13) = 0;
        break;
      }
    }
    char v27 = v13;
    if (a5)
    {
      uint64_t v16 = *a5;
      if (*a5)
      {
        char v17 = a5[1];
        if (v17)
        {
          uint64_t v18 = (unsigned __int8 *)(a5 + 2);
          do
          {
            uint64_t v16 = 31 * v16 + v17;
            int v19 = *v18++;
            char v17 = v19;
          }
          while (v19);
        }
        v16 &= ~0x8000000000000000;
      }
    }
    else
    {
      uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t v28 = v16;
    switch(v11 & 7)
    {
      case 1:
        uint64_t v20 = (_anonymous_namespace_ *)(a3 + 55);
        goto LABEL_23;
      case 2:
        uint64_t v20 = (_anonymous_namespace_ *)(a3 + 71);
        goto LABEL_23;
      case 3:
        uint64_t v20 = (_anonymous_namespace_ *)(a3 + 63);
        goto LABEL_23;
      case 4:
        uint64_t v20 = (_anonymous_namespace_ *)(a3 + 79);
LABEL_23:
        *(void *)long long buf = v14;
        re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::addOrReplace(v20, (uint64_t *)buf, (uint64_t)&v25);
        break;
      default:
        uint64_t v21 = *re::graphicsLogObjects(v15);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          if (*a4 == 0x7FFFFFFFFFFFFFFFLL)
          {
            int v22 = 0;
          }
          else if (*a4)
          {
            int v22 = re::WeakStringID::debugStr(void)const::msg;
            snprintf(re::WeakStringID::debugStr(void)const::msg, 0x50uLL, "%llu", *a4);
          }
          else
          {
            int v22 = "";
          }
          *(_DWORD *)long long buf = 136315138;
          *(void *)&uint8_t buf[4] = v22;
          _os_log_error_impl(&dword_233120000, v21, OS_LOG_TYPE_ERROR, "Attempted to set a binding from an invalid handle %s", buf, 0xCu);
        }
        break;
    }
    if (re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated((re::MaterialParameterBlock *)a3))
    {
      switch(*((unsigned char *)a4 + 12) & 7)
      {
        case 1:
          int v23 = (void *)(a3[122] + 216);
          goto LABEL_30;
        case 2:
          int v23 = (void *)(a3[122] + 296);
          goto LABEL_30;
        case 3:
          int v23 = (void *)(a3[122] + 256);
          goto LABEL_30;
        case 4:
          int v23 = (void *)(a3[122] + 336);
LABEL_30:
          *(void *)long long buf = *a4;
          uint8_t buf[8] = 1;
          int v30 = v25;
          uint64_t v31 = v26;
          char v32 = v27;
          uint64_t v33 = v28;
          re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::add(v23, (uint64_t)buf);
          break;
        default:
          break;
      }
    }
    *a1 = *a4;
    __n128 result = *(__n128 *)(a4 + 1);
    *(__n128 *)(a1 + 1) = result;
    *((unsigned char *)a1 + 24) = *((unsigned char *)a4 + 24);
  }
  else
  {
    uint64_t v24 = *a4;
    result.n128_f64[0] = re::MaterialParameterBlock::setBinding((re::MaterialParameterBlock *)a3, &v24, __s2, (uint64_t)a5, a6, (uint64_t)a1);
  }
  return result;
}

void re::MaterialParameterBlock::addTexture(uint64_t a1, const re::WeakStringID *a2, re::TextureHandle *a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v6 = (_anonymous_namespace_ *)(a1 + 312);
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 312), a2);
  if (v7 == -1)
  {
    LODWORD(buf[0]) = *(unsigned __int8 *)(a1 + 80);
    re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::addNew(v6, a2, (int *)buf);
    re::DynamicArray<re::TextureHandle>::add((_anonymous_namespace_ *)(a1 + 64), a3);
  }
  else
  {
    uint64_t v8 = (unsigned int *)(*(void *)(a1 + 320) + 16 * v7 + 8);
    uint64_t v9 = *re::graphicsLogObjects((re *)v7);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      if (*(void *)a2 == 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v10 = 0;
      }
      else if (*(void *)a2)
      {
        uint64_t v10 = re::WeakStringID::debugStr(void)const::msg;
        snprintf(re::WeakStringID::debugStr(void)const::msg, 0x50uLL, "%llu", *(void *)a2);
      }
      else
      {
        uint64_t v10 = "";
      }
      re::TextureHandle::metalTexture((os_unfair_lock_s **)a3, v18);
      char v11 = *(void **)v18;
      id v12 = objc_msgSend(objc_msgSend(*(id *)v18, sel_label), sel_cStringUsingEncoding_, 4);
      LODWORD(buf[0]) = 136315394;
      *(void *)((char *)buf + 4) = v10;
      WORD6(buf[0]) = 2080;
      *(void *)((char *)buf + 14) = v12;
      _os_log_impl(&dword_233120000, v9, OS_LOG_TYPE_DEFAULT, "Warning - trying to create a mutable texture (%s) that already exists. Overwiting with new value (%s).", (uint8_t *)buf, 0x16u);
      if (v11) {
    }
      }
    unint64_t v13 = *v8;
    unint64_t v14 = *(void *)(a1 + 80);
    if (v14 <= v13)
    {
      v17[1] = 0;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v18 = 136315906;
      *(void *)&float32x4_t v18[4] = "operator[]";
      __int16 v19 = 1024;
      int v20 = 789;
      __int16 v21 = 2048;
      unint64_t v22 = v13;
      __int16 v23 = 2048;
      unint64_t v24 = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    char v15 = (re::TextureHandle *)(*(void *)(a1 + 96) + 16 * v13);
    v17[0] = *(void *)a2;
    re::TextureHandle::stopTrackingMaterialParameterBlock((uint64_t)v15, a1, v17);
    re::TextureHandle::operator=(v15, a3);
  }
  uint64_t v16 = *(void *)a2;
  re::TextureHandle::startTrackingMaterialParameterBlock((uint64_t)a3, a1, &v16);
  re::MaterialParameterBlock::enqueueTextureValueChangedDelta((re::MaterialParameterBlock *)a1, a2, a3);
}

void re::MaterialParameterBlock::enqueueTextureValueChangedDelta(re::MaterialParameterBlock *this, const re::WeakStringID *a2, const re::TextureHandle *a3)
{
  if (*((void *)this + 121)
    && re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated(this))
  {
    uint64_t v6 = (void *)(*((void *)this + 122) + 136);
    uint64_t v7 = *(void *)a2;
    char v8 = 1;
    re::TextureHandle::TextureHandle((re::TextureHandle *)v9, a3);
    re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::TextureHandle>,true>>::add(v6, (uint64_t)&v7);
    if (v8) {
      re::TextureHandle::invalidate((re::TextureHandle *)v9);
    }
  }
}

void *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::TextureHandle>,true>>::add(void *this, uint64_t a2)
{
  uint64_t v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::TextureHandle>,true>>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  uint64_t v5 = v3[4] + 32 * v4;
  *(void *)uint64_t v5 = *(void *)a2;
  int v6 = *(unsigned __int8 *)(a2 + 8);
  *(unsigned char *)(v5 + 8) = v6;
  if (v6)
  {
    *(void *)(v5 + 16) = 0;
    *(void *)(v5 + 24) = 0;
    uint64_t v7 = (void *)(v5 + 16);
    if (*(void *)(a2 + 24))
    {
      uint64_t v8 = *(void *)(a2 + 16);
      if (v8)
      {
        *uint64_t v7 = v8;
        v7[1] = *(void *)(a2 + 24);
        *(void *)(a2 + 24) = 0;
      }
    }
    unint64_t v4 = v3[2];
  }
  v3[2] = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return this;
}

void re::MaterialParameterBlock::addBuffer(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  int v6 = (_anonymous_namespace_ *)(a1 + 248);
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 248), a2);
  if (v7 == -1)
  {
    *(_DWORD *)long long buf = *(unsigned __int8 *)(a1 + 120);
    re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::addNew(v6, a2, (int *)buf);
    re::DynamicArray<re::BufferSlice>::add((_anonymous_namespace_ *)(a1 + 104), a3);
  }
  else
  {
    uint64_t v8 = (unsigned int *)(*(void *)(a1 + 256) + 16 * v7 + 8);
    uint64_t v9 = *re::graphicsLogObjects((re *)v7);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      if (*a2 == 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v10 = 0;
      }
      else if (*a2)
      {
        uint64_t v10 = re::WeakStringID::debugStr(void)const::msg;
        snprintf(re::WeakStringID::debugStr(void)const::msg, 0x50uLL, "%llu", *a2);
      }
      else
      {
        uint64_t v10 = "";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v10;
      _os_log_impl(&dword_233120000, v9, OS_LOG_TYPE_DEFAULT, "Warning - trying to create a mutable buffer (%s) that already exists. Overwiting with new value.", buf, 0xCu);
    }
    unint64_t v11 = *v8;
    if (*(void *)(a1 + 120) <= v11)
    {
      long long v20 = 0u;
      long long v21 = 0u;
      *(_OWORD *)uint64_t v18 = 0u;
      long long v19 = 0u;
      *(_OWORD *)long long buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v12 = *(void *)(a1 + 136) + 16 * v11;
    NS::SharedPtr<MTL::Texture>::operator=((void **)v12, (void **)a3);
    *(void *)(v12 + 8) = *(void *)(a3 + 8);
  }
  if (re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated((re::MaterialParameterBlock *)a1))
  {
    uint64_t v13 = *a2;
    id v14 = *(id *)a3;
    char v15 = *(void **)(a3 + 8);
    uint64_t v16 = (void *)(*(void *)(a1 + 976) + 96);
    *(void *)long long buf = v13;
    uint8_t buf[8] = 1;
    v18[0] = v14;
    v18[1] = v15;
    re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::BufferSlice>,true>>::add(v16, (uint64_t)buf);
    if (buf[8] && v18[0]) {

    }
    if (v14) {
  }
    }
}

void *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::BufferSlice>,true>>::add(void *this, uint64_t a2)
{
  uint64_t v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::BufferSlice>,true>>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  uint64_t v5 = v3[4] + 32 * v4;
  *(void *)uint64_t v5 = *(void *)a2;
  int v6 = *(unsigned __int8 *)(a2 + 8);
  *(unsigned char *)(v5 + 8) = v6;
  if (v6)
  {
    this = *(id *)(a2 + 16);
    *(void *)(v5 + 16) = this;
    *(void *)(v5 + 24) = *(void *)(a2 + 24);
    unint64_t v4 = v3[2];
  }
  v3[2] = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return this;
}

uint64_t re::removeNameMappedParameter<re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>,re::DynamicArray<re::BufferSlice>>(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a2, a1);
  if (result != -1)
  {
    uint64_t v7 = a2[1] + 16 * result;
    re::DynamicArray<re::BufferSlice>::removeStableAt(a3, *(unsigned int *)(v7 + 8));
    unsigned int v8 = *(_DWORD *)(v7 + 8);
    re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::mapValues<void re::removeNameMappedParameter<re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>,re::DynamicArray<re::AssetHandle>>(re::WeakStringID,re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false> &,re::DynamicArray<re::AssetHandle> &)::{lambda(re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false> &)#1}>(a2, &v8);
    return re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::remove(a2, a1);
  }
  return result;
}

void re::MaterialParameterBlock::addSampler(uint64_t a1, void *a2, id *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  int v6 = (_anonymous_namespace_ *)(a1 + 376);
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 376), a2);
  if (v7 == -1)
  {
    *(_DWORD *)long long buf = *(unsigned __int8 *)(a1 + 160);
    re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::addNew(v6, a2, (int *)buf);
    re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)(a1 + 144), a3);
  }
  else
  {
    unsigned int v8 = (unsigned int *)(*(void *)(a1 + 384) + 16 * v7 + 8);
    uint64_t v9 = *re::graphicsLogObjects((re *)v7);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      if (*a2 == 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v10 = 0;
      }
      else if (*a2)
      {
        uint64_t v10 = re::WeakStringID::debugStr(void)const::msg;
        snprintf(re::WeakStringID::debugStr(void)const::msg, 0x50uLL, "%llu", *a2);
      }
      else
      {
        uint64_t v10 = "";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v10;
      _os_log_impl(&dword_233120000, v9, OS_LOG_TYPE_DEFAULT, "Warning - trying to create a sampler (%s) that already exists. Overwiting with new value.", buf, 0xCu);
    }
    unint64_t v11 = *v8;
    if (*(void *)(a1 + 160) <= v11)
    {
      long long v18 = 0u;
      long long v19 = 0u;
      *(_OWORD *)uint64_t v16 = 0u;
      long long v17 = 0u;
      *(_OWORD *)long long buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    NS::SharedPtr<MTL::Texture>::operator=((void **)(*(void *)(a1 + 176) + 8 * v11), a3);
  }
  if (re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated((re::MaterialParameterBlock *)a1))
  {
    uint64_t v12 = *a2;
    id v13 = *a3;
    id v14 = (void *)(*(void *)(a1 + 976) + 176);
    *(void *)long long buf = v12;
    uint8_t buf[8] = 1;
    v16[0] = v13;
    re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<NS::SharedPtr<MTL::SamplerState>>,true>>::add(v14, (uint64_t)buf);
    if (buf[8] && v16[0]) {

    }
    if (v13) {
  }
    }
}

void *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<NS::SharedPtr<MTL::SamplerState>>,true>>::add(void *this, uint64_t a2)
{
  uint64_t v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<NS::SharedPtr<MTL::SamplerState>>,true>>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  uint64_t v5 = v3[4];
  uint64_t v6 = v5 + 24 * v4;
  *(void *)uint64_t v6 = *(void *)a2;
  int v7 = *(unsigned __int8 *)(a2 + 8);
  *(unsigned char *)(v6 + 8) = v7;
  if (v7)
  {
    *(void *)(v5 + 24 * v4 + 16) = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = 0;
  }
  v3[2] = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return this;
}

{
  void *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  uint64_t v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<NS::SharedPtr<MTL::SamplerState>>,true>>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  uint64_t v5 = v3[4];
  uint64_t v6 = v5 + 24 * v4;
  *(void *)uint64_t v6 = *(void *)a2;
  int v7 = *(unsigned __int8 *)(a2 + 8);
  *(unsigned char *)(v6 + 8) = v7;
  if (v7)
  {
    unsigned int v8 = v5 + 24 * v4;
    this = *(id *)(a2 + 16);
    *(void *)(v8 + 16) = this;
    unint64_t v4 = v3[2];
  }
  v3[2] = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return this;
}

uint64_t re::removeNameMappedParameter<re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>,re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>>(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a2, a1);
  if (result != -1)
  {
    uint64_t v7 = a2[1] + 16 * result;
    re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::removeStableAt(a3, *(unsigned int *)(v7 + 8));
    unsigned int v8 = *(_DWORD *)(v7 + 8);
    re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::mapValues<void re::removeNameMappedParameter<re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>,re::DynamicArray<re::AssetHandle>>(re::WeakStringID,re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false> &,re::DynamicArray<re::AssetHandle> &)::{lambda(re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false> &)#1}>(a2, &v8);
    return re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::remove(a2, a1);
  }
  return result;
}

void *re::MaterialParameterBlock::addPassTechniqueMapping(re::MaterialParameterBlock *this, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = a3;
  unint64_t v12 = a2;
  uint64_t v10 = a4;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v7 = 0u;
  DWORD1(v9) = 0x7FFFFFFF;
  uint64_t v5 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add((uint64_t)this + 888, &v10, (uint64_t *)&v7);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)&v7);
  re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<unsigned long &>(v5, &v12, &v11);
  uint64_t result = (void *)re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated(this);
  if (result)
  {
    *(void *)&long long v7 = v10;
    *((void *)&v7 + 1) = v12;
    LOBYTE(v8) = 1;
    *((void *)&v8 + 1) = v11;
    LOBYTE(v9) = 0;
    return re::DynamicArray<re::PassTechniqueMappingDelta>::add((void *)(*((void *)this + 122) + 496), (uint64_t)&v7);
  }
  return result;
}

void *re::DynamicArray<re::PassTechniqueMappingDelta>::add(void *this, uint64_t a2)
{
  uint64_t v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::PassTechniqueMappingDelta>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  uint64_t v5 = v3[4];
  uint64_t v6 = v5 + 40 * v4;
  *(_OWORD *)uint64_t v6 = *(_OWORD *)a2;
  int v7 = *(unsigned __int8 *)(a2 + 16);
  *(unsigned char *)(v6 + 16) = v7;
  if (v7) {
    *(void *)(v5 + 40 * v4 + 24) = *(void *)(a2 + 24);
  }
  *(unsigned char *)(v5 + 40 * v4 + 32) = *(unsigned char *)(a2 + 32);
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

uint64_t re::MaterialParameterBlock::removePassTechniqueMapping(re::MaterialParameterBlock *this, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = a3;
  uint64_t v10 = a2;
  uint64_t result = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet((uint64_t)this + 888, &v9);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t result = re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey(result, &v10);
    if (result)
    {
      re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::remove(v5, &v10);
      uint64_t result = re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated(this);
      if (result)
      {
        v6[0] = v9;
        v6[1] = v10;
        char v7 = 0;
        char v8 = 0;
        return (uint64_t)re::DynamicArray<re::PassTechniqueMappingDelta>::add((void *)(*((void *)this + 122) + 496), (uint64_t)v6);
      }
    }
  }
  return result;
}

uint64_t re::MaterialParameterBlock::tryGetPassTechniqueMapping(re::MaterialParameterBlock *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  uint64_t v5 = a2;
  uint64_t result = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet((uint64_t)this + 888, &v4);
  if (result) {
    return re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(result, &v5);
  }
  return result;
}

uint64_t re::MaterialParameterBlock::setDepthBiasState(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = (unsigned char *)(a1 + 948);
  uint64_t result = re::Optional<re::MaterialParameterDepthBiasState>::operator==((float *)(a1 + 948), (float *)a2);
  if ((result & 1) == 0)
  {
    int v6 = *a2;
    if (*v4) {
      BOOL v7 = 0;
    }
    else {
      BOOL v7 = v6 == 0;
    }
    if (!v7)
    {
      if (*v4) {
        BOOL v8 = v6 == 0;
      }
      else {
        BOOL v8 = 0;
      }
      if (v8)
      {
        *uint64_t v4 = 0;
      }
      else
      {
        if (!*v4 && *a2) {
          *uint64_t v4 = 1;
        }
        uint64_t v9 = *(void *)(a2 + 4);
        *(_DWORD *)(a1 + 96ArcSharedObject::ArcSharedObject(this, 0) = *((_DWORD *)a2 + 3);
        *(void *)(a1 + 952) = v9;
      }
    }
    uint64_t result = re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated((re::MaterialParameterBlock *)a1);
    if (result)
    {
      uint64_t v10 = *(void *)(a1 + 976);
      int v11 = *a2;
      if (*(unsigned char *)(v10 + 548) || v11 != 0)
      {
        if (*(unsigned char *)(v10 + 548)) {
          BOOL v13 = v11 == 0;
        }
        else {
          BOOL v13 = 0;
        }
        if (v13)
        {
          *(unsigned char *)(v10 + 548) = 0;
        }
        else
        {
          uint64_t v14 = v10 + 552;
          if (*(unsigned char *)(v10 + 548)) {
            BOOL v15 = 1;
          }
          else {
            BOOL v15 = v11 == 0;
          }
          if (!v15) {
            *(unsigned char *)(v10 + 548) = 1;
          }
          uint64_t v16 = *(void *)(a2 + 4);
          *(_DWORD *)(v14 + 8) = *((_DWORD *)a2 + 3);
          *(void *)uint64_t v14 = v16;
        }
      }
    }
  }
  return result;
}

void re::MaterialParameterBlock::createMaterialParameterTableIfNeeded(re::MaterialParameterBlock *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 124);
  if (v3)
  {
    *a2 = v3;
LABEL_6:
    id v8 = (id)(v3 + 8);
    return;
  }
  re::make::shared::object<re::MaterialParameterTable>(this, &v9);
  uint64_t v6 = *((void *)this + 124);
  *((void *)this + 124) = v9;
  uint64_t v9 = v6;
  if (v6) {

  }
  *((void *)this + 125) = 0xFFFFFFFFFFFFFFFLL;
  uint64_t v3 = *((void *)this + 124);
  *a2 = v3;
  if (v3) {
    goto LABEL_6;
  }
}

uint64_t re::MaterialParameterBlock::deltaSynchronizedMaterialParameterTable(re::MaterialParameterBlock *a1, void *a2)
{
  v13[5] = *MEMORY[0x263EF8340];
  re::MaterialParameterBlock::createMaterialParameterTableIfNeeded(a1, &v12);
  uint64_t v4 = a2[3];
  uint64_t v5 = *((void *)a1 + 125) & 0xFFFFFFFFFFFFFFFLL;
  if ((v4 & 0xFFFFFFFFFFFFFFFLL) == 0xFFFFFFFFFFFFFFFLL)
  {
    if (v5 == 0xFFFFFFFFFFFFFFFLL) {
      goto LABEL_3;
    }
  }
  else if (v5 != 0xFFFFFFFFFFFFFFFLL && (v4 & 0xFFFFFFFFFFFFFFFLL) == v5)
  {
LABEL_3:
    uint64_t v6 = v12;
    if (!v12) {
      return v6;
    }
    goto LABEL_12;
  }
  id v8 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*a2 + 32))(a2, 8, 8);
  uint64_t v9 = v8;
  uint64_t v6 = v12;
  *(void *)id v8 = v12;
  if (v6) {
    id v8 = (re *)(id)(v6 + 8);
  }
  uint64_t v10 = re::globalAllocators(v8)[2];
  v13[0] = &unk_26E7134B0;
  v13[3] = v10;
  v13[4] = v13;
  (*(void (**)(void *, re *, void *))(*a2 + 16))(a2, v9, v13);
  re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)v13);
  *((void *)a1 + 125) = v4;
  if (v6) {
LABEL_12:
  }

  return v6;
}

void *re::MaterialParameterBlock::copyCurrentStateAsMaterialParameterTable(re::Allocator *a1, re::MaterialParameterTableBuilder *a2)
{
  uint64_t v4 = (void *)(*(uint64_t (**)(re::MaterialParameterTableBuilder *, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 1128, 8);
  bzero(v4, 0x468uLL);
  re::MaterialParameterTable::MaterialParameterTable((re::MaterialParameterTable *)v4);
  re::MaterialParameterTableBuilder::build(a2, a1, (const re::MaterialParameterBlock *)v4, v5);
  re::MaterialParameterTable::buildPerFrameDestructor((re::MaterialParameterTable *)v4, a2);
  return v4;
}

void re::MaterialParameterBlock::copyCurrentStateAsMaterialParameterTable(re::MaterialParameterBlock *this@<X0>, const re::MaterialParameterBlock **a2@<X8>)
{
  re::make::shared::object<re::MaterialParameterTable>(this, a2);
  uint64_t v6 = *a2;
}

void *re::MaterialParameterBlock::copyParametersFromArray(re::Allocator *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = (void *)(*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 1128, 8);
  bzero(v6, 0x468uLL);
  re::MaterialParameterTable::MaterialParameterTable((re::MaterialParameterTable *)v6);
  re::MaterialParameterTableBuilder::buildFromParameterBlockArray((uint64_t)a1, a2, a3, (uint64_t)v6);
  re::MaterialParameterTable::buildPerFrameDestructor((re::MaterialParameterTable *)v6, a1);
  return v6;
}

BOOL re::MaterialParameterBlock::isEmpty(re::MaterialParameterBlock *this)
{
  return !*((void *)this + 26)
      && !*((void *)this + 34)
      && !*((void *)this + 42)
      && !*((void *)this + 50)
      && !*((void *)this + 58)
      && !*((void *)this + 66)
      && !*((void *)this + 74)
      && !*((void *)this + 82)
      && !*((_DWORD *)this + 229)
      && !*((unsigned char *)this + 936)
      && !*((unsigned char *)this + 948)
      && !*((void *)this + 98)
      && *((void *)this + 90) == 0;
}

double re::MaterialParameterBlock::setConstant@<D0>(re::MaterialParameterBlock *a1@<X0>, uint64_t *a2@<X1>, size_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v19 = *a2;
  re::MaterialParameterBlock::handle(a1, &v19, a6);
  uint64_t v19 = 0;
  if ((*(unsigned char *)(a6 + 12) & 7) != 0)
  {
    *(void *)&double result = re::MaterialParameterBlock::setConstant(a3, a4, a1, (uint64_t *)a6, a5, (uint64_t)v13).n128_u64[0];
  }
  else
  {
    uint64_t v18 = *a2;
    re::MaterialParameterBlock::addConstant(a1, &v18, a3, a4, a5);
    uint64_t v18 = 0;
    uint64_t v14 = *a2;
    re::MaterialParameterBlock::handle(a1, &v14, (uint64_t)&v15);
    *(void *)a6 = v15;
    double result = *(double *)&v16;
    *(_OWORD *)(a6 + 8) = v16;
    *(unsigned char *)(a6 + 24) = v17;
  }
  return result;
}

__n128 re::MaterialParameterBlock::setConstant@<Q0>(size_t __n@<X2>, void *__s2@<X3>, re::MaterialParameterBlock *a3@<X0>, uint64_t *a4@<X1>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v6 = a5;
  uint64_t v32 = *MEMORY[0x263EF8340];
  if ((*((unsigned char *)a4 + 12) & 8) != 0)
  {
    uint64_t v14 = (__n128 *)(a4 + 1);
    unint64_t v13 = *((unsigned __int16 *)a4 + 4);
    unint64_t v15 = *((void *)a3 + 5);
    if (v15 <= v13)
    {
      v18[1] = 0;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v27 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v19 = 136315906;
      uint64_t v20 = "operator[]";
      __int16 v21 = 1024;
      int v22 = 789;
      __int16 v23 = 2048;
      unint64_t v24 = v13;
      __int16 v25 = 2048;
      unint64_t v26 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    long long v16 = (void *)(*((void *)a3 + 7) + v13);
    if (memcmp(v16, __s2, __n))
    {
      memcpy(v16, __s2, __n);
      v18[0] = *a4;
      re::MaterialParameterBlock::addConstantDelta(a3, v18, __n, __s2, v6);
    }
    *(void *)a6 = *a4;
    __n128 result = *v14;
    *(__n128 *)(a6 + 8) = *v14;
    *(unsigned char *)(a6 + 24) = *((unsigned char *)a4 + 24);
  }
  else
  {
    uint64_t v17 = *a4;
    re::MaterialParameterBlock::setConstant(a3, &v17, __n, __s2, a5);
  }
  return result;
}

void *re::MaterialParameterBlock::addConstantDelta(re::MaterialParameterBlock *a1, void *a2, size_t a3, const void *a4, int a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  __n128 result = (void *)re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated(a1);
  if (result)
  {
    uint64_t v11 = *((void *)a1 + 122);
    uint64_t v12 = *(void *)(v11 + 32) + 3;
    *(void *)&v14[0] = *a2;
    BYTE8(v14[0]) = 1;
    *(_DWORD *)((char *)v14 + 1ArcSharedObject::ArcSharedObject(this, 0) = v12 & 0xFFFC | (a3 << 16) | (a5 << 24);
    re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::ConstantLocation>,true>>::add((_anonymous_namespace_ *)(v11 + 56), (uint64_t)v14);
    re::DynamicArray<BOOL>::resize(*((void *)a1 + 122) + 16, ((unsigned __int16)v12 & 0xFFFC) + a3);
    uint64_t v13 = *((void *)a1 + 122);
    if (*(void *)(v13 + 32) <= (unint64_t)((unsigned __int16)v12 & 0xFFFC))
    {
      memset(v14, 0, sizeof(v14));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    return memcpy((void *)(*(void *)(v13 + 48) + ((unsigned __int16)v12 & 0xFFFC)), a4, a3);
  }
  return result;
}

_anonymous_namespace_ *re::MaterialParameterBlock::addRemoveConstantDelta(re::MaterialParameterBlock *a1, uint64_t *a2)
{
  __n128 result = (_anonymous_namespace_ *)re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated(a1);
  if (result)
  {
    uint64_t v5 = (_anonymous_namespace_ *)(*((void *)a1 + 122) + 56);
    uint64_t v6 = *a2;
    char v7 = 0;
    return re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::ConstantLocation>,true>>::add(v5, (uint64_t)&v6);
  }
  return result;
}

_anonymous_namespace_ *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::ConstantLocation>,true>>::add(_anonymous_namespace_ *result, uint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v5 = *((void *)result + 1);
  unint64_t v4 = *((void *)result + 2);
  if (v4 >= v5)
  {
    unint64_t v6 = v4 + 1;
    if (v5 < v4 + 1)
    {
      if (*(void *)result)
      {
        unint64_t v7 = 2 * v5;
        if (!v5) {
          unint64_t v7 = 8;
        }
        if (v7 <= v6) {
          unint64_t v8 = v6;
        }
        else {
          unint64_t v8 = v7;
        }
        __n128 result = (_anonymous_namespace_ *)re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::ConstantLocation>,true>>::setCapacity(result, v8);
      }
      else
      {
        __n128 result = (_anonymous_namespace_ *)re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::ConstantLocation>,true>>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    unint64_t v4 = *((void *)v3 + 2);
  }
  uint64_t v9 = *((void *)v3 + 4) + 16 * v4;
  *(void *)uint64_t v9 = *(void *)a2;
  int v10 = *(unsigned __int8 *)(a2 + 8);
  *(unsigned char *)(v9 + 8) = v10;
  if (v10)
  {
    *(_DWORD *)(v9 + 1ArcSharedObject::ArcSharedObject(this, 0) = *(_DWORD *)(a2 + 10);
    unint64_t v4 = *((void *)v3 + 2);
  }
  *((void *)v3 + 2) = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return result;
}

double re::MaterialParameterBlock::setBool@<D0>(re::MaterialParameterBlock *this@<X0>, const char *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  char v9 = a3;
  if (a2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      char v5 = a2[1];
      if (v5)
      {
        unint64_t v6 = a2 + 2;
        do
        {
          uint64_t v4 = 31 * v4 + v5;
          int v7 = *(unsigned __int8 *)v6++;
          char v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v10 = v4;
  return re::MaterialParameterBlock::setConstant(this, &v10, 1uLL, &v9, 2, a4);
}

double re::MaterialParameterBlock::setFloat@<D0>(re::MaterialParameterBlock *this@<X0>, const char *a2@<X1>, float a3@<S0>, uint64_t a4@<X8>)
{
  float v9 = a3;
  if (a2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      char v5 = a2[1];
      if (v5)
      {
        unint64_t v6 = a2 + 2;
        do
        {
          uint64_t v4 = 31 * v4 + v5;
          int v7 = *(unsigned __int8 *)v6++;
          char v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v10 = v4;
  return re::MaterialParameterBlock::setConstant(this, &v10, 4uLL, &v9, 1, a4);
}

double re::MaterialParameterBlock::setInt@<D0>(re::MaterialParameterBlock *this@<X0>, const char *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v9 = a3;
  if (a2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      char v5 = a2[1];
      if (v5)
      {
        unint64_t v6 = a2 + 2;
        do
        {
          uint64_t v4 = 31 * v4 + v5;
          int v7 = *(unsigned __int8 *)v6++;
          char v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v10 = v4;
  return re::MaterialParameterBlock::setConstant(this, &v10, 4uLL, &v9, 3, a4);
}

double re::MaterialParameterBlock::setUint@<D0>(re::MaterialParameterBlock *this@<X0>, const char *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v9 = a3;
  if (a2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      char v5 = a2[1];
      if (v5)
      {
        unint64_t v6 = a2 + 2;
        do
        {
          uint64_t v4 = 31 * v4 + v5;
          int v7 = *(unsigned __int8 *)v6++;
          char v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v10 = v4;
  return re::MaterialParameterBlock::setConstant(this, &v10, 4uLL, &v9, 7, a4);
}

double re::MaterialParameterBlock::setVector2F@<D0>(re::MaterialParameterBlock *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = a3;
  if (a2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      char v5 = a2[1];
      if (v5)
      {
        unint64_t v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v4 = 31 * v4 + v5;
          int v7 = *v6++;
          char v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v10 = v4;
  return re::MaterialParameterBlock::setConstant(a1, &v10, 8uLL, &v9, 32, a4);
}

double re::MaterialParameterBlock::setInt2@<D0>(re::MaterialParameterBlock *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  double v9 = a4;
  if (a2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      char v5 = a2[1];
      if (v5)
      {
        unint64_t v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v4 = 31 * v4 + v5;
          int v7 = *v6++;
          char v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v10 = v4;
  return re::MaterialParameterBlock::setConstant(a1, &v10, 8uLL, &v9, 4, a3);
}

double re::MaterialParameterBlock::setUint2@<D0>(re::MaterialParameterBlock *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  double v9 = a4;
  if (a2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      char v5 = a2[1];
      if (v5)
      {
        unint64_t v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v4 = 31 * v4 + v5;
          int v7 = *v6++;
          char v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v10 = v4;
  return re::MaterialParameterBlock::setConstant(a1, &v10, 8uLL, &v9, 8, a3);
}

double re::MaterialParameterBlock::setVector3F@<D0>(re::MaterialParameterBlock *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v10[0] = a3;
  v10[1] = a4;
  if (a2)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      char v6 = a2[1];
      if (v6)
      {
        int v7 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v5 = 31 * v5 + v6;
          int v8 = *v7++;
          char v6 = v8;
        }
        while (v8);
      }
      v5 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v11 = v5;
  return re::MaterialParameterBlock::setConstant(a1, &v11, 0x10uLL, v10, 33, a5);
}

double re::MaterialParameterBlock::setColorGamut3F@<D0>(re::MaterialParameterBlock *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v19[0] = a3;
  v19[1] = a4;
  uint64_t v8 = *((void *)a1 + 121);
  if (v8 && (double v9 = *(unsigned __int8 **)(v8 + 152)) != 0) {
    unsigned int v10 = *v9;
  }
  else {
    unsigned int v10 = 0;
  }
  *(void *)&long long v11 = re::ColorGamut3F::as(v19, v10, 1);
  DWORD2(v11) = v12;
  long long v18 = v11;
  if (a2)
  {
    uint64_t v13 = *a2;
    if (*a2)
    {
      char v14 = a2[1];
      if (v14)
      {
        uint64_t v15 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v13 = 31 * v13 + v14;
          int v16 = *v15++;
          char v14 = v16;
        }
        while (v16);
      }
      v13 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v20 = v13;
  return re::MaterialParameterBlock::setConstant(a1, &v20, 0x10uLL, &v18, 20, a5);
}

double re::MaterialParameterBlock::setColorGamut3F@<D0>(re::MaterialParameterBlock *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v16[0] = a3;
  v16[1] = a4;
  uint64_t v8 = *((void *)a1 + 121);
  if (v8 && (double v9 = *(unsigned __int8 **)(v8 + 152)) != 0) {
    unsigned int v10 = *v9;
  }
  else {
    unsigned int v10 = 0;
  }
  *(void *)&long long v11 = re::ColorGamut3F::as(v16, v10, 1);
  DWORD2(v11) = v12;
  long long v15 = v11;
  uint64_t v14 = *a2;
  return re::MaterialParameterBlock::setConstant(a1, &v14, 0x10uLL, &v15, 20, a5);
}

{
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  long long v11;
  int v12;
  double result;
  long long v14;
  uint64_t v15[2];

  v15[0] = a3;
  v15[1] = a4;
  uint64_t v8 = *((void *)a1 + 121);
  if (v8 && (double v9 = *(unsigned __int8 **)(v8 + 152)) != 0) {
    unsigned int v10 = *v9;
  }
  else {
    unsigned int v10 = 0;
  }
  *(void *)&long long v11 = re::ColorGamut3F::as(v15, v10, 1);
  DWORD2(v11) = v12;
  uint64_t v14 = v11;
  *(void *)&__n128 result = re::MaterialParameterBlock::setConstant(0x10uLL, &v14, a1, a2, 20, a5).n128_u64[0];
  return result;
}

double re::MaterialParameterBlock::setInt3@<D0>(re::MaterialParameterBlock *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  __n128 v9 = a4;
  if (a2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      char v5 = a2[1];
      if (v5)
      {
        char v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v4 = 31 * v4 + v5;
          int v7 = *v6++;
          char v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v10 = v4;
  return re::MaterialParameterBlock::setConstant(a1, &v10, 0x10uLL, &v9, 5, a3);
}

double re::MaterialParameterBlock::setUint3@<D0>(re::MaterialParameterBlock *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  __n128 v9 = a4;
  if (a2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      char v5 = a2[1];
      if (v5)
      {
        char v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v4 = 31 * v4 + v5;
          int v7 = *v6++;
          char v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v10 = v4;
  return re::MaterialParameterBlock::setConstant(a1, &v10, 0x10uLL, &v9, 9, a3);
}

double re::MaterialParameterBlock::setVector4F@<D0>(re::MaterialParameterBlock *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v10[0] = a3;
  v10[1] = a4;
  if (a2)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      char v6 = a2[1];
      if (v6)
      {
        int v7 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v5 = 31 * v5 + v6;
          int v8 = *v7++;
          char v6 = v8;
        }
        while (v8);
      }
      v5 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v11 = v5;
  return re::MaterialParameterBlock::setConstant(a1, &v11, 0x10uLL, v10, 34, a5);
}

double re::MaterialParameterBlock::setColorGamut4F@<D0>(re::MaterialParameterBlock *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((void *)a1 + 121);
  if (v7 && (int v8 = *(unsigned __int8 **)(v7 + 152)) != 0) {
    unsigned int v9 = *v8;
  }
  else {
    unsigned int v9 = 0;
  }
  re::ColorGamut4F::as(a3, v9, 1, (uint64_t)v15);
  long long v16 = *(_OWORD *)v15;
  if (a2)
  {
    uint64_t v10 = *a2;
    if (*a2)
    {
      char v11 = a2[1];
      if (v11)
      {
        int v12 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v10 = 31 * v10 + v11;
          int v13 = *v12++;
          char v11 = v13;
        }
        while (v13);
      }
      v10 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v15[0] = v10;
  return re::MaterialParameterBlock::setConstant(a1, v15, 0x10uLL, &v16, 21, a4);
}

double re::MaterialParameterBlock::setColorGamut4F@<D0>(re::MaterialParameterBlock *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((void *)a1 + 121);
  if (v7 && (int v8 = *(unsigned __int8 **)(v7 + 152)) != 0) {
    unsigned int v9 = *v8;
  }
  else {
    unsigned int v9 = 0;
  }
  re::ColorGamut4F::as(a3, v9, 1, (uint64_t)&v12);
  long long v13 = v12;
  uint64_t v11 = *a2;
  return re::MaterialParameterBlock::setConstant(a1, &v11, 0x10uLL, &v13, 21, a4);
}

{
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  double result;
  long long v11;
  long long __s2;

  uint64_t v7 = *((void *)a1 + 121);
  if (v7 && (int v8 = *(unsigned __int8 **)(v7 + 152)) != 0) {
    unsigned int v9 = *v8;
  }
  else {
    unsigned int v9 = 0;
  }
  re::ColorGamut4F::as(a3, v9, 1, (uint64_t)&v11);
  __s2 = v11;
  *(void *)&__n128 result = re::MaterialParameterBlock::setConstant(0x10uLL, &__s2, a1, a2, 21, a4).n128_u64[0];
  return result;
}

double re::MaterialParameterBlock::setInt4@<D0>(re::MaterialParameterBlock *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  __n128 v9 = a4;
  if (a2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      char v5 = a2[1];
      if (v5)
      {
        char v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v4 = 31 * v4 + v5;
          int v7 = *v6++;
          char v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v10 = v4;
  return re::MaterialParameterBlock::setConstant(a1, &v10, 0x10uLL, &v9, 6, a3);
}

double re::MaterialParameterBlock::setUint4@<D0>(re::MaterialParameterBlock *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  __n128 v9 = a4;
  if (a2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      char v5 = a2[1];
      if (v5)
      {
        char v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v4 = 31 * v4 + v5;
          int v7 = *v6++;
          char v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v10 = v4;
  return re::MaterialParameterBlock::setConstant(a1, &v10, 0x10uLL, &v9, 10, a3);
}

double re::MaterialParameterBlock::setMatrix2x2F@<D0>(re::MaterialParameterBlock *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v10[0] = a3;
  v10[1] = a4;
  if (a2)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      char v6 = a2[1];
      if (v6)
      {
        int v7 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v5 = 31 * v5 + v6;
          int v8 = *v7++;
          char v6 = v8;
        }
        while (v8);
      }
      v5 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v11 = v5;
  return re::MaterialParameterBlock::setConstant(a1, &v11, 0x10uLL, v10, 48, a5);
}

double re::MaterialParameterBlock::setMatrix3x3F@<D0>(re::MaterialParameterBlock *a1@<X0>, char *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      char v5 = a2[1];
      if (v5)
      {
        char v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v4 = 31 * v4 + v5;
          int v7 = *v6++;
          char v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v9 = v4;
  return re::MaterialParameterBlock::setConstant(a1, &v9, 0x30uLL, a3, 49, a4);
}

double re::MaterialParameterBlock::setMatrix4x4F@<D0>(re::MaterialParameterBlock *a1@<X0>, char *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      char v5 = a2[1];
      if (v5)
      {
        char v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v4 = 31 * v4 + v5;
          int v7 = *v6++;
          char v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v9 = v4;
  return re::MaterialParameterBlock::setConstant(a1, &v9, 0x40uLL, a3, 50, a4);
}

double re::MaterialParameterBlock::setTextureHandle@<D0>(re::MaterialParameterBlock *this@<X0>, const char *a2@<X1>, const re::TextureHandle *a3@<X2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      char v5 = a2[1];
      if (v5)
      {
        char v6 = a2 + 2;
        do
        {
          uint64_t v4 = 31 * v4 + v5;
          int v7 = *(unsigned __int8 *)v6++;
          char v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v9 = v4;
  return re::MaterialParameterBlock::setTextureHandle(this, &v9, a3, a4);
}

double re::MaterialParameterBlock::setTextureHandle@<D0>(re::MaterialParameterBlock *a1@<X0>, uint64_t *a2@<X1>, re::TextureHandle *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v15 = *a2;
  re::MaterialParameterBlock::handle(a1, &v15, a4);
  uint64_t v15 = 0;
  if ((*(unsigned char *)(a4 + 12) & 7) != 0)
  {
    *(void *)&double result = re::MaterialParameterBlock::setTextureHandle(a1, a4, a3, (uint64_t)v9).n128_u64[0];
  }
  else
  {
    uint64_t v14 = *a2;
    re::MaterialParameterBlock::addTexture((uint64_t)a1, (const re::WeakStringID *)&v14, a3);
    uint64_t v14 = 0;
    uint64_t v10 = *a2;
    re::MaterialParameterBlock::handle(a1, &v10, (uint64_t)&v11);
    *(void *)a4 = v11;
    double result = *(double *)&v12;
    *(_OWORD *)(a4 + 8) = v12;
    *(unsigned char *)(a4 + 24) = v13;
  }
  return result;
}

__n128 re::MaterialParameterBlock::setTextureHandle@<Q0>(re::MaterialParameterBlock *a1@<X0>, uint64_t a2@<X1>, re::TextureHandle *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)a2;
  v18[0] = *(void *)a2;
  if ((*(unsigned char *)(a2 + 12) & 8) != 0)
  {
    uint64_t v11 = (__n128 *)(a2 + 8);
    unint64_t v10 = *(unsigned __int16 *)(a2 + 8);
    unint64_t v12 = *((void *)a1 + 10);
    if (v12 <= v10)
    {
      v18[1] = 0;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v27 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v19 = 136315906;
      uint64_t v20 = "operator[]";
      __int16 v21 = 1024;
      int v22 = 789;
      __int16 v23 = 2048;
      unint64_t v24 = v10;
      __int16 v25 = 2048;
      unint64_t v26 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    char v13 = (re::TextureHandle *)(*((void *)a1 + 12) + 16 * v10);
    if (*((void *)a3 + 1) != *((void *)v13 + 1))
    {
      uint64_t v17 = v7;
      re::TextureHandle::stopTrackingMaterialParameterBlock((uint64_t)v13, (uint64_t)a1, &v17);
      uint64_t v14 = re::TextureHandle::operator=(v13, a3);
      uint64_t v16 = v7;
      re::TextureHandle::startTrackingMaterialParameterBlock((uint64_t)v14, (uint64_t)a1, &v16);
      re::MaterialParameterBlock::enqueueTextureValueChangedDelta(a1, (const re::WeakStringID *)v18, a3);
      uint64_t v7 = *(void *)a2;
    }
    *(void *)a4 = v7;
    __n128 result = *v11;
    *(__n128 *)(a4 + 8) = *v11;
    *(unsigned char *)(a4 + 24) = v11[1].n128_u8[0];
  }
  else
  {
    uint64_t v15 = v7;
    re::MaterialParameterBlock::setTextureHandle((void *)a4, a1, &v15, a3);
  }
  return result;
}

__n128 re::MaterialParameterBlock::setBuffer@<Q0>(re::MaterialParameterBlock *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  if ((*((unsigned char *)a2 + 12) & 8) != 0)
  {
    uint64_t v11 = (__n128 *)(a2 + 1);
    unint64_t v12 = *((unsigned __int16 *)a2 + 4);
    unint64_t v13 = *((void *)a1 + 15);
    if (v13 <= v12)
    {
      v21[1] = 0;
      long long v33 = 0u;
      long long v34 = 0u;
      *(_OWORD *)long long v31 = 0u;
      long long v32 = 0u;
      long long v30 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v22 = 136315906;
      __int16 v23 = "operator[]";
      __int16 v24 = 1024;
      int v25 = 789;
      __int16 v26 = 2048;
      unint64_t v27 = v12;
      __int16 v28 = 2048;
      unint64_t v29 = v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v14 = *((void *)a1 + 17);
    uint64_t v15 = v14 + 16 * v12;
    if (*(void *)v15 != *(void *)a3
      || *(_DWORD *)(v15 + 8) != *(_DWORD *)(a3 + 8)
      || *(_DWORD *)(v14 + 16 * v12 + 12) != *(_DWORD *)(a3 + 12))
    {
      NS::SharedPtr<MTL::Texture>::operator=((void **)v15, (void **)a3);
      *(void *)(v15 + 8) = *(void *)(a3 + 8);
      if (re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated(a1))
      {
        uint64_t v16 = *a2;
        id v17 = *(id *)a3;
        long long v18 = *(void **)(a3 + 8);
        int v19 = (void *)(*((void *)a1 + 122) + 96);
        *(void *)&long long v30 = v16;
        BYTE8(v3ArcSharedObject::ArcSharedObject(this, 0) = 1;
        v31[0] = v17;
        v31[1] = v18;
        re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::BufferSlice>,true>>::add(v19, (uint64_t)&v30);
        if (BYTE8(v30) && v31[0]) {

        }
        if (v17) {
      }
        }
    }
    *(void *)a4 = *a2;
    __n128 result = *v11;
    *(__n128 *)(a4 + 8) = *v11;
    *(unsigned char *)(a4 + 24) = *((unsigned char *)a2 + 24);
  }
  else
  {
    v21[0] = *a2;
    id v8 = *(id *)a3;
    uint64_t v9 = *(void *)(a3 + 8);
    v20[0] = v8;
    v20[1] = v9;
    re::MaterialParameterBlock::setBuffer(a1, v21, v20);
    if (v8)
    {
    }
  }
  return result;
}

double re::MaterialParameterBlock::setBuffer@<D0>(re::MaterialParameterBlock *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v21 = *a2;
  re::MaterialParameterBlock::handle(a1, &v21, a4);
  uint64_t v21 = 0;
  if ((*(unsigned char *)(a4 + 12) & 7) != 0)
  {
    id v8 = *(id *)a3;
    uint64_t v9 = *(void **)(a3 + 8);
    v13[0] = v8;
    v13[1] = v9;
    *(void *)&double result = re::MaterialParameterBlock::setBuffer(a1, (uint64_t *)a4, (uint64_t)v13, (uint64_t)v14).n128_u64[0];
    v14[0] = 0;
    if (v13[0]) {
  }
    }
  else
  {
    uint64_t v20 = *a2;
    id v11 = *(id *)a3;
    unint64_t v12 = *(void **)(a3 + 8);
    v19[0] = v11;
    v19[1] = v12;
    re::MaterialParameterBlock::addBuffer((uint64_t)a1, &v20, (uint64_t)v19);
    if (v19[0])
    {

      v19[0] = 0;
    }
    uint64_t v20 = 0;
    uint64_t v15 = *a2;
    re::MaterialParameterBlock::handle(a1, &v15, (uint64_t)&v16);
    *(void *)a4 = v16;
    double result = *(double *)&v17;
    *(_OWORD *)(a4 + 8) = v17;
    *(unsigned char *)(a4 + 24) = v18;
  }
  return result;
}

void re::MaterialParameterBlock::setBuffer(re::MaterialParameterBlock *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    uint64_t v7 = *a2;
    if (*a2)
    {
      char v8 = a2[1];
      if (v8)
      {
        uint64_t v9 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v7 = 31 * v7 + v8;
          int v10 = *v9++;
          char v8 = v10;
        }
        while (v10);
      }
      v7 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v14 = v7;
  id v11 = *(id *)a3;
  uint64_t v12 = *(void *)(a3 + 8);
  v13[0] = v11;
  v13[1] = v12;
  re::MaterialParameterBlock::setBuffer(a1, &v14, (uint64_t)v13, a4);
  if (v11)
  {
  }
}

void re::MaterialParameterBlock::setBufferWithBytes(re::MaterialParameterBlock *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  id v12 = *(id *)(*((void *)a1 + 121) + 184);
  id v10 = objc_msgSend(v12, sel_newBufferWithBytes_length_options_, a3, a4, 0);
  uint64_t v16 = *a2;
  id v11 = v10;
  id v13 = v11;
  int v14 = 0;
  unsigned int v15 = objc_msgSend(v10, sel_length);
  re::MaterialParameterBlock::setBuffer(a1, &v16, (uint64_t)&v13, a5);
  if (v11) {

  }
  if (v10) {
}
  }

void re::MaterialParameterBlock::setSampler(re::MaterialParameterBlock *a1@<X0>, char *a2@<X1>, id *a3@<X2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    uint64_t v6 = *a2;
    if (*a2)
    {
      char v7 = a2[1];
      if (v7)
      {
        char v8 = (unsigned __int8 *)(a2 + 2);
        do
        {
          uint64_t v6 = 31 * v6 + v7;
          int v9 = *v8++;
          char v7 = v9;
        }
        while (v9);
      }
      v6 &= ~0x8000000000000000;
    }
  }
  else
  {
    uint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v12 = v6;
  id v10 = *a3;
  id v11 = v10;
  re::MaterialParameterBlock::setSampler(a1, &v12, &v11, a4);
  if (v10)
  {
  }
}

double re::MaterialParameterBlock::setSampler@<D0>(re::MaterialParameterBlock *a1@<X0>, uint64_t *a2@<X1>, id *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v17 = *a2;
  re::MaterialParameterBlock::handle(a1, &v17, a4);
  uint64_t v17 = 0;
  if ((*(unsigned char *)(a4 + 12) & 7) != 0)
  {
    id v9 = *a3;
    re::MaterialParameterBlock::setSampler(v10, a1, a4, &v9);
    v10[0] = 0;
    if (v9) {
  }
    }
  else
  {
    uint64_t v16 = *a2;
    id v15 = *a3;
    re::MaterialParameterBlock::addSampler((uint64_t)a1, &v16, &v15);
    if (v15)
    {

      id v15 = 0;
    }
    uint64_t v16 = 0;
    uint64_t v11 = *a2;
    re::MaterialParameterBlock::handle(a1, &v11, (uint64_t)&v12);
    *(void *)a4 = v12;
    double result = *(double *)&v13;
    *(_OWORD *)(a4 + 8) = v13;
    *(unsigned char *)(a4 + 24) = v14;
  }
  return result;
}

__n128 re::MaterialParameterBlock::setSampler@<Q0>(re::MaterialParameterBlock *a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(a2 + 12) & 8) != 0)
  {
    id v10 = (__n128 *)(a2 + 8);
    unint64_t v11 = *(unsigned __int16 *)(a2 + 8);
    unint64_t v12 = *((void *)a1 + 20);
    if (v12 <= v11)
    {
      v18[1] = 0;
      long long v30 = 0u;
      long long v31 = 0u;
      *(_OWORD *)__int16 v28 = 0u;
      long long v29 = 0u;
      long long v27 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v19 = 136315906;
      uint64_t v20 = "operator[]";
      __int16 v21 = 1024;
      int v22 = 789;
      __int16 v23 = 2048;
      unint64_t v24 = v11;
      __int16 v25 = 2048;
      unint64_t v26 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    long long v13 = (void **)(*((void *)a1 + 22) + 8 * v11);
    if (*v13 != *a3)
    {
      NS::SharedPtr<MTL::Texture>::operator=(v13, a3);
      if (re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated(a1))
      {
        uint64_t v14 = *(void *)a2;
        id v15 = *a3;
        uint64_t v16 = (void *)(*((void *)a1 + 122) + 176);
        *(void *)&long long v27 = v14;
        BYTE8(v27) = 1;
        v28[0] = v15;
        re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<NS::SharedPtr<MTL::SamplerState>>,true>>::add(v16, (uint64_t)&v27);
        if (BYTE8(v27) && v28[0]) {

        }
        if (v15) {
      }
        }
    }
    *(void *)a4 = *(void *)a2;
    __n128 result = *v10;
    *(__n128 *)(a4 + 8) = *v10;
    *(unsigned char *)(a4 + 24) = *(unsigned char *)(a2 + 24);
  }
  else
  {
    v18[0] = *(void *)a2;
    id v8 = *a3;
    id v17 = v8;
    result.n128_f64[0] = re::MaterialParameterBlock::setSampler(a1, v18, &v17, a4);
    if (v8)
    {
    }
  }
  return result;
}

BOOL re::MaterialParameterBlock::bindTextureToSampler(void *a1, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  id v8 = (_anonymous_namespace_ *)(a1 + 47);
  uint64_t v9 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1 + 47, a3);
  if (v9 == -1)
  {
    id v17 = *re::graphicsLogObjects((re *)0xFFFFFFFFFFFFFFFFLL);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *a2;
      if (*a2 == 0x7FFFFFFFFFFFFFFFLL)
      {
        int v19 = 0;
      }
      else if (v18)
      {
        int v19 = re::WeakStringID::debugStr(void)const::msg;
        snprintf(re::WeakStringID::debugStr(void)const::msg, 0x50uLL, "%llu", v18);
      }
      else
      {
        int v19 = "";
      }
      if (*a3 == 0x7FFFFFFFFFFFFFFFLL)
      {
        __int16 v28 = 0;
      }
      else if (*a3)
      {
        __int16 v28 = re::WeakStringID::debugStr(void)const::msg;
        snprintf(re::WeakStringID::debugStr(void)const::msg, 0x50uLL, "%llu", *a3);
      }
      else
      {
        __int16 v28 = "";
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = v19;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v28;
      _os_log_impl(&dword_233120000, v17, OS_LOG_TYPE_DEFAULT, "Attempting to bind texture \"%s\" to non-existent sampler \"%s\", skipping binding.", buf, 0x16u);
    }
  }
  else
  {
    uint64_t v10 = a1[48];
    re::DynamicString::format((re::DynamicString *)"%llu", (re::DynamicString *)buf, a4);
    unint64_t v11 = &buf[9];
    if (buf[8]) {
      unint64_t v11 = *(uint8_t **)&buf[16];
    }
    if (v11)
    {
      uint64_t v12 = (char)*v11;
      if (v12)
      {
        if (buf[8]) {
          long long v13 = (uint8_t *)(*(void *)&buf[16] + 1);
        }
        else {
          long long v13 = &buf[10];
        }
        signed __int8 v14 = *v13;
        if (*v13)
        {
          id v15 = v13 + 1;
          do
          {
            uint64_t v12 = 31 * v12 + v14;
            int v16 = *v15++;
            signed __int8 v14 = v16;
          }
          while (v16);
        }
        v12 &= ~0x8000000000000000;
      }
    }
    else
    {
      uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    v30[0] = v12;
    if (*(void *)buf) {
      BOOL v20 = (buf[8] & 1) == 0;
    }
    else {
      BOOL v20 = 1;
    }
    if (!v20) {
      (*(void (**)(void))(**(void **)buf + 40))();
    }
    uint64_t v21 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v8, v30);
    re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::addOrReplace((_anonymous_namespace_ *)(a1 + 87), a2, v30);
    re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated((re::MaterialParameterBlock *)a1);
    if (v21 == -1)
    {
      unint64_t v22 = *(unsigned int *)(v10 + 16 * v9 + 8);
      *(_DWORD *)long long buf = a1[20];
      re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::addNew(v8, v30, (int *)buf);
      unint64_t v23 = a1[20];
      if (v23 <= v22)
      {
        v30[1] = 0;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v39 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v31 = 136315906;
        *(void *)&v31[4] = "operator[]";
        __int16 v32 = 1024;
        int v33 = 789;
        __int16 v34 = 2048;
        unint64_t v35 = v22;
        __int16 v36 = 2048;
        unint64_t v37 = v23;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(void *)long long v31 = *(id *)(a1[22] + 8 * v22);
      re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)(a1 + 18), (id *)v31);
      if (a1[122])
      {
        uint64_t v24 = v30[0];
        id v25 = *(id *)v31;
        unint64_t v26 = (void *)(a1[122] + 176);
        *(void *)long long buf = v24;
        uint8_t buf[8] = 1;
        *(void *)&uint8_t buf[16] = v25;
        re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<NS::SharedPtr<MTL::SamplerState>>,true>>::add(v26, (uint64_t)buf);
        if (buf[8] && *(void *)&buf[16]) {

        }
        if (v25) {
      }
        }
      if (*(void *)v31) {
    }
      }
    uint64_t v27 = a1[122];
    if (v27)
    {
      *(void *)long long buf = *a2;
      uint8_t buf[8] = 1;
      *(void *)&uint8_t buf[16] = v30[0];
      re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakStringID>,true>>::add((void *)(v27 + 376), (uint64_t)buf);
    }
  }
  return v9 != -1;
}

void *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakStringID>,true>>::add(void *this, uint64_t a2)
{
  uint64_t v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakStringID>,true>>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  uint64_t v5 = v3[4];
  uint64_t v6 = v5 + 24 * v4;
  *(void *)uint64_t v6 = *(void *)a2;
  int v7 = *(unsigned __int8 *)(a2 + 8);
  *(unsigned char *)(v6 + 8) = v7;
  if (v7) {
    *(void *)(v5 + 24 * v4 + 16) = *(void *)(a2 + 16);
  }
  v3[2] = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return this;
}

BOOL re::MaterialParameterBlock::unbindTextureFromSamplers(uint64_t *a1, uint64_t *a2)
{
  BOOL v4 = re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::remove(a1 + 87, a2);
  if (v4
    && re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated((re::MaterialParameterBlock *)a1))
  {
    uint64_t v5 = (void *)(a1[122] + 376);
    uint64_t v7 = *a2;
    char v8 = 0;
    re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakStringID>,true>>::add(v5, (uint64_t)&v7);
  }
  return v4;
}

uint64_t re::MaterialParameterBlock::setUVIndexForTexture(void *a1, uint64_t *a2, int a3)
{
  int v12 = a3;
  uint64_t v6 = (_anonymous_namespace_ *)(a1 + 95);
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1 + 95, a2);
  if (result == -1 || *(_DWORD *)(a1[96] + 16 * result + 8) != a3)
  {
    re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::addOrReplace(v6, a2, &v12);
    uint64_t result = re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated((re::MaterialParameterBlock *)a1);
    if (result)
    {
      char v8 = (void *)(a1[122] + 416);
      uint64_t v9 = *a2;
      char v10 = 1;
      int v11 = v12;
      return (uint64_t)re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<unsigned int>,true>>::add(v8, (uint64_t)&v9);
    }
  }
  return result;
}

void *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<unsigned int>,true>>::add(void *this, uint64_t a2)
{
  uint64_t v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<unsigned int>,true>>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  uint64_t v5 = v3[4] + 16 * v4;
  *(void *)uint64_t v5 = *(void *)a2;
  int v6 = *(unsigned __int8 *)(a2 + 8);
  *(unsigned char *)(v5 + 8) = v6;
  if (v6) {
    *(_DWORD *)(v5 + 12) = *(_DWORD *)(a2 + 12);
  }
  v3[2] = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return this;
}

void *re::MaterialParameterBlock::setSwizzleForTexture(void *a1, uint64_t *a2, int a3)
{
  int v15 = a3;
  uint64_t v11 = *a2;
  uint64_t result = (void *)re::MaterialParameterBlock::handle((re::MaterialParameterBlock *)a1, &v11, (uint64_t)v12);
  uint64_t v11 = 0;
  int v6 = v13 & 7;
  if ((v13 & 7) != 0 && (v6 == 2 || v6 == 1 && v14 == 64))
  {
    re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::addOrReplace((_anonymous_namespace_ *)(a1 + 103), a2, &v15);
    uint64_t result = (void *)re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated((re::MaterialParameterBlock *)a1);
    if (result)
    {
      uint64_t v7 = (void *)(a1[122] + 456);
      uint64_t v8 = *a2;
      char v9 = 1;
      int v10 = v15;
      return re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::mtl::TextureSwizzleChannels>,true>>::add(v7, (uint64_t)&v8);
    }
  }
  return result;
}

uint64_t re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::addOrReplace(_anonymous_namespace_ *a1, void *a2, _DWORD *a3)
{
  uint64_t v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (v6 == -1)
  {
    return re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::internalAdd(a1, a2, a3);
  }
  else
  {
    uint64_t v7 = v6;
    re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::updateKvpsHash((uint64_t)a1, *((void *)a1 + 1) + 16 * v6);
    *(_DWORD *)(*((void *)a1 + 1) + 16 * v7 + 8) = *a3;
    re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::updateKvpsHash((uint64_t)a1, *((void *)a1 + 1) + 16 * v7);
    return *((void *)a1 + 1) + 16 * v7 + 8;
  }
}

void *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::mtl::TextureSwizzleChannels>,true>>::add(void *this, uint64_t a2)
{
  uint64_t v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::mtl::TextureSwizzleChannels>,true>>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  uint64_t v5 = v3[4] + 16 * v4;
  *(void *)uint64_t v5 = *(void *)a2;
  int v6 = *(unsigned __int8 *)(a2 + 8);
  *(unsigned char *)(v5 + 8) = v6;
  if (v6)
  {
    *(_DWORD *)(v5 + 9) = *(_DWORD *)(a2 + 9);
    unint64_t v4 = v3[2];
  }
  v3[2] = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return this;
}

uint64_t re::MaterialParameterBlock::resetSwizzleForTexture(re::MaterialParameterBlock *a1, uint64_t *a2)
{
  uint64_t result = re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::remove((void *)a1 + 103, a2);
  if (result)
  {
    uint64_t result = re::MaterialParameterBlock::ensureThisFrameRenderThreadDeltaIsAllocated(a1);
    if (result)
    {
      uint64_t v5 = *a2;
      char v6 = 0;
      return (uint64_t)re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::mtl::TextureSwizzleChannels>,true>>::add((void *)(*((void *)a1 + 122) + 456), (uint64_t)&v5);
    }
  }
  return result;
}

BOOL re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::remove(void *a1, void *a2)
{
  uint64_t v3 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  uint64_t v4 = v3;
  if (v3 != -1)
  {
    uint64_t v5 = (int8x16_t *)(*a1 + (v3 & 0xFFFFFFFFFFFFFFF0));
    v6.i64[0] = -1;
    v6.i64[1] = -1;
    int8x8_t v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v5, v6), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
    if (v7) {
      char v8 = -1;
    }
    else {
      char v8 = 0x80;
    }
    v5->i8[v3 & 0xF] = v8;
    re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::updateHashes((uint64_t)a1, a1[1] + 16 * v3);
    unint64_t v9 = a1[2];
    *(void *)(a1[1] + 16 * v4) = 0;
    uint64_t v10 = a1[4];
    if (v7) {
      ++v10;
    }
    unint64_t v11 = a1[3] - 1;
    a1[3] = v11;
    a1[4] = v10;
    if (v9 >= 0x11 && v11 < v9 >> 2) {
      re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::resize((uint64_t)a1, 0);
    }
  }
  return v4 != -1;
}

unint64_t re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::addOrReplace(_anonymous_namespace_ *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find(a1, a2);
  if (v6 == -1)
  {
    return re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::internalAdd(a1, a2, (int *)a3);
  }
  else
  {
    uint64_t v7 = 5 * v6;
    re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::updateKvpsHash((uint64_t)a1, (re::WeakParameterBinding *)(*((void *)a1 + 1) + 40 * v6));
    uint64_t v8 = *((void *)a1 + 1) + 8 * v7;
    *(_DWORD *)(v8 + 8) = *(_DWORD *)a3;
    *(void *)(v8 + 16) = *(void *)(a3 + 8);
    *(unsigned char *)(v8 + 24) = *(unsigned char *)(a3 + 16);
    *(void *)(v8 + 32) = *(void *)(a3 + 24);
    return re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::updateKvpsHash((uint64_t)a1, (re::WeakParameterBinding *)v8);
  }
}

double re::MaterialParameterBlock::setBinding@<D0>(re::MaterialParameterBlock *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v19 = *a2;
  re::MaterialParameterBlock::handle(a1, &v19, a6);
  uint64_t v19 = 0;
  if ((*(unsigned char *)(a6 + 12) & 7) != 0)
  {
    re::MaterialParameterBlock::setBinding(v13, (int)a1, a6, a3);
  }
  else
  {
    uint64_t v18 = *a2;
    re::MaterialParameterBlock::addBinding(a1, &v18, a3, a4, a5);
    uint64_t v18 = 0;
    uint64_t v14 = *a2;
    re::MaterialParameterBlock::handle(a1, &v14, (uint64_t)&v15);
    *(void *)a6 = v15;
    double result = *(double *)&v16;
    *(_OWORD *)(a6 + 8) = v16;
    *(unsigned char *)(a6 + 24) = v17;
  }
  return result;
}

void re::MaterialParameterBlock::setBinding(_anonymous_namespace_ *a1@<X0>, const char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v12[0] = 0;
  v12[1] = "";
  uint64_t v13 = v12[0] >> 1;
  re::MaterialParameterBlock::setBinding(a1, &v13, a3, a4, a5, a6);
  re::StringID::destroyString((re::StringID *)v12);
}

void re::internal::Callable<re::MaterialParameterBlock::deltaSynchronizedMaterialParameterTable(re::PerFrameAllocator *)::$_0,void ()(void *)>::~Callable()
{
}

void re::internal::Callable<re::MaterialParameterBlock::deltaSynchronizedMaterialParameterTable(re::PerFrameAllocator *)::$_0,void ()(void *)>::operator()(uint64_t a1, uint64_t **a2)
{
  unint64_t v2 = *a2;
  uint64_t v3 = **a2;
  if (v3)
  {

    *unint64_t v2 = 0;
  }
}

void *re::internal::Callable<re::MaterialParameterBlock::deltaSynchronizedMaterialParameterTable(re::PerFrameAllocator *)::$_0,void ()(void *)>::cloneInto(uint64_t a1, void *a2)
{
  double result = a2;
  *a2 = &unk_26E7134B0;
  return result;
}

void *re::internal::Callable<re::MaterialParameterBlock::deltaSynchronizedMaterialParameterTable(re::PerFrameAllocator *)::$_0,void ()(void *)>::moveInto(uint64_t a1, void *a2)
{
  double result = a2;
  *a2 = &unk_26E7134B0;
  return result;
}

uint64_t re::internal::Callable<re::MaterialParameterBlock::deltaSynchronizedMaterialParameterTable(re::PerFrameAllocator *)::$_0,void ()(void *)>::size()
{
  return 16;
}

void re::DynamicArray<re::TextureHandle>::copy(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  unint64_t v5 = a1[2];
  if (v4 >= v5)
  {
    re::DynamicArray<re::TextureHandle>::setCapacity(a1, *(void *)(a2 + 16));
    int v12 = *(re::TextureHandle **)(a2 + 32);
    uint64_t v13 = a1[2];
    uint64_t v14 = (re::TextureHandle *)a1[4];
    if (v13)
    {
      uint64_t v15 = 16 * v13;
      do
      {
        long long v16 = re::TextureHandle::operator=(v14, v12);
        int v12 = (re::TextureHandle *)((char *)v12 + 16);
        uint64_t v14 = (re::TextureHandle *)((char *)v16 + 16);
        v15 -= 16;
      }
      while (v15);
      uint64_t v14 = (re::TextureHandle *)a1[4];
      uint64_t v13 = a1[2];
      int v12 = *(re::TextureHandle **)(a2 + 32);
    }
    if (v13 != v4)
    {
      char v17 = (re::TextureHandle *)((char *)v12 + 16 * v13);
      uint64_t v18 = (re::TextureHandle *)((char *)v14 + 16 * v13);
      uint64_t v19 = 16 * v4 - 16 * v13;
      do
      {
        BOOL v20 = re::TextureHandle::TextureHandle(v18, v17);
        char v17 = (const re::TextureHandle *)((char *)v17 + 16);
        uint64_t v18 = (re::TextureHandle *)((char *)v20 + 16);
        v19 -= 16;
      }
      while (v19);
    }
  }
  else
  {
    uint64_t v6 = (re::TextureHandle *)a1[4];
    if (v4)
    {
      uint64_t v7 = *(re::TextureHandle **)(a2 + 32);
      uint64_t v8 = 16 * v4;
      do
      {
        unint64_t v9 = re::TextureHandle::operator=(v6, v7);
        uint64_t v7 = (re::TextureHandle *)((char *)v7 + 16);
        uint64_t v6 = (re::TextureHandle *)((char *)v9 + 16);
        v8 -= 16;
      }
      while (v8);
      uint64_t v6 = (re::TextureHandle *)a1[4];
      unint64_t v5 = a1[2];
    }
    if (v4 != v5)
    {
      uint64_t v10 = (re::TextureHandle *)((char *)v6 + 16 * v4);
      uint64_t v11 = 16 * v5 - 16 * v4;
      do
      {
        re::TextureHandle::invalidate(v10);
        uint64_t v10 = (re::TextureHandle *)((char *)v10 + 16);
        v11 -= 16;
      }
      while (v11);
    }
  }
  a1[2] = v4;
}

void re::DynamicArray<re::BufferSlice>::copy(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::BufferSlice>::setCapacity(a1, *(void *)(a2 + 16));
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::BufferSlice *,re::BufferSlice *,re::BufferSlice *,0>(*(void ***)(a2 + 32), (void **)(*(void *)(a2 + 32) + 16 * a1[2]), a1[4]);
    uint64_t v8 = a1[2];
    if (v8 != v4)
    {
      uint64_t v9 = *(void *)(a2 + 32);
      uint64_t v10 = v9 + 16 * v4;
      uint64_t v11 = v9 + 16 * v8;
      int v12 = (void *)(a1[4] + 16 * v8);
      do
      {
        *int v12 = *(id *)v11;
        v12[1] = *(void *)(v11 + 8);
        v11 += 16;
        v12 += 2;
      }
      while (v11 != v10);
    }
  }
  else
  {
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::BufferSlice *,re::BufferSlice *,re::BufferSlice *,0>(*(void ***)(a2 + 32), (void **)(*(void *)(a2 + 32) + 16 * v4), a1[4]);
    uint64_t v5 = a1[2];
    if (v4 != v5)
    {
      uint64_t v6 = (id *)(a1[4] + 16 * v4);
      uint64_t v7 = 16 * v5 - 16 * v4;
      do
      {
        if (*v6)
        {

          *uint64_t v6 = 0;
        }
        v6 += 2;
        v7 -= 16;
      }
      while (v7);
    }
  }
  a1[2] = v4;
}

void **std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::BufferSlice *,re::BufferSlice *,re::BufferSlice *,0>(void **result, void **a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    do
    {
      double result = NS::SharedPtr<MTL::Texture>::operator=((void **)a3, v5);
      *(void *)(a3 + 8) = v5[1];
      v5 += 2;
      a3 += 16;
    }
    while (v5 != a2);
  }
  return result;
}

void *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakParameterBinding>,true>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::TextureHandle>,true>>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::TextureHandle>,true>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::TextureHandle>,true>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::BufferSlice>,true>>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::BufferSlice>,true>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::BufferSlice>,true>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void re::DynamicArray<re::BufferSlice>::removeStableAt(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 - 1 > a2)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = v4 + 16 * a2;
    uint64_t v6 = v4 + 16 * v2;
    if (v5 + 16 != v6)
    {
      do
      {
        NS::SharedPtr<MTL::Texture>::operator=((void **)v5, (void **)(v5 + 16));
        *(void *)(v5 + 8) = *(void *)(v5 + 24);
        uint64_t v7 = v5 + 32;
        v5 += 16;
      }
      while (v7 != v6);
      unint64_t v2 = *(void *)(a1 + 16);
    }
  }
  uint64_t v8 = *(void *)(a1 + 32) + 16 * v2;
  uint64_t v9 = *(void **)(v8 - 16);
  if (v9)
  {

    *(void *)(v8 - 16) = 0;
    unint64_t v2 = *(void *)(a1 + 16);
  }
  *(void *)(a1 + 16) = v2 - 1;
  ++*(_DWORD *)(a1 + 24);
}

void *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<NS::SharedPtr<MTL::SamplerState>>,true>>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<NS::SharedPtr<MTL::SamplerState>>,true>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<NS::SharedPtr<MTL::SamplerState>>,true>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::PassTechniqueMappingDelta>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::PassTechniqueMappingDelta>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::PassTechniqueMappingDelta>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

BOOL re::Optional<re::MaterialParameterDepthBiasState>::operator==(float *a1, float *a2)
{
  int v2 = *(unsigned __int8 *)a2;
  BOOL v3 = (v2 | *(unsigned __int8 *)a1) == 0;
  if (*(unsigned char *)a1) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    return a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
  }
  return v3;
}

void *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakStringID>,true>>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    BOOL v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakStringID>,true>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::WeakStringID>,true>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<unsigned int>,true>>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    BOOL v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<unsigned int>,true>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<unsigned int>,true>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::internalAdd(_anonymous_namespace_ *a1, void *a2, _DWORD *a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::resize((uint64_t)a1, 1);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = v7 >> 4;
  uint64_t v11 = *(void *)a1;
  unint64_t v12 = v9 % v10;
  while (1)
  {
    unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v11 + 16 * v12)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    if (v13 < 0x40) {
      break;
    }
    if (v12 + 1 == v10) {
      unint64_t v12 = 0;
    }
    else {
      ++v12;
    }
    if (v12 == v9 % v10)
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
      _os_crash();
      __break(1u);
      break;
    }
  }
  uint64_t v14 = v11 + 16 * v12;
  BOOL v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(unsigned char *)(v14 + v13) = v9 & 0x7F;
  unint64_t v16 = v13 + 16 * v12;
  LODWORD(v14) = *a3;
  uint64_t v17 = *((void *)a1 + 1) + 16 * v16;
  *(void *)uint64_t v17 = *a2;
  *(_DWORD *)(v17 + 8) = v14;
  uint64_t v18 = *((void *)a1 + 4) - v15;
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v18;
  re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::updateHashes((uint64_t)a1, *((void *)a1 + 1) + 16 * v16);
  return *((void *)a1 + 1) + 16 * v16 + 8;
}

unint64_t re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::updateKvpsHash(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (*(void *)a2 ^ (*(void *)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                           * (*(void *)a2 ^ (*(void *)a2 >> 30))) >> 27));
  unint64_t v4 = v3 ^ (v3 >> 31);
  unint64_t result = re::Hash<re::mtl::TextureSwizzleChannels>::operator()((uint64_t)&v6, (unsigned __int8 *)(a2 + 8));
  *(void *)(a1 + 48) ^= v4 ^ (result + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9);
  return result;
}

void re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::resize(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void *)(a1 + 24) + a2;
  unint64_t v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    unint64_t v5 = 3 * v2;
    unint64_t v6 = v5 << 6;
    uint64_t v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7) {
      unint64_t v4 = v7;
    }
    unint64_t v3 = (v4 << 7) / 0x97;
  }
  re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::doResize(a1, v3);
}

unint64_t re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::updateHashes(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (*(void *)a2 ^ (*(void *)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                           * (*(void *)a2 ^ (*(void *)a2 >> 30))) >> 27));
  unint64_t v4 = v3 ^ (v3 >> 31);
  *(void *)(a1 + 40) ^= v4;
  unint64_t result = re::Hash<re::mtl::TextureSwizzleChannels>::operator()((uint64_t)&v6, (unsigned __int8 *)(a2 + 8));
  *(void *)(a1 + 48) ^= v4 ^ (result + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9);
  return result;
}

void *re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::init(void *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result;
  result[7] = a2;
  unint64_t v4 = 151 * a3;
  unint64_t v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    unint64_t v6 = v5 >> 4;
    unint64_t result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 17 * (v5 & 0x3FFFFFFFFFFFFF0), 16);
    *unint64_t v3 = result;
    if (v4 >= 0x80)
    {
      uint64_t v7 = 0;
      *(void *)&long long v8 = -1;
      *((void *)&v8 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v7++) = v8;
      while (v6 != v7);
      unint64_t result = (void *)*v3;
    }
    v3[1] = &result[2 * v6];
    unint64_t v9 = v3[2];
    if (v9)
    {
      uint64_t v10 = 0;
      for (unint64_t i = 0; i < v9; ++i)
      {
        uint64_t v12 = v3[1] + v10;
        *(void *)uint64_t v12 = 0;
        *(_DWORD *)(v12 + 8) = 84148994;
        unint64_t v9 = v3[2];
        v10 += 16;
      }
    }
  }
  else
  {
    unint64_t v9 = 0;
    void *result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v9;
  return result;
}

void re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::doResize(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 56);
  memset(v22, 0, sizeof(v22));
  re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::init(v22, v4, a2);
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5 >= 0x10)
  {
    uint64_t v6 = 0;
    unint64_t v7 = v5 >> 4;
    while (1)
    {
      unsigned __int16 v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + v6)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      unint64_t v9 = (unsigned __int16)~v8;
      if (v8 != 0xFFFF) {
        break;
      }
      v6 += 16;
      if (!--v7) {
        goto LABEL_7;
      }
    }
    unint64_t v10 = __clz(__rbit64(v9)) + v6;
    while (v10 != -1)
    {
      re::HashBrown<re::WeakStringID,re::mtl::TextureSwizzleChannels,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::mtl::TextureSwizzleChannels>,false>::internalAdd(v22, *(void *)(a1 + 8) + 16 * v10, *(void *)(a1 + 8) + 16 * v10 + 8);
      unint64_t v17 = v10 >> 4;
      unint64_t v5 = *(void *)(a1 + 16);
      if (v10 >> 4 >= v5 >> 4) {
        break;
      }
      unint64_t v18 = __clz(__rbit64((-2 << (v10 & 0xF)) & v9));
      if (v18 >= 0x40)
      {
        uint64_t v19 = 16 * v17;
        unint64_t v20 = ~v17 + (v5 >> 4);
        while (v20)
        {
          unint64_t v9 = (unsigned __int16)~*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + v19 + 16)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
          unint64_t v21 = __clz(__rbit64(v9));
          v19 += 16;
          --v20;
          if (v21 <= 0x3F)
          {
            unint64_t v10 = v21 + v19;
            goto LABEL_15;
          }
        }
        break;
      }
      unint64_t v10 = v18 + (v10 & 0xFFFFFFFFFFFFFFF0);
LABEL_15:
      ;
    }
  }
LABEL_7:
  uint64_t v11 = *((void *)&v22[3] + 1);
  *((void *)&v22[3] + 1) = *(void *)(a1 + 56);
  long long v12 = v22[0];
  long long v13 = v22[1];
  v22[0] = *(_OWORD *)a1;
  *(void *)&v22[1] = v5;
  long long v14 = v22[2];
  long long v15 = *(_OWORD *)(a1 + 40);
  *(void *)(a1 + 48) = *(void *)&v22[3];
  *(void *)(a1 + 56) = v11;
  *(_OWORD *)((char *)&v22[2] + 8) = v15;
  long long v16 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)a1 = v12;
  *(_OWORD *)(a1 + 16) = v13;
  *(_OWORD *)(a1 + 32) = v14;
  *(_OWORD *)((char *)&v22[1] + 8) = v16;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)v22);
}

unint64_t re::Hash<re::mtl::TextureSwizzleChannels>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v2 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * *a2) ^ ((0xBF58476D1CE4E5B9 * *a2) >> 27));
  unint64_t v3 = v2 ^ (v2 >> 31);
  unint64_t v4 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * a2[1]) ^ ((0xBF58476D1CE4E5B9 * a2[1]) >> 27));
  unint64_t v5 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * a2[2]) ^ ((0xBF58476D1CE4E5B9 * a2[2]) >> 27));
  unint64_t v6 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * a2[3]) ^ ((0xBF58476D1CE4E5B9 * a2[3]) >> 27));
  unint64_t v7 = (v4 ^ (v4 >> 31)) + (v3 << 6) + (v3 >> 2);
  return ((((v7 - 0x61C8864680B583E9) ^ v3) << 6)
        + (((v7 - 0x61C8864680B583E9) ^ v3) >> 2)
        + (((v6 ^ (v6 >> 31)) + ((v5 ^ (v5 >> 31)) << 6) + ((v5 ^ (v5 >> 31)) >> 2) - 0x61C8864680B583E9) ^ v5 ^ (v5 >> 31))
        - 0x61C8864680B583E9) ^ (v7 - 0x61C8864680B583E9) ^ v3;
}

void *re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::mtl::TextureSwizzleChannels>,true>>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::mtl::TextureSwizzleChannels>,true>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::Pair<re::WeakStringID,re::Optional<re::mtl::TextureSwizzleChannels>,true>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void re::ArgumentBufferTextureRecord::~ArgumentBufferTextureRecord(id *this)
{
  if (*((unsigned char *)this + 28))
  {
    if (*this)
    {

      *this = 0;
    }
  }
  else
  {
    re::TextureHandle::invalidate((re::TextureHandle *)this);
  }
}

void re::ArgumentBufferTextureRecord::getRenderThreadTexture(id *this@<X0>, void *a2@<X8>)
{
  if (*((unsigned char *)this + 28))
  {
    *a2 = *this;
  }
  else
  {
    re::TextureHandle::metalTexture((os_unfair_lock_s **)this, a2);
  }
}

float32x2_t *re::ColorGamut4F::ColorGamut4F(float32x2_t *a1, CGColorRef color, char a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  a1[2].i8[0] = 0;
  ColorSpace = CGColorGetColorSpace(color);
  Components = (float64x2_t *)CGColorGetComponents(color);
  char v14 = 0;
  if (re::ColorHelpers::getColorGamutFromCGStandardLinearColorSpace(ColorSpace, &v14))
  {
    *a1 = vcvt_f32_f64(*Components);
    float32_t v8 = Components[1].f64[0];
    a1[1].f32[0] = v8;
    float32_t Alpha = CGColorGetAlpha(color);
    a1[1].f32[1] = Alpha;
    a1[2].i8[0] = v14;
  }
  else
  {
    CFStringRef Name = CGColorSpaceGetName(ColorSpace);
    if (re::ColorHelpers::getColorGamutFromCGColorSpaceName(Name, &v14)) {
      a3 = v14;
    }
    if (re::ColorHelpers::getCGColorTransformToGamut(re::ColorGamut)::onceToken != -1) {
      dispatch_once(&re::ColorHelpers::getCGColorTransformToGamut(re::ColorGamut)::onceToken, &__block_literal_global_31);
    }
    CGColorTransformConvertColorComponents();
    a1[2].i8[0] = a3;
    *a1 = vcvt_f32_f64(v15);
    float32_t v11 = v16;
    a1[1].f32[0] = v11;
    float32_t v12 = CGColorGetAlpha(color);
    a1[1].f32[1] = v12;
  }
  return a1;
}

void re::ColorGamut4F::as(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6 = *(unsigned __int8 *)(a1 + 16);
  if (v6 == a2)
  {
    *(_OWORD *)a4 = *(_OWORD *)a1;
    *(_DWORD *)(a4 + 16) = *(_DWORD *)(a1 + 16);
    return;
  }
  char v8 = a2;
  re::ColorHelpers::computeGamutTransformMatrix(v6, a2, (uint64_t)v11);
  float32x4_t v9 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v11[0], *(float *)a1), v11[1], *(float *)(a1 + 4)), v11[2], *(float *)(a1 + 8));
  if ((~a3 & 3) == 0)
  {
    v9.i32[3] = 0;
    float32x4_t v9 = vmaxnmq_f32(v9, (float32x4_t)0);
LABEL_7:
    v9.i32[3] = 0;
    float32x4_t v9 = vminnmq_f32(v9, (float32x4_t)xmmword_2343679C0);
    goto LABEL_9;
  }
  if (a3)
  {
    v9.i32[3] = 0;
    float32x4_t v9 = vmaxnmq_f32(v9, (float32x4_t)0);
    goto LABEL_9;
  }
  if ((a3 & 2) != 0) {
    goto LABEL_7;
  }
LABEL_9:
  int v10 = *(_DWORD *)(a1 + 12);
  *(void *)a4 = v9.i64[0];
  *(_DWORD *)(a4 + 8) = v9.i32[2];
  *(_DWORD *)(a4 + 12) = v10;
  *(unsigned char *)(a4 + 16) = v8;
}

CGColorRef re::ColorGamut4F::createCGColor(float32x2_t *this)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  float64x2_t v1 = vcvtq_f64_f32(this[1]);
  v4[0] = vcvtq_f64_f32(*this);
  v4[1] = v1;
  CGColorSpaceFromWorkingColorGamut = (CGColorSpace *)re::ColorHelpers::getCGColorSpaceFromWorkingColorGamut(this[2].u8[0]);
  return CGColorCreate(CGColorSpaceFromWorkingColorGamut, (const CGFloat *)v4);
}

uint64_t re::ColorGamut3F::as(uint64_t *a1, unsigned int a2, int a3)
{
  if (*((unsigned __int8 *)a1 + 12) == a2) {
    return *a1;
  }
  uint64_t v4 = a1[1];
  uint64_t v5 = *a1;
  int v6 = v4;
  int v7 = 1065353216;
  char v8 = BYTE4(v4);
  re::ColorGamut4F::as((uint64_t)&v5, a2, a3, (uint64_t)&v9);
  return v9;
}

void *re::introspect_ColorGamut(re *this, const re::IntrospectionBase *a2)
{
  int v2 = (int)this;
  {
    if (v9)
    {
      int v10 = re::introspectionAllocator(v9);
      float32_t v11 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 24, 8);
      *(_DWORD *)float32_t v11 = 1;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = "Rec709";
      re::introspect_ColorGamut(BOOL)::enumAttributes = (uint64_t)v11;
      float32_t v12 = re::introspectionAllocator(v11);
      long long v13 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 24, 8);
      *(_DWORD *)long long v13 = 1;
      *((void *)v13 + 1) = 1;
      *((void *)v13 + 2) = "P3D65";
      qword_2687A03E0 = (uint64_t)v13;
      char v14 = re::introspectionAllocator(v13);
      float64x2_t v15 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 24, 8);
      *(_DWORD *)float64x2_t v15 = 1;
      *((void *)v15 + 1) = 2;
      *((void *)v15 + 2) = "ACEScg";
      qword_2687A03E8 = (uint64_t)v15;
      double v16 = re::introspectionAllocator(v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 24, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = 3;
      *(void *)(v17 + 16) = "Rec2020";
      qword_2687A03F0 = v17;
    }
  }
  {
    unint64_t v18 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::introspect_ColorGamut(BOOL)::info, "ColorGamut", 1, 1, 1, 1);
    *(void *)unint64_t v18 = &unk_26E715E00;
    *((void *)v18 + 8) = &re::introspect_ColorGamut(BOOL)::enumTable;
    *((_DWORD *)v18 + 4) = 9;
  }
  if (v2)
  {
    if (re::introspect_ColorGamut(BOOL)::isInitialized) {
      return &re::introspect_ColorGamut(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v20);
    char v3 = re::introspect_ColorGamut(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v20);
    if (v3) {
      return &re::introspect_ColorGamut(BOOL)::info;
    }
    uint64_t v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
    if (re::introspect_ColorGamut(BOOL)::isInitialized)
    {
LABEL_9:
      int v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
      return &re::introspect_ColorGamut(BOOL)::info;
    }
  }
  re::introspect_ColorGamut(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::introspect_ColorGamut(BOOL)::info, a2);
  v19[0] = 0xD480D84AC2E5ELL;
  v19[1] = (uint64_t)"ColorGamut";
  xmmword_2687A0420 = v20;
  re::StringID::destroyString((re::StringID *)v19);
  if ((v2 & 1) == 0) {
    goto LABEL_9;
  }
  return &re::introspect_ColorGamut(BOOL)::info;
}

void *re::allocInfo_ColorGamut3F(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_404, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_404))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF96608, "ColorGamut3F");
    __cxa_guard_release(&_MergedGlobals_404);
  }
  return &unk_26AF96608;
}

void re::initInfo_ColorGamut3F(re *this, re::IntrospectionBase *a2)
{
  v21[0] = 0x31DB7ABF0A5A1BC4;
  v21[1] = "ColorGamut3F";
  re::StringID::destroyString((re::StringID *)v21);
  *((_OWORD *)this + 2) = v22;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF965A8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF965A8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      int v7 = re::introspect_float((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "r";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF965C0 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      float32_t v11 = re::introspect_float((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "g";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x400000002;
      *(_DWORD *)(v12 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF965C8 = v12;
      long long v13 = re::introspectionAllocator((re *)v12);
      float64x2_t v15 = re::introspect_float((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "b";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x800000003;
      *(_DWORD *)(v16 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF965D0 = v16;
      uint64_t v17 = re::introspectionAllocator((re *)v16);
      re::introspect_ColorGamut((re *)1, v18);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "gamut";
      *(void *)(v19 + 16) = &re::introspect_ColorGamut(BOOL)::info;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0xC00000004;
      *(_DWORD *)(v19 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF965D8 = v19;
      __cxa_guard_release(&qword_26AF965A8);
    }
  }
  *((void *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 4;
  *((void *)this + 8) = &qword_26AF965C0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ColorGamut3F>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ColorGamut3F>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ColorGamut3F>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ColorGamut3F>;
  re::IntrospectionRegistry::add(this, v3);
  long long v20 = v22;
}

void re::internal::defaultConstruct<re::ColorGamut3F>(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)((char *)a3 + 5) = 0;
  *a3 = 0;
}

void *re::internal::defaultConstructV2<re::ColorGamut3F>(void *result)
{
  *(void *)((char *)result + 5) = 0;
  void *result = 0;
  return result;
}

uint64_t re::introspect_ColorGamut3F(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ColorGamut3F", (uint64_t (*)(re::internal *))re::allocInfo_ColorGamut3F, (re::IntrospectionBase *(*)(void))re::initInfo_ColorGamut3F, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ColorGamut3F>, this);
}

void *re::allocInfo_ColorGamut4F(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF965B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF965B0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF96680, "ColorGamut4F");
    __cxa_guard_release(&qword_26AF965B0);
  }
  return &unk_26AF96680;
}

void re::initInfo_ColorGamut4F(re *this, re::IntrospectionBase *a2)
{
  v25[0] = 0x31DB7ABF0A5A1C02;
  v25[1] = "ColorGamut4F";
  re::StringID::destroyString((re::StringID *)v25);
  *((_OWORD *)this + 2) = v26;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF965B8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF965B8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      int v7 = re::introspect_float((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "r";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF965E0 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      float32_t v11 = re::introspect_float((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "g";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x400000002;
      *(_DWORD *)(v12 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF965E8 = v12;
      long long v13 = re::introspectionAllocator((re *)v12);
      float64x2_t v15 = re::introspect_float((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "b";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x800000003;
      *(_DWORD *)(v16 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF965F0 = v16;
      uint64_t v17 = re::introspectionAllocator((re *)v16);
      uint64_t v19 = re::introspect_float((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "a";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0xC00000004;
      *(_DWORD *)(v20 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF965F8 = v20;
      unint64_t v21 = re::introspectionAllocator((re *)v20);
      re::introspect_ColorGamut((re *)1, v22);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "gamut";
      *(void *)(v23 + 16) = &re::introspect_ColorGamut(BOOL)::info;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x1000000005;
      *(_DWORD *)(v23 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF96600 = v23;
      __cxa_guard_release(&qword_26AF965B8);
    }
  }
  *((void *)this + 2) = 0x1400000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + 8) = &qword_26AF965E0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ColorGamut4F>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ColorGamut4F>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ColorGamut4F>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ColorGamut4F>;
  re::IntrospectionRegistry::add(this, v3);
  long long v24 = v26;
}

double re::internal::defaultConstruct<re::ColorGamut4F>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result = 0.0;
  *(_OWORD *)a3 = xmmword_23435FBB0;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

double re::internal::defaultConstructV2<re::ColorGamut4F>(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)a1 = xmmword_23435FBB0;
  *(unsigned char *)(a1 + 16) = 0;
  return result;
}

uint64_t re::introspect_ColorGamut4F(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ColorGamut4F", (uint64_t (*)(re::internal *))re::allocInfo_ColorGamut4F, (re::IntrospectionBase *(*)(void))re::initInfo_ColorGamut4F, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ColorGamut4F>, this);
}

void re::introspect_RenderGraphResourceOperationType(re *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96700, memory_order_acquire) & 1) == 0)
  {
    long long v24 = (re *)__cxa_guard_acquire(&qword_26AF96700);
    if (v24)
    {
      id v25 = re::introspectionAllocator(v24);
      long long v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)long long v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "Read";
      qword_26AF967A8 = (uint64_t)v26;
      uint64_t v27 = re::introspectionAllocator(v26);
      __int16 v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)__int16 v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "Write";
      qword_26AF967B0 = (uint64_t)v28;
      long long v29 = re::introspectionAllocator(v28);
      long long v30 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)long long v30 = 1;
      *((void *)v30 + 1) = 2;
      *((void *)v30 + 2) = "WriteDepth";
      qword_26AF967B8 = (uint64_t)v30;
      long long v31 = re::introspectionAllocator(v30);
      __int16 v32 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 24, 8);
      *(_DWORD *)__int16 v32 = 1;
      *((void *)v32 + 1) = 3;
      *((void *)v32 + 2) = "WriteStencil";
      qword_26AF967C0 = (uint64_t)v32;
      int v33 = re::introspectionAllocator(v32);
      __int16 v34 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 24, 8);
      *(_DWORD *)__int16 v34 = 1;
      *((void *)v34 + 1) = 4;
      *((void *)v34 + 2) = "WriteBlit";
      qword_26AF967C8 = (uint64_t)v34;
      unint64_t v35 = re::introspectionAllocator(v34);
      __int16 v36 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 24, 8);
      *(_DWORD *)__int16 v36 = 1;
      *((void *)v36 + 1) = 5;
      *((void *)v36 + 2) = "WriteCompute";
      qword_26AF967D0 = (uint64_t)v36;
      unint64_t v37 = re::introspectionAllocator(v36);
      uint64_t v38 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v37 + 32))(v37, 24, 8);
      *(_DWORD *)uint64_t v38 = 1;
      *((void *)v38 + 1) = 6;
      *((void *)v38 + 2) = "WriteResolve";
      qword_26AF967D8 = (uint64_t)v38;
      long long v39 = re::introspectionAllocator(v38);
      long long v40 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v39 + 32))(v39, 24, 8);
      *(_DWORD *)long long v40 = 1;
      *((void *)v40 + 1) = 7;
      *((void *)v40 + 2) = "WriteResolveDepth";
      qword_26AF967E0 = (uint64_t)v40;
      long long v41 = re::introspectionAllocator(v40);
      uint64_t v42 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v41 + 32))(v41, 24, 8);
      *(_DWORD *)uint64_t v42 = 1;
      *((void *)v42 + 1) = 8;
      *((void *)v42 + 2) = "WriteResolveStencil";
      qword_26AF967E8 = (uint64_t)v42;
      long long v43 = re::introspectionAllocator(v42);
      uint64_t v44 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v43 + 32))(v43, 24, 8);
      *(_DWORD *)uint64_t v44 = 1;
      *(void *)(v44 + 8) = 10;
      *(void *)(v44 + 16) = "ReadFramebuffer";
      qword_26AF967F0 = v44;
      __cxa_guard_release(&qword_26AF96700);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96708, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF96708))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF96760, "RenderGraphResourceOperationType", 4, 4, 1, 1);
    qword_26AF96760 = (uint64_t)&unk_26E715E00;
    qword_26AF967A0 = (uint64_t)&re::introspect_RenderGraphResourceOperationType(BOOL)::enumTable;
    dword_26AF96770 = 9;
    __cxa_guard_release(&qword_26AF96708);
  }
  if ((_MergedGlobals_405 & 1) == 0)
  {
    _MergedGlobals_405 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF96760, a2);
    uint64_t v46 = 0x74B10DF276B47AF6;
    uint64_t v47 = "RenderGraphResourceOperationType";
    v50[0] = 208862;
    v50[1] = "int";
    int v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v50);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v50);
      uint64_t v4 = (unsigned int *)qword_26AF967A0;
      v49[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v50, &v46, 1, 1, (uint64_t)v49);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  uint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v48.char var0 = 2 * v10;
            v48.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v50, v14, &v48);
            re::StringID::destroyString((re::StringID *)&v48);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              uint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v48.char var0 = 2 * v18;
              v48.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v50, v22, &v48);
              re::StringID::destroyString((re::StringID *)&v48);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v50, v23);
      xmmword_26AF96780 = (__int128)v48;
      re::StringID::destroyString((re::StringID *)&v46);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v50);
      re::internal::assertLog((re::internal *)5, v45, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "RenderGraphResourceOperationType", v46, v47);
      _os_crash();
      __break(1u);
    }
  }
}

void *re::allocInfo_ReadSettings(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96710, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF96710))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF96850, "ReadSettings");
    __cxa_guard_release(&qword_26AF96710);
  }
  return &unk_26AF96850;
}

void re::initInfo_ReadSettings(re *this, re::IntrospectionBase *a2)
{
  v29[0] = 0x3C332C74121BAFF2;
  v29[1] = "ReadSettings";
  re::StringID::destroyString((re::StringID *)v29);
  *((_OWORD *)this + 2) = v30;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96718, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF96718);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      int v7 = re::introspect_uint32_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "computeIndex";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF96730 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      char v11 = re::introspect_BOOL((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "isOptional";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x400000002;
      *(_DWORD *)(v12 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF96738 = v12;
      int v13 = re::introspectionAllocator((re *)v12);
      float64x2_t v15 = re::introspect_BOOL((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "makeStencilView";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x500000003;
      *(_DWORD *)(v16 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF96740 = v16;
      uint64_t v17 = re::introspectionAllocator((re *)v16);
      char v19 = re::introspect_BOOL((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "makeArrayView";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x600000004;
      *(_DWORD *)(v20 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF96748 = v20;
      int v21 = re::introspectionAllocator((re *)v20);
      uint64_t v23 = re::mtl::introspect_RenderStage((re::mtl *)1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + 8) = "renderStage";
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0x800000005;
      *(_DWORD *)(v24 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v24 + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF96750 = v24;
      id v25 = (re *)re::introspectionAllocator((re *)v24);
      re::introspect_RenderGraphResourceOperationType(v25, v26);
      uint64_t v27 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + 8) = "type";
      *(void *)(v27 + 16) = &qword_26AF96760;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0xC00000006;
      *(_DWORD *)(v27 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v27 + 48) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_26AF96758 = v27;
      __cxa_guard_release(&qword_26AF96718);
    }
  }
  *((void *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 6;
  *((void *)this + 8) = &qword_26AF96730;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ReadSettings>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::ReadSettings>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ReadSettings>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ReadSettings>;
  re::IntrospectionRegistry::add(this, v3);
  long long v28 = v30;
}

double re::internal::defaultConstruct<re::ReadSettings>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 3) = 0;
  *(_DWORD *)a3 = 0;
  *(void *)&double result = 2;
  *(void *)(a3 + 8) = 2;
  return result;
}

double re::internal::defaultConstructV2<re::ReadSettings>(uint64_t a1)
{
  *(_DWORD *)(a1 + 3) = 0;
  *(_DWORD *)a1 = 0;
  *(void *)&double result = 2;
  *(void *)(a1 + 8) = 2;
  return result;
}

uint64_t re::introspect_ReadSettings(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ReadSettings", (uint64_t (*)(re::internal *))re::allocInfo_ReadSettings, (re::IntrospectionBase *(*)(void))re::initInfo_ReadSettings, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ReadSettings>, this);
}

void *re::allocInfo_WriteSettings(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96720, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF96720))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF968C8, "WriteSettings");
    __cxa_guard_release(&qword_26AF96720);
  }
  return &unk_26AF968C8;
}

void re::initInfo_WriteSettings(re *this, re::IntrospectionBase *a2)
{
  v48[0] = 0xC0DE7BC02E28B204;
  v48[1] = "WriteSettings";
  re::StringID::destroyString((re::StringID *)v48);
  *((_OWORD *)this + 2) = v49;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96728, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF96728);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      int v7 = re::introspect_uint32_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "attachmentIndex";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF967F8 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      char v11 = re::introspect_uint32_t((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "computeIndex";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 2;
      *(_DWORD *)(v12 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF96800 = v12;
      int v13 = re::introspectionAllocator((re *)v12);
      float64x2_t v15 = re::introspect_uint32_t((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "slotIndex";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 3;
      *(_DWORD *)(v16 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF96808 = v16;
      uint64_t v17 = (re *)re::introspectionAllocator((re *)v16);
      re::introspect_RenderGraphResourceOperationType(v17, v18);
      uint64_t v19 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "type";
      *(void *)(v19 + 16) = &qword_26AF96760;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x400000004;
      *(_DWORD *)(v19 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF96810 = v19;
      uint64_t v20 = re::introspectionAllocator((re *)v19);
      uint64_t v21 = re::introspect_Vector4F((re::IntrospectionBase **)1);
      uint64_t v22 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + 8) = "clearColor";
      *(void *)(v22 + 16) = v21;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + 32) = 0x1000000005;
      *(_DWORD *)(v22 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v22 + 48) = 0;
      *(void *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_26AF96818 = v22;
      uint64_t v23 = re::introspectionAllocator((re *)v22);
      id v25 = re::introspect_float((re *)1, v24);
      uint64_t v26 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v23 + 32))(v23, 72, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *(void *)(v26 + 8) = "clearDepth";
      *(void *)(v26 + 16) = v25;
      *(void *)(v26 + 24) = 0;
      *(void *)(v26 + 32) = 0x1000000006;
      *(_DWORD *)(v26 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v26 + 48) = 0;
      *(void *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_26AF96820 = v26;
      uint64_t v27 = re::introspectionAllocator((re *)v26);
      long long v29 = re::introspect_BOOL((re *)1, v28);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 72, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + 8) = "forceClear";
      *(void *)(v30 + 16) = v29;
      *(void *)(v30 + 24) = 0;
      *(void *)(v30 + 32) = 0x2000000007;
      *(_DWORD *)(v30 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v30 + 48) = 0;
      *(void *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_26AF96828 = v30;
      long long v31 = re::introspectionAllocator((re *)v30);
      int v33 = re::introspect_BOOL((re *)1, v32);
      uint64_t v34 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 72, 8);
      *(_DWORD *)uint64_t v34 = 1;
      *(void *)(v34 + 8) = "isOptional";
      *(void *)(v34 + 16) = v33;
      *(void *)(v34 + 24) = 0;
      *(void *)(v34 + 32) = 0x2100000008;
      *(_DWORD *)(v34 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v34 + 48) = 0;
      *(void *)(v34 + 56) = 0;
      *(_DWORD *)(v34 + 64) = 0;
      qword_26AF96830 = v34;
      unint64_t v35 = re::introspectionAllocator((re *)v34);
      unint64_t v37 = re::mtl::introspect_MultisampleDepthResolveFilter((re::mtl *)1, v36);
      uint64_t v38 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 72, 8);
      *(_DWORD *)uint64_t v38 = 1;
      *(void *)(v38 + 8) = "depthResolveFilter";
      *(void *)(v38 + 16) = v37;
      *(void *)(v38 + 24) = 0;
      *(void *)(v38 + 32) = 0x2400000009;
      *(_DWORD *)(v38 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v38 + 48) = 0;
      *(void *)(v38 + 56) = 0;
      *(_DWORD *)(v38 + 64) = 0;
      qword_26AF96838 = v38;
      long long v39 = re::introspectionAllocator((re *)v38);
      long long v41 = re::mtl::introspect_MultisampleStencilResolveFilter((re::mtl *)1, v40);
      uint64_t v42 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v39 + 32))(v39, 72, 8);
      *(_DWORD *)uint64_t v42 = 1;
      *(void *)(v42 + 8) = "stencilResolveFilter";
      *(void *)(v42 + 16) = v41;
      *(void *)(v42 + 24) = 0;
      *(void *)(v42 + 32) = 0x280000000ALL;
      *(_DWORD *)(v42 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v42 + 48) = 0;
      *(void *)(v42 + 56) = 0;
      *(_DWORD *)(v42 + 64) = 0;
      qword_26AF96840 = v42;
      long long v43 = re::introspectionAllocator((re *)v42);
      uint64_t v45 = re::introspect_uint32_t((re *)1, v44);
      uint64_t v46 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v43 + 32))(v43, 72, 8);
      *(_DWORD *)uint64_t v46 = 1;
      *(void *)(v46 + 8) = "clearStencil";
      *(void *)(v46 + 16) = v45;
      *(void *)(v46 + 24) = 0;
      *(void *)(v46 + 32) = 0x100000000BLL;
      *(_DWORD *)(v46 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v46 + 48) = 0;
      *(void *)(v46 + 56) = 0;
      *(_DWORD *)(v46 + 64) = 0;
      qword_26AF96848 = v46;
      __cxa_guard_release(&qword_26AF96728);
    }
  }
  *((void *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 11;
  *((void *)this + 8) = &qword_26AF967F8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::WriteSettings>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::WriteSettings>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::WriteSettings>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::WriteSettings>;
  re::IntrospectionRegistry::add(this, v3);
  long long v47 = v49;
}

double re::internal::defaultConstruct<re::WriteSettings>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0x100000000;
  double result = 0.0;
  *(_OWORD *)(a3 + 16) = xmmword_23435FBB0;
  *(_WORD *)(a3 + 32) = 0;
  *(_DWORD *)(a3 + 36) = 0;
  *(_DWORD *)(a3 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  return result;
}

double re::internal::defaultConstructV2<re::WriteSettings>(uint64_t a1)
{
  *(void *)a1 = 0x100000000;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = xmmword_23435FBB0;
  *(_WORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  return result;
}

uint64_t re::introspect_WriteSettings(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"WriteSettings", (uint64_t (*)(re::internal *))re::allocInfo_WriteSettings, (re::IntrospectionBase *(*)(void))re::initInfo_WriteSettings, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::WriteSettings>, this);
}

unint64_t re::RenderGraphBufferDescription::makeValid(uint64_t a1, id *a2, uint64_t a3)
{
  unint64_t result = (unint64_t)*a2;
  if (*a2 && !*(_DWORD *)a1)
  {
    if (*(void *)(a1 + 8) == -1)
    {
      unint64_t result = (unint64_t)objc_msgSend((id)result, sel_length);
      *(void *)(a1 + 8) = (unint64_t)(float)(*(float *)(a1 + 20) * (float)result);
    }
    if (*(void *)(a1 + 32) == -1)
    {
      unint64_t result = (unint64_t)objc_msgSend(*a2, sel_protectionOptions);
      *(void *)(a1 + 32) = result & a3;
    }
  }
  return result;
}

{
  unint64_t result;
  id v7;

  unint64_t result = (unint64_t)*a2;
  if (*a2 && !*(_DWORD *)a1)
  {
    if (*(void *)(a1 + 8) == -1)
    {
      int v7 = objc_msgSend((id)result, sel_width);
      unint64_t result = (unint64_t)objc_msgSend(*a2, sel_height);
      *(void *)(a1 + 8) = (unint64_t)(float)(*(float *)(a1 + 20) * (float)(result * (unint64_t)v7));
    }
    if (*(void *)(a1 + 32) == -1)
    {
      unint64_t result = (unint64_t)objc_msgSend(*a2, sel_protectionOptions);
      *(void *)(a1 + 32) = result & a3;
    }
  }
  return result;
}

void *re::RenderGraphBufferDescription::valuesToString@<X0>(re::RenderGraphBufferDescription *this@<X0>, void *a2@<X8>)
{
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  re::DynamicString::setCapacity(a2, 0);
  uint64_t v4 = a2[1];
  if (v4)
  {
    a2[1] = 1;
    uint64_t v5 = (unsigned char *)a2[2];
  }
  else
  {
    *((unsigned char *)a2 + 8) = v4 & 1;
    uint64_t v5 = (char *)a2 + 9;
  }
  unsigned char *v5 = 0;
  re::DynamicString::setCapacity(a2, 0x400uLL);
  re::DynamicString::format((re::DynamicString *)"type: %d length: %zu lengthMultiplier: %f                                     initialOptions: %d protectionOptions: %llu isMemoryless: %d", (re::DynamicString *)&v7, *(unsigned int *)this, *((void *)this + 1), *((float *)this + 5), *((unsigned int *)this + 6), *((void *)this + 4), (*((_DWORD *)this + 6) & 0x70) == 48);
  re::DynamicString::operator=((re::DynamicString *)a2, (re::DynamicString *)&v7);
  if (v7 && (v8 & 1) != 0) {
    (*(void (**)(void))(*(void *)v7 + 40))();
  }
  return re::DynamicString::trimExcess(a2);
}

uint64_t re::RenderGraphBufferHandle::introspectionSerialize(uint64_t a1, uint64_t a2, void *a3, re::DynamicString *a4)
{
  re::DynamicString::format((re::DynamicString *)"%llu", (re::DynamicString *)&v6, *a3);
  re::DynamicString::operator=(a4, (re::DynamicString *)&v6);
  if (v6 && (v7 & 1) != 0) {
    (*(void (**)(void))(*(void *)v6 + 40))();
  }
  return 1;
}

uint64_t re::RenderGraphBufferHandle::introspectionDeserialize(int a1, int a2, int a3, void *a4, char *__str)
{
  uint64_t v5 = __str;
  do
  {
    unsigned int v7 = *v5++;
    uint64_t v6 = v7;
    if (!v7)
    {
      __endptr = 0;
      *a4 = strtoull(__str, &__endptr, 10);
      return 1;
    }
  }
  while ((v6 & 0x80) == 0 && (*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v6 + 60) & 0x400) != 0);
  uint64_t v8 = *__str;
  if (*__str)
  {
    char v9 = __str[1];
    if (v9)
    {
      uint64_t v10 = __str + 2;
      do
      {
        uint64_t v8 = 31 * v8 + v9;
        int v11 = *v10++;
        char v9 = v11;
      }
      while (v11);
    }
    v8 &= ~0x8000000000000000;
  }
  *a4 = v8;
  return 1;
}

uint64_t re::RenderGraphBufferHandle::introspectionDeepCopy(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _OWORD *a5)
{
  *a5 = *a4;
  return 1;
}

uint64_t *re::introspect_RenderGraphBufferHandle(re *this, const re::IntrospectionBase *a2)
{
  int v2 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96948, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF96948))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF96950, "RenderGraphBufferHandle", 16, 8, 0, 0);
    qword_26AF96950 = (uint64_t)&unk_26E715E40;
    qword_26AF96990 = (uint64_t)re::internal::defaultConstruct<re::RenderGraphBufferHandle>;
    qword_26AF96998 = (uint64_t)re::RenderGraphBufferHandle::introspectionSerialize;
    qword_26AF969A0 = (uint64_t)re::RenderGraphBufferHandle::introspectionDeserialize;
    qword_26AF969B0 = 0;
    unk_26AF969B8 = 0;
    qword_26AF969A8 = (uint64_t)re::RenderGraphBufferHandle::introspectionDeepCopy;
    dword_26AF96960 = 11;
    __cxa_guard_release(&qword_26AF96948);
  }
  if (v2)
  {
    if (_MergedGlobals_406) {
      return &qword_26AF96950;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v10);
    char v3 = _MergedGlobals_406;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v10);
    if (v3) {
      return &qword_26AF96950;
    }
    uint64_t v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
    if (_MergedGlobals_406)
    {
LABEL_8:
      unsigned int v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
      return &qword_26AF96950;
    }
  }
  _MergedGlobals_406 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF96950, a2);
  v9[0] = 0xA33A75EAF1B787C0;
  v9[1] = "RenderGraphBufferHandle";
  xmmword_26AF96970 = v10;
  re::StringID::destroyString((re::StringID *)v9);
  if ((v2 & 1) == 0) {
    goto LABEL_8;
  }
  return &qword_26AF96950;
}

double re::internal::defaultConstruct<re::RenderGraphBufferHandle>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  double result = NAN;
  a3[1] = -1;
  return result;
}

double re::internal::defaultConstructV2<re::RenderGraphBufferHandle>(void *a1)
{
  *a1 = 0;
  double result = NAN;
  a1[1] = -1;
  return result;
}

void *re::TechniqueStage::deinit(void *this)
{
  uint64_t v1 = this[1];
  if (v1)
  {
    int v2 = this;
    char v3 = re::globalAllocators((re *)this);
    this = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3[2] + 40))(v3[2], v1);
    v2[1] = 0;
  }
  return this;
}

void re::MaterialPipelineData::~MaterialPipelineData(re::TechniqueStage **this)
{
  *this = (re::TechniqueStage *)&unk_26E713508;
  re::internal::destroyPersistent<re::TechniqueStage>((re *)"deinit", 192, this[2]);
  this[2] = 0;
  re::internal::destroyPersistent<re::TechniqueStage>((re *)"deinit", 194, this[3]);
  this[3] = 0;
  re::FixedArray<re::TechniqueFunctionConstant>::deinit(this + 16);
  re::FixedArray<re::LinkedFunction>::deinit(this + 7);
  re::FixedArray<re::LinkedFunction>::deinit(this + 4);
  *this = (re::TechniqueStage *)&unk_26E6DECE0;
  objc_destructInstance(this + 1);
}

{
  uint64_t vars8;

  re::MaterialPipelineData::~MaterialPipelineData(this);
  JUMPOUT(0x237DBCBD0);
}

void re::MaterialPipelineData::generatePipelineStateKey(re::MaterialPipelineData *this)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  *((void *)this + 2ArcSharedObject::ArcSharedObject(this, 0) = 0;
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 272);
    unint64_t v4 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v3 ^ ((unint64_t)v3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v3 ^ ((unint64_t)v3 >> 30))) >> 27));
    unint64_t v5 = (v4 ^ (v4 >> 31)) - 0x61C8864680B583E9;
    *((void *)this + 2ArcSharedObject::ArcSharedObject(this, 0) = v5;
    if (v3)
    {
      uint64_t v6 = 0;
      uint64_t v7 = v3;
      do
      {
        if (!v7)
        {
          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          *(_OWORD *)cf = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v39 = 136315906;
          *(void *)&v39[4] = "operator[]";
          __int16 v40 = 1024;
          int v41 = 468;
          __int16 v42 = 2048;
          uint64_t v43 = v3;
          __int16 v44 = 2048;
          uint64_t v45 = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        uint64_t v8 = *(void *)(v2 + 280) + v6;
        unint64_t v9 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * *(unsigned __int16 *)(v8 + 16)) ^ ((0xBF58476D1CE4E5B9
                                                                        * *(unsigned __int16 *)(v8 + 16)) >> 27));
        unint64_t v10 = ((v5 << 6) - 0x61C8864680B583E9 + (v5 >> 2) + (v9 ^ (v9 >> 31))) ^ v5;
        unint64_t v11 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * *(unsigned __int16 *)(v8 + 18)) ^ ((0xBF58476D1CE4E5B9
                                                                         * *(unsigned __int16 *)(v8 + 18)) >> 27));
        unint64_t v5 = ((v11 ^ (v11 >> 31)) - 0x61C8864680B583E9 + (v10 << 6) + (v10 >> 2)) ^ v10;
        *((void *)this + 2ArcSharedObject::ArcSharedObject(this, 0) = v5;
        v6 += 24;
        --v7;
      }
      while (24 * v3 != v6);
    }
    size_t v12 = strlen(*(const char **)(v2 + 8));
    if (v12)
    {
      MurmurHash3_x64_128(*(void *)(v2 + 8), v12, 0, (unint64_t *)cf);
      unint64_t v13 = ((uint64_t)cf[1] + 64 * (uint64_t)cf[0] + ((unint64_t)cf[0] >> 2) - 0x61C8864680B583E9) ^ (uint64_t)cf[0];
      uint64_t v2 = *((void *)this + 2);
    }
    else
    {
      unint64_t v13 = 0;
    }
    unint64_t v14 = ((v5 << 6)
         - 0x61C8864680B583E9
         + (v5 >> 2)
         + (((v13 << 6) - 0x61C8864680B583E9 + (v13 >> 2) + *(void *)(v2 + 16)) ^ v13)) ^ v5;
    *((void *)this + 2ArcSharedObject::ArcSharedObject(this, 0) = v14;
  }
  else
  {
    unint64_t v14 = 0;
  }
  uint64_t v15 = *((void *)this + 3);
  if (v15)
  {
    size_t v16 = strlen(*(const char **)(v15 + 8));
    if (v16)
    {
      MurmurHash3_x64_128(*(void *)(v15 + 8), v16, 0, (unint64_t *)cf);
      unint64_t v17 = ((uint64_t)cf[1] + 64 * (uint64_t)cf[0] + ((unint64_t)cf[0] >> 2) - 0x61C8864680B583E9) ^ (uint64_t)cf[0];
      uint64_t v15 = *((void *)this + 3);
    }
    else
    {
      unint64_t v17 = 0;
    }
    v14 ^= (v14 << 6)
         - 0x61C8864680B583E9
         + (v14 >> 2)
         + (((v17 << 6) - 0x61C8864680B583E9 + (v17 >> 2) + *(void *)(v15 + 16)) ^ v17);
    *((void *)this + 2ArcSharedObject::ArcSharedObject(this, 0) = v14;
  }
  uint64_t v18 = *((void *)this + 5);
  if (v18)
  {
    uint64_t v19 = 144 * v18;
    uint64_t v20 = *((void *)this + 6) + 48;
    do
    {
      unint64_t v21 = ((v14 << 6) - 0x61C8864680B583E9 + (v14 >> 2) + (*(void *)(v20 - 24) >> 1)) ^ v14;
      *((void *)this + 2ArcSharedObject::ArcSharedObject(this, 0) = v21;
      unint64_t v22 = ((*(void *)(v20 - 40) >> 1) - 0x61C8864680B583E9 + (v21 << 6) + (v21 >> 2)) ^ v21;
      *((void *)this + 2ArcSharedObject::ArcSharedObject(this, 0) = v22;
      uint64_t v23 = *(re::sg::CachedCompilationMaterial **)v20;
      if (*(void *)v20)
      {
        re::sg::CachedCompilationMaterial::getMaterial(*(re::sg::CachedCompilationMaterial **)v20, cf);
        CFTypeRef v24 = cf[0];
        if (cf[0]) {
          CFTypeRef v24 = (CFTypeRef)CFHash(cf[0]);
        }
      }
      else
      {
        CFTypeRef v24 = *(CFTypeRef *)(v20 - 8);
      }
      unint64_t v25 = ((unint64_t)v24 + 64 * v22 + (v22 >> 2) - 0x61C8864680B583E9) ^ v22;
      *((void *)this + 2ArcSharedObject::ArcSharedObject(this, 0) = v25;
      if (v23)
      {

        unint64_t v25 = *((void *)this + 20);
      }
      unint64_t v26 = 0xBF58476D1CE4E5B9 * (*(unsigned int *)(v20 + 8) ^ ((unint64_t)*(unsigned int *)(v20 + 8) >> 30));
      unint64_t v27 = ((v25 << 6)
           - 0x61C8864680B583E9
           + (v25 >> 2)
           + ((0x94D049BB133111EBLL * (v26 ^ (v26 >> 27))) ^ ((0x94D049BB133111EBLL * (v26 ^ (v26 >> 27))) >> 31))) ^ v25;
      unint64_t v14 = (*(void *)(v20 + 40) - 0x61C8864680B583E9 + (v27 << 6) + (v27 >> 2)) ^ v27;
      *((void *)this + 2ArcSharedObject::ArcSharedObject(this, 0) = v14;
      v20 += 144;
      v19 -= 144;
    }
    while (v19);
  }
  uint64_t v28 = *((void *)this + 8);
  if (v28)
  {
    uint64_t v29 = 144 * v28;
    uint64_t v30 = *((void *)this + 9) + 48;
    do
    {
      unint64_t v31 = ((v14 << 6) - 0x61C8864680B583E9 + (v14 >> 2) + (*(void *)(v30 - 24) >> 1)) ^ v14;
      *((void *)this + 2ArcSharedObject::ArcSharedObject(this, 0) = v31;
      unint64_t v32 = ((*(void *)(v30 - 40) >> 1) - 0x61C8864680B583E9 + (v31 << 6) + (v31 >> 2)) ^ v31;
      *((void *)this + 2ArcSharedObject::ArcSharedObject(this, 0) = v32;
      int v33 = *(re::sg::CachedCompilationMaterial **)v30;
      if (*(void *)v30)
      {
        re::sg::CachedCompilationMaterial::getMaterial(*(re::sg::CachedCompilationMaterial **)v30, v39);
        CFHashCode v34 = *(void *)v39;
        if (*(void *)v39) {
          CFHashCode v34 = CFHash(*(CFTypeRef *)v39);
        }
      }
      else
      {
        CFHashCode v34 = *(void *)(v30 - 8);
      }
      unint64_t v35 = ((v32 << 6) - 0x61C8864680B583E9 + (v32 >> 2) + v34) ^ v32;
      *((void *)this + 2ArcSharedObject::ArcSharedObject(this, 0) = v35;
      if (v33)
      {

        unint64_t v35 = *((void *)this + 20);
      }
      unint64_t v36 = 0xBF58476D1CE4E5B9 * (*(unsigned int *)(v30 + 8) ^ ((unint64_t)*(unsigned int *)(v30 + 8) >> 30));
      unint64_t v37 = ((v35 << 6)
           - 0x61C8864680B583E9
           + (v35 >> 2)
           + ((0x94D049BB133111EBLL * (v36 ^ (v36 >> 27))) ^ ((0x94D049BB133111EBLL * (v36 ^ (v36 >> 27))) >> 31))) ^ v35;
      unint64_t v14 = (*(void *)(v30 + 40) - 0x61C8864680B583E9 + (v37 << 6) + (v37 >> 2)) ^ v37;
      *((void *)this + 2ArcSharedObject::ArcSharedObject(this, 0) = v14;
      v30 += 144;
      v29 -= 144;
    }
    while (v29);
  }
  unint64_t v38 = ((v14 << 6)
       - 0x61C8864680B583E9
       + (v14 >> 2)
       + (((*((void *)this + 23) << 6)
         - 0x61C8864680B583E9
         + (*((void *)this + 23) >> 2)
         + *((unsigned __int8 *)this + 176)) ^ *((void *)this + 23))) ^ v14;
  *((void *)this + 19) = (*((void *)this + 21) - 0x61C8864680B583E9 + (v38 << 6) + (v38 >> 2)) ^ v38;
  *((void *)this + 2ArcSharedObject::ArcSharedObject(this, 0) = v38;
}

unint64_t re::MaterialTechnique::combinedBuffersHash(re::MaterialTechnique *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  unint64_t v2 = (v1[67] + (v1[45] << 6) + (v1[45] >> 2) - 0x61C8864680B583E9) ^ v1[45];
  return ((v2 << 6)
        + (v2 >> 2)
        - 0x61C8864680B583E9
        + ((*(void *)(v1[2] + 560)
          + (*(void *)(v1[2] + 384) << 6)
          + (*(void *)(v1[2] + 384) >> 2)
          - 0x61C8864680B583E9) ^ *(void *)(v1[2] + 384))) ^ v2;
}

unint64_t re::MaterialTechnique::combinedTexturesHash(re::MaterialTechnique *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  unint64_t v2 = (v1[120] + (v1[103] << 6) + (v1[103] >> 2) - 0x61C8864680B583E9) ^ v1[103];
  return ((v2 << 6)
        + (v2 >> 2)
        - 0x61C8864680B583E9
        + ((*(void *)(v1[2] + 984)
          + (*(void *)(v1[2] + 848) << 6)
          + (*(void *)(v1[2] + 848) >> 2)
          - 0x61C8864680B583E9) ^ *(void *)(v1[2] + 848))) ^ v2;
}

unint64_t re::MaterialTechnique::combinedConstantsHash(re::MaterialTechnique *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  unint64_t v2 = (v1[59] + (v1[37] << 6) + (v1[37] >> 2) - 0x61C8864680B583E9) ^ v1[37];
  return ((v2 << 6)
        + (v2 >> 2)
        - 0x61C8864680B583E9
        + ((*(void *)(v1[2] + 496)
          + (*(void *)(v1[2] + 320) << 6)
          + (*(void *)(v1[2] + 320) >> 2)
          - 0x61C8864680B583E9) ^ *(void *)(v1[2] + 320))) ^ v2;
}

unint64_t re::MaterialTechnique::combinedSamplersHash(re::MaterialTechnique *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  unint64_t v2 = (v1[133] + (v1[111] << 6) + (v1[111] >> 2) - 0x61C8864680B583E9) ^ v1[111];
  return ((v2 << 6)
        + (v2 >> 2)
        - 0x61C8864680B583E9
        + ((*(void *)(v1[2] + 1088)
          + (*(void *)(v1[2] + 912) << 6)
          + (*(void *)(v1[2] + 912) >> 2)
          - 0x61C8864680B583E9) ^ *(void *)(v1[2] + 912))) ^ v2;
}

unint64_t re::MaterialTechnique::combinedTextureBlocksHash(re::MaterialTechnique *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  unint64_t v2 = (v1[155] + (v1[147] << 6) + (v1[147] >> 2) - 0x61C8864680B583E9) ^ v1[147];
  return ((v2 << 6)
        + (v2 >> 2)
        - 0x61C8864680B583E9
        + ((*(void *)(v1[2] + 1264)
          + (*(void *)(v1[2] + 1200) << 6)
          + (*(void *)(v1[2] + 1200) >> 2)
          - 0x61C8864680B583E9) ^ *(void *)(v1[2] + 1200))) ^ v2;
}

void re::MaterialTechniqueVariant::releasePipelineStates(re::MaterialTechniqueVariant *this, re::RenderManager *a2, re::DrawingManager *a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v6 = *((unsigned int *)this + 14);
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = (int *)(*((void *)this + 5) + 8);
    while (1)
    {
      int v9 = *v8;
      v8 += 24;
      if (v9 < 0) {
        break;
      }
      if (v6 == ++v7)
      {
        LODWORD(v7) = *((_DWORD *)this + 14);
        break;
      }
    }
  }
  else
  {
    LODWORD(v7) = 0;
  }
  if (v6 != v7)
  {
    uint64_t v10 = v7;
    do
    {
      uint64_t v11 = *((void *)this + 5) + 96 * v10;
      long long v17 = *(_OWORD *)(v11 + 48);
      long long v18 = *(_OWORD *)(v11 + 64);
      char v19 = *(unsigned char *)(v11 + 80);
      long long v15 = *(_OWORD *)(v11 + 16);
      long long v16 = *(_OWORD *)(v11 + 32);
      uint64_t v22 = 0;
      *(void *)uint64_t v12 = &unk_26E713578;
      *(void *)(v12 + 8) = a3;
      *(_OWORD *)(v12 + 16) = v15;
      *(_OWORD *)(v12 + 32) = v16;
      *(_OWORD *)(v12 + 48) = v17;
      *(_OWORD *)(v12 + 64) = v18;
      *(unsigned char *)(v12 + 8ArcSharedObject::ArcSharedObject(this, 0) = v19;
      uint64_t v22 = v12;
      re::RenderManager::addDelayedDestructorToRenderThread(a2, (uint64_t)v20);
      re::MoveOnlyFunctionBase<24ul,void ()(void)>::destroyCallable((uint64_t)v20);
      if (*((_DWORD *)this + 14) <= (v7 + 1)) {
        int v13 = v7 + 1;
      }
      else {
        int v13 = *((_DWORD *)this + 14);
      }
      int v14 = v7;
      while (1)
      {
        uint64_t v10 = (v14 + 1);
        if (v13 - 1 == v14) {
          break;
        }
        ++v14;
        LODWORD(v7) = v10;
        if ((*(_DWORD *)(*((void *)this + 5) + 96 * v10 + 8) & 0x80000000) != 0) {
          goto LABEL_17;
        }
      }
      LODWORD(v7) = v13;
LABEL_17:
      ;
    }
    while (v6 != v7);
  }
  re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::clear((uint64_t)this + 24);
}

BOOL assertTextureType(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF969C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF969C8))
  {
    re::Defaults::BOOLValue((re::Defaults *)"enableShaderDebugLogs", v15, (char *)&v17);
    if ((_BYTE)v17) {
      char v16 = BYTE1(v17);
    }
    else {
      char v16 = 0;
    }
    _MergedGlobals_407 = v16;
    __cxa_guard_release(&qword_26AF969C8);
  }
  (*(void (**)(id *__return_ptr))(**(void **)(a1 + 8 * a3[1]) + 24))(&v17);
  unsigned int v6 = objc_msgSend(v17, sel_textureType);
  uint64_t v7 = (re *)v17;
  if (v17) {

  }
  int v8 = *(unsigned __int16 *)(a2 + 18);
  if (v6 != v8 && _MergedGlobals_407 != 0)
  {
    uint64_t v10 = *re::graphicsLogObjects(v7);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a2 + 8);
      int v12 = *(unsigned __int16 *)(a2 + 18);
      int v13 = *a3;
      LODWORD(v17) = 67109890;
      HIDWORD(v17) = v6;
      __int16 v18 = 2080;
      uint64_t v19 = v11;
      __int16 v20 = 1024;
      int v21 = v12;
      __int16 v22 = 1024;
      int v23 = v13;
      _os_log_impl(&dword_233120000, v10, OS_LOG_TYPE_DEFAULT, "Mismatch between bound texture type %d and shader param(%s) type %d at slot %d.\n", (uint8_t *)&v17, 0x1Eu);
    }
  }
  return v6 == v8;
}

unint64_t re::MaterialTechniqueVariant::fillTextureTableLayerLists(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  *a4 = 0;
  ++*((_DWORD *)a4 + 2);
  uint64_t v7 = *(void **)(a3 + 64);
  uint64_t v8 = v7[6];
  if (v8)
  {
    re::DynamicInlineArray<re::TextureLayer,10ul>::ensureCapacity(0, a2);
    uint64_t v9 = *a4;
    uint64_t v10 = &a4[3 * *a4];
    void v10[2] = v8 + 680;
    void v10[3] = v8 + 552;
    void v10[4] = 7;
    unint64_t v11 = v9 + 1;
    *a4 = v9 + 1;
    ++*((_DWORD *)a4 + 2);
    uint64_t v7 = *(void **)(a3 + 64);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v12 = v7[7];
  if (v12)
  {
    re::DynamicInlineArray<re::TextureLayer,10ul>::ensureCapacity(v11, a2);
    uint64_t v13 = *a4;
    int v14 = &a4[3 * *a4];
    void v14[2] = v12 + 680;
    v14[3] = v12 + 552;
    void v14[4] = 8;
    unint64_t v11 = v13 + 1;
    *a4 = v13 + 1;
    ++*((_DWORD *)a4 + 2);
    uint64_t v7 = *(void **)(a3 + 64);
  }
  uint64_t v15 = v7[9];
  if (v15)
  {
    re::DynamicInlineArray<re::TextureLayer,10ul>::ensureCapacity(v11, a2);
    uint64_t v16 = *a4;
    id v17 = &a4[3 * *a4];
    uint64_t v17[2] = v15 + 680;
    v17[3] = v15 + 552;
    v17[4] = 10;
    unint64_t v11 = v16 + 1;
    *a4 = v16 + 1;
    ++*((_DWORD *)a4 + 2);
    uint64_t v7 = *(void **)(a3 + 64);
  }
  uint64_t v18 = v7[8];
  if (v18)
  {
    uint64_t v19 = *(void *)(v18 + 8);
    re::DynamicInlineArray<re::TextureLayer,10ul>::ensureCapacity(v11, a2);
    uint64_t v20 = *a4;
    int v21 = &a4[3 * *a4];
    void v21[2] = v19;
    v21[3] = 0;
    v21[4] = 11;
    unint64_t v11 = v20 + 1;
    *a4 = v20 + 1;
    ++*((_DWORD *)a4 + 2);
  }
  uint64_t v22 = *(void *)(*(void *)a1 + 8);
  re::DynamicInlineArray<re::TextureLayer,10ul>::ensureCapacity(v11, a2);
  uint64_t v23 = *a4;
  uint64_t v24 = (uint64_t)&a4[3 * *a4 + 2];
  *(void *)uint64_t v24 = v22 + 904;
  *(void *)(v24 + 8) = v22 + 776;
  *(_DWORD *)(v24 + 16) = 5;
  *a4 = v23 + 1;
  ++*((_DWORD *)a4 + 2);
  uint64_t v25 = *(void *)(*(void *)(*(void *)a1 + 8) + 16);
  unint64_t result = re::DynamicInlineArray<re::TextureLayer,10ul>::ensureCapacity(v23 + 1, v26);
  uint64_t v28 = *a4;
  uint64_t v29 = (uint64_t)&a4[3 * *a4 + 2];
  *(void *)uint64_t v29 = v25 + 928;
  *(void *)(v29 + 8) = v25 + 800;
  *(_DWORD *)(v29 + 16) = 6;
  *a4 = v28 + 1;
  ++*((_DWORD *)a4 + 2);
  return result;
}

void re::MaterialTechniqueVariant::resolveTextureArgument(int a1, StringID *a2, uint64_t *a3, uint64_t **a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = a3;
  uint64_t v10 = a4[1];
  if (!v10)
  {
LABEL_33:
    *(_WORD *)a5 = a2[1].var0;
    *(_WORD *)(a5 + 2) = 0;
    unsigned int v32 = *((unsigned __int16 *)&a2[1].var0 + 1) - 3;
    if (v32 > 4) {
      uint64_t v33 = 113101865;
    }
    else {
      uint64_t v33 = qword_2343E6170[(__int16)v32];
    }
    uint64_t v35 = *v8;
    v46[0] = (id)v33;
    (*(void (**)(id *__return_ptr))(*(void *)v35 + 32))(&v43);
    *(_WORD *)(a5 + 4) = BYTE1(v43);
    return;
  }
  uint64_t v12 = *a4;
  uint64_t v13 = (uint64_t)&(*a4)[3 * (void)v10];
  int v14 = (void *)(a7 + 144);
  uint64_t v40 = v13;
  while (1)
  {
    re::StringID::StringID((re::StringID *)v46, a2);
    if (*(void *)(a7 + 192)
      && re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::containsKey((uint64_t)v14, v46))
    {
      uint64_t v15 = v14;
      if (*v14)
      {
        unint64_t v16 = (unint64_t)v46[0];
        unint64_t v17 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (((unint64_t)v46[0] >> 31) ^ ((unint64_t)v46[0] >> 1))) ^ ((0xBF58476D1CE4E5B9 * (((unint64_t)v46[0] >> 31) ^ ((unint64_t)v46[0] >> 1))) >> 27));
        uint64_t v18 = *(void *)(a7 + 160);
        uint64_t v19 = *(unsigned int *)(*(void *)(a7 + 152) + 4 * ((v17 ^ (v17 >> 31)) % *(unsigned int *)(a7 + 168)));
        if (v19 == 0x7FFFFFFF)
        {
LABEL_12:
          uint64_t v19 = 0x7FFFFFFFLL;
        }
        else
        {
          uint64_t v20 = (const char *)v46[1];
          while (1)
          {
            if ((*(void *)(v18 + 40 * v19 + 8) ^ v16) <= 1)
            {
              int v21 = *(const char **)(v18 + 40 * v19 + 16);
              if (v21 == v20 || !strcmp(v21, v20)) {
                break;
              }
            }
            uint64_t v19 = *(_DWORD *)(v18 + 40 * v19) & 0x7FFFFFFF;
            if (v19 == 0x7FFFFFFF) {
              goto LABEL_12;
            }
          }
        }
        uint64_t v13 = v40;
      }
      else
      {
        uint64_t v18 = *(void *)(a7 + 160);
        uint64_t v19 = 0x7FFFFFFFLL;
      }
      re::StringID::operator=((unint64_t *)v46, (uint64_t *)(v18 + 40 * v19 + 24));
      int v14 = v15;
      uint64_t v8 = a3;
    }
    uint64_t v22 = *v12;
    id v43 = (id)((unint64_t)v46[0] >> 1);
    (*(void (**)(char *__return_ptr))(*(void *)v22 + 32))(&v44);
    if (!v44)
    {
      uint64_t v25 = (void *)v12[1];
      if (v25)
      {
        id v43 = (id)((unint64_t)v46[0] >> 1);
        uint64_t v26 = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find(v25, (uint64_t *)&v43);
        if (v26 != -1)
        {
          uint64_t v27 = 0;
          uint64_t v28 = v25[1];
          uint64_t v29 = &re::s_textureTableConstantMembers;
          while (1)
          {
            int v30 = *v29;
            v29 += 16;
            if (*(unsigned __int8 *)(v28 + 40 * v26 + 24) == v30)
            {
              uint64_t v31 = v8[v27];
              if (v31) {
                break;
              }
            }
            if (!*(unsigned char *)(v28 + 40 * v26 + 24))
            {
              *(_WORD *)a5 = a2[1].var0;
              *(_DWORD *)(a5 + 2) = -1;
              *(unsigned char *)(a5 + 6) = 1;
              re::StringID::destroyString((re::StringID *)v46);
              goto LABEL_36;
            }
            if (++v27 == 12) {
              goto LABEL_27;
            }
          }
          (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t))(*(void *)v31 + 32))(v42, v8[v27], v28 + 40 * v26 + 32);
          if (v42[0])
          {
            (*(void (**)(id *__return_ptr))(*(void *)v8[v27] + 24))(&v43);
            if (v43)
            {

              *(_WORD *)a5 = a2[1].var0;
              *(_WORD *)(a5 + 2) = v27;
              __int16 v23 = v42[1];
              goto LABEL_18;
            }
          }
        }
      }
LABEL_27:
      re::StringID::destroyString((re::StringID *)v46);
      goto LABEL_28;
    }
    __int16 v23 = v45;
    *(_WORD *)a5 = a2[1].var0;
    *(_WORD *)(a5 + 2) = *((_DWORD *)v12 + 4);
LABEL_18:
    *(_WORD *)(a5 + 4) = v23;
    BOOL v24 = assertTextureType((uint64_t)v8, (uint64_t)a2, (unsigned __int16 *)a5);
    re::StringID::destroyString((re::StringID *)v46);
    if (v24) {
      break;
    }
LABEL_28:
    v12 += 3;
    if (v12 == (uint64_t *)v13) {
      goto LABEL_33;
    }
  }
LABEL_36:
  if (!*(unsigned char *)(a5 + 6))
  {
    (*(void (**)(id *__return_ptr))(*(void *)v8[*(unsigned __int16 *)(a5 + 2)] + 24))(v46);
    uint64_t v34 = a6;
    if (((unint64_t)objc_msgSend(v46[0], sel_protectionOptions) & ~a6) != 0)
    {
      *(_WORD *)a5 = a2[1].var0;
      *(_WORD *)(a5 + 2) = 0;
      unint64_t v36 = (char *)objc_msgSend(v46[0], sel_textureType);
      if ((unint64_t)(v36 - 1) > 7) {
        uint64_t v37 = 93818879;
      }
      else {
        uint64_t v37 = qword_2343E6198[(void)(v36 - 1)];
      }
      uint64_t v38 = *a3;
      id v43 = (id)v37;
      (*(void (**)(char *__return_ptr))(*(void *)v38 + 32))(&v44);
      *(_WORD *)(a5 + 4) = v45;
      uint64_t v34 = a6;
    }
    if ((unint64_t)(a2[1].var1 - 1) <= 1
      && (v34 & ~(unint64_t)objc_msgSend(v46[0], sel_protectionOptions)) != 0)
    {
      *(unsigned char *)(a5 + 6) = 1;
    }
    if (v46[0]) {
  }
    }
}

unint64_t re::MaterialTechniqueVariant::completeResolution(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(a5 + 16) = 0;
  ++*(_DWORD *)(a5 + 24);
  unint64_t v16 = 0;
  int v17 = 0;
  unint64_t result = re::MaterialTechniqueVariant::fillTextureTableLayerLists(a1, (uint64_t)a2, a4, (uint64_t *)&v16);
  uint64_t v11 = *(void *)(a3 + 120);
  if (v11)
  {
    uint64_t v12 = *(StringID **)(a3 + 128);
    uint64_t v13 = 32 * v11;
    do
    {
      v14[0] = &v18;
      v14[1] = v16;
      uint64_t v15 = 0;
      re::MaterialTechniqueVariant::resolveTextureArgument(result, v12, a2, v14, (uint64_t)&v15, a6, a3);
      unint64_t result = (unint64_t)re::DynamicArray<re::TextureResolution>::add((void *)a5, &v15);
      v12 += 2;
      v13 -= 32;
    }
    while (v13);
  }
  return result;
}

void *re::DynamicArray<re::TextureResolution>::add(void *this, void *a2)
{
  uint64_t v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::TextureResolution>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  *(void *)(v3[4] + 8 * v4) = *a2;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

uint64_t re::MaterialTechniqueVariant::resolveBufferArgument(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v9 = (uint64_t)memcpy(__dst, a2, sizeof(__dst));
  if (a4)
  {
    uint64_t v10 = a3 + 24 * a4;
    while (1)
    {
      uint64_t v11 = *(void **)a3;
      *(void *)long long buf = *a1 >> 1;
      uint64_t v12 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v11, buf);
      if (v12 != -1)
      {
        uint64_t v13 = v11[1] + 16 * v12;
        unsigned int v15 = *(unsigned __int8 *)(v13 + 8);
        int v14 = (unsigned __int8 *)(v13 + 8);
        LODWORD(v16) = *(_DWORD *)(a3 + 16);
        if (*((void *)&__dst[3 * v16] + 1) > (unint64_t)v15) {
          break;
        }
      }
      int v17 = *(void **)(a3 + 8);
      *(void *)long long buf = *a1 >> 1;
      uint64_t v9 = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find(v17, (uint64_t *)buf);
      if (v9 != -1)
      {
        uint64_t v16 = 0;
        uint64_t v18 = v17[1];
        uint64_t v19 = __dst;
        uint64_t v20 = &re::s_bufferTableConstantMembers;
        while (1)
        {
          int v21 = *v20;
          v20 += 16;
          if (*(unsigned __int8 *)(v18 + 40 * v9 + 24) == v21)
          {
            unint64_t v22 = v19[1];
            if (v22) {
              break;
            }
          }
          ++v16;
          v19 += 6;
          if (v16 == 13) {
            goto LABEL_14;
          }
        }
        __int16 v23 = (void *)v19[5];
        uint64_t v9 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v23, (void *)(v18 + 40 * v9 + 32));
        if (v9 != -1)
        {
          uint64_t v25 = v23[1] + 16 * v9;
          unsigned int v27 = *(unsigned __int8 *)(v25 + 8);
          int v14 = (unsigned __int8 *)(v25 + 8);
          uint64_t v26 = v27;
          if (v22 <= v27)
          {
            re::internal::assertLog((re::internal *)6, v24, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v26, v22);
            _os_crash();
            __break(1u);
          }
          if (*(void *)(*v19 + 16 * v26)) {
            break;
          }
        }
      }
LABEL_14:
      a3 += 24;
      if (a3 == v10) {
        goto LABEL_15;
      }
    }
    uint64_t v30 = a5;
    *(_WORD *)(a5 + 2) = v16;
    __int16 v31 = *v14;
    uint64_t result = 1;
  }
  else
  {
LABEL_15:
    if (!a6) {
      return 0;
    }
    uint64_t v28 = *re::graphicsLogObjects((re *)v9);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = a1[1];
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v32;
      _os_log_error_impl(&dword_233120000, v28, OS_LOG_TYPE_ERROR, "Failed to find reflection for buffer %s", buf, 0xCu);
    }
    if (a2[1]) {
      return 0;
    }
    uint64_t result = 0;
    uint64_t v30 = a5;
    *(_WORD *)(a5 + 2) = 11;
    __int16 v31 = 12;
  }
  *(_WORD *)(v30 + 4) = v31;
  return result;
}

unint64_t re::MaterialTechniqueVariant::completeResolution(unsigned char *a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  unint64_t v10 = (unint64_t)a2;
  do
  {
    unint64_t v11 = v10;
    unint64_t v10 = *(void *)(v10 + 8);
  }
  while (v10 && !*(void *)(v11 + 72));
  uint64_t v48 = 0x567F5844584795DALL;
  long long v49 = "vertexPosition";
  *(void *)&long long v60 = 0x2B3FAC222C23CAEDLL;
  uint64_t v12 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v11 + 48), &v60);
  if (v12 == -1)
  {
    *(void *)&long long v60 = 0;
    re::StringID::destroyString((re::StringID *)&v48);
    unsigned int v39 = 0;
  }
  else
  {
    unint64_t v11 = *(void *)(v11 + 56) + 16 * v12;
    *(void *)&long long v60 = 0;
    re::StringID::destroyString((re::StringID *)&v48);
    unsigned int v39 = *(unsigned __int8 *)(v11 + 8);
  }
  uint64_t v41 = *(unsigned int *)(a3 + 272);
  uint64_t v48 = 0;
  LODWORD(v49) = 0;
  unint64_t result = re::MaterialTechniqueVariant::fillBufferTableLayerLists((uint64_t)a1, a4, (uint64_t)&v48);
  uint64_t v14 = 0;
  uint64_t v40 = v48;
  memset(v47, 0, sizeof(v47));
  do
  {
    v47[v14] = vmvnq_s8(*(int8x16_t *)(a3 + 296 + v14 * 16));
    ++v14;
  }
  while (v14 != 2);
  if (!v41) {
    return result;
  }
  unint64_t v15 = 0;
  unint64_t v38 = a3;
  uint64_t v16 = -1;
  __int16 v42 = a1;
  do
  {
    unint64_t result = re::Bitset<256>::findFirstBitSet((uint64_t)v47, v16 + 1);
    if (result == -1)
    {
      re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) ", "nextAvailableSlot != ~0", "completeResolution", 740);
      _os_crash();
      __break(1u);
LABEL_52:
      uint64_t v51 = 0;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v60 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v52 = 136315906;
      uint64_t v53 = "operator[]";
      __int16 v54 = 1024;
      int v55 = 476;
      __int16 v56 = 2048;
      unint64_t v57 = v15;
      __int16 v58 = 2048;
      unint64_t v59 = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_53:
      uint64_t v51 = 0;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v60 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v52 = 136315906;
      uint64_t v53 = "operator[]";
      __int16 v54 = 1024;
      int v55 = 476;
      __int16 v56 = 2048;
      unint64_t v57 = v11;
      __int16 v58 = 2048;
      unint64_t v59 = a3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    unint64_t v11 = *(void *)(a3 + 272);
    if (v11 <= v15) {
      goto LABEL_52;
    }
    uint64_t v16 = result;
    uint64_t v18 = *(void *)(a3 + 280) + 24 * v15;
    __int16 v19 = *(_WORD *)(v18 + 16);
    uint64_t v20 = (__int16 *)(v18 + 18);
    BOOL v21 = *(unsigned __int16 *)(v18 + 18) == 6;
    if (!v40)
    {
      BOOL v27 = 1;
      unint64_t v11 = v39;
      goto LABEL_31;
    }
    BOOL v43 = *(unsigned __int16 *)(v18 + 18) == 6;
    __int16 v45 = *(_WORD *)(v18 + 16);
    unint64_t v22 = v50;
    do
    {
      __int16 v23 = (void *)v22[1];
      *(void *)&long long v60 = *(void *)v18 >> 1;
      unint64_t result = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find(v23, (uint64_t *)&v60);
      if (result != -1)
      {
        uint64_t v24 = v23[1];
        if (*(unsigned char *)(v24 + 40 * result + 24) == 17)
        {
          uint64_t v25 = a2;
          do
          {
            uint64_t v26 = v25;
            uint64_t v25 = (void *)v25[1];
          }
          while (v25 && !v26[9]);
          unint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v26 + 6, (void *)(v24 + 40 * result + 32));
          if (result != -1)
          {
            unint64_t v11 = *(unsigned __int8 *)(v26[7] + 16 * result + 8);
            uint64_t v28 = a2;
            do
            {
              uint64_t v29 = v28;
              uint64_t v28 = (void *)v28[1];
              a3 = v29[4];
              if (v28) {
                BOOL v30 = a3 == 0;
              }
              else {
                BOOL v30 = 0;
              }
            }
            while (v30);
            a1 = v42;
            __int16 v19 = v45;
            if (a3 > v11)
            {
              BOOL v21 = 0;
              BOOL v27 = (*(unsigned char *)(v29[5] + 16 * v11 + 12) & 0xFC) == 28;
              a3 = v38;
              goto LABEL_31;
            }
            goto LABEL_53;
          }
        }
      }
      v22 += 3;
    }
    while (v22 != &v50[3 * v40]);
    BOOL v27 = 1;
    unint64_t v11 = v39;
    a3 = v38;
    a1 = v42;
    BOOL v21 = v43;
    __int16 v19 = v45;
    if (!a1[16]) {
      goto LABEL_36;
    }
LABEL_31:
    if (!*(unsigned char *)(**(void **)a1 + 2844)) {
      BOOL v27 = 0;
    }
    if (v27) {
      __int16 v31 = *v20;
    }
    else {
LABEL_36:
    }
      __int16 v31 = 0;
    unint64_t v33 = *(void *)(a5 + 8);
    unint64_t v32 = *(void *)(a5 + 16);
    if (v32 >= v33)
    {
      unint64_t v34 = v32 + 1;
      if (v33 < v32 + 1)
      {
        BOOL v44 = v21;
        __int16 v46 = v19;
        if (*(void *)a5)
        {
          unint64_t v35 = 2 * v33;
          if (!v33) {
            unint64_t v35 = 8;
          }
          if (v35 <= v34) {
            unint64_t v36 = v34;
          }
          else {
            unint64_t v36 = v35;
          }
          unint64_t result = (unint64_t)re::DynamicArray<re::AttributeResolution>::setCapacity((void *)a5, v36);
        }
        else
        {
          unint64_t result = (unint64_t)re::DynamicArray<re::AttributeResolution>::setCapacity((void *)a5, v34);
          ++*(_DWORD *)(a5 + 24);
        }
        BOOL v21 = v44;
        __int16 v19 = v46;
      }
      unint64_t v32 = *(void *)(a5 + 16);
      a1 = v42;
    }
    uint64_t v37 = *(void *)(a5 + 32) + 10 * v32;
    *(_WORD *)uint64_t v37 = v16;
    *(_WORD *)(v37 + 2) = v19;
    *(_WORD *)(v37 + 4) = v11;
    *(_WORD *)(v37 + 6) = v31;
    *(unsigned char *)(v37 + 8) = v21;
    *(void *)(a5 + 16) = v32 + 1;
    ++*(_DWORD *)(a5 + 24);
    ++v15;
  }
  while (v15 != v41);
  return result;
}

unint64_t re::MaterialTechniqueVariant::fillBufferTableLayerLists(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = *(void **)(a2 + 64);
  uint64_t v7 = v6[6];
  unint64_t v8 = *(void *)a3;
  if (v7)
  {
    re::DynamicInlineArray<re::BufferLayer,5ul>::ensureCapacity(v8, a2);
    unint64_t v9 = *(void *)a3;
    uint64_t v10 = a3 + 24 * *(void *)a3;
    *(void *)(v10 + 16) = v7 + 264;
    *(void *)(v10 + 24) = v7 + 88;
    *(_DWORD *)(v10 + 32) = 7;
    unint64_t v8 = v9 + 1;
    *(void *)a3 = v9 + 1;
    ++*(_DWORD *)(a3 + 8);
    unsigned int v6 = *(void **)(a2 + 64);
  }
  uint64_t v11 = v6[7];
  if (v11)
  {
    re::DynamicInlineArray<re::BufferLayer,5ul>::ensureCapacity(v8, a2);
    unint64_t v12 = *(void *)a3;
    uint64_t v13 = a3 + 24 * *(void *)a3;
    *(void *)(v13 + 16) = v11 + 264;
    *(void *)(v13 + 24) = v11 + 88;
    *(_DWORD *)(v13 + 32) = 8;
    unint64_t v8 = v12 + 1;
    *(void *)a3 = v12 + 1;
    ++*(_DWORD *)(a3 + 8);
    unsigned int v6 = *(void **)(a2 + 64);
  }
  uint64_t v14 = v6[9];
  if (v14)
  {
    re::DynamicInlineArray<re::BufferLayer,5ul>::ensureCapacity(v8, a2);
    unint64_t v15 = *(void *)a3;
    uint64_t v16 = a3 + 24 * *(void *)a3;
    *(void *)(v16 + 16) = v14 + 264;
    *(void *)(v16 + 24) = v14 + 88;
    *(_DWORD *)(v16 + 32) = 12;
    unint64_t v8 = v15 + 1;
    *(void *)a3 = v15 + 1;
    ++*(_DWORD *)(a3 + 8);
  }
  uint64_t v17 = *(void *)(*(void *)a1 + 8);
  re::DynamicInlineArray<re::BufferLayer,5ul>::ensureCapacity(v8, a2);
  unint64_t v18 = *(void *)a3;
  uint64_t v19 = a3 + 16 + 24 * *(void *)a3;
  *(void *)uint64_t v19 = v17 + 488;
  *(void *)(v19 + 8) = v17 + 312;
  *(_DWORD *)(v19 + 16) = 5;
  *(void *)a3 = v18 + 1;
  ++*(_DWORD *)(a3 + 8);
  uint64_t v20 = *(void *)(*(void *)(*(void *)a1 + 8) + 16);
  unint64_t result = re::DynamicInlineArray<re::BufferLayer,5ul>::ensureCapacity(v18 + 1, v21);
  unint64_t v23 = *(void *)a3;
  uint64_t v24 = a3 + 16 + 24 * *(void *)a3;
  *(void *)uint64_t v24 = v20 + 512;
  *(void *)(v24 + 8) = v20 + 336;
  *(_DWORD *)(v24 + 16) = 6;
  *(void *)a3 = v23 + 1;
  ++*(_DWORD *)(a3 + 8);
  return result;
}

unint64_t re::Bitset<256>::findFirstBitSet(uint64_t a1, unint64_t a2)
{
  if (a2 > 0xFF) {
    return -1;
  }
  unint64_t v2 = a2 >> 6;
  if ((a2 & 0x3F) == 0) {
    goto LABEL_7;
  }
  unint64_t v3 = *(void *)(a1 + 8 * v2) & (-1 << (a2 & 0x3F));
  if (v3) {
    return __clz(__rbit64(v3)) + (a2 & 0xFFFFFFFFFFFFFFC0);
  }
  if (a2 > 0xBF) {
    return -1;
  }
  ++v2;
LABEL_7:
  uint64_t v5 = 8 * v2;
  for (uint64_t i = -64 * v2; ; i -= 64)
  {
    unint64_t v7 = *(void *)(a1 + v5);
    if (v7) {
      break;
    }
    v5 += 8;
    if (v5 == 32) {
      return -1;
    }
  }
  return __clz(__rbit64(v7)) - i;
}

unint64_t re::MaterialTechniqueVariant::completeResolution(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a5 + 16) = 0;
  ++*(_DWORD *)(a5 + 24);
  uint64_t v19 = 0;
  int v20 = 0;
  unint64_t result = re::MaterialTechniqueVariant::fillBufferTableLayerLists(a1, a4, (uint64_t)&v19);
  uint64_t v10 = *(void *)(a3 + 32);
  if (v10)
  {
    uint64_t v11 = *(void *)(a3 + 40);
    uint64_t v12 = 112 * v10;
    do
    {
      unsigned __int16 v13 = *(_WORD *)(v11 + 16);
      unint64_t result = re::MaterialParameterTableLayers::containsDirectBuffer(*(uint64_t **)(a4 + 64), v13, *(_DWORD *)a3);
      if ((result & 1) == 0)
      {
        uint64_t v18 = v13;
        unint64_t result = re::MaterialTechniqueVariant::resolveBufferArgument((void *)v11, a2, (uint64_t)v21, v19, (uint64_t)&v18, 0);
        if (result) {
          unint64_t result = (unint64_t)re::DynamicArray<re::BufferResolution>::add((_anonymous_namespace_ *)a5, &v18);
        }
      }
      v11 += 112;
      v12 -= 112;
    }
    while (v12);
  }
  uint64_t v14 = *(void *)(a3 + 240);
  if (v14)
  {
    uint64_t v15 = *(void *)(a3 + 248);
    uint64_t v16 = 24 * v14;
    do
    {
      unsigned __int16 v17 = *(_WORD *)(v15 + 16);
      unint64_t result = re::MaterialParameterTableLayers::containsDirectBuffer(*(uint64_t **)(a4 + 64), v17, *(_DWORD *)a3);
      if ((result & 1) == 0)
      {
        uint64_t v18 = v17;
        re::MaterialTechniqueVariant::resolveBufferArgument((void *)v15, a2, (uint64_t)v21, v19, (uint64_t)&v18, 1);
        unint64_t result = (unint64_t)re::DynamicArray<re::BufferResolution>::add((_anonymous_namespace_ *)a5, &v18);
      }
      v15 += 24;
      v16 -= 24;
    }
    while (v16);
  }
  return result;
}

_anonymous_namespace_ *re::DynamicArray<re::BufferResolution>::add(_anonymous_namespace_ *result, void *a2)
{
  unint64_t v3 = result;
  unint64_t v4 = *((void *)result + 1);
  unint64_t v5 = *((void *)result + 2);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)result)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        unint64_t result = (_anonymous_namespace_ *)re::DynamicArray<re::TextureResolution>::setCapacity(result, v10);
      }
      else
      {
        unint64_t result = (_anonymous_namespace_ *)re::DynamicArray<re::TextureResolution>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    unint64_t v5 = *((void *)v3 + 2);
  }
  *(void *)(*((void *)v3 + 4) + 8 * v5) = *a2;
  ++*((void *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

unint64_t re::MaterialTechniqueVariant::fillConstantTableLayerLists(uint64_t **a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a4 = 0;
  ++*(_DWORD *)(a4 + 8);
  *(void *)a5 = 0;
  ++*(_DWORD *)(a5 + 8);
  unint64_t v10 = *(void **)(a3 + 64);
  uint64_t v11 = v10[6];
  if (v11)
  {
    uint64_t v12 = v11 + 24;
    uint64_t v13 = v11 + 152;
    re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(*(void *)a4, (uint64_t)a2);
    unint64_t v14 = *(void *)a4;
    uint64_t v15 = (void *)(a4 + 24 * *(void *)a4);
    uint64_t v15[2] = v13;
    v15[3] = v12;
    uint64_t v15[4] = 8;
    *(void *)a4 = v14 + 1;
    ++*(_DWORD *)(a4 + 8);
    re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(*(void *)a5, v16);
    unint64_t v17 = *(void *)a5;
    uint64_t v18 = (void *)(a5 + 24 * *(void *)a5);
    uint64_t v18[2] = v13;
    v18[3] = v12;
    float32x4_t v18[4] = 8;
    unint64_t v19 = v17 + 1;
    *(void *)a5 = v17 + 1;
    ++*(_DWORD *)(a5 + 8);
    unint64_t v10 = *(void **)(a3 + 64);
  }
  else
  {
    unint64_t v19 = 0;
  }
  uint64_t v20 = v10[10];
  if (v20)
  {
    re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(v19, (uint64_t)a2);
    unint64_t v21 = *(void *)a5;
    unint64_t v22 = (void *)(a5 + 24 * *(void *)a5);
    void v22[2] = v20 + 152;
    v22[3] = v20 + 24;
    _OWORD v22[4] = 11;
    *(void *)a5 = v21 + 1;
    ++*(_DWORD *)(a5 + 8);
    unint64_t v10 = *(void **)(a3 + 64);
  }
  uint64_t v23 = v10[7];
  if (v23)
  {
    uint64_t v24 = v23 + 24;
    uint64_t v25 = v23 + 152;
    re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(*(void *)a4, (uint64_t)a2);
    unint64_t v26 = *(void *)a4;
    BOOL v27 = (void *)(a4 + 24 * *(void *)a4);
    void v27[2] = v25;
    v27[3] = v24;
    v27[4] = 9;
    *(void *)a4 = v26 + 1;
    ++*(_DWORD *)(a4 + 8);
    re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(*(void *)a5, v28);
    unint64_t v29 = *(void *)a5;
    BOOL v30 = (void *)(a5 + 24 * *(void *)a5);
    uint64_t v30[2] = v25;
    v30[3] = v24;
    unsigned int v30[4] = 9;
    *(void *)a5 = v29 + 1;
    ++*(_DWORD *)(a5 + 8);
    unint64_t v10 = *(void **)(a3 + 64);
  }
  uint64_t v31 = v10[9];
  if (v31)
  {
    uint64_t v32 = v31 + 24;
    uint64_t v33 = v31 + 152;
    re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(*(void *)a4, (uint64_t)a2);
    unint64_t v34 = *(void *)a4;
    unint64_t v35 = (void *)(a4 + 24 * *(void *)a4);
    v35[2] = v33;
    v35[3] = v32;
    _OWORD v35[4] = 10;
    *(void *)a4 = v34 + 1;
    ++*(_DWORD *)(a4 + 8);
    re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(*(void *)a5, v36);
    unint64_t v37 = *(void *)a5;
    unint64_t v38 = (void *)(a5 + 24 * *(void *)a5);
    _OWORD v38[2] = v33;
    v38[3] = v32;
    v38[4] = 10;
    *(void *)a5 = v37 + 1;
    ++*(_DWORD *)(a5 + 8);
    unint64_t v10 = *(void **)(a3 + 64);
  }
  unsigned int v39 = (uint64_t *)v10[8];
  if (v39)
  {
    uint64_t v40 = *v39;
    re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(*(void *)a4, (uint64_t)a2);
    unint64_t v41 = *(void *)a4;
    __int16 v42 = (void *)(a4 + 24 * *(void *)a4);
    unsigned char v42[2] = v40;
    v42[3] = 0;
    v42[4] = 13;
    *(void *)a4 = v41 + 1;
    ++*(_DWORD *)(a4 + 8);
    re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(*(void *)a5, v43);
    unint64_t v44 = *(void *)a5;
    __int16 v45 = (void *)(a5 + 24 * *(void *)a5);
    uint64_t v45[2] = v40;
    v45[3] = 0;
    v45[4] = 13;
    *(void *)a5 = v44 + 1;
    ++*(_DWORD *)(a5 + 8);
  }
  uint64_t v46 = (*a1)[1];
  uint64_t v47 = v46 + 248;
  uint64_t v48 = v46 + 376;
  re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(*(void *)a4, (uint64_t)a2);
  uint64_t v49 = a4 + 16;
  unint64_t v50 = *(void *)a4;
  uint64_t v51 = (void *)(a4 + 16 + 24 * *(void *)a4);
  *uint64_t v51 = v48;
  v51[1] = v47;
  v51[2] = 6;
  *(void *)a4 = v50 + 1;
  ++*(_DWORD *)(a4 + 8);
  re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(*(void *)a5, v52);
  uint64_t v54 = a5 + 16;
  unint64_t v55 = *(void *)a5;
  __int16 v56 = (void *)(a5 + 16 + 24 * *(void *)a5);
  *__int16 v56 = v48;
  v56[1] = v47;
  v56[2] = 6;
  *(void *)a5 = v55 + 1;
  ++*(_DWORD *)(a5 + 8);
  if (*a2 == 2)
  {
    uint64_t v66 = **a1;
    uint64_t v58 = v66 + 1320;
    uint64_t v67 = v66 + 1448;
    re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(*(void *)a4, v53);
    unint64_t v68 = *(void *)a4;
    unsigned int v69 = (void *)(v49 + 24 * *(void *)a4);
    *unsigned int v69 = v67;
    v69[1] = v58;
    v69[2] = 5;
    *(void *)a4 = v68 + 1;
    ++*(_DWORD *)(a4 + 8);
    re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(*(void *)a5, v70);
    unint64_t v63 = *(void *)a5;
    uint64_t v64 = v54 + 24 * *(void *)a5;
    *(void *)uint64_t v64 = v67;
    int v65 = 5;
    goto LABEL_16;
  }
  if (*a2 == 1)
  {
    uint64_t v57 = **a1;
    uint64_t v58 = v57 + 192;
    uint64_t v59 = v57 + 320;
    re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(*(void *)a4, v53);
    unint64_t v60 = *(void *)a4;
    long long v61 = (void *)(v49 + 24 * *(void *)a4);
    *long long v61 = v59;
    v61[1] = v58;
    v61[2] = 4;
    *(void *)a4 = v60 + 1;
    ++*(_DWORD *)(a4 + 8);
    re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(*(void *)a5, v62);
    unint64_t v63 = *(void *)a5;
    uint64_t v64 = v54 + 24 * *(void *)a5;
    *(void *)uint64_t v64 = v59;
    int v65 = 4;
LABEL_16:
    *(void *)(v64 + 8) = v58;
    *(_DWORD *)(v64 + 16) = v65;
    *(_DWORD *)(v64 + 2ArcSharedObject::ArcSharedObject(this, 0) = 0;
    *(void *)a5 = v63 + 1;
    ++*(_DWORD *)(a5 + 8);
  }
  uint64_t v71 = *(void *)((*a1)[1] + 16);
  uint64_t v72 = v71 + 272;
  uint64_t v73 = v71 + 400;
  re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(*(void *)a4, v53);
  unint64_t v74 = *(void *)a4;
  uint64_t v75 = (void *)(v49 + 24 * *(void *)a4);
  *uint64_t v75 = v73;
  v75[1] = v72;
  v75[2] = 7;
  *(void *)a4 = v74 + 1;
  ++*(_DWORD *)(a4 + 8);
  unint64_t result = re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(*(void *)a5, v76);
  unint64_t v78 = *(void *)a5;
  unint64_t v79 = (void *)(v54 + 24 * *(void *)a5);
  *unint64_t v79 = v73;
  v79[1] = v72;
  v79[2] = 7;
  *(void *)a5 = v78 + 1;
  ++*(_DWORD *)(a5 + 8);
  return result;
}

uint64_t re::MaterialTechniqueVariant::resolveConstantArgument(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6, int a7, __n128 a8)
{
  v104[3] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF969D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF969D0))
  {
    re::Defaults::BOOLValue((re::Defaults *)"enableShaderDebugLogs", v83, buf);
    if (buf[0]) {
      char v84 = buf[1];
    }
    else {
      char v84 = 0;
    }
    byte_26AF969C1 = v84;
    __cxa_guard_release(&qword_26AF969D0);
  }
  uint64_t v97 = a3;
  if ((a7 & 1) == 0)
  {
    uint64_t v15 = *a1;
    uint64_t v16 = (re::MaterialParameterTable *)((*a1)[1] + 224);
    v89[0] = *(void *)a2 >> 1;
    re::MaterialParameterTable::handle(v16, v89, (uint64_t)&v93);
    v89[0] = 0;
    if ((BYTE4(v94) & 7) != 0)
    {
      *(_DWORD *)long long buf = 1;
      *(void *)&uint8_t buf[8] = v93;
      *(_OWORD *)&uint8_t buf[16] = v94;
      char v17 = v95;
    }
    else
    {
      uint64_t v18 = (re::MaterialParameterTable *)(*(void *)(v15[1] + 16) + 248);
      *(void *)uint64_t v98 = *(void *)a2 >> 1;
      re::MaterialParameterTable::handle(v18, (uint64_t *)v98, (uint64_t)buf);
      uint64_t v19 = *(void *)buf;
      long long v94 = *(_OWORD *)&buf[8];
      LOBYTE(v95) = buf[24];
      *(void *)uint64_t v98 = 0;
      if ((buf[12] & 7) == 0)
      {
        *(_DWORD *)long long buf = 0;
        *(void *)&unsigned char buf[24] = 0;
        LOBYTE(v102) = 0;
        *(void *)&uint8_t buf[8] = 0;
        *(void *)&buf[13] = 0;
LABEL_8:
        uint64_t v20 = re::StringID::StringID((re::StringID *)v103, (const StringID *)a2);
        int v21 = buf[20] & 7;
        re::StringID::destroyString(v20);
        if (v21) {
          return 0;
        }
        goto LABEL_10;
      }
      *(_DWORD *)long long buf = 2;
      *(void *)&uint8_t buf[8] = v19;
      *(_OWORD *)&uint8_t buf[16] = v94;
      char v17 = v95;
    }
    LOBYTE(v102) = v17;
    goto LABEL_8;
  }
LABEL_10:
  uint64_t v23 = **a1;
  uint64_t v24 = *(void **)(v23 + 2712);
  uint64_t v25 = *(void *)(v23 + 2704);
  if (v25)
  {
    uint64_t v26 = 8 * v25;
    BOOL v27 = v24;
    while (*v27 != *(void *)a2 >> 1)
    {
      ++v27;
      v26 -= 8;
      if (!v26)
      {
        BOOL v27 = &v24[v25];
        break;
      }
    }
  }
  else
  {
    BOOL v27 = v24;
  }
  uint64_t v28 = v27 - v24;
  BOOL v29 = v28 == v25;
  if (v28 == v25) {
    BOOL v30 = a4;
  }
  else {
    BOOL v30 = a5;
  }
  uint64_t v31 = *v30;
  uint64_t v32 = v30[1];
  char v33 = !v29;
  uint64_t v96 = 0;
  long long v94 = 0uLL;
  uint64_t v92 = 0;
  uint64_t v93 = 0;
  int v95 = 0;
  v89[1] = 0;
  unint64_t v90 = 0;
  v89[0] = 0;
  int v91 = 0;
  if (a7)
  {
    unint64_t v34 = *(void *)(a2 + 72);
    if (!v34)
    {
      char v88 = 0;
      unsigned __int32 v35 = *(_DWORD *)(a2 + 28);
      v87.n128_u32[2] = 0;
      v87.n128_u32[3] = v35;
      uint64_t v36 = (re *)re::scanUntil<re::MetalTypeInfo,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::ResolvedFillCommand,re::ConstantLayer,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_0 &>(a2 + 24, v31, v32, &v97, (uint64_t)&v87);
      if (v36)
      {
        if (v88) {
          unint64_t v37 = v89;
        }
        else {
          unint64_t v37 = &v93;
        }
        a8 = re::DynamicArray<re::ecs2::BlendShapeMeshWeightRange>::add((uint64_t)v37, &v87);
        goto LABEL_80;
      }
      if (*(void *)(a3 + 96))
      {
        *(void *)long long buf = *(void *)(a2 + 24);
        *(_DWORD *)&uint8_t buf[8] = *(_DWORD *)(a2 + 32);
        re::StringID::StringID((re::StringID *)&buf[16], (const StringID *)(a2 + 40));
        LODWORD(v102) = *(_DWORD *)(a2 + 56);
        WORD2(v102) = *(_WORD *)(a2 + 60);
        re::FixedArray<re::MetalTypeInfo>::FixedArray(v103, a2 + 64);
        v104[0] = *(void *)(a2 + 88);
        *(void *)((char *)v104 + 6) = *(void *)(a2 + 94);
        uint64_t v57 = *(uint64_t (****)(void))(a3 + 96);
        *(void *)uint64_t v98 = *(void *)&buf[16] >> 1;
        uint64_t v58 = (unsigned __int8 *)(**v57)();
        if (v58)
        {
          uint64_t v59 = v58;
          unsigned __int32 v60 = *(unsigned __int16 *)v58;
          v87.n128_u32[0] = 12;
          v87.n128_u32[1] = v60;
          unsigned __int32 v61 = v87.n128_u32[3];
          if (v87.n128_u32[3] != v58[2])
          {
            uint64_t v62 = *re::graphicsLogObjects((re *)v58);
            if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
            {
              int v63 = v59[2];
              *(_DWORD *)uint64_t v98 = 136315650;
              *(void *)&_OWORD v98[4] = *(void *)&buf[24];
              *(_WORD *)&v98[12] = 1024;
              *(_DWORD *)&v98[14] = v61;
              __int16 v99 = 1024;
              int v100 = v63;
              _os_log_impl(&dword_233120000, v62, OS_LOG_TYPE_DEFAULT, "Shader constant '%s' expects %d bytes, but the material parameter provides %d bytes.", v98, 0x18u);
            }
          }
          re::DynamicArray<re::ecs2::BlendShapeMeshWeightRange>::add((uint64_t)&v93, &v87);
          re::FixedArray<re::MetalTypeInfo>::deinit(v103);
          re::StringID::destroyString((re::StringID *)&buf[16]);
          goto LABEL_80;
        }
        re::FixedArray<re::MetalTypeInfo>::deinit(v103);
        re::StringID::destroyString((re::StringID *)&buf[16]);
        BOOL v64 = *(void *)(a3 + 96) == 0;
      }
      else
      {
        BOOL v64 = 1;
      }
      if (!v64 || byte_26AF969C1)
      {
        int v65 = *re::graphicsLogObjects(v36);
        if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
        {
          uint64_t v81 = *(void *)(a2 + 8);
          uint64_t v82 = *(void *)(a2 + 48);
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = v81;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v82;
          _os_log_error_impl(&dword_233120000, v65, OS_LOG_TYPE_ERROR, "Found no parameter definition for shader constant '%s::%s'", buf, 0x16u);
        }
      }
LABEL_80:
      uint64_t v56 = *((void *)&v94 + 1);
      if (*((void *)&v94 + 1))
      {
LABEL_81:
        uint64_t v66 = v96;
        uint64_t v67 = &v96[4 * v56];
        LODWORD(v56) = 0;
        do
        {
          unsigned int v68 = *v66;
          v66 += 4;
          LODWORD(v56) = v56 | (1 << v68);
        }
        while (v66 != v67);
        goto LABEL_83;
      }
LABEL_50:
      uint64_t v22 = 0;
      goto LABEL_106;
    }
  }
  else
  {
    unint64_t v34 = *(void *)(a2 + 72);
    if (!v34)
    {
      BOOL v51 = 1;
LABEL_49:
      if (!v51) {
        goto LABEL_51;
      }
      goto LABEL_50;
    }
  }
  char v85 = v33;
  uint64_t v86 = a6;
  unint64_t v38 = *(void **)(a2 + 80);
  unsigned int v39 = &v38[10 * v34];
  do
  {
    v98[16] = 0;
    *(void *)&v98[8] = *v38;
    if (re::scanUntil<re::MetalTypeInfo,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::ResolvedFillCommand,re::ConstantLayer,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_0 &>((uint64_t)v38, v31, v32, &v97, (uint64_t)v98))
    {
      if (v98[16]) {
        uint64_t v40 = v89;
      }
      else {
        uint64_t v40 = &v93;
      }
      a8 = re::DynamicArray<re::ecs2::BlendShapeMeshWeightRange>::add((uint64_t)v40, (__n128 *)v98);
      goto LABEL_45;
    }
    unint64_t v41 = *(uint64_t (****)(void, unsigned char *))(a3 + 96);
    if (!v41) {
      goto LABEL_42;
    }
    *(void *)long long buf = v38[2] >> 1;
    __int16 v42 = (unsigned __int8 *)(**v41)(v41, buf);
    if (v42)
    {
      uint64_t v43 = v42;
      *(_DWORD *)uint64_t v98 = 12;
      *(_DWORD *)&_OWORD v98[4] = *(unsigned __int16 *)v42;
      int v44 = *(_DWORD *)&v98[12];
      if (*(_DWORD *)&v98[12] != v42[2])
      {
        __int16 v45 = *re::graphicsLogObjects((re *)v42);
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v46 = v38[3];
          int v47 = v43[2];
          *(_DWORD *)long long buf = 136315650;
          *(void *)&uint8_t buf[4] = v46;
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v44;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v47;
          _os_log_impl(&dword_233120000, v45, OS_LOG_TYPE_DEFAULT, "Shader constant '%s' expects %d bytes, but the material parameter provides %d bytes.", buf, 0x18u);
        }
      }
      a8 = re::DynamicArray<re::ecs2::BlendShapeMeshWeightRange>::add((uint64_t)&v93, (__n128 *)v98);
      goto LABEL_45;
    }
    if (!*(void *)(a3 + 96))
    {
LABEL_42:
      if (!byte_26AF969C1) {
        goto LABEL_45;
      }
    }
    uint64_t v48 = *re::graphicsLogObjects(0);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      uint64_t v49 = v38[3];
      uint64_t v50 = *(void *)(a2 + 48);
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = v49;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v50;
      _os_log_error_impl(&dword_233120000, v48, OS_LOG_TYPE_ERROR, "Found no parameter definition for shader constant '%s::%s'", buf, 0x16u);
    }
LABEL_45:
    v38 += 10;
  }
  while (v38 != v39);
  unint64_t v34 = *((void *)&v94 + 1);
  BOOL v51 = v90 == 0;
  a6 = v86;
  char v33 = v85;
  if (!*((void *)&v94 + 1)) {
    goto LABEL_49;
  }
LABEL_51:
  unint64_t v52 = 126 - 2 * __clz(v34);
  if (v34) {
    uint64_t v53 = v52;
  }
  else {
    uint64_t v53 = 0;
  }
  std::__introsort<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *,false>(v96, &v96[4 * v34], v53, 1);
  unint64_t v54 = 126 - 2 * __clz(v90);
  if (v90) {
    uint64_t v55 = v54;
  }
  else {
    uint64_t v55 = 0;
  }
  std::__introsort<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *,false>(v92, &v92[4 * v90], v55, 1);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)&v93, (uint64_t)buf);
  if (*(void *)buf && v102) {
    (*(void (**)(void))(**(void **)buf + 40))(*(void *)buf);
  }
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v89, (uint64_t)buf);
  if (*(void *)buf && v102) {
    (*(void (**)(void))(**(void **)buf + 40))(*(void *)buf);
  }
  uint64_t v56 = *((void *)&v94 + 1);
  if (*((void *)&v94 + 1)) {
    goto LABEL_81;
  }
LABEL_83:
  if (v90)
  {
    unsigned int v69 = v92;
    unint64_t v70 = 16 * v90;
    do
    {
      unsigned int v71 = *v69;
      v69 += 4;
      LODWORD(v56) = v56 | (1 << v71);
      v70 -= 16;
    }
    while (v70);
  }
  unint64_t v72 = __clz(__rbit64((unsigned __int16)v56));
  BOOL v74 = v72 >= 0x10 || ((unsigned __int16)v56 & (v56 - 1)) != 0 || (unsigned __int16)v56 == 0;
  *(_DWORD *)(a6 + 10ArcSharedObject::ArcSharedObject(this, 0) = *(_DWORD *)(a2 + 28);
  *(_WORD *)(a6 + 98) = *(_DWORD *)(a2 + 32);
  if (v74) {
    char v75 = -1;
  }
  else {
    char v75 = v72;
  }
  *(_WORD *)(a6 + 96) = *(_WORD *)(a2 + 16);
  *(unsigned char *)(a6 + 106) = v75;
  *(_WORD *)(a6 + 104) = v56;
  *(unsigned char *)(a6 + 107) = v33;
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(a6 + 8, (uint64_t)&v93);
  uint64_t v76 = *(void *)(a6 + 24);
  if (v76)
  {
    if (16 * v76)
    {
      MurmurHash3_x64_128(*(void *)(a6 + 40), 16 * v76, 0, (unint64_t *)buf);
      uint64_t v77 = (*(void *)&buf[8] + (*(void *)buf << 6) + (*(void *)buf >> 2) - 0x61C8864680B583E9) ^ *(void *)buf;
    }
    else
    {
      uint64_t v77 = 0;
    }
    *(void *)a6 = v77;
  }
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(a6 + 56, (uint64_t)v89);
  uint64_t v78 = *(void *)(a6 + 72);
  if (v78)
  {
    if (16 * v78)
    {
      MurmurHash3_x64_128(*(void *)(a6 + 88), 16 * v78, 0, (unint64_t *)buf);
      uint64_t v79 = (*(void *)&buf[8] + (*(void *)buf << 6) + (*(void *)buf >> 2) - 0x61C8864680B583E9) ^ *(void *)buf;
    }
    else
    {
      uint64_t v79 = 0;
    }
    *(void *)(a6 + 48) = v79;
  }
  uint64_t v22 = 1;
LABEL_106:
  if (v89[0] && v92) {
    (*(void (**)(__n128))(*(void *)v89[0] + 40))(a8);
  }
  if (v93 && v96) {
    (*(void (**)(__n128))(*(void *)v93 + 40))(a8);
  }
  return v22;
}

uint64_t re::scanUntil<re::MetalTypeInfo,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::ResolvedFillCommand,re::ConstantLayer,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_0 &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  if (!a3) {
    return 0;
  }
  uint64_t v7 = (_DWORD *)(a2 + 24 * a3);
  for (uint64_t i = (_DWORD *)(a2 + 16); ; i += 6)
  {
    unint64_t v10 = i - 4;
    unint64_t v9 = (uint64_t (***)(void, unsigned char *))*((void *)i - 2);
    *(void *)long long buf = *(void *)(a1 + 16) >> 1;
    uint64_t v11 = (unsigned __int8 *)(**v9)(v9, buf);
    if (v11) {
      break;
    }
    uint64_t v12 = (void *)*((void *)i - 1);
    if (v12)
    {
      *(void *)long long buf = *(void *)(a1 + 16) >> 1;
      uint64_t v13 = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find(v12, (uint64_t *)buf);
      if (v13 != -1)
      {
        uint64_t v14 = v12[1];
        uint64_t v15 = v14 + 40 * v13;
        unsigned int v18 = *(unsigned __int8 *)(v15 + 24);
        char v17 = (unsigned __int8 *)(v15 + 24);
        unint64_t v16 = v18;
        uint64_t v19 = *a4;
        if (*(void *)(*a4 + 160) > (unint64_t)v18)
        {
          unint64_t v20 = *(unsigned __int8 *)(*(void *)(v19 + 152) + v16);
          if (v20 <= 0x14)
          {
            int v21 = (re::WeakStringID *)(v14 + 40 * v13 + 32);
            uint64_t v22 = (unsigned __int8 *)(***(uint64_t (****)(void, re::WeakStringID *))(v19 + 8 * v20))(*(void *)(v19 + 8 * v20), v21);
            if (v22)
            {
              unint64_t v41 = *(void *)(*a4 + 160);
              if (v41 <= v16)
              {
                re::internal::assertLog((re::internal *)6, v23, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v16, v41);
                _os_crash();
                __break(1u);
              }
              __int16 v42 = v22;
              *(_DWORD *)a5 = *(unsigned __int8 *)(*(void *)(*a4 + 152) + v16);
              *(_DWORD *)(a5 + 4) = *(unsigned __int16 *)v22;
              if (*(_DWORD *)(a5 + 12) != v22[2])
              {
                uint64_t v43 = *re::graphicsLogObjects((re *)v22);
                if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v44 = *(void *)(a1 + 24);
                  int v45 = *(_DWORD *)(a5 + 12);
                  uint64_t v46 = re::s_materialTableIDMappings[*v17];
                  int v47 = re::WeakStringID::debugStr(v21);
                  int v48 = v42[2];
                  *(_DWORD *)long long buf = 136316162;
                  *(void *)&uint8_t buf[4] = v44;
                  __int16 v51 = 1024;
                  *(_DWORD *)unint64_t v52 = v45;
                  *(_WORD *)&v52[4] = 2080;
                  *(void *)&v52[6] = v46;
                  *(_WORD *)&v52[14] = 2080;
                  *(void *)&v52[16] = v47;
                  __int16 v53 = 1024;
                  int v54 = v48;
                  unint64_t v38 = "Shader constant '%s' expects %d bytes, but the shader binding with struct '%s' and member hash '"
                        "%s' provides %d bytes.";
                  unsigned int v39 = v43;
                  uint32_t v40 = 44;
LABEL_45:
                  _os_log_impl(&dword_233120000, v39, OS_LOG_TYPE_DEFAULT, v38, buf, v40);
                }
              }
              return 1;
            }
            uint64_t v24 = *re::graphicsLogObjects(0);
            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
            {
              uint64_t v25 = re::s_materialTableIDMappings[*v17];
              if (*(void *)v21 == 0x7FFFFFFFFFFFFFFFLL)
              {
                uint64_t v26 = 0;
              }
              else if (*(void *)v21)
              {
                uint64_t v26 = re::WeakStringID::debugStr(void)const::msg;
                snprintf(re::WeakStringID::debugStr(void)const::msg, 0x50uLL, "%llu", *(void *)v21);
              }
              else
              {
                uint64_t v26 = "";
              }
              uint64_t v27 = *(void *)(a1 + 24);
              *(_DWORD *)long long buf = 136315650;
              *(void *)&uint8_t buf[4] = v25;
              __int16 v51 = 2080;
              *(void *)unint64_t v52 = v26;
              *(_WORD *)&v52[8] = 2080;
              *(void *)&v52[10] = v27;
              _os_log_error_impl(&dword_233120000, v24, OS_LOG_TYPE_ERROR, "Invalid binding: '%s.%s' for shader constant '%s'", buf, 0x20u);
            }
          }
        }
      }
    }
    if (v10 + 6 == v7) {
      return 0;
    }
  }
  BOOL v29 = v11;
  *(_DWORD *)a5 = *i;
  *(_DWORD *)(a5 + 4) = *(unsigned __int16 *)v11;
  if (*(_DWORD *)(a5 + 12) == v11[2]) {
    return 1;
  }
  unsigned int v30 = v11[3];
  int v31 = *(unsigned __int16 *)(a1 + 36);
  if (v30 > 0x20)
  {
    if (v30 == 33)
    {
      if (v31 != 18) {
        goto LABEL_34;
      }
    }
    else if (v30 != 34 || v31 != 19)
    {
LABEL_34:
      if (byte_26AF969C1)
      {
        unint64_t v34 = *re::graphicsLogObjects((re *)v11);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v35 = *(void *)(a1 + 24);
          int v36 = *(_DWORD *)(a5 + 12);
          int v37 = v29[2];
          *(_DWORD *)long long buf = 136315650;
          *(void *)&uint8_t buf[4] = v35;
          __int16 v51 = 1024;
          *(_DWORD *)unint64_t v52 = v36;
          *(_WORD *)&v52[4] = 1024;
          *(_DWORD *)&v52[6] = v37;
          unint64_t v38 = "Shader constant '%s' expects %d bytes, but the material parameter provides %d bytes and cannot be downcast";
          unsigned int v39 = v34;
          uint32_t v40 = 24;
          goto LABEL_45;
        }
      }
      return 1;
    }
  }
  else if (v30 == 1)
  {
    if (v31 != 16) {
      goto LABEL_34;
    }
  }
  else if (v30 != 32 || v31 != 17)
  {
    goto LABEL_34;
  }
  uint64_t result = 1;
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

double anonymous namespace'::combineFillCommands(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    unint64_t v5 = *(__n128 **)(a2 + 32);
    __n128 v8 = *v5;
    if (v2 != 1)
    {
      unint64_t v6 = v5 + 1;
      do
      {
        if (v8.n128_u32[0] == v6->n128_u32[0]
          && __PAIR64__(v8.n128_u32[2] + v8.n128_u32[3], v8.n128_u32[3] + v8.n128_u32[1]) == *(unint64_t *)((char *)v6->n128_u64 + 4))
        {
          v8.n128_u32[3] += v6->n128_u32[3];
        }
        else
        {
          re::DynamicArray<re::ecs2::BlendShapeMeshWeightRange>::add(a1, &v8);
          __n128 v8 = *v6;
          unint64_t v5 = *(__n128 **)(a2 + 32);
          uint64_t v2 = *(void *)(a2 + 16);
        }
        ++v6;
      }
      while (v6 != &v5[v2]);
    }
    *(void *)&double result = re::DynamicArray<re::ecs2::BlendShapeMeshWeightRange>::add(a1, &v8).n128_u64[0];
  }
  return result;
}

uint64_t re::MaterialTechniqueVariant::completeResolution(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  re::DynamicArray<re::ConstantResolution>::clear(a5);
  uint64_t v27 = 0;
  int v28 = 0;
  uint64_t v24 = 0;
  int v25 = 0;
  uint64_t result = re::MaterialTechniqueVariant::fillConstantTableLayerLists(a1, (_DWORD *)a3, a4, (uint64_t)&v27, (uint64_t)&v24);
  uint64_t v9 = *(void *)(a3 + 32);
  if (v9)
  {
    uint64_t v10 = *(void *)(a3 + 40);
    uint64_t v11 = 112 * v9;
    do
    {
      uint64_t result = re::MaterialParameterTableLayers::containsDirectBuffer(*(uint64_t **)(a4 + 64), *(unsigned __int16 *)(v10 + 16), *(_DWORD *)a3);
      if ((result & 1) == 0)
      {
        int v17 = 0;
        memset(v16, 0, sizeof(v16));
        long long v18 = 0u;
        memset(v19, 0, 28);
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        __int16 v22 = 0;
        __int16 v23 = 255;
        v15[0] = (uint64_t)&v29;
        v15[1] = v27;
        v14[0] = (uint64_t)&v26;
        v14[1] = v24;
        if (re::MaterialTechniqueVariant::resolveConstantArgument(a1, v10, a2, v15, v14, (uint64_t)v16, 0, (__n128)0))re::DynamicArray<re::ConstantResolution>::add(a5, (uint64_t)v16); {
        if (v19[0])
        }
        {
          if (v20) {
            (*(void (**)(void))(*(void *)v19[0] + 40))();
          }
          uint64_t v20 = 0;
          memset(v19, 0, 24);
          ++LODWORD(v19[3]);
        }
        uint64_t result = *((void *)&v16[0] + 1);
        if (*((void *)&v16[0] + 1))
        {
          if ((void)v18) {
            uint64_t result = (*(uint64_t (**)(void))(**((void **)&v16[0] + 1) + 40))();
          }
        }
      }
      v10 += 112;
      v11 -= 112;
    }
    while (v11);
  }
  return result;
}

uint64_t re::DynamicArray<re::ConstantResolution>::clear(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 16);
  *(void *)(result + 16) = 0;
  if (v2)
  {
    uint64_t v3 = 112 * v2;
    uint64_t v4 = *(void *)(result + 32) + 56;
    do
    {
      re::DynamicArray<unsigned long>::deinit(v4);
      uint64_t result = re::DynamicArray<unsigned long>::deinit(v4 - 48);
      v4 += 112;
      v3 -= 112;
    }
    while (v3);
  }
  ++*(_DWORD *)(v1 + 24);
  return result;
}

uint64_t re::DynamicArray<re::ConstantResolution>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)a1)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        re::DynamicArray<re::ConstantResolution>::setCapacity((void *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::ConstantResolution>::setCapacity((void *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    unint64_t v5 = *(void *)(a1 + 16);
  }
  uint64_t v11 = *(void *)(a1 + 32) + 112 * v5;
  *(void *)uint64_t v11 = *(void *)a2;
  re::DynamicArray<re::GeomCell4>::DynamicArray(v11 + 8, (uint64_t *)(a2 + 8));
  *(void *)(v11 + 48) = *(void *)(a2 + 48);
  uint64_t result = re::DynamicArray<re::GeomCell4>::DynamicArray(v11 + 56, (uint64_t *)(a2 + 56));
  uint64_t v13 = *(void *)(a2 + 96);
  *(_DWORD *)(v11 + 104) = *(_DWORD *)(a2 + 104);
  *(void *)(v11 + 96) = v13;
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

unint64_t createSamplerLayerList(const re::MaterialTechnique *a1, const re::DrawCall *a2, uint64_t a3)
{
  unint64_t v6 = *(void **)(a3 + 64);
  unint64_t v7 = v6[6];
  if (v7)
  {
    re::DynamicInlineArray<re::SamplerLayer,12ul>::ensureCapacity(0, (uint64_t)a2);
    *((void *)a1 + 2) = v7 + 792;
    *((void *)a1 + 3) = v7 + 616;
    *((void *)a1 + 4) = v7 + 904;
    *((void *)a1 + 5) = v7 + 968;
    *((void *)a1 + 6) = 3;
    int v8 = 1;
    *(void *)a1 = 1;
    unint64_t v6 = *(void **)(a3 + 64);
    unint64_t v7 = 1;
  }
  else
  {
    int v8 = 0;
  }
  uint64_t v9 = v6[7];
  if (v9)
  {
    re::DynamicInlineArray<re::SamplerLayer,12ul>::ensureCapacity(v7, (uint64_t)a2);
    unint64_t v10 = (void *)((char *)a1 + 40 * v7);
    void v10[2] = v9 + 792;
    void v10[3] = v9 + 616;
    void v10[4] = v9 + 904;
    v10[5] = v9 + 968;
    void v10[6] = 4;
    ++v7;
    ++v8;
    unint64_t v6 = *(void **)(a3 + 64);
  }
  uint64_t v11 = v6[9];
  if (v11)
  {
    re::DynamicInlineArray<re::SamplerLayer,12ul>::ensureCapacity(v7, (uint64_t)a2);
    uint64_t v12 = (void *)((char *)a1 + 40 * v7);
    void v12[2] = v11 + 792;
    unint64_t v12[3] = v11 + 616;
    v12[4] = v11 + 904;
    _OWORD v12[5] = v11 + 968;
    v12[6] = 5;
    ++v7;
    ++v8;
  }
  uint64_t v13 = *((void *)a2 + 1);
  re::DynamicInlineArray<re::SamplerLayer,12ul>::ensureCapacity(v7, (uint64_t)a2);
  uint64_t v14 = v13 + 1192;
  uint64_t v15 = v13 + 1128;
  uint64_t v16 = v13 + 840;
  uint64_t v17 = v13 + 1016;
  long long v18 = (char *)a1 + 40 * v7;
  *((void *)v18 + 2) = v17;
  *((void *)v18 + 3) = v16;
  *((void *)v18 + 4) = v15;
  *((void *)v18 + 5) = v14;
  *((_DWORD *)v18 + 12) = 1;
  uint64_t v19 = *(void *)(*((void *)a2 + 1) + 16);
  unint64_t result = re::DynamicInlineArray<re::SamplerLayer,12ul>::ensureCapacity(v7 + 1, v20);
  *((void *)v18 + 7) = v19 + 1040;
  *((void *)v18 + 8) = v19 + 864;
  *((void *)v18 + 9) = v19 + 1152;
  *((void *)v18 + 1ArcSharedObject::ArcSharedObject(this, 0) = v19 + 1216;
  *((_DWORD *)v18 + 22) = 2;
  *(void *)a1 = v7 + 2;
  *((_DWORD *)a1 + 2) = v8 + 2;
  return result;
}

double re::MaterialTechniqueVariant::completeResolution(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v90 = *MEMORY[0x263EF8340];
  *(void *)(a5 + 16) = 0;
  ++*(_DWORD *)(a5 + 24);
  unsigned int v85 = 0;
  long long v83 = 0u;
  long long v84 = 0u;
  uint64_t v86 = 0x7FFFFFFFLL;
  createSamplerLayerList((const re::MaterialTechnique *)&v81, *(const re::DrawCall **)a1, a4);
  uint64_t v78 = v81;
  uint64_t v76 = a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = *(void *)(v7 + 24);
  if (v9) {
    LODWORD(v9) = *(unsigned __int8 *)(v9 + 332);
  }
  if (!(*(unsigned __int8 *)(v8 + 332) | v9) || (uint64_t v10 = *(void *)(a3 + 120)) == 0)
  {
    LOBYTE(v11) = 0;
    goto LABEL_56;
  }
  int v11 = 0;
  uint64_t v12 = *(const StringID **)(a3 + 128);
  unint64_t v72 = &v12[2 * v10];
  uint64_t v13 = &v82[5 * v81];
  do
  {
    uint64_t v14 = *(void *)(v76 + 8);
    uint64_t v15 = *(void *)(v14 + 24);
    if (v15) {
      LODWORD(v15) = *(unsigned __int8 *)(v15 + 332);
    }
    unsigned int v16 = *(unsigned __int8 *)(*(void *)(v14 + 16) + 332);
    if (v16 <= v15) {
      unsigned int v16 = v15;
    }
    if (v16 <= v11) {
      break;
    }
    uint64_t v80 = 0;
    if (!v78) {
      goto LABEL_39;
    }
    int v73 = v11;
    uint64_t v17 = v82;
    long long v18 = (void *)(a3 + 144);
    while (1)
    {
      re::StringID::StringID((re::StringID *)&v87, v12);
      if (*(void *)(a3 + 192)
        && re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::containsKey((uint64_t)v18, &v87))
      {
        uint64_t v19 = v13;
        if (*v18)
        {
          unint64_t v20 = v87;
          unint64_t v21 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * ((v20 >> 31) ^ (v20 >> 1))) ^ ((0xBF58476D1CE4E5B9
                                                                       * ((v20 >> 31) ^ (v20 >> 1))) >> 27));
          uint64_t v22 = *(void *)(a3 + 160);
          uint64_t v23 = *(unsigned int *)(*(void *)(a3 + 152) + 4 * ((v21 ^ (v21 >> 31)) % *(unsigned int *)(a3 + 168)));
          if (v23 == 0x7FFFFFFF)
          {
LABEL_22:
            uint64_t v23 = 0x7FFFFFFFLL;
          }
          else
          {
            uint64_t v24 = v88;
            while (1)
            {
              if ((*(void *)(v22 + 40 * v23 + 8) ^ v20) <= 1)
              {
                int v25 = *(const char **)(v22 + 40 * v23 + 16);
                if (v25 == v24 || !strcmp(v25, v24)) {
                  break;
                }
              }
              uint64_t v23 = *(_DWORD *)(v22 + 40 * v23) & 0x7FFFFFFF;
              if (v23 == 0x7FFFFFFF) {
                goto LABEL_22;
              }
            }
          }
          long long v18 = (void *)(a3 + 144);
        }
        else
        {
          uint64_t v22 = *(void *)(a3 + 160);
          uint64_t v23 = 0x7FFFFFFFLL;
        }
        re::StringID::operator=(&v87, (uint64_t *)(v22 + 40 * v23 + 24));
        uint64_t v13 = v19;
      }
      uint64_t v26 = (void *)v17[2];
      *(void *)long long buf = v87 >> 1;
      uint64_t v27 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v26, buf);
      if (v27 == -1) {
        goto LABEL_34;
      }
      uint64_t v28 = v26[1] + 16 * v27;
      unint64_t v31 = *(void *)(v28 + 8);
      unsigned int v30 = (uint64_t *)(v28 + 8);
      unint64_t v29 = v31;
      if (DWORD2(v84))
      {
        unint64_t v32 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v29 ^ (v29 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v29 ^ (v29 >> 30))) >> 27));
        uint64_t v33 = *(unsigned int *)(*((void *)&v83 + 1) + 4 * ((v32 ^ (v32 >> 31)) % DWORD2(v84)));
        if (v33 != 0x7FFFFFFF) {
          break;
        }
      }
LABEL_31:
      unint64_t v34 = (void *)*v17;
      uint64_t v35 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)*v17, v30);
      if (v35 != -1)
      {
        uint64_t v38 = v34[1] + 16 * v35;
        int v11 = v73;
        int v37 = v73 + 1;
        WORD2(v8ArcSharedObject::ArcSharedObject(this, 0) = *(unsigned __int8 *)(v38 + 8);
        WORD1(v8ArcSharedObject::ArcSharedObject(this, 0) = *((unsigned __int8 *)v17 + 32);
        uint64_t v39 = *(void *)(v76 + 8);
        uint64_t v40 = 24;
        if (!*(void *)(v39 + 24)) {
          uint64_t v40 = 16;
        }
        LOWORD(v8ArcSharedObject::ArcSharedObject(this, 0) = *(_WORD *)(*(void *)(v39 + v40) + 330) + v73;
        uint64_t v41 = *v30;
        unint64_t v42 = 0xBF58476D1CE4E5B9 * (*v30 ^ ((unint64_t)*v30 >> 30));
        unint64_t v43 = (0x94D049BB133111EBLL * (v42 ^ (v42 >> 27))) ^ ((0x94D049BB133111EBLL * (v42 ^ (v42 >> 27))) >> 31);
        if (DWORD2(v84))
        {
          unint64_t v44 = v43 % DWORD2(v84);
          uint64_t v45 = *(unsigned int *)(*((void *)&v83 + 1) + 4 * v44);
          if (v45 != 0x7FFFFFFF)
          {
            while (*(void *)(v84 + 16 * v45 + 8) != v41)
            {
              uint64_t v45 = *(_DWORD *)(v84 + 16 * v45) & 0x7FFFFFFF;
              if (v45 == 0x7FFFFFFF) {
                goto LABEL_49;
              }
            }
            goto LABEL_37;
          }
        }
        else
        {
          unint64_t v44 = 0;
        }
LABEL_49:
        uint64_t v46 = v86;
        if (v86 == 0x7FFFFFFF)
        {
          uint64_t v46 = v85;
          unsigned int v47 = v85;
          if (v85 == DWORD2(v84))
          {
            re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity((uint64_t)&v83, 2 * HIDWORD(v84));
            unsigned int v47 = v85;
            unint64_t v44 = v43 % DWORD2(v84);
            uint64_t v41 = *v30;
          }
          unsigned int v85 = v47 + 1;
          uint64_t v48 = v84;
          int v49 = *(_DWORD *)(v84 + 16 * v46);
        }
        else
        {
          uint64_t v48 = v84;
          int v49 = *(_DWORD *)(v84 + 16 * v86);
          LODWORD(v86) = v49 & 0x7FFFFFFF;
        }
        uint64_t v50 = 16 * v46;
        *(_DWORD *)(v48 + v5ArcSharedObject::ArcSharedObject(this, 0) = v49 | 0x80000000;
        uint64_t v51 = *((void *)&v83 + 1);
        *(_DWORD *)(v84 + v5ArcSharedObject::ArcSharedObject(this, 0) = *(_DWORD *)(v84 + 16 * v46) & 0x80000000 | *(_DWORD *)(*((void *)&v83 + 1) + 4 * v44);
        *(void *)(v84 + 16 * v46 + 8) = v41;
        *(_DWORD *)(v51 + 4 * v44) = v46;
        ++HIDWORD(v84);
        ++HIDWORD(v86);
        int v11 = v73;
        goto LABEL_37;
      }
      int v36 = *re::graphicsLogObjects((re *)0xFFFFFFFFFFFFFFFFLL);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v88;
        _os_log_impl(&dword_233120000, v36, OS_LOG_TYPE_DEFAULT, "Texture '%s' is attempting to use a non-existent sampler via a texture block.", buf, 0xCu);
      }
LABEL_34:
      re::StringID::destroyString((re::StringID *)&v87);
      v17 += 5;
      if (v17 == v13)
      {
        int v11 = v73;
        goto LABEL_39;
      }
    }
    while (*(void *)(v84 + 16 * v33 + 8) != v29)
    {
      uint64_t v33 = *(_DWORD *)(v84 + 16 * v33) & 0x7FFFFFFF;
      if (v33 == 0x7FFFFFFF) {
        goto LABEL_31;
      }
    }
    int v11 = v73;
    int v37 = v73;
LABEL_37:
    re::StringID::destroyString((re::StringID *)&v87);
    if (v11 != v37)
    {
      re::DynamicArray<re::BufferResolution>::add((_anonymous_namespace_ *)a5, &v80);
      int v11 = v37;
    }
LABEL_39:
    v12 += 2;
  }
  while (v12 != v72);
LABEL_56:
  uint64_t v52 = *(void *)(a3 + 208);
  if (v52)
  {
    uint64_t v53 = *(void *)(a3 + 216);
    uint64_t v77 = v53 + 24 * v52;
    int v74 = v11;
    do
    {
      *(void *)long long buf = 0;
      if (!*(unsigned char *)(v53 + 18)) {
        goto LABEL_62;
      }
      uint64_t v54 = *(void *)(v76 + 8);
      uint64_t v55 = 16;
      if (*(void *)(v54 + 24)) {
        uint64_t v55 = 24;
      }
      if (*(unsigned __int16 *)(v53 + 16) - *(unsigned __int16 *)(*(void *)(v54 + v55) + 330) >= v74)
      {
LABEL_62:
        if (v78)
        {
          uint64_t v56 = v82;
          while (1)
          {
            uint64_t v57 = (void *)*v56;
            unint64_t v87 = *(void *)v53 >> 1;
            uint64_t v58 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v57, &v87);
            if (v58 != -1)
            {
              LODWORD(v59) = *((_DWORD *)v56 + 8);
              unint64_t v60 = *(unsigned __int8 *)(v57[1] + 16 * v58 + 8);
              if (*(void *)(a2 + 24 * v59 + 8) > v60) {
                break;
              }
            }
            unsigned __int32 v61 = (void *)v56[1];
            unint64_t v87 = *(void *)v53 >> 1;
            uint64_t v62 = re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::find(v61, (uint64_t *)&v87);
            if (v62 != -1)
            {
              uint64_t v59 = 0;
              uint64_t v63 = v61[1];
              BOOL v64 = &re::s_samplerTableConstantMembers;
              int v65 = (unint64_t *)(a2 + 8);
              while (1)
              {
                int v66 = *v64;
                v64 += 16;
                if (*(unsigned __int8 *)(v63 + 40 * v62 + 24) == v66)
                {
                  if (*v65) {
                    break;
                  }
                }
                ++v59;
                v65 += 3;
                if (v59 == 6) {
                  goto LABEL_75;
                }
              }
              uint64_t v67 = (void *)v65[1];
              uint64_t v68 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v67, (void *)(v63 + 40 * v62 + 32));
              if (v68 != -1)
              {
                unint64_t v60 = *(unsigned __int8 *)(v67[1] + 16 * v68 + 8);
                if (*v65 <= v60)
                {
                  re::internal::assertLog((re::internal *)6, v69, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, *(unsigned __int8 *)(v67[1] + 16 * v68 + 8), *v65);
                  _os_crash();
                  __break(1u);
                }
                if (*(void *)(*(v65 - 1) + 8 * v60)) {
                  break;
                }
              }
            }
LABEL_75:
            v56 += 5;
            if (v56 == &v82[5 * v78]) {
              goto LABEL_76;
            }
          }
          *(_WORD *)&uint8_t buf[2] = v59;
          *(_WORD *)&uint8_t buf[4] = v60;
          *(_WORD *)long long buf = *(_WORD *)(v53 + 16);
        }
        else
        {
LABEL_76:
          *(_WORD *)long long buf = *(_WORD *)(v53 + 16);
          *(_WORD *)&uint8_t buf[2] = 0;
          unint64_t v87 = 0x5CEBE1FD2490;
          unint64_t v70 = *(void **)(a2 + 16);
          *(_WORD *)&uint8_t buf[4] = *(unsigned __int8 *)(v70[1]
                                                 + 16
                                                 * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v70, &v87)+ 8);
        }
        re::DynamicArray<re::BufferResolution>::add((_anonymous_namespace_ *)a5, buf);
      }
      v53 += 24;
    }
    while (v53 != v77);
  }
  return re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)&v83);
}

{
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  void *v22;
  void *v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  __int16 v31;
  __int16 v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  const char *v39;
  void *v40;
  uint64_t v41;
  uint64_t *v42;
  void *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  const char *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  int v72;
  __int16 v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t i;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  uint64_t v94;
  int v95;
  __int16 v98;
  uint64_t v99;
  __int16 v100;
  unsigned int v101;
  uint64_t v102;
  long long v103;
  long long v104;
  int v105;
  uint64_t v106;
  void v107[2];
  void v108[60];
  unint64_t v109;
  unint64_t v110;
  const char *v111;

  *(void *)(a5 + 16) = 0;
  ++*(_DWORD *)(a5 + 24);
  createSamplerLayerList((const re::MaterialTechnique *)v107, *(const re::DrawCall **)a1, a4);
  uint64_t v7 = -1;
  uint64_t v8 = 4;
  do
  {
    if (v107[0] == ++v7) {
      break;
    }
    uint64_t v9 = v107[v8];
    v8 += 5;
  }
  while (!*(void *)(v9 + 24));
  uint64_t v10 = *(void *)(a1 + 8);
  int v11 = *(void *)(v10 + 16);
  uint64_t v12 = *(void *)(v10 + 24);
  if (v12) {
    LODWORD(v12) = *(unsigned __int8 *)(v12 + 332);
  }
  uint64_t v13 = v107[0] == v7 || (*(unsigned __int8 *)(v11 + 332) | v12) == 0;
  uint64_t v14 = !v13;
  int v95 = v14;
  uint64_t v15 = -1;
  unsigned int v16 = 5;
  while (v107[0] != ++v15)
  {
    uint64_t v17 = v107[v16];
    v16 += 5;
    if (*(void *)(v17 + 24)) {
      goto LABEL_17;
    }
  }
  if ((v95 & 1) == 0) {
    return result;
  }
LABEL_17:
  int v91 = v107[0];
  uint64_t v105 = 0;
  long long v103 = 0u;
  long long v104 = 0u;
  long long v106 = 0x7FFFFFFFLL;
  long long v18 = *(void *)(a3 + 120);
  if (!v18) {
    return re::HashTable<re::WeakStringID,re::TextureBlockResolution,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)&v103);
  }
  long long v84 = 0;
  unsigned int v85 = 0;
  uint64_t v89 = 0;
  uint64_t v90 = 0;
  uint64_t v19 = 0;
  uint64_t v86 = 0;
  unint64_t v87 = 0;
  unint64_t v20 = 0;
  char v88 = 0;
  uint64_t v92 = 0;
  unint64_t v21 = *(void *)(a3 + 128);
  long long v94 = v21 + 32 * v18;
  uint64_t v22 = &v108[5 * v107[0]];
  uint64_t v23 = (void *)(a3 + 144);
  if (v107[0]) {
    uint64_t v24 = v107[0] == v15;
  }
  else {
    uint64_t v24 = 1;
  }
  int v25 = !v24;
  uint64_t v93 = v25;
  do
  {
    uint64_t v26 = *(void *)(a1 + 8);
    uint64_t v27 = *(void *)(v26 + 16);
    uint64_t v28 = *(void *)(v26 + 24);
    uint64_t v102 = v19;
    uint64_t v101 = v20;
    if (v28)
    {
      unint64_t v29 = *(unsigned __int8 *)(v28 + 332);
      unsigned int v30 = *(unsigned __int8 *)(v27 + 332);
      if (v30 <= v29) {
        unint64_t v31 = v29;
      }
      else {
        unint64_t v31 = v30;
      }
      unint64_t v32 = v31 - 1;
      if (!v95) {
        goto LABEL_55;
      }
    }
    else
    {
      unsigned int v30 = *(unsigned __int8 *)(v27 + 332);
      unint64_t v32 = v30 - 1;
      if ((v95 & 1) == 0) {
        goto LABEL_55;
      }
      unint64_t v29 = 0;
    }
    if (v30 <= v29) {
      unsigned int v30 = v29;
    }
    if (v30 <= v92)
    {
LABEL_55:
      uint64_t v98 = v32;
LABEL_56:
      __int16 v99 = 0;
      int v100 = 0;
      goto LABEL_57;
    }
    if (!v91) {
      goto LABEL_100;
    }
    uint64_t v98 = v32;
    uint64_t v33 = v108;
    while (1)
    {
      re::StringID::StringID((re::StringID *)&v110, (const StringID *)v21);
      if (*(void *)(a3 + 192)
        && re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::containsKey(a3 + 144, &v110))
      {
        if (*v23)
        {
          unint64_t v34 = v110;
          uint64_t v35 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * ((v34 >> 31) ^ (v34 >> 1))) ^ ((0xBF58476D1CE4E5B9
                                                                       * ((v34 >> 31) ^ (v34 >> 1))) >> 27));
          int v36 = *(void *)(a3 + 160);
          int v37 = *(unsigned int *)(*(void *)(a3 + 152) + 4 * ((v35 ^ (v35 >> 31)) % *(unsigned int *)(a3 + 168)));
          if (v37 != 0x7FFFFFFF)
          {
            uint64_t v38 = v111;
            do
            {
              if ((*(void *)(v36 + 40 * v37 + 8) ^ v34) <= 1)
              {
                uint64_t v39 = *(const char **)(v36 + 40 * v37 + 16);
                if (v39 == v38 || !strcmp(v39, v38)) {
                  goto LABEL_50;
                }
              }
              int v37 = *(_DWORD *)(v36 + 40 * v37) & 0x7FFFFFFF;
            }
            while (v37 != 0x7FFFFFFF);
          }
        }
        else
        {
          int v36 = *(void *)(a3 + 160);
        }
        int v37 = 0x7FFFFFFFLL;
LABEL_50:
        re::StringID::operator=(&v110, (uint64_t *)(v36 + 40 * v37 + 24));
      }
      uint64_t v40 = (void *)v33[2];
      uint64_t v109 = v110 >> 1;
      uint64_t v41 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v40, &v109);
      if (v41 != -1)
      {
        unint64_t v42 = (uint64_t *)(v40[1] + 16 * v41 + 8);
        if (re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)*v33, v42) != -1)break; {
      }
        }
      re::StringID::destroyString((re::StringID *)&v110);
      v33 += 5;
      if (v33 == v22) {
        goto LABEL_56;
      }
    }
    unint64_t v60 = *v42;
    unsigned __int32 v61 = v103;
    uint64_t v62 = 0xBF58476D1CE4E5B9 * (*v42 ^ ((unint64_t)*v42 >> 30));
    uint64_t v63 = (0x94D049BB133111EBLL * (v62 ^ (v62 >> 27))) ^ ((0x94D049BB133111EBLL * (v62 ^ (v62 >> 27))) >> 31);
    if (!(void)v103)
    {
      uint64_t v67 = v92++;
      int v65 = v102;
      goto LABEL_103;
    }
    BOOL v64 = *(unsigned int *)(v87 + 4 * (v63 % HIDWORD(v86)));
    int v65 = v102;
    int v66 = v90;
    if (v64 == 0x7FFFFFFF)
    {
LABEL_88:
      uint64_t v67 = v92;
      unsigned __int32 v61 = v63 % v101;
      uint64_t v68 = *(unsigned int *)(v89 + 4 * v61);
      if (v68 != 0x7FFFFFFF)
      {
        int v66 = v90;
        while (*(void *)(v90 + 24 * v68 + 8) != v60)
        {
          LODWORD(v68) = *(_DWORD *)(v90 + 24 * v68) & 0x7FFFFFFF;
          if (v68 == 0x7FFFFFFF) {
            goto LABEL_92;
          }
        }
        uint64_t v98 = v92;
        LOBYTE(v99) = 0;
        HIDWORD(v85) = v101;
        HIDWORD(v86) = v101;
        ++v92;
        goto LABEL_113;
      }
LABEL_92:
      ++v92;
      HIDWORD(v85) = v101;
      HIDWORD(v86) = v101;
LABEL_103:
      unint64_t v70 = v106;
      if (v106 == 0x7FFFFFFF)
      {
        unsigned int v71 = v86;
        unint64_t v72 = v86;
        if (v86 == v65)
        {
          int v73 = v67;
          re::HashTable<re::WeakStringID,re::TextureBlockResolution,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity((uint64_t)&v103, 2 * v85);
          uint64_t v67 = v73;
          int v65 = DWORD2(v104);
          unint64_t v72 = v105;
          unsigned __int32 v61 = v63 % DWORD2(v104);
          unint64_t v60 = *v42;
          uint64_t v90 = v104;
          long long v84 = *((void *)&v103 + 1);
          unsigned int v71 = v86;
        }
        int v74 = v72 + 1;
        uint64_t v105 = v74;
        unint64_t v70 = v71;
        char v75 = v90;
        uint64_t v76 = *(_DWORD *)(v90 + 24 * v71);
        uint64_t v77 = v84;
        uint64_t v101 = v65;
        HIDWORD(v85) = v65;
        uint64_t v102 = v65;
        HIDWORD(v86) = v65;
      }
      else
      {
        uint64_t v77 = v89;
        char v75 = v90;
        uint64_t v76 = *(_DWORD *)(v90 + 24 * v106);
        LODWORD(v106) = v76 & 0x7FFFFFFF;
        int v74 = v86;
        unsigned int v71 = v70;
      }
      uint64_t v98 = v67;
      LOBYTE(v99) = 0;
      uint64_t v78 = 3 * v70;
      *(_DWORD *)(v75 + 8 * v78) = v76 | 0x80000000;
      int v66 = v104;
      uint64_t v79 = v104 + 8 * v78;
      *(_DWORD *)uint64_t v79 = *(_DWORD *)v79 & 0x80000000 | *(_DWORD *)(v77 + 4 * v61);
      *(void *)(v79 + 8) = v60;
      *(_WORD *)(v79 + 16) = 0;
      *(_WORD *)(v79 + 18) = v67;
      *(unsigned char *)(v79 + 2ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(_DWORD *)(v77 + 4 * v61) = v71;
      LODWORD(v85) = ++HIDWORD(v104);
      ++HIDWORD(v106);
      LODWORD(v86) = v74;
    }
    else
    {
      while (*(void *)(v88 + 24 * v64 + 8) != v60)
      {
        LODWORD(v64) = *(_DWORD *)(v88 + 24 * v64) & 0x7FFFFFFF;
        if (v64 == 0x7FFFFFFF) {
          goto LABEL_88;
        }
      }
      uint64_t v80 = *(_DWORD *)(v89 + 4 * (v63 % HIDWORD(v85)));
      if (v80 == 0x7FFFFFFF)
      {
        uint64_t v80 = 0x7FFFFFFF;
      }
      else
      {
        uint64_t v82 = *(void *)(v90 + 24 * v80 + 8);
        for (uint64_t i = *(unsigned int *)(v89 + 4 * (v63 % HIDWORD(v85))); ; v80 = i)
        {
          int v66 = v90;
          if (v82 == v60) {
            break;
          }
          uint64_t i = *(_DWORD *)(v90 + 24 * i) & 0x7FFFFFFF;
          uint64_t v80 = 0x7FFFFFFF;
          int v66 = v90;
          if (i == 0x7FFFFFFF) {
            break;
          }
          uint64_t v82 = *(void *)(v90 + 24 * i + 8);
        }
      }
      uint64_t v81 = v66 + 24 * v80;
      uint64_t v98 = *(_WORD *)(v81 + 18);
      LOBYTE(v99) = *(unsigned char *)(v81 + 20);
      HIDWORD(v86) = HIDWORD(v85);
LABEL_113:
      uint64_t v77 = v89;
    }
    int v100 = *(_WORD *)(v21 + 16);
    re::StringID::destroyString((re::StringID *)&v110);
    HIDWORD(v99) = 1;
    uint64_t v89 = v77;
    uint64_t v90 = v66;
    unint64_t v87 = v77;
    char v88 = v66;
LABEL_57:
    if (!v93)
    {
LABEL_74:
      uint64_t v52 = a5;
      LOBYTE(v53) = v99;
      if (HIDWORD(v99)) {
        goto LABEL_77;
      }
      goto LABEL_99;
    }
    unint64_t v43 = v108;
    while (2)
    {
      re::StringID::StringID((re::StringID *)&v110, (const StringID *)v21);
      if (!*(void *)(a3 + 192)
        || !re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::containsKey(a3 + 144, &v110))
      {
        goto LABEL_72;
      }
      if (!*v23)
      {
        uint64_t v46 = *(void *)(a3 + 160);
LABEL_70:
        unsigned int v47 = 0x7FFFFFFFLL;
        goto LABEL_71;
      }
      unint64_t v44 = v110;
      uint64_t v45 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * ((v44 >> 31) ^ (v44 >> 1))) ^ ((0xBF58476D1CE4E5B9 * ((v44 >> 31) ^ (v44 >> 1))) >> 27));
      uint64_t v46 = *(void *)(a3 + 160);
      unsigned int v47 = *(unsigned int *)(*(void *)(a3 + 152) + 4 * ((v45 ^ (v45 >> 31)) % *(unsigned int *)(a3 + 168)));
      if (v47 == 0x7FFFFFFF) {
        goto LABEL_70;
      }
      uint64_t v48 = v111;
      while (1)
      {
        if ((*(void *)(v46 + 40 * v47 + 8) ^ v44) <= 1)
        {
          int v49 = *(const char **)(v46 + 40 * v47 + 16);
          if (v49 == v48 || !strcmp(v49, v48)) {
            break;
          }
        }
        unsigned int v47 = *(_DWORD *)(v46 + 40 * v47) & 0x7FFFFFFF;
        if (v47 == 0x7FFFFFFF) {
          goto LABEL_70;
        }
      }
LABEL_71:
      re::StringID::operator=(&v110, (uint64_t *)(v46 + 40 * v47 + 24));
LABEL_72:
      uint64_t v50 = (void *)v43[3];
      uint64_t v109 = v110 >> 1;
      uint64_t v51 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v50, &v109);
      if (v51 == -1)
      {
        re::StringID::destroyString((re::StringID *)&v110);
        v43 += 5;
        if (v43 == v22) {
          goto LABEL_74;
        }
        continue;
      }
      break;
    }
    uint64_t v53 = *(_DWORD *)(v50[1] + 16 * v51 + 8);
    int v100 = *(_WORD *)(v21 + 16);
    re::StringID::destroyString((re::StringID *)&v110);
    uint64_t v52 = a5;
LABEL_77:
    uint64_t v54 = *(void *)(v52 + 8);
    uint64_t v55 = *(void *)(v52 + 16);
    if (v55 >= v54)
    {
      uint64_t v56 = v55 + 1;
      if (v54 < v55 + 1)
      {
        if (*(void *)v52)
        {
          uint64_t v57 = 2 * v54;
          uint64_t v13 = v54 == 0;
          uint64_t v58 = 8;
          if (!v13) {
            uint64_t v58 = v57;
          }
          if (v58 <= v56) {
            uint64_t v59 = v56;
          }
          else {
            uint64_t v59 = v58;
          }
          re::DynamicArray<re::TextureBlockResolution>::setCapacity((void *)v52, v59);
          uint64_t v52 = a5;
        }
        else
        {
          re::DynamicArray<re::TextureBlockResolution>::setCapacity((void *)a5, v56);
          uint64_t v52 = a5;
          ++*(_DWORD *)(a5 + 24);
        }
      }
      uint64_t v55 = *(void *)(v52 + 16);
    }
    uint64_t v69 = *(void *)(v52 + 32) + 6 * v55;
    *(_WORD *)uint64_t v69 = v100;
    *(_WORD *)(v69 + 2) = v98;
    *(unsigned char *)(v69 + 4) = v53;
    ++*(void *)(v52 + 16);
    ++*(_DWORD *)(v52 + 24);
LABEL_99:
    uint64_t v19 = v102;
    unint64_t v20 = v101;
LABEL_100:
    v21 += 32;
  }
  while (v21 != v94);
  return re::HashTable<re::WeakStringID,re::TextureBlockResolution,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)&v103);
}

uint64_t re::MaterialTechniqueVariant::completeResolution(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a5;
  uint64_t v138 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a5 + 16);
  *(void *)(a5 + 16) = 0;
  if (v8)
  {
    uint64_t v9 = 144 * v8;
    uint64_t v10 = *(void *)(a5 + 32) + 80;
    do
    {
      int v11 = *(void **)(v10 + 40);
      if (v11)
      {

        *(void *)(v10 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      }
      re::DynamicArray<re::ConstantResolution>::deinit(v10);
      re::DynamicArray<unsigned long>::deinit(v10 - 40);
      re::DynamicArray<unsigned long>::deinit(v10 - 80);
      v10 += 144;
      v9 -= 144;
    }
    while (v9);
  }
  ++*(_DWORD *)(v6 + 24);
  unint64_t v117 = 0;
  int v118 = 0;
  re::MaterialTechniqueVariant::fillTextureTableLayerLists((uint64_t)a1, a2, a4, (uint64_t *)&v117);
  uint64_t v114 = 0;
  int v115 = 0;
  uint64_t v111 = 0;
  int v112 = 0;
  re::MaterialTechniqueVariant::fillConstantTableLayerLists(a1, (_DWORD *)a3, a4, (uint64_t)&v114, (uint64_t)&v111);
  uint64_t v108 = 0;
  int v109 = 0;
  uint64_t result = re::MaterialTechniqueVariant::fillBufferTableLayerLists((uint64_t)a1, a4, (uint64_t)&v108);
  unint64_t v13 = *(void *)(a3 + 64);
  if (!v13) {
    return result;
  }
  unint64_t v14 = 0;
  uint64_t v15 = a3;
  uint64_t v76 = a4;
  uint64_t v75 = v6;
  do
  {
    uint64_t v16 = *(void *)(v15 + 72);
    uint64_t v17 = v16 + 112 * v14;
    unsigned int v19 = *(unsigned __int16 *)(v17 + 16);
    long long v18 = (__int16 *)(v17 + 16);
    uint64_t result = re::MaterialParameterTableLayers::containsDirectBuffer(*(uint64_t **)(a4 + 64), v19, *(_DWORD *)v15);
    uint64_t v15 = a3;
    if (result) {
      goto LABEL_88;
    }
    unint64_t v20 = *(void *)(a3 + 88);
    if (v20 <= v14)
    {
      unsigned int v85 = 0;
      long long v130 = 0u;
      *(_OWORD *)char v131 = 0u;
      long long v128 = 0u;
      long long v129 = 0u;
      long long v127 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)long long buf = 136315906;
      *(void *)&uint8_t buf[4] = "operator[]";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 476;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&buf[20] = v14;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v21 = *(void *)(a3 + 96);
    long long v127 = 0uLL;
    DWORD2(v128) = 0;
    *(void *)&long long v128 = 0;
    long long v129 = 0u;
    long long v130 = 0u;
    *(_DWORD *)char v131 = 0;
    *(_OWORD *)&v131[8] = 0u;
    long long v132 = 0u;
    int v133 = 0;
    uint64_t v135 = 0;
    unint64_t v136 = 0;
    uint64_t v134 = 0;
    __int16 v137 = 0;
    __int16 v137 = *v18;
    uint64_t v107 = 0;
    v104[1] = 0;
    unint64_t v105 = 0;
    uint64_t v103 = 0;
    v104[0] = 0;
    int v106 = 0;
    v100[1] = 0;
    unint64_t v101 = 0;
    uint64_t v99 = 0;
    v100[0] = 0;
    int v102 = 0;
    v96[1] = 0;
    unint64_t v97 = 0;
    v96[0] = 0;
    int v98 = 0;
    uint64_t v22 = v16 + 112 * v14;
    uint64_t v23 = *(void *)(v22 + 72);
    if (!v23)
    {
      unint64_t v136 = 0;
      goto LABEL_42;
    }
    uint64_t v78 = v21;
    uint64_t v24 = 0;
    unint64_t v25 = 0;
    uint64_t v26 = *(void *)(v22 + 80);
    uint64_t v77 = (uint64_t *)(v16 + 112 * v14 + 8);
    uint64_t v27 = 80 * v23;
    do
    {
      uint64_t v28 = (uint64_t *)(v26 + v24);
      unsigned int v29 = *(unsigned __int16 *)(v26 + v24 + 36);
      if (v29 > 0x3A)
      {
        if (v29 != 59)
        {
          if (v29 == 60)
          {
            *(void *)long long buf = 0;
            *(_WORD *)long long buf = *(_DWORD *)(v26 + v24 + 72);
            re::MaterialTechniqueVariant::resolveBufferArgument((void *)(v26 + v24 + 16), *(void **)(a2 + 16), (uint64_t)&v110, v108, (uint64_t)buf, 1);
            unint64_t v35 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * *(unsigned __int16 *)&buf[2]) ^ ((0xBF58476D1CE4E5B9
                                                                           * *(unsigned __int16 *)&buf[2]) >> 27));
            unint64_t v36 = ((v25 << 6) - 0x61C8864680B583E9 + (v25 >> 2) + (v35 ^ (v35 >> 31))) ^ v25;
            unint64_t v37 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * *(unsigned __int16 *)&buf[4]) ^ ((0xBF58476D1CE4E5B9
                                                                           * *(unsigned __int16 *)&buf[4]) >> 27));
            unint64_t v25 = ((v37 ^ (v37 >> 31)) - 0x61C8864680B583E9 + (v36 << 6) + (v36 >> 2)) ^ v36;
            uint64_t result = (uint64_t)re::DynamicArray<re::BufferResolution>::add((_anonymous_namespace_ *)v100, buf);
            goto LABEL_30;
          }
          goto LABEL_19;
        }
        uint64_t v53 = *re::graphicsLogObjects((re *)result);
        uint64_t result = os_log_type_enabled(v53, OS_LOG_TYPE_ERROR);
        if (!result) {
          goto LABEL_30;
        }
        uint64_t v54 = *(void *)(v26 + v24 + 24);
        uint64_t v55 = *v77;
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = v54;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v55;
        uint64_t v51 = v53;
        uint64_t v52 = "Found sampler member (%s) in Bindless Argument (%s). This is not supported.";
LABEL_33:
        _os_log_error_impl(&dword_233120000, v51, OS_LOG_TYPE_ERROR, v52, buf, 0x16u);
        goto LABEL_30;
      }
      if (v29 == 1)
      {
        uint64_t v48 = *re::graphicsLogObjects((re *)result);
        uint64_t result = os_log_type_enabled(v48, OS_LOG_TYPE_ERROR);
        if (!result) {
          goto LABEL_30;
        }
        uint64_t v49 = *(void *)(v26 + v24 + 24);
        uint64_t v50 = *v77;
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = v49;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v50;
        uint64_t v51 = v48;
        uint64_t v52 = "Found struct member (%s) in Bindless Argument (%s). This is not supported.";
        goto LABEL_33;
      }
      if (v29 == 58)
      {
        v84[0] = 0;
        *(void *)long long buf = 0;
        *(void *)&uint8_t buf[8] = "";
        *(void *)&unsigned char buf[24] = 0;
        *(_DWORD *)&uint8_t buf[16] = 0;
        *(_DWORD *)&buf[19] = 0;
        int v30 = re::StringID::operator=((unint64_t *)buf, (uint64_t *)(v26 + v24 + 16));
        *(_WORD *)&unsigned char buf[18] = *(_DWORD *)(v26 + v24 + 64);
        buf[22] = *(unsigned char *)(v26 + v24 + 68);
        unint64_t v31 = *(uint64_t **)(a2 + 8);
        unsigned int v85 = &v119;
        uint64_t v86 = v117;
        re::MaterialTechniqueVariant::resolveTextureArgument(v30, (StringID *)buf, v31, &v85, (uint64_t)v84, a6, a3);
        re::StringID::destroyString((re::StringID *)buf);
        LOWORD(v84[0]) = *(_DWORD *)(v26 + v24 + 72);
        unint64_t v32 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * WORD1(v84[0])) ^ ((0xBF58476D1CE4E5B9 * WORD1(v84[0])) >> 27));
        unint64_t v33 = ((v25 << 6) - 0x61C8864680B583E9 + (v25 >> 2) + (v32 ^ (v32 >> 31))) ^ v25;
        unint64_t v34 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * WORD2(v84[0])) ^ ((0xBF58476D1CE4E5B9 * WORD2(v84[0])) >> 27));
        unint64_t v25 = ((v34 ^ (v34 >> 31)) - 0x61C8864680B583E9 + (v33 << 6) + (v33 >> 2)) ^ v33;
        uint64_t result = (uint64_t)re::DynamicArray<re::TextureResolution>::add(v104, v84);
        goto LABEL_30;
      }
LABEL_19:
      memset(buf, 0, 36);
      long long v121 = 0u;
      memset(v122, 0, 28);
      __int16 v125 = 0;
      uint64_t v123 = 0;
      uint64_t v124 = 0;
      __int16 v126 = 255;
      LOWORD(v124) = *(_DWORD *)(v26 + v24 + 72);
      unsigned int v85 = 0;
      uint64_t v86 = "";
      __int16 v87 = 0;
      uint64_t v88 = 0;
      int v89 = 1;
      v90[0] = 0;
      v90[1] = (unint64_t)"";
      int v91 = 0;
      __int16 v92 = 0;
      *(_DWORD *)&v94[16] = 0;
      *(_WORD *)&v94[20] = 256;
      v93[1] = 0;
      *(void *)long long v94 = 0;
      v93[0] = 0;
      *(void *)&v94[5] = 0;
      char v95 = 0;
      re::StringID::operator=((unint64_t *)&v85, (uint64_t *)(v26 + v24 + 16));
      uint64_t v38 = *v28;
      int v89 = *((_DWORD *)v28 + 2);
      uint64_t v88 = v38;
      re::StringID::operator=(v90, (uint64_t *)(v26 + v24 + 16));
      int v39 = *(_DWORD *)(v26 + v24 + 32);
      __int16 v92 = *(_WORD *)(v26 + v24 + 36);
      int v91 = v39;
      re::FixedArray<re::MetalTypeInfo>::operator=(v93, v26 + v24 + 40);
      uint64_t v40 = *(void *)(v26 + v24 + 70);
      *(void *)&v94[8] = *(void *)(v26 + v24 + 64);
      *(void *)&v94[14] = v40;
      uint64_t v41 = *(void *)a2;
      v84[0] = (uint64_t)&v116;
      v84[1] = v114;
      v83[0] = (uint64_t)&v113;
      v83[1] = v111;
      re::MaterialTechniqueVariant::resolveConstantArgument(a1, (uint64_t)&v85, v41, v84, v83, (uint64_t)buf, 1, v42);
      re::FixedArray<re::MetalTypeInfo>::deinit(v93);
      re::StringID::destroyString((re::StringID *)v90);
      re::StringID::destroyString((re::StringID *)&v85);
      LOWORD(v124) = *(_DWORD *)(v26 + v24 + 72);
      unint64_t v43 = *(void *)buf;
      unint64_t v44 = *((void *)&v121 + 1);
      re::DynamicArray<re::ConstantResolution>::add((uint64_t)v96, (uint64_t)buf);
      if (v122[0])
      {
        if (v123) {
          (*(void (**)(void))(*(void *)v122[0] + 40))();
        }
        uint64_t v123 = 0;
        memset(v122, 0, 24);
        ++LODWORD(v122[3]);
      }
      uint64_t result = *(void *)&buf[8];
      if (*(void *)&buf[8] && (void)v121) {
        uint64_t result = (*(uint64_t (**)(void))(**(void **)&buf[8] + 40))();
      }
      unint64_t v45 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v43 ^ (v43 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v43 ^ (v43 >> 30))) >> 27));
      unint64_t v46 = ((v25 << 6) - 0x61C8864680B583E9 + (v25 >> 2) + (v45 ^ (v45 >> 31))) ^ v25;
      unint64_t v47 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v44 ^ (v44 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v44 ^ (v44 >> 30))) >> 27));
      unint64_t v25 = ((v47 ^ (v47 >> 31)) - 0x61C8864680B583E9 + (v46 << 6) + (v46 >> 2)) ^ v46;
LABEL_30:
      v24 += 80;
    }
    while (v27 != v24);
    unint64_t v136 = v25;
    if ((void)v127)
    {
      uint64_t v6 = v75;
      uint64_t v21 = v78;
      if (v104[0]) {
        re::DynamicArray<re::TextureResolution>::copy((void **)&v127, (uint64_t)v104);
      }
      else {
        *(void *)&long long v128 = 0;
      }
      ++DWORD2(v128);
    }
    else
    {
      uint64_t v6 = v75;
      uint64_t v21 = v78;
      if (v104[0])
      {
        *(void *)&long long v127 = v104[0];
        re::DynamicArray<re::TextureResolution>::setCapacity(&v127, v105);
        ++DWORD2(v128);
        re::DynamicArray<re::TextureResolution>::copy((void **)&v127, (uint64_t)v104);
      }
    }
LABEL_42:
    uint64_t v56 = v100[0];
    if (*((void *)&v129 + 1))
    {
      if (v100[0]) {
        re::DynamicArray<re::TextureResolution>::copy((void **)&v129 + 1, (uint64_t)v100);
      }
      else {
        *((void *)&v130 + 1) = 0;
      }
      ++*(_DWORD *)v131;
    }
    else if (v100[0])
    {
      *((void *)&v129 + 1) = v100[0];
      re::DynamicArray<re::TextureResolution>::setCapacity((void *)&v129 + 1, v101);
      ++*(_DWORD *)v131;
      re::DynamicArray<re::TextureResolution>::copy((void **)&v129 + 1, (uint64_t)v100);
    }
    if (*(void *)&v131[16])
    {
      if (v96[0])
      {
        re::DynamicArray<re::ConstantResolution>::copy(&v131[16], (uint64_t)v96);
        ++v133;
      }
      else
      {
        re::DynamicArray<re::ConstantResolution>::clear((uint64_t)&v131[16]);
      }
    }
    else if (v96[0])
    {
      *(void *)&v131[16] = v96[0];
      re::DynamicArray<re::ConstantResolution>::setCapacity(&v131[16], v97);
      ++v133;
      re::DynamicArray<re::ConstantResolution>::copy(&v131[16], (uint64_t)v96);
    }
    uint64_t v57 = NS::SharedPtr<MTL::Texture>::operator=(&v135, (void **)(v21 + 8 * v14));
    unint64_t v58 = *(void *)(v6 + 8);
    unint64_t v59 = *(void *)(v6 + 16);
    if (v59 >= v58)
    {
      if (v58 < v59 + 1)
      {
        if (*(void *)v6)
        {
          uint64_t v60 = 2 * v58;
          BOOL v61 = v58 == 0;
          unint64_t v62 = 8;
          if (!v61) {
            unint64_t v62 = v60;
          }
          if (v62 <= v59 + 1) {
            unint64_t v63 = v59 + 1;
          }
          else {
            unint64_t v63 = v62;
          }
          re::DynamicArray<re::ArgumentBufferResolution>::setCapacity((void *)v6, v63);
        }
        else
        {
          re::DynamicArray<re::ArgumentBufferResolution>::setCapacity((void *)v6, v59 + 1);
          ++*(_DWORD *)(v6 + 24);
        }
      }
      unint64_t v59 = *(void *)(v6 + 16);
    }
    uint64_t v64 = *(void *)(v6 + 32);
    uint64_t v65 = v64 + 144 * v59;
    *(void *)(v65 + 32) = 0;
    *(void *)(v65 + 8) = 0;
    *(void *)(v65 + 16) = 0;
    *(void *)uint64_t v65 = 0;
    *(_DWORD *)(v65 + 24) = 0;
    if ((void)v127)
    {
      unint64_t v66 = v128;
      *(void *)uint64_t v65 = v127;
      re::DynamicArray<re::TextureResolution>::setCapacity((void *)(v64 + 144 * v59), v66);
      ++*(_DWORD *)(v65 + 24);
      re::DynamicArray<re::TextureResolution>::copy((void **)(v64 + 144 * v59), (uint64_t)&v127);
    }
    uint64_t v67 = v64 + 144 * v59;
    *(void *)(v67 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
    uint64_t v68 = v67 + 40;
    *(void *)(v68 + 32) = 0;
    *(void *)(v68 + 8) = 0;
    *(void *)(v68 + 16) = 0;
    *(_DWORD *)(v68 + 24) = 0;
    if (*((void *)&v129 + 1))
    {
      unint64_t v69 = *((void *)&v130 + 1);
      *(void *)uint64_t v68 = *((void *)&v129 + 1);
      re::DynamicArray<re::TextureResolution>::setCapacity((void *)v68, v69);
      ++*(_DWORD *)(v64 + 144 * v59 + 64);
      re::DynamicArray<re::TextureResolution>::copy((void **)v68, (uint64_t)&v129 + 8);
    }
    uint64_t v70 = v64 + 144 * v59;
    *(void *)(v70 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
    uint64_t v71 = v70 + 80;
    *(void *)(v71 + 32) = 0;
    *(void *)(v71 + 8) = 0;
    *(void *)(v71 + 16) = 0;
    *(_DWORD *)(v71 + 24) = 0;
    if (*(void *)&v131[16])
    {
      unint64_t v72 = *((void *)&v132 + 1);
      *(void *)uint64_t v71 = *(void *)&v131[16];
      re::DynamicArray<re::ConstantResolution>::setCapacity((void *)v71, v72);
      ++*(_DWORD *)(v64 + 144 * v59 + 104);
      re::DynamicArray<re::ConstantResolution>::copy((void *)v71, (uint64_t)&v131[16]);
    }
    uint64_t v73 = v64 + 144 * v59;
    *(void *)(v73 + 12ArcSharedObject::ArcSharedObject(this, 0) = v135;
    __int16 v74 = v137;
    *(void *)(v73 + 128) = v136;
    *(_WORD *)(v73 + 136) = v74;
    ++*(void *)(v6 + 16);
    ++*(_DWORD *)(v6 + 24);
    re::DynamicArray<re::ConstantResolution>::deinit((uint64_t)v96);
    if (v56 && v103) {
      (*(void (**)(uint64_t))(*(void *)v56 + 40))(v56);
    }
    if (v104[0] && v107) {
      (*(void (**)(void))(*(void *)v104[0] + 40))();
    }
    a4 = v76;
    if (v135)
    {

      uint64_t v135 = 0;
    }
    re::DynamicArray<re::ConstantResolution>::deinit((uint64_t)&v131[16]);
    if (*((void *)&v129 + 1))
    {
      if (*(void *)&v131[8]) {
        (*(void (**)(void))(**((void **)&v129 + 1) + 40))();
      }
      *(void *)&v131[8] = 0;
      long long v130 = 0uLL;
      *((void *)&v129 + 1) = 0;
      ++*(_DWORD *)v131;
    }
    uint64_t result = v127;
    if ((void)v127)
    {
      if ((void)v129) {
        uint64_t result = (*(uint64_t (**)(void))(*(void *)v127 + 40))();
      }
    }
    uint64_t v15 = a3;
    unint64_t v13 = *(void *)(a3 + 64);
LABEL_88:
    ++v14;
  }
  while (v14 < v13);
  return result;
}

uint64_t re::MaterialTechniqueVariant::completeResolution<re::AttributeResolution,re::AttributeTable>(re *a1, uint64_t *a2, void *a3, uint64_t a4, unint64_t a5)
{
  unint64_t v15 = a5;
  uint64_t v8 = *a2;
  uint64_t v9 = re::globalAllocators(a1);
  uint64_t v10 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9[2] + 32))(v9[2], 48, 8);
  *uint64_t v10 = 0u;
  v10[1] = 0u;
  void v10[2] = 0u;
  unint64_t v14 = v10;
  int v11 = (uint64_t *)re::HashTable<unsigned long,re::TechniqueResolutions<re::AttributeResolution> *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew(v8, &v15, &v14);
  uint64_t v12 = *v11;
  re::MaterialTechniqueVariant::completeResolution(a1, a3, *(void *)(*((void *)a1 + 1) + 16), a4, *v11 + 8);
  return v12;
}

uint64_t re::HashTable<unsigned long,re::TechniqueResolutions<re::AttributeResolution> *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  if (!*(void *)a1)
  {
    LODWORD(v7) = 0;
    goto LABEL_8;
  }
  unint64_t v7 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v7);
  if (v8 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<unsigned long,re::TechniqueResolutions<re::AttributeResolution> *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(a1, v7, v6, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 16) + 24 * v11;
    return v10 + 16;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  while (*(void *)(v9 + 24 * v8 + 8) != v6)
  {
    LODWORD(v8) = *(_DWORD *)(v9 + 24 * v8) & 0x7FFFFFFF;
    if (v8 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v10 = v9 + 24 * v8;
  return v10 + 16;
}

uint64_t re::MaterialTechniqueVariant::completeResolution<re::BufferResolution,re::BufferTableCollection>(re *a1, uint64_t *a2, void *a3, uint64_t a4, unint64_t a5)
{
  unint64_t v16 = a5;
  uint64_t v8 = *a2;
  uint64_t v9 = re::globalAllocators(a1);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9[2] + 32))(v9[2], 88, 8);
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(void *)(v10 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  uint64_t v15 = v10;
  unsigned int v11 = (uint64_t *)re::HashTable<unsigned long,re::TechniqueResolutions<re::AttributeResolution> *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew(v8, &v16, &v15);
  uint64_t v12 = *v11;
  re::MaterialTechniqueVariant::completeResolution((uint64_t)a1, a3, *(void *)(*((void *)a1 + 1) + 16), a4, *v11 + 8);
  uint64_t v13 = *(void *)(*((void *)a1 + 1) + 24);
  if (v13) {
    re::MaterialTechniqueVariant::completeResolution((uint64_t)a1, a3, v13, a4, v12 + 48);
  }
  return v12;
}

uint64_t re::MaterialTechniqueVariant::completeResolution<re::TextureResolution,re::TextureTableCollection>(re *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v18 = a5;
  uint64_t v10 = *a2;
  unsigned int v11 = re::globalAllocators(a1);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11[2] + 32))(v11[2], 88, 8);
  *(_OWORD *)uint64_t v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(void *)(v12 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  uint64_t v17 = v12;
  uint64_t v13 = (uint64_t *)re::HashTable<unsigned long,re::TechniqueResolutions<re::AttributeResolution> *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew(v10, &v18, &v17);
  uint64_t v14 = *v13;
  re::MaterialTechniqueVariant::completeResolution((uint64_t)a1, a3, *(void *)(*((void *)a1 + 1) + 16), a4, *v13 + 8, a6);
  uint64_t v15 = *(void *)(*((void *)a1 + 1) + 24);
  if (v15) {
    re::MaterialTechniqueVariant::completeResolution((uint64_t)a1, a3, v15, a4, v14 + 48, a6);
  }
  return v14;
}

uint64_t re::MaterialTechniqueVariant::completeResolution<re::ConstantResolution,re::ConstantTableCollection>(re *a1, uint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v16 = a5;
  uint64_t v8 = *a2;
  uint64_t v9 = re::globalAllocators(a1);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9[2] + 32))(v9[2], 88, 8);
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(void *)(v10 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  uint64_t v15 = v10;
  unsigned int v11 = (uint64_t *)re::HashTable<unsigned long,re::TechniqueResolutions<re::AttributeResolution> *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew(v8, &v16, &v15);
  uint64_t v12 = *v11;
  re::MaterialTechniqueVariant::completeResolution((uint64_t **)a1, a3, *(void *)(*((void *)a1 + 1) + 16), a4, *v11 + 8);
  uint64_t v13 = *(void *)(*((void *)a1 + 1) + 24);
  if (v13) {
    re::MaterialTechniqueVariant::completeResolution((uint64_t **)a1, a3, v13, a4, v12 + 48);
  }
  return v12;
}

uint64_t re::MaterialTechniqueVariant::completeResolution<re::SamplerResolution,re::SamplerTableCollection>(re *a1, uint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v16 = a5;
  uint64_t v8 = *a2;
  uint64_t v9 = re::globalAllocators(a1);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9[2] + 32))(v9[2], 88, 8);
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(void *)(v10 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  uint64_t v15 = v10;
  unsigned int v11 = (uint64_t *)re::HashTable<unsigned long,re::TechniqueResolutions<re::AttributeResolution> *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew(v8, &v16, &v15);
  uint64_t v12 = *v11;
  re::MaterialTechniqueVariant::completeResolution((uint64_t)a1, a3, *(void *)(*((void *)a1 + 1) + 16), a4, *v11 + 8);
  uint64_t v13 = *(void *)(*((void *)a1 + 1) + 24);
  if (v13) {
    re::MaterialTechniqueVariant::completeResolution((uint64_t)a1, a3, v13, a4, v12 + 48);
  }
  return v12;
}

uint64_t re::MaterialTechniqueVariant::completeResolution<re::TextureBlockResolution,re::SamplerTableCollection>(re *a1, uint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v17 = a5;
  uint64_t v7 = *a2;
  uint64_t v8 = re::globalAllocators(a1);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 88, 8);
  *(_OWORD *)uint64_t v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(void *)(v9 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  uint64_t v16 = v9;
  uint64_t v10 = (uint64_t *)re::HashTable<unsigned long,re::TechniqueResolutions<re::AttributeResolution> *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew(v7, &v17, &v16);
  uint64_t v11 = *v10;
  re::MaterialTechniqueVariant::completeResolution((uint64_t)a1, v12, *(void *)(*((void *)a1 + 1) + 16), a4, *v10 + 8);
  uint64_t v14 = *(void *)(*((void *)a1 + 1) + 24);
  if (v14) {
    re::MaterialTechniqueVariant::completeResolution((uint64_t)a1, v13, v14, a4, v11 + 48);
  }
  return v11;
}

uint64_t re::MaterialTechniqueVariant::completeResolution<re::ArgumentBufferResolution,re::ArgumentBufferTableCollection>(re *a1, uint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v18 = a5;
  uint64_t v10 = *a2;
  uint64_t v11 = re::globalAllocators(a1);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11[2] + 32))(v11[2], 88, 8);
  *(_OWORD *)uint64_t v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(void *)(v12 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  uint64_t v17 = v12;
  uint64_t v13 = (uint64_t *)re::HashTable<unsigned long,re::TechniqueResolutions<re::AttributeResolution> *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew(v10, &v18, &v17);
  uint64_t v14 = *v13;
  re::MaterialTechniqueVariant::completeResolution((uint64_t **)a1, a3, *(void *)(*((void *)a1 + 1) + 16), a4, *v13 + 8, a6);
  uint64_t v15 = *(void *)(*((void *)a1 + 1) + 24);
  if (v15) {
    re::MaterialTechniqueVariant::completeResolution((uint64_t **)a1, a3, v15, a4, v14 + 48, a6);
  }
  return v14;
}

BOOL re::MaterialTechniqueVariant::shouldCompileSynchronously(re::MaterialTechniqueVariant *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF969D8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = this;
    int v4 = __cxa_guard_acquire(&qword_26AF969D8);
    this = v2;
    if (v4)
    {
      re::Defaults::BOOLValue((re::Defaults *)"compilePipelinesSynchronously", v3, &byte_26AF969C2);
      __cxa_atexit((void (*)(void *))re::Optional<BOOL>::~Optional, &byte_26AF969C2, &dword_233120000);
      __cxa_guard_release(&qword_26AF969D8);
      this = v2;
    }
  }
  if (byte_26AF969C2) {
    return byte_26AF969C3 != 0;
  }
  if (*((unsigned char *)this + 16)) {
    return 1;
  }
  return *(unsigned char *)(**(void **)this + 2845) == 0;
}

void *re::introspect_ShaderAPIFlagsValues(re *this, const re::IntrospectionBase *a2)
{
  int v2 = (int)this;
  {
    if (v9)
    {
      uint64_t v10 = re::introspectionAllocator(v9);
      uint64_t v11 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 24, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = "None";
      re::introspect_ShaderAPIFlagsValues(BOOL)::enumAttributes = (uint64_t)v11;
      uint64_t v12 = re::introspectionAllocator(v11);
      uint64_t v13 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 24, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *((void *)v13 + 1) = 1;
      *((void *)v13 + 2) = "SurfaceShader";
      qword_2687A0460 = (uint64_t)v13;
      uint64_t v14 = re::introspectionAllocator(v13);
      uint64_t v15 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 24, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *((void *)v15 + 1) = 2;
      *((void *)v15 + 2) = "SurfaceShaderPrivate";
      qword_2687A0468 = (uint64_t)v15;
      uint64_t v16 = re::introspectionAllocator(v15);
      uint64_t v17 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 24, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *((void *)v17 + 1) = 4;
      *((void *)v17 + 2) = "GeometryModifier";
      qword_2687A0470 = (uint64_t)v17;
      unint64_t v18 = re::introspectionAllocator(v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 24, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = 8;
      *(void *)(v19 + 16) = "GeometryModifierPrivate";
      qword_2687A0478 = v19;
    }
  }
  {
    unint64_t v20 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::introspect_ShaderAPIFlagsValues(BOOL)::info, "ShaderAPIFlagsValues", 4, 4, 1, 1);
    *(void *)unint64_t v20 = &unk_26E715E00;
    *((void *)v20 + 8) = &re::introspect_ShaderAPIFlagsValues(BOOL)::enumTable;
    *((_DWORD *)v20 + 4) = 9;
  }
  if (v2)
  {
    if (re::introspect_ShaderAPIFlagsValues(BOOL)::isInitialized) {
      return &re::introspect_ShaderAPIFlagsValues(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v22);
    char v3 = re::introspect_ShaderAPIFlagsValues(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v22);
    if (v3) {
      return &re::introspect_ShaderAPIFlagsValues(BOOL)::info;
    }
    unint64_t v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
    if (re::introspect_ShaderAPIFlagsValues(BOOL)::isInitialized)
    {
LABEL_9:
      uint64_t v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
      return &re::introspect_ShaderAPIFlagsValues(BOOL)::info;
    }
  }
  re::introspect_ShaderAPIFlagsValues(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::introspect_ShaderAPIFlagsValues(BOOL)::info, a2);
  v21[0] = 0xDB7D46A3AA816EE8;
  v21[1] = (uint64_t)"ShaderAPIFlagsValues";
  xmmword_2687A04A8 = v22;
  re::StringID::destroyString((re::StringID *)v21);
  if ((v2 & 1) == 0) {
    goto LABEL_9;
  }
  return &re::introspect_ShaderAPIFlagsValues(BOOL)::info;
}

uint64_t re::SharedPersistentObject<re::MaterialPipelineData>::allocator(re *a1)
{
  return re::globalAllocators(a1)[2];
}

void re::internal::MoveOnlyCallable<re::MaterialTechniqueVariant::releasePipelineStates(re::RenderManager *,re::DrawingManager *)::$_0,void ()(void)>::~MoveOnlyCallable()
{
}

uint64_t re::internal::MoveOnlyCallable<re::MaterialTechniqueVariant::releasePipelineStates(re::RenderManager *,re::DrawingManager *)::$_0,void ()(void)>::operator()(uint64_t a1)
{
  return re::DrawingManager::releasePipelineState(*(void *)(a1 + 8), (void *)(a1 + 16));
}

uint64_t re::internal::MoveOnlyCallable<re::MaterialTechniqueVariant::releasePipelineStates(re::RenderManager *,re::DrawingManager *)::$_0,void ()(void)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E713578;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  long long v2 = *(_OWORD *)(a1 + 24);
  long long v3 = *(_OWORD *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 4ArcSharedObject::ArcSharedObject(this, 0) = v3;
  *(_OWORD *)(a2 + 24) = v2;
  return a2;
}

uint64_t re::internal::MoveOnlyCallable<re::MaterialTechniqueVariant::releasePipelineStates(re::RenderManager *,re::DrawingManager *)::$_0,void ()(void)>::size()
{
  return 88;
}

uint64_t re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  unint64_t v5 = *(unsigned int *)(a1 + 24);
  if (!v5)
  {
    LODWORD(v6) = 0;
    goto LABEL_8;
  }
  unint64_t v6 = v4 % v5;
  uint64_t v7 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % v5));
  if (v7 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v10 = re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsCopy(a1, v6, v4, (uint64_t)a2, a2);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 16) + 16 * v10;
    return v9 + 8;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  while (*(void *)(v8 + 16 * v7 + 8) != v4)
  {
    uint64_t v7 = *(_DWORD *)(v8 + 16 * v7) & 0x7FFFFFFF;
    if (v7 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v9 = v8 + 16 * v7;
  return v9 + 8;
}

uint64_t re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7 = *(unsigned int *)(a1 + 36);
  if (v7 == 0x7FFFFFFF)
  {
    uint64_t v7 = *(unsigned int *)(a1 + 32);
    int v8 = v7;
    if (v7 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v8 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v8 + 1;
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(v10 + 16 * v7);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(v10 + 16 * v7);
    *(_DWORD *)(a1 + 36) = v11 & 0x7FFFFFFF;
  }
  uint64_t v12 = 16 * v7;
  *(_DWORD *)(v10 + v12) = v11 | 0x80000000;
  uint64_t v13 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + v12) = *(_DWORD *)(*(void *)(a1 + 16) + 16 * v7) & 0x80000000 | *(_DWORD *)(v13 + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 16 * v7 + 8) = *a5;
  *(_DWORD *)(v13 + 4 * a2) = v7;
  ++*(_DWORD *)(a1 + 28);
  return v7;
}

void re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10) & 0x80000000) != 0)
          {
            re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsCopy(a1, *(void *)(*(void *)&v13[16] + v10 + 8) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10 + 8), *(void *)&v13[16] + v10 + 8, *(void *)&v13[16] + v10 + 8);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 16;
        }
        while (v11 < v9);
      }
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

unint64_t re::DynamicInlineArray<re::TextureLayer,10ul>::ensureCapacity(unint64_t result, uint64_t a2)
{
  if (result > 9)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277, v2, v3);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

BOOL re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::containsKey(uint64_t a1, void *a2)
{
  uint64_t v2 = 0x7FFFFFFFLL;
  if (*(void *)a1)
  {
    unint64_t v4 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
    uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 8)
                         + 4
                         * (((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
                          % *(unsigned int *)(a1 + 24)));
    if (v5 != 0x7FFFFFFF)
    {
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v2 = 0x7FFFFFFFLL;
      while (!re::StringID::operator==((void *)(v6 + 40 * v5 + 8), a2))
      {
        uint64_t v5 = *(_DWORD *)(v6 + 40 * v5) & 0x7FFFFFFF;
        if (v5 == 0x7FFFFFFF) {
          return v2 != 0x7FFFFFFF;
        }
      }
      uint64_t v2 = v5;
    }
  }
  return v2 != 0x7FFFFFFF;
}

void *re::DynamicArray<re::TextureResolution>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::TextureResolution>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::TextureResolution>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::TextureResolution>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (*v5)
      {
        if (!a2)
        {
          unint64_t v7 = 0;
          if (!v3) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }
        if (a2 >> 61)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 8, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 8 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 8 * a2, 2);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 8 * v5[2]);
            uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
      }
      else
      {
        uint64_t result = (void *)re::DynamicArray<re::TextureResolution>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

void *re::DynamicArray<re::AttributeResolution>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (*v5)
      {
        if (!a2)
        {
          unint64_t v7 = 0;
          if (!v3) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0xAuLL))
        {
          uint64_t v2 = 10 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 10 * a2, 2);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 10 * v5[2]);
            uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 10, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
      }
      else
      {
        uint64_t result = (void *)re::DynamicArray<re::AttributeResolution>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

unint64_t re::DynamicInlineArray<re::BufferLayer,5ul>::ensureCapacity(unint64_t result, uint64_t a2)
{
  if (result > 4)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277, v2, v3);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *,false>(unsigned int *a1, unsigned int *a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = ((char *)a2 - (char *)v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                unsigned int v55 = *(a2 - 4);
                uint64_t v54 = a2 - 4;
                BOOL v56 = v55 < *v10;
                if (v55 == *v10) {
                  BOOL v56 = v54[2] < v10[2];
                }
                if (v56)
                {
                  long long v145 = *(_OWORD *)v10;
                  *(_OWORD *)uint64_t v10 = *(_OWORD *)v54;
                  *(_OWORD *)uint64_t v54 = v145;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *>(v10, v10 + 4, a2 - 4);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *>(v10, v10 + 4, v10 + 8, a2 - 4);
                break;
              case 5uLL:
                uint64_t v57 = (long long *)(v10 + 4);
                unint64_t v58 = (long long *)(v10 + 8);
                unint64_t v59 = (long long *)(v10 + 12);
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *>(v10, v10 + 4, v10 + 8, v10 + 12);
                unsigned int v61 = *(a2 - 4);
                uint64_t v60 = a2 - 4;
                unsigned int v62 = v10[12];
                BOOL v63 = v61 < v62;
                if (v61 == v62) {
                  BOOL v63 = v60[2] < v10[14];
                }
                if (v63)
                {
                  long long v64 = *v59;
                  *unint64_t v59 = *(_OWORD *)v60;
                  *(_OWORD *)uint64_t v60 = v64;
                  unsigned int v65 = v10[12];
                  unsigned int v66 = v10[8];
                  BOOL v5 = v65 == v66;
                  BOOL v67 = v65 < v66;
                  if (v5) {
                    BOOL v67 = v10[14] < v10[10];
                  }
                  if (v67)
                  {
                    long long v68 = *v58;
                    *unint64_t v58 = *v59;
                    *unint64_t v59 = v68;
                    unsigned int v69 = v10[8];
                    unsigned int v70 = v10[4];
                    BOOL v5 = v69 == v70;
                    BOOL v71 = v69 < v70;
                    if (v5) {
                      BOOL v71 = v10[10] < v10[6];
                    }
                    if (v71)
                    {
                      long long v72 = *v57;
                      *uint64_t v57 = *v58;
                      *unint64_t v58 = v72;
                      unsigned int v73 = v10[4];
                      BOOL v5 = v73 == *v10;
                      BOOL v74 = v73 < *v10;
                      if (v5) {
                        BOOL v74 = v10[6] < v10[2];
                      }
                      if (v74)
                      {
                        long long v146 = *(_OWORD *)v10;
                        *(_OWORD *)uint64_t v10 = *v57;
                        *uint64_t v57 = v146;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            uint64_t v75 = v10 + 4;
            BOOL v77 = v10 == a2 || v75 == a2;
            if (a4)
            {
              if (!v77)
              {
                uint64_t v78 = 0;
                uint64_t v79 = v10;
                do
                {
                  uint64_t v80 = v75;
                  unsigned int v81 = v79[4];
                  unsigned int v82 = v79[6];
                  BOOL v83 = v81 < *v79;
                  if (v81 == *v79) {
                    BOOL v83 = v82 < v79[2];
                  }
                  if (v83)
                  {
                    unsigned int v84 = v79[5];
                    unsigned int v85 = v79[7];
                    uint64_t v86 = v78;
                    while (1)
                    {
                      __int16 v87 = (char *)v10 + v86;
                      *(_OWORD *)((char *)v10 + v86 + 16) = *(_OWORD *)((char *)v10 + v86);
                      if (!v86) {
                        break;
                      }
                      unsigned int v88 = *((_DWORD *)v87 - 4);
                      BOOL v89 = v82 < *((_DWORD *)v87 - 2);
                      BOOL v5 = v81 == v88;
                      BOOL v90 = v81 < v88;
                      if (!v5) {
                        BOOL v89 = v90;
                      }
                      v86 -= 16;
                      if (!v89)
                      {
                        int v91 = (unsigned int *)((char *)v10 + v86 + 16);
                        goto LABEL_120;
                      }
                    }
                    int v91 = v10;
LABEL_120:
                    *int v91 = v81;
                    v91[1] = v84;
                    _OWORD v91[2] = v82;
                    v91[3] = v85;
                  }
                  uint64_t v75 = v80 + 4;
                  v78 += 16;
                  uint64_t v79 = v80;
                }
                while (v80 + 4 != a2);
              }
            }
            else if (!v77)
            {
              do
              {
                char v131 = v75;
                unsigned int v132 = a1[4];
                unsigned int v133 = a1[6];
                BOOL v134 = v132 < *a1;
                if (v132 == *a1) {
                  BOOL v134 = v133 < a1[2];
                }
                if (v134)
                {
                  unsigned int v135 = a1[5];
                  unsigned int v136 = a1[7];
                  __int16 v137 = v131;
                  do
                  {
                    *(_OWORD *)__int16 v137 = *((_OWORD *)v137 - 1);
                    unsigned int v138 = *(v137 - 8);
                    unsigned int v139 = *(v137 - 6);
                    v137 -= 4;
                    BOOL v140 = v133 < v139;
                    BOOL v5 = v132 == v138;
                    BOOL v141 = v132 < v138;
                    if (v5) {
                      BOOL v141 = v140;
                    }
                  }
                  while (v141);
                  *__int16 v137 = v132;
                  v137[1] = v135;
                  v137[2] = v133;
                  v137[3] = v136;
                }
                uint64_t v75 = v131 + 4;
                a1 = v131;
              }
              while (v131 + 4 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v92 = (v12 - 2) >> 1;
              int64_t v93 = v92;
              do
              {
                int64_t v94 = v93;
                if (v92 >= v93)
                {
                  uint64_t v95 = (2 * v93) | 1;
                  uint64_t v96 = &v10[4 * v95];
                  if (2 * v94 + 2 < (uint64_t)v12)
                  {
                    unsigned int v97 = v96[4];
                    unsigned int v99 = *v96;
                    BOOL v98 = v96[2] < v96[6];
                    if (*v96 != v97) {
                      BOOL v98 = v99 < v97;
                    }
                    if (v98)
                    {
                      unsigned int v99 = v96[4];
                      v96 += 4;
                      uint64_t v95 = 2 * v94 + 2;
                    }
                  }
                  else
                  {
                    unsigned int v99 = *v96;
                  }
                  int v100 = &v10[4 * v94];
                  unsigned int v101 = *v100;
                  unsigned int v102 = v100[2];
                  BOOL v5 = v99 == *v100;
                  BOOL v103 = v99 < *v100;
                  if (v5) {
                    BOOL v103 = v96[2] < v102;
                  }
                  if (!v103)
                  {
                    unsigned int v104 = v100[1];
                    unsigned int v105 = v100[3];
                    do
                    {
                      int v106 = v100;
                      int v100 = v96;
                      *(_OWORD *)int v106 = *(_OWORD *)v96;
                      if (v92 < v95) {
                        break;
                      }
                      uint64_t v107 = (2 * v95) | 1;
                      uint64_t v96 = &v10[4 * v107];
                      uint64_t v95 = 2 * v95 + 2;
                      if (v95 < (uint64_t)v12)
                      {
                        unsigned int v109 = v96[4];
                        BOOL v108 = v96[2] < v96[6];
                        if (*v96 != v109) {
                          BOOL v108 = *v96 < v109;
                        }
                        if (v108) {
                          v96 += 4;
                        }
                        else {
                          unsigned int v109 = *v96;
                        }
                        if (!v108) {
                          uint64_t v95 = v107;
                        }
                      }
                      else
                      {
                        unsigned int v109 = *v96;
                        uint64_t v95 = v107;
                      }
                      BOOL v110 = v96[2] < v102;
                      BOOL v5 = v109 == v101;
                      BOOL v111 = v109 < v101;
                      if (!v5) {
                        BOOL v110 = v111;
                      }
                    }
                    while (!v110);
                    *int v100 = v101;
                    v100[1] = v104;
                    void v100[2] = v102;
                    v100[3] = v105;
                  }
                }
                int64_t v93 = v94 - 1;
              }
              while (v94);
              uint64_t v112 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v113 = 0;
                long long v147 = *(_OWORD *)v10;
                uint64_t v114 = v10;
                do
                {
                  int v115 = &v114[4 * v113 + 4];
                  uint64_t v116 = (2 * v113) | 1;
                  uint64_t v117 = 2 * v113 + 2;
                  if (v117 < v112)
                  {
                    unsigned int v118 = v115[4];
                    BOOL v119 = *v115 < v118;
                    if (*v115 == v118) {
                      BOOL v119 = v115[2] < v115[6];
                    }
                    if (v119)
                    {
                      v115 += 4;
                      uint64_t v116 = v117;
                    }
                  }
                  *(_OWORD *)uint64_t v114 = *(_OWORD *)v115;
                  uint64_t v114 = v115;
                  uint64_t v113 = v116;
                }
                while (v116 <= (uint64_t)((unint64_t)(v112 - 2) >> 1));
                a2 -= 4;
                if (v115 == a2)
                {
                  *(_OWORD *)int v115 = v147;
                }
                else
                {
                  *(_OWORD *)int v115 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v147;
                  uint64_t v120 = (char *)v115 - (char *)v10 + 16;
                  if (v120 >= 17)
                  {
                    unint64_t v121 = (((unint64_t)v120 >> 4) - 2) >> 1;
                    char v122 = &v10[4 * v121];
                    unsigned int v123 = *v115;
                    unsigned int v124 = v115[2];
                    BOOL v125 = *v122 < *v115;
                    if (*v122 == *v115) {
                      BOOL v125 = v122[2] < v124;
                    }
                    if (v125)
                    {
                      unsigned int v126 = v115[1];
                      unsigned int v127 = v115[3];
                      do
                      {
                        long long v128 = v115;
                        int v115 = v122;
                        *(_OWORD *)long long v128 = *(_OWORD *)v122;
                        if (!v121) {
                          break;
                        }
                        unint64_t v121 = (v121 - 1) >> 1;
                        char v122 = &v10[4 * v121];
                      }
                      while (*v122 == v123 ? v122[2] < v124 : *v122 < v123);
                      *int v115 = v123;
                      v115[1] = v126;
                      v115[2] = v124;
                      _OWORD v115[3] = v127;
                    }
                  }
                }
              }
              while (v112-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = &v10[4 * (v12 >> 1)];
          if ((unint64_t)v11 >= 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *>(a1, &a1[4 * (v12 >> 1)], a2 - 4);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *>(a1 + 4, v14 - 4, a2 - 8);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *>(a1 + 8, &a1[4 * v13 + 4], a2 - 12);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *>(v14 - 4, v14, &a1[4 * v13 + 4]);
            long long v142 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(_OWORD *)uint64_t v14 = v142;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *>(&a1[4 * (v12 >> 1)], a1, a2 - 4);
          }
          --a3;
          unsigned int v15 = *a1;
          if (a4)
          {
            unsigned int v16 = a1[2];
            break;
          }
          unsigned int v17 = *(a1 - 4);
          unsigned int v16 = a1[2];
          BOOL v5 = v17 == v15;
          BOOL v18 = v17 < v15;
          if (v5) {
            BOOL v18 = *(a1 - 2) < v16;
          }
          if (v18) {
            break;
          }
          unsigned int v37 = *(a2 - 4);
          BOOL v5 = v15 == v37;
          BOOL v38 = v15 < v37;
          if (v5) {
            BOOL v38 = v16 < *(a2 - 2);
          }
          if (v38)
          {
            uint64_t v10 = a1;
            do
            {
              unsigned int v39 = v10[4];
              v10 += 4;
              BOOL v40 = v15 < v39;
              if (v15 == v39) {
                BOOL v40 = v16 < v10[2];
              }
            }
            while (!v40);
          }
          else
          {
            uint64_t v41 = a1 + 4;
            do
            {
              uint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              unsigned int v42 = *v41;
              BOOL v43 = v16 < v10[2];
              BOOL v5 = v15 == v42;
              BOOL v44 = v15 < v42;
              if (!v5) {
                BOOL v43 = v44;
              }
              uint64_t v41 = v10 + 4;
            }
            while (!v43);
          }
          unint64_t v45 = a2;
          if (v10 < a2)
          {
            unint64_t v45 = a2;
            do
            {
              unsigned int v46 = *(v45 - 4);
              v45 -= 4;
              BOOL v47 = v15 < v46;
              if (v15 == v46) {
                BOOL v47 = v16 < v45[2];
              }
            }
            while (v47);
          }
          unsigned int v48 = a1[1];
          unsigned int v49 = a1[3];
          while (v10 < v45)
          {
            long long v144 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v45;
            *(_OWORD *)unint64_t v45 = v144;
            do
            {
              unsigned int v50 = v10[4];
              v10 += 4;
              BOOL v51 = v15 < v50;
              if (v15 == v50) {
                BOOL v51 = v16 < v10[2];
              }
            }
            while (!v51);
            do
            {
              unsigned int v52 = *(v45 - 4);
              v45 -= 4;
              BOOL v53 = v15 < v52;
              if (v15 == v52) {
                BOOL v53 = v16 < v45[2];
              }
            }
            while (v53);
          }
          BOOL v4 = v10 - 4 >= a1;
          BOOL v5 = v10 - 4 == a1;
          if (v10 - 4 != a1) {
            *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
          }
          a4 = 0;
          *(v10 - 4) = v15;
          *(v10 - 3) = v48;
          *(v10 - 2) = v16;
          *(v10 - 1) = v49;
        }
        uint64_t v19 = 0;
        unsigned int v20 = a1[1];
        unsigned int v21 = a1[3];
        do
        {
          unsigned int v22 = a1[v19 + 4];
          BOOL v23 = a1[v19 + 6] < v16;
          BOOL v5 = v22 == v15;
          BOOL v24 = v22 < v15;
          if (!v5) {
            BOOL v23 = v24;
          }
          v19 += 4;
        }
        while (v23);
        unint64_t v25 = &a1[v19];
        uint64_t v26 = a2;
        if (v19 == 4)
        {
          uint64_t v26 = a2;
          do
          {
            if (v25 >= v26) {
              break;
            }
            unsigned int v29 = *(v26 - 4);
            v26 -= 4;
            BOOL v30 = v29 < v15;
            if (v29 == v15) {
              BOOL v30 = v26[2] < v16;
            }
          }
          while (!v30);
        }
        else
        {
          do
          {
            unsigned int v27 = *(v26 - 4);
            v26 -= 4;
            BOOL v28 = v27 < v15;
            if (v27 == v15) {
              BOOL v28 = v26[2] < v16;
            }
          }
          while (!v28);
        }
        uint64_t v10 = v25;
        if (v25 < v26)
        {
          unint64_t v31 = (unint64_t)v26;
          do
          {
            long long v143 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v31;
            *(_OWORD *)unint64_t v31 = v143;
            do
            {
              unsigned int v32 = v10[4];
              v10 += 4;
              BOOL v33 = v32 < v15;
              if (v32 == v15) {
                BOOL v33 = v10[2] < v16;
              }
            }
            while (v33);
            do
            {
              unsigned int v34 = *(_DWORD *)(v31 - 16);
              v31 -= 16;
              BOOL v35 = v34 < v15;
              if (v34 == v15) {
                BOOL v35 = *(_DWORD *)(v31 + 8) < v16;
              }
            }
            while (!v35);
          }
          while ((unint64_t)v10 < v31);
        }
        if (v10 - 4 != a1) {
          *(_OWORD *)a1 = *((_OWORD *)v10 - 1);
        }
        *(v10 - 4) = v15;
        *(v10 - 3) = v20;
        *(v10 - 2) = v16;
        *(v10 - 1) = v21;
        if (v25 >= v26) {
          break;
        }
LABEL_43:
        std::__introsort<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *,false>(a1, v10 - 4, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v36 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *>(a1, v10 - 4);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *>(v10, a2))
      {
        break;
      }
      if (!v36) {
        goto LABEL_43;
      }
    }
    a2 = v10 - 4;
    if (!v36) {
      continue;
    }
    break;
  }
}

unsigned int *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *>(unsigned int *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3 = *a2;
  unsigned int v4 = a2[2];
  BOOL v5 = *a2 < *result;
  if (*a2 == *result) {
    BOOL v5 = v4 < result[2];
  }
  BOOL v6 = a3[2] < v4;
  BOOL v7 = *a3 == v3;
  BOOL v8 = *a3 < v3;
  if (v7) {
    BOOL v8 = v6;
  }
  if (v5)
  {
    if (v8)
    {
      long long v9 = *(_OWORD *)result;
      *(_OWORD *)uint64_t result = *(_OWORD *)a3;
LABEL_17:
      *(_OWORD *)a3 = v9;
      return result;
    }
    long long v13 = *(_OWORD *)result;
    *(_OWORD *)uint64_t result = *(_OWORD *)a2;
    *(_OWORD *)a2 = v13;
    BOOL v14 = *a3 < *a2;
    if (*a3 == *a2) {
      BOOL v14 = a3[2] < a2[2];
    }
    if (v14)
    {
      long long v9 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      goto LABEL_17;
    }
  }
  else if (v8)
  {
    long long v10 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v10;
    BOOL v11 = *a2 < *result;
    if (*a2 == *result) {
      BOOL v11 = a2[2] < result[2];
    }
    if (v11)
    {
      long long v12 = *(_OWORD *)result;
      *(_OWORD *)uint64_t result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v12;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *>(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      BOOL v7 = a2 - 4;
      unsigned int v6 = *(a2 - 4);
      BOOL v8 = v6 == *a1;
      BOOL v9 = v6 < *a1;
      if (v8) {
        BOOL v9 = *(a2 - 2) < a1[2];
      }
      if (v9)
      {
        long long v10 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v7;
        *(_OWORD *)BOOL v7 = v10;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *>(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      uint64_t v26 = (long long *)(a1 + 4);
      unsigned int v27 = (long long *)(a1 + 8);
      BOOL v28 = (long long *)(a1 + 12);
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *>(a1, a1 + 4, a1 + 8, a1 + 12);
      unsigned int v30 = *(a2 - 4);
      unsigned int v29 = a2 - 4;
      unsigned int v31 = a1[12];
      BOOL v32 = v30 < v31;
      if (v30 == v31) {
        BOOL v32 = v29[2] < a1[14];
      }
      if (v32)
      {
        long long v33 = *v28;
        *BOOL v28 = *(_OWORD *)v29;
        *(_OWORD *)unsigned int v29 = v33;
        unsigned int v34 = a1[12];
        unsigned int v35 = a1[8];
        BOOL v8 = v34 == v35;
        BOOL v36 = v34 < v35;
        if (v8) {
          BOOL v36 = a1[14] < a1[10];
        }
        if (v36)
        {
          long long v37 = *v27;
          *unsigned int v27 = *v28;
          *BOOL v28 = v37;
          unsigned int v38 = a1[8];
          unsigned int v39 = a1[4];
          BOOL v8 = v38 == v39;
          BOOL v40 = v38 < v39;
          if (v8) {
            BOOL v40 = a1[10] < a1[6];
          }
          if (v40)
          {
            long long v41 = *v26;
            *uint64_t v26 = *v27;
            *unsigned int v27 = v41;
            unsigned int v42 = a1[4];
            BOOL v8 = v42 == *a1;
            BOOL v43 = v42 < *a1;
            if (v8) {
              BOOL v43 = a1[6] < a1[2];
            }
            if (v43)
            {
              long long v44 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v26;
              *uint64_t v26 = v44;
            }
          }
        }
      }
      return 1;
    default:
      BOOL v11 = a1 + 8;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *>(a1, a1 + 4, a1 + 8);
      long long v12 = a1 + 12;
      if (a1 + 12 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    unsigned int v15 = *v12;
    unsigned int v16 = v12[2];
    BOOL v17 = *v12 < *v11;
    if (*v12 == *v11) {
      BOOL v17 = v16 < v11[2];
    }
    if (v17)
    {
      unsigned int v18 = v12[1];
      unsigned int v19 = v12[3];
      uint64_t v20 = v13;
      while (1)
      {
        unsigned int v21 = (char *)a1 + v20;
        *(_OWORD *)((char *)a1 + v20 + 48) = *(_OWORD *)((char *)a1 + v20 + 32);
        if (v20 == -32) {
          break;
        }
        unsigned int v22 = *((_DWORD *)v21 + 4);
        BOOL v23 = v16 < *((_DWORD *)v21 + 6);
        BOOL v8 = v15 == v22;
        BOOL v24 = v15 < v22;
        if (!v8) {
          BOOL v23 = v24;
        }
        v20 -= 16;
        if (!v23)
        {
          unint64_t v25 = (unsigned int *)((char *)a1 + v20 + 48);
          goto LABEL_19;
        }
      }
      unint64_t v25 = a1;
LABEL_19:
      *unint64_t v25 = v15;
      v25[1] = v18;
      void v25[2] = v16;
      uint64_t v25[3] = v19;
      if (++v14 == 8) {
        return v12 + 4 == a2;
      }
    }
    BOOL v11 = v12;
    v13 += 16;
    v12 += 4;
    if (v12 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *>(a1, a2, a3);
  BOOL v9 = *a4 < *a3;
  if (*a4 == *a3) {
    BOOL v9 = a4[2] < a3[2];
  }
  if (v9)
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    BOOL v10 = *a3 < *a2;
    if (*a3 == *a2) {
      BOOL v10 = a3[2] < a2[2];
    }
    if (v10)
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      BOOL v11 = *a2 < *a1;
      if (*a2 == *a1) {
        BOOL v11 = a2[2] < a1[2];
      }
      if (v11)
      {
        __n128 result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

void *re::DynamicArray<re::ConstantResolution>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    BOOL v5 = result;
    if (result[2] <= a2)
    {
      __n128 result = (void *)*result;
      if (!*v5)
      {
        __n128 result = (void *)re::DynamicArray<re::ConstantResolution>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x70uLL))
        {
          uint64_t v2 = 112 * a2;
          __n128 result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 112 * a2, 8);
          if (result)
          {
            BOOL v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 112, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        __n128 result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      BOOL v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 112 * v9;
        BOOL v11 = v7;
        do
        {
          uint64_t v12 = *(void *)v8;
          v11[5] = 0;
          *BOOL v11 = v12;
          v11[1] = 0;
          uint64_t v11[2] = 0;
          float32x4_t v11[3] = 0;
          *((_DWORD *)v11 + 8) = 0;
          uint64_t v13 = v8 + 8;
          uint64_t v14 = *(void *)(v8 + 16);
          v11[1] = *(void *)(v8 + 8);
          *(void *)(v8 + 8) = 0;
          uint64_t v11[2] = v14;
          *(void *)(v8 + 16) = 0;
          uint64_t v15 = v11[3];
          float32x4_t v11[3] = *(void *)(v8 + 24);
          *(void *)(v8 + 24) = v15;
          uint64_t v16 = v11[5];
          uint64_t v17 = *(void *)(v8 + 48);
          v11[5] = *(void *)(v8 + 40);
          *(void *)(v8 + 4ArcSharedObject::ArcSharedObject(this, 0) = v16;
          ++*(_DWORD *)(v8 + 32);
          ++*((_DWORD *)v11 + 8);
          v11[11] = 0;
          v11[8] = 0;
          v11[9] = 0;
          v11[7] = 0;
          *((_DWORD *)v11 + 2ArcSharedObject::ArcSharedObject(this, 0) = 0;
          uint64_t v19 = *(void *)(v8 + 56);
          uint64_t v18 = v8 + 56;
          v11[6] = v17;
          uint64_t v20 = *(void *)(v18 + 8);
          v11[7] = v19;
          v11[8] = v20;
          *(void *)uint64_t v18 = 0;
          *(void *)(v18 + 8) = 0;
          uint64_t v21 = v11[9];
          v11[9] = *(void *)(v18 + 16);
          *(void *)(v18 + 16) = v21;
          uint64_t v22 = v11[11];
          v11[11] = *(void *)(v18 + 32);
          *(void *)(v18 + 32) = v22;
          ++*(_DWORD *)(v18 + 24);
          ++*((_DWORD *)v11 + 20);
          uint64_t v23 = *(void *)(v18 + 40);
          *((_DWORD *)v11 + 26) = *(_DWORD *)(v18 + 48);
          v11[12] = v23;
          re::DynamicArray<unsigned long>::deinit(v18);
          re::DynamicArray<unsigned long>::deinit(v13);
          uint64_t v8 = v18 + 56;
          v11 += 14;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      __n128 result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

unint64_t re::DynamicInlineArray<re::SamplerLayer,12ul>::ensureCapacity(unint64_t result, uint64_t a2)
{
  if (result > 0xB)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277, v2, v3);
    __n128 result = _os_crash();
    __break(1u);
  }
  return result;
}

double re::HashTable<re::WeakStringID,re::TextureBlockResolution,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 24 * v3;
      do
      {
        uint64_t v6 = a1[2];
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          uint64_t v8 = v6 + v4;
          *(_DWORD *)uint64_t v8 = v7 & 0x7FFFFFFF;
          *(void *)(v8 + 8) = 0;
        }
        v4 += 24;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<re::WeakStringID,re::TextureBlockResolution,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v27, 0, 36);
      *(void *)&v27[36] = 0x7FFFFFFFLL;
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v27, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v27;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v27[8];
      *(_OWORD *)unsigned int v27 = v5;
      *(void *)&v27[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v27[24];
      *(_OWORD *)&unsigned char v27[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v27[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        uint64_t v13 = (unint64_t *)(v6 + 8);
        do
        {
          if ((*(_DWORD *)(v13 - 1) & 0x80000000) != 0)
          {
            unint64_t v14 = *v13;
            unint64_t v15 = 0xBF58476D1CE4E5B9 * (*v13 ^ (*v13 >> 30));
            unint64_t v16 = (0x94D049BB133111EBLL * (v15 ^ (v15 >> 27))) ^ ((0x94D049BB133111EBLL * (v15 ^ (v15 >> 27))) >> 31);
            unint64_t v17 = *(unsigned int *)(a1 + 24);
            unint64_t v18 = v16 % v17;
            uint64_t v19 = *(unsigned int *)(a1 + 36);
            if (v19 == 0x7FFFFFFF)
            {
              uint64_t v19 = *(unsigned int *)(a1 + 32);
              int v20 = v19;
              if (v19 == v17)
              {
                re::HashTable<re::WeakStringID,re::TextureBlockResolution,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(a1, (2 * v11));
                unint64_t v18 = v16 % *(unsigned int *)(a1 + 24);
                int v20 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
                unint64_t v14 = *v13;
              }
              *(_DWORD *)(a1 + 32) = v20 + 1;
              uint64_t v21 = *(void *)(a1 + 16);
              int v22 = *(_DWORD *)(v21 + 24 * v19);
            }
            else
            {
              uint64_t v21 = *(void *)(a1 + 16);
              int v22 = *(_DWORD *)(v21 + 24 * v19);
              *(_DWORD *)(a1 + 36) = v22 & 0x7FFFFFFF;
            }
            uint64_t v23 = 24 * v19;
            *(_DWORD *)(v21 + v23) = v22 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + v23) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v19) & 0x80000000 | *(_DWORD *)(v12 + 4 * v18);
            *(void *)(*(void *)(a1 + 16) + 24 * v19 + 8) = v14;
            uint64_t v24 = *(void *)(a1 + 16) + 24 * v19;
            int v25 = *((_DWORD *)v13 + 2);
            *(_WORD *)(v24 + 2ArcSharedObject::ArcSharedObject(this, 0) = *((_WORD *)v13 + 6);
            *(_DWORD *)(v24 + 16) = v25;
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v18) = v19;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 3;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::WeakStringID,re::TextureBlockResolution,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)v27);
    }
  }
  else
  {
    if (a2) {
      signed int v26 = a2;
    }
    else {
      signed int v26 = 3;
    }
  }
}

void *re::DynamicArray<re::TextureBlockResolution>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    long long v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (*v5)
      {
        if (!a2)
        {
          long long v7 = 0;
          if (!v3) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 6uLL))
        {
          uint64_t v2 = 6 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 6 * a2, 2);
          if (result)
          {
            long long v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 6 * v5[2]);
            double result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 6, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
      }
      else
      {
        double result = (void *)re::DynamicArray<re::TextureBlockResolution>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

void **re::DynamicArray<re::TextureResolution>::copy(void **result, uint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= (unint64_t)result[2])
  {
    re::DynamicArray<re::TextureResolution>::setCapacity(result, *(void *)(a2 + 16));
    long long v5 = v3[2];
    if (v5)
    {
      memmove(v3[4], *(const void **)(a2 + 32), 8 * (void)v5);
      long long v5 = v3[2];
    }
    double result = (void **)memcpy((char *)v3[4] + 8 * (void)v5, (const void *)(*(void *)(a2 + 32) + 8 * (void)v5), 8 * v4 - 8 * (void)v5);
  }
  else if (v4)
  {
    double result = (void **)memmove(result[4], *(const void **)(a2 + 32), 8 * v4);
  }
  v3[2] = (void *)v4;
  return result;
}

uint64_t re::DynamicArray<re::ConstantResolution>::copy(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::ConstantResolution>::setCapacity(a1, *(void *)(a2 + 16));
    uint64_t result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::ConstantResolution *,re::ConstantResolution *,re::ConstantResolution *>(*(void *)(a2 + 32), *(void *)(a2 + 32) + 112 * a1[2], a1[4]);
    uint64_t v9 = a1[2];
    if (v9 != v4)
    {
      uint64_t v10 = *(void *)(a2 + 32);
      uint64_t v11 = v10 + 112 * v4;
      uint64_t v12 = a1[4];
      uint64_t v13 = 112 * v9;
      do
      {
        uint64_t v14 = v10 + v13;
        uint64_t v15 = v12 + v13;
        *(void *)(v12 + v13) = *(void *)(v10 + v13);
        re::DynamicArray<re::GeomCell4>::DynamicArray(v12 + v13 + 8, (uint64_t *)(v10 + v13 + 8));
        *(void *)(v15 + 48) = *(void *)(v10 + v13 + 48);
        uint64_t result = re::DynamicArray<re::GeomCell4>::DynamicArray(v12 + v13 + 56, (uint64_t *)(v10 + v13 + 56));
        uint64_t v16 = *(void *)(v10 + v13 + 96);
        *(_DWORD *)(v15 + 104) = *(_DWORD *)(v10 + v13 + 104);
        *(void *)(v15 + 96) = v16;
        v10 += 112;
        v12 += 112;
      }
      while (v14 + 112 != v11);
    }
  }
  else
  {
    uint64_t result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::ConstantResolution *,re::ConstantResolution *,re::ConstantResolution *>(*(void *)(a2 + 32), *(void *)(a2 + 32) + 112 * v4, a1[4]);
    uint64_t v6 = a1[2];
    if (v4 != v6)
    {
      uint64_t v7 = -112 * v4 + 112 * v6;
      uint64_t v8 = 112 * v4 + a1[4] + 56;
      do
      {
        re::DynamicArray<unsigned long>::deinit(v8);
        uint64_t result = re::DynamicArray<unsigned long>::deinit(v8 - 48);
        v8 += 112;
        v7 -= 112;
      }
      while (v7);
    }
  }
  a1[2] = v4;
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::ConstantResolution *,re::ConstantResolution *,re::ConstantResolution *>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v4 = a3 + 56;
    uint64_t v5 = result + 56;
    do
    {
      *(void *)(v4 - 56) = *(void *)(v5 - 56);
      re::DynamicArray<re::GeomCell4>::operator=(v4 - 48, (uint64_t *)(v5 - 48));
      *(void *)(v4 - 8) = *(void *)(v5 - 8);
      uint64_t result = re::DynamicArray<re::GeomCell4>::operator=(v4, (uint64_t *)v5);
      uint64_t v6 = *(void *)(v5 + 40);
      *(_DWORD *)(v4 + 48) = *(_DWORD *)(v5 + 48);
      *(void *)(v4 + 4ArcSharedObject::ArcSharedObject(this, 0) = v6;
      v4 += 112;
      uint64_t v7 = v5 + 56;
      v5 += 112;
    }
    while (v7 != a2);
  }
  return result;
}

void *re::DynamicArray<re::ArgumentBufferResolution>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::ArgumentBufferResolution>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x90uLL))
        {
          uint64_t v2 = 144 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 144 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_18;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 144, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        unint64_t v10 = 0;
        uint64_t v11 = 144 * v9;
        do
        {
          uint64_t v12 = &v7[v10 / 8];
          uint64_t v13 = v8 + v10;
          v12[4] = 0;
          v12[1] = 0;
          void v12[2] = 0;
          *uint64_t v12 = 0;
          *((_DWORD *)v12 + 6) = 0;
          uint64_t v14 = *(void *)(v8 + v10 + 8);
          *uint64_t v12 = *(void *)(v8 + v10);
          v12[1] = v14;
          *(void *)uint64_t v13 = 0;
          *(void *)(v13 + 8) = 0;
          uint64_t v15 = v7[v10 / 8 + 2];
          void v12[2] = *(void *)(v8 + v10 + 16);
          *(void *)(v13 + 16) = v15;
          uint64_t v16 = v7[v10 / 8 + 4];
          v12[4] = *(void *)(v8 + v10 + 32);
          *(void *)(v13 + 32) = v16;
          *(_DWORD *)(v13 + 24) = *(_DWORD *)(v8 + v10 + 24) + 1;
          *((_DWORD *)v12 + 6) = LODWORD(v7[v10 / 8 + 3]) + 1;
          v12[9] = 0;
          v12[6] = 0;
          v12[7] = 0;
          _OWORD v12[5] = 0;
          *((_DWORD *)v12 + 16) = 0;
          uint64_t v17 = *(void *)(v8 + v10 + 48);
          _OWORD v12[5] = *(void *)(v8 + v10 + 40);
          *(void *)(v8 + v10 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
          v12[6] = v17;
          *(void *)(v13 + 48) = 0;
          uint64_t v18 = v7[v10 / 8 + 7];
          v12[7] = *(void *)(v8 + v10 + 56);
          *(void *)(v13 + 56) = v18;
          uint64_t v19 = v7[v10 / 8 + 9];
          v12[9] = *(void *)(v8 + v10 + 72);
          *(void *)(v13 + 72) = v19;
          *(_DWORD *)(v13 + 64) = *(_DWORD *)(v8 + v10 + 64) + 1;
          *((_DWORD *)v12 + 16) = LODWORD(v7[v10 / 8 + 8]) + 1;
          v12[14] = 0;
          v12[11] = 0;
          unsigned char v12[12] = 0;
          v12[10] = 0;
          *((_DWORD *)v12 + 26) = 0;
          uint64_t v20 = *(void *)(v8 + v10 + 88);
          v12[10] = *(void *)(v8 + v10 + 80);
          *(void *)(v8 + v10 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
          v12[11] = v20;
          *(void *)(v13 + 88) = 0;
          uint64_t v21 = v7[v10 / 8 + 12];
          unsigned char v12[12] = *(void *)(v8 + v10 + 96);
          *(void *)(v13 + 96) = v21;
          uint64_t v22 = v7[v10 / 8 + 14];
          v12[14] = *(void *)(v8 + v10 + 112);
          *(void *)(v13 + 112) = v22;
          *(_DWORD *)(v13 + 104) = *(_DWORD *)(v8 + v10 + 104) + 1;
          *((_DWORD *)v12 + 26) = LODWORD(v7[v10 / 8 + 13]) + 1;
          v12[15] = *(void *)(v8 + v10 + 120);
          *(void *)(v13 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0;
          uint64_t v23 = *(void *)(v8 + v10 + 128);
          *((_WORD *)v12 + 68) = *(_WORD *)(v8 + v10 + 136);
          v12[16] = v23;
          uint64_t v24 = *(void **)(v8 + v10 + 120);
          if (v24)
          {

            *(void *)(v13 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0;
          }
          re::DynamicArray<re::ConstantResolution>::deinit(v8 + v10 + 80);
          re::DynamicArray<unsigned long>::deinit(v8 + v10 + 40);
          re::DynamicArray<unsigned long>::deinit(v8 + v10);
          v10 += 144;
        }
        while (v11 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t re::HashTable<unsigned long,re::TechniqueResolutions<re::AttributeResolution> *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v8 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(void *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v28, v13, v12);
          long long v15 = *(_OWORD *)v28;
          *(_OWORD *)BOOL v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v28[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v28[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v19;
          unint64_t v20 = v18;
          if (v18)
          {
            unint64_t v21 = 0;
            uint64_t v22 = (void *)(v17 + 8);
            do
            {
              if ((*(_DWORD *)(v22 - 1) & 0x80000000) != 0) {
                re::HashTable<unsigned long,re::TechniqueResolutions<re::AttributeResolution> *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(a1, *v22 % (unint64_t)*(unsigned int *)(a1 + 24), *v22, v22, v22 + 1);
              }
              ++v21;
              v22 += 3;
            }
            while (v21 < v20);
          }
          re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)v28);
        }
      }
      else
      {
        if (v12) {
          signed int v25 = 2 * v11;
        }
        else {
          signed int v25 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 24 * v8);
  }
  else
  {
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 24 * v8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  uint64_t v26 = 24 * v8;
  *(_DWORD *)(v23 + v26) = v24 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v26) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 24 * v8 + 8) = *a4;
  *(void *)(*(void *)(a1 + 16) + 24 * v8 + 16) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void *re::allocInfo_MeshPartFlags(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96A20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF96A20))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF96E58, "MeshPartFlags");
    __cxa_guard_release(&qword_26AF96A20);
  }
  return &unk_26AF96E58;
}

void re::initInfo_MeshPartFlags(re *this, re::IntrospectionBase *a2)
{
  v16[0] = 0xDD4C8A65E2975D8ELL;
  v16[1] = "MeshPartFlags";
  re::StringID::destroyString((re::StringID *)v16);
  *((_OWORD *)this + 2) = v17;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96A28, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF96A28);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::Optional<BOOL>>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "doubleSided";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF96B08 = v8;
      int v9 = re::introspectionAllocator((re *)v8);
      re::IntrospectionInfo<re::Optional<re::WindingOrder>>::get((uint64_t)v9, v10);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "windingOrder";
      *(void *)(v11 + 16) = &qword_26AF96B60;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x200000002;
      *(_DWORD *)(v11 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF96B10 = v11;
      signed int v12 = re::introspectionAllocator((re *)v11);
      re::IntrospectionInfo<re::Optional<re::OccupancyBehavior>>::get((uint64_t)v12, v13);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "occupancyBehavior";
      *(void *)(v14 + 16) = &qword_26AF96BA0;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x400000003;
      *(_DWORD *)(v14 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF96B18 = v14;
      __cxa_guard_release(&qword_26AF96A28);
    }
  }
  *((void *)this + 2) = 0x600000008;
  *((_DWORD *)this + 6) = 1;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF96B08;
  *((void *)this + 9) = re::internal::defaultConstruct<re::MeshPartFlags>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::MeshPartFlags>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::MeshPartFlags>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::MeshPartFlags>;
  re::IntrospectionRegistry::add(this, v3);
  long long v15 = v17;
}

void re::IntrospectionInfo<re::Optional<re::WindingOrder>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96A98, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF96A98))
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_26AF96B60);
    qword_26AF96B60 = (uint64_t)&unk_26E7135C8;
    __cxa_guard_release(&qword_26AF96A98);
  }
  if ((byte_26AF969E4 & 1) == 0)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF969F0, memory_order_acquire) & 1) == 0)
    {
      unsigned int v31 = (re *)__cxa_guard_acquire(&qword_26AF969F0);
      if (v31)
      {
        BOOL v32 = re::introspectionAllocator(v31);
        long long v33 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 24, 8);
        *(_DWORD *)long long v33 = 1;
        *((void *)v33 + 1) = 0;
        *((void *)v33 + 2) = "CW";
        qword_26AF96AC0 = (uint64_t)v33;
        unsigned int v34 = re::introspectionAllocator(v33);
        uint64_t v35 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v34 + 32))(v34, 24, 8);
        *(_DWORD *)uint64_t v35 = 1;
        *(void *)(v35 + 8) = 1;
        *(void *)(v35 + 16) = "CCW";
        qword_26AF96AC8 = v35;
        __cxa_guard_release(&qword_26AF969F0);
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF969F8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF969F8))
    {
      re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF96CA0, "WindingOrder", 1, 1, 1, 1);
      qword_26AF96CA0 = (uint64_t)&unk_26E715E00;
      qword_26AF96CE0 = (uint64_t)&re::introspect_WindingOrder(BOOL)::enumTable;
      dword_26AF96CB0 = 9;
      __cxa_guard_release(&qword_26AF969F8);
    }
    if ((_MergedGlobals_408 & 1) == 0)
    {
      _MergedGlobals_408 = 1;
      re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF96CA0, a2);
      *(void *)&long long v38 = 0x3FD39B1D38223168;
      *((void *)&v38 + 1) = "WindingOrder";
      uint64_t v41 = 0x31CD534126;
      v42[0] = "uint8_t";
      uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v41);
      if (!v2)
      {
        re::StringID::destroyString((re::StringID *)&v41);
        re::internal::assertLog((re::internal *)5, v36, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "WindingOrder");
        _os_crash();
        __break(1u);
        return;
      }
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)&v41);
      uint64_t v4 = (unsigned int *)qword_26AF96CE0;
      *((void *)&v40 + 1) = v3;
      re::TypeBuilder::beginEnumType((uint64_t)&v41, (uint64_t *)&v38, 1, 1, (uint64_t)&v40);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            int v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  signed int v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v39.char var0 = 2 * v10;
            v39.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v41, v14, &v39);
            re::StringID::destroyString((re::StringID *)&v39);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              long long v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    unint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v39.char var0 = 2 * v18;
              v39.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v41, v22, &v39);
              re::StringID::destroyString((re::StringID *)&v39);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v41, v23);
      xmmword_26AF96CC0 = (__int128)v39;
      re::StringID::destroyString((re::StringID *)&v38);
    }
    if ((byte_26AF969E4 & 1) == 0)
    {
      byte_26AF969E4 = 1;
      int v24 = dword_26AF96CB8;
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF96B60, 0);
      qword_26AF96B70 = 0x20000000DLL;
      dword_26AF96B78 = v24;
      word_26AF96B7C = 0;
      *(void *)&xmmword_26AF96B80 = 0;
      *((void *)&xmmword_26AF96B80 + 1) = 0xFFFFFFFFLL;
      qword_26AF96B90 = (uint64_t)&qword_26AF96CA0;
      unk_26AF96B98 = 0;
      qword_26AF96B60 = (uint64_t)&unk_26E7135C8;
      re::IntrospectionRegistry::add(v25, v26);
      re::getPrettyTypeName((re *)&qword_26AF96B60, (const re::IntrospectionBase *)&v41);
      if (v42[0]) {
        unsigned int v27 = (const char *)v42[1];
      }
      else {
        unsigned int v27 = (char *)v42 + 1;
      }
      if (v41 && (v42[0] & 1) != 0) {
        (*(void (**)(void))(*(void *)v41 + 40))();
      }
      long long v38 = xmmword_26AF96CC0;
      BOOL v28 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v39);
      if (v28)
      {
        uint64_t v29 = *v28;
        *((void *)&v37 + 1) = v29;
      }
      else
      {
        long long v40 = v38;
        re::TypeBuilder::beginOptionalType((uint64_t)&v41, (uint64_t *)&v39, 2uLL, 1uLL, &v40);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v41, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::WindingOrder>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::WindingOrder>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v41, v30);
      }
      xmmword_26AF96B80 = v37;
      re::StringID::destroyString((re::StringID *)&v39);
    }
  }
}

void re::IntrospectionInfo<re::Optional<re::OccupancyBehavior>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96AA0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF96AA0))
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_26AF96BA0);
    qword_26AF96BA0 = (uint64_t)&unk_26E713648;
    __cxa_guard_release(&qword_26AF96AA0);
  }
  if ((byte_26AF969E5 & 1) == 0)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96A88, memory_order_acquire) & 1) == 0)
    {
      unsigned int v31 = (re *)__cxa_guard_acquire(&qword_26AF96A88);
      if (v31)
      {
        BOOL v32 = re::introspectionAllocator(v31);
        long long v33 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 24, 8);
        *(_DWORD *)long long v33 = 1;
        *((void *)v33 + 1) = 0;
        *((void *)v33 + 2) = "Default";
        qword_26AF96B20 = (uint64_t)v33;
        unsigned int v34 = re::introspectionAllocator(v33);
        uint64_t v35 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v34 + 32))(v34, 24, 8);
        *(_DWORD *)uint64_t v35 = 1;
        *((void *)v35 + 1) = 2;
        *((void *)v35 + 2) = "OptIn";
        qword_26AF96B28 = (uint64_t)v35;
        uint64_t v36 = re::introspectionAllocator(v35);
        uint64_t v37 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 24, 8);
        *(_DWORD *)uint64_t v37 = 1;
        *(void *)(v37 + 8) = 1;
        *(void *)(v37 + 16) = "OptOut";
        qword_26AF96B30 = v37;
        __cxa_guard_release(&qword_26AF96A88);
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96A90, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF96A90))
    {
      re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF96DC0, "OccupancyBehavior", 1, 1, 1, 1);
      qword_26AF96DC0 = (uint64_t)&unk_26E715E00;
      qword_26AF96E00 = (uint64_t)&re::introspect_OccupancyBehavior(BOOL)::enumTable;
      dword_26AF96DD0 = 9;
      __cxa_guard_release(&qword_26AF96A90);
    }
    if ((byte_26AF969E3 & 1) == 0)
    {
      byte_26AF969E3 = 1;
      re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF96DC0, a2);
      *(void *)&long long v40 = 0x8C097A668536533ELL;
      *((void *)&v40 + 1) = "OccupancyBehavior";
      uint64_t v43 = 0x31CD534126;
      v44[0] = "uint8_t";
      uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v43);
      if (!v2)
      {
        re::StringID::destroyString((re::StringID *)&v43);
        re::internal::assertLog((re::internal *)5, v38, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "OccupancyBehavior");
        _os_crash();
        __break(1u);
        return;
      }
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)&v43);
      uint64_t v4 = (unsigned int *)qword_26AF96E00;
      *((void *)&v42 + 1) = v3;
      re::TypeBuilder::beginEnumType((uint64_t)&v43, (uint64_t *)&v40, 1, 1, (uint64_t)&v42);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            int v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  signed int v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v41.char var0 = 2 * v10;
            v41.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v43, v14, &v41);
            re::StringID::destroyString((re::StringID *)&v41);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              long long v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    unint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v41.char var0 = 2 * v18;
              v41.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v43, v22, &v41);
              re::StringID::destroyString((re::StringID *)&v41);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v43, v23);
      xmmword_26AF96DE0 = (__int128)v41;
      re::StringID::destroyString((re::StringID *)&v40);
    }
    if ((byte_26AF969E5 & 1) == 0)
    {
      byte_26AF969E5 = 1;
      int v24 = dword_26AF96DD8;
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF96BA0, 0);
      qword_26AF96BB0 = 0x20000000DLL;
      dword_26AF96BB8 = v24;
      word_26AF96BBC = 0;
      *(void *)&xmmword_26AF96BC0 = 0;
      *((void *)&xmmword_26AF96BC0 + 1) = 0xFFFFFFFFLL;
      qword_26AF96BD0 = (uint64_t)&qword_26AF96DC0;
      unk_26AF96BD8 = 0;
      qword_26AF96BA0 = (uint64_t)&unk_26E713648;
      re::IntrospectionRegistry::add(v25, v26);
      re::getPrettyTypeName((re *)&qword_26AF96BA0, (const re::IntrospectionBase *)&v43);
      if (v44[0]) {
        unsigned int v27 = (const char *)v44[1];
      }
      else {
        unsigned int v27 = (char *)v44 + 1;
      }
      if (v43 && (v44[0] & 1) != 0) {
        (*(void (**)(void))(*(void *)v43 + 40))();
      }
      long long v40 = xmmword_26AF96DE0;
      BOOL v28 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v41);
      if (v28)
      {
        uint64_t v29 = *v28;
        *((void *)&v39 + 1) = v29;
      }
      else
      {
        long long v42 = v40;
        re::TypeBuilder::beginOptionalType((uint64_t)&v43, (uint64_t *)&v41, 2uLL, 1uLL, &v42);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v43, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::OccupancyBehavior>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::OccupancyBehavior>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v43, v30);
      }
      xmmword_26AF96BC0 = v39;
      re::StringID::destroyString((re::StringID *)&v41);
    }
  }
}

void re::internal::defaultConstruct<re::MeshPartFlags>(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  *a3 = 0;
  a3[2] = 0;
  a3[4] = 0;
}

unsigned char *re::internal::defaultConstructV2<re::MeshPartFlags>(unsigned char *result)
{
  void *result = 0;
  result[2] = 0;
  result[4] = 0;
  return result;
}

uint64_t re::introspect_MeshPartFlags(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshPartFlags", (uint64_t (*)(re::internal *))re::allocInfo_MeshPartFlags, (re::IntrospectionBase *(*)(void))re::initInfo_MeshPartFlags, (void (*)(re::IntrospectionBase *))&qword_26AF96A30, this);
}

void *re::allocInfo_OverrideMeshPartFlags(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96A38, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF96A38))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF96ED0, "OverrideMeshPartFlags");
    __cxa_guard_release(&qword_26AF96A38);
  }
  return &unk_26AF96ED0;
}

void re::initInfo_OverrideMeshPartFlags(re *this, re::IntrospectionBase *a2)
{
  v15[0] = 0x12E7D947D9ECDCB6;
  v15[1] = "OverrideMeshPartFlags";
  re::StringID::destroyString((re::StringID *)v15);
  *((_OWORD *)this + 2) = v16;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96A40, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF96A40);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      unint64_t v6 = v5;
      uint64_t v7 = (re *)qword_26AF96A30;
      if (!qword_26AF96A30)
      {
        uint64_t v7 = (re *)re::allocInfo_MeshPartFlags(v5);
        qword_26AF96A30 = (uint64_t)v7;
        re::initInfo_MeshPartFlags(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "MeshPartFlags";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 4ArcSharedObject::ArcSharedObject(this, 0) = 3;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF96AE0 = v9;
      uint64_t v10 = re::introspectionAllocator((re *)v9);
      signed int v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "overrideWindingOrderToReverse";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x600000001;
      *(_DWORD *)(v13 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF96AE8 = v13;
      __cxa_guard_release(&qword_26AF96A40);
    }
  }
  *((void *)this + 2) = 0x700000008;
  *((_DWORD *)this + 6) = 1;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF96AE0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::OverrideMeshPartFlags>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::OverrideMeshPartFlags>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::OverrideMeshPartFlags>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::OverrideMeshPartFlags>;
  re::IntrospectionRegistry::add(this, v3);
  long long v14 = v16;
}

void re::internal::defaultConstruct<re::OverrideMeshPartFlags>(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  *a3 = 0;
  a3[2] = 0;
  a3[4] = 0;
  a3[6] = 0;
}

unsigned char *re::internal::defaultConstructV2<re::OverrideMeshPartFlags>(unsigned char *result)
{
  void *result = 0;
  result[2] = 0;
  result[4] = 0;
  result[6] = 0;
  return result;
}

void *re::allocInfo_MeshRuntimeFlags(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96A50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF96A50))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF96F48, "MeshRuntimeFlags");
    __cxa_guard_release(&qword_26AF96A50);
  }
  return &unk_26AF96F48;
}

void re::initInfo_MeshRuntimeFlags(re *this, re::IntrospectionBase *a2)
{
  v25[0] = 0xCFFA554448271078;
  v25[1] = "MeshRuntimeFlags";
  re::StringID::destroyString((re::StringID *)v25);
  *((_OWORD *)this + 2) = v26;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96A58, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF96A58);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::Optional<BOOL>>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "enableRendering";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF96B38 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      char v11 = re::IntrospectionInfo<re::Optional<BOOL>>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "enableCulling";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x200000002;
      *(_DWORD *)(v12 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF96B40 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      long long v15 = re::IntrospectionInfo<re::Optional<BOOL>>::get(1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "castsShadows";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x400000003;
      *(_DWORD *)(v16 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF96B48 = v16;
      long long v17 = re::introspectionAllocator((re *)v16);
      char v19 = re::IntrospectionInfo<re::Optional<BOOL>>::get(1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "enablePortalCrossing";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x600000004;
      *(_DWORD *)(v20 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF96B50 = v20;
      int v21 = re::introspectionAllocator((re *)v20);
      re::IntrospectionInfo<re::Optional<short>>::get((uint64_t)v21, v22);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "techniqueQualityLevelBias";
      *(void *)(v23 + 16) = &qword_26AF96BE0;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x800000005;
      *(_DWORD *)(v23 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF96B58 = v23;
      __cxa_guard_release(&qword_26AF96A58);
    }
  }
  *((void *)this + 2) = 0xC00000008;
  *((_DWORD *)this + 6) = 2;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + 8) = &qword_26AF96B38;
  *((void *)this + 9) = re::internal::defaultConstruct<re::MeshRuntimeFlags>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::MeshRuntimeFlags>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::MeshRuntimeFlags>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::MeshRuntimeFlags>;
  re::IntrospectionRegistry::add(this, v3);
  long long v24 = v26;
}

void re::IntrospectionInfo<re::Optional<short>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96AA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF96AA8))
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_26AF96BE0);
    qword_26AF96BE0 = (uint64_t)&unk_26E7136C8;
    __cxa_guard_release(&qword_26AF96AA8);
  }
  if ((byte_26AF969E6 & 1) == 0)
  {
    uint64_t v2 = re::introspect_short((re *)1, a2);
    if ((byte_26AF969E6 & 1) == 0)
    {
      uint64_t v3 = (uint64_t)v2;
      byte_26AF969E6 = 1;
      int v4 = v2[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF96BE0, 0);
      qword_26AF96BF0 = 0x40000000DLL;
      dword_26AF96BF8 = v4;
      word_26AF96BFC = 0;
      *(void *)&xmmword_26AF96C00 = 0;
      *((void *)&xmmword_26AF96C00 + 1) = 0xFFFFFFFFLL;
      qword_26AF96C10 = v3;
      qword_26AF96C18 = 0;
      qword_26AF96BE0 = (uint64_t)&unk_26E7136C8;
      re::IntrospectionRegistry::add(v5, v6);
      re::getPrettyTypeName((re *)&qword_26AF96BE0, (const re::IntrospectionBase *)&v15);
      if (v16) {
        uint64_t v7 = *(const char **)&v17[7];
      }
      else {
        uint64_t v7 = v17;
      }
      if (v15 && (v16 & 1) != 0) {
        (*(void (**)(void))(*(void *)v15 + 40))();
      }
      long long v12 = *(_OWORD *)(v3 + 32);
      uint64_t v8 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v13);
      if (v8)
      {
        uint64_t v9 = *v8;
        *((void *)&v11 + 1) = v9;
      }
      else
      {
        long long v14 = v12;
        re::TypeBuilder::beginOptionalType((uint64_t)&v15, v13, 4uLL, 2uLL, &v14);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v15, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v15, v10);
      }
      xmmword_26AF96C00 = v11;
      re::StringID::destroyString((re::StringID *)v13);
    }
  }
}

void re::internal::defaultConstruct<re::MeshRuntimeFlags>(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  *a3 = 0;
  a3[2] = 0;
  a3[4] = 0;
  a3[6] = 0;
  a3[8] = 0;
}

unsigned char *re::internal::defaultConstructV2<re::MeshRuntimeFlags>(unsigned char *result)
{
  void *result = 0;
  result[2] = 0;
  result[4] = 0;
  result[6] = 0;
  result[8] = 0;
  return result;
}

void *re::allocInfo_MaterialRenderFlags(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96A68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF96A68))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF96FC0, "MaterialRenderFlags");
    __cxa_guard_release(&qword_26AF96A68);
  }
  return &unk_26AF96FC0;
}

void re::initInfo_MaterialRenderFlags(re *this, re::IntrospectionBase *a2)
{
  v40[0] = 0xB194D3BA54A4CD94;
  v40[1] = "MaterialRenderFlags";
  re::StringID::destroyString((re::StringID *)v40);
  *((_OWORD *)this + 2) = v41;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96A70, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF96A70);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::Optional<BOOL>>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "doubleSided";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF96D78 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      re::IntrospectionInfo<re::Optional<re::CullingMode>>::get((uint64_t)v9, v10);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "cullMode";
      *(void *)(v11 + 16) = &qword_26AF96C20;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x200000002;
      *(_DWORD *)(v11 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF96D80 = v11;
      long long v12 = re::introspectionAllocator((re *)v11);
      long long v14 = re::IntrospectionInfo<re::Optional<BOOL>>::get(1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "visibleCamera0";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x600000003;
      *(_DWORD *)(v15 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF96D88 = v15;
      char v16 = re::introspectionAllocator((re *)v15);
      uint64_t v18 = re::IntrospectionInfo<re::Optional<BOOL>>::get(1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "visibleCamera1";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x800000004;
      *(_DWORD *)(v19 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF96D90 = v19;
      uint64_t v20 = re::introspectionAllocator((re *)v19);
      re::IntrospectionInfo<re::Optional<re::TriangleFillModeInternal>>::get((uint64_t)v20, v21);
      uint64_t v22 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + 8) = "triangleFillMode";
      *(void *)(v22 + 16) = &qword_26AF96C60;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + 32) = 0x400000005;
      *(_DWORD *)(v22 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v22 + 48) = 0;
      *(void *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_26AF96D98 = v22;
      uint64_t v23 = re::introspectionAllocator((re *)v22);
      signed int v25 = re::IntrospectionInfo<re::Optional<BOOL>>::get(1, v24);
      uint64_t v26 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v23 + 32))(v23, 72, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *(void *)(v26 + 8) = "writesDepth";
      *(void *)(v26 + 16) = v25;
      *(void *)(v26 + 24) = 0;
      *(void *)(v26 + 32) = 0xA00000006;
      *(_DWORD *)(v26 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v26 + 48) = 0;
      *(void *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_26AF96DA0 = v26;
      unsigned int v27 = re::introspectionAllocator((re *)v26);
      uint64_t v29 = re::IntrospectionInfo<re::Optional<BOOL>>::get(1, v28);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 72, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + 8) = "readsDepth";
      *(void *)(v30 + 16) = v29;
      *(void *)(v30 + 24) = 0;
      *(void *)(v30 + 32) = 0xC00000007;
      *(_DWORD *)(v30 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v30 + 48) = 0;
      *(void *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_26AF96DA8 = v30;
      unsigned int v31 = re::introspectionAllocator((re *)v30);
      long long v33 = re::IntrospectionInfo<re::Optional<BOOL>>::get(1, v32);
      uint64_t v34 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 72, 8);
      *(_DWORD *)uint64_t v34 = 1;
      *(void *)(v34 + 8) = "needsPassthroughBlur";
      *(void *)(v34 + 16) = v33;
      *(void *)(v34 + 24) = 0;
      *(void *)(v34 + 32) = 0xE00000008;
      *(_DWORD *)(v34 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v34 + 48) = 0;
      *(void *)(v34 + 56) = 0;
      *(_DWORD *)(v34 + 64) = 0;
      qword_26AF96DB0 = v34;
      uint64_t v35 = re::introspectionAllocator((re *)v34);
      uint64_t v37 = re::IntrospectionInfo<re::Optional<BOOL>>::get(1, v36);
      uint64_t v38 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 72, 8);
      *(_DWORD *)uint64_t v38 = 1;
      *(void *)(v38 + 8) = "needsVCABlur";
      *(void *)(v38 + 16) = v37;
      *(void *)(v38 + 24) = 0;
      *(void *)(v38 + 32) = 0x1000000009;
      *(_DWORD *)(v38 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v38 + 48) = 0;
      *(void *)(v38 + 56) = 0;
      *(_DWORD *)(v38 + 64) = 0;
      qword_26AF96DB8 = v38;
      __cxa_guard_release(&qword_26AF96A70);
    }
  }
  *((void *)this + 2) = 0x1200000008;
  *((_DWORD *)this + 6) = 1;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 9;
  *((void *)this + 8) = &qword_26AF96D78;
  *((void *)this + 9) = re::internal::defaultConstruct<re::MaterialRenderFlags>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::MaterialRenderFlags>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::MaterialRenderFlags>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::MaterialRenderFlags>;
  re::IntrospectionRegistry::add(this, v3);
  long long v39 = v41;
}

void re::IntrospectionInfo<re::Optional<re::CullingMode>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96AB0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF96AB0))
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_26AF96C20);
    qword_26AF96C20 = (uint64_t)&unk_26E713748;
    __cxa_guard_release(&qword_26AF96AB0);
  }
  if ((byte_26AF969E7 & 1) == 0)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96A00, memory_order_acquire) & 1) == 0)
    {
      unsigned int v31 = (re *)__cxa_guard_acquire(&qword_26AF96A00);
      if (v31)
      {
        BOOL v32 = re::introspectionAllocator(v31);
        long long v33 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 24, 8);
        *(_DWORD *)long long v33 = 1;
        *((void *)v33 + 1) = 0;
        *((void *)v33 + 2) = "None";
        qword_26AF96AF0 = (uint64_t)v33;
        uint64_t v34 = re::introspectionAllocator(v33);
        uint64_t v35 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v34 + 32))(v34, 24, 8);
        *(_DWORD *)uint64_t v35 = 1;
        *((void *)v35 + 1) = 1;
        *((void *)v35 + 2) = "Front";
        qword_26AF96AF8 = (uint64_t)v35;
        uint64_t v36 = re::introspectionAllocator(v35);
        uint64_t v37 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v36 + 32))(v36, 24, 8);
        *(_DWORD *)uint64_t v37 = 1;
        *(void *)(v37 + 8) = 2;
        *(void *)(v37 + 16) = "Back";
        qword_26AF96B00 = v37;
        __cxa_guard_release(&qword_26AF96A00);
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96A08, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF96A08))
    {
      re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF96CE8, "CullingMode", 1, 1, 1, 1);
      qword_26AF96CE8 = (uint64_t)&unk_26E715E00;
      qword_26AF96D28 = (uint64_t)&re::introspect_CullingMode(BOOL)::enumTable;
      dword_26AF96CF8 = 9;
      __cxa_guard_release(&qword_26AF96A08);
    }
    if ((byte_26AF969E1 & 1) == 0)
    {
      byte_26AF969E1 = 1;
      re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF96CE8, a2);
      *(void *)&long long v40 = 0x19CDA08E27985A6;
      *((void *)&v40 + 1) = "CullingMode";
      uint64_t v43 = 0x31CD534126;
      v44[0] = "uint8_t";
      uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v43);
      if (!v2)
      {
        re::StringID::destroyString((re::StringID *)&v43);
        re::internal::assertLog((re::internal *)5, v38, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "CullingMode");
        _os_crash();
        __break(1u);
        return;
      }
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)&v43);
      int v4 = (unsigned int *)qword_26AF96D28;
      *((void *)&v42 + 1) = v3;
      re::TypeBuilder::beginEnumType((uint64_t)&v43, (uint64_t *)&v40, 1, 1, (uint64_t)&v42);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  long long v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v41.char var0 = 2 * v10;
            v41.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v43, v14, &v41);
            re::StringID::destroyString((re::StringID *)&v41);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              long long v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v41.char var0 = 2 * v18;
              v41.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v43, v22, &v41);
              re::StringID::destroyString((re::StringID *)&v41);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v43, v23);
      xmmword_26AF96D08 = (__int128)v41;
      re::StringID::destroyString((re::StringID *)&v40);
    }
    if ((byte_26AF969E7 & 1) == 0)
    {
      byte_26AF969E7 = 1;
      int v24 = dword_26AF96D00;
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF96C20, 0);
      qword_26AF96C30 = 0x20000000DLL;
      dword_26AF96C38 = v24;
      word_26AF96C3C = 0;
      *(void *)&xmmword_26AF96C40 = 0;
      *((void *)&xmmword_26AF96C40 + 1) = 0xFFFFFFFFLL;
      qword_26AF96C50 = (uint64_t)&qword_26AF96CE8;
      qword_26AF96C58 = 0;
      qword_26AF96C20 = (uint64_t)&unk_26E713748;
      re::IntrospectionRegistry::add(v25, v26);
      re::getPrettyTypeName((re *)&qword_26AF96C20, (const re::IntrospectionBase *)&v43);
      if (v44[0]) {
        unsigned int v27 = (const char *)v44[1];
      }
      else {
        unsigned int v27 = (char *)v44 + 1;
      }
      if (v43 && (v44[0] & 1) != 0) {
        (*(void (**)(void))(*(void *)v43 + 40))();
      }
      long long v40 = xmmword_26AF96D08;
      BOOL v28 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v41);
      if (v28)
      {
        uint64_t v29 = *v28;
        *((void *)&v39 + 1) = v29;
      }
      else
      {
        long long v42 = v40;
        re::TypeBuilder::beginOptionalType((uint64_t)&v43, (uint64_t *)&v41, 2uLL, 1uLL, &v42);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v43, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::CullingMode>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::CullingMode>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v43, v30);
      }
      xmmword_26AF96C40 = v39;
      re::StringID::destroyString((re::StringID *)&v41);
    }
  }
}

void re::IntrospectionInfo<re::Optional<re::TriangleFillModeInternal>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96AB8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF96AB8))
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_26AF96C60);
    qword_26AF96C60 = (uint64_t)&unk_26E7137C8;
    __cxa_guard_release(&qword_26AF96AB8);
  }
  if ((byte_26AF969E8 & 1) == 0)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96A10, memory_order_acquire) & 1) == 0)
    {
      unsigned int v31 = (re *)__cxa_guard_acquire(&qword_26AF96A10);
      if (v31)
      {
        BOOL v32 = re::introspectionAllocator(v31);
        long long v33 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 24, 8);
        *(_DWORD *)long long v33 = 1;
        *((void *)v33 + 1) = 0;
        *((void *)v33 + 2) = "Fill";
        qword_26AF96AD0 = (uint64_t)v33;
        uint64_t v34 = re::introspectionAllocator(v33);
        uint64_t v35 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v34 + 32))(v34, 24, 8);
        *(_DWORD *)uint64_t v35 = 1;
        *(void *)(v35 + 8) = 1;
        *(void *)(v35 + 16) = "Line";
        qword_26AF96AD8 = v35;
        __cxa_guard_release(&qword_26AF96A10);
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96A18, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF96A18))
    {
      re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF96D30, "TriangleFillModeInternal", 1, 1, 1, 1);
      qword_26AF96D30 = (uint64_t)&unk_26E715E00;
      qword_26AF96D70 = (uint64_t)&re::introspect_TriangleFillModeInternal(BOOL)::enumTable;
      dword_26AF96D40 = 9;
      __cxa_guard_release(&qword_26AF96A18);
    }
    if ((byte_26AF969E2 & 1) == 0)
    {
      byte_26AF969E2 = 1;
      re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF96D30, a2);
      *(void *)&long long v38 = 0xF8D525F22FD521D6;
      *((void *)&v38 + 1) = "TriangleFillModeInternal";
      uint64_t v41 = 0x31CD534126;
      v42[0] = "uint8_t";
      uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v41);
      if (!v2)
      {
        re::StringID::destroyString((re::StringID *)&v41);
        re::internal::assertLog((re::internal *)5, v36, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "TriangleFillModeInternal");
        _os_crash();
        __break(1u);
        return;
      }
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)&v41);
      int v4 = (unsigned int *)qword_26AF96D70;
      *((void *)&v40 + 1) = v3;
      re::TypeBuilder::beginEnumType((uint64_t)&v41, (uint64_t *)&v38, 1, 1, (uint64_t)&v40);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  long long v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v39.char var0 = 2 * v10;
            v39.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v41, v14, &v39);
            re::StringID::destroyString((re::StringID *)&v39);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              long long v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v39.char var0 = 2 * v18;
              v39.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v41, v22, &v39);
              re::StringID::destroyString((re::StringID *)&v39);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v41, v23);
      xmmword_26AF96D50 = (__int128)v39;
      re::StringID::destroyString((re::StringID *)&v38);
    }
    if ((byte_26AF969E8 & 1) == 0)
    {
      byte_26AF969E8 = 1;
      int v24 = dword_26AF96D48;
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF96C60, 0);
      qword_26AF96C70 = 0x20000000DLL;
      dword_26AF96C78 = v24;
      word_26AF96C7C = 0;
      *(void *)&xmmword_26AF96C80 = 0;
      *((void *)&xmmword_26AF96C80 + 1) = 0xFFFFFFFFLL;
      qword_26AF96C90 = (uint64_t)&qword_26AF96D30;
      qword_26AF96C98 = 0;
      qword_26AF96C60 = (uint64_t)&unk_26E7137C8;
      re::IntrospectionRegistry::add(v25, v26);
      re::getPrettyTypeName((re *)&qword_26AF96C60, (const re::IntrospectionBase *)&v41);
      if (v42[0]) {
        unsigned int v27 = (const char *)v42[1];
      }
      else {
        unsigned int v27 = (char *)v42 + 1;
      }
      if (v41 && (v42[0] & 1) != 0) {
        (*(void (**)(void))(*(void *)v41 + 40))();
      }
      long long v38 = xmmword_26AF96D50;
      BOOL v28 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v39);
      if (v28)
      {
        uint64_t v29 = *v28;
        *((void *)&v37 + 1) = v29;
      }
      else
      {
        long long v40 = v38;
        re::TypeBuilder::beginOptionalType((uint64_t)&v41, (uint64_t *)&v39, 2uLL, 1uLL, &v40);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v41, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::TriangleFillModeInternal>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::TriangleFillModeInternal>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v41, v30);
      }
      xmmword_26AF96C80 = v37;
      re::StringID::destroyString((re::StringID *)&v39);
    }
  }
}

void re::internal::defaultConstruct<re::MaterialRenderFlags>(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  *a3 = 0;
  a3[2] = 0;
  a3[4] = 0;
  a3[6] = 0;
  a3[8] = 0;
  a3[10] = 0;
  a3[12] = 0;
  a3[14] = 0;
  a3[16] = 0;
}

unsigned char *re::internal::defaultConstructV2<re::MaterialRenderFlags>(unsigned char *result)
{
  void *result = 0;
  result[2] = 0;
  result[4] = 0;
  result[6] = 0;
  result[8] = 0;
  result[10] = 0;
  result[12] = 0;
  result[14] = 0;
  result[16] = 0;
  return result;
}

uint64_t re::introspect_MaterialRenderFlags(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MaterialRenderFlags", (uint64_t (*)(re::internal *))re::allocInfo_MaterialRenderFlags, (re::IntrospectionBase *(*)(void))re::initInfo_MaterialRenderFlags, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::MaterialRenderFlags>, this);
}

void *re::allocInfo_HierarchicalMeshOverrideFlags(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96A78, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF96A78))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF97038, "HierarchicalMeshOverrideFlags");
    __cxa_guard_release(&qword_26AF96A78);
  }
  return &unk_26AF97038;
}

void re::initInfo_HierarchicalMeshOverrideFlags(re *this, re::IntrospectionBase *a2)
{
  v48[0] = 0x16E61A863D3CB10ALL;
  v48[1] = "HierarchicalMeshOverrideFlags";
  re::StringID::destroyString((re::StringID *)v48);
  *((_OWORD *)this + 2) = v49;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF96A80, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF96A80);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      unint64_t v6 = v5;
      uint64_t v7 = (re *)qword_26AF96A48;
      if (!qword_26AF96A48)
      {
        uint64_t v7 = (re *)re::allocInfo_OverrideMeshPartFlags(v5);
        qword_26AF96A48 = (uint64_t)v7;
        re::initInfo_OverrideMeshPartFlags(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "meshPartFlags";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF96E08 = v9;
      uint64_t v10 = re::introspectionAllocator((re *)v9);
      long long v12 = re::introspect_BOOL((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "doubleSidedIsInherited";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0x700000002;
      *(_DWORD *)(v13 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF96E10 = v13;
      uint64_t v14 = re::introspectionAllocator((re *)v13);
      uint64_t v16 = re::introspect_BOOL((re *)1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "windingOrderIsInherited";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0x800000003;
      *(_DWORD *)(v17 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF96E18 = v17;
      uint64_t v18 = (re *)re::introspectionAllocator((re *)v17);
      char v19 = v18;
      uint64_t v20 = (re *)qword_26AF96A60;
      if (!qword_26AF96A60)
      {
        uint64_t v20 = (re *)re::allocInfo_MeshRuntimeFlags(v18);
        qword_26AF96A60 = (uint64_t)v20;
        re::initInfo_MeshRuntimeFlags(v20, v21);
      }
      uint64_t v22 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + 8) = "runtimeFlags";
      *(void *)(v22 + 16) = v20;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + 32) = 0xA00000004;
      *(_DWORD *)(v22 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v22 + 48) = 0;
      *(void *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_26AF96E20 = v22;
      uint64_t v23 = re::introspectionAllocator((re *)v22);
      signed int v25 = re::introspect_BOOL((re *)1, v24);
      uint64_t v26 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v23 + 32))(v23, 72, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *(void *)(v26 + 8) = "enableRenderingIsInherited";
      *(void *)(v26 + 16) = v25;
      *(void *)(v26 + 24) = 0;
      *(void *)(v26 + 32) = 0x1600000005;
      *(_DWORD *)(v26 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v26 + 48) = 0;
      *(void *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_26AF96E28 = v26;
      unsigned int v27 = re::introspectionAllocator((re *)v26);
      uint64_t v29 = re::introspect_BOOL((re *)1, v28);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 72, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + 8) = "enableCullingIsInherited";
      *(void *)(v30 + 16) = v29;
      *(void *)(v30 + 24) = 0;
      *(void *)(v30 + 32) = 0x1700000006;
      *(_DWORD *)(v30 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v30 + 48) = 0;
      *(void *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_26AF96E30 = v30;
      unsigned int v31 = re::introspectionAllocator((re *)v30);
      long long v33 = re::introspect_BOOL((re *)1, v32);
      uint64_t v34 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 72, 8);
      *(_DWORD *)uint64_t v34 = 1;
      *(void *)(v34 + 8) = "castsShadowsIsInherited";
      *(void *)(v34 + 16) = v33;
      *(void *)(v34 + 24) = 0;
      *(void *)(v34 + 32) = 0x1800000007;
      *(_DWORD *)(v34 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v34 + 48) = 0;
      *(void *)(v34 + 56) = 0;
      *(_DWORD *)(v34 + 64) = 0;
      qword_26AF96E38 = v34;
      uint64_t v35 = re::introspectionAllocator((re *)v34);
      long long v37 = re::introspect_BOOL((re *)1, v36);
      uint64_t v38 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 72, 8);
      *(_DWORD *)uint64_t v38 = 1;
      *(void *)(v38 + 8) = "enablePortalCrossingIsInherited";
      *(void *)(v38 + 16) = v37;
      *(void *)(v38 + 24) = 0;
      *(void *)(v38 + 32) = 0x1900000008;
      *(_DWORD *)(v38 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v38 + 48) = 0;
      *(void *)(v38 + 56) = 0;
      *(_DWORD *)(v38 + 64) = 0;
      qword_26AF96E40 = v38;
      StringID v39 = re::introspectionAllocator((re *)v38);
      uint64_t v41 = re::introspect_BOOL((re *)1, v40);
      uint64_t v42 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v39 + 32))(v39, 72, 8);
      *(_DWORD *)uint64_t v42 = 1;
      *(void *)(v42 + 8) = "techniqueQualityLevelBiasIsInherited";
      *(void *)(v42 + 16) = v41;
      *(void *)(v42 + 24) = 0;
      *(void *)(v42 + 32) = 0x1A00000009;
      *(_DWORD *)(v42 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v42 + 48) = 0;
      *(void *)(v42 + 56) = 0;
      *(_DWORD *)(v42 + 64) = 0;
      qword_26AF96E48 = v42;
      uint64_t v43 = re::introspectionAllocator((re *)v42);
      unint64_t v45 = re::introspect_BOOL((re *)1, v44);
      uint64_t v46 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v43 + 32))(v43, 72, 8);
      *(_DWORD *)uint64_t v46 = 1;
      *(void *)(v46 + 8) = "occupancyBehaviorIsInherited";
      *(void *)(v46 + 16) = v45;
      *(void *)(v46 + 24) = 0;
      *(void *)(v46 + 32) = 0x90000000DLL;
      *(_DWORD *)(v46 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      *(void *)(v46 + 48) = 0;
      *(void *)(v46 + 56) = 0;
      *(_DWORD *)(v46 + 64) = 0;
      qword_26AF96E50 = v46;
      __cxa_guard_release(&qword_26AF96A80);
    }
  }
  *((void *)this + 2) = 0x1C00000008;
  *((_DWORD *)this + 6) = 2;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 10;
  *((void *)this + 8) = &qword_26AF96E08;
  *((void *)this + 9) = re::internal::defaultConstruct<re::HierarchicalMeshOverrideFlags>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::HierarchicalMeshOverrideFlags>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::HierarchicalMeshOverrideFlags>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::HierarchicalMeshOverrideFlags>;
  re::IntrospectionRegistry::add(this, v3);
  long long v47 = v49;
}

void re::internal::defaultConstruct<re::HierarchicalMeshOverrideFlags>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 2) = 0;
  *(unsigned char *)(a3 + 4) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  *(unsigned char *)(a3 + 14) = 0;
  *(unsigned char *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 18) = 0;
  *(_DWORD *)(a3 + 6) = 0;
  *(unsigned char *)(a3 + 1ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(_DWORD *)(a3 + 22) = 0;
  *(unsigned char *)(a3 + 26) = 0;
}

uint64_t re::internal::defaultConstructV2<re::HierarchicalMeshOverrideFlags>(uint64_t result)
{
  *(unsigned char *)uint64_t result = 0;
  *(unsigned char *)(result + 2) = 0;
  *(unsigned char *)(result + 4) = 0;
  *(unsigned char *)(result + 12) = 0;
  *(unsigned char *)(result + 14) = 0;
  *(unsigned char *)(result + 16) = 0;
  *(unsigned char *)(result + 18) = 0;
  *(_DWORD *)(result + 6) = 0;
  *(unsigned char *)(result + 1ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(_DWORD *)(result + 22) = 0;
  *(unsigned char *)(result + 26) = 0;
  return result;
}

uint64_t re::introspect_HierarchicalMeshOverrideFlags(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"HierarchicalMeshOverrideFlags", (uint64_t (*)(re::internal *))re::allocInfo_HierarchicalMeshOverrideFlags, (re::IntrospectionBase *(*)(void))re::initInfo_HierarchicalMeshOverrideFlags, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::HierarchicalMeshOverrideFlags>, this);
}

void *re::IntrospectionOptional<re::WindingOrder>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::WindingOrder>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionOptional<re::WindingOrder>::construct(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::WindingOrder>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::WindingOrder>::setHasValue(uint64_t a1, unsigned char *a2, int a3)
{
  if (a3)
  {
    if (!*a2) {
      *a2 = 1;
    }
    ++a2;
  }
  else if (!*a2)
  {
    return;
  }
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::WindingOrder>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 1;
}

{
  return a2 + 1;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::WindingOrder>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  int v2 = *a1;
  uint64_t result = a1 + 1;
  if (!v2) {
    return 0;
  }
  return result;
}

unsigned char *re::TypeBuilderHelper::registerOptional<re::WindingOrder>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(unsigned char *result, char *a2)
{
  if (a2)
  {
    char v2 = *a2;
    if (!*result) {
      unsigned __int8 *result = 1;
    }
    result[1] = v2;
  }
  else if (*result)
  {
    unsigned __int8 *result = 0;
  }
  return result;
}

void *re::IntrospectionOptional<re::OccupancyBehavior>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::OccupancyBehavior>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionOptional<re::OccupancyBehavior>::construct(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::OccupancyBehavior>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::OccupancyBehavior>::setHasValue(uint64_t a1, unsigned char *a2, int a3)
{
  if (a3)
  {
    if (!*a2) {
      *a2 = 1;
    }
    ++a2;
  }
  else if (!*a2)
  {
    return;
  }
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::OccupancyBehavior>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 1;
}

{
  return a2 + 1;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::OccupancyBehavior>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  int v2 = *a1;
  uint64_t result = a1 + 1;
  if (!v2) {
    return 0;
  }
  return result;
}

unsigned char *re::TypeBuilderHelper::registerOptional<re::OccupancyBehavior>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(unsigned char *result, char *a2)
{
  if (a2)
  {
    char v2 = *a2;
    if (!*result) {
      unsigned __int8 *result = 1;
    }
    result[1] = v2;
  }
  else if (*result)
  {
    unsigned __int8 *result = 0;
  }
  return result;
}

void *re::IntrospectionOptional<short>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<short>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionOptional<short>::construct(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<short>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<short>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(unsigned char *)a2) {
      *(unsigned char *)a2 = 1;
    }
    *(_WORD *)(a2 + 2) = 0;
  }
  else if (*(unsigned char *)a2)
  {
    *(unsigned char *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<short>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 2;
}

{
  return a2 + 2;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  int v2 = *a1;
  uint64_t result = a1 + 2;
  if (!v2) {
    return 0;
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerOptional<short>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t result, __int16 *a2)
{
  if (a2)
  {
    __int16 v2 = *a2;
    if (!*(unsigned char *)result) {
      *(unsigned char *)uint64_t result = 1;
    }
    *(_WORD *)(result + 2) = v2;
  }
  else if (*(unsigned char *)result)
  {
    *(unsigned char *)uint64_t result = 0;
  }
  return result;
}

void *re::IntrospectionOptional<re::CullingMode>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::CullingMode>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionOptional<re::CullingMode>::construct(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::CullingMode>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::CullingMode>::setHasValue(uint64_t a1, unsigned char *a2, int a3)
{
  if (a3)
  {
    if (!*a2) {
      *a2 = 1;
    }
    ++a2;
  }
  else if (!*a2)
  {
    return;
  }
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::CullingMode>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 1;
}

{
  return a2 + 1;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::CullingMode>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  int v2 = *a1;
  uint64_t result = a1 + 1;
  if (!v2) {
    return 0;
  }
  return result;
}

unsigned char *re::TypeBuilderHelper::registerOptional<re::CullingMode>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(unsigned char *result, char *a2)
{
  if (a2)
  {
    char v2 = *a2;
    if (!*result) {
      unsigned __int8 *result = 1;
    }
    result[1] = v2;
  }
  else if (*result)
  {
    unsigned __int8 *result = 0;
  }
  return result;
}

void *re::IntrospectionOptional<re::TriangleFillModeInternal>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::TriangleFillModeInternal>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionOptional<re::TriangleFillModeInternal>::construct(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::TriangleFillModeInternal>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::TriangleFillModeInternal>::setHasValue(uint64_t a1, unsigned char *a2, int a3)
{
  if (a3)
  {
    if (!*a2) {
      *a2 = 1;
    }
    ++a2;
  }
  else if (!*a2)
  {
    return;
  }
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::TriangleFillModeInternal>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 1;
}

{
  return a2 + 1;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::TriangleFillModeInternal>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  int v2 = *a1;
  uint64_t result = a1 + 1;
  if (!v2) {
    return 0;
  }
  return result;
}

unsigned char *re::TypeBuilderHelper::registerOptional<re::TriangleFillModeInternal>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(unsigned char *result, char *a2)
{
  if (a2)
  {
    char v2 = *a2;
    if (!*result) {
      unsigned __int8 *result = 1;
    }
    result[1] = v2;
  }
  else if (*result)
  {
    unsigned __int8 *result = 0;
  }
  return result;
}

re::MeshShadowGenerationQueue *re::MeshShadowGenerationQueue::MeshShadowGenerationQueue(re::MeshShadowGenerationQueue *this)
{
  *((_DWORD *)this + 8) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(void *)((char *)this + 36) = 0x7FFFFFFFLL;
  re::MeshShadowGenerationBacklog::MeshShadowGenerationBacklog((re::MeshShadowGenerationQueue *)((char *)this + 48));
  return this;
}

uint64_t re::MeshShadowGenerationQueue::enqueue(uint64_t a1, __n128 *a2, int a3)
{
  if (a3)
  {
    return re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::add(a1, (uint64_t)a2);
  }
  else
  {
    uint64_t v8 = v3;
    uint64_t v9 = v4;
    __n128 v6 = *a2;
    unint64_t v7 = a2[1].n128_u64[0];
    return re::MeshShadowGenerationBacklog::pushBack((_anonymous_namespace_ *)(a1 + 48), &v6);
  }
}

uint64_t re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::ShadowPair>::operator()((uint64_t)&v14, (void *)a2);
  unint64_t v5 = v4;
  unint64_t v6 = *(unsigned int *)(a1 + 24);
  if (!v6)
  {
    LODWORD(v7) = 0;
    goto LABEL_10;
  }
  unint64_t v7 = v4 % v6;
  uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % v6));
  if (v8 == 0x7FFFFFFF)
  {
LABEL_10:
    unsigned int v13 = re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::addAsCopy(a1, v7, v5, a2, (long long *)a2);
    ++*(_DWORD *)(a1 + 40);
    return *(void *)(a1 + 16) + 40 * v13 + 16;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v10 = v9 + 40 * v8;
    uint64_t v12 = *(void *)(v10 + 16);
    uint64_t result = v10 + 16;
    if (v12 == *(void *)a2
      && *(void *)(v9 + 40 * v8 + 24) == *(void *)(a2 + 8)
      && *(unsigned __int8 *)(v9 + 40 * v8 + 32) == *(unsigned __int8 *)(a2 + 16))
    {
      return result;
    }
    uint64_t v8 = *(_DWORD *)(v9 + 40 * v8 + 8) & 0x7FFFFFFF;
    if (v8 == 0x7FFFFFFF) {
      goto LABEL_10;
    }
  }
}

void re::MeshShadowGenerationQueue::getEnqueued(re::MeshShadowGenerationQueue *this@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(void *)(a2 + 36) = 0x7FFFFFFFLL;
  re::HashSet<re::ShadowPair,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::unionSet((uint64_t)this, (uint64_t)this + 96, a2);
}

void re::HashSet<re::ShadowPair,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::unionSet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::clear(a3);
  uint64_t v6 = *(unsigned int *)(a1 + 32);
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = (int *)(*(void *)(a1 + 16) + 8);
    while (1)
    {
      int v9 = *v8;
      v8 += 10;
      if (v9 < 0) {
        break;
      }
      if (v6 == ++v7)
      {
        LODWORD(v7) = *(_DWORD *)(a1 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v7) = 0;
  }
  if (v6 != v7)
  {
    uint64_t v10 = v7;
    uint64_t v11 = *(void *)(a1 + 16);
    do
    {
      re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::add(a3, v11 + 40 * v10 + 16);
      unsigned int v12 = *(_DWORD *)(a1 + 32);
      uint64_t v11 = *(void *)(a1 + 16);
      if (v12 <= (int)v7 + 1) {
        int v13 = v7 + 1;
      }
      else {
        int v13 = *(_DWORD *)(a1 + 32);
      }
      int v14 = v7;
      while (1)
      {
        uint64_t v10 = (v14 + 1);
        if (v13 - 1 == v14) {
          break;
        }
        ++v14;
        LODWORD(v7) = v10;
        if ((*(_DWORD *)(v11 + 40 * v10 + 8) & 0x80000000) != 0) {
          goto LABEL_17;
        }
      }
      LODWORD(v7) = v13;
LABEL_17:
      ;
    }
    while (v12 != v7);
  }
  uint64_t v15 = *(unsigned int *)(a2 + 32);
  if (v15)
  {
    uint64_t v16 = 0;
    uint64_t v17 = (int *)(*(void *)(a2 + 16) + 8);
    while (1)
    {
      int v18 = *v17;
      v17 += 10;
      if (v18 < 0) {
        break;
      }
      if (v15 == ++v16)
      {
        LODWORD(v16) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v16) = 0;
  }
  if (v15 != v16)
  {
    uint64_t v19 = v16;
    uint64_t v20 = *(void *)(a2 + 16);
    do
    {
      re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::add(a3, v20 + 40 * v19 + 16);
      unsigned int v21 = *(_DWORD *)(a2 + 32);
      uint64_t v20 = *(void *)(a2 + 16);
      if (v21 <= (int)v16 + 1) {
        int v22 = v16 + 1;
      }
      else {
        int v22 = *(_DWORD *)(a2 + 32);
      }
      int v23 = v16;
      while (1)
      {
        uint64_t v19 = (v23 + 1);
        if (v22 - 1 == v23) {
          break;
        }
        ++v23;
        LODWORD(v16) = v19;
        if ((*(_DWORD *)(v20 + 40 * v19 + 8) & 0x80000000) != 0) {
          goto LABEL_34;
        }
      }
      LODWORD(v16) = v22;
LABEL_34:
      ;
    }
    while (v21 != v16);
  }
}

void re::MeshShadowGenerationQueue::dequeue(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(_DWORD *)(a5 + 32) = 0;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(void *)(a5 + 36) = 0x7FFFFFFFLL;
  int v47 = 0;
  memset(v46, 0, sizeof(v46));
  uint64_t v48 = 0x7FFFFFFFLL;
  uint64_t v11 = *(unsigned int *)(a1 + 32);
  if (v11)
  {
    uint64_t v12 = 0;
    int v13 = (int *)(*(void *)(a1 + 16) + 8);
    while (1)
    {
      int v14 = *v13;
      v13 += 10;
      if (v14 < 0) {
        break;
      }
      if (v11 == ++v12)
      {
        LODWORD(v12) = *(_DWORD *)(a1 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v12) = 0;
  }
  if (v11 != v12)
  {
    uint64_t v15 = v12;
    do
    {
      uint64_t v16 = *(void *)(a1 + 16) + 40 * v15 + 16;
      if ((re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::contains(a4, v16) & 1) == 0)re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::add(a5, v16); {
      if (*(_DWORD *)(a1 + 32) <= (v12 + 1))
      }
        int v17 = v12 + 1;
      else {
        int v17 = *(_DWORD *)(a1 + 32);
      }
      while (1)
      {
        uint64_t v15 = (v12 + 1);
        if (v17 - 1 == v12) {
          break;
        }
        LODWORD(v12) = v12 + 1;
        int v18 = v15;
        if ((*(_DWORD *)(*(void *)(a1 + 16) + 40 * v15 + 8) & 0x80000000) != 0) {
          goto LABEL_18;
        }
      }
      int v18 = v17;
LABEL_18:
      LODWORD(v12) = v18;
    }
    while (v11 != v18);
  }
  uint64_t v19 = *(unsigned int *)(a5 + 32);
  if (v19)
  {
    uint64_t v20 = 0;
    unsigned int v21 = (int *)(*(void *)(a5 + 16) + 8);
    while (1)
    {
      int v22 = *v21;
      v21 += 10;
      if (v22 < 0) {
        break;
      }
      if (v19 == ++v20)
      {
        LODWORD(v2ArcSharedObject::ArcSharedObject(this, 0) = *(_DWORD *)(a5 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v2ArcSharedObject::ArcSharedObject(this, 0) = 0;
  }
  if (v19 != v20)
  {
    uint64_t v23 = v20;
    uint64_t v24 = *(void *)(a5 + 16);
    do
    {
      re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::remove(a1, v24 + 40 * v23 + 16);
      uint64_t v24 = *(void *)(a5 + 16);
      if (*(_DWORD *)(a5 + 32) <= (v20 + 1)) {
        int v25 = v20 + 1;
      }
      else {
        int v25 = *(_DWORD *)(a5 + 32);
      }
      int v26 = v20;
      while (1)
      {
        uint64_t v23 = (v26 + 1);
        if (v25 - 1 == v26) {
          break;
        }
        ++v26;
        LODWORD(v2ArcSharedObject::ArcSharedObject(this, 0) = v23;
        if ((*(_DWORD *)(v24 + 40 * v23 + 8) & 0x80000000) != 0) {
          goto LABEL_35;
        }
      }
      LODWORD(v2ArcSharedObject::ArcSharedObject(this, 0) = v25;
LABEL_35:
      ;
    }
    while (v19 != v20);
  }
  uint64_t v27 = *(unsigned int *)(a1 + 128);
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = (int *)(*(void *)(a1 + 112) + 8);
    while (1)
    {
      int v30 = *v29;
      v29 += 10;
      if (v30 < 0) {
        break;
      }
      if (v27 == ++v28)
      {
        LODWORD(v28) = *(_DWORD *)(a1 + 128);
        break;
      }
    }
  }
  else
  {
    LODWORD(v28) = 0;
  }
  if (v27 == v28)
  {
    unint64_t v31 = 0;
  }
  else
  {
    LODWORD(v31) = 0;
    uint64_t v32 = v28;
    do
    {
      unint64_t v31 = v31
          + (re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::contains(a4, *(void *)(a1 + 112) + 40 * v32 + 16) ^ 1);
      if (*(_DWORD *)(a1 + 128) <= (v28 + 1)) {
        int v33 = v28 + 1;
      }
      else {
        int v33 = *(_DWORD *)(a1 + 128);
      }
      int v34 = v28;
      while (1)
      {
        uint64_t v32 = (v34 + 1);
        if (v33 - 1 == v34) {
          break;
        }
        ++v34;
        LODWORD(v28) = v32;
        if ((*(_DWORD *)(*(void *)(a1 + 112) + 40 * v32 + 8) & 0x80000000) != 0) {
          goto LABEL_53;
        }
      }
      LODWORD(v28) = v33;
LABEL_53:
      ;
    }
    while (v27 != v28);
  }
  re::MeshShadowGenerationBacklog::MeshShadowGenerationBacklog((re::MeshShadowGenerationBacklog *)v44);
  if (a2 <= v31 / a3 + 1) {
    unint64_t v36 = v31 / a3 + 1;
  }
  else {
    unint64_t v36 = a2;
  }
  while (v36 > *(unsigned int *)(a5 + 28))
  {
    if (!*(_DWORD *)(a1 + 124)) {
      break;
    }
    re::MeshShadowGenerationBacklog::popFront(a1 + 48, v35, v41);
    if (v41[0])
    {
      if (re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::contains(a4, (uint64_t)&v42))
      {
        __n128 v39 = v42;
        uint64_t v40 = v43;
        re::MeshShadowGenerationBacklog::pushBack((_anonymous_namespace_ *)v44, &v39);
      }
      else
      {
        re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::add(a5, (uint64_t)&v42);
      }
    }
  }
  while (v45)
  {
    re::MeshShadowGenerationBacklog::popFront((uint64_t)v44, v35, v41);
    if (v41[0])
    {
      __n128 v37 = v42;
      uint64_t v38 = v43;
      re::MeshShadowGenerationBacklog::pushBack((_anonymous_namespace_ *)(a1 + 48), &v37);
    }
  }
  re::MeshShadowGenerationBacklog::~MeshShadowGenerationBacklog((re::MeshShadowGenerationBacklog *)v44);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v46);
}

uint64_t re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::contains(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::ShadowPair>::operator()((uint64_t)&v9, (void *)a2);
  unint64_t v5 = *(unsigned int *)(a1 + 24);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % v5));
  if (v6 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  while (*(void *)(v7 + 40 * v6 + 16) != *(void *)a2
       || *(void *)(v7 + 40 * v6 + 24) != *(void *)(a2 + 8)
       || *(unsigned __int8 *)(v7 + 40 * v6 + 32) != *(unsigned __int8 *)(a2 + 16))
  {
    uint64_t v6 = *(_DWORD *)(v7 + 40 * v6 + 8) & 0x7FFFFFFF;
    if (v6 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return 1;
}

uint64_t re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::remove(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::ShadowPair>::operator()((uint64_t)&v19, (void *)a2);
  unint64_t v5 = *(unsigned int *)(a1 + 24);
  if (!v5) {
    return 0;
  }
  unint64_t v6 = v4 % v5;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(unsigned int *)(v7 + 4 * (v4 % v5));
  if (v8 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = 0x7FFFFFFFLL;
  while (*(void *)(v9 + 40 * v8 + 16) != *(void *)a2
       || *(void *)(v9 + 40 * v8 + 24) != *(void *)(a2 + 8)
       || *(unsigned __int8 *)(v9 + 40 * v8 + 32) != *(unsigned __int8 *)(a2 + 16))
  {
    uint64_t v10 = v8;
    uint64_t v8 = *(_DWORD *)(v9 + 40 * v8 + 8) & 0x7FFFFFFF;
    if (v8 == 0x7FFFFFFF) {
      return 0;
    }
  }
  int v12 = *(_DWORD *)(v9 + 40 * v8 + 8) & 0x7FFFFFFF;
  if (v10 == 0x7FFFFFFF) {
    *(_DWORD *)(v7 + 4 * v6) = v12;
  }
  else {
    *(_DWORD *)(v9 + 40 * v10 + 8) = *(_DWORD *)(v9 + 40 * v10 + 8) & 0x80000000 | v12;
  }
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = v13 + 40 * v8;
  int v17 = *(_DWORD *)(v14 + 8);
  uint64_t v16 = (int *)(v14 + 8);
  int v15 = v17;
  if (v17 < 0)
  {
    *uint64_t v16 = v15 & 0x7FFFFFFF;
    uint64_t v13 = *(void *)(a1 + 16);
    int v15 = *(_DWORD *)(v13 + 40 * v8 + 8);
  }
  int v18 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v13 + 40 * v8 + 8) = *(_DWORD *)(a1 + 36) | v15 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v8;
  *(_DWORD *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = v18 + 1;
  return 1;
}

void re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  unint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      unint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 40 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_16, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 601);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, long long *a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(v10 + 40 * v8 + 8);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(v10 + 40 * v8 + 8);
    *(_DWORD *)(a1 + 36) = v11 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v10 + 40 * v8 + 8) = v11 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 40 * v8 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 40 * v8 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 40 * v8) = a3;
  uint64_t v12 = *(void *)(a1 + 16) + 40 * v8;
  long long v13 = *a5;
  *(void *)(v12 + 32) = *((void *)a5 + 2);
  *(_OWORD *)(v12 + 16) = v13;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)long long v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::addAsCopy(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), *(void *)&v13[16] + v10 + 16, *(void *)&v13[16] + v10 + 16);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 40;
        }
        while (v11 < v9);
      }
      re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

void re::HashSetBase<re::ShadowPair,re::ShadowPair,re::internal::ValueAsKey<re::ShadowPair>,re::Hash<re::ShadowPair>,re::EqualTo<re::ShadowPair>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_16, 4 * v2);
    }
    uint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 40 * v3;
      do
      {
        uint64_t v6 = *(void *)(a1 + 16) + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0) {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        }
        v4 += 40;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = v8;
  }
}

void re::DeformationManager::init(re::DeformationManager *this, re::RenderManager *a2)
{
  *(void *)this = a2;
  uint64_t v3 = (_anonymous_namespace_ *)re::DeformationFencePool::init((re::DeformationManager *)((char *)this + 8), (re::RenderManager *)((char *)a2 + 184));
  re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)this + 177, 0);
  ++*((_DWORD *)this + 360);
  *((_DWORD *)this + 365) = 512;
  re::DataArray<re::DeformationStack>::allocBlock((unsigned int *)this + 354);
}

uint64_t re::DeformationManager::deinit(re::DeformationManager *this)
{
  uint64_t v2 = 0;
  uint64_t v3 = (uint64_t *)((char *)this + 1368);
  do
  {
    uint64_t v4 = *(void *)((char *)this + v2 + 648);
    *(void *)((char *)this + v2 + 648) = 0;
    if (v4) {
      std::function<void ()(re::Deformer *)>::operator()((uint64_t)this + v2 + 656, v4);
    }
    v2 += 40;
  }
  while (v2 != 720);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v3);
  re::DataArray<re::DeformationStack>::deinit((uint64_t)this + 1416);
  uint64_t result = re::DeformationFencePool::deinit((re::DeformationManager *)((char *)this + 8));
  *(void *)this = 0;
  return result;
}

unint64_t re::DeformationManager::addDeformationStack(uint64_t a1, uint64_t a2)
{
  uint64_t v96 = *MEMORY[0x263EF8340];
  unint64_t v5 = *(void *)(a2 + 16);
  if (v5 >= 0xA)
  {
LABEL_91:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) The maximum deformation stack (%zu) has been exceeded: %zu.", "stackDefinition.deformationStack.size() < kMaxDeformationStackCount", "addDeformationStack", 233, 10, v5);
    _os_crash();
    __break(1u);
LABEL_92:
    uint64_t v85 = 0;
    long long v94 = 0u;
    long long v95 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v86[0] = 136315906;
    *(void *)&v86[1] = "operator[]";
    __int16 v87 = 1024;
    int v88 = 789;
    __int16 v89 = 2048;
    unint64_t v90 = v2;
    __int16 v91 = 2048;
    unint64_t v92 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_93;
  }
  unint64_t v2 = a2;
  uint64_t v6 = a1;
  LOBYTE(v79) = 0;
  uint64_t v7 = 3;
  do
  {
    int v8 = &v80[v7 - 1];
    *(_DWORD *)int v8 = -1;
    *(void *)((char *)v8 + 12) = 0;
    *(void *)((char *)v8 + 4) = 0;
    *((_DWORD *)v8 + 5) = 0;
    *((unsigned char *)v8 + 24) = -1;
    *((void *)v8 + 4) = -1;
    *((void *)v8 + 5) = 0;
    v7 += 4;
    *((void *)v8 + 6) = 0;
    *((void *)v8 + 7) = 0;
  }
  while (v8 + 4 != v81);
  long long v83 = 0u;
  memset(v84, 0, sizeof(v84));
  uint64_t v78 = v5;
  if (!(_BYTE)v5)
  {
    uint64_t v10 = 0;
    uint64_t v24 = 0;
    LOBYTE(v79) = 0;
    char v32 = 1;
    goto LABEL_38;
  }
  unint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v77 = a1 + 1368;
  uint64_t v11 = 32;
  do
  {
    unint64_t v3 = *(void *)(v2 + 16);
    if (v3 <= v9)
    {
      uint64_t v85 = 0;
      long long v94 = 0u;
      long long v95 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v86[0] = 136315906;
      *(void *)&v86[1] = "operator[]";
      __int16 v87 = 1024;
      int v88 = 797;
      __int16 v89 = 2048;
      unint64_t v90 = v9;
      __int16 v91 = 2048;
      unint64_t v92 = v3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_89:
      re::internal::assertLog((re::internal *)5, v13, "assertion failure: '%s' (%s:line %i) Unknown deformation service name: %s.", "deformerIndex", "addDeformationStack", 244, *((void *)v4 - 3));
      _os_crash();
      __break(1u);
LABEL_90:
      re::internal::assertLog((re::internal *)4, v19, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
      _os_crash();
      __break(1u);
      goto LABEL_91;
    }
    unint64_t v3 = *(void *)(v2 + 32);
    uint64_t v4 = (char *)(v3 + v11);
    signed int v12 = (unsigned int *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v77, (void *)(v3 + v11 - 32));
    if (!v12) {
      goto LABEL_89;
    }
    uint64_t v14 = v12;
    uint64_t v15 = v6;
    uint64_t v16 = *(void *)(v6 + 40 * *v12 + 648);
    int v17 = &v80[4 * (unint64_t)v10 - 1];
    (*(void (**)(uint8_t *__return_ptr))(*(void *)v16 + 24))(buf);
    long long v18 = *(_OWORD *)&buf[16];
    v17[3] = *(_OWORD *)buf;
    v17[4] = v18;
    *((void *)v17 + 1ArcSharedObject::ArcSharedObject(this, 0) = *(void *)&buf[32];
    uint64_t v4 = (char *)v17 + 88;
    re::FixedArray<float>::operator=((uint64_t *)v17 + 11, (uint64_t *)&buf[40]);
    uint64_t v20 = *(re **)&buf[40];
    if (*(void *)&buf[40] && (void)v94) {
      uint64_t v20 = (re *)(*(uint64_t (**)(void))(**(void **)&buf[40] + 40))();
    }
    int v21 = *((unsigned __int8 *)v17 + 72);
    if (v21 == 2)
    {
      *(_DWORD *)long long buf = -1;
      memset(&buf[4], 0, 20);
      *(_OWORD *)&unsigned char buf[24] = xmmword_2343663D0;
      long long v94 = 0uLL;
      *(void *)&buf[40] = 0;
      long long v22 = *(_OWORD *)&buf[16];
      v17[3] = *(_OWORD *)buf;
      v17[4] = v22;
      *((void *)v17 + 1ArcSharedObject::ArcSharedObject(this, 0) = *(void *)&buf[32];
      re::FixedArray<float>::operator=((uint64_t *)v17 + 11, (uint64_t *)&buf[40]);
      uint64_t v20 = *(re **)&buf[40];
      if (*(void *)&buf[40] && (void)v94) {
        uint64_t v20 = (re *)(*(uint64_t (**)(void))(**(void **)&buf[40] + 40))();
      }
      uint64_t v6 = v15;
    }
    else
    {
      if (v21 == 255)
      {
        int v33 = *re::graphicsLogObjects(v20);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v34 = *(void *)(v3 + v11 - 24);
          *(_DWORD *)long long buf = 136315138;
          *(void *)&uint8_t buf[4] = v34;
          _os_log_impl(&dword_233120000, v33, OS_LOG_TYPE_DEFAULT, "[DeformerLogging] Invalid deformation stack definition for deformer: %s", buf, 0xCu);
        }
        unint64_t v35 = 0;
        unint64_t v36 = 0xFFFFFFFFLL;
        goto LABEL_83;
      }
      uint64_t v6 = v15;
      *((_DWORD *)&v80[-1] + v10 + 1) = *v14;
      uint64_t v10 = (v10 + 1);
    }
    ++v9;
    v11 += 40;
    unint64_t v2 = a2;
  }
  while (v78 != v9);
  LOBYTE(v79) = v10;
  if (!(_BYTE)v10)
  {
    uint64_t v10 = 0;
    uint64_t v24 = 0;
    char v32 = 1;
    goto LABEL_38;
  }
  uint64_t v23 = 0;
  uint64_t v24 = v10;
  while (2)
  {
    if (!v23)
    {
      unsigned __int8 v26 = 0;
LABEL_29:
      uint64_t v20 = (re *)memset((char *)v81 + 10 * v23 + v26, 255, (9 - v26) + 1);
      goto LABEL_30;
    }
    uint64_t v25 = 0;
    unsigned __int8 v26 = 0;
    uint64_t v27 = *((void *)&v80[4 * v23 + 2] + 1);
    do
    {
      uint64_t v28 = &v80[4 * (unint64_t)(~(_BYTE)v25 + v23) - 1];
      uint64_t v30 = *((void *)v28 + 8);
      uint64_t v29 = v28 + 4;
      if ((v30 & v27) != 0)
      {
        uint64_t v31 = v26++;
        *((unsigned char *)v81 + 10 * v23 + v31) = ~(_BYTE)v25 + v23;
        v27 &= ~*v29;
      }
      ++v25;
    }
    while (v23 != v25);
    if (v26 <= 9u) {
      goto LABEL_29;
    }
LABEL_30:
    if (++v23 != v10) {
      continue;
    }
    break;
  }
  if (v10 >= 0xAu)
  {
    *(void *)&unsigned char buf[32] = 0;
    memset(buf, 0, 28);
  }
  else
  {
    char v32 = 0;
LABEL_38:
    uint64_t v20 = (re *)memset((char *)v81 + 10 * v24, 255, 10 * (9 - v10) + 10);
    *(void *)&unsigned char buf[32] = 0;
    memset(buf, 0, 28);
    if (v32) {
      goto LABEL_66;
    }
  }
  unint64_t v3 = 0;
  __n128 v37 = 0;
  uint64_t v38 = 0;
  while (2)
  {
    unint64_t v2 = (v10 + ~(_BYTE)v38);
    uint64_t v39 = *(void *)&v80[4 * v2 + 4];
    if (v39 != -1)
    {
      uint64_t v40 = v10;
      int v41 = *((_DWORD *)&v80[-1] + v2 + 1);
      if (v3 >= *(void *)&buf[8])
      {
        unint64_t v42 = v3 + 1;
        if (*(void *)&buf[8] < v42)
        {
          if (*(void *)buf)
          {
            unint64_t v43 = 8;
            if (*(void *)&buf[8]) {
              unint64_t v43 = 2 * *(void *)&buf[8];
            }
            if (v43 <= v42) {
              unint64_t v44 = v42;
            }
            else {
              unint64_t v44 = v43;
            }
            uint64_t v20 = (re *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(buf, v44);
          }
          else
          {
            uint64_t v20 = (re *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(buf, v42);
            ++*(_DWORD *)&buf[24];
          }
        }
        unint64_t v3 = *(void *)&buf[16];
        __n128 v37 = *(char **)&buf[32];
      }
      int v45 = &v37[16 * v3];
      *int v45 = v41;
      int v46 = v86[0];
      *((_DWORD *)v45 + 1) = *(_DWORD *)((char *)v86 + 3);
      *(_DWORD *)(v45 + 1) = v46;
      *((void *)v45 + 1) = v39;
      unint64_t v3 = ++*(void *)&buf[16];
      ++*(_DWORD *)&buf[24];
      uint64_t v10 = v40;
    }
    __n128 v37 = *(char **)&buf[32];
    int v47 = (char *)&v80[-1] + 24 * v2;
    if (*((void *)v47 + 99))
    {
LABEL_58:
      if (*((void *)&v83 + 3 * v2 + 1) != v3) {
        goto LABEL_90;
      }
      if (v3) {
        uint64_t v20 = (re *)memmove(*((void **)v84 + 3 * v2), v37, 16 * v3);
      }
    }
    else if (v3)
    {
      uint64_t v48 = v47 + 792;
      goto LABEL_58;
    }
    if (v24 != ++v38) {
      continue;
    }
    break;
  }
  if (*(void *)buf)
  {
    uint64_t v19 = *(void *)&buf[32];
    if (*(void *)&buf[32]) {
      (*(void (**)(void))(**(void **)buf + 40))();
    }
    *(void *)&unsigned char buf[32] = 0;
  }
LABEL_66:
  int v49 = *(_DWORD *)(v6 + 1472);
  if ((v49 + 1) >> 24) {
    int v50 = 1;
  }
  else {
    int v50 = v49 + 1;
  }
  *(_DWORD *)(v6 + 1472) = v50;
  uint64_t v51 = *(unsigned __int16 *)(v6 + 1468);
  unint64_t v2 = *(unsigned __int16 *)(v6 + 1470);
  if (v51 != 0xFFFF || v2 != 0xFFFF)
  {
    unint64_t v3 = *(void *)(v6 + 1432);
    if (v3 > v2)
    {
      unsigned int v55 = (void *)(*(void *)(v6 + 1448) + 16 * v2);
      *(_DWORD *)(v55[1] + 4 * v51) = v50;
      uint64_t v54 = *v55 + 1032 * v51;
      *(_DWORD *)(v6 + 1468) = *(_DWORD *)v54;
      goto LABEL_78;
    }
LABEL_94:
    uint64_t v85 = 0;
    long long v94 = 0u;
    long long v95 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v86[0] = 136315906;
    *(void *)&v86[1] = "operator[]";
    __int16 v87 = 1024;
    int v88 = 789;
    __int16 v89 = 2048;
    unint64_t v90 = v2;
    __int16 v91 = 2048;
    unint64_t v92 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_DWORD *)(v6 + 1464) >= *(_DWORD *)(v6 + 1460)) {
    re::DataArray<re::DeformationStack>::allocBlock((unsigned int *)(v6 + 1416));
  }
  unint64_t v3 = *(void *)(v6 + 1432);
  unint64_t v2 = (unsigned __int16)(v3 - 1);
  if (v3 <= v2) {
    goto LABEL_92;
  }
  uint64_t v52 = *(unsigned int *)(v6 + 1464);
  if (v52 >= 0x10000)
  {
LABEL_93:
    re::internal::assertLog((re::internal *)5, v19, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v52);
    _os_crash();
    __break(1u);
    goto LABEL_94;
  }
  BOOL v53 = (void *)(*(void *)(v6 + 1448) + 16 * v2);
  *(_DWORD *)(v6 + 1464) = v52 + 1;
  *(_DWORD *)(v53[1] + 4 * v52) = *(_DWORD *)(v6 + 1472);
  uint64_t v54 = *v53 + 1032 * v52;
  LOWORD(v2) = v3 - 1;
  LOWORD(v51) = v52;
LABEL_78:
  uint64_t v56 = 0;
  ++*(_DWORD *)(v6 + 1456);
  long long v57 = v79;
  long long v58 = v80[0];
  *(_OWORD *)(v54 + 28) = *(_OWORD *)((char *)v80 + 12);
  *(_OWORD *)uint64_t v54 = v57;
  *(_OWORD *)(v54 + 16) = v58;
  do
  {
    uint64_t v59 = v54 + v56 * 16;
    uint64_t v60 = &v80[v56 - 1];
    long long v61 = v80[v56 + 3];
    uint64_t v62 = *(void *)&v80[v56 + 4];
    *(_OWORD *)(v59 + 48) = v80[v56 + 2];
    *(_OWORD *)(v59 + 64) = v61;
    *(void *)(v59 + 8ArcSharedObject::ArcSharedObject(this, 0) = v62;
    *(void *)(v59 + 88) = 0;
    *(void *)(v59 + 96) = 0;
    *(void *)(v59 + 104) = 0;
    *(void *)(v59 + 88) = *((void *)&v80[v56 + 4] + 1);
    v60[11] = 0;
    *(void *)(v59 + 96) = *(void *)&v80[v56 + 5];
    v60[12] = 0;
    uint64_t v63 = *(void *)(v54 + v56 * 16 + 104);
    *(void *)(v59 + 104) = *((void *)&v80[v56 + 5] + 1);
    v60[13] = v63;
    v56 += 4;
  }
  while (v56 != 40);
  uint64_t v64 = 0;
  long long v65 = v81[0];
  long long v66 = v81[2];
  *(_OWORD *)(v54 + 704) = v81[1];
  *(_OWORD *)(v54 + 72ArcSharedObject::ArcSharedObject(this, 0) = v66;
  *(_OWORD *)(v54 + 688) = v65;
  long long v67 = v81[3];
  long long v68 = v81[4];
  long long v69 = v81[5];
  *(_DWORD *)(v54 + 784) = v82;
  *(_OWORD *)(v54 + 752) = v68;
  *(_OWORD *)(v54 + 768) = v69;
  *(_OWORD *)(v54 + 736) = v67;
  do
  {
    unsigned int v70 = (void *)(v54 + v64);
    BOOL v71 = (void *)((char *)&v80[-1] + v64);
    v70[101] = 0;
    *(_OWORD *)(v54 + v64 + 792) = 0uLL;
    v70[99] = *(void *)((char *)&v84[-1] + v64);
    v71[99] = 0;
    v70[100] = *(void *)((char *)&v83 + v64 + 8);
    v71[100] = 0;
    uint64_t v72 = *(void *)(v54 + v64 + 808);
    v70[101] = *(void *)((char *)v84 + v64);
    v71[101] = v72;
    v64 += 24;
  }
  while (v64 != 240);
  unint64_t v35 = (unint64_t)(*(_DWORD *)(v6 + 1472) & 0xFFFFFF) << 32;
  unint64_t v36 = (unsigned __int16)v51 | ((unint64_t)(unsigned __int16)v2 << 16);
LABEL_83:
  for (uint64_t i = 1008; i != 768; i -= 24)
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)((char *)&v80[-1] + i));
  for (uint64_t j = 664; j != 24; j -= 64)
    re::FixedArray<CoreIKTransform>::deinit((uint64_t *)((char *)&v80[-1] + j));
  return v36 | v35;
}

uint64_t (***re::DeformationManager::removeDeformationStack(re *a1, uint64_t a2))(void)
{
  void v9[5] = *MEMORY[0x263EF8340];
  re::globalAllocators(a1);
  uint64_t v4 = re::RenderManager::perFrameAllocator(*(re::RenderManager **)a1);
  uint64_t v5 = re::RenderManager::perFrameAllocator(*(re::RenderManager **)a1);
  uint64_t v6 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 24, 8);
  *(void *)uint64_t v6 = a2;
  *((void *)v6 + 1) = (char *)a1 + 1416;
  *((void *)v6 + 2) = (char *)a1 + 648;
  uint64_t v7 = re::globalAllocators(v6)[2];
  v9[0] = &unk_26E713848;
  v9[3] = v7;
  v9[4] = v9;
  (*(void (**)(uint64_t, re *, void *))(*(void *)v4 + 16))(v4, v6, v9);
  return re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)v9);
}

uint64_t re::DataArray<re::DeformationStack>::get(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 16) <= (unint64_t)HIWORD(a2))
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*(void *)(a1 + 32) + 16 * HIWORD(a2)) + 1032 * (unsigned __int16)a2;
}

uint64_t re::DeformationManager::createActiveDeformationData(re *a1, uint64_t a2, uint64_t a3)
{
  _OWORD v12[5] = *MEMORY[0x263EF8340];
  re::globalAllocators(a1);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 104, 8);
  uint64_t v7 = re::RenderManager::perFrameAllocator(*(re::RenderManager **)a1);
  active = (re *)re::ActiveDeformationData::ActiveDeformationData(v6, a2, v7);
  uint64_t v9 = re::globalAllocators(active)[2];
  v12[0] = &unk_26E7138A0;
  unint64_t v12[3] = v9;
  v12[4] = v12;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a3 + 16))(a3, v6, v12);
  re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)v12);
  return v10;
}

void re::DeformationManager::addDeformations(re::RenderManager **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 40);
  if (v3)
  {
    for (unint64_t i = 0; i != v3; ++i)
    {
      int v8 = (void *)re::BucketArray<re::MeshDeformation,8ul>::operator[](a2, i);
      re::DeformationManager::addDeformation(a1, v8, a3);
    }
  }
}

void re::DeformationManager::addDeformation(re::RenderManager **a1, void *a2, uint64_t a3)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  uint64_t v61 = re::RenderManager::perFrameAllocator(*a1);
  uint64_t v8 = a2[3];
  if (a2[1]) {
    BOOL v9 = v8 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    uint64_t v10 = *((void *)*a1 + 4);
    uint64_t v11 = a3;
    uint64_t v55 = *(void *)(a3 + 48);
    if (!a2[12])
    {
      unint64_t v4 = v61;
      signed int v12 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v61 + 32))(v61, 24, 8);
      uint64_t v11 = a3;
      v12[1] = 0;
      void v12[2] = 0;
      *signed int v12 = 0;
      a2[12] = v12;
      unint64_t v3 = a2[1];
      *signed int v12 = v61;
      v12[1] = v3;
      if (v3)
      {
        if (v3 >= 0xAAAAAAAAAAAAAABLL)
        {
LABEL_51:
          re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 24, v3);
          _os_crash();
          __break(1u);
LABEL_52:
          re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
          _os_crash();
          __break(1u);
        }
        uint64_t v13 = v12;
        uint64_t v14 = 24 * v3;
        uint64_t v15 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v61 + 32))(v61, 24 * v3, 8);
        uint64_t v13[2] = (uint64_t)v15;
        if (!v15) {
          goto LABEL_52;
        }
        unint64_t v4 = (unint64_t)v15;
        if (v3 != 1)
        {
          bzero(v15, v14 - 24);
          v4 += v14 - 24;
        }
        uint64_t v11 = a3;
        *(void *)unint64_t v4 = 0;
        *(void *)(v4 + 8) = 0;
        *(void *)(v4 + 16) = 0;
      }
    }
    uint64_t v16 = 0;
    uint64_t v63 = 0;
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    int v50 = (void *)(v11 + 8);
    uint64_t v59 = v10 + 8;
    uint64_t v60 = v10 + 72;
    uint64_t v56 = (uint64_t)(a1 + 177);
    uint64_t v54 = v11 + 32;
    uint64_t v58 = v8;
    while (1)
    {
      unint64_t v19 = a2[3];
      if (v19 <= v18) {
        break;
      }
      unint64_t v20 = a2[1];
      int v21 = (unsigned int *)(a2[2] + v16);
      unint64_t v3 = *v21;
      if (v20 <= v3) {
        goto LABEL_40;
      }
      unint64_t v22 = *((unsigned __int16 *)v21 + 2);
      unint64_t v4 = re::DataArray<re::MeshInstance>::get(v60, *(void *)(*a2 + 8 * v3));
      uint64_t v23 = (void *)re::DataArray<re::MeshModel>::get(v59, *(void *)(v4 + 16));
      uint64_t v24 = a2[12];
      if (*(void *)(v24 + 8) <= v3) {
        goto LABEL_41;
      }
      unint64_t v62 = v4;
      uint64_t v25 = *(void *)(v24 + 16);
      unsigned __int8 v26 = (uint64_t *)(v25 + 24 * v3);
      if (!*v26)
      {
        unint64_t v4 = v23[7];
        *unsigned __int8 v26 = v61;
        *(void *)(v25 + 24 * v3 + 8) = v4;
        if (v4)
        {
          if (v4 >> 61) {
            goto LABEL_44;
          }
          uint64_t v23 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v61 + 32))(v61, 8 * v4, 8);
          *(void *)(v25 + 24 * v3 + 16) = v23;
          if (!v23) {
            goto LABEL_45;
          }
          uint64_t v27 = v23;
          if (v4 != 1)
          {
            bzero(v23, 8 * v4 - 8);
            v27 += v4 - 1;
          }
          uint64_t v8 = v58;
          *uint64_t v27 = 0;
        }
      }
      if (*(void *)(v25 + 24 * v3 + 8) <= v22) {
        goto LABEL_42;
      }
      unint64_t v3 = *(void *)(v25 + 24 * v3 + 16);
      if (!*(void *)(v3 + 8 * v22))
      {
        re::globalAllocators((re *)v23);
        unint64_t v4 = v61;
        uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v61 + 32))(v61, 336, 8);
        *(_OWORD *)uint64_t v28 = 0u;
        *(_OWORD *)(v28 + 16) = 0u;
        *(_OWORD *)(v28 + 32) = 0u;
        *(_OWORD *)(v28 + 64) = 0u;
        *(_OWORD *)(v28 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
        *(_OWORD *)(v28 + 96) = 0u;
        *(_OWORD *)(v28 + 112) = 0u;
        *(_OWORD *)(v28 + 128) = 0u;
        *(_OWORD *)(v28 + 144) = 0u;
        *(_OWORD *)(v28 + 16ArcSharedObject::ArcSharedObject(this, 0) = 0u;
        *(_OWORD *)(v28 + 176) = 0u;
        *(_OWORD *)(v28 + 192) = 0u;
        *(_OWORD *)(v28 + 208) = 0u;
        *(_OWORD *)(v28 + 224) = 0u;
        *(_OWORD *)(v28 + 24ArcSharedObject::ArcSharedObject(this, 0) = 0u;
        *(_OWORD *)(v28 + 256) = 0u;
        *(_OWORD *)(v28 + 272) = 0u;
        *(_OWORD *)(v28 + 288) = 0u;
        *(_OWORD *)(v28 + 304) = 0u;
        *(_OWORD *)(v28 + 32ArcSharedObject::ArcSharedObject(this, 0) = 0u;
        *(_OWORD *)(v28 + 48) = 0u;
        *(_DWORD *)(v28 + 208) = 1;
        *(void *)(v28 + 216) = 0;
        *(void *)(v28 + 224) = 0;
        *(void *)(v28 + 232) = 0;
        *(_DWORD *)(v28 + 24ArcSharedObject::ArcSharedObject(this, 0) = 0;
        *(void *)(v28 + 248) = 0;
        *(void *)(v28 + 256) = 0;
        *(void *)(v28 + 264) = 0;
        *(_DWORD *)(v28 + 272) = 0;
        *(_OWORD *)(v28 + 28ArcSharedObject::ArcSharedObject(this, 0) = 0u;
        *(_OWORD *)(v28 + 296) = 0u;
        *(_DWORD *)(v28 + 312) = 0;
        uint64_t v29 = re::globalAllocators((re *)v28)[2];
        *(void *)&long long v64 = &unk_26E7138F8;
        *((void *)&v65 + 1) = v29;
        *(void *)&long long v66 = &v64;
        *(void *)(v3 + 8 * v22) = (*(uint64_t (**)(uint64_t, uint64_t, long long *))(*(void *)v61 + 16))(v61, v28, &v64);
        re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)&v64);
        unint64_t v30 = a2[5];
        if (v30 <= v18) {
          goto LABEL_43;
        }
        uint64_t v31 = a2[4];
        if ((*(_DWORD *)(v31 + v16 + 4) & 0xFFFFFF) != 0)
        {
          char v32 = (unsigned __int8 *)re::DataArray<re::DeformationStack>::get(v56, *(void *)(v31 + v16));
          unint64_t v33 = a2[5];
          if (v33 <= v18) {
            goto LABEL_46;
          }
          unint64_t v34 = a2[7];
          if (v34 <= v18) {
            goto LABEL_47;
          }
          unint64_t v35 = a2[9];
          if (v35 <= v18) {
            goto LABEL_48;
          }
          unint64_t v36 = a2[11];
          if (v36 <= v18) {
            goto LABEL_49;
          }
          uint64_t v37 = *(void *)(a2[4] + 8 * v18);
          uint64_t v39 = v32 + 48;
          uint64_t v38 = *v32;
          unint64_t v4 = *(void *)(a2[6] + 8 * v18);
          uint64_t v40 = a2[8];
          uint64_t v41 = a2[10];
          uint64_t v42 = *(void *)(v3 + 8 * v22);
          uint64_t v43 = a3;
          unint64_t v44 = *(void *)(a3 + 48);
          unint64_t v3 = *(void *)(a3 + 16);
          if (v44 + 1 > 8 * v3)
          {
            uint64_t v52 = a2[8];
            uint64_t v53 = v38;
            uint64_t v45 = *(void *)(a2[4] + 8 * v18);
            uint64_t v51 = v42;
            uint64_t v46 = a2[10];
            re::BucketArray<re::ActiveDeformation,8ul>::setBucketsCapacity(v50, (v44 + 8) >> 3);
            uint64_t v41 = v46;
            uint64_t v40 = v52;
            uint64_t v38 = v53;
            uint64_t v42 = v51;
            uint64_t v37 = v45;
            uint64_t v43 = a3;
            unint64_t v3 = *(void *)(a3 + 16);
          }
          if (v3 <= v44 >> 3) {
            goto LABEL_50;
          }
          uint64_t v47 = v54;
          if ((*(unsigned char *)(v43 + 24) & 1) == 0) {
            uint64_t v47 = *(void *)(v43 + 40);
          }
          uint64_t v48 = *(void *)(v47 + 8 * (v44 >> 3));
          ++*(void *)(v43 + 48);
          ++*(_DWORD *)(v43 + 56);
          uint64_t v49 = v48 + 400 * (v44 & 7);
          *(_OWORD *)(v49 + 288) = 0u;
          *(_OWORD *)(v49 + 304) = 0u;
          *(_OWORD *)(v49 + 256) = 0u;
          *(_OWORD *)(v49 + 272) = 0u;
          *(_OWORD *)(v49 + 224) = 0u;
          *(_OWORD *)(v49 + 24ArcSharedObject::ArcSharedObject(this, 0) = 0u;
          *(_OWORD *)(v49 + 192) = 0u;
          *(_OWORD *)(v49 + 208) = 0u;
          *(_OWORD *)(v49 + 16ArcSharedObject::ArcSharedObject(this, 0) = 0u;
          *(_OWORD *)(v49 + 176) = 0u;
          *(_OWORD *)(v49 + 128) = 0u;
          *(_OWORD *)(v49 + 144) = 0u;
          *(_OWORD *)(v49 + 96) = 0u;
          *(_OWORD *)(v49 + 112) = 0u;
          *(_OWORD *)(v49 + 64) = 0u;
          *(_OWORD *)(v49 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
          *(_OWORD *)(v49 + 32) = 0u;
          *(_OWORD *)(v49 + 48) = 0u;
          *(_OWORD *)uint64_t v49 = 0u;
          *(_OWORD *)(v49 + 16) = 0u;
          *(void *)(v49 + 32ArcSharedObject::ArcSharedObject(this, 0) = v37;
          *(void *)(v49 + 328) = v39;
          *(void *)(v49 + 336) = v38;
          *(void *)(v49 + 344) = v4;
          *(void *)(v49 + 352) = v40 + v17;
          *(void *)(v49 + 36ArcSharedObject::ArcSharedObject(this, 0) = v41 + v63;
          *(void *)(v49 + 368) = v62;
          *(void *)(v49 + 376) = v42;
          *(void *)(v49 + 384) = v55;
          *(_WORD *)(v49 + 392) = v22;
          uint64_t v8 = v58;
        }
      }
      ++v18;
      v17 += 168;
      v63 += 48;
      v16 += 8;
      if (v8 == v18) {
        return;
      }
    }
    re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v18, v19);
    _os_crash();
    __break(1u);
LABEL_40:
    re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v3, v20);
    _os_crash();
    __break(1u);
LABEL_41:
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v64 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_42:
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v64 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_43:
    re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v18, v30);
    _os_crash();
    __break(1u);
LABEL_44:
    re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, v4);
    _os_crash();
    __break(1u);
LABEL_45:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
LABEL_46:
    re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v18, v33);
    _os_crash();
    __break(1u);
LABEL_47:
    re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v18, v34);
    _os_crash();
    __break(1u);
LABEL_48:
    re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v18, v35);
    _os_crash();
    __break(1u);
LABEL_49:
    re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v18, v36);
    _os_crash();
    __break(1u);
LABEL_50:
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v64 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_51;
  }
}

void re::DeformationManager::deform(void *a1, uint64_t a2, void *a3)
{
  uint64_t v257 = *MEMORY[0x263EF8340];
  unint64_t v3 = a3[6];
  if (!v3) {
    return;
  }
  uint64_t isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)a1);
  if (isStatisticCollectionEnabled)
  {
    uint64_t isStatisticCollectionEnabled = (re *)re::profilerThreadContext(isStatisticCollectionEnabled);
    unint64_t v167 = isStatisticCollectionEnabled;
    if (*((void *)isStatisticCollectionEnabled + 19))
    {
      uint64_t isStatisticCollectionEnabled = (re *)mach_absolute_time();
      uint64_t v166 = isStatisticCollectionEnabled;
    }
  }
  else
  {
    unint64_t v167 = 0;
  }
  uint64_t v197 = (uint64_t)(a3 + 1);
  uint64_t v5 = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(isStatisticCollectionEnabled);
  if (v5)
  {
    uint64_t v6 = re::profilerThreadContext(v5);
    uint64_t v7 = *(int64x2_t **)(v6 + 152);
    if (v7)
    {
      unint64_t v8 = v7[468].u64[0];
      if (v8 >= v3) {
        unint64_t v8 = v3;
      }
      v7[468].i64[0] = v8;
      unint64_t v9 = v7[468].u64[1];
      if (v9 <= v3) {
        unint64_t v9 = v3;
      }
      v7[468].i64[1] = v9;
      int64x2_t v10 = vdupq_n_s64(1uLL);
      v10.i64[0] = v3;
      v7[469] = vaddq_s64(v7[469], v10);
      *(unsigned char *)(v6 + 184) = 0;
    }
  }
  uint64_t v11 = re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v204, 1004, (uint64_t)a1);
  uint64_t v201 = 0;
  unint64_t v202 = 0;
  uint64_t v203 = 0;
  unint64_t v12 = 0;
  unint64_t v13 = 0;
  uint64_t v14 = &v223;
  unint64_t v15 = (unint64_t)&v225[1] + 8;
  uint64_t v16 = v202;
  unint64_t v196 = (unint64_t)v203;
  do
  {
    uint64_t v17 = re::BucketArray<re::ActiveDeformation,8ul>::operator[](v197, v13);
    re::DeformationVertexBufferState::makeFromMeshInstance((re::DeformationVertexBufferState *)*a1, *(re::RenderManager **)(v17 + 368), (const re::MeshInstance *)*(unsigned __int16 *)(v17 + 392), (uint64_t)&v223);
    if (v16 == v13) {
      goto LABEL_226;
    }
    unint64_t v18 = v196 + v12;
    long long v19 = v223;
    long long v20 = v224;
    long long v21 = v225[0];
    *(void *)(v18 + 48) = *(void *)&v225[1];
    *(_OWORD *)(v18 + 16) = v20;
    *(_OWORD *)(v18 + 32) = v21;
    *(_OWORD *)unint64_t v18 = v19;
    if ((long long *)(v196 + v12) != &v223)
    {
      re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::copy((_anonymous_namespace_ *)(v18 + 56), (uint64_t *)&v225[1] + 1);
      re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::copy((_anonymous_namespace_ *)(v18 + 120), v226);
      re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::copy((_anonymous_namespace_ *)(v18 + 184), v227);
      re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::copy((_anonymous_namespace_ *)(v18 + 248), (uint64_t *)&v229 + 1);
    }
    re::DeformationVertexBufferState::~DeformationVertexBufferState((re::DeformationVertexBufferState *)&v223);
    ++v13;
    v12 += 312;
  }
  while (v3 != v13);
  uint64_t v22 = *a1;
  uint64_t v23 = *(void **)(*a1 + 136);
  uint64_t v24 = v23[2];
  uint64_t v25 = (v24 << 60) | v23[4] & 0xFFFFFFFFFFFFFFFLL;
  v222[0] = (v24 << 60) | v23[3] & 0xFFFFFFFFFFFFFFFLL;
  v222[1] = v25;
  v222[2] = v22 + 184;
  unsigned __int8 v26 = (re *)re::DeformationFencePool::setCurrentFrame((uint64_t)(a1 + 1), v25, v222[0]);
  re::globalAllocators(v26);
  uint64_t v27 = *(void *)(a2 + 24);
  uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 984, 8);
  bzero((void *)v28, 0x3D0uLL);
  *(_DWORD *)(v28 + 16) = 1;
  *(void *)(v28 + 32) = 0;
  *(void *)(v28 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(v28 + 24) = 0;
  *(_DWORD *)(v28 + 48) = 0;
  *(void *)(v28 + 56) = 0;
  *(void *)(v28 + 64) = 0;
  *(_DWORD *)(v28 + 72) = 1;
  *(void *)(v28 + 88) = 0;
  *(void *)(v28 + 96) = 0;
  *(void *)(v28 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(_DWORD *)(v28 + 104) = 0;
  uint64_t v30 = 112;
  do
  {
    uint64_t v31 = v28 + v30;
    *(_DWORD *)(v31 + 32) = 0;
    *(_OWORD *)uint64_t v31 = 0uLL;
    *(_OWORD *)(v31 + 16) = 0uLL;
    *(void *)(v31 + 36) = 0x7FFFFFFFLL;
    v30 += 48;
  }
  while (v31 + 48 != v28 + 976);
  *(void *)(v28 + 976) = 0;
  *((void *)&v224 + 1) = re::globalAllocators(v29)[2];
  *(void *)&long long v223 = &unk_26E713950;
  *(void *)&v225[0] = &v223;
  uint64_t v177 = (*(uint64_t (**)(uint64_t, uint64_t, long long *))(*(void *)v27 + 16))(v27, v28, &v223);
  re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)&v223);
  unint64_t v195 = v16;
  unint64_t v33 = v196;
  uint64_t v189 = a3[6];
  if (!v189) {
    goto LABEL_43;
  }
  unint64_t v34 = 0;
  unint64_t v15 = 1;
  do
  {
    unint64_t v12 = re::BucketArray<re::ActiveDeformation,8ul>::operator[](v197, v34);
    unint64_t v35 = (long long *)re::DataArray<re::DeformationStack>::get((uint64_t)(a1 + 177), *(void *)(v12 + 320));
    if (v34 == v16) {
      goto LABEL_229;
    }
    uint64_t v14 = v35;
    uint64_t v16 = v33 + 312 * v34;
    uint64_t v37 = *(re::DeformationBufferAllocator **)(v12 + 360);
    unint64_t v214 = 0;
    uint64_t v38 = *(unsigned __int8 *)v35;
    if (!*(unsigned char *)v35) {
      goto LABEL_41;
    }
    uint64_t v192 = v34;
    uint64_t v193 = *(unsigned __int8 *)v35;
    unint64_t v33 = 0;
    uint64_t v39 = 0;
    uint64_t v198 = v35;
    unint64_t v199 = v12;
    do
    {
      uint64_t v40 = &v14[4 * v33];
      uint64_t v41 = *((void *)v40 + 7);
      if ((v41 & v39) != 0) {
        goto LABEL_33;
      }
      if (!re::DeformationBufferAllocator::updateAllocationDataFrameForInputHash((uint64_t)v37, v222, v33, v42))
      {
        uint64_t v40 = &v14[4 * v33];
LABEL_33:
        uint64_t v50 = *((void *)v40 + 8);
LABEL_34:
        v39 |= v50;
        re::Bitset<64>::toWordIndex((uint64_t)&v214, v33);
        v214 |= 1 << v33;
        goto LABEL_35;
      }
      unint64_t v43 = *((void *)v37 + 1);
      if (v43 <= v33) {
        goto LABEL_225;
      }
      int v44 = *(_DWORD *)(*((void *)v37 + 2) + 72 * v33 + 56);
      if (v44)
      {
        for (unsigned int i = 0; i != v44; ++i)
        {
          uint64_t v46 = re::DeformationBufferAllocator::allocationData(v37, v33, i);
          unsigned __int8 v47 = *(unsigned char *)v46;
          id v48 = objc_msgSend(*(id *)(v46 + 24), sel_contents);
          uint64_t v49 = *(void *)(v46 + 24);
          *(void *)&long long v223 = v48;
          *((void *)&v223 + 1) = *(void *)(v46 + 32);
          *(void *)&long long v224 = v49;
          re::DeformationVertexBufferState::setOutputBuffer(v16, v47, 1, (uint64_t)&v223, v46 + 4);
        }
        re::DeformationVertexBufferState::resetVertexBufferChangedState(v16);
        unint64_t v15 = 1;
        uint64_t v14 = v198;
        unint64_t v12 = v199;
        uint64_t v38 = v193;
      }
      else
      {
        uint64_t v50 = *(void *)&v14[4 * v33 + 4];
        if (v50) {
          goto LABEL_34;
        }
      }
LABEL_35:
      ++v33;
    }
    while (v33 != v38);
    unint64_t v33 = v196;
    unint64_t v34 = v192;
    if (v214)
    {
      re::DeformationPassBuilder::addDeformationStack((unsigned __int8 *)v177, v192, v214, (unint64_t)v14);
      goto LABEL_42;
    }
LABEL_41:
    re::DeformationVertexBufferState::buildAttributeTable((re::DeformationVertexBufferState *)v16, *(re::AttributeTable **)(v12 + 376));
LABEL_42:
    ++v34;
    uint64_t v16 = v195;
  }
  while (v34 != v189);
LABEL_43:
  uint64_t v51 = (const re::mtl::CommandBuffer *)(a2 + 64);
  if (!*(void *)(a2 + 64)) {
    goto LABEL_234;
  }
  re::DeformationCommandBuffer::DeformationCommandBuffer((re::DeformationCommandBuffer *)v239, (re::RenderManager *)*a1, v51, (re::DeformationFencePool *)(a1 + 1));
  uint64_t v52 = v177;
  unint64_t v53 = *(void *)(v177 + 976);
  if (v53)
  {
    unint64_t v54 = __clz(__rbit64(v53));
    uint64_t v55 = a1[5 * v54 + 81];
    (*(void (**)(uint64_t, void))(*(void *)v55 + 16))(v55, *a1);
    uint64_t v52 = v177;
    if (v54 != 63)
    {
      unint64_t v15 = 40;
      do
      {
        if ((*(void *)(v52 + 976) & (-2 << v54)) == 0) {
          break;
        }
        unint64_t v54 = __clz(__rbit64(*(void *)(v52 + 976) & (-2 << v54)));
        uint64_t v56 = a1[5 * v54 + 81];
        (*(void (**)(uint64_t, void))(*(void *)v56 + 16))(v56, *a1);
        uint64_t v52 = v177;
      }
      while (v54 != 63);
    }
  }
  uint64_t v181 = *(void *)(a2 + 24);
  id v221 = 0;
  int v169 = *(unsigned __int8 *)(v52 + 40);
  if (*(unsigned char *)(v52 + 40))
  {
    uint64_t v57 = v52;
    int v173 = 0;
    unint64_t v58 = 0;
    uint64_t v170 = v52 + 56;
    uint64_t v171 = 312 * v16;
    uint64_t v168 = 1;
    int v194 = 1;
    do
    {
      char v172 = v58;
      uint64_t v59 = (unsigned __int8 *)re::BucketArray<unsigned char,8ul>::operator[](v170, v58);
      unint64_t v60 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v57, *v59);
      re::DeformationCommandBuffer::beginDeformationPass((re::DeformationCommandBuffer *)v239);
      unint64_t v214 = 0;
      uint64_t v215 = 0;
      int v216 = 1;
      uint64_t v218 = 0;
      unint64_t v219 = 0;
      uint64_t v217 = 0;
      int v220 = 0;
      uint64_t v61 = re::BucketArray<re::DynamicArray<re::PostDeformationBlit>,8ul>::addUninitialized((uint64_t)&v214);
      *(void *)(v61 + 32) = 0;
      *(void *)(v61 + 8) = 0;
      *(void *)(v61 + 16) = 0;
      *(void *)uint64_t v61 = 0;
      *(_DWORD *)(v61 + 24) = 0;
      uint64_t v178 = *(void *)(v60 + 40);
      uint64_t v179 = v60;
      if (!v178)
      {
        int v149 = 0;
        goto LABEL_177;
      }
      *(_DWORD *)&v174[8] = 0;
      uint64_t v175 = 0;
      int v187 = 0;
      unint64_t v62 = 0;
      *(void *)unint64_t v174 = v173 ^ 1u;
      do
      {
        unint64_t v185 = v62;
        uint64_t v63 = (unsigned __int8 *)re::BucketArray<re::BatchedDeformationInstances,64ul>::operator[](v179, v62);
        BOOL v186 = v63[1] == 1;
        *(void *)&long long v209 = v63;
        *((void *)&v209 + 1) = a3 + 1;
        uint64_t v64 = a3[12];
        uint64_t v65 = a3[10];
        *(void *)&long long v210 = v222;
        *((void *)&v210 + 1) = v64;
        uint64_t v211 = v65;
        unint64_t v212 = v33;
        uint64_t v213 = v16;
        uint64_t v188 = (uint64_t)v63;
        uint64_t v190 = a1[5 * *v63 + 81];
        long long v237 = 0u;
        long long v236 = 0u;
        char v238 = 1;
        uint64_t v200 = (uint64_t)(v63 + 8);
        uint64_t v16 = *((void *)v63 + 6);
        if (v16)
        {
          unint64_t v15 = 0;
          while (1)
          {
            unint64_t v12 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v200, v15);
            uint64_t v66 = *(unsigned __int8 *)(v12 + 16);
            unsigned int v67 = *(_DWORD *)(*(void *)v12 + 4 * v66 + 4);
            unint64_t v43 = re::BucketArray<re::ActiveDeformation,8ul>::operator[](v197, *(void *)(v12 + 8));
            unint64_t v33 = *(void *)v12 + (v66 << 6);
            long long v68 = *(_OWORD *)(v33 + 48);
            long long v69 = *(_OWORD *)(v33 + 64);
            v225[0] = *(unint64_t *)(v33 + 80);
            long long v223 = v68;
            long long v224 = v69;
            v225[1] = 0uLL;
            uint64_t v70 = *(void *)(v33 + 88);
            if (v70)
            {
              re::FixedArray<re::Pair<re::DeformerType,unsigned long long,true>>::init<>((void *)v225 + 1, v70, *(void *)(v33 + 96));
              uint64_t v71 = *(void *)(v33 + 96);
              if (*(void *)&v225[1] != v71) {
                goto LABEL_224;
              }
              if (v71) {
                memmove(*((void **)&v225[1] + 1), *(const void **)(v33 + 104), 16 * v71);
              }
            }
            unint64_t v72 = *(void *)(v12 + 8);
            if (v195 <= v72) {
              break;
            }
            unint64_t v33 = v196;
            re::DeformationBufferAllocator::resetAllocationData(*(void **)(v43 + 360), v222, v66, v73);
            if (*((void *)&v225[0] + 1) && *(void *)&v225[1]) {
              (*(void (**)(void))(**((void **)&v225[0] + 1) + 40))();
            }
            if (v16 == ++v15) {
              goto LABEL_64;
            }
          }
          re::internal::assertLog((re::internal *)6, v70, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, *(void *)(v12 + 8), v195);
          _os_crash();
          __break(1u);
LABEL_223:
          re::internal::assertLog((re::internal *)6, v142, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v143, v16);
          _os_crash();
          __break(1u);
LABEL_224:
          re::internal::assertLog((re::internal *)4, v70, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
          _os_crash();
          __break(1u);
LABEL_225:
          v254[0] = 0;
          long long v224 = 0u;
          memset(v225, 0, 48);
          long long v223 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          LODWORD(v239[0]) = 136315906;
          *(void *)((char *)v239 + 4) = "operator[]";
          WORD2(v239[1]) = 1024;
          *(_DWORD *)((char *)&v239[1] + 6) = 476;
          WORD1(v239[2]) = 2048;
          *(void *)((char *)&v239[2] + 4) = v33;
          WORD2(v239[3]) = 2048;
          *(void *)((char *)&v239[3] + 6) = v43;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_226:
          unint64_t v214 = 0;
          long long v241 = 0u;
          long long v240 = 0u;
          memset(v239, 0, sizeof(v239));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          LODWORD(v254[0]) = 136315906;
          *(void **)((char *)v254 + 4) = "operator[]";
          WORD2(v254[1]) = 1024;
          *(_DWORD *)((char *)&v254[1] + 6) = 468;
          WORD1(v254[2]) = 2048;
          *(void **)((char *)&v254[2] + 4) = (void *)v16;
          WORD2(v254[3]) = 2048;
          *(void **)((char *)&v254[3] + 6) = (void *)v16;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_227:
          re::internal::assertLog((re::internal *)4, v74, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
          _os_crash();
          __break(1u);
LABEL_228:
          re::internal::assertLog((re::internal *)4, v79, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
          _os_crash();
          __break(1u);
LABEL_229:
          re::internal::assertLog((re::internal *)6, v36, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v16, v16);
          _os_crash();
          __break(1u);
          goto LABEL_230;
        }
LABEL_64:
        v205[1] = 0;
        uint64_t v206 = 0;
        int v207 = 0;
        uint64_t v208 = 0;
        v205[0] = v181;
        re::DynamicArray<re::ecs2::HandleTable::HandleSlot>::setCapacity(v205, 0);
        ++v207;
        if (!v219) {
          goto LABEL_227;
        }
        uint64_t v75 = v188;
        uint64_t v76 = *(unsigned __int8 *)(v188 + 1);
        uint64_t v77 = re::BucketArray<re::ecs2::AnimationComponent::AnimationComponentEventDelegate::AnimationEventData,8ul>::operator[]((uint64_t)&v214, v219 - 1);
        uint64_t v78 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, long long *, long long *, uint64_t, void *))(*(void *)v190 + 40))(v190, a2, v76, &v209, &v236, v77, v205);
        if (!v219) {
          goto LABEL_228;
        }
        unint64_t v15 = v78;
        uint64_t v80 = (char *)re::BucketArray<re::ecs2::AnimationComponent::AnimationComponentEventDelegate::AnimationEventData,8ul>::operator[]((uint64_t)&v214, v219 - 1);
        if (*((void *)v80 + 2))
        {
          uint64_t v80 = (char *)re::BucketArray<re::DynamicArray<re::PostDeformationBlit>,8ul>::addUninitialized((uint64_t)&v214);
          *((void *)v80 + 4) = 0;
          *((void *)v80 + 1) = 0;
          *((void *)v80 + 2) = 0;
          *(void *)uint64_t v80 = 0;
          *((_DWORD *)v80 + 6) = 0;
        }
        uint64_t v16 = v195;
        int v82 = (char *)&v228;
        if (*(unsigned char *)(v188 + 1) == 1 && (void)v236)
        {
          re::DeformationCommandBuffer::setEncoderType((uint64_t)v239, 1);
          uint64_t v80 = (char *)re::BufferInitializationOptions::initializeGPUVertexBuffers((unint64_t *)&v236, (uint64_t)&v244, v188, v33, v195);
        }
        *(void *)&long long v223 = 0;
        DWORD2(v223) = 0;
        *(void *)&long long v224 = 0;
        DWORD2(v224) = 0;
        long long v228 = 0u;
        long long v229 = 0u;
        int v230 = 0;
        uint64_t v231 = 0x7FFFFFFFLL;
        if (v206)
        {
          unint64_t v183 = v15;
          long long v83 = v208;
          unsigned int v84 = &v208[2 * v206];
          while (1)
          {
            uint64_t v85 = *v83;
            v254[0] = *v83;
            if (!HIDWORD(v229)) {
              break;
            }
LABEL_74:
            uint64_t v80 = (char *)re::HashTable<MTL::Event *,re::EventWait,re::Hash<MTL::Event *>,re::EqualTo<MTL::Event *>,false,false>::add((uint64_t)&v228, (uint64_t *)v254, (uint64_t)v83);
LABEL_97:
            unsigned int v99 = v83[1];
            if (*((void *)v80 + 1) < (unint64_t)v99) {
              *((void *)v80 + 1) = v99;
            }
            v83 += 2;
            if (v83 == v84)
            {
              int v100 = HIDWORD(v229);
              if (HIDWORD(v229))
              {
                int v194 = v230;
                if (v230)
                {
                  uint64_t v101 = 0;
                  unsigned int v102 = (int *)v229;
                  while (1)
                  {
                    int v103 = *v102;
                    v102 += 8;
                    if (v103 < 0) {
                      break;
                    }
                    if (v230 == ++v101)
                    {
                      LODWORD(v101) = v230;
                      break;
                    }
                  }
                  LODWORD(v14) = v101;
                }
                else
                {
                  LODWORD(v14) = 0;
                  int v194 = 0;
                }
                unint64_t v12 = (unint64_t)&v228;
              }
              else
              {
                unint64_t v12 = (unint64_t)v225;
                int v82 = (char *)v225 + 24 * v224;
              }
              BOOL v104 = v12 == (void)v82;
              if (HIDWORD(v229)) {
                BOOL v104 = v194 == v14;
              }
              if (!v104)
              {
                do
                {
                  if (v100)
                  {
                    uint64_t v105 = *(void *)(v12 + 16) + 32 * v14;
                    uint64_t v106 = *(void *)(v105 + 16);
                    uint64_t v107 = *(void *)(v105 + 24);
                    re::DeformationCommandBuffer::setEncoderType((uint64_t)v239, 0);
                    uint64_t v80 = (char *)[*(id *)v239[2] encodeWaitForEvent:v106 value:v107];
                    unsigned int v108 = v14 + 1;
                    do
                    {
                      LODWORD(v14) = v108;
                      if (v108 >= *(_DWORD *)(v12 + 32)) {
                        break;
                      }
                      int v109 = *(_DWORD *)(*(void *)(v12 + 16) + 32 * v108++);
                    }
                    while ((v109 & 0x80000000) == 0);
                  }
                  else
                  {
                    uint64_t v110 = *(void *)(v12 + 8);
                    uint64_t v111 = *(void *)(v12 + 16);
                    re::DeformationCommandBuffer::setEncoderType((uint64_t)v239, 0);
                    uint64_t v80 = (char *)[*(id *)v239[2] encodeWaitForEvent:v110 value:v111];
                    v12 += 24;
                  }
                  BOOL v112 = v12 == (void)v82;
                  if (v100) {
                    BOOL v112 = v194 == v14;
                  }
                }
                while (!v112);
              }
              unint64_t v15 = v183;
              uint64_t v75 = v188;
              goto LABEL_123;
            }
          }
          uint64_t v86 = v224;
          if (!(void)v224) {
            goto LABEL_94;
          }
          uint64_t v87 = 0;
          do
          {
            if (*(void **)((char *)v225 + v87) == v85)
            {
              uint64_t v80 = (char *)v225 + v87 + 8;
              goto LABEL_97;
            }
            v87 += 24;
          }
          while (24 * (void)v224 != v87);
          if ((v224 & 0xFFFFFFF8) == 0)
          {
LABEL_94:
            id v95 = v85;
            uint64_t v96 = v224;
            if ((unint64_t)v224 >= 8) {
              goto LABEL_235;
            }
            unsigned int v97 = v83[1];
            BOOL v98 = (void *)v225 + 3 * v224;
            *BOOL v98 = v85;
            v98[1] = v95;
            uint64_t v80 = (char *)(v98 + 1);
            unint64_t v98[2] = v97;
            *(void *)&long long v224 = v96 + 1;
            ++DWORD2(v224);
            goto LABEL_97;
          }
          if (!(void)v228)
          {
            int v88 = (uint64_t *)v223;
            if (!(void)v223)
            {
            }
            re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)&v228, (uint64_t)v88, 16);
            uint64_t v86 = v224;
            if (!(void)v224)
            {
LABEL_93:
              re::DynamicInlineArray<re::KeyValuePair<MTL::Event *,re::EventWait>,8ul>::clear((uint64_t)&v224);
              goto LABEL_74;
            }
          }
          __int16 v89 = (char *)v225;
          unint64_t v90 = (char *)v225 + 24 * v86;
          while (2)
          {
            unint64_t v91 = 0xBF58476D1CE4E5B9 * (*(void *)v89 ^ (*(void *)v89 >> 30));
            unint64_t v92 = (0x94D049BB133111EBLL * (v91 ^ (v91 >> 27))) ^ ((0x94D049BB133111EBLL * (v91 ^ (v91 >> 27))) >> 31);
            if ((void)v228)
            {
              unint64_t v93 = v92 % DWORD2(v229);
              uint64_t v94 = *(unsigned int *)(*((void *)&v228 + 1) + 4 * v93);
              if (v94 != 0x7FFFFFFF)
              {
                while (*(void *)(v229 + 32 * v94 + 8) != *(void *)v89)
                {
                  uint64_t v94 = *(_DWORD *)(v229 + 32 * v94) & 0x7FFFFFFF;
                  if (v94 == 0x7FFFFFFF) {
                    goto LABEL_91;
                  }
                }
LABEL_92:
                v89 += 24;
                if (v89 == v90) {
                  goto LABEL_93;
                }
                continue;
              }
            }
            else
            {
              LODWORD(v93) = 0;
            }
            break;
          }
LABEL_91:
          re::HashTable<MTL::Event *,re::EventWait,re::Hash<MTL::Event *>,re::EqualTo<MTL::Event *>,false,false>::addAsMove((uint64_t)&v228, v93, v92, v89, (void *)v89 + 1);
          ++HIDWORD(v231);
          goto LABEL_92;
        }
LABEL_123:
        v187 |= v186;
        uint64_t v113 = *(unsigned __int8 *)(v75 + 1);
        if (*(unsigned char *)(v75 + 1))
        {
          if (v113 != 1) {
            goto LABEL_236;
          }
          re::DeformationCommandBuffer::setEncoderType((uint64_t)v239, 2);
          (*(void (**)(uint64_t, unint64_t, id *, long long *))(*(void *)v190 + 48))(v190, v15, &v245, &v209);
        }
        else if (((v173 ^ 1) & (HIDWORD(v229) == 0)) == 1 && (void)v224 == 0)
        {
          if ([*(id *)(*a1 + 184) supportsBufferWithIOSurface])
          {
            memset(v254, 0, 36);
            *(void **)((char *)&v254[4] + 4) = (void *)0x7FFFFFFF;
            if ((void)v236) {
              re::BufferInitializationOptions::initializeCPUVertexBuffers((unint64_t *)&v236, v75, v33, v195);
            }
            (*(void (**)(uint64_t, unint64_t, long long *))(*(void *)v190 + 56))(v190, v15, &v209);
            re::DeformationVertexBufferState::LockedSurfaces::unlockAll((re::DeformationVertexBufferState::LockedSurfaces *)v254);
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v254);
          }
          else
          {
            if ((void)v236) {
              re::BufferInitializationOptions::initializeCPUVertexBuffers((unint64_t *)&v236, v75, v33, v195);
            }
            (*(void (**)(uint64_t, unint64_t, long long *))(*(void *)v190 + 56))(v190, v15, &v209);
          }
        }
        else
        {
          int v115 = v175;
          unint64_t v184 = v15;
          if (!v175)
          {
            re::globalAllocators((re *)v80);
            uint64_t v116 = *(void *)(a2 + 24);
            uint64_t v117 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v116 + 32))(v116, 24, 8);
            v117[1] = 0;
            v117[2] = 0;
            *uint64_t v117 = 0;
            re::FixedArray<re::DeformationVertexBufferState>::init<>(v117, v181, v195);
            BOOL v119 = (void *)re::globalAllocators(v118)[2];
            v254[0] = &unk_26E7139A8;
            v254[3] = v119;
            v254[4] = v254;
            uint64_t v120 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *, void **))(*(void *)v116 + 16))(v116, v117, v254);
            unint64_t v121 = (_anonymous_namespace_ *)re::FunctionBase<24ul,void ()(void *)>::destroyCallable((uint64_t)v254);
            if (!*v120)
            {
            }
            unsigned int v123 = v120;
            if (v120[1] != v195) {
              goto LABEL_232;
            }
            uint64_t v124 = 0;
            uint64_t v176 = v123;
            uint64_t v125 = v123[2];
            do
            {
              uint64_t v126 = v125 + v124;
              unsigned int v127 = (uint64_t *)(v33 + v124);
              long long v128 = *(_OWORD *)(v33 + v124);
              long long v129 = *(_OWORD *)(v33 + v124 + 16);
              long long v130 = *(_OWORD *)(v33 + v124 + 32);
              *(void *)(v126 + 48) = *(void *)(v33 + v124 + 48);
              *(_OWORD *)(v126 + 16) = v129;
              *(_OWORD *)(v126 + 32) = v130;
              *(_OWORD *)uint64_t v126 = v128;
              if (v33 != v125)
              {
                re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::copy((_anonymous_namespace_ *)(v126 + 56), v127 + 7);
                re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::copy((_anonymous_namespace_ *)(v126 + 120), v127 + 15);
                re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::copy((_anonymous_namespace_ *)(v126 + 184), v127 + 23);
                re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::copy((_anonymous_namespace_ *)(v126 + 248), v127 + 31);
              }
              v124 += 312;
            }
            while (v171 != v124);
            uint64_t v131 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v181 + 32))(v181, 72, 8);
            *(void *)uint64_t v131 = 0;
            *(void *)(v131 + 8) = 0;
            *(_DWORD *)(v131 + 16) = 1;
            *(void *)(v131 + 32) = 0;
            *(void *)(v131 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
            *(void *)(v131 + 24) = 0;
            *(_DWORD *)(v131 + 48) = 0;
            re::BucketArray<re::internal::DeformationCallbackData,8ul>::init(v131, v181, 1uLL);
            *(void *)(v131 + 56) = 0;
            *(unsigned char *)(v131 + 64) = 0;
            *(void *)&v174[4] = v131;
            *(unsigned char *)(v131 + 64) = [*(id *)(*a1 + 184) supportsBufferWithIOSurface];
            int v115 = v176;
          }
          long long v234 = v237;
          char v235 = v238;
          long long v233 = v236;
          *(void *)&v232[39] = v211;
          *(_OWORD *)&v232[7] = v209;
          *(_OWORD *)&v232[23] = v210;
          uint64_t v133 = v115[1];
          uint64_t v132 = v115[2];
          uint64_t v175 = v115;
          uint64_t v134 = *(void *)&v174[4];
          unint64_t v135 = *(void *)(*(void *)&v174[4] + 40);
          unint64_t v12 = *(void *)(*(void *)&v174[4] + 8);
          if (v135 + 1 > 8 * v12)
          {
            re::BucketArray<re::internal::DeformationCallbackData,8ul>::setBucketsCapacity(*(void **)&v174[4], (v135 + 8) >> 3);
            uint64_t v134 = *(void *)&v174[4];
            unint64_t v12 = *(void *)(*(void *)&v174[4] + 8);
          }
          unint64_t v15 = v135 >> 3;
          if (v12 <= v135 >> 3) {
            goto LABEL_231;
          }
          if (*(unsigned char *)(v134 + 16)) {
            uint64_t v136 = v134 + 24;
          }
          else {
            uint64_t v136 = *(void *)(v134 + 32);
          }
          uint64_t v137 = *(void *)(v136 + 8 * v15);
          ++*(void *)(v134 + 40);
          ++*(_DWORD *)(v134 + 48);
          uint64_t v138 = v137 + 112 * (v135 & 7);
          long long v139 = v234;
          *(_OWORD *)(v138 + 16) = v233;
          *(_OWORD *)(v138 + 32) = v139;
          long long v140 = *(_OWORD *)&v232[16];
          *(_OWORD *)(v138 + 49) = *(_OWORD *)v232;
          *(void *)uint64_t v138 = v190;
          *(void *)(v138 + 8) = v184;
          *(unsigned char *)(v138 + 48) = v235;
          *(_OWORD *)(v138 + 65) = v140;
          *(_OWORD *)(v138 + 8ArcSharedObject::ArcSharedObject(this, 0) = *(_OWORD *)&v232[31];
          *(void *)(v138 + 96) = v132;
          *(void *)(v138 + 104) = v133;
          int v187 = 1;
          uint64_t v75 = v188;
        }
        unint64_t v43 = *(void *)(v75 + 48);
        if (v43)
        {
          unint64_t v141 = 0;
          do
          {
            unint64_t v143 = *(void *)(re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v200, v141) + 8);
            if (v195 <= v143) {
              goto LABEL_223;
            }
            re::DeformationVertexBufferState::resetVertexBufferChangedState(v33 + 312 * v143);
          }
          while (v43 != ++v141);
        }
        re::DeformationCommandBuffer::endDeformation((uint64_t)v239, v81);
        re::DynamicInlineArray<re::KeyValuePair<MTL::Event *,re::EventWait>,8ul>::clear((uint64_t)&v224);
        re::HashTable<unsigned long long,re::BufferSlice,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)&v228);
        *(void *)&long long v223 = 0;
        DWORD2(v223) = 0;
        re::HashTable<unsigned long long,re::BufferSlice,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)&v228);
        re::DynamicInlineArray<re::KeyValuePair<MTL::Event *,re::EventWait>,8ul>::clear((uint64_t)&v224);
        uint64_t v144 = v205[0];
        if (v205[0])
        {
          long long v145 = v208;
          if (v208)
          {
            if (v206)
            {
              uint64_t v146 = 16 * v206;
              do
              {
                if (*v145)
                {

                  *long long v145 = 0;
                }
                v145 += 2;
                v146 -= 16;
              }
              while (v146);
              uint64_t v144 = v205[0];
              long long v145 = v208;
            }
            (*(void (**)(uint64_t, id *))(*(void *)v144 + 40))(v144, v145);
          }
        }
        unint64_t v62 = v185 + 1;
      }
      while (v185 + 1 != v178);
      unint64_t v147 = *(void *)&v174[4];
      if (*(void *)&v174[4])
      {
        if (!v221)
        {
          v254[0] = objc_msgSend(*(id *)(*a1 + 184), sel_newSharedEvent);
          NS::SharedPtr<MTL::Texture>::operator=(&v221, v254);
          if (v254[0]) {

          }
          unint64_t v147 = *(void *)&v174[4];
        }
        *(void *)(v147 + 56) = v168 + 1;
        unint64_t v15 = v147;
        id v148 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A00], sel_alloc), sel_init);
        *(void *)&long long v223 = MEMORY[0x263EF8330];
        *((void *)&v223 + 1) = 0x40000000;
        *(void *)&long long v224 = ___ZN2re18DeformationManager26enqueueCPUDeformationOnGPUERNS_24DeformationCommandBufferERN2NS9SharedPtrIN3MTL11SharedEventEEERyPNS_8internal23DeformMetalCallbackDataE_block_invoke;
        *((void *)&v224 + 1) = &__block_descriptor_tmp_29;
        *(void *)&v225[0] = v15;
        objc_msgSend(v221, sel_notifyListener_atValue_block_, v148, v168, &v223);
        re::DeformationCommandBuffer::encodeSharedEventForSynchronization((uint64_t)v239, &v221, v168, *(void *)(v15 + 56));
        if (v148) {

        }
        v168 += 2;
      }
      int v149 = v187;
LABEL_177:
      if (!v219) {
        goto LABEL_233;
      }
      if (*(void *)(re::BucketArray<re::ecs2::AnimationComponent::AnimationComponentEventDelegate::AnimationEventData,8ul>::operator[]((uint64_t)&v214, 0)+ 16))re::DeformationCommandBuffer::encodePostDeformationBlits((uint64_t)v239, (uint64_t)&v214); {
      re::DeformationCommandBuffer::endDeformationPass((uint64_t)v239, v150);
      }
      unint64_t v12 = v219;
      if (v219)
      {
        unint64_t v151 = 0;
        do
        {
          uint64_t v152 = re::BucketArray<re::ecs2::AnimationComponent::AnimationComponentEventDelegate::AnimationEventData,8ul>::operator[]((uint64_t)&v214, v151);
          uint64_t v153 = *(void *)v152;
          if (*(void *)v152)
          {
            unint64_t v15 = *(void *)(v152 + 32);
            if (v15)
            {
              uint64_t v154 = *(void *)(v152 + 16);
              if (v154)
              {
                uint64_t v155 = 48 * v154;
                do
                {
                  if (*(void *)v15)
                  {

                    *(void *)unint64_t v15 = 0;
                  }
                  v15 += 48;
                  v155 -= 48;
                }
                while (v155);
                uint64_t v153 = *(void *)v152;
                unint64_t v15 = *(void *)(v152 + 32);
                unint64_t v33 = v196;
              }
              (*(void (**)(uint64_t, unint64_t))(*(void *)v153 + 40))(v153, v15);
            }
            *(void *)(v152 + 32) = 0;
            *(void *)(v152 + 8) = 0;
            *(void *)(v152 + 16) = 0;
            *(void *)uint64_t v152 = 0;
            ++*(_DWORD *)(v152 + 24);
          }
          ++v151;
        }
        while (v151 != v12);
      }
      while (v215)
        re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)&v214);
      if (v214 && (v216 & 1) == 0) {
        (*(void (**)(void))(*(void *)v214 + 40))();
      }
      v173 |= v149;
      unint64_t v58 = (v172 + 1);
      uint64_t v57 = v177;
    }
    while (v169 != (v172 + 1));
  }
  re::DeformationCommandBuffer::finalizeFinalEncoder((uint64_t)v239, a2 + 48);
  if (v221) {

  }
  re::BucketArray<unsigned long,8ul>::deinit((uint64_t)v242);
  if (v242[0])
  {
    int v156 = v243;
    if ((v243 & 1) == 0)
    {
      (*(void (**)(void))(*(void *)v242[0] + 40))();
      int v156 = v243;
    }
    v242[0] = 0;
    v242[1] = 0;
    int v243 = (v156 | 1) + 2;
  }
  re::BucketArray<unsigned long,8ul>::deinit((uint64_t)&v239[5]);
  if (v239[5] && (BYTE8(v240) & 1) == 0) {
    (*(void (**)(void))(*(void *)v239[5] + 40))();
  }
  unint64_t v15 = a3[6];
  if (v15)
  {
    unint64_t v157 = 0;
    unint64_t v12 = v202;
    uint64_t v158 = v203;
    while (1)
    {
      uint64_t v159 = re::BucketArray<re::ActiveDeformation,8ul>::operator[](v197, v157);
      if (v12 == v157) {
        break;
      }
      re::DeformationVertexBufferState::buildAttributeTable(v158, *(re::AttributeTable **)(v159 + 376));
      ++v157;
      uint64_t v158 = (re::DeformationVertexBufferState *)((char *)v158 + 312);
      if (v15 == v157) {
        goto LABEL_213;
      }
    }
LABEL_230:
    re::internal::assertLog((re::internal *)6, v160, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v12, v12);
    _os_crash();
    __break(1u);
LABEL_231:
    v222[3] = 0;
    long long v255 = 0u;
    long long v256 = 0u;
    memset(v254, 0, sizeof(v254));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v246 = 136315906;
    v247 = "operator[]";
    __int16 v248 = 1024;
    int v249 = 858;
    __int16 v250 = 2048;
    unint64_t v251 = v15;
    __int16 v252 = 2048;
    unint64_t v253 = v12;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_232:
    re::internal::assertLog((re::internal *)4, v122, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
    _os_crash();
    __break(1u);
LABEL_233:
    re::internal::assertLog((re::internal *)4, v62, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "first", 754);
    _os_crash();
    __break(1u);
LABEL_234:
    re::internal::assertLog((re::internal *)4, v32, v51, "assertion failure: '%s' (%s:line %i) ", "frameContext.deformerCommandBuffer.isValid()", "processDeformationPasses", 557);
    _os_crash();
    __break(1u);
LABEL_235:
    re::internal::assertLog((re::internal *)4, v81, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
    _os_crash();
    __break(1u);
LABEL_236:
    re::internal::assertLog((re::internal *)5, v81, "assertion failure: '%s' (%s:line %i) Invalid Deformation Execution Mode: %u", "!\"Unreachable code\"", "processDeformationPasses", 747, v113);
    _os_crash();
    __break(1u);
  }
LABEL_213:
  re::FixedArray<re::DeformationVertexBufferState>::deinit(&v201);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v204);
  if (v167)
  {
    if (*((void *)v167 + 19))
    {
      uint64_t v161 = mach_absolute_time();
      uint64_t v162 = (int64x2_t *)*((void *)v167 + 19);
      if (v162)
      {
        unint64_t v163 = v162[464].u64[0];
        if (v163 >= v161 - (unint64_t)v166) {
          unint64_t v163 = v161 - (void)v166;
        }
        v162[464].i64[0] = v163;
        unint64_t v164 = v162[464].u64[1];
        if (v164 <= v161 - (unint64_t)v166) {
          unint64_t v164 = v161 - (void)v166;
        }
        v162[464].i64[1] = v164;
        int64x2_t v165 = vdupq_n_s64(1uLL);
        v165.i64[0] = v161 - (void)v166;
        v162[465] = vaddq_s64(v162[465], v165);
        *((unsigned char *)v167 + 184) = 0;
      }
    }
  }
}

unint64_t re::anonymous namespace'::calculateDeformerInputHash(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  unint64_t v5 = 0xBF58476D1CE4E5B9 * (*(void *)(a2 + 40 * a1) ^ (*(void *)(a2 + 40 * a1) >> 30));
  unint64_t v6 = (((unint64_t)a1 << 6)
      + ((unint64_t)a1 >> 2)
      - 0x61C8864680B583E9
      + ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31))) ^ a1;
  unint64_t v7 = *(void *)(a3 + 8 * a1 + 24);
  unint64_t v8 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) >> 27));
  unint64_t v9 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * *(unsigned __int8 *)(a3 + a1)) ^ ((0xBF58476D1CE4E5B9 * *(unsigned __int8 *)(a3 + a1)) >> 27));
  unint64_t v10 = ((v6 << 6)
       + (v6 >> 2)
       + (((v9 ^ (v9 >> 31)) + ((v8 ^ (v8 >> 31)) << 6) + ((v8 ^ (v8 >> 31)) >> 2) - 0x61C8864680B583E9) ^ v8 ^ (v8 >> 31))
       - 0x61C8864680B583E9) ^ v6;
  unint64_t v11 = *a5 & a4;
  if (v11)
  {
    unint64_t v13 = __clz(__rbit64(v11));
    uint64_t v14 = a5 + 7;
    while (1)
    {
      unsigned __int8 v19 = v13;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)a5, v13);
      uint64_t v15 = a5[8]
          + 32
          * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v14, &v19);
      uint64_t v16 = *(unsigned int *)(v15 + 16);
      unint64_t v17 = (unint64_t)objc_msgSend(*(id *)(v15 + 24), sel_hash);
      v10 ^= (v10 << 6)
           - 0x61C8864680B583E9
           + (v10 >> 2)
           + ((v16 - 0x61C8864680B583E9 + (v17 << 6) + (v17 >> 2)) ^ v17);
      if (v13 == 63 || (v11 & (-2 << v13)) == 0) {
        break;
      }
      unint64_t v13 = __clz(__rbit64(v11 & (-2 << v13)));
    }
  }
  return v10;
}

uint64_t *re::anonymous namespace'::lockInputIOSurfacesForDeformationParameters(uint64_t *result, re::DeformationVertexBufferState::LockedSurfaces *a2)
{
  uint64_t v22 = *(void *)(*result + 48);
  if (v22)
  {
    unint64_t v3 = result;
    unint64_t v4 = 0;
    long long v20 = result;
    uint64_t v21 = *result + 8;
    while (1)
    {
      uint64_t v5 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v21, v4);
      unint64_t v6 = *(void *)(v5 + 8);
      uint64_t result = (uint64_t *)re::BucketArray<re::ActiveDeformation,8ul>::operator[](v3[1], v6);
      unint64_t v8 = *(unsigned __int8 *)(v5 + 16);
      unint64_t v9 = result[42];
      if (v9 <= v8) {
        break;
      }
      unint64_t v10 = v3[6];
      if (v10 <= v6) {
        goto LABEL_15;
      }
      uint64_t v11 = v3[5];
      unint64_t v12 = (void *)(v11 + 312 * v6);
      unint64_t v13 = *(void *)(result[41] + (v8 << 6) + 8) & *v12;
      if (v13)
      {
        unint64_t v14 = __clz(__rbit64(v13));
        unint64_t v15 = v11 + 312 * v6;
        uint64_t v16 = (void *)(v15 + 56);
        unint64_t v17 = (void *)(v15 + 64);
        while (1)
        {
          unsigned __int8 v23 = v14;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v12, v14);
          uint64_t v18 = *v17
              + 32
              * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v16, &v23);
          uint64_t result = (uint64_t *)re::DeformationVertexBufferState::LockedSurfaces::ensureIOSurfaceLocked(a2, *(Buffer **)(v18 + 24));
          if (result)
          {
            uint64_t v19 = *(void *)(v18 + 24);
            *(void *)(v18 + 8) = result;
            *(void *)(v18 + 24) = v19;
          }
          if (v14 == 63 || (v13 & (-2 << v14)) == 0) {
            break;
          }
          unint64_t v14 = __clz(__rbit64(v13 & (-2 << v14)));
        }
      }
      ++v4;
      unint64_t v3 = v20;
      if (v4 == v22) {
        return result;
      }
    }
    re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, *(unsigned __int8 *)(v5 + 16), v9);
    _os_crash();
    __break(1u);
LABEL_15:
    re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v6, v10);
    uint64_t result = (uint64_t *)_os_crash();
    __break(1u);
  }
  return result;
}

id ___ZN2re18DeformationManager26enqueueCPUDeformationOnGPUERNS_24DeformationCommandBufferERN2NS9SharedPtrIN3MTL11SharedEventEEERyPNS_8internal23DeformMetalCallbackDataE_block_invoke(uint64_t a1, id a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(v3 + 40);
  if (v4)
  {
    for (unint64_t i = 0; i != v4; ++i)
    {
      unint64_t v6 = *(void *)(v3 + 40);
      if (v6 <= i)
      {
        re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, i, v6);
        _os_crash();
        __break(1u);
LABEL_15:
        long long v16 = 0u;
        long long v17 = 0u;
        long long v14 = 0u;
        long long v15 = 0u;
        long long v13 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (*(void *)(v3 + 8) <= i >> 3) {
        goto LABEL_15;
      }
      uint64_t v7 = v3 + 24;
      if ((*(unsigned char *)(v3 + 16) & 1) == 0) {
        uint64_t v7 = *(void *)(v3 + 32);
      }
      uint64_t v8 = *(void *)(v7 + 8 * (i >> 3));
      unint64_t v9 = (unint64_t *)(v8 + 112 * (i & 7));
      if (v9[2]) {
        re::BufferInitializationOptions::initializeCPUVertexBuffers(v9 + 2, *(void *)(v8 + 112 * (i & 7) + 56), *(void *)(v8 + 112 * (i & 7) + 96), *(void *)(v8 + 112 * (i & 7) + 104));
      }
      uint64_t v10 = v8 + 112 * (i & 7);
      uint64_t v11 = v10 + 56;
      if (*(unsigned char *)(v3 + 64))
      {
        LODWORD(v15) = 0;
        long long v13 = 0u;
        long long v14 = 0u;
        *(void *)((char *)&v15 + 4) = 0x7FFFFFFFLL;
        (*(void (**)(unint64_t, void, uint64_t))(*(void *)*v9 + 56))(*v9, *(void *)(v8 + 112 * (i & 7) + 8), v11);
        re::DeformationVertexBufferState::LockedSurfaces::unlockAll((re::DeformationVertexBufferState::LockedSurfaces *)&v13);
        re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v13);
      }
      else
      {
        (*(void (**)(unint64_t, void, uint64_t))(*(void *)*v9 + 56))(*v9, *(void *)(v8 + 112 * (i & 7) + 8), v10 + 56);
      }
    }
  }
  return objc_msgSend(a2, sel_setSignaledValue_, *(void *)(v3 + 56));
}

void re::internal::Callable<re::DeformationManager::removeDeformationStack(re::DataArrayHandle<re::DeformationStack>)::$_0,void ()(void *)>::~Callable()
{
}

unsigned __int8 *re::internal::Callable<re::DeformationManager::removeDeformationStack(re::DataArrayHandle<re::DeformationStack>)::$_0,void ()(void *)>::operator()(uint64_t a1, uint64_t **a2)
{
  unint64_t v2 = (unint64_t *)*a2;
  uint64_t result = (unsigned __int8 *)re::DataArray<re::DeformationStack>::tryGet((*a2)[1], **a2);
  if (result)
  {
    uint64_t v4 = result;
    if (*result)
    {
      unint64_t v5 = 0;
      uint64_t v6 = 48;
      do
      {
        uint64_t v7 = *(void *)(v2[2] + 40 * *(unsigned int *)&v4[4 * v5 + 4]);
        (*(void (**)(uint64_t, void))(*(void *)v7 + 32))(v7, *(void *)&v4[v6]);
        ++v5;
        v6 += 64;
      }
      while (v5 < *v4);
    }
    unint64_t v9 = *v2;
    uint64_t v8 = v2[1];
    return (unsigned __int8 *)re::DataArray<re::DeformationStack>::destroy(v8, v9);
  }
  return result;
}

void *re::internal::Callable<re::DeformationManager::removeDeformationStack(re::DataArrayHandle<re::DeformationStack>)::$_0,void ()(void *)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E713848;
  return result;
}

void *re::internal::Callable<re::DeformationManager::removeDeformationStack(re::DataArrayHandle<re::DeformationStack>)::$_0,void ()(void *)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E713848;
  return result;
}

uint64_t re::internal::Callable<re::DeformationManager::removeDeformationStack(re::DataArrayHandle<re::DeformationStack>)::$_0,void ()(void *)>::size()
{
  return 16;
}

uint64_t re::ActiveDeformationData::ActiveDeformationData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 1;
  *(void *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  re::BucketArray<re::ActiveDeformation,8ul>::init(a1 + 8, a3, 1uLL);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 64) = a3;
  re::DynamicArray<re::RigJoint>::setCapacity((void *)(a1 + 64), 8uLL);
  ++*(_DWORD *)(a1 + 88);
  return a1;
}

void *re::BucketArray<re::ActiveDeformation,8ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  uint64_t result = re::BucketArray<re::ActiveDeformation,8ul>::setBucketsCapacity((void *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<re::ActiveDeformation,8ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 8 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        unint64_t v5 = v3 + 3;
        do
        {
          uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 3200, 0);
          uint64_t v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_24;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_20;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_20:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_24:
          long long v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            long long v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

void re::internal::Callable<re::DeformationManager::createActiveDeformationData(re::FrameCount,re::PerFrameAllocator *)::$_0,void ()(void *)>::~Callable()
{
}

uint64_t re::internal::Callable<re::DeformationManager::createActiveDeformationData(re::FrameCount,re::PerFrameAllocator *)::$_0,void ()(void *)>::operator()(uint64_t a1, void *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = (void *)(*a2 + 64);
  if (*v3)
  {
    if (*(void *)(v2 + 96)) {
      (*(void (**)(void))(*(void *)*v3 + 40))(*v3);
    }
    *(void *)(v2 + 96) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *uint64_t v3 = 0;
    ++*(_DWORD *)(v2 + 88);
  }
  uint64_t v4 = *(void *)(v2 + 48);
  if (v4)
  {
    for (unint64_t i = 0; i != v4; ++i)
      re::BucketArray<re::ActiveDeformation,8ul>::operator[](v2 + 8, i);
  }
  while (*(void *)(v2 + 16))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)(v2 + 8));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v2 + 8);
  *(void *)(v2 + 48) = 0;
  ++*(_DWORD *)(v2 + 56);
  return re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v2 + 8);
}

void *re::internal::Callable<re::DeformationManager::createActiveDeformationData(re::FrameCount,re::PerFrameAllocator *)::$_0,void ()(void *)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E7138A0;
  return result;
}

void *re::internal::Callable<re::DeformationManager::createActiveDeformationData(re::FrameCount,re::PerFrameAllocator *)::$_0,void ()(void *)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E7138A0;
  return result;
}

uint64_t re::internal::Callable<re::DeformationManager::createActiveDeformationData(re::FrameCount,re::PerFrameAllocator *)::$_0,void ()(void *)>::size()
{
  return 16;
}

void re::internal::Callable<re::DeformationManager::addDeformation(re::MeshDeformation &,re::ActiveDeformationData *)::$_0,void ()(void *)>::~Callable()
{
}

void re::internal::Callable<re::DeformationManager::addDeformation(re::MeshDeformation &,re::ActiveDeformationData *)::$_0,void ()(void *)>::operator()(uint64_t a1, re::AttributeTable **a2)
{
}

void *re::internal::Callable<re::DeformationManager::addDeformation(re::MeshDeformation &,re::ActiveDeformationData *)::$_0,void ()(void *)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E7138F8;
  return result;
}

void *re::internal::Callable<re::DeformationManager::addDeformation(re::MeshDeformation &,re::ActiveDeformationData *)::$_0,void ()(void *)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E7138F8;
  return result;
}

uint64_t re::internal::Callable<re::DeformationManager::addDeformation(re::MeshDeformation &,re::ActiveDeformationData *)::$_0,void ()(void *)>::size()
{
  return 16;
}

_anonymous_namespace_ *re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::copy(_anonymous_namespace_ *result, uint64_t *a2)
{
  uint64_t v2 = result;
  *((void *)result + 5) = 0;
  *((void *)result + 6) = 0;
  unint64_t v3 = *((void *)result + 2);
  *((void *)result + 3) = 0;
  *((void *)result + 4) = v3;
  if (v3 >= 0x10)
  {
    unint64_t v4 = 0;
    *(void *)&long long v5 = -1;
    *((void *)&v5 + 1) = -1;
    do
      *(_OWORD *)(*(void *)result + 16 * v4++) = v5;
    while (v4 < *((void *)result + 2) >> 4);
  }
  v15[0] = a2;
  unint64_t v6 = a2[2];
  if (v6 >= 0x10)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *a2;
    unint64_t v9 = v6 >> 4;
    while (1)
    {
      unsigned __int16 v10 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + v7)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v15[1] = (unsigned __int16)~v10;
      if (v10 != 0xFFFF) {
        break;
      }
      v7 += 16;
      if (!--v9) {
        return result;
      }
    }
    uint64_t v11 = __clz(__rbit64((unsigned __int16)~v10)) + v7;
    for (i = v11; i != -1; uint64_t v11 = i)
    {
      unint64_t v12 = (_OWORD *)(*(void *)(v15[0] + 8) + 32 * v11);
      long long v13 = v12[1];
      v14[0] = *v12;
      v14[1] = v13;
      re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::internalAdd(v2, v14, (uint64_t)v14 + 8);
      uint64_t result = (_anonymous_namespace_ *)re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v15);
    }
  }
  return result;
}

unsigned __int8 *re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::internalAdd(_anonymous_namespace_ *a1, unsigned char *a2, uint64_t a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::resize((uint64_t *)a1, 1);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9;
  unint64_t v9 = 0x94D049BB133111EBLL;
  unint64_t v10 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * *a2) ^ ((0xBF58476D1CE4E5B9 * *a2) >> 27));
  unint64_t v11 = v10 ^ (v10 >> 31);
  unint64_t v12 = v7 >> 4;
  uint64_t v13 = *(void *)a1;
  unint64_t v14 = v11 % v12;
  while (1)
  {
    unint64_t v15 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v13 + 16 * v14)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    if (v15 < 0x40) {
      break;
    }
    if (v14 + 1 == v12) {
      unint64_t v14 = 0;
    }
    else {
      ++v14;
    }
    if (v14 == v11 % v12)
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
      _os_crash();
      __break(1u);
      break;
    }
  }
  uint64_t v16 = v13 + 16 * v14;
  BOOL v17 = *(unsigned __int8 *)(v16 + v15) == 255;
  *(unsigned char *)(v16 + v15) = v11 & 0x7F;
  unint64_t v18 = v15 + 16 * v14;
  *(_OWORD *)&v25[7] = *(_OWORD *)a3;
  *(void *)&unsigned char v25[23] = *(void *)(a3 + 16);
  uint64_t v19 = *((void *)a1 + 1) + 32 * v18;
  *(unsigned char *)uint64_t v19 = *a2;
  *(_OWORD *)(v19 + 1) = *(_OWORD *)v25;
  *(_OWORD *)(v19 + 16) = *(_OWORD *)&v25[15];
  uint64_t v20 = *((void *)a1 + 4) - v17;
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v20;
  uint64_t v21 = (unsigned __int8 *)(*((void *)a1 + 1) + 32 * v18);
  unsigned int v23 = *v21;
  uint64_t result = v21 + 8;
  unint64_t v24 = ((v23 * v8) ^ ((v23 * v8) >> 27)) * v9;
  *((void *)a1 + 5) ^= (v24 >> 31) ^ v24;
  return result;
}

{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *result;
  unsigned int v21;
  unint64_t v22;
  unsigned char v23[31];

  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::resize(a1, 1);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * *a2) ^ ((0xBF58476D1CE4E5B9 * *a2) >> 27));
  unint64_t v9 = v8 ^ (v8 >> 31);
  unint64_t v10 = v7 >> 4;
  unint64_t v11 = v9 % (v7 >> 4);
  unint64_t v12 = *(void *)a1;
  uint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10) {
        unint64_t v11 = 0;
      }
      else {
        ++v11;
      }
      uint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  unint64_t v14 = v12 + 16 * v11;
  unint64_t v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(unsigned char *)(v14 + v13) = v9 & 0x7F;
  uint64_t v16 = v13 + 16 * v11;
  *(_OWORD *)&v23[7] = *(_OWORD *)a3;
  *(void *)&v23[23] = *(void *)(a3 + 16);
  BOOL v17 = *((void *)a1 + 1) + 32 * v16;
  *(unsigned char *)BOOL v17 = *a2;
  *(_OWORD *)(v17 + 1) = *(_OWORD *)v23;
  *(_OWORD *)(v17 + 16) = *(_OWORD *)&v23[15];
  unint64_t v18 = *((void *)a1 + 4) - v15;
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v18;
  uint64_t v19 = (unsigned __int8 *)(*((void *)a1 + 1) + 32 * v16);
  uint64_t v21 = *v19;
  uint64_t result = v19 + 8;
  uint64_t v22 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v21) ^ ((0xBF58476D1CE4E5B9 * v21) >> 27));
  *((void *)a1 + 5) ^= (v22 >> 31) ^ v22;
  return result;
}

uint64_t re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = a1[3] + a2;
  unint64_t v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    unint64_t v5 = 3 * v2;
    unint64_t v6 = v5 << 6;
    uint64_t v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7) {
      unint64_t v4 = v7;
    }
    unint64_t v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::doResize(a1, v3);
}

void *re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::init(void *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result;
  result[7] = a2;
  unint64_t v4 = 151 * a3;
  unint64_t v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    unint64_t v6 = v5 >> 4;
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 33 * (v5 & 0x3FFFFFFFFFFFFF0), 16);
    *unint64_t v3 = result;
    if (v4 >= 0x80)
    {
      uint64_t v7 = 0;
      *(void *)&long long v8 = -1;
      *((void *)&v8 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v7++) = v8;
      while (v6 != v7);
      uint64_t result = (void *)*v3;
    }
    v3[1] = &result[2 * v6];
    unint64_t v9 = v3[2];
    if (v9)
    {
      uint64_t v10 = 0;
      for (unint64_t i = 0; i < v9; ++i)
      {
        uint64_t v12 = v3[1] + v10;
        *(unsigned char *)uint64_t v12 = 0;
        *(void *)(v12 + 16) = 0;
        *(void *)(v12 + 24) = 0;
        *(void *)(v12 + 8) = 0;
        unint64_t v9 = v3[2];
        v10 += 32;
      }
    }
  }
  else
  {
    unint64_t v9 = 0;
    unsigned __int8 *result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v9;
  return result;
}

uint64_t re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[7];
  memset(v22, 0, sizeof(v22));
  re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::init(v22, v4, a2);
  v20[0] = a1;
  unint64_t v5 = a1[2];
  if (v5 >= 0x10)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a1;
    unint64_t v8 = v5 >> 4;
    while (1)
    {
      unsigned __int16 v9 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v7 + v6)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v20[1] = (unsigned __int16)~v9;
      if (v9 != 0xFFFF) {
        break;
      }
      v6 += 16;
      if (!--v8) {
        goto LABEL_9;
      }
    }
    uint64_t v10 = __clz(__rbit64((unsigned __int16)~v9)) + v6;
    uint64_t v21 = v10;
    if (v10 != -1)
    {
      do
      {
        re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::internalAdd((_anonymous_namespace_ *)v22, (unsigned char *)(*(void *)(v20[0] + 8) + 32 * v10), *(void *)(v20[0] + 8) + 32 * v10 + 8);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v20);
        uint64_t v10 = v21;
      }
      while (v21 != -1);
      unint64_t v5 = a1[2];
    }
  }
LABEL_9:
  uint64_t v12 = *((void *)&v22[3] + 1);
  *((void *)&v22[3] + 1) = a1[7];
  uint64_t result = *((void *)&v22[3] + 1);
  long long v13 = v22[0];
  long long v14 = v22[1];
  *(void *)&v22[1] = v5;
  uint64_t v15 = *a1;
  uint64_t v16 = a1[1];
  *(void *)&v22[0] = *a1;
  *((void *)&v22[0] + 1) = v16;
  long long v17 = v22[2];
  long long v18 = *(_OWORD *)(a1 + 5);
  a1[6] = *(void *)&v22[3];
  a1[7] = v12;
  *(_OWORD *)((char *)&v22[2] + 8) = v18;
  long long v19 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v13;
  *((_OWORD *)a1 + 1) = v14;
  *((_OWORD *)a1 + 2) = v17;
  *(_OWORD *)((char *)&v22[1] + 8) = v19;
  if (result)
  {
    if (v16) {
      *((void *)&v22[0] + 1) = 0;
    }
    if (v15) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
    }
  }
  return result;
}

_anonymous_namespace_ *re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::copy(_anonymous_namespace_ *result, uint64_t *a2)
{
  unint64_t v2 = result;
  *((void *)result + 5) = 0;
  *((void *)result + 6) = 0;
  unint64_t v3 = *((void *)result + 2);
  *((void *)result + 3) = 0;
  *((void *)result + 4) = v3;
  if (v3 >= 0x10)
  {
    unint64_t v4 = 0;
    *(void *)&long long v5 = -1;
    *((void *)&v5 + 1) = -1;
    do
      *(_OWORD *)(*(void *)result + 16 * v4++) = v5;
    while (v4 < *((void *)result + 2) >> 4);
  }
  v19[0] = a2;
  unint64_t v6 = a2[2];
  if (v6 >= 0x10)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *a2;
    unint64_t v9 = v6 >> 4;
    while (1)
    {
      unsigned __int16 v10 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + v7)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v19[1] = (unsigned __int16)~v10;
      if (v10 != 0xFFFF) {
        break;
      }
      v7 += 16;
      if (!--v9) {
        return result;
      }
    }
    uint64_t v11 = __clz(__rbit64((unsigned __int16)~v10)) + v7;
    for (i = v11; i != -1; uint64_t v11 = i)
    {
      uint64_t v12 = *(void *)(v19[0] + 8) + 20 * v11;
      v14[0] = *(unsigned char *)v12;
      int v13 = *(_DWORD *)(v12 + 4);
      __int16 v16 = *(_WORD *)(v12 + 8);
      int v15 = v13;
      int v17 = *(_DWORD *)(v12 + 12);
      char v18 = *(unsigned char *)(v12 + 16);
      re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::internalAdd(v2, v14, &v15);
      uint64_t result = (_anonymous_namespace_ *)re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v19);
    }
  }
  return result;
}

unsigned __int8 *re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::internalAdd(_anonymous_namespace_ *a1, unsigned char *a2, int *a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::resize((uint64_t *)a1, 1);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9;
  unint64_t v9 = 0x94D049BB133111EBLL;
  unint64_t v10 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * *a2) ^ ((0xBF58476D1CE4E5B9 * *a2) >> 27));
  unint64_t v11 = v10 ^ (v10 >> 31);
  unint64_t v12 = v7 >> 4;
  uint64_t v13 = *(void *)a1;
  unint64_t v14 = v11 % v12;
  while (1)
  {
    unint64_t v15 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v13 + 16 * v14)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    if (v15 <= 0x3F) {
      break;
    }
    if (v14 + 1 == v12) {
      unint64_t v14 = 0;
    }
    else {
      ++v14;
    }
    if (v14 == v11 % v12)
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
      _os_crash();
      __break(1u);
      break;
    }
  }
  uint64_t v16 = v13 + 16 * v14;
  int v17 = *(unsigned __int8 *)(v16 + v15);
  *(unsigned char *)(v16 + v15) = v11 & 0x7F;
  unint64_t v18 = v15 + 16 * v14;
  int v19 = *a3;
  __int16 v20 = *((_WORD *)a3 + 2);
  int v21 = a3[2];
  char v22 = *((unsigned char *)a3 + 12);
  v18 *= 5;
  uint64_t v23 = *((void *)a1 + 1) + 4 * v18;
  *(unsigned char *)uint64_t v23 = *a2;
  *(_WORD *)(v23 + 8) = v20;
  *(_DWORD *)(v23 + 4) = v19;
  *(_DWORD *)(v23 + 12) = v21;
  *(unsigned char *)(v23 + 16) = v22;
  uint64_t v24 = *((void *)a1 + 4);
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v24 - (v17 == 255);
  uint64_t v25 = (unsigned __int8 *)(*((void *)a1 + 1) + 4 * v18);
  unsigned int v27 = *v25;
  uint64_t result = v25 + 4;
  unint64_t v28 = ((v27 * v8) ^ ((v27 * v8) >> 27)) * v9;
  *((void *)a1 + 5) ^= (v28 >> 31) ^ v28;
  return result;
}

uint64_t re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = a1[3] + a2;
  unint64_t v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    unint64_t v5 = 3 * v2;
    unint64_t v6 = v5 << 6;
    uint64_t v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7) {
      unint64_t v4 = v7;
    }
    unint64_t v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::doResize(a1, v3);
}

void *re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::init(void *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result;
  result[7] = a2;
  unint64_t v4 = 151 * a3;
  unint64_t v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  uint64_t v6 = v5 & 0x3FFFFFFFFFFFFF0;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    unint64_t v7 = v5 >> 4;
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 21 * v6, 16);
    *unint64_t v3 = result;
    if (v4 >= 0x80)
    {
      uint64_t v8 = 0;
      *(void *)&long long v9 = -1;
      *((void *)&v9 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v8++) = v9;
      while (v7 != v8);
      uint64_t result = (void *)*v3;
    }
    unint64_t v10 = &result[2 * v7];
    v3[1] = v10;
    uint64_t v6 = v3[2];
    if (v6)
    {
      unint64_t v11 = (char *)v10 + 9;
      uint64_t v12 = v3[2];
      do
      {
        *(v11 - 9) = 0;
        *(_DWORD *)(v11 - 5) = 0x10000;
        *(_WORD *)(v11 - 1) = 256;
        v11 += 20;
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    unsigned __int8 *result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v6;
  return result;
}

uint64_t re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[7];
  memset(v24, 0, sizeof(v24));
  re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::init(v24, v4, a2);
  v22[0] = a1;
  unint64_t v6 = a1[2];
  if (v6 >= 0x10)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *a1;
    unint64_t v9 = v6 >> 4;
    __n128 v10 = (__n128)xmmword_2343680E0;
    v5.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      unsigned __int16 v11 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + v7)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v22[1] = (unsigned __int16)~v11;
      if (v11 != 0xFFFF) {
        break;
      }
      v7 += 16;
      if (!--v9) {
        goto LABEL_9;
      }
    }
    uint64_t v12 = __clz(__rbit64((unsigned __int16)~v11)) + v7;
    uint64_t v23 = v12;
    if (v12 != -1)
    {
      do
      {
        re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::internalAdd(v24, *(void *)(v22[0] + 8) + 20 * v12, *(void *)(v22[0] + 8) + 20 * v12 + 4, v10, v5);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v22);
        uint64_t v12 = v23;
      }
      while (v23 != -1);
      unint64_t v6 = a1[2];
    }
  }
LABEL_9:
  uint64_t v14 = *((void *)&v24[3] + 1);
  *((void *)&v24[3] + 1) = a1[7];
  uint64_t result = *((void *)&v24[3] + 1);
  long long v15 = v24[0];
  long long v16 = v24[1];
  *(void *)&v24[1] = v6;
  uint64_t v17 = *a1;
  uint64_t v18 = a1[1];
  *(void *)&v24[0] = *a1;
  *((void *)&v24[0] + 1) = v18;
  long long v19 = v24[2];
  long long v20 = *(_OWORD *)(a1 + 5);
  a1[6] = *(void *)&v24[3];
  a1[7] = v14;
  *(_OWORD *)((char *)&v24[2] + 8) = v20;
  long long v21 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v15;
  *((_OWORD *)a1 + 1) = v16;
  *((_OWORD *)a1 + 2) = v19;
  *(_OWORD *)((char *)&v24[1] + 8) = v21;
  if (result)
  {
    if (v18) {
      *((void *)&v24[0] + 1) = 0;
    }
    if (v17) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
    }
  }
  return result;
}

unsigned __int8 *re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::internalAdd(_anonymous_namespace_ *a1, unsigned char *a2, uint64_t a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::resize((uint64_t *)a1, 1);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * *a2) ^ ((0xBF58476D1CE4E5B9 * *a2) >> 27));
  unint64_t v9 = v8 ^ (v8 >> 31);
  unint64_t v10 = v7 >> 4;
  unint64_t v11 = v9 % (v7 >> 4);
  uint64_t v12 = *(void *)a1;
  unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10) {
        unint64_t v11 = 0;
      }
      else {
        ++v11;
      }
      unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  uint64_t v14 = v12 + 16 * v11;
  int v15 = *(unsigned __int8 *)(v14 + v13);
  *(unsigned char *)(v14 + v13) = v9 & 0x7F;
  unint64_t v16 = v13 + 16 * v11;
  LODWORD(v14) = *(_DWORD *)a3;
  __int16 v17 = *(_WORD *)(a3 + 4);
  int v18 = *(_DWORD *)(a3 + 8);
  char v19 = *(unsigned char *)(a3 + 12);
  v16 *= 5;
  uint64_t v20 = *((void *)a1 + 1) + 4 * v16;
  *(unsigned char *)uint64_t v20 = *a2;
  *(_WORD *)(v20 + 8) = v17;
  *(_DWORD *)(v20 + 4) = v14;
  *(_DWORD *)(v20 + 12) = v18;
  *(unsigned char *)(v20 + 16) = v19;
  BOOL v21 = v15 == 255;
  uint64_t v22 = *((void *)a1 + 4);
  ++*((void *)a1 + 3);
  *((void *)a1 + 4) = v22 - v21;
  uint64_t v23 = (unsigned __int8 *)(*((void *)a1 + 1) + 4 * v16);
  unsigned int v25 = *v23;
  uint64_t result = v23 + 4;
  unint64_t v26 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v25) ^ ((0xBF58476D1CE4E5B9 * v25) >> 27));
  *((void *)a1 + 5) ^= (v26 >> 31) ^ v26;
  return result;
}

void re::DeformationVertexBufferState::~DeformationVertexBufferState(re::DeformationVertexBufferState *this)
{
}

void re::internal::Callable<re::DeformationManager::processDeformationPasses(re::ActiveDeformationData *,re::MutableSlice<re::DeformationVertexBufferState>,re::FrameContext &)::$_0,void ()(void *)>::~Callable()
{
}

uint64_t re::internal::Callable<re::DeformationManager::processDeformationPasses(re::ActiveDeformationData *,re::MutableSlice<re::DeformationVertexBufferState>,re::FrameContext &)::$_0,void ()(void *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  for (uint64_t i = 928; i != 64; i -= 48)
    re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(v2 + i));
  uint64_t v4 = *(void *)(v2 + 96);
  if (v4)
  {
    for (unint64_t j = 0; j != v4; ++j)
      re::BucketArray<unsigned char,8ul>::operator[](v2 + 56, j);
  }
  while (*(void *)(v2 + 64))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)(v2 + 56));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v2 + 56);
  *(void *)(v2 + 96) = 0;
  ++*(_DWORD *)(v2 + 104);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v2 + 56);
  uint64_t v6 = *(void *)(v2 + 40);
  if (v6)
  {
    unint64_t v7 = 0;
    while (1)
    {
      unint64_t v8 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v2, v7);
      uint64_t v9 = *(void *)(v8 + 40);
      if (v9) {
        break;
      }
LABEL_23:
      while (*(void *)(v8 + 8))
        re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)v8);
      re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v8);
      *(void *)(v8 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      ++*(_DWORD *)(v8 + 48);
      re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v8);
      if (++v7 == v6) {
        goto LABEL_27;
      }
    }
    unint64_t v10 = 0;
    while (1)
    {
      unint64_t v11 = re::BucketArray<re::BatchedDeformationInstances,64ul>::operator[](v8, v10);
      uint64_t v12 = (uint64_t *)(v11 + 8);
      uint64_t v13 = *(void *)(v11 + 48);
      unint64_t v14 = *(void *)(v11 + 16);
      if (v13) {
        break;
      }
      if (v14) {
        goto LABEL_19;
      }
LABEL_20:
      re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)v12);
      *(void *)(v11 + 48) = 0;
      ++*(_DWORD *)(v11 + 56);
      re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)v12);
      if (++v10 == v9) {
        goto LABEL_23;
      }
    }
    for (unint64_t k = 0; k != v13; ++k)
    {
      if (v14 <= k >> 6)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
    do
LABEL_19:
      re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v12);
    while (*(void *)(v11 + 16));
    goto LABEL_20;
  }
LABEL_27:
  while (*(void *)(v2 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)v2);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v2);
  *(void *)(v2 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  ++*(_DWORD *)(v2 + 48);
  return re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v2);
}

void *re::internal::Callable<re::DeformationManager::processDeformationPasses(re::ActiveDeformationData *,re::MutableSlice<re::DeformationVertexBufferState>,re::FrameContext &)::$_0,void ()(void *)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E713950;
  return result;
}

void *re::internal::Callable<re::DeformationManager::processDeformationPasses(re::ActiveDeformationData *,re::MutableSlice<re::DeformationVertexBufferState>,re::FrameContext &)::$_0,void ()(void *)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E713950;
  return result;
}

uint64_t re::internal::Callable<re::DeformationManager::processDeformationPasses(re::ActiveDeformationData *,re::MutableSlice<re::DeformationVertexBufferState>,re::FrameContext &)::$_0,void ()(void *)>::size()
{
  return 16;
}

void re::internal::Callable<re::DeformationManager::processDeformationPasses(re::ActiveDeformationData *,re::MutableSlice<re::DeformationVertexBufferState>,re::FrameContext &)::$_1,void ()(void *)>::~Callable()
{
}

void *re::internal::Callable<re::DeformationManager::processDeformationPasses(re::ActiveDeformationData *,re::MutableSlice<re::DeformationVertexBufferState>,re::FrameContext &)::$_1,void ()(void *)>::operator()(uint64_t a1, void **a2)
{
  return re::FixedArray<re::DeformationVertexBufferState>::deinit(*a2);
}

void *re::internal::Callable<re::DeformationManager::processDeformationPasses(re::ActiveDeformationData *,re::MutableSlice<re::DeformationVertexBufferState>,re::FrameContext &)::$_1,void ()(void *)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E7139A8;
  return result;
}

void *re::internal::Callable<re::DeformationManager::processDeformationPasses(re::ActiveDeformationData *,re::MutableSlice<re::DeformationVertexBufferState>,re::FrameContext &)::$_1,void ()(void *)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t result = a2;
  *a2 = &unk_26E7139A8;
  return result;
}

uint64_t re::internal::Callable<re::DeformationManager::processDeformationPasses(re::ActiveDeformationData *,re::MutableSlice<re::DeformationVertexBufferState>,re::FrameContext &)::$_1,void ()(void *)>::size()
{
  return 16;
}

void re::DataArray<re::DeformationStack>::allocBlock(unsigned int *a1)
{
  uint64_t v2 = 1032 * a1[11];
  v5.n128_u64[0] = (*(uint64_t (**)(void, uint64_t, void))(**(void **)a1 + 32))(*(void *)a1, v2, 0);
  if (v5.n128_u64[0])
  {
    uint64_t v2 = 4 * a1[11];
    v5.n128_u64[1] = (*(uint64_t (**)(void, uint64_t, void))(**(void **)a1 + 32))(*(void *)a1, v2, 0);
    if (v5.n128_u64[1])
    {
      re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)a1, &v5);
      a1[12] = 0;
      return;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)6, v3, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.elements", "allocBlock", 520, v2, *(void *)(*(void *)a1 + 8), 0);
    _os_crash();
    __break(1u);
  }
  re::internal::assertLog((re::internal *)6, v4, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.allocationCounters", "allocBlock", 528, v2, *(void *)(*(void *)a1 + 8));
  _os_crash();
  __break(1u);
}

void re::FixedArray<re::DeformationVertexBufferState>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  if (!a3) {
    return;
  }
  if (a3 >= 0xD20D20D20D20D3)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 312, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v5 = 312 * a3;
  uint64_t v6 = (char *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 312 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  unint64_t v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 312);
    v8 += v5 - 312;
  }
  *((void *)v8 + 38) = 0;
  *((_OWORD *)v8 + 17) = 0u;
  *((_OWORD *)v8 + 18) = 0u;
  *((_OWORD *)v8 + 15) = 0u;
  *((_OWORD *)v8 + 16) = 0u;
  *((_OWORD *)v8 + 13) = 0u;
  *((_OWORD *)v8 + 14) = 0u;
  *((_OWORD *)v8 + 11) = 0u;
  *((_OWORD *)v8 + 12) = 0u;
  *((_OWORD *)v8 + 9) = 0u;
  *((_OWORD *)v8 + 1ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *((_OWORD *)v8 + 7) = 0u;
  *((_OWORD *)v8 + 8) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *(_OWORD *)unint64_t v8 = 0u;
}

void *re::FixedArray<re::DeformationVertexBufferState>::deinit(void *result)
{
  if (*result)
  {
    uint64_t v1 = result;
    uint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      uint64_t v4 = (re::DeformationVertexBufferState *)result[2];
      uint64_t v5 = 312 * v2;
      do
      {
        re::DeformationVertexBufferState::~DeformationVertexBufferState(v4);
        uint64_t v4 = (re::DeformationVertexBufferState *)(v6 + 312);
        v5 -= 312;
      }
      while (v5);
      uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v1 + 40))(*v1, v1[2]);
      *uint64_t v3 = 0;
      v3[1] = 0;
    }
    void *v1 = 0;
  }
  return result;
}

uint64_t re::BucketArray<re::DynamicArray<re::PostDeformationBlit>,8ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > 8 * v3)
  {
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 3));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 40 * (v2 & 7);
}

void re::DynamicInlineArray<re::KeyValuePair<MTL::Event *,re::EventWait>,8ul>::clear(uint64_t a1)
{
  if (*(void *)a1)
  {
    uint64_t v2 = 24 * *(void *)a1;
    unint64_t v3 = (id *)(a1 + 24);
    do
    {
      if (*v3)
      {

        *unint64_t v3 = 0;
      }
      v3 += 3;
      v2 -= 24;
    }
    while (v2);
  }
  *(void *)a1 = 0;
  ++*(_DWORD *)(a1 + 8);
}

uint64_t re::HashTable<MTL::Event *,re::EventWait,re::Hash<MTL::Event *>,re::EqualTo<MTL::Event *>,false,false>::add(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (*(void *)a1)
  {
    unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
    uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v11 = *(void *)(a1 + 16);
      if (*(void *)(v11 + 32 * v10 + 8) == v6)
      {
LABEL_6:
        uint64_t v12 = v11 + 32 * v10;
        return v12 + 16;
      }
      while (1)
      {
        uint64_t v10 = *(_DWORD *)(v11 + 32 * v10) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v11 + 32 * v10 + 8) == v6) {
          goto LABEL_6;
        }
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  uint64_t v13 = *(unsigned int *)(a1 + 36);
  if (v13 == 0x7FFFFFFF)
  {
    uint64_t v13 = *(unsigned int *)(a1 + 32);
    int v14 = v13;
    if (v13 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<MTL::Event *,re::EventWait,re::Hash<MTL::Event *>,re::EqualTo<MTL::Event *>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
      int v14 = *(_DWORD *)(a1 + 32);
      uint64_t v6 = *a2;
    }
    *(_DWORD *)(a1 + 32) = v14 + 1;
    uint64_t v15 = *(void *)(a1 + 16);
    int v16 = *(_DWORD *)(v15 + 32 * v13);
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 16);
    int v16 = *(_DWORD *)(v15 + 32 * v13);
    *(_DWORD *)(a1 + 36) = v16 & 0x7FFFFFFF;
  }
  uint64_t v17 = 32 * v13;
  *(_DWORD *)(v15 + v17) = v16 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v17) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v13) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v9);
  *(void *)(*(void *)(a1 + 16) + 32 * v13 + 8) = v6;
  uint64_t v18 = *(void *)(a1 + 16) + 32 * v13;
  id v19 = *(id *)a3;
  uint64_t v20 = *(void *)(a3 + 8);
  *(void *)(v18 + 16) = v19;
  *(void *)(v18 + 24) = v20;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * v9) = v13;
  ++*(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 16) + 32 * v13;
  return v12 + 16;
}

void re::HashTable<MTL::Event *,re::EventWait,re::Hash<MTL::Event *>,re::EqualTo<MTL::Event *>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(void *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v15, v4, a2);
      long long v5 = *(_OWORD *)v15;
      *(_OWORD *)uint64_t v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v15[16];
      uint64_t v7 = *(void *)(a1 + 16);
      *(void *)&unsigned char v15[16] = v7;
      *(void *)(a1 + 16) = v6;
      long long v9 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        uint64_t v11 = (void *)(v7 + 8);
        do
        {
          if ((*(_DWORD *)(v11 - 1) & 0x80000000) != 0)
          {
            unint64_t v12 = 0xBF58476D1CE4E5B9 * (*v11 ^ (*v11 >> 30));
            unint64_t v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<MTL::Event *,re::EventWait,re::Hash<MTL::Event *>,re::EqualTo<MTL::Event *>,false,false>::addAsMove(a1, v13 % *(unsigned int *)(a1 + 24), v13, v11, v11 + 1);
          }
          v11 += 4;
          --v10;
        }
        while (v10);
      }
      re::HashTable<unsigned long long,re::BufferSlice,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2) {
      signed int v14 = a2;
    }
    else {
      signed int v14 = 3;
    }
  }
}

uint64_t re::HashTable<MTL::Event *,re::EventWait,re::Hash<MTL::Event *>,re::EqualTo<MTL::Event *>,false,false>::addAsMove(uint64_t result, unsigned int a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v7 = result;
  uint64_t v8 = *(unsigned int *)(result + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(result + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(result + 24))
    {
      uint64_t result = re::HashTable<MTL::Event *,re::EventWait,re::Hash<MTL::Event *>,re::EqualTo<MTL::Event *>,false,false>::setCapacity(result, (2 * *(_DWORD *)(result + 28)));
      a2 = a3 % *(unsigned int *)(v7 + 24);
      int v9 = *(_DWORD *)(v7 + 32);
    }
    *(_DWORD *)(v7 + 32) = v9 + 1;
    uint64_t v11 = *(void *)(v7 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v8);
  }
  else
  {
    uint64_t v11 = *(void *)(result + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v8);
    *(_DWORD *)(result + 36) = v12 & 0x7FFFFFFF;
  }
  uint64_t v13 = 32 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(v7 + 16) + v13) = *(_DWORD *)(*(void *)(v7 + 16) + 32 * v8) & 0x80000000 | *(_DWORD *)(*(void *)(v7 + 8) + 4 * a2);
  *(void *)(*(void *)(v7 + 16) + 32 * v8 + 8) = *a4;
  uint64_t v14 = *(void *)(v7 + 8);
  uint64_t v15 = *(void *)(v7 + 16) + 32 * v8;
  uint64_t v16 = a5[1];
  *(void *)(v15 + 16) = *a5;
  *a5 = 0;
  *(void *)(v15 + 24) = v16;
  *(_DWORD *)(v14 + 4 * a2) = v8;
  ++*(_DWORD *)(v7 + 28);
  return result;
}

void *re::BucketArray<re::internal::DeformationCallbackData,8ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  uint64_t result = re::BucketArray<re::internal::DeformationCallbackData,8ul>::setBucketsCapacity((void *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<re::internal::DeformationCallbackData,8ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  unint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 8 * a2)
    {
      unint64_t v4 = result[1];
      if (v4 > a2)
      {
        int v5 = *((_DWORD *)result + 4);
        do
        {
          uint64_t v6 = v3 + 3;
          if ((v5 & 1) == 0) {
            uint64_t v6 = (void *)v3[4];
          }
          uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v3 + 40))(*v3, v6[v4 - 1]);
          int v7 = *((_DWORD *)v3 + 4);
          unint64_t v4 = v3[1] - 1;
          v3[1] = v4;
          int v5 = v7 + 2;
          *((_DWORD *)v3 + 4) = v5;
        }
        while (v4 > a2);
      }
      if (v4 < a2)
      {
        uint64_t v8 = v3 + 3;
        do
        {
          uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 896, 0);
          int v9 = result;
          if (*v3)
          {
            unint64_t v10 = v3[1];
            int v11 = *((_DWORD *)v3 + 4);
            if ((v11 & 1) == 0)
            {
              unint64_t v12 = *v8;
              BOOL v14 = v10 >= *v8;
              unint64_t v13 = v10 + 1;
              BOOL v14 = !v14 || v12 >= v13;
              if (v14) {
                goto LABEL_24;
              }
              unint64_t v15 = 2 * v12;
              goto LABEL_20;
            }
            unint64_t v13 = v10 + 1;
            if (v13 >= 3)
            {
              unint64_t v15 = 4;
LABEL_20:
              if (v15 <= v13) {
                unint64_t v17 = v13;
              }
              else {
                unint64_t v17 = v15;
              }
              uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v17);
              int v11 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v16 = v3[1] + 1;
            uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v16);
            int v11 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v11;
          }
LABEL_24:
          uint64_t v18 = v3 + 3;
          if ((v11 & 1) == 0) {
            uint64_t v18 = (void *)v3[4];
          }
          unint64_t v19 = v3[1];
          v18[v19++] = v9;
          v3[1] = v19;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v19 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

BOOL re::PSOToolManager::init(id *this, re::ns *a2)
{
  re::mtl::makeDefaultDevice(&v23);
  unint64_t v4 = this + 19;
  if (this + 19 != (id *)&v23)
  {
    int v5 = (void *)v23;
    *(void *)&long long v23 = 0;
    uint64_t v6 = *v4;
    *unint64_t v4 = v5;
  }
  [this[19] allowLibrariesFromOtherPlatforms];
  re::mtl::Device::makeLibraryWithFile(this + 19, a2, (re **)&v23);
  int v7 = this + 20;
  if (this + 20 != (id *)&v23)
  {
    uint64_t v8 = (void *)v23;
    *(void *)&long long v23 = 0;
    int v9 = *v7;
    *int v7 = v8;
  }
  unint64_t v10 = *v7;
  if (v10)
  {
    re::MaterialManager::getDefaultVariations((re::MaterialManager *)1, 1, 1, 1u, &v23);
    if (&v23 != (long long *)this)
    {
      long long v11 = v24;
      long long v12 = *(_OWORD *)this;
      long long v13 = *((_OWORD *)this + 1);
      *(_OWORD *)this = v23;
      *((_OWORD *)this + 1) = v11;
      id v15 = this[6];
      id v14 = this[7];
      unint64_t v16 = v27;
      this[6] = v26;
      this[7] = v16;
      unint64_t v26 = v15;
      id v27 = v14;
      long long v23 = v12;
      long long v24 = v13;
      long long v17 = *((_OWORD *)this + 2);
      *((_OWORD *)this + 2) = v25;
      long long v25 = v17;
    }
    re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::deinit((uint64_t)&v23);
    re::createMaterialSystemShaderMetadata((uint64_t)&v23);
    re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=((uint64_t)(this + 21), (uint64_t *)&v23);
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v23);
  }
  else
  {
    uint64_t v18 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"error: could not create metallib from path ", 43);
    size_t v19 = strlen((const char *)a2);
    uint64_t v20 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)a2, v19);
    std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
    BOOL v21 = std::locale::use_facet((const std::locale *)&v23, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
    std::locale::~locale((std::locale *)&v23);
    std::ostream::put();
    std::ostream::flush();
  }
  return v10 != 0;
}

void *std::operator<<[abi:nn180100]<std::char_traits<char>>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v4);
}

void *std::endl[abi:nn180100]<char,std::char_traits<char>>(void *a1)
{
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  uint64_t v2 = std::locale::use_facet(&v4, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

uint64_t re::PSOToolManager::addSearchPath(re::PSOToolManager *this, const char *a2)
{
  unint64_t v3 = (re::PSOToolManager *)((char *)this + 112);
  double v4 = re::DynamicArray<re::DynamicString>::add(v3, &v6);
  uint64_t result = v6;
  if (v6)
  {
    if (v7) {
      return (*(uint64_t (**)(double))(*(void *)v6 + 40))(v4);
    }
  }
  return result;
}

uint64_t re::PSOToolManager::readMaterialDefinitions(uint64_t this)
{
  unsigned int v118 = &unk_26E6CA830;
  uint64_t v1 = *(void *)(this + 128);
  if (!v1) {
    return this;
  }
  uint64_t v2 = this;
  unint64_t v3 = *(const re::DynamicString **)(this + 144);
  long long v68 = (char *)v3 + 32 * v1;
  uint64_t v70 = (void *)(this + 264);
  uint64_t v71 = (void *)(this + 216);
  do
  {
    re::DynamicString::DynamicString((re::DynamicString *)&v115, v3);
    if (v116) {
      double v4 = *(char **)&v117[7];
    }
    else {
      double v4 = v117;
    }
    __p[1] = 0;
    *(void *)&long long v82 = 0;
    __p[0] = 0;
    int v5 = v4 - 1;
    while (*++v5)
      ;
    std::string::append[abi:nn180100]<char const*,0>((std::string *)__p, v4, v5);
    MEMORY[0x237DBC9E0](&v113, __p, 0, 0);
    if (SBYTE7(v82) < 0) {
      operator delete(__p[0]);
    }
    ptr = v113;
    uint64_t v8 = v114;
    long long v69 = v3;
    if (v114)
    {
      atomic_fetch_add_explicit(&v114->__shared_owners_, 1uLL, memory_order_relaxed);
      int v9 = v114;
      v112.__imp_.__ptr_ = ptr;
      v112.__imp_.__cntrl_ = v8;
      if (v114)
      {
        atomic_fetch_add_explicit(&v114->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:nn180100](v9);
        goto LABEL_14;
      }
    }
    else
    {
      v112.__imp_.__ptr_ = v113;
      v112.__imp_.__cntrl_ = 0;
    }
    while (ptr)
    {
      unint64_t v10 = (std::__fs::filesystem::directory_entry *)std::__fs::filesystem::directory_iterator::__dereference(&v112);
      std::__fs::filesystem::path::filename[abi:nn180100](&v10->__p_, (uint64_t)v77);
      if (v77[23] >= 0) {
        long long v12 = v77;
      }
      else {
        long long v12 = *(const char **)v77;
      }
      uint64_t v13 = *(void *)(v2 + 616);
      uint64_t v14 = *(void *)(v2 + 632);
      if (v13)
      {
        uint64_t v15 = 32 * v13;
        uint64_t v16 = *(void *)(v2 + 632);
        while (!re::DynamicString::operator==(v16, (uint64_t)__p))
        {
          v16 += 32;
          v15 -= 32;
          if (!v15)
          {
            uint64_t v16 = v14 + 32 * v13;
            break;
          }
        }
      }
      else
      {
        uint64_t v16 = *(void *)(v2 + 632);
      }
      if (__p[0])
      {
        if ((uint64_t)__p[1]) {
          (*(void (**)(void))(*(void *)__p[0] + 40))();
        }
        *(_OWORD *)__p = 0u;
        long long v82 = 0u;
      }
      if ((v77[23] & 0x80000000) != 0) {
        operator delete(*(void **)v77);
      }
      if ((v16 - v14) >> 5 != v13)
      {
        uint64_t v22 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x263F8C100], (uint64_t)"Excluding ", 10);
        if ((v10->__p_.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unint64_t v10 = (std::__fs::filesystem::directory_entry *)v10->__p_.__pn_.__r_.__value_.__r.__words[0];
        }
        size_t v23 = strlen((const char *)v10);
        long long v24 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)v10, v23);
        std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(*v24 - 24)));
        long long v25 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
        std::locale::~locale((std::locale *)__p);
        std::ostream::put();
        std::ostream::flush();
        goto LABEL_114;
      }
      std::__fs::filesystem::path::extension[abi:nn180100]((uint64_t)__p, &v10->__p_);
      memset(v77, 0, 24);
      std::string::append[abi:nn180100]<char const*,0>((std::string *)v77, ".rematerialdefinition", "");
      if (v77[23] >= 0) {
        v17.__data_ = v77;
      }
      else {
        v17.__data_ = *(const std::string_view::value_type **)v77;
      }
      if (v77[23] >= 0) {
        v17.__size_ = v77[23];
      }
      else {
        v17.__size_ = *(void *)&v77[8];
      }
      int v18 = std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)__p, v17);
      if ((v77[23] & 0x80000000) != 0) {
        operator delete(*(void **)v77);
      }
      if (SBYTE7(v82) < 0) {
        operator delete(__p[0]);
      }
      if (!v18)
      {
        re::MaterialDefinitionFile::MaterialDefinitionFile((re::MaterialDefinitionFile *)__p);
        if ((v10->__p_.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v26 = (re::MaterialDefinitionFile *)v10;
        }
        else {
          unint64_t v26 = (re::MaterialDefinitionFile *)v10->__p_.__pn_.__r_.__value_.__r.__words[0];
        }
        re::compileMaterialDefinitionFile((re *)__p, v26, (re::IntrospectionBase *)&v118, (uint64_t)v78);
        if (!v78[0] && (void)v79)
        {
          if (BYTE8(v79)) {
            (*(void (**)(void))(*(void *)v79 + 40))();
          }
          long long v79 = 0u;
          long long v80 = 0u;
        }
        std::__fs::filesystem::path::filename[abi:nn180100](&v10->__p_, (uint64_t)&v75);
        if (v76 >= 0) {
          locale = (const char *)&v75;
        }
        else {
          locale = (const char *)v75.__locale_;
        }
        unint64_t v29 = re::Hash<re::DynamicString>::operator()((uint64_t)v119, (uint64_t)v77);
        unint64_t v30 = v29;
        if (*v71)
        {
          unint64_t v31 = v29 % *(unsigned int *)(v2 + 240);
          uint64_t v32 = *(unsigned int *)(*(void *)(v2 + 224) + 4 * v31);
          if (v32 != 0x7FFFFFFF)
          {
            uint64_t v33 = *(void *)(v2 + 232);
            while (!re::DynamicString::operator==(v33 + 784 * v32 + 16, (uint64_t)v77))
            {
              uint64_t v32 = *(_DWORD *)(v33 + 784 * v32 + 8) & 0x7FFFFFFF;
              if (v32 == 0x7FFFFFFF) {
                goto LABEL_94;
              }
            }
            goto LABEL_100;
          }
        }
        else
        {
          unint64_t v31 = 0;
        }
LABEL_94:
        unsigned int v42 = *(_DWORD *)(v2 + 252);
        if (v42 == 0x7FFFFFFF)
        {
          unsigned int v42 = *(_DWORD *)(v2 + 248);
          unsigned int v43 = v42;
          if (v42 == *(_DWORD *)(v2 + 240))
          {
            re::HashTable<re::DynamicString,re::MaterialDefinitionFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity((uint64_t)v71, 2 * *(_DWORD *)(v2 + 244));
            unint64_t v31 = v30 % *(unsigned int *)(v2 + 240);
            unsigned int v43 = *(_DWORD *)(v2 + 248);
          }
          *(_DWORD *)(v2 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 248) = v43 + 1;
          uint64_t v44 = *(void *)(v2 + 232);
          int v45 = *(_DWORD *)(v44 + 784 * v42 + 8);
        }
        else
        {
          uint64_t v44 = *(void *)(v2 + 232);
          int v45 = *(_DWORD *)(v44 + 784 * v42 + 8);
          *(_DWORD *)(v2 + 252) = v45 & 0x7FFFFFFF;
        }
        *(_DWORD *)(v44 + 784 * v42 + 8) = v45 | 0x80000000;
        uint64_t v46 = *(void *)(v2 + 232) + 784 * v42;
        *(_DWORD *)(v46 + 8) = *(_DWORD *)(v46 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(v2 + 224) + 4 * v31);
        *(void *)(*(void *)(v2 + 232) + 784 * v42) = v30;
        re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(v2 + 232) + 784 * v42 + 16), (const re::DynamicString *)v77);
        re::MaterialDefinitionFile::MaterialDefinitionFile((re::MaterialDefinitionFile *)(*(void *)(v2 + 232) + 784 * v42 + 48), (const re::MaterialDefinitionFile *)__p);
        *(_DWORD *)(*(void *)(v2 + 224) + 4 * v31) = v42;
        ++*(_DWORD *)(v2 + 244);
        ++*(_DWORD *)(v2 + 256);
LABEL_100:
        if (*(void *)v77)
        {
          if (v77[8]) {
            (*(void (**)(void))(**(void **)v77 + 40))();
          }
          memset(v77, 0, sizeof(v77));
        }
        if (v76 < 0) {
          operator delete(v75.__locale_);
        }
        unsigned __int8 v47 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x263F8C100], (uint64_t)"Reading ", 8);
        std::__fs::filesystem::path::filename[abi:nn180100](&v10->__p_, (uint64_t)v77);
        if (v77[23] >= 0) {
          id v48 = v77;
        }
        else {
          id v48 = *(const char **)v77;
        }
        size_t v49 = strlen(v48);
        uint64_t v50 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v47, (uint64_t)v48, v49);
        uint64_t v51 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v50, (uint64_t)" from ", 6);
        if ((v10->__p_.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unint64_t v10 = (std::__fs::filesystem::directory_entry *)v10->__p_.__pn_.__r_.__value_.__r.__words[0];
        }
        size_t v52 = strlen((const char *)v10);
        unint64_t v53 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v51, (uint64_t)v10, v52);
        std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(void *)(*v53 - 24)));
        unint64_t v54 = std::locale::use_facet(&v75, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 10);
        std::locale::~locale(&v75);
        std::ostream::put();
        std::ostream::flush();
        if ((v77[23] & 0x80000000) != 0) {
          operator delete(*(void **)v77);
        }
        re::MaterialDefinitionFile::~MaterialDefinitionFile((re::MaterialDefinitionFile *)__p);
        goto LABEL_114;
      }
      std::__fs::filesystem::path::extension[abi:nn180100]((uint64_t)__p, &v10->__p_);
      memset(v77, 0, 24);
      std::string::append[abi:nn180100]<char const*,0>((std::string *)v77, ".rematerial", "");
      if (v77[23] >= 0) {
        v19.__data_ = v77;
      }
      else {
        v19.__data_ = *(const std::string_view::value_type **)v77;
      }
      if (v77[23] >= 0) {
        v19.__size_ = v77[23];
      }
      else {
        v19.__size_ = *(void *)&v77[8];
      }
      uint64_t v20 = (_anonymous_namespace_ *)std::__fs::filesystem::path::__compare((const std::__fs::filesystem::path *)__p, v19);
      int v21 = (int)v20;
      if ((v77[23] & 0x80000000) != 0) {
        operator delete(*(void **)v77);
      }
      if (SBYTE7(v82) < 0)
      {
        operator delete(__p[0]);
        if (!v21)
        {
LABEL_76:
          *(_OWORD *)__p = 0u;
          long long v82 = 0u;
          re::DynamicString::setCapacity(__p, 0);
          memset(v83, 0, sizeof(v83));
          uint64_t v84 = 0x7FFFFFFFLL;
          memset(v85, 0, sizeof(v85));
          int v86 = 0;
          uint64_t v87 = 0x7FFFFFFFLL;
          memset(v88, 0, sizeof(v88));
          int v89 = 0;
          uint64_t v90 = 0x7FFFFFFFLL;
          memset(v91, 0, sizeof(v91));
          int v92 = 0;
          uint64_t v93 = 0x7FFFFFFFLL;
          int v95 = 0;
          memset(v94, 0, sizeof(v94));
          uint64_t v96 = 0x7FFFFFFFLL;
          memset(v97, 0, sizeof(v97));
          int v98 = 0;
          uint64_t v99 = 0x7FFFFFFFLL;
          char v100 = 0;
          char v101 = 0;
          char v102 = 0;
          char v103 = 0;
          char v104 = 0;
          char v105 = 0;
          char v106 = 0;
          char v107 = 0;
          char v108 = 0;
          uint64_t v111 = 0;
          int v110 = 0;
          memset(v109, 0, sizeof(v109));
          if ((v10->__p_.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v34 = (re *)v10;
          }
          else {
            unint64_t v34 = (re *)v10->__p_.__pn_.__r_.__value_.__r.__words[0];
          }
          re::compileMaterialFile((char *)__p, v34, (re::IntrospectionBase *)&v118, (uint64_t)v72);
          if (!v72[0] && (void)v73)
          {
            if (BYTE8(v73)) {
              (*(void (**)(void))(*(void *)v73 + 40))();
            }
            long long v73 = 0u;
            long long v74 = 0u;
          }
          std::__fs::filesystem::path::filename[abi:nn180100](&v10->__p_, (uint64_t)&v75);
          if (v76 >= 0) {
            uint64_t v36 = (const char *)&v75;
          }
          else {
            uint64_t v36 = (const char *)v75.__locale_;
          }
          unint64_t v37 = re::Hash<re::DynamicString>::operator()((uint64_t)v119, (uint64_t)v77);
          unint64_t v38 = v37;
          if (*v70)
          {
            unint64_t v39 = v37 % *(unsigned int *)(v2 + 288);
            uint64_t v40 = *(unsigned int *)(*(void *)(v2 + 272) + 4 * v39);
            if (v40 != 0x7FFFFFFF)
            {
              uint64_t v41 = *(void *)(v2 + 280);
              while (!re::DynamicString::operator==(v41 + 456 * v40 + 16, (uint64_t)v77))
              {
                uint64_t v40 = *(_DWORD *)(v41 + 456 * v40 + 8) & 0x7FFFFFFF;
                if (v40 == 0x7FFFFFFF) {
                  goto LABEL_125;
                }
              }
              goto LABEL_131;
            }
          }
          else
          {
            unint64_t v39 = 0;
          }
LABEL_125:
          unsigned int v55 = *(_DWORD *)(v2 + 300);
          if (v55 == 0x7FFFFFFF)
          {
            unsigned int v55 = *(_DWORD *)(v2 + 296);
            unsigned int v56 = v55;
            if (v55 == *(_DWORD *)(v2 + 288))
            {
              re::HashTable<re::DynamicString,re::MaterialFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity((uint64_t)v70, 2 * *(_DWORD *)(v2 + 292));
              unint64_t v39 = v38 % *(unsigned int *)(v2 + 288);
              unsigned int v56 = *(_DWORD *)(v2 + 296);
            }
            *(_DWORD *)(v2 + 296) = v56 + 1;
            uint64_t v57 = *(void *)(v2 + 280);
            int v58 = *(_DWORD *)(v57 + 456 * v55 + 8);
          }
          else
          {
            uint64_t v57 = *(void *)(v2 + 280);
            int v58 = *(_DWORD *)(v57 + 456 * v55 + 8);
            *(_DWORD *)(v2 + 30ArcSharedObject::ArcSharedObject(this, 0) = v58 & 0x7FFFFFFF;
          }
          *(_DWORD *)(v57 + 456 * v55 + 8) = v58 | 0x80000000;
          uint64_t v59 = *(void *)(v2 + 280) + 456 * v55;
          *(_DWORD *)(v59 + 8) = *(_DWORD *)(v59 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(v2 + 272) + 4 * v39);
          *(void *)(*(void *)(v2 + 280) + 456 * v55) = v38;
          re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(v2 + 280) + 456 * v55 + 16), (const re::DynamicString *)v77);
          re::MaterialFile::MaterialFile(*(void *)(v2 + 280) + 456 * v55 + 48, (uint64_t)__p);
          *(_DWORD *)(*(void *)(v2 + 272) + 4 * v39) = v55;
          ++*(_DWORD *)(v2 + 292);
          ++*(_DWORD *)(v2 + 304);
LABEL_131:
          if (*(void *)v77)
          {
            if (v77[8]) {
              (*(void (**)(void))(**(void **)v77 + 40))();
            }
            memset(v77, 0, sizeof(v77));
          }
          if (v76 < 0) {
            operator delete(v75.__locale_);
          }
          unint64_t v60 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x263F8C100], (uint64_t)"Reading ", 8);
          std::__fs::filesystem::path::filename[abi:nn180100](&v10->__p_, (uint64_t)v77);
          if (v77[23] >= 0) {
            uint64_t v61 = v77;
          }
          else {
            uint64_t v61 = *(const char **)v77;
          }
          size_t v62 = strlen(v61);
          uint64_t v63 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v60, (uint64_t)v61, v62);
          uint64_t v64 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v63, (uint64_t)" from ", 6);
          if ((v10->__p_.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            unint64_t v10 = (std::__fs::filesystem::directory_entry *)v10->__p_.__pn_.__r_.__value_.__r.__words[0];
          }
          size_t v65 = strlen((const char *)v10);
          uint64_t v66 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v64, (uint64_t)v10, v65);
          std::ios_base::getloc((const std::ios_base *)((char *)v66 + *(void *)(*v66 - 24)));
          unsigned int v67 = std::locale::use_facet(&v75, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v67->__vftable[2].~facet_0)(v67, 10);
          std::locale::~locale(&v75);
          std::ostream::put();
          std::ostream::flush();
          if ((v77[23] & 0x80000000) != 0) {
            operator delete(*(void **)v77);
          }
          re::DynamicArray<re::FunctionLink>::deinit((uint64_t)v109);
          re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v97);
          re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v94);
          re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v91);
          re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v88);
          re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v85);
          re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v83[24]);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v83);
          if (__p[0])
          {
            if ((uint64_t)__p[1]) {
              (*(void (**)(void))(*(void *)__p[0] + 40))();
            }
          }
        }
      }
      else if (!v21)
      {
        goto LABEL_76;
      }
LABEL_114:
      std::__fs::filesystem::directory_iterator::__increment(&v112, 0);
LABEL_14:
      ptr = v112.__imp_.__ptr_;
    }
    if (v112.__imp_.__cntrl_) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v112.__imp_.__cntrl_);
    }
    if (v114) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v114);
    }
    this = v115;
    if (v115 && (v116 & 1) != 0) {
      this = (*(uint64_t (**)(void))(*(void *)v115 + 40))();
    }
    unint64_t v3 = (const re::DynamicString *)((char *)v3 + 32);
  }
  while ((char *)v69 + 32 != v68);
  return this;
}

double std::__fs::filesystem::path::extension[abi:nn180100](uint64_t a1, std::__fs::filesystem::path *this)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__extension(this);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (v3.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_dst = (long long *)operator new(v5 + 1);
    *((void *)&__dst + 1) = v3.__size_;
    unint64_t v9 = v6 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((unsigned char *)p_dst + v3.__size_) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a1 = __dst;
  *(void *)(a1 + 16) = v9;
  return result;
}

uint64_t re::PSOToolManager::generateFunctionVariationsForTechnique(re::PSOToolManager *this, const char *a2, const char *a3)
{
  uint64_t v129 = 0;
  v126[1] = 0;
  uint64_t v127 = 0;
  v126[0] = 0;
  int v128 = 0;
  uint64_t v6 = strcmp(a2, "*");
  if (v6)
  {
    re::makeTruncatedAssetPath((char *)v123, (re::DynamicString *)v105);
    v7.n128_f64[0] = re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)v126, v105);
    if (v105[0].__locale_)
    {
      if ((uint64_t)v105[1].__locale_) {
        (*(void (**)(double))(*(void *)v105[0].__locale_ + 40))(v7.n128_f64[0]);
      }
      __n128 v7 = 0uLL;
      *(_OWORD *)&v105[0].__locale_ = 0u;
      long long v106 = 0u;
    }
    uint64_t v6 = *(void *)&v123[0];
    if (*(void *)&v123[0])
    {
      if (BYTE8(v123[0])) {
        uint64_t v6 = (*(uint64_t (**)(__n128))(**(void **)&v123[0] + 40))(v7);
      }
      memset(v123, 0, sizeof(v123));
    }
  }
  else
  {
    uint64_t v8 = *((unsigned int *)this + 74);
    if (v8)
    {
      uint64_t v9 = 0;
      unint64_t v10 = (_DWORD *)(*((void *)this + 35) + 8);
      while ((*v10 & 0x80000000) == 0)
      {
        v10 += 114;
        if (v8 == ++v9)
        {
          LODWORD(v9) = *((_DWORD *)this + 74);
          break;
        }
      }
    }
    else
    {
      LODWORD(v9) = 0;
    }
    if (v8 != v9)
    {
      uint64_t v11 = v9;
      do
      {
        re::DynamicString::DynamicString((re::DynamicString *)v125, (const re::DynamicString *)(*((void *)this + 35) + 456 * v11 + 16));
        re::makeTruncatedAssetPath((char *)v125, (re::DynamicString *)v105);
        v12.n128_f64[0] = re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)v126, v105);
        if (v105[0].__locale_)
        {
          if ((uint64_t)v105[1].__locale_) {
            (*(void (**)(double))(*(void *)v105[0].__locale_ + 40))(v12.n128_f64[0]);
          }
          __n128 v12 = 0uLL;
          *(_OWORD *)&v105[0].__locale_ = 0u;
          long long v106 = 0u;
        }
        uint64_t v6 = *(void *)&v125[0];
        if (*(void *)&v125[0])
        {
          if (BYTE8(v125[0])) {
            uint64_t v6 = (*(uint64_t (**)(__n128))(**(void **)&v125[0] + 40))(v12);
          }
          memset(v125, 0, sizeof(v125));
        }
        if (*((_DWORD *)this + 74) <= (v9 + 1)) {
          int v13 = v9 + 1;
        }
        else {
          int v13 = *((_DWORD *)this + 74);
        }
        while (1)
        {
          uint64_t v11 = (v9 + 1);
          if (v13 - 1 == v9) {
            break;
          }
          LODWORD(v9) = v9 + 1;
          int v14 = v11;
          if ((*(_DWORD *)(*((void *)this + 35) + 456 * v11 + 8) & 0x80000000) != 0) {
            goto LABEL_33;
          }
        }
        int v14 = v13;
LABEL_33:
        LODWORD(v9) = v14;
      }
      while (v8 != v14);
    }
    uint64_t v15 = *((unsigned int *)this + 62);
    if (v15)
    {
      uint64_t v16 = 0;
      std::__fs::filesystem::path::__string_view v17 = (_DWORD *)(*((void *)this + 29) + 8);
      while ((*v17 & 0x80000000) == 0)
      {
        v17 += 196;
        if (v15 == ++v16)
        {
          LODWORD(v16) = *((_DWORD *)this + 62);
          break;
        }
      }
    }
    else
    {
      LODWORD(v16) = 0;
    }
    if (v15 != v16)
    {
      uint64_t v18 = v16;
      do
      {
        re::DynamicString::DynamicString((re::DynamicString *)v124, (const re::DynamicString *)(*((void *)this + 29) + 784 * v18 + 16));
        re::makeTruncatedAssetPath((char *)v124, (re::DynamicString *)v105);
        v19.n128_f64[0] = re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)v126, v105);
        if (v105[0].__locale_)
        {
          if ((uint64_t)v105[1].__locale_) {
            (*(void (**)(double))(*(void *)v105[0].__locale_ + 40))(v19.n128_f64[0]);
          }
          __n128 v19 = 0uLL;
          *(_OWORD *)&v105[0].__locale_ = 0u;
          long long v106 = 0u;
        }
        uint64_t v6 = *(void *)&v124[0];
        if (*(void *)&v124[0])
        {
          if (BYTE8(v124[0])) {
            uint64_t v6 = (*(uint64_t (**)(__n128))(**(void **)&v124[0] + 40))(v19);
          }
          memset(v124, 0, sizeof(v124));
        }
        if (*((_DWORD *)this + 62) <= (v16 + 1)) {
          int v20 = v16 + 1;
        }
        else {
          int v20 = *((_DWORD *)this + 62);
        }
        while (1)
        {
          uint64_t v18 = (v16 + 1);
          if (v20 - 1 == v16) {
            break;
          }
          LODWORD(v16) = v16 + 1;
          int v21 = v18;
          if ((*(_DWORD *)(*((void *)this + 29) + 784 * v18 + 8) & 0x80000000) != 0) {
            goto LABEL_57;
          }
        }
        int v21 = v20;
LABEL_57:
        LODWORD(v16) = v21;
      }
      while (v15 != v21);
    }
  }
  if (!v127)
  {
LABEL_221:
    re::DynamicArray<re::DynamicString>::deinit((uint64_t)v126);
    uint64_t result = v130;
    if (v130)
    {
      if (v131) {
        return (*(uint64_t (**)(void))(*(void *)v130 + 40))();
      }
    }
    return result;
  }
  uint64_t v22 = v129;
  char v100 = (void *)((char *)this + 216);
  uint64_t v101 = v129 + 32 * v127;
  uint64_t v99 = (void *)((char *)this + 312);
  while (1)
  {
    uint64_t v23 = *((void *)this + 77);
    uint64_t v24 = *((void *)this + 79);
    if (v23)
    {
      uint64_t v25 = 32 * v23;
      uint64_t v26 = *((void *)this + 79);
      while (1)
      {
        uint64_t v6 = re::DynamicString::operator==(v26, v22);
        if (v6) {
          break;
        }
        v26 += 32;
        v25 -= 32;
        if (!v25)
        {
          uint64_t v26 = v24 + 32 * v23;
          break;
        }
      }
    }
    else
    {
      uint64_t v26 = *((void *)this + 79);
    }
    if (v23 != (v26 - v24) >> 5) {
      goto LABEL_220;
    }
    memset(v122, 0, sizeof(v122));
    re::DynamicString::setCapacity(v122, 0);
    int v120 = 0;
    memset(v119, 0, sizeof(v119));
    uint64_t v121 = 0x7FFFFFFFLL;
    unint64_t v27 = re::Hash<re::DynamicString>::operator()((uint64_t)v105, v22);
    if (!*((void *)this + 33)) {
      break;
    }
    uint64_t v28 = *(unsigned int *)(*((void *)this + 34) + 4 * (v27 % *((unsigned int *)this + 72)));
    if (v28 == 0x7FFFFFFF) {
      break;
    }
    uint64_t v29 = *((void *)this + 35);
    while (!re::DynamicString::operator==(v29 + 456 * v28 + 16, v22))
    {
      uint64_t v28 = *(_DWORD *)(v29 + 456 * v28 + 8) & 0x7FFFFFFF;
      if (v28 == 0x7FFFFFFF) {
        goto LABEL_73;
      }
    }
    unint64_t v41 = re::Hash<re::DynamicString>::operator()((uint64_t)&v102, v22);
    if (*((void *)this + 33))
    {
      uint64_t v42 = *((void *)this + 35);
      uint64_t v43 = *(unsigned int *)(*((void *)this + 34) + 4 * (v41 % *((unsigned int *)this + 72)));
      if (v43 != 0x7FFFFFFF)
      {
        while (!re::DynamicString::operator==(v42 + 456 * v43 + 16, v22))
        {
          uint64_t v43 = *(_DWORD *)(v42 + 456 * v43 + 8) & 0x7FFFFFFF;
          if (v43 == 0x7FFFFFFF) {
            goto LABEL_149;
          }
        }
        goto LABEL_150;
      }
    }
    else
    {
      uint64_t v42 = *((void *)this + 35);
    }
LABEL_149:
    uint64_t v43 = 0x7FFFFFFFLL;
LABEL_150:
    re::MaterialFile::MaterialFile((uint64_t)v105, v42 + 456 * v43 + 48);
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)v119, (uint64_t)v116);
    re::AssetHandle::serializationString((re::AssetHandle *)v107, (re::DynamicString *)v118);
    re::makeTruncatedAssetPath((char *)v118, (re::DynamicString *)&v102);
    re::DynamicString::operator=((re::DynamicString *)v122, (re::DynamicString *)&v102);
    if ((void)v102)
    {
      if (BYTE8(v102)) {
        (*(void (**)(void))(*(void *)v102 + 40))();
      }
      long long v102 = 0u;
      long long v103 = 0u;
    }
    if (*(void *)&v118[0])
    {
      if (BYTE8(v118[0])) {
        (*(void (**)(void))(**(void **)&v118[0] + 40))();
      }
      memset(v118, 0, sizeof(v118));
    }
    re::DynamicArray<re::FunctionLink>::deinit((uint64_t)&v117);
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v116);
    re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v115);
    re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v114);
    re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v113);
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v112);
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v109);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v107);
    if (v105[0].__locale_ && ((uint64_t)v105[1].__locale_ & 1) != 0) {
      (*(void (**)(void))(*(void *)v105[0].__locale_ + 40))();
    }
LABEL_75:
    uint64_t v31 = *((void *)this + 77);
    uint64_t v32 = *((void *)this + 79);
    if (v31)
    {
      uint64_t v33 = 32 * v31;
      uint64_t v34 = *((void *)this + 79);
      while (!re::DynamicString::operator==(v34, (uint64_t)v122))
      {
        v34 += 32;
        v33 -= 32;
        if (!v33)
        {
          uint64_t v34 = v32 + 32 * v31;
          break;
        }
      }
    }
    else
    {
      uint64_t v34 = *((void *)this + 79);
    }
    if (v31 != (v34 - v32) >> 5) {
      goto LABEL_217;
    }
    unint64_t v35 = re::Hash<re::DynamicString>::operator()((uint64_t)v105, (uint64_t)v122);
    if (!*v99
      || (uint64_t v36 = *(unsigned int *)(*((void *)this + 40) + 4 * (v35 % *((unsigned int *)this + 84))),
          v36 == 0x7FFFFFFF))
    {
LABEL_88:
      unint64_t v38 = re::Hash<re::DynamicString>::operator()((uint64_t)v105, (uint64_t)v122);
      if (*v100)
      {
        uint64_t v39 = *((void *)this + 29);
        uint64_t v40 = *(unsigned int *)(*((void *)this + 28) + 4 * (v38 % *((unsigned int *)this + 60)));
        if (v40 != 0x7FFFFFFF)
        {
          while (!re::DynamicString::operator==(v39 + 784 * v40 + 16, (uint64_t)v122))
          {
            uint64_t v40 = *(_DWORD *)(v39 + 784 * v40 + 8) & 0x7FFFFFFF;
            if (v40 == 0x7FFFFFFF) {
              goto LABEL_99;
            }
          }
LABEL_100:
          re::MaterialDefinitionFile::MaterialDefinitionFile((re::MaterialDefinitionFile *)v105, (const re::MaterialDefinitionFile *)(v39 + 784 * v40 + 48));
          FlattenedMaterialFile = re::makeFlattenedMaterialFile((uint64_t)v100, (char *)v105);
          unint64_t v45 = re::Hash<re::DynamicString>::operator()((uint64_t)&v102, (uint64_t)v122);
          unint64_t v46 = v45;
          if (*v99)
          {
            unint64_t v47 = v45 % *((unsigned int *)this + 84);
            uint64_t v48 = *(unsigned int *)(*((void *)this + 40) + 4 * v47);
            if (v48 != 0x7FFFFFFF)
            {
              uint64_t v49 = *((void *)this + 41);
              while (!re::DynamicString::operator==(v49 + 56 * v48 + 16, (uint64_t)v122))
              {
                uint64_t v48 = *(_DWORD *)(v49 + 56 * v48 + 8) & 0x7FFFFFFF;
                if (v48 == 0x7FFFFFFF) {
                  goto LABEL_107;
                }
              }
              goto LABEL_113;
            }
          }
          else
          {
            unint64_t v47 = 0;
          }
LABEL_107:
          uint64_t v50 = *((unsigned int *)this + 87);
          if (v50 == 0x7FFFFFFF)
          {
            uint64_t v50 = *((unsigned int *)this + 86);
            int v51 = v50;
            if (v50 == *((_DWORD *)this + 84))
            {
              re::HashTable<re::DynamicString,re::MaterialDefinitionFile *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity((uint64_t)v99, 2 * *((_DWORD *)this + 85));
              unint64_t v47 = v46 % *((unsigned int *)this + 84);
              int v51 = *((_DWORD *)this + 86);
            }
            *((_DWORD *)this + 86) = v51 + 1;
            uint64_t v52 = *((void *)this + 41);
            int v53 = *(_DWORD *)(v52 + 56 * v50 + 8);
          }
          else
          {
            uint64_t v52 = *((void *)this + 41);
            int v53 = *(_DWORD *)(v52 + 56 * v50 + 8);
            *((_DWORD *)this + 87) = v53 & 0x7FFFFFFF;
          }
          *(_DWORD *)(v52 + 56 * v50 + 8) = v53 | 0x80000000;
          *(_DWORD *)(*((void *)this + 41) + 56 * v50 + 8) = *(_DWORD *)(*((void *)this + 41) + 56 * v50 + 8) & 0x80000000 | *(_DWORD *)(*((void *)this + 40) + 4 * v47);
          *(void *)(*((void *)this + 41) + 56 * v5ArcSharedObject::ArcSharedObject(this, 0) = v46;
          re::DynamicString::DynamicString((re::DynamicString *)(*((void *)this + 41) + 56 * v50 + 16), (const re::DynamicString *)v122);
          *(void *)(*((void *)this + 41) + 56 * v50 + 48) = FlattenedMaterialFile;
          *(_DWORD *)(*((void *)this + 40) + 4 * v47) = v50;
          ++*((_DWORD *)this + 85);
          ++*((_DWORD *)this + 88);
LABEL_113:
          re::MaterialDefinitionFile::~MaterialDefinitionFile((re::MaterialDefinitionFile *)v105);
          goto LABEL_114;
        }
      }
      else
      {
        uint64_t v39 = *((void *)this + 29);
      }
LABEL_99:
      uint64_t v40 = 0x7FFFFFFFLL;
      goto LABEL_100;
    }
    uint64_t v37 = *((void *)this + 41);
    while (!re::DynamicString::operator==(v37 + 56 * v36 + 16, (uint64_t)v122))
    {
      uint64_t v36 = *(_DWORD *)(v37 + 56 * v36 + 8) & 0x7FFFFFFF;
      if (v36 == 0x7FFFFFFF) {
        goto LABEL_88;
      }
    }
LABEL_114:
    unint64_t v54 = re::Hash<re::DynamicString>::operator()((uint64_t)v105, (uint64_t)v122);
    if (*v99)
    {
      uint64_t v55 = *((void *)this + 41);
      uint64_t v56 = *(unsigned int *)(*((void *)this + 40) + 4 * (v54 % *((unsigned int *)this + 84)));
      if (v56 != 0x7FFFFFFF)
      {
        while (!re::DynamicString::operator==(v55 + 56 * v56 + 16, (uint64_t)v122))
        {
          uint64_t v56 = *(_DWORD *)(v55 + 56 * v56 + 8) & 0x7FFFFFFF;
          if (v56 == 0x7FFFFFFF) {
            goto LABEL_120;
          }
        }
        goto LABEL_121;
      }
    }
    else
    {
      uint64_t v55 = *((void *)this + 41);
    }
LABEL_120:
    uint64_t v56 = 0x7FFFFFFFLL;
LABEL_121:
    uint64_t v57 = *(void *)(v55 + 56 * v56 + 48);
    char v104 = 0;
    *(void *)&long long v103 = 0;
    long long v102 = 0uLL;
    DWORD2(v103) = 0;
    if (v131) {
      int v58 = v133;
    }
    else {
      int v58 = v132;
    }
    if (!strcmp(v58, "*"))
    {
      uint64_t v62 = *(void *)(v57 + 400);
      if (v62)
      {
        uint64_t v63 = *(const re::MaterialTechniqueData **)(v57 + 416);
        uint64_t v64 = 664 * v62;
        do
        {
          re::MaterialTechniqueData::MaterialTechniqueData((re::MaterialTechniqueData *)v105, v63);
          re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)&v102, (re::DynamicString *)v105);
          re::MaterialTechniqueData::~MaterialTechniqueData((re::MaterialTechniqueData *)v105);
          uint64_t v63 = (const re::MaterialTechniqueData *)((char *)v63 + 664);
          v64 -= 664;
        }
        while (v64);
      }
    }
    else if (re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(v57 + 464, (uint64_t)&v130))
    {
      unint64_t v59 = re::Hash<re::DynamicString>::operator()((uint64_t)v105, (uint64_t)&v130);
      if (*(void *)(v57 + 464))
      {
        uint64_t v60 = *(unsigned int *)(*(void *)(v57 + 472) + 4 * (v59 % *(unsigned int *)(v57 + 488)));
        if (v60 == 0x7FFFFFFF)
        {
          uint64_t v61 = 0x7FFFFFFFLL;
        }
        else
        {
          uint64_t v79 = *(void *)(v57 + 480);
          while (!re::DynamicString::operator==(v79 + 80 * v60 + 16, (uint64_t)&v130))
          {
            uint64_t v60 = *(_DWORD *)(v79 + 80 * v60 + 8) & 0x7FFFFFFF;
            uint64_t v61 = 0x7FFFFFFFLL;
            if (v60 == 0x7FFFFFFF) {
              goto LABEL_170;
            }
          }
          uint64_t v61 = v60;
        }
      }
      else
      {
        uint64_t v61 = 0x7FFFFFFFLL;
      }
LABEL_170:
      re::DynamicString::DynamicString((re::DynamicString *)&v136, (const re::DynamicString *)(*(void *)(v57 + 480) + 80 * v61 + 48));
      uint64_t v80 = *(void *)(v57 + 440);
      if (v80)
      {
        uint64_t v81 = *(uint64_t **)(v57 + 456);
        long long v82 = &v81[9 * v80];
        do
        {
          re::DynamicString::DynamicString((re::DynamicString *)v105, (const re::DynamicString *)v81);
          re::DynamicArray<re::DynamicString>::DynamicArray((uint64_t)v107, v81 + 4);
          if ((uint64_t)v105[1].__locale_) {
            long long v83 = (const char *)v106;
          }
          else {
            long long v83 = (char *)&v105[1].__locale_ + 1;
          }
          if (v137) {
            uint64_t v84 = v139;
          }
          else {
            uint64_t v84 = v138;
          }
          if (!strcmp(v83, v84) && v108)
          {
            uint64_t v85 = (const re::DynamicString *)v109[1];
            uint64_t v86 = 32 * v108;
            do
            {
              re::DynamicString::DynamicString((re::DynamicString *)&v134, v85);
              re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)&v102, (re::DynamicString *)&v134);
              if (v134 && (v135 & 1) != 0) {
                (*(void (**)(void))(*(void *)v134 + 40))();
              }
              uint64_t v85 = (const re::DynamicString *)((char *)v85 + 32);
              v86 -= 32;
            }
            while (v86);
          }
          re::MaterialTechniqueGroupData::deinit(&v105[0].__locale_);
          re::DynamicArray<re::DynamicString>::deinit((uint64_t)v107);
          if (v105[0].__locale_ && ((uint64_t)v105[1].__locale_ & 1) != 0) {
            (*(void (**)(void))(*(void *)v105[0].__locale_ + 40))();
          }
          v81 += 9;
        }
        while (v81 != v82);
      }
      uint64_t v87 = *(void *)(v57 + 664);
      if (v87)
      {
        int v88 = *(const re::MaterialTechniqueQualityLevelSetData **)(v57 + 680);
        int v89 = (const re::MaterialTechniqueQualityLevelSetData *)((char *)v88 + 104 * v87);
        do
        {
          re::MaterialTechniqueQualityLevelSetData::MaterialTechniqueQualityLevelSetData((re::MaterialTechniqueQualityLevelSetData *)v105, v88);
          if ((uint64_t)v105[1].__locale_) {
            uint64_t v90 = (const char *)v106;
          }
          else {
            uint64_t v90 = (char *)&v105[1].__locale_ + 1;
          }
          if (v137) {
            unint64_t v91 = v139;
          }
          else {
            unint64_t v91 = v138;
          }
          if (!strcmp(v90, v91) && v110)
          {
            int v92 = v111;
            uint64_t v93 = 32 * v110;
            do
            {
              re::DynamicString::DynamicString((re::DynamicString *)&v134, v92);
              re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)&v102, (re::DynamicString *)&v134);
              if (v134 && (v135 & 1) != 0) {
                (*(void (**)(void))(*(void *)v134 + 40))();
              }
              int v92 = (re::DynamicString *)((char *)v92 + 32);
              v93 -= 32;
            }
            while (v93);
          }
          re::MaterialTechniqueQualityLevelSetData::~MaterialTechniqueQualityLevelSetData(&v105[0].__locale_);
          int v88 = (const re::MaterialTechniqueQualityLevelSetData *)((char *)v88 + 104);
        }
        while (v88 != v89);
      }
      if (!(void)v103) {
        re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)&v102, (re::DynamicString *)&v136);
      }
      if (v136 && (v137 & 1) != 0) {
        (*(void (**)(void))(*(void *)v136 + 40))();
      }
    }
    else
    {
      uint64_t v65 = *(void *)(v57 + 400);
      if (v65)
      {
        uint64_t v66 = *(const re::MaterialTechniqueData **)(v57 + 416);
        uint64_t v67 = 664 * v65;
        while (1)
        {
          re::MaterialTechniqueData::MaterialTechniqueData((re::MaterialTechniqueData *)v105, v66);
          long long v68 = ((uint64_t)v105[1].__locale_ & 1) != 0 ? (const char *)v106 : (char *)&v105[1].__locale_ + 1;
          long long v69 = (v131 & 1) != 0 ? v133 : v132;
          if (!strcmp(v68, v69)) {
            break;
          }
          re::MaterialTechniqueData::~MaterialTechniqueData((re::MaterialTechniqueData *)v105);
          uint64_t v66 = (const re::MaterialTechniqueData *)((char *)v66 + 664);
          v67 -= 664;
          if (!v67) {
            goto LABEL_143;
          }
        }
        re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)&v102, (re::DynamicString *)&v130);
        re::MaterialTechniqueData::~MaterialTechniqueData((re::MaterialTechniqueData *)v105);
      }
      else
      {
LABEL_143:
        uint64_t v70 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"Cannot find technique mapping for ", 34);
        if (v131) {
          uint64_t v71 = v133;
        }
        else {
          uint64_t v71 = v132;
        }
        size_t v72 = strlen(v71);
        long long v73 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v70, (uint64_t)v71, v72);
        long long v74 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v73, (uint64_t)" in ", 4);
        if (*(unsigned char *)(v57 + 8)) {
          std::locale v75 = *(const char **)(v57 + 16);
        }
        else {
          std::locale v75 = (const char *)(v57 + 9);
        }
        size_t v76 = strlen(v75);
        uint64_t v77 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v74, (uint64_t)v75, v76);
        std::ios_base::getloc((const std::ios_base *)((char *)v77 + *(void *)(*v77 - 24)));
        uint64_t v78 = std::locale::use_facet(v105, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v78->__vftable[2].~facet_0)(v78, 10);
        std::locale::~locale(v105);
        std::ostream::put();
        std::ostream::flush();
      }
    }
    if ((void)v103)
    {
      uint64_t v94 = v104;
      uint64_t v95 = 32 * v103;
      do
      {
        re::DynamicString::DynamicString((re::DynamicString *)v105, v94);
        re::PSOToolManager::generateVariantsForTechnique((uint64_t)this, v57, (uint64_t)v105, (uint64_t)v119);
        if (v105[0].__locale_ && ((uint64_t)v105[1].__locale_ & 1) != 0) {
          (*(void (**)(void))(*(void *)v105[0].__locale_ + 40))();
        }
        uint64_t v94 = (re::DynamicString *)((char *)v94 + 32);
        v95 -= 32;
      }
      while (v95);
    }
    re::DynamicArray<re::DynamicString>::deinit((uint64_t)&v102);
LABEL_217:
    double v96 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v119);
    uint64_t v6 = *(void *)&v122[0];
    if (*(void *)&v122[0] && (BYTE8(v122[0]) & 1) != 0) {
      uint64_t v6 = (*(uint64_t (**)(double))(**(void **)&v122[0] + 40))(v96);
    }
LABEL_220:
    v22 += 32;
    if (v22 == v101) {
      goto LABEL_221;
    }
  }
LABEL_73:
  if (re::HashTable<re::DynamicString,re::MaterialDefinitionFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)v100, v22))
  {
    re::DynamicString::operator=((re::DynamicString *)v122, (re::DynamicString *)v22);
    goto LABEL_75;
  }
  if (*(unsigned char *)(v22 + 8)) {
    uint64_t v98 = *(void *)(v22 + 16);
  }
  else {
    uint64_t v98 = v22 + 9;
  }
  re::internal::assertLog((re::internal *)5, v30, "assertion failure: '%s' (%s:line %i) No material or material defintion for %s\n", "false", "generateFunctionVariationsForTechnique", 131, v98);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

void re::PSOToolManager::generateVariantsForTechnique(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (uint64_t)re::MaterialTechniqueData::MaterialTechniqueData((re::MaterialTechniqueData *)v246);
  uint64_t v8 = *(void *)(a2 + 400);
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 416);
    uint64_t v10 = 664 * v8;
    while (1)
    {
      uint64_t v7 = re::DynamicString::operator==(v9, a3);
      if (v7) {
        break;
      }
      v9 += 664;
      v10 -= 664;
      if (!v10) {
        goto LABEL_7;
      }
    }
    uint64_t v7 = re::MaterialTechniqueData::operator=((uint64_t)v246, v9);
  }
LABEL_7:
  uint64_t v230 = a2;
  int v244 = 0;
  long long v242 = 0u;
  long long v243 = 0u;
  uint64_t v245 = 0x7FFFFFFFLL;
  unsigned int v11 = v266;
  uint64_t v231 = a1;
  uint64_t v12 = 0;
  if (v266)
  {
    int v13 = (int *)(v265 + 8);
    uint64_t v14 = a4;
    while (1)
    {
      int v15 = *v13;
      v13 += 20;
      if (v15 < 0) {
        break;
      }
      if (v266 == ++v12)
      {
        LODWORD(v12) = v266;
        break;
      }
    }
  }
  else
  {
    uint64_t v14 = a4;
  }
  if (v266 != v12)
  {
    uint64_t v20 = v12;
    uint64_t v21 = v265;
    do
    {
      uint64_t v22 = v21 + 80 * v20;
      uint64_t v23 = (re::DynamicString *)(v22 + 16);
      uint64_t v24 = (const re::DynamicString *)(v22 + 48);
      unint64_t v25 = re::Hash<re::DynamicString>::operator()((uint64_t)&v273, v22 + 16);
      unint64_t v26 = v25;
      if ((void)v242)
      {
        unint64_t v27 = v25 % DWORD2(v243);
        uint64_t v28 = *(unsigned int *)(*((void *)&v242 + 1) + 4 * v27);
        if (v28 != 0x7FFFFFFF)
        {
          uint64_t v29 = v243;
          while (!re::DynamicString::operator==(v29 + 80 * v28 + 16, (uint64_t)v23))
          {
            uint64_t v28 = *(_DWORD *)(v29 + 80 * v28 + 8) & 0x7FFFFFFF;
            if (v28 == 0x7FFFFFFF)
            {
              uint64_t v14 = a4;
              goto LABEL_27;
            }
          }
          re::DynamicString::deinit((re::DynamicString *)(v29 + 80 * v28 + 48));
          uint64_t v7 = (uint64_t)re::DynamicString::DynamicString((re::DynamicString *)(v243 + 80 * v28 + 48), v24);
          uint64_t v14 = a4;
          goto LABEL_28;
        }
      }
      else
      {
        LODWORD(v27) = 0;
      }
LABEL_27:
      uint64_t v7 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<re::DynamicString&>((uint64_t)&v242, v27, v26, v23, v24);
LABEL_28:
      ++HIDWORD(v245);
      uint64_t v21 = v265;
      if (v266 <= (int)v12 + 1) {
        unsigned int v30 = v12 + 1;
      }
      else {
        unsigned int v30 = v266;
      }
      while (1)
      {
        uint64_t v20 = (v12 + 1);
        if (v30 - 1 == v12) {
          break;
        }
        LODWORD(v12) = v12 + 1;
        unsigned int v31 = v20;
        if ((*(_DWORD *)(v265 + 80 * v20 + 8) & 0x80000000) != 0) {
          goto LABEL_35;
        }
      }
      unsigned int v31 = v30;
LABEL_35:
      LODWORD(v12) = v31;
    }
    while (v11 != v31);
  }
  uint64_t v16 = *(unsigned int *)(v14 + 32);
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = (int *)(*(void *)(v14 + 16) + 8);
    while (1)
    {
      int v19 = *v18;
      v18 += 20;
      if (v19 < 0) {
        break;
      }
      if (v16 == ++v17)
      {
        LODWORD(v17) = *(_DWORD *)(v14 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v17) = 0;
  }
  if (v16 != v17)
  {
    uint64_t v45 = v17;
    uint64_t v46 = *(void *)(v14 + 16);
    do
    {
      uint64_t v47 = v46 + 80 * v45;
      uint64_t v48 = (re::DynamicString *)(v47 + 16);
      uint64_t v49 = (const re::DynamicString *)(v47 + 48);
      unint64_t v50 = re::Hash<re::DynamicString>::operator()((uint64_t)&v273, v47 + 16);
      unint64_t v51 = v50;
      if ((void)v242)
      {
        unint64_t v52 = v50 % DWORD2(v243);
        uint64_t v53 = *(unsigned int *)(*((void *)&v242 + 1) + 4 * v52);
        if (v53 != 0x7FFFFFFF)
        {
          uint64_t v54 = v243;
          while (!re::DynamicString::operator==(v54 + 80 * v53 + 16, (uint64_t)v48))
          {
            uint64_t v53 = *(_DWORD *)(v54 + 80 * v53 + 8) & 0x7FFFFFFF;
            if (v53 == 0x7FFFFFFF)
            {
              uint64_t v14 = a4;
              goto LABEL_89;
            }
          }
          re::DynamicString::deinit((re::DynamicString *)(v54 + 80 * v53 + 48));
          uint64_t v7 = (uint64_t)re::DynamicString::DynamicString((re::DynamicString *)(v243 + 80 * v53 + 48), v49);
          uint64_t v14 = a4;
          goto LABEL_90;
        }
      }
      else
      {
        LODWORD(v52) = 0;
      }
LABEL_89:
      uint64_t v7 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<re::DynamicString&>((uint64_t)&v242, v52, v51, v48, v49);
LABEL_90:
      ++HIDWORD(v245);
      uint64_t v46 = *(void *)(v14 + 16);
      if (*(_DWORD *)(v14 + 32) <= (v17 + 1)) {
        int v55 = v17 + 1;
      }
      else {
        int v55 = *(_DWORD *)(v14 + 32);
      }
      while (1)
      {
        uint64_t v45 = (v17 + 1);
        if (v55 - 1 == v17) {
          break;
        }
        LODWORD(v17) = v17 + 1;
        int v56 = v45;
        if ((*(_DWORD *)(v46 + 80 * v45 + 8) & 0x80000000) != 0) {
          goto LABEL_97;
        }
      }
      int v56 = v55;
LABEL_97:
      LODWORD(v17) = v56;
    }
    while (v16 != v56);
  }
  if (*(unsigned char *)(a1 + 952) && *(_DWORD *)(a1 + 956) == 1)
  {
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[6]>((uint64_t)&v242, (re::DynamicString *)&v273, 2, "false");
    uint64_t v32 = (_anonymous_namespace_ *)v273;
    if (void)v273 && (BYTE8(v273)) {
      uint64_t v32 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v273 + 40))();
    }
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[6]>((uint64_t)&v242, (re::DynamicString *)&v273, 2, "false");
    uint64_t v33 = (_anonymous_namespace_ *)v273;
    if (void)v273 && (BYTE8(v273)) {
      uint64_t v33 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v273 + 40))();
    }
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[6]>((uint64_t)&v242, (re::DynamicString *)&v273, 2, "false");
    uint64_t v34 = (_anonymous_namespace_ *)v273;
    if (void)v273 && (BYTE8(v273)) {
      uint64_t v34 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v273 + 40))();
    }
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[6]>((uint64_t)&v242, (re::DynamicString *)&v273, 2, "false");
    unint64_t v35 = (_anonymous_namespace_ *)v273;
    if (void)v273 && (BYTE8(v273)) {
      unint64_t v35 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v273 + 40))();
    }
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[2]>((uint64_t)&v242, (re::DynamicString *)&v273, 2, "0");
    uint64_t v36 = (_anonymous_namespace_ *)v273;
    if (void)v273 && (BYTE8(v273)) {
      uint64_t v36 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v273 + 40))();
    }
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[6]>((uint64_t)&v242, (re::DynamicString *)&v273, 2, "false");
    uint64_t v37 = (_anonymous_namespace_ *)v273;
    if (void)v273 && (BYTE8(v273)) {
      uint64_t v37 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v273 + 40))();
    }
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[6]>((uint64_t)&v242, (re::DynamicString *)&v273, 2, "false");
    unint64_t v38 = (_anonymous_namespace_ *)v273;
    if (void)v273 && (BYTE8(v273)) {
      unint64_t v38 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v273 + 40))();
    }
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[6]>((uint64_t)&v242, (re::DynamicString *)&v273, 2, "false");
    uint64_t v39 = (_anonymous_namespace_ *)v273;
    if (void)v273 && (BYTE8(v273)) {
      uint64_t v39 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v273 + 40))();
    }
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[2]>((uint64_t)&v242, (re::DynamicString *)&v273, 2, "0");
    uint64_t v40 = (_anonymous_namespace_ *)v273;
    if (void)v273 && (BYTE8(v273)) {
      uint64_t v40 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v273 + 40))();
    }
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[6]>((uint64_t)&v242, (re::DynamicString *)&v273, 2, "false");
    uint64_t v7 = v273;
    if (void)v273 && (BYTE8(v273)) {
      uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v273 + 40))();
    }
  }
  memset(v241, 0, sizeof(v241));
  unsigned int v239 = 0;
  long long v237 = 0u;
  long long v238 = 0u;
  uint64_t v240 = 0x7FFFFFFFLL;
  if (v252) {
    unint64_t v41 = v252 >> 1;
  }
  else {
    unint64_t v41 = v252 >> 1;
  }
  if (v41)
  {
    long long v273 = 0uLL;
    memset(v274, 0, sizeof(v274));
    unsigned int v304 = 0;
    long long v302 = 0uLL;
    long long v303 = 0uLL;
    uint64_t v305 = 0x7FFFFFFFLL;
    re::PSOToolManager::gatherFunctionConstantsForShader(a1, (uint64_t)v246, &v251, (uint64_t)&v242, (uint64_t)v267, (_anonymous_namespace_ *)&v273, (uint64_t)&v302);
    *(void *)&long long v299 = &v273;
    *((void *)&v299 + 1) = 0;
    if (*(void *)&v274[0] >= 0x10uLL)
    {
      uint64_t v42 = 0;
      uint64_t v43 = *(void *)&v274[0] >> 4;
      while (1)
      {
        unsigned __int16 v44 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v273 + v42)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
        *((void *)&v299 + 1) = (unsigned __int16)~v44;
        if (v44 != 0xFFFF) {
          break;
        }
        v42 += 16;
        if (!--v43) {
          goto LABEL_102;
        }
      }
      uint64_t v57 = __clz(__rbit64((unsigned __int16)~v44)) + v42;
      *(void *)&long long v300 = v57;
      if (v57 != -1)
      {
        do
        {
          re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addOrReplace((uint64_t *)v241, (const re::DynamicString *)(*(void *)(v299 + 8) + 96 * v57), *(void *)(v299 + 8) + 96 * v57 + 32);
          re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v299);
          uint64_t v57 = v300;
        }
        while ((void)v300 != -1);
      }
    }
LABEL_102:
    unsigned int v58 = v304;
    if (v304)
    {
      uint64_t v59 = 0;
      uint64_t v60 = (int *)(v303 + 8);
      while (1)
      {
        int v61 = *v60;
        v60 += 28;
        if (v61 < 0) {
          break;
        }
        if (v304 == ++v59)
        {
          LODWORD(v59) = v304;
          break;
        }
      }
    }
    else
    {
      LODWORD(v59) = 0;
    }
    if (v304 != v59)
    {
      uint64_t v62 = v59;
      uint64_t v63 = v303;
      do
      {
        re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<re::TechniqueFunctionConstant&>((uint64_t)&v237, (re::DynamicString *)(v63 + 112 * v62 + 16), 2, v63 + 112 * v62 + 48);
        uint64_t v63 = v303;
        if (v304 <= (int)v59 + 1) {
          unsigned int v64 = v59 + 1;
        }
        else {
          unsigned int v64 = v304;
        }
        int v65 = v59;
        while (1)
        {
          uint64_t v62 = (v65 + 1);
          if (v64 - 1 == v65) {
            break;
          }
          ++v65;
          LODWORD(v59) = v62;
          if ((*(_DWORD *)(v303 + 112 * v62 + 8) & 0x80000000) != 0) {
            goto LABEL_118;
          }
        }
        LODWORD(v59) = v64;
LABEL_118:
        ;
      }
      while (v58 != v59);
    }
    re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v302);
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)&v273);
  }
  if (v256) {
    unint64_t v66 = v256 >> 1;
  }
  else {
    unint64_t v66 = v256 >> 1;
  }
  if (v66)
  {
    long long v273 = 0u;
    memset(v274, 0, sizeof(v274));
    unsigned int v304 = 0;
    long long v302 = 0u;
    long long v303 = 0u;
    uint64_t v305 = 0x7FFFFFFFLL;
    re::PSOToolManager::gatherFunctionConstantsForShader(v231, (uint64_t)v246, &v255, (uint64_t)&v242, (uint64_t)v267, (_anonymous_namespace_ *)&v273, (uint64_t)&v302);
    *(void *)&long long v299 = &v273;
    *((void *)&v299 + 1) = 0;
    if (*(void *)&v274[0] >= 0x10uLL)
    {
      uint64_t v67 = 0;
      uint64_t v68 = *(void *)&v274[0] >> 4;
      while (1)
      {
        unsigned __int16 v69 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v273 + v67)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
        *((void *)&v299 + 1) = (unsigned __int16)~v69;
        if (v69 != 0xFFFF) {
          break;
        }
        v67 += 16;
        if (!--v68) {
          goto LABEL_131;
        }
      }
      uint64_t v70 = __clz(__rbit64((unsigned __int16)~v69)) + v67;
      *(void *)&long long v300 = v70;
      if (v70 != -1)
      {
        do
        {
          re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addOrReplace((uint64_t *)v241, (const re::DynamicString *)(*(void *)(v299 + 8) + 96 * v70), *(void *)(v299 + 8) + 96 * v70 + 32);
          re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v299);
          uint64_t v70 = v300;
        }
        while ((void)v300 != -1);
      }
    }
LABEL_131:
    unsigned int v71 = v304;
    if (v304)
    {
      uint64_t v72 = 0;
      long long v73 = (int *)(v303 + 8);
      while (1)
      {
        int v74 = *v73;
        v73 += 28;
        if (v74 < 0) {
          break;
        }
        if (v304 == ++v72)
        {
          LODWORD(v72) = v304;
          break;
        }
      }
    }
    else
    {
      LODWORD(v72) = 0;
    }
    if (v304 != v72)
    {
      uint64_t v75 = v72;
      uint64_t v76 = v303;
      do
      {
        re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<re::TechniqueFunctionConstant&>((uint64_t)&v237, (re::DynamicString *)(v76 + 112 * v75 + 16), 2, v76 + 112 * v75 + 48);
        uint64_t v76 = v303;
        if (v304 <= (int)v72 + 1) {
          unsigned int v77 = v72 + 1;
        }
        else {
          unsigned int v77 = v304;
        }
        int v78 = v72;
        while (1)
        {
          uint64_t v75 = (v78 + 1);
          if (v77 - 1 == v78) {
            break;
          }
          ++v78;
          LODWORD(v72) = v75;
          if ((*(_DWORD *)(v303 + 112 * v75 + 8) & 0x80000000) != 0) {
            goto LABEL_147;
          }
        }
        LODWORD(v72) = v77;
LABEL_147:
        ;
      }
      while (v71 != v72);
    }
    re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v302);
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)&v273);
  }
  long long v236 = 0;
  v233[1] = 0;
  uint64_t v234 = 0;
  v233[0] = 0;
  int v235 = 0;
  if (*(unsigned char *)(v231 + 952))
  {
    int v79 = *(_DWORD *)(v231 + 956);
    if (v79 == 1)
    {
      for (uint64_t i = 0; i != 12; ++i)
      {
        uint64_t v87 = realitykit_shader_api::textureFunctions[i];
        LOWORD(v274[1]) = 257;
        double v88 = re::DynamicArray<re::PSOToolLinkedFunctionDescriptor>::add((uint64_t)v233, (uint64_t)&v273);
        uint64_t v7 = v273;
        if (void)v273 && (BYTE8(v273)) {
          uint64_t v7 = (*(uint64_t (**)(double))(*(void *)v273 + 40))(v88);
        }
      }
      LOWORD(v274[1]) = 257;
      double v89 = re::DynamicArray<re::PSOToolLinkedFunctionDescriptor>::add((uint64_t)v233, (uint64_t)&v273);
      uint64_t v7 = v273;
      if (void)v273 && (BYTE8(v273)) {
        uint64_t v7 = (*(uint64_t (**)(double))(*(void *)v273 + 40))(v89);
      }
      for (uint64_t j = 0; j != 9; ++j)
      {
        unint64_t v91 = realitykit_shader_api::materialFunctions[j];
        LOWORD(v274[1]) = 257;
        double v92 = re::DynamicArray<re::PSOToolLinkedFunctionDescriptor>::add((uint64_t)v233, (uint64_t)&v273);
        uint64_t v7 = v273;
        if (void)v273 && (BYTE8(v273)) {
          uint64_t v7 = (*(uint64_t (**)(double))(*(void *)v273 + 40))(v92);
        }
      }
      for (uint64_t k = 0; k != 54; ++k)
      {
        uint64_t v94 = realitykit_shader_api::surfaceFunctions[k];
        LOWORD(v274[1]) = 256;
        double v95 = re::DynamicArray<re::PSOToolLinkedFunctionDescriptor>::add((uint64_t)v233, (uint64_t)&v273);
        uint64_t v7 = v273;
        if (void)v273 && (BYTE8(v273)) {
          uint64_t v7 = (*(uint64_t (**)(double))(*(void *)v273 + 40))(v95);
        }
      }
      for (uint64_t m = 0; m != 60; ++m)
      {
        unsigned int v97 = realitykit_shader_api::surface_privateFunctions[m];
        LOWORD(v274[1]) = 256;
        double v98 = re::DynamicArray<re::PSOToolLinkedFunctionDescriptor>::add((uint64_t)v233, (uint64_t)&v273);
        uint64_t v7 = v273;
        if (void)v273 && (BYTE8(v273)) {
          uint64_t v7 = (*(uint64_t (**)(double))(*(void *)v273 + 40))(v98);
        }
      }
      for (uint64_t n = 0; n != 47; ++n)
      {
        char v100 = realitykit_shader_api::geometry_modifierFunctions[n];
        LOWORD(v274[1]) = 1;
        double v101 = re::DynamicArray<re::PSOToolLinkedFunctionDescriptor>::add((uint64_t)v233, (uint64_t)&v273);
        uint64_t v7 = v273;
        if (void)v273 && (BYTE8(v273)) {
          uint64_t v7 = (*(uint64_t (**)(double))(*(void *)v273 + 40))(v101);
        }
      }
      for (iuint64_t i = 0; ii != 55; ++ii)
      {
        long long v103 = realitykit_shader_api::geometry_modifier_privateFunctions[ii];
        LOWORD(v274[1]) = 1;
        double v104 = re::DynamicArray<re::PSOToolLinkedFunctionDescriptor>::add((uint64_t)v233, (uint64_t)&v273);
        uint64_t v7 = v273;
        if (void)v273 && (BYTE8(v273)) {
          uint64_t v7 = (*(uint64_t (**)(double))(*(void *)v273 + 40))(v104);
        }
      }
    }
    else if (v79 == 2)
    {
      for (juint64_t j = 0; jj != 13; ++jj)
      {
        uint64_t v81 = realitykit_shader_api::ui_geometry_modifier_privateFunctions[jj];
        LOWORD(v274[1]) = 1;
        double v82 = re::DynamicArray<re::PSOToolLinkedFunctionDescriptor>::add((uint64_t)v233, (uint64_t)&v273);
        uint64_t v7 = v273;
        if (void)v273 && (BYTE8(v273)) {
          uint64_t v7 = (*(uint64_t (**)(double))(*(void *)v273 + 40))(v82);
        }
      }
      for (kuint64_t k = 0; kk != 22; ++kk)
      {
        uint64_t v84 = realitykit_shader_api::uisurface_privateFunctions[kk];
        LOWORD(v274[1]) = 256;
        double v85 = re::DynamicArray<re::PSOToolLinkedFunctionDescriptor>::add((uint64_t)v233, (uint64_t)&v273);
        uint64_t v7 = v273;
        if (void)v273 && (BYTE8(v273)) {
          uint64_t v7 = (*(uint64_t (**)(double))(*(void *)v273 + 40))(v85);
        }
      }
    }
    if (v234)
    {
      char v105 = v236;
      long long v106 = (re::DynamicString *)((char *)v236 + 40 * v234);
      do
      {
        long long v273 = 0u;
        memset(v274, 0, sizeof(v274));
        unsigned int v304 = 0;
        long long v302 = 0u;
        long long v303 = 0u;
        uint64_t v305 = 0x7FFFFFFFLL;
        re::PSOToolManager::gatherFunctionConstantsForShader(v231, (uint64_t)v246, v105, (uint64_t)&v242, (uint64_t)v267, (_anonymous_namespace_ *)&v273, (uint64_t)&v302);
        *(void *)&long long v299 = &v273;
        *((void *)&v299 + 1) = 0;
        if (*(void *)&v274[0] >= 0x10uLL)
        {
          uint64_t v107 = 0;
          uint64_t v108 = *(void *)&v274[0] >> 4;
          while (1)
          {
            unsigned __int16 v109 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v273 + v107)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
            *((void *)&v299 + 1) = (unsigned __int16)~v109;
            if (v109 != 0xFFFF) {
              break;
            }
            v107 += 16;
            if (!--v108) {
              goto LABEL_205;
            }
          }
          uint64_t v110 = __clz(__rbit64((unsigned __int16)~v109)) + v107;
          *(void *)&long long v300 = v110;
          if (v110 != -1)
          {
            do
            {
              re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addOrReplace((uint64_t *)v241, (const re::DynamicString *)(*(void *)(v299 + 8) + 96 * v110), *(void *)(v299 + 8) + 96 * v110 + 32);
              re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v299);
              uint64_t v110 = v300;
            }
            while ((void)v300 != -1);
          }
        }
LABEL_205:
        unsigned int v111 = v304;
        if (v304)
        {
          uint64_t v112 = 0;
          uint64_t v113 = (int *)(v303 + 8);
          while (1)
          {
            int v114 = *v113;
            v113 += 28;
            if (v114 < 0) {
              break;
            }
            if (v304 == ++v112)
            {
              LODWORD(v112) = v304;
              break;
            }
          }
        }
        else
        {
          LODWORD(v112) = 0;
        }
        if (v304 != v112)
        {
          uint64_t v115 = v112;
          uint64_t v116 = v303;
          do
          {
            re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<re::TechniqueFunctionConstant&>((uint64_t)&v237, (re::DynamicString *)(v116 + 112 * v115 + 16), 2, v116 + 112 * v115 + 48);
            uint64_t v116 = v303;
            if (v304 <= (int)v112 + 1) {
              unsigned int v117 = v112 + 1;
            }
            else {
              unsigned int v117 = v304;
            }
            int v118 = v112;
            while (1)
            {
              uint64_t v115 = (v118 + 1);
              if (v117 - 1 == v118) {
                break;
              }
              ++v118;
              LODWORD(v112) = v115;
              if ((*(_DWORD *)(v303 + 112 * v115 + 8) & 0x80000000) != 0) {
                goto LABEL_221;
              }
            }
            LODWORD(v112) = v117;
LABEL_221:
            ;
          }
          while (v111 != v112);
        }
        re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v302);
        re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)&v273);
        char v105 = (re::DynamicString *)((char *)v105 + 40);
      }
      while (v105 != v106);
    }
  }
  v315 = 0;
  uint64_t v316 = v230;
  unint64_t v119 = v268;
  v312[1] = 0;
  uint64_t v313 = 0;
  int v314 = 0;
  int v120 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(v312, v119);
  ++v314;
  if (v268)
  {
    uint64_t v121 = v269;
    uint64_t v122 = 32 * v268;
    do
    {
      re::DynamicString::DynamicString((re::DynamicString *)&v273, v121);
      *(void *)&long long v302 = re::Hash<re::DynamicString>::operator()((uint64_t)&v302, (uint64_t)&v273);
      re::DynamicArray<unsigned long>::add(v312, &v302);
      int v120 = (_anonymous_namespace_ *)v273;
      if (void)v273 && (BYTE8(v273)) {
        int v120 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v273 + 40))();
      }
      uint64_t v121 = (re::DynamicString *)((char *)v121 + 32);
      v122 -= 32;
    }
    while (v122);
  }
  unint64_t v123 = HIDWORD(v238);
  unint64_t v311 = 0;
  v308[1] = 0;
  uint64_t v309 = 0;
  v308[0] = 0;
  int v310 = 0;
  re::DynamicArray<re::TechniqueFunctionConstant>::setCapacity(v308, v123);
  ++v310;
  unsigned int v124 = v239;
  if (v239)
  {
    uint64_t v125 = 0;
    uint64_t v126 = (int *)(v238 + 8);
    while (1)
    {
      int v127 = *v126;
      v126 += 28;
      if (v127 < 0) {
        break;
      }
      if (v239 == ++v125)
      {
        LODWORD(v125) = v239;
        break;
      }
    }
  }
  else
  {
    LODWORD(v125) = 0;
  }
  if (v239 != v125)
  {
    uint64_t v128 = v125;
    uint64_t v129 = v238;
    do
    {
      re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v308, (re::DynamicString *)(v129 + 112 * v128 + 48));
      uint64_t v129 = v238;
      if (v239 <= (int)v125 + 1) {
        unsigned int v130 = v125 + 1;
      }
      else {
        unsigned int v130 = v239;
      }
      int v131 = v125;
      while (1)
      {
        uint64_t v128 = (v131 + 1);
        if (v130 - 1 == v131) {
          break;
        }
        ++v131;
        LODWORD(v125) = v128;
        if ((*(_DWORD *)(v238 + 112 * v128 + 8) & 0x80000000) != 0) {
          goto LABEL_245;
        }
      }
      LODWORD(v125) = v130;
LABEL_245:
      ;
    }
    while (v124 != v125);
  }
  re::FunctionConstantsEnumerator::createEnumerator((uint64_t *)v241, v315, v313, (uint64_t)v308, (void *)v231, (uint64_t)v306);
  if (v270)
  {
    uint64_t v132 = (_anonymous_namespace_ *)re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)&v302, (uint64_t)&v271);
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<char const(&)[5]>((uint64_t)&v302, (re::DynamicString *)&v273, "true");
    if (void)v273 && (BYTE8(v273)) {
      (*(void (**)(void))(*(void *)v273 + 40))();
    }
    re::StringID::StringID((re::StringID *)&v273, (const re::DynamicString *)&v251);
    uint64_t v133 = (unsigned char *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v231 + 168, &v273);
    re::StringID::destroyString((re::StringID *)&v273);
    if (v133)
    {
      if (*v133)
      {
        re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<char const(&)[5]>((uint64_t)&v302, (re::DynamicString *)&v273, "true");
        uint64_t v134 = (_anonymous_namespace_ *)v273;
        if ((void)v273)
        {
          if (BYTE8(v273)) {
            uint64_t v134 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v273 + 40))();
          }
        }
      }
    }
    if (v313)
    {
      char v135 = v315;
      uint64_t v136 = &v315[v313];
      do
      {
        v293[0] = 0;
        v293[0] = *v135;
        uint64_t v137 = re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::find((void *)v231, v293);
        re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::HashBrown((uint64_t)&v273, (uint64_t *)(*(void *)(v231 + 8) + 72 * v137 + 8));
        *(void *)&long long v299 = &v273;
        *((void *)&v299 + 1) = 0;
        if (*(void *)&v274[0] >= 0x10uLL)
        {
          uint64_t v138 = 0;
          uint64_t v139 = *(void *)&v274[0] >> 4;
          while (1)
          {
            unsigned __int16 v140 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v273 + v138)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
            *((void *)&v299 + 1) = (unsigned __int16)~v140;
            if (v140 != 0xFFFF) {
              break;
            }
            v138 += 16;
            if (!--v139) {
              goto LABEL_269;
            }
          }
          uint64_t v141 = __clz(__rbit64((unsigned __int16)~v140)) + v138;
          *(void *)&long long v300 = v141;
          if (v141 != -1)
          {
            do
            {
              uint64_t v142 = (unint64_t *)(*(void *)(v299 + 8) + 96 * v141);
              std::to_string(&v296, v142[10]);
              if ((v296.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                unint64_t v143 = &v296;
              }
              else {
                unint64_t v143 = (std::string *)v296.__r_.__value_.__r.__words[0];
              }
              v292[0] = (const char *)v143;
              re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const*>((uint64_t)&v302, (re::DynamicString *)v142, 2, v292);
              if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v296.__r_.__value_.__l.__data_);
              }
              re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v299);
              uint64_t v141 = v300;
            }
            while ((void)v300 != -1);
          }
        }
LABEL_269:
        re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)&v273);
        ++v135;
      }
      while (v135 != v136);
    }
    *(void *)&long long v299 = v231;
    *((void *)&v299 + 1) = v246;
    *(void *)&long long v300 = &v302;
    *((void *)&v300 + 1) = v306;
    *(void *)&long long v301 = v308;
    *((void *)&v301 + 1) = &v316;
    int v144 = *(unsigned __int8 *)(v231 + 952);
    long long v273 = 0u;
    v274[0] = 0u;
    re::DynamicString::setCapacity(&v273, 0);
    unint64_t v145 = re::PSOToolManager::enumerateFunctionConstantVariations(re::MaterialDefinitionFile const*,re::MaterialTechniqueData const&,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false> const&,re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,re::DynamicArray<re::PSOToolLinkedFunctionDescriptor> const&)::$_0::operator()((uint64_t)&v299, (uint64_t)v250, v144, (re::DynamicString *)&v273);
    uint64_t v146 = (_anonymous_namespace_ *)v273;
    if (void)v273 && (BYTE8(v273)) {
      uint64_t v146 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v273 + 40))();
    }
    int v147 = *(unsigned __int8 *)(v231 + 952);
    long long v273 = 0u;
    v274[0] = 0u;
    re::DynamicString::setCapacity(&v273, 0);
    unint64_t v148 = re::PSOToolManager::enumerateFunctionConstantVariations(re::MaterialDefinitionFile const*,re::MaterialTechniqueData const&,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false> const&,re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,re::DynamicArray<re::PSOToolLinkedFunctionDescriptor> const&)::$_0::operator()((uint64_t)&v299, (uint64_t)v254, v147, (re::DynamicString *)&v273);
    int v149 = (_anonymous_namespace_ *)v273;
    if (void)v273 && (BYTE8(v273)) {
      int v149 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v273 + 40))();
    }
    uint64_t v298 = 0;
    memset(&v296, 0, sizeof(v296));
    int v297 = 0;
    uint64_t v295 = 0;
    memset(v293, 0, sizeof(v293));
    int v294 = 0;
    if (*(unsigned char *)(v231 + 952))
    {
      memset(v274, 0, 40);
      long long v273 = 0u;
      re::DynamicString::setCapacity((void *)v274 + 1, 0);
      if (v234)
      {
        uint64_t v150 = v236;
        uint64_t v151 = 40 * v234;
        do
        {
          uint64_t v152 = re::DynamicString::operator=((re::DynamicString *)((char *)v274 + 8), v150);
          memset(v292, 0, sizeof(v292));
          re::DynamicString::setCapacity(v292, 0);
          unint64_t v291 = 0;
          unint64_t v291 = re::PSOToolManager::enumerateFunctionConstantVariations(re::MaterialDefinitionFile const*,re::MaterialTechniqueData const&,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false> const&,re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,re::DynamicArray<re::PSOToolLinkedFunctionDescriptor> const&)::$_0::operator()((uint64_t)&v299, (uint64_t)&v273, 1, (re::DynamicString *)v292);
          if (*((unsigned char *)v150 + 32)) {
            re::DynamicArray<unsigned long>::add(&v296, &v291);
          }
          if (*((unsigned char *)v150 + 33)) {
            re::DynamicArray<unsigned long>::add(v293, &v291);
          }
          if (v292[0] && ((uint64_t)v292[1] & 1) != 0) {
            (*(void (**)(void))(*(void *)v292[0] + 40))();
          }
          uint64_t v150 = (re::DynamicString *)((char *)v150 + 40);
          v151 -= 40;
        }
        while (v151);
      }
      if (*((void *)&v274[0] + 1))
      {
        if (v274[1]) {
          (*(void (**)(void))(**((void **)&v274[0] + 1) + 40))();
        }
        memset((char *)v274 + 8, 0, 32);
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v273);
    }
    *(void *)&long long v273 = v145;
    *((void *)&v273 + 1) = v148;
    v274[0] = v258;
    v274[1] = v259;
    v274[2] = v260;
    int v275 = v261;
    char v276 = v262;
    if (v262) {
      char v277 = v263;
    }
    re::DynamicArray<re::RenderAttachmentState>::DynamicArray((uint64_t)v278, v264);
    re::DynamicString::DynamicString((re::DynamicString *)&v280, (const re::DynamicString *)v246);
    char v282 = v272;
    re::DynamicArray<unsigned long>::DynamicArray((uint64_t)&v283, (uint64_t *)&v296);
    re::DynamicArray<unsigned long>::DynamicArray((uint64_t)&v287 + 8, v293);
    re::DynamicArray<re::PSOToolRenderDescriptor>::add(v231 + 808, (uint64_t)&v273);
    if (*((void *)&v287 + 1))
    {
      if (v290) {
        (*(void (**)(void))(**((void **)&v287 + 1) + 40))();
      }
      uint64_t v290 = 0;
      long long v288 = 0uLL;
      *((void *)&v287 + 1) = 0;
      ++v289;
    }
    if (v283)
    {
      if ((void)v287) {
        (*(void (**)(void))(*(void *)v283 + 40))();
      }
      *(void *)&long long v287 = 0;
      uint64_t v284 = 0;
      uint64_t v285 = 0;
      uint64_t v283 = 0;
      ++v286;
    }
    if ((void)v280)
    {
      if (BYTE8(v280)) {
        (*(void (**)(void))(*(void *)v280 + 40))();
      }
      long long v280 = 0u;
      long long v281 = 0u;
    }
    if (v278[0] && v279) {
      (*(void (**)(void))(*(void *)v278[0] + 40))();
    }
    if (v293[0] && v295) {
      (*(void (**)(void))(*(void *)v293[0] + 40))();
    }
    if (v296.__r_.__value_.__r.__words[0] && v298) {
      (*(void (**)(void))(*(void *)v296.__r_.__value_.__l.__data_ + 40))();
    }
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v302);
  }
  if (v307 <= *(void *)(v231 + 912))
  {
    unint64_t v229 = v307;
    if (*(unsigned char *)(v316 + 8)) {
      unint64_t v157 = *(const char **)(v316 + 16);
    }
    else {
      unint64_t v157 = (const char *)(v316 + 9);
    }
    size_t v166 = strlen(v157);
    unint64_t v167 = (void *)MEMORY[0x263F8C100];
    uint64_t v168 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x263F8C100], (uint64_t)v157, v166);
    int v169 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v168, (uint64_t)"_", 1);
    if (v247) {
      uint64_t v170 = v249;
    }
    else {
      uint64_t v170 = v248;
    }
    size_t v171 = strlen(v170);
    char v172 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v169, (uint64_t)v170, v171);
    int v173 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v172, (uint64_t)"_", 1);
    if (v252) {
      unint64_t v174 = v253;
    }
    else {
      unint64_t v174 = (char *)&v252 + 1;
    }
    size_t v175 = strlen(v174);
    uint64_t v176 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v173, (uint64_t)v174, v175);
    uint64_t v177 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v176, (uint64_t)"_", 1);
    if (v256) {
      uint64_t v178 = v257;
    }
    else {
      uint64_t v178 = (char *)&v256 + 1;
    }
    size_t v179 = strlen(v178);
    unint64_t v180 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v177, (uint64_t)v178, v179);
    std::ios_base::getloc((const std::ios_base *)((char *)v180 + *(void *)(*v180 - 24)));
    uint64_t v181 = (std::locale::id *)MEMORY[0x263F8C108];
    unint64_t v182 = std::locale::use_facet((const std::locale *)&v273, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v182->__vftable[2].~facet_0)(v182, 10);
    std::locale::~locale((std::locale *)&v273);
    std::ostream::put();
    std::ostream::flush();
    unint64_t v183 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v167, (uint64_t)"    ", 4);
    unint64_t v184 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v183, (uint64_t)"constants:", 10);
    std::ios_base::getloc((const std::ios_base *)((char *)v184 + *(void *)(*v184 - 24)));
    unint64_t v185 = std::locale::use_facet((const std::locale *)&v273, v181);
    ((void (*)(const std::locale::facet *, uint64_t))v185->__vftable[2].~facet_0)(v185, 10);
    std::locale::~locale((std::locale *)&v273);
    std::ostream::put();
    std::ostream::flush();
    if (v309)
    {
      unint64_t v186 = v311;
      uint64_t v187 = v311 + (v309 << 6);
      uint64_t v188 = (void *)MEMORY[0x263F8C100];
      uint64_t v189 = (std::locale::id *)MEMORY[0x263F8C108];
      do
      {
        re::DynamicString::DynamicString((re::DynamicString *)&v273, (const re::DynamicString *)v186);
        LODWORD(v274[1]) = *(_DWORD *)(v186 + 32);
        re::FixedArray<unsigned char>::FixedArray((void *)&v274[1] + 1, (uint64_t *)(v186 + 40));
        uint64_t v190 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v188, (uint64_t)"      ", 6);
        if (BYTE8(v273)) {
          uint64_t v191 = *(const char **)&v274[0];
        }
        else {
          uint64_t v191 = (char *)&v273 + 9;
        }
        size_t v192 = strlen(v191);
        uint64_t v193 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v190, (uint64_t)v191, v192);
        std::ios_base::getloc((const std::ios_base *)((char *)v193 + *(void *)(*v193 - 24)));
        int v194 = std::locale::use_facet((const std::locale *)&v302, v189);
        ((void (*)(const std::locale::facet *, uint64_t))v194->__vftable[2].~facet_0)(v194, 10);
        std::locale::~locale((std::locale *)&v302);
        std::ostream::put();
        std::ostream::flush();
        if (*((void *)&v274[1] + 1))
        {
          if (*(void *)&v274[2])
          {
            (*(void (**)(void))(**((void **)&v274[1] + 1) + 40))();
            v274[2] = 0uLL;
          }
          *((void *)&v274[1] + 1) = 0;
        }
        if (void)v273 && (BYTE8(v273)) {
          (*(void (**)(void))(*(void *)v273 + 40))();
        }
        v186 += 64;
      }
      while (v186 != v187);
    }
    re::FunctionConstantsEnumerator::printDebugData((re::FunctionConstantsEnumerator *)v306);
    unsigned int v304 = 0;
    long long v302 = 0u;
    long long v303 = 0u;
    uint64_t v305 = 0x7FFFFFFFLL;
    LODWORD(v301) = 0;
    long long v299 = 0u;
    long long v300 = 0u;
    *(void *)((char *)&v301 + 4) = 0x7FFFFFFFLL;
    if (v229)
    {
      unint64_t v195 = 0;
      unsigned int v196 = 1;
      do
      {
        Permutatiouint64_t n = (_anonymous_namespace_ *)re::FunctionConstantsEnumerator::createPermutation((_anonymous_namespace_ *)v306, v195, v311, v309, (uint64_t)&v296);
        v293[0] = 0;
        v292[0] = 0;
        if (v252) {
          unint64_t v198 = v252 >> 1;
        }
        else {
          unint64_t v198 = v252 >> 1;
        }
        if (v198)
        {
          uint64_t v199 = v316;
          uint64_t v200 = v298;
          unint64_t v201 = v296.__r_.__value_.__r.__words[2];
          long long v273 = 0u;
          v274[0] = 0u;
          re::DynamicString::setCapacity(&v273, 0);
          Permutatiouint64_t n = (_anonymous_namespace_ *)re::PSOToolManager::addFunctionConstantVariation(v231, v199, (uint64_t)v246, (uint64_t)v250, v200, v201, 0, (re::DynamicString *)&v273);
          v293[0] = (uint64_t)Permutation;
          if (void)v273 && (BYTE8(v273))
          {
            (*(void (**)(void, void))(*(void *)v273 + 40))(v273, *(void *)&v274[0]);
            Permutatiouint64_t n = (_anonymous_namespace_ *)v293[0];
          }
          if (Permutation) {
            Permutatiouint64_t n = (_anonymous_namespace_ *)re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add((uint64_t)&v302, v293);
          }
        }
        if (v256) {
          unint64_t v202 = v256 >> 1;
        }
        else {
          unint64_t v202 = v256 >> 1;
        }
        if (v202)
        {
          uint64_t v203 = v316;
          uint64_t v204 = v298;
          unint64_t v205 = v296.__r_.__value_.__r.__words[2];
          long long v273 = 0u;
          v274[0] = 0u;
          re::DynamicString::setCapacity(&v273, 0);
          uint64_t v206 = (const char *)re::PSOToolManager::addFunctionConstantVariation(v231, v203, (uint64_t)v246, (uint64_t)v254, v204, v205, 0, (re::DynamicString *)&v273);
          v292[0] = v206;
          if (void)v273 && (BYTE8(v273))
          {
            (*(void (**)(void, void))(*(void *)v273 + 40))(v273, *(void *)&v274[0]);
            uint64_t v206 = v292[0];
          }
          if (v206) {
            re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add((uint64_t)&v299, (uint64_t *)v292);
          }
        }
        if (v252) {
          int v207 = v253;
        }
        else {
          int v207 = (char *)&v252 + 1;
        }
        if (strcmp(v207, "realitykit::vsGeometryModifier") && v293[0] | (uint64_t)v292[0])
        {
          *(void *)&long long v273 = v293[0];
          *((const char **)&v273 + 1) = v292[0];
          v274[0] = v258;
          v274[1] = v259;
          v274[2] = v260;
          int v275 = v261;
          char v276 = v262;
          if (v262) {
            char v277 = v263;
          }
          re::DynamicArray<re::RenderAttachmentState>::DynamicArray((uint64_t)v278, v264);
          re::DynamicString::DynamicString((re::DynamicString *)&v280, (const re::DynamicString *)v246);
          char v282 = v272;
          uint64_t v284 = 0;
          uint64_t v285 = 0;
          uint64_t v283 = 0;
          int v286 = 0;
          uint64_t v290 = 0;
          long long v287 = 0u;
          long long v288 = 0u;
          int v289 = 0;
          re::DynamicArray<re::PSOToolRenderDescriptor>::add(v231 + 808, (uint64_t)&v273);
          if (*((void *)&v287 + 1))
          {
            if (v290) {
              (*(void (**)(void))(**((void **)&v287 + 1) + 40))();
            }
            uint64_t v290 = 0;
            long long v288 = 0uLL;
            *((void *)&v287 + 1) = 0;
            ++v289;
          }
          if (v283)
          {
            if ((void)v287) {
              (*(void (**)(void))(*(void *)v283 + 40))();
            }
            *(void *)&long long v287 = 0;
            uint64_t v284 = 0;
            uint64_t v285 = 0;
            uint64_t v283 = 0;
            ++v286;
          }
          if ((void)v280)
          {
            if (BYTE8(v280)) {
              (*(void (**)(void))(*(void *)v280 + 40))();
            }
            long long v280 = 0u;
            long long v281 = 0u;
          }
          if (v278[0] && v279) {
            (*(void (**)(void))(*(void *)v278[0] + 40))();
          }
        }
        re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v296);
        unint64_t v195 = v196;
      }
      while (v229 > v196++);
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x263F8C100], (uint64_t)"Generated ", 10);
    long long v209 = (void *)std::ostream::operator<<();
    long long v210 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v209, (uint64_t)" unique permutations for ", 25);
    if (v252) {
      uint64_t v211 = v253;
    }
    else {
      uint64_t v211 = (char *)&v252 + 1;
    }
    size_t v212 = strlen(v211);
    uint64_t v213 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v210, (uint64_t)v211, v212);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v213, (uint64_t)" (", 2);
    unint64_t v214 = (void *)std::ostream::operator<<();
    uint64_t v215 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v214, (uint64_t)")", 1);
    int v216 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v215, (uint64_t)" ", 1);
    if (v256) {
      uint64_t v217 = v257;
    }
    else {
      uint64_t v217 = (char *)&v256 + 1;
    }
    size_t v218 = strlen(v217);
    unint64_t v219 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v216, (uint64_t)v217, v218);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v219, (uint64_t)" (", 2);
    int v220 = (void *)std::ostream::operator<<();
    id v221 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v220, (uint64_t)")", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v221 + *(void *)(*v221 - 24)));
    v222 = (std::locale::id *)MEMORY[0x263F8C108];
    long long v223 = std::locale::use_facet((const std::locale *)&v273, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v223->__vftable[2].~facet_0)(v223, 10);
    std::locale::~locale((std::locale *)&v273);
    std::ostream::put();
    std::ostream::flush();
    std::ios_base::getloc((const std::ios_base *)((char *)v221 + *(void *)(*v221 - 24)));
    long long v224 = std::locale::use_facet((const std::locale *)&v273, v222);
    ((void (*)(const std::locale::facet *, uint64_t))v224->__vftable[2].~facet_0)(v224, 10);
    std::locale::~locale((std::locale *)&v273);
    std::ostream::put();
    std::ostream::flush();
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v299);
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v302);
  }
  else
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x263F8C100], (uint64_t)"More than ", 10);
    uint64_t v153 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v153, (uint64_t)" permutations (", 15);
    uint64_t v154 = (void *)std::ostream::operator<<();
    uint64_t v155 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v154, (uint64_t)") to precompile for ", 20);
    if (*(unsigned char *)(v316 + 8)) {
      int v156 = *(const char **)(v316 + 16);
    }
    else {
      int v156 = (const char *)(v316 + 9);
    }
    size_t v158 = strlen(v156);
    uint64_t v159 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v155, (uint64_t)v156, v158);
    uint64_t v160 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v159, (uint64_t)"_", 1);
    if (v247) {
      uint64_t v161 = v249;
    }
    else {
      uint64_t v161 = v248;
    }
    size_t v162 = strlen(v161);
    unint64_t v163 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v160, (uint64_t)v161, v162);
    unint64_t v164 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v163, (uint64_t)", skipping.", 11);
    std::ios_base::getloc((const std::ios_base *)((char *)v164 + *(void *)(*v164 - 24)));
    int64x2_t v165 = std::locale::use_facet((const std::locale *)&v273, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v165->__vftable[2].~facet_0)(v165, 10);
    std::locale::~locale((std::locale *)&v273);
    std::ostream::put();
    std::ostream::flush();
  }
  re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::deinit(v306);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v308);
  if (v312[0] && v315) {
    (*(void (**)(void))(*(void *)v312[0] + 40))();
  }
  uint64_t v225 = v233[0];
  if (v233[0])
  {
    unint64_t v226 = v236;
    if (v236)
    {
      if (v234)
      {
        uint64_t v227 = 40 * v234;
        long long v228 = v236;
        do
        {
          re::DynamicString::deinit(v228);
          long long v228 = (re::DynamicString *)((char *)v228 + 40);
          v227 -= 40;
        }
        while (v227);
      }
      (*(void (**)(uint64_t, re::DynamicString *))(*(void *)v225 + 40))(v225, v226);
    }
  }
  re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v237);
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)v241);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v242);
  re::MaterialTechniqueData::~MaterialTechniqueData((re::MaterialTechniqueData *)v246);
}

void re::PSOToolManager::gatherFunctionConstantsForShader(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, _anonymous_namespace_ *a6, uint64_t a7)
{
  uint64_t v81 = *MEMORY[0x263EF8340];
  int v13 = (void *)(a1 + 64);
  if (!re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(a1 + 64, (uint64_t)a3))
  {
    if (a3[1]) {
      uint64_t v14 = (re::ns *)a3[2];
    }
    else {
      uint64_t v14 = (re::ns *)((char *)a3 + 9);
    }
    re::mtl::Library::makeFunction((void **)(a1 + 160), v14, &v76);
    if (!v76)
    {
      int v56 = std::operator<<[abi:nn180100]<std::char_traits<char>>(MEMORY[0x263F8C0F8], "Failed to make function ");
      if (a3[1]) {
        uint64_t v57 = (char *)a3[2];
      }
      else {
        uint64_t v57 = (char *)a3 + 9;
      }
      unsigned int v58 = std::operator<<[abi:nn180100]<std::char_traits<char>>(v56, v57);
      std::endl[abi:nn180100]<char,std::char_traits<char>>(v58);
      re::internal::assertLog((re::internal *)4, v59, "assertion failure: '%s' (%s:line %i) ", "false", "gatherFunctionConstantsForShader", 233, a7);
      _os_crash();
      __break(1u);
      return;
    }
    re::HashTable<re::DynamicString,NS::SharedPtr<MTL::Function>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<NS::SharedPtr<MTL::Function>&>((uint64_t)v13, (const re::DynamicString *)a3, (id *)&v76);
    if (v76) {
  }
    }
  unint64_t v15 = re::Hash<re::DynamicString>::operator()((uint64_t)&v76, (uint64_t)a3);
  uint64_t v16 = 0x7FFFFFFFLL;
  if (*v13)
  {
    uint64_t v17 = *(unsigned int *)(*(void *)(a1 + 72) + 4 * (v15 % *(unsigned int *)(a1 + 88)));
    if (v17 != 0x7FFFFFFF)
    {
      uint64_t v18 = *(void *)(a1 + 80);
      uint64_t v16 = 0x7FFFFFFFLL;
      while (!re::DynamicString::operator==(v18 + 56 * v17 + 16, (uint64_t)a3))
      {
        uint64_t v17 = *(_DWORD *)(v18 + 56 * v17 + 8) & 0x7FFFFFFF;
        if (v17 == 0x7FFFFFFF) {
          goto LABEL_15;
        }
      }
      uint64_t v16 = v17;
    }
  }
LABEL_15:
  id v19 = *(id *)(*(void *)(a1 + 80) + 56 * v16 + 48);
  uint64_t v20 = v19;
  if (*(_DWORD *)(a2 + 404))
  {
    if (*(void *)(a2 + 8)) {
      uint64_t v21 = *(void *)(a2 + 16);
    }
    else {
      uint64_t v21 = a2 + 9;
    }
    id v74 = v19;
    re::parseVariationTable(v21, &v74, a5, (uint64_t)&v76);
    if (v74)
    {

      id v74 = 0;
    }
    if ((_BYTE)v76)
    {
      if (&v77 != (uint64_t *)a6) {
        re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::copy(a6, &v77);
      }
    }
    else
    {
      uint64_t v22 = (void *)MEMORY[0x263F8C0F8];
      uint64_t v23 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"Failed to parse function constants for ", 39);
      if (*(void *)(a2 + 8)) {
        uint64_t v24 = *(const char **)(a2 + 16);
      }
      else {
        uint64_t v24 = (const char *)(a2 + 9);
      }
      size_t v25 = strlen(v24);
      unint64_t v26 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
      std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*v26 - 24)));
      unint64_t v27 = (std::locale::id *)MEMORY[0x263F8C108];
      uint64_t v28 = std::locale::use_facet(&v73, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
      std::locale::~locale(&v73);
      std::ostream::put();
      std::ostream::flush();
      if (v78) {
        uint64_t v29 = v80;
      }
      else {
        uint64_t v29 = v79;
      }
      size_t v30 = strlen(v29);
      unsigned int v31 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)v29, v30);
      std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(void *)(*v31 - 24)));
      uint64_t v32 = std::locale::use_facet(&v73, v27);
      ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
      std::locale::~locale(&v73);
      std::ostream::put();
      std::ostream::flush();
    }
    re::Result<re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::DynamicString>::~Result((unsigned __int8 *)&v76);
  }
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)&v73, a4);
  uint64_t v33 = *(void *)(a2 + 272);
  if (v33)
  {
    uint64_t v34 = 32 * v33 - 32;
    unint64_t v35 = (unsigned __int8 *)(*(void *)(a2 + 288) + 1);
    do
    {
      int v36 = *v35;
      v35 += 32;
      BOOL v37 = v36 != 0;
      if (v36) {
        BOOL v38 = 1;
      }
      else {
        BOOL v38 = v34 == 0;
      }
      v34 -= 32;
    }
    while (!v38);
  }
  else
  {
    BOOL v37 = *(unsigned char *)(a2 + 201) != 0;
  }
  re::MaterialManager::addSupportConstantsToArray((_anonymous_namespace_ *)1, 1, 1, v37, 0, (uint64_t)&v73);
  if (*(void *)(a2 + 8)) {
    uint64_t v39 = *(_anonymous_namespace_ **)(a2 + 16);
  }
  else {
    uint64_t v39 = (_anonymous_namespace_ *)(a2 + 9);
  }
  id v40 = objc_msgSend(v20, sel_functionConstantsDictionary);
  *(_OWORD *)&v69[0].__locale_ = 0u;
  long long v70 = 0u;
  int v71 = 0;
  uint64_t v72 = 0x7FFFFFFFLL;
  id v41 = objc_msgSend(v40, sel_keyEnumerator);
  id v42 = objc_msgSend(v41, sel_nextObject);
  if (v42)
  {
    id v43 = v42;
    do
    {
      uint64_t v76 = (char *)objc_msgSend(v43, sel_UTF8String);
      id v75 = objc_msgSend(v40, sel_objectForKey_, v43);
      re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::add((uint64_t)v69, &v76, &v75);
      if (v75) {

      }
      id v43 = objc_msgSend(v41, sel_nextObject);
    }
    while (v43);
  }
  v67[0] = 0;
  v61[0] = 0;
  double v44 = re::parseFunctionConstants(v39, (uint64_t)v69, (uint64_t)&v73, v67, (uint64_t)v61, 0, 0, 0, (uint64_t)&v76);
  if (v61[0] && v62)
  {
    if (v66) {
      (*(void (**)(double))(*(void *)v62 + 40))(v44);
    }
    uint64_t v66 = 0;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    uint64_t v62 = 0;
    ++v65;
  }
  if (v67[0]) {
    re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v68);
  }
  re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v69);
  if ((_BYTE)v76)
  {
    re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a7, (uint64_t)&v77);
  }
  else
  {
    uint64_t v45 = (void *)MEMORY[0x263F8C0F8];
    uint64_t v46 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"Failed to parse function constants for ", 39);
    if (*(void *)(a2 + 8)) {
      uint64_t v47 = *(const char **)(a2 + 16);
    }
    else {
      uint64_t v47 = (const char *)(a2 + 9);
    }
    size_t v48 = strlen(v47);
    uint64_t v49 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)v47, v48);
    std::ios_base::getloc((const std::ios_base *)((char *)v49 + *(void *)(*v49 - 24)));
    unint64_t v50 = (std::locale::id *)MEMORY[0x263F8C108];
    unint64_t v51 = std::locale::use_facet(v69, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10);
    std::locale::~locale(v69);
    std::ostream::put();
    std::ostream::flush();
    if (v78) {
      unint64_t v52 = v80;
    }
    else {
      unint64_t v52 = v79;
    }
    size_t v53 = strlen(v52);
    uint64_t v54 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)v52, v53);
    std::ios_base::getloc((const std::ios_base *)((char *)v54 + *(void *)(*v54 - 24)));
    int v55 = std::locale::use_facet(v69, v50);
    ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
    std::locale::~locale(v69);
    std::ostream::put();
    std::ostream::flush();
  }
  re::Result<re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::DynamicString>::~Result((unsigned __int8 *)&v76);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v73);
  if (v20) {
}
  }

id re::HashTable<re::DynamicString,NS::SharedPtr<MTL::Function>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<NS::SharedPtr<MTL::Function>&>(uint64_t a1, const re::DynamicString *a2, id *a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v17, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    uint64_t v12 = *(unsigned int *)(a1 + 36);
    if (v12 == 0x7FFFFFFF)
    {
      uint64_t v12 = *(unsigned int *)(a1 + 32);
      int v13 = v12;
      if (v12 == *(_DWORD *)(a1 + 24))
      {
        re::HashTable<re::DynamicString,NS::SharedPtr<MTL::Function>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
        LODWORD(v8) = v7 % *(unsigned int *)(a1 + 24);
        int v13 = *(_DWORD *)(a1 + 32);
      }
      *(_DWORD *)(a1 + 32) = v13 + 1;
      uint64_t v14 = *(void *)(a1 + 16);
      int v15 = *(_DWORD *)(v14 + 56 * v12 + 8);
    }
    else
    {
      uint64_t v14 = *(void *)(a1 + 16);
      int v15 = *(_DWORD *)(v14 + 56 * v12 + 8);
      *(_DWORD *)(a1 + 36) = v15 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v14 + 56 * v12 + 8) = v15 | 0x80000000;
    *(_DWORD *)(*(void *)(a1 + 16) + 56 * v12 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 56 * v12 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v8);
    *(void *)(*(void *)(a1 + 16) + 56 * v12) = v7;
    re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 56 * v12 + 16), a2);
    uint64_t v16 = *(void *)(a1 + 16) + 56 * v12;
    id result = *a3;
    *(void *)(v16 + 48) = result;
    *(_DWORD *)(*(void *)(a1 + 8) + 4 * v8) = v12;
    ++*(_DWORD *)(a1 + 28);
    ++*(_DWORD *)(a1 + 40);
    return result;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (1)
  {
    id result = (id)re::DynamicString::operator==(v10 + 56 * v9 + 16, (uint64_t)a2);
    if (result) {
      return result;
    }
    uint64_t v9 = *(_DWORD *)(v10 + 56 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
}

unint64_t re::PSOToolManager::enumerateFunctionConstantVariations(re::MaterialDefinitionFile const*,re::MaterialTechniqueData const&,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false> const&,re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,re::DynamicArray<re::PSOToolLinkedFunctionDescriptor> const&)::$_0::operator()(uint64_t a1, uint64_t a2, int a3, re::DynamicString *a4)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)a1;
  int v64 = 0;
  memset(v63, 0, sizeof(v63));
  uint64_t v65 = 0x7FFFFFFFLL;
  uint64_t v62 = 0;
  v59[1] = 0;
  unint64_t v60 = 0;
  v59[0] = 0;
  int v61 = 0;
  re::DynamicString::DynamicString((re::DynamicString *)&v57, (const re::DynamicString *)(a2 + 24));
  if (v58) {
    unint64_t v10 = v58 >> 1;
  }
  else {
    unint64_t v10 = v58 >> 1;
  }
  if (v10)
  {
    int v36 = a4;
    unint64_t v11 = re::Hash<re::DynamicString>::operator()((uint64_t)&v40, (uint64_t)&v57);
    uint64_t v12 = 0x7FFFFFFFLL;
    if (*(void *)(v8 + 64))
    {
      uint64_t v13 = *(unsigned int *)(*(void *)(v8 + 72) + 4 * (v11 % *(unsigned int *)(v8 + 88)));
      if (v13 != 0x7FFFFFFF)
      {
        uint64_t v14 = *(void *)(v8 + 80);
        uint64_t v12 = 0x7FFFFFFFLL;
        while (!re::DynamicString::operator==(v14 + 56 * v13 + 16, (uint64_t)&v57))
        {
          uint64_t v13 = *(_DWORD *)(v14 + 56 * v13 + 8) & 0x7FFFFFFF;
          if (v13 == 0x7FFFFFFF) {
            goto LABEL_13;
          }
        }
        uint64_t v12 = v13;
      }
    }
LABEL_13:
    id v16 = objc_msgSend(*(id *)(*(void *)(v8 + 80) + 56 * v12 + 48), sel_functionConstantsDictionary);
    memset(v54, 0, sizeof(v54));
    int v55 = 0;
    uint64_t v56 = 0x7FFFFFFFLL;
    id v17 = objc_msgSend(v16, sel_keyEnumerator);
    id v18 = objc_msgSend(v17, sel_nextObject);
    if (v18)
    {
      id v19 = v18;
      do
      {
        id v40 = (char *)objc_msgSend(v19, sel_UTF8String);
        v66[0] = objc_msgSend(v16, sel_objectForKey_, v19);
        re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::add((uint64_t)v54, &v40, v66);
        if (v66[0]) {

        }
        id v19 = objc_msgSend(v17, sel_nextObject);
      }
      while (v19);
    }
    uint64_t v20 = *(void *)(a1 + 8);
    if (*(unsigned char *)(v20 + 8)) {
      uint64_t v21 = *(_anonymous_namespace_ **)(v20 + 16);
    }
    else {
      uint64_t v21 = (_anonymous_namespace_ *)(v20 + 9);
    }
    uint64_t v22 = *(void *)(a1 + 16);
    v52[0] = 0;
    v46[0] = 0;
    double v23 = re::parseFunctionConstants(v21, (uint64_t)v54, v22, v52, (uint64_t)v46, 0, 0, 1, (uint64_t)v66);
    if (v46[0] && v47)
    {
      if (v51) {
        (*(void (**)(double))(*(void *)v47 + 40))(v23);
      }
      uint64_t v51 = 0;
      uint64_t v48 = 0;
      uint64_t v49 = 0;
      uint64_t v47 = 0;
      ++v50;
    }
    if (v52[0]) {
      re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v53);
    }
    unsigned int v24 = v68;
    if (v68)
    {
      uint64_t v25 = 0;
      unint64_t v26 = (int *)(v67 + 8);
      while (1)
      {
        int v27 = *v26;
        v26 += 28;
        if (v27 < 0) {
          break;
        }
        if (v68 == ++v25)
        {
          LODWORD(v25) = v68;
          break;
        }
      }
    }
    else
    {
      LODWORD(v25) = 0;
    }
    if (v68 != v25)
    {
      uint64_t v28 = v25;
      uint64_t v29 = v67;
      do
      {
        uint64_t v30 = v29 + 112 * v28;
        re::DynamicString::DynamicString((re::DynamicString *)&v40, (const re::DynamicString *)(v30 + 48));
        int v42 = *(_DWORD *)(v30 + 80);
        re::FixedArray<unsigned char>::FixedArray(&v43, (uint64_t *)(v30 + 88));
        if (!re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)v63, (uint64_t)&v40))
        {
          re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add((uint64_t)v63, (re::DynamicString *)&v40);
          re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v59, (re::DynamicString *)&v40);
        }
        if (v43)
        {
          if (v44)
          {
            (*(void (**)(void))(*(void *)v43 + 40))();
            uint64_t v44 = 0;
            uint64_t v45 = 0;
          }
          uint64_t v43 = 0;
        }
        if (v40 && (v41 & 1) != 0) {
          (*(void (**)(void))(*(void *)v40 + 40))();
        }
        uint64_t v29 = v67;
        if (v68 <= (int)v25 + 1) {
          unsigned int v31 = v25 + 1;
        }
        else {
          unsigned int v31 = v68;
        }
        while (1)
        {
          uint64_t v28 = (v25 + 1);
          if (v31 - 1 == v25) {
            break;
          }
          LODWORD(v25) = v25 + 1;
          unsigned int v32 = v28;
          if ((*(_DWORD *)(v67 + 112 * v28 + 8) & 0x80000000) != 0) {
            goto LABEL_52;
          }
        }
        unsigned int v32 = v31;
LABEL_52:
        LODWORD(v25) = v32;
      }
      while (v24 != v32);
    }
    re::FunctionConstantsEnumerator::createPermutation(*(_anonymous_namespace_ **)(a1 + 24), 0, *(void *)(*(void *)(a1 + 32) + 32), *(void *)(*(void *)(a1 + 32) + 16), (uint64_t)v37);
    if (v38)
    {
      uint64_t v33 = v39;
      uint64_t v34 = (re::DynamicString *)((char *)v39 + 64 * v38);
      do
      {
        re::DynamicString::DynamicString((re::DynamicString *)&v40, v33);
        int v42 = *((_DWORD *)v33 + 8);
        re::FixedArray<unsigned char>::FixedArray(&v43, (uint64_t *)v33 + 5);
        if (!re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)v63, (uint64_t)&v40))
        {
          re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add((uint64_t)v63, (re::DynamicString *)&v40);
          re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v59, (re::DynamicString *)&v40);
        }
        if (v43)
        {
          if (v44)
          {
            (*(void (**)(void))(*(void *)v43 + 40))();
            uint64_t v44 = 0;
            uint64_t v45 = 0;
          }
          uint64_t v43 = 0;
        }
        if (v40 && (v41 & 1) != 0) {
          (*(void (**)(void))(*(void *)v40 + 40))();
        }
        uint64_t v33 = (re::DynamicString *)((char *)v33 + 64);
      }
      while (v33 != v34);
    }
    re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v37);
    unint64_t v15 = re::PSOToolManager::addFunctionConstantVariation(v8, **(void **)(a1 + 40), *(void *)(a1 + 8), a2, v62, v60, a3, v36);
    re::Result<re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::DynamicString>::~Result((unsigned __int8 *)v66);
    v9.n128_f64[0] = re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v54);
  }
  else
  {
    unint64_t v15 = 0;
  }
  if (v57 && (v58 & 1) != 0) {
    (*(void (**)(__n128))(*(void *)v57 + 40))(v9);
  }
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v59);
  re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v63);
  return v15;
}

void re::DynamicArray<re::PSOToolRenderDescriptor>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)a1)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        re::DynamicArray<re::PSOToolRenderDescriptor>::setCapacity((void *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::PSOToolRenderDescriptor>::setCapacity((void *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    unint64_t v5 = *(void *)(a1 + 16);
  }
  re::PSOToolRenderDescriptor::PSOToolRenderDescriptor(*(void *)(a1 + 32) + 232 * v5, a2);
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
}

unint64_t re::PSOToolManager::addFunctionConstantVariation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, int a7, re::DynamicString *a8)
{
  re::DynamicString::DynamicString((re::DynamicString *)&v97, (const re::DynamicString *)(a4 + 24));
  unint64_t v12 = re::Hash<re::DynamicString>::operator()((uint64_t)&v109, (uint64_t)&v97);
  uint64_t v13 = 0x7FFFFFFFLL;
  int v79 = a8;
  if (*(void *)(a1 + 64))
  {
    uint64_t v14 = *(unsigned int *)(*(void *)(a1 + 72) + 4 * (v12 % *(unsigned int *)(a1 + 88)));
    if (v14 != 0x7FFFFFFF)
    {
      uint64_t v15 = *(void *)(a1 + 80);
      uint64_t v13 = 0x7FFFFFFFLL;
      while (!re::DynamicString::operator==(v15 + 56 * v14 + 16, (uint64_t)&v97))
      {
        uint64_t v14 = *(_DWORD *)(v15 + 56 * v14 + 8) & 0x7FFFFFFF;
        if (v14 == 0x7FFFFFFF) {
          goto LABEL_8;
        }
      }
      uint64_t v13 = v14;
    }
  }
LABEL_8:
  id v16 = objc_msgSend(*(id *)(*(void *)(a1 + 80) + 56 * v13 + 48), sel_functionConstantsDictionary);
  long long v93 = 0u;
  long long v94 = 0u;
  int v95 = 0;
  uint64_t v96 = 0x7FFFFFFFLL;
  id v17 = objc_msgSend(v16, sel_keyEnumerator);
  id v18 = (_anonymous_namespace_ *)objc_msgSend(v17, sel_nextObject);
  if (v18)
  {
    id v19 = v18;
    do
    {
      *(void *)&long long v109 = [(_anonymous_namespace_ *)v19 UTF8String];
      v100[0] = objc_msgSend(v16, sel_objectForKey_, v19);
      re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::add((uint64_t)&v93, (char **)&v109, v100);
      if (v100[0]) {

      }
      id v18 = (_anonymous_namespace_ *)objc_msgSend(v17, sel_nextObject);
      id v19 = v18;
    }
    while (v18);
  }
  v81[0] = 0;
  v81[1] = 0;
  int v83 = 0;
  uint64_t v82 = 0;
  memset(v84, 0, sizeof(v84));
  uint64_t v20 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v84[8], 0);
  long long v86 = 0u;
  long long v85 = 0u;
  uint64_t v21 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v85, 0);
  long long v88 = 0u;
  long long v87 = 0u;
  uint64_t v22 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v87, 0);
  long long v90 = 0u;
  long long v89 = 0u;
  double v23 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v89, 0);
  char v92 = 0;
  re::DynamicArray<re::TechniqueFunctionConstant>::setCapacity(v81, a6);
  ++v83;
  if (a6)
  {
    uint64_t v24 = a5 + (a6 << 6);
    do
    {
      re::DynamicString::DynamicString((re::DynamicString *)&v109, (const re::DynamicString *)a5);
      LODWORD(v111) = *(_DWORD *)(a5 + 32);
      re::FixedArray<unsigned char>::FixedArray(&v112, (uint64_t *)(a5 + 40));
      if (BYTE8(v109)) {
        uint64_t v25 = (char *)v110;
      }
      else {
        uint64_t v25 = (char *)&v109 + 9;
      }
      v100[0] = v25;
      if (re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::containsKey((uint64_t)&v93, (char **)v100))
      {
        re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v81, (re::DynamicString *)&v109);
      }
      if ((void)v112)
      {
        if (*((void *)&v112 + 1))
        {
          (*(void (**)(void))(*(void *)v112 + 40))();
          *((void *)&v112 + 1) = 0;
          *(void *)&long long v113 = 0;
        }
        *(void *)&long long v112 = 0;
      }
      if (void)v109 && (BYTE8(v109)) {
        (*(void (**)(void))(*(void *)v109 + 40))();
      }
      a5 += 64;
    }
    while (a5 != v24);
  }
  re::DynamicArray<re::TechniqueFunctionConstant>::DynamicArray((uint64_t)&v109, v81);
  re::DynamicString::DynamicString((re::DynamicString *)&v112, (const re::DynamicString *)&v84[8]);
  re::DynamicString::DynamicString((re::DynamicString *)v114, (const re::DynamicString *)&v85);
  re::DynamicString::DynamicString((re::DynamicString *)v115, (const re::DynamicString *)&v87);
  re::DynamicString::DynamicString((re::DynamicString *)v116, (const re::DynamicString *)&v89);
  long long v117 = v91;
  char v118 = v92;
  re::DynamicArray<re::TechniqueFunctionConstant>::DynamicArray((uint64_t)v100, v81);
  re::DynamicString::DynamicString((re::DynamicString *)v103, (const re::DynamicString *)&v84[8]);
  re::DynamicString::DynamicString((re::DynamicString *)v104, (const re::DynamicString *)&v85);
  re::DynamicString::DynamicString((re::DynamicString *)v105, (const re::DynamicString *)&v87);
  re::DynamicString::DynamicString((re::DynamicString *)v106, (const re::DynamicString *)&v89);
  long long v107 = v91;
  char v108 = v92;
  if ((void)v110)
  {
    unint64_t v26 = v111;
    int v27 = (re::DynamicString *)((char *)v111 + 64 * (void)v110);
    uint64_t v28 = &v125;
    while (1)
    {
      re::DynamicString::DynamicString((re::DynamicString *)&v119, v26);
      int v123 = *((_DWORD *)v26 + 8);
      re::FixedArray<unsigned char>::FixedArray(&v124, (uint64_t *)v26 + 5);
      if (v120) {
        uint64_t v29 = v122;
      }
      else {
        uint64_t v29 = v121;
      }
      int v30 = strcmp(v29, "EnableVRROnCapableDevice");
      if (v124)
      {
        if (v125)
        {
          (*(void (**)(void))(*(void *)v124 + 40))();
          uint64_t v125 = 0;
          uint64_t v126 = 0;
        }
        uint64_t v124 = 0;
      }
      if (v119 && (v120 & 1) != 0) {
        (*(void (**)(void))(*(void *)v119 + 40))();
      }
      if (!v30) {
        break;
      }
      unint64_t v26 = (re::DynamicString *)((char *)v26 + 64);
      if (v26 == v27) {
        goto LABEL_42;
      }
    }
    if (v101)
    {
      unint64_t v35 = v102;
      int v36 = (re::DynamicString *)((char *)v102 + 64 * v101);
      while (1)
      {
        re::DynamicString::DynamicString((re::DynamicString *)&v119, v35);
        int v123 = *((_DWORD *)v35 + 8);
        re::FixedArray<unsigned char>::FixedArray(&v124, (uint64_t *)v35 + 5);
        if (v120) {
          BOOL v37 = v122;
        }
        else {
          BOOL v37 = v121;
        }
        int v38 = strcmp(v37, "EnableVRROnCapableDevice");
        if (!v38) {
          LOBYTE(v28) = re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)&v119) != 0;
        }
        if (v124)
        {
          if (v125)
          {
            (*(void (**)(void))(*(void *)v124 + 40))();
            uint64_t v125 = 0;
            uint64_t v126 = 0;
          }
          uint64_t v124 = 0;
        }
        if (v119 && (v120 & 1) != 0) {
          (*(void (**)(void))(*(void *)v119 + 40))();
        }
        if (!v38) {
          break;
        }
        unint64_t v35 = (re::DynamicString *)((char *)v35 + 64);
        if (v35 == v36) {
          goto LABEL_128;
        }
      }
      if (v28)
      {
LABEL_42:
        if ((void)v110)
        {
          unsigned int v31 = v111;
          unsigned int v32 = (re::DynamicString *)((char *)v111 + 64 * (void)v110);
          while (1)
          {
            re::DynamicString::DynamicString((re::DynamicString *)&v119, v31);
            int v123 = *((_DWORD *)v31 + 8);
            re::FixedArray<unsigned char>::FixedArray(&v124, (uint64_t *)v31 + 5);
            if (v120) {
              uint64_t v33 = v122;
            }
            else {
              uint64_t v33 = v121;
            }
            int v34 = strcmp(v33, "EnableSingleRMAS");
            if (v124)
            {
              if (v125)
              {
                (*(void (**)(void))(*(void *)v124 + 40))();
                uint64_t v125 = 0;
                uint64_t v126 = 0;
              }
              uint64_t v124 = 0;
            }
            if (v119 && (v120 & 1) != 0) {
              (*(void (**)(void))(*(void *)v119 + 40))();
            }
            if (!v34) {
              break;
            }
            unsigned int v31 = (re::DynamicString *)((char *)v31 + 64);
            if (v31 == v32) {
              goto LABEL_128;
            }
          }
          if ((void)v110)
          {
            uint64_t v39 = v111;
            id v40 = (re::DynamicString *)((char *)v111 + 64 * (void)v110);
            char v41 = &v125;
            while (1)
            {
              re::DynamicString::DynamicString((re::DynamicString *)&v119, v39);
              int v123 = *((_DWORD *)v39 + 8);
              re::FixedArray<unsigned char>::FixedArray(&v124, (uint64_t *)v39 + 5);
              if (v120) {
                int v42 = v122;
              }
              else {
                int v42 = v121;
              }
              int v43 = strcmp(v42, "EnableSeparateRMAS");
              if (v124)
              {
                if (v125)
                {
                  (*(void (**)(void))(*(void *)v124 + 40))();
                  uint64_t v125 = 0;
                  uint64_t v126 = 0;
                }
                uint64_t v124 = 0;
              }
              if (v119 && (v120 & 1) != 0) {
                (*(void (**)(void))(*(void *)v119 + 40))();
              }
              if (!v43) {
                break;
              }
              uint64_t v39 = (re::DynamicString *)((char *)v39 + 64);
              if (v39 == v40) {
                goto LABEL_128;
              }
            }
            if (v101)
            {
              uint64_t v44 = v102;
              uint64_t v45 = (re::DynamicString *)((char *)v102 + 64 * v101);
              while (1)
              {
                re::DynamicString::DynamicString((re::DynamicString *)&v119, v44);
                int v123 = *((_DWORD *)v44 + 8);
                re::FixedArray<unsigned char>::FixedArray(&v124, (uint64_t *)v44 + 5);
                if (v120) {
                  uint64_t v46 = v122;
                }
                else {
                  uint64_t v46 = v121;
                }
                int v47 = strcmp(v46, "EnableSingleRMAS");
                if (!v47) {
                  LOBYTE(v41) = re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)&v119) != 0;
                }
                if (v124)
                {
                  if (v125)
                  {
                    (*(void (**)(void))(*(void *)v124 + 40))();
                    uint64_t v125 = 0;
                    uint64_t v126 = 0;
                  }
                  uint64_t v124 = 0;
                }
                if (v119 && (v120 & 1) != 0) {
                  (*(void (**)(void))(*(void *)v119 + 40))();
                }
                if (!v47) {
                  break;
                }
                uint64_t v44 = (re::DynamicString *)((char *)v44 + 64);
                if (v44 == v45) {
                  goto LABEL_128;
                }
              }
              if ((v41 & 1) != 0 && v101)
              {
                uint64_t v48 = v102;
                uint64_t v49 = (re::DynamicString *)((char *)v102 + 64 * v101);
                do
                {
                  re::DynamicString::DynamicString((re::DynamicString *)&v119, v48);
                  int v123 = *((_DWORD *)v48 + 8);
                  re::FixedArray<unsigned char>::FixedArray(&v124, (uint64_t *)v48 + 5);
                  if (v120) {
                    int v50 = v122;
                  }
                  else {
                    int v50 = v121;
                  }
                  int v51 = strcmp(v50, "EnableSeparateRMAS");
                  if (!v51) {
                    re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)&v119);
                  }
                  if (v124)
                  {
                    if (v125)
                    {
                      (*(void (**)(void))(*(void *)v124 + 40))();
                      uint64_t v125 = 0;
                      uint64_t v126 = 0;
                    }
                    uint64_t v124 = 0;
                  }
                  if (v119 && (v120 & 1) != 0) {
                    (*(void (**)(void))(*(void *)v119 + 40))();
                  }
                  uint64_t v48 = (re::DynamicString *)((char *)v48 + 64);
                  if (v51) {
                    BOOL v52 = v48 == v49;
                  }
                  else {
                    BOOL v52 = 1;
                  }
                }
                while (!v52);
              }
            }
          }
        }
      }
    }
  }
LABEL_128:
  uint64_t v53 = a1;
  if (v106[0])
  {
    if (v106[1]) {
      (*(void (**)(void))(*(void *)v106[0] + 40))();
    }
    memset(v106, 0, sizeof(v106));
  }
  if (v105[0])
  {
    if (v105[1]) {
      (*(void (**)(void))(*(void *)v105[0] + 40))();
    }
    memset(v105, 0, sizeof(v105));
  }
  if (v104[0])
  {
    if (v104[1]) {
      (*(void (**)(void))(*(void *)v104[0] + 40))();
    }
    memset(v104, 0, sizeof(v104));
  }
  if (v103[0])
  {
    if (v103[1]) {
      (*(void (**)(void))(*(void *)v103[0] + 40))();
    }
    memset(v103, 0, sizeof(v103));
  }
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v100);
  if (v116[0])
  {
    if (v116[1]) {
      (*(void (**)(void))(*(void *)v116[0] + 40))();
    }
    memset(v116, 0, sizeof(v116));
  }
  if (v115[0])
  {
    if (v115[1]) {
      (*(void (**)(void))(*(void *)v115[0] + 40))();
    }
    memset(v115, 0, sizeof(v115));
  }
  if (v114[0])
  {
    if (v114[1]) {
      (*(void (**)(void))(*(void *)v114[0] + 40))();
    }
    memset(v114, 0, sizeof(v114));
  }
  if ((void)v112)
  {
    if (BYTE8(v112)) {
      (*(void (**)(void))(*(void *)v112 + 40))();
    }
    long long v112 = 0u;
    long long v113 = 0u;
  }
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v109);
  re::DynamicString::operator=((re::DynamicString *)&v84[8], (re::DynamicString *)&v97);
  *(void *)&long long v109 = *(void *)v84;
  *((void *)&v109 + 1) = v82;
  if (v84[16]) {
    uint64_t v54 = *(const char **)&v84[24];
  }
  else {
    uint64_t v54 = &v84[17];
  }
  unint64_t FunctionVariantHash = re::generateFunctionVariantHash((uint64_t *)&v109, v54);
  v100[0] = (id)FunctionVariantHash;
  uint64_t v56 = (void *)(a1 + 360);
  if (re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey(a1 + 360, FunctionVariantHash))
  {
    goto LABEL_219;
  }
  if (*(unsigned char *)(a2 + 8)) {
    uint64_t v57 = *(void *)(a2 + 16);
  }
  else {
    uint64_t v57 = a2 + 9;
  }
  if (*(void *)(a3 + 8)) {
    uint64_t v58 = *(void *)(a3 + 16);
  }
  else {
    uint64_t v58 = a3 + 9;
  }
  if (v98) {
    uint64_t v59 = *(unsigned char **)&v99[7];
  }
  else {
    uint64_t v59 = v99;
  }
  re::DynamicString::format((re::DynamicString *)"%s_%s_%s_%zu", (re::DynamicString *)&v109, v57, v58, v59, FunctionVariantHash);
  re::DynamicString::operator=((re::DynamicString *)&v85, (re::DynamicString *)&v109);
  if (void)v109 && (BYTE8(v109)) {
    (*(void (**)(void))(*(void *)v109 + 40))();
  }
  re::AssetHandle::serializationString((re::AssetHandle *)a4, (re::DynamicString *)v80);
  re::makeTruncatedAssetPath((char *)v80, (re::DynamicString *)&v109);
  re::DynamicString::operator=((re::DynamicString *)&v87, (re::DynamicString *)&v109);
  if ((void)v109)
  {
    if (BYTE8(v109)) {
      (*(void (**)(void))(*(void *)v109 + 40))();
    }
    long long v109 = 0u;
    long long v110 = 0u;
  }
  if (*(void *)&v80[0])
  {
    if (BYTE8(v80[0])) {
      (*(void (**)(void))(**(void **)&v80[0] + 40))();
    }
    memset(v80, 0, sizeof(v80));
  }
  if (BYTE8(v87)) {
    uint64_t v60 = *((void *)&v87 + 1) >> 1;
  }
  else {
    uint64_t v60 = BYTE8(v87) >> 1;
  }
  if (!v60)
  {
    *(void *)&long long v109 = "default.metallib";
    *((void *)&v109 + 1) = 16;
    re::DynamicString::operator=((re::DynamicString *)&v87, (uint64_t)&v109);
  }
  if (a7)
  {
    *(void *)&long long v109 = "default-corere.metallib";
    *((void *)&v109 + 1) = 23;
    re::DynamicString::operator=((re::DynamicString *)&v87, (uint64_t)&v109);
  }
  unint64_t v61 = *((void *)v79 + 1);
  if (v61) {
    unint64_t v62 = v61 >> 1;
  }
  else {
    unint64_t v62 = v61 >> 1;
  }
  if (v62) {
    re::DynamicString::operator=((re::DynamicString *)&v89, v79);
  }
  uint64_t v63 = (void *)(a1 + 640);
  if (!re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(a1 + 640, (uint64_t)&v87))
  {
    if (BYTE8(v87)) {
      uint64_t v64 = *((void *)&v87 + 1) >> 1;
    }
    else {
      uint64_t v64 = BYTE8(v87) >> 1;
    }
    re::DynamicString::substr((re::DynamicString *)&v87, 0, v64 - 9, (re::DynamicString *)&v109);
    unint64_t v65 = re::Hash<re::DynamicString>::operator()((uint64_t)&v119, (uint64_t)&v87);
    unint64_t v66 = v65;
    if (*v63)
    {
      unint64_t v67 = v65 % *(unsigned int *)(a1 + 664);
      uint64_t v68 = *(unsigned int *)(*(void *)(a1 + 648) + 4 * v67);
      if (v68 != 0x7FFFFFFF)
      {
        uint64_t v69 = *(void *)(a1 + 656);
        while (!re::DynamicString::operator==(v69 + 80 * v68 + 16, (uint64_t)&v87))
        {
          uint64_t v68 = *(_DWORD *)(v69 + 80 * v68 + 8) & 0x7FFFFFFF;
          if (v68 == 0x7FFFFFFF)
          {
            uint64_t v53 = a1;
            goto LABEL_207;
          }
        }
        re::DynamicString::deinit((re::DynamicString *)(v69 + 80 * v68 + 48));
        uint64_t v53 = a1;
        re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 656) + 80 * v68 + 48), (const re::DynamicString *)&v109);
        goto LABEL_208;
      }
    }
    else
    {
      LODWORD(v67) = 0;
    }
LABEL_207:
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<re::DynamicString&>((uint64_t)v63, v67, v66, (re::DynamicString *)&v87, (const re::DynamicString *)&v109);
LABEL_208:
    ++*(_DWORD *)(v53 + 680);
    if (void)v109 && (BYTE8(v109)) {
      (*(void (**)(void))(*(void *)v109 + 40))();
    }
  }
  LOBYTE(v91) = HIDWORD(v94) != 0;
  if (*v56)
  {
    unint64_t v70 = FunctionVariantHash % *(unsigned int *)(v53 + 384);
    uint64_t v71 = *(unsigned int *)(*(void *)(v53 + 368) + 4 * v70);
    if (v71 != 0x7FFFFFFF)
    {
      uint64_t v72 = *(void *)(v53 + 376);
      if (*(void *)(v72 + 208 * v71 + 8) == FunctionVariantHash) {
        goto LABEL_219;
      }
      while (1)
      {
        LODWORD(v71) = *(_DWORD *)(v72 + 208 * v71) & 0x7FFFFFFF;
        if (v71 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v72 + 208 * v71 + 8) == FunctionVariantHash) {
          goto LABEL_219;
        }
      }
    }
  }
  else
  {
    LODWORD(v7ArcSharedObject::ArcSharedObject(this, 0) = 0;
  }
  re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addEmplace<re::FunctionVariantDescriptor&>((uint64_t)v56, v70, FunctionVariantHash, v100, (uint64_t)v81);
  ++*(_DWORD *)(v53 + 400);
LABEL_219:
  if ((void)v89)
  {
    if (BYTE8(v89)) {
      (*(void (**)(void))(*(void *)v89 + 40))();
    }
    long long v89 = 0u;
    long long v90 = 0u;
  }
  if ((void)v87)
  {
    if (BYTE8(v87)) {
      (*(void (**)(void))(*(void *)v87 + 40))();
    }
    long long v87 = 0u;
    long long v88 = 0u;
  }
  if ((void)v85)
  {
    if (BYTE8(v85)) {
      (*(void (**)(void))(*(void *)v85 + 40))();
    }
    long long v85 = 0u;
    long long v86 = 0u;
  }
  if (*(void *)&v84[8])
  {
    if (v84[16]) {
      (*(void (**)(void))(**(void **)&v84[8] + 40))();
    }
    memset(&v84[8], 0, 32);
  }
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v81);
  double v73 = re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v93);
  if (v97 && (v98 & 1) != 0) {
    (*(void (**)(double))(*(void *)v97 + 40))(v73);
  }
  return FunctionVariantHash;
}

BOOL re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey(uint64_t a1, unint64_t a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (a2 % *(unsigned int *)(a1 + 24)));
  if (v2 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (*(void *)(v4 + 208 * v2 + 8) == a2) {
    return 1;
  }
  do
  {
    LODWORD(v2) = *(_DWORD *)(v4 + 208 * v2) & 0x7FFFFFFF;
    BOOL result = v2 != 0x7FFFFFFF;
  }
  while (v2 != 0x7FFFFFFF && *(void *)(v4 + 208 * v2 + 8) != a2);
  return result;
}

uint64_t re::MaterialTechniqueData::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = re::DynamicString::operator=((re::DynamicString *)a1, (re::DynamicString *)a2);
  re::DynamicString::operator=((re::DynamicString *)((char *)v4 + 32), (re::DynamicString *)(a2 + 32));
  re::AssetHandle::operator=(a1 + 64, (uint64_t *)(a2 + 64));
  re::AssetHandle::operator=(a1 + 88, (uint64_t *)(a2 + 88));
  re::DynamicString::operator=((re::DynamicString *)(a1 + 112), (re::DynamicString *)(a2 + 112));
  re::AssetHandle::operator=(a1 + 144, (uint64_t *)(a2 + 144));
  re::DynamicString::operator=((re::DynamicString *)(a1 + 168), (re::DynamicString *)(a2 + 168));
  long long v5 = *(_OWORD *)(a2 + 200);
  long long v6 = *(_OWORD *)(a2 + 216);
  long long v7 = *(_OWORD *)(a2 + 232);
  *(_DWORD *)(a1 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 248) = *(_DWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = v7;
  *(_OWORD *)(a1 + 216) = v6;
  *(_OWORD *)(a1 + 20ArcSharedObject::ArcSharedObject(this, 0) = v5;
  if (*(unsigned char *)(a1 + 252) || *(unsigned char *)(a2 + 252))
  {
    if (!*(unsigned char *)(a1 + 252) || *(unsigned char *)(a2 + 252))
    {
      if (!*(unsigned char *)(a1 + 252) && *(unsigned char *)(a2 + 252)) {
        *(unsigned char *)(a1 + 252) = 1;
      }
      *(unsigned char *)(a1 + 253) = *(unsigned char *)(a2 + 253);
    }
    else
    {
      *(unsigned char *)(a1 + 252) = 0;
    }
  }
  re::DynamicArray<re::RenderAttachmentState>::operator=(a1 + 256, (uint64_t *)(a2 + 256));
  re::DynamicString::operator=((re::DynamicString *)(a1 + 296), (re::DynamicString *)(a2 + 296));
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a1 + 328, a2 + 328);
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a1 + 376, a2 + 376);
  re::DynamicArray<re::DynamicString>::operator=(a1 + 424, (uint64_t *)(a2 + 424));
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a1 + 464, a2 + 464);
  re::DynamicArray<re::DynamicString>::operator=(a1 + 512, (uint64_t *)(a2 + 512));
  *(_WORD *)(a1 + 552) = *(_WORD *)(a2 + 552);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a1 + 560, a2 + 560);
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a1 + 608, a2 + 608);
  *(unsigned char *)(a1 + 6re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56) = *(unsigned char *)(a2 + 656);
  if (*(unsigned char *)(a1 + 657) || *(unsigned char *)(a2 + 657))
  {
    if (!*(unsigned char *)(a1 + 657) || *(unsigned char *)(a2 + 657))
    {
      if (!*(unsigned char *)(a1 + 657) && *(unsigned char *)(a2 + 657)) {
        *(unsigned char *)(a1 + 657) = 1;
      }
      *(unsigned char *)(a1 + 658) = *(unsigned char *)(a2 + 658);
    }
    else
    {
      *(unsigned char *)(a1 + 657) = 0;
    }
  }
  return a1;
}

uint64_t re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addOrReplace(uint64_t *a1, const re::DynamicString *a2, uint64_t a3)
{
  uint64_t v6 = re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::find(a1, (uint64_t)a2);
  if (v6 == -1)
  {
    return re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::internalAdd((_anonymous_namespace_ *)a1, a2, (uint64_t *)a3);
  }
  else
  {
    uint64_t v7 = a1[1] + 96 * v6;
    *(_DWORD *)(v7 + 32) = *(_DWORD *)a3;
    uint64_t result = re::DynamicArray<unsigned long long>::operator=(v7 + 40, (uint64_t *)(a3 + 8));
    __int16 v9 = *(_WORD *)(a3 + 56);
    *(void *)(v7 + 8ArcSharedObject::ArcSharedObject(this, 0) = *(void *)(a3 + 48);
    *(_WORD *)(v7 + 88) = v9;
  }
  return result;
}

double re::DynamicArray<re::PSOToolLinkedFunctionDescriptor>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)a1)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        re::DynamicArray<re::PSOToolLinkedFunctionDescriptor>::setCapacity((void *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::PSOToolLinkedFunctionDescriptor>::setCapacity((void *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    unint64_t v5 = *(void *)(a1 + 16);
  }
  uint64_t v11 = *(void *)(a1 + 32) + 40 * v5;
  double result = 0.0;
  *(_OWORD *)uint64_t v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(void *)(v11 + 24) = *(void *)(a2 + 24);
  uint64_t v13 = *(void *)(a2 + 8);
  *(void *)uint64_t v11 = *(void *)a2;
  *(void *)a2 = 0;
  uint64_t v14 = *(void *)(a2 + 16);
  *(void *)(a2 + 24) = 0;
  uint64_t v16 = *(void *)(v11 + 8);
  uint64_t v15 = *(void *)(v11 + 16);
  *(void *)(v11 + 8) = v13;
  *(void *)(v11 + 16) = v14;
  *(void *)(a2 + 8) = v16;
  *(void *)(a2 + 16) = v15;
  *(_WORD *)(v11 + 32) = *(_WORD *)(a2 + 32);
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t validateAlias(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 8);
  BOOL v2 = (v1 & 1) == 0;
  unint64_t v3 = v1 >> 1;
  if ((v1 & 1) == 0) {
    unint64_t v3 = v1 >> 1;
  }
  if (v3)
  {
    unint64_t v4 = 0;
    do
    {
      if (v2)
      {
        int v5 = *(unsigned __int8 *)(result + 9 + v4);
        uint64_t v6 = result + 9;
      }
      else
      {
        uint64_t v6 = *(void *)(result + 16);
        int v5 = *(unsigned __int8 *)(v6 + v4);
      }
      if (v5 == 32)
      {
        *(unsigned char *)(v6 + v4) = 95;
        unint64_t v1 = *(void *)(result + 8);
      }
      ++v4;
      BOOL v2 = (v1 & 1) == 0;
      unint64_t v7 = v1 >> 1;
      if ((v1 & 1) == 0) {
        unint64_t v7 = v1 >> 1;
      }
    }
    while (v7 > v4);
  }
  return result;
}

uint64_t generateJSONForFunctionVariant(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)(a3 + 24);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 22) = 3;
  uint64_t v83 = 0x150000000000;
  __n128 __dst = 0uLL;
  re::DynamicString::DynamicString((re::DynamicString *)&v64, (const re::DynamicString *)(a2 + 9));
  validateAlias((uint64_t)&v64);
  if (v65) {
    unint64_t v10 = *(const char **)&v66[7];
  }
  else {
    unint64_t v10 = v66;
  }
  unsigned __int32 v11 = strlen(v10);
  unsigned __int32 v12 = v11;
  if (v11 > 0x15)
  {
    __dst.n128_u32[0] = v11;
    p_dst = (__n128 *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc(v9, v11 + 1);
    __dst.n128_u64[1] = (unint64_t)p_dst;
    __int16 v14 = 3077;
  }
  else
  {
    BYTE5(v83) = 21 - v11;
    p_dst = &__dst;
    __int16 v14 = 7173;
  }
  HIWORD(v83) = v14;
  memcpy(p_dst, v10, v12);
  p_dst->n128_u8[v12] = 0;
  uint64_t v70 = 0x405000000000000;
  *((void *)&v69 + 1) = "label";
  *(void *)&long long v69 = 5;
  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)a1, &v69, &__dst, v9);
  uint64_t v15 = (uint64_t)(a2 + 13);
  unint64_t v16 = re::Hash<re::DynamicString>::operator()((uint64_t)&v69, (uint64_t)(a2 + 13));
  uint64_t v17 = 0x7FFFFFFFLL;
  uint64_t v59 = a2;
  if (*(void *)a4)
  {
    uint64_t v18 = *(unsigned int *)(*(void *)(a4 + 8) + 4 * (v16 % *(unsigned int *)(a4 + 24)));
    if (v18 != 0x7FFFFFFF)
    {
      uint64_t v19 = *(void *)(a4 + 16);
      uint64_t v17 = 0x7FFFFFFFLL;
      while (!re::DynamicString::operator==(v19 + 80 * v18 + 16, v15))
      {
        uint64_t v18 = *(_DWORD *)(v19 + 80 * v18 + 8) & 0x7FFFFFFF;
        if (v18 == 0x7FFFFFFF) {
          goto LABEL_14;
        }
      }
      uint64_t v17 = v18;
    }
  }
LABEL_14:
  uint64_t v20 = *(void *)(a4 + 16);
  if (*(unsigned char *)(v20 + 80 * v17 + 56)) {
    uint64_t v21 = *(void *)(v20 + 80 * v17 + 64);
  }
  else {
    uint64_t v21 = v20 + 80 * v17 + 57;
  }
  if (v59[6]) {
    uint64_t v22 = (char *)v59[7];
  }
  else {
    uint64_t v22 = (char *)v59 + 49;
  }
  re::DynamicString::format((re::DynamicString *)"alias:%s#%s", (re::DynamicString *)&v61, v21, v22);
  validateAlias((uint64_t)&v61);
  uint64_t v81 = 0x150000000000;
  __n128 v80 = 0uLL;
  if (v62) {
    double v23 = *(const char **)&v63[7];
  }
  else {
    double v23 = v63;
  }
  unsigned __int32 v24 = strlen(v23);
  unsigned __int32 v25 = v24;
  if (v24 > 0x15)
  {
    v80.n128_u32[0] = v24;
    unint64_t v26 = (__n128 *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc(v9, v24 + 1);
    v80.n128_u64[1] = (unint64_t)v26;
    __int16 v27 = 3077;
  }
  else
  {
    BYTE5(v81) = 21 - v24;
    unint64_t v26 = &v80;
    __int16 v27 = 7173;
  }
  HIWORD(v81) = v27;
  memcpy(v26, v23, v25);
  v26->n128_u8[v25] = 0;
  uint64_t v70 = 0x405000000000000;
  *((void *)&v69 + 1) = "function";
  *(void *)&long long v69 = 8;
  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)a1, &v69, &v80, v9);
  unint64_t v28 = v59[18];
  unint64_t v29 = v28 >> 1;
  if ((v28 & 1) == 0) {
    unint64_t v29 = v28 >> 1;
  }
  if (v29)
  {
    unint64_t v76 = 0x150000000000;
    __n128 v75 = 0uLL;
    if (v28) {
      int v30 = (const char *)v59[19];
    }
    else {
      int v30 = (char *)v59 + 145;
    }
    unsigned __int32 v31 = strlen(v30);
    unsigned __int32 v32 = v31;
    if (v31 > 0x15)
    {
      v75.n128_u32[0] = v31;
      uint64_t v33 = (__n128 *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc(v9, v31 + 1);
      v75.n128_u64[1] = (unint64_t)v33;
      __int16 v34 = 3077;
    }
    else
    {
      BYTE5(v76) = 21 - v31;
      uint64_t v33 = &v75;
      __int16 v34 = 7173;
    }
    HIWORD(v76) = v34;
    memcpy(v33, v30, v32);
    v33->n128_u8[v32] = 0;
    uint64_t v70 = 0x405000000000000;
    *((void *)&v69 + 1) = "specialized_name";
    *(void *)&long long v69 = 16;
    rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)a1, &v69, &v75, v9);
  }
  uint64_t v58 = (int *)a1;
  uint64_t v79 = 0x4000000000000;
  __n128 v78 = 0uLL;
  re::DynamicArray<re::TechniqueFunctionConstant>::DynamicArray((uint64_t)&v75, v59);
  LOBYTE(v69) = a5;
  unint64_t v35 = 126 - 2 * __clz(v76);
  if (v76) {
    uint64_t v36 = v35;
  }
  else {
    uint64_t v36 = 0;
  }
  std::__introsort<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *,false>((uint64_t)v77, (unint64_t)v77 + 64 * v76, (unsigned __int8 *)&v69, v36, 1);
  if (v76)
  {
    BOOL v37 = v77;
    int v38 = (re::DynamicString *)((char *)v77 + 64 * v76);
    while (1)
    {
      re::DynamicString::DynamicString((re::DynamicString *)&v69, v37);
      int v71 = *((_DWORD *)v37 + 8);
      re::FixedArray<unsigned char>::FixedArray(&v72, (uint64_t *)v37 + 5);
      uint64_t v39 = *(void *)(a3 + 24);
      uint64_t v68 = 0x3000000000000;
      long long v67 = 0uLL;
      uint64_t v89 = 0x3000000000000;
      __n128 v88 = 0uLL;
      uint64_t v40 = a5;
      uint64_t v41 = v9;
      if (a5)
      {
        uint64_t v87 = 0x150000000000;
        __n128 v86 = 0uLL;
        int v42 = (BYTE8(v69) & 1) != 0 ? (const char *)v70 : (char *)&v69 + 9;
        unsigned __int32 v43 = strlen(v42);
        unsigned __int32 v44 = v43;
        if (v43 > 0x15)
        {
          v86.n128_u32[0] = v43;
          uint64_t v45 = (__n128 *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc(v39, v43 + 1);
          v86.n128_u64[1] = (unint64_t)v45;
          __int16 v46 = 3077;
        }
        else
        {
          BYTE5(v87) = 21 - v43;
          uint64_t v45 = &v86;
          __int16 v46 = 7173;
        }
        HIWORD(v87) = v46;
        memcpy(v45, v42, v44);
        v45->n128_u8[v44] = 0;
        uint64_t v93 = 0x405000000000000;
        v92.n128_u64[0] = 2;
        v92.n128_u64[1] = (unint64_t)"id";
        rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v67, (long long *)&v92, &v86, v39);
        uint64_t v91 = 0x405000000000000;
        v92.n128_u64[0] = 7;
        v90.n128_u64[0] = 20;
        v90.n128_u64[1] = (unint64_t)"FunctionConstantName";
        uint64_t v93 = 0x405000000000000;
        v92.n128_u64[1] = (unint64_t)"id_type";
        rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v67, (long long *)&v92, &v90, v39);
      }
      else
      {
        uint64_t v87 = 0x3000000000000;
        __n128 v86 = 0uLL;
        uint64_t v85 = 0x1F6000000000000;
        __n128 v84 = (__n128)HIWORD(v71);
        uint64_t v93 = 0x405000000000000;
        v92.n128_u64[0] = 4;
        v92.n128_u64[1] = (unint64_t)"data";
        rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v86, (long long *)&v92, &v84, v39);
        uint64_t v93 = 0x405000000000000;
        v92.n128_u64[0] = 2;
        v92.n128_u64[1] = (unint64_t)"id";
        rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v67, (long long *)&v92, &v86, v39);
        uint64_t v91 = 0x405000000000000;
        v92.n128_u64[0] = 7;
        v90.n128_u64[0] = 21;
        v90.n128_u64[1] = (unint64_t)"FunctionConstantIndex";
        uint64_t v93 = 0x405000000000000;
        v92.n128_u64[1] = (unint64_t)"id_type";
        rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v67, (long long *)&v92, &v90, v39);
      }
      uint64_t v91 = 0x405000000000000;
      __n128 v92 = (__n128)(unsigned __int16)v71;
      v90.n128_u64[0] = 10;
      v90.n128_u64[1] = (unint64_t)"value_type";
      uint64_t v93 = 0x1F6000000000000;
      *(void *)&double v48 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v67, (long long *)&v90, &v92, v39).n128_u64[0];
      if ((unsigned __int16)v71 > 0x20u) {
        break;
      }
      a5 = v40;
      if ((unsigned __int16)v71 != 3)
      {
        if ((unsigned __int16)v71 != 29) {
          goto LABEL_83;
        }
        uint64_t v49 = *(int *)v74;
        uint64_t v91 = 0x405000000000000;
        __n128 v92 = (__n128)(unint64_t)v49;
        v90.n128_u64[0] = 4;
        v90.n128_u64[1] = (unint64_t)"data";
        uint64_t v93 = 0;
        BOOL v50 = v49 < 0;
        __int16 v51 = 182;
LABEL_61:
        if (!v50) {
          __int16 v51 = 502;
        }
        goto LABEL_63;
      }
      float v53 = *v74;
      uint64_t v91 = 0x405000000000000;
      v90.n128_u64[0] = 4;
      v90.n128_u64[1] = (unint64_t)"data";
      v92.n128_u64[1] = 0;
      uint64_t v93 = 0;
      v92.n128_f64[0] = v53;
      __int16 v51 = 534;
LABEL_63:
      HIWORD(v93) = v51;
      rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v88, (long long *)&v90, &v92, v39);
      uint64_t v93 = 0x405000000000000;
      v92.n128_u64[0] = 5;
      v92.n128_u64[1] = (unint64_t)"value";
      rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v67, (long long *)&v92, &v88, v39);
      uint64_t v9 = v41;
      rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::PushBack((int *)&v78, &v67, v41);
      if (v72)
      {
        if (v73)
        {
          (*(void (**)(void))(*(void *)v72 + 40))();
          uint64_t v73 = 0;
          id v74 = 0;
        }
        uint64_t v72 = 0;
      }
      if (void)v69 && (BYTE8(v69)) {
        (*(void (**)(void))(*(void *)v69 + 40))();
      }
      BOOL v37 = (re::DynamicString *)((char *)v37 + 64);
      if (v37 == v38) {
        goto LABEL_71;
      }
    }
    a5 = v40;
    if ((unsigned __int16)v71 != 33)
    {
      if ((unsigned __int16)v71 != 53)
      {
LABEL_83:
        re::internal::assertLog((re::internal *)5, v47, v48, "assertion failure: '%s' (%s:line %i) PSOToolManager serialization for function constant type %d not implemented yet.", "!\"Unreachable code\"", "generateJSONForFunctionConstant", 768, (unsigned __int16)v71, v58);
        _os_crash();
        __break(1u);
      }
      int v52 = *(unsigned __int8 *)v74;
      uint64_t v91 = 0x405000000000000;
      __n128 v92 = 0uLL;
      v90.n128_u64[0] = 4;
      v90.n128_u64[1] = (unint64_t)"data";
      uint64_t v93 = 0;
      if (v52) {
        __int16 v51 = 10;
      }
      else {
        __int16 v51 = 9;
      }
      goto LABEL_63;
    }
    unint64_t v54 = *(unsigned int *)v74;
    uint64_t v91 = 0x405000000000000;
    __n128 v92 = (__n128)v54;
    v90.n128_u64[0] = 4;
    v90.n128_u64[1] = (unint64_t)"data";
    uint64_t v93 = 0;
    BOOL v50 = (v54 & 0x80000000) != 0;
    __int16 v51 = 470;
    goto LABEL_61;
  }
LABEL_71:
  unint64_t v55 = v59[18];
  if (v55) {
    unint64_t v56 = v55 >> 1;
  }
  else {
    unint64_t v56 = v55 >> 1;
  }
  if (!v56)
  {
    uint64_t v70 = 0x405000000000000;
    *((void *)&v69 + 1) = "constant_values";
    *(void *)&long long v69 = 15;
    rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember(v58, &v69, &v78, v9);
  }
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v75);
  if (v61 && (v62 & 1) != 0) {
    (*(void (**)(void))(*(void *)v61 + 40))();
  }
  uint64_t result = v64;
  if (v64)
  {
    if (v65) {
      return (*(uint64_t (**)(void))(*(void *)v64 + 40))();
    }
  }
  return result;
}

int *rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::PushBack(int *a1, long long *a2, uint64_t a3)
{
  unsigned int v5 = *a1;
  uint64_t v6 = a1[1];
  if (*a1 >= v6)
  {
    if (v6) {
      unsigned int v7 = v6 + ((v6 + 1) >> 1);
    }
    else {
      unsigned int v7 = 16;
    }
    if (v6 < v7)
    {
      *((void *)a1 + 1) = rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Realloc(a3, *((char **)a1 + 1), 24 * v6, 24 * v7);
      a1[1] = v7;
      unsigned int v5 = *a1;
    }
  }
  uint64_t v8 = *((void *)a1 + 1);
  *a1 = v5 + 1;
  uint64_t v9 = v8 + 24 * v5;
  long long v10 = *a2;
  *(void *)(v9 + 16) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v9 = v10;
  *((_WORD *)a2 + 11) = 0;
  return a1;
}

uint64_t generateJSONForComputeShader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 22) = 3;
  if (a5)
  {
    if (*(unsigned char *)(a2 + 8)) {
      uint64_t v9 = *(const char **)(a2 + 16);
    }
    else {
      uint64_t v9 = (const char *)(a2 + 9);
    }
  }
  else
  {
    uint64_t v9 = "default";
  }
  if (*(void *)(a3 + 8)) {
    uint64_t v10 = *(void *)(a3 + 16);
  }
  else {
    uint64_t v10 = a3 + 9;
  }
  re::DynamicString::format((re::DynamicString *)"alias:%s#%s", (re::DynamicString *)&v20, v9, v10);
  validateAlias((uint64_t)&v20);
  uint64_t v26 = 0x150000000000;
  __n128 __dst = 0uLL;
  char v11 = v21;
  if (v21) {
    unsigned __int32 v12 = *(const char **)&v22[7];
  }
  else {
    unsigned __int32 v12 = v22;
  }
  unsigned __int32 v13 = strlen(v12);
  unsigned __int32 v14 = v13;
  if (v13 > 0x15)
  {
    __dst.n128_u32[0] = v13;
    p_dst = (__n128 *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc(a4, v13 + 1);
    __dst.n128_u64[1] = (unint64_t)p_dst;
    __int16 v16 = 3077;
  }
  else
  {
    BYTE5(v26) = 21 - v13;
    p_dst = &__dst;
    __int16 v16 = 7173;
  }
  HIWORD(v26) = v16;
  memcpy(p_dst, v12, v14);
  p_dst->n128_u8[v14] = 0;
  uint64_t v28 = 0x405000000000000;
  *((void *)&v27 + 1) = "compute_function";
  *(void *)&long long v27 = 16;
  __n128 v17 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)a1, &v27, &__dst, a4);
  if (a6)
  {
    uint64_t v24 = 0x1F6000000000000;
    __n128 v23 = (__n128)1uLL;
    uint64_t v28 = 0x405000000000000;
    *((void *)&v27 + 1) = "threadgroup_size_is_multiple_of_thread_execution_width";
    *(void *)&long long v27 = 54;
    __n128 v17 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)a1, &v27, &v23, a4);
  }
  uint64_t result = v20;
  if (v20 && (v11 & 1) != 0)
  {
    uint64_t v19 = *(uint64_t (**)(__n128))(*(void *)v20 + 40);
    return v19(v17);
  }
  return result;
}

uint64_t generateJSONForTileShader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, int a8)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 22) = 3;
  if (a5)
  {
    if (*(unsigned char *)(a2 + 8)) {
      unsigned __int32 v12 = *(const char **)(a2 + 16);
    }
    else {
      unsigned __int32 v12 = (const char *)(a2 + 9);
    }
  }
  else
  {
    unsigned __int32 v12 = "default";
  }
  if (*(void *)(a3 + 8)) {
    uint64_t v13 = *(void *)(a3 + 16);
  }
  else {
    uint64_t v13 = a3 + 9;
  }
  re::DynamicString::format((re::DynamicString *)"alias:%s#%s", (re::DynamicString *)&v29, v12, v13);
  validateAlias((uint64_t)&v29);
  uint64_t v37 = 0x150000000000;
  __n128 __dst = 0uLL;
  char v27 = v30;
  if (v30) {
    unsigned __int32 v14 = *(const char **)&v31[7];
  }
  else {
    unsigned __int32 v14 = v31;
  }
  unsigned __int32 v15 = strlen(v14);
  unsigned __int32 v16 = v15;
  if (v15 > 0x15)
  {
    __dst.n128_u32[0] = v15;
    p_dst = (__n128 *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc(a4, v15 + 1);
    __dst.n128_u64[1] = (unint64_t)p_dst;
    __int16 v18 = 3077;
  }
  else
  {
    BYTE5(v37) = 21 - v15;
    p_dst = &__dst;
    __int16 v18 = 7173;
  }
  HIWORD(v37) = v18;
  memcpy(p_dst, v14, v16);
  p_dst->n128_u8[v16] = 0;
  uint64_t v41 = 0x405000000000000;
  v40.n128_u64[0] = 13;
  v40.n128_u64[1] = (unint64_t)"tile_function";
  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)a1, (long long *)&v40, &__dst, a4);
  if (a6)
  {
    uint64_t v39 = 0x1F6000000000000;
    __n128 v38 = (__n128)1uLL;
    uint64_t v41 = 0x405000000000000;
    v40.n128_u64[0] = 34;
    v40.n128_u64[1] = (unint64_t)"threadgroup_size_matches_tile_size";
    rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)a1, (long long *)&v40, &v38, a4);
  }
  uint64_t v35 = 0x4000000000000;
  __n128 v34 = 0uLL;
  uint64_t v19 = *(void *)(a7 + 16);
  if (v19)
  {
    uint64_t v20 = *(int **)(a7 + 32);
    uint64_t v21 = 4 * v19;
    do
    {
      uint64_t v22 = *v20++;
      uint64_t v33 = 0x3000000000000;
      long long v32 = 0uLL;
      v38.n128_u64[1] = (unint64_t)"pixel_format";
      uint64_t v39 = 0x405000000000000;
      v38.n128_u64[0] = 12;
      uint64_t v41 = 0;
      __n128 v40 = (__n128)(unint64_t)v22;
      if (v22 < 0) {
        __int16 v23 = 182;
      }
      else {
        __int16 v23 = 502;
      }
      HIWORD(v41) = v23;
      rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)&v32, (long long *)&v38, &v40, a4);
      rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::PushBack((int *)&v34, &v32, a4);
      v21 -= 4;
    }
    while (v21);
  }
  if (a8 != 1)
  {
    uint64_t v39 = 0x405000000000000;
    v38.n128_u64[0] = 19;
    v38.n128_u64[1] = (unint64_t)"raster_sample_count";
    uint64_t v41 = 0;
    __n128 v40 = (__n128)(unint64_t)a8;
    if (a8 < 0) {
      __int16 v24 = 182;
    }
    else {
      __int16 v24 = 502;
    }
    HIWORD(v41) = v24;
    rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)a1, (long long *)&v38, &v40, a4);
  }
  uint64_t v41 = 0x405000000000000;
  v40.n128_u64[0] = 17;
  v40.n128_u64[1] = (unint64_t)"color_attachments";
  __n128 v25 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember((int *)a1, (long long *)&v40, &v34, a4);
  uint64_t result = v29;
  if (v29)
  {
    if (v27) {
      return (*(uint64_t (**)(__n128))(*(void *)v29 + 40))(v25);
    }
  }
  return result;
}

uint64_t re::PSOToolManager::setCustomMaterialWrappingDefinition(re::PSOToolManager *this, const re::DynamicString *a2)
{
  v59[5] = *MEMORY[0x263EF8340];
  *((unsigned char *)this + 952) = 1;
  re::DynamicArray<re::DynamicString>::DynamicArray((uint64_t)v48, (re::DynamicString *)&v49, 5uLL);
  for (uint64_t i = 128; i != -32; i -= 32)
    re::DynamicString::deinit((re::DynamicString *)((char *)&v49 + i));
  re::DynamicArray<re::DynamicString>::DynamicArray((uint64_t)v47, (re::DynamicString *)&v49, 4uLL);
  for (uint64_t j = 96; j != -32; j -= 32)
    re::DynamicString::deinit((re::DynamicString *)((char *)&v49 + j));
  re::DynamicArray<re::DynamicString>::DynamicArray((uint64_t)v46, (re::DynamicString *)&v49, 9uLL);
  for (uint64_t k = 256; k != -32; k -= 32)
    re::DynamicString::deinit((re::DynamicString *)((char *)&v49 + k));
  int v51 = 0;
  long long v49 = 0u;
  long long v50 = 0u;
  uint64_t v52 = 0x7FFFFFFFLL;
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicArray<re::DynamicString>&>((uint64_t)&v49, (re::DynamicString *)&v44, v47);
  __n128 v25 = v44;
  if (v44 && (v45 & 1) != 0) {
    __n128 v25 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v44 + 40))();
  }
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicArray<re::DynamicString>&>((uint64_t)&v49, (re::DynamicString *)&v44, v47);
  uint64_t v26 = v44;
  if (v44 && (v45 & 1) != 0) {
    uint64_t v26 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v44 + 40))();
  }
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicArray<re::DynamicString>&>((uint64_t)&v49, (re::DynamicString *)&v44, v47);
  char v27 = v44;
  if (v44 && (v45 & 1) != 0) {
    char v27 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v44 + 40))();
  }
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicArray<re::DynamicString>&>((uint64_t)&v49, (re::DynamicString *)&v44, v47);
  uint64_t v28 = v44;
  if (v44 && (v45 & 1) != 0) {
    uint64_t v28 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v44 + 40))();
  }
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicArray<re::DynamicString>&>((uint64_t)&v49, (re::DynamicString *)&v44, v48);
  uint64_t v29 = v44;
  if (v44 && (v45 & 1) != 0) {
    uint64_t v29 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v44 + 40))();
  }
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicArray<re::DynamicString>&>((uint64_t)&v49, (re::DynamicString *)&v44, v48);
  char v30 = v44;
  if (v44 && (v45 & 1) != 0) {
    char v30 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v44 + 40))();
  }
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicArray<re::DynamicString>&>((uint64_t)&v49, (re::DynamicString *)&v44, v46);
  if (v44 && (v45 & 1) != 0) {
    (*(void (**)(void))(*(void *)v44 + 40))();
  }
  if (*((void *)a2 + 1)) {
    unsigned __int32 v31 = (const char *)*((void *)a2 + 2);
  }
  else {
    unsigned __int32 v31 = (char *)a2 + 9;
  }
  if (!strcmp(v31, "CustomUICALayer.rematerialdefinition")) {
    int v32 = 2;
  }
  else {
    int v32 = 1;
  }
  *((_DWORD *)this + 239) = v32;
  unint64_t v33 = re::Hash<re::DynamicString>::operator()((uint64_t)&v44, (uint64_t)a2);
  uint64_t v34 = 0x7FFFFFFFLL;
  if ((void)v49)
  {
    uint64_t v35 = *(unsigned int *)(*((void *)&v49 + 1) + 4 * (v33 % DWORD2(v50)));
    if (v35 != 0x7FFFFFFF)
    {
      uint64_t v36 = v50;
      uint64_t v34 = 0x7FFFFFFFLL;
      while (!re::DynamicString::operator==(v36 + 88 * v35 + 16, (uint64_t)a2))
      {
        uint64_t v35 = *(_DWORD *)(v36 + 88 * v35 + 8) & 0x7FFFFFFF;
        if (v35 == 0x7FFFFFFF) {
          goto LABEL_41;
        }
      }
      uint64_t v34 = v35;
    }
  }
LABEL_41:
  uint64_t v37 = v50 + 88 * v34;
  uint64_t v38 = *(void *)(v37 + 64);
  if (v38)
  {
    uint64_t v39 = 32 * v38;
    __n128 v40 = (const char **)(*(void *)(v37 + 80) + 16);
    do
    {
      if (*((unsigned char *)a2 + 8)) {
        uint64_t v41 = (const char *)*((void *)a2 + 2);
      }
      else {
        uint64_t v41 = (char *)a2 + 9;
      }
      if (*(unsigned char *)(v40 - 1)) {
        uint64_t v42 = *v40;
      }
      else {
        uint64_t v42 = (char *)v40 - 7;
      }
      re::PSOToolManager::generateFunctionVariationsForTechnique(this, v41, v42);
      v40 += 4;
      v39 -= 32;
    }
    while (v39);
  }
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v49);
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)v46);
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)v47);
  return re::DynamicArray<re::DynamicString>::deinit((uint64_t)v48);
}

uint64_t re::PSOToolManager::serializeToURL(re::PSOToolManager *this, char *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  memset(&v12, 0, sizeof(v12));
  unint64_t v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:nn180100]<char const*,0>(&v12.__pn_, a2, v3);
  std::__fs::filesystem::__status(&v12, 0);
  int locale_low = LOBYTE(v13.__locale_);
  if (SHIBYTE(v12.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__pn_.__r_.__value_.__l.__data_);
  }
  if (locale_low != 2)
  {
    long long v15 = 0u;
    long long v14 = 0u;
    uint64_t v16 = 0;
    uint64_t v17 = 1024;
    int v18 = 0;
    uint64_t v19 = 0;
    operator new();
  }
  uint64_t v6 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"provided url ", 13);
  size_t v7 = strlen(a2);
  uint64_t v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)a2, v7);
  uint64_t v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)" is a directory", 15);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
  uint64_t v10 = std::locale::use_facet((const std::locale *)&v12, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale((std::locale *)&v12);
  std::ostream::put();
  return std::ostream::flush();
}

uint64_t re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(uint64_t a1, unint64_t a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (a2 % *(unsigned int *)(a1 + 24)));
  if (v2 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (*(void *)(v4 + 208 * v2 + 8) != a2)
  {
    while (1)
    {
      LODWORD(v2) = *(_DWORD *)(v4 + 208 * v2) & 0x7FFFFFFF;
      if (v2 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v4 + 208 * v2 + 8) == a2) {
        return v4 + 208 * v2 + 16;
      }
    }
    return 0;
  }
  return v4 + 208 * v2 + 16;
}

void re::PSOToolManager::serializeToURL(char const*)::$_0::operator()(_anonymous_namespace_ *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, int a7)
{
  if (*(_DWORD *)(a3 + 28) | *(_DWORD *)(a4 + 28))
  {
    uint64_t v68 = 0;
    memset(&v69[1], 0, 24);
    long long v67 = 0u;
    re::DynamicString::setCapacity(v69, 0);
    re::DynamicString::operator=((re::DynamicString *)v69, (re::DynamicString *)a2);
    re::MaterialTechniqueData::MaterialTechniqueData((re::MaterialTechniqueData *)v64);
    *(void *)&long long v40 = "pretendTechnique";
    *((void *)&v40 + 1) = 16;
    re::DynamicString::operator=((re::DynamicString *)v64, (uint64_t)&v40);
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)v65, a3);
    re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)v66, a4);
    memset(v63, 0, sizeof(v63));
    unsigned int v61 = 0;
    long long v59 = 0u;
    long long v60 = 0u;
    uint64_t v62 = 0x7FFFFFFFLL;
    re::PSOToolManager::gatherFunctionConstantsForShader((uint64_t)a1, (uint64_t)v64, v69, (uint64_t)v65, (uint64_t)v66, (_anonymous_namespace_ *)v63, (uint64_t)&v59);
    unint64_t v12 = HIDWORD(v60);
    unint64_t v58 = 0;
    v55[1] = 0;
    uint64_t v56 = 0;
    int v57 = 0;
    re::DynamicArray<re::TechniqueFunctionConstant>::setCapacity(v55, v12);
    ++v57;
    unsigned int v14 = v61;
    uint64_t v15 = 0;
    if (v61)
    {
      uint64_t v16 = (int *)(v60 + 8);
      while (1)
      {
        int v17 = *v16;
        v16 += 28;
        if (v17 < 0) {
          break;
        }
        if (v61 == ++v15)
        {
          LODWORD(v15) = v61;
          break;
        }
      }
    }
    if (v61 != v15)
    {
      uint64_t v18 = v15;
      uint64_t v19 = v60;
      do
      {
        re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v55, (re::DynamicString *)(v19 + 112 * v18 + 48));
        uint64_t v19 = v60;
        if (v61 <= (int)v15 + 1) {
          unsigned int v20 = v15 + 1;
        }
        else {
          unsigned int v20 = v61;
        }
        int v21 = v15;
        while (1)
        {
          uint64_t v18 = (v21 + 1);
          if (v20 - 1 == v21) {
            break;
          }
          ++v21;
          LODWORD(v15) = v18;
          if ((*(_DWORD *)(v60 + 112 * v18 + 8) & 0x80000000) != 0) {
            goto LABEL_17;
          }
        }
        LODWORD(v15) = v20;
LABEL_17:
        ;
      }
      while (v14 != v15);
    }
    memset(v42, 0, 32);
    long long v40 = 0u;
    long long v41 = 0u;
    re::FunctionConstantsEnumerator::createEnumerator((uint64_t *)v63, 0, 0, (uint64_t)v55, &v40, (uint64_t)v53);
    re::HashBrown<unsigned long,re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::deinit((uint64_t)&v40);
    if (v54)
    {
      unint64_t v22 = 0;
      unint64_t v23 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (a6 ^ (a6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a6 ^ (a6 >> 30))) >> 27));
      uint64_t v35 = (v23 ^ (v23 >> 31)) - 0x61C8864680B583E9;
      do
      {
        re::FunctionConstantsEnumerator::createPermutation((_anonymous_namespace_ *)v53, v22, v58, v56, (uint64_t)v52);
        *(void *)&long long v40 = v52[4];
        *((void *)&v40 + 1) = v52[2];
        if (*((void *)a2 + 1)) {
          __int16 v24 = (const char *)*((void *)a2 + 2);
        }
        else {
          __int16 v24 = a2 + 9;
        }
        unint64_t FunctionVariantHash = re::generateFunctionVariantHash((uint64_t *)&v40, v24);
        unint64_t v26 = FunctionVariantHash;
        if (a7) {
          unint64_t v26 = (v35 + (FunctionVariantHash << 6) + (FunctionVariantHash >> 2)) ^ FunctionVariantHash;
        }
        unint64_t v51 = v26;
        BOOL v27 = re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey(a5, v26);
        if (v27) {
          goto LABEL_56;
        }
        long long v40 = 0uLL;
        DWORD2(v41) = 0;
        *(void *)&long long v41 = 0;
        memset(v42, 0, sizeof(v42));
        uint64_t v28 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v42[8], 0);
        long long v43 = 0u;
        long long v44 = 0u;
        uint64_t v29 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v43, 0);
        long long v45 = 0u;
        long long v46 = 0u;
        char v30 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v45, 0);
        long long v47 = 0u;
        long long v48 = 0u;
        re::DynamicString::setCapacity(&v47, 0);
        char v50 = 0;
        re::DynamicString::operator=((re::DynamicString *)&v42[8], (re::DynamicString *)a2);
        re::DynamicArray<re::TechniqueFunctionConstant>::operator=((uint64_t)&v40, v52);
        unsigned __int32 v31 = &v42[17];
        if (v42[16]) {
          unsigned __int32 v31 = *(unsigned char **)&v42[24];
        }
        re::DynamicString::format((re::DynamicString *)"%s_%zu", (re::DynamicString *)&v38, v31, v26);
        re::DynamicString::operator=((re::DynamicString *)&v43, (re::DynamicString *)&v38);
        if (v38 && (v39 & 1) != 0) {
          (*(void (**)(void))(*(void *)v38 + 40))();
        }
        uint64_t v38 = "default.metallib";
        uint64_t v39 = 16;
        re::DynamicString::operator=((re::DynamicString *)&v45, (uint64_t)&v38);
        unint64_t v49 = a6;
        if (*(void *)a5)
        {
          unint64_t v32 = v26 % *(unsigned int *)(a5 + 24);
          uint64_t v33 = *(unsigned int *)(*(void *)(a5 + 8) + 4 * v32);
          if (v33 != 0x7FFFFFFF)
          {
            uint64_t v34 = *(void *)(a5 + 16);
            while (*(void *)(v34 + 208 * v33 + 8) != v26)
            {
              LODWORD(v33) = *(_DWORD *)(v34 + 208 * v33) & 0x7FFFFFFF;
              if (v33 == 0x7FFFFFFF) {
                goto LABEL_38;
              }
            }
            goto LABEL_39;
          }
        }
        else
        {
          LODWORD(v32) = 0;
        }
LABEL_38:
        re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addEmplace<re::FunctionVariantDescriptor&>(a5, v32, v26, &v51, (uint64_t)&v40);
        ++*(_DWORD *)(a5 + 40);
LABEL_39:
        if ((void)v47)
        {
          if (BYTE8(v47)) {
            (*(void (**)(void))(*(void *)v47 + 40))();
          }
          long long v47 = 0u;
          long long v48 = 0u;
        }
        if ((void)v45)
        {
          if (BYTE8(v45)) {
            (*(void (**)(void))(*(void *)v45 + 40))();
          }
          long long v45 = 0u;
          long long v46 = 0u;
        }
        if ((void)v43)
        {
          if (BYTE8(v43)) {
            (*(void (**)(void))(*(void *)v43 + 40))();
          }
          long long v43 = 0u;
          long long v44 = 0u;
        }
        if (*(void *)&v42[8])
        {
          if (v42[16]) {
            (*(void (**)(void))(**(void **)&v42[8] + 40))();
          }
          memset(&v42[8], 0, 32);
        }
        re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v40);
LABEL_56:
        re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v52);
        ++v22;
      }
      while (v54 > v22);
    }
    re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::deinit(v53);
    re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v55);
    re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v59);
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)v63);
    re::MaterialTechniqueData::~MaterialTechniqueData((re::MaterialTechniqueData *)v64);
    if (v69[0])
    {
      if (v69[1]) {
        (*(void (**)(void))(*(void *)v69[0] + 40))();
      }
      memset(v69, 0, 32);
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v67);
  }
}

uint64_t rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::Accept<rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>>(unsigned int *a1, uint64_t a2)
{
  _OWORD v34[3] = *MEMORY[0x263EF8340];
  __int16 v4 = *((_WORD *)a1 + 11);
  switch(v4 & 7)
  {
    case 0:
      rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a2);
      std::ostream::put();
      std::ostream::put();
      std::ostream::put();
      std::ostream::put();
      goto LABEL_3;
    case 1:
      rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Bool(a2, 0);
      return 1;
    case 2:
      BOOL v8 = 1;
      rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Bool(a2, 1);
      return v8;
    case 3:
      rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a2);
      uint64_t v9 = *(void *)(a2 + 32);
      if (*(void *)(a2 + 40) - v9 <= 15)
      {
        rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::Writer<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Level>((void *)(a2 + 8));
        uint64_t v9 = *(void *)(a2 + 32);
      }
      *(void *)(a2 + 32) = v9 + 16;
      *(void *)uint64_t v9 = 0;
      *(unsigned char *)(v9 + 8) = 0;
      std::ostream::put();
      if (!*a1) {
        goto LABEL_23;
      }
      uint64_t v10 = *((void *)a1 + 1) + 24;
      while (1)
      {
        uint64_t v11 = (*(_WORD *)(v10 - 2) & 0x1000) != 0 ? v10 - 24 : *(void *)(v10 - 16);
        unsigned int v12 = (*(_WORD *)(v10 - 2) & 0x1000) != 0 ? 21 - *(char *)(v10 - 3) : *(_DWORD *)(v10 - 24);
        rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String(a2, v11, v12);
        if ((rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::Accept<rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>>(v10, a2) & 1) == 0)return 0; {
        uint64_t v13 = v10 + 24;
        }
        v10 += 48;
        if (v13 == *((void *)a1 + 1) + 48 * *a1)
        {
LABEL_23:
          uint64_t v14 = *(void *)(a2 + 32);
          uint64_t v15 = *(void *)(v14 - 16);
          *(void *)(a2 + 32) = v14 - 16;
          if (v15)
          {
            std::ostream::put();
            rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteIndent(a2);
          }
          goto LABEL_35;
        }
      }
    case 4:
      rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a2);
      uint64_t v16 = *(void *)(a2 + 32);
      if (*(void *)(a2 + 40) - v16 <= 15)
      {
        rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::Writer<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Level>((void *)(a2 + 8));
        uint64_t v16 = *(void *)(a2 + 32);
      }
      *(void *)(a2 + 32) = v16 + 16;
      *(void *)uint64_t v16 = 0;
      *(unsigned char *)(v16 + 8) = 1;
      std::ostream::put();
      if (!*a1) {
        goto LABEL_32;
      }
      uint64_t v17 = *((void *)a1 + 1);
      break;
    case 5:
      if ((*((_WORD *)a1 + 11) & 0x1000) != 0) {
        uint64_t v20 = (uint64_t)a1;
      }
      else {
        uint64_t v20 = *((void *)a1 + 1);
      }
      if ((*((_WORD *)a1 + 11) & 0x1000) != 0) {
        unsigned int v21 = 21 - *((char *)a1 + 21);
      }
      else {
        unsigned int v21 = *a1;
      }
      rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String(a2, v20, v21);
      return 1;
    default:
      if ((*((_WORD *)a1 + 11) & 0x200) != 0)
      {
        double v22 = *(double *)a1;
        rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a2);
        BOOL v8 = (*(void *)&v22 & 0x7FF0000000000000) != 0x7FF0000000000000;
        if ((*(void *)&v22 & 0x7FF0000000000000) != 0x7FF0000000000000)
        {
          unint64_t v23 = rapidjson::internal::dtoa((rapidjson::internal *)&v33, v22, (char *)*(unsigned int *)(a2 + 56));
          if (&v33 != v23)
          {
            __int16 v24 = v23;
            __n128 v25 = &v33;
            do
            {
              ++v25;
              std::ostream::put();
            }
            while (v25 != v24);
          }
        }
        if (*(void *)(a2 + 32) == *(void *)(a2 + 24)) {
          std::ostream::flush();
        }
        return v8;
      }
      if ((v4 & 0x20) == 0)
      {
        if ((v4 & 0x40) != 0)
        {
          rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Uint(a2, (rapidjson::internal *)*a1);
        }
        else
        {
          unint64_t v7 = *(void *)a1;
          if ((v4 & 0x80) != 0) {
            rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Int64(a2, v7);
          }
          else {
            rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Uint64(a2, v7);
          }
        }
        return 1;
      }
      unint64_t v27 = *a1;
      rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a2);
      if ((v27 & 0x80000000) != 0)
      {
        uint64_t v29 = (char *)v34;
        char v33 = 45;
        unint64_t v27 = -(int)v27;
      }
      else
      {
        uint64_t v29 = &v33;
      }
      char v30 = rapidjson::internal::u32toa((rapidjson::internal *)v27, v29, v28);
      if (&v33 != v30)
      {
        unsigned __int32 v31 = v30;
        unint64_t v32 = &v33;
        do
        {
          ++v32;
          std::ostream::put();
        }
        while (v32 != v31);
      }
      goto LABEL_3;
  }
  do
  {
    if ((rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::Accept<rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>>(v17, a2) & 1) == 0)return 0; {
    v17 += 24;
    }
  }
  while (v17 != *((void *)a1 + 1) + 24 * *a1);
LABEL_32:
  uint64_t v18 = *(void *)(a2 + 32);
  uint64_t v19 = *(void *)(v18 - 16);
  *(void *)(a2 + 32) = v18 - 16;
  if (v19 && (*(unsigned char *)(a2 + 68) & 1) == 0)
  {
    std::ostream::put();
    rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteIndent(a2);
  }
LABEL_35:
  std::ostream::put();
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  if (v5 == v6)
  {
    std::ostream::flush();
LABEL_3:
    uint64_t v6 = *(void *)(a2 + 24);
    uint64_t v5 = *(void *)(a2 + 32);
  }
  if (v5 == v6) {
    std::ostream::flush();
  }
  return 1;
}

uint64_t re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<int &>(uint64_t a1, re::DynamicString *a2, _DWORD *a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v12, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    uint64_t result = re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return result;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t result = re::DynamicString::operator==(v10 + 56 * v9 + 16, (uint64_t)a2);
    if (result) {
      return result;
    }
    uint64_t v9 = *(_DWORD *)(v10 + 56 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
}

uint64_t re::DynamicArray<re::PSOToolComputeDescriptor>::add(_anonymous_namespace_ *this, re::DynamicString *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::PSOToolComputeDescriptor>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = (re::DynamicString *)(*((void *)this + 4) + 136 * v4);
  re::DynamicString::DynamicString(v5, a2);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)v5 + 32, (uint64_t)a2 + 32);
  uint64_t result = re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)v5 + 80, (uint64_t)a2 + 80);
  *((unsigned char *)v5 + 128) = *((unsigned char *)a2 + 128);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::DynamicArray<re::PSOToolTileDescriptor>::add(_anonymous_namespace_ *this, re::DynamicString *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::PSOToolTileDescriptor>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = (re::DynamicString *)(*((void *)this + 4) + 176 * v4);
  re::DynamicString::DynamicString(v5, a2);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)v5 + 32, (uint64_t)a2 + 32);
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)v5 + 80, (uint64_t)a2 + 80);
  *((void *)v5 + 16) = *((void *)a2 + 16);
  uint64_t result = re::DynamicArray<re::ShaderAPIFlags::Values>::DynamicArray((uint64_t)v5 + 136, (uint64_t *)a2 + 17);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

__n128 re::DynamicArray<re::PSOToolCustomClearDescriptor>::add(_anonymous_namespace_ *this, __n128 *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::PSOToolCustomClearDescriptor>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = (__n128 *)(*((void *)this + 4) + 96 * v4);
  re::DynamicArray<float>::DynamicArray((uint64_t)v5, (uint64_t *)a2);
  re::DynamicArray<float>::DynamicArray((uint64_t)&v5[2].n128_i64[1], &a2[2].n128_i64[1]);
  __n128 result = a2[5];
  v5[5] = result;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::MaterialFile::MaterialFile(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::DynamicString::DynamicString((re::DynamicString *)a1, (const re::DynamicString *)a2);
  re::AssetHandle::AssetHandle((re::DynamicString *)((char *)v4 + 32), (const re::AssetHandle *)(a2 + 32));
  re::MaterialParameterData::MaterialParameterData(a1 + 56, a2 + 56);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(a1 + 296, a2 + 296);
  int v5 = *(unsigned __int8 *)(a2 + 344);
  *(unsigned char *)(a1 + 344) = v5;
  if (v5) {
    *(unsigned char *)(a1 + 345) = *(unsigned char *)(a2 + 345);
  }
  int v6 = *(unsigned __int8 *)(a2 + 346);
  *(unsigned char *)(a1 + 346) = v6;
  if (v6) {
    *(unsigned char *)(a1 + 347) = *(unsigned char *)(a2 + 347);
  }
  int v7 = *(unsigned __int8 *)(a2 + 348);
  *(unsigned char *)(a1 + 348) = v7;
  if (v7) {
    *(unsigned char *)(a1 + 349) = *(unsigned char *)(a2 + 349);
  }
  int v8 = *(unsigned __int8 *)(a2 + 350);
  *(unsigned char *)(a1 + 35ArcSharedObject::ArcSharedObject(this, 0) = v8;
  if (v8) {
    *(unsigned char *)(a1 + 351) = *(unsigned char *)(a2 + 351);
  }
  int v9 = *(unsigned __int8 *)(a2 + 352);
  *(unsigned char *)(a1 + 352) = v9;
  if (v9) {
    *(unsigned char *)(a1 + 353) = *(unsigned char *)(a2 + 353);
  }
  int v10 = *(unsigned __int8 *)(a2 + 354);
  *(unsigned char *)(a1 + 354) = v10;
  if (v10) {
    *(unsigned char *)(a1 + 355) = *(unsigned char *)(a2 + 355);
  }
  int v11 = *(unsigned __int8 *)(a2 + 356);
  *(unsigned char *)(a1 + 3re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56) = v11;
  if (v11) {
    *(unsigned char *)(a1 + 357) = *(unsigned char *)(a2 + 357);
  }
  int v12 = *(unsigned __int8 *)(a2 + 358);
  *(unsigned char *)(a1 + 358) = v12;
  if (v12) {
    *(unsigned char *)(a1 + 359) = *(unsigned char *)(a2 + 359);
  }
  int v13 = *(unsigned __int8 *)(a2 + 360);
  *(unsigned char *)(a1 + 36ArcSharedObject::ArcSharedObject(this, 0) = v13;
  if (v13) {
    *(unsigned char *)(a1 + 361) = *(unsigned char *)(a2 + 361);
  }
  *(void *)(a1 + 40ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 392) = 0;
  uint64_t v14 = *(void *)(a2 + 368);
  if (v14)
  {
    unint64_t v15 = *(void *)(a2 + 384);
    *(void *)(a1 + 368) = v14;
    re::DynamicArray<re::FunctionLink>::setCapacity((void *)(a1 + 368), v15);
    ++*(_DWORD *)(a1 + 392);
    re::DynamicArray<re::FunctionLink>::copy((void *)(a1 + 368), a2 + 368);
  }
  return a1;
}

uint64_t re::MaterialParameterData::MaterialParameterData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(a1, a2);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(v4 + 48, a2 + 48);
  long long v5 = 0uLL;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a1 + 132) = 0x7FFFFFFFLL;
  if (v6)
  {
    if (*(_DWORD *)(a2 + 124) <= 3u) {
      signed int v7 = 3;
    }
    else {
      signed int v7 = *(_DWORD *)(a2 + 124);
    }
    re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1 + 96, v6, v7);
    re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1 + 96, a2 + 96);
    long long v5 = 0uLL;
  }
  *(_OWORD *)(a1 + 144) = v5;
  *(_DWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 16ArcSharedObject::ArcSharedObject(this, 0) = v5;
  uint64_t v8 = *(void *)(a2 + 144);
  *(void *)(a1 + 18ArcSharedObject::ArcSharedObject(this, 0) = 0x7FFFFFFFLL;
  if (v8)
  {
    if (*(_DWORD *)(a2 + 172) <= 3u) {
      signed int v9 = 3;
    }
    else {
      signed int v9 = *(_DWORD *)(a2 + 172);
    }
    re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1 + 144, v8, v9);
    re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1 + 144, a2 + 144);
  }
  *(_OWORD *)(a1 + 192) = 0u;
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  uint64_t v10 = *(void *)(a2 + 192);
  *(void *)(a1 + 228) = 0x7FFFFFFFLL;
  if (v10)
  {
    if (*(_DWORD *)(a2 + 220) <= 3u) {
      signed int v11 = 3;
    }
    else {
      signed int v11 = *(_DWORD *)(a2 + 220);
    }
    re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1 + 192, v10, v11);
    re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1 + 192, a2 + 192);
  }
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 36) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)a1, (uint64_t *)a2);
  *(_DWORD *)(a1 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 84) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 132) = 0x7FFFFFFFLL;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = 0;
  uint64_t v4 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = v4;
  long long v5 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = v5;
  LODWORD(v5) = *(_DWORD *)(a1 + 120);
  *(_DWORD *)(a1 + 12ArcSharedObject::ArcSharedObject(this, 0) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 12ArcSharedObject::ArcSharedObject(this, 0) = v5;
  LODWORD(v5) = *(_DWORD *)(a1 + 124);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a2 + 124) = v5;
  LODWORD(v5) = *(_DWORD *)(a1 + 128);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a2 + 128) = v5;
  LODWORD(v5) = *(_DWORD *)(a1 + 132);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a2 + 132) = v5;
  *(_DWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 16ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(void *)(a1 + 18ArcSharedObject::ArcSharedObject(this, 0) = 0x7FFFFFFFLL;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a2 + 144) = 0;
  uint64_t v6 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a2 + 152) = v6;
  signed int v7 = *(void *)(a1 + 160);
  *(void *)(a1 + 16ArcSharedObject::ArcSharedObject(this, 0) = *(void *)(a2 + 160);
  *(void *)(a2 + 16ArcSharedObject::ArcSharedObject(this, 0) = v7;
  LODWORD(v7) = *(_DWORD *)(a1 + 168);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a2 + 168) = v7;
  LODWORD(v7) = *(_DWORD *)(a1 + 172);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a2 + 172) = v7;
  LODWORD(v7) = *(_DWORD *)(a1 + 176);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a2 + 176) = v7;
  LODWORD(v7) = *(_DWORD *)(a1 + 180);
  *(_DWORD *)(a1 + 18ArcSharedObject::ArcSharedObject(this, 0) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a2 + 18ArcSharedObject::ArcSharedObject(this, 0) = v7;
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 228) = 0x7FFFFFFFLL;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a2 + 192) = 0;
  uint64_t v8 = *(void *)(a1 + 200);
  *(void *)(a1 + 20ArcSharedObject::ArcSharedObject(this, 0) = *(void *)(a2 + 200);
  *(void *)(a2 + 20ArcSharedObject::ArcSharedObject(this, 0) = v8;
  signed int v9 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a2 + 208) = v9;
  LODWORD(v9) = *(_DWORD *)(a1 + 216);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a2 + 216) = v9;
  LODWORD(v9) = *(_DWORD *)(a1 + 220);
  *(_DWORD *)(a1 + 22ArcSharedObject::ArcSharedObject(this, 0) = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(a2 + 22ArcSharedObject::ArcSharedObject(this, 0) = v9;
  LODWORD(v9) = *(_DWORD *)(a1 + 224);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_DWORD *)(a2 + 224) = v9;
  LODWORD(v9) = *(_DWORD *)(a1 + 228);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  *(_DWORD *)(a2 + 228) = v9;
  return a1;
}

re::MaterialDefinitionFile *re::MaterialDefinitionFile::MaterialDefinitionFile(re::MaterialDefinitionFile *this, const re::MaterialDefinitionFile *a2)
{
  uint64_t v4 = re::DynamicString::DynamicString(this, a2);
  re::DynamicString::DynamicString((re::DynamicString *)((char *)v4 + 32), (const re::MaterialDefinitionFile *)((char *)a2 + 32));
  re::DynamicString::DynamicString((re::MaterialDefinitionFile *)((char *)this + 64), (const re::MaterialDefinitionFile *)((char *)a2 + 64));
  re::AssetHandle::AssetHandle((re::MaterialDefinitionFile *)((char *)this + 96), (const re::MaterialDefinitionFile *)((char *)a2 + 96));
  re::AssetHandle::AssetHandle((re::MaterialDefinitionFile *)((char *)this + 120), (const re::MaterialDefinitionFile *)((char *)a2 + 120));
  re::MaterialParameterData::MaterialParameterData((uint64_t)this + 144, (uint64_t)a2 + 144);
  *((void *)this + 52) = 0;
  *((void *)this + 49) = 0;
  *((void *)this + 5ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *((void *)this + 48) = 0;
  *((_DWORD *)this + 102) = 0;
  uint64_t v5 = *((void *)a2 + 48);
  if (v5)
  {
    unint64_t v6 = *((void *)a2 + 50);
    *((void *)this + 48) = v5;
    re::DynamicArray<re::MaterialTechniqueData>::setCapacity((void *)this + 48, v6);
    ++*((_DWORD *)this + 102);
    re::DynamicArray<re::MaterialTechniqueData>::copy((void *)this + 48, (uint64_t)a2 + 384);
  }
  *((void *)this + 57) = 0;
  *((void *)this + 54) = 0;
  *((void *)this + 55) = 0;
  *((void *)this + 53) = 0;
  *((_DWORD *)this + 112) = 0;
  uint64_t v7 = *((void *)a2 + 53);
  if (v7)
  {
    unint64_t v8 = *((void *)a2 + 55);
    *((void *)this + 53) = v7;
    re::DynamicArray<re::MaterialTechniqueGroupData>::setCapacity((void *)this + 53, v8);
    ++*((_DWORD *)this + 112);
    re::DynamicArray<re::MaterialTechniqueGroupData>::copy((uint64_t)this + 424, (uint64_t)a2 + 424);
  }
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)this + 464, (uint64_t)a2 + 464);
  re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)this + 512, (uint64_t)a2 + 512);
  *((void *)this + 74) = 0;
  *((void *)this + 7ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *((void *)this + 72) = 0;
  *((void *)this + 71) = 0;
  *((_DWORD *)this + 146) = 0;
  uint64_t v9 = *((void *)a2 + 70);
  if (v9)
  {
    unint64_t v10 = *((void *)a2 + 72);
    *((void *)this + 7ArcSharedObject::ArcSharedObject(this, 0) = v9;
    re::DynamicArray<re::DebugMapping>::setCapacity((void *)this + 70, v10);
    ++*((_DWORD *)this + 146);
    re::DynamicArray<re::DebugMapping>::copy((uint64_t)this + 560, (uint64_t)a2 + 560);
  }
  *((void *)this + 79) = 0x7FFFFFFF00000000;
  *(_OWORD *)((char *)this + 60ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *((_DWORD *)this + 16ArcSharedObject::ArcSharedObject(this, 0) = 0;
  uint64_t v11 = *((void *)a2 + 75);
  if (v11)
  {
    if (*((_DWORD *)a2 + 157) <= 3u) {
      signed int v12 = 3;
    }
    else {
      signed int v12 = *((_DWORD *)a2 + 157);
    }
    re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)this + 600, v11, v12);
    re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy((uint64_t)this + 600, (uint64_t)a2 + 600);
  }
  *((void *)this + 85) = 0;
  *((void *)this + 81) = 0;
  *((void *)this + 83) = 0;
  *((void *)this + 82) = 0;
  *((_DWORD *)this + 168) = 0;
  uint64_t v13 = *((void *)a2 + 81);
  if (v13)
  {
    unint64_t v14 = *((void *)a2 + 83);
    *((void *)this + 81) = v13;
    re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::setCapacity((void *)this + 81, v14);
    ++*((_DWORD *)this + 168);
    re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::copy((uint64_t)this + 648, (uint64_t)a2 + 648);
  }
  re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)this + 688, (uint64_t)a2 + 688);
  return this;
}

re::MaterialTechniqueData *re::DynamicArray<re::MaterialTechniqueData>::copy(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::MaterialTechniqueData>::setCapacity(a1, *(void *)(a2 + 16));
    __n128 result = (re::MaterialTechniqueData *)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::MaterialTechniqueData *,re::MaterialTechniqueData *,re::MaterialTechniqueData *,0>(*(void *)(a2 + 32), *(void *)(a2 + 32) + 664 * a1[2], a1[4]);
    uint64_t v9 = a1[2];
    if (v9 != v4)
    {
      uint64_t v10 = 664 * v9;
      uint64_t v11 = (const re::MaterialTechniqueData *)(*(void *)(a2 + 32) + v10);
      __n128 result = (re::MaterialTechniqueData *)(a1[4] + v10);
      uint64_t v12 = 664 * v4 - v10;
      do
      {
        uint64_t v13 = re::MaterialTechniqueData::MaterialTechniqueData(result, v11);
        uint64_t v11 = (const re::MaterialTechniqueData *)((char *)v11 + 664);
        __n128 result = (re::MaterialTechniqueData *)((char *)v13 + 664);
        v12 -= 664;
      }
      while (v12);
    }
  }
  else
  {
    __n128 result = (re::MaterialTechniqueData *)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::MaterialTechniqueData *,re::MaterialTechniqueData *,re::MaterialTechniqueData *,0>(*(void *)(a2 + 32), *(void *)(a2 + 32) + 664 * v4, a1[4]);
    uint64_t v6 = a1[2];
    if (v4 != v6)
    {
      __n128 result = (re::MaterialTechniqueData *)(a1[4] + 664 * v4);
      uint64_t v7 = 664 * v6 - 664 * v4;
      do
      {
        re::MaterialTechniqueData::~MaterialTechniqueData(result);
        __n128 result = (re::MaterialTechniqueData *)(v8 + 664);
        v7 -= 664;
      }
      while (v7);
    }
  }
  a1[2] = v4;
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::MaterialTechniqueData *,re::MaterialTechniqueData *,re::MaterialTechniqueData *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      re::MaterialTechniqueData::operator=(a3, v4);
      v4 += 664;
      a3 += 664;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void re::DynamicArray<re::MaterialTechniqueGroupData>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= *(void *)(a1 + 16))
  {
    re::DynamicArray<re::MaterialTechniqueGroupData>::setCapacity((void *)a1, *(void *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MaterialTechniqueGroupData *,re::MaterialTechniqueGroupData *,re::MaterialTechniqueGroupData *>((int)&v15, *(re::DynamicString **)(a2 + 32), (re::DynamicString *)(*(void *)(a2 + 32) + 72 * *(void *)(a1 + 16)), *(re::DynamicString **)(a1 + 32));
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9 != v4)
    {
      uint64_t v10 = 9 * v9;
      uint64_t v11 = (uint64_t *)(*(void *)(a2 + 32) + 8 * v10);
      uint64_t v12 = (re::DynamicString *)(*(void *)(a1 + 32) + 8 * v10);
      uint64_t v13 = 72 * v4 - 8 * v10;
      do
      {
        re::DynamicString::DynamicString(v12, (const re::DynamicString *)v11);
        re::DynamicArray<re::DynamicString>::DynamicArray((uint64_t)v12 + 32, v11 + 4);
        v11 += 9;
        uint64_t v12 = (re::DynamicString *)((char *)v12 + 72);
        v13 -= 72;
      }
      while (v13);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MaterialTechniqueGroupData *,re::MaterialTechniqueGroupData *,re::MaterialTechniqueGroupData *>((int)&v14, *(re::DynamicString **)(a2 + 32), (re::DynamicString *)(*(void *)(a2 + 32) + 72 * v4), *(re::DynamicString **)(a1 + 32));
    uint64_t v5 = *(void *)(a1 + 16);
    if (v4 != v5)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = (const re::DynamicString **)(v6 + 72 * v5);
      uint64_t v8 = (const re::DynamicString **)(v6 + 72 * v4);
      do
      {
        re::MaterialTechniqueGroupData::deinit(v8);
        re::DynamicArray<re::DynamicString>::deinit((uint64_t)(v8 + 4));
        re::DynamicString::deinit((re::DynamicString *)v8);
        v8 += 9;
      }
      while (v8 != v7);
    }
  }
  *(void *)(a1 + 16) = v4;
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MaterialTechniqueGroupData *,re::MaterialTechniqueGroupData *,re::MaterialTechniqueGroupData *>(int a1, re::DynamicString *a2, re::DynamicString *a3, re::DynamicString *this)
{
  uint64_t v5 = (uint64_t *)a2;
  if (a2 != a3)
  {
    do
    {
      re::DynamicString::operator=(this, (re::DynamicString *)v5);
      re::DynamicArray<re::DynamicString>::operator=((uint64_t)this + 32, v5 + 4);
      v5 += 9;
      this = (re::DynamicString *)((char *)this + 72);
    }
    while (v5 != (uint64_t *)a3);
    return (uint64_t *)a3;
  }
  return v5;
}

void re::DynamicArray<re::DebugMapping>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= *(void *)(a1 + 16))
  {
    re::DynamicArray<re::DebugMapping>::setCapacity((void *)a1, *(void *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::DebugMapping *,re::DebugMapping *,re::DebugMapping *>((int)&v14, *(re::DynamicString **)(a2 + 32), (re::DynamicString *)(*(void *)(a2 + 32) + 80 * *(void *)(a1 + 16)), *(re::DynamicString **)(a1 + 32));
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v4)
    {
      uint64_t v9 = 5 * v8;
      uint64_t v10 = (const re::DynamicString *)(*(void *)(a2 + 32) + 16 * v9);
      uint64_t v11 = (re::DynamicString *)(*(void *)(a1 + 32) + 16 * v9);
      uint64_t v12 = 80 * v4 - 16 * v9;
      do
      {
        re::DynamicString::DynamicString(v11, v10);
        re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)v11 + 32, (uint64_t)v10 + 32);
        uint64_t v10 = (const re::DynamicString *)((char *)v10 + 80);
        uint64_t v11 = (re::DynamicString *)((char *)v11 + 80);
        v12 -= 80;
      }
      while (v12);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::DebugMapping *,re::DebugMapping *,re::DebugMapping *>((int)&v13, *(re::DynamicString **)(a2 + 32), (re::DynamicString *)(*(void *)(a2 + 32) + 80 * v4), *(re::DynamicString **)(a1 + 32));
    uint64_t v5 = *(void *)(a1 + 16);
    if (v4 != v5)
    {
      uint64_t v6 = (uint64_t *)(*(void *)(a1 + 32) + 80 * v4);
      uint64_t v7 = 80 * v5 - 80 * v4;
      do
      {
        re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v6 + 4);
        re::DynamicString::deinit((re::DynamicString *)v6);
        v6 += 10;
        v7 -= 80;
      }
      while (v7);
    }
  }
  *(void *)(a1 + 16) = v4;
}

re::DynamicString *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::DebugMapping *,re::DebugMapping *,re::DebugMapping *>(int a1, re::DynamicString *a2, re::DynamicString *a3, re::DynamicString *this)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      re::DynamicString::operator=(this, v5);
      re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)this + 32, (uint64_t)v5 + 32);
      uint64_t v5 = (re::DynamicString *)((char *)v5 + 80);
      this = (re::DynamicString *)((char *)this + 80);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u) {
        signed int v5 = 3;
      }
      else {
        signed int v5 = *(_DWORD *)(a2 + 28);
      }
      re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, v4, v5);
      re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
    }
  }
  return a1;
}

void re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, *(void *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)v8, (re::DynamicString *)(v8 + 16), (unsigned __int8 *)(v8 + 48));
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 96;
    }
  }
}

uint64_t re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, unsigned __int8 *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 96 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 96 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 96 * v9 + 8) = v12 | 0x80000000;
  uint64_t v13 = a2;
  *(_DWORD *)(*(void *)(a1 + 16) + 96 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 96 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 96 * v9) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 96 * v9 + 16), a4);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = v14 + 96 * v9;
  int v16 = *a5;
  *(unsigned char *)(v15 + 48) = v16;
  uint64_t v17 = v15 + 48;
  if (v16) {
    re::DynamicString::DynamicString((re::DynamicString *)(v17 + 8), (const re::DynamicString *)(a5 + 8));
  }
  int v18 = a5[40];
  *(unsigned char *)(v14 + 96 * v9 + 88) = v18;
  if (v18) {
    *(unsigned char *)(v14 + 96 * v9 + 89) = a5[41];
  }
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * v13) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t *re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= *(void *)(a1 + 16))
  {
    re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::setCapacity((void *)a1, *(void *)(a2 + 16));
    __n128 result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::MaterialTechniqueQualityLevelSetData *,re::MaterialTechniqueQualityLevelSetData *,re::MaterialTechniqueQualityLevelSetData *,0>(*(uint64_t **)(a2 + 32), (uint64_t *)(*(void *)(a2 + 32) + 104 * *(void *)(a1 + 16)), *(re::DynamicString **)(a1 + 32));
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9 != v4)
    {
      uint64_t v10 = 104 * v9;
      uint64_t v11 = (const re::MaterialTechniqueQualityLevelSetData *)(*(void *)(a2 + 32) + v10);
      __n128 result = (uint64_t *)(*(void *)(a1 + 32) + v10);
      uint64_t v12 = 104 * v4 - v10;
      do
      {
        uint64_t v13 = re::MaterialTechniqueQualityLevelSetData::MaterialTechniqueQualityLevelSetData((re::MaterialTechniqueQualityLevelSetData *)result, v11);
        uint64_t v11 = (const re::MaterialTechniqueQualityLevelSetData *)((char *)v11 + 104);
        __n128 result = (uint64_t *)((char *)v13 + 104);
        v12 -= 104;
      }
      while (v12);
    }
  }
  else
  {
    __n128 result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::MaterialTechniqueQualityLevelSetData *,re::MaterialTechniqueQualityLevelSetData *,re::MaterialTechniqueQualityLevelSetData *,0>(*(uint64_t **)(a2 + 32), (uint64_t *)(*(void *)(a2 + 32) + 104 * v4), *(re::DynamicString **)(a1 + 32));
    uint64_t v6 = *(void *)(a1 + 16);
    if (v4 != v6)
    {
      __n128 result = (uint64_t *)(*(void *)(a1 + 32) + 104 * v4);
      uint64_t v7 = 104 * v6 - 104 * v4;
      do
      {
        re::MaterialTechniqueQualityLevelSetData::~MaterialTechniqueQualityLevelSetData((const re::DynamicString **)result);
        __n128 result = (uint64_t *)(v8 + 104);
        v7 -= 104;
      }
      while (v7);
    }
  }
  *(void *)(a1 + 16) = v4;
  return result;
}

uint64_t *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::MaterialTechniqueQualityLevelSetData *,re::MaterialTechniqueQualityLevelSetData *,re::MaterialTechniqueQualityLevelSetData *,0>(uint64_t *a1, uint64_t *a2, re::DynamicString *a3)
{
  unint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      re::MaterialTechniqueQualityLevelSetData::operator=(a3, v4);
      v4 += 13;
      a3 = (re::DynamicString *)((char *)a3 + 104);
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

re::DynamicString *re::MaterialTechniqueQualityLevelSetData::operator=(re::DynamicString *a1, uint64_t *a2)
{
  unint64_t v4 = re::DynamicString::operator=(a1, (re::DynamicString *)a2);
  re::DynamicString::operator=((re::DynamicString *)((char *)v4 + 32), (re::DynamicString *)(a2 + 4));
  re::DynamicArray<re::DynamicString>::operator=((uint64_t)a1 + 64, a2 + 8);
  return a1;
}

uint64_t re::FixedArray<re::VertexBufferFormat>::copy(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (v2 == *(void *)(a2 + 8))
  {
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = *(void *)(a2 + 16);
      uint64_t v5 = *(void *)(result + 16);
      uint64_t v6 = 16 * v2;
      do
      {
        uint64_t v7 = v5 + v3;
        uint64_t v8 = v4 + v3;
        int v9 = *(_DWORD *)(v4 + v3);
        *(_WORD *)(v7 + 4) = *(_WORD *)(v4 + v3 + 4);
        *(_DWORD *)uint64_t v7 = v9;
        if (v4 != v5)
        {
          *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
          *(unsigned char *)(v7 + 12) = *(unsigned char *)(v8 + 12);
        }
        v3 += 16;
      }
      while (v6 != v3);
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
    __n128 result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::DynamicArray<re::BufferView>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4) {
        re::DynamicArray<re::RigNodeChannel>::copy((void **)a1, (uint64_t)a2);
      }
      else {
        *(void *)(a1 + 16) = 0;
      }
      ++*(_DWORD *)(a1 + 24);
    }
    else if (v4)
    {
      unint64_t v5 = a2[2];
      *(void *)a1 = v4;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::RigNodeChannel>::copy((void **)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 48);
      }
      else
      {
        re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::clear(a1);
      }
    }
    else if (v4)
    {
      re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::init(a1, v4, *(void *)(a2 + 8));
      re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::copy(a1, a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::FixedArray<unsigned long>>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::FixedArray<unsigned long>>::copy(a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::FixedArray<unsigned char>>::clear(a1);
      }
    }
    else if (v4)
    {
      unint64_t v5 = a2[2];
      *(void *)a1 = v4;
      re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((void *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::FixedArray<unsigned long>>::copy(a1, (uint64_t)a2);
    }
  }
  return a1;
}

void re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::copy(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v4 = *(void *)(a2 + 40);
  if (v4 >= *(void *)(a1 + 40))
  {
    re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::setBucketsCapacity((uint64_t *)a1, (v4 + 7) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::BucketArrayIterator<NS::SharedPtr<MTL::Buffer>,NS::SharedPtr<MTL::Buffer> const&,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul> const&,true>,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::BucketArrayIterator<NS::SharedPtr<MTL::Buffer>,NS::SharedPtr<MTL::Buffer> const&,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul> const&,true>,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::BucketArrayIterator<NS::SharedPtr<MTL::Buffer>,NS::SharedPtr<MTL::Buffer>&,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>&,true>>(a2, 0, a2, *(void *)(a1 + 40), a1, 0, (uint64_t *)v13);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = v4 - v7;
    if (v4 != v7)
    {
      uint64_t v9 = 0;
      do
      {
        unint64_t v10 = v9 + *(void *)(a1 + 40);
        if (*(void *)(a1 + 8) <= v10 >> 3)
        {
          memset(v13, 0, sizeof(v13));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        uint64_t v11 = a1 + 24;
        if ((*(unsigned char *)(a1 + 16) & 1) == 0) {
          uint64_t v11 = *(void *)(a1 + 32);
        }
        uint64_t v12 = *(void *)(v11 + 8 * (v10 >> 3));
        *(void *)(v12 + 8 * (v10 & 7)) = *(id *)re::BucketArray<re::ecs2::System *,8ul>::operator[](a2, v10);
        ++v9;
      }
      while (v8 != v9);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::BucketArrayIterator<NS::SharedPtr<MTL::Buffer>,NS::SharedPtr<MTL::Buffer> const&,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul> const&,true>,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::BucketArrayIterator<NS::SharedPtr<MTL::Buffer>,NS::SharedPtr<MTL::Buffer> const&,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul> const&,true>,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::BucketArrayIterator<NS::SharedPtr<MTL::Buffer>,NS::SharedPtr<MTL::Buffer>&,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>&,true>>(a2, 0, a2, *(void *)(a2 + 40), a1, 0, (uint64_t *)v13);
    if (v4 != *(void *)(a1 + 40))
    {
      unint64_t v5 = v4;
      do
      {
        uint64_t v6 = (id *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](a1, v5);
        if (*v6)
        {

          *uint64_t v6 = 0;
        }
        ++v5;
      }
      while (v5 != *(void *)(a1 + 40));
    }
  }
  *(void *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = v4;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::BucketArrayIterator<NS::SharedPtr<MTL::Buffer>,NS::SharedPtr<MTL::Buffer> const&,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul> const&,true>,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::BucketArrayIterator<NS::SharedPtr<MTL::Buffer>,NS::SharedPtr<MTL::Buffer> const&,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul> const&,true>,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::BucketArrayIterator<NS::SharedPtr<MTL::Buffer>,NS::SharedPtr<MTL::Buffer>&,re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>&,true>>(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t *a7@<X8>)
{
  if (a1 != a3 || a2 != a4)
  {
    unint64_t v13 = a4 - 1;
    do
    {
      do
      {
        unint64_t v14 = a2;
        uint64_t v15 = (void **)re::BucketArray<re::ecs2::System *,8ul>::operator[](a1, a2);
        int v16 = (void **)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](a5, a6);
        NS::SharedPtr<MTL::Texture>::operator=(v16, v15);
        a2 = v14 + 1;
        ++a6;
      }
      while (a1 != a3);
    }
    while (v13 != v14);
    a2 = a4;
  }
  *a7 = a1;
  a7[1] = a2;
  a7[2] = a5;
  a7[3] = a6;
}

void *re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::copy(_anonymous_namespace_ *a1, uint64_t *a2)
{
  __n128 result = re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::clear(a1);
  v14[0] = a2;
  unint64_t v5 = a2[2];
  if (v5 >= 0x10)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a2;
    unint64_t v8 = v5 >> 4;
    while (1)
    {
      unsigned __int16 v9 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v7 + v6)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v14[1] = (unsigned __int16)~v9;
      if (v9 != 0xFFFF) {
        break;
      }
      v6 += 16;
      if (!--v8) {
        return result;
      }
    }
    uint64_t v10 = __clz(__rbit64((unsigned __int16)~v9)) + v6;
    for (i = v10; i != -1; uint64_t v10 = i)
    {
      uint64_t v11 = *(void *)(v14[0] + 8) + 16 * v10;
      uint64_t v12 = *(void *)v11;
      v13[0] = *(unsigned char *)(v11 + 8);
      re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::internalAdd(a1, &v12, v13);
      __n128 result = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v14);
    }
  }
  return result;
}

uint64_t *re::DynamicArray<re::FixedArray<unsigned long>>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= *(void *)(a1 + 16))
  {
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((void *)a1, *(void *)(a2 + 16));
    __n128 result = (uint64_t *)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::FixedArray<unsigned long> *,re::FixedArray<unsigned long> *,re::FixedArray<unsigned long> *,0>(*(void *)(a2 + 32), *(void *)(a2 + 32) + 24 * *(void *)(a1 + 16), *(uint64_t **)(a1 + 32));
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9 != v4)
    {
      uint64_t v10 = 3 * v9;
      uint64_t v11 = *(void *)(a2 + 32) + 8 * v10;
      __n128 result = (uint64_t *)(*(void *)(a1 + 32) + 8 * v10);
      uint64_t v12 = 24 * v4 - 8 * v10;
      do
      {
        unint64_t v13 = re::FixedArray<unsigned long>::FixedArray(result, v11);
        v11 += 24;
        __n128 result = v13 + 3;
        v12 -= 24;
      }
      while (v12);
    }
  }
  else
  {
    __n128 result = (uint64_t *)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::FixedArray<unsigned long> *,re::FixedArray<unsigned long> *,re::FixedArray<unsigned long> *,0>(*(void *)(a2 + 32), *(void *)(a2 + 32) + 24 * v4, *(uint64_t **)(a1 + 32));
    uint64_t v6 = *(void *)(a1 + 16);
    if (v4 != v6)
    {
      uint64_t v7 = (uint64_t *)(*(void *)(a1 + 32) + 24 * v4);
      uint64_t v8 = 24 * v6 - 24 * v4;
      do
      {
        __n128 result = (uint64_t *)re::FixedArray<CoreIKTransform>::deinit(v7);
        v7 += 3;
        v8 -= 24;
      }
      while (v8);
    }
  }
  *(void *)(a1 + 16) = v4;
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::FixedArray<unsigned long> *,re::FixedArray<unsigned long> *,re::FixedArray<unsigned long> *,0>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      re::FixedArray<unsigned long>::operator=(a3, v4);
      v4 += 24;
      a3 += 3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t re::DynamicArray<re::TechniqueFunctionConstant>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::TechniqueFunctionConstant>::copy((void *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::TechniqueFunctionConstant>::clear(a1);
      }
    }
    else if (v4)
    {
      unint64_t v5 = a2[2];
      *(void *)a1 = v4;
      re::DynamicArray<re::TechniqueFunctionConstant>::setCapacity((void *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::TechniqueFunctionConstant>::copy((void *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addInternal<re::FunctionVariantDescriptor&>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  if (!*(void *)a1)
  {
    LODWORD(v7) = 0;
    goto LABEL_8;
  }
  unint64_t v7 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v7);
  if (v8 == 0x7FFFFFFF)
  {
LABEL_8:
    uint64_t result = re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addEmplace<re::FunctionVariantDescriptor&>(a1, v7, v6, a2, a3);
    goto LABEL_9;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  while (*(void *)(v9 + 208 * v8 + 8) != v6)
  {
    int v10 = *(_DWORD *)(v9 + 208 * v8);
    uint64_t v8 = v10 & 0x7FFFFFFF;
    if ((v10 & 0x7FFFFFFF) == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v11 = v9 + 208 * v8;
  re::DynamicString::deinit((re::DynamicString *)(v11 + 152));
  re::DynamicString::deinit((re::DynamicString *)(v11 + 120));
  re::DynamicString::deinit((re::DynamicString *)(v11 + 88));
  re::DynamicString::deinit((re::DynamicString *)(v11 + 56));
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit(v11 + 16);
  uint64_t v12 = *(void *)(a1 + 16) + 208 * v8;
  re::DynamicArray<re::TechniqueFunctionConstant>::DynamicArray(v12 + 16, (uint64_t *)a3);
  re::DynamicString::DynamicString((re::DynamicString *)(v12 + 56), (const re::DynamicString *)(a3 + 40));
  re::DynamicString::DynamicString((re::DynamicString *)(v12 + 88), (const re::DynamicString *)(a3 + 72));
  re::DynamicString::DynamicString((re::DynamicString *)(v12 + 120), (const re::DynamicString *)(a3 + 104));
  uint64_t result = (uint64_t)re::DynamicString::DynamicString((re::DynamicString *)(v12 + 152), (const re::DynamicString *)(a3 + 136));
  long long v14 = *(_OWORD *)(a3 + 168);
  *(unsigned char *)(v12 + 20ArcSharedObject::ArcSharedObject(this, 0) = *(unsigned char *)(a3 + 184);
  *(_OWORD *)(v12 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 184) = v14;
LABEL_9:
  ++*(_DWORD *)(a1 + 40);
  return result;
}

uint64_t re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addEmplace<re::FunctionVariantDescriptor&>(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 208 * v9);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 208 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  uint64_t v14 = 208 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v14) = *(_DWORD *)(*(void *)(a1 + 16) + v14) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + v14 + 8) = *a4;
  uint64_t v15 = *(void *)(a1 + 16) + v14;
  re::DynamicArray<re::TechniqueFunctionConstant>::DynamicArray(v15 + 16, (uint64_t *)a5);
  re::DynamicString::DynamicString((re::DynamicString *)(v15 + 56), (const re::DynamicString *)(a5 + 40));
  re::DynamicString::DynamicString((re::DynamicString *)(v15 + 88), (const re::DynamicString *)(a5 + 72));
  re::DynamicString::DynamicString((re::DynamicString *)(v15 + 120), (const re::DynamicString *)(a5 + 104));
  re::DynamicString::DynamicString((re::DynamicString *)(v15 + 152), (const re::DynamicString *)(a5 + 136));
  long long v16 = *(_OWORD *)(a5 + 168);
  *(unsigned char *)(v15 + 20ArcSharedObject::ArcSharedObject(this, 0) = *(unsigned char *)(a5 + 184);
  *(_OWORD *)(v15 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 184) = v16;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v39, 0, 36);
      *(void *)&v39[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init((uint64_t)v39, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v39;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v39[8];
      *(_OWORD *)uint64_t v39 = v5;
      *(void *)&v39[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v39[24];
      *(_OWORD *)&v39[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v39[32];
      *(_OWORD *)(a1 + 24) = v9;
      unsigned int v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        uint64_t v12 = v7;
        int v13 = DWORD1(v9);
        uint64_t v14 = 184;
        do
        {
          uint64_t v15 = *(void *)&v39[16];
          uint64_t v16 = *(void *)&v39[16] + v14;
          if ((*(_DWORD *)(*(void *)&v39[16] + v14 - 184) & 0x80000000) != 0)
          {
            unint64_t v17 = *(void *)(v16 - 176);
            unint64_t v18 = *(unsigned int *)(a1 + 24);
            unint64_t v19 = v17 % v18;
            unsigned int v20 = *(_DWORD *)(a1 + 36);
            if (v20 == 0x7FFFFFFF)
            {
              unsigned int v20 = *(_DWORD *)(a1 + 32);
              unsigned int v21 = v20;
              if (v20 == v18)
              {
                re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, (2 * v13));
                unint64_t v19 = v17 % *(unsigned int *)(a1 + 24);
                unsigned int v21 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
                unint64_t v17 = *(void *)(v16 - 176);
              }
              *(_DWORD *)(a1 + 32) = v21 + 1;
              uint64_t v22 = *(void *)(a1 + 16);
              int v23 = *(_DWORD *)(v22 + 208 * v20);
            }
            else
            {
              uint64_t v22 = *(void *)(a1 + 16);
              int v23 = *(_DWORD *)(v22 + 208 * v20);
              *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
            }
            uint64_t v24 = 208 * v20;
            *(_DWORD *)(v22 + v24) = v23 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + v24) = *(_DWORD *)(*(void *)(a1 + 16) + v24) & 0x80000000 | *(_DWORD *)(v12 + 4 * v19);
            *(void *)(*(void *)(a1 + 16) + v24 + 8) = v17;
            uint64_t v25 = *(void *)(a1 + 16) + v24;
            *(void *)(v25 + 48) = 0;
            *(_DWORD *)(v25 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
            *(void *)(v25 + 24) = 0;
            *(void *)(v25 + 32) = 0;
            *(void *)(v25 + 16) = 0;
            *(void *)(v25 + 16) = *(void *)(v16 - 168);
            *(void *)(v16 - 168) = 0;
            uint64_t v26 = v15 + v14;
            *(void *)(v25 + 24) = *(void *)(v15 + v14 - 160);
            *(void *)(v26 - 16ArcSharedObject::ArcSharedObject(this, 0) = 0;
            uint64_t v27 = *(void *)(v25 + 32);
            *(void *)(v25 + 32) = *(void *)(v15 + v14 - 152);
            *(void *)(v26 - 152) = v27;
            uint64_t v28 = *(void *)(v25 + 48);
            *(void *)(v25 + 48) = *(void *)(v15 + v14 - 136);
            *(void *)(v26 - 136) = v28;
            *(_DWORD *)(v26 - 144) = *(_DWORD *)(v15 + v14 - 144) + 1;
            ++*(_DWORD *)(v25 + 40);
            *(_OWORD *)(v25 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56) = 0u;
            *(_OWORD *)(v25 + 72) = 0u;
            *(void *)(v25 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56) = *(void *)(v15 + v14 - 128);
            *(void *)(v26 - 128) = 0;
            uint64_t v29 = *(void *)(v25 + 72);
            *(void *)(v25 + 72) = *(void *)(v15 + v14 - 112);
            *(void *)(v26 - 112) = v29;
            *(void *)(v25 + 8ArcSharedObject::ArcSharedObject(this, 0) = *(void *)(v15 + v14 - 104);
            *(void *)(v26 - 104) = 0;
            uint64_t v30 = *(void *)(v25 + 64);
            *(void *)(v25 + 64) = *(void *)(v15 + v14 - 120);
            *(void *)(v26 - 12ArcSharedObject::ArcSharedObject(this, 0) = v30;
            *(_OWORD *)(v25 + 104) = 0u;
            *(_OWORD *)(v25 + 88) = 0u;
            *(void *)(v25 + 88) = *(void *)(v15 + v14 - 96);
            *(void *)(v26 - 96) = 0;
            uint64_t v31 = *(void *)(v25 + 104);
            *(void *)(v25 + 104) = *(void *)(v15 + v14 - 80);
            *(void *)(v26 - 8ArcSharedObject::ArcSharedObject(this, 0) = v31;
            *(void *)(v25 + 112) = *(void *)(v15 + v14 - 72);
            *(void *)(v26 - 72) = 0;
            uint64_t v32 = *(void *)(v25 + 96);
            *(void *)(v25 + 96) = *(void *)(v15 + v14 - 88);
            *(void *)(v26 - 88) = v32;
            *(_OWORD *)(v25 + 136) = 0u;
            *(_OWORD *)(v25 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0u;
            *(void *)(v25 + 12ArcSharedObject::ArcSharedObject(this, 0) = *(void *)(v15 + v14 - 64);
            *(void *)(v26 - 64) = 0;
            uint64_t v33 = *(void *)(v25 + 136);
            *(void *)(v25 + 136) = *(void *)(v15 + v14 - 48);
            *(void *)(v26 - 48) = v33;
            *(void *)(v25 + 144) = *(void *)(v15 + v14 - 40);
            *(void *)(v26 - 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
            uint64_t v34 = *(void *)(v25 + 128);
            *(void *)(v25 + 128) = *(void *)(v15 + v14 - 56);
            *(void *)(v26 - re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56) = v34;
            *(_OWORD *)(v25 + 168) = 0u;
            *(_OWORD *)(v25 + 152) = 0u;
            *(void *)(v25 + 152) = *(void *)(v15 + v14 - 32);
            *(void *)(v26 - 32) = 0;
            uint64_t v35 = *(void *)(v25 + 168);
            *(void *)(v25 + 168) = *(void *)(v15 + v14 - 16);
            *(void *)(v26 - 16) = v35;
            *(void *)(v25 + 176) = *(void *)(v15 + v14 - 8);
            *(void *)(v26 - 8) = 0;
            uint64_t v36 = *(void *)(v25 + 160);
            *(void *)(v25 + 16ArcSharedObject::ArcSharedObject(this, 0) = *(void *)(v15 + v14 - 24);
            *(void *)(v26 - 24) = v36;
            long long v37 = *(_OWORD *)(v15 + v14);
            *(unsigned char *)(v25 + 20ArcSharedObject::ArcSharedObject(this, 0) = *(unsigned char *)(v15 + v14 + 16);
            *(_OWORD *)(v25 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 184) = v37;
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v19) = v20;
            int v13 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v13;
            unsigned int v10 = *(_DWORD *)&v39[32];
          }
          ++v11;
          v14 += 208;
        }
        while (v11 < v10);
      }
      re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)v39);
    }
  }
  else
  {
    if (a2) {
      signed int v38 = a2;
    }
    else {
      signed int v38 = 3;
    }
  }
}

void re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 208 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy(uint64_t a1)
{
  free(*(void **)(a1 + 16));
  uint64_t result = *(void *)(a1 + 8);
  if (result)
  {
    JUMPOUT(0x237DBCBD0);
  }
  return result;
}

void re::HashTable<re::DynamicString,re::MaterialDefinitionFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v50, 0, 36);
      *(void *)&v50[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::MaterialDefinitionFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v50, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v50;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v50[8];
      *(_OWORD *)char v50 = v5;
      *(void *)&v50[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v50[24];
      *(_OWORD *)&v50[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v50[32];
      *(_OWORD *)(a1 + 24) = v9;
      unsigned int v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        uint64_t v12 = v7;
        int v13 = DWORD1(v9);
        uint64_t v14 = 736;
        do
        {
          uint64_t v15 = *(void *)&v50[16];
          uint64_t v16 = *(void *)&v50[16] + v14;
          if ((*(_DWORD *)(*(void *)&v50[16] + v14 - 728) & 0x80000000) != 0)
          {
            unint64_t v17 = *(void *)(v16 - 736);
            unint64_t v18 = *(unsigned int *)(a1 + 24);
            unint64_t v19 = v17 % v18;
            unsigned int v20 = *(_DWORD *)(a1 + 36);
            if (v20 == 0x7FFFFFFF)
            {
              unsigned int v20 = *(_DWORD *)(a1 + 32);
              unsigned int v21 = v20;
              if (v20 == v18)
              {
                re::HashTable<re::DynamicString,re::MaterialDefinitionFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * v13));
                unint64_t v19 = v17 % *(unsigned int *)(a1 + 24);
                unsigned int v21 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v21 + 1;
              uint64_t v22 = *(void *)(a1 + 16);
              int v23 = *(_DWORD *)(v22 + 784 * v20 + 8);
            }
            else
            {
              uint64_t v22 = *(void *)(a1 + 16);
              int v23 = *(_DWORD *)(v22 + 784 * v20 + 8);
              *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
            }
            uint64_t v24 = (const re::DynamicString *)(v16 - 720);
            uint64_t v25 = (void *)(v16 - 688);
            *(_DWORD *)(v22 + 784 * v20 + 8) = v23 | 0x80000000;
            uint64_t v26 = *(void *)(a1 + 16) + 784 * v20;
            *(_DWORD *)(v26 + 8) = *(_DWORD *)(v26 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v19);
            *(void *)(*(void *)(a1 + 16) + 784 * v2ArcSharedObject::ArcSharedObject(this, 0) = v17;
            re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 784 * v20 + 16), v24);
            uint64_t v27 = *(void *)(a1 + 16) + 784 * v20;
            *(_OWORD *)(v27 + 48) = 0u;
            *(_OWORD *)(v27 + 64) = 0u;
            *(void *)(v27 + 48) = *v25;
            *uint64_t v25 = 0;
            uint64_t v28 = (uint64_t *)(v15 + v14);
            uint64_t v29 = *(void *)(v27 + 64);
            *(void *)(v27 + 64) = *(v28 - 84);
            *(v28 - 84) = v29;
            *(void *)(v27 + 72) = *(v28 - 83);
            *(v28 - 83) = 0;
            uint64_t v30 = *(void *)(v27 + 56);
            *(void *)(v27 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56) = *(v28 - 85);
            *(v28 - 85) = v30;
            *(_OWORD *)(v27 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
            *(_OWORD *)(v27 + 96) = 0u;
            *(void *)(v27 + 8ArcSharedObject::ArcSharedObject(this, 0) = *(v28 - 82);
            *(v28 - 82) = 0;
            uint64_t v31 = *(void *)(v27 + 96);
            *(void *)(v27 + 96) = *(v28 - 80);
            *(v28 - 8ArcSharedObject::ArcSharedObject(this, 0) = v31;
            *(void *)(v27 + 104) = *(v28 - 79);
            *(v28 - 79) = 0;
            uint64_t v32 = *(void *)(v27 + 88);
            *(void *)(v27 + 88) = *(v28 - 81);
            *(v28 - 81) = v32;
            *(_OWORD *)(v27 + 112) = 0u;
            *(_OWORD *)(v27 + 128) = 0u;
            *(void *)(v27 + 112) = *(v28 - 78);
            *(v28 - 78) = 0;
            uint64_t v33 = *(void *)(v27 + 128);
            *(void *)(v27 + 128) = *(v28 - 76);
            *(v28 - 76) = v33;
            *(void *)(v27 + 136) = *(v28 - 75);
            *(v28 - 75) = 0;
            uint64_t v34 = *(void *)(v27 + 120);
            *(void *)(v27 + 12ArcSharedObject::ArcSharedObject(this, 0) = *(v28 - 77);
            *(v28 - 77) = v34;
            *(void *)(v27 + 144) = 0;
            *(void *)(v27 + 152) = 0;
            *(void *)(v27 + 16ArcSharedObject::ArcSharedObject(this, 0) = 0;
            *(void *)(v27 + 152) = *(v28 - 73);
            *(v28 - 73) = 0;
            uint64_t v35 = *(void *)(v27 + 144);
            *(void *)(v27 + 144) = 0;
            *(void *)(v27 + 144) = *(v28 - 74);
            *(v28 - 74) = v35;
            uint64_t v36 = *(void *)(v27 + 160);
            *(void *)(v27 + 16ArcSharedObject::ArcSharedObject(this, 0) = *(v28 - 72);
            *(v28 - 72) = v36;
            *(void *)(v27 + 168) = 0;
            *(void *)(v27 + 176) = 0;
            *(void *)(v27 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 184) = 0;
            *(void *)(v27 + 176) = *(v28 - 70);
            *(v28 - 7ArcSharedObject::ArcSharedObject(this, 0) = 0;
            uint64_t v37 = *(void *)(v27 + 168);
            *(void *)(v27 + 168) = 0;
            *(void *)(v27 + 168) = *(v28 - 71);
            *(v28 - 71) = v37;
            uint64_t v38 = *(void *)(v27 + 184);
            *(void *)(v27 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 184) = *(v28 - 69);
            *(v28 - 69) = v38;
            re::MaterialParameterData::MaterialParameterData(v27 + 192, (uint64_t)(v28 - 68));
            *(void *)(v27 + 464) = 0;
            *(_DWORD *)(v27 + 4re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56) = 0;
            *(void *)(v27 + 44ArcSharedObject::ArcSharedObject(this, 0) = 0;
            *(void *)(v27 + 448) = 0;
            *(void *)(v27 + 432) = 0;
            *(void *)(v27 + 432) = *(v28 - 38);
            *(v28 - 38) = 0;
            *(void *)(v27 + 44ArcSharedObject::ArcSharedObject(this, 0) = *(v28 - 37);
            *(v28 - 37) = 0;
            uint64_t v39 = *(void *)(v27 + 448);
            *(void *)(v27 + 448) = *(v28 - 36);
            *(v28 - 36) = v39;
            uint64_t v40 = *(void *)(v27 + 464);
            *(void *)(v27 + 464) = *(v28 - 34);
            *(v28 - 34) = v40;
            ++*((_DWORD *)v28 - 70);
            ++*(_DWORD *)(v27 + 456);
            *(void *)(v27 + 504) = 0;
            *(void *)(v27 + 48ArcSharedObject::ArcSharedObject(this, 0) = 0;
            *(void *)(v27 + 488) = 0;
            *(void *)(v27 + 472) = 0;
            *(_DWORD *)(v27 + 496) = 0;
            *(void *)(v27 + 472) = *(v28 - 33);
            *(v28 - 33) = 0;
            *(void *)(v27 + 48ArcSharedObject::ArcSharedObject(this, 0) = *(v28 - 32);
            *(v28 - 32) = 0;
            uint64_t v41 = *(void *)(v27 + 488);
            *(void *)(v27 + 488) = *(v28 - 31);
            *(v28 - 31) = v41;
            uint64_t v42 = *(void *)(v27 + 504);
            *(void *)(v27 + 504) = *(v28 - 29);
            *(v28 - 29) = v42;
            ++*((_DWORD *)v28 - 60);
            ++*(_DWORD *)(v27 + 496);
            *(_OWORD *)(v27 + 512) = 0u;
            *(_OWORD *)(v27 + 528) = 0u;
            *(_DWORD *)(v27 + 544) = 0;
            *(void *)(v27 + 548) = 0x7FFFFFFFLL;
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(v27 + 512), v28 - 28);
            *(_DWORD *)(v27 + 592) = 0;
            *(_OWORD *)(v27 + 56ArcSharedObject::ArcSharedObject(this, 0) = 0u;
            *(_OWORD *)(v27 + 576) = 0u;
            *(void *)(v27 + 596) = 0x7FFFFFFFLL;
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(v27 + 560), v28 - 22);
            *(void *)(v27 + 64ArcSharedObject::ArcSharedObject(this, 0) = 0;
            *(_DWORD *)(v27 + 632) = 0;
            *(void *)(v27 + 624) = 0;
            *(void *)(v27 + 616) = 0;
            *(void *)(v27 + 608) = 0;
            *(void *)(v27 + 608) = *(v28 - 16);
            *(v28 - 16) = 0;
            *(void *)(v27 + 616) = *(v28 - 15);
            *(v28 - 15) = 0;
            uint64_t v43 = *(void *)(v27 + 624);
            *(void *)(v27 + 624) = *(v28 - 14);
            *(v28 - 14) = v43;
            uint64_t v44 = *(void *)(v27 + 640);
            *(void *)(v27 + 64ArcSharedObject::ArcSharedObject(this, 0) = *(v28 - 12);
            *(v28 - 12) = v44;
            ++*((_DWORD *)v28 - 26);
            ++*(_DWORD *)(v27 + 632);
            *(_DWORD *)(v27 + 68ArcSharedObject::ArcSharedObject(this, 0) = 0;
            *(_OWORD *)(v27 + 648) = 0u;
            *(_OWORD *)(v27 + 664) = 0u;
            *(void *)(v27 + 684) = 0x7FFFFFFFLL;
            *(void *)(v27 + 648) = *(v28 - 11);
            *(v28 - 11) = 0;
            uint64_t v45 = *(void *)(v27 + 656);
            *(void *)(v27 + 6re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56) = *(v28 - 10);
            *(v28 - 1ArcSharedObject::ArcSharedObject(this, 0) = v45;
            uint64_t v46 = *(void *)(v27 + 664);
            *(void *)(v27 + 664) = *(v28 - 9);
            *(v28 - 9) = v46;
            LODWORD(v46) = *(_DWORD *)(v27 + 672);
            *(_DWORD *)(v27 + 672) = *((_DWORD *)v28 - 16);
            *((_DWORD *)v28 - 16) = v46;
            LODWORD(v46) = *(_DWORD *)(v27 + 676);
            *(_DWORD *)(v27 + 676) = *((_DWORD *)v28 - 15);
            *((_DWORD *)v28 - 15) = v46;
            LODWORD(v46) = *(_DWORD *)(v27 + 680);
            *(_DWORD *)(v27 + 68ArcSharedObject::ArcSharedObject(this, 0) = *((_DWORD *)v28 - 14);
            *((_DWORD *)v28 - 14) = v46;
            LODWORD(v46) = *(_DWORD *)(v27 + 684);
            *(_DWORD *)(v27 + 684) = *((_DWORD *)v28 - 13);
            *((_DWORD *)v28 - 13) = v46;
            *(void *)(v27 + 728) = 0;
            *(void *)(v27 + 696) = 0;
            *(void *)(v27 + 712) = 0;
            *(void *)(v27 + 704) = 0;
            *(_DWORD *)(v27 + 72ArcSharedObject::ArcSharedObject(this, 0) = 0;
            *(void *)(v27 + 696) = *(v28 - 5);
            *(v28 - 5) = 0;
            *(void *)(v27 + 704) = *(v28 - 4);
            *(v28 - 4) = 0;
            uint64_t v47 = *(void *)(v27 + 712);
            *(void *)(v27 + 712) = *(v28 - 3);
            *(v28 - 3) = v47;
            uint64_t v48 = *(void *)(v27 + 728);
            *(void *)(v27 + 728) = *(v28 - 1);
            *(v28 - 1) = v48;
            ++*((_DWORD *)v28 - 4);
            ++*(_DWORD *)(v27 + 720);
            *(_OWORD *)(v27 + 736) = 0u;
            *(_OWORD *)(v27 + 752) = 0u;
            *(_DWORD *)(v27 + 768) = 0;
            *(void *)(v27 + 772) = 0x7FFFFFFFLL;
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(v27 + 736), v28);
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v19) = v20;
            int v13 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v13;
            unsigned int v10 = *(_DWORD *)&v50[32];
          }
          ++v11;
          v14 += 784;
        }
        while (v11 < v10);
      }
      re::HashTable<re::DynamicString,re::MaterialDefinitionFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v50);
    }
  }
  else
  {
    if (a2) {
      signed int v49 = a2;
    }
    else {
      signed int v49 = 3;
    }
  }
}

void re::HashTable<re::DynamicString,re::MaterialDefinitionFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 784 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

double re::HashTable<re::DynamicString,re::MaterialDefinitionFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::MaterialDefinitionFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free((_DWORD *)(a1[2] + v3));
        ++v4;
        v3 += 784;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<re::DynamicString,re::MaterialDefinitionFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(_DWORD *a1)
{
  int v1 = a1[2];
  if (v1 < 0)
  {
    a1[2] = v1 & 0x7FFFFFFF;
    re::DynamicString::deinit((re::DynamicString *)(a1 + 4));
    re::MaterialDefinitionFile::~MaterialDefinitionFile((re::MaterialDefinitionFile *)(a1 + 12));
  }
}

void re::HashTable<re::DynamicString,re::MaterialFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v41, 0, 36);
      *(void *)&v41[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::MaterialFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v41, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v41;
      unint64_t v6 = *(uint64_t **)(a1 + 16);
      long long v7 = *(_OWORD *)&v41[8];
      *(_OWORD *)uint64_t v41 = v5;
      *(void *)&v41[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v41[24];
      *(_OWORD *)&v41[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v41[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        do
        {
          if ((v6[1] & 0x80000000) != 0)
          {
            unint64_t v14 = *v6;
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = *v6 % v15;
            unsigned int v17 = *(_DWORD *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              unsigned int v17 = *(_DWORD *)(a1 + 32);
              unsigned int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<re::DynamicString,re::MaterialFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * v12));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                unsigned int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 456 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 456 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 456 * v17 + 8) = v20 | 0x80000000;
            uint64_t v21 = *(void *)(a1 + 16) + 456 * v17;
            *(_DWORD *)(v21 + 8) = *(_DWORD *)(v21 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 456 * v17) = v14;
            re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 456 * v17 + 16), (const re::DynamicString *)(v6 + 2));
            uint64_t v22 = *(void *)(a1 + 16);
            uint64_t v23 = v22 + 456 * v17;
            *(_OWORD *)(v23 + 48) = 0u;
            *(_OWORD *)(v23 + 64) = 0u;
            *(void *)(v23 + 48) = v6[6];
            void v6[6] = 0;
            uint64_t v24 = *(void *)(v23 + 64);
            *(void *)(v23 + 64) = v6[8];
            v6[8] = v24;
            *(void *)(v23 + 72) = v6[9];
            v6[9] = 0;
            uint64_t v25 = *(void *)(v23 + 56);
            *(void *)(v23 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56) = v6[7];
            v6[7] = v25;
            *(void *)(v23 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
            *(void *)(v23 + 88) = 0;
            *(void *)(v23 + 96) = 0;
            *(void *)(v23 + 88) = v6[11];
            v6[11] = 0;
            uint64_t v26 = *(void *)(v23 + 80);
            *(void *)(v23 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
            *(void *)(v23 + 8ArcSharedObject::ArcSharedObject(this, 0) = v6[10];
            v6[10] = v26;
            uint64_t v27 = *(void *)(v23 + 96);
            *(void *)(v23 + 96) = v6[12];
            v6[12] = v27;
            re::MaterialParameterData::MaterialParameterData(v23 + 104, (uint64_t)(v6 + 13));
            *(_DWORD *)(v23 + 376) = 0;
            *(_OWORD *)(v23 + 344) = 0u;
            *(_OWORD *)(v23 + 36ArcSharedObject::ArcSharedObject(this, 0) = 0u;
            *(void *)(v23 + 38ArcSharedObject::ArcSharedObject(this, 0) = 0x7FFFFFFFLL;
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(v23 + 344), v6 + 43);
            int v28 = *((unsigned __int8 *)v6 + 392);
            *(unsigned char *)(v23 + 392) = v28;
            if (v28) {
              *(unsigned char *)(v22 + 456 * v17 + 393) = *((unsigned char *)v6 + 393);
            }
            int v29 = *((unsigned __int8 *)v6 + 394);
            *(unsigned char *)(v22 + 456 * v17 + 394) = v29;
            if (v29) {
              *(unsigned char *)(v22 + 456 * v17 + 395) = *((unsigned char *)v6 + 395);
            }
            int v30 = *((unsigned __int8 *)v6 + 396);
            *(unsigned char *)(v22 + 456 * v17 + 396) = v30;
            if (v30) {
              *(unsigned char *)(v22 + 456 * v17 + 397) = *((unsigned char *)v6 + 397);
            }
            int v31 = *((unsigned __int8 *)v6 + 398);
            *(unsigned char *)(v22 + 456 * v17 + 398) = v31;
            if (v31) {
              *(unsigned char *)(v22 + 456 * v17 + 399) = *((unsigned char *)v6 + 399);
            }
            int v32 = *((unsigned __int8 *)v6 + 400);
            *(unsigned char *)(v22 + 456 * v17 + 40ArcSharedObject::ArcSharedObject(this, 0) = v32;
            if (v32) {
              *(unsigned char *)(v22 + 456 * v17 + 401) = *((unsigned char *)v6 + 401);
            }
            int v33 = *((unsigned __int8 *)v6 + 402);
            *(unsigned char *)(v22 + 456 * v17 + 402) = v33;
            if (v33) {
              *(unsigned char *)(v22 + 456 * v17 + 403) = *((unsigned char *)v6 + 403);
            }
            int v34 = *((unsigned __int8 *)v6 + 404);
            *(unsigned char *)(v22 + 456 * v17 + 404) = v34;
            if (v34) {
              *(unsigned char *)(v22 + 456 * v17 + 405) = *((unsigned char *)v6 + 405);
            }
            int v35 = *((unsigned __int8 *)v6 + 406);
            *(unsigned char *)(v22 + 456 * v17 + 406) = v35;
            if (v35) {
              *(unsigned char *)(v22 + 456 * v17 + 407) = *((unsigned char *)v6 + 407);
            }
            int v36 = *((unsigned __int8 *)v6 + 408);
            *(unsigned char *)(v22 + 456 * v17 + 408) = v36;
            if (v36) {
              *(unsigned char *)(v22 + 456 * v17 + 409) = *((unsigned char *)v6 + 409);
            }
            uint64_t v37 = v22 + 456 * v17;
            *(void *)(v37 + 448) = 0;
            *(void *)(v37 + 424) = 0;
            *(void *)(v37 + 432) = 0;
            *(void *)(v37 + 416) = 0;
            *(_DWORD *)(v37 + 44ArcSharedObject::ArcSharedObject(this, 0) = 0;
            *(void *)(v37 + 416) = v6[52];
            v6[52] = 0;
            *(void *)(v37 + 424) = v6[53];
            v6[53] = 0;
            uint64_t v38 = *(void *)(v37 + 432);
            *(void *)(v37 + 432) = v6[54];
            v6[54] = v38;
            uint64_t v39 = *(void *)(v37 + 448);
            *(void *)(v37 + 448) = v6[56];
            v6[56] = v39;
            ++*((_DWORD *)v6 + 110);
            ++*(_DWORD *)(v37 + 440);
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v16) = v17;
            int v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v6 += 57;
        }
        while (v11 < v10);
      }
      re::HashTable<re::DynamicString,re::MaterialFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v41);
    }
  }
  else
  {
    if (a2) {
      signed int v40 = a2;
    }
    else {
      signed int v40 = 3;
    }
  }
}

void re::HashTable<re::DynamicString,re::MaterialFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 456 * v10, 16);
  if (v12)
  {
    unint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

double re::HashTable<re::DynamicString,re::MaterialFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::MaterialFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 456;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::DynamicString,re::MaterialFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 0)
  {
    *(_DWORD *)(a1 + 8) = v1 & 0x7FFFFFFF;
    re::DynamicString::deinit((re::DynamicString *)(a1 + 16));
    re::DynamicArray<re::FunctionLink>::deinit(a1 + 416);
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(a1 + 344));
    re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(a1 + 296));
    re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(a1 + 248));
    re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(a1 + 200));
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(a1 + 152));
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(a1 + 104));
    re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 80));
    return re::DynamicString::deinit((re::DynamicString *)(a1 + 48));
  }
  return result;
}

void re::HashTable<re::DynamicString,re::MaterialDefinitionFile *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(void *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)v22, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v22;
      unint64_t v6 = *(unint64_t **)(a1 + 16);
      long long v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)uint64_t v22 = v5;
      *(void *)&unsigned char v22[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        do
        {
          if ((v6[1] & 0x80000000) != 0)
          {
            unint64_t v14 = *v6;
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = *v6 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<re::DynamicString,re::MaterialDefinitionFile *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * v12));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 56 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 56 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 56 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 56 * v17 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 56 * v17 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 56 * v17) = v14;
            re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 56 * v17 + 16), (const re::DynamicString *)(v6 + 2));
            *(void *)(*(void *)(a1 + 16) + 56 * v17 + 48) = v6[6];
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v16) = v17;
            int v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v6 += 7;
        }
        while (v11 < v10);
      }
      re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2) {
      signed int v21 = a2;
    }
    else {
      signed int v21 = 3;
    }
  }
}

void re::HashTable<re::DynamicString,NS::SharedPtr<MTL::Function>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v23, 0, 36);
      *(void *)&v23[36] = 0x7FFFFFFFLL;
      re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)v23, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v23;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v23[8];
      *(_OWORD *)uint64_t v23 = v5;
      *(void *)&v23[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v23[24];
      *(_OWORD *)&v23[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v23[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        unint64_t v14 = (void *)(v6 + 48);
        do
        {
          if ((*(_DWORD *)(v14 - 5) & 0x80000000) != 0)
          {
            unint64_t v15 = *(v14 - 6);
            unint64_t v16 = *(unsigned int *)(a1 + 24);
            unint64_t v17 = v15 % v16;
            uint64_t v18 = *(unsigned int *)(a1 + 36);
            if (v18 == 0x7FFFFFFF)
            {
              uint64_t v18 = *(unsigned int *)(a1 + 32);
              int v19 = v18;
              if (v18 == v16)
              {
                re::HashTable<re::DynamicString,NS::SharedPtr<MTL::Function>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * v12));
                unint64_t v17 = v15 % *(unsigned int *)(a1 + 24);
                int v19 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 56 * v18 + 8);
            }
            else
            {
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 56 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 56 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 56 * v18 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 56 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(void *)(*(void *)(a1 + 16) + 56 * v18) = v15;
            re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 56 * v18 + 16), (const re::DynamicString *)(v14 - 4));
            *(void *)(*(void *)(a1 + 16) + 56 * v18 + 48) = *v14;
            *unint64_t v14 = 0;
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            int v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 7;
        }
        while (v11 < v10);
      }
      re::HashTable<re::DynamicString,NS::SharedPtr<MTL::Function>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v23);
    }
  }
  else
  {
    if (a2) {
      signed int v22 = a2;
    }
    else {
      signed int v22 = 3;
    }
  }
}

double re::HashTable<re::DynamicString,NS::SharedPtr<MTL::Function>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,NS::SharedPtr<MTL::Function>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 56;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<re::DynamicString,NS::SharedPtr<MTL::Function>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 0)
  {
    *(_DWORD *)(a1 + 8) = v1 & 0x7FFFFFFF;
    re::DynamicString::deinit((re::DynamicString *)(a1 + 16));
    uint64_t v3 = *(void **)(a1 + 48);
    if (v3)
    {

      *(void *)(a1 + 48) = 0;
    }
  }
}

void *re::DynamicArray<re::PSOToolRenderDescriptor>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    long long v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::PSOToolRenderDescriptor>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xE8uLL))
        {
          uint64_t v2 = 232 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 232 * a2, 8);
          if (result)
          {
            long long v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 232, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      long long v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 232 * v9;
        uint64_t v11 = (uint64_t)v7;
        do
        {
          re::PSOToolRenderDescriptor::PSOToolRenderDescriptor(v11, v8);
          re::DynamicArray<unsigned long>::deinit(v8 + 192);
          re::DynamicArray<unsigned long>::deinit(v8 + 152);
          re::DynamicString::deinit((re::DynamicString *)(v8 + 112));
          re::DynamicArray<unsigned long>::deinit(v8 + 72);
          v8 += 232;
          v11 += 232;
          v10 -= 232;
        }
        while (v10);
        uint64_t v8 = v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

double re::PSOToolRenderDescriptor::PSOToolRenderDescriptor(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  int v5 = *(unsigned __int8 *)(a2 + 68);
  *(unsigned char *)(a1 + 68) = v5;
  if (v5) {
    *(unsigned char *)(a1 + 69) = *(unsigned char *)(a2 + 69);
  }
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 8ArcSharedObject::ArcSharedObject(this, 0) = v6;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  uint64_t v7 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 88) = v7;
  uint64_t v8 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = v8;
  ++*(_DWORD *)(a2 + 96);
  ++*(_DWORD *)(a1 + 96);
  double result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  uint64_t v11 = *(void *)(a2 + 128);
  *(void *)(a2 + 136) = 0;
  uint64_t v13 = *(void *)(a1 + 120);
  uint64_t v12 = *(void *)(a1 + 128);
  *(void *)(a1 + 12ArcSharedObject::ArcSharedObject(this, 0) = v10;
  *(void *)(a1 + 128) = v11;
  *(void *)(a2 + 12ArcSharedObject::ArcSharedObject(this, 0) = v13;
  *(void *)(a2 + 128) = v12;
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 184) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  *(void *)(a1 + 16ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 152) = 0;
  uint64_t v14 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 16ArcSharedObject::ArcSharedObject(this, 0) = v14;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 16ArcSharedObject::ArcSharedObject(this, 0) = 0;
  uint64_t v15 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a2 + 168) = v15;
  uint64_t v16 = *(void *)(a1 + 184);
  *(void *)(a1 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 184) = *(void *)(a2 + 184);
  *(void *)(a2 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 184) = v16;
  ++*(_DWORD *)(a2 + 176);
  ++*(_DWORD *)(a1 + 176);
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 20ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  uint64_t v17 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 20ArcSharedObject::ArcSharedObject(this, 0) = v17;
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 20ArcSharedObject::ArcSharedObject(this, 0) = 0;
  uint64_t v18 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a2 + 208) = v18;
  uint64_t v19 = *(void *)(a1 + 224);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a2 + 224) = v19;
  ++*(_DWORD *)(a2 + 216);
  ++*(_DWORD *)(a1 + 216);
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[2]>(uint64_t a1, re::DynamicString *a2, int a3, const char *a4)
{
  unint64_t v8 = re::Hash<re::DynamicString>::operator()((uint64_t)&v18, (uint64_t)a2);
  unint64_t v9 = v8;
  if (!*(void *)a1)
  {
    LODWORD(v1ArcSharedObject::ArcSharedObject(this, 0) = 0;
    goto LABEL_8;
  }
  unint64_t v10 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v11 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v10);
  if (v11 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<char const(&)[5]>(a1, v10, v9, a2, a4);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v14 = *(void *)(a1 + 16) + 80 * v13;
    return v14 + 48;
  }
  uint64_t v12 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v12 + 80 * v11 + 16, (uint64_t)a2))
  {
    uint64_t v11 = *(_DWORD *)(v12 + 80 * v11 + 8) & 0x7FFFFFFF;
    if (v11 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  switch(a3)
  {
    case 0:
    case 1:
      uint64_t v14 = v12 + 80 * v11;
      break;
    case 2:
    case 3:
      re::DynamicString::deinit((re::DynamicString *)(v12 + 80 * v11 + 48));
      uint64_t v16 = (re::DynamicString *)(*(void *)(a1 + 16) + 80 * v11 + 48);
      ++*(_DWORD *)(a1 + 40);
      uint64_t v14 = *(void *)(a1 + 16) + 80 * v11;
      break;
    default:
      goto LABEL_8;
  }
  return v14 + 48;
}

void *re::DynamicArray<re::PSOToolLinkedFunctionDescriptor>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    int v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::PSOToolLinkedFunctionDescriptor>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          uint64_t v2 = 40 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 40 * v9;
        uint64_t v11 = v7;
        do
        {
          *(_OWORD *)uint64_t v11 = 0u;
          *((_OWORD *)v11 + 1) = 0u;
          float32x4_t v11[3] = *(void *)(v8 + 24);
          uint64_t v12 = *(void *)(v8 + 8);
          *uint64_t v11 = *(void *)v8;
          *(void *)uint64_t v8 = 0;
          uint64_t v13 = *(void *)(v8 + 16);
          *(void *)(v8 + 24) = 0;
          uint64_t v15 = v11[1];
          uint64_t v14 = v11[2];
          v11[1] = v12;
          uint64_t v11[2] = v13;
          *(void *)(v8 + 8) = v15;
          *(void *)(v8 + 16) = v14;
          *((_WORD *)v11 + 16) = *(_WORD *)(v8 + 32);
          re::DynamicString::deinit((re::DynamicString *)v8);
          v8 += 40;
          v11 += 5;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  unint64_t v3 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v4 = **(void ***)(a1 + 16);
  uint64_t v5 = v4[1];
  uint64_t v6 = v5 + v3;
  if (v5 + v3 <= *v4)
  {
LABEL_3:
    uint64_t result = (uint64_t)v4 + v5 + 24;
    v4[1] = v6;
    return result;
  }
  if (*(void *)a1 <= v3) {
    unint64_t v8 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else {
    unint64_t v8 = *(void *)a1;
  }
  if (rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::AddChunk(a1, v8))
  {
    long long v4 = **(void ***)(a1 + 16);
    uint64_t v5 = v4[1];
    uint64_t v6 = v5 + v3;
    goto LABEL_3;
  }
  return 0;
}

size_t rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::AddChunk(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 8)) {
    operator new();
  }
  size_t result = a2 + 24;
  if (a2 != -24)
  {
    size_t result = (size_t)malloc_type_malloc(result, 0xB9BD7EEuLL);
    if (result)
    {
      *(void *)size_t result = a2;
      *(void *)(result + 8) = 0;
      uint64_t v5 = *(size_t **)(a1 + 16);
      *(void *)(result + 16) = *v5;
      size_t *v5 = result;
      return 1;
    }
  }
  return result;
}

__n128 rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::DoAddMember(int *a1, long long *a2, __n128 *a3, uint64_t a4)
{
  unsigned int v7 = *a1;
  uint64_t v8 = a1[1];
  if (*a1 >= v8)
  {
    if (v8) {
      unsigned int v9 = v8 + ((v8 + 1) >> 1);
    }
    else {
      unsigned int v9 = 16;
    }
    if (v8 < v9)
    {
      *((void *)a1 + 1) = rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Realloc(a4, *((char **)a1 + 1), 48 * v8, 48 * v9);
      a1[1] = v9;
      unsigned int v7 = *a1;
    }
  }
  uint64_t v10 = *((void *)a1 + 1) + 48 * v7;
  long long v11 = *a2;
  *(void *)(v10 + 16) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v10 = v11;
  *((_WORD *)a2 + 11) = 0;
  __n128 result = *a3;
  *(void *)(v10 + 4ArcSharedObject::ArcSharedObject(this, 0) = a3[1].n128_u64[0];
  *(__n128 *)(v10 + 24) = result;
  a3[1].n128_u16[3] = 0;
  ++*a1;
  return result;
}

uint64_t rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Realloc(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    if (a4)
    {
      uint64_t v5 = a2;
      size_t v6 = (a3 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v7 = (a4 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v7 <= v6) {
        return (uint64_t)v5;
      }
      uint64_t v8 = **(unint64_t ***)(a1 + 16);
      unint64_t v9 = v8[1];
      if ((char *)v8 + v9 - v6 + 24 == v5)
      {
        unint64_t v10 = v9 + v7 - v6;
        if (v10 <= *v8)
        {
          v8[1] = v10;
          return (uint64_t)v5;
        }
      }
      long long v11 = (void *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc(a1, v7);
      if (v11)
      {
        uint64_t v12 = v11;
        if (v6) {
          memcpy(v11, v5, v6);
        }
        return (uint64_t)v12;
      }
    }
    return 0;
  }
  return rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc(a1, a4);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *,false>(uint64_t result, unint64_t a2, unsigned __int8 *a3, uint64_t a4, char a5)
{
  uint64_t v9 = result;
LABEL_2:
  unint64_t v10 = a2;
  uint64_t v144 = a2 - 64;
  unint64_t v11 = v9;
  while (1)
  {
    uint64_t v9 = v11;
    uint64_t v12 = v10 - v11;
    unint64_t v13 = (uint64_t)(v10 - v11) >> 6;
    if (v6 || !v5)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          if (*a3)
          {
            if (*(void *)(a2 - 56)) {
              unsigned int v61 = *(const char **)(a2 - 48);
            }
            else {
              unsigned int v61 = (const char *)(a2 - 55);
            }
            if (*(void *)(v9 + 8)) {
              uint64_t v62 = *(const char **)(v9 + 16);
            }
            else {
              uint64_t v62 = (const char *)(v9 + 9);
            }
            __n128 result = strcmp(v61, v62);
            if ((result & 0x80000000) == 0) {
              return result;
            }
          }
          else if (*(unsigned __int16 *)(a2 - 30) >= *(unsigned __int16 *)(v9 + 34))
          {
            return result;
          }
          return std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(v9, v144);
        case 3uLL:
          return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *>(v9, v9 + 64, v144, a3);
        case 4uLL:
          return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *>(v9, v9 + 64, v9 + 128, v144, a3);
        case 5uLL:
          return std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *,0>(v9, v9 + 64, v9 + 128, v9 + 192, v144, a3);
        default:
          JUMPOUT(0);
      }
    }
    if (v12 <= 1535) {
      break;
    }
    if (!a4)
    {
      if (v9 == v10) {
        return result;
      }
      unint64_t v140 = v12;
      int64_t v79 = (v13 - 2) >> 1;
      int64_t v80 = v79;
      while (2)
      {
        int64_t v81 = v80;
        if (v79 < v80) {
          goto LABEL_280;
        }
        uint64_t v82 = (char *)(v9 + (v80 << 6));
        uint64_t v83 = (2 * v80) | 1;
        uint64_t v84 = v9 + (v83 << 6);
        if (2 * v80 + 2 >= (uint64_t)v13)
        {
          if (*a3) {
            goto LABEL_235;
          }
        }
        else
        {
          if (*a3)
          {
            if (*(void *)(v84 + 8)) {
              uint64_t v85 = *(const char **)(v84 + 16);
            }
            else {
              uint64_t v85 = (const char *)(v84 + 9);
            }
            if (*(void *)(v84 + 72)) {
              __n128 v86 = *(const char **)(v84 + 80);
            }
            else {
              __n128 v86 = (const char *)(v84 + 73);
            }
            if (strcmp(v85, v86) < 0)
            {
              uint64_t v83 = 2 * v81 + 2;
              v84 += 64;
            }
LABEL_235:
            if (*(void *)(v84 + 8)) {
              uint64_t v87 = *(const char **)(v84 + 16);
            }
            else {
              uint64_t v87 = (const char *)(v84 + 9);
            }
            if (*((void *)v82 + 1)) {
              __n128 v88 = (const char *)*((void *)v82 + 2);
            }
            else {
              __n128 v88 = v82 + 9;
            }
            if (strcmp(v87, v88) < 0)
            {
LABEL_280:
              int64_t v80 = v81 - 1;
              if (v81) {
                continue;
              }
              uint64_t v99 = v140 >> 6;
              while (2)
              {
                uint64_t v100 = 0;
                long long v146 = 0u;
                long long v147 = 0u;
                *(void *)&long long v146 = *(void *)v9;
                *(void *)uint64_t v9 = 0;
                uint64_t v101 = v147;
                uint64_t v102 = *(void *)(v9 + 24);
                *(void *)&long long v147 = *(void *)(v9 + 16);
                unint64_t v103 = a2;
                *(void *)(v9 + 16) = v101;
                *((void *)&v147 + 1) = v102;
                *(void *)(v9 + 24) = 0;
                *((void *)&v146 + 1) = *(void *)(v9 + 8);
                *(void *)(v9 + 8) = 0;
                int v148 = *(_DWORD *)(v9 + 32);
                uint64_t v104 = *(void *)(v9 + 48);
                uint64_t v149 = *(void *)(v9 + 40);
                *(void *)(v9 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
                uint64_t v150 = v104;
                *(void *)(v9 + 48) = 0;
                uint64_t v151 = *(void *)(v9 + 56);
                *(void *)(v9 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56) = 0;
                uint64_t v105 = v9;
LABEL_283:
                uint64_t v106 = v105;
                uint64_t v107 = v100 + 1;
                v105 += (v100 + 1) << 6;
                uint64_t v108 = 2 * v100;
                uint64_t v100 = (2 * v100) | 1;
                uint64_t v109 = v108 + 2;
                if (v108 + 2 < v99)
                {
                  if (*a3)
                  {
                    if (*(void *)(v105 + 8)) {
                      long long v110 = *(const char **)(v105 + 16);
                    }
                    else {
                      long long v110 = (const char *)(v105 + 9);
                    }
                    if (*(void *)(v105 + 72)) {
                      unsigned int v111 = *(const char **)(v105 + 80);
                    }
                    else {
                      unsigned int v111 = (const char *)(v105 + 73);
                    }
                    if (strcmp(v110, v111) < 0)
                    {
LABEL_292:
                      v105 += 64;
                      uint64_t v100 = v109;
                    }
                  }
                  else if (*(unsigned __int16 *)(v106 + (v107 << 6) + 34) < *(unsigned __int16 *)(v105 + 98))
                  {
                    goto LABEL_292;
                  }
                }
                re::DynamicString::operator=((re::DynamicString *)v106, (re::DynamicString *)v105);
                *(_DWORD *)(v106 + 32) = *(_DWORD *)(v105 + 32);
                re::FixedArray<float>::operator=((uint64_t *)(v106 + 40), (uint64_t *)(v105 + 40));
                if (v100 > (uint64_t)((unint64_t)(v99 - 2) >> 1))
                {
                  a2 -= 64;
                  if (v105 == v103 - 64)
                  {
                    re::DynamicString::operator=((re::DynamicString *)v105, (re::DynamicString *)&v146);
                    *(_DWORD *)(v105 + 32) = v148;
                    re::FixedArray<float>::operator=((uint64_t *)(v105 + 40), &v149);
                  }
                  else
                  {
                    re::DynamicString::operator=((re::DynamicString *)v105, (re::DynamicString *)(v103 - 64));
                    *(_DWORD *)(v105 + 32) = *(_DWORD *)(v103 - 32);
                    re::FixedArray<float>::operator=((uint64_t *)(v105 + 40), (uint64_t *)(v103 - 24));
                    re::DynamicString::operator=((re::DynamicString *)(v103 - 64), (re::DynamicString *)&v146);
                    *(_DWORD *)(v103 - 32) = v148;
                    re::FixedArray<float>::operator=((uint64_t *)(v103 - 24), &v149);
                    uint64_t v112 = v105 - v9 + 64;
                    if (v112 >= 65)
                    {
                      unint64_t v113 = ((unint64_t)v112 >> 6) - 2;
                      unint64_t v114 = v113 >> 1;
                      uint64_t v115 = v9 + (v113 >> 1 << 6);
                      if (*a3)
                      {
                        if (*(void *)(v115 + 8)) {
                          uint64_t v116 = *(const char **)(v115 + 16);
                        }
                        else {
                          uint64_t v116 = (const char *)(v115 + 9);
                        }
                        if (*(void *)(v105 + 8)) {
                          long long v117 = *(const char **)(v105 + 16);
                        }
                        else {
                          long long v117 = (const char *)(v105 + 9);
                        }
                        if (strcmp(v116, v117) < 0)
                        {
LABEL_320:
                          long long v152 = 0u;
                          long long v153 = 0u;
                          *(void *)&long long v152 = *(void *)v105;
                          *(void *)uint64_t v105 = 0;
                          uint64_t v119 = v153;
                          uint64_t v120 = *(void *)(v105 + 24);
                          *(void *)&long long v153 = *(void *)(v105 + 16);
                          *(void *)(v105 + 16) = v119;
                          *((void *)&v153 + 1) = v120;
                          *(void *)(v105 + 24) = 0;
                          *((void *)&v152 + 1) = *(void *)(v105 + 8);
                          *(void *)(v105 + 8) = 0;
                          unsigned int v154 = *(_DWORD *)(v105 + 32);
                          uint64_t v155 = *(void *)(v105 + 40);
                          *(void *)(v105 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
                          uint64_t v156 = *(void *)(v105 + 48);
                          *(void *)(v105 + 48) = 0;
                          uint64_t v157 = *(void *)(v105 + 56);
                          *(void *)(v105 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56) = 0;
                          re::DynamicString::operator=((re::DynamicString *)v105, (re::DynamicString *)(v9 + (v113 >> 1 << 6)));
                          uint64_t v121 = v9 + (v114 << 6);
                          *(_DWORD *)(v105 + 32) = *(_DWORD *)(v121 + 32);
                          uint64_t v122 = (uint64_t *)(v121 + 40);
                          re::FixedArray<float>::operator=((uint64_t *)(v105 + 40), (uint64_t *)(v121 + 40));
                          if (v113 >= 2)
                          {
                            while (1)
                            {
                              unint64_t v124 = v114 - 1;
                              unint64_t v114 = (v114 - 1) >> 1;
                              uint64_t v123 = v9 + (v114 << 6);
                              if (*a3)
                              {
                                if (*(void *)(v123 + 8)) {
                                  uint64_t v125 = *(const char **)(v123 + 16);
                                }
                                else {
                                  uint64_t v125 = (const char *)(v123 + 9);
                                }
                                if (BYTE8(v152)) {
                                  uint64_t v126 = (const char *)v153;
                                }
                                else {
                                  uint64_t v126 = (char *)&v152 + 9;
                                }
                                if ((strcmp(v125, v126) & 0x80000000) == 0) {
                                  break;
                                }
                              }
                              else if (*(unsigned __int16 *)(v123 + 34) >= HIWORD(v154))
                              {
                                break;
                              }
                              re::DynamicString::operator=((re::DynamicString *)v115, (re::DynamicString *)(v9 + (v114 << 6)));
                              uint64_t v127 = v9 + (v114 << 6);
                              *(_DWORD *)(v115 + 32) = *(_DWORD *)(v127 + 32);
                              uint64_t v122 = (uint64_t *)(v127 + 40);
                              re::FixedArray<float>::operator=((uint64_t *)(v115 + 40), (uint64_t *)(v127 + 40));
                              uint64_t v115 = v9 + (v114 << 6);
                              if (v124 <= 1) {
                                goto LABEL_333;
                              }
                            }
                          }
                          uint64_t v123 = v115;
LABEL_333:
                          re::DynamicString::operator=((re::DynamicString *)v123, (re::DynamicString *)&v152);
                          *(_DWORD *)(v123 + 32) = v154;
                          re::FixedArray<float>::operator=(v122, &v155);
                          if (v155)
                          {
                            if (v156)
                            {
                              (*(void (**)(void))(*(void *)v155 + 40))();
                              uint64_t v156 = 0;
                              uint64_t v157 = 0;
                            }
                            uint64_t v155 = 0;
                          }
                          if (void)v152 && (BYTE8(v152)) {
                            (*(void (**)(void))(*(void *)v152 + 40))();
                          }
                        }
                      }
                      else if (*(unsigned __int16 *)(v115 + 34) < *(unsigned __int16 *)(v105 + 34))
                      {
                        goto LABEL_320;
                      }
                    }
                  }
                  if (v149)
                  {
                    if (v150)
                    {
                      (*(void (**)(void))(*(void *)v149 + 40))();
                      uint64_t v150 = 0;
                      uint64_t v151 = 0;
                    }
                    uint64_t v149 = 0;
                  }
                  __n128 result = v146;
                  if (void)v146 && (BYTE8(v146)) {
                    __n128 result = (*(uint64_t (**)(void))(*(void *)v146 + 40))();
                  }
                  if (v99-- <= 2) {
                    return result;
                  }
                  continue;
                }
                goto LABEL_283;
              }
            }
LABEL_246:
            long long v152 = 0u;
            long long v153 = 0u;
            *(void *)&long long v152 = *(void *)v82;
            *(void *)uint64_t v82 = 0;
            uint64_t v89 = v153;
            *(void *)&long long v153 = *((void *)v82 + 2);
            *((void *)v82 + 2) = v89;
            *((void *)&v153 + 1) = *((void *)v82 + 3);
            *((void *)v82 + 3) = 0;
            uint64_t v90 = *((void *)&v152 + 1);
            *((void *)&v152 + 1) = *((void *)v82 + 1);
            *((void *)v82 + 1) = v90;
            int64_t v143 = v81;
            uint64_t v91 = v9 + (v81 << 6);
            unsigned int v154 = *(_DWORD *)(v91 + 32);
            uint64_t v155 = *(void *)(v91 + 40);
            *(void *)(v91 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
            uint64_t v156 = *(void *)(v91 + 48);
            *(void *)(v91 + 48) = 0;
            uint64_t v157 = *(void *)(v91 + 56);
            *(void *)(v91 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56) = 0;
            re::DynamicString::operator=((re::DynamicString *)v82, (re::DynamicString *)v84);
            *(_DWORD *)(v91 + 32) = *(_DWORD *)(v84 + 32);
            __n128 v92 = (uint64_t *)(v84 + 40);
            re::FixedArray<float>::operator=((uint64_t *)(v91 + 40), (uint64_t *)(v84 + 40));
            if (v79 < v83)
            {
LABEL_247:
              uint64_t v93 = v84;
LABEL_273:
              re::DynamicString::operator=((re::DynamicString *)v93, (re::DynamicString *)&v152);
              *(_DWORD *)(v93 + 32) = v154;
              re::FixedArray<float>::operator=(v92, &v155);
              int64_t v81 = v143;
              if (v155)
              {
                if (v156)
                {
                  (*(void (**)(void))(*(void *)v155 + 40))();
                  uint64_t v156 = 0;
                  uint64_t v157 = 0;
                }
                uint64_t v155 = 0;
              }
              if (void)v152 && (BYTE8(v152)) {
                (*(void (**)(void))(*(void *)v152 + 40))();
              }
              goto LABEL_280;
            }
            while (2)
            {
              uint64_t v94 = (2 * v83) | 1;
              uint64_t v93 = v9 + (v94 << 6);
              uint64_t v83 = 2 * v83 + 2;
              if (v83 >= (uint64_t)v13)
              {
                uint64_t v83 = v94;
                if (!*a3) {
                  goto LABEL_271;
                }
LABEL_260:
                if (*(void *)(v93 + 8)) {
                  uint64_t v97 = *(const char **)(v93 + 16);
                }
                else {
                  uint64_t v97 = (const char *)(v93 + 9);
                }
                if (BYTE8(v152)) {
                  char v98 = (const char *)v153;
                }
                else {
                  char v98 = (char *)&v152 + 9;
                }
                if (strcmp(v97, v98) < 0) {
                  goto LABEL_247;
                }
              }
              else
              {
                if (*a3)
                {
                  if (*(void *)(v93 + 8)) {
                    int v95 = *(const char **)(v93 + 16);
                  }
                  else {
                    int v95 = (const char *)(v93 + 9);
                  }
                  if (*(void *)(v93 + 72)) {
                    uint64_t v96 = *(const char **)(v93 + 80);
                  }
                  else {
                    uint64_t v96 = (const char *)(v93 + 73);
                  }
                  if (strcmp(v95, v96) < 0) {
                    v93 += 64;
                  }
                  else {
                    uint64_t v83 = v94;
                  }
                  goto LABEL_260;
                }
                if (*(unsigned __int16 *)(v9 + (v94 << 6) + 34) < *(unsigned __int16 *)(v93 + 98)) {
                  v93 += 64;
                }
                else {
                  uint64_t v83 = v94;
                }
LABEL_271:
                if (*(unsigned __int16 *)(v93 + 34) < HIWORD(v154)) {
                  goto LABEL_247;
                }
              }
              re::DynamicString::operator=((re::DynamicString *)v84, (re::DynamicString *)v93);
              *(_DWORD *)(v84 + 32) = *(_DWORD *)(v93 + 32);
              __n128 v92 = (uint64_t *)(v93 + 40);
              re::FixedArray<float>::operator=((uint64_t *)(v84 + 40), (uint64_t *)(v93 + 40));
              uint64_t v84 = v93;
              if (v79 < v83) {
                goto LABEL_273;
              }
              continue;
            }
          }
          if (*(unsigned __int16 *)(v9 + (v83 << 6) + 34) < *(unsigned __int16 *)(v84 + 98))
          {
            uint64_t v83 = 2 * v80 + 2;
            v84 += 64;
          }
        }
        break;
      }
      if (*(unsigned __int16 *)(v84 + 34) < *(unsigned __int16 *)(v9 + (v80 << 6) + 34)) {
        goto LABEL_280;
      }
      goto LABEL_246;
    }
    unint64_t v14 = v9 + (v13 >> 1 << 6);
    if ((unint64_t)v12 > 0x2000)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *>(v9, v9 + (v13 >> 1 << 6), v144, a3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *>(v9 + 64, v14 - 64, a2 - 128, a3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *>(v9 + 128, v9 + 64 + (v13 >> 1 << 6), a2 - 192, a3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *>(v14 - 64, v9 + (v13 >> 1 << 6), v9 + 64 + (v13 >> 1 << 6), a3);
      std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(v9, v9 + (v13 >> 1 << 6));
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *>(v9 + (v13 >> 1 << 6), v9, v144, a3);
    }
    int v15 = *a3;
    uint64_t v142 = a4 - 1;
    if ((a5 & 1) == 0)
    {
      if (*a3)
      {
        if (*(void *)(v9 - 56)) {
          uint64_t v16 = *(const char **)(v9 - 48);
        }
        else {
          uint64_t v16 = (const char *)(v9 - 55);
        }
        if (*(void *)(v9 + 8)) {
          uint64_t v17 = *(const char **)(v9 + 16);
        }
        else {
          uint64_t v17 = (const char *)(v9 + 9);
        }
        if ((strcmp(v16, v17) & 0x80000000) == 0)
        {
LABEL_92:
          long long v152 = 0u;
          long long v153 = 0u;
          *(void *)&long long v152 = *(void *)v9;
          *(void *)uint64_t v9 = 0;
          uint64_t v42 = v153;
          uint64_t v43 = *(void *)(v9 + 24);
          *(void *)&long long v153 = *(void *)(v9 + 16);
          *(void *)(v9 + 16) = v42;
          *((void *)&v153 + 1) = v43;
          *(void *)(v9 + 24) = 0;
          *((void *)&v152 + 1) = *(void *)(v9 + 8);
          *(void *)(v9 + 8) = 0;
          LODWORD(v42) = *(_DWORD *)(v9 + 32);
          uint64_t v155 = *(void *)(v9 + 40);
          *(void *)(v9 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
          uint64_t v44 = *(void *)(v9 + 56);
          uint64_t v156 = *(void *)(v9 + 48);
          unsigned int v154 = v42;
          *(void *)(v9 + 48) = 0;
          uint64_t v157 = v44;
          *(void *)(v9 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56) = 0;
          unsigned int v45 = WORD1(v42);
          if (v15)
          {
            uint64_t v46 = (const char *)v153;
            uint64_t v47 = BYTE8(v152) & 1;
            if (BYTE8(v152)) {
              uint64_t v48 = (const char *)v153;
            }
            else {
              uint64_t v48 = (char *)&v152 + 9;
            }
            if (*(void *)(v10 - 56)) {
              signed int v49 = *(const char **)(v10 - 48);
            }
            else {
              signed int v49 = (const char *)(a2 - 55);
            }
            if ((strcmp(v48, v49) & 0x80000000) == 0) {
              goto LABEL_114;
            }
LABEL_103:
            if (!v47) {
              uint64_t v46 = (char *)&v152 + 9;
            }
            unint64_t v11 = v9 + 64;
            if (!v15) {
              goto LABEL_111;
            }
            while (1)
            {
              char v50 = (*(void *)(v11 + 8) & 1) != 0 ? *(const char **)(v11 + 16) : (const char *)(v11 + 9);
              if (strcmp(v46, v50) < 0) {
                break;
              }
              while (1)
              {
                v11 += 64;
                if (v15) {
                  break;
                }
LABEL_111:
                if (*(unsigned __int16 *)(v11 + 34) > v45) {
                  goto LABEL_126;
                }
              }
            }
          }
          else
          {
            if (*(unsigned __int16 *)(v10 - 30) > v45)
            {
              uint64_t v46 = (const char *)v153;
              uint64_t v47 = BYTE8(v152) & 1;
              goto LABEL_103;
            }
LABEL_114:
            unint64_t v11 = v9 + 64;
            if (v9 + 64 < v10)
            {
              if (BYTE8(v152)) {
                unint64_t v51 = (const char *)v153;
              }
              else {
                unint64_t v51 = (char *)&v152 + 9;
              }
              do
              {
                if (v15)
                {
                  if (*(void *)(v11 + 8)) {
                    uint64_t v52 = *(const char **)(v11 + 16);
                  }
                  else {
                    uint64_t v52 = (const char *)(v11 + 9);
                  }
                  if (strcmp(v51, v52) < 0) {
                    break;
                  }
                }
                else if (*(unsigned __int16 *)(v11 + 34) > v45)
                {
                  break;
                }
                v11 += 64;
              }
              while (v11 < v10);
            }
          }
LABEL_126:
          unint64_t v53 = v10;
          if (v11 < v10)
          {
            if (BYTE8(v152)) {
              unint64_t v54 = (const char *)v153;
            }
            else {
              unint64_t v54 = (char *)&v152 + 9;
            }
            unint64_t v53 = a2 - 64;
            if (!v15) {
              goto LABEL_136;
            }
            while (1)
            {
              unint64_t v55 = (*(void *)(v53 + 8) & 1) != 0 ? *(const char **)(v53 + 16) : (const char *)(v53 + 9);
              if ((strcmp(v54, v55) & 0x80000000) == 0) {
                break;
              }
              while (1)
              {
                v53 -= 64;
                if (v15) {
                  break;
                }
LABEL_136:
                if (*(unsigned __int16 *)(v53 + 34) <= v45) {
                  goto LABEL_157;
                }
              }
            }
          }
LABEL_157:
          while (v11 < v53)
          {
            std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(v11, v53);
            int v56 = *a3;
            if (BYTE8(v152)) {
              int v57 = (const char *)v153;
            }
            else {
              int v57 = (char *)&v152 + 9;
            }
            unsigned int v58 = HIWORD(v154);
            do
            {
              while (1)
              {
                v11 += 64;
                if (v56) {
                  break;
                }
                if (v58 < *(unsigned __int16 *)(v11 + 34)) {
                  goto LABEL_150;
                }
              }
              if (*(void *)(v11 + 8)) {
                long long v59 = *(const char **)(v11 + 16);
              }
              else {
                long long v59 = (const char *)(v11 + 9);
              }
            }
            while ((strcmp(v57, v59) & 0x80000000) == 0);
            do
            {
LABEL_150:
              while (1)
              {
                v53 -= 64;
                if (v56) {
                  break;
                }
                if (v58 >= *(unsigned __int16 *)(v53 + 34)) {
                  goto LABEL_157;
                }
              }
              if (*(void *)(v53 + 8)) {
                long long v60 = *(const char **)(v53 + 16);
              }
              else {
                long long v60 = (const char *)(v53 + 9);
              }
            }
            while (strcmp(v57, v60) < 0);
          }
          if (v11 - 64 != v9)
          {
            re::DynamicString::operator=((re::DynamicString *)v9, (re::DynamicString *)(v11 - 64));
            *(_DWORD *)(v9 + 32) = *(_DWORD *)(v11 - 32);
            re::FixedArray<float>::operator=((uint64_t *)(v9 + 40), (uint64_t *)(v11 - 24));
          }
          re::DynamicString::operator=((re::DynamicString *)(v11 - 64), (re::DynamicString *)&v152);
          *(_DWORD *)(v11 - 32) = v154;
          re::FixedArray<float>::operator=((uint64_t *)(v11 - 24), &v155);
          a4 = v142;
          if (v155)
          {
            if (v156)
            {
              (*(void (**)(void))(*(void *)v155 + 40))();
              uint64_t v156 = 0;
              uint64_t v157 = 0;
            }
            uint64_t v155 = 0;
          }
          __n128 result = v152;
          if (void)v152 && (BYTE8(v152)) {
            __n128 result = (*(uint64_t (**)(void))(*(void *)v152 + 40))();
          }
LABEL_90:
          a5 = 0;
          continue;
        }
      }
      else if (*(unsigned __int16 *)(v9 - 30) >= *(unsigned __int16 *)(v9 + 34))
      {
        goto LABEL_92;
      }
    }
    uint64_t v18 = 0;
    long long v152 = 0u;
    long long v153 = 0u;
    *(void *)&long long v152 = *(void *)v9;
    *(void *)uint64_t v9 = 0;
    uint64_t v19 = v153;
    uint64_t v20 = *(void *)(v9 + 24);
    *(void *)&long long v153 = *(void *)(v9 + 16);
    *(void *)(v9 + 16) = v19;
    *((void *)&v153 + 1) = v20;
    *(void *)(v9 + 24) = 0;
    *((void *)&v152 + 1) = *(void *)(v9 + 8);
    *(void *)(v9 + 8) = 0;
    unsigned int v21 = *(_DWORD *)(v9 + 32);
    uint64_t v155 = *(void *)(v9 + 40);
    *(void *)(v9 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
    uint64_t v22 = *(void *)(v9 + 56);
    uint64_t v156 = *(void *)(v9 + 48);
    unsigned int v154 = v21;
    *(void *)(v9 + 48) = 0;
    uint64_t v157 = v22;
    *(void *)(v9 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56) = 0;
    if (BYTE8(v152)) {
      uint64_t v23 = (const char *)v153;
    }
    else {
      uint64_t v23 = (char *)&v152 + 9;
    }
    unsigned int v24 = HIWORD(v21);
    while (1)
    {
      uint64_t v25 = v9 + v18;
      if (v15) {
        break;
      }
      if (*(unsigned __int16 *)(v25 + 98) >= v24) {
        goto LABEL_31;
      }
LABEL_30:
      v18 += 64;
    }
    uint64_t v26 = *(void *)(v25 + 72);
    uint64_t v27 = *(const char **)(v25 + 80);
    int v28 = (const char *)(v25 + 73);
    if (v26) {
      int v29 = v27;
    }
    else {
      int v29 = v28;
    }
    if (strcmp(v29, v23) < 0) {
      goto LABEL_30;
    }
LABEL_31:
    unint64_t v30 = v9 + v18 + 64;
    unint64_t v31 = a2 - 64;
    if (!v18)
    {
      unint64_t v31 = a2;
      if (v30 >= a2) {
        goto LABEL_55;
      }
      unint64_t v31 = a2 - 64;
      if (!v15) {
        goto LABEL_49;
      }
      while (1)
      {
        if (*(void *)(v31 + 8)) {
          int v33 = *(const char **)(v31 + 16);
        }
        else {
          int v33 = (const char *)(v31 + 9);
        }
        if (strcmp(v33, v23) < 0 || v30 >= v31) {
          goto LABEL_55;
        }
        while (1)
        {
          v31 -= 64;
          if (v15) {
            break;
          }
LABEL_49:
          if (*(unsigned __int16 *)(v31 + 34) < v24 || v30 >= v31) {
            goto LABEL_55;
          }
        }
      }
    }
    if (v15) {
      goto LABEL_33;
    }
    while (*(unsigned __int16 *)(v31 + 34) >= v24)
    {
      while (1)
      {
        v31 -= 64;
        if (!v15) {
          break;
        }
LABEL_33:
        if (*(void *)(v31 + 8)) {
          int v32 = *(const char **)(v31 + 16);
        }
        else {
          int v32 = (const char *)(v31 + 9);
        }
        if (strcmp(v32, v23) < 0) {
          goto LABEL_55;
        }
      }
    }
LABEL_55:
    unint64_t v11 = v9 + v18 + 64;
    if (v30 < v31)
    {
      unint64_t v35 = v31;
      do
      {
        std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(v11, v35);
        int v36 = *a3;
        if (BYTE8(v152)) {
          uint64_t v37 = (const char *)v153;
        }
        else {
          uint64_t v37 = (char *)&v152 + 9;
        }
        unsigned int v38 = HIWORD(v154);
        do
        {
          while (1)
          {
            v11 += 64;
            if (v36) {
              break;
            }
            if (*(unsigned __int16 *)(v11 + 34) >= v38) {
              goto LABEL_68;
            }
          }
          if (*(void *)(v11 + 8)) {
            uint64_t v39 = *(const char **)(v11 + 16);
          }
          else {
            uint64_t v39 = (const char *)(v11 + 9);
          }
        }
        while (strcmp(v39, v37) < 0);
        do
        {
LABEL_68:
          while (1)
          {
            v35 -= 64;
            if (v36) {
              break;
            }
            if (*(unsigned __int16 *)(v35 + 34) < v38) {
              goto LABEL_75;
            }
          }
          if (*(void *)(v35 + 8)) {
            signed int v40 = *(const char **)(v35 + 16);
          }
          else {
            signed int v40 = (const char *)(v35 + 9);
          }
        }
        while ((strcmp(v40, v37) & 0x80000000) == 0);
LABEL_75:
        ;
      }
      while (v11 < v35);
    }
    if (v11 - 64 != v9)
    {
      re::DynamicString::operator=((re::DynamicString *)v9, (re::DynamicString *)(v11 - 64));
      *(_DWORD *)(v9 + 32) = *(_DWORD *)(v11 - 32);
      re::FixedArray<float>::operator=((uint64_t *)(v9 + 40), (uint64_t *)(v11 - 24));
    }
    re::DynamicString::operator=((re::DynamicString *)(v11 - 64), (re::DynamicString *)&v152);
    *(_DWORD *)(v11 - 32) = v154;
    re::FixedArray<float>::operator=((uint64_t *)(v11 - 24), &v155);
    a4 = v142;
    if (v155)
    {
      if (v156)
      {
        (*(void (**)(void))(*(void *)v155 + 40))();
        uint64_t v156 = 0;
        uint64_t v157 = 0;
      }
      uint64_t v155 = 0;
    }
    if (void)v152 && (BYTE8(v152)) {
      (*(void (**)(void))(*(void *)v152 + 40))();
    }
    BOOL v5 = v30 >= v31;
    unint64_t v10 = a2;
    if (!v5)
    {
LABEL_89:
      __n128 result = std::__introsort<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *,false>(v9, v11 - 64, a3, v142, a5 & 1);
      goto LABEL_90;
    }
    BOOL v41 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *>(v9, v11 - 64, a3);
    __n128 result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *>(v11, a2, a3);
    if (result)
    {
      a2 = v11 - 64;
      if (v41) {
        return result;
      }
      goto LABEL_2;
    }
    if (!v41) {
      goto LABEL_89;
    }
  }
  if (a5)
  {
    if (v9 == v10) {
      return result;
    }
    uint64_t v63 = v9 + 64;
    if (v9 + 64 == a2) {
      return result;
    }
    uint64_t v64 = 0;
    uint64_t v65 = v9;
    while (2)
    {
      uint64_t v66 = v65;
      uint64_t v65 = v63;
      if (*a3)
      {
        if (*(void *)(v66 + 72)) {
          long long v67 = *(const char **)(v66 + 80);
        }
        else {
          long long v67 = (const char *)(v66 + 73);
        }
        if (*(void *)(v66 + 8)) {
          uint64_t v68 = *(const char **)(v66 + 16);
        }
        else {
          uint64_t v68 = (const char *)(v66 + 9);
        }
        __n128 result = strcmp(v67, v68);
        if ((result & 0x80000000) == 0) {
          goto LABEL_218;
        }
      }
      else if (*(unsigned __int16 *)(v66 + 98) >= *(unsigned __int16 *)(v66 + 34))
      {
        goto LABEL_218;
      }
      long long v152 = 0u;
      long long v153 = 0u;
      uint64_t v69 = *(void *)(v66 + 64);
      *(void *)(v66 + 64) = 0;
      uint64_t v70 = v153;
      uint64_t v71 = *(void *)(v65 + 24);
      *(void *)&long long v153 = *(void *)(v65 + 16);
      *(void *)(v65 + 16) = v70;
      *((void *)&v153 + 1) = v71;
      *(void *)(v65 + 24) = 0;
      uint64_t v72 = *(void *)(v65 + 8);
      *(void *)&long long v152 = v69;
      *((void *)&v152 + 1) = v72;
      *(void *)(v65 + 8) = 0;
      unsigned int v154 = *(_DWORD *)(v66 + 96);
      uint64_t v73 = *(void *)(v66 + 112);
      uint64_t v155 = *(void *)(v66 + 104);
      uint64_t v156 = v73;
      *(void *)(v66 + 104) = 0;
      *(void *)(v66 + 112) = 0;
      uint64_t v157 = *(void *)(v66 + 120);
      *(void *)(v66 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0;
      re::DynamicString::operator=((re::DynamicString *)v65, (re::DynamicString *)v66);
      *(_DWORD *)(v65 + 32) = *(_DWORD *)(v66 + 32);
      id v74 = (uint64_t *)(v66 + 40);
      re::FixedArray<float>::operator=((uint64_t *)(v65 + 40), (uint64_t *)(v66 + 40));
      if (v66 != v9)
      {
        uint64_t v75 = v64;
        do
        {
          uint64_t v76 = v9 + v75;
          if (*a3)
          {
            if (BYTE8(v152)) {
              uint64_t v77 = (const char *)v153;
            }
            else {
              uint64_t v77 = (char *)&v152 + 9;
            }
            if (*(void *)(v76 - 56)) {
              __n128 v78 = *(const char **)(v76 - 48);
            }
            else {
              __n128 v78 = (const char *)(v76 - 55);
            }
            if ((strcmp(v77, v78) & 0x80000000) == 0)
            {
              uint64_t v66 = v9 + v75;
              id v74 = (uint64_t *)(v9 + v75 + 40);
              goto LABEL_211;
            }
          }
          else if (HIWORD(v154) >= *(unsigned __int16 *)(v76 - 30))
          {
            goto LABEL_211;
          }
          re::DynamicString::operator=((re::DynamicString *)(v9 + v75), (re::DynamicString *)(v76 - 64));
          *(_DWORD *)(v9 + v75 + 32) = *(_DWORD *)(v9 + v75 - 32);
          id v74 = (uint64_t *)(v66 - 24);
          re::FixedArray<float>::operator=((uint64_t *)(v9 + v75 + 40), (uint64_t *)(v9 + v75 - 24));
          v66 -= 64;
          v75 -= 64;
        }
        while (v75);
        id v74 = (uint64_t *)(v9 + 40);
      }
      uint64_t v66 = v9;
LABEL_211:
      re::DynamicString::operator=((re::DynamicString *)v66, (re::DynamicString *)&v152);
      *(_DWORD *)(v66 + 32) = v154;
      re::FixedArray<float>::operator=(v74, &v155);
      if (v155)
      {
        if (v156)
        {
          (*(void (**)(void))(*(void *)v155 + 40))();
          uint64_t v156 = 0;
          uint64_t v157 = 0;
        }
        uint64_t v155 = 0;
      }
      __n128 result = v152;
      if (void)v152 && (BYTE8(v152)) {
        __n128 result = (*(uint64_t (**)(void))(*(void *)v152 + 40))();
      }
LABEL_218:
      uint64_t v63 = v65 + 64;
      v64 += 64;
      if (v65 + 64 == a2) {
        return result;
      }
      continue;
    }
  }
  if (v9 != v10)
  {
    uint64_t v128 = v9 + 64;
    if (v9 + 64 != a2)
    {
      uint64_t v129 = (uint64_t *)(v9 + 104);
      do
      {
        uint64_t v130 = v9;
        uint64_t v9 = v128;
        if (*a3)
        {
          if (*(void *)(v130 + 72)) {
            int v131 = *(const char **)(v130 + 80);
          }
          else {
            int v131 = (const char *)(v130 + 73);
          }
          if (*(void *)(v130 + 8)) {
            uint64_t v132 = *(const char **)(v130 + 16);
          }
          else {
            uint64_t v132 = (const char *)(v130 + 9);
          }
          __n128 result = strcmp(v131, v132);
          unint64_t v133 = a2;
          if ((result & 0x80000000) == 0) {
            goto LABEL_372;
          }
        }
        else
        {
          unint64_t v133 = a2;
          if (*(unsigned __int16 *)(v130 + 98) >= *(unsigned __int16 *)(v130 + 34)) {
            goto LABEL_372;
          }
        }
        long long v152 = 0u;
        long long v153 = 0u;
        *(void *)&long long v152 = *(void *)v9;
        *(void *)uint64_t v9 = 0;
        uint64_t v134 = v153;
        uint64_t v135 = *(void *)(v9 + 24);
        *(void *)&long long v153 = *(void *)(v9 + 16);
        *(void *)(v9 + 16) = v134;
        *((void *)&v153 + 1) = v135;
        *(void *)(v9 + 24) = 0;
        *((void *)&v152 + 1) = *(void *)(v9 + 8);
        *(void *)(v9 + 8) = 0;
        unsigned int v154 = *(_DWORD *)(v130 + 96);
        uint64_t v136 = *(void *)(v130 + 112);
        uint64_t v155 = *(void *)(v130 + 104);
        uint64_t v156 = v136;
        *(void *)(v130 + 104) = 0;
        *(void *)(v130 + 112) = 0;
        uint64_t v157 = *(void *)(v130 + 120);
        *(void *)(v130 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0;
        for (uint64_t i = v129; ; i -= 8)
        {
          re::DynamicString::operator=((re::DynamicString *)(i - 5), (re::DynamicString *)(i - 13));
          *((_DWORD *)i - 2) = *((_DWORD *)i - 18);
          re::FixedArray<float>::operator=(i, i - 8);
          if (*a3) {
            break;
          }
          if (HIWORD(v154) >= *((unsigned __int16 *)i - 67)) {
            goto LABEL_365;
          }
LABEL_364:
          ;
        }
        if (BYTE8(v152)) {
          uint64_t v138 = (const char *)v153;
        }
        else {
          uint64_t v138 = (char *)&v152 + 9;
        }
        if (*(i - 20)) {
          uint64_t v139 = (const char *)*(i - 19);
        }
        else {
          uint64_t v139 = (char *)i - 159;
        }
        if (strcmp(v138, v139) < 0) {
          goto LABEL_364;
        }
LABEL_365:
        re::DynamicString::operator=((re::DynamicString *)(i - 13), (re::DynamicString *)&v152);
        *((_DWORD *)i - 18) = v154;
        re::FixedArray<float>::operator=(i - 8, &v155);
        if (v155)
        {
          if (v156)
          {
            (*(void (**)(void))(*(void *)v155 + 40))();
            uint64_t v156 = 0;
            uint64_t v157 = 0;
          }
          uint64_t v155 = 0;
        }
        __n128 result = v152;
        if (void)v152 && (BYTE8(v152)) {
          __n128 result = (*(uint64_t (**)(void))(*(void *)v152 + 40))();
        }
LABEL_372:
        uint64_t v128 = v9 + 64;
        v129 += 8;
      }
      while (v9 + 64 != v133);
    }
  }
  return result;
}

uint64_t std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  uint64_t result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *>(a1, a2, a3, a4, a6);
  if (!*a6)
  {
    if (*(unsigned __int16 *)(a5 + 34) >= *(unsigned __int16 *)(a4 + 34)) {
      return result;
    }
LABEL_11:
    uint64_t result = std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(a4, a5);
    if (*a6)
    {
      if (*(void *)(a4 + 8)) {
        int v15 = *(const char **)(a4 + 16);
      }
      else {
        int v15 = (const char *)(a4 + 9);
      }
      if (*(void *)(a3 + 8)) {
        uint64_t v16 = *(const char **)(a3 + 16);
      }
      else {
        uint64_t v16 = (const char *)(a3 + 9);
      }
      uint64_t result = strcmp(v15, v16);
      if ((result & 0x80000000) == 0) {
        return result;
      }
    }
    else if (*(unsigned __int16 *)(a4 + 34) >= *(unsigned __int16 *)(a3 + 34))
    {
      return result;
    }
    uint64_t result = std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(a3, a4);
    if (*a6)
    {
      if (*(void *)(a3 + 8)) {
        uint64_t v17 = *(const char **)(a3 + 16);
      }
      else {
        uint64_t v17 = (const char *)(a3 + 9);
      }
      if (*(void *)(a2 + 8)) {
        uint64_t v18 = *(const char **)(a2 + 16);
      }
      else {
        uint64_t v18 = (const char *)(a2 + 9);
      }
      uint64_t result = strcmp(v17, v18);
      if ((result & 0x80000000) == 0) {
        return result;
      }
    }
    else if (*(unsigned __int16 *)(a3 + 34) >= *(unsigned __int16 *)(a2 + 34))
    {
      return result;
    }
    uint64_t result = std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(a2, a3);
    if (*a6)
    {
      if (*(void *)(a2 + 8)) {
        uint64_t v19 = *(const char **)(a2 + 16);
      }
      else {
        uint64_t v19 = (const char *)(a2 + 9);
      }
      if (*(void *)(a1 + 8)) {
        uint64_t v20 = *(const char **)(a1 + 16);
      }
      else {
        uint64_t v20 = (const char *)(a1 + 9);
      }
      uint64_t result = strcmp(v19, v20);
      if ((result & 0x80000000) == 0) {
        return result;
      }
    }
    else if (*(unsigned __int16 *)(a2 + 34) >= *(unsigned __int16 *)(a1 + 34))
    {
      return result;
    }
    return std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(a1, a2);
  }
  if (*(void *)(a5 + 8)) {
    unint64_t v13 = *(const char **)(a5 + 16);
  }
  else {
    unint64_t v13 = (const char *)(a5 + 9);
  }
  if (*(void *)(a4 + 8)) {
    unint64_t v14 = *(const char **)(a4 + 16);
  }
  else {
    unint64_t v14 = (const char *)(a4 + 9);
  }
  uint64_t result = strcmp(v13, v14);
  if ((result & 0x80000000) != 0) {
    goto LABEL_11;
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *>(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v7 = result;
  if (*a4)
  {
    if (*(void *)(a2 + 8)) {
      uint64_t v8 = *(const char **)(a2 + 16);
    }
    else {
      uint64_t v8 = (const char *)(a2 + 9);
    }
    if (*(void *)(result + 8)) {
      uint64_t v9 = *(const char **)(result + 16);
    }
    else {
      uint64_t v9 = (const char *)(result + 9);
    }
    int v10 = strcmp(v8, v9);
    if (*(void *)(a3 + 8)) {
      unint64_t v11 = *(const char **)(a3 + 16);
    }
    else {
      unint64_t v11 = (const char *)(a3 + 9);
    }
    uint64_t result = strcmp(v11, v8);
    if (v10 < 0)
    {
      if ((result & 0x80000000) != 0)
      {
LABEL_13:
        uint64_t v12 = v7;
LABEL_39:
        uint64_t v19 = a3;
LABEL_42:
        return std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(v12, v19);
      }
LABEL_16:
      uint64_t result = std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(v7, a2);
      if (*a4)
      {
        if (*(void *)(a3 + 8)) {
          int v15 = *(const char **)(a3 + 16);
        }
        else {
          int v15 = (const char *)(a3 + 9);
        }
        if (*(void *)(a2 + 8)) {
          uint64_t v16 = *(const char **)(a2 + 16);
        }
        else {
          uint64_t v16 = (const char *)(a2 + 9);
        }
        uint64_t result = strcmp(v15, v16);
        if ((result & 0x80000000) == 0) {
          return result;
        }
      }
      else if (*(unsigned __int16 *)(a3 + 34) >= *(unsigned __int16 *)(a2 + 34))
      {
        return result;
      }
      uint64_t v12 = a2;
      goto LABEL_39;
    }
    if ((result & 0x80000000) == 0) {
      return result;
    }
  }
  else
  {
    unsigned int v13 = *(unsigned __int16 *)(a2 + 34);
    unsigned int v14 = *(unsigned __int16 *)(a3 + 34);
    if (v13 < *(unsigned __int16 *)(result + 34))
    {
      if (v14 < v13) {
        goto LABEL_13;
      }
      goto LABEL_16;
    }
    if (v14 >= v13) {
      return result;
    }
  }
  uint64_t result = std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(a2, a3);
  if (!*a4)
  {
    if (*(unsigned __int16 *)(a2 + 34) >= *(unsigned __int16 *)(v7 + 34)) {
      return result;
    }
    goto LABEL_41;
  }
  if (*(void *)(a2 + 8)) {
    uint64_t v17 = *(const char **)(a2 + 16);
  }
  else {
    uint64_t v17 = (const char *)(a2 + 9);
  }
  if (*(void *)(v7 + 8)) {
    uint64_t v18 = *(const char **)(v7 + 16);
  }
  else {
    uint64_t v18 = (const char *)(v7 + 9);
  }
  uint64_t result = strcmp(v17, v18);
  if ((result & 0x80000000) != 0)
  {
LABEL_41:
    uint64_t v12 = v7;
    uint64_t v19 = a2;
    goto LABEL_42;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *>(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = (a2 - a1) >> 6;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (!*a3)
      {
        if (*(unsigned __int16 *)(a2 - 30) >= *(unsigned __int16 *)(a1 + 34)) {
          return result;
        }
LABEL_54:
        std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(a1, v4 - 64);
        return 1;
      }
      if (*(void *)(a2 - 56)) {
        uint64_t v8 = *(const char **)(a2 - 48);
      }
      else {
        uint64_t v8 = (const char *)(a2 - 55);
      }
      if (*(void *)(a1 + 8)) {
        uint64_t v9 = *(const char **)(a1 + 16);
      }
      else {
        uint64_t v9 = (const char *)(a1 + 9);
      }
      if (strcmp(v8, v9) < 0) {
        goto LABEL_54;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *>(a1, a1 + 64, a2 - 64, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *>(a1, a1 + 64, a1 + 128, a2 - 64, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *,0>(a1, a1 + 64, a1 + 128, a1 + 192, a2 - 64, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 128;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *>(a1, a1 + 64, a1 + 128, a3);
      uint64_t v11 = a1 + 192;
      if (a1 + 192 == v4) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      uint64_t v28 = v4;
      while (2)
      {
        if (*a3)
        {
          uint64_t v14 = *(void *)(v11 + 8);
          int v15 = *(const char **)(v11 + 16);
          if (v14) {
            uint64_t v16 = *(const char **)(v11 + 16);
          }
          else {
            uint64_t v16 = (const char *)(v11 + 9);
          }
          if (*(void *)(v10 + 8)) {
            uint64_t v17 = *(const char **)(v10 + 16);
          }
          else {
            uint64_t v17 = (const char *)(v10 + 9);
          }
          if ((strcmp(v16, v17) & 0x80000000) == 0) {
            goto LABEL_48;
          }
        }
        else
        {
          if (*(unsigned __int16 *)(v11 + 34) >= *(unsigned __int16 *)(v10 + 34)) {
            goto LABEL_48;
          }
          uint64_t v14 = *(void *)(v11 + 8);
          int v15 = *(const char **)(v11 + 16);
        }
        uint64_t v18 = *(void *)v11;
        uint64_t v19 = *(void *)(v11 + 24);
        unint64_t v31 = v15;
        uint64_t v32 = v19;
        uint64_t v29 = v18;
        uint64_t v30 = v14;
        *(void *)(v11 + 16) = 0;
        *(void *)(v11 + 24) = 0;
        *(void *)uint64_t v11 = 0;
        *(void *)(v11 + 8) = 0;
        int v33 = *(_DWORD *)(v11 + 32);
        uint64_t v20 = *(void *)(v11 + 40);
        *(void *)(v11 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
        uint64_t v21 = *(void *)(v11 + 48);
        uint64_t v22 = *(void *)(v11 + 56);
        uint64_t v34 = v20;
        uint64_t v35 = v21;
        *(void *)(v11 + 48) = 0;
        *(void *)(v11 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56) = 0;
        uint64_t v36 = v22;
        re::DynamicString::operator=((re::DynamicString *)v11, (re::DynamicString *)v10);
        *(_DWORD *)(v11 + 32) = *(_DWORD *)(v10 + 32);
        uint64_t v23 = (uint64_t *)(v10 + 40);
        re::FixedArray<float>::operator=((uint64_t *)(v11 + 40), (uint64_t *)(v10 + 40));
        if (v10 == a1)
        {
          uint64_t v10 = a1;
        }
        else
        {
          uint64_t v24 = v12;
          do
          {
            uint64_t v25 = a1 + v24;
            if (*a3)
            {
              if (v30) {
                uint64_t v26 = v31;
              }
              else {
                uint64_t v26 = (char *)&v30 + 1;
              }
              if (*(void *)(v25 + 72)) {
                uint64_t v27 = *(const char **)(v25 + 80);
              }
              else {
                uint64_t v27 = (const char *)(v25 + 73);
              }
              if ((strcmp(v26, v27) & 0x80000000) == 0)
              {
                uint64_t v23 = (uint64_t *)(a1 + v24 + 168);
                uint64_t v10 = a1 + v24 + 128;
                goto LABEL_39;
              }
            }
            else if (HIWORD(v33) >= *(unsigned __int16 *)(v25 + 98))
            {
              goto LABEL_39;
            }
            re::DynamicString::operator=((re::DynamicString *)(v25 + 128), (re::DynamicString *)(v25 + 64));
            *(_DWORD *)(a1 + v24 + 16ArcSharedObject::ArcSharedObject(this, 0) = *(_DWORD *)(a1 + v24 + 96);
            uint64_t v23 = (uint64_t *)(v10 - 24);
            re::FixedArray<float>::operator=((uint64_t *)(a1 + v24 + 168), (uint64_t *)(a1 + v24 + 104));
            v24 -= 64;
            v10 -= 64;
          }
          while (v24 != -128);
          uint64_t v23 = (uint64_t *)(a1 + 40);
          uint64_t v10 = a1;
LABEL_39:
          uint64_t v4 = v28;
        }
        re::DynamicString::operator=((re::DynamicString *)v10, (re::DynamicString *)&v29);
        *(_DWORD *)(v10 + 32) = v33;
        re::FixedArray<float>::operator=(v23, &v34);
        if (v34)
        {
          if (v35)
          {
            (*(void (**)(void))(*(void *)v34 + 40))();
            uint64_t v35 = 0;
            uint64_t v36 = 0;
          }
          uint64_t v34 = 0;
        }
        if (v29 && (v30 & 1) != 0) {
          (*(void (**)(void))(*(void *)v29 + 40))();
        }
        if (++v13 == 8) {
          return v11 + 64 == v4;
        }
LABEL_48:
        uint64_t v10 = v11;
        v12 += 64;
        v11 += 64;
        if (v11 == v4) {
          return 1;
        }
        continue;
      }
  }
}

uint64_t std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  int v10 = *(_DWORD *)(a1 + 32);
  unint64_t v3 = (uint64_t *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = v4;
  *(void *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  uint64_t v13 = v5;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56) = 0;
  *((_DWORD *)re::DynamicString::operator=((re::DynamicString *)a1, (re::DynamicString *)a2) + 8) = *(_DWORD *)(a2 + 32);
  re::FixedArray<float>::operator=(v3, (uint64_t *)(a2 + 40));
  re::DynamicString::operator=((re::DynamicString *)a2, (re::DynamicString *)&v7);
  *(_DWORD *)(a2 + 32) = v10;
  re::FixedArray<float>::operator=((uint64_t *)(a2 + 40), &v11);
  if (v11)
  {
    if (v12)
    {
      (*(void (**)(void))(*(void *)v11 + 40))();
      uint64_t v12 = 0;
      uint64_t v13 = 0;
    }
    uint64_t v11 = 0;
  }
  uint64_t result = v7;
  if (v7)
  {
    if (v8) {
      return (*(uint64_t (**)(void))(*(void *)v7 + 40))();
    }
  }
  return result;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,generateJSONForFunctionVariant(re::FunctionVariantDescriptor const&,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator> &,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false> const&,BOOL)::$_0 &,re::TechniqueFunctionConstant *>(a1, a2, a3, a5);
  if (!*a5)
  {
    if (*(unsigned __int16 *)(a4 + 34) >= *(unsigned __int16 *)(a3 + 34)) {
      return result;
    }
LABEL_11:
    uint64_t result = std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(a3, a4);
    if (*a5)
    {
      if (*(void *)(a3 + 8)) {
        uint64_t v13 = *(const char **)(a3 + 16);
      }
      else {
        uint64_t v13 = (const char *)(a3 + 9);
      }
      if (*(void *)(a2 + 8)) {
        uint64_t v14 = *(const char **)(a2 + 16);
      }
      else {
        uint64_t v14 = (const char *)(a2 + 9);
      }
      uint64_t result = strcmp(v13, v14);
      if ((result & 0x80000000) == 0) {
        return result;
      }
    }
    else if (*(unsigned __int16 *)(a3 + 34) >= *(unsigned __int16 *)(a2 + 34))
    {
      return result;
    }
    uint64_t result = std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(a2, a3);
    if (*a5)
    {
      if (*(void *)(a2 + 8)) {
        int v15 = *(const char **)(a2 + 16);
      }
      else {
        int v15 = (const char *)(a2 + 9);
      }
      if (*(void *)(a1 + 8)) {
        uint64_t v16 = *(const char **)(a1 + 16);
      }
      else {
        uint64_t v16 = (const char *)(a1 + 9);
      }
      uint64_t result = strcmp(v15, v16);
      if ((result & 0x80000000) == 0) {
        return result;
      }
    }
    else if (*(unsigned __int16 *)(a2 + 34) >= *(unsigned __int16 *)(a1 + 34))
    {
      return result;
    }
    return std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(a1, a2);
  }
  if (*(void *)(a4 + 8)) {
    uint64_t v11 = *(const char **)(a4 + 16);
  }
  else {
    uint64_t v11 = (const char *)(a4 + 9);
  }
  if (*(void *)(a3 + 8)) {
    uint64_t v12 = *(const char **)(a3 + 16);
  }
  else {
    uint64_t v12 = (const char *)(a3 + 9);
  }
  uint64_t result = strcmp(v11, v12);
  if ((result & 0x80000000) != 0) {
    goto LABEL_11;
  }
  return result;
}

uint64_t re::DynamicArray<re::DynamicString>::DynamicArray(uint64_t a1, re::DynamicString *a2, unint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  if (a3)
  {
    re::DynamicArray<re::DynamicString>::setCapacity((void *)a1, a3);
    ++*(_DWORD *)(a1 + 24);
    unint64_t v6 = *(void *)(a1 + 16);
    if (v6 == -1)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (v6 >= a3)
    {
      uint64_t v13 = *(re::DynamicString **)(a1 + 32);
      uint64_t v14 = 32 * a3;
      do
      {
        int v15 = re::DynamicString::operator=(v13, a2);
        a2 = (re::DynamicString *)((char *)a2 + 32);
        uint64_t v13 = (re::DynamicString *)((char *)v15 + 32);
        v14 -= 32;
      }
      while (v14);
    }
    else
    {
      re::DynamicArray<re::DynamicString>::growCapacity((void *)a1, a3);
      uint64_t v7 = *(void *)(a1 + 16);
      long long v8 = *(re::DynamicString **)(a1 + 32);
      if (v7)
      {
        uint64_t v9 = 32 * v7;
        int v10 = a2;
        do
        {
          uint64_t v11 = re::DynamicString::operator=(v8, v10);
          int v10 = (re::DynamicString *)((char *)v10 + 32);
          long long v8 = (re::DynamicString *)((char *)v11 + 32);
          v9 -= 32;
        }
        while (v9);
        long long v8 = *(re::DynamicString **)(a1 + 32);
        uint64_t v12 = *(void *)(a1 + 16);
      }
      else
      {
        uint64_t v12 = 0;
      }
      if (v7 != a3)
      {
        uint64_t v16 = (re::DynamicString *)((char *)a2 + 32 * v7);
        uint64_t v17 = (re::DynamicString *)((char *)v8 + 32 * v12);
        uint64_t v18 = 32 * a3 - 32 * v7;
        do
        {
          uint64_t v19 = re::DynamicString::DynamicString(v17, v16);
          uint64_t v16 = (const re::DynamicString *)((char *)v16 + 32);
          uint64_t v17 = (re::DynamicString *)((char *)v19 + 32);
          v18 -= 32;
        }
        while (v18);
      }
      *(void *)(a1 + 16) = a3;
    }
    ++*(_DWORD *)(a1 + 24);
  }
  return a1;
}

void *rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::MemoryPoolAllocator(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  if (!a3) {
    operator new();
  }
  a1[1] = a3;
  uint64_t v4 = malloc_type_malloc(0x38uLL, 0xB9BD7EEuLL);
  v4[1] = 0;
  a1[2] = v4;
  v4[4] = 0;
  *uint64_t v4 = v4 + 4;
  v4[5] = 0;
  v4[6] = 0;
  *((unsigned char *)v4 + 24) = 1;
  _OWORD v4[2] = 1;
  return a1;
}

void *rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument(void *a1)
{
  if (a1[4])
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Destroy((uint64_t)a1);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)(a1 + 5));
  return a1;
}

uint64_t rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Destroy(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::~MemoryPoolAllocator(result);
    JUMPOUT(0x237DBCBD0);
  }
  return result;
}

uint64_t rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::~MemoryPoolAllocator(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    unint64_t v3 = *(void *)(v2 + 16);
    if (v3 < 2)
    {
      rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Clear(a1);
      uint64_t v4 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(v4 + 8);
      if (*(unsigned char *)(v4 + 24)) {
        free((void *)v4);
      }
      if (v5) {
        MEMORY[0x237DBCBD0](v5, 0xC400A2AC0F1);
      }
    }
    else
    {
      *(void *)(v2 + 16) = v3 - 1;
    }
  }
  return a1;
}

void *rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Clear(uint64_t a1)
{
  for (uint64_t i = *(void *)(a1 + 16); ; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t result = *(void **)i;
    uint64_t v4 = *(void *)(*(void *)i + 16);
    if (!v4) {
      break;
    }
    *(void *)uint64_t i = v4;
    free(result);
  }
  result[1] = 0;
  return result;
}

uint64_t rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Bool(uint64_t a1, int a2)
{
  rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a1);
  if (!a2) {
    std::ostream::put();
  }
  std::ostream::put();
  std::ostream::put();
  std::ostream::put();
  uint64_t result = std::ostream::put();
  if (*(void *)(a1 + 32) == *(void *)(a1 + 24))
  {
    return std::ostream::flush();
  }
  return result;
}

uint64_t rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String(uint64_t a1, uint64_t a2, unsigned int a3)
{
  rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a1);
  std::ostream::put();
  if (a3)
  {
    for (unint64_t i = 0; i < a3; ++i)
    {
      int v7 = rapidjson::Writer<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString(char const*,unsigned int)::escape[*(unsigned __int8 *)(a2 + i)];
      if (rapidjson::Writer<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString(char const*,unsigned int)::escape[*(unsigned __int8 *)(a2 + i)])
      {
        std::ostream::put();
        std::ostream::put();
        if (v7 != 117) {
          continue;
        }
        std::ostream::put();
        std::ostream::put();
        std::ostream::put();
      }
      std::ostream::put();
    }
  }
  uint64_t result = std::ostream::put();
  if (*(void *)(a1 + 32) == *(void *)(a1 + 24))
  {
    return std::ostream::flush();
  }
  return result;
}

unsigned char *rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Uint(uint64_t a1, rapidjson::internal *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a1);
  uint64_t result = rapidjson::internal::u32toa(a2, v8, v4);
  if (v8 != result)
  {
    unint64_t v6 = result;
    int v7 = v8;
    do
    {
      ++v7;
      uint64_t result = (unsigned char *)std::ostream::put();
    }
    while (v7 != v6);
  }
  if (*(void *)(a1 + 32) == *(void *)(a1 + 24))
  {
    return (unsigned char *)std::ostream::flush();
  }
  return result;
}

char *rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Int64(uint64_t a1, unint64_t a2)
{
  *(void *)&v10[20] = *MEMORY[0x263EF8340];
  rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a1);
  if ((a2 & 0x8000000000000000) != 0)
  {
    uint64_t v5 = v10;
    char v9 = 45;
    a2 = -(uint64_t)a2;
  }
  else
  {
    uint64_t v5 = &v9;
  }
  uint64_t result = rapidjson::internal::u64toa(a2, v5, v4);
  if (&v9 != result)
  {
    int v7 = result;
    long long v8 = &v9;
    do
    {
      ++v8;
      uint64_t result = (char *)std::ostream::put();
    }
    while (v8 != v7);
  }
  if (*(void *)(a1 + 32) == *(void *)(a1 + 24))
  {
    return (char *)std::ostream::flush();
  }
  return result;
}

unsigned char *rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Uint64(uint64_t a1, unint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a1);
  uint64_t result = rapidjson::internal::u64toa(a2, v8, v4);
  if (v8 != result)
  {
    unint64_t v6 = result;
    int v7 = v8;
    do
    {
      ++v7;
      uint64_t result = (unsigned char *)std::ostream::put();
    }
    while (v7 != v6);
  }
  if (*(void *)(a1 + 32) == *(void *)(a1 + 24))
  {
    return (unsigned char *)std::ostream::flush();
  }
  return result;
}

uint64_t rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 32);
  if (v2 == *(void *)(result + 24))
  {
    *(unsigned char *)(result + 6ArcSharedObject::ArcSharedObject(this, 0) = 1;
    return result;
  }
  uint64_t v3 = *(void *)(v2 - 16);
  if (*(unsigned char *)(v2 - 8))
  {
    if (v3)
    {
      uint64_t result = std::ostream::put();
      if (*(unsigned char *)(v1 + 68)) {
        uint64_t result = std::ostream::put();
      }
    }
    if (*(unsigned char *)(v1 + 68)) {
      goto LABEL_13;
    }
    std::ostream::put();
  }
  else
  {
    if (v3) {
      std::ostream::put();
    }
    uint64_t result = std::ostream::put();
    if (*(unsigned char *)(v2 - 16)) {
      goto LABEL_13;
    }
  }
  uint64_t result = rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteIndent(v1);
LABEL_13:
  ++*(void *)(v2 - 16);
  return result;
}

uint64_t rapidjson::PrettyWriter<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteIndent(uint64_t result)
{
  for (uint64_t i = ((*(void *)(result + 32) - *(void *)(result + 24)) >> 4) * *(unsigned int *)(result + 64); i; --i)
    uint64_t result = std::ostream::put();
  return result;
}

char *rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::Writer<rapidjson::BasicOStreamWrapper<std::ostream>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Level>(void *a1)
{
  uint64_t v1 = a1[2];
  if (v1)
  {
    unint64_t v2 = a1[4] - v1 + ((unint64_t)(a1[4] - v1 + 1) >> 1);
  }
  else
  {
    if (!*a1) {
      operator new();
    }
    uint64_t v1 = 0;
    unint64_t v2 = a1[5];
  }
  unint64_t v3 = a1[3] - v1 + 16;
  if (v2 <= v3) {
    size_t v4 = v3;
  }
  else {
    size_t v4 = v2;
  }
  return rapidjson::internal::Stack<rapidjson::CrtAllocator>::Resize(a1, v4);
}

char *rapidjson::internal::Stack<rapidjson::CrtAllocator>::Resize(void *a1, size_t size)
{
  size_t v4 = (void *)a1[2];
  uint64_t v5 = a1[3];
  if (size)
  {
    uint64_t result = (char *)malloc_type_realloc(v4, size, 0x5B5BF86EuLL);
  }
  else
  {
    free(v4);
    uint64_t result = 0;
  }
  a1[2] = result;
  a1[3] = &result[v5 - (void)v4];
  a1[4] = &result[size];
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *,false>(uint64_t result, unsigned __int16 *a2, uint64_t a3, char a4)
{
  uint64_t v9 = result;
  while (2)
  {
    int v10 = (unsigned __int16 *)v9;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t)v10;
        uint64_t v11 = (char *)a2 - (char *)v10;
        unint64_t v12 = ((char *)a2 - (char *)v10) >> 6;
        if (!(!v5 & v4))
        {
          switch(v12)
          {
            case 0uLL:
            case 1uLL:
              return result;
            case 2uLL:
              if (*(a2 - 15) >= *(unsigned __int16 *)(v9 + 34)) {
                return result;
              }
              uint64_t v46 = v9;
              uint64_t v47 = (uint64_t)(a2 - 32);
              break;
            case 3uLL:
              return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *>(v9, v9 + 64, (uint64_t)(a2 - 32));
            case 4uLL:
              return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *>(v9, v9 + 64, v9 + 128, (uint64_t)(a2 - 32));
            case 5uLL:
              uint64_t result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *>(v9, v9 + 64, v9 + 128, v9 + 192);
              if (*(a2 - 15) >= *(unsigned __int16 *)(v9 + 226)) {
                return result;
              }
              uint64_t result = std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(v9 + 192, (uint64_t)(a2 - 32));
              if (*(unsigned __int16 *)(v9 + 226) >= *(unsigned __int16 *)(v9 + 162)) {
                return result;
              }
              uint64_t result = std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(v9 + 128, v9 + 192);
              if (*(unsigned __int16 *)(v9 + 162) >= *(unsigned __int16 *)(v9 + 98)) {
                return result;
              }
              uint64_t result = std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(v9 + 64, v9 + 128);
              if (*(unsigned __int16 *)(v9 + 98) >= *(unsigned __int16 *)(v9 + 34)) {
                return result;
              }
              uint64_t v46 = v9;
              uint64_t v47 = v9 + 64;
              break;
            default:
              JUMPOUT(0);
          }
          return std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(v46, v47);
        }
        if (v11 <= 1535)
        {
          if (a4)
          {
            if ((unsigned __int16 *)v9 != a2)
            {
              uint64_t v48 = (void *)(v9 + 64);
              if ((unsigned __int16 *)(v9 + 64) != a2)
              {
                uint64_t v49 = 0;
                char v50 = (void *)v9;
                do
                {
                  unint64_t v51 = v48;
                  if (*((unsigned __int16 *)v50 + 49) < *((unsigned __int16 *)v50 + 17))
                  {
                    long long v109 = 0u;
                    long long v110 = 0u;
                    *(void *)&long long v109 = *v48;
                    *uint64_t v48 = 0;
                    uint64_t v52 = v110;
                    uint64_t v53 = v51[3];
                    *(void *)&long long v110 = v51[2];
                    v51[2] = v52;
                    *((void *)&v110 + 1) = v53;
                    v51[3] = 0;
                    *((void *)&v109 + 1) = v51[1];
                    v51[1] = 0;
                    unsigned int v111 = *((_DWORD *)v50 + 24);
                    uint64_t v54 = v50[14];
                    uint64_t v112 = v50[13];
                    uint64_t v113 = v54;
                    v50[13] = 0;
                    v50[14] = 0;
                    uint64_t v114 = v50[15];
                    void v50[15] = 0;
                    uint64_t v55 = v49;
                    while (1)
                    {
                      uint64_t v56 = v9 + v55;
                      re::DynamicString::operator=((re::DynamicString *)(v9 + v55 + 64), (re::DynamicString *)(v9 + v55));
                      *(_DWORD *)(v56 + 96) = *(_DWORD *)(v56 + 32);
                      re::FixedArray<float>::operator=((uint64_t *)(v56 + 104), (uint64_t *)(v56 + 40));
                      if (!v55) {
                        break;
                      }
                      v55 -= 64;
                      if (HIWORD(v111) >= *(unsigned __int16 *)(v56 - 30))
                      {
                        int v57 = (re::DynamicString *)(v9 + v55 + 64);
                        goto LABEL_88;
                      }
                    }
                    int v57 = (re::DynamicString *)v9;
LABEL_88:
                    unsigned int v58 = re::DynamicString::operator=(v57, (re::DynamicString *)&v109);
                    *((_DWORD *)v58 + 8) = v111;
                    re::FixedArray<float>::operator=((uint64_t *)(v56 + 40), &v112);
                    if (v112)
                    {
                      if (v113)
                      {
                        (*(void (**)(void))(*(void *)v112 + 40))();
                        uint64_t v113 = 0;
                        uint64_t v114 = 0;
                      }
                      uint64_t v112 = 0;
                    }
                    uint64_t result = v109;
                    if (void)v109 && (BYTE8(v109)) {
                      uint64_t result = (*(uint64_t (**)(void))(*(void *)v109 + 40))();
                    }
                  }
                  uint64_t v48 = v51 + 8;
                  v49 += 64;
                  char v50 = v51;
                }
                while (v51 + 8 != (void *)a2);
              }
            }
          }
          else if ((unsigned __int16 *)v9 != a2)
          {
            int v95 = (void *)(v9 + 64);
            if ((unsigned __int16 *)(v9 + 64) != a2)
            {
              uint64_t v96 = (unsigned __int16 *)(v9 - 30);
              do
              {
                uint64_t v97 = v95;
                if (*(unsigned __int16 *)(v9 + 98) < *(unsigned __int16 *)(v9 + 34))
                {
                  long long v109 = 0u;
                  long long v110 = 0u;
                  *(void *)&long long v109 = *v95;
                  *int v95 = 0;
                  uint64_t v98 = v110;
                  uint64_t v99 = v97[3];
                  *(void *)&long long v110 = v97[2];
                  v97[2] = v98;
                  *((void *)&v110 + 1) = v99;
                  v97[3] = 0;
                  *((void *)&v109 + 1) = v97[1];
                  v97[1] = 0;
                  unsigned int v111 = *(_DWORD *)(v9 + 96);
                  uint64_t v100 = *(void *)(v9 + 112);
                  uint64_t v112 = *(void *)(v9 + 104);
                  uint64_t v113 = v100;
                  *(void *)(v9 + 104) = 0;
                  *(void *)(v9 + 112) = 0;
                  uint64_t v114 = *(void *)(v9 + 120);
                  *(void *)(v9 + 12ArcSharedObject::ArcSharedObject(this, 0) = 0;
                  uint64_t v101 = v96;
                  do
                  {
                    re::DynamicString::operator=((re::DynamicString *)(v101 + 47), (re::DynamicString *)(v101 + 15));
                    *(_DWORD *)(v101 + 63) = *(_DWORD *)(v101 + 31);
                    re::FixedArray<float>::operator=((uint64_t *)(v101 + 67), (uint64_t *)(v101 + 35));
                    unsigned int v102 = *v101;
                    v101 -= 32;
                  }
                  while (HIWORD(v111) < v102);
                  re::DynamicString::operator=((re::DynamicString *)(v101 + 47), (re::DynamicString *)&v109);
                  *(_DWORD *)(v101 + 63) = v111;
                  re::FixedArray<float>::operator=((uint64_t *)(v101 + 67), &v112);
                  if (v112)
                  {
                    if (v113)
                    {
                      (*(void (**)(void))(*(void *)v112 + 40))();
                      uint64_t v113 = 0;
                      uint64_t v114 = 0;
                    }
                    uint64_t v112 = 0;
                  }
                  uint64_t result = v109;
                  if (void)v109 && (BYTE8(v109)) {
                    uint64_t result = (*(uint64_t (**)(void))(*(void *)v109 + 40))();
                  }
                }
                int v95 = v97 + 8;
                v96 += 32;
                uint64_t v9 = (uint64_t)v97;
              }
              while (v97 + 8 != (void *)a2);
            }
          }
          return result;
        }
        if (!a3)
        {
          if ((unsigned __int16 *)v9 != a2)
          {
            int64_t v59 = (v12 - 2) >> 1;
            int64_t v60 = v59;
            do
            {
              int64_t v61 = v60;
              if (v59 >= v60)
              {
                uint64_t v62 = (2 * v60) | 1;
                uint64_t v63 = (unsigned __int16 *)(v9 + (v62 << 6));
                if (2 * v61 + 2 < (uint64_t)v12)
                {
                  unsigned int v64 = v63[17];
                  unsigned int v65 = v63[49];
                  v63 += 32 * (unint64_t)(v64 < v65);
                  if (v64 < v65) {
                    uint64_t v62 = 2 * v61 + 2;
                  }
                }
                uint64_t v66 = v9 + (v61 << 6);
                if (v63[17] >= *(unsigned __int16 *)(v66 + 34))
                {
                  long long v67 = (re::DynamicString *)(v9 + (v61 << 6));
                  long long v109 = 0u;
                  long long v110 = 0u;
                  *(void *)&long long v109 = *(void *)v67;
                  *(void *)long long v67 = 0;
                  uint64_t v68 = v110;
                  *(void *)&long long v110 = *((void *)v67 + 2);
                  *((void *)v67 + 2) = v68;
                  *((void *)&v110 + 1) = *((void *)v67 + 3);
                  *((void *)v67 + 3) = 0;
                  uint64_t v69 = *((void *)&v109 + 1);
                  *((void *)&v109 + 1) = *((void *)v67 + 1);
                  *((void *)v67 + 1) = v69;
                  unsigned int v111 = *(_DWORD *)(v66 + 32);
                  uint64_t v112 = *(void *)(v66 + 40);
                  *(void *)(v66 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
                  uint64_t v113 = *(void *)(v66 + 48);
                  *(void *)(v66 + 48) = 0;
                  uint64_t v114 = *(void *)(v66 + 56);
                  *(void *)(v66 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56) = 0;
                  do
                  {
                    uint64_t v70 = v63;
                    uint64_t v71 = re::DynamicString::operator=(v67, (re::DynamicString *)v63);
                    *((_DWORD *)v71 + 8) = *((_DWORD *)v70 + 8);
                    re::FixedArray<float>::operator=((uint64_t *)v71 + 5, (uint64_t *)v70 + 5);
                    if (v59 < v62) {
                      break;
                    }
                    uint64_t v72 = (2 * v62) | 1;
                    uint64_t v63 = (unsigned __int16 *)(v9 + (v72 << 6));
                    if (2 * v62 + 2 < (uint64_t)v12)
                    {
                      unsigned int v73 = v63[17];
                      unsigned int v74 = v63[49];
                      v63 += 32 * (unint64_t)(v73 < v74);
                      if (v73 < v74) {
                        uint64_t v72 = 2 * v62 + 2;
                      }
                    }
                    long long v67 = (re::DynamicString *)v70;
                    uint64_t v62 = v72;
                  }
                  while (v63[17] >= HIWORD(v111));
                  re::DynamicString::operator=((re::DynamicString *)v70, (re::DynamicString *)&v109);
                  *((_DWORD *)v70 + 8) = v111;
                  re::FixedArray<float>::operator=((uint64_t *)v70 + 5, &v112);
                  if (v112)
                  {
                    if (v113)
                    {
                      (*(void (**)(void))(*(void *)v112 + 40))();
                      uint64_t v113 = 0;
                      uint64_t v114 = 0;
                    }
                    uint64_t v112 = 0;
                  }
                  if (void)v109 && (BYTE8(v109)) {
                    (*(void (**)(void))(*(void *)v109 + 40))();
                  }
                }
              }
              int64_t v60 = v61 - 1;
            }
            while (v61);
            uint64_t v75 = (unint64_t)v11 >> 6;
            do
            {
              uint64_t v76 = 0;
              long long v103 = 0u;
              long long v104 = 0u;
              *(void *)&long long v103 = *(void *)v9;
              *(void *)uint64_t v9 = 0;
              uint64_t v77 = v104;
              uint64_t v78 = *(void *)(v9 + 24);
              *(void *)&long long v104 = *(void *)(v9 + 16);
              int64_t v79 = a2;
              *(void *)(v9 + 16) = v77;
              *((void *)&v104 + 1) = v78;
              *(void *)(v9 + 24) = 0;
              *((void *)&v103 + 1) = *(void *)(v9 + 8);
              *(void *)(v9 + 8) = 0;
              int v105 = *(_DWORD *)(v9 + 32);
              uint64_t v80 = *(void *)(v9 + 48);
              uint64_t v106 = *(void *)(v9 + 40);
              *(void *)(v9 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
              uint64_t v107 = v80;
              *(void *)(v9 + 48) = 0;
              uint64_t v108 = *(void *)(v9 + 56);
              *(void *)(v9 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56) = 0;
              int64_t v81 = (re::DynamicString *)v9;
              do
              {
                uint64_t v82 = (uint64_t *)((char *)v81 + 64 * v76 + 64);
                uint64_t v83 = (2 * v76) | 1;
                uint64_t v84 = 2 * v76 + 2;
                if (v84 < v75)
                {
                  unsigned int v85 = *((unsigned __int16 *)v82 + 17);
                  unsigned int v86 = *((unsigned __int16 *)v82 + 49);
                  v82 += 8 * (unint64_t)(v85 < v86);
                  if (v85 < v86) {
                    uint64_t v83 = v84;
                  }
                }
                uint64_t v87 = re::DynamicString::operator=(v81, (re::DynamicString *)v82);
                *((_DWORD *)v87 + 8) = *((_DWORD *)v82 + 8);
                re::FixedArray<float>::operator=((uint64_t *)v87 + 5, v82 + 5);
                int64_t v81 = (re::DynamicString *)v82;
                uint64_t v76 = v83;
              }
              while (v83 <= (uint64_t)((unint64_t)(v75 - 2) >> 1));
              a2 -= 32;
              if (v82 == (uint64_t *)(v79 - 32))
              {
                re::DynamicString::operator=((re::DynamicString *)v82, (re::DynamicString *)&v103);
                *((_DWORD *)v82 + 8) = v105;
                re::FixedArray<float>::operator=(v82 + 5, &v106);
              }
              else
              {
                re::DynamicString::operator=((re::DynamicString *)v82, (re::DynamicString *)(v79 - 32));
                *((_DWORD *)v82 + 8) = *((_DWORD *)v79 - 8);
                re::FixedArray<float>::operator=(v82 + 5, (uint64_t *)v79 - 3);
                re::DynamicString::operator=((re::DynamicString *)(v79 - 32), (re::DynamicString *)&v103);
                *((_DWORD *)v79 - 8) = v105;
                re::FixedArray<float>::operator=((uint64_t *)v79 - 3, &v106);
                uint64_t v88 = (uint64_t)v82 - v9 + 64;
                if (v88 >= 65)
                {
                  unint64_t v89 = (((unint64_t)v88 >> 6) - 2) >> 1;
                  if (*(unsigned __int16 *)(v9 + (v89 << 6) + 34) < *((unsigned __int16 *)v82 + 17))
                  {
                    long long v109 = 0u;
                    long long v110 = 0u;
                    *(void *)&long long v109 = *v82;
                    *uint64_t v82 = 0;
                    uint64_t v90 = v110;
                    uint64_t v91 = v82[3];
                    *(void *)&long long v110 = v82[2];
                    v82[2] = v90;
                    *((void *)&v110 + 1) = v91;
                    v82[3] = 0;
                    *((void *)&v109 + 1) = v82[1];
                    v82[1] = 0;
                    unsigned int v111 = *((_DWORD *)v82 + 8);
                    uint64_t v112 = v82[5];
                    v82[5] = 0;
                    uint64_t v113 = v82[6];
                    v82[6] = 0;
                    uint64_t v114 = v82[7];
                    v82[7] = 0;
                    do
                    {
                      __n128 v92 = (re::DynamicString *)v82;
                      uint64_t v82 = (uint64_t *)(v9 + (v89 << 6));
                      uint64_t v93 = re::DynamicString::operator=(v92, (re::DynamicString *)v82);
                      *((_DWORD *)v93 + 8) = *((_DWORD *)v82 + 8);
                      re::FixedArray<float>::operator=((uint64_t *)v93 + 5, v82 + 5);
                      if (!v89) {
                        break;
                      }
                      unint64_t v89 = (v89 - 1) >> 1;
                    }
                    while (*(unsigned __int16 *)(v9 + (v89 << 6) + 34) < HIWORD(v111));
                    re::DynamicString::operator=((re::DynamicString *)v82, (re::DynamicString *)&v109);
                    *((_DWORD *)v82 + 8) = v111;
                    re::FixedArray<float>::operator=(v82 + 5, &v112);
                    if (v112)
                    {
                      if (v113)
                      {
                        (*(void (**)(void))(*(void *)v112 + 40))();
                        uint64_t v113 = 0;
                        uint64_t v114 = 0;
                      }
                      uint64_t v112 = 0;
                    }
                    if (void)v109 && (BYTE8(v109)) {
                      (*(void (**)(void))(*(void *)v109 + 40))();
                    }
                  }
                }
              }
              if (v106)
              {
                if (v107)
                {
                  (*(void (**)(void))(*(void *)v106 + 40))();
                  uint64_t v107 = 0;
                  uint64_t v108 = 0;
                }
                uint64_t v106 = 0;
              }
              uint64_t result = v103;
              if (void)v103 && (BYTE8(v103)) {
                uint64_t result = (*(uint64_t (**)(void))(*(void *)v103 + 40))();
              }
            }
            while (v75-- > 2);
          }
          return result;
        }
        unint64_t v13 = v12 >> 1;
        uint64_t v14 = v9 + (v12 >> 1 << 6);
        if ((unint64_t)v11 > 0x2000)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *>(v9, v9 + (v12 >> 1 << 6), (uint64_t)(a2 - 32));
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *>(v9 + 64, v14 - 64, (uint64_t)(a2 - 64));
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *>(v9 + 128, v9 + 64 + (v13 << 6), (uint64_t)(a2 - 96));
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *>(v14 - 64, v14, v9 + 64 + (v13 << 6));
          std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(v9, v14);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *>(v9 + (v12 >> 1 << 6), v9, (uint64_t)(a2 - 32));
        }
        --a3;
        if ((a4 & 1) != 0 || *(unsigned __int16 *)(v9 - 30) < *(unsigned __int16 *)(v9 + 34)) {
          break;
        }
        long long v109 = 0u;
        long long v110 = 0u;
        *(void *)&long long v109 = *(void *)v9;
        *(void *)uint64_t v9 = 0;
        uint64_t v31 = v110;
        uint64_t v32 = *(void *)(v9 + 24);
        *(void *)&long long v110 = *(void *)(v9 + 16);
        *(void *)(v9 + 16) = v31;
        *((void *)&v110 + 1) = v32;
        *(void *)(v9 + 24) = 0;
        *((void *)&v109 + 1) = *(void *)(v9 + 8);
        *(void *)(v9 + 8) = 0;
        uint64_t v34 = *(void *)(v9 + 40);
        unsigned int v111 = *(_DWORD *)(v9 + 32);
        unsigned int v33 = v111;
        uint64_t v112 = v34;
        *(void *)(v9 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
        uint64_t v35 = *(void *)(v9 + 56);
        uint64_t v113 = *(void *)(v9 + 48);
        *(void *)(v9 + 48) = 0;
        uint64_t v114 = v35;
        *(void *)(v9 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56) = 0;
        unsigned int v36 = HIWORD(v33);
        if (*(a2 - 15) > HIWORD(v33))
        {
          uint64_t v37 = v9;
          do
          {
            int v10 = (unsigned __int16 *)(v37 + 64);
            unsigned int v38 = *(unsigned __int16 *)(v37 + 98);
            v37 += 64;
          }
          while (v38 <= v36);
        }
        else
        {
          uint64_t v39 = (unsigned __int16 *)(v9 + 64);
          do
          {
            int v10 = v39;
            if (v39 >= a2) {
              break;
            }
            unsigned int v40 = v39[17];
            v39 += 32;
          }
          while (v40 <= v36);
        }
        unint64_t v41 = (unint64_t)a2;
        if (v10 < a2)
        {
          uint64_t v42 = a2;
          do
          {
            unint64_t v41 = (unint64_t)(v42 - 32);
            unsigned int v43 = *(v42 - 15);
            v42 -= 32;
          }
          while (v43 > v36);
        }
        while ((unint64_t)v10 < v41)
        {
          std::swap[abi:nn180100]<re::TechniqueFunctionConstant>((uint64_t)v10, v41);
          do
          {
            unsigned int v44 = v10[49];
            v10 += 32;
          }
          while (HIWORD(v111) >= v44);
          do
          {
            unsigned int v45 = *(unsigned __int16 *)(v41 - 30);
            v41 -= 64;
          }
          while (HIWORD(v111) < v45);
        }
        if (v10 - 32 != (unsigned __int16 *)v9)
        {
          re::DynamicString::operator=((re::DynamicString *)v9, (re::DynamicString *)(v10 - 32));
          *(_DWORD *)(v9 + 32) = *((_DWORD *)v10 - 8);
          re::FixedArray<float>::operator=((uint64_t *)(v9 + 40), (uint64_t *)v10 - 3);
        }
        re::DynamicString::operator=((re::DynamicString *)(v10 - 32), (re::DynamicString *)&v109);
        *((_DWORD *)v10 - 8) = v111;
        re::FixedArray<float>::operator=((uint64_t *)v10 - 3, &v112);
        if (v112)
        {
          if (v113)
          {
            (*(void (**)(void))(*(void *)v112 + 40))();
            uint64_t v113 = 0;
            uint64_t v114 = 0;
          }
          uint64_t v112 = 0;
        }
        uint64_t result = v109;
        if (void)v109 && (BYTE8(v109)) {
          uint64_t result = (*(uint64_t (**)(void))(*(void *)v109 + 40))();
        }
LABEL_40:
        a4 = 0;
      }
      uint64_t v15 = 0;
      long long v109 = 0u;
      long long v110 = 0u;
      *(void *)&long long v109 = *(void *)v9;
      *(void *)uint64_t v9 = 0;
      uint64_t v16 = v110;
      uint64_t v17 = *(void *)(v9 + 24);
      *(void *)&long long v110 = *(void *)(v9 + 16);
      *(void *)(v9 + 16) = v16;
      *((void *)&v110 + 1) = v17;
      *(void *)(v9 + 24) = 0;
      *((void *)&v109 + 1) = *(void *)(v9 + 8);
      *(void *)(v9 + 8) = 0;
      LODWORD(v16) = *(_DWORD *)(v9 + 32);
      uint64_t v112 = *(void *)(v9 + 40);
      *(void *)(v9 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      uint64_t v18 = *(void *)(v9 + 56);
      uint64_t v113 = *(void *)(v9 + 48);
      *(void *)(v9 + 48) = 0;
      uint64_t v114 = v18;
      unsigned int v111 = v16;
      *(void *)(v9 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56) = 0;
      unsigned int v19 = WORD1(v16);
      do
      {
        unsigned int v20 = *(unsigned __int16 *)(v9 + v15 + 98);
        v15 += 64;
      }
      while (v20 < v19);
      uint64_t v21 = (unsigned __int16 *)(v9 + v15);
      uint64_t v22 = a2;
      if (v15 == 64)
      {
        uint64_t v25 = a2;
        while (v21 < v25)
        {
          unint64_t v23 = (unint64_t)(v25 - 32);
          unsigned int v26 = *(v25 - 15);
          v25 -= 32;
          if (v26 < v19) {
            goto LABEL_21;
          }
        }
        unint64_t v23 = (unint64_t)v25;
      }
      else
      {
        do
        {
          unint64_t v23 = (unint64_t)(v22 - 32);
          unsigned int v24 = *(v22 - 15);
          v22 -= 32;
        }
        while (v24 >= v19);
      }
LABEL_21:
      int v10 = v21;
      if ((unint64_t)v21 < v23)
      {
        unint64_t v27 = v23;
        do
        {
          std::swap[abi:nn180100]<re::TechniqueFunctionConstant>((uint64_t)v10, v27);
          do
          {
            unsigned int v28 = v10[49];
            v10 += 32;
          }
          while (v28 < HIWORD(v111));
          do
          {
            unsigned int v29 = *(unsigned __int16 *)(v27 - 30);
            v27 -= 64;
          }
          while (v29 >= HIWORD(v111));
        }
        while ((unint64_t)v10 < v27);
      }
      if (v10 - 32 != (unsigned __int16 *)v9)
      {
        re::DynamicString::operator=((re::DynamicString *)v9, (re::DynamicString *)(v10 - 32));
        *(_DWORD *)(v9 + 32) = *((_DWORD *)v10 - 8);
        re::FixedArray<float>::operator=((uint64_t *)(v9 + 40), (uint64_t *)v10 - 3);
      }
      re::DynamicString::operator=((re::DynamicString *)(v10 - 32), (re::DynamicString *)&v109);
      *((_DWORD *)v10 - 8) = v111;
      re::FixedArray<float>::operator=((uint64_t *)v10 - 3, &v112);
      if (v112)
      {
        if (v113)
        {
          (*(void (**)(void))(*(void *)v112 + 40))();
          uint64_t v113 = 0;
          uint64_t v114 = 0;
        }
        uint64_t v112 = 0;
      }
      if (void)v109 && (BYTE8(v109)) {
        (*(void (**)(void))(*(void *)v109 + 40))();
      }
      if ((unint64_t)v21 < v23)
      {
LABEL_39:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *,false>(v9, v10 - 32, a3, a4 & 1);
        goto LABEL_40;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *>((unsigned __int16 *)v9, v10 - 32);
      uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *>(v10, a2);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_39;
      }
    }
    a2 = v10 - 32;
    if (!v30) {
      continue;
    }
    return result;
  }
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  unsigned int v6 = *(unsigned __int16 *)(a2 + 34);
  unsigned int v7 = *(unsigned __int16 *)(a3 + 34);
  if (v6 >= *(unsigned __int16 *)(result + 34))
  {
    if (v7 >= v6) {
      return result;
    }
    uint64_t result = std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(a2, a3);
    if (*(unsigned __int16 *)(a2 + 34) >= *(unsigned __int16 *)(v5 + 34)) {
      return result;
    }
    uint64_t result = v5;
    uint64_t v8 = a2;
  }
  else
  {
    if (v7 >= v6)
    {
      uint64_t result = std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(result, a2);
      if (*(unsigned __int16 *)(a3 + 34) >= *(unsigned __int16 *)(a2 + 34)) {
        return result;
      }
      uint64_t result = a2;
    }
    uint64_t v8 = a3;
  }
  return std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(result, v8);
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *>(unsigned __int16 *a1, unsigned __int16 *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 6;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 15) < a1[17])
      {
        uint64_t v6 = (uint64_t)(a2 - 32);
        uint64_t v7 = (uint64_t)a1;
        goto LABEL_4;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *>((uint64_t)a1, (uint64_t)(a1 + 32), (uint64_t)(a2 - 32));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *>((uint64_t)a1, (uint64_t)(a1 + 32), (uint64_t)(a1 + 64), (uint64_t)(a2 - 32));
      return 1;
    case 5:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *>((uint64_t)a1, (uint64_t)(a1 + 32), (uint64_t)(a1 + 64), (uint64_t)(a1 + 96));
      if (*(a2 - 15) < a1[113])
      {
        std::swap[abi:nn180100]<re::TechniqueFunctionConstant>((uint64_t)(a1 + 96), (uint64_t)(a2 - 32));
        if (a1[113] < a1[81])
        {
          std::swap[abi:nn180100]<re::TechniqueFunctionConstant>((uint64_t)(a1 + 64), (uint64_t)(a1 + 96));
          if (a1[81] < a1[49])
          {
            std::swap[abi:nn180100]<re::TechniqueFunctionConstant>((uint64_t)(a1 + 32), (uint64_t)(a1 + 64));
            if (a1[49] < a1[17])
            {
              uint64_t v7 = (uint64_t)a1;
              uint64_t v6 = (uint64_t)(a1 + 32);
LABEL_4:
              std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(v7, v6);
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v8 = a1 + 64;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *>((uint64_t)a1, (uint64_t)(a1 + 32), (uint64_t)(a1 + 64));
      uint64_t v9 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    if (v9[17] < v8[17])
    {
      uint64_t v18 = *(void *)v9;
      uint64_t v20 = *((void *)v9 + 3);
      long long v19 = *(_OWORD *)(v9 + 4);
      *((void *)v9 + 2) = 0;
      *((void *)v9 + 3) = 0;
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      int v21 = *((_DWORD *)v9 + 8);
      uint64_t v12 = *((void *)v9 + 5);
      uint64_t v13 = *((void *)v9 + 6);
      *((void *)v9 + 5) = 0;
      *((void *)v9 + 6) = 0;
      uint64_t v22 = v12;
      uint64_t v23 = v13;
      uint64_t v24 = *((void *)v9 + 7);
      uint64_t v14 = v10;
      *((void *)v9 + 7) = 0;
      while (1)
      {
        uint64_t v15 = (char *)a1 + v14;
        re::DynamicString::operator=((re::DynamicString *)((char *)a1 + v14 + 192), (re::DynamicString *)((char *)a1 + v14 + 128));
        *((_DWORD *)v15 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56) = *((_DWORD *)v15 + 40);
        re::FixedArray<float>::operator=((uint64_t *)v15 + 29, (uint64_t *)v15 + 21);
        if (v14 == -128) {
          break;
        }
        v14 -= 64;
        if (HIWORD(v21) >= *((unsigned __int16 *)v15 + 49))
        {
          uint64_t v16 = (re::DynamicString *)((char *)a1 + v14 + 192);
          goto LABEL_14;
        }
      }
      uint64_t v16 = (re::DynamicString *)a1;
LABEL_14:
      uint64_t v17 = re::DynamicString::operator=(v16, (re::DynamicString *)&v18);
      *((_DWORD *)v17 + 8) = v21;
      re::FixedArray<float>::operator=((uint64_t *)v15 + 21, &v22);
      if (v22)
      {
        if (v23)
        {
          (*(void (**)(void))(*(void *)v22 + 40))();
          uint64_t v23 = 0;
          uint64_t v24 = 0;
        }
        uint64_t v22 = 0;
      }
      if (v18 && (v19 & 1) != 0) {
        (*(void (**)(void))(*(void *)v18 + 40))();
      }
      if (++v11 == 8) {
        return v9 + 32 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 64;
    v9 += 32;
    if (v9 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_0 &,re::TechniqueFunctionConstant *>(a1, a2, a3);
  if (*(unsigned __int16 *)(a4 + 34) < *(unsigned __int16 *)(a3 + 34))
  {
    uint64_t result = std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(a3, a4);
    if (*(unsigned __int16 *)(a3 + 34) < *(unsigned __int16 *)(a2 + 34))
    {
      uint64_t result = std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(a2, a3);
      if (*(unsigned __int16 *)(a2 + 34) < *(unsigned __int16 *)(a1 + 34))
      {
        return std::swap[abi:nn180100]<re::TechniqueFunctionConstant>(a1, a2);
      }
    }
  }
  return result;
}

_DWORD *re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::EntryWithoutHash::free(_DWORD *result)
{
  if ((*result & 0x80000000) != 0)
  {
    uint64_t v1 = result;
    *result &= ~0x80000000;
    re::DynamicString::deinit((re::DynamicString *)(result + 38));
    re::DynamicString::deinit((re::DynamicString *)(v1 + 30));
    re::DynamicString::deinit((re::DynamicString *)(v1 + 22));
    re::DynamicString::deinit((re::DynamicString *)(v1 + 14));
    return (_DWORD *)re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)(v1 + 4));
  }
  return result;
}

double re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<unsigned long,re::FunctionVariantDescriptor,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::EntryWithoutHash::free((_DWORD *)(a1[2] + v3));
        ++v4;
        v3 += 208;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *,false>(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  int v11 = (void *)result;
  while (2)
  {
    uint64_t v12 = (re::DynamicString *)(a2 - 32);
    unsigned int v73 = (re::DynamicString *)(a2 - 96);
    unsigned int v74 = (re::DynamicString *)(a2 - 64);
    unint64_t v13 = (unint64_t)v11;
    while (1)
    {
      while (1)
      {
        int v11 = (void *)v13;
        uint64_t v14 = a2 - v13;
        unint64_t v15 = (uint64_t)(a2 - v13) >> 5;
        if (!(!v6 & v5))
        {
          switch(v15)
          {
            case 0uLL:
            case 1uLL:
              return result;
            case 2uLL:
              double result = re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)v12, (uint64_t)v11);
              if (result) {
                double result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::DynamicString *&,re::DynamicString *&>((uint64_t)v11, v12);
              }
              break;
            case 3uLL:
              double result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *>((uint64_t)v11, (re::DynamicString *)(v11 + 4), v12, a3);
              break;
            case 4uLL:
              double result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *>((uint64_t)v11, (re::DynamicString *)(v11 + 4), (re::DynamicString *)(v11 + 8), v12, a3);
              break;
            case 5uLL:
              double result = std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *,0>((uint64_t)v11, (re::DynamicString *)(v11 + 4), (re::DynamicString *)(v11 + 8), (re::DynamicString *)(v11 + 12), v12, a3);
              break;
            default:
              JUMPOUT(0);
          }
          return result;
        }
        if (v14 <= 767)
        {
          uint64_t v32 = (uint64_t)(v11 + 4);
          BOOL v34 = v11 == (void *)a2 || v32 == a2;
          if (a5)
          {
            if (!v34)
            {
              uint64_t v35 = 0;
              unsigned int v36 = v11;
              do
              {
                uint64_t v37 = (uint64_t)v36;
                unsigned int v36 = (void *)v32;
                double result = re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, v32, v37);
                if (result)
                {
                  long long v78 = 0u;
                  long long v79 = 0u;
                  *(void *)&long long v78 = *v36;
                  *unsigned int v36 = 0;
                  uint64_t v38 = v79;
                  uint64_t v39 = v36[3];
                  *(void *)&long long v79 = v36[2];
                  v36[2] = v38;
                  *((void *)&v79 + 1) = v39;
                  v36[3] = 0;
                  *((void *)&v78 + 1) = v36[1];
                  v36[1] = 0;
                  uint64_t v40 = v35;
                  while (1)
                  {
                    re::DynamicString::operator=((re::DynamicString *)((char *)v11 + v40 + 32), (re::DynamicString *)((char *)v11 + v40));
                    if (!v40) {
                      break;
                    }
                    v40 -= 32;
                    if (!re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)&v78, (uint64_t)v11 + v40))
                    {
                      unint64_t v41 = (re::DynamicString *)((char *)v11 + v40 + 32);
                      goto LABEL_82;
                    }
                  }
                  unint64_t v41 = (re::DynamicString *)v11;
LABEL_82:
                  re::DynamicString::operator=(v41, (re::DynamicString *)&v78);
                  double result = v78;
                  if (void)v78 && (BYTE8(v78)) {
                    double result = (*(uint64_t (**)(void))(*(void *)v78 + 40))();
                  }
                }
                uint64_t v32 = (uint64_t)(v36 + 4);
                v35 += 32;
              }
              while (v36 + 4 != (void *)a2);
            }
          }
          else if (!v34)
          {
            do
            {
              uint64_t v69 = (void *)v32;
              double result = re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, v32, (uint64_t)v11);
              if (result)
              {
                long long v78 = 0u;
                long long v79 = 0u;
                *(void *)&long long v78 = *v69;
                *uint64_t v69 = 0;
                uint64_t v70 = v79;
                uint64_t v71 = v69[3];
                *(void *)&long long v79 = v69[2];
                std::locale v69[2] = v70;
                *((void *)&v79 + 1) = v71;
                v69[3] = 0;
                *((void *)&v78 + 1) = v69[1];
                v69[1] = 0;
                do
                {
                  re::DynamicString::operator=((re::DynamicString *)(v11 + 4), (re::DynamicString *)v11);
                  v11 -= 4;
                }
                while (re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)&v78, (uint64_t)v11));
                re::DynamicString::operator=((re::DynamicString *)(v11 + 4), (re::DynamicString *)&v78);
                double result = v78;
                if ((void)v78)
                {
                  if (BYTE8(v78)) {
                    double result = (*(uint64_t (**)(void))(*(void *)v78 + 40))();
                  }
                }
              }
              uint64_t v32 = (uint64_t)(v69 + 4);
              int v11 = v69;
            }
            while (v69 + 4 != (void *)a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v11 != (void *)a2)
          {
            int64_t v42 = (v15 - 2) >> 1;
            int64_t v75 = v42;
            uint64_t v72 = a2;
            do
            {
              int64_t v43 = v42;
              if (v75 >= v42)
              {
                uint64_t v44 = (2 * v42) | 1;
                unsigned int v45 = (re::DynamicString *)&v11[4 * v44];
                if (2 * v42 + 2 < (uint64_t)v15
                  && re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)&v11[4 * v44], (uint64_t)v45 + 32))
                {
                  unsigned int v45 = (re::DynamicString *)((char *)v45 + 32);
                  uint64_t v44 = 2 * v43 + 2;
                }
                uint64_t v46 = (re::DynamicString *)&v11[4 * v43];
                if (!re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)v45, (uint64_t)v46))
                {
                  long long v78 = 0u;
                  long long v79 = 0u;
                  *(void *)&long long v78 = *(void *)v46;
                  *(void *)uint64_t v46 = 0;
                  uint64_t v47 = &v11[4 * v43];
                  uint64_t v48 = v79;
                  *(void *)&long long v79 = v47[2];
                  _OWORD v47[2] = v48;
                  *((void *)&v79 + 1) = v47[3];
                  v47[3] = 0;
                  uint64_t v49 = *((void *)&v78 + 1);
                  *((void *)&v78 + 1) = v47[1];
                  v47[1] = v49;
                  do
                  {
                    char v50 = v45;
                    re::DynamicString::operator=(v46, v45);
                    if (v75 < v44) {
                      break;
                    }
                    uint64_t v51 = (2 * v44) | 1;
                    unsigned int v45 = (re::DynamicString *)&v11[4 * v51];
                    uint64_t v52 = 2 * v44 + 2;
                    if (v52 < (uint64_t)v15
                      && re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)&v11[4 * v51], (uint64_t)v45 + 32))
                    {
                      unsigned int v45 = (re::DynamicString *)((char *)v45 + 32);
                      uint64_t v51 = v52;
                    }
                    uint64_t v46 = v50;
                    uint64_t v44 = v51;
                  }
                  while (!re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)v45, (uint64_t)&v78));
                  re::DynamicString::operator=(v50, (re::DynamicString *)&v78);
                  if (void)v78 && (BYTE8(v78)) {
                    (*(void (**)(void))(*(void *)v78 + 40))();
                  }
                  a2 = v72;
                }
              }
              int64_t v42 = v43 - 1;
            }
            while (v43);
            uint64_t v53 = (unint64_t)v14 >> 5;
            do
            {
              uint64_t v54 = 0;
              long long v76 = 0u;
              long long v77 = 0u;
              *(void *)&long long v76 = *v11;
              *int v11 = 0;
              uint64_t v55 = v77;
              uint64_t v56 = v11[3];
              *(void *)&long long v77 = v11[2];
              uint64_t v11[2] = v55;
              *((void *)&v77 + 1) = v56;
              float32x4_t v11[3] = 0;
              *((void *)&v76 + 1) = v11[1];
              v11[1] = 0;
              int v57 = (re::DynamicString *)v11;
              do
              {
                unsigned int v58 = (re::DynamicString *)((char *)v57 + 32 * v54 + 32);
                uint64_t v59 = (2 * v54) | 1;
                uint64_t v60 = 2 * v54 + 2;
                if (v60 < v53
                  && re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)v57 + 32 * v54 + 32, (uint64_t)v57 + 32 * v54 + 64))
                {
                  unsigned int v58 = (re::DynamicString *)((char *)v58 + 32);
                  uint64_t v59 = v60;
                }
                re::DynamicString::operator=(v57, v58);
                int v57 = v58;
                uint64_t v54 = v59;
              }
              while (v59 <= (uint64_t)((unint64_t)(v53 - 2) >> 1));
              if (v58 == (re::DynamicString *)(a2 - 32))
              {
                uint64_t v61 = a2 - 32;
                re::DynamicString::operator=(v58, (re::DynamicString *)&v76);
              }
              else
              {
                re::DynamicString::operator=(v58, (re::DynamicString *)(a2 - 32));
                uint64_t v61 = a2 - 32;
                re::DynamicString::operator=((re::DynamicString *)(a2 - 32), (re::DynamicString *)&v76);
                uint64_t v62 = v58 - (re::DynamicString *)v11 + 32;
                if (v62 >= 33)
                {
                  unint64_t v63 = (((unint64_t)v62 >> 5) - 2) >> 1;
                  unsigned int v64 = (re::DynamicString *)&v11[4 * v63];
                  if (re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)v64, (uint64_t)v58))
                  {
                    long long v78 = 0u;
                    long long v79 = 0u;
                    *(void *)&long long v78 = *(void *)v58;
                    *(void *)unsigned int v58 = 0;
                    uint64_t v65 = v79;
                    uint64_t v66 = *((void *)v58 + 3);
                    *(void *)&long long v79 = *((void *)v58 + 2);
                    *((void *)v58 + 2) = v65;
                    *((void *)&v79 + 1) = v66;
                    *((void *)v58 + 3) = 0;
                    *((void *)&v78 + 1) = *((void *)v58 + 1);
                    *((void *)v58 + 1) = 0;
                    do
                    {
                      long long v67 = v64;
                      re::DynamicString::operator=(v58, v64);
                      if (!v63) {
                        break;
                      }
                      unint64_t v63 = (v63 - 1) >> 1;
                      unsigned int v64 = (re::DynamicString *)&v11[4 * v63];
                      unsigned int v58 = v67;
                    }
                    while (re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)v64, (uint64_t)&v78));
                    re::DynamicString::operator=(v67, (re::DynamicString *)&v78);
                    if ((void)v78)
                    {
                      if (BYTE8(v78)) {
                        (*(void (**)(void))(*(void *)v78 + 40))();
                      }
                    }
                  }
                }
              }
              double result = v76;
              if (void)v76 && (BYTE8(v76)) {
                double result = (*(uint64_t (**)(void))(*(void *)v76 + 40))();
              }
              BOOL v68 = v53-- <= 2;
              a2 = v61;
            }
            while (!v68);
          }
          return result;
        }
        uint64_t v16 = (re::DynamicString *)a2;
        unint64_t v17 = v15 >> 1;
        uint64_t v18 = (re::DynamicString *)&v11[4 * (v15 >> 1)];
        if ((unint64_t)v14 > 0x1000)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *>((uint64_t)v11, (re::DynamicString *)&v11[4 * (v15 >> 1)], v12, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *>((uint64_t)(v11 + 4), (re::DynamicString *)((char *)v18 - 32), v74, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *>((uint64_t)(v11 + 8), (re::DynamicString *)&v11[4 * v17 + 4], v73, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *>((uint64_t)v18 - 32, v18, (re::DynamicString *)&v11[4 * v17 + 4], a3);
          *(void *)&long long v78 = *v11;
          *int v11 = 0;
          uint64_t v19 = v11[3];
          *(void *)&long long v79 = v11[2];
          uint64_t v11[2] = 0;
          *((void *)&v79 + 1) = v19;
          float32x4_t v11[3] = 0;
          *((void *)&v78 + 1) = v11[1];
          v11[1] = 0;
          re::DynamicString::operator=((re::DynamicString *)v11, v18);
          re::DynamicString::operator=(v18, (re::DynamicString *)&v78);
          if (void)v78 && (BYTE8(v78)) {
            (*(void (**)(void))(*(void *)v78 + 40))();
          }
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *>((uint64_t)&v11[4 * (v15 >> 1)], (re::DynamicString *)v11, v12, a3);
        }
        a2 = (uint64_t)v16;
        --a4;
        if ((a5 & 1) != 0
          || re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)(v11 - 4), (uint64_t)v11))
        {
          break;
        }
        long long v78 = 0u;
        long long v79 = 0u;
        *(void *)&long long v78 = *v11;
        *int v11 = 0;
        uint64_t v27 = v79;
        uint64_t v28 = v11[3];
        *(void *)&long long v79 = v11[2];
        uint64_t v11[2] = v27;
        *((void *)&v79 + 1) = v28;
        float32x4_t v11[3] = 0;
        *((void *)&v78 + 1) = v11[1];
        v11[1] = 0;
        if (re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)&v78, (uint64_t)v12))
        {
          unint64_t v13 = (unint64_t)v11;
          do
            v13 += 32;
          while (!re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)&v78, v13));
        }
        else
        {
          unint64_t v29 = (unint64_t)(v11 + 4);
          do
          {
            unint64_t v13 = v29;
            if (v29 >= (unint64_t)v16) {
              break;
            }
            BOOL v30 = re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)&v78, v29);
            unint64_t v29 = v13 + 32;
          }
          while (!v30);
        }
        uint64_t v31 = v16;
        if (v13 < (unint64_t)v16)
        {
          uint64_t v31 = v16;
          do
            uint64_t v31 = (re::DynamicString *)((char *)v31 - 32);
          while (re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)&v78, (uint64_t)v31));
        }
        while (v13 < (unint64_t)v31)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::DynamicString *&,re::DynamicString *&>(v13, v31);
          do
            v13 += 32;
          while (!re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)&v78, v13));
          do
            uint64_t v31 = (re::DynamicString *)((char *)v31 - 32);
          while (re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)&v78, (uint64_t)v31));
        }
        if ((void *)(v13 - 32) != v11) {
          re::DynamicString::operator=((re::DynamicString *)v11, (re::DynamicString *)(v13 - 32));
        }
        re::DynamicString::operator=((re::DynamicString *)(v13 - 32), (re::DynamicString *)&v78);
        double result = v78;
        if (void)v78 && (BYTE8(v78)) {
          double result = (*(uint64_t (**)(void))(*(void *)v78 + 40))();
        }
LABEL_38:
        a5 = 0;
      }
      uint64_t v20 = 0;
      long long v78 = 0u;
      long long v79 = 0u;
      *(void *)&long long v78 = *v11;
      *int v11 = 0;
      uint64_t v21 = v79;
      uint64_t v22 = v11[3];
      *(void *)&long long v79 = v11[2];
      uint64_t v11[2] = v21;
      *((void *)&v79 + 1) = v22;
      float32x4_t v11[3] = 0;
      *((void *)&v78 + 1) = v11[1];
      v11[1] = 0;
      do
        v20 += 4;
      while (re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)&v11[v20], (uint64_t)&v78));
      uint64_t v23 = &v11[v20];
      unint64_t v24 = a2;
      if (v20 == 4)
      {
        unint64_t v24 = a2;
        do
        {
          if ((unint64_t)v23 >= v24) {
            break;
          }
          v24 -= 32;
        }
        while (!re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, v24, (uint64_t)&v78));
      }
      else
      {
        do
          v24 -= 32;
        while (!re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, v24, (uint64_t)&v78));
      }
      if ((unint64_t)v23 < v24)
      {
        uint64_t v25 = (re::DynamicString *)v24;
        unint64_t v13 = (unint64_t)v23;
        do
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::DynamicString *&,re::DynamicString *&>(v13, v25);
          do
            v13 += 32;
          while (re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, v13, (uint64_t)&v78));
          do
            uint64_t v25 = (re::DynamicString *)((char *)v25 - 32);
          while (!re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)v25, (uint64_t)&v78));
        }
        while (v13 < (unint64_t)v25);
      }
      else
      {
        unint64_t v13 = (unint64_t)&v11[v20];
      }
      if ((void *)(v13 - 32) != v11) {
        re::DynamicString::operator=((re::DynamicString *)v11, (re::DynamicString *)(v13 - 32));
      }
      re::DynamicString::operator=((re::DynamicString *)(v13 - 32), (re::DynamicString *)&v78);
      if (void)v78 && (BYTE8(v78)) {
        (*(void (**)(void))(*(void *)v78 + 40))();
      }
      if ((unint64_t)v23 < v24)
      {
LABEL_37:
        double result = std::__introsort<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *,false>(v11, v13 - 32, a3, a4, a5 & 1);
        goto LABEL_38;
      }
      char v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *>((uint64_t)v11, v13 - 32, a3);
      double result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *>(v13, a2, a3);
      if (result) {
        break;
      }
      if ((v26 & 1) == 0) {
        goto LABEL_37;
      }
    }
    a2 = v13 - 32;
    if ((v26 & 1) == 0) {
      continue;
    }
    return result;
  }
}

BOOL re::PSOToolManager::generateStatistics(void)::$_1::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v24, a2);
  uint64_t v7 = 0x7FFFFFFFLL;
  if (*(void *)(a1 + 552))
  {
    uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 560) + 4 * (v6 % *(unsigned int *)(a1 + 576)));
    if (v8 != 0x7FFFFFFF)
    {
      uint64_t v9 = *(void *)(a1 + 568);
      uint64_t v7 = 0x7FFFFFFFLL;
      while (!re::DynamicString::operator==(v9 + 56 * v8 + 16, a2))
      {
        uint64_t v8 = *(_DWORD *)(v9 + 56 * v8 + 8) & 0x7FFFFFFF;
        if (v8 == 0x7FFFFFFF) {
          goto LABEL_8;
        }
      }
      uint64_t v7 = v8;
    }
  }
LABEL_8:
  int v10 = *(_DWORD *)(*(void *)(a1 + 568) + 56 * v7 + 48);
  unint64_t v11 = re::Hash<re::DynamicString>::operator()((uint64_t)&v25, a2);
  uint64_t v12 = 0x7FFFFFFFLL;
  if (*(void *)(a1 + 504))
  {
    uint64_t v13 = *(unsigned int *)(*(void *)(a1 + 512) + 4 * (v11 % *(unsigned int *)(a1 + 528)));
    if (v13 != 0x7FFFFFFF)
    {
      uint64_t v14 = *(void *)(a1 + 520);
      uint64_t v12 = 0x7FFFFFFFLL;
      while (!re::DynamicString::operator==(v14 + 56 * v13 + 16, a2))
      {
        uint64_t v13 = *(_DWORD *)(v14 + 56 * v13 + 8) & 0x7FFFFFFF;
        if (v13 == 0x7FFFFFFF) {
          goto LABEL_15;
        }
      }
      uint64_t v12 = v13;
    }
  }
LABEL_15:
  int v15 = *(_DWORD *)(*(void *)(a1 + 520) + 56 * v12 + 48);
  unint64_t v16 = re::Hash<re::DynamicString>::operator()((uint64_t)&v26, a3);
  if (!*(void *)(a1 + 552))
  {
    uint64_t v18 = *(void *)(a1 + 568);
    goto LABEL_21;
  }
  uint64_t v17 = *(unsigned int *)(*(void *)(a1 + 560) + 4 * (v16 % *(unsigned int *)(a1 + 576)));
  uint64_t v18 = *(void *)(a1 + 568);
  if (v17 == 0x7FFFFFFF)
  {
LABEL_21:
    uint64_t v17 = 0x7FFFFFFFLL;
    goto LABEL_22;
  }
  while (!re::DynamicString::operator==(v18 + 56 * v17 + 16, a3))
  {
    uint64_t v17 = *(_DWORD *)(v18 + 56 * v17 + 8) & 0x7FFFFFFF;
    if (v17 == 0x7FFFFFFF) {
      goto LABEL_21;
    }
  }
LABEL_22:
  int v19 = *(_DWORD *)(v18 + 56 * v17 + 48);
  unint64_t v20 = re::Hash<re::DynamicString>::operator()((uint64_t)&v27, a3);
  if (!*(void *)(a1 + 504))
  {
    uint64_t v22 = *(void *)(a1 + 520);
    goto LABEL_28;
  }
  uint64_t v21 = *(unsigned int *)(*(void *)(a1 + 512) + 4 * (v20 % *(unsigned int *)(a1 + 528)));
  uint64_t v22 = *(void *)(a1 + 520);
  if (v21 == 0x7FFFFFFF)
  {
LABEL_28:
    uint64_t v21 = 0x7FFFFFFFLL;
    return (float)(5 * v15 + 10 * v10) > (float)(5 * *(_DWORD *)(v22 + 56 * v21 + 48) + 10 * v19);
  }
  while (!re::DynamicString::operator==(v22 + 56 * v21 + 16, a3))
  {
    uint64_t v21 = *(_DWORD *)(v22 + 56 * v21 + 8) & 0x7FFFFFFF;
    if (v21 == 0x7FFFFFFF) {
      goto LABEL_28;
    }
  }
  return (float)(5 * v15 + 10 * v10) > (float)(5 * *(_DWORD *)(v22 + 56 * v21 + 48) + 10 * v19);
}

uint64_t std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::DynamicString *&,re::DynamicString *&>(uint64_t a1, re::DynamicString *a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 24);
  long long v5 = *(_OWORD *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  re::DynamicString::operator=((re::DynamicString *)a1, a2);
  re::DynamicString::operator=(a2, (re::DynamicString *)&v4);
  uint64_t result = v4;
  if (v4)
  {
    if (v5) {
      return (*(uint64_t (**)(void))(*(void *)v4 + 40))();
    }
  }
  return result;
}

uint64_t std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *,0>(uint64_t a1, re::DynamicString *a2, re::DynamicString *a3, re::DynamicString *a4, re::DynamicString *a5, uint64_t *a6)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *>(a1, a2, a3, a4, a6);
  uint64_t result = re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a6, (uint64_t)a5, (uint64_t)a4);
  if (result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::DynamicString *&,re::DynamicString *&>((uint64_t)a4, a5);
    uint64_t result = re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a6, (uint64_t)a4, (uint64_t)a3);
    if (result)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::DynamicString *&,re::DynamicString *&>((uint64_t)a3, a4);
      uint64_t result = re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a6, (uint64_t)a3, (uint64_t)a2);
      if (result)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::DynamicString *&,re::DynamicString *&>((uint64_t)a2, a3);
        uint64_t result = re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a6, (uint64_t)a2, a1);
        if (result)
        {
          return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::DynamicString *&,re::DynamicString *&>(a1, a2);
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *>(uint64_t a1, re::DynamicString *a2, re::DynamicString *a3, uint64_t *a4)
{
  BOOL v8 = re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a4, (uint64_t)a2, a1);
  uint64_t result = re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a4, (uint64_t)a3, (uint64_t)a2);
  if (v8)
  {
    if (result)
    {
      uint64_t v10 = a1;
    }
    else
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::DynamicString *&,re::DynamicString *&>(a1, a2);
      uint64_t result = re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a4, (uint64_t)a3, (uint64_t)a2);
      if (!result) {
        return result;
      }
      uint64_t v10 = (uint64_t)a2;
    }
    unint64_t v11 = a3;
  }
  else
  {
    if (!result) {
      return result;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::DynamicString *&,re::DynamicString *&>((uint64_t)a2, a3);
    uint64_t result = re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a4, (uint64_t)a2, a1);
    if (!result) {
      return result;
    }
    uint64_t v10 = a1;
    unint64_t v11 = a2;
  }
  return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::DynamicString *&,re::DynamicString *&>(v10, v11);
}

uint64_t std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  BOOL v6 = 1;
  switch((a2 - a1) >> 5)
  {
    case 0:
    case 1:
      return v6;
    case 2:
      uint64_t v7 = (re::DynamicString *)(a2 - 32);
      if (re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, a2 - 32, a1)) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::DynamicString *&,re::DynamicString *&>(a1, v7);
      }
      return v6;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *>(a1, (re::DynamicString *)(a1 + 32), (re::DynamicString *)(a2 - 32), a3);
      return v6;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *>(a1, (re::DynamicString *)(a1 + 32), (re::DynamicString *)(a1 + 64), (re::DynamicString *)(a2 - 32), a3);
      return v6;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *,0>(a1, (re::DynamicString *)(a1 + 32), (re::DynamicString *)(a1 + 64), (re::DynamicString *)(a1 + 96), (re::DynamicString *)(a2 - 32), a3);
      return v6;
    default:
      uint64_t v8 = a1 + 64;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *>(a1, (re::DynamicString *)(a1 + 32), (re::DynamicString *)(a1 + 64), a3);
      uint64_t v9 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (!re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, v9, v8))
  {
LABEL_16:
    uint64_t v8 = v9;
    v10 += 32;
    v9 += 32;
    if (v9 == a2) {
      return 1;
    }
  }
  uint64_t v16 = *(void *)v9;
  uint64_t v18 = *(void *)(v9 + 24);
  long long v17 = *(_OWORD *)(v9 + 8);
  *(void *)(v9 + 16) = 0;
  *(void *)(v9 + 24) = 0;
  *(void *)uint64_t v9 = 0;
  *(void *)(v9 + 8) = 0;
  uint64_t v12 = v10;
  while (1)
  {
    re::DynamicString::operator=((re::DynamicString *)(a1 + v12 + 96), (re::DynamicString *)(a1 + v12 + 64));
    if (v12 == -64) {
      break;
    }
    BOOL v13 = re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a3, (uint64_t)&v16, a1 + v12 + 32);
    v12 -= 32;
    if (!v13)
    {
      uint64_t v14 = (re::DynamicString *)(a1 + v12 + 96);
      goto LABEL_12;
    }
  }
  uint64_t v14 = (re::DynamicString *)a1;
LABEL_12:
  re::DynamicString::operator=(v14, (re::DynamicString *)&v16);
  if (++v11 != 8)
  {
    if (v16 && (v17 & 1) != 0) {
      (*(void (**)(void))(*(void *)v16 + 40))();
    }
    goto LABEL_16;
  }
  BOOL v6 = v9 + 32 == a2;
  if (v16 && (v17 & 1) != 0) {
    (*(void (**)(void))(*(void *)v16 + 40))();
  }
  return v6;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *>(uint64_t a1, re::DynamicString *a2, re::DynamicString *a3, re::DynamicString *a4, uint64_t *a5)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::PSOToolManager::generateStatistics(void)::$_1 &,re::DynamicString *>(a1, a2, a3, a5);
  uint64_t result = re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a5, (uint64_t)a4, (uint64_t)a3);
  if (result)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::DynamicString *&,re::DynamicString *&>((uint64_t)a3, a4);
    uint64_t result = re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a5, (uint64_t)a3, (uint64_t)a2);
    if (result)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::DynamicString *&,re::DynamicString *&>((uint64_t)a2, a3);
      uint64_t result = re::PSOToolManager::generateStatistics(void)::$_1::operator()(*a5, (uint64_t)a2, a1);
      if (result)
      {
        return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::DynamicString *&,re::DynamicString *&>(a1, a2);
      }
    }
  }
  return result;
}

void *re::DynamicArray<re::PSOToolComputeDescriptor>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::PSOToolComputeDescriptor>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::PSOToolComputeDescriptor>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::PSOToolComputeDescriptor>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::PSOToolComputeDescriptor>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x88uLL))
        {
          uint64_t v2 = 136 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 136 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 136, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 136 * v9;
        int v11 = v7;
        do
        {
          *(_OWORD *)int v11 = 0u;
          *((_OWORD *)v11 + 1) = 0u;
          float32x4_t v11[3] = *(void *)(v8 + 24);
          uint64_t v12 = *(void *)(v8 + 8);
          *int v11 = *(void *)v8;
          *(void *)uint64_t v8 = 0;
          uint64_t v13 = *(void *)(v8 + 16);
          *(void *)(v8 + 24) = 0;
          uint64_t v15 = v11[1];
          uint64_t v14 = v11[2];
          v11[1] = v12;
          uint64_t v11[2] = v13;
          *(void *)(v8 + 8) = v15;
          *(void *)(v8 + 16) = v14;
          *((_DWORD *)v11 + 16) = 0;
          *((_OWORD *)v11 + 3) = 0u;
          *((_OWORD *)v11 + 2) = 0u;
          *(void *)((char *)v11 + 68) = 0x7FFFFFFFLL;
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap(v11 + 4, (uint64_t *)(v8 + 32));
          *((_OWORD *)v11 + 5) = 0u;
          uint64_t v16 = v11 + 10;
          *((_DWORD *)v16 + 8) = 0;
          *((_OWORD *)v16 + 1) = 0u;
          *(void *)((char *)v16 + 36) = 0x7FFFFFFFLL;
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap(v16, (uint64_t *)(v8 + 80));
          *((unsigned char *)v16 + 48) = *(unsigned char *)(v8 + 128);
          re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v8 + 80));
          re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v8 + 32));
          re::DynamicString::deinit((re::DynamicString *)v8);
          v8 += 136;
          int v11 = v16 + 7;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::DynamicArray<re::PSOToolTileDescriptor>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::PSOToolTileDescriptor>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::PSOToolTileDescriptor>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::PSOToolTileDescriptor>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::PSOToolTileDescriptor>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xB0uLL))
        {
          uint64_t v2 = 176 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 176 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 176, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 176 * v9;
        int v11 = v7;
        do
        {
          *(_OWORD *)int v11 = 0u;
          *((_OWORD *)v11 + 1) = 0u;
          float32x4_t v11[3] = *(void *)(v8 + 24);
          uint64_t v12 = *(void *)(v8 + 8);
          *int v11 = *(void *)v8;
          *(void *)uint64_t v8 = 0;
          uint64_t v13 = *(void *)(v8 + 16);
          *(void *)(v8 + 24) = 0;
          uint64_t v15 = v11[1];
          uint64_t v14 = v11[2];
          v11[1] = v12;
          uint64_t v11[2] = v13;
          *(void *)(v8 + 8) = v15;
          *(void *)(v8 + 16) = v14;
          *((_DWORD *)v11 + 16) = 0;
          *((_OWORD *)v11 + 3) = 0u;
          *((_OWORD *)v11 + 2) = 0u;
          *(void *)((char *)v11 + 68) = 0x7FFFFFFFLL;
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap(v11 + 4, (uint64_t *)(v8 + 32));
          *((_OWORD *)v11 + 5) = 0u;
          uint64_t v16 = v11 + 10;
          *((_DWORD *)v16 + 8) = 0;
          *((_OWORD *)v16 + 1) = 0u;
          *(void *)((char *)v16 + 36) = 0x7FFFFFFFLL;
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap(v16, (uint64_t *)(v8 + 80));
          uint64_t v17 = *(void *)(v8 + 128);
          v16[11] = 0;
          *((_DWORD *)v16 + 2ArcSharedObject::ArcSharedObject(this, 0) = 0;
          unsigned char v16[8] = 0;
          v16[9] = 0;
          v16[6] = v17;
          v16[7] = 0;
          uint64_t v18 = *(void *)(v8 + 144);
          v16[7] = *(void *)(v8 + 136);
          *(void *)(v8 + 136) = 0;
          unsigned char v16[8] = v18;
          *(void *)(v8 + 144) = 0;
          uint64_t v19 = v16[9];
          v16[9] = *(void *)(v8 + 152);
          *(void *)(v8 + 152) = v19;
          uint64_t v20 = v16[11];
          v16[11] = *(void *)(v8 + 168);
          *(void *)(v8 + 168) = v20;
          ++*(_DWORD *)(v8 + 160);
          ++*((_DWORD *)v16 + 20);
          re::DynamicArray<unsigned long>::deinit(v8 + 136);
          re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v8 + 80));
          re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v8 + 32));
          re::DynamicString::deinit((re::DynamicString *)v8);
          v8 += 176;
          int v11 = v16 + 12;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::DynamicArray<re::PSOToolCustomClearDescriptor>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::PSOToolCustomClearDescriptor>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::PSOToolCustomClearDescriptor>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::PSOToolCustomClearDescriptor>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::PSOToolCustomClearDescriptor>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x60uLL))
        {
          uint64_t v2 = 96 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 96 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 96, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        unint64_t v10 = 0;
        uint64_t v11 = v8 + 96 * v9;
        do
        {
          uint64_t v12 = v8 + v10;
          uint64_t v13 = &v7[v10 / 8];
          uint64_t v13[4] = 0;
          v13[1] = 0;
          uint64_t v13[2] = 0;
          *uint64_t v13 = 0;
          *((_DWORD *)v13 + 6) = 0;
          uint64_t v14 = *(void *)(v8 + v10 + 8);
          *uint64_t v13 = *(void *)(v8 + v10);
          v13[1] = v14;
          *(void *)uint64_t v12 = 0;
          *(void *)(v12 + 8) = 0;
          uint64_t v15 = v7[v10 / 8 + 2];
          uint64_t v13[2] = *(void *)(v8 + v10 + 16);
          *(void *)(v12 + 16) = v15;
          uint64_t v16 = v7[v10 / 8 + 4];
          uint64_t v13[4] = *(void *)(v8 + v10 + 32);
          *(void *)(v12 + 32) = v16;
          *(_DWORD *)(v12 + 24) = *(_DWORD *)(v8 + v10 + 24) + 1;
          *((_DWORD *)v13 + 6) = LODWORD(v7[v10 / 8 + 3]) + 1;
          v13[9] = 0;
          void v13[6] = 0;
          v13[7] = 0;
          _OWORD v13[5] = 0;
          *((_DWORD *)v13 + 16) = 0;
          uint64_t v17 = (void *)(v8 + v10 + 40);
          uint64_t v18 = *(void *)(v8 + v10 + 48);
          _OWORD v13[5] = *v17;
          *uint64_t v17 = 0;
          void v13[6] = v18;
          *(void *)(v12 + 48) = 0;
          uint64_t v19 = v7[v10 / 8 + 7];
          v13[7] = *(void *)(v8 + v10 + 56);
          *(void *)(v12 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56) = v19;
          uint64_t v20 = v7[v10 / 8 + 9];
          v13[9] = *(void *)(v8 + v10 + 72);
          *(void *)(v12 + 72) = v20;
          *(_DWORD *)(v12 + 64) = *(_DWORD *)(v8 + v10 + 64) + 1;
          *((_DWORD *)v13 + 16) = LODWORD(v7[v10 / 8 + 8]) + 1;
          *((_OWORD *)v13 + 5) = *(_OWORD *)(v8 + v10 + 80);
          re::DynamicArray<unsigned long>::deinit((uint64_t)v17);
          re::DynamicArray<unsigned long>::deinit(v8 + v10);
          v10 += 96;
        }
        while (v12 + 96 != v11);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::RenderGraphCompiled::validateAttachmentsDuringGraphBuild(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 392);
  if (v2)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(unsigned int **)(result + 408);
    uint64_t v6 = &v5[v2];
    while (1)
    {
      unint64_t v7 = *v5;
      if (*(void *)(v4 + 352) <= v7) {
        goto LABEL_11;
      }
      uint64_t v8 = *(void *)(v4 + 368);
      uint64_t v9 = v8 + 192 * v7;
      uint64_t v10 = *(void *)(v9 + 136);
      if (v10) {
        break;
      }
LABEL_8:
      if (++v5 == v6) {
        return result;
      }
    }
    uint64_t v11 = *(void **)(v9 + 152);
    uint64_t v12 = v8 + 192 * v7;
    uint64_t v13 = 8 * v10;
    while (*(void *)(v12 + 16) > *v11)
    {
      uint64_t v14 = *(void *)(*(void *)(v12 + 32) + 8 * *v11);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 40))(v14, v4, a2);
      ++v11;
      v13 -= 8;
      if (!v13) {
        goto LABEL_8;
      }
    }
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_11:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return result;
}

uint64_t re::RenderFrameData::RenderFrameData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 36) = 0x7FFFFFFFLL;
  *(void *)(a1 + 48) = a2;
  *(void *)(a1 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56) = 0;
  re::HashTable<re::WeakStringID,re::RenderFrameDataStream,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init(a1, a3, 3);
  uint64_t v5 = *(void *)(a1 + 48);
  if (v5) {
    *(void *)(a1 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, a3);
  }
  return a1;
}

void re::HashTable<re::WeakStringID,re::RenderFrameDataStream,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 72 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_17, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::RenderFrameData::~RenderFrameData(re::RenderFrameData *this)
{
  uint64_t v2 = (void (***)(void))*((void *)this + 7);
  if (v2)
  {
    uint64_t v3 = re::globalAllocators(this)[2];
    (**v2)(v2);
    (*(void (**)(uint64_t, void (***)(void)))(*(void *)v3 + 40))(v3, v2);
    *((void *)this + 7) = 0;
  }
  re::HashTable<re::WeakStringID,re::RenderFrameDataStream,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t)this);
}

uint64_t re::RenderFrameData::stream(re::RenderFrameData *this, const re::WeakStringID *a2)
{
  uint64_t v4 = re::HashTable<re::WeakStringID,re::RenderFrameDataStream,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet((uint64_t)this, (uint64_t *)a2);
  if (!v4)
  {
    uint64_t v6 = (*(uint64_t (**)(void, void))(**((void **)this + 6) + 16))(*((void *)this + 6), *(void *)(*((void *)this + 7) + 8));
    uint64_t v4 = re::HashTable<re::WeakStringID,re::RenderFrameDataStream,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addNew<re::RenderGraphDataPipe *>((uint64_t)this, (uint64_t *)a2, &v6);
    re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::init(v4, *(void *)(*((void *)this + 7) + 8), 3);
  }
  return v4;
}

uint64_t re::HashTable<re::WeakStringID,re::RenderFrameDataStream,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *a2;
  unint64_t v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(void *)(v6 + 72 * v4 + 8) != v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 72 * v4) & 0x7FFFFFFF;
      if (v4 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v6 + 72 * v4 + 8) == v2) {
        return v6 + 72 * v4 + 16;
      }
    }
    return 0;
  }
  return v6 + 72 * v4 + 16;
}

uint64_t re::HashTable<re::WeakStringID,re::RenderFrameDataStream,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addNew<re::RenderGraphDataPipe *>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<re::WeakStringID,re::RenderFrameDataStream,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addEmplace<re::RenderGraphDataPipe *>(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 72 * v13;
    return v12 + 16;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 72 * v10 + 8) != v6)
  {
    LODWORD(v1ArcSharedObject::ArcSharedObject(this, 0) = *(_DWORD *)(v11 + 72 * v10) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 72 * v10;
  return v12 + 16;
}

double re::HashTable<re::WeakStringID,re::RenderFrameDataStream,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(uint64_t a1)
{
  uint64_t v2 = *(re **)a1;
  if (v2)
  {
    unint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = *(void *)(a1 + 16);
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          uint64_t v8 = v6 + v4;
          *(_DWORD *)uint64_t v8 = v7 & 0x7FFFFFFF;
          *(void *)(v8 + 8) = 0;
          unint64_t v9 = *(void (****)(void))(v6 + v4 + 64);
          if (v9)
          {
            uint64_t v10 = re::globalAllocators(v2)[2];
            (**v9)(v9);
            (*(void (**)(uint64_t, void (***)(void)))(*(void *)v10 + 40))(v10, v9);
            *(void *)(v8 + 64) = 0;
          }
          re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::deinit((uint64_t *)(v8 + 16));
          unint64_t v3 = *(unsigned int *)(a1 + 32);
        }
        v4 += 72;
      }
      uint64_t v2 = *(re **)a1;
    }
    (*(void (**)(re *, void))(*(void *)v2 + 40))(v2, *(void *)(a1 + 8));
    *(_DWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(void *)(a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<re::WeakStringID,re::RenderFrameDataStream,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addEmplace<re::RenderGraphDataPipe *>(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t *a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::WeakStringID,re::RenderFrameDataStream,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 72 * v8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 72 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  uint64_t v13 = 72 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v13) = *(_DWORD *)(*(void *)(a1 + 16) + 72 * v8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 72 * v8 + 8) = *a4;
  uint64_t v14 = *(void *)(a1 + 16) + 72 * v8;
  uint64_t v15 = *a5;
  *(_DWORD *)(v14 + 48) = 0;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(void *)(v14 + 52) = 0x7FFFFFFFLL;
  *(void *)(v14 + 64) = v15;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashTable<re::WeakStringID,re::RenderFrameDataStream,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v32, 0, 36);
      *(void *)&v32[36] = 0x7FFFFFFFLL;
      re::HashTable<re::WeakStringID,re::RenderFrameDataStream,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init((uint64_t)v32, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v32;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v32[8];
      *(_OWORD *)uint64_t v32 = v5;
      *(void *)&v32[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v32[24];
      *(_OWORD *)&v32[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v32[32];
      *(_OWORD *)(a1 + 24) = v9;
      unsigned int v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        uint64_t v14 = 64;
        do
        {
          uint64_t v15 = *(void *)&v32[16];
          uint64_t v16 = *(void *)&v32[16] + v14;
          if ((*(_DWORD *)(*(void *)&v32[16] + v14 - 64) & 0x80000000) != 0)
          {
            unint64_t v17 = *(void *)(v16 - 56);
            unint64_t v18 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v17 ^ (v17 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v17 ^ (v17 >> 30))) >> 27));
            unint64_t v19 = v18 ^ (v18 >> 31);
            unint64_t v20 = *(unsigned int *)(a1 + 24);
            unint64_t v21 = v19 % v20;
            uint64_t v22 = *(unsigned int *)(a1 + 36);
            if (v22 == 0x7FFFFFFF)
            {
              uint64_t v22 = *(unsigned int *)(a1 + 32);
              int v23 = v22;
              if (v22 == v20)
              {
                re::HashTable<re::WeakStringID,re::RenderFrameDataStream,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(a1, (2 * v12));
                unint64_t v21 = v19 % *(unsigned int *)(a1 + 24);
                int v23 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
                unint64_t v17 = *(void *)(v16 - 56);
              }
              *(_DWORD *)(a1 + 32) = v23 + 1;
              uint64_t v24 = *(void *)(a1 + 16);
              int v25 = *(_DWORD *)(v24 + 72 * v22);
            }
            else
            {
              uint64_t v24 = *(void *)(a1 + 16);
              int v25 = *(_DWORD *)(v24 + 72 * v22);
              *(_DWORD *)(a1 + 36) = v25 & 0x7FFFFFFF;
            }
            uint64_t v26 = 72 * v22;
            *(_DWORD *)(v24 + v26) = v25 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + v26) = *(_DWORD *)(*(void *)(a1 + 16) + 72 * v22) & 0x80000000 | *(_DWORD *)(v13 + 4 * v21);
            *(void *)(*(void *)(a1 + 16) + 72 * v22 + 8) = v17;
            uint64_t v27 = *(void *)(a1 + 16) + 72 * v22;
            *(_DWORD *)(v27 + 48) = 0;
            *(_OWORD *)(v27 + 16) = 0u;
            *(_OWORD *)(v27 + 32) = 0u;
            *(void *)(v27 + 52) = 0x7FFFFFFFLL;
            *(void *)(v27 + 16) = *(void *)(v16 - 48);
            *(void *)(v16 - 48) = 0;
            uint64_t v28 = (void *)(v15 + v14);
            uint64_t v29 = *(void *)(v27 + 24);
            *(void *)(v27 + 24) = *(void *)(v15 + v14 - 40);
            *(v28 - 5) = v29;
            uint64_t v30 = *(void *)(v27 + 32);
            *(void *)(v27 + 32) = *(void *)(v15 + v14 - 32);
            *(v28 - 4) = v30;
            LODWORD(v3ArcSharedObject::ArcSharedObject(this, 0) = *(_DWORD *)(v27 + 40);
            *(_DWORD *)(v27 + 4ArcSharedObject::ArcSharedObject(this, 0) = *(_DWORD *)(v15 + v14 - 24);
            *((_DWORD *)v28 - 6) = v30;
            LODWORD(v3ArcSharedObject::ArcSharedObject(this, 0) = *(_DWORD *)(v27 + 44);
            *(_DWORD *)(v27 + 44) = *(_DWORD *)(v15 + v14 - 20);
            *((_DWORD *)v28 - 5) = v30;
            LODWORD(v3ArcSharedObject::ArcSharedObject(this, 0) = *(_DWORD *)(v27 + 48);
            *(_DWORD *)(v27 + 48) = *(_DWORD *)(v15 + v14 - 16);
            *((_DWORD *)v28 - 4) = v30;
            LODWORD(v3ArcSharedObject::ArcSharedObject(this, 0) = *(_DWORD *)(v27 + 52);
            *(_DWORD *)(v27 + 52) = *(_DWORD *)(v15 + v14 - 12);
            *((_DWORD *)v28 - 3) = v30;
            *(void *)(v27 + 64) = 0;
            *(void *)(v27 + 64) = *(void *)(v15 + v14);
            *uint64_t v28 = 0;
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v21) = v22;
            int v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
            unsigned int v10 = *(_DWORD *)&v32[32];
          }
          ++v11;
          v14 += 72;
        }
        while (v11 < v10);
      }
      re::HashTable<re::WeakStringID,re::RenderFrameDataStream,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t)v32);
    }
  }
  else
  {
    if (a2) {
      signed int v31 = a2;
    }
    else {
      signed int v31 = 3;
    }
  }
}

uint64_t re::makeDepthPixelFormatPredictions@<X0>(uint64_t a1@<X8>)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 36) = 0x7FFFFFFFLL;
  MurmurHash3_x64_128((uint64_t)"Shadow", 6, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 252;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"FullScreen", 10, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"arKitPassthrough", 16, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"arProjectiveShadow", 18, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueDepth", 18, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueRadial", 19, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueDistance", 21, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniquePrecomputed", 24, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniquePrecomputedYUp", 27, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueBox", 16, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueCheckered", 22, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueOpenSky", 20, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueOpenSkyCrossfade", 29, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"OnlyPlattersWithDepthVS", 23, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 260;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"PlanarBreakthroughMask", 22, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"PlanarBreakthroughMaskProgrammableBlending", 42, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"ClippedPlanarBreakthroughMask", 29, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"ClippedPlanarBreakthroughMaskProgrammableBlending", 49, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"CircularBreakthroughMask", 24, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"CircularBreakthroughMaskProgrammableBlending", 44, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"InstancedOcclusionOnlyDepthAsColor", 34, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 250;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"DepthColorClear", 15, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 250;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"ShadowClear", 11, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 250;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"meshShadowCasterProgrammableBlending", 36, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 250;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"meshShadowCaster", 16, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 250;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"SurfaceShaderMeshShadowCasterProgrammableBlending", 49, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 250;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"SurfaceShaderMeshShadowCaster", 29, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 250;
  return re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
}

uint64_t re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(uint64_t result, uint64_t *a2, _DWORD *a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (*(void *)result)
  {
    unint64_t v9 = v8 % *(unsigned int *)(result + 24);
    uint64_t v10 = *(unsigned int *)(*(void *)(result + 8) + 4 * v9);
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v11 = *(void *)(result + 16);
      if (*(void *)(v11 + 32 * v10 + 16) == v6) {
        return result;
      }
      while (1)
      {
        uint64_t v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v11 + 32 * v10 + 16) == v6) {
          return result;
        }
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  double result = re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(result, v9, v8, a2, a3);
  ++*(_DWORD *)(v5 + 40);
  return result;
}

uint64_t re::makeStencilPixelFormatPredictions@<X0>(uint64_t a1@<X8>)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 36) = 0x7FFFFFFFLL;
  MurmurHash3_x64_128((uint64_t)"Shadow", 6, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"FullScreen", 10, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"arKitPassthrough", 16, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"arProjectiveShadow", 18, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueDepth", 18, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueRadial", 19, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueDistance", 21, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniquePrecomputed", 24, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniquePrecomputedYUp", 27, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueBox", 16, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueCheckered", 22, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueOpenSky", 20, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueOpenSkyCrossfade", 29, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"OnlyPlattersWithDepthVS", 23, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 260;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"PlanarBreakthroughMask", 22, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"PlanarBreakthroughMaskProgrammableBlending", 42, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"ClippedPlanarBreakthroughMask", 29, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"ClippedPlanarBreakthroughMaskProgrammableBlending", 49, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"CircularBreakthroughMask", 24, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"CircularBreakthroughMaskProgrammableBlending", 44, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"InstancedOcclusionOnlyDepthAsColor", 34, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"DepthColorClear", 15, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"ShadowClear", 11, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"meshShadowCasterProgrammableBlending", 36, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"meshShadowCaster", 16, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"SurfaceShaderMeshShadowCasterProgrammableBlending", 49, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"SurfaceShaderMeshShadowCaster", 29, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  return re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
}

uint64_t re::makeSampleCountPredictions@<X0>(uint64_t a1@<X8>)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 36) = 0x7FFFFFFFLL;
  MurmurHash3_x64_128((uint64_t)"Shadow", 6, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"FullScreen", 10, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"arKitPassthrough", 16, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"arProjectiveShadow", 18, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueDepth", 18, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueRadial", 19, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueDistance", 21, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniquePrecomputed", 24, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniquePrecomputedYUp", 27, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueBox", 16, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueCheckered", 22, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueOpenSky", 20, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueOpenSkyCrossfade", 29, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"OnlyPlattersWithDepthVS", 23, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 4;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"meshShadowCasterProgrammableBlending", 36, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"PlanarBreakthroughMask", 22, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"PlanarBreakthroughMaskProgrammableBlending", 42, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"ClippedPlanarBreakthroughMask", 29, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"ClippedPlanarBreakthroughMaskProgrammableBlending", 49, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"CircularBreakthroughMask", 24, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"CircularBreakthroughMaskProgrammableBlending", 44, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"meshShadowCaster", 16, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"InstancedOcclusionOnly", 22, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"InstancedOcclusionOnlyDepthAsColor", 34, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"ShadowClear", 11, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"DepthColorClear", 15, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"meshShadowCasterProgrammableBlending", 36, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"meshShadowCaster", 16, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"SurfaceShaderMeshShadowCasterProgrammableBlending", 49, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"SurfaceShaderMeshShadowCaster", 29, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"ClearDepth", 10, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"RenderLinearizedDepthSU", 23, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"RenderLinearizedDepthContent", 28, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"RenderLinearizedDepthEnvironment", 32, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 1;
  re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"SurfaceShaderLinearizedDepth", 28, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 1;
  return re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(a1, (uint64_t *)&v5, &v4);
}

uint64_t re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<int>(uint64_t result, uint64_t *a2, _DWORD *a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (*(void *)result)
  {
    unint64_t v9 = v8 % *(unsigned int *)(result + 24);
    uint64_t v10 = *(unsigned int *)(*(void *)(result + 8) + 4 * v9);
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v11 = *(void *)(result + 16);
      if (*(void *)(v11 + 32 * v10 + 16) == v6) {
        return result;
      }
      while (1)
      {
        uint64_t v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v11 + 32 * v10 + 16) == v6) {
          return result;
        }
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  double result = re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addEmplace<int>(result, v9, v8, a2, a3);
  ++*(_DWORD *)(v5 + 40);
  return result;
}

uint64_t re::makePixel0FormatsPredictions@<X0>(uint64_t a1@<X8>)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 36) = 0x7FFFFFFFLL;
  MurmurHash3_x64_128((uint64_t)"Shadow", 6, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 0;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"FullScreen", 10, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 553;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"arKitPassthrough", 16, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 553;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"arProjectiveShadow", 18, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 10;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueDepth", 18, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 20;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueRadial", 19, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 20;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueDistance", 21, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 20;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniquePrecomputed", 24, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 20;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniquePrecomputedYUp", 27, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 20;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueBox", 16, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 20;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueCheckered", 22, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 20;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueOpenSky", 20, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 20;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"MaskTechniqueOpenSkyCrossfade", 29, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 20;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"PlanarBreakthroughMask", 22, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 20;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"PlanarBreakthroughMaskProgrammableBlending", 42, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 20;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"ClippedPlanarBreakthroughMask", 29, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 20;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"ClippedPlanarBreakthroughMaskProgrammableBlending", 49, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 20;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"CircularBreakthroughMask", 24, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 20;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"CircularBreakthroughMaskProgrammableBlending", 44, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 20;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"InstancedOcclusionOnlyDepthAsColor", 34, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 10;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"DepthColorClear", 15, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 10;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"ShadowClear", 11, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 10;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"meshShadowCasterProgrammableBlending", 36, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 10;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"meshShadowCaster", 16, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 10;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"SurfaceShaderMeshShadowCasterProgrammableBlending", 49, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 10;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"SurfaceShaderMeshShadowCaster", 29, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 10;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"ClearDepth", 10, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 25;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"RenderLinearizedDepthSU", 23, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 25;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"RenderLinearizedDepthContent", 28, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 25;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"RenderLinearizedDepthEnvironment", 32, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 25;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"SurfaceShaderLinearizedDepth", 28, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 25;
  return re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
}

uint64_t re::makePixel1FormatsPredictions@<X0>(uint64_t a1@<X8>)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 36) = 0x7FFFFFFFLL;
  MurmurHash3_x64_128((uint64_t)"InstancedOcclusionOnlyDepthAsColor", 34, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 60;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"DepthColorClear", 15, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 60;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"ShadowClear", 11, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 60;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"meshShadowCasterProgrammableBlending", 36, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 60;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"meshShadowCaster", 16, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 60;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"SurfaceShaderMeshShadowCasterProgrammableBlending", 49, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 60;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"SurfaceShaderMeshShadowCaster", 29, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 60;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"ClearDepth", 10, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 65;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"RenderLinearizedDepthSU", 23, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 65;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"RenderLinearizedDepthContent", 28, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 65;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"RenderLinearizedDepthEnvironment", 32, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 65;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"SurfaceShaderLinearizedDepth", 28, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 65;
  return re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
}

uint64_t re::makePixel2FormatsPredictions@<X0>(uint64_t a1@<X8>)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 36) = 0x7FFFFFFFLL;
  MurmurHash3_x64_128((uint64_t)"ClearDepth", 10, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 115;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"RenderLinearizedDepthSU", 23, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 115;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"RenderLinearizedDepthContent", 28, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 115;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"RenderLinearizedDepthEnvironment", 32, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 115;
  re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
  MurmurHash3_x64_128((uint64_t)"SurfaceShaderLinearizedDepth", 28, 0, &v5);
  v5 ^= v6 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9;
  int v4 = 115;
  return re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(a1, (uint64_t *)&v5, &v4);
}

_DWORD *re::makeRenderTargetInfoPrediction@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  id v28[2] = *MEMORY[0x263EF8340];
  *(_OWORD *)(a9 + 8) = 0u;
  unint64_t v17 = (_DWORD *)(a9 + 8);
  *(_OWORD *)(a9 + 24) = 0u;
  if (a8) {
    int v18 = 252;
  }
  else {
    int v18 = 260;
  }
  if (a8) {
    int v19 = 253;
  }
  else {
    int v19 = 260;
  }
  *(_DWORD *)(a9 + 48) = 0;
  *(void *)(a9 + 37) = 0;
  *(void *)a9 = 0x7300000004;
  *(_DWORD *)(a9 + 36) = v18;
  *(_DWORD *)(a9 + 4ArcSharedObject::ArcSharedObject(this, 0) = v19;
  size_t v20 = strlen(a1);
  if (v20)
  {
    MurmurHash3_x64_128((uint64_t)a1, v20, 0, (unint64_t *)v28);
    unint64_t v21 = (v28[1] + (v28[0] << 6) + ((unint64_t)v28[0] >> 2) - 0x61C8864680B583E9) ^ v28[0];
  }
  else
  {
    unint64_t v21 = 0;
  }
  v28[0] = v21;
  uint64_t v22 = (_DWORD *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a2, v28);
  if (v22) {
    *(_DWORD *)(a9 + 36) = *v22;
  }
  int v23 = (_DWORD *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a3, v28);
  if (v23) {
    *(_DWORD *)(a9 + 4ArcSharedObject::ArcSharedObject(this, 0) = *v23;
  }
  uint64_t v24 = (_DWORD *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a4, v28);
  if (v24) {
    *(_DWORD *)a9 = *v24;
  }
  int v25 = (_DWORD *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a5, v28);
  if (v25) {
    *(_DWORD *)(a9 + 4) = *v25;
  }
  uint64_t v26 = (_DWORD *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a6, v28);
  if (v26) {
    *unint64_t v17 = *v26;
  }
  double result = (_DWORD *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a7, v28);
  if (result) {
    *(_DWORD *)(a9 + 12) = *result;
  }
  return result;
}

uint64_t re::getVertexFormatFromDataType(re *a1)
{
  int v1 = (int)a1;
  uint64_t v6 = *MEMORY[0x263EF8340];
  __int16 v2 = (_WORD)a1 - 3;
  if (a1 - 3) < 0x32 && ((0x3FFFFFC01E00FuLL >> v2)) {
    return byte_2343E6798[v2];
  }
  unint64_t v3 = *re::graphicsLogObjects(a1);
  uint64_t result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v5[0] = 67109120;
    v5[1] = v1;
    _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Missing mapping of MTLDataType %d to MTLVertexFormat for fallback rendering prediction.", (uint8_t *)v5, 8u);
    return 0;
  }
  return result;
}

void re::makeAttributeTablePrediction(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v80 = *MEMORY[0x263EF8340];
  int v47 = 0;
  memset(&v46[32], 0, 32);
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v48 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  memset(v46, 0, 28);
  int v51 = 1;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v52 = 0;
  int v55 = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  int v59 = 0;
  uint64_t v58 = 0;
  uint64_t v63 = 0;
  int v64 = 0;
  long long v60 = 0u;
  long long v61 = 0u;
  int v62 = 0;
  char v65 = 0;
  unint64_t v7 = *((void *)a1 + 1);
  char v65 = 1;
  if (*((void *)a1 + 1))
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *((void *)a1 + 2) + 24 * v8;
      re::HashTable<re::StringID,re::mtl::DataType,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::HashTable((uint64_t)&v36, a2);
      re::HashTable<re::StringID,re::mtl::VertexStepFunction,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::HashTable((uint64_t)&v32, a3);
      uint64_t v10 = (re *)*(unsigned __int16 *)(v9 + 18);
      if (v36)
      {
        unint64_t v11 = 0xBF58476D1CE4E5B9 * ((*(void *)v9 >> 31) ^ (*(void *)v9 >> 1));
        unint64_t v12 = (0x94D049BB133111EBLL * (v11 ^ (v11 >> 27))) ^ ((0x94D049BB133111EBLL * (v11 ^ (v11 >> 27))) >> 31);
        uint64_t v13 = *(unsigned int *)(v37 + 4 * (v12 % v39));
        if (v13 != 0x7FFFFFFF)
        {
          uint64_t v14 = v38;
          uint64_t v15 = *(unsigned int *)(v37 + 4 * (v12 % v39));
          while (!re::StringID::operator==((void *)(v14 + 32 * v15 + 8), (void *)v9))
          {
            uint64_t v15 = *(_DWORD *)(v14 + 32 * v15) & 0x7FFFFFFF;
            if (v15 == 0x7FFFFFFF) {
              goto LABEL_14;
            }
          }
          while (!re::StringID::operator==((void *)(v14 + 32 * v13 + 8), (void *)v9))
          {
            uint64_t v13 = *(_DWORD *)(v14 + 32 * v13) & 0x7FFFFFFF;
            uint64_t v16 = 0x7FFFFFFFLL;
            if (v13 == 0x7FFFFFFF) {
              goto LABEL_13;
            }
          }
          uint64_t v16 = v13;
LABEL_13:
          uint64_t v10 = (re *)*(unsigned __int16 *)(v14 + 32 * v16 + 24);
        }
      }
LABEL_14:
      if (v32
        && (unint64_t v17 = 0xBF58476D1CE4E5B9 * ((*(void *)v9 >> 31) ^ (*(void *)v9 >> 1)),
            unint64_t v18 = ((0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) ^ ((0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) >> 31))
                % v35,
            uint64_t v19 = *(unsigned int *)(v33 + 4 * v18),
            v19 != 0x7FFFFFFF))
      {
        uint64_t v21 = v34;
        uint64_t v22 = *(unsigned int *)(v33 + 4 * v18);
        while (!re::StringID::operator==((void *)(v21 + 32 * v22 + 8), (void *)v9))
        {
          uint64_t v22 = *(_DWORD *)(v21 + 32 * v22) & 0x7FFFFFFF;
          if (v22 == 0x7FFFFFFF)
          {
            char v20 = 1;
            goto LABEL_26;
          }
        }
        while (!re::StringID::operator==((void *)(v21 + 32 * v19 + 8), (void *)v9))
        {
          uint64_t v19 = *(_DWORD *)(v21 + 32 * v19) & 0x7FFFFFFF;
          uint64_t v23 = 0x7FFFFFFFLL;
          if (v19 == 0x7FFFFFFF) {
            goto LABEL_25;
          }
        }
        uint64_t v23 = v19;
LABEL_25:
        char v20 = *(unsigned char *)(v21 + 32 * v23 + 24);
      }
      else
      {
        char v20 = 1;
      }
LABEL_26:
      unsigned int VertexFormatFromDataType = re::getVertexFormatFromDataType(v10);
      char v25 = VertexFormatFromDataType;
      __int16 v27 = re::sizeFromVertexFormat(VertexFormatFromDataType, v26);
      uint64_t v28 = v41;
      if ((unint64_t)v41 <= v8)
      {
        uint64_t v66 = 0;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v75 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v67 = 136315906;
        BOOL v68 = "operator[]";
        __int16 v69 = 1024;
        int v70 = 468;
        __int16 v71 = 2048;
        unint64_t v72 = v8;
        __int16 v73 = 2048;
        uint64_t v74 = v28;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      __int16 v29 = (v27 + 3) & 0x1FC;
      if (!v20) {
        __int16 v29 = v27;
      }
      uint64_t v30 = *((void *)&v41 + 1) + 16 * v8;
      *(_WORD *)uint64_t v30 = v29;
      *(_WORD *)(v30 + 2) = v20 != 0;
      *(unsigned char *)(v30 + 4) = 1;
      *(unsigned char *)(v30 + 5) = v20;
      *(_DWORD *)(v30 + 8) = 0;
      *(unsigned char *)(v30 + 12) = v25;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(&v32);
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(&v36);
      ++v8;
    }
    while (*((void *)a1 + 1) > v8);
  }
  *(_DWORD *)(a4 + 176) = 0;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_OWORD *)(a4 + 16ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(void *)(a4 + 192) = 0;
  *(void *)(a4 + 20ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(a4 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 184) = 0;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 124) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_DWORD *)(a4 + 208) = 1;
  *(void *)(a4 + 224) = 0;
  *(void *)(a4 + 232) = 0;
  *(_DWORD *)(a4 + 24ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(a4 + 216) = 0;
  *(void *)(a4 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 248) = 0;
  *(void *)(a4 + 2re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56) = 0;
  *(_DWORD *)(a4 + 272) = 0;
  *(void *)(a4 + 264) = 0;
  *(void *)(a4 + 32ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(_DWORD *)(a4 + 328) = 0;
  *(_OWORD *)(a4 + 28ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(a4 + 296) = 0u;
  *(_DWORD *)(a4 + 312) = 0;
  re::AttributeTableBuilder::makeAttributeTable((re::AttributeTableBuilder *)&v40, (re::AttributeTable *)a4);
  re::AttributeTableBuilder::~AttributeTableBuilder((re::AttributeTableBuilder *)&v40);
}

unint64_t re::makeAttributeResolutionsPrediction@<X0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  a4[2] = 0;
  unint64_t v8 = *((void *)a1 + 1);
  a4[1] = v8;
  if (v8)
  {
    if (v8 >= 0x199999999999999ALL)
    {
LABEL_22:
      re::internal::assertLog((re::internal *)6, v9, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 10, v8, v25, v26);
      _os_crash();
      __break(1u);
LABEL_23:
      re::internal::assertLog((re::internal *)4, v11, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
    }
    a4[2] = result;
    if (!result) {
      goto LABEL_23;
    }
    unint64_t v12 = result;
    unint64_t v13 = result;
    unint64_t v14 = v8 - 1;
    if (v8 != 1)
    {
      unint64_t v13 = result;
      do
      {
        *(unsigned char *)(v13 + 8) = 0;
        *(void *)unint64_t v13 = 0;
        v13 += 10;
        --v14;
      }
      while (v14);
    }
    *(unsigned char *)(v13 + 8) = 0;
    *(void *)unint64_t v13 = 0;
  }
  else
  {
    unint64_t v12 = 0;
  }
  uint64_t v15 = 0;
  unint64_t v16 = *((void *)a1 + 1);
  long long v25 = 0u;
  long long v26 = 0u;
  do
  {
    *(long long *)((char *)&v25 + v15) = (__int128)vmvnq_s8(*(int8x16_t *)(a2 + v15));
    v15 += 16;
  }
  while (v15 != 32);
  if (v16)
  {
    unint64_t v17 = 0;
    unint64_t result = -1;
    unsigned int v18 = 1;
    while (1)
    {
      unint64_t result = re::Bitset<256>::findFirstBitSet((uint64_t)&v25, result + 1);
      unint64_t v19 = *((void *)a1 + 1);
      if (v19 <= v17) {
        break;
      }
      uint64_t v20 = *((void *)a1 + 2);
      if (a3) {
        __int16 v21 = *(_WORD *)(v20 + 24 * v17 + 18);
      }
      else {
        __int16 v21 = 0;
      }
      if (v8 <= v17) {
        goto LABEL_21;
      }
      __int16 v22 = *(_WORD *)(v20 + 24 * v17 + 16);
      unint64_t v23 = v12 + 10 * v17;
      *(_WORD *)unint64_t v23 = result;
      *(_WORD *)(v23 + 2) = v22;
      *(_WORD *)(v23 + 4) = v18 - 1;
      *(_WORD *)(v23 + 6) = v21;
      *(unsigned char *)(v23 + 8) = 0;
      unint64_t v17 = v18;
      if (v16 <= v18++) {
        return result;
      }
    }
    uint64_t v27 = 0;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v36 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v28 = 136315906;
    __int16 v29 = "operator[]";
    __int16 v30 = 1024;
    int v31 = 468;
    __int16 v32 = 2048;
    unint64_t v33 = v17;
    __int16 v34 = 2048;
    unint64_t v35 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_21:
    uint64_t v27 = 0;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v36 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v28 = 136315906;
    __int16 v29 = "operator[]";
    __int16 v30 = 1024;
    int v31 = 468;
    __int16 v32 = 2048;
    unint64_t v33 = v17;
    __int16 v34 = 2048;
    unint64_t v35 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_22;
  }
  return result;
}

uint64_t re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, _DWORD *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(void *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v28, v13, v12);
          long long v15 = *(_OWORD *)v28;
          *(_OWORD *)int v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v28[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v28[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v19;
          unint64_t v20 = v18;
          if (v18)
          {
            unint64_t v21 = 0;
            uint64_t v22 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0) {
                re::HashTable<unsigned long,re::mtl::PixelFormat,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(a1, *(void *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v22 - 16), v22, v22 + 8);
              }
              ++v21;
              v22 += 32;
            }
            while (v21 < v20);
          }
          re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v28);
        }
      }
      else
      {
        if (v12) {
          signed int v25 = 2 * v11;
        }
        else {
          signed int v25 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 32 * v9 + 8);
  }
  else
  {
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 32 * v9 + 8) = v24 | 0x80000000;
  uint64_t v26 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(v26 + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 32 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v26 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addEmplace<int>(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, _DWORD *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  uint64_t v13 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 32 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v13 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addEmplace<int>(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), (void *)(*(void *)&v13[16] + v10 + 16), (_DWORD *)(*(void *)&v13[16] + v10 + 24));
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

void **re::PrepareSimplifiedMeshBuffer::init(void **this, re::RenderManager *a2)
{
  if (!*((unsigned char *)this + 336))
  {
    unint64_t v3 = this;
    *((unsigned char *)this + 336) = 1;
    v5[0] = 0;
    uint64_t v11 = 0;
    memset(v9, 0, sizeof(v9));
    int v10 = 0;
    char v12 = 0;
    char v13 = 0;
    uint64_t v14 = 0;
    char v15 = 0;
    ComputePipelineState = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)v5);
    NS::SharedPtr<MTL::Texture>::operator=(v3 + 41, ComputePipelineState);
    *((unsigned char *)v3 + 337) = 1;
    re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v9);
    this = (void **)v8[0];
    if (v8[0])
    {
      if (v8[1]) {
        this = (void **)(*(uint64_t (**)(void))(*(void *)v8[0] + 40))();
      }
      memset(v8, 0, sizeof(v8));
    }
    if (v5[0])
    {
      this = v6;
      if (v6)
      {
        if (v7) {
          return (void **)(*((uint64_t (**)(void))*v6 + 5))();
        }
      }
    }
  }
  return this;
}

double re::PrepareSimplifiedMeshBuffer::addDeformationInstance@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xFFFFFFFFLL;
  *(void *)&double result = 1572864;
  *(_OWORD *)(a1 + 8) = xmmword_2343E67D0;
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = -1;
  *(void *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56) = 0;
  return result;
}

unint64_t *re::PrepareSimplifiedMeshBuffer::allocateBuffers(_anonymous_namespace_ *a1, re::FrameContext *a2, uint64_t a3, uint64_t *a4, uint64_t a5, _anonymous_namespace_ *a6)
{
  uint64_t v200 = *MEMORY[0x263EF8340];
  uint64_t v8 = *a4;
  int v9 = *(_DWORD *)(*a4 + 48);
  unsigned int v184 = 0;
  long long v182 = 0u;
  long long v183 = 0u;
  uint64_t v185 = 0x7FFFFFFFLL;
  signed int v10 = 2 * v9;
  uint64_t v177 = *(void *)(v8 + 48);
  if (v177)
  {
    unint64_t v12 = 0;
    unint64_t v171 = 0;
    uint64_t v174 = v8 + 8;
    unint64_t v6 = 72;
    while (1)
    {
      unint64_t v13 = *(void *)(re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v174, v12) + 8);
      uint64_t v11 = (void *)re::BucketArray<re::ActiveDeformation,8ul>::operator[](a4[1], v13);
      unint64_t v14 = *(void *)(v11[44] + 88);
      if (!v14) {
        goto LABEL_34;
      }
      char v15 = v11;
      long long v196 = 0u;
      long long v197 = 0u;
      __n128 v195 = 0u;
      unint64_t v16 = *(void *)(v14 + 8);
      DWORD1(v197) = 0x7FFFFFFF;
      unint64_t v17 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v16 ^ (v16 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v16 ^ (v16 >> 30))) >> 27));
      unint64_t v18 = v17 ^ (v17 >> 31);
      if (!(void)v182) {
        break;
      }
      unint64_t v19 = v18 % DWORD2(v183);
      uint64_t v20 = *(unsigned int *)(*((void *)&v182 + 1) + 4 * v19);
      if (v20 == 0x7FFFFFFF) {
        goto LABEL_10;
      }
      while (*(void *)(v183 + 72 * v20 + 16) != v16)
      {
        LODWORD(v2ArcSharedObject::ArcSharedObject(this, 0) = *(_DWORD *)(v183 + 72 * v20 + 8) & 0x7FFFFFFF;
        if (v20 == 0x7FFFFFFF) {
          goto LABEL_10;
        }
      }
      uint64_t v22 = v183 + 72 * v20;
LABEL_12:
      unint64_t v6 = v22 + 24;
      uint64_t v11 = re::HashTable<re::Matrix4x4<float> const*,re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::MeshPartsState,re::Hash<re::Matrix4x4<float> const*>,re::EqualTo<re::Matrix4x4<float> const*>,true,false>::~HashTable((uint64_t *)&v195);
      __n128 v195 = 0uLL;
      *(void *)&long long v196 = 0;
      unint64_t v23 = 0xBF58476D1CE4E5B9 * (*(void *)v14 ^ (*(void *)v14 >> 30));
      unint64_t v24 = (0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) ^ ((0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) >> 31);
      if (*(void *)v6)
      {
        unint64_t v25 = v24 % *(unsigned int *)(v6 + 24);
        uint64_t v26 = *(unsigned int *)(*(void *)(v6 + 8) + 4 * v25);
        if (v26 != 0x7FFFFFFF)
        {
          uint64_t v27 = *(void *)(v6 + 16);
          while (*(void *)(v27 + 48 * v26 + 16) != *(void *)v14)
          {
            LODWORD(v26) = *(_DWORD *)(v27 + 48 * v26 + 8) & 0x7FFFFFFF;
            if (v26 == 0x7FFFFFFF) {
              goto LABEL_19;
            }
          }
          __int16 v29 = (void *)(v27 + 48 * v26 + 24);
          goto LABEL_23;
        }
      }
      else
      {
        LODWORD(v25) = 0;
      }
LABEL_19:
      unsigned int v28 = re::HashTable<re::Matrix4x4<float> const*,re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::MeshPartsState,re::Hash<re::Matrix4x4<float> const*>,re::EqualTo<re::Matrix4x4<float> const*>,true,false>::addAsMove(v6, v25, v24, (void *)v14, &v195);
      ++*(_DWORD *)(v6 + 40);
      __int16 v29 = (void *)(*(void *)(v6 + 16) + 48 * v28 + 24);
      uint64_t v11 = (void *)v195.n128_u64[0];
      if (v195.n128_u64[0] && v195.n128_u64[1]) {
        uint64_t v11 = (void *)(*(uint64_t (**)(unint64_t, void))(*(void *)v195.n128_u64[0] + 40))(v195.n128_u64[0], v196);
      }
LABEL_23:
      unint64_t v30 = *(void *)(v14 + 16);
      if (v29[1] == v30
        || (++v171,
            (v29[1] = v30) == 0))
      {
        unint64_t v30 = 0x94D049BB133111EBLL;
      }
      else
      {
        if (v30 >> 61) {
          goto LABEL_164;
        }
        unint64_t v6 = 8 * v30;
        void v29[2] = v11;
        if (!v11) {
          goto LABEL_165;
        }
        unint64_t v14 = (unint64_t)v11;
        if (v30 != 1)
        {
          v6 -= 8;
          bzero(v11, v6);
          v14 += v6;
        }
        unint64_t v30 = 0x94D049BB133111EBLL;
        *(void *)unint64_t v14 = 0;
      }
      unint64_t v31 = a4[6];
      if (v31 <= v13) {
        goto LABEL_162;
      }
      unint64_t v14 = *((unsigned __int16 *)v15 + 196);
      unint64_t v6 = v29[1];
      if (v6 <= v14) {
        goto LABEL_163;
      }
      *(void *)(v29[2] + 8 * v14) = a4[5] + 312 * v13;
      unint64_t v6 = 72;
LABEL_34:
      if (++v12 == v177) {
        goto LABEL_37;
      }
    }
    LODWORD(v19) = 0;
LABEL_10:
    unsigned int v21 = re::HashTable<unsigned long long,re::HashTable<re::Matrix4x4<float> const*,re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::MeshPartsState,re::Hash<re::Matrix4x4<float> const*>,re::EqualTo<re::Matrix4x4<float> const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)&v182, v19, v18, (void *)(v14 + 8), (uint64_t)&v195);
    ++HIDWORD(v185);
    uint64_t v22 = v183 + 72 * v21;
    goto LABEL_12;
  }
  unint64_t v171 = 0;
LABEL_37:
  *(void *)&v189[2] = 0;
  memset(&v187[8], 0, 20);
  uint64_t v32 = (uint64_t)re::DynamicArray<re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::SimplifiedMeshModel>::setCapacity(v187, v171);
  ++*(_DWORD *)&v187[24];
  if (v184)
  {
    unint64_t v33 = 0;
    __int16 v34 = (int *)(v183 + 8);
    while (1)
    {
      int v35 = *v34;
      v34 += 18;
      if (v35 < 0) {
        break;
      }
      if (v184 == ++v33)
      {
        unint64_t v33 = v184;
        break;
      }
    }
  }
  else
  {
    unint64_t v33 = 0;
  }
  if (v184 != v33)
  {
    unint64_t v36 = v33;
    unsigned int v168 = v184;
    unint64_t v6 = v183;
    do
    {
      unint64_t v37 = v6 + 72 * v36;
      unsigned int v39 = *(_DWORD *)(v37 + 56);
      long long v38 = (int *)(v37 + 56);
      unint64_t v13 = v39;
      if (v39)
      {
        uint64_t v40 = 0;
        uint64_t v41 = (int *)(*(void *)(v6 + 72 * v36 + 40) + 8);
        while (1)
        {
          int v42 = *v41;
          v41 += 12;
          if (v42 < 0) {
            break;
          }
          if (v13 == ++v40)
          {
            LODWORD(v4ArcSharedObject::ArcSharedObject(this, 0) = v13;
            break;
          }
        }
      }
      else
      {
        LODWORD(v4ArcSharedObject::ArcSharedObject(this, 0) = 0;
      }
      if (v13 != v40)
      {
        uint64_t v178 = (unint64_t *)(v38 - 10);
        uint64_t v43 = v40;
        unint64_t v44 = v6 + 72 * v36;
        long long v45 = (void *)(v44 + 40);
        char v172 = (unsigned int *)(v44 + 52);
        unint64_t v30 = -1;
        do
        {
          uint64_t v46 = (void *)(*v45 + 48 * v43);
          int v47 = v46 + 3;
          unint64_t v14 = v46[2];
          uint64_t v48 = v46[4];
          if (v48)
          {
            uint64_t v49 = v46[5];
            uint64_t v50 = 8 * v48;
            while ((*(unsigned char *)(*(void *)v49 + 2) & 0x20) == 0)
            {
              v49 += 8;
              v50 -= 8;
              if (!v50) {
                goto LABEL_57;
              }
            }
            v195.n128_u8[0] = 1;
            v195.n128_u64[1] = *v178;
            *(void *)&long long v196 = v47;
            *(void *)uint64_t v190 = v14;
            *(void *)&v190[8] = 1;
            re::DynamicArray<re::Matrix4x4<float>>::DynamicArray((uint64_t)&v196 + 8, (uint64_t)v190);
            __n128 v52 = re::DynamicArray<re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::SimplifiedMeshModel>::add((uint64_t)v187, &v195);
            uint64_t v32 = *((void *)&v196 + 1);
            if (*((void *)&v196 + 1) && *((void *)&v198 + 1)) {
              uint64_t v32 = (*(uint64_t (**)(void, __n128))(**((void **)&v196 + 1) + 40))(*((void *)&v196 + 1), v52);
            }
          }
          else
          {
LABEL_57:
            if (v30 == -1)
            {
              v195.n128_u8[0] = 0;
              v195.n128_u64[1] = *v178;
              *(void *)&long long v196 = v47;
              unint64_t v53 = *v172;
              long long v197 = 0uLL;
              LODWORD(v198) = 0;
              *((void *)&v198 + 1) = 0;
              re::DynamicArray<re::Matrix4x4<float>>::setCapacity((void *)&v196 + 1, v53);
              LODWORD(v198) = v198 + 1;
              __n128 v54 = re::DynamicArray<re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::SimplifiedMeshModel>::add((uint64_t)v187, &v195);
              if (*((void *)&v196 + 1) && *((void *)&v198 + 1)) {
                (*(void (**)(void, __n128))(**((void **)&v196 + 1) + 40))(*((void *)&v196 + 1), v54);
              }
              unint64_t v51 = *(void *)&v187[16];
              unint64_t v30 = *(void *)&v187[16] - 1;
            }
            else
            {
              unint64_t v51 = *(void *)&v187[16];
            }
            if (v51 <= v30) {
              goto LABEL_158;
            }
            re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)(*(void *)&v189[2] + (v30 << 6) + 24), v14);
          }
          int v55 = *v38;
          if (*v38 <= (v40 + 1)) {
            int v55 = v40 + 1;
          }
          while (1)
          {
            uint64_t v43 = (v40 + 1);
            if (v55 - 1 == v40) {
              break;
            }
            LODWORD(v4ArcSharedObject::ArcSharedObject(this, 0) = v40 + 1;
            int v56 = v43;
            if ((*(_DWORD *)(*v45 + 48 * v43 + 8) & 0x80000000) != 0) {
              goto LABEL_74;
            }
          }
          int v56 = v55;
LABEL_74:
          LODWORD(v4ArcSharedObject::ArcSharedObject(this, 0) = v56;
        }
        while (v13 != v56);
      }
      if (v168 <= (int)v33 + 1) {
        unint64_t v57 = (v33 + 1);
      }
      else {
        unint64_t v57 = v168;
      }
      while (1)
      {
        unint64_t v36 = (v33 + 1);
        if (v57 - 1 == v33) {
          break;
        }
        LODWORD(v33) = v33 + 1;
        unint64_t v58 = v36;
        if ((*(_DWORD *)(v6 + 72 * v36 + 8) & 0x80000000) != 0) {
          goto LABEL_82;
        }
      }
      unint64_t v58 = v57;
LABEL_82:
      unint64_t v33 = v58;
    }
    while (v168 != v58);
  }
  unint64_t v153 = *(void *)&v189[2];
  unint64_t v154 = *(void *)&v187[16];
  if (*(void *)&v187[16])
  {
    unsigned int v59 = 0;
    unsigned int v60 = 0;
    int v61 = 0;
    unsigned int v62 = 0;
    unint64_t v6 = 19;
    uint64_t v63 = *(void *)&v189[2];
    uint64_t v173 = *(void *)&v189[2] + (*(void *)&v187[16] << 6);
    do
    {
      uint64_t v64 = *(void *)(v63 + 16);
      uint64_t v65 = *(void *)(v64 + 8);
      if (v65)
      {
        unsigned int v175 = v62;
        int v179 = v61;
        uint64_t v66 = *(uint64_t **)(v64 + 16);
        uint64_t v67 = 8 * v65;
        do
        {
          uint64_t v68 = *v66++;
          v195.n128_u8[0] = 19;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized(v68, 0x13u);
          v59 += *(_DWORD *)(*(void *)(v68 + 64)
                           + 32
                           * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((void *)(v68 + 56), (unsigned __int8 *)&v195)+ 20);
          v195.n128_u8[0] = 20;
          re::DeformationVertexBufferState::ensureVertexBufferInitialized(v68, 0x14u);
          uint64_t v32 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((void *)(v68 + 56), (unsigned __int8 *)&v195);
          v60 += *(_DWORD *)(*(void *)(v68 + 64) + 32 * v32 + 20);
          v67 -= 8;
        }
        while (v67);
        uint64_t v65 = *(void *)(v64 + 8);
        int v61 = v179;
        unsigned int v62 = v175;
      }
      v61 += v65;
      v62 += *(_DWORD *)(v63 + 40);
      v63 += 64;
    }
    while (v63 != v173);
  }
  else
  {
    unsigned int v62 = 0;
    int v61 = 0;
    unsigned int v60 = 0;
    unsigned int v59 = 0;
  }
  int v180 = v61;
  uint64_t v70 = *((void *)a2 + 3);
  uint64_t v69 = *((void *)a2 + 4);
  unsigned int v71 = v69 & 7;
  unint64_t v72 = (char *)a1 + 40 * (v69 & 7);
  unint64_t v75 = *((void *)v72 + 3);
  uint64_t v74 = (unint64_t *)(v72 + 24);
  unint64_t v73 = v75;
  if (v75)
  {
    uint64_t v76 = v69 & 0xFFFFFFFFFFFFFFFLL;
    uint64_t v77 = **((void **)a1 + 5 * v71 + 5) & 0xFFFFFFFFFFFFFFFLL;
    if (v77 == 0xFFFFFFFFFFFFFFFLL)
    {
      if (v76 == 0xFFFFFFFFFFFFFFFLL) {
        goto LABEL_99;
      }
LABEL_98:
      unint64_t v73 = 0;
      unint64_t *v74 = 0;
      ++*((_DWORD *)a1 + 10 * v71 + 8);
      goto LABEL_99;
    }
    if (v76 == 0xFFFFFFFFFFFFFFFLL || v77 != v76) {
      goto LABEL_98;
    }
  }
LABEL_99:
  unint64_t v78 = *((void *)a1 + 5 * v71 + 2);
  if (v73 >= v78)
  {
    unint64_t v80 = v73 + 1;
    if (v78 < v73 + 1)
    {
      unint64_t v6 = (unint64_t)(v74 - 2);
      if (*(v74 - 2))
      {
        unint64_t v81 = 2 * v78;
        if (!v78) {
          unint64_t v81 = 8;
        }
        if (v81 <= v80) {
          unint64_t v82 = v80;
        }
        else {
          unint64_t v82 = v81;
        }
        re::DynamicArray<re::MPSInputData>::setCapacity(v74 - 2, v82);
      }
      else
      {
        re::DynamicArray<re::MPSInputData>::setCapacity(v74 - 2, v80);
        ++*((_DWORD *)a1 + 10 * v71 + 8);
      }
    }
    unsigned int v79 = v62;
    unint64_t v73 = *v74;
  }
  else
  {
    unsigned int v79 = v62;
  }
  uint64_t v83 = (char *)a1 + 40 * v71;
  uint64_t v84 = *((void *)v83 + 5) + 120 * v73;
  *(void *)uint64_t v84 = 0xFFFFFFFFFFFFFFFLL;
  *(_OWORD *)(v84 + 8) = 0u;
  *(_OWORD *)(v84 + 24) = 0u;
  *(_OWORD *)(v84 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v84 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56) = 0u;
  *(_OWORD *)(v84 + 72) = 0u;
  *(_OWORD *)(v84 + 88) = 0u;
  *(_OWORD *)(v84 + 104) = 0u;
  unint64_t v85 = (*v74)++;
  ++*((_DWORD *)v83 + 8);
  unint64_t v13 = *((void *)v83 + 5);
  unsigned int v86 = (void *)(v13 + 120 * v85);
  *unsigned int v86 = *((void *)a2 + 4);
  re::FrameContext::perFrameAllocTail(a2, v59, 0x10uLL, (uint64_t)&v195);
  unint64_t v87 = v195.n128_u64[1];
  v86[1] = v196;
  v86[2] = v87;
  size_t v162 = (unsigned int *)(v86 + 2);
  unint64_t v163 = v86 + 1;
  *(int32x2_t *)&double v88 = re::FrameContext::perFrameAllocTail(a2, v60, 0x10uLL, (uint64_t)&v195);
  unint64_t v89 = v195.n128_u64[1];
  _DWORD v86[3] = v196;
  uint64_t v161 = v86 + 3;
  v86[4] = v89;
  uint64_t v160 = v86 + 4;
  uint64_t v90 = (v154 + 1);
  if (v154 == -1)
  {
    uint64_t v151 = 0;
    int v95 = 0;
    unint64_t v96 = v13 + 120 * v85;
    *(void *)(v96 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
    *(void *)(v96 + 48) = 0;
  }
  else
  {
    unint64_t v6 = 4 * v90 + 19;
    uint64_t v91 = (*(uint64_t (**)(uint64_t, unint64_t, void, double))(*(void *)v70 + 32))(v70, v6, 0, v88);
    __n128 v92 = (void *)((v91 + 19) & 0xFFFFFFFFFFFFFFFCLL);
    *(v92 - 2) = v90;
    *(v92 - 1) = v91;
    bzero(v92, 4 * v90);
    unint64_t v93 = v13 + 120 * v85;
    uint64_t v151 = v92;
    *(void *)(v93 + 4ArcSharedObject::ArcSharedObject(this, 0) = v92;
    *(void *)(v93 + 48) = v90;
    uint64_t v94 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v70 + 32))(v70, v6, 0);
    int v95 = (void *)((v94 + 19) & 0xFFFFFFFFFFFFFFFCLL);
    *(v95 - 2) = v90;
    *(v95 - 1) = v94;
    bzero(v95, 4 * v90);
  }
  unint64_t v97 = v13 + 120 * v85;
  long long v152 = v95;
  *(void *)(v97 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56) = v95;
  *(void *)(v97 + 64) = v90;
  if (v79)
  {
    uint64_t v98 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v70 + 32))(v70, ((unint64_t)v79 << 6) | 0x1F, 0);
    uint64_t v99 = (void *)((v98 + 31) & 0xFFFFFFFFFFFFFFF0);
    *(v99 - 2) = v79;
    *(v99 - 1) = v98;
    uint64_t v150 = v99;
    bzero(v99, (unint64_t)v79 << 6);
  }
  else
  {
    uint64_t v150 = 0;
  }
  uint64_t v100 = v154;
  if (v154)
  {
    uint64_t v101 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 16 * v154 + 23, 0);
    unsigned int v102 = (void *)((v101 + 23) & 0xFFFFFFFFFFFFFFF8);
    *(v102 - 2) = v154;
    *(v102 - 1) = v101;
    bzero(v102, 16 * v154);
    long long v103 = (void *)(v13 + 120 * v85);
    uint64_t v149 = v102;
    v103[9] = v102;
    v103[10] = v154;
    long long v104 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, v154 + 16, 0);
    int v105 = v104 + 2;
    *long long v104 = v154;
    v104[1] = v104;
    bzero(v104 + 2, v154);
    int v148 = v105;
    v103[11] = v105;
    v103[12] = v154;
    uint64_t v100 = v154;
    unint64_t v6 = 8 * v154;
    uint64_t v106 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v70 + 32))(v70, v6 + 23, 0);
    uint64_t v107 = (void *)((v106 + 23) & 0xFFFFFFFFFFFFFFF8);
    *(v107 - 2) = v154;
    *(v107 - 1) = v106;
    bzero(v107, v6);
  }
  else
  {
    int v148 = 0;
    uint64_t v149 = 0;
    uint64_t v107 = 0;
    unint64_t v108 = v13 + 120 * v85;
    *(_OWORD *)(v108 + 88) = 0u;
    *(_OWORD *)(v108 + 72) = 0u;
  }
  unint64_t v109 = v13 + 120 * v85;
  long long v147 = v107;
  *(void *)(v109 + 104) = v107;
  *(void *)(v109 + 112) = v100;
  long long v110 = (unint64_t *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)a2 + 3) + 32))(*((void *)a2 + 3), 16, 8);
  unint64_t v111 = 0;
  *long long v110 = 0;
  v110[1] = 0;
  unint64_t v14 = v153;
  unint64_t v33 = v154;
  int v112 = v180;
  unint64_t v113 = (v180 - v154);
  size_t v158 = v110;
  if (v180 != v154)
  {
    uint64_t v114 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 56 * v113 + 23, 0);
    unint64_t v111 = (v114 + 23) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v111 - 16) = v113;
    *(void *)(v111 - 8) = v114;
    unint64_t v115 = v111;
    uint64_t v116 = (v180 - v154);
    do
    {
      *(_DWORD *)(v115 + 48) = 0;
      *(_OWORD *)(v115 + 16) = 0uLL;
      *(_OWORD *)(v115 + 32) = 0uLL;
      *(_OWORD *)unint64_t v115 = 0uLL;
      v115 += 56;
      --v116;
    }
    while (v116);
    long long v110 = v158;
    int v112 = v180;
  }
  *long long v110 = v111;
  v110[1] = v113;
  unint64_t v117 = (2 * v112);
  if (*((void *)a6 + 1) < v117) {
    re::DynamicArray<re::PostDeformationBlit>::setCapacity(a6, v117);
  }
  char v118 = v152;
  uint64_t v119 = v154;
  if (v154)
  {
    uint64_t v120 = 0;
    uint64_t v157 = 0;
    unint64_t v51 = 0;
    unint64_t v30 = 0;
    unsigned int v121 = 0;
    while (1)
    {
      if (v120 == v33) {
        goto LABEL_160;
      }
      unint64_t v122 = v14 + (v120 << 6);
      *((_DWORD *)v151 + v12ArcSharedObject::ArcSharedObject(this, 0) = v121;
      *((_DWORD *)v118 + v12ArcSharedObject::ArcSharedObject(this, 0) = v30;
      memcpy(&v150[8 * v157], *(const void **)(v122 + 56), *(void *)(v122 + 40) << 6);
      uint64_t v123 = *(void *)(v122 + 40);
      unint64_t v124 = &v149[2 * v120];
      *unint64_t v124 = &v150[8 * v157];
      v124[1] = v123;
      uint64_t v156 = *(void *)(v122 + 40);
      *((unsigned char *)v148 + v12ArcSharedObject::ArcSharedObject(this, 0) = *(unsigned char *)v122;
      v147[v120] = *(void *)(v122 + 8);
      uint64_t v125 = *(void *)(v122 + 16);
      unint64_t v167 = v122 + 16;
      if (!*(void *)(v125 + 8)) {
        goto LABEL_161;
      }
      uint64_t v126 = **(void ***)(v125 + 16);
      v195.n128_u8[0] = 19;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v126, 0x13u);
      unint64_t v6 = (unint64_t)(v126 + 7);
      uint64_t v155 = v120;
      if (*(_DWORD *)(v126[8]
                     + 32
                     * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v126 + 7, (unsigned __int8 *)&v195)+ 20))
      {
        v195.n128_u8[0] = 19;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v126, 0x13u);
        v195.n128_u64[0] = (unint64_t)objc_retain(*(id *)(v126[8]
                                                               + 32
                                                               * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v126 + 7, (unsigned __int8 *)&v195)+ 24));
        v190[0] = 19;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v126, 0x13u);
        v195.n128_u64[1] = *(unsigned int *)(v126[8]
                                           + 32
                                           * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v126 + 7, v190)+ 16);
        *(void *)&long long v196 = *v163;
        *((void *)&v196 + 1) = *v162 + (unint64_t)v121;
        v190[0] = 19;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v126, 0x13u);
        *(void *)&long long v197 = *(unsigned int *)(v126[8]
                                           + 32
                                           * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v126 + 7, v190)+ 20);
        BYTE8(v197) = 1;
        re::DynamicArray<re::PostDeformationBlit>::add(a6, (uint64_t)&v195);
        if (v195.n128_u64[0]) {

        }
        v195.n128_u8[0] = 19;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v126, 0x13u);
        int v127 = *(_DWORD *)(v126[8]
                         + 32
                         * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v126 + 7, (unsigned __int8 *)&v195)+ 20);
        v195.n128_u8[0] = 20;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v126, 0x14u);
        v195.n128_u64[0] = (unint64_t)objc_retain(*(id *)(v126[8]
                                                               + 32
                                                               * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v126 + 7, (unsigned __int8 *)&v195)+ 24));
        v190[0] = 20;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v126, 0x14u);
        v195.n128_u64[1] = *(unsigned int *)(v126[8]
                                           + 32
                                           * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v126 + 7, v190)+ 16);
        *(void *)&long long v196 = *v161;
        *((void *)&v196 + 1) = *v160 + (unint64_t)v30;
        v190[0] = 20;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v126, 0x14u);
        *(void *)&long long v197 = *(unsigned int *)(v126[8]
                                           + 32
                                           * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v126 + 7, v190)+ 20);
        BYTE8(v197) = 1;
        re::DynamicArray<re::PostDeformationBlit>::add(a6, (uint64_t)&v195);
        if (v195.n128_u64[0]) {

        }
        v121 += v127;
        v195.n128_u8[0] = 20;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v126, 0x14u);
        unsigned int v176 = *(_DWORD *)(v126[8]
                         + 32
                         * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v126 + 7, (unsigned __int8 *)&v195)+ 20)+ v30;
        unint64_t v30 = 20;
        v195.n128_u8[0] = 19;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v126, 0x13u);
        unsigned int v128 = *(_DWORD *)(v126[8]
                         + 32
                         * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v126 + 7, (unsigned __int8 *)&v195)+ 20);
        v195.n128_u8[0] = 19;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v126, 0x13u);
        LODWORD(v33) = v128
                     / *(unsigned __int16 *)(v126[16]
                                           + 20
                                           * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v126 + 15, (unsigned __int8 *)&v195)+ 4);
      }
      else
      {
        unsigned int v176 = v30;
        LODWORD(v33) = 0;
        unint64_t v30 = 20;
      }
      unsigned int v181 = v51;
      unint64_t v165 = *(void *)(*(void *)v167 + 8);
      if (v165 >= 2) {
        break;
      }
LABEL_146:
      v157 += v156;
      uint64_t v119 = v154;
      uint64_t v120 = v155 + 1;
      unint64_t v14 = v153;
      unint64_t v33 = v154;
      char v118 = v152;
      unint64_t v30 = v176;
      unint64_t v51 = v181;
      if (v155 + 1 == v154) {
        goto LABEL_149;
      }
    }
    unint64_t v129 = 1;
    while (1)
    {
      unint64_t v14 = *(void *)(*(void *)v167 + 8);
      if (v14 <= v129) {
        break;
      }
      uint64_t v130 = *(void **)(*(void *)(*(void *)v167 + 16) + 8 * v129);
      v195.n128_u8[0] = 19;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v130, 0x13u);
      unint64_t v6 = (unint64_t)(v130 + 7);
      unint64_t v13 = v181;
      if (*(_DWORD *)(v130[8]
                     + 32
                     * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v130 + 7, (unsigned __int8 *)&v195)+ 20))
      {
        v195.n128_u8[0] = 19;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v130, 0x13u);
        v195.n128_u64[0] = (unint64_t)objc_retain(*(id *)(v130[8]
                                                               + 32
                                                               * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v130 + 7, (unsigned __int8 *)&v195)+ 24));
        v190[0] = 19;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v130, 0x13u);
        v195.n128_u64[1] = *(unsigned int *)(v130[8]
                                           + 32
                                           * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v130 + 7, v190)+ 16);
        *(void *)&long long v196 = *v163;
        unsigned int v170 = v121;
        *((void *)&v196 + 1) = *v162 + (unint64_t)v121;
        v190[0] = 19;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v130, 0x13u);
        *(void *)&long long v197 = *(unsigned int *)(v130[8]
                                           + 32
                                           * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v130 + 7, v190)+ 20);
        BYTE8(v197) = 1;
        re::DynamicArray<re::PostDeformationBlit>::add(a6, (uint64_t)&v195);
        if (v195.n128_u64[0]) {

        }
        v195.n128_u8[0] = 19;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v130, 0x13u);
        unint64_t v14 = *(unsigned int *)(v130[8]
                              + 32
                              * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v130 + 7, (unsigned __int8 *)&v195)+ 20);
        v195.n128_u8[0] = 19;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v130, 0x13u);
        unsigned int v169 = *(unsigned __int16 *)(v130[16]
                                   + 20
                                   * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v130 + 15, (unsigned __int8 *)&v195)+ 4);
        v195.n128_u8[0] = 20;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v130, 0x14u);
        unint64_t v131 = (unint64_t)*(unsigned int *)(v130[8]
                                                 + 32
                                                 * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v130 + 7, (unsigned __int8 *)&v195)+ 20) >> 2;
        re::FrameContext::perFrameAlloc(a2, 8uLL, 4uLL, (uint64_t)&v195);
        uint64_t v132 = v195.n128_u32[2];
        unint64_t v30 = v195.n128_u32[3];
        unint64_t v51 = v196;
        unint64_t v33 = v33;
        *(void *)(v195.n128_u64[0] + v195.n128_u32[2]) = v33 | ((v131 & 0x3FFFFFFF) << 32);
        v195.n128_u8[0] = 20;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v130, 0x14u);
        uint64_t v133 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v130 + 7, (unsigned __int8 *)&v195);
        uint64_t v135 = v181;
        unint64_t v136 = v158[1];
        if (v136 <= v181) {
          goto LABEL_159;
        }
        ++v181;
        unint64_t v137 = (v131 << 32) | (*v160 + v176);
        uint64_t v138 = *v161;
        uint64_t v139 = *(void *)(v130[8] + 32 * v133 + 16);
        uint64_t v140 = *(void *)(v130[8] + 32 * v133 + 24);
        unint64_t v141 = v132 | (v30 << 32);
        unsigned int v121 = v14 + v170;
        uint64_t v142 = *v158 + 56 * v13;
        *(void *)uint64_t v142 = v51;
        *(void *)(v142 + 8) = v141;
        *(void *)(v142 + 16) = v140;
        *(void *)(v142 + 24) = v139;
        *(void *)(v142 + 32) = v138;
        *(void *)(v142 + 4ArcSharedObject::ArcSharedObject(this, 0) = v137;
        *(_DWORD *)(v142 + 48) = v131;
        v195.n128_u8[0] = 20;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v130, 0x14u);
        unint64_t v13 = *(_DWORD *)(v130[8]
                        + 32
                        * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v130 + 7, (unsigned __int8 *)&v195)+ 20)+ v176;
        unsigned int v176 = v13;
        LODWORD(v33) = v14 / v169 + v33;
        unint64_t v30 = 20;
      }
      if (v165 == ++v129) {
        goto LABEL_146;
      }
    }
    uint64_t v186 = 0;
    long long v198 = 0u;
    long long v199 = 0u;
    long long v196 = 0u;
    long long v197 = 0u;
    __n128 v195 = 0u;
    unint64_t v33 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v190 = 136315906;
    *(void *)&v190[4] = "operator[]";
    *(_WORD *)&v190[12] = 1024;
    *(_DWORD *)&uint64_t v190[14] = 476;
    __int16 v191 = 2048;
    unint64_t v192 = v129;
    __int16 v193 = 2048;
    unint64_t v194 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_158:
    uint64_t v186 = 0;
    long long v198 = 0u;
    long long v199 = 0u;
    long long v196 = 0u;
    long long v197 = 0u;
    __n128 v195 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v190 = 136315906;
    *(void *)&v190[4] = "operator[]";
    *(_WORD *)&v190[12] = 1024;
    *(_DWORD *)&uint64_t v190[14] = 789;
    __int16 v191 = 2048;
    unint64_t v192 = v30;
    __int16 v193 = 2048;
    unint64_t v194 = v51;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_159:
    re::internal::assertLog((re::internal *)6, v134, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v135, v136);
    _os_crash();
    __break(1u);
LABEL_160:
    uint64_t v186 = 0;
    long long v198 = 0u;
    long long v199 = 0u;
    long long v196 = 0u;
    long long v197 = 0u;
    __n128 v195 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v190 = 136315906;
    *(void *)&v190[4] = "operator[]";
    *(_WORD *)&v190[12] = 1024;
    *(_DWORD *)&uint64_t v190[14] = 789;
    __int16 v191 = 2048;
    unint64_t v192 = v33;
    __int16 v193 = 2048;
    unint64_t v194 = v33;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_161:
    uint64_t v186 = 0;
    long long v198 = 0u;
    long long v199 = 0u;
    long long v196 = 0u;
    long long v197 = 0u;
    __n128 v195 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v190 = 136315906;
    *(void *)&v190[4] = "operator[]";
    *(_WORD *)&v190[12] = 1024;
    *(_DWORD *)&uint64_t v190[14] = 476;
    __int16 v191 = 2048;
    unint64_t v192 = 0;
    __int16 v193 = 2048;
    unint64_t v194 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_162:
    re::internal::assertLog((re::internal *)6, v25, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v13, v31);
    _os_crash();
    __break(1u);
LABEL_163:
    *(void *)uint64_t v190 = 0;
    long long v198 = 0u;
    long long v199 = 0u;
    long long v196 = 0u;
    long long v197 = 0u;
    __n128 v195 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v187 = 136315906;
    *(void *)&v187[4] = "operator[]";
    *(_WORD *)&v187[12] = 1024;
    *(_DWORD *)&v187[14] = 468;
    *(_WORD *)&v187[18] = 2048;
    *(void *)&v187[20] = v14;
    __int16 v188 = 2048;
    *(void *)uint64_t v189 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_164:
    re::internal::assertLog((re::internal *)6, v25, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, v30);
    _os_crash();
    __break(1u);
LABEL_165:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
  }
  unsigned int v121 = 0;
  LODWORD(v3ArcSharedObject::ArcSharedObject(this, 0) = 0;
LABEL_149:
  *((_DWORD *)v151 + v119) = v121;
  *((_DWORD *)v118 + v119) = v30;
  uint64_t v143 = *(void *)v187;
  if (*(void *)v187 && v14)
  {
    if (v33)
    {
      unint64_t v144 = v33 << 6;
      uint64_t v145 = v14 + 24;
      do
      {
        re::DynamicArray<unsigned long>::deinit(v145);
        v145 += 64;
        v144 -= 64;
      }
      while (v144);
      uint64_t v143 = *(void *)v187;
      unint64_t v14 = *(void *)&v189[2];
    }
    (*(void (**)(uint64_t, unint64_t))(*(void *)v143 + 40))(v143, v14);
  }
  re::HashTable<unsigned long long,re::HashTable<re::Matrix4x4<float> const*,re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::MeshPartsState,re::Hash<re::Matrix4x4<float> const*>,re::EqualTo<re::Matrix4x4<float> const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable((uint64_t *)&v182);
  return v158;
}

uint64_t *re::HashTable<re::Matrix4x4<float> const*,re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::MeshPartsState,re::Hash<re::Matrix4x4<float> const*>,re::EqualTo<re::Matrix4x4<float> const*>,true,false>::~HashTable(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2];
        uint64_t v7 = v6 + v4;
        int v8 = *(_DWORD *)(v6 + v4 + 8);
        if (v8 < 0)
        {
          *(_DWORD *)(v7 + 8) = v8 & 0x7FFFFFFF;
          uint64_t v9 = *(void *)(v7 + 24);
          if (v9)
          {
            uint64_t v10 = v6 + v4;
            uint64_t v11 = (void *)(v10 + 32);
            if (*(void *)(v10 + 32))
            {
              (*(void (**)(uint64_t, void))(*(void *)v9 + 40))(v9, *(void *)(v10 + 40));
              *uint64_t v11 = 0;
              v11[1] = 0;
              unint64_t v3 = *((unsigned int *)a1 + 8);
            }
            *(void *)(v7 + 24) = 0;
          }
        }
        v4 += 48;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return a1;
}

__n128 re::DynamicArray<re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::SimplifiedMeshModel>::add(uint64_t a1, __n128 *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = v5 + 1;
  if (v5 >= v4 && v4 < v6)
  {
    if (*(void *)a1)
    {
      uint64_t v14 = 2 * v4;
      BOOL v15 = v4 == 0;
      unint64_t v16 = 8;
      if (!v15) {
        unint64_t v16 = v14;
      }
      if (v16 <= v6) {
        unint64_t v17 = v6;
      }
      else {
        unint64_t v17 = v16;
      }
      re::DynamicArray<re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::SimplifiedMeshModel>::setCapacity((void *)a1, v17);
    }
    else
    {
      re::DynamicArray<re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::SimplifiedMeshModel>::setCapacity((void *)a1, v6);
      ++*(_DWORD *)(a1 + 24);
    }
  }
  int v8 = (__n128 *)(*(void *)(a1 + 32) + (*(void *)(a1 + 16) << 6));
  __n128 result = *a2;
  unint64_t v10 = a2[1].n128_u64[0];
  *int v8 = *a2;
  v8[3].n128_u64[1] = 0;
  v8[3].n128_u32[0] = 0;
  v8[2].n128_u64[0] = 0;
  v8[2].n128_u64[1] = 0;
  v8[1].n128_u64[0] = v10;
  v8[1].n128_u64[1] = 0;
  unint64_t v11 = a2[2].n128_u64[0];
  v8[1].n128_u64[1] = a2[1].n128_u64[1];
  v8[2].n128_u64[0] = v11;
  a2[1].n128_u64[1] = 0;
  a2[2].n128_u64[0] = 0;
  unint64_t v12 = v8[2].n128_u64[1];
  v8[2].n128_u64[1] = a2[2].n128_u64[1];
  a2[2].n128_u64[1] = v12;
  unint64_t v13 = v8[3].n128_u64[1];
  v8[3].n128_u64[1] = a2[3].n128_u64[1];
  a2[3].n128_u64[1] = v13;
  ++a2[3].n128_u32[0];
  ++v8[3].n128_u32[0];
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

__n128 re::DynamicArray<re::PostDeformationBlit>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::PostDeformationBlit>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 48 * v4;
  *(void *)uint64_t v5 = *(void *)a2;
  *(void *)a2 = 0;
  __n128 result = *(__n128 *)(a2 + 8);
  long long v7 = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(v5 + 4ArcSharedObject::ArcSharedObject(this, 0) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(v5 + 24) = v7;
  *(__n128 *)(v5 + 8) = result;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t *re::HashTable<unsigned long long,re::HashTable<re::Matrix4x4<float> const*,re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::MeshPartsState,re::Hash<re::Matrix4x4<float> const*>,re::EqualTo<re::Matrix4x4<float> const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::HashTable<re::Matrix4x4<float> const*,re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::MeshPartsState,re::Hash<re::Matrix4x4<float> const*>,re::EqualTo<re::Matrix4x4<float> const*>,true,false>::~HashTable((uint64_t *)(v6 + 24));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 72;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return a1;
}

uint64_t re::PrepareSimplifiedMeshBuffer::deformGPU(uint64_t a1, uint64_t *a2, void **this)
{
  re::mtl::ComputeCommandEncoder::pushDebugGroup(this, (re::ns *)"Perform Offset Index Calculation");
  uint64_t v6 = a2[1];
  if (v6)
  {
    uint64_t v7 = *a2;
    uint64_t v8 = v7 + 56 * v6;
    int64x2_t v13 = vdupq_n_s64(1uLL);
    do
    {
      objc_msgSend(*this, "setComputePipelineState:", *(void *)(a1 + 328), *(_OWORD *)&v13);
      [*this setBuffer:*(void *)v7 offset:*(unsigned int *)(v7 + 8) atIndex:0];
      [*this setBuffer:*(void *)(v7 + 16) offset:*(unsigned int *)(v7 + 24) atIndex:1];
      [*this setBuffer:*(void *)(v7 + 32) offset:*(unsigned int *)(v7 + 40) atIndex:2];
      unsigned int v9 = objc_msgSend(*(id *)(a1 + 328), sel_threadExecutionWidth);
      unint64_t v10 = *this;
      uint64_t v16 = (v9 + *(_DWORD *)(v7 + 48) - 1) / v9;
      int64x2_t v17 = v13;
      uint64_t v14 = v9;
      int64x2_t v15 = v13;
      [v10 dispatchThreadgroups:&v16 threadsPerThreadgroup:&v14];
      v7 += 56;
    }
    while (v7 != v8);
  }
  unint64_t v11 = *this;
  return [v11 popDebugGroup];
}

uint64_t re::HashTable<unsigned long long,re::HashTable<re::Matrix4x4<float> const*,re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::MeshPartsState,re::Hash<re::Matrix4x4<float> const*>,re::EqualTo<re::Matrix4x4<float> const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v29, 0, 36);
          *(void *)&v29[36] = 0x7FFFFFFFLL;
          re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v29, v13, v12);
          long long v15 = *(_OWORD *)v29;
          *(_OWORD *)__int16 v29 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v29[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v29[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v29[24];
          *(_OWORD *)&unsigned char v29[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v29[32];
          *(_OWORD *)(a1 + 24) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashTable<unsigned long long,re::HashTable<re::Matrix4x4<float> const*,re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::MeshPartsState,re::Hash<re::Matrix4x4<float> const*>,re::EqualTo<re::Matrix4x4<float> const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21, v21 + 8);
              }
              v21 += 72;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,re::HashTable<re::Matrix4x4<float> const*,re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::MeshPartsState,re::Hash<re::Matrix4x4<float> const*>,re::EqualTo<re::Matrix4x4<float> const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable((uint64_t *)v29);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 72 * v9 + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 72 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 72 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 72 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 72 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 72 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 72 * v9 + 16) = *a4;
  uint64_t v25 = *(void *)(a1 + 16) + 72 * v9;
  *(_OWORD *)(v25 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_DWORD *)(v25 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56) = 0;
  *(_OWORD *)(v25 + 24) = 0u;
  *(void *)(v25 + 6ArcSharedObject::ArcSharedObject(this, 0) = 0x7FFFFFFFLL;
  *(void *)(v25 + 24) = *(void *)a5;
  *(void *)a5 = 0;
  uint64_t v26 = *(void *)(v25 + 32);
  *(void *)(v25 + 32) = *(void *)(a5 + 8);
  *(void *)(a5 + 8) = v26;
  uint64_t v27 = *(void *)(v25 + 40);
  *(void *)(v25 + 4ArcSharedObject::ArcSharedObject(this, 0) = *(void *)(a5 + 16);
  *(void *)(a5 + 16) = v27;
  LODWORD(v27) = *(_DWORD *)(v25 + 48);
  *(_DWORD *)(v25 + 48) = *(_DWORD *)(a5 + 24);
  *(_DWORD *)(a5 + 24) = v27;
  LODWORD(v27) = *(_DWORD *)(v25 + 52);
  *(_DWORD *)(v25 + 52) = *(_DWORD *)(a5 + 28);
  *(_DWORD *)(a5 + 28) = v27;
  LODWORD(v27) = *(_DWORD *)(v25 + 56);
  *(_DWORD *)(v25 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56) = *(_DWORD *)(a5 + 32);
  *(_DWORD *)(a5 + 32) = v27;
  LODWORD(v27) = *(_DWORD *)(v25 + 60);
  *(_DWORD *)(v25 + 6ArcSharedObject::ArcSharedObject(this, 0) = *(_DWORD *)(a5 + 36);
  *(_DWORD *)(a5 + 36) = v27;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::HashTable<re::Matrix4x4<float> const*,re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::MeshPartsState,re::Hash<re::Matrix4x4<float> const*>,re::EqualTo<re::Matrix4x4<float> const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(void *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v28, v13, v12);
          long long v15 = *(_OWORD *)v28;
          *(_OWORD *)unsigned int v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v28[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v28[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashTable<re::Matrix4x4<float> const*,re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::MeshPartsState,re::Hash<re::Matrix4x4<float> const*>,re::EqualTo<re::Matrix4x4<float> const*>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21, v21 + 8);
              }
              v21 += 48;
              --v20;
            }
            while (v20);
          }
          re::HashTable<re::Matrix4x4<float> const*,re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::MeshPartsState,re::Hash<re::Matrix4x4<float> const*>,re::EqualTo<re::Matrix4x4<float> const*>,true,false>::~HashTable((uint64_t *)v28);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 48 * v9 + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 48 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 48 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 48 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 48 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 48 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 48 * v9 + 16) = *a4;
  uint64_t v25 = (void *)(*(void *)(a1 + 16) + 48 * v9);
  uint64_t v25[3] = 0;
  _OWORD v25[4] = 0;
  v25[5] = 0;
  uint64_t v25[3] = *a5;
  *a5 = 0;
  _OWORD v25[4] = a5[1];
  a5[1] = 0;
  uint64_t v26 = v25[5];
  v25[5] = a5[2];
  a5[2] = v26;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void *re::DynamicArray<re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::SimplifiedMeshModel>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      __n128 result = (void *)*result;
      if (!*v5)
      {
        __n128 result = (void *)re::DynamicArray<re::PrepareSimplifiedMeshBuffer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::SimplifiedMeshModel>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 58)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 64, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          unint64_t v2 = a2 << 6;
          __n128 result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, a2 << 6, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        __n128 result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + (v9 << 6);
        int v11 = v7;
        do
        {
          uint64_t v12 = *(void *)(v8 + 16);
          *(_OWORD *)int v11 = *(_OWORD *)v8;
          v11[7] = 0;
          uint64_t v11[2] = v12;
          float32x4_t v11[3] = 0;
          v11[4] = 0;
          v11[5] = 0;
          *((_DWORD *)v11 + 12) = 0;
          uint64_t v13 = *(void *)(v8 + 24);
          uint64_t v14 = *(void *)(v8 + 32);
          uint64_t v15 = v8 + 24;
          float32x4_t v11[3] = v13;
          v11[4] = v14;
          *(void *)uint64_t v15 = 0;
          *(void *)(v15 + 8) = 0;
          uint64_t v16 = v11[5];
          v11[5] = *(void *)(v15 + 16);
          *(void *)(v15 + 16) = v16;
          uint64_t v17 = v11[7];
          v11[7] = *(void *)(v15 + 32);
          *(void *)(v15 + 32) = v17;
          ++*(_DWORD *)(v15 + 24);
          ++*((_DWORD *)v11 + 12);
          re::DynamicArray<unsigned long>::deinit(v15);
          uint64_t v8 = v15 + 40;
          v11 += 8;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      __n128 result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::DynamicArray<re::MPSInputData>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      __n128 result = (void *)*result;
      if (*v5)
      {
        if (!a2)
        {
          uint64_t v7 = 0;
          if (!v3) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x78uLL))
        {
          uint64_t v2 = 120 * a2;
          __n128 result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 120 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 120 * v5[2]);
            __n128 result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 120, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        __n128 result = (void *)_os_crash();
        __break(1u);
      }
      else
      {
        __n128 result = (void *)re::DynamicArray<re::MPSInputData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

void *re::DynamicArray<re::PostDeformationBlit>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      __n128 result = (void *)*result;
      if (!*v5)
      {
        __n128 result = (void *)re::DynamicArray<re::PostDeformationBlit>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          uint64_t v2 = 48 * a2;
          __n128 result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_18;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        __n128 result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 48 * v9;
        int v11 = v7;
        do
        {
          *int v11 = *(void *)v8;
          *(void *)uint64_t v8 = 0;
          long long v12 = *(_OWORD *)(v8 + 8);
          long long v13 = *(_OWORD *)(v8 + 24);
          *((unsigned char *)v11 + 4ArcSharedObject::ArcSharedObject(this, 0) = *(unsigned char *)(v8 + 40);
          *(_OWORD *)(v11 + 3) = v13;
          *(_OWORD *)(v11 + 1) = v12;
          if (*(void *)v8)
          {

            *(void *)uint64_t v8 = 0;
          }
          v8 += 48;
          v11 += 6;
          v10 -= 48;
        }
        while (v10);
        uint64_t v8 = v5[4];
      }
      __n128 result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

void *re::DynamicArray<re::PostDeformationBlit>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::PostDeformationBlit>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::PostDeformationBlit>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

double re::DebugRenderer::DebugRenderer(re::DebugRenderer *this)
{
  *(unsigned char *)this = 0;
  *((void *)this + 1) = 0xFFFFFFFFFFFFFFFLL;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 16) = 0;
  *(void *)((char *)this + 68) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 0;
  *(void *)((char *)this + 116) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(void *)((char *)this + 164) = 0x7FFFFFFFLL;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((_DWORD *)this + 48) = 1;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  *((_DWORD *)this + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 3ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *((_DWORD *)this + 62) = 1;
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  *((_DWORD *)this + 7ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *((void *)this + 32) = 0;
  *((_DWORD *)this + 72) = 0;
  *((void *)this + 41) = 0;
  *((void *)this + 38) = 0;
  *((void *)this + 39) = 0;
  *((_DWORD *)this + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *((void *)this + 37) = 0;
  *((_DWORD *)this + 84) = 0;
  *((void *)this + 43) = 0;
  *((void *)this + 44) = 0;
  *((_DWORD *)this + 9ArcSharedObject::ArcSharedObject(this, 0) = 1;
  *((void *)this + 46) = 0;
  *((void *)this + 47) = 0;
  *((_DWORD *)this + 98) = 0;
  *((void *)this + 48) = 0;
  *((void *)this + 5ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *((void *)this + 51) = 0;
  *((_DWORD *)this + 104) = 1;
  *((void *)this + 53) = 0;
  *((void *)this + 54) = 0;
  *((_DWORD *)this + 112) = 0;
  *((void *)this + 55) = 0;
  *((_DWORD *)this + 114) = 0;
  return result;
}

void re::DebugRenderer::~DebugRenderer(re::DebugRenderer *this)
{
  re::DebugRenderer::deinit(this);
  re::BucketArray<re::RenderLine,2048ul>::deinit((uint64_t)this + 400);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 400);
  re::BucketArray<re::RenderLine,2048ul>::deinit((uint64_t)this + 344);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 344);
  re::DynamicArray<re::RenderText>::deinit((uint64_t)this + 296);
  re::BucketArray<re::RenderLine,2048ul>::deinit((uint64_t)this + 232);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 232);
  re::BucketArray<re::RenderLine,2048ul>::deinit((uint64_t)this + 176);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 176);
  re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::deinit((uint64_t *)this + 16);
  re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::deinit((uint64_t *)this + 10);
  re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::deinit((uint64_t *)this + 4);
  unint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {

    *((void *)this + 3) = 0;
  }
  unint64_t v3 = (void *)*((void *)this + 2);
  if (v3)
  {

    *((void *)this + 2) = 0;
  }
}

unsigned char *re::DebugRenderer::deinit(unsigned char *this)
{
  if (*this)
  {
    int v1 = this;
    re::BucketArray<re::RenderLine,2048ul>::deinit((uint64_t)(this + 176));
    re::BucketArray<re::RenderLine,2048ul>::deinit((uint64_t)(v1 + 232));
    re::DynamicArray<re::RenderText>::deinit((uint64_t)(v1 + 296));
    re::BucketArray<re::RenderLine,2048ul>::deinit((uint64_t)(v1 + 344));
    return (unsigned char *)re::BucketArray<re::RenderLine,2048ul>::deinit((uint64_t)(v1 + 400));
  }
  return this;
}

uint64_t re::DebugRenderer::pipelineState(re::DebugRenderer *this, re::RenderManager *a2, RenderTargetInfo *a3)
{
  uint64_t v5 = (char *)this + 32;
  uint64_t v6 = re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::tryGet((uint64_t)this + 32, a3);
  if (!v6)
  {
    id v7 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A80], sel_alloc), sel_init);
    objc_msgSend(objc_msgSend(objc_msgSend(v7, sel_attributes), sel_objectAtIndexedSubscript_, 0), sel_setFormat_, 30);
    objc_msgSend(objc_msgSend(objc_msgSend(v7, sel_attributes), sel_objectAtIndexedSubscript_, 0), sel_setBufferIndex_, 0);
    objc_msgSend(objc_msgSend(objc_msgSend(v7, sel_attributes), sel_objectAtIndexedSubscript_, 0), sel_setOffset_, 0);
    objc_msgSend(objc_msgSend(objc_msgSend(v7, sel_attributes), sel_objectAtIndexedSubscript_, 1), sel_setFormat_, 30);
    objc_msgSend(objc_msgSend(objc_msgSend(v7, sel_attributes), sel_objectAtIndexedSubscript_, 1), sel_setBufferIndex_, 0);
    objc_msgSend(objc_msgSend(objc_msgSend(v7, sel_attributes), sel_objectAtIndexedSubscript_, 1), sel_setOffset_, 16);
    objc_msgSend(objc_msgSend(objc_msgSend(v7, sel_layouts), sel_objectAtIndexedSubscript_, 0), sel_setStride_, 32);
    objc_msgSend(objc_msgSend(objc_msgSend(v7, sel_layouts), sel_objectAtIndexedSubscript_, 0), sel_setStepFunction_, 1);
    objc_msgSend(objc_msgSend(objc_msgSend(v7, sel_layouts), sel_objectAtIndexedSubscript_, 0), sel_setStepRate_, 1);
    re::ShaderManager::makeFunction(*((uint64_t **)a2 + 7), *(void *)(*((void *)a2 + 7) + 256), (re::ns *)"vsPrimitivePosClr", 0, &v16);
    re::ShaderManager::makeFunction(*((uint64_t **)a2 + 7), *(void *)(*((void *)a2 + 7) + 256), (re::ns *)"fsPrimitivePosClr", 0, &v15);
    re::ShaderManager::makeRenderPipelineDescriptor(*((re::ShaderManager **)a2 + 7), &v14);
    objc_msgSend(v14, sel_setLabel_, @"DebugRendererPipeline");
    objc_msgSend(v14, sel_setVertexFunction_, v16);
    objc_msgSend(v14, sel_setFragmentFunction_, v15);
    objc_msgSend(v14, sel_setVertexDescriptor_, v7);
    objc_msgSend(v14, sel_setRasterSampleCount_, a3->var0.var0);
    for (uint64_t i = 0; i != 8; ++i)
    {
      uint64_t v9 = &a3->var0.var0 + i;
      if (v9[1]) {
        objc_msgSend(objc_msgSend(objc_msgSend(v14, sel_colorAttachments), sel_objectAtIndexedSubscript_, i), sel_setPixelFormat_, (int)v9[1]);
      }
    }
    objc_msgSend(v14, sel_setDepthAttachmentPixelFormat_, a3->var0.var2);
    objc_msgSend(v14, sel_setStencilAttachmentPixelFormat_);
    if (*((unsigned char *)a2 + 302)) {
      objc_msgSend(v14, sel_setMaxVertexAmplificationCount_, 2);
    }
    id v10 = *((id *)a2 + 23);
    id v13 = v10;
    re::mtl::Device::makeRenderPipelineState(&v13, (uint64_t)v14, &v12);
    re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::add<NS::SharedPtr<MTL::RenderPipelineState>&>((uint64_t)v5, (uint64_t)a3, &v12);
    uint64_t v6 = re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::tryGet((uint64_t)v5, a3);
    if (v12) {

    }
    if (v14) {
    if (v15)
    }

    if (v16) {
    if (v7)
    }
  }
  return v6;
}

uint64_t re::DebugRenderer::pipelineStateWithAlphaBlending(re::DebugRenderer *this, re::RenderManager *a2, RenderTargetInfo *a3)
{
  uint64_t v5 = (char *)this + 80;
  uint64_t v6 = re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::tryGet((uint64_t)this + 80, a3);
  if (!v6)
  {
    re::VertexPositionColorWithAlpha::makeVertexDescriptor((re::VertexPositionColorWithAlpha *)&v16);
    re::ShaderManager::makeFunction(*((uint64_t **)a2 + 7), *(void *)(*((void *)a2 + 7) + 256), (re::ns *)"vsPrimitivePosClr", 0, &v15);
    re::ShaderManager::makeFunction(*((uint64_t **)a2 + 7), *(void *)(*((void *)a2 + 7) + 256), (re::ns *)"fsPrimitivePosClr", 0, &v14);
    re::ShaderManager::makeRenderPipelineDescriptor(*((re::ShaderManager **)a2 + 7), &v13);
    objc_msgSend(v13, sel_setLabel_, @"DebugRendererPipeline");
    objc_msgSend(v13, sel_setVertexFunction_, v15);
    objc_msgSend(v13, sel_setFragmentFunction_, v14);
    id v10 = v16;
    objc_msgSend(v13, sel_setVertexDescriptor_);
    objc_msgSend(v13, sel_setRasterSampleCount_, a3->var0.var0);
    do
    {
      id v7 = &a3->var0.var0 + v6;
      if (v7[1])
      {
        objc_msgSend(objc_msgSend(objc_msgSend(v13, sel_colorAttachments), sel_objectAtIndexedSubscript_, v6), sel_setPixelFormat_, (int)v7[1]);
        objc_msgSend(objc_msgSend(objc_msgSend(v13, sel_colorAttachments), sel_objectAtIndexedSubscript_, v6), sel_setBlendingEnabled_, 1);
        objc_msgSend(objc_msgSend(objc_msgSend(v13, sel_colorAttachments), sel_objectAtIndexedSubscript_, v6), sel_setRgbBlendOperation_, 0);
        objc_msgSend(objc_msgSend(objc_msgSend(v13, sel_colorAttachments), sel_objectAtIndexedSubscript_, v6), sel_setAlphaBlendOperation_, 0);
        objc_msgSend(objc_msgSend(objc_msgSend(v13, sel_colorAttachments), sel_objectAtIndexedSubscript_, v6), sel_setSourceRGBBlendFactor_, 4);
        objc_msgSend(objc_msgSend(objc_msgSend(v13, sel_colorAttachments), sel_objectAtIndexedSubscript_, v6), sel_setSourceAlphaBlendFactor_, 4);
        objc_msgSend(objc_msgSend(objc_msgSend(v13, sel_colorAttachments), sel_objectAtIndexedSubscript_, v6), sel_setDestinationRGBBlendFactor_, 5);
        objc_msgSend(objc_msgSend(objc_msgSend(v13, sel_colorAttachments), sel_objectAtIndexedSubscript_, v6), sel_setDestinationAlphaBlendFactor_, 5);
      }
      ++v6;
    }
    while (v6 != 8);
    objc_msgSend(v13, sel_setDepthAttachmentPixelFormat_, a3->var0.var2);
    objc_msgSend(v13, sel_setStencilAttachmentPixelFormat_);
    if (*((unsigned char *)a2 + 302)) {
      objc_msgSend(v13, sel_setMaxVertexAmplificationCount_, 2);
    }
    id v8 = *((id *)a2 + 23);
    id v12 = v8;
    re::mtl::Device::makeRenderPipelineState(&v12, (uint64_t)v13, &v11);
    re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::add<NS::SharedPtr<MTL::RenderPipelineState>&>((uint64_t)v5, (uint64_t)a3, &v11);
    uint64_t v6 = re::HashTable<re::RenderTargetInfo,NS::SharedPtr<MTL::RenderPipelineState>,re::Hash<re::RenderTargetInfo>,re::EqualTo<re::RenderTargetInfo>,true,false>::tryGet((uint64_t)v5, a3);
    if (v11) {

    }
    if (v13) {
    if (v14)
    }

    if (v15) {
    if (v10)
    }
  }
  return v6;
}

id re::VertexPositionColorWithAlpha::makeVertexDescriptor(re::VertexPositionColorWithAlpha *this)
{
  id v2 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A80], sel_alloc), sel_init);
  *(void *)this = v2;
  objc_msgSend(objc_msgSend(objc_msgSend(v2, sel_attributes), sel_objectAtIndexedSubscript_, 0), sel_setFormat_, 31);
  objc_msgSend(objc_msgSend(objc_msgSend(v2, sel_attributes), sel_objectAtIndexedSubscript_, 0), sel_setBufferIndex_, 0);
  objc_msgSend(objc_msgSend(objc_msgSend(v2, sel_attributes), sel_objectAtIndexedSubscript_, 0), sel_setOffset_, 0);
  objc_msgSend(objc_msgSend(objc_msgSend(v2, sel_attributes), sel_objectAtIndexedSubscript_, 1), sel_setFormat_, 31);
  objc_msgSend(objc_msgSend(objc_msgSend(v2, sel_attributes), sel_objectAtIndexedSubscript_, 1), sel_setBufferIndex_, 0);
  objc_msgSend(objc_msgSend(objc_msgSend(v2, sel_attributes), sel_objectAtIndexedSubscript_, 1), sel_setOffset_, 16);
  objc_msgSend(objc_msgSend(objc_msgSend(v2, sel_layouts), sel_objectAtIndexedSubscript_, 0), sel_setStride_, 32);
  objc_msgSend(objc_msgSend(objc_msgSend(v2, sel_layouts), sel_objectAtIndexedSubscript_, 0), sel_setStepFunction_, 1);
  id v3 = objc_msgSend(objc_msgSend(v2, sel_layouts), sel_objectAtIndexedSubscript_, 0);
  return objc_msgSend(v3, sel_setStepRate_, 1);
}

void re::DebugRenderer::init(void **this, id *a2)
{
  id v4 = objc_msgSend(objc_msgSend(MEMORY[0x263F128A0], sel_alloc), sel_init);
  objc_msgSend(v4, sel_setDepthCompareFunction_, 6);
  objc_msgSend(v4, sel_setDepthWriteEnabled_, 1);
  id v7 = objc_msgSend(a2[23], sel_newDepthStencilStateWithDescriptor_, v4);
  NS::SharedPtr<MTL::Texture>::operator=(this + 2, &v7);
  if (v7) {

  }
  id v5 = objc_msgSend(objc_msgSend(MEMORY[0x263F128A0], sel_alloc), sel_init);
  objc_msgSend(v5, sel_setDepthCompareFunction_, 7);
  objc_msgSend(v5, sel_setDepthWriteEnabled_, 1);
  id v7 = objc_msgSend(a2[23], sel_newDepthStencilStateWithDescriptor_, v5);
  NS::SharedPtr<MTL::Texture>::operator=(this + 3, &v7);
  uint64_t v6 = (_anonymous_namespace_ *)v7;
  if (v7) {

  }
  this[1] = (void *)(*((void *)a2[17] + 3) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*((void *)a2[17] + 2) << 60));
  re::DynamicArray<re::RenderText>::setCapacity(this + 37, 0x80uLL);
  ++*((_DWORD *)this + 80);
  *(unsigned char *)this = 1;
  if (v5) {

  }
  if (v4) {
}
  }

uint64_t re::BucketArray<re::RenderLine,2048ul>::deinit(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    for (unint64_t i = 0; i != v2; ++i)
      re::BucketArray<re::RenderLine,2048ul>::operator[](a1, i);
  }
  while (*(void *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  uint64_t result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(void *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void re::DebugRenderer::drawLines(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  uint64_t v6 = a1 + 72;
  os_unfair_lock_lock(a1 + 72);
  unint64_t v7 = *(void *)(a2 + 8);
  if (v7)
  {
    uint64_t v8 = 68;
    if (a3)
    {
      uint64_t v8 = 54;
      uint64_t v9 = (uint64_t *)&a1[44];
    }
    else
    {
      uint64_t v9 = (uint64_t *)&a1[58];
    }
    re::BucketArray<re::RenderLine,2048ul>::copy(v9, *(void *)&a1[v8]._os_unfair_lock_opaque, *(char **)a2, v7);
    atomic_store(1u, re::needDebugRendererThisFrame);
  }
  os_unfair_lock_unlock(v6);
}

uint64_t *re::BucketArray<re::RenderLine,2048ul>::copy(uint64_t *result, unint64_t a2, char *__src, unint64_t a4)
{
  if (!a4) {
    return result;
  }
  uint64_t v6 = (uint64_t)result;
  unint64_t v7 = result[5];
  if (v7 < a2)
  {
    re::internal::assertLog((re::internal *)4, a2, __src, "assertion failure: '%s' (%s:line %i) Invalid position into BucketArray.", "pos <= m_size", "copy", 681);
    _os_crash();
    __break(1u);
    goto LABEL_12;
  }
  unint64_t v4 = a4;
  unint64_t v8 = a2 + a4;
  if (__CFADD__(a2, a4))
  {
LABEL_12:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in BucketArray::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 686, v7, a2, v4);
    uint64_t result = (uint64_t *)_os_crash();
    __break(1u);
    return result;
  }
  if (a4 + a2 > result[1] << 11)
  {
    re::BucketArray<re::RenderLine,2048ul>::setBucketsCapacity(result, (a4 + a2 + 2047) >> 11);
    unint64_t v7 = *(void *)(v6 + 40);
  }
  if (v7 >= v8)
  {
    uint64_t result = (uint64_t *)re::BucketArray<re::RenderLine,2048ul>::overwriteExistingElements((char *)v6, a2, __src, v4);
  }
  else
  {
    unint64_t v10 = v7 - a2;
    re::BucketArray<re::RenderLine,2048ul>::overwriteExistingElements((char *)v6, a2, __src, v7 - a2);
    uint64_t result = (uint64_t *)re::BucketArray<re::RenderLine,2048ul>::copyNewElements((char *)v6, *(void *)(v6 + 40), &__src[48 * v10], v4 - v10);
    *(void *)(v6 + 4ArcSharedObject::ArcSharedObject(this, 0) = v8;
  }
  ++*(_DWORD *)(v6 + 48);
  return result;
}

void re::DebugRenderer::drawLine(os_unfair_lock_s *a1, long long *a2, long long *a3, long long *a4, int a5)
{
  unint64_t v10 = a1 + 72;
  os_unfair_lock_lock(a1 + 72);
  if (a5) {
    uint64_t v11 = (uint64_t)&a1[44];
  }
  else {
    uint64_t v11 = (uint64_t)&a1[58];
  }
  long long v13 = *a2;
  long long v14 = *a3;
  long long v15 = *a4;
  id v12 = (_OWORD *)re::BucketArray<re::RenderLine,2048ul>::addUninitialized(v11);
  *id v12 = v13;
  v12[1] = v14;
  void v12[2] = v15;
  atomic_store(1u, re::needDebugRendererThisFrame);
  os_unfair_lock_unlock(v10);
}

void re::DebugRenderer::drawArrow(os_unfair_lock_s *a1, float32x4_t *a2, float32x4_t *a3, long long *a4, int a5, float a6)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  float32x4_t v6 = vsubq_f32(*a3, *a2);
  float32x4_t v7 = vmulq_f32(v6, v6);
  LODWORD(v8) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).u32[0];
  if (fabsf(v8) >= 1.0e-10)
  {
    float v13 = v8;
    float32x2_t v14 = vrsqrte_f32((float32x2_t)LODWORD(v8));
    float32x2_t v15 = vmul_f32(v14, vrsqrts_f32((float32x2_t)LODWORD(v13), vmul_f32(v14, v14)));
    float32x4_t v24 = vmulq_n_f32(v6, vmul_f32(v15, vrsqrts_f32((float32x2_t)LODWORD(v13), vmul_f32(v15, v15))).f32[0]);
    re::DebugRenderer::drawLine(a1, (long long *)a2, (long long *)a3, a4, a5);
    if (fabsf(v24.f32[2]) >= 0.00001)
    {
      v17.i32[0] = 0;
      v17.f32[1] = -v24.f32[2];
      float32x4_t v16 = v24;
      v17.i64[1] = v24.u32[1];
    }
    else
    {
      float32x4_t v16 = v24;
      v17.i64[1] = 0;
      v17.f32[0] = -v24.f32[1];
      v17.i32[1] = v24.i32[0];
    }
    int32x4_t v18 = (int32x4_t)vmulq_f32(v17, v17);
    v18.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v18, 2), vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1))).u32[0];
    float32x2_t v19 = vrsqrte_f32((float32x2_t)v18.u32[0]);
    float32x2_t v20 = vmul_f32(v19, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v19, v19)));
    float32x4_t v21 = vmulq_n_f32(v17, vmul_f32(v20, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v20, v20))).f32[0]);
    float32x4_t v22 = vsubq_f32(*a3, vmulq_n_f32(v16, a6));
    float32x4_t v23 = vmulq_n_f32(v21, a6 * 0.25);
    v27[0] = *a3;
    v27[1] = vaddq_f32(v22, v23);
    long long v28 = *a4;
    long long v29 = v27[0];
    float32x4_t v30 = vsubq_f32(v22, v23);
    long long v31 = v28;
    v26[0] = v27;
    v26[1] = 2;
    re::DebugRenderer::drawLines(a1, (uint64_t)v26, a5);
  }
}

void re::DebugRenderer::drawAxis(os_unfair_lock_s *a1, float32x4_t *a2, int a3, float a4, float a5)
{
  float v8 = a5 / a4;
  v10.i64[0] = 0;
  LODWORD(v11) = 0;
  *((float *)&v11 + 1) = a4;
  v10.i64[1] = LODWORD(a4);
  float32x4_t v13 = *a2;
  float32x4_t v12 = a2[1];
  float32x4_t v14 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL);
  float32x4_t v15 = vnegq_f32(v12);
  float32x4_t v16 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)LODWORD(a4), (int32x4_t)LODWORD(a4)), (int8x16_t)LODWORD(a4), 0xCuLL), v15), (float32x4_t)LODWORD(a4), v14);
  int8x16_t v17 = (int8x16_t)vaddq_f32(v16, v16);
  float32x4_t v18 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v17, (int32x4_t)v17), v17, 0xCuLL);
  int8x16_t v19 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL), v15), v18, v14);
  float32x4_t v40 = vaddq_f32(*a2, vaddq_f32(vaddq_f32((float32x4_t)LODWORD(a4), vmulq_laneq_f32(v18, v12, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), v19, 0xCuLL)));
  float32x4_t v20 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL), v15), (float32x4_t)v11, v14);
  int8x16_t v21 = (int8x16_t)vaddq_f32(v20, v20);
  float32x4_t v22 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), v21, 0xCuLL);
  int8x16_t v23 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), (int8x16_t)v22, 0xCuLL), v15), v22, v14);
  float32x4_t v35 = vaddq_f32(v13, vaddq_f32(vaddq_f32((float32x4_t)v11, vmulq_laneq_f32(v22, v12, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v23), v23, 0xCuLL)));
  float32x4_t v39 = v35;
  float32x4_t v24 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v10, v10), (int8x16_t)v10, 0xCuLL), v15), (float32x4_t)v10, v14);
  int8x16_t v25 = (int8x16_t)vaddq_f32(v24, v24);
  float32x4_t v26 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), v25, 0xCuLL);
  float32x4_t v27 = vaddq_f32((float32x4_t)v10, vmulq_laneq_f32(v26, v12, 3));
  int8x16_t v28 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v26, (int32x4_t)v26), (int8x16_t)v26, 0xCuLL), v15), v26, v14);
  float32x4_t v36 = vaddq_f32(v13, vaddq_f32(v27, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v28, (int32x4_t)v28), v28, 0xCuLL)));
  float32x4_t v29 = vsubq_f32(v40, v13);
  float32x4_t v30 = vmulq_f32(v29, v29);
  long long v37 = xmmword_23435FD50;
  float32x4_t v38 = v36;
  re::DebugRenderer::drawArrow(a1, a2, &v40, &v37, a3, v8* sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).f32[0]));
  float32x4_t v31 = vsubq_f32(v35, *a2);
  float32x4_t v32 = vmulq_f32(v31, v31);
  long long v37 = xmmword_23435FD60;
  re::DebugRenderer::drawArrow(a1, a2, &v39, &v37, a3, v8* sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).f32[0]));
  float32x4_t v33 = vsubq_f32(v36, *a2);
  float32x4_t v34 = vmulq_f32(v33, v33);
  long long v37 = xmmword_23435FD80;
  re::DebugRenderer::drawArrow(a1, a2, &v38, &v37, a3, v8* sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1))).f32[0]));
}

{
  float v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  long long v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;

  float v8 = a5 / a4;
  uint64_t v9 = a2[1];
  int32x4_t v10 = a2[2];
  unint64_t v11 = a2[3];
  float32x4_t v12 = vaddq_f32(v11, vmlaq_f32(vmlaq_f32(vmulq_n_f32(*a2, a4), (float32x4_t)0, v9), (float32x4_t)0, v10));
  float32x4_t v13 = vmulq_f32(*a2, (float32x4_t)0);
  float32x4_t v14 = vaddq_f32(v11, vmlaq_f32(vmlaq_n_f32(v13, v9, a4), (float32x4_t)0, v10));
  int8x16_t v28 = vdivq_f32(v12, (float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3));
  float32x4_t v15 = vaddq_f32(v11, vmlaq_n_f32(vmlaq_f32(v13, (float32x4_t)0, v9), v10, a4));
  float32x4_t v22 = vdivq_f32(v14, (float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3));
  int8x16_t v23 = vdivq_f32(v15, (float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3));
  float32x4_t v26 = v23;
  float32x4_t v27 = v22;
  float32x4_t v16 = vsubq_f32(v28, v11);
  int8x16_t v17 = vmulq_f32(v16, v16);
  float32x4_t v24 = xmmword_23435FD50;
  int8x16_t v25 = v11;
  re::DebugRenderer::drawArrow(a1, &v25, &v28, &v24, a3, v8* sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).f32[0]));
  int8x16_t v25 = a2[3];
  float32x4_t v18 = vsubq_f32(v22, v25);
  int8x16_t v19 = vmulq_f32(v18, v18);
  float32x4_t v24 = xmmword_23435FD60;
  re::DebugRenderer::drawArrow(a1, &v25, &v27, &v24, a3, v8* sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0]));
  int8x16_t v25 = a2[3];
  float32x4_t v20 = vsubq_f32(v23, v25);
  int8x16_t v21 = vmulq_f32(v20, v20);
  float32x4_t v24 = xmmword_23435FD80;
  re::DebugRenderer::drawArrow(a1, &v25, &v26, &v24, a3, v8* sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).f32[0]));
}

void re::DebugRenderer::drawPoint(os_unfair_lock_s *a1, long long *a2, long long *a3, int a4, float a5)
{
  int32x4_t v10 = a1 + 114;
  os_unfair_lock_lock(a1 + 114);
  if (a4) {
    uint64_t v11 = (uint64_t)&a1[86];
  }
  else {
    uint64_t v11 = (uint64_t)&a1[100];
  }
  long long v13 = *a2;
  long long v14 = *a3;
  uint64_t v12 = re::BucketArray<re::RenderPoint,2048ul>::addUninitialized(v11);
  *(_OWORD *)uint64_t v12 = v13;
  *(_OWORD *)(v12 + 16) = v14;
  *(float *)(v12 + 32) = a5;
  atomic_store(1u, re::needDebugRendererThisFrame);
  os_unfair_lock_unlock(v10);
}

__n128 re::DebugRenderer::drawText(uint64_t a1, float32x4_t *a2, char *a3, const StringID *a4, long long *a5)
{
  float v5 = a2[1].f32[0];
  float v6 = a2[1].f32[1];
  float v7 = v5 + v5;
  float v8 = v6 + v6;
  float v9 = a2[1].f32[2];
  float v10 = a2[1].f32[3];
  float v11 = v9 + v9;
  float v12 = v5 * (float)(v5 + v5);
  float v13 = v6 * (float)(v6 + v6);
  float v14 = v9 * (float)(v9 + v9);
  float v15 = v7 * v6;
  float v16 = v7 * v9;
  float v17 = v8 * v9;
  float v18 = v7 * v10;
  float v19 = v8 * v10;
  float v20 = v11 * v10;
  v21.i32[3] = 0;
  v21.f32[0] = 1.0 - (float)(v13 + v14);
  v21.f32[1] = v15 + v20;
  v22.i32[3] = 0;
  v21.f32[2] = v16 - v19;
  v23.i32[3] = 0;
  v23.f32[0] = v15 - v20;
  v23.f32[1] = 1.0 - (float)(v12 + v14);
  v23.f32[2] = v17 + v18;
  v22.f32[0] = v16 + v19;
  v22.f32[1] = v17 - v18;
  v22.f32[2] = 1.0 - (float)(v12 + v13);
  float32x4_t v24 = *a2;
  float32x4_t v25 = vmulq_n_f32(v23, *(float *)vshrq_n_u64(*(uint64x2_t *)a2, 0x20uLL).i32);
  v28[0] = (__int128)vmulq_n_f32(v21, COERCE_FLOAT(*a2));
  v28[1] = (__int128)v25;
  long long v26 = (__int128)a2[2];
  HIDWORD(v26) = 1.0;
  id v28[2] = (__int128)vmulq_laneq_f32(v22, v24, 2);
  uint64_t v28[3] = v26;
  re::DebugRenderer::drawText(a1, v28, a3, a4, a5);
  return result;
}

void re::DebugRenderer::drawText(uint64_t a1, long long *a2, char *__s, const StringID *a4, long long *a5)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  float v10 = (re *)strlen(__s);
  unint64_t v11 = *(void *)(a1 + 8);
  float v12 = re::globalAllocators(v10);
  uint64_t v13 = re::PerFrameAllocatorManager::perFrameAllocator(v12[6], v11);
  float v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v13 + 32))(v13, (uint64_t)v10 + 1, 0);
  memcpy(v14, __s, (size_t)v10 + 1);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 336));
  re::StringID::StringID((re::StringID *)v19, a4);
  long long v15 = *a2;
  long long v16 = a2[1];
  long long v20 = *a5;
  long long v21 = v15;
  long long v17 = a2[2];
  long long v18 = a2[3];
  long long v22 = v16;
  long long v23 = v17;
  long long v24 = v18;
  float32x4_t v25 = v14;
  long long v26 = v10;
  uint64_t v27 = -1;
  re::DynamicArray<re::RenderText>::add((_anonymous_namespace_ *)(a1 + 296), v19);
  re::StringID::destroyString((re::StringID *)v19);
  atomic_store(1u, re::needDebugRendererThisFrame);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 336));
}

__n128 re::DynamicArray<re::RenderText>::add(_anonymous_namespace_ *this, uint64_t *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::RenderText>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + (v4 << 7);
  uint64_t v6 = *a2;
  *(void *)uint64_t v5 = *(void *)v5 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *(void *)uint64_t v5 = *a2 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(void *)(v5 + 8) = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)"";
  uint64_t v7 = a2[14];
  long long v8 = *((_OWORD *)a2 + 4);
  long long v9 = *((_OWORD *)a2 + 6);
  *(_OWORD *)(v5 + 8ArcSharedObject::ArcSharedObject(this, 0) = *((_OWORD *)a2 + 5);
  *(_OWORD *)(v5 + 96) = v9;
  *(_OWORD *)(v5 + 64) = v8;
  long long v11 = *((_OWORD *)a2 + 2);
  __n128 result = *((__n128 *)a2 + 3);
  *(_OWORD *)(v5 + 16) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(v5 + 32) = v11;
  *(__n128 *)(v5 + 48) = result;
  *(void *)(v5 + 112) = v7;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

__n128 re::DebugRenderer::drawCircle(os_unfair_lock_s *a1, float32x4_t *a2, int a3, long long *a4, int a5, __n128 result)
{
  if (a3 >= 1)
  {
    uint64_t v36 = v6;
    uint64_t v37 = v7;
    int v10 = a3;
    unsigned __int32 v32 = result.n128_u32[0];
    float v13 = 6.28318531 / (float)a3;
    __float2 v14 = __sincosf_stret(v13 * 0.5);
    float32x2_t v15 = vrsqrte_f32((float32x2_t)1065353216);
    float32x2_t v16 = vmul_f32(v15, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v15, v15)));
    v17.i64[1] = 1065353216;
    float32x4_t v18 = vmulq_n_f32((float32x4_t)xmmword_23435FD80, vmul_f32(v16, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v16, v16))).f32[0]);
    *(float32x2_t *)v17.f32 = vmul_n_f32(*(float32x2_t *)v18.f32, v14.__sinval);
    v19.f32[0] = vmuls_lane_f32(v14.__sinval, v18, 2);
    float32x4_t v20 = v17;
    v20.i32[2] = v19.i32[0];
    __n128 result = (__n128)v32;
    *(uint64_t *)((char *)v19.i64 + 4) = v17.i64[0];
    float32x4_t v30 = vnegq_f32(v20);
    float32x4_t v31 = v19;
    do
    {
      float32x4_t v21 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)result, (int32x4_t)result), (int8x16_t)result, 0xCuLL), v30), (float32x4_t)result, v31);
      int8x16_t v22 = (int8x16_t)vaddq_f32(v21, v21);
      float32x4_t v23 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), v22, 0xCuLL);
      int8x16_t v24 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v23), (int8x16_t)v23, 0xCuLL), v30), v23, v31);
      float32x4_t v25 = vaddq_f32(vaddq_f32((float32x4_t)result, vmulq_n_f32(v23, v14.__cosval)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), v24, 0xCuLL));
      float32x4_t v26 = *a2;
      float32x4_t v27 = a2[1];
      float32x4_t v28 = a2[2];
      float32x4_t v29 = a2[3];
      float32x4_t v35 = vaddq_f32(v29, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a2, result.n128_f32[0]), v27, (float32x2_t)result.n128_u64[0], 1), v28, (float32x4_t)result, 2));
      __n128 v33 = (__n128)v25;
      float32x4_t v34 = vaddq_f32(v29, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, v25.f32[0]), v27, *(float32x2_t *)v25.f32, 1), v28, v25, 2));
      re::DebugRenderer::drawLine(a1, (long long *)&v35, (long long *)&v34, a4, a5);
      __n128 result = v33;
      --v10;
    }
    while (v10);
  }
  return result;
}

__n128 re::DebugRenderer::drawBox(os_unfair_lock_s *a1, float32x4_t *a2, float *a3, long long *a4, int a5)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  float v5 = a3[1];
  float v6 = a3[5] - v5;
  float v7 = a3[2];
  float32x4_t v8 = a2[1];
  float32x4_t v9 = a2[2];
  float32x4_t v10 = a2[3];
  float32x4_t v11 = vmulq_n_f32(*a2, *a3);
  float32x4_t v12 = vmlaq_n_f32(v11, v8, v5);
  float32x4_t v13 = vmulq_n_f32(*a2, *a3 + (float)(a3[4] - *a3));
  float32x4_t v14 = vmlaq_n_f32(v13, v8, v5);
  float v15 = v7 + (float)(a3[6] - v7);
  float32x4_t v23 = vaddq_f32(v10, vmlaq_n_f32(v12, v9, v7));
  float32x4_t v24 = vaddq_f32(v10, vmlaq_n_f32(v14, v9, v7));
  float v16 = v5 + v6;
  float32x4_t v17 = vmlaq_n_f32(v11, v8, v16);
  float32x4_t v18 = vmlaq_n_f32(v13, v8, v16);
  long long v25 = *a4;
  float32x4_t v26 = v24;
  float32x4_t v27 = vaddq_f32(v10, vmlaq_n_f32(v14, v9, v15));
  long long v28 = v25;
  float32x4_t v29 = v27;
  float32x4_t v30 = vaddq_f32(v10, vmlaq_n_f32(v12, v9, v15));
  long long v31 = v25;
  float32x4_t v32 = v23;
  float32x4_t v33 = v30;
  long long v34 = v25;
  float32x4_t v35 = v23;
  float32x4_t v36 = vaddq_f32(v10, vmlaq_n_f32(v17, v9, v7));
  long long v37 = v25;
  float32x4_t v38 = v24;
  long long v19 = *a4;
  float32x4_t v39 = vaddq_f32(v10, vmlaq_n_f32(v18, v9, v7));
  long long v40 = v19;
  float32x4_t v41 = v27;
  float32x4_t v42 = vaddq_f32(v10, vmlaq_n_f32(v18, v9, v15));
  long long v43 = v19;
  float32x4_t v44 = v30;
  float32x4_t v45 = vaddq_f32(v10, vmlaq_n_f32(v17, v9, v15));
  long long v46 = v19;
  float32x4_t v47 = v36;
  float32x4_t v48 = v39;
  long long v49 = v19;
  float32x4_t v50 = v39;
  float32x4_t v51 = v42;
  long long v52 = v19;
  float32x4_t v53 = v42;
  float32x4_t v54 = v45;
  long long v55 = v19;
  float32x4_t v56 = v36;
  long long v20 = *a4;
  float32x4_t v57 = v45;
  long long v58 = v20;
  v22[0] = &v23;
  v22[1] = 12;
  re::DebugRenderer::drawLines(a1, (uint64_t)v22, a5);
  return result;
}

void re::DebugRenderer::drawSphere(os_unfair_lock_s *a1, uint64_t a2, int a3, long long *a4, int a5, float a6)
{
  float32x4_t v11 = *(float32x4_t *)(a2 + 16);
  float32x4_t v53 = *(float32x4_t *)a2;
  float32x4_t v54 = v11;
  float32x4_t v13 = *(float32x4_t *)(a2 + 48);
  __n128 v55 = *(__n128 *)(a2 + 32);
  __n128 v12 = v55;
  float32x4_t v56 = v13;
  v12.n128_f32[0] = a6;
  re::DebugRenderer::drawCircle(a1, &v53, a3, a4, a5, v12);
  uint64_t v14 = 0;
  float32x2_t v15 = vrsqrte_f32((float32x2_t)1065353216);
  float32x2_t v16 = vmul_f32(v15, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v15, v15)));
  LODWORD(v52) = vmul_f32(v16, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v16, v16))).u32[0];
  int8x16_t v17 = (int8x16_t)vmulq_n_f32((float32x4_t)xmmword_23435FD50, v52);
  v16.f32[0] = 0.70711 * *(float *)v17.i32;
  float v18 = v16.f32[0] + v16.f32[0];
  v16.f32[0] = v16.f32[0] * (float)(v16.f32[0] + v16.f32[0]);
  *(float32x2_t *)v17.i8 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 4uLL), (float32x2_t)vdup_n_s32(0x3F3504F3u));
  float32x2_t v19 = vadd_f32(*(float32x2_t *)v17.i8, *(float32x2_t *)v17.i8);
  float32x2_t v20 = vmul_f32(*(float32x2_t *)v17.i8, v19);
  float v21 = v18 * *(float *)v17.i32;
  float v22 = vmuls_lane_f32(v18, *(float32x2_t *)v17.i8, 1);
  *(float *)v17.i32 = vmuls_lane_f32(v19.f32[0], *(float32x2_t *)v17.i8, 1);
  float v23 = v18 * 0.70711;
  float v24 = 0.70711 * v19.f32[0];
  v19.f32[0] = vmuls_lane_f32(0.70711, v19, 1);
  HIDWORD(v25) = 0;
  *(float *)&long long v25 = 1.0 - vaddv_f32(v20);
  *((float *)&v25 + 1) = v21 + v19.f32[0];
  HIDWORD(v26) = 0;
  *((float *)&v25 + 2) = v22 - v24;
  HIDWORD(v27) = 0;
  *(float *)&long long v27 = v21 - v19.f32[0];
  *((float *)&v27 + 1) = 1.0 - (float)(v16.f32[0] + v20.f32[1]);
  *((float *)&v27 + 2) = *(float *)v17.i32 + v23;
  *(float *)&long long v26 = v22 + v24;
  *((float *)&v26 + 1) = *(float *)v17.i32 - v23;
  *((float *)&v26 + 2) = 1.0 - (float)(v16.f32[0] + v20.f32[0]);
  float32x4_t v28 = v53;
  float32x4_t v29 = v54;
  float32x4_t v30 = (float32x4_t)v55;
  float32x4_t v31 = v56;
  long long v57 = v25;
  long long v58 = v27;
  long long v59 = v26;
  long long v60 = xmmword_23435FBB0;
  do
  {
    *(float32x4_t *)((char *)&v61 + v14) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v28, COERCE_FLOAT(*(long long *)((char *)&v57 + v14))), v29, *(float32x2_t *)((char *)&v57 + v14), 1), v30, *(float32x4_t *)((char *)&v57 + v14), 2), v31, *(float32x4_t *)((char *)&v57 + v14), 3);
    v14 += 16;
  }
  while (v14 != 64);
  __n128 v32 = v62;
  float32x4_t v50 = v61;
  float32x4_t v51 = (float32x4_t)v62;
  float32x4_t v48 = v64;
  float32x4_t v49 = v63;
  float32x4_t v53 = v61;
  float32x4_t v54 = (float32x4_t)v62;
  __n128 v55 = (__n128)v63;
  float32x4_t v56 = v64;
  v32.n128_f32[0] = a6;
  re::DebugRenderer::drawCircle(a1, &v53, a3, a4, a5, v32);
  uint64_t v33 = 0;
  int8x16_t v34 = (int8x16_t)vmulq_n_f32((float32x4_t)xmmword_23435FD60, v52);
  float v35 = 0.70711 * *(float *)v34.i32;
  float v36 = v35 + v35;
  float v37 = v35 * (float)(v35 + v35);
  *(float32x2_t *)v34.i8 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 4uLL), (float32x2_t)vdup_n_s32(0x3F3504F3u));
  float32x2_t v38 = vadd_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8);
  float32x2_t v39 = vmul_f32(*(float32x2_t *)v34.i8, v38);
  float v40 = v36 * *(float *)v34.i32;
  float v41 = vmuls_lane_f32(v36, *(float32x2_t *)v34.i8, 1);
  *(float *)v34.i32 = vmuls_lane_f32(v38.f32[0], *(float32x2_t *)v34.i8, 1);
  float v42 = v36 * 0.70711;
  float v43 = 0.70711 * v38.f32[0];
  v38.f32[0] = vmuls_lane_f32(0.70711, v38, 1);
  HIDWORD(v44) = 0;
  *(float *)&long long v44 = 1.0 - vaddv_f32(v39);
  *((float *)&v44 + 1) = v40 + v38.f32[0];
  *((float *)&v44 + 2) = v41 - v43;
  HIDWORD(v45) = 0;
  *(float *)&long long v45 = v40 - v38.f32[0];
  *((float *)&v45 + 1) = 1.0 - (float)(v37 + v39.f32[1]);
  *((float *)&v45 + 2) = *(float *)v34.i32 + v42;
  *(float *)&long long v46 = v41 + v43;
  *((float *)&v46 + 1) = *(float *)v34.i32 - v42;
  *((void *)&v46 + 1) = COERCE_UNSIGNED_INT(1.0 - (float)(v37 + v39.f32[0]));
  long long v57 = v44;
  long long v58 = v45;
  long long v59 = v46;
  long long v60 = xmmword_23435FBB0;
  do
  {
    *(float32x4_t *)((char *)&v61 + v33) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v50, COERCE_FLOAT(*(long long *)((char *)&v57 + v33))), v51, *(float32x2_t *)((char *)&v57 + v33), 1), v49, *(float32x4_t *)((char *)&v57 + v33), 2), v48, *(float32x4_t *)((char *)&v57 + v33), 3);
    v33 += 16;
  }
  while (v33 != 64);
  __n128 v47 = (__n128)v61;
  float32x4_t v53 = v61;
  float32x4_t v54 = (float32x4_t)v62;
  __n128 v55 = (__n128)v63;
  float32x4_t v56 = v64;
  v47.n128_f32[0] = a6;
  re::DebugRenderer::drawCircle(a1, &v53, a3, a4, a5, v47);
}

void re::DebugRenderer::appendDebugTextToRenderFrame(os_unfair_lock_s *this, re::RenderFrame *a2, const re::WeakStringID *a3)
{
  unsigned __int8 v3 = atomic_load(re::needDebugRendererThisFrame);
  if (v3)
  {
    float v7 = this + 84;
    os_unfair_lock_lock(this + 84);
    if (*(void *)&this[78]._os_unfair_lock_opaque)
    {
      unint64_t v8 = *(void *)&this[76]._os_unfair_lock_opaque;
      uint64_t v9 = **(void **)(re::RenderFrameData::stream((re::RenderFrame *)((char *)a2 + 264), a3) + 48);
      (*(void (**)(void))(v9 + 712))();
      re::DynamicArray<re::RenderText>::clear((uint64_t)&this[74]);
      if (*(void *)&this[76]._os_unfair_lock_opaque < v8) {
        re::DynamicArray<re::RenderText>::setCapacity(&this[74]._os_unfair_lock_opaque, v8);
      }
    }
    os_unfair_lock_unlock(v7);
  }
}

void re::DynamicArray<re::RenderText>::clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2)
  {
    unsigned __int8 v3 = *(re::StringID **)(a1 + 32);
    uint64_t v4 = v2 << 7;
    do
    {
      re::StringID::destroyString(v3);
      unsigned __int8 v3 = (re::StringID *)((char *)v3 + 128);
      v4 -= 128;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

void re::DebugRenderer::render(uint64_t a1, unsigned __int8 *a2, RenderTargetInfo *a3, int a4, uint64_t a5, re::FrameContext *a6, uint64_t a7, uint64_t a8, long long a9, long long a10, long long a11, BOOL a12, uint64_t a13, uint64_t a14, re::RenderManager *a15, long long a16, long long a17, long long a18, long long a19, uint64_t a20,uint64_t a21,long long a22,int a23,int a24,RenderTargetInfo *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,long long a38,long long a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,long long a44,long long a45,long long a46,long long a47,long long a48,long long a49,long long a50,long long a51,long long a52,uint64_t a53,uint64_t a54)
{
  a54 = *MEMORY[0x263EF8340];
  unsigned __int8 v54 = atomic_load(re::needDebugRendererThisFrame);
  if ((v54 & 1) == 0) {
    return;
  }
  (*(void (**)(void, char *, void))(*(void *)(a5 + 8) + 168))(**(void **)(a5 + 8), sel_setTriangleFillMode_, 0);
  (*(void (**)(void, char *, void))(*(void *)(a5 + 8) + 64))(**(void **)(a5 + 8), sel_setCullMode_, 0);
  unint64_t v61 = *(void *)(a8 + 16);
  if (!v61)
  {
    a41 = 0;
    a47 = 0u;
    a48 = 0u;
    a45 = 0u;
    a46 = 0u;
    a44 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(a49) = 136315906;
    *(void *)((char *)&a49 + 4) = "operator[]";
    WORD6(a49) = 1024;
    *(_DWORD *)((char *)&a49 + 14) = 797;
    WORD1(a5ArcSharedObject::ArcSharedObject(this, 0) = 2048;
    *(void *)((char *)&a50 + 4) = 0;
    WORD6(a5ArcSharedObject::ArcSharedObject(this, 0) = 2048;
    *(void *)((char *)&a50 + 14) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_64;
  }
  unint64_t v62 = *(void *)(a7 + 16);
  if (!v62)
  {
LABEL_64:
    a41 = 0;
    a47 = 0u;
    a48 = 0u;
    a45 = 0u;
    a46 = 0u;
    a44 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(a49) = 136315906;
    *(void *)((char *)&a49 + 4) = "operator[]";
    WORD6(a49) = 1024;
    *(_DWORD *)((char *)&a49 + 14) = 797;
    WORD1(a5ArcSharedObject::ArcSharedObject(this, 0) = 2048;
    *(void *)((char *)&a50 + 4) = 0;
    WORD6(a5ArcSharedObject::ArcSharedObject(this, 0) = 2048;
    *(void *)((char *)&a50 + 14) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_65:
    a41 = 0;
    a47 = 0u;
    a48 = 0u;
    a45 = 0u;
    a46 = 0u;
    a44 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(a49) = 136315906;
    *(void *)((char *)&a49 + 4) = "operator[]";
    WORD6(a49) = 1024;
    *(_DWORD *)((char *)&a49 + 14) = 797;
    WORD1(a5ArcSharedObject::ArcSharedObject(this, 0) = 2048;
    *(void *)((char *)&a50 + 4) = 1;
    WORD6(a5ArcSharedObject::ArcSharedObject(this, 0) = 2048;
    *(void *)((char *)&a50 + 14) = 1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_66:
    a41 = 0;
    a47 = 0u;
    a48 = 0u;
    a45 = 0u;
    a46 = 0u;
    a44 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(a49) = 136315906;
    *(void *)((char *)&a49 + 4) = "operator[]";
    WORD6(a49) = 1024;
    *(_DWORD *)((char *)&a49 + 14) = 797;
    WORD1(a5ArcSharedObject::ArcSharedObject(this, 0) = 2048;
    *(void *)((char *)&a50 + 4) = 1;
    WORD6(a5ArcSharedObject::ArcSharedObject(this, 0) = 2048;
    *(void *)((char *)&a50 + 14) = 1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v63 = 0;
  int v64 = BYTE8(a9);
  uint64_t v65 = (unsigned __int8 *)a9;
  int var1 = a3->var1;
  uint64_t v66 = *(float32x4_t **)(a8 + 32);
  uint64_t v67 = *(void *)(a7 + 32);
  float32x4_t v68 = *v66;
  float32x4_t v69 = v66[1];
  float32x4_t v70 = v66[2];
  float32x4_t v71 = v66[3];
  simd_float4x4 v72 = *(simd_float4x4 *)v67;
  a49 = *(_OWORD *)v67;
  a50 = (__int128)v72.columns[1];
  a51 = (__int128)v72.columns[2];
  a52 = (__int128)v72.columns[3];
  do
  {
    *(long long *)((char *)&a44 + v63) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v68, COERCE_FLOAT(*(long long *)((char *)&a49 + v63))), v69, *(float32x2_t *)((char *)&a49 + v63), 1), v70, *(float32x4_t *)((char *)&a49 + v63), 2), v71, *(float32x4_t *)((char *)&a49 + v63), 3);
    v63 += 16;
  }
  while (v63 != 64);
  long long v73 = a44;
  long long v74 = a45;
  long long v75 = a46;
  long long v76 = a47;
  long long v77 = xmmword_23435FBB0;
  long long v78 = xmmword_23435FD80;
  long long v79 = xmmword_23435FD60;
  long long v80 = xmmword_23435FD50;
  if (*(unsigned char *)a9 != 2) {
    goto LABEL_12;
  }
  if (v61 <= 1) {
    goto LABEL_65;
  }
  if (v62 <= 1) {
    goto LABEL_66;
  }
  uint64_t v81 = 0;
  float32x4_t v82 = v66[4];
  float32x4_t v83 = v66[5];
  float32x4_t v84 = v66[6];
  float32x4_t v85 = v66[7];
  long long v86 = *(_OWORD *)(v67 + 80);
  long long v87 = *(_OWORD *)(v67 + 96);
  long long v88 = *(_OWORD *)(v67 + 112);
  a49 = *(_OWORD *)(v67 + 64);
  a50 = v86;
  a51 = v87;
  a52 = v88;
  do
  {
    *(long long *)((char *)&a44 + v81) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v82, COERCE_FLOAT(*(long long *)((char *)&a49 + v81))), v83, *(float32x2_t *)((char *)&a49 + v81), 1), v84, *(float32x4_t *)((char *)&a49 + v81), 2), v85, *(float32x4_t *)((char *)&a49 + v81), 3);
    v81 += 16;
  }
  while (v81 != 64);
  long long v80 = a44;
  long long v79 = a45;
  long long v78 = a46;
  long long v77 = a47;
LABEL_12:
  long long v131 = v80;
  long long v141 = v79;
  long long v143 = v78;
  long long v145 = v77;
  uint64_t v138 = a2;
  long long v125 = v73;
  long long v127 = v74;
  long long vars0a = v75;
  long long v139 = v76;
  simd_float4x4 v153 = __invert_f4(v72);
  a39 = (__int128)vmlaq_f32(vmlaq_f32((float32x4_t)v153.columns[0], (float32x4_t)0, (float32x4_t)v153.columns[1]), (float32x4_t)0, (float32x4_t)v153.columns[2]);
  a38 = (__int128)vmlaq_f32(vaddq_f32((float32x4_t)v153.columns[1], vmulq_f32((float32x4_t)v153.columns[0], (float32x4_t)0)), (float32x4_t)0, (float32x4_t)v153.columns[2]);
  re::FrameContext::perFrameAlloc(a6, 0x100uLL, 0x100uLL, (uint64_t)&a44);
  uint64_t v147 = a45;
  uint64_t v148 = DWORD2(a44);
  uint64_t v89 = a44 + DWORD2(a44);
  *(_OWORD *)uint64_t v89 = v125;
  *(_OWORD *)(v89 + 16) = v127;
  *(_OWORD *)(v89 + 32) = vars0a;
  *(_OWORD *)(v89 + 48) = v139;
  *(_OWORD *)(v89 + 64) = v131;
  *(_OWORD *)(v89 + 8ArcSharedObject::ArcSharedObject(this, 0) = v141;
  *(_OWORD *)(v89 + 96) = v143;
  *(_OWORD *)(v89 + 112) = v145;
  *(_DWORD *)(v89 + 128) = 1065353216;
  *(_OWORD *)(v89 + 132) = 0u;
  *(_OWORD *)(v89 + 148) = 0u;
  *(_OWORD *)(v89 + 164) = 0u;
  *(_OWORD *)(v89 + 18ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v89 + 196) = 0u;
  *(_OWORD *)(v89 + 212) = 0u;
  *(_OWORD *)(v89 + 228) = 0u;
  *(_OWORD *)(v89 + 24ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  a46 = 0u;
  a47 = 0u;
  a45 = 0u;
  re::FrameContext::perFrameAlloc(a6, 0x80uLL, 0x80uLL, (uint64_t)&a49);
  uint64_t v144 = a50;
  uint64_t v146 = DWORD2(a49);
  uint64_t v90 = a49 + DWORD2(a49);
  *(_DWORD *)(v90 + 16) = 0;
  *(_DWORD *)(v90 + 28) = 1;
  *(_OWORD *)(v90 + 32) = a44;
  *(_OWORD *)(v90 + 48) = a45;
  *(_OWORD *)(v90 + 64) = a46;
  *(_OWORD *)(v90 + 8ArcSharedObject::ArcSharedObject(this, 0) = a47;
  a50 = 0u;
  a51 = 0u;
  int v91 = *v65;
  re::FrameContext::perFrameAlloc(a6, 0x400uLL, 0x100uLL, (uint64_t)&a41);
  uint64_t v140 = a43;
  uint64_t v142 = a42;
  uint64_t v92 = a41 + a42;
  *(_OWORD *)uint64_t v92 = xmmword_23435FD50;
  *(_OWORD *)(v92 + 16) = xmmword_23435FD60;
  *(_OWORD *)(v92 + 32) = xmmword_23435FD80;
  *(_OWORD *)(v92 + 48) = xmmword_23435FBB0;
  *(_OWORD *)(v92 + 64) = xmmword_23435FD50;
  *(_OWORD *)(v92 + 8ArcSharedObject::ArcSharedObject(this, 0) = xmmword_23435FD60;
  *(_OWORD *)(v92 + 96) = xmmword_23435FD80;
  *(_OWORD *)(v92 + 112) = xmmword_23435FBB0;
  *(_OWORD *)(v92 + 128) = xmmword_23435FD50;
  *(_OWORD *)(v92 + 144) = xmmword_23435FD60;
  *(_OWORD *)(v92 + 16ArcSharedObject::ArcSharedObject(this, 0) = xmmword_23435FD80;
  *(_OWORD *)(v92 + 176) = xmmword_23435FBB0;
  *(_OWORD *)(v92 + 192) = xmmword_23435FD50;
  *(_OWORD *)(v92 + 208) = xmmword_23435FD60;
  *(_OWORD *)(v92 + 224) = xmmword_23435FD80;
  *(_OWORD *)(v92 + 24ArcSharedObject::ArcSharedObject(this, 0) = xmmword_23435FBB0;
  *(_OWORD *)(v92 + 2re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56) = xmmword_23435FD50;
  *(_OWORD *)(v92 + 272) = xmmword_23435FD60;
  *(_OWORD *)(v92 + 288) = xmmword_23435FD80;
  *(_OWORD *)(v92 + 304) = xmmword_23435FBB0;
  *(_OWORD *)(v92 + 32ArcSharedObject::ArcSharedObject(this, 0) = xmmword_23435FD50;
  *(_OWORD *)(v92 + 336) = xmmword_23435FD60;
  *(_OWORD *)(v92 + 352) = xmmword_23435FD80;
  *(_OWORD *)(v92 + 368) = xmmword_23435FBB0;
  *(_OWORD *)(v92 + 384) = xmmword_23435FD50;
  *(_OWORD *)(v92 + 40ArcSharedObject::ArcSharedObject(this, 0) = xmmword_23435FD60;
  *(_OWORD *)(v92 + 416) = xmmword_23435FD80;
  *(_OWORD *)(v92 + 432) = xmmword_23435FBB0;
  *(_OWORD *)(v92 + 448) = xmmword_23435FD50;
  *(_OWORD *)(v92 + 464) = xmmword_23435FD60;
  *(_OWORD *)(v92 + 48ArcSharedObject::ArcSharedObject(this, 0) = xmmword_23435FD80;
  *(_OWORD *)(v92 + 496) = xmmword_23435FBB0;
  *(_OWORD *)(v92 + 512) = xmmword_23435FD50;
  *(_OWORD *)(v92 + 528) = xmmword_23435FD60;
  *(_OWORD *)(v92 + 544) = xmmword_23435FD80;
  *(_OWORD *)(v92 + 56ArcSharedObject::ArcSharedObject(this, 0) = xmmword_23435FBB0;
  *(_OWORD *)(v92 + 576) = xmmword_23435FD50;
  *(_OWORD *)(v92 + 592) = xmmword_23435FD60;
  *(_OWORD *)(v92 + 608) = xmmword_23435FD80;
  *(_OWORD *)(v92 + 624) = xmmword_23435FBB0;
  *(_OWORD *)(v92 + 64ArcSharedObject::ArcSharedObject(this, 0) = xmmword_23435FD50;
  *(_OWORD *)(v92 + 6re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56) = xmmword_23435FD60;
  *(_OWORD *)(v92 + 672) = xmmword_23435FD80;
  *(_OWORD *)(v92 + 688) = xmmword_23435FBB0;
  *(_OWORD *)(v92 + 704) = xmmword_23435FD50;
  *(_OWORD *)(v92 + 72ArcSharedObject::ArcSharedObject(this, 0) = xmmword_23435FD60;
  *(_OWORD *)(v92 + 736) = xmmword_23435FD80;
  *(_OWORD *)(v92 + 752) = xmmword_23435FBB0;
  *(_OWORD *)(v92 + 88ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v92 + 896) = 0u;
  *(_OWORD *)(v92 + 848) = 0u;
  *(_OWORD *)(v92 + 864) = 0u;
  *(_OWORD *)(v92 + 816) = 0u;
  *(_OWORD *)(v92 + 832) = 0u;
  *(_OWORD *)(v92 + 784) = 0u;
  *(_OWORD *)(v92 + 80ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v92 + 768) = 0u;
  *(_DWORD *)(v92 + 94ArcSharedObject::ArcSharedObject(this, 0) = v91;
  int v137 = v64;
  *(_DWORD *)(v92 + 944) = v64;
  *(_OWORD *)(v92 + 96ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)(v92 + 976) = a49;
  *(_OWORD *)(v92 + 992) = a50;
  *(_OWORD *)(v92 + 1008) = a51;
  a30 = 0;
  a31 = 0;
  a26 = 0;
  a27 = 0;
  a28 = 0;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 288));
  uint64_t v93 = *(void *)(a1 + 216);
  if (v93)
  {
    uint64_t v94 = 2 * v93;
    if (var1) {
      uint64_t v94 = 24 * v93;
    }
    re::FrameContext::perFrameAlloc(a6, 32 * v94, 0x10uLL, (uint64_t)&a41);
    uint64_t v95 = a43;
    unsigned int v149 = a42;
    a35 = a41;
    a36 = a42;
    a37 = a43;
    re::DebugRenderer::render(re::RenderManager &,re::RenderTargetInfo const&,re::StencilInfo const&,re::mtl::RenderCommandEncoder const&,re::FrameContext &,re::DynamicArray<re::Matrix4x4<float>> const&,re::DynamicArray<re::Matrix4x4<float>> const&,unsigned char const&,BOOL)::$_0::operator()(a1 + 176, v93, &a35, var1 == 0);
    uint64_t v126 = v149;
  }
  else
  {
    uint64_t v126 = 0;
    uint64_t v95 = 0;
  }
  uint64_t v150 = v65;
  uint64_t v96 = *(void *)(a1 + 272);
  if (v96)
  {
    uint64_t v97 = 2 * v96;
    if (var1) {
      uint64_t v97 = 24 * v96;
    }
    re::FrameContext::perFrameAlloc(a6, 32 * v97, 0x10uLL, (uint64_t)&a41);
    unsigned int v134 = a42;
    a32 = a41;
    a33 = a42;
    uint64_t v132 = a43;
    a34 = a43;
    re::DebugRenderer::render(re::RenderManager &,re::RenderTargetInfo const&,re::StencilInfo const&,re::mtl::RenderCommandEncoder const&,re::FrameContext &,re::DynamicArray<re::Matrix4x4<float>> const&,re::DynamicArray<re::Matrix4x4<float>> const&,unsigned char const&,BOOL)::$_0::operator()(a1 + 232, v96, &a32, var1 == 0);
    uint64_t vars0 = v134;
  }
  else
  {
    uint64_t vars0 = 0;
    uint64_t v132 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 288));
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 456));
  uint64_t v98 = *(void *)(a1 + 384);
  if (v98)
  {
    re::FrameContext::perFrameAlloc(a6, 192 * v98, 0x10uLL, (uint64_t)&a41);
    unsigned int v135 = a42;
    a29 = a41;
    a30 = a42;
    uint64_t v124 = a43;
    a31 = a43;
    re::DebugRenderer::render(re::RenderManager &,re::RenderTargetInfo const&,re::StencilInfo const&,re::mtl::RenderCommandEncoder const&,re::FrameContext &,re::DynamicArray<re::Matrix4x4<float>> const&,re::DynamicArray<re::Matrix4x4<float>> const&,unsigned char const&,BOOL)::$_1::operator()(a1 + 344, v98, (uint64_t)&a29, (float32x4_t *)&a39, (float32x4_t *)&a38);
    uint64_t v128 = v135;
  }
  else
  {
    uint64_t v128 = 0;
    uint64_t v124 = 0;
  }
  uint64_t v99 = *(void *)(a1 + 440);
  if (v99)
  {
    re::FrameContext::perFrameAlloc(a6, 192 * v99, 0x10uLL, (uint64_t)&a41);
    LODWORD(v133) = a42;
    a26 = a41;
    a27 = a42;
    uint64_t v136 = a43;
    a28 = a43;
    re::DebugRenderer::render(re::RenderManager &,re::RenderTargetInfo const&,re::StencilInfo const&,re::mtl::RenderCommandEncoder const&,re::FrameContext &,re::DynamicArray<re::Matrix4x4<float>> const&,re::DynamicArray<re::Matrix4x4<float>> const&,unsigned char const&,BOOL)::$_1::operator()(a1 + 400, v99, (uint64_t)&a26, (float32x4_t *)&a39, (float32x4_t *)&a38);
    uint64_t v133 = v133;
  }
  else
  {
    uint64_t v133 = 0;
    uint64_t v136 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 456));
  if (v93)
  {
    (*(void (**)(void, char *, id))(*(void *)(a5 + 8) + 152))(**(void **)(a5 + 8), sel_pushDebugGroup_, objc_msgSend(NSString, sel_stringWithCString_encoding_, "DebugRenderer (lines)", 4));
    if ((a3->var0.var2 - 250) <= 0xA && ((1 << (LOBYTE(a3->var0.var2) + 6)) & 0x425) != 0) {
      uint64_t v100 = (void *)(a1 + 16);
    }
    else {
      uint64_t v100 = (void *)(a1 + 24);
    }
    (*(void (**)(void, char *, void))(*(void *)(a5 + 8) + 112))(**(void **)(a5 + 8), sel_setDepthStencilState_, *v100);
    uint64_t v101 = (void *)re::DebugRenderer::pipelineState((re::DebugRenderer *)a1, (re::RenderManager *)v138, a3);
    (*(void (**)(void, char *, void))(*(void *)(a5 + 8) + 56))(**(void **)(a5 + 8), sel_setRenderPipelineState_, *v101);
    (*(void (**)(void, char *, uint64_t, uint64_t, void))(*(void *)(a5 + 8) + 16))(**(void **)(a5 + 8), sel_setVertexBuffer_offset_atIndex_, v95, v126, 0);
    (*(void (**)(void, char *, uint64_t, uint64_t, uint64_t))(*(void *)(a5 + 8) + 16))(**(void **)(a5 + 8), sel_setVertexBuffer_offset_atIndex_, v147, v148, 1);
    (*(void (**)(void, char *, uint64_t, uint64_t, uint64_t))(*(void *)(a5 + 8) + 16))(**(void **)(a5 + 8), sel_setVertexBuffer_offset_atIndex_, v144, v146, 2);
    (*(void (**)(void, char *, uint64_t, uint64_t, uint64_t))(*(void *)(a5 + 8) + 16))(**(void **)(a5 + 8), sel_setVertexBuffer_offset_atIndex_, v140, v142, 3);
    re::setVertexAmplificationCount((_anonymous_namespace_ *)v138[302], v137, *v150, 0xFFFF, a5, v102);
    if (v137) {
      uint64_t v103 = 1;
    }
    else {
      uint64_t v103 = *v150;
    }
    long long v104 = *(uint64_t **)(a5 + 8);
    uint64_t v105 = *v104;
    uint64_t v106 = (void (*)(uint64_t, char *, uint64_t, void, uint64_t, uint64_t))v104[24];
    if (var1)
    {
      uint64_t v107 = 24 * v93;
      uint64_t v108 = 3;
    }
    else
    {
      uint64_t v107 = 2 * v93;
      uint64_t v108 = 1;
    }
    v106(v105, sel_drawPrimitives_vertexStart_vertexCount_instanceCount_, v108, 0, v107, v103);
    (*(void (**)(void, char *))(*(void *)(a5 + 8) + 160))(**(void **)(a5 + 8), sel_popDebugGroup);
  }
  if (v98)
  {
    (*(void (**)(void, char *, id))(*(void *)(a5 + 8) + 152))(**(void **)(a5 + 8), sel_pushDebugGroup_, objc_msgSend(NSString, sel_stringWithCString_encoding_, "DebugRenderer (points)", 4));
    if ((a3->var0.var2 - 250) <= 0xA && ((1 << (LOBYTE(a3->var0.var2) + 6)) & 0x425) != 0) {
      unint64_t v109 = (void *)(a1 + 16);
    }
    else {
      unint64_t v109 = (void *)(a1 + 24);
    }
    (*(void (**)(void, char *, void))(*(void *)(a5 + 8) + 112))(**(void **)(a5 + 8), sel_setDepthStencilState_, *v109);
    long long v110 = (void *)re::DebugRenderer::pipelineState((re::DebugRenderer *)a1, (re::RenderManager *)v138, a3);
    (*(void (**)(void, char *, void))(*(void *)(a5 + 8) + 56))(**(void **)(a5 + 8), sel_setRenderPipelineState_, *v110);
    (*(void (**)(void, char *, uint64_t, uint64_t, void))(*(void *)(a5 + 8) + 16))(**(void **)(a5 + 8), sel_setVertexBuffer_offset_atIndex_, v124, v128, 0);
    (*(void (**)(void, char *, uint64_t, uint64_t, uint64_t))(*(void *)(a5 + 8) + 16))(**(void **)(a5 + 8), sel_setVertexBuffer_offset_atIndex_, v147, v148, 1);
    (*(void (**)(void, char *, uint64_t, uint64_t, uint64_t))(*(void *)(a5 + 8) + 16))(**(void **)(a5 + 8), sel_setVertexBuffer_offset_atIndex_, v144, v146, 2);
    (*(void (**)(void, char *, uint64_t, uint64_t, uint64_t))(*(void *)(a5 + 8) + 16))(**(void **)(a5 + 8), sel_setVertexBuffer_offset_atIndex_, v140, v142, 3);
    re::setVertexAmplificationCount((_anonymous_namespace_ *)v138[302], v137, *v150, 0xFFFF, a5, v111);
    if (v137) {
      uint64_t v112 = 1;
    }
    else {
      uint64_t v112 = *v150;
    }
    (*(void (**)(void, char *, uint64_t, void, uint64_t, uint64_t))(*(void *)(a5 + 8) + 192))(**(void **)(a5 + 8), sel_drawPrimitives_vertexStart_vertexCount_instanceCount_, 3, 0, 6 * v98, v112);
    (*(void (**)(void, char *))(*(void *)(a5 + 8) + 160))(**(void **)(a5 + 8), sel_popDebugGroup);
  }
  if (v96)
  {
    (*(void (**)(void, char *, id))(*(void *)(a5 + 8) + 152))(**(void **)(a5 + 8), sel_pushDebugGroup_, objc_msgSend(NSString, sel_stringWithCString_encoding_, "DebugRenderer (lines - no depth)", 4));
    (*(void (**)(void, char *, void))(*(void *)(a5 + 8) + 112))(**(void **)(a5 + 8), sel_setDepthStencilState_, *(void *)(a1 + 24));
    unint64_t v113 = (void *)re::DebugRenderer::pipelineState((re::DebugRenderer *)a1, (re::RenderManager *)v138, a3);
    (*(void (**)(void, char *, void))(*(void *)(a5 + 8) + 56))(**(void **)(a5 + 8), sel_setRenderPipelineState_, *v113);
    (*(void (**)(void, char *, uint64_t, uint64_t, void))(*(void *)(a5 + 8) + 16))(**(void **)(a5 + 8), sel_setVertexBuffer_offset_atIndex_, v132, vars0, 0);
    (*(void (**)(void, char *, uint64_t, uint64_t, uint64_t))(*(void *)(a5 + 8) + 16))(**(void **)(a5 + 8), sel_setVertexBuffer_offset_atIndex_, v147, v148, 1);
    (*(void (**)(void, char *, uint64_t, uint64_t, uint64_t))(*(void *)(a5 + 8) + 16))(**(void **)(a5 + 8), sel_setVertexBuffer_offset_atIndex_, v144, v146, 2);
    (*(void (**)(void, char *, uint64_t, uint64_t, uint64_t))(*(void *)(a5 + 8) + 16))(**(void **)(a5 + 8), sel_setVertexBuffer_offset_atIndex_, v140, v142, 3);
    re::setVertexAmplificationCount((_anonymous_namespace_ *)v138[302], v137, *v150, 0xFFFF, a5, v114);
    if (v137) {
      uint64_t v115 = 1;
    }
    else {
      uint64_t v115 = *v150;
    }
    uint64_t v116 = *(uint64_t **)(a5 + 8);
    uint64_t v117 = *v116;
    char v118 = (void (*)(uint64_t, char *, uint64_t, void, uint64_t, uint64_t))v116[24];
    if (var1)
    {
      uint64_t v119 = 24 * v96;
      uint64_t v120 = 3;
    }
    else
    {
      uint64_t v119 = 2 * v96;
      uint64_t v120 = 1;
    }
    v118(v117, sel_drawPrimitives_vertexStart_vertexCount_instanceCount_, v120, 0, v119, v115);
    (*(void (**)(void, char *))(*(void *)(a5 + 8) + 160))(**(void **)(a5 + 8), sel_popDebugGroup);
  }
  if (v99)
  {
    (*(void (**)(void, char *, id))(*(void *)(a5 + 8) + 152))(**(void **)(a5 + 8), sel_pushDebugGroup_, objc_msgSend(NSString, sel_stringWithCString_encoding_, "DebugRenderer (points - no depth)", 4));
    (*(void (**)(void, char *, void))(*(void *)(a5 + 8) + 112))(**(void **)(a5 + 8), sel_setDepthStencilState_, *(void *)(a1 + 24));
    unsigned int v121 = (void *)re::DebugRenderer::pipelineState((re::DebugRenderer *)a1, (re::RenderManager *)v138, a3);
    (*(void (**)(void, char *, void))(*(void *)(a5 + 8) + 56))(**(void **)(a5 + 8), sel_setRenderPipelineState_, *v121);
    (*(void (**)(void, char *, uint64_t, uint64_t, void))(*(void *)(a5 + 8) + 16))(**(void **)(a5 + 8), sel_setVertexBuffer_offset_atIndex_, v136, v133, 0);
    (*(void (**)(void, char *, uint64_t, uint64_t, uint64_t))(*(void *)(a5 + 8) + 16))(**(void **)(a5 + 8), sel_setVertexBuffer_offset_atIndex_, v147, v148, 1);
    (*(void (**)(void, char *, uint64_t, uint64_t, uint64_t))(*(void *)(a5 + 8) + 16))(**(void **)(a5 + 8), sel_setVertexBuffer_offset_atIndex_, v144, v146, 2);
    (*(void (**)(void, char *, uint64_t, uint64_t, uint64_t))(*(void *)(a5 + 8) + 16))(**(void **)(a5 + 8), sel_setVertexBuffer_offset_atIndex_, v140, v142, 3);
    re::setVertexAmplificationCount((_anonymous_namespace_ *)v138[302], v137, *v150, 0xFFFF, a5, v122);
    if (v137) {
      uint64_t v123 = 1;
    }
    else {
      uint64_t v123 = *v150;
    }
    (*(void (**)(void, char *, uint64_t, void, uint64_t, uint64_t))(*(void *)(a5 + 8) + 192))(**(void **)(a5 + 8), sel_drawPrimitives_vertexStart_vertexCount_instanceCount_, 3, 0, 6 * v99, v123);
    (*(void (**)(void, char *))(*(void *)(a5 + 8) + 160))(**(void **)(a5 + 8), sel_popDebugGroup);
  }
}

float32x4_t *re::DebugRenderer::render(re::RenderManager &,re::RenderTargetInfo const&,re::StencilInfo const&,re::mtl::RenderCommandEncoder const&,re::FrameContext &,re::DynamicArray<re::Matrix4x4<float>> const&,re::DynamicArray<re::Matrix4x4<float>> const&,unsigned char const&,BOOL)::$_0::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v6 = 0;
  unint64_t v7 = 0;
  uint64_t v8 = *a3;
  uint64_t v9 = *((unsigned int *)a3 + 2);
  unint64_t v10 = (unint64_t)*((unsigned int *)a3 + 3) >> 5;
  unint64_t v11 = 1;
  uint64_t v12 = *a3;
  while (1)
  {
    __n128 result = (float32x4_t *)re::BucketArray<re::RenderLine,2048ul>::operator[](a1, v7);
    if (!a4)
    {
      float32x4_t v16 = *result;
      float32x4_t v17 = result[1];
      float32x4_t v61 = result[2];
      if (v6 >= v10) {
        goto LABEL_35;
      }
      float32x4_t v18 = vaddq_f32(v16, (float32x4_t)xmmword_2343E6810);
      float32x2_t v19 = (long long *)&result[2];
      float32x2_t v20 = (float32x4_t *)(v12 + v9);
      *float32x2_t v20 = v18;
      v20[1] = v61;
      float32x4_t v62 = result[2];
      unint64_t v21 = v6 + 1;
      if (v6 + 1 >= v10) {
        goto LABEL_36;
      }
      float32x4_t v22 = vaddq_f32(v16, (float32x4_t)xmmword_2343E6820);
      void v20[2] = v22;
      v20[3] = v62;
      long long v63 = *v19;
      unint64_t v23 = v6 + 2;
      if (v6 + 2 >= v10) {
        goto LABEL_37;
      }
      float32x4_t v24 = vaddq_f32(v16, (float32x4_t)xmmword_2343E6830);
      long long v25 = (_OWORD *)(v12 + v9);
      _OWORD v25[4] = v24;
      v25[5] = v63;
      long long v64 = *v19;
      unint64_t v26 = v6 + 3;
      if (v6 + 3 >= v10) {
        goto LABEL_38;
      }
      float32x4_t v27 = vaddq_f32(v17, (float32x4_t)xmmword_2343E6810);
      void v25[6] = v27;
      v25[7] = v64;
      long long v65 = *v19;
      unint64_t v28 = v6 + 4;
      if (v6 + 4 >= v10) {
        goto LABEL_39;
      }
      float32x4_t v29 = vaddq_f32(v17, (float32x4_t)xmmword_2343E6820);
      float32x4_t v30 = (_OWORD *)(v12 + v9);
      _OWORD v30[8] = v29;
      v30[9] = v65;
      long long v66 = *v19;
      unint64_t v31 = v6 + 5;
      if (v6 + 5 >= v10) {
        goto LABEL_40;
      }
      float32x4_t v32 = vaddq_f32(v17, (float32x4_t)xmmword_2343E6830);
      v30[10] = v32;
      v30[11] = v66;
      long long v67 = *v19;
      unint64_t v33 = v6 + 6;
      if (v6 + 6 >= v10) {
        goto LABEL_41;
      }
      int8x16_t v34 = (_OWORD *)(v12 + v9);
      v34[12] = v22;
      v34[13] = v67;
      long long v68 = *v19;
      unint64_t v35 = v6 + 7;
      if (v6 + 7 >= v10) {
        goto LABEL_42;
      }
      v34[14] = v29;
      v34[15] = v68;
      long long v69 = *v19;
      unint64_t v36 = v6 + 8;
      if (v6 + 8 >= v10) {
        goto LABEL_43;
      }
      float v37 = (_OWORD *)(v12 + v9);
      unsigned char v37[16] = v24;
      v37[17] = v69;
      long long v70 = *v19;
      unint64_t v38 = v6 + 9;
      if (v6 + 9 >= v10) {
        goto LABEL_44;
      }
      v37[18] = v24;
      v37[19] = v70;
      long long v71 = *v19;
      unint64_t v39 = v6 + 10;
      if (v6 + 10 >= v10) {
        goto LABEL_45;
      }
      float v40 = (_OWORD *)(v12 + v9);
      v40[20] = v29;
      v40[21] = v71;
      long long v72 = *v19;
      unint64_t v41 = v6 + 11;
      if (v6 + 11 >= v10) {
        goto LABEL_46;
      }
      v40[22] = v32;
      v40[23] = v72;
      long long v73 = *v19;
      unint64_t v42 = v6 + 12;
      if (v6 + 12 >= v10) {
        goto LABEL_47;
      }
      float v43 = (_OWORD *)(v12 + v9);
      v43[24] = v24;
      v43[25] = v73;
      long long v74 = *v19;
      unint64_t v44 = v6 + 13;
      if (v6 + 13 >= v10) {
        goto LABEL_48;
      }
      v43[26] = v32;
      v43[27] = v74;
      long long v75 = *v19;
      unint64_t v45 = v6 + 14;
      if (v6 + 14 >= v10) {
        goto LABEL_49;
      }
      long long v46 = (_OWORD *)(v12 + v9);
      v46[28] = v18;
      v46[29] = v75;
      long long v76 = *v19;
      unint64_t v47 = v6 + 15;
      if (v6 + 15 >= v10) {
        goto LABEL_50;
      }
      v46[30] = v18;
      v46[31] = v76;
      long long v77 = *v19;
      unint64_t v48 = v6 + 16;
      if (v6 + 16 >= v10) {
        goto LABEL_51;
      }
      float32x4_t v49 = (_OWORD *)(v12 + v9);
      v49[32] = v32;
      v49[33] = v77;
      long long v78 = *v19;
      unint64_t v50 = v6 + 17;
      if (v6 + 17 >= v10) {
        goto LABEL_52;
      }
      v49[34] = v27;
      v49[35] = v78;
      long long v79 = *v19;
      unint64_t v51 = v6 + 18;
      if (v6 + 18 >= v10) {
        goto LABEL_53;
      }
      float v52 = (_OWORD *)(v12 + v9);
      v52[36] = v18;
      v52[37] = v79;
      long long v80 = *v19;
      unint64_t v53 = v6 + 19;
      if (v6 + 19 >= v10) {
        goto LABEL_54;
      }
      v52[38] = v27;
      v52[39] = v80;
      long long v81 = *v19;
      unint64_t v54 = v6 + 20;
      if (v6 + 20 >= v10) {
        goto LABEL_55;
      }
      __n128 v55 = (_OWORD *)(v12 + v9);
      v55[40] = v22;
      v55[41] = v81;
      long long v82 = *v19;
      unint64_t v56 = v6 + 21;
      if (v6 + 21 >= v10) {
        goto LABEL_56;
      }
      v55[42] = v22;
      v55[43] = v82;
      long long v83 = *v19;
      unint64_t v57 = v6 + 22;
      if (v6 + 22 >= v10) {
        goto LABEL_57;
      }
      long long v58 = (_OWORD *)(v12 + v9);
      v58[44] = v27;
      v58[45] = v83;
      long long v84 = *v19;
      unint64_t v59 = v6 + 23;
      if (v6 + 23 >= v10) {
        goto LABEL_58;
      }
      v58[46] = v29;
      v58[47] = v84;
      goto LABEL_31;
    }
    float32x4_t v85 = result[2];
    if (v11 - 1 >= v10) {
      break;
    }
    float32x2_t v15 = (float32x4_t *)(v8 + v9);
    *float32x2_t v15 = *result;
    v15[1] = v85;
    float32x4_t v86 = result[2];
    if (v11 >= v10) {
      goto LABEL_34;
    }
    void v15[2] = result[1];
    v15[3] = v86;
LABEL_31:
    ++v7;
    v6 += 24;
    v12 += 768;
    v11 += 2;
    v8 += 64;
    if (a2 == v7) {
      return result;
    }
  }
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v11 - 1, v10);
  _os_crash();
  __break(1u);
LABEL_34:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v11, v10);
  _os_crash();
  __break(1u);
LABEL_35:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v6, v10);
  _os_crash();
  __break(1u);
LABEL_36:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v21, v10);
  _os_crash();
  __break(1u);
LABEL_37:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v23, v10);
  _os_crash();
  __break(1u);
LABEL_38:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v26, v10);
  _os_crash();
  __break(1u);
LABEL_39:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v28, v10);
  _os_crash();
  __break(1u);
LABEL_40:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v31, v10);
  _os_crash();
  __break(1u);
LABEL_41:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v33, v10);
  _os_crash();
  __break(1u);
LABEL_42:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v35, v10);
  _os_crash();
  __break(1u);
LABEL_43:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v36, v10);
  _os_crash();
  __break(1u);
LABEL_44:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v38, v10);
  _os_crash();
  __break(1u);
LABEL_45:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v39, v10);
  _os_crash();
  __break(1u);
LABEL_46:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v41, v10);
  _os_crash();
  __break(1u);
LABEL_47:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v42, v10);
  _os_crash();
  __break(1u);
LABEL_48:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v44, v10);
  _os_crash();
  __break(1u);
LABEL_49:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v45, v10);
  _os_crash();
  __break(1u);
LABEL_50:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v47, v10);
  _os_crash();
  __break(1u);
LABEL_51:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v48, v10);
  _os_crash();
  __break(1u);
LABEL_52:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v50, v10);
  _os_crash();
  __break(1u);
LABEL_53:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v51, v10);
  _os_crash();
  __break(1u);
LABEL_54:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v53, v10);
  _os_crash();
  __break(1u);
LABEL_55:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v54, v10);
  _os_crash();
  __break(1u);
LABEL_56:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v56, v10);
  _os_crash();
  __break(1u);
LABEL_57:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v57, v10);
  _os_crash();
  __break(1u);
LABEL_58:
  re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v59, v10);
  __n128 result = (float32x4_t *)_os_crash();
  __break(1u);
  return result;
}

uint64_t re::DebugRenderer::render(re::RenderManager &,re::RenderTargetInfo const&,re::StencilInfo const&,re::mtl::RenderCommandEncoder const&,re::FrameContext &,re::DynamicArray<re::Matrix4x4<float>> const&,re::DynamicArray<re::Matrix4x4<float>> const&,unsigned char const&,BOOL)::$_1::operator()(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4, float32x4_t *a5)
{
  unint64_t v9 = 0;
  unint64_t v10 = 0;
  unint64_t v11 = (unint64_t)*(unsigned int *)(a3 + 12) >> 5;
  LODWORD(v12) = 5;
  if (v11 > 5) {
    unint64_t v12 = (unint64_t)*(unsigned int *)(a3 + 12) >> 5;
  }
  unint64_t v13 = 6 * ((715827883 * (unint64_t)v12) >> 32);
  for (uint64_t i = *(unsigned int *)(a3 + 8) + *(void *)a3 + 96; ; i += 192)
  {
    uint64_t result = re::BucketArray<re::RenderLine,2048ul>::operator[](a1, v10);
    LODWORD(v17) = *(_DWORD *)(result + 32);
    float32x4_t v18 = *a4;
    float32x4_t v19 = *a5;
    float32x4_t v20 = *(float32x4_t *)result;
    long long v33 = *(_OWORD *)(result + 16);
    if (v9 >= v11) {
      break;
    }
    float v21 = *(float *)&v17 * 0.01;
    float32x4_t v22 = vmulq_n_f32(v18, *(float *)&v17 * 0.01);
    float32x4_t v23 = vmulq_n_f32(v19, v21);
    v24.i64[0] = 0xBF000000BF000000;
    v24.i64[1] = 0xBF000000BF000000;
    float32x4_t v25 = vaddq_f32(v20, vmulq_f32(vaddq_f32(v22, v23), v24));
    unint64_t v26 = (long long *)(result + 16);
    *(float32x4_t *)(i - 96) = v25;
    *(_OWORD *)(i - 8ArcSharedObject::ArcSharedObject(this, 0) = v33;
    long long v34 = *(_OWORD *)(result + 16);
    unint64_t v27 = v9 + 1;
    if (v9 + 1 >= v11) {
      goto LABEL_13;
    }
    float32x4_t v28 = vaddq_f32(v22, v25);
    *(float32x4_t *)(i - 64) = v28;
    *(_OWORD *)(i - 48) = v34;
    long long v35 = *v26;
    unint64_t v29 = v9 + 2;
    if (v9 + 2 >= v11) {
      goto LABEL_14;
    }
    float32x4_t v30 = vaddq_f32(v23, v28);
    *(float32x4_t *)(i - 32) = v30;
    *(_OWORD *)(i - 16) = v35;
    long long v36 = *v26;
    unint64_t v31 = v9 + 3;
    if (v9 + 3 >= v11) {
      goto LABEL_15;
    }
    *(float32x4_t *)uint64_t i = v25;
    *(_OWORD *)(i + 16) = v36;
    long long v37 = *v26;
    unint64_t v32 = v9 + 4;
    if (v9 + 4 >= v11) {
      goto LABEL_16;
    }
    *(float32x4_t *)(i + 32) = v30;
    *(_OWORD *)(i + 48) = v37;
    long long v38 = *v26;
    if (v13 == v9) {
      goto LABEL_17;
    }
    *(float32x4_t *)(i + 64) = vaddq_f32(v23, v25);
    *(_OWORD *)(i + 8ArcSharedObject::ArcSharedObject(this, 0) = v38;
    ++v10;
    v9 += 6;
    if (a2 == v10) {
      return result;
    }
  }
  re::internal::assertLog((re::internal *)6, v16, *(double *)v18.i64, *(double *)v20.i64, v17, *(double *)v19.i64, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v9, v11);
  _os_crash();
  __break(1u);
LABEL_13:
  re::internal::assertLog((re::internal *)6, v16, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v27, v11);
  _os_crash();
  __break(1u);
LABEL_14:
  re::internal::assertLog((re::internal *)6, v16, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v29, v11);
  _os_crash();
  __break(1u);
LABEL_15:
  re::internal::assertLog((re::internal *)6, v16, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v31, v11);
  _os_crash();
  __break(1u);
LABEL_16:
  re::internal::assertLog((re::internal *)6, v16, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v32, v11);
  _os_crash();
  __break(1u);
LABEL_17:
  re::internal::assertLog((re::internal *)6, v16, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v9 + 5, v11);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

void re::DebugRenderer::endFrame(os_unfair_lock_s *this)
{
  unsigned __int8 v1 = atomic_load(re::needDebugRendererThisFrame);
  if (v1)
  {
    unsigned __int8 v3 = this + 72;
    uint64_t v4 = this + 114;
    std::lock[abi:ne180100]<re::UnfairLock,re::UnfairLock>(this + 72, this + 114);
    re::BucketArray<re::RenderLine,2048ul>::clear((uint64_t)&this[44]);
    re::BucketArray<re::RenderLine,2048ul>::clear((uint64_t)&this[58]);
    re::BucketArray<re::RenderLine,2048ul>::clear((uint64_t)&this[86]);
    re::BucketArray<re::RenderLine,2048ul>::clear((uint64_t)&this[100]);
    atomic_store(0, re::needDebugRendererThisFrame);
    os_unfair_lock_unlock(v3);
    os_unfair_lock_unlock(v4);
  }
}

uint64_t re::BucketArray<re::RenderLine,2048ul>::clear(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 40);
  if (v2)
  {
    for (unint64_t i = 0; i != v2; ++i)
      uint64_t result = re::BucketArray<re::RenderLine,2048ul>::operator[](v1, i);
  }
  *(void *)(v1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  ++*(_DWORD *)(v1 + 48);
  return result;
}

uint64_t re::BucketArray<re::RenderLine,2048ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 11) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 11)) + 48 * (a2 & 0x7FF);
}

char *re::BucketArray<re::RenderLine,2048ul>::overwriteExistingElements(char *result, unint64_t a2, char *__src, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    unint64_t v5 = a2 >> 11;
    if (a4 >= 2048 - (a2 & 0x7FF)) {
      uint64_t v6 = 2048 - (a2 & 0x7FF);
    }
    else {
      uint64_t v6 = a4;
    }
    if (*((void *)result + 1) <= a2 >> 11)
    {
LABEL_25:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_26:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    __int16 v8 = a4 + a2;
    unint64_t v9 = (a4 + a2 - 1) >> 11;
    uint64_t v10 = (result[16] & 1) != 0 ? (uint64_t)(result + 24) : *((void *)result + 4);
    uint64_t result = (char *)memmove((void *)(*(void *)(v10 + 8 * v5) + 48 * (a2 & 0x7FF)), __src, 48 * v6);
    if (v9 != v5)
    {
      unint64_t v11 = &__src[48 * v6];
      unint64_t v12 = v9 + ~v5;
      if (v12)
      {
        unint64_t v13 = v5 + 1;
        uint64_t v14 = v11;
        while (v4[1] > v13)
        {
          float32x2_t v15 = (char *)(v4 + 3);
          if ((v4[2] & 1) == 0) {
            float32x2_t v15 = (char *)v4[4];
          }
          uint64_t result = (char *)memmove(*(void **)&v15[8 * v13++], v14, 0x18000uLL);
          v14 += 98304;
          if (v9 == v13) {
            goto LABEL_16;
          }
        }
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_25;
      }
LABEL_16:
      if (v4[1] <= v9) {
        goto LABEL_26;
      }
      if (v4[2])
      {
        uint64_t v16 = (char *)(v4 + 3);
        if ((v8 & 0x7FF) == 0) {
          return result;
        }
      }
      else
      {
        uint64_t v16 = (char *)v4[4];
        if ((v8 & 0x7FF) == 0) {
          return result;
        }
      }
      double v17 = *(void **)&v16[8 * v9];
      return (char *)memmove(v17, &v11[98304 * v12], 48 * (v8 & 0x7FF));
    }
  }
  return result;
}

char *re::BucketArray<re::RenderLine,2048ul>::copyNewElements(char *result, unint64_t a2, char *__src, unint64_t a4)
{
  if (!a4) {
    return result;
  }
  uint64_t v4 = result;
  unint64_t v5 = a2 >> 11;
  unint64_t v6 = 2048 - (a2 & 0x7FF);
  if (a4 < v6) {
    unint64_t v6 = a4;
  }
  if (*((void *)result + 1) <= a2 >> 11) {
    goto LABEL_24;
  }
  __int16 v8 = a4 + a2;
  unint64_t v9 = (a4 + a2 - 1) >> 11;
  if (result[16]) {
    uint64_t v10 = result + 24;
  }
  else {
    uint64_t v10 = (char *)*((void *)result + 4);
  }
  uint64_t v11 = 3 * v6;
  uint64_t result = (char *)memcpy((void *)(*(void *)&v10[8 * v5] + 48 * (a2 & 0x7FF)), __src, 48 * v6);
  if (v9 != v5)
  {
    unint64_t v12 = &__src[16 * v11];
    unint64_t v13 = v9 + ~v5;
    if (!v13)
    {
LABEL_16:
      if (v4[1] > v9)
      {
        if (v4[2]) {
          double v17 = (char *)(v4 + 3);
        }
        else {
          double v17 = (char *)v4[4];
        }
        float32x4_t v18 = *(void **)&v17[8 * v9];
        return (char *)memcpy(v18, &v12[98304 * v13], 48 * (v8 & 0x7FF));
      }
LABEL_25:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    unint64_t v14 = v5 + 1;
    float32x2_t v15 = v12;
    while (v4[1] > v14)
    {
      uint64_t v16 = (char *)(v4 + 3);
      if ((v4[2] & 1) == 0) {
        uint64_t v16 = (char *)v4[4];
      }
      memcpy(*(void **)&v16[8 * v14++], v15, 0x18000uLL);
      v15 += 98304;
      if (v9 == v14) {
        goto LABEL_16;
      }
    }
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_24:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_25;
  }
  return result;
}

uint64_t *re::BucketArray<re::RenderLine,2048ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < a2 << 11)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 98304, 0);
        uint64_t result = (uint64_t *)re::DynamicOverflowArray<re::RenderLine *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::RenderLine,2048ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<re::RenderLine *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0;
  uint64_t result = re::BucketArray<re::RenderLine,2048ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::DynamicOverflowArray<re::RenderLine *,2ul>::setCapacity(void *result, unint64_t a2)
{
  unint64_t v4 = result;
  uint64_t v5 = *result;
  if (a2 && !v5)
  {
    uint64_t result = (void *)re::DynamicOverflowArray<re::RenderLine *,2ul>::setCapacity(v4, a2);
    int v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  int v7 = *((_DWORD *)result + 4);
  if (v7) {
    uint64_t v8 = 2;
  }
  else {
    uint64_t v8 = result[3];
  }
  if (v8 != a2)
  {
    unint64_t v9 = result[1];
    if (v9 <= a2 && (a2 > 2 || (v7 & 1) == 0))
    {
      if (a2 < 3)
      {
        unint64_t v14 = result + 3;
        uint64_t v15 = v4[4];
        if (v7) {
          uint64_t v16 = v4 + 3;
        }
        else {
          uint64_t v16 = (const void *)v4[4];
        }
        memcpy(v14, v16, 8 * v9);
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 40))(v5, v15);
        int v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 61)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 8, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        uint64_t v2 = 8 * a2;
        uint64_t v10 = (void *)(*(uint64_t (**)(void, unint64_t, uint64_t))(*(void *)v5 + 32))(*result, 8 * a2, 8);
        if (v10)
        {
          unint64_t v12 = v10;
          if (v4[2]) {
            unint64_t v13 = v4 + 3;
          }
          else {
            unint64_t v13 = (const void *)v4[4];
          }
          uint64_t result = memcpy(v10, v13, 8 * v4[1]);
          int v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v4 + 40))(*v4, v4[4]);
            int v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[3] = a2;
          v4[4] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(void *)(*v4 + 8));
      uint64_t result = (void *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<re::RenderLine *,2ul>::add(uint64_t a1, void *a2)
{
  uint64_t result = re::DynamicOverflowArray<re::RenderLine *,2ul>::ensureCapacity((_anonymous_namespace_ *)a1);
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v5 = a1 + 24;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 32);
  }
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)(v5 + 8 * v6) = *a2;
  *(void *)(a1 + 8) = v6 + 1;
  *(_DWORD *)(a1 + 16) += 2;
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<re::RenderLine *,2ul>::ensureCapacity(_anonymous_namespace_ *result)
{
  uint64_t v1 = result;
  if (!*(void *)result)
  {
    unint64_t v7 = *((void *)v1 + 1) + 1;
    uint64_t result = (_anonymous_namespace_ *)re::DynamicOverflowArray<re::RenderLine *,2ul>::setCapacity(v1, v7);
    *((_DWORD *)v1 + 4) += 2;
    return result;
  }
  unint64_t v2 = *((void *)result + 1);
  if (*((unsigned char *)result + 16))
  {
    unint64_t v4 = v2 + 1;
    if (v4 < 3) {
      return result;
    }
    unint64_t v6 = 4;
    goto LABEL_12;
  }
  unint64_t v3 = *((void *)result + 3);
  BOOL v5 = v2 >= v3;
  unint64_t v4 = v2 + 1;
  BOOL v5 = !v5 || v3 >= v4;
  if (!v5)
  {
    unint64_t v6 = 2 * v3;
LABEL_12:
    if (v6 <= v4) {
      unint64_t v8 = v4;
    }
    else {
      unint64_t v8 = v6;
    }
    return (_anonymous_namespace_ *)re::DynamicOverflowArray<re::RenderLine *,2ul>::setCapacity(result, v8);
  }
  return result;
}

uint64_t re::BucketArray<re::RenderLine,2048ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > v3 << 11)
  {
    re::BucketArray<re::RenderLine,2048ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 2048) >> 11);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 11)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 11));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 48 * (v2 & 0x7FF);
}

uint64_t re::BucketArray<re::RenderPoint,2048ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > v3 << 11)
  {
    re::BucketArray<re::RenderPoint,2048ul>::setBucketsCapacity((void *)a1, (v2 + 2048) >> 11);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 11)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 11));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 48 * (v2 & 0x7FF);
}

void *re::BucketArray<re::RenderPoint,2048ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  unint64_t v3 = result;
  if (*result)
  {
    if (result[5] < a2 << 11)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 98304, 0);
          unint64_t v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_22;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_18;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_18:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              uint64_t result = re::DynamicOverflowArray<re::RenderLine *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            uint64_t result = re::DynamicOverflowArray<re::RenderLine *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          uint64_t v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            uint64_t v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<re::RenderLine *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    uint64_t result = (void *)re::BucketArray<re::RenderPoint,2048ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

void *re::DelayedDestructorsForFrame::callDestructorsAndClear(void *this)
{
  uint64_t v1 = this;
  if (*this)
  {
    uint64_t v2 = this[2];
    if (v2)
    {
      unint64_t v3 = v2 - 1;
      uint64_t v4 = 40 * v2 - 8;
      do
      {
        if (v1[2] <= v3)
        {
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        (*(void (**)(void))(**(void **)(v1[4] + v4) + 16))(*(void *)(v1[4] + v4));
        --v3;
        v4 -= 40;
      }
      while (v3 != -1);
    }
    this = (void *)re::DynamicArray<re::MoveOnlyFunction<void ()(void)>>::deinit((uint64_t)v1);
  }
  v1[5] = 0xFFFFFFFFFFFFFFFLL;
  return this;
}

uint64_t re::DynamicArray<re::MoveOnlyFunction<void ()(void)>>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 40 * v4;
        do
        {
          re::MoveOnlyFunctionBase<24ul,void ()(void)>::destroyCallable(v3);
          v3 += 40;
          v5 -= 40;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

re::FrameManager *re::FrameManager::FrameManager(re::FrameManager *this)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)uint64_t v2 = &unk_26E713A68;
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 16) = 16;
  *(_OWORD *)(v2 + 4ArcSharedObject::ArcSharedObject(this, 0) = xmmword_2343E6840;
  *(_OWORD *)(v2 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_DWORD *)(v2 + 88) = 0;
  *(void *)(v2 + 104) = 0;
  *(void *)(v2 + 112) = 0;
  *(void *)(v2 + 96) = 0;
  *(void *)(v2 + 117) = 0;
  uint64_t v3 = re::globalAllocators((re *)v2);
  *((void *)this + 19) = v3[2];
  *((void *)this + 2ArcSharedObject::ArcSharedObject(this, 0) = 0;
  uint64_t v4 = re::globalAllocators((re *)v3);
  *((void *)this + 24) = v4[2];
  *((void *)this + 25) = 0;
  uint64_t v5 = re::globalAllocators((re *)v4);
  *((void *)this + 29) = v5[2];
  *((void *)this + 3ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *((void *)this + 34) = re::globalAllocators((re *)v5)[2];
  *((void *)this + 39) = 0;
  *(_OWORD *)((char *)this + 28ArcSharedObject::ArcSharedObject(this, 0) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  return this;
}

uint64_t re::FrameManager::init(re::FrameManager *this)
{
  *((void *)this + 37) = 8;
  *((void *)this + 38) = v2;
  if (!v2)
  {
    re::internal::assertLog((re::internal *)4, v3, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    goto LABEL_7;
  }
  for (uint64_t i = 0; i != 1792; i += 256)
  {
    uint64_t v5 = v2 + i;
    *(void *)(v5 + 16) = 850045863;
    *(_OWORD *)(v5 + 24) = 0uLL;
    *(_OWORD *)(v5 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0uLL;
    *(_OWORD *)(v5 + re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56) = 0uLL;
    *(void *)(v5 + 72) = 0;
    *(_OWORD *)uint64_t v5 = xmmword_2343E6850;
    *(_WORD *)(v5 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
    *(unsigned char *)(v5 + 82) = 0;
    *(_DWORD *)(v5 + 128) = 0;
    *(_DWORD *)(v5 + 192) = 0;
  }
  *(void *)(v2 + 1808) = 850045863;
  *(_OWORD *)(v2 + 1816) = 0u;
  *(_OWORD *)(v2 + 1832) = 0u;
  *(_OWORD *)(v2 + 1848) = 0u;
  *(void *)(v2 + 1864) = 0;
  *(_OWORD *)(v2 + 1792) = xmmword_2343E6850;
  *(_WORD *)(v2 + 1872) = 0;
  *(unsigned char *)(v2 + 1874) = 0;
  *(_DWORD *)(v2 + 192ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(_DWORD *)(v2 + 1984) = 0;
  unint64_t v6 = re::globalAllocators((re *)v2);
  unint64_t v7 = (_anonymous_namespace_ *)re::PerFrameAllocatorManager::addOwner((os_unfair_lock_s *)v6[6], this);
  *((void *)this + 2) = v7;
  if (*((void *)this + 37) <= (*((void *)this + 3) & 7uLL))
  {
LABEL_7:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v10 = *((void *)this + 38) + ((*((void *)this + 3) & 7) << 8);
  *(void *)uint64_t v10 = *((void *)this + 3);
  *(void *)(v10 + 8) = 0;
  *(_WORD *)(v10 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  *(unsigned char *)(v10 + 82) = 1;
  *(_DWORD *)(v10 + 128) = 0;
  *(_DWORD *)(v10 + 192) = 0;
  return result;
}

void re::FrameManager::runAllDelayedDestructors(int a1, uint64_t a2, os_unfair_lock_t lock)
{
  os_unfair_lock_lock(lock);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = *(void **)(a2 + 16);
    uint64_t v7 = 48 * v5;
    do
    {
      re::DelayedDestructorsForFrame::callDestructorsAndClear(v6);
      v6 += 6;
      v7 -= 48;
    }
    while (v7);
  }
  os_unfair_lock_unlock(lock);
}

uint64_t (***re::FrameManager::prepareForDeinit(os_unfair_lock_s *this))(void)
{
  uint64_t v2 = this + 22;
  uint64_t v3 = this + 30;
  std::lock[abi:ne180100]<re::UnfairLock,re::UnfairLock>(this + 22, this + 30);
  *(void *)&this[78]._uint32_t os_unfair_lock_opaque = 0x100000001;
  os_unfair_lock_unlock(v2);
  os_unfair_lock_unlock(v3);
  re::FrameManager::runAllDelayedDestructors(v4, (uint64_t)&this[16], v2);
  re::FrameManager::runAllDelayedDestructors(v5, (uint64_t)&this[24], v3);
  uint64_t v7 = re::globalAllocators(v6);
  uint64_t result = re::PerFrameAllocatorManager::freeAllocatorsOlderOrEqual((re *)v7[6], *(void *)&this[6]._os_unfair_lock_opaque & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(void *)&this[4]._os_unfair_lock_opaque << 60));
  LOBYTE(this[31]._os_unfair_lock_opaque) = 1;
  return result;
}

void re::FrameManager::deinit(re::FrameManager *this)
{
  if (!*((unsigned char *)this + 124)) {
    re::FrameManager::prepareForDeinit((os_unfair_lock_s *)this);
  }
  re::FixedArray<re::DelayedDestructorsForFrame>::deinit((void *)this + 8);
  uint64_t v2 = (re *)re::FixedArray<re::DelayedDestructorsForFrame>::deinit((void *)this + 12);
  uint64_t v3 = re::globalAllocators(v2);
  re::PerFrameAllocatorManager::removeOwner((os_unfair_lock_s *)v3[6], *((void *)this + 2));
  *((void *)this + 2) = 16;
}

void *re::FixedArray<re::DelayedDestructorsForFrame>::deinit(void *result)
{
  if (*result)
  {
    uint64_t v1 = result;
    uint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      uint64_t v4 = result[2];
      uint64_t v5 = 48 * v2;
      do
      {
        re::DynamicArray<re::MoveOnlyFunction<void ()(void)>>::deinit(v4);
        v4 += 48;
        v5 -= 48;
      }
      while (v5);
      uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v1 + 40))(*v1, v1[2]);
      *uint64_t v3 = 0;
      v3[1] = 0;
    }
    void *v1 = 0;
  }
  return result;
}

void re::FrameManager::addDelayedDestructor(uint64_t a1, uint64_t a2, uint64_t a3, os_unfair_lock_t lock, int *a5, uint64_t a6)
{
  if (*a5 < 1)
  {
    os_unfair_lock_lock(lock);
    uint64_t v13 = *(void *)(a1 + 24);
    unsigned int v14 = v13 & 7;
    if (*(void *)(a2 + 8) <= (unint64_t)(v13 & 7))
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v15 = *(void *)(a2 + 16);
    uint64_t v16 = v15 + 48 * (v13 & 7);
    if (!*(void *)v16)
    {
      *(void *)uint64_t v16 = a6;
      unint64_t v12 = (_anonymous_namespace_ *)re::DynamicArray<re::MoveOnlyFunction<void ()(void)>>::setCapacity((void *)(v15 + 48 * (v13 & 7)), 0);
      ++*(_DWORD *)(v16 + 24);
      uint64_t v13 = *(void *)(a1 + 24);
    }
    *(void *)(v15 + 48 * v14 + 4ArcSharedObject::ArcSharedObject(this, 0) = v13 & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(void *)(a1 + 16) << 60);
    unint64_t v18 = *(void *)(v16 + 8);
    unint64_t v17 = *(void *)(v16 + 16);
    if (v17 >= v18)
    {
      unint64_t v19 = v17 + 1;
      if (v18 < v17 + 1)
      {
        if (*(void *)v16)
        {
          unint64_t v20 = 2 * v18;
          if (!v18) {
            unint64_t v20 = 8;
          }
          if (v20 <= v19) {
            unint64_t v21 = v19;
          }
          else {
            unint64_t v21 = v20;
          }
          re::DynamicArray<re::MoveOnlyFunction<void ()(void)>>::setCapacity((void *)(v15 + 48 * v14), v21);
        }
        else
        {
          re::DynamicArray<re::MoveOnlyFunction<void ()(void)>>::setCapacity((void *)(v15 + 48 * v14), v19);
          ++*(_DWORD *)(v16 + 24);
        }
      }
      unint64_t v17 = *(void *)(v16 + 16);
    }
    uint64_t v22 = *(void *)(v16 + 32) + 40 * v17;
    *(void *)(v22 + 24) = *(void *)(a3 + 24);
    *(void *)(v22 + 32) = 0;
    re::MoveOnlyFunctionBase<24ul,void ()(void)>::operator=<24ul>(v22, a3);
    ++*(void *)(v16 + 16);
    ++*(_DWORD *)(v16 + 24);
    os_unfair_lock_unlock(lock);
  }
  else
  {
    uint64_t v7 = *(void (**)(void))(**(void **)(a3 + 32) + 16);
    v7();
  }
}

void re::FrameManager::addDelayedDestructor(uint64_t a1, uint64_t a2)
{
  ValidAllocator = re::getValidAllocator((re *)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(void *)(a1 + 16) << 60)));
  re::FrameManager::addDelayedDestructor(a1, a1 + 64, a2, (os_unfair_lock_t)(a1 + 88), (int *)(a1 + 312), (uint64_t)ValidAllocator);
}

void *re::FrameManager::destructForFrame(void *result, uint64_t a2)
{
  uint64_t v2 = result;
  int v3 = *((_DWORD *)result + 78);
  *((_DWORD *)result + 78) = v3 + 1;
  uint64_t v4 = result[9];
  if (v4)
  {
    uint64_t v5 = (void *)result[10];
    uint64_t v6 = a2 & 0xFFFFFFFFFFFFFFFLL;
    uint64_t v7 = 48 * v4;
    while (1)
    {
      if (*v5)
      {
        uint64_t v8 = v5[5] & 0xFFFFFFFFFFFFFFFLL;
        if (v8 == 0xFFFFFFFFFFFFFFFLL)
        {
          if (v6 != 0xFFFFFFFFFFFFFFFLL) {
            goto LABEL_10;
          }
        }
        else if (v6 == 0xFFFFFFFFFFFFFFFLL || v8 != v6)
        {
          goto LABEL_10;
        }
        uint64_t result = re::DelayedDestructorsForFrame::callDestructorsAndClear(v5);
      }
LABEL_10:
      v5 += 6;
      v7 -= 48;
      if (!v7)
      {
        int v3 = *((_DWORD *)v2 + 78) - 1;
        break;
      }
    }
  }
  *((_DWORD *)v2 + 78) = v3;
  return result;
}

uint64_t re::FrameManager::hasToDestructForFrameOnRenderThread(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 120);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 120));
  uint64_t v5 = *(void *)(a1 + 104);
  if (v5)
  {
    uint64_t v6 = *(void **)(a1 + 112);
    uint64_t v7 = a2 & 0xFFFFFFFFFFFFFFFLL;
    uint64_t v8 = 48 * v5;
    while (1)
    {
      if (*v6)
      {
        if (v7 == 0xFFFFFFFFFFFFFFFLL) {
          break;
        }
        uint64_t v9 = v6[5] & 0xFFFFFFFFFFFFFFFLL;
        if (v9 != 0xFFFFFFFFFFFFFFFLL && v7 == v9) {
          break;
        }
      }
      v6 += 6;
      v8 -= 48;
      if (!v8) {
        goto LABEL_10;
      }
    }
    uint64_t v11 = 1;
  }
  else
  {
LABEL_10:
    uint64_t v11 = 0;
  }
  os_unfair_lock_unlock(v4);
  return v11;
}

void re::FrameManager::destructForFrameOnRenderThread(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 120);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 120));
  int v5 = *(_DWORD *)(a1 + 316);
  *(_DWORD *)(a1 + 316) = v5 + 1;
  uint64_t v6 = *(void *)(a1 + 104);
  if (v6)
  {
    uint64_t v7 = *(void **)(a1 + 112);
    uint64_t v8 = a2 & 0xFFFFFFFFFFFFFFFLL;
    uint64_t v9 = 48 * v6;
    while (1)
    {
      if (*v7)
      {
        uint64_t v10 = v7[5] & 0xFFFFFFFFFFFFFFFLL;
        if (v10 == 0xFFFFFFFFFFFFFFFLL)
        {
          if (v8 != 0xFFFFFFFFFFFFFFFLL) {
            goto LABEL_10;
          }
        }
        else if (v8 == 0xFFFFFFFFFFFFFFFLL || v10 != v8)
        {
          goto LABEL_10;
        }
        re::DelayedDestructorsForFrame::callDestructorsAndClear(v7);
      }
LABEL_10:
      v7 += 6;
      v9 -= 48;
      if (!v9)
      {
        int v5 = *(_DWORD *)(a1 + 316) - 1;
        break;
      }
    }
  }
  *(_DWORD *)(a1 + 316) = v5;
  os_unfair_lock_unlock(v4);
}

void re::FrameManager::destructOlderOrEqualOnRenderThread(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 120);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 120));
  uint64_t v5 = *(void *)(a1 + 104);
  if (v5)
  {
    uint64_t v6 = *(void **)(a1 + 112);
    unint64_t v7 = a2 & 0xFFFFFFFFFFFFFFFLL;
    uint64_t v8 = 48 * v5;
    do
    {
      if (*v6 && (v6[5] & 0xFFFFFFFFFFFFFFFuLL) <= v7) {
        re::DelayedDestructorsForFrame::callDestructorsAndClear(v6);
      }
      v6 += 6;
      v8 -= 48;
    }
    while (v8);
  }
  os_unfair_lock_unlock(v4);
}

uint64_t re::FrameManager::nextFrame(re::FrameManager *this)
{
  re::FrameManager::onFrameStartInternal(this, (unint64_t *)((*((void *)this + 3) & 0xFFFFFFFFFFFFFFFLL) + 1));
  uint64_t result = *((void *)this + 35);
  if (result)
  {
    int v3 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v3();
  }
  return result;
}

void re::FrameManager::onFrameStartInternal(re::FrameManager *this, unint64_t *a2)
{
  uint64_t v3 = 0;
  unint64_t v4 = 0;
  BOOL v5 = 0;
  do
  {
    if (*((void *)this + 37) <= v4) {
      goto LABEL_51;
    }
    uint64_t v6 = *((void *)this + 38) + v3;
    if (*(unsigned char *)(v6 + 82))
    {
      if (atomic_load((unsigned int *)(v6 + 128))) {
        break;
      }
    }
    BOOL v5 = v4 > 6;
    v3 += 256;
    ++v4;
  }
  while (v4 != 8);
  if (v5 && re::FrameManager::hasToDestructForFrameOnRenderThread((uint64_t)this, 0xFFFFFFFFFFFFFFFLL))
  {
    uint64_t v8 = *((void *)this + 30);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
    }
    int v35 = 1;
  }
  else
  {
    int v35 = 0;
  }
  int v9 = *((_DWORD *)this + 6);
  ++*((_DWORD *)this + 78);
  uint64_t v10 = (v9 + 1) & 7;
  unint64_t v11 = v10;
  do
  {
    if (*((void *)this + 37) <= v11)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_49:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_50:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_51:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_52:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_53;
    }
    uint64_t v12 = *((void *)this + 38);
    uint64_t v13 = v12 + (v11 << 8);
    if (*(unsigned char *)(v13 + 82))
    {
      unsigned int v14 = (atomic_uint *)(v13 + 192);
      int v15 = atomic_load((unsigned int *)(v13 + 192));
      if (v15 >= 1) {
        atomic_fetch_add(v14, 0xFFFFFFFF);
      }
      uint64_t v16 = *((void *)this + 2);
      unint64_t v17 = *(void *)v13 & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)v16 << 60);
      uint64_t v18 = v12 + (v11 << 8);
      if (*(unsigned char *)(v18 + 81)) {
        re::FrameManager::destructForFrame(this, *(void *)v13 & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)v16 << 60));
      }
      if (!atomic_load((unsigned int *)(v18 + 128)) && !atomic_load((unsigned int *)v14))
      {
        re::FrameManager::destructForFrame(this, v17);
        if (((v35 | re::FrameManager::hasToDestructForFrameOnRenderThread((uint64_t)this, v17) ^ 1) & 1) == 0)
        {
          uint64_t v21 = *((void *)this + 30);
          if (v21) {
            (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
          }
        }
        re::FrameManager::destructForFrameOnRenderThread((uint64_t)this, v17);
        re::FrameManager::freeForFrame(this, v13);
        if ((re::FrameManager::hasToDestructForFrameOnRenderThread((uint64_t)this, v17) & 1) == 0) {
          *(unsigned char *)(v13 + 82) = 0;
        }
      }
    }
    unint64_t v11 = ((int)v11 + 1) & 7;
  }
  while (v11 != v10);
  --*((_DWORD *)this + 78);
  re::updateFrameCountCommon((re::FrameManager *)((char *)this + 24), a2, (uint64_t)"FrameCount", 0);
  if (*((void *)this + 37) <= (unint64_t)(a2 & 7))
  {
LABEL_53:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_54;
  }
  uint64_t v22 = *((void *)this + 38) + ((unint64_t)(a2 & 7) << 8);
  if (*(unsigned char *)(v22 + 82))
  {
    unint64_t v23 = *(void *)v22 & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*((void *)this + 2) << 60);
    if (re::FrameManager::hasToDestructForFrameOnRenderThread((uint64_t)this, v23))
    {
      uint64_t v24 = *((void *)this + 30);
      if (v24) {
        (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
      }
    }
    re::FrameManager::destructForFrame(this, v23);
    re::FrameManager::destructForFrameOnRenderThread((uint64_t)this, v23);
    re::FrameManager::freeForFrame(this, v22);
  }
  unint64_t v25 = 0;
  *(_WORD *)(v22 + 8ArcSharedObject::ArcSharedObject(this, 0) = 0;
  uint64_t v26 = 1;
  *(unsigned char *)(v22 + 82) = 1;
  *(_DWORD *)(v22 + 128) = 0;
  *(_DWORD *)(v22 + 192) = 0;
  *(void *)uint64_t v22 = a2;
  *(void *)(v22 + 8) = 1;
  atomic_fetch_add((atomic_uint *volatile)(v22 + 192), 1u);
  unint64_t v27 = *((void *)this + 37);
  if (v27 <= 1) {
    uint64_t v28 = 1;
  }
  else {
    uint64_t v28 = *((void *)this + 37);
  }
  for (uint64_t i = 256; i != 2048; i += 256)
  {
    if (v28 == v26) {
      goto LABEL_49;
    }
    if (v27 <= v25) {
      goto LABEL_50;
    }
    uint64_t v30 = *((void *)this + 38);
    if (*(void *)(v30 + i) < *(void *)(v30 + (v25 << 8))) {
      unint64_t v25 = v26;
    }
    ++v26;
  }
  for (uint64_t j = 1; j != 8; ++j)
  {
    unint64_t v32 = ((int)v25 + (int)j) & 7;
    if (v27 <= v32) {
      goto LABEL_52;
    }
    if (*(unsigned char *)(v30 + (v32 << 8) + 82)) {
      break;
    }
  }
  unint64_t v33 = ((int)v25 + (int)j - 1) & 7;
  if (v27 <= v33)
  {
LABEL_54:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *((void *)this + 4) = *(void *)(v30 + (v33 << 8));
}

void re::FrameManager::freeForFrame(void *a1, uint64_t a2)
{
  unint64_t v4 = (std::mutex *)(a2 + 16);
  std::mutex::lock((std::mutex *)(a2 + 16));
  if (*(unsigned char *)(a2 + 80))
  {
    std::mutex::unlock(v4);
  }
  else
  {
    *(unsigned char *)(a2 + 8ArcSharedObject::ArcSharedObject(this, 0) = 1;
    std::mutex::unlock(v4);
    unint64_t v5 = *(void *)a2 & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)a1[2] << 60);
    uint64_t v6 = (re *)a1[20];
    if (v6)
    {
      unint64_t v9 = v5;
      uint64_t v6 = (re *)(*(uint64_t (**)(re *, unint64_t *))(*(void *)v6 + 16))(v6, &v9);
    }
    unint64_t v7 = re::globalAllocators(v6);
    re::PerFrameAllocatorManager::freeAllocatorsForFrame((re *)v7[6], v5);
    uint64_t v8 = a1[25];
    if (v8)
    {
      unint64_t v9 = v5;
      (*(void (**)(uint64_t, unint64_t *))(*(void *)v8 + 16))(v8, &v9);
    }
  }
}

void re::updateFrameCountCommon(re *this, unint64_t *a2, uint64_t a3, const char *a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(void *)this <= (unint64_t)a2)
  {
    if (*(unint64_t **)this != a2 || *(void *)this == 1) {
      goto LABEL_12;
    }
    if (a4) {
      goto LABEL_12;
    }
    uint64_t v13 = *re::graphicsLogObjects(this);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_12;
    }
    uint64_t v14 = *(void *)this;
    int v16 = 136315394;
    uint64_t v17 = a3;
    __int16 v18 = 2048;
    uint64_t v19 = v14;
    unint64_t v9 = "%s same frame more than once %llu";
    uint64_t v10 = v13;
    uint32_t v11 = 22;
  }
  else
  {
    unint64_t v7 = *re::graphicsLogObjects(this);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_12;
    }
    uint64_t v8 = *(void *)this;
    int v16 = 136315650;
    uint64_t v17 = a3;
    __int16 v18 = 2048;
    uint64_t v19 = v8;
    __int16 v20 = 2048;
    uint64_t v21 = a2;
    unint64_t v9 = "%s update out of order %llu to %llu";
    uint64_t v10 = v7;
    uint32_t v11 = 32;
  }
  _os_log_impl(&dword_233120000, v10, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v16, v11);
LABEL_12:
  int v15 = *(unint64_t **)this;
  if (*(void *)this <= (unint64_t)a2) {
    int v15 = a2;
  }
  *(void *)this = v15;
}

double re::FrameManager::deinitRenderFrameCounting(re::FrameManager *this)
{
  uint64_t v2 = re::globalAllocators(this);
  uint64_t v3 = (re *)re::PerFrameAllocatorManager::freeAllocatorsForFrame((re *)v2[6], *((void *)this + 6) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*((void *)this + 5) << 60));
  unint64_t v4 = re::globalAllocators(v3);
  re::PerFrameAllocatorManager::removeOwner((os_unfair_lock_s *)v4[6], *((void *)this + 5));
  *(void *)&double result = 16;
  *(_OWORD *)((char *)this + 4ArcSharedObject::ArcSharedObject(this, 0) = xmmword_2343E6840;
  return result;
}

unint64_t re::FrameManager::getFrameRefCount(re::FrameManager *this, uint64_t a2)
{
  unint64_t v2 = a2 & 7;
  if (*((void *)this + 37) <= v2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(*((void *)this + 38) + (v2 << 8)) == a2) {
    return *((void *)this + 38) + (v2 << 8);
  }
  else {
    return 0;
  }
}

uint64_t re::FrameManager::tryExecuteCallbackWithAllocatedFrame(re::FrameManager *a1, uint64_t a2, uint64_t a3)
{
  unint64_t FrameRefCount = re::FrameManager::getFrameRefCount(a1, a2);
  if (!FrameRefCount) {
    return 0;
  }
  unint64_t v6 = FrameRefCount;
  unint64_t v7 = (std::mutex *)(FrameRefCount + 16);
  std::mutex::lock((std::mutex *)(FrameRefCount + 16));
  if (*(void *)v6 == a2 && !*(unsigned char *)(v6 + 80))
  {
    uint64_t v10 = a2;
    (*(void (**)(void, uint64_t *))(**(void **)(a3 + 32) + 16))(*(void *)(a3 + 32), &v10);
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v8 = 0;
  }
  std::mutex::unlock(v7);
  return v8;
}

void *re::allocInfo_FrameManager(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_409, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_409))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF970B8, "FrameManager");
    __cxa_guard_release(&_MergedGlobals_409);
  }
  return &unk_26AF970B8;
}

void re::initInfo_FrameManager(re *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x34087BE954749B40;
  v5[1] = "FrameManager";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x14000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::initInfo_FrameManager(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::FrameManager>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 1ArcSharedObject::ArcSharedObject(this, 0) = re::internal::defaultDestruct<re::FrameManager>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::FrameManager>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::FrameManager>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::FrameManager *re::internal::defaultConstruct<re::FrameManager>(int a1, int a2, re::FrameManager *this)
{
  return re::FrameManager::FrameManager(this);
}

uint64_t re::internal::defaultDestruct<re::FrameManager>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::FrameManager>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::introspect_FrameManager(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"FrameManager", (uint64_t (*)(re::internal *))re::allocInfo_FrameManager, (re::IntrospectionBase *(*)(void))re::initInfo_FrameManager, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::FrameManager>, this);
}

void re::FrameManager::~FrameManager(re::FrameManager *this)
{
  re::FrameManager::~FrameManager(this);
  JUMPOUT(0x237DBCBD0);
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  std::mutex *v5;
  std::mutex *v6;

  *(void *)this = &unk_26E713A68;
  if (*((void *)this + 36))
  {
    unint64_t v2 = *((void *)this + 37);
    if (v2)
    {
      uint64_t v3 = (void *)((char *)this + 296);
      long long v4 = v2 << 8;
      unint64_t v5 = (std::mutex *)(*((void *)this + 38) + 16);
      do
      {
        std::mutex::~mutex(v5);
        unint64_t v5 = v6 + 4;
        v4 -= 256;
      }
      while (v4);
      (*(void (**)(void, void))(**((void **)this + 36) + 40))(*((void *)this + 36), *((void *)this + 38));
      *uint64_t v3 = 0;
      *((void *)this + 38) = 0;
    }
    *((void *)this + 36) = 0;
  }
  re::FunctionBase<24ul,void ()(void)>::destroyCallable((uint64_t)this + 248);
  re::FunctionBase<24ul,void ()(void)>::destroyCallable((uint64_t)this + 208);
  re::FunctionBase<24ul,void ()(re::FrameCount)>::destroyCallable((uint64_t)this + 168);
  re::FunctionBase<24ul,void ()(re::FrameCount)>::destroyCallable((uint64_t)this + 128);
  re::FixedArray<re::DelayedDestructorsForFrame>::deinit((void *)this + 12);
  re::FixedArray<re::DelayedDestructorsForFrame>::deinit((void *)this + 8);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

uint64_t re::SharedPersistentObject<re::FrameManager>::allocator(re *a1)
{
  return re::globalAllocators(a1)[2];
}

uint64_t re::FixedArray<re::DelayedDestructorsForFrame>::init<>(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 8;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 384, 8);
  a1[2] = result;
  if (result)
  {
    for (uint64_t i = 0; i != 336; i += 48)
    {
      uint64_t v6 = result + i;
      *(void *)(v6 + 8) = 0;
      *(void *)(v6 + 16) = 0;
      *(void *)uint64_t v6 = 0;
      *(_DWORD *)(v6 + 24) = 0;
      *(void *)(v6 + 32) = 0;
      *(void *)(v6 + 4ArcSharedObject::ArcSharedObject(this, 0) = 0xFFFFFFFFFFFFFFFLL;
    }
    *(void *)(result + 344) = 0;
    *(void *)(result + 352) = 0;
    *(void *)(result + 336) = 0;
    *(_DWORD *)(result + 36ArcSharedObject::ArcSharedObject(this, 0) = 0;
    *(void *)(result + 368) = 0;
    *(void *)(result + 376) = 0xFFFFFFFFFFFFFFFLL;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v4, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void *re::DynamicArray<re::MoveOnlyFunction<void ()(void)>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::MoveOnlyFunction<void ()(void)>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          uint64_t v2 = 40 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 40 * v9;
        uint64_t v11 = (uint64_t)v7;
        do
        {
          *(void *)(v11 + 24) = *(void *)(v8 + 24);
          *(void *)(v11 + 32) = 0;
          re::MoveOnlyFunctionBase<24ul,void ()(void)>::operator=<24ul>(v11, v8);
          re::MoveOnlyFunctionBase<24ul,void ()(void)>::destroyCallable(v8);
          v8 += 40;
          v11 += 40;
          v10 -= 40;
        }
        while (v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::MoveOnlyFunctionBase<24ul,void ()(void)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::MoveOnlyFunctionBase<24ul,void ()(void)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (*(void *)(a1 + 24) == *(void *)(a2 + 24))
    {
      uint64_t v5 = a2;
      if (v4 != a2)
      {
        *(void *)(a1 + 32) = v4;
        *(void *)(a2 + 32) = 0;
        return a1;
      }
    }
    else
    {
      uint64_t v5 = *(void *)(a2 + 32);
      if (!v4) {
        return a1;
      }
    }
    unint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
    uint64_t v7 = a1;
    if (v6 >= 0x19)
    {
      unint64_t v8 = v6;
      uint64_t v9 = *(void *)(a1 + 24);
      if (v9) {
        uint64_t v7 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v9 + 32))(v9, v8, 0);
      }
      else {
        uint64_t v7 = 0;
      }
    }
    *(void *)(a1 + 32) = v7;
    (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    re::MoveOnlyFunctionBase<24ul,void ()(void)>::destroyCallable(a2);
  }
  return a1;
}

void *re::InlineRenderGraphProvider::InlineRenderGraphProvider(void *a1, const re::DynamicString *a2, uint64_t a3, uint64_t a4)
{
  re::DynamicString::DynamicString((re::DynamicString *)v8, a2);
  *a1 = &unk_26E6D52C8;
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 1), (const re::DynamicString *)v8);
  if (*(void *)&v8[0])
  {
    if (BYTE8(v8[0])) {
      (*(void (**)(void))(**(void **)&v8[0] + 40))();
    }
    memset(v8, 0, sizeof(v8));
  }
  *a1 = &unk_26E713AC8;
  a1[8] = *(void *)(a3 + 24);
  a1[9] = 0;
  re::FunctionBase<24ul,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::operator=<24ul>((uint64_t)(a1 + 5), a3);
  a1[13] = *(void *)(a4 + 24);
  a1[14] = 0;
  re::FunctionBase<24ul,void ()(char const*,char const*,re::RenderFrame &)>::operator=<24ul>((uint64_t)(a1 + 10), a4);
  return a1;
}

uint64_t re::InlineRenderGraphProvider::provide(re::InlineRenderGraphProvider *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  uint64_t v5 = a3;
  unint64_t v6 = a2;
  return (*(uint64_t (**)(void, const char **, const char **, re::RenderFrame *))(**((void **)this + 14)
                                                                                            + 16))(*((void *)this + 14), &v6, &v5, a4);
}

unint64_t re::InlineRenderGraphProvider::prepareFrame(re::InlineRenderGraphProvider *this, char *a2, const char *a3, re::RenderFrame *a4)
{
  v10[0] = 0x2FD78E65604013F0;
  v10[1] = (unint64_t)"InlineRenderGraphProvider";
  unint64_t ScopeHash = re::RenderGraphProviderBase::generateScopeHash(v10, a2, a3);
  uint64_t v11 = a3;
  uint64_t v12 = a2;
  return ((ScopeHash << 6)
        + (ScopeHash >> 2)
        - 0x61C8864680B583E9
        + (*(uint64_t (**)(void, char **, const char **, re::RenderFrame *))(**((void **)this + 9) + 16))(*((void *)this + 9), &v12, &v11, a4)) ^ ScopeHash;
}