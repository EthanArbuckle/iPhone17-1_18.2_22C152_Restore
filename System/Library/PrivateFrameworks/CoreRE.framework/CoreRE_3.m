void re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      v5 = v8;
    }
    else {
      v4 = v6;
    }
  }
  while (v4);
  v10 = *v5;
  *(void *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 48 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void *re::make::shared::object<re::Shareable<re::AssetLoadDescriptor>,re::AssetLoadDescriptor&>@<X0>(re *a1@<X0>, void *a2@<X8>)
{
  v4 = re::globalAllocators(a1);
  v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 168, 8);
  result = re::Shareable<re::AssetLoadDescriptor>::Shareable<re::AssetLoadDescriptor&>(v5, (uint64_t *)a1);
  *a2 = result;
  return result;
}

void *re::Shareable<re::AssetLoadDescriptor>::Shareable<re::AssetLoadDescriptor&>(void *a1, uint64_t *a2)
{
  *a1 = &unk_26E6C91E0;
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 3), (const re::DynamicString *)a2);
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)(a1 + 7), a2 + 4);
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)(a1 + 12), a2 + 9);
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 17), (const re::DynamicString *)(a2 + 14));
  return a1;
}

void *re::Shareable<re::AssetLoadDescriptor>::~Shareable(void *a1)
{
  *a1 = &unk_26E6C91E0;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 17));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 12));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 7));
  re::DynamicString::deinit((re::DynamicString *)(a1 + 3));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::Shareable<re::AssetLoadDescriptor>::~Shareable(void *a1)
{
  *a1 = &unk_26E6C91E0;
  re::DynamicString::deinit((re::DynamicString *)(a1 + 17));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 12));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 7));
  re::DynamicString::deinit((re::DynamicString *)(a1 + 3));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::EventBus::getTypeId<RENetworkAssetAddedEvent>()
{
  v0 = &qword_268772000;
  {
    v0 = &qword_268772000;
    if (v2)
    {
      re::EventBus::getTypeId<RENetworkAssetAddedEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"24RENetworkAssetAddedEvent" & 0x7FFFFFFFFFFFFFFFLL), v3);
      v0 = &qword_268772000;
    }
  }
  return v0[432];
}

uint64_t re::EventBus::getTypeId<RENetworkAssetRemovedEvent>()
{
  v0 = &qword_268772000;
  {
    v0 = &qword_268772000;
    if (v2)
    {
      re::EventBus::getTypeId<RENetworkAssetRemovedEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"26RENetworkAssetRemovedEvent" & 0x7FFFFFFFFFFFFFFFLL), v3);
      v0 = &qword_268772000;
    }
  }
  return v0[434];
}

void re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(void *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v24, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v24;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)v24 = v5;
      *(void *)&v24[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        uint64_t v14 = v6 + 24;
        do
        {
          if ((*(_DWORD *)(v14 - 16) & 0x80000000) != 0)
          {
            unint64_t v15 = *(void *)(v14 - 24);
            unint64_t v16 = *(unsigned int *)(a1 + 24);
            unint64_t v17 = v15 % v16;
            uint64_t v18 = *(unsigned int *)(a1 + 36);
            if (v18 == 0x7FFFFFFF)
            {
              uint64_t v18 = *(unsigned int *)(a1 + 32);
              int v19 = v18;
              if (v18 == v16)
              {
                re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, (2 * v12));
                unint64_t v17 = v15 % *(unsigned int *)(a1 + 24);
                int v19 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + (v18 << 6) + 8);
            }
            else
            {
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + (v18 << 6) + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + (v18 << 6) + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + (v18 << 6) + 8) = *(_DWORD *)(*(void *)(a1 + 16) + (v18 << 6) + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(void *)(*(void *)(a1 + 16) + (v18 << 6)) = v15;
            *(void *)(*(void *)(a1 + 16) + (v18 << 6) + 16) = *(void *)(v14 - 8);
            uint64_t v22 = *(void *)(a1 + 16) + (v18 << 6);
            *(void *)(v22 + 48) = *(void *)(v14 + 24);
            *(void *)(v22 + 56) = 0;
            re::FunctionBase<24ul,void ()(void)>::operator=<24ul>(v22 + 24, v14);
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            int v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 64;
        }
        while (v11 < v10);
      }
      re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v24);
    }
  }
  else
  {
    if (a2) {
      signed int v23 = a2;
    }
    else {
      signed int v23 = 3;
    }
  }
}

void re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + (v10 << 6), 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::EntitlementManager::~EntitlementManager(re::EntitlementManager *this)
{
}

{
  uint64_t vars8;

  re::EntitlementManager::~EntitlementManager(this);
  JUMPOUT(0x237DBCBD0);
}

void re::EntitlementManager::init(uint64_t a1, void *a2)
{
  uint64_t v4 = a1 + 16;
  *(void *)(a1 + 20re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *a2;
  *(unsigned char *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 1;
  signed int v9 = *re::assetsLogObjects(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl(&dword_233120000, v9, OS_LOG_TYPE_DEFAULT, "EntitlementManager initialized", v10, 2u);
  }
}

void re::EntitlementManager::deinit(re::EntitlementManager *this)
{
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20);
  *((void *)this + 26) = 0;
  *((unsigned char *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  v3 = *re::assetsLogObjects(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_233120000, v3, OS_LOG_TYPE_DEFAULT, "EntitlementManager uninitialized", v4, 2u);
  }
}

void re::EntitlementManager::setAllowAnyShaderLibraryForPeer(re::EntitlementManager *this, uint64_t a2, int a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v8 = a2;
  if (a2)
  {
    v3 = (char *)this + 16;
    if (a3)
    {
      uint64_t v4 = (re *)re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)v3, &v8);
      long long v5 = *re::assetsLogObjects(v4);
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_DWORD *)buf = 134217984;
      uint64_t v10 = v8;
      unint64_t v6 = "EntitlementManager - Peer (peerID=%llu) is trusted to execute any shader library";
    }
    else
    {
      long long v7 = (re *)re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove((uint64_t)v3, &v8);
      long long v5 = *re::assetsLogObjects(v7);
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_DWORD *)buf = 134217984;
      uint64_t v10 = v8;
      unint64_t v6 = "EntitlementManager - Peer (peerID=%llu) is NOT trusted to execute any shader library";
    }
    _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, v6, buf, 0xCu);
  }
}

void re::EntitlementManager::setAllowLimitedRenderAssetsForPeer(re::EntitlementManager *this, uint64_t a2, int a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v8 = a2;
  if (a2)
  {
    v3 = (char *)this + 64;
    if (a3)
    {
      uint64_t v4 = (re *)re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)v3, &v8);
      long long v5 = *re::assetsLogObjects(v4);
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_DWORD *)buf = 134217984;
      uint64_t v10 = v8;
      unint64_t v6 = "EntitlementManager - Peer (peerID=%llu) is entitled to load limited render assets";
    }
    else
    {
      long long v7 = (re *)re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove((uint64_t)v3, &v8);
      long long v5 = *re::assetsLogObjects(v7);
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_DWORD *)buf = 134217984;
      uint64_t v10 = v8;
      unint64_t v6 = "EntitlementManager - Peer (peerID=%llu) is NOT entitled to load limited render assets";
    }
    _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, v6, buf, 0xCu);
  }
}

void re::EntitlementManager::setAllowRenderOnTopSPIForPeer(re::EntitlementManager *this, uint64_t a2, int a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v8 = a2;
  if (a2)
  {
    v3 = (char *)this + 112;
    if (a3)
    {
      uint64_t v4 = (re *)re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)v3, &v8);
      long long v5 = *re::assetsLogObjects(v4);
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_DWORD *)buf = 134217984;
      uint64_t v10 = v8;
      unint64_t v6 = "EntitlementManager - Peer (peerID=%llu) is entitled to use render on top SPI";
    }
    else
    {
      long long v7 = (re *)re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove((uint64_t)v3, &v8);
      long long v5 = *re::assetsLogObjects(v7);
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_DWORD *)buf = 134217984;
      uint64_t v10 = v8;
      unint64_t v6 = "EntitlementManager - Peer (peerID=%llu) is NOT entitled to use render on top SPI";
    }
    _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, v6, buf, 0xCu);
  }
}

void re::EntitlementManager::setAllowCARESyncBackForPeer(re::EntitlementManager *this, uint64_t a2, int a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v8 = a2;
  if (a2)
  {
    v3 = (char *)this + 160;
    if (a3)
    {
      buf[0] = 1;
      uint64_t v4 = (re *)re::HashTable<unsigned long long,BOOL,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add((uint64_t)v3, &v8, buf);
      long long v5 = *re::assetsLogObjects(v4);
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_DWORD *)buf = 134217984;
      uint64_t v10 = v8;
      unint64_t v6 = "EntitlementManager - Peer (peerID=%llu) is entitled to be sent owned CARE component data";
    }
    else
    {
      buf[0] = 0;
      long long v7 = (re *)re::HashTable<unsigned long long,BOOL,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add((uint64_t)v3, &v8, buf);
      long long v5 = *re::assetsLogObjects(v7);
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_DWORD *)buf = 134217984;
      uint64_t v10 = v8;
      unint64_t v6 = "EntitlementManager - Peer (peerID=%llu) is NOT entitled to be sent owned CARE component data";
    }
    _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, v6, buf, 0xCu);
  }
}

uint64_t re::HashTable<unsigned long long,BOOL,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(uint64_t result, uint64_t *a2, unsigned char *a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (*(void *)result)
  {
    unint64_t v9 = v8 % *(unsigned int *)(result + 24);
    uint64_t v10 = *(unsigned int *)(*(void *)(result + 8) + 4 * v9);
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v11 = *(void *)(result + 16);
      if (*(void *)(v11 + 32 * v10 + 16) == v6) {
        return result;
      }
      while (1)
      {
        uint64_t v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v11 + 32 * v10 + 16) == v6) {
          return result;
        }
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  result = re::HashTable<unsigned long long,BOOL,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(result, v9, v8, a2, a3);
  ++*(_DWORD *)(v5 + 40);
  return result;
}

void re::EntitlementManager::removePeer(re::EntitlementManager *this, unint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  unint64_t v19 = a2;
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove((uint64_t)this + 16, (uint64_t *)&v19);
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove((uint64_t)this + 64, (uint64_t *)&v19);
  v3 = (re *)re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove((uint64_t)this + 112, (uint64_t *)&v19);
  if (*((void *)this + 20))
  {
    unint64_t v4 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v19 ^ (v19 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v19 ^ (v19 >> 30))) >> 27));
    unint64_t v5 = (v4 ^ (v4 >> 31)) % *((unsigned int *)this + 46);
    uint64_t v6 = *((void *)this + 21);
    uint64_t v7 = *(unsigned int *)(v6 + 4 * v5);
    if (v7 != 0x7FFFFFFF)
    {
      uint64_t v8 = *((void *)this + 22);
      uint64_t v9 = v8 + 32 * v7;
      if (*(void *)(v9 + 16) == v19)
      {
        *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v9 + 8) & 0x7FFFFFFF;
LABEL_8:
        uint64_t v12 = *((void *)this + 22);
        uint64_t v13 = v12 + 32 * v7;
        int v16 = *(_DWORD *)(v13 + 8);
        unint64_t v15 = (int *)(v13 + 8);
        int v14 = v16;
        if (v16 < 0)
        {
          *unint64_t v15 = v14 & 0x7FFFFFFF;
          uint64_t v12 = *((void *)this + 22);
          int v14 = *(_DWORD *)(v12 + 32 * v7 + 8);
        }
        *(_DWORD *)(v12 + 32 * v7 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *((_DWORD *)this + 49) | v14 & 0x80000000;
        --*((_DWORD *)this + 47);
        int v17 = *((_DWORD *)this + 50) + 1;
        *((_DWORD *)this + 49) = v7;
        *((_DWORD *)this + 50) = v17;
      }
      else
      {
        while (1)
        {
          unsigned int v10 = v7;
          uint64_t v7 = *(_DWORD *)(v8 + 32 * v7 + 8) & 0x7FFFFFFF;
          if (v7 == 0x7FFFFFFF) {
            break;
          }
          uint64_t v11 = v8 + 32 * v7;
          if (*(void *)(v11 + 16) == v19)
          {
            *(_DWORD *)(v8 + 32 * v10 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(v8 + 32 * v10 + 8) & 0x80000000 | *(_DWORD *)(v11 + 8) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
  uint64_t v18 = *re::assetsLogObjects(v3);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    unint64_t v21 = v19;
    _os_log_impl(&dword_233120000, v18, OS_LOG_TYPE_DEFAULT, "EntitlementManager - Peer (peerID=%llu) has been removed from the entitlement manager", buf, 0xCu);
  }
}

uint64_t re::EntitlementManager::isPeerAllowedAnyShader(re::EntitlementManager *this)
{
  return 1;
}

uint64_t re::EntitlementManager::isPeerAllowedLimitedRenderAssets(re::EntitlementManager *this)
{
  return 1;
}

uint64_t re::EntitlementManager::isPeerAllowedRenderOnTopSPI(re::EntitlementManager *this)
{
  return 1;
}

uint64_t re::EntitlementManager::peerCARESyncBackPermission(re::EntitlementManager *this)
{
  return 0;
}

uint64_t re::HashTable<unsigned long long,BOOL,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, unsigned char *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,BOOL,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12 | 0x80000000;
  uint64_t v13 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 32 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(unsigned char *)(*(void *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v13 + 4 * are::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long long,BOOL,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long long,BOOL,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), *(void *)&v13[16] + v10 + 16, *(void *)&v13[16] + v10 + 24);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t *re::resourceSharingLogObjects(re *this)
{
  {
    re::resourceSharingLogObjects(void)::logObjects = (uint64_t)os_log_create("com.apple.re", "ResourceSharing");
    qword_26879E2D0 = (uint64_t)os_log_create("com.apple.re", "ResourceFetch");
  }
  return &re::resourceSharingLogObjects(void)::logObjects;
}

void *re::allocInfo_AssetPathLoadDescriptorParameters(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_32, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_32))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF74D68, "AssetPathLoadDescriptorParameters");
    __cxa_guard_release(&_MergedGlobals_32);
  }
  return &unk_26AF74D68;
}

void re::initInfo_AssetPathLoadDescriptorParameters(re *this, re::IntrospectionBase *a2)
{
  v18[0] = 0xAF839740F16039E8;
  v18[1] = "AssetPathLoadDescriptorParameters";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v19;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF74D28, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF74D28);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      unsigned int v7 = re::IntrospectionInfo<re::DynamicString>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "scheme";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF74D50 = v8;
      unsigned int v9 = re::introspectionAllocator((re *)v8);
      unint64_t v11 = re::IntrospectionInfo<re::DynamicString>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "root";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x2000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF74D58 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      unint64_t v15 = re::IntrospectionInfo<re::DynamicString>::get(1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "subpath";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x4000000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF74D60 = v16;
      __cxa_guard_release(&qword_26AF74D28);
    }
  }
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x6000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 3;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = &qword_26AF74D50;
  *((void *)this + 9) = re::internal::defaultConstruct<re::AssetPathLoadDescriptorParameters>;
  *((void *)this + 11) = 0;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::AssetPathLoadDescriptorParameters>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::AssetPathLoadDescriptorParameters>;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::AssetPathLoadDescriptorParameters>;
  re::IntrospectionRegistry::add(this, v3);
  long long v17 = v19;
}

void *re::IntrospectionInfo<re::DynamicString>::get(int a1, const re::IntrospectionBase *a2)
{
  {
    int v9 = a1;
    a1 = v9;
    if (v10)
    {
      re::IntrospectionDynamicString::IntrospectionDynamicString((re::IntrospectionDynamicString *)&re::IntrospectionInfo<re::DynamicString>::get(BOOL)::info);
      a1 = v9;
    }
  }
  if (a1)
  {
    if (!re::IntrospectionInfo<re::DynamicString>::get(BOOL)::isInitialized)
    {
      re::IntrospectionInfo<re::DynamicString>::get(BOOL)::isInitialized = 1;
      re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::IntrospectionInfo<re::DynamicString>::get(BOOL)::info, a2);
      xmmword_268772DE8 = v11;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v11);
    int v2 = re::IntrospectionInfo<re::DynamicString>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v11);
    if (!v2)
    {
      uint64_t v4 = re::introspectionSharedMutex(v3);
      std::__shared_mutex_base::lock(v4);
      if (!re::IntrospectionInfo<re::DynamicString>::get(BOOL)::isInitialized)
      {
        re::IntrospectionInfo<re::DynamicString>::get(BOOL)::isInitialized = 1;
        re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::IntrospectionInfo<re::DynamicString>::get(BOOL)::info, v6);
        xmmword_268772DE8 = v11;
      }
      unsigned int v7 = re::introspectionSharedMutex(v5);
      std::__shared_mutex_base::unlock(v7);
    }
  }
  return &re::IntrospectionInfo<re::DynamicString>::get(BOOL)::info;
}

void *re::internal::defaultConstruct<re::AssetPathLoadDescriptorParameters>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  uint64_t v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)a3, 0);
  *(_OWORD *)(a3 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(a3 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  long long v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)(a3 + 32), 0);
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  uint64_t v6 = (void *)(a3 + 64);
  return re::DynamicString::setCapacity(v6, 0);
}

double re::internal::defaultDestruct<re::AssetPathLoadDescriptorParameters>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString::deinit((re::DynamicString *)(a3 + 64));
  re::DynamicString::deinit((re::DynamicString *)(a3 + 32));
  return re::DynamicString::deinit((re::DynamicString *)a3);
}

void *re::internal::defaultConstructV2<re::AssetPathLoadDescriptorParameters>(uint64_t a1)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  int v2 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)a1, 0);
  *(_OWORD *)(a1 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  v3 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)(a1 + 32), 0);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  uint64_t v4 = (void *)(a1 + 64);
  return re::DynamicString::setCapacity(v4, 0);
}

double re::internal::defaultDestructV2<re::AssetPathLoadDescriptorParameters>(uint64_t a1)
{
  re::DynamicString::deinit((re::DynamicString *)(a1 + 64));
  re::DynamicString::deinit((re::DynamicString *)(a1 + 32));
  return re::DynamicString::deinit((re::DynamicString *)a1);
}

_anonymous_namespace_ *re::FallbackAssetProvider::FallbackAssetProvider(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *((void *)a1 + 3) = 0;
  *(void *)a1 = &unk_26E6C93C8;
  *((void *)a1 + 4) = 0;
  *((void *)a1 + 5) = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF74D48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF74D48))
  {
    qword_26AF74D40 = re::internal::getOrCreateInfo((re::internal *)"AssetPathLoadDescriptorParameters", (uint64_t (*)(re::internal *))re::allocInfo_AssetPathLoadDescriptorParameters, (re::IntrospectionBase *(*)(void))re::initInfo_AssetPathLoadDescriptorParameters, (void (*)(re::IntrospectionBase *))&unk_26AF74D30, 0);
    __cxa_guard_release(&qword_26AF74D48);
  }
  qword_26AF74D38 = qword_26AF74D40;
  *((void *)a1 + 4) = a3;
  *((void *)a1 + 5) = a4;
  *((void *)a1 + 3) = a2;
  return a1;
}

void re::FallbackAssetProvider::~FallbackAssetProvider(re::FallbackAssetProvider *this)
{
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

re::DynamicString *re::FallbackAssetProvider::getAssetPath(re::FallbackAssetProvider *this, re::AssetPath *a2, const re::AssetLoadDescriptor *a3, re::AssetLoadDescriptor *a4)
{
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v32, 0);
  *((void *)&v36 + 1) = 0;
  long long v37 = 0uLL;
  int v9 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v36, 0);
  *((void *)&v38 + 1) = 0;
  long long v39 = 0uLL;
  re::DynamicString::setCapacity(&v38, 0);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF74D48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF74D48))
  {
    qword_26AF74D40 = re::internal::getOrCreateInfo((re::internal *)"AssetPathLoadDescriptorParameters", (uint64_t (*)(re::internal *))re::allocInfo_AssetPathLoadDescriptorParameters, (re::IntrospectionBase *(*)(void))re::initInfo_AssetPathLoadDescriptorParameters, (void (*)(re::IntrospectionBase *))&unk_26AF74D30, 0);
    __cxa_guard_release(&qword_26AF74D48);
  }
  uint64_t IntrospectableData = re::AssetLoadDescriptor::getIntrospectableData(a4, (re **)qword_26AF74D40, &v32, 0);
  if (IntrospectableData)
  {
    long long v11 = (_anonymous_namespace_ *)re::DynamicString::operator+((re::DynamicString *)&v32, ":", (re::DynamicString *)&v26);
    uint64_t v12 = (unsigned char *)v37;
    if ((BYTE8(v36) & 1) == 0) {
      uint64_t v12 = (char *)&v36 + 9;
    }
    if (*v12)
    {
      re::DynamicString::operator+((re::DynamicString *)&v36, "/", (re::DynamicString *)&v24);
    }
    else
    {
    }
    re::DynamicString::operator+((re::DynamicString *)&v26, (uint64_t)&v24, (re::DynamicString *)&v21);
    re::DynamicString::operator+((re::DynamicString *)&v21, (uint64_t)&v38, (re::DynamicString *)&v29);
    if ((void)v21)
    {
      if (BYTE8(v21)) {
        (*(void (**)(void))(*(void *)v21 + 40))();
      }
      long long v21 = 0u;
      long long v22 = 0u;
    }
    if (v24 && (v25 & 1) != 0) {
      (*(void (**)(void))(*(void *)v24 + 40))();
    }
    if (v26.n128_u64[0] && (v26.n128_u8[8] & 1) != 0) {
      (*(void (**)(void))(*(void *)v26.n128_u64[0] + 40))();
    }
    if (v30) {
      unint64_t v15 = *(char **)&v31[7];
    }
    else {
      unint64_t v15 = v31;
    }
    v17.n128_f64[0] = re::AssetPath::parse(a3, v15, 0, *((const re::internal::AssetTypeRegistry **)a2 + 3), *((os_unfair_lock_s **)a2 + 5), &v21);
    if ((_BYTE)v21)
    {
      *(unsigned char *)this = 1;
    }
    else
    {
      re::DynamicString::operator+((re::DynamicString *)&v24, (uint64_t)&v22 + 8, (re::DynamicString *)&v26);
      __n128 v17 = v26;
      __n128 v26 = 0uLL;
      uint64_t v18 = v27;
      uint64_t v19 = v28;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      *(unsigned char *)this = 0;
      *(__n128 *)((char *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v17;
      *((void *)this + 3) = v18;
      *((void *)this + 4) = v19;
      if (v24 && (v25 & 1) != 0) {
        (*(void (**)(void))(*(void *)v24 + 40))();
      }
      if (!(_BYTE)v21 && *((void *)&v22 + 1) && (v23 & 1) != 0) {
        (*(void (**)(void))(**((void **)&v22 + 1) + 40))();
      }
    }
    if (v29 && (v30 & 1) != 0) {
      (*(void (**)(__n128))(*(void *)v29 + 40))(v17);
    }
  }
  else
  {
    long long v13 = v21;
    long long v14 = v22;
    *(unsigned char *)this = 0;
    *(_OWORD *)((char *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v13;
    *(_OWORD *)((char *)this + 24) = v14;
  }
  if ((void)v38)
  {
    if (BYTE8(v38)) {
      (*(void (**)(void))(*(void *)v38 + 40))();
    }
    long long v38 = 0u;
    long long v39 = 0u;
  }
  if ((void)v36)
  {
    if (BYTE8(v36)) {
      (*(void (**)(void))(*(void *)v36 + 40))();
    }
    long long v36 = 0u;
    long long v37 = 0u;
  }
  result = v32;
  if (v32)
  {
    if (v33) {
      return (re::DynamicString *)(*(uint64_t (**)(void))(*(void *)v32 + 40))();
    }
  }
  return result;
}

uint64_t re::FallbackAssetProvider::makeDescriptor(re::FallbackAssetProvider *this, const char ***a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)this + 3) = 0;
  uint64_t v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(this, 0);
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((void *)this + 6) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_DWORD *)this + 24) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *((void *)this + 17) = 0;
  re::DynamicString::setCapacity((void *)this + 14, 0);
  *(void *)char v23 = "AssetPath";
  uint64_t v24 = 9;
  re::DynamicString::operator=(this, (uint64_t)v23);
  size_t v5 = strlen(*a2[9]);
  *(void *)char v23 = *a2[9];
  uint64_t v24 = v5;
  re::DynamicString::operator=((re::FallbackAssetProvider *)((char *)this + 112), (uint64_t)v23);
  uint64_t v6 = a2[1];
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v33 = (uint64_t)v6;
  uint64_t v34 = 0;
  re::DynamicString::setCapacity(&v33, 0);
  re::AssetPath::fullAssetPath((re::DynamicString *)a2, (re::DynamicString *)&v33);
  v23[0] = 58;
  unsigned int v7 = re::DynamicString::find((re::DynamicString *)&v33, v23, 1, 0, (uint64_t)v31);
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v23, 0);
  *((void *)&v27 + 1) = 0;
  long long v28 = 0uLL;
  int v9 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v27, 0);
  *((void *)&v29 + 1) = 0;
  long long v30 = 0uLL;
  re::DynamicString::setCapacity(&v29, 0);
  re::DynamicString::substr((re::DynamicString *)&v33, 0, v32, (re::DynamicString *)&v21);
  re::DynamicString::operator=((re::DynamicString *)v23, (re::DynamicString *)&v21);
  if (v21 && (v22 & 1) != 0) {
    (*(void (**)(void))(*(void *)v21 + 40))();
  }
  re::DynamicString::operator=((re::DynamicString *)&v27, (re::DynamicString *)(a2 + 1));
  re::DynamicString::operator=((re::DynamicString *)&v29, (re::DynamicString *)(a2 + 5));
  re::DynamicString::DynamicString((re::DynamicString *)&v17, (const re::DynamicString *)v23);
  re::DynamicString::DynamicString((re::DynamicString *)v19, (const re::DynamicString *)&v27);
  re::DynamicString::DynamicString((re::DynamicString *)v20, (const re::DynamicString *)&v29);
  re::AssetLoadDescriptor::setIntrospectableData((char **)this, (const re::IntrospectionBase *)qword_26AF74D38, (const re::IntrospectionBase **)&v17, 0);
  if (v20[0])
  {
    if (v20[1]) {
      (*(void (**)(void))(*(void *)v20[0] + 40))();
    }
    memset(v20, 0, sizeof(v20));
  }
  if (v19[0])
  {
    if (v19[1]) {
      (*(void (**)(void))(*(void *)v19[0] + 40))();
    }
    memset(v19, 0, sizeof(v19));
  }
  if ((void)v17)
  {
    if (BYTE8(v17)) {
      (*(void (**)(void))(*(void *)v17 + 40))();
    }
    long long v17 = 0u;
    long long v18 = 0u;
  }
  if ((void)v29)
  {
    if (BYTE8(v29)) {
      (*(void (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void))(*(void *)v29 + 40))(v29, v30, v10, v11, v12, v13, v14, v15, v17, *((void *)&v17 + 1), v18, *((void *)&v18 + 1));
    }
    long long v29 = 0u;
    long long v30 = 0u;
  }
  if ((void)v27)
  {
    if (BYTE8(v27)) {
      (*(void (**)(void))(*(void *)v27 + 40))();
    }
    long long v27 = 0u;
    long long v28 = 0u;
  }
  if (*(void *)v23 && (v24 & 1) != 0) {
    (*(void (**)(void))(**(void **)v23 + 40))();
  }
  uint64_t result = v33;
  if (v33)
  {
    if (v34) {
      return (*(uint64_t (**)(void))(*(void *)v33 + 40))();
    }
  }
  return result;
}

re::DynamicString *re::FallbackAssetProvider::load@<X0>(re::internal::AssetTypeRegistry **this@<X0>, const re::AssetLoadDescriptor *a2@<X1>, re::AssetSerializationScheme *a3@<X3>, uint64_t a4@<X8>)
{
  if (*((unsigned char *)a2 + 8)) {
    int v9 = (const char *)*((void *)a2 + 2);
  }
  else {
    int v9 = (char *)a2 + 9;
  }
  uint64_t v10 = (_anonymous_namespace_ *)strcmp(v9, "AssetPath");
  if (v10)
  {
    long long v12 = v40;
    uint64_t v13 = v41;
    uint64_t v14 = v42;
    *(unsigned char *)a4 = 0;
    *(_OWORD *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    *(void *)(a4 + 24) = v13;
    *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v14;
    return result;
  }
  LODWORD(v40) = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v41 = 0;
  uint64_t v15 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)&v40 + 1, 0);
  *((void *)&v44 + 1) = 0;
  long long v45 = 0uLL;
  re::DynamicString::setCapacity(&v44, 0);
  uint64_t v46 = 0;
  AssetPath = re::FallbackAssetProvider::getAssetPath((re::FallbackAssetProvider *)v36, (re::AssetPath *)this, (const re::AssetLoadDescriptor *)&v40, a2);
  if (v36[0])
  {
    long long v34 = 0uLL;
    uint64_t v35 = 0;
    re::DynamicString::setCapacity(&v33, 0);
    uint64_t v17 = re::AssetPath::filePathToAsset((re::AssetPath *)&v40, (re::DynamicString *)&v33, 1, 0);
    if (v17)
    {
      if (*((unsigned char *)a2 + 120)) {
        long long v18 = (char *)*((void *)a2 + 16);
      }
      else {
        long long v18 = (char *)a2 + 121;
      }
      re::loadCompiledOrSourceFile((char *)&v33, v18, this + 3, (uint64_t)a3, a4);
    }
    else
    {
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      uint64_t v24 = *((void *)&v40 + 1);
      uint64_t v25 = 0;
      re::DynamicString::setCapacity(&v24, 0);
      re::AssetPath::fullAssetPath((re::DynamicString *)&v40, (re::DynamicString *)&v24);
      re::DynamicString::operator+((re::DynamicString *)&v28, (uint64_t)&v24, (re::DynamicString *)&v30);
      long long v21 = v30;
      long long v30 = 0uLL;
      uint64_t v22 = v31;
      uint64_t v23 = v32;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      *(unsigned char *)a4 = 0;
      *(_OWORD *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v21;
      *(void *)(a4 + 24) = v22;
      *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v23;
      if (v24 && (v25 & 1) != 0) {
        (*(void (**)(void))(*(void *)v24 + 40))();
      }
      if (v28 && (v29 & 1) != 0) {
        (*(void (**)(void))(*(void *)v28 + 40))();
      }
    }
    uint64_t v19 = v33;
    if (!v33 || (v34 & 1) == 0) {
      goto LABEL_26;
    }
    uint64_t v20 = *((void *)&v34 + 1);
  }
  else
  {
    re::DynamicString::DynamicString((re::DynamicString *)&v33, (const re::DynamicString *)&v37);
    *(unsigned char *)a4 = 0;
    *(void *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v33;
    *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v35;
    *(_OWORD *)(a4 + 16) = v34;
    uint64_t v19 = v37;
    if (!v37 || (v38 & 1) == 0) {
      goto LABEL_26;
    }
    uint64_t v20 = v39;
  }
  (*(void (**)(uint64_t *, uint64_t))(*v19 + 40))(v19, v20);
LABEL_26:
  if ((void)v44)
  {
    if (BYTE8(v44)) {
      (*(void (**)(void))(*(void *)v44 + 40))();
    }
    long long v44 = 0u;
    long long v45 = 0u;
  }
  uint64_t result = (re::DynamicString *)*((void *)&v40 + 1);
  if (*((void *)&v40 + 1))
  {
    if (v41) {
      return (re::DynamicString *)(*(uint64_t (**)(void))(**((void **)&v40 + 1) + 40))();
    }
  }
  return result;
}

uint64_t re::FallbackAssetProvider::resolveChild@<X0>(re::FallbackAssetProvider *this@<X0>, const re::AssetLoadDescriptor *a2@<X1>, char *a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  if (*((unsigned char *)a2 + 8)) {
    uint64_t v10 = (const char *)*((void *)a2 + 2);
  }
  else {
    uint64_t v10 = (char *)a2 + 9;
  }
  uint64_t v11 = (_anonymous_namespace_ *)strcmp(v10, "AssetPath");
  if (v11)
  {
    uint64_t result = re::DynamicString::format((re::DynamicString *)"Scheme %s does not match scheme %s.", (re::DynamicString *)v34, v10, "AssetPath");
    long long v13 = *(_OWORD *)v34;
    long long v14 = *(_OWORD *)&v34[16];
    *(unsigned char *)a5 = 0;
    *(_OWORD *)(a5 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v13;
    *(_OWORD *)(a5 + 24) = v14;
    return result;
  }
  int v53 = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  uint64_t v55 = 0;
  uint64_t v15 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v54, 0);
  *((void *)&v58 + 1) = 0;
  long long v59 = 0uLL;
  re::DynamicString::setCapacity(&v58, 0);
  uint64_t v60 = 0;
  AssetPath = re::FallbackAssetProvider::getAssetPath((re::FallbackAssetProvider *)v50, this, (const re::AssetLoadDescriptor *)&v53, a2);
  if (v50[0])
  {
    LODWORD(v45) = 0;
    memset(v46, 0, sizeof(v46));
    uint64_t v17 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v46, 0);
    long long v48 = 0u;
    long long v47 = 0u;
    re::DynamicString::setCapacity(&v47, 0);
    uint64_t v49 = 0;
    re::AssetPath::parse((re::AssetPath *)&v45, a3, (const re::AssetPath *)&v53, *((const re::internal::AssetTypeRegistry **)this + 3), *((os_unfair_lock_s **)this + 5), v42);
    if (v42[0])
    {
      uint64_t v49 = re::internal::AssetTypeRegistry::assetTypeWithName(*((re::internal::AssetTypeRegistry **)this + 3), a4);
      re::FallbackAssetProvider::makeDescriptor((re::FallbackAssetProvider *)&v24, &v45);
      uint64_t v19 = v24;
      uint64_t v24 = 0;
      *(void *)long long v34 = v19;
      *(_OWORD *)&v34[24] = v26;
      long long v26 = 0u;
      *(_OWORD *)&v34[8] = v25;
      long long v25 = 0u;
      long long v35 = v27;
      long long v27 = 0u;
      ++v28;
      int v36 = 1;
      long long v37 = v29;
      long long v38 = v30;
      long long v29 = 0u;
      long long v30 = 0u;
      ++v31;
      int v39 = 1;
      *(_OWORD *)long long v40 = *(_OWORD *)v32;
      memset(v32, 0, sizeof(v32));
      long long v41 = v33;
      *(void *)&v40[16] = *(void *)&v32[16];
      long long v33 = 0uLL;
      v20.n128_f64[0] = re::Optional<re::AssetLoadDescriptor>::Optional(a5, (uint64_t)v34);
      if (*(void *)&v40[8])
      {
        if (v40[16]) {
          (*(void (**)(double))(**(void **)&v40[8] + 40))(v20.n128_f64[0]);
        }
        __n128 v20 = 0uLL;
        *(_OWORD *)&v40[8] = 0u;
        long long v41 = 0u;
      }
      if (*((void *)&v37 + 1))
      {
        if (*(void *)v40) {
          (*(void (**)(__n128))(**((void **)&v37 + 1) + 40))(v20);
        }
        *(void *)long long v40 = 0;
        long long v38 = 0uLL;
        *((void *)&v37 + 1) = 0;
        ++v39;
      }
      if (*(void *)&v34[32])
      {
        if ((void)v37) {
          (*(void (**)(__n128))(**(void **)&v34[32] + 40))(v20);
        }
        *(void *)&long long v37 = 0;
        long long v35 = 0uLL;
        *(void *)&v34[32] = 0;
        ++v36;
      }
      if (*(void *)v34)
      {
        if (v34[8]) {
          (*(void (**)(__n128))(**(void **)v34 + 40))(v20);
        }
        __n128 v20 = 0uLL;
        memset(v34, 0, 32);
      }
      if (*(void *)&v32[8])
      {
        if (v32[16]) {
          (*(void (**)(__n128))(**(void **)&v32[8] + 40))(v20);
        }
        __n128 v20 = 0uLL;
        *(_OWORD *)&v32[8] = 0u;
        long long v33 = 0u;
      }
      if (*((void *)&v29 + 1))
      {
        if (*(void *)v32) {
          (*(void (**)(__n128))(**((void **)&v29 + 1) + 40))(v20);
        }
        *(void *)uint64_t v32 = 0;
        long long v30 = 0uLL;
        *((void *)&v29 + 1) = 0;
        ++v31;
      }
      if (*((void *)&v26 + 1))
      {
        if ((void)v29) {
          (*(void (**)(__n128))(**((void **)&v26 + 1) + 40))(v20);
        }
        *(void *)&long long v29 = 0;
        long long v27 = 0uLL;
        *((void *)&v26 + 1) = 0;
        ++v28;
      }
    }
    else
    {
      re::DynamicString::operator+((re::DynamicString *)&v24, (uint64_t)&v43, (re::DynamicString *)v34);
      __n128 v20 = *(__n128 *)v34;
      memset(v34, 0, 32);
      uint64_t v22 = *(void *)&v34[16];
      uint64_t v23 = *(void *)&v34[24];
      *(unsigned char *)a5 = 0;
      *(__n128 *)(a5 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v20;
      *(void *)(a5 + 24) = v22;
      *(void *)(a5 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v23;
    }
    if (v24 && (v25 & 1) != 0) {
      (*(void (**)(__n128))(*(void *)v24 + 40))(v20);
    }
    if (!v42[0] && v43 && (v44 & 1) != 0) {
      (*(void (**)(__n128))(*(void *)v43 + 40))(v20);
    }
    if ((void)v47)
    {
      if (BYTE8(v47)) {
        (*(void (**)(__n128))(*(void *)v47 + 40))(v20);
      }
      __n128 v20 = 0uLL;
      long long v47 = 0u;
      long long v48 = 0u;
    }
    if (v46[0] && (v46[1] & 1) != 0) {
      (*(void (**)(__n128))(*(void *)v46[0] + 40))(v20);
    }
    if (v50[0]) {
      goto LABEL_54;
    }
  }
  else
  {
    re::DynamicString::DynamicString((re::DynamicString *)v34, (const re::DynamicString *)&v51);
    *(unsigned char *)a5 = 0;
    uint64_t v21 = *(void *)&v34[24];
    *(void *)(a5 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(void *)v34;
    *(void *)(a5 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v21;
    __n128 v20 = *(__n128 *)&v34[8];
    *(_OWORD *)(a5 + 16) = *(_OWORD *)&v34[8];
  }
  if (v51 && (v52 & 1) != 0) {
    (*(void (**)(void))(*(void *)v51 + 40))();
  }
LABEL_54:
  if ((void)v58)
  {
    if (BYTE8(v58)) {
      (*(void (**)(__n128))(*(void *)v58 + 40))(v20);
    }
    __n128 v20 = 0uLL;
    long long v58 = 0u;
    long long v59 = 0u;
  }
  uint64_t result = (uint64_t)v54;
  if (v54)
  {
    if (v55) {
      return (*(uint64_t (**)(__n128))(*v54 + 40))(v20);
    }
  }
  return result;
}

uint64_t *re::FallbackAssetProvider::getDescription(re::FallbackAssetProvider *this, const re::AssetLoadDescriptor *a2, re::DynamicString *a3)
{
  int v18 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v20 = 0;
  uint64_t v6 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v19, 0);
  *((void *)&v23 + 1) = 0;
  long long v24 = 0uLL;
  re::DynamicString::setCapacity(&v23, 0);
  uint64_t v25 = 0;
  re::FallbackAssetProvider::getAssetPath((re::FallbackAssetProvider *)v14, this, (const re::AssetLoadDescriptor *)&v18, a2);
  if (v14[0])
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v10 = (const char *)v19;
    uint64_t v11 = 0;
    re::DynamicString::setCapacity(&v10, 0);
    re::AssetPath::fullAssetPath((re::DynamicString *)&v18, (re::DynamicString *)&v10);
    re::DynamicString::operator=(a3, (re::DynamicString *)&v10);
    unsigned int v7 = v10;
    if (v10 && (v11 & 1) != 0)
    {
      uint64_t v8 = v12;
LABEL_8:
      (*(void (**)(const char *, uint64_t))(*(void *)v7 + 40))(v7, v8);
    }
  }
  else
  {
    uint64_t v10 = "mangled";
    uint64_t v11 = 7;
    re::DynamicString::operator=(a3, (uint64_t)&v10);
    unsigned int v7 = v15;
    if (v15 && (v16 & 1) != 0)
    {
      uint64_t v8 = v17;
      goto LABEL_8;
    }
  }
  if ((void)v23)
  {
    if (BYTE8(v23)) {
      (*(void (**)(void))(*(void *)v23 + 40))();
    }
    long long v23 = 0u;
    long long v24 = 0u;
  }
  uint64_t result = v19;
  if (v19)
  {
    if (v20) {
      return (uint64_t *)(*(uint64_t (**)(void))(*v19 + 40))();
    }
  }
  return result;
}

uint64_t re::FallbackAssetProvider::getAssetPathForRelease@<X0>(_anonymous_namespace_ *a1@<X0>, re::AssetLoadDescriptor *a2@<X1>, uint64_t a3@<X8>)
{
  int v17 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v19 = 0;
  uint64_t v6 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v18, 0);
  *((void *)&v22 + 1) = 0;
  long long v23 = 0uLL;
  re::DynamicString::setCapacity(&v22, 0);
  uint64_t v24 = 0;
  re::FallbackAssetProvider::getAssetPath((re::FallbackAssetProvider *)v14, a1, (const re::AssetLoadDescriptor *)&v17, a2);
  if (!v14[0] && v15 && (v16 & 1) != 0) {
    (*(void (**)(void))(*(void *)v15 + 40))();
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  long long v11 = (unint64_t)v18;
  re::DynamicString::setCapacity(&v11, 0);
  re::AssetPath::fullAssetPath((re::DynamicString *)&v17, (re::DynamicString *)&v11);
  long long v7 = v11;
  uint64_t v8 = v12;
  uint64_t v9 = v13;
  *(unsigned char *)a3 = 1;
  *(_OWORD *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7;
  *(void *)(a3 + 24) = v8;
  *(void *)(a3 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v9;
  if ((void)v22)
  {
    if (BYTE8(v22)) {
      (*(void (**)(void))(*(void *)v22 + 40))();
    }
    long long v22 = 0u;
    long long v23 = 0u;
  }
  uint64_t result = (uint64_t)v18;
  if (v18)
  {
    if (v19) {
      return (*(uint64_t (**)(void))(*v18 + 40))();
    }
  }
  return result;
}

uint64_t re::FallbackAssetProvider::makeDescriptorFromAssetPath@<X0>(const char ***a1@<X1>, uint64_t a2@<X8>)
{
  re::FallbackAssetProvider::makeDescriptor((re::FallbackAssetProvider *)&v6, a1);
  v4.n128_f64[0] = re::Optional<re::AssetLoadDescriptor>::Optional(a2, (uint64_t)&v6);
  if ((void)v18)
  {
    if (BYTE8(v18)) {
      (*(void (**)(double))(*(void *)v18 + 40))(v4.n128_f64[0]);
    }
    __n128 v4 = 0uLL;
    long long v18 = 0u;
    long long v19 = 0u;
  }
  if (v13)
  {
    if (v17) {
      (*(void (**)(__n128))(*(void *)v13 + 40))(v4);
    }
    uint64_t v17 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v13 = 0;
    ++v16;
  }
  if (v8)
  {
    if (v12) {
      (*(void (**)(__n128))(*(void *)v8 + 40))(v4);
    }
    uint64_t v12 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v8 = 0;
    ++v11;
  }
  uint64_t result = v6;
  if (v6)
  {
    if (v7) {
      return (*(uint64_t (**)(__n128))(*(void *)v6 + 40))(v4);
    }
  }
  return result;
}

const char *re::FallbackAssetProvider::schemeName(re::FallbackAssetProvider *this)
{
  return "AssetPath";
}

unsigned char *re::AssetProvider::transformDescriptor@<X0>(unsigned char *a1@<X8>)
{
  v2[0] = 0;
  v3[0] = 0;
  *a1 = 1;
  re::Optional<re::AssetLoadDescriptor>::Optional((uint64_t)(a1 + 8), v3);
  re::Optional<re::AssetLoadDescriptor>::~Optional(v3);
  return re::Optional<re::AssetLoadDescriptor>::~Optional(v2);
}

void re::AssetProvider::getSource(unsigned char *a1@<X8>)
{
  *a1 = 1;
  a1[8] = 0;
}

uint64_t re::AssetProvider::isDeviceAssetForRelease()
{
  return 0;
}

double re::Optional<re::AssetLoadDescriptor>::Optional(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *(void *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(void *)a2;
  *(void *)a2 = 0;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 24) = 0;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v6;
  *(void *)(a2 + 16) = v5;
  *(void *)(a1 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 32);
  *(void *)(a1 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7;
  *(void *)(a2 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v8 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 48);
  *(void *)(a2 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v8;
  uint64_t v9 = *(void *)(a1 + 72);
  *(void *)(a1 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = v9;
  ++*(_DWORD *)(a2 + 56);
  ++*(_DWORD *)(a1 + 64);
  *(void *)(a1 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(a1 + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  uint64_t v10 = *(void *)(a2 + 80);
  *(void *)(a1 + 80) = *(void *)(a2 + 72);
  *(void *)(a1 + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v10;
  *(void *)(a2 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(a2 + 80) = 0;
  uint64_t v11 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = *(void *)(a2 + 88);
  *(void *)(a2 + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v11;
  uint64_t v12 = *(void *)(a1 + 112);
  *(void *)(a1 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = v12;
  ++*(_DWORD *)(a2 + 96);
  ++*(_DWORD *)(a1 + 104);
  *(_OWORD *)(a1 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 144) = *(void *)(a2 + 136);
  uint64_t v13 = *(void *)(a2 + 120);
  *(void *)(a1 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = *(void *)(a2 + 112);
  *(void *)(a2 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  uint64_t v14 = *(void *)(a2 + 128);
  *(void *)(a2 + 136) = 0;
  uint64_t v16 = *(void *)(a1 + 128);
  uint64_t v15 = *(void *)(a1 + 136);
  *(void *)(a1 + 12re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v13;
  *(void *)(a1 + 136) = v14;
  *(void *)(a2 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = v16;
  *(void *)(a2 + 12re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v15;
  return result;
}

double re::Optional<re::AssetLoadDescriptor>::Optional(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  *(unsigned char *)a1 = v2;
  if (v2)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
    *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *((void *)a2 + 4);
    uint64_t v4 = *((void *)a2 + 2);
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *((void *)a2 + 1);
    *((void *)a2 + 1) = 0;
    uint64_t v5 = *((void *)a2 + 3);
    *((void *)a2 + 4) = 0;
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v6 = *(void *)(a1 + 24);
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v5;
    *((void *)a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v7;
    *((void *)a2 + 3) = v6;
    *(void *)(a1 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    *(void *)(a1 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 40) = 0;
    uint64_t v8 = *((void *)a2 + 6);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *(void *)(a1 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v8;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 6) = 0;
    uint64_t v9 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = *((void *)a2 + 7);
    *((void *)a2 + 7) = v9;
    uint64_t v10 = *(void *)(a1 + 72);
    *(void *)(a1 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *((void *)a2 + 9);
    *((void *)a2 + 9) = v10;
    ++*((_DWORD *)a2 + 16);
    ++*(_DWORD *)(a1 + 64);
    *(void *)(a1 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    *(void *)(a1 + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 104) = 0;
    uint64_t v11 = *((void *)a2 + 11);
    *(void *)(a1 + 80) = *((void *)a2 + 10);
    *(void *)(a1 + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v11;
    *((void *)a2 + 10) = 0;
    *((void *)a2 + 11) = 0;
    uint64_t v12 = *(void *)(a1 + 96);
    *(void *)(a1 + 96) = *((void *)a2 + 12);
    *((void *)a2 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v12;
    uint64_t v13 = *(void *)(a1 + 112);
    *(void *)(a1 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *((void *)a2 + 14);
    *((void *)a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = v13;
    ++*((_DWORD *)a2 + 26);
    ++*(_DWORD *)(a1 + 104);
    *(_OWORD *)(a1 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(void *)(a1 + 144) = *((void *)a2 + 18);
    uint64_t v14 = *((void *)a2 + 16);
    *(void *)(a1 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = *((void *)a2 + 15);
    *((void *)a2 + 15) = 0;
    uint64_t v15 = *((void *)a2 + 17);
    *((void *)a2 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    uint64_t v17 = *(void *)(a1 + 128);
    uint64_t v16 = *(void *)(a1 + 136);
    *(void *)(a1 + 12re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v14;
    *(void *)(a1 + 136) = v15;
    *((void *)a2 + 16) = v17;
    *((void *)a2 + 17) = v16;
  }
  return result;
}

unsigned char *re::Optional<re::AssetLoadDescriptor>::~Optional(unsigned char *a1)
{
  if (*a1)
  {
    re::DynamicString::deinit((re::DynamicString *)(a1 + 120));
    re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 80));
    re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 40));
    re::DynamicString::deinit((re::DynamicString *)(a1 + 8));
  }
  return a1;
}

void re::CustomAssetRegistrationParameters::~CustomAssetRegistrationParameters(re::CustomAssetRegistrationParameters *this)
{
  *(void *)this = &unk_26E6C9468;
  int v2 = (const void *)*((void *)this + 7);
  if (v2)
  {
    CFRelease(v2);
    *((void *)this + 7) = 0;
  }
  uint64_t v3 = (const void *)*((void *)this + 8);
  if (v3)
  {
    CFRelease(v3);
    *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  }
  re::DynamicString::deinit((re::CustomAssetRegistrationParameters *)((char *)this + 24));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::CustomAssetRegistrationParameters::~CustomAssetRegistrationParameters(this);
  JUMPOUT(0x237DBCBD0);
}

void re::CustomAssetRegistrationParameters::setAssetEncoder(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v3 = *(CFTypeRef *)(a1 + 56);
  if (v3 != cf)
  {
    if (v3) {
      CFRelease(v3);
    }
    *(void *)(a1 + 56) = cf;
    if (cf)
    {
      CFRetain(cf);
    }
  }
}

void re::CustomAssetRegistrationParameters::setAssetDecoder(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v3 = *(CFTypeRef *)(a1 + 64);
  if (v3 != cf)
  {
    if (v3) {
      CFRelease(v3);
    }
    *(void *)(a1 + 64) = cf;
    if (cf)
    {
      CFRetain(cf);
    }
  }
}

void re::CustomAssetRegistrationParameters::validate(re::CustomAssetRegistrationParameters *this@<X0>, char *a2@<X8>)
{
  unint64_t v3 = *((void *)this + 4);
  if (v3) {
    unint64_t v4 = v3 >> 1;
  }
  else {
    unint64_t v4 = v3 >> 1;
  }
  if (v4)
  {
    char v5 = 1;
    a2[8] = 1;
  }
  else
  {
    re::WrappedError::make((re::WrappedError *)@"REAssetTypeRegistrationErrorDomain", (const __CFString *)1, 0, &v7);
    uint64_t v6 = v7;
    uint64_t v7 = 0;
    *((void *)a2 + 1) = v6;

    char v5 = 0;
  }
  *a2 = v5;
}

void re::CustomAsset::setRuntimeObject(re::CustomAsset *this, CFTypeRef cf)
{
  CFTypeRef v3 = (CFTypeRef)*((void *)this + 1);
  if (v3 != cf)
  {
    if (v3) {
      CFRelease(v3);
    }
    *((void *)this + 1) = cf;
    if (cf)
    {
      CFRetain(cf);
    }
  }
}

void re::CustomAsset::~CustomAsset(re::CustomAsset *this)
{
  *(void *)this = &unk_26E6C9498;
  int v2 = (const void *)*((void *)this + 1);
  if (v2)
  {
    CFRelease(v2);
    *((void *)this + 1) = 0;
  }
}

{
  const void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6C9498;
  int v2 = (const void *)*((void *)this + 1);
  if (v2)
  {
    CFRelease(v2);
    *((void *)this + 1) = 0;
  }
  JUMPOUT(0x237DBCBD0);
}

uint64_t ___ZN2re17CustomAssetLoaderC2EU13block_pointerFPK8__CFDataPKvPP9__CFErrorEU13block_pointerFS5_S3_S8_E_block_invoke(re *a1, uint64_t a2, CFErrorRef *a3)
{
  unint64_t v4 = *re::assetTypesLogObjects(a1);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Asset encoding failed because no data encoder callback is registered for this custom asset type.", v6, 2u);
    if (!a3) {
      return 0;
    }
    goto LABEL_3;
  }
  if (a3) {
LABEL_3:
  }
    *a3 = CFErrorCreate(0, @"REAssetTypeRegistrationErrorDomain", 4, 0);
  return 0;
}

uint64_t ___ZN2re17CustomAssetLoaderC2EU13block_pointerFPK8__CFDataPKvPP9__CFErrorEU13block_pointerFS5_S3_S8_E_block_invoke_1(re *a1, uint64_t a2, CFErrorRef *a3)
{
  unint64_t v4 = *re::assetTypesLogObjects(a1);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Asset decoding failed because no data decoder callback is registered for this custom asset type.", v6, 2u);
    if (!a3) {
      return 0;
    }
    goto LABEL_3;
  }
  if (a3) {
LABEL_3:
  }
    *a3 = CFErrorCreate(0, @"REAssetTypeRegistrationErrorDomain", 3, 0);
  return 0;
}

void re::CustomAssetLoader::~CustomAssetLoader(CFTypeRef *this)
{
  *this = &unk_26E6C94B8;
  CFRelease(this[1]);
  CFRelease(this[2]);
}

{
  uint64_t vars8;

  *this = &unk_26E6C94B8;
  CFRelease(this[1]);
  CFRelease(this[2]);
  JUMPOUT(0x237DBCBD0);
}

re *re::CustomAssetLoader::unloadAsset(re *this, void (***a2)(void))
{
  if (a2)
  {
    uint64_t v3 = re::globalAllocators(this)[2];
    (**a2)(a2);
    unint64_t v4 = *(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v3 + 40);
    return (re *)v4(v3, a2);
  }
  return this;
}

uint64_t re::CustomAssetLoader::createRuntimeData(uint64_t a1, re::CustomAsset *a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v20 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  int v19 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v12 = a3;
  int v15 = 0;
  if (!re::SeekableInputStreamBufferedReader::readNext((re::SeekableInputStreamBufferedReader *)&v12, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v7 = 1;
    goto LABEL_11;
  }
  re::Data::makeDataWithBytesNoCopy(v13, v14, &v11);
  CFTypeRef cf = 0;
  char v5 = (re *)(*(uint64_t (**)(void, id, CFTypeRef *))(*(void *)(a1 + 16) + 16))(*(void *)(a1 + 16), v11, &cf);
  if (cf)
  {
    uint64_t v6 = *re::assetTypesLogObjects(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      CFTypeRef v22 = cf;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Failed to decode custom asset. Error = %@", buf, 0xCu);
    }
    CFRelease(cf);
  }
  else
  {
    uint64_t v8 = v5;
    if (v5)
    {
      re::CustomAsset::setRuntimeObject(a2, v5);
      CFRelease(v8);
      uint64_t v7 = 1;
      goto LABEL_10;
    }
  }
  uint64_t v7 = 0;
LABEL_10:

LABEL_11:
  if (v15)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 24))(v12);
    int v15 = 0;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  if (v16 && v20) {
    (*(void (**)(void))(*(void *)v16 + 40))();
  }
  return v7;
}

uint64_t re::CustomAssetLoader::serializeAssetBlob(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 8))
  {
    CFDataRef v4 = (const __CFData *)(*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
    CFDataRef v5 = v4;
    if (v4)
    {
      BytePtr = CFDataGetBytePtr(v4);
      CFIndex Length = CFDataGetLength(v5);
      (*(void (**)(uint64_t, const UInt8 *, CFIndex))(*(void *)a2 + 16))(a2, BytePtr, Length);
      CFRelease(v5);
    }
  }
  return 1;
}

uint64_t re::CustomAssetLoader::isSupportedSourceExtension(re::CustomAssetLoader *this, const char *a2)
{
  return 0;
}

uint64_t re::CustomAssetLoader::introspectionType(re::CustomAssetLoader *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF74DF8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF74DF8))
  {
    qword_26AF74DF0 = re::internal::getOrCreateInfo((re::internal *)"CustomAsset", (uint64_t (*)(re::internal *))re::allocInfo_CustomAsset, (re::IntrospectionBase *(*)(void))re::initInfo_CustomAsset, (void (*)(re::IntrospectionBase *))&unk_26AF74DE8, 0);
    __cxa_guard_release(&qword_26AF74DF8);
  }
  return qword_26AF74DF0;
}

void *re::allocInfo_CustomAsset(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_33, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_33))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF74E00, "CustomAsset");
    __cxa_guard_release(&_MergedGlobals_33);
  }
  return &unk_26AF74E00;
}

void re::initInfo_CustomAsset(re *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x19CE54DEF9F2BBELL;
  v5[1] = "CustomAsset";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v6;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = &re::initInfo_CustomAsset(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::CustomAsset>;
  *((void *)this + 11) = 0;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::CustomAsset>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::CustomAsset>;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::CustomAsset>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

void re::internal::defaultConstruct<re::CustomAsset>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6C9498;
  a3[1] = 0;
}

uint64_t re::internal::defaultDestruct<re::CustomAsset>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void *re::internal::defaultConstructV2<re::CustomAsset>(void *result)
{
  uint64_t *result = &unk_26E6C9498;
  result[1] = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::CustomAsset>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::AssetLoader::deferUnregister(re::AssetLoader *this, void *a2)
{
  return 0;
}

uint64_t re::AssetLoader::prepareAssetForSerialization(re::AssetLoader *this, void *a2)
{
  return 0;
}

uint64_t re::AssetLoader::defaultAssetCompileOptions(re::AssetLoader *this)
{
  return 0;
}

uint64_t re::AssetLoader::hasShareableCapability(re::AssetLoader *this)
{
  return 1;
}

uint64_t zip_entry_data_offset(void **a1)
{
  ((void (*)(void, void *, void))(*a1)[1])(**a1, a1[4], 0);
  if (((uint64_t (*)(void, _DWORD *, uint64_t))(*a1)[2])(**a1, v4, 30) == 30 && v4[0] == 67324752) {
    return (uint64_t)a1[4] + v5 + v6 + 30;
  }
  else {
    return 0;
  }
}

BOOL zip_entry_is_alignment(uint64_t a1)
{
  v1 = (uint64_t *)(a1 + 8);
  int v2 = *(char *)(a1 + 31);
  if (v2 < 0)
  {
    if (*(void *)(a1 + 16) != 7) {
      return 0;
    }
    v1 = (uint64_t *)*v1;
  }
  else if (v2 != 7)
  {
    return 0;
  }
  int v3 = *(_DWORD *)v1;
  int v4 = *(_DWORD *)((char *)v1 + 3);
  return v3 == 1768710446 && v4 == 795764585;
}

uint64_t zip_entry_load_data_begin(void **a1)
{
  if (zip_entry_data_offset(a1)) {
    operator new();
  }
  return 0;
}

unint64_t zip_entry_load_data_read(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = 0;
  if (!a2 || *(_DWORD *)a3 == 1) {
    return v3;
  }
  if (*(void *)(a3 + 40))
  {
    unint64_t v3 = 0;
    unint64_t chunk = *(void *)(a3 + 72);
    while (1)
    {
      if (!chunk)
      {
        uint64_t v8 = *(void *)(a3 + 48);
        unint64_t v9 = *(void *)(a3 + 56);
        *(void *)(a3 + 64) = v8;
        unint64_t chunk = zip_entry_load_chunk(v8, v9, a3);
        *(void *)(a3 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = chunk;
      }
      BOOL v10 = *(void *)(a3 + 24) == *(void *)(a3 + 32);
      uint64_t v16 = *(void *)(a3 + 64);
      unint64_t v17 = chunk;
      unint64_t v18 = v3 + a1;
      unint64_t v19 = a2 - v3;
      uint64_t v15 = 0;
      long long v13 = 0u;
      long long v14 = 0u;
      reality_compression_process_stream_chunk(v10, (uint64_t)&v16, *(void *)(a3 + 40), (uint64_t)&v13);
      int v11 = v13;
      if (!v13) {
        break;
      }
      unint64_t chunk = v17;
      *(void *)(a3 + 64) = v16;
      *(void *)(a3 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = chunk;
      v3 += v14;
      if (v11 == 1 || v3 >= a2) {
        return v3;
      }
    }
    unint64_t v3 = 0;
    *(_DWORD *)a3 = 1;
    return v3;
  }
  return zip_entry_load_chunk(a1, a2, a3);
}

unint64_t zip_entry_load_chunk(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  if (*(void *)(a3 + 32) - v5 >= a2) {
    unint64_t v6 = a2;
  }
  else {
    unint64_t v6 = *(void *)(a3 + 32) - v5;
  }
  (*(void (**)(void, void, void))(*(void *)(a3 + 8) + 8))(**(void **)(a3 + 8), *(void *)(a3 + 24), 0);
  if ((*(uint64_t (**)(void, uint64_t, unint64_t))(*(void *)(a3 + 8) + 16))(**(void **)(a3 + 8), a1, v6) == v6)
  {
    *(void *)(a3 + 24) += v6;
  }
  else
  {
    unint64_t v6 = 0;
    *(_DWORD *)a3 = 1;
  }
  return v6;
}

BOOL zip_entry_load_data_end(int *a1)
{
  int v2 = (compression_stream **)*((void *)a1 + 5);
  if (v2)
  {
    reality_compression_stream_end(v2);
    free(*((void **)a1 + 6));
  }
  int v3 = *a1;
  MEMORY[0x237DBCBD0](a1, 0x10E0C402484923FLL);
  return v3 == 0;
}

uint64_t zip_entry_save_data_begin(void *a1)
{
  uint64_t v1 = *a1;
  *(unsigned char *)(v1 + 137) = *(unsigned char *)(*a1 + 137) & 0xFC;
  a1[4] = *(void *)(v1 + 48);
  if (zip_write_file_header((uint64_t)a1, *(void *)(v1 + 96), 3)) {
    operator new();
  }
  return 0;
}

unint64_t zip_entry_save_data_write(Bytef *buf, unint64_t len, uint64_t a3)
{
  if (*(_DWORD *)a3 != 1)
  {
    int v7 = crc32(*(unsigned int *)(*(void *)(a3 + 16) + 56), buf, len);
    uint64_t v8 = *(void *)(a3 + 16);
    *(_DWORD *)(v8 + 56) = v7;
    *(void *)(v8 + 40) += len;
    CC_SHA256_Update((CC_SHA256_CTX *)(a3 + 24), buf, len);
    if (!*(void *)(a3 + 144))
    {
      (*(void (**)(void, void, void))(*(void *)(a3 + 8) + 8))(**(void **)(a3 + 8), *(void *)(a3 + 136), 0);
      uint64_t v16 = *(void *)(a3 + 8);
      unint64_t v3 = (*(uint64_t (**)(void, Bytef *, unint64_t))(v16 + 24))(*(void *)v16, buf, len);
      *(void *)(v16 + 112) += v3;
      *(void *)(a3 + 136) += v3;
      return v3;
    }
    if (len)
    {
      unint64_t v3 = 0;
      while (1)
      {
        v21[0] = &buf[v3];
        v21[1] = len - v3;
        uint64_t v9 = *(void *)(a3 + 160);
        uint64_t v10 = *(void *)(a3 + 144);
        v21[2] = *(void *)(a3 + 152);
        v21[3] = v9;
        uint64_t v20 = 0;
        long long v18 = 0u;
        long long v19 = 0u;
        reality_compression_process_stream_chunk(0, (uint64_t)v21, v10, (uint64_t)&v18);
        if (!v18) {
          break;
        }
        uint64_t v11 = *(void *)(a3 + 152);
        uint64_t v13 = *((void *)&v18 + 1);
        uint64_t v12 = v19;
        (*(void (**)(void, void, void))(*(void *)(a3 + 8) + 8))(**(void **)(a3 + 8), *(void *)(a3 + 136), 0);
        uint64_t v14 = *(void *)(a3 + 8);
        uint64_t v15 = (*(uint64_t (**)(void, uint64_t, uint64_t))(v14 + 24))(*(void *)v14, v11, v12);
        *(void *)(v14 + 112) += v15;
        *(void *)(a3 + 136) += v15;
        if (v15 != (void)v19) {
          return 0;
        }
        v3 += v13;
        if (v3 >= len) {
          return v3;
        }
      }
      *(_DWORD *)a3 = 1;
    }
  }
  return 0;
}

uint64_t zip_entry_save_data_end(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)a1 == 1)
  {
LABEL_2:
    free(*(void **)(a1 + 152));
    MEMORY[0x237DBCBD0](a1, 0x10A0C40AB5B8B32);
    return 0;
  }
  if (*(void *)(a1 + 144))
  {
    while (1)
    {
      v14[0] = 0;
      v14[1] = 0;
      uint64_t v3 = *(void *)(a1 + 160);
      uint64_t v4 = *(void *)(a1 + 144);
      v14[2] = *(void *)(a1 + 152);
      v14[3] = v3;
      uint64_t v17 = 0;
      *(_OWORD *)md = 0u;
      long long v16 = 0u;
      reality_compression_process_stream_chunk(1, (uint64_t)v14, v4, (uint64_t)md);
      if (!*(_DWORD *)md) {
        goto LABEL_2;
      }
      uint64_t v5 = *(void *)(a1 + 152);
      uint64_t v6 = v16;
      (*(void (**)(void, void, void))(*(void *)(a1 + 8) + 8))(**(void **)(a1 + 8), *(void *)(a1 + 136), 0);
      uint64_t v7 = *(void *)(a1 + 8);
      uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(v7 + 24))(*(void *)v7, v5, v6);
      *(void *)(v7 + 112) += v8;
      *(void *)(a1 + 136) += v8;
      if (v8 != (void)v16) {
        goto LABEL_2;
      }
      if (*(_DWORD *)md != 2)
      {
        reality_compression_stream_end(*(compression_stream ***)(a1 + 144));
        free(*(void **)(a1 + 152));
        break;
      }
    }
  }
  *(void *)(*(void *)(a1 + 16) + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(void *)(a1 + 136) - *(void *)(a1 + 128);
  CC_SHA256_Final(md, (CC_SHA256_CTX *)(a1 + 24));
  uint64_t v9 = *(void *)(a1 + 16);
  long long v10 = *(_OWORD *)md;
  *(_OWORD *)(v9 + 76) = v16;
  *(_OWORD *)(v9 + 60) = v10;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = (void *)(v11 + 8);
  if ((*(char *)(v11 + 31) & 0x80000000) == 0)
  {
    uint64_t v13 = *(unsigned __int8 *)(v11 + 31);
    if (!*(unsigned char *)(v11 + 31)) {
      goto LABEL_15;
    }
LABEL_13:
    if (*((unsigned char *)v12 + v13 - 1) == 47)
    {
      *(_OWORD *)(v11 + 76) = 0u;
      *(_OWORD *)(v11 + 60) = 0u;
      uint64_t v11 = *(void *)(a1 + 16);
    }
    goto LABEL_15;
  }
  uint64_t v13 = *(void *)(v11 + 16);
  if (v13)
  {
    uint64_t v12 = (void *)*v12;
    goto LABEL_13;
  }
LABEL_15:
  zip_write_file_header(v11, *(void *)(*(void *)(a1 + 8) + 96), 3);
  *(void *)(*(void *)(a1 + 8) + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(void *)(a1 + 136);
  MEMORY[0x237DBCBD0](a1, 0x10A0C40AB5B8B32);
  return 1;
}

uint64_t zip_entry_save_data(void *a1, Bytef *a2, unint64_t a3)
{
  uint64_t result = zip_entry_save_data_begin(a1);
  if (result)
  {
    uint64_t v6 = result;
    unint64_t v7 = zip_entry_save_data_write(a2, a3, result);
    LODWORD(result) = zip_entry_save_data_end(v6);
    if (v7 == a3) {
      return result;
    }
    else {
      return 0;
    }
  }
  return result;
}

id *re::internal::EngineQueueCheck::init(void *key, dispatch_queue_t *a2)
{
  dispatch_queue_set_specific(*a2, key, key, 0);
  return re::ObjCObject::operator=((id *)key, (id *)a2);
}

void **re::internal::EngineQueueCheck::deinit(dispatch_queue_t *this)
{
  dispatch_queue_set_specific(*this, this, 0, 0);
  return re::ObjCObject::operator=((void **)this, 0);
}

void *re::allocInfo_FrameworkLoadDescriptorParameters(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_34, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_34))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF74E98, "FrameworkLoadDescriptorParameters");
    __cxa_guard_release(&_MergedGlobals_34);
  }
  return &unk_26AF74E98;
}

void re::initInfo_FrameworkLoadDescriptorParameters(re *this, re::IntrospectionBase *a2)
{
  v14[0] = 0x1FF348E7C469717ALL;
  v14[1] = "FrameworkLoadDescriptorParameters";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF74E80, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF74E80);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      unint64_t v7 = re::IntrospectionInfo<re::DynamicString>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "framework";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF74E88 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::IntrospectionInfo<re::DynamicString>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "resource";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x2000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF74E90 = v12;
      __cxa_guard_release(&qword_26AF74E80);
    }
  }
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x4000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 2;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = &qword_26AF74E88;
  *((void *)this + 9) = re::internal::defaultConstruct<re::FrameworkLoadDescriptorParameters>;
  *((void *)this + 11) = 0;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::FrameworkLoadDescriptorParameters>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::FrameworkLoadDescriptorParameters>;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::FrameworkLoadDescriptorParameters>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

void *re::internal::defaultConstruct<re::FrameworkLoadDescriptorParameters>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  uint64_t v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)a3, 0);
  *(_OWORD *)(a3 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(a3 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  uint64_t v5 = (void *)(a3 + 32);
  return re::DynamicString::setCapacity(v5, 0);
}

double re::internal::defaultDestruct<re::FrameworkLoadDescriptorParameters>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString::deinit((re::DynamicString *)(a3 + 32));
  return re::DynamicString::deinit((re::DynamicString *)a3);
}

void *re::internal::defaultConstructV2<re::FrameworkLoadDescriptorParameters>(_OWORD *a1)
{
  *a1 = 0u;
  a1[1] = 0u;
  int v2 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(a1, 0);
  a1[2] = 0u;
  a1[3] = 0u;
  uint64_t v3 = a1 + 2;
  return re::DynamicString::setCapacity(v3, 0);
}

double re::internal::defaultDestructV2<re::FrameworkLoadDescriptorParameters>(uint64_t a1)
{
  re::DynamicString::deinit((re::DynamicString *)(a1 + 32));
  return re::DynamicString::deinit((re::DynamicString *)a1);
}

_anonymous_namespace_ *re::FrameworkAssetProvider::FrameworkAssetProvider(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  ArcSharedObject::ArcSharedObject(a1, 0);
  *((void *)a1 + 3) = 0;
  *(void *)a1 = &unk_26E6C9678;
  *((void *)a1 + 4) = 0;
  *((void *)a1 + 5) = 0;
  long long v10 = &qword_268772000;
  {
    long long v10 = &qword_268772000;
    if (v12)
    {
      re::introspect<re::FrameworkLoadDescriptorParameters>(void)::info = re::internal::getOrCreateInfo((re::internal *)"FrameworkLoadDescriptorParameters", (uint64_t (*)(re::internal *))re::allocInfo_FrameworkLoadDescriptorParameters, (re::IntrospectionBase *(*)(void))re::initInfo_FrameworkLoadDescriptorParameters, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::FrameworkLoadDescriptorParameters>, 0);
      long long v10 = &qword_268772000;
    }
  }
  re::FrameworkAssetProvider::s_loadDescriptorParametersIntrospect = v10[450];
  *((void *)a1 + 3) = a3;
  *((void *)a1 + 4) = a4;
  *((void *)a1 + 5) = a2;
  *((void *)a1 + 6) = a5;
  return a1;
}

void re::FrameworkAssetProvider::~FrameworkAssetProvider(re::FrameworkAssetProvider *this)
{
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::FrameworkAssetProvider::makeDescriptor@<X0>(_anonymous_namespace_ *a1@<X0>, re::DynamicString *a2@<X1>, re::DynamicString *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  uint64_t v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)a4, 0);
  *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(a4 + 40) = 0;
  *(_DWORD *)(a4 + 56) = 0;
  *(void *)(a4 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_DWORD *)(a4 + 96) = 0;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(void *)(a4 + 136) = 0;
  re::DynamicString::setCapacity((void *)(a4 + 112), 0);
  uint64_t v20 = (uint64_t *)"Framework";
  uint64_t v21 = 9;
  re::DynamicString::operator=((re::DynamicString *)a4, (uint64_t)&v20);
  uint64_t v9 = re::DynamicString::operator=((re::DynamicString *)(a4 + 112), a3);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  long long v10 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v20, 0);
  *((void *)&v24 + 1) = 0;
  long long v25 = 0uLL;
  re::DynamicString::setCapacity(&v24, 0);
  re::DynamicString::operator=((re::DynamicString *)&v20, a1);
  re::DynamicString::operator=((re::DynamicString *)&v24, a2);
  re::DynamicString::DynamicString((re::DynamicString *)v18, (const re::DynamicString *)&v20);
  re::DynamicString::DynamicString((re::DynamicString *)v19, (const re::DynamicString *)&v24);
  re::AssetLoadDescriptor::setIntrospectableData((char **)a4, (const re::IntrospectionBase *)re::FrameworkAssetProvider::s_loadDescriptorParametersIntrospect, (const re::IntrospectionBase **)v18, 0);
  if (v19[0])
  {
    if (v19[1]) {
      (*(void (**)(void))(*(void *)v19[0] + 40))();
    }
    memset(v19, 0, sizeof(v19));
  }
  if (*(void *)&v18[0])
  {
    if (BYTE8(v18[0])) {
      (*(void (**)(void))(**(void **)&v18[0] + 40))();
    }
    memset(v18, 0, sizeof(v18));
  }
  if ((void)v24)
  {
    if (BYTE8(v24)) {
      (*(void (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v24 + 40))(v24, v25, v11, v12, v13, v14, v15, v16);
    }
    long long v24 = 0u;
    long long v25 = 0u;
  }
  uint64_t result = (uint64_t)v20;
  if (v20)
  {
    if (v21) {
      return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v20 + 40))(v20, v22, v11, v12, v13, v14, v15, v16);
    }
  }
  return result;
}

uint64_t re::FrameworkAssetProvider::recoverAssetPath(re::FrameworkAssetProvider *this, const re::AssetLoadDescriptor *a2, int a3)
{
  if (*((void *)a2 + 1)) {
    uint64_t v6 = (const char *)*((void *)a2 + 2);
  }
  else {
    uint64_t v6 = (char *)a2 + 9;
  }
  uint64_t result = strcmp(v6, "Framework");
  if (result)
  {
LABEL_5:
    *(unsigned char *)this = 0;
    return result;
  }
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v20, 0);
  *((void *)&v24 + 1) = 0;
  long long v25 = 0uLL;
  re::DynamicString::setCapacity(&v24, 0);
  if (!re::AssetLoadDescriptor::getIntrospectableData<re::FrameworkLoadDescriptorParameters>(a2, &v20, 0))goto LABEL_38; {
  long long v10 = v22;
  }
  uint64_t v11 = v21 & 1;
  if (v21) {
    uint64_t v12 = v22;
  }
  else {
    uint64_t v12 = (char *)&v21 + 1;
  }
  if (!re::isEngineFrameworkIdentifier((re *)v12, v9))
  {
    if (!a3) {
      goto LABEL_24;
    }
    if (!strcmp(v12, "com.apple.SystemEnvironments"))
    {
      re::Defaults::BOOLValue((re::Defaults *)"allowAssetReferencesToSysEnvFramework", v14, (char *)&v17);
      if ((_BYTE)v17 && BYTE1(v17))
      {
        long long v10 = v22;
        uint64_t v11 = v21 & 1;
        goto LABEL_24;
      }
    }
    else if (!strcmp(v12, "com.apple.vfx") || !strcmp(v12, "com.apple.VFXAssets"))
    {
LABEL_24:
      if (v11) {
        uint64_t v15 = v10;
      }
      else {
        uint64_t v15 = (char *)&v21 + 1;
      }
      if (BYTE8(v24)) {
        uint64_t v16 = (char *)v25;
      }
      else {
        uint64_t v16 = (char *)&v24 + 9;
      }
      re::DynamicString::format((re::DynamicString *)"framework:%s/%s", (re::DynamicString *)&v17, v15, v16);
      goto LABEL_31;
    }
LABEL_38:
    if ((void)v24)
    {
      if (BYTE8(v24)) {
        (*(void (**)(void))(*(void *)v24 + 40))();
      }
      long long v24 = 0u;
      long long v25 = 0u;
    }
    uint64_t result = (uint64_t)v20;
    if (v20 && (v21 & 1) != 0) {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v20 + 40))();
    }
    goto LABEL_5;
  }
  if (BYTE8(v24)) {
    uint64_t v13 = (char *)v25;
  }
  else {
    uint64_t v13 = (char *)&v24 + 9;
  }
  re::DynamicString::format((re::DynamicString *)"engine:%s", (re::DynamicString *)&v17, v13);
LABEL_31:
  *(unsigned char *)this = 1;
  *((void *)this + 1) = v17;
  *((void *)this + 4) = v19;
  *((_OWORD *)this + 1) = v18;
  if ((void)v24)
  {
    if (BYTE8(v24)) {
      (*(void (**)(void))(*(void *)v24 + 40))();
    }
    long long v24 = 0u;
    long long v25 = 0u;
  }
  uint64_t result = (uint64_t)v20;
  if (v20)
  {
    if (v21) {
      return (*(uint64_t (**)(void))(*(void *)v20 + 40))();
    }
  }
  return result;
}

uint64_t re::AssetLoadDescriptor::getIntrospectableData<re::FrameworkLoadDescriptorParameters>(re::AssetLoadDescriptor *a1, re::DynamicString **a2, re::Allocator *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = &qword_268772000;
  {
    uint64_t v12 = a1;
    uint64_t v11 = a3;
    uint64_t v5 = &qword_268772000;
    uint64_t v4 = a2;
    a3 = v11;
    int v9 = v8;
    a1 = v12;
    if (v9)
    {
      re::introspect<re::FrameworkLoadDescriptorParameters>(void)::info = re::internal::getOrCreateInfo((re::internal *)"FrameworkLoadDescriptorParameters", (uint64_t (*)(re::internal *))re::allocInfo_FrameworkLoadDescriptorParameters, (re::IntrospectionBase *(*)(void))re::initInfo_FrameworkLoadDescriptorParameters, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::FrameworkLoadDescriptorParameters>, 0);
      uint64_t v5 = &qword_268772000;
      a1 = v12;
      uint64_t v4 = a2;
      a3 = v11;
    }
  }
  uint64_t v6 = (re **)v5[450];
  return re::AssetLoadDescriptor::getIntrospectableData(a1, v6, v4, a3);
}

uint64_t re::FrameworkAssetProvider::isEngineAssetDescriptor(re::FrameworkAssetProvider *this, const re::AssetLoadDescriptor *a2)
{
  if (*((void *)this + 1)) {
    uint64_t v3 = (const char *)*((void *)this + 2);
  }
  else {
    uint64_t v3 = (char *)this + 9;
  }
  uint64_t v4 = (_anonymous_namespace_ *)strcmp(v3, "Framework");
  if (v4) {
    return 0;
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v6 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v9, 0);
  *((void *)&v13 + 1) = 0;
  long long v14 = 0uLL;
  re::DynamicString::setCapacity(&v13, 0);
  if (!re::AssetLoadDescriptor::getIntrospectableData<re::FrameworkLoadDescriptorParameters>(this, &v9, 0)|| ((v10 & 1) != 0 ? (int v8 = v11) : (int v8 = (re *)((char *)&v10 + 1)), !re::isEngineFrameworkIdentifier(v8, v7)))
  {
    if ((void)v13)
    {
      if (BYTE8(v13)) {
        (*(void (**)(void))(*(void *)v13 + 40))();
      }
      long long v13 = 0u;
      long long v14 = 0u;
    }
    if (v9 && (v10 & 1) != 0) {
      (*(void (**)(void))(*(void *)v9 + 40))();
    }
    return 0;
  }
  if ((void)v13)
  {
    if (BYTE8(v13)) {
      (*(void (**)(void))(*(void *)v13 + 40))();
    }
    long long v13 = 0u;
    long long v14 = 0u;
  }
  if (v9)
  {
    if (v10) {
      (*(void (**)(void))(*(void *)v9 + 40))();
    }
  }
  return 1;
}

re::DynamicString *re::FrameworkAssetProvider::load@<X0>(re::internal::AssetTypeRegistry **this@<X0>, const re::AssetLoadDescriptor *a2@<X1>, re::AssetSerializationScheme *a3@<X3>, uint64_t a4@<X8>)
{
  if (*((unsigned char *)a2 + 8)) {
    int v9 = (const char *)*((void *)a2 + 2);
  }
  else {
    int v9 = (char *)a2 + 9;
  }
  uint64_t v10 = (_anonymous_namespace_ *)strcmp(v9, "Framework");
  if (v10)
  {
    uint64_t v11 = "FrameworkAssetProvider called with invalid scheme name.";
LABEL_6:
    long long v13 = v74;
    long long v14 = v75;
    uint64_t v15 = v76;
    *(unsigned char *)a4 = 0;
    *(_OWORD *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v13;
    *(void *)(a4 + 24) = v14;
    *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v15;
    return result;
  }
  uint64_t v16 = (char *)(this + 3);
  if (*((unsigned char *)a2 + 120)) {
    uint64_t v17 = (char *)*((void *)a2 + 16);
  }
  else {
    uint64_t v17 = (char *)a2 + 121;
  }
  long long v18 = (_anonymous_namespace_ *)re::internal::AssetTypeRegistry::assetTypeWithName(this[3], v17);
  if (!v18)
  {
    uint64_t v11 = "Unknown asset type";
    goto LABEL_6;
  }
  unint64_t v19 = (unint64_t)v18;
  *((void *)&v74 + 1) = 0;
  v75 = 0;
  uint64_t v76 = 0;
  uint64_t v20 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v74, 0);
  *((void *)&v77 + 1) = 0;
  long long v78 = 0uLL;
  re::DynamicString::setCapacity(&v77, 0);
  uint64_t Descriptor = re::AssetLoadDescriptor::getIntrospectableData<re::FrameworkLoadDescriptorParameters>(a2, (re::DynamicString **)&v74, 0);
  if (Descriptor)
  {
    uint64_t v22 = (os_unfair_lock_s *)this[6];
    re::DynamicString::DynamicString((re::DynamicString *)v72, (const re::DynamicString *)&v74);
    re::BundleFilePathRegistry::findWithBundleID(v22, (uint64_t)v72, &v73);
    uint64_t v23 = v72[0];
    if (v72[0])
    {
      if (v72[1]) {
        uint64_t v23 = (*(uint64_t (**)(void))(*(void *)v72[0] + 40))();
      }
      memset(v72, 0, 32);
    }
    if (!v73)
    {
      uint64_t v43 = (BYTE8(v74) & 1) != 0 ? (const char *)v75 : (char *)&v74 + 9;
      uint64_t v23 = strcmp(v43, "com.apple.vfx");
      if (v23) {
        goto LABEL_48;
      }
      v54 = (os_unfair_lock_s *)this[6];
      re::BundleFilePathRegistry::findWithBundleID(v54, (uint64_t)v71, (id *)v60);
      uint64_t v55 = *(void **)v60;
      *(void *)uint64_t v60 = 0;
      id v56 = v73;
      id v73 = v55;

      uint64_t v23 = v71[0];
      if (v71[0])
      {
        if (v71[1]) {
          uint64_t v23 = (*(uint64_t (**)(void))(*(void *)v71[0] + 40))();
        }
        memset(v71, 0, sizeof(v71));
      }
      if (!v73)
      {
LABEL_48:
        re::DynamicString::operator+((re::DynamicString *)&v57, (uint64_t)&v74, (re::DynamicString *)v60);
        long long v44 = *(_OWORD *)v60;
        memset(v60, 0, sizeof(v60));
        uint64_t v45 = *(void *)&v60[16];
        uint64_t v46 = v61;
        uint64_t v61 = 0;
        *(unsigned char *)a4 = 0;
        *(_OWORD *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v44;
        *(void *)(a4 + 24) = v45;
        *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v46;
        uint64_t v47 = v57;
        if (!v57 || (v58 & 1) == 0) {
          goto LABEL_64;
        }
        uint64_t v48 = *((void *)&v58 + 1);
        goto LABEL_63;
      }
    }
    long long v69 = 0u;
    long long v70 = 0u;
    re::DynamicString::setCapacity(&v69, 0);
    long long v25 = (const char *)v78;
    uint64_t v26 = BYTE8(v77) & 1;
    if (BYTE8(v77)) {
      long long v27 = (re::path *)v78;
    }
    else {
      long long v27 = (re::path *)((char *)&v77 + 9);
    }
    int v28 = (const char *)re::path::ext(v27, v24);
    if (strlen(v28) >= 2 && *(const char **)(v19 + 8) != v28 + 1)
    {
      re::DynamicString::DynamicString((re::DynamicString *)v60, (const re::DynamicString *)&v77);
      re::DynamicString::append((re::DynamicString *)v60, ".", 1uLL);
      size_t v29 = strlen(*(const char **)(v19 + 8));
      re::DynamicString::append((re::DynamicString *)v60, *(const char **)(v19 + 8), v29);
      if (v60[8]) {
        long long v30 = *(const char **)&v60[16];
      }
      else {
        long long v30 = &v60[9];
      }
      BOOL v32 = re::Bundle::pathForResource(&v73, v30, (re::DynamicString *)&v69);
      if (*(void *)v60 && (v60[8] & 1) != 0) {
        (*(void (**)(void))(**(void **)v60 + 40))();
      }
      if (v32) {
        goto LABEL_35;
      }
      long long v25 = (const char *)v78;
      uint64_t v26 = BYTE8(v77) & 1;
    }
    if (v26) {
      long long v33 = v25;
    }
    else {
      long long v33 = (char *)&v77 + 9;
    }
    BOOL v34 = re::Bundle::pathForResource(&v73, v33, (re::DynamicString *)&v69);
    if (!v34)
    {
      re::DynamicString::operator+((re::DynamicString *)&v57, (uint64_t)&v77, (re::DynamicString *)v60);
      long long v49 = *(_OWORD *)v60;
      memset(v60, 0, sizeof(v60));
      uint64_t v50 = *(void *)&v60[16];
      uint64_t v51 = v61;
      uint64_t v61 = 0;
      *(unsigned char *)a4 = 0;
      *(_OWORD *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v49;
      *(void *)(a4 + 24) = v50;
      *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v51;
      uint64_t v52 = v57;
      if (!v57 || (v58 & 1) == 0) {
        goto LABEL_60;
      }
      uint64_t v53 = *((void *)&v58 + 1);
LABEL_59:
      (*(void (**)(uint64_t, uint64_t))(*(void *)v52 + 40))(v52, v53);
LABEL_60:
      uint64_t v47 = v69;
      if (!(void)v69 || (BYTE8(v69) & 1) == 0) {
        goto LABEL_64;
      }
      uint64_t v48 = v70;
LABEL_63:
      (*(void (**)(uint64_t, uint64_t))(*(void *)v47 + 40))(v47, v48);
LABEL_64:

      goto LABEL_65;
    }
LABEL_35:
    if (BYTE8(v74)) {
      long long v35 = v75;
    }
    else {
      long long v35 = (re *)((char *)&v74 + 9);
    }
    BOOL isEngineFrameworkIdentifier = re::isEngineFrameworkIdentifier(v35, v31);
    v64[0] = 0;
    LocalCompiledOrSourceAsset = (_anonymous_namespace_ *)re::AssetUtilities::loadLocalCompiledOrSourceAsset((char *)&v69, (uint64_t)v16, v19, (uint64_t)a3, (uint64_t)v64, isEngineFrameworkIdentifier, (uint64_t)v65);
    if (v65[0])
    {
      *(void *)&v60[8] = 0;
      *(void *)&v60[16] = 0;
      uint64_t v61 = 0;
      re::DynamicString::setCapacity(v60, 0);
      BYTE8(v6re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
      char v63 = 0;
      *(void *)&long long v62 = v66;
      re::DynamicString::operator=((re::DynamicString *)v60, (const re::AssetLoadDescriptor *)((char *)a2 + 112));
      re::DynamicString::DynamicString((re::DynamicString *)&v57, (const re::DynamicString *)v60);
      char v38 = v63;
      long long v39 = v62;
      *(unsigned char *)a4 = 1;
      *(void *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v57;
      *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v59;
      *(_OWORD *)(a4 + 16) = v58;
      *(_OWORD *)(a4 + 40) = v39;
      *(unsigned char *)(a4 + 56) = v38;
      if (*(void *)v60 && (v60[8] & 1) != 0) {
        (*(void (**)(void))(**(void **)v60 + 40))();
      }
    }
    else
    {
      re::DynamicString::DynamicString((re::DynamicString *)v60, (const re::DynamicString *)&v66);
      *(unsigned char *)a4 = 0;
      *(void *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(void *)v60;
      *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v61;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)&v60[8];
    }
    if (v65[0]) {
      goto LABEL_60;
    }
    uint64_t v52 = v66;
    if (!v66 || (v67 & 1) == 0) {
      goto LABEL_60;
    }
    uint64_t v53 = v68;
    goto LABEL_59;
  }
  long long v40 = *(_OWORD *)v60;
  uint64_t v41 = *(void *)&v60[16];
  uint64_t v42 = v61;
  *(unsigned char *)a4 = 0;
  *(_OWORD *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v40;
  *(void *)(a4 + 24) = v41;
  *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v42;
LABEL_65:
  if ((void)v77)
  {
    if (BYTE8(v77)) {
      (*(void (**)(void))(*(void *)v77 + 40))();
    }
    long long v77 = 0u;
    long long v78 = 0u;
  }
  uint64_t result = (re::DynamicString *)v74;
  if ((void)v74)
  {
    if (BYTE8(v74)) {
      return (re::DynamicString *)(*(uint64_t (**)(void))(*(void *)v74 + 40))();
    }
  }
  return result;
}

re::DynamicString *re::FrameworkAssetProvider::resolveChild@<X0>(const re::AssetLoadDescriptor *a1@<X1>, re::AssetProvider *a2@<X2>, const char *a3@<X3>, uint64_t a4@<X8>)
{
  if (*((unsigned char *)a1 + 8)) {
    int v9 = (const char *)*((void *)a1 + 2);
  }
  else {
    int v9 = (char *)a1 + 9;
  }
  uint64_t v10 = (_anonymous_namespace_ *)strcmp(v9, "Framework");
  if (v10)
  {
    uint64_t result = (re::DynamicString *)re::DynamicString::format((re::DynamicString *)"Scheme %s does not match scheme %s.", (re::DynamicString *)v31, v9, "Framework");
    long long v12 = *(_OWORD *)v31;
    long long v13 = *(_OWORD *)&v31[16];
    *(unsigned char *)a4 = 0;
    *(_OWORD *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    *(_OWORD *)(a4 + 24) = v13;
  }
  else
  {
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    long long v14 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v41, 0);
    *((void *)&v45 + 1) = 0;
    long long v46 = 0uLL;
    re::DynamicString::setCapacity(&v45, 0);
    uint64_t v15 = re::AssetLoadDescriptor::getIntrospectableData<re::FrameworkLoadDescriptorParameters>(a1, &v41, 0);
    if (v15)
    {
      if (BYTE8(v45)) {
        uint64_t v16 = (re::PathBuffer *)v46;
      }
      else {
        uint64_t v16 = (re::PathBuffer *)((char *)&v45 + 9);
      }
      uint64_t v17 = (_anonymous_namespace_ *)re::AssetProvider::resolveChildPath(a2, v16, (re::DynamicString *)&v39);
      re::FrameworkAssetProvider::makeDescriptor((_anonymous_namespace_ *)&v41, (re::DynamicString *)&v39, (re::DynamicString *)v22, (uint64_t)v23);
      uint64_t v18 = *(void *)v23;
      memset(v23, 0, sizeof(v23));
      *(void *)int v31 = v18;
      *(_OWORD *)&v31[24] = *(_OWORD *)&v23[24];
      *(_OWORD *)&unsigned char v31[8] = *(_OWORD *)&v23[8];
      long long v32 = v24;
      long long v24 = 0u;
      ++v25;
      int v33 = 1;
      long long v34 = v26;
      long long v35 = v27;
      long long v26 = 0u;
      long long v27 = 0u;
      ++v28;
      int v36 = 1;
      *(_OWORD *)long long v37 = *(_OWORD *)v29;
      memset(v29, 0, sizeof(v29));
      long long v38 = v30;
      *(void *)&v37[16] = *(void *)&v29[16];
      long long v30 = 0uLL;
      v19.n128_f64[0] = re::Optional<re::AssetLoadDescriptor>::Optional(a4, (uint64_t)v31);
      if (*(void *)&v37[8])
      {
        if (v37[16]) {
          (*(void (**)(double))(**(void **)&v37[8] + 40))(v19.n128_f64[0]);
        }
        __n128 v19 = 0uLL;
        *(_OWORD *)&v37[8] = 0u;
        long long v38 = 0u;
      }
      if (*((void *)&v34 + 1))
      {
        if (*(void *)v37) {
          (*(void (**)(__n128))(**((void **)&v34 + 1) + 40))(v19);
        }
        *(void *)long long v37 = 0;
        long long v35 = 0uLL;
        *((void *)&v34 + 1) = 0;
        ++v36;
      }
      if (*(void *)&v31[32])
      {
        if ((void)v34) {
          (*(void (**)(__n128))(**(void **)&v31[32] + 40))(v19);
        }
        *(void *)&long long v34 = 0;
        long long v32 = 0uLL;
        *(void *)&v31[32] = 0;
        ++v33;
      }
      if (*(void *)v31)
      {
        if (v31[8]) {
          (*(void (**)(__n128))(**(void **)v31 + 40))(v19);
        }
        __n128 v19 = 0uLL;
        memset(v31, 0, 32);
      }
      if (*(void *)&v29[8])
      {
        if (v29[16]) {
          (*(void (**)(__n128))(**(void **)&v29[8] + 40))(v19);
        }
        __n128 v19 = 0uLL;
        *(_OWORD *)&v29[8] = 0u;
        long long v30 = 0u;
      }
      if (*((void *)&v26 + 1))
      {
        if (*(void *)v29) {
          (*(void (**)(__n128))(**((void **)&v26 + 1) + 40))(v19);
        }
        *(void *)size_t v29 = 0;
        long long v27 = 0uLL;
        *((void *)&v26 + 1) = 0;
        ++v28;
      }
      if (*(void *)&v23[32])
      {
        if ((void)v26) {
          (*(void (**)(__n128))(**(void **)&v23[32] + 40))(v19);
        }
        *(void *)&long long v26 = 0;
        long long v24 = 0uLL;
        *(void *)&v23[32] = 0;
        ++v25;
      }
      if (*(void *)v23)
      {
        if (v23[8]) {
          (*(void (**)(__n128))(**(void **)v23 + 40))(v19);
        }
        __n128 v19 = 0uLL;
        memset(v23, 0, 32);
      }
      if (*(void *)&v22[0])
      {
        if (BYTE8(v22[0])) {
          (*(void (**)(__n128))(**(void **)&v22[0] + 40))(v19);
        }
        __n128 v19 = 0uLL;
        memset(v22, 0, sizeof(v22));
      }
      if (v39 && (v40 & 1) != 0) {
        (*(void (**)(__n128))(*(void *)v39 + 40))(v19);
      }
    }
    else
    {
      __n128 v19 = *(__n128 *)v31;
      uint64_t v20 = *(void *)&v31[16];
      uint64_t v21 = *(void *)&v31[24];
      *(unsigned char *)a4 = 0;
      *(__n128 *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v19;
      *(void *)(a4 + 24) = v20;
      *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v21;
    }
    if ((void)v45)
    {
      if (BYTE8(v45)) {
        (*(void (**)(__n128))(*(void *)v45 + 40))(v19);
      }
      __n128 v19 = 0uLL;
      long long v45 = 0u;
      long long v46 = 0u;
    }
    uint64_t result = v41;
    if (v41)
    {
      if (v42) {
        return (re::DynamicString *)(*(uint64_t (**)(__n128))(*(void *)v41 + 40))(v19);
      }
    }
  }
  return result;
}

re::DynamicString *re::FrameworkAssetProvider::getDescription(re::FrameworkAssetProvider *this, const re::AssetLoadDescriptor *a2, re::DynamicString *a3)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v10, 0);
  *((void *)&v14 + 1) = 0;
  long long v15 = 0uLL;
  re::DynamicString::setCapacity(&v14, 0);
  if (re::AssetLoadDescriptor::getIntrospectableData<re::FrameworkLoadDescriptorParameters>(a2, &v10, 0))
  {
    uint64_t v6 = re::DynamicString::operator=(a3, (re::DynamicString *)&v10);
    re::DynamicString::append(v6, "/", 1uLL);
    if (BYTE8(v14)) {
      unint64_t v7 = (const char *)v15;
    }
    else {
      unint64_t v7 = (char *)&v14 + 9;
    }
    if (BYTE8(v14)) {
      size_t v8 = *((void *)&v14 + 1) >> 1;
    }
    else {
      size_t v8 = BYTE8(v14) >> 1;
    }
    re::DynamicString::append(a3, v7, v8);
  }
  else
  {
    v16[0] = "mangled";
    v16[1] = 7;
    re::DynamicString::operator=(a3, (uint64_t)v16);
  }
  if ((void)v14)
  {
    if (BYTE8(v14)) {
      (*(void (**)(void))(*(void *)v14 + 40))();
    }
    long long v14 = 0u;
    long long v15 = 0u;
  }
  uint64_t result = v10;
  if (v10)
  {
    if (v11) {
      return (re::DynamicString *)(*(uint64_t (**)(void))(*(void *)v10 + 40))();
    }
  }
  return result;
}

BOOL re::FrameworkAssetProvider::isDeviceAssetForRelease(uint64_t a1, const re::AssetLoadDescriptor *a2)
{
  re::FrameworkAssetProvider::recoverAssetPath((re::FrameworkAssetProvider *)v4, a2, 1);
  int v2 = v4[0];
  if (v4[0] && v5 && (v6 & 1) != 0) {
    (*(void (**)(void))(*(void *)v5 + 40))();
  }
  return v2 != 0;
}

__n128 re::FrameworkAssetProvider::getAssetPathForRelease@<Q0>(char *a1@<X1>, re::internal::AssetTypeRegistry *a2@<X2>, unsigned int a3@<W4>, uint64_t a4@<X8>)
{
  size_t v8 = (_anonymous_namespace_ *)re::FrameworkAssetProvider::recoverAssetPath((re::FrameworkAssetProvider *)v16, (const re::AssetLoadDescriptor *)a1, a3 - 10 < 0xFFFFFFF5);
  if (v16[0])
  {
    if (a3 <= 9)
    {
      if (*((void *)a1 + 15)) {
        int v9 = (char *)*((void *)a1 + 16);
      }
      else {
        int v9 = a1 + 121;
      }
      uint64_t v10 = re::internal::AssetTypeRegistry::assetTypeWithName(a2, v9);
      re::AssetPath::updateWithCompiledExtension((char *)&v17, v10);
    }
    re::DynamicString::DynamicString((re::DynamicString *)v14, (const re::DynamicString *)&v17);
    *(unsigned char *)a4 = 1;
    *(void *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(void *)v14;
    *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v15;
    __n128 result = *(__n128 *)&v14[8];
    *(_OWORD *)(a4 + 16) = *(_OWORD *)&v14[8];
    if (v16[0] && v17 && (v18 & 1) != 0) {
      (*(void (**)(void))(*(void *)v17 + 40))();
    }
  }
  else
  {
    __n128 result = *(__n128 *)v14;
    uint64_t v12 = *(void *)&v14[16];
    uint64_t v13 = v15;
    *(unsigned char *)a4 = 0;
    *(__n128 *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = result;
    *(void *)(a4 + 24) = v12;
    *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v13;
  }
  return result;
}

uint64_t re::FrameworkAssetProvider::makeDescriptorFromAssetPath@<X0>(re::FrameworkAssetProvider *this@<X0>, const re::AssetPath *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (const re::AssetPath *)((char *)a2 + 8);
  uint64_t v5 = (const re::AssetPath *)((char *)a2 + 40);
  char v6 = (const char *)**((void **)a2 + 9);
  re::FrameworkAssetProvider::makeDescriptor(v4, v5, (re::DynamicString *)&v9, (uint64_t)v11);
  v7.n128_f64[0] = re::Optional<re::AssetLoadDescriptor>::Optional(a3, (uint64_t)v11);
  if ((void)v22)
  {
    if (BYTE8(v22)) {
      (*(void (**)(double))(*(void *)v22 + 40))(v7.n128_f64[0]);
    }
    __n128 v7 = 0uLL;
    long long v22 = 0u;
    long long v23 = 0u;
  }
  if (v17)
  {
    if (v21) {
      (*(void (**)(__n128))(*(void *)v17 + 40))(v7);
    }
    uint64_t v21 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v17 = 0;
    ++v20;
  }
  if (v12)
  {
    if (v16) {
      (*(void (**)(__n128))(*(void *)v12 + 40))(v7);
    }
    uint64_t v16 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v12 = 0;
    ++v15;
  }
  if (*(void *)&v11[0])
  {
    if (BYTE8(v11[0])) {
      (*(void (**)(__n128))(**(void **)&v11[0] + 40))(v7);
    }
    __n128 v7 = 0uLL;
    memset(v11, 0, sizeof(v11));
  }
  uint64_t result = v9;
  if (v9)
  {
    if (v10) {
      return (*(uint64_t (**)(__n128))(*(void *)v9 + 40))(v7);
    }
  }
  return result;
}

const char *re::FrameworkAssetProvider::schemeName(re::FrameworkAssetProvider *this)
{
  return "Framework";
}

FILE *zip_file_create(const char *a1)
{
  uint64_t result = fopen(a1, "wb+");
  if (result) {
    operator new();
  }
  return result;
}

uint64_t zip_file_open(const char *a1)
{
  if (fopen(a1, "rb")) {
    operator new();
  }
  return 0;
}

uint64_t zip_file_read(FILE *__stream)
{
  if (__stream)
  {
    __int16 __ptr = 0;
    if (fread(&__ptr, 1uLL, 2uLL, __stream) == 2)
    {
      fseek(__stream, 0, 0);
      if (__ptr == 80 || HIBYTE(__ptr) == 75) {
        operator new();
      }
    }
  }
  return 0;
}

void *re::allocInfo_NamedAssetLoadDescriptorParameters(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_35, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_35))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF74F40, "NamedAssetLoadDescriptorParameters");
    __cxa_guard_release(&_MergedGlobals_35);
  }
  return &unk_26AF74F40;
}

void re::initInfo_NamedAssetLoadDescriptorParameters(re *this, re::IntrospectionBase *a2)
{
  v10[0] = 0x52794AE899614E6CLL;
  v10[1] = "NamedAssetLoadDescriptorParameters";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v11;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF74F20, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF74F20);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      __n128 v7 = re::IntrospectionInfo<re::DynamicString>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "assetName";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF74F18 = v8;
      __cxa_guard_release(&qword_26AF74F20);
    }
  }
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 1;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = &qword_26AF74F18;
  *((void *)this + 9) = re::internal::defaultConstruct<re::NamedAssetLoadDescriptorParameters>;
  *((void *)this + 11) = 0;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::NamedAssetLoadDescriptorParameters>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::NamedAssetLoadDescriptorParameters>;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::NamedAssetLoadDescriptorParameters>;
  re::IntrospectionRegistry::add(this, v3);
  long long v9 = v11;
}

void *re::internal::defaultConstruct<re::NamedAssetLoadDescriptorParameters>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  return re::DynamicString::setCapacity((void *)a3, 0);
}

double re::internal::defaultDestruct<re::NamedAssetLoadDescriptorParameters>(int a1, int a2, re::DynamicString *this)
{
  return re::DynamicString::deinit(this);
}

void *re::internal::defaultConstructV2<re::NamedAssetLoadDescriptorParameters>(_anonymous_namespace_ *a1)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  return re::DynamicString::setCapacity(a1, 0);
}

_anonymous_namespace_ *re::NamedAssetProvider::NamedAssetProvider(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *((void *)a1 + 3) = 0;
  *(void *)a1 = &unk_26E6C9718;
  *((void *)a1 + 4) = 0;
  *((void *)a1 + 5) = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF74F38, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF74F38))
  {
    qword_26AF74F30 = re::internal::getOrCreateInfo((re::internal *)"NamedAssetLoadDescriptorParameters", (uint64_t (*)(re::internal *))re::allocInfo_NamedAssetLoadDescriptorParameters, (re::IntrospectionBase *(*)(void))re::initInfo_NamedAssetLoadDescriptorParameters, (void (*)(re::IntrospectionBase *))&unk_26AF74F28, 0);
    __cxa_guard_release(&qword_26AF74F38);
  }
  re::NamedAssetProvider::s_loadDescriptorParametersIntrospect = qword_26AF74F30;
  *((void *)a1 + 4) = a3;
  *((void *)a1 + 5) = a4;
  *((void *)a1 + 3) = a2;
  return a1;
}

void re::NamedAssetProvider::~NamedAssetProvider(re::NamedAssetProvider *this)
{
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::NamedAssetProvider::makeDescriptor@<X0>(_anonymous_namespace_ *a1@<X0>, re::DynamicString *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  char v6 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)a3, 0);
  *(void *)(a3 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(a3 + 40) = 0;
  *(_DWORD *)(a3 + 56) = 0;
  *(void *)(a3 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 0;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(void *)(a3 + 136) = 0;
  re::DynamicString::setCapacity((void *)(a3 + 112), 0);
  uint64_t v12 = (uint64_t *)"NamedAsset";
  uint64_t v13 = 10;
  re::DynamicString::operator=((re::DynamicString *)a3, (uint64_t)&v12);
  __n128 v7 = re::DynamicString::operator=((re::DynamicString *)(a3 + 112), a2);
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  re::DynamicString::setCapacity(&v12, 0);
  re::DynamicString::operator=((re::DynamicString *)&v12, a1);
  re::DynamicString::DynamicString((re::DynamicString *)v11, (const re::DynamicString *)&v12);
  re::AssetLoadDescriptor::setIntrospectableData((char **)a3, (const re::IntrospectionBase *)re::NamedAssetProvider::s_loadDescriptorParametersIntrospect, (const re::IntrospectionBase **)v11, 0);
  if (*(void *)&v11[0])
  {
    if (BYTE8(v11[0])) {
      (*(void (**)(void))(**(void **)&v11[0] + 40))();
    }
    memset(v11, 0, sizeof(v11));
  }
  uint64_t result = (uint64_t)v12;
  if (v12)
  {
    if (v13) {
      return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*v12 + 40))(v12, v14, v8, v9);
    }
  }
  return result;
}

__n128 re::NamedAssetProvider::load@<Q0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = v6;
  uint64_t v4 = v7;
  uint64_t v5 = v8;
  *(unsigned char *)a2 = 0;
  *(__n128 *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = result;
  *(void *)(a2 + 24) = v4;
  *(void *)(a2 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v5;
  return result;
}

__n128 re::NamedAssetProvider::resolveChild@<Q0>(re::NamedAssetProvider *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result = v9;
  uint64_t v7 = v10;
  uint64_t v8 = v11;
  *(unsigned char *)a2 = 0;
  *(__n128 *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = result;
  *(void *)(a2 + 24) = v7;
  *(void *)(a2 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v8;
  return result;
}

re::DynamicString *re::NamedAssetProvider::getDescription(re::NamedAssetProvider *this, const re::AssetLoadDescriptor *a2, re::DynamicString *a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  re::DynamicString::setCapacity(&v9, 0);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF74F38, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF74F38))
  {
    qword_26AF74F30 = re::internal::getOrCreateInfo((re::internal *)"NamedAssetLoadDescriptorParameters", (uint64_t (*)(re::internal *))re::allocInfo_NamedAssetLoadDescriptorParameters, (re::IntrospectionBase *(*)(void))re::initInfo_NamedAssetLoadDescriptorParameters, (void (*)(re::IntrospectionBase *))&unk_26AF74F28, 0);
    __cxa_guard_release(&qword_26AF74F38);
  }
  uint64_t IntrospectableData = (re *)re::AssetLoadDescriptor::getIntrospectableData(a2, (re **)qword_26AF74F30, &v9, 0);
  if (IntrospectableData)
  {
    re::DynamicString::operator=(a3, (re::DynamicString *)&v9);
  }
  else
  {
    __n128 v6 = *re::assetsLogObjects(IntrospectableData);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      if (*((unsigned char *)a2 + 8)) {
        uint64_t v8 = (char *)*((void *)a2 + 2);
      }
      else {
        uint64_t v8 = (char *)a2 + 9;
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v8;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "NamedAssetProvider Failed to get introspectable data for %s", (uint8_t *)&buf, 0xCu);
    }
    *(void *)&long long buf = "mangled";
    *((void *)&buf + 1) = 7;
    re::DynamicString::operator=(a3, (uint64_t)&buf);
  }
  __n128 result = v9;
  if (v9)
  {
    if (v10) {
      return (re::DynamicString *)(*(uint64_t (**)(void))(*(void *)v9 + 40))();
    }
  }
  return result;
}

const char *re::NamedAssetProvider::schemeName(re::NamedAssetProvider *this)
{
  return "NamedAsset";
}

void re::AssetProvider::makeDescriptorFromAssetPath(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t *re::AssetAPIUtilities::copyToPropertyBag@<X0>(re::AssetAPIUtilities *this@<X0>, uint64_t a2@<X8>)
{
  v9[5] = *(unsigned int **)MEMORY[0x263EF8340];
  uint64_t v5 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(void *)(*(void *)(*((void *)this + 1) + 24) + 1040), *(void *)(*((void *)this + 1) + 264));
  __n128 v6 = (const re::IntrospectionBase *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 112))(v5);
  re::AssetHandle::serializableAsset(this, v9);
  re::PropertyBagHelper::makeWithIntrospectedData(v6, v9[0], 0, a2, v7);
  return std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:nn180100]((uint64_t *)v9);
}

uint64_t re::AssetAPIUtilities::loadFromPropertyBag(_anonymous_namespace_ *a1, id *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)a1 + 1);
  unint64_t v5 = *(void *)(v4 + 264);
  __n128 v6 = *(re::AssetManager **)(v4 + 24);
  if (!v5)
  {
    uint64_t v14 = *re::assetsLogObjects(v7);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    uint64_t v15 = re::AssetHandle::assetInfo(a1);
    if (v15[17]) {
      uint64_t v16 = (char *)v15[18];
    }
    else {
      uint64_t v16 = (char *)v15 + 137;
    }
    *(_DWORD *)long long buf = 136315138;
    long long v23 = v16;
    uint64_t v17 = "loadFromPropertyBag asset doesn't have a type '%s'";
LABEL_16:
    _os_log_error_impl(&dword_233120000, v14, OS_LOG_TYPE_ERROR, v17, buf, 0xCu);
    return 0;
  }
  uint64_t v8 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(void *)(*(void *)(v4 + 24) + 1040), v5);
  __n128 v9 = (re *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 112))(v8);
  re::AssetHandle::internalForceUnloadAsync(a1);
  uint64_t v10 = (re::DynamicString **)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 120))(v8);
  id v21 = *a2;

  if ((v11 & 1) == 0)
  {
    uint64_t v14 = *re::assetsLogObjects(v12);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    uint64_t v19 = re::AssetHandle::assetInfo(a1);
    if (v19[17]) {
      int v20 = (char *)v19[18];
    }
    else {
      int v20 = (char *)v19 + 137;
    }
    *(_DWORD *)long long buf = 136315138;
    long long v23 = v20;
    uint64_t v17 = "copyToIntrospectedData failed on '%s'";
    goto LABEL_16;
  }
  uint64_t v13 = 1;
  re::AssetManager::setAssetPointerForExistingAsset(v6, v10, a1, 0, 1);
  return v13;
}

uint64_t re::AssetManager::shouldPreloadEngineAssets(re::AssetManager *this)
{
  return *((unsigned __int8 *)this + 1378);
}

uint64_t re::AssetManager::shouldPreloadAssetsOnResourceSharingClients(re::AssetManager *this)
{
  return *((unsigned __int8 *)this + 1379);
}

void re::AssetManager::assetHandle(os_unfair_lock_s *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  __n128 v6 = a1 + 16;
  os_unfair_lock_lock(a1 + 16);
  if (!a2[2])
  {
LABEL_28:
    uuid_generate_random((unsigned __int8 *)&v22);
    unint64_t v13 = (*((void *)&v22 + 1) + ((void)v22 << 6) + ((unint64_t)v22 >> 2) - 0x61C8864680B583E9) ^ v22;
    goto LABEL_29;
  }
  uint64_t v7 = re::HashTable<re::AssetLoadDescriptor,unsigned long long,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::tryGet((uint64_t)&a1[42], a2[4]);
  unint64_t v8 = a2[2];
  if (v8 >= 2)
  {
    unint64_t v9 = 1;
    uint64_t v10 = 144;
    while (1)
    {
      uint64_t v11 = re::HashTable<re::AssetLoadDescriptor,unsigned long long,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::tryGet((uint64_t)&a1[42], a2[4] + v10);
      if (v7 | v11)
      {
        if (!v7 || !v11 || *(void *)v7 != *(void *)v11) {
          break;
        }
      }
      ++v9;
      unint64_t v8 = a2[2];
      v10 += 144;
      if (v9 >= v8) {
        goto LABEL_9;
      }
    }
    if (v7) {
      uint64_t v17 = (uint64_t *)v7;
    }
    else {
      uint64_t v17 = (uint64_t *)v11;
    }
    uint64_t v18 = *v17;
    uint64_t v19 = *re::assetsLogObjects((re *)v11);
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      goto LABEL_26;
    }
    LODWORD(v2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 134217984;
    *(void *)((char *)&v22 + 4) = v18;
    int v20 = "Can't create a new asset with the requested asset descriptors. An existing asset (%llu) matches some, but not "
          "all, of the the asset descriptors.";
    goto LABEL_32;
  }
LABEL_9:
  if (!v7)
  {
    if (v8)
    {
      uint64_t v14 = (re::AssetLoadDescriptor *)a2[4];
      uint64_t v15 = 144 * v8;
      while (1)
      {
        uint64_t v16 = (*((void *)v14 + 1) & 1) != 0 ? (const char *)*((void *)v14 + 2) : (char *)v14 + 9;
        if (!strcmp(v16, "NetworkAsset")) {
          break;
        }
        uint64_t v14 = (re::AssetLoadDescriptor *)((char *)v14 + 144);
        v15 -= 144;
        if (!v15) {
          goto LABEL_28;
        }
      }
      re::AssetLoadDescriptor::getIntrospectableData<re::NetworkAssetLoadDescriptorParameters>(v14, (re::DynamicString **)&v22, 0);
      unint64_t v13 = v22;
      if ((void)v22) {
        goto LABEL_29;
      }
    }
    goto LABEL_28;
  }
  *(void *)&long long v22 = *(void *)v7;
  uint64_t v12 = (re *)re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)&a1[30], (uint64_t *)&v22);
  if (*((void *)v12 + 2) == a2[2])
  {
    unint64_t v13 = *(void *)v7;
LABEL_29:
    re::AssetManager::assetHandle_assetTablesLocked((re::AssetManager *)a1, a2, v13, (uint64_t *)&v22);
    *(unsigned char *)a3 = 1;
    *(_OWORD *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v22;
    long long v22 = 0uLL;
    *(void *)(a3 + 24) = v23;
    uint64_t v23 = 0;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v22);
    goto LABEL_30;
  }
  uint64_t v19 = *re::assetsLogObjects(v12);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    unint64_t v21 = *(void *)v7;
    LODWORD(v2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 134217984;
    *(void *)((char *)&v22 + 4) = v21;
    int v20 = "Can't create a new asset with the requested asset descriptors (registeredDescriptors size does not match loadD"
          "escriptors's). An existing asset (%llu) matches some, but not all, of the the asset descriptors.";
LABEL_32:
    _os_log_error_impl(&dword_233120000, v19, OS_LOG_TYPE_ERROR, v20, (uint8_t *)&v22, 0xCu);
  }
LABEL_26:
  *(unsigned char *)a3 = 0;
LABEL_30:
  os_unfair_lock_unlock(v6);
}

BOOL re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::contains(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 24);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = v3 ? *(void *)(v3 + 664) : 0;
  unint64_t v5 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v3 ^ (v3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v3 ^ (v3 >> 30))) >> 27));
  uint64_t v6 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((v4 ^ (v5 >> 31) ^ v5) % v2));
  if (v6 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  do
  {
    uint64_t v9 = *(void *)(v8 + 40 * v6 + 24);
    BOOL result = v9 == v3;
    if (v9 == v3) {
      break;
    }
    uint64_t v6 = *(_DWORD *)(v8 + 40 * v6 + 8) & 0x7FFFFFFF;
  }
  while (v6 != 0x7FFFFFFF);
  return result;
}

re::AssetHandle *re::DynamicArray<re::AssetHandle>::add(_anonymous_namespace_ *this, re::AssetHandle *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::AssetHandle>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  BOOL result = re::AssetHandle::AssetHandle((re::AssetHandle *)(*((void *)this + 4) + 24 * v4), a2);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::add(uint64_t a1, re::AssetHandle *a2)
{
  unint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    uint64_t v5 = *(void *)(v4 + 664);
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t v6 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v4 ^ (v4 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v4 ^ (v4 >> 30))) >> 27));
  unint64_t v7 = v5 ^ (v6 >> 31) ^ v6;
  unint64_t v8 = *(unsigned int *)(a1 + 24);
  if (!v8)
  {
    LODWORD(v9) = 0;
    goto LABEL_11;
  }
  unint64_t v9 = v7 % v8;
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v7 % v8));
  if (v10 == 0x7FFFFFFF)
  {
LABEL_11:
    unsigned int v12 = re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::addAsCopy(a1, v9, v7, (int)a2, a2);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v13 = *(void *)(a1 + 16) + 40 * v12;
    return v13 + 16;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 40 * v10 + 24) != v4)
  {
    uint64_t v10 = *(_DWORD *)(v11 + 40 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_11;
    }
  }
  uint64_t v13 = v11 + 40 * v10;
  return v13 + 16;
}

void re::AssetManager::getAssetDependenciesFromAssetProvidersRecursive(uint64_t a1@<X0>, _anonymous_namespace_ *a2@<X1>, uint64_t a3@<X2>, re::AssetHandle *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  unint64_t v11 = *((void *)a2 + 2);
  unsigned int v12 = re::AssetHandle::assetInfo(a4);
  if (v12[10] == -1) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v12[10];
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  *(void *)&long long v37 = v13;
  uint64_t v14 = (uint64_t *)re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 120, (uint64_t *)&v37);
  if (v14)
  {
    LOBYTE(v37) = 1;
    re::DynamicArray<re::AssetLoadDescriptor>::DynamicArray((uint64_t)&v37 + 8, v14);
  }
  else
  {
    LOBYTE(v37) = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  if (!(_BYTE)v37 || !*((void *)&v38 + 1))
  {
    re::DynamicString::format((re::DynamicString *)"Failed to find AssetLoadDescriptors registered for assetId %llu.", (re::DynamicString *)v44, v13);
    if (v44[8]) {
      uint64_t v16 = *(unsigned char **)&v44[16];
    }
    else {
      uint64_t v16 = &v44[9];
    }
    re::WrappedError::make((re::WrappedError *)@"REAssetRefErrorDomain", (const __CFString *)4, (uint64_t)v16, buf);
    uint64_t v13 = *(void *)buf;
    *(void *)long long buf = 0;

    if (*(void *)v44 && (v44[8] & 1) != 0) {
      (*(void (**)(void))(**(void **)v44 + 40))();
    }
    int v15 = 0;
    goto LABEL_65;
  }
  if (*((void *)&v38 + 1) != 1 && (a5 & 1) != 0)
  {
    int v15 = 1;
    goto LABEL_65;
  }
  id location = 0;
  uint64_t v13 = *((void *)&v39 + 1);
  uint64_t v17 = 144 * *((void *)&v38 + 1);
  uint64_t v33 = 136315138;
  while (1)
  {
    if (*(unsigned char *)(v13 + 8)) {
      uint64_t v18 = *(const char **)(v13 + 16);
    }
    else {
      uint64_t v18 = (const char *)(v13 + 9);
    }
    uint64_t ProviderForScheme = re::AssetProviderRegistry::tryGetProviderForScheme(*(os_unfair_lock_s **)(a1 + 1128), v18);
    if (!ProviderForScheme)
    {
      int v20 = *re::assetsLogObjects(0);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        if (*(unsigned char *)(v13 + 8)) {
          uint64_t v21 = *(void *)(v13 + 16);
        }
        else {
          uint64_t v21 = v13 + 9;
        }
        *(_DWORD *)uint64_t v44 = 136315138;
        *(void *)&v44[4] = v21;
        _os_log_impl(&dword_233120000, v20, OS_LOG_TYPE_DEFAULT, "Failed to find a registered AssetProvider for scheme %s.", v44, 0xCu);
      }
      goto LABEL_49;
    }
    v35[2] = 0;
    v35[3] = 0;
    v35[1] = *(id *)(a1 + 1040);
    (*(void (**)(unsigned char *__return_ptr))(*(void *)ProviderForScheme + 88))(v44);
    if (!v44[0])
    {
      CFStringRef Domain = CFErrorGetDomain((CFErrorRef)*(id *)&v44[8]);
      if (CFStringCompare(Domain, @"REAssetProviderErrorDomain", 0)
        || [*(id *)&v44[8] code] != 1)
      {
        if (*(unsigned char *)(v13 + 8)) {
          uint64_t v23 = *(void *)(v13 + 16);
        }
        else {
          uint64_t v23 = v13 + 9;
        }
        re::DynamicString::format((re::DynamicString *)"AssetProvider for scheme '%s' encountered an error while trying to get dependencies for an asset load descriptor.", (re::DynamicString *)buf, v23);
        if (buf[8]) {
          uint64_t v24 = v43;
        }
        else {
          uint64_t v24 = &buf[9];
        }
        id v34 = *(id *)&v44[8];
        re::WrappedError::make(0x26E738520, 4, (uint64_t)v24, &v34, v35);

        int v25 = *(re **)buf;
        if (*(void *)buf && (buf[8] & 1) != 0) {
          int v25 = (re *)(*(uint64_t (**)(void))(**(void **)buf + 40))();
        }
        long long v26 = *re::assetsLogObjects(v25);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v27 = re::WrappedError::localizedDescription(v35);
          *(_DWORD *)long long buf = 136315138;
          *(void *)&uint8_t buf[4] = v27;
          _os_log_impl(&dword_233120000, v26, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
        }
        if (!location) {
          re::ObjCObject::operator=(&location, v35);
        }
      }
      goto LABEL_46;
    }
    if (*(void *)&v44[24]) {
      break;
    }
LABEL_46:
    re::Result<re::DynamicArray<re::DynamicArray<re::AssetLoadDescriptor>>,re::WrappedError>::~Result(v44);
LABEL_49:
    v13 += 144;
    v17 -= 144;
    if (!v17)
    {
      if (location)
      {
        *(void *)long long buf = location;
        re::WrappedError::make(0x26E738520, 4, (uint64_t)"At least one AssetProvider encountered an error while trying to get asset dependencies, and no AssetProvider succeeded.", (id *)buf, v44);
        uint64_t v13 = *(void *)v44;
        *(void *)uint64_t v44 = 0;

        int v15 = 0;
      }
      else
      {
        int v15 = 1;
      }
      goto LABEL_64;
    }
  }
  int v28 = v45;
  uint64_t v29 = 40 * *(void *)&v44[24];
  while (1)
  {
    re::AssetManager::assetHandle((os_unfair_lock_s *)a1, v28, (uint64_t)buf);
    int v15 = buf[0];
    if (buf[0])
    {
      if (!re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::contains(a3, (uint64_t)&buf[8]))
      {
        re::DynamicArray<re::AssetHandle>::add(a2, (re::AssetHandle *)&buf[8]);
        re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::add(a3, (re::AssetHandle *)&buf[8]);
      }
    }
    else
    {
      re::WrappedError::make((re::WrappedError *)@"REAssetRefErrorDomain", (const __CFString *)4, (uint64_t)"Failed to make an AssetHandle for dependency AssetLoadDescriptors.", v35);
      uint64_t v33 = (uint64_t)v35[0];
      v35[0] = 0;
    }
    if (buf[0]) {
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&buf[8]);
    }
    if (!v15) {
      break;
    }
    v28 += 5;
    v29 -= 40;
    if (!v29)
    {
      re::Result<re::DynamicArray<re::DynamicArray<re::AssetLoadDescriptor>>,re::WrappedError>::~Result(v44);
      int v15 = 1;
      goto LABEL_63;
    }
  }
  re::Result<re::DynamicArray<re::DynamicArray<re::AssetLoadDescriptor>>,re::WrappedError>::~Result(v44);
LABEL_63:
  uint64_t v13 = v33;
LABEL_64:

LABEL_65:
  if ((_BYTE)v37) {
    re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)&v37 + 8);
  }
  if (v15)
  {
    unint64_t v30 = *((void *)a2 + 2);
    if (v11 >= v30)
    {
LABEL_73:
      *(unsigned char *)a6 = 1;
    }
    else
    {
      uint64_t v31 = 24 * v11;
      while (1)
      {
        unint64_t v32 = *((void *)a2 + 2);
        if (v32 <= v11)
        {
          *(void *)long long buf = 0;
          long long v40 = 0u;
          long long v41 = 0u;
          long long v38 = 0u;
          long long v39 = 0u;
          long long v37 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v44 = 136315906;
          *(void *)&v44[4] = "operator[]";
          *(_WORD *)&v44[12] = 1024;
          *(_DWORD *)&v44[14] = 789;
          *(_WORD *)&v44[18] = 2048;
          *(void *)&v44[20] = v11;
          *(_WORD *)&v44[28] = 2048;
          *(void *)&v44[30] = v32;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        re::AssetManager::getAssetDependenciesFromAssetProvidersRecursive(a1, a2, a3, *((void *)a2 + 4) + v31, a5);
        if (!*(unsigned char *)a6) {
          break;
        }
        ++v11;
        v31 += 24;
        if (v30 == v11) {
          goto LABEL_73;
        }
      }
    }
  }
  else
  {
    *(unsigned char *)a6 = 0;
    *(void *)(a6 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v13;
  }
}

double re::AssetManager::AssetManager(re::AssetManager *this)
{
  *(void *)this = &unk_26E6C97B8;
  *((void *)this + 1) = &unk_26E6C9990;
  *((void *)this + 7) = 0;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = &unk_26E6C99A8;
  *((void *)this + 3) = 0;
  double result = 0.0;
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *((_DWORD *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(_OWORD *)((char *)this + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *((_DWORD *)this + 26) = 0;
  *(void *)((char *)this + 10re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)((char *)this + 156) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_DWORD *)this + 50) = 0;
  *(void *)((char *)this + 204) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 23re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *((_DWORD *)this + 6re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)((char *)this + 25re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x7FFFFFFFLL;
  *((void *)this + 35) = 0;
  *((_DWORD *)this + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((_DWORD *)this + 96) = 0;
  *((void *)this + 53) = 0;
  *((void *)this + 51) = 0;
  *((_DWORD *)this + 104) = 0;
  *((_DWORD *)this + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)this + 61) = 0;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0;
  *((void *)this + 59) = 0;
  *((unsigned char *)this + 51re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)this + 65) = 0;
  *((_DWORD *)this + 144) = 0;
  *((void *)this + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *((_DWORD *)this + 154) = 0;
  *((unsigned char *)this + 640) = 0;
  *((_DWORD *)this + 19re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)this + 101) = 0;
  *((void *)this + 99) = 0;
  *((_DWORD *)this + 200) = 0;
  *((void *)this + 104) = 0;
  *((_DWORD *)this + 224) = 0;
  *((void *)this + 117) = 0;
  *((_DWORD *)this + 23re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)this + 115) = 0;
  *((_DWORD *)this + 240) = 0;
  *((void *)this + 125) = 0;
  *((_DWORD *)this + 24re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *((void *)this + 123) = 0;
  *((_DWORD *)this + 256) = 0;
  *((_DWORD *)this + 27re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *((_DWORD *)this + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0;
  *((void *)this + 165) = 0;
  *((_DWORD *)this + 32re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *((void *)this + 163) = 0;
  *((_WORD *)this + 67re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((unsigned char *)this + 1346) = 0;
  *((void *)this + 169) = 0;
  *((unsigned char *)this + 1360) = 0;
  *((void *)this + 155) = 0;
  *((void *)this + 171) = -1;
  *((unsigned char *)this + 1380) = 0;
  *((_DWORD *)this + 344) = 0;
  *((void *)this + 173) = -1;
  *((_WORD *)this + 696) = 0;
  *((unsigned char *)this + 1394) = 0;
  *((void *)this + 175) = 1000;
  *((void *)this + 176) = 0;
  *((unsigned char *)this + 1416) = 0;
  *((unsigned char *)this + 1424) = 0;
  *((_DWORD *)this + 374) = 0;
  *((void *)this + 193) = 0;
  *((_DWORD *)this + 384) = 0;
  *((void *)this + 191) = 0;
  *((_DWORD *)this + 400) = 0;
  *((_DWORD *)this + 406) = 1;
  *((_OWORD *)this + 10re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *((void *)this + 20re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *((void *)this + 210) = -1;
  *((void *)this + 209) = -1;
  *((_WORD *)this + 844) = 260;
  *((_DWORD *)this + 423) = 1023969417;
  *((unsigned char *)this + 1696) = 0;
  *((_WORD *)this + 860) = 0;
  *((unsigned char *)this + 1744) = 0;
  *((_OWORD *)this + 10re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *((_DWORD *)this + 16) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 31re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 324) = 0u;
  *(void *)((char *)this + 340) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 39re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *(_OWORD *)((char *)this + 904) = 0u;
  *(_OWORD *)((char *)this + 96re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 64re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 1080) = 0u;
  *(_OWORD *)((char *)this + 1096) = 0u;
  *(_OWORD *)((char *)this + 104re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 1064) = 0u;
  *(_OWORD *)((char *)this + 103re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(void *)((char *)this + 1116) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 128re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 120re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 1224) = 0u;
  *(_OWORD *)((char *)this + 1176) = 0u;
  *(_OWORD *)((char *)this + 119re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 1144) = 0u;
  *(_OWORD *)((char *)this + 1160) = 0u;
  *(_OWORD *)((char *)this + 112re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(void *)((char *)this + 1500) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 1464) = 0u;
  *(_OWORD *)((char *)this + 1480) = 0u;
  *(_OWORD *)((char *)this + 143re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 144re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 151re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 160re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 1704) = 0u;
  return result;
}

void re::AssetManager::~AssetManager(re::AssetManager *this)
{
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 217);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }

  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1608);
  uint64_t v3 = *((void *)this + 189);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 193);
    if (v4)
    {
      uint64_t v5 = *((void *)this + 191);
      if (v5)
      {
        uint64_t v6 = 40 * v5;
        do
        {
          re::FunctionBase<24ul,void ()(re::DynamicArray<unsigned long long>)>::destroyCallable(v4);
          v4 += 40;
          v6 -= 40;
        }
        while (v6);
        uint64_t v3 = *((void *)this + 189);
        uint64_t v4 = *((void *)this + 193);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 40))(v3, v4);
    }
    *((void *)this + 193) = 0;
    *((void *)this + 190) = 0;
    *((void *)this + 191) = 0;
    *((void *)this + 189) = 0;
    ++*((_DWORD *)this + 384);
  }
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 183);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 1288);
  uint64_t v7 = *((void *)this + 153);
  if (v7)
  {

    *((void *)this + 153) = 0;
  }
  uint64_t v8 = *((void *)this + 152);
  if (v8)
  {

    *((void *)this + 15re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  }
  uint64_t v9 = *((void *)this + 150);
  if (v9)
  {

    *((void *)this + 150) = 0;
  }
  uint64_t v10 = *((void *)this + 149);
  if (v10)
  {

    *((void *)this + 149) = 0;
  }
  uint64_t v11 = *((void *)this + 148);
  if (v11)
  {

    *((void *)this + 14re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  }
  uint64_t v12 = *((void *)this + 146);
  if (v12)
  {

    *((void *)this + 146) = 0;
  }
  uint64_t v13 = *((void *)this + 142);
  if (v13)
  {

    *((void *)this + 14re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  }
  re::HashTable<re::internal::AssetLoadingRoot,re::DynamicString,re::internal::AssetLoadingRoot,re::internal::AssetLoadingRoot,true,false>::deinit((uint64_t *)this + 135);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 968);
  re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::deinit((uint64_t)this + 904);

  re::DynamicArray<re::NetworkActionQueue::Action>::deinit((uint64_t)this + 776);
  uint64_t v14 = *((void *)this + 82);
  if (v14)
  {

    *((void *)this + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  }
  re::Queue<re::SharedPtr<re::AssetLoadRequest::Data>>::deinit((uint64_t *)this + 73);

  uint64_t v15 = *((void *)this + 57);
  if (v15)
  {
    if (*((void *)this + 61)) {
      (*(void (**)(uint64_t))(*(void *)v15 + 40))(v15);
    }
    *((void *)this + 61) = 0;
    *((void *)this + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *((void *)this + 59) = 0;
    *((void *)this + 57) = 0;
    ++*((_DWORD *)this + 120);
  }
  uint64_t v16 = *((void *)this + 49);
  if (v16)
  {
    uint64_t v17 = (void *)*((void *)this + 53);
    if (v17)
    {
      uint64_t v18 = *((void *)this + 51);
      if (v18)
      {
        uint64_t v19 = 32 * v18;
        do
        {
          std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](v17);
          v17 += 4;
          v19 -= 32;
        }
        while (v19);
        uint64_t v16 = *((void *)this + 49);
        uint64_t v17 = (void *)*((void *)this + 53);
      }
      (*(void (**)(uint64_t, void *))(*(void *)v16 + 40))(v16, v17);
    }
    *((void *)this + 53) = 0;
    *((void *)this + 50) = 0;
    *((void *)this + 51) = 0;
    *((void *)this + 49) = 0;
    ++*((_DWORD *)this + 104);
  }
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 38);
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)this + 264);
  re::HashTable<re::AssetLoadDescriptor,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::deinit((uint64_t *)this + 27);
  re::HashTable<re::AssetLoadDescriptor,unsigned long long,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::deinit((uint64_t *)this + 21);
  re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 15);
  re::HashTable<re::DynamicString,re::SharedPtr<re::internal::AssetEntry>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 9);
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)this + 24);
}

void re::AssetManager::init(uint64_t a1, uint64_t a2)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)a2);
  {
    if (v4)
    {
      re::introspect<re::AssetMap>(void)::info = (_UNKNOWN *)re::introspect_AssetMap(0);
    }
  }
  {
    if (v4)
    {
      re::introspect<re::DeduplicationInformation>(void)::info = (_UNKNOWN *)re::introspect_DeduplicationInformation(0);
    }
  }
  {
    if (v4)
    {
      re::introspect<re::RealityFileHeader>(void)::info = (_UNKNOWN *)re::introspect_RealityFileHeader(0);
    }
  }
  re::AssetUtilities::init(v4);
  *(unsigned char *)(a1 + 1360) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 136re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 1376) = *(unsigned char *)(a2 + 68);
  if (*(unsigned char *)(a2 + 64))
  {
    char v6 = 1;
  }
  else
  {
    re::Defaults::BOOLValue((re::Defaults *)"calculateAssetNonSharedDataSize", v5, (char *)buf);
    if (buf[0]) {
      BOOL v7 = buf[1] == 0;
    }
    else {
      BOOL v7 = 1;
    }
    char v6 = !v7;
  }
  *(unsigned char *)(a1 + 1377) = v6;
  *(unsigned char *)(a1 + 137re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(unsigned char *)(a2 + 67);
  re::Defaults::BOOLValue((re::Defaults *)"preloadAssetsOnResourceSharingClients", v5, (char *)buf);
  if (buf[0]) {
    uint8_t v9 = buf[1];
  }
  else {
    uint8_t v9 = 0;
  }
  *(unsigned char *)(a1 + 1379) = v9;
  re::Defaults::BOOLValue((re::Defaults *)"useXPCAssetPushLoading", v8, (char *)buf);
  if (buf[0]) {
    uint8_t v11 = buf[1];
  }
  else {
    uint8_t v11 = 1;
  }
  *(unsigned char *)(a1 + 1380) = v11;
  if (*(unsigned char *)(a2 + 66)) {
    *(unsigned char *)(a1 + 1380) = 0;
  }
  re::Defaults::BOOLValue((re::Defaults *)"loadPeerAssetsOnlyFromDirectPeers", v10, (char *)buf);
  if (buf[0]) {
    uint8_t v13 = buf[1];
  }
  else {
    uint8_t v13 = 0;
  }
  *(unsigned char *)(a1 + 139re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v13;
  re::Defaults::BOOLValue((re::Defaults *)"loadPayloadOnEngineQueue", v12, (char *)buf);
  if (buf[0]) {
    uint8_t v15 = buf[1];
  }
  else {
    uint8_t v15 = 0;
  }
  *(unsigned char *)(a1 + 1393) = v15;
  re::Defaults::uint64Value((re::Defaults *)"longRegistrationLogThresholdMilliseconds", v14, (uint64_t)buf);
  uint64_t v16 = 1000;
  if (buf[0]) {
    uint64_t v16 = v147;
  }
  *(void *)(a1 + 1400) = v16;
  uint64_t v17 = *(void *)(a2 + 8);
  *(void *)(a1 + 120re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v17;
  re::ObjCObject::operator=((id *)(a1 + 520), (id *)a2);
  id v145 = *(id *)(a1 + 520);
  re::internal::EngineQueueCheck::init((void *)(a1 + 832), (dispatch_queue_t *)&v145);

  uint64_t v19 = (_anonymous_namespace_ *)re::Queue<re::SharedPtr<re::AssetLoadRequest::Data>>::setCapacity((void *)(a1 + 584), 0x20uLL);
  *(void *)(a1 + 60re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a1 + 600) = 0;
  *(_DWORD *)(a1 + 616) = 0;
  int v20 = (_anonymous_namespace_ *)re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::setCapacity((void *)(a1 + 904), 0x20uLL);
  ++*(_DWORD *)(a1 + 928);
  uint64_t v21 = (re *)re::DynamicArray<float *>::setCapacity((void *)(a1 + 1288), 0x10uLL);
  ++*(_DWORD *)(a1 + 1312);
  long long v22 = re::globalAllocators(v21);
  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v22[2] + 32))(v22[2], 136, 8);
  *(_OWORD *)(v23 + 96) = 0u;
  *(_OWORD *)(v23 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)uint64_t v23 = 0u;
  *(_OWORD *)(v23 + 16) = 0u;
  *(_OWORD *)(v23 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(v23 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(v23 + 64) = 0u;
  *(_OWORD *)(v23 + 80) = 0u;
  *(_DWORD *)(v23 + 36) = 0x7FFFFFFF;
  *(void *)(v23 + 80) = 0x7FFFFFFF00000000;
  *(void *)(v23 + 12re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(v23 + 96) = 0;
  *(void *)(v23 + 104) = 0;
  *(_DWORD *)(v23 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0;
  *(void *)(v23 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(a1 + 1040) = v23;
  uint64_t v24 = re::globalAllocators((re *)v23);
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v24[2] + 32))(v24[2], 96, 8);
  *(_OWORD *)(v25 + 64) = 0u;
  *(_OWORD *)(v25 + 80) = 0u;
  *(_OWORD *)(v25 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(v25 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(void *)uint64_t v25 = &unk_26E717650;
  *(void *)(v25 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(v25 + 16) = 0;
  *(void *)(v25 + 24) = 0;
  *(_DWORD *)(v25 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(_OWORD *)(v25 + 6re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(v25 + 56) = 0u;
  *(_OWORD *)(v25 + 40) = 0u;
  *(_DWORD *)(v25 + 84) = 0x7FFFFFFF;
  *(void *)(a1 + 104re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v25;
  long long v26 = (re *)re::AssetHelper::registerDefaultAssetCompilers((re *)v25, v17, *(unsigned char *)(a2 + 24));
  uint64_t v27 = re::globalAllocators(v26);
  uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v27[2] + 32))(v27[2], 192, 64);
  *(_OWORD *)(v28 + 12re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(v28 + 144) = 0u;
  *(_OWORD *)(v28 + 96) = 0u;
  *(_OWORD *)(v28 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(v28 + 160) = 0u;
  *(_OWORD *)(v28 + 176) = 0u;
  *(_OWORD *)(v28 + 64) = 0u;
  *(_OWORD *)(v28 + 80) = 0u;
  *(_OWORD *)(v28 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(v28 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)uint64_t v28 = 0u;
  *(_OWORD *)(v28 + 16) = 0u;
  *(_DWORD *)(v28 + 10re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0x7FFFFFFF;
  *(_OWORD *)(v28 + 136) = 0u;
  *(void *)(v28 + 15re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x7FFFFFFF00000000;
  *(_OWORD *)(v28 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(void *)(a1 + 112re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v28;
  *(_OWORD *)uint64_t v28 = *(_OWORD *)(a1 + 1040);
  *(void *)(v28 + 16) = v28;
  uint64_t v29 = (_anonymous_namespace_ *)re::ServiceLocator::serviceOrNull<re::ResourceFetchService>(v17);
  *(void *)(a1 + 1064) = v29;
  uint64_t v30 = *(void *)(a2 + 56);
  if (!v30)
  {
    if (v29) {
      uint64_t v30 = 10000000;
    }
    else {
      uint64_t v30 = 500000000;
    }
  }
  *(void *)(a1 + 1384) = v30;
  *(void *)(a1 + 1160) = *(void *)(a2 + 32);
  uint64_t v31 = (re *)re::ServiceLocator::serviceOrNull<re::NetworkAssetService>(v17);
  *(void *)(a1 + 1144) = v31;
  if (v31)
  {
    unint64_t v32 = re::globalAllocators(v31);
    uint64_t v33 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v32[2] + 32))(v32[2], 16, 8);
    *uint64_t v33 = &unk_26E6C9B48;
    v33[1] = a1;
    *(void *)(a1 + 64re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v33;
    (*(void (**)(void, void *))(**(void **)(a1 + 1144) + 208))(*(void *)(a1 + 1144), v33);
  }
  else
  {
    id v34 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_233120000, v34, OS_LOG_TYPE_DEFAULT, "No NetworkAssetService available! Cannot share dependencies over network.", buf, 2u);
    }
  }
  Request = (re *)re::ServiceLocator::serviceOrNull<re::NetworkSendBlockingAssetLoadRequestService>(v17);
  *(void *)(a1 + 115re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = Request;
  int v36 = re::globalAllocators(Request);
  long long v37 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v36[2] + 32))(v36[2], 48, 8);
  long long v38 = re::NetworkAssetProvider::NetworkAssetProvider(v37, *(void *)(a1 + 1144), *(void *)(a1 + 1128), *(void *)(a1 + 1040));
  uint64_t v39 = *(void *)(a1 + 1136);
  *(void *)(a1 + 1136) = v38;
  if (v39)
  {

    long long v38 = *(_anonymous_namespace_ **)(a1 + 1136);
  }
  long long v40 = *(os_unfair_lock_s **)(a1 + 1128);
  v144 = v38;
  if (v38)
  {
    long long v41 = (char *)v38 + 8;
    uint64_t v42 = (uint64_t)v144;
    BOOL v43 = re::AssetProviderRegistry::registerAssetProvider(v40, (uint64_t *)&v144);
    if (v42)
    {

      v144 = 0;
    }
  }
  else
  {
    BOOL v43 = re::AssetProviderRegistry::registerAssetProvider(v40, (uint64_t *)&v144);
  }
  uint64_t v44 = re::globalAllocators((re *)v43);
  uint64_t v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v44[2] + 32))(v44[2], 64, 64);
  *(_OWORD *)uint64_t v45 = 0u;
  *(_OWORD *)(v45 + 16) = 0u;
  *(_OWORD *)(v45 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(v45 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_DWORD *)(v45 + 44) = 0x7FFFFFFF;
  *(void *)(a1 + 1240) = v45;
  uint64_t v46 = re::globalAllocators((re *)v45);
  uint64_t v47 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v46[2] + 32))(v46[2], 56, 8);
  uint64_t v48 = re::FrameworkAssetProvider::FrameworkAssetProvider(v47, *(void *)(a1 + 1128), *(void *)(a1 + 1040), *(void *)(a1 + 1048), *(void *)(a1 + 1240));
  uint64_t v49 = *(void *)(a1 + 1168);
  *(void *)(a1 + 116re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v48;
  if (v49)
  {

    uint64_t v48 = *(_anonymous_namespace_ **)(a1 + 1168);
  }
  uint64_t v50 = *(os_unfair_lock_s **)(a1 + 1128);
  v143 = v48;
  if (v48)
  {
    uint64_t v51 = (char *)v48 + 8;
    uint64_t v52 = (uint64_t)v143;
    BOOL v53 = re::AssetProviderRegistry::registerAssetProvider(v50, (uint64_t *)&v143);
    if (v52)
    {

      v143 = 0;
    }
  }
  else
  {
    BOOL v53 = re::AssetProviderRegistry::registerAssetProvider(v50, (uint64_t *)&v143);
  }
  v54 = re::globalAllocators((re *)v53);
  uint64_t v55 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v54[2] + 32))(v54[2], 64, 64);
  *(_OWORD *)uint64_t v55 = 0u;
  *(_OWORD *)(v55 + 16) = 0u;
  *(_OWORD *)(v55 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(v55 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_DWORD *)(v55 + 44) = 0x7FFFFFFF;
  *(void *)(a1 + 123re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v55;
  id v56 = re::globalAllocators((re *)v55);
  uint64_t v57 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v56[2] + 32))(v56[2], 56, 8);
  long long v58 = re::NamedFileAssetProvider::NamedFileAssetProvider(v57, *(void *)(a1 + 1232), *(void *)(a1 + 1040), *(void *)(a1 + 1048), *(void *)(a1 + 1128));
  uint64_t v59 = *(void *)(a1 + 1224);
  *(void *)(a1 + 1224) = v58;
  if (v59)
  {

    long long v58 = *(_anonymous_namespace_ **)(a1 + 1224);
  }
  uint64_t v60 = *(os_unfair_lock_s **)(a1 + 1128);
  v142 = v58;
  if (v58)
  {
    uint64_t v61 = (char *)v58 + 8;
    uint64_t v62 = (uint64_t)v142;
    BOOL v63 = re::AssetProviderRegistry::registerAssetProvider(v60, (uint64_t *)&v142);
    if (v62)
    {

      v142 = 0;
    }
  }
  else
  {
    BOOL v63 = re::AssetProviderRegistry::registerAssetProvider(v60, (uint64_t *)&v142);
  }
  v64 = re::globalAllocators((re *)v63);
  v65 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v64[2] + 32))(v64[2], 48, 8);
  uint64_t v66 = re::NamedAssetProvider::NamedAssetProvider(v65, *(void *)(a1 + 1040), *(void *)(a1 + 1048), *(void *)(a1 + 1128));
  uint64_t v67 = *(void *)(a1 + 1216);
  *(void *)(a1 + 1216) = v66;
  if (v67)
  {

    uint64_t v66 = *(_anonymous_namespace_ **)(a1 + 1216);
  }
  uint64_t v68 = *(os_unfair_lock_s **)(a1 + 1128);
  v141 = v66;
  if (v66)
  {
    long long v69 = (char *)v66 + 8;
    uint64_t v70 = (uint64_t)v141;
    BOOL v71 = re::AssetProviderRegistry::registerAssetProvider(v68, (uint64_t *)&v141);
    if (v70)
    {

      v141 = 0;
    }
  }
  else
  {
    BOOL v71 = re::AssetProviderRegistry::registerAssetProvider(v68, (uint64_t *)&v141);
  }
  v72 = re::globalAllocators((re *)v71);
  uint64_t v73 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v72[2] + 32))(v72[2], 136, 8);
  *(_OWORD *)uint64_t v73 = 0u;
  *(_OWORD *)(v73 + 16) = 0u;
  *(_OWORD *)(v73 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(v73 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(v73 + 96) = 0u;
  *(_OWORD *)(v73 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(v73 + 64) = 0u;
  *(_OWORD *)(v73 + 80) = 0u;
  *(void *)(v73 + 12re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(v73 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v73 + 8;
  *(void *)(v73 + 16) = v73 + 8;
  *(_OWORD *)(v73 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(v73 + 40) = 0u;
  *(_OWORD *)(v73 + 24) = 0u;
  *(_DWORD *)(v73 + 6re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0x7FFFFFFF;
  *(_OWORD *)(v73 + 10re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_DWORD *)(v73 + 124) = 0x7FFFFFFF;
  *(void *)(a1 + 1176) = v73;
  re::RealityFileRegistry::init((void **)v73);
  v75 = re::globalAllocators(v74);
  uint64_t v76 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v75[2] + 32))(v75[2], 280, 8);
  uint64_t v77 = re::RealityFileAssetProvider::RealityFileAssetProvider(v76, *(void *)(a1 + 1176), *(void *)(a1 + 1040), *(void *)(a1 + 1128), *(void *)(a1 + 1232), *(void *)(a1 + 1240));
  uint64_t v78 = *(void *)(a1 + 1184);
  *(void *)(a1 + 1184) = v77;
  if (v78)
  {

    uint64_t v77 = *(void *)(a1 + 1184);
  }
  v79 = *(os_unfair_lock_s **)(a1 + 1128);
  uint64_t v140 = v77;
  if (v77)
  {
    id v80 = (id)(v77 + 8);
    uint64_t v81 = v140;
    BOOL v82 = re::AssetProviderRegistry::registerAssetProvider(v79, &v140);
    if (v81)
    {

      uint64_t v140 = 0;
    }
  }
  else
  {
    BOOL v82 = re::AssetProviderRegistry::registerAssetProvider(v79, &v140);
  }
  v83 = re::globalAllocators((re *)v82);
  v84 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v83[2] + 32))(v83[2], 48, 8);
  v85 = re::FileAssetProvider::FileAssetProvider(v84, *(void *)(a1 + 1040), *(void *)(a1 + 1048), *(void *)(a1 + 1128));
  uint64_t v86 = *(void *)(a1 + 1192);
  *(void *)(a1 + 119re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v85;
  if (v86)
  {

    v85 = *(_anonymous_namespace_ **)(a1 + 1192);
  }
  v87 = *(os_unfair_lock_s **)(a1 + 1128);
  v139 = v85;
  if (v85)
  {
    v88 = (char *)v85 + 8;
    uint64_t v89 = (uint64_t)v139;
    BOOL v90 = re::AssetProviderRegistry::registerAssetProvider(v87, (uint64_t *)&v139);
    if (v89)
    {

      v139 = 0;
    }
  }
  else
  {
    BOOL v90 = re::AssetProviderRegistry::registerAssetProvider(v87, (uint64_t *)&v139);
  }
  v91 = re::globalAllocators((re *)v90);
  v92 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v91[2] + 32))(v91[2], 48, 8);
  v93 = re::FallbackAssetProvider::FallbackAssetProvider(v92, *(void *)(a1 + 1040), *(void *)(a1 + 1048), *(void *)(a1 + 1128));
  uint64_t v94 = *(void *)(a1 + 1200);
  *(void *)(a1 + 1200) = v93;
  if (v94)
  {

    v93 = *(_anonymous_namespace_ **)(a1 + 1200);
  }
  v95 = *(os_unfair_lock_s **)(a1 + 1128);
  v138 = v93;
  if (v93)
  {
    v96 = (char *)v93 + 8;
    uint64_t v97 = (uint64_t)v138;
    BOOL v98 = re::AssetProviderRegistry::registerAssetProvider(v95, (uint64_t *)&v138);
    if (v97)
    {

      v138 = 0;
    }
  }
  else
  {
    BOOL v98 = re::AssetProviderRegistry::registerAssetProvider(v95, (uint64_t *)&v138);
  }
  v99 = re::globalAllocators((re *)v98);
  v100 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v99[2] + 32))(v99[2], 24, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v100, 0);
  void *v100 = &unk_26E6C9CD8;
  {
    re::introspect<re::DynamicString>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicString>::get(0, v133);
  }
  MemoryAssetProvider::s_loadDescriptorParametersIntrospect = re::introspect<re::DynamicString>(void)::info;
  v101 = *(os_unfair_lock_s **)(a1 + 1128);
  v137 = v100;
  v102 = v100 + 1;
  id v103 = v102;
  re::AssetProviderRegistry::registerAssetProvider(v101, (uint64_t *)&v137);

  v137 = 0;
  v105 = re::globalAllocators(v104);
  uint64_t v106 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v105[2] + 32))(v105[2], 24, 8);
  v107 = re::PeerAssetProvider::PeerAssetProvider((re::PeerAssetProvider *)v106);
  v108 = *(os_unfair_lock_s **)(a1 + 1128);
  v136 = v107;
  if (v107)
  {
    id v109 = (id)(v106 + 8);
    re::AssetProviderRegistry::registerAssetProvider(v108, (uint64_t *)&v136);

    v136 = 0;
  }
  else
  {
    re::AssetProviderRegistry::registerAssetProvider(v108, (uint64_t *)&v136);
  }
  re::MeshPrimitiveProvider::init(*(re::MeshPrimitiveProvider **)(a1 + 1128), *(re::AssetProviderRegistry **)(a1 + 1040), v110);
  v112 = re::globalAllocators(v111);
  v113 = (re::internal::AssetBackgroundLoader *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v112[2] + 32))(v112[2], 448, 64);
  v115 = re::internal::AssetBackgroundLoader::AssetBackgroundLoader(v113, v114);
  *(void *)(a1 + 103re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v115;
  v116 = (re *)re::internal::AssetBackgroundLoader::init((uint64_t)v115, *(void *)(a1 + 1040), a1 + 8, *(void *)(a1 + 1128), *(void *)(a1 + 1160), a1 + 16);
  if (*(void *)(a2 + 16))
  {
    v117 = re::globalAllocators(v116);
    uint64_t v118 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v117[2] + 32))(v117[2], 320, 64);
    *(_OWORD *)uint64_t v118 = 0u;
    *(_OWORD *)(v118 + 16) = 0u;
    *(_OWORD *)(v118 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
    *(_OWORD *)(v118 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
    *(_OWORD *)(v118 + 64) = 0u;
    *(_OWORD *)(v118 + 80) = 0u;
    *(_OWORD *)(v118 + 96) = 0u;
    *(_OWORD *)(v118 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
    *(_OWORD *)(v118 + 160) = 0u;
    *(_OWORD *)(v118 + 176) = 0u;
    *(_OWORD *)(v118 + 19re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
    *(_OWORD *)(v118 + 20re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
    *(_OWORD *)(v118 + 224) = 0u;
    *(_OWORD *)(v118 + 240) = 0u;
    *(_OWORD *)(v118 + 256) = 0u;
    *(_OWORD *)(v118 + 27re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
    *(_OWORD *)(v118 + 28re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
    *(_OWORD *)(v118 + 304) = 0u;
    *(_DWORD *)(v118 + 100) = 0x7FFFFFFF;
    *(_OWORD *)(v118 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
    *(_OWORD *)(v118 + 12re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
    *(_OWORD *)(v118 + 12re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
    *(_OWORD *)(v118 + 144) = 0u;
    *(void *)(v118 + 144) = 0x7FFFFFFF00000000;
    *(void *)(v118 + 23re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    *(void *)(v118 + 20re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(void *)(v118 + 216) = 0;
    *(void *)(v118 + 200) = 0;
    *(_DWORD *)(v118 + 224) = 0;
    *(void *)(a1 + 1056) = v118;
    uint64_t v119 = *(void *)(a2 + 16);
    {
      re::introspect<re::NetworkAssetSerializationService>(void)::info = re::introspect_NetworkAssetSerializationService(0);
    }
    uint64_t v120 = re::introspect<re::NetworkAssetSerializationService>(void)::info;
    re::StringID::invalid((re::StringID *)buf);
    uint64_t v121 = (*(uint64_t (**)(uint64_t, uint64_t, uint8_t *))(*(void *)v17 + 16))(v17, v120, buf);
    re::StringID::destroyString((re::StringID *)buf);
    v116 = (re *)re::internal::AssetNetworkLoader::init(v118, a1, v119, v121);
  }
  *(unsigned char *)(a1 + 1344) = *(unsigned char *)(a2 + 24);
  if (!*(void *)(a1 + 1064))
  {
LABEL_93:
    *(unsigned char *)(a1 + 704) = re::ServiceLocator::serviceOrNull<re::NetworkAssetService>(v17) != 0;
    v134[1] = 0;
    v134[2] = 0;
    v134[0] = 5;
    re::dispatch::Queue::make("com.apple.CoreRE.asset-manager-scheduler-queue", (int *)v134, (NSObject **)buf);
    v128 = (void **)(a1 + 1704);
    if ((uint8_t *)(a1 + 1704) != buf)
    {
      id v129 = *(id *)buf;
      *(void *)long long buf = 0;
      v130 = *v128;
      *v128 = v129;
    }
    v131 = dispatch_group_create();

    v132 = *(void **)(a1 + 1712);
    *(void *)(a1 + 171re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v131;

    operator new();
  }
  v122 = re::globalAllocators(v116);
  uint64_t v123 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v122[2] + 32))(v122[2], 88, 8);
  uint64_t v124 = *(void *)(a1 + 1064);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v123, 0);
  *(void *)uint64_t v123 = &unk_26E6CA5E0;
  *(_OWORD *)(v123 + 24) = 0u;
  *(_OWORD *)(v123 + 40) = 0u;
  *(_DWORD *)(v123 + 56) = 0;
  *(void *)(v123 + 60) = 0x7FFFFFFFLL;
  *(void *)(v123 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = a1;
  *(void *)(v123 + 80) = v124;
  uint64_t v125 = *(void *)(a1 + 656);
  *(void *)(a1 + 656) = v123;
  if (v125)
  {

    uint64_t v123 = *(void *)(a1 + 656);
    uint64_t v126 = *(void *)(a1 + 1064);
    uint64_t v135 = v123;
    if (!v123)
    {
LABEL_91:
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v126 + 104))(v126, &v135);
      if (v135)
      {

        uint64_t v135 = 0;
      }
      goto LABEL_93;
    }
  }
  else
  {
    uint64_t v126 = *(void *)(a1 + 1064);
    uint64_t v135 = v123;
  }
  id v127 = (id)(v123 + 8);
  goto LABEL_91;
}

uint64_t re::ServiceLocator::serviceOrNull<re::ResourceFetchService>(uint64_t a1)
{
  {
    re::introspect<re::ResourceFetchService>(void)::info = re::introspect_ResourceFetchService(0);
  }
  uint64_t v2 = re::introspect<re::ResourceFetchService>(void)::info;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

uint64_t re::ServiceLocator::serviceOrNull<re::NetworkAssetService>(uint64_t a1)
{
  {
    re::introspect<re::NetworkAssetService>(void)::info = re::introspect_NetworkAssetService(0);
  }
  uint64_t v2 = re::introspect<re::NetworkAssetService>(void)::info;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

uint64_t re::ServiceLocator::serviceOrNull<re::NetworkSendBlockingAssetLoadRequestService>(uint64_t a1)
{
  {
    re::introspect<re::NetworkSendBlockingAssetLoadRequestService>(void)::info = re::introspect_NetworkSendBlockingAssetLoadRequestService(0);
  }
  uint64_t v2 = re::introspect<re::NetworkSendBlockingAssetLoadRequestService>(void)::info;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

void re::AssetManager::deinit(re::AssetManager *this)
{
  uint64_t v180 = *MEMORY[0x263EF8340];
  atomic_store(1u, (unsigned __int8 *)this + 1345);
  uint64_t v2 = (re *)*((void *)this + 143);
  if (v2) {
    uint64_t v2 = (re *)(*(uint64_t (**)(re *, void))(*(void *)v2 + 208))(v2, 0);
  }
  uint64_t v3 = *((void *)this + 81);
  if (v3)
  {
    uint64_t v4 = re::globalAllocators(v2);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4[2] + 40))(v4[2], v3);
    *((void *)this + 81) = 0;
  }
  *((void *)this + 143) = 0;
  *((void *)this + 145) = 0;
  while (1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)this + 112);
    uint64_t v5 = *((void *)this + 59);
    os_unfair_lock_unlock((os_unfair_lock_t)this + 112);
    if (!v5) {
      break;
    }
    re::AssetManager::processDeferredPointerUnload((os_unfair_lock_s *)this);
  }
  *(void *)v179 = 0;
  *((void *)&v177 + 1) = 0;
  *(void *)&long long v178 = 0;
  DWORD2(v17re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  lock = (os_unfair_lock_s *)((char *)this + 64);
  os_unfair_lock_lock((os_unfair_lock_t)this + 16);
  unint64_t v6 = *((unsigned int *)this + 25);
  re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(&v177, v6);
  int v8 = ++DWORD2(v178);
  uint64_t v9 = *((unsigned int *)this + 26);
  if (v9)
  {
    uint64_t v10 = 0;
    uint8_t v11 = (int *)(*((void *)this + 11) + 8);
    while (1)
    {
      int v12 = *v11;
      v11 += 14;
      if (v12 < 0) {
        break;
      }
      if (v9 == ++v10)
      {
        LODWORD(v10) = *((_DWORD *)this + 26);
        break;
      }
    }
  }
  else
  {
    LODWORD(v10) = 0;
  }
  if (v9 != v10)
  {
    uint64_t v13 = v10;
    unsigned int v14 = *((_DWORD *)this + 26);
    do
    {
      uint64_t v15 = *(void *)(*((void *)this + 11) + 56 * v13 + 48);
      if (v15)
      {
        uint64_t v16 = (void *)(v15 + 8);
        uint64_t v17 = (_anonymous_namespace_ *)(id)(v15 + 8);
        uint64_t v18 = v178;
        if ((unint64_t)v178 >= *((void *)&v177 + 1))
        {
          unint64_t v19 = v178 + 1;
          if (*((void *)&v177 + 1) < (unint64_t)(v178 + 1))
          {
            if ((void)v177)
            {
              if (*((void *)&v177 + 1)) {
                unint64_t v20 = 2 * *((void *)&v177 + 1);
              }
              else {
                unint64_t v20 = 8;
              }
              if (v20 <= v19) {
                unint64_t v21 = v178 + 1;
              }
              else {
                unint64_t v21 = v20;
              }
              re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(&v177, v21);
              int v8 = DWORD2(v178);
            }
            else
            {
              re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(&v177, v19);
              int v8 = DWORD2(v178) + 1;
            }
          }
          uint64_t v18 = v178;
        }
        *(void *)(*(void *)v179 + 8 * v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v15;
        id v22 = v16;
        *(void *)&long long v178 = v18 + 1;
        DWORD2(v17re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = ++v8;

        unsigned int v14 = *((_DWORD *)this + 26);
      }
      if (v14 <= (int)v10 + 1) {
        unsigned int v23 = v10 + 1;
      }
      else {
        unsigned int v23 = v14;
      }
      while (1)
      {
        uint64_t v13 = (v10 + 1);
        if (v23 - 1 == v10) {
          break;
        }
        LODWORD(v10) = v10 + 1;
        unsigned int v24 = v13;
        if ((*(_DWORD *)(*((void *)this + 11) + 56 * v13 + 8) & 0x80000000) != 0) {
          goto LABEL_37;
        }
      }
      unsigned int v24 = v23;
LABEL_37:
      LODWORD(v10) = v24;
    }
    while (v9 != v24);
  }
  os_unfair_lock_unlock(lock);
  uint64_t v25 = *(void *)v179;
  if ((void)v178)
  {
    uint64_t v26 = 0;
    uint64_t v27 = 8 * v178;
    do
    {
      uint64_t v28 = *(void *)(v25 + v26);
      if (v28)
      {
        id v29 = (id)(v28 + 8);
        os_unfair_lock_lock((os_unfair_lock_t)(v28 + 384));
        uint64_t v30 = *(void *)(v28 + 400);
        if (v30 && !*(_DWORD *)(v30 + 16) && !*(void *)(v28 + 720)) {
          atomic_store(1u, (unsigned __int8 *)(*(void *)(v30 + 48) + 24));
        }
        os_unfair_lock_unlock((os_unfair_lock_t)(v28 + 384));
      }
      else
      {
        os_unfair_lock_lock((os_unfair_lock_t)0x180);
        if (MEMORY[0x190] && !*(_DWORD *)(MEMORY[0x190] + 16) && !MEMORY[0x2D0]) {
          atomic_store(1u, (unsigned __int8 *)(*(void *)(MEMORY[0x190] + 48) + 24));
        }
        os_unfair_lock_unlock((os_unfair_lock_t)0x180);
      }
      v26 += 8;
    }
    while (v27 != v26);
    uint64_t v31 = v177;
    if ((void)v177 && v25)
    {
      uint64_t v32 = v25;
      do
      {
        if (*(void *)v32)
        {

          *(void *)uint64_t v32 = 0;
        }
        v32 += 8;
        v27 -= 8;
      }
      while (v27);
      goto LABEL_61;
    }
  }
  else
  {
    uint64_t v31 = v177;
    if ((void)v177 && *(void *)v179) {
LABEL_61:
    }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 40))(v31, v25);
  }
  os_unfair_lock_lock((os_unfair_lock_t)this + 320);
  uint64_t v33 = *((void *)this + 163);
  os_unfair_lock_unlock((os_unfair_lock_t)this + 320);
  if (v33)
  {
    do
    {
      re::internal::AssetBackgroundLoader::waitForActiveLoadItemsToComplete(*((re::internal::AssetBackgroundLoader **)this
                                                                            + 129));
      *(void *)&long long v177 = &unk_26E6C9DD8;
      *((void *)&v177 + 1) = this;
      *(void *)&long long v178 = 0;
      *((void *)&v178 + 1) = &v177;
      re::runInLocalAutoreleasePool((uint64_t)&v177);
      std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](&v177);
      os_unfair_lock_lock((os_unfair_lock_t)this + 320);
      uint64_t v34 = *((void *)this + 163);
      os_unfair_lock_unlock((os_unfair_lock_t)this + 320);
    }
    while (v34);
  }
  if (!*((unsigned char *)this + 1346))
  {
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = ___ZN2re12AssetManager6deinitEv_block_invoke;
    block[3] = &__block_descriptor_tmp_0;
    block[4] = this;
    dispatch_sync(*((dispatch_queue_t *)this + 213), block);
    if (!*((void *)this + 104) || dispatch_get_specific((char *)this + 832) != (char *)this + 832) {
      dispatch_group_wait(*((dispatch_group_t *)this + 214), 0xFFFFFFFFFFFFFFFFLL);
    }
    long long v35 = (re::internal::AssetNetworkLoader *)*((void *)this + 132);
    if (v35)
    {
      int v36 = (re *)re::internal::AssetNetworkLoader::deinit(v35);
      uint64_t v37 = *((void *)this + 132);
      if (v37)
      {
        uint64_t v38 = re::globalAllocators(v36)[2];

        re::DynamicArray<re::internal::AssetNetworkLoader::SerializedAssetResponse>::deinit(v37 + 200);
        re::HashTable<re::DynamicString,re::internal::AssetNetworkLoader::FragmentedNetworkAsset,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v37 + 112));
        v39.n128_f64[0] = re::HashTable<re::DynamicString,re::internal::AssetNetworkLoader::PendingRequestedAsset,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v37 + 64));
        uint64_t v40 = *(void *)(v37 + 24);
        if (v40)
        {
          uint64_t v41 = *(void *)(v37 + 56);
          if (v41)
          {
            uint64_t v42 = *(void *)(v37 + 40);
            if (v42)
            {
              uint64_t v43 = v42 << 6;
              uint64_t v44 = (re::AssetHandle *)(v41 + 40);
              do
              {
                re::AssetHandle::~AssetHandle(v44);
                v39.n128_f64[0] = re::DynamicString::deinit((re::AssetHandle *)((char *)v44 - 32));
                uint64_t v44 = (re::AssetHandle *)((char *)v44 + 64);
                v43 -= 64;
              }
              while (v43);
              uint64_t v40 = *(void *)(v37 + 24);
              uint64_t v41 = *(void *)(v37 + 56);
            }
            (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)v40 + 40))(v40, v41, v39);
          }
          *(void *)(v37 + 56) = 0;
          *(void *)(v37 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
          *(void *)(v37 + 40) = 0;
          *(void *)(v37 + 24) = 0;
          ++*(_DWORD *)(v37 + 48);
        }
        (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)v38 + 40))(v38, v37, v39);
      }
      *((void *)this + 13re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    }
    uint64_t v45 = *((void *)this + 133);
    if (v45)
    {
      uint64_t v175 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v45 + 104))(v45, &v175);
      if (v175)
      {

        uint64_t v175 = 0;
      }
    }
    uint64_t v46 = *((void *)this + 82);
    if (v46)
    {

      *((void *)this + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    }
    os_unfair_lock_lock(lock);
    *((void *)this + 134) = 0;
    uint64_t v47 = *((void *)this + 5);
    *((void *)this + 5) = 0;
    if (v47)
    {
      uint64_t v48 = *((void *)this + 7);
      uint64_t v49 = 8 * v47;
      do
      {
        if (*(void *)v48)
        {

          *(void *)uint64_t v48 = 0;
        }
        v48 += 8;
        v49 -= 8;
      }
      while (v49);
    }
    int v163 = 0;
    int v50 = 0;
    unsigned int v160 = 0;
    uint64_t v51 = 0;
    ++*((_DWORD *)this + 12);
    *(_DWORD *)v179 = 0;
    long long v177 = 0u;
    long long v178 = 0u;
    *(void *)&v179[4] = 0x7FFFFFFFLL;
    v161 = (os_unfair_lock_s *)((char *)this + 576);
    do
    {
      v174 = 0;
      unint64_t v171 = 0;
      unint64_t v172 = 0;
      v170 = 0;
      int v173 = 0;
      uint64_t v52 = *((unsigned int *)this + 26);
      if (v52)
      {
        uint64_t v53 = 0;
        v54 = (int *)(*((void *)this + 11) + 8);
        while (1)
        {
          int v55 = *v54;
          v54 += 14;
          if (v55 < 0) {
            break;
          }
          if (v52 == ++v53)
          {
            LODWORD(v53) = *((_DWORD *)this + 26);
            break;
          }
        }
      }
      else
      {
        LODWORD(v53) = 0;
      }
      uint64_t v159 = v51;
      int v158 = v50;
      if (v52 == v53)
      {
        unint64_t v56 = 0;
        uint64_t v57 = 0;
      }
      else
      {
        int v58 = 0;
        int v164 = *((_DWORD *)this + 26);
        v165 = 0;
        unint64_t v56 = 0;
        uint64_t v59 = v53;
        do
        {
          uint64_t v60 = *((void *)this + 11) + 56 * v59;
          uint64_t v61 = *(void *)(v60 + 48);
          if (v61
            && !re::HashSetBase<re::internal::AssetEntry *,re::internal::AssetEntry *,re::internal::ValueAsKey<re::internal::AssetEntry *>,re::Hash<re::internal::AssetEntry *>,re::EqualTo<re::internal::AssetEntry *>,true,false>::contains((uint64_t)&v177, *(void *)(v60 + 48)))
          {
            uint64_t v62 = *(void *)(v61 + 288);
            if (!v62) {
              goto LABEL_108;
            }
            int v166 = v58;
            unint64_t v167 = v56;
            BOOL v63 = *(id **)(v61 + 304);
            uint64_t v64 = 8 * v62 - 8;
            char v65 = 1;
            do
            {
              id WeakRetained = objc_loadWeakRetained(v63);
              if (WeakRetained)
              {
                uint64_t v67 = WeakRetained;
                BOOL v68 = re::HashSetBase<re::internal::AssetEntry *,re::internal::AssetEntry *,re::internal::ValueAsKey<re::internal::AssetEntry *>,re::Hash<re::internal::AssetEntry *>,re::EqualTo<re::internal::AssetEntry *>,true,false>::contains((uint64_t)&v177, (unint64_t)WeakRetained - 8);
                BOOL v69 = !v68;
                v65 &= v68;

                if (v69) {
                  break;
                }
              }
              ++v63;
              uint64_t v70 = v64;
              v64 -= 8;
            }
            while (v70);
            LODWORD(v5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v164;
            unint64_t v56 = v167;
            int v58 = v166;
            if (v65)
            {
LABEL_108:
              re::AssetManager::unloadAssetAsync((uint64_t)this, v61, 0);
              re::internal::AssetEntry::removeFromAssetManager((os_unfair_lock_s *)v61);
              if (v56 >= v171)
              {
                unint64_t v73 = v56 + 1;
                if (v171 < v73)
                {
                  if (v170)
                  {
                    unint64_t v74 = 8;
                    if (v171) {
                      unint64_t v74 = 2 * v171;
                    }
                    if (v74 <= v73) {
                      unint64_t v75 = v73;
                    }
                    else {
                      unint64_t v75 = v74;
                    }
                    re::DynamicArray<float *>::setCapacity(&v170, v75);
                    int v58 = v173;
                  }
                  else
                  {
                    re::DynamicArray<float *>::setCapacity(&v170, v73);
                    int v58 = v173 + 1;
                  }
                }
                unint64_t v56 = v172;
                v72 = v174;
              }
              else
              {
                v72 = v165;
              }
              v165 = v72;
              v72[v56++] = v61;
              unint64_t v172 = v56;
              int v173 = ++v58;
            }
          }
          if (*((_DWORD *)this + 26) <= (v53 + 1)) {
            int v76 = v53 + 1;
          }
          else {
            int v76 = *((_DWORD *)this + 26);
          }
          while (1)
          {
            uint64_t v59 = (v53 + 1);
            if (v76 - 1 == v53) {
              break;
            }
            LODWORD(v53) = v53 + 1;
            int v77 = v59;
            if ((*(_DWORD *)(*((void *)this + 11) + 56 * v59 + 8) & 0x80000000) != 0) {
              goto LABEL_128;
            }
          }
          int v77 = v76;
LABEL_128:
          LODWORD(v53) = v77;
        }
        while (v52 != v77);
        uint64_t v57 = v174;
      }
      os_unfair_lock_unlock(lock);
      v169[0] = dispatch_time(0, 0);
      v169[1] = -1;
      v169[2] = -1;
      re::AssetManager::processUnreferencedUnloadRequests((uint64_t)this, (uint64_t)v169);
      re::AssetManager::waitForLoadQueueToComplete((uint64_t)this, 0);
      unint64_t v78 = v56;
      v79 = &v57[v56];
      v168 = v57;
      uint64_t v80 = v159;
      int v81 = v163;
      uint64_t v82 = v160;
      int v50 = v158;
      if (v78)
      {
        do
        {
          uint64_t v83 = *v57;
          unint64_t v84 = 0xBF58476D1CE4E5B9 * (*v57 ^ (*v57 >> 30));
          unint64_t v85 = (0x94D049BB133111EBLL * (v84 ^ (v84 >> 27))) ^ ((0x94D049BB133111EBLL * (v84 ^ (v84 >> 27))) >> 31);
          if (v80)
          {
            unint64_t v86 = v85 % v80;
            uint64_t v87 = *(unsigned int *)(*((void *)&v177 + 1) + 4 * v86);
            if (v87 != 0x7FFFFFFF)
            {
              while (*(void *)(v178 + 24 * v87 + 16) != v83)
              {
                LODWORD(v87) = *(_DWORD *)(v178 + 24 * v87 + 8) & 0x7FFFFFFF;
                if (v87 == 0x7FFFFFFF) {
                  goto LABEL_137;
                }
              }
              goto LABEL_143;
            }
          }
          else
          {
            unint64_t v86 = 0;
          }
LABEL_137:
          unsigned int v88 = *(_DWORD *)&v179[4];
          if (*(_DWORD *)&v179[4] == 0x7FFFFFFF)
          {
            int v89 = v82;
            if (v82 == v80)
            {
              re::HashSetBase<re::internal::AssetEntry *,re::internal::AssetEntry *,re::internal::ValueAsKey<re::internal::AssetEntry *>,re::Hash<re::internal::AssetEntry *>,re::EqualTo<re::internal::AssetEntry *>,true,false>::setCapacity((uint64_t)&v177, 2 * v81);
              uint64_t v80 = DWORD2(v178);
              int v81 = HIDWORD(v178);
              unint64_t v86 = v85 % DWORD2(v178);
              uint64_t v83 = *v57;
              int v89 = *(_DWORD *)v179;
              int v50 = *(_DWORD *)&v179[8];
            }
            uint64_t v90 = (v89 + 1);
            *(_DWORD *)v179 = v90;
            uint64_t v91 = v178;
            unsigned int v88 = v82;
            int v92 = *(_DWORD *)(v178 + 24 * v82 + 8);
          }
          else
          {
            uint64_t v91 = v178;
            int v92 = *(_DWORD *)(v178 + 24 * *(unsigned int *)&v179[4] + 8);
            *(_DWORD *)&v179[4] = v92 & 0x7FFFFFFF;
            uint64_t v90 = v82;
            LODWORD(v8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v88;
          }
          uint64_t v93 = v91 + 24 * v88;
          *(_DWORD *)(v93 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v92 | 0x80000000;
          uint64_t v94 = *((void *)&v177 + 1);
          *(_DWORD *)(v93 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*((void *)&v177 + 1) + 4 * v86) | 0x80000000;
          *(void *)uint64_t v93 = v85;
          *(void *)(v93 + 16) = v83;
          *(_DWORD *)(v94 + 4 * v86) = v82;
          ++v81;
          ++v50;
          HIDWORD(v17re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v81;
          *(_DWORD *)&v179[8] = v50;
          uint64_t v82 = v90;
LABEL_143:
          ++v57;
        }
        while (v57 != v79);
      }
      unsigned int v160 = v82;
      int v163 = v81;
      uint64_t v95 = v80;
      os_unfair_lock_lock(v161);
      uint64_t v96 = *((void *)this + 75);
      if (v96)
      {
        int v97 = 0;
        for (uint64_t i = 0; i != v96; ++i)
        {
          unint64_t v99 = (unint64_t)(i + *((void *)this + 76)) % *((void *)this + 74);
          uint64_t v100 = *((void *)this + 78);
          if (re::AssetLoadRequest::Data::tryStopRequest(*(os_unfair_lock_s **)(v100 + 8 * v99)))
          {
            uint64_t v101 = *(void *)(v100 + 8 * v99);
            if (*(void *)(v101 + 24)) {
              *(void *)(v101 + 24) = 0;
            }
          }
          else
          {
            int v97 = 1;
          }
        }
      }
      else
      {
        int v97 = 0;
      }
      os_unfair_lock_unlock(v161);
      os_unfair_lock_lock(lock);
      if (v170 && v168) {
        (*(void (**)(void))(*v170 + 40))();
      }
      uint64_t v51 = v95;
    }
    while (v163 != *((_DWORD *)this + 25) || v97);
    re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::deinit((uint64_t)this + 904);
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v177);
    uint64_t v102 = *((void *)this + 191);
    *((void *)this + 191) = 0;
    if (v102)
    {
      uint64_t v103 = *((void *)this + 193);
      uint64_t v104 = 40 * v102;
      do
      {
        re::FunctionBase<24ul,void ()(re::DynamicArray<unsigned long long>)>::destroyCallable(v103);
        v103 += 40;
        v104 -= 40;
      }
      while (v104);
    }
    ++*((_DWORD *)this + 384);
    os_unfair_lock_lock(v161);
    re::Queue<re::SharedPtr<re::AssetLoadRequest::Data>>::deinit((uint64_t *)this + 73);
    os_unfair_lock_unlock(v161);
    os_unfair_lock_lock((os_unfair_lock_t)this + 96);
    uint64_t v105 = *((void *)this + 51);
    if (v105)
    {
      uint64_t v106 = 32 * v105;
      v107 = (void *)(*((void *)this + 53) + 24);
      do
      {
        if (!*v107) {
          std::__throw_bad_function_call[abi:nn180100]();
        }
        (*(void (**)(void))(*(void *)*v107 + 48))(*v107);
        v107 += 4;
        v106 -= 32;
      }
      while (v106);
      uint64_t v108 = *((void *)this + 51);
      id v109 = (void *)*((void *)this + 53);
      *((void *)this + 51) = 0;
      if (v108)
      {
        uint64_t v110 = 32 * v108;
        do
        {
          id v109 = std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](v109) + 4;
          v110 -= 32;
        }
        while (v110);
      }
    }
    else
    {
      *((void *)this + 51) = 0;
    }
    ++*((_DWORD *)this + 104);
    os_unfair_lock_unlock((os_unfair_lock_t)this + 96);
    os_unfair_lock_lock((os_unfair_lock_t)this + 192);
    re::DynamicArray<re::NetworkActionQueue::Action>::clear((uint64_t)this + 776);
    os_unfair_lock_unlock((os_unfair_lock_t)this + 192);
    re::HashTable<re::DynamicString,re::SharedPtr<re::internal::AssetEntry>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 9);
    *((void *)this + 133) = 0;
    uint64_t v111 = *((void *)this + 150);
    if (v111)
    {

      *((void *)this + 150) = 0;
    }
    uint64_t v112 = *((void *)this + 149);
    if (v112)
    {

      *((void *)this + 149) = 0;
    }
    uint64_t v113 = *((void *)this + 148);
    if (v113)
    {

      *((void *)this + 14re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    }
    uint64_t v114 = *((void *)this + 147);
    v115 = (uint64_t *)(v114 + 8);
    re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v114 + 32));
    std::__list_imp<re::Pair<re::DynamicString,re::Pair<re::SharedPtr<re::RealityFile>,unsigned int,true>,true>>::clear(v115);
    uint64_t v117 = *((void *)this + 147);
    if (v117)
    {
      uint64_t v118 = re::globalAllocators(v116)[2];
      re::HashTable<unsigned long long,re::SharedPtr<re::RealityFile>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)(v117 + 88));
      re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v117 + 32));
      std::__list_imp<re::Pair<re::DynamicString,re::Pair<re::SharedPtr<re::RealityFile>,unsigned int,true>,true>>::clear((uint64_t *)(v117 + 8));

      (*(void (**)(uint64_t, uint64_t))(*(void *)v118 + 40))(v118, v117);
    }
    *((void *)this + 147) = 0;
    uint64_t v119 = *((void *)this + 153);
    if (v119)
    {

      *((void *)this + 153) = 0;
    }
    uint64_t v120 = (os_unfair_lock_s *)*((void *)this + 154);
    os_unfair_lock_lock(v120);
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)&v120[2]);
    os_unfair_lock_unlock(v120);
    uint64_t v122 = *((void *)this + 154);
    if (v122)
    {
      uint64_t v123 = re::globalAllocators(v121)[2];
      double v124 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v122 + 8));
      (*(void (**)(uint64_t, uint64_t, double))(*(void *)v123 + 40))(v123, v122, v124);
    }
    *((void *)this + 154) = 0;
    uint64_t v125 = *((void *)this + 152);
    if (v125)
    {

      *((void *)this + 15re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    }
    uint64_t v126 = *((void *)this + 142);
    if (v126)
    {

      *((void *)this + 14re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    }
    uint64_t v127 = *((void *)this + 146);
    if (v127)
    {

      *((void *)this + 146) = 0;
    }
    v128 = (os_unfair_lock_s *)*((void *)this + 155);
    os_unfair_lock_lock(v128);
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)&v128[2]);
    os_unfair_lock_unlock(v128);
    uint64_t v130 = *((void *)this + 155);
    if (v130)
    {
      uint64_t v131 = re::globalAllocators(v129)[2];
      double v132 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v130 + 8));
      (*(void (**)(uint64_t, uint64_t, double))(*(void *)v131 + 40))(v131, v130, v132);
    }
    *((void *)this + 155) = 0;
    re::DynamicArray<unsigned long>::deinit((uint64_t)this + 1288);
    v133 = (re *)dispatch_group_wait(*(dispatch_group_t *)(*((void *)this + 129) + 384), 0xFFFFFFFFFFFFFFFFLL);
    uint64_t v134 = *((void *)this + 129);
    if (v134)
    {
      uint64_t v135 = re::globalAllocators(v133)[2];

      uint64_t v136 = *(void *)(v134 + 264);
      if (v136)
      {
        if (*(void *)(v134 + 304)) {
          (*(void (**)(uint64_t))(*(void *)v136 + 40))(v136);
        }
        *(void *)(v134 + 304) = 0;
        *(_OWORD *)(v134 + 264) = 0u;
        *(_OWORD *)(v134 + 280) = 0u;
        *(_DWORD *)(v134 + 296) = 0;
      }
      uint64_t v137 = *(void *)(v134 + 200);
      if (v137)
      {
        if (*(void *)(v134 + 232)) {
          (*(void (**)(uint64_t))(*(void *)v137 + 40))(v137);
        }
        *(void *)(v134 + 23re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
        *(void *)(v134 + 20re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
        *(void *)(v134 + 216) = 0;
        *(void *)(v134 + 200) = 0;
        ++*(_DWORD *)(v134 + 224);
      }
      uint64_t v138 = *(void *)(v134 + 136);
      if (v138)
      {
        if (*(void *)(v134 + 176)) {
          (*(void (**)(uint64_t))(*(void *)v138 + 40))(v138);
        }
        *(void *)(v134 + 176) = 0;
        *(_OWORD *)(v134 + 136) = 0u;
        *(_OWORD *)(v134 + 15re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
        *(_DWORD *)(v134 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      }
      uint64_t v139 = *(void *)(v134 + 72);
      if (v139)
      {
        if (*(void *)(v134 + 112)) {
          (*(void (**)(uint64_t))(*(void *)v139 + 40))(v139);
        }
        *(void *)(v134 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
        *(_OWORD *)(v134 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
        *(_OWORD *)(v134 + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
        *(_DWORD *)(v134 + 104) = 0;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v135 + 40))(v135, v134);
    }
    *((void *)this + 129) = 0;
    uint64_t v140 = *((void *)this + 131);
    re::DynamicArray<std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>>::clear((uint64_t *)(v140 + 8));
    re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(v140 + 48);
    re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v140 + 48));
    uint64_t v142 = *((void *)this + 131);
    if (v142)
    {
      uint64_t v143 = re::globalAllocators(v141)[2];
      *(void *)uint64_t v142 = &unk_26E717650;
      v144.n128_f64[0] = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v142 + 48));
      uint64_t v145 = *(void *)(v142 + 8);
      if (v145)
      {
        v146 = *(uint64_t **)(v142 + 40);
        if (v146)
        {
          uint64_t v147 = *(void *)(v142 + 24);
          if (v147)
          {
            uint64_t v148 = 40 * v147;
            do
            {
              std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100](v146);
              v146 += 5;
              v148 -= 40;
            }
            while (v148);
            uint64_t v145 = *(void *)(v142 + 8);
            v146 = *(uint64_t **)(v142 + 40);
          }
          (*(void (**)(uint64_t, uint64_t *, __n128))(*(void *)v145 + 40))(v145, v146, v144);
        }
        *(void *)(v142 + 40) = 0;
        *(void *)(v142 + 16) = 0;
        *(void *)(v142 + 24) = 0;
        *(void *)(v142 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
        ++*(_DWORD *)(v142 + 32);
      }
      (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)v143 + 40))(v143, v142, v144);
    }
    *((void *)this + 131) = 0;
    uint64_t v149 = *((void *)this + 141);
    re::HashTable<re::DynamicString,re::SharedPtr<re::AssetProvider>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(v149 + 72);
    re::HashTable<re::DynamicString,re::SharedPtr<re::AssetProvider>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(v149 + 120);
    uint64_t v151 = *((void *)this + 141);
    if (v151)
    {
      uint64_t v152 = re::globalAllocators(v150)[2];
      re::HashTable<re::DynamicString,re::SharedPtr<re::internal::AssetEntry>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v151 + 120));
      double v153 = re::HashTable<re::DynamicString,re::SharedPtr<re::internal::AssetEntry>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v151 + 72));
      (*(void (**)(uint64_t, uint64_t, double))(*(void *)v152 + 40))(v152, v151, v153);
    }
    *((void *)this + 141) = 0;
    re::internal::AssetTypeRegistry::deinit(*((re::internal::AssetTypeRegistry **)this + 130));
    v155 = (re::internal::AssetTypeRegistry *)*((void *)this + 130);
    if (v155)
    {
      uint64_t v156 = re::globalAllocators(v154)[2];
      re::internal::AssetTypeRegistry::~AssetTypeRegistry(v155);
      (*(void (**)(uint64_t, re::internal::AssetTypeRegistry *))(*(void *)v156 + 40))(v156, v155);
    }
    *((void *)this + 130) = 0;
    v157 = (std::__shared_weak_count *)*((void *)this + 217);
    *((_OWORD *)this + 10re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
    if (v157) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v157);
    }
    re::internal::EngineQueueCheck::deinit((dispatch_queue_t *)this + 104);
    os_unfair_lock_unlock(lock);
  }
}

uint64_t re::AssetManager::processDeferredPointerUnload(os_unfair_lock_s *this)
{
  uint64_t v2 = this + 112;
  os_unfair_lock_lock(this + 112);
  uint64_t v3 = (_anonymous_namespace_ *)&this[114];
  id v22 = 0;
  uint64_t v23 = 0;
  uint64_t v19 = 0;
  long long v24 = 0u;
  long long v20 = 0u;
  uint64_t v26 = 0;
  int v21 = 1;
  int v25 = 1;
  re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)&v19, (uint64_t)&this[114]);
  re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)&this[114], (uint64_t)&v23);
  if (v23 && v26) {
    (*(void (**)(void))(*(void *)v23 + 40))();
  }
  os_unfair_lock_unlock(v2);
  if (*((void *)&v20 + 1))
  {
    uint64_t v26 = 0;
    long long v24 = 0uLL;
    uint64_t v23 = 0;
    int v25 = 0;
    uint64_t v4 = 8 * *((void *)&v20 + 1);
    uint64_t v5 = v22;
    do
    {
      uint64_t v27 = *v5;
      uint64_t v6 = v27;
      unsigned int v7 = *(_DWORD *)(v27 + 240) + 1;
      *(_DWORD *)(v27 + 240) = v7;
      if (v7 < 2)
      {
        re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)&v23, &v27);
      }
      else
      {
        re::AssetManager::internalUnloadSharedAssetPointer((re::AssetManager *)this, *(void **)v6, (const re::ExistingAssetInformation *)(v6 + 8), *(const re::AssetType **)(v6 + 232));
        uint64_t v9 = re::globalAllocators(v8)[2];
        re::DynamicString::deinit((re::DynamicString *)(v6 + 200));
        re::DynamicString::deinit((re::DynamicString *)(v6 + 168));
        re::DynamicString::deinit((re::DynamicString *)(v6 + 136));
        re::DynamicString::deinit((re::DynamicString *)(v6 + 104));
        re::DynamicString::deinit((re::DynamicString *)(v6 + 48));
        double v10 = re::DynamicString::deinit((re::DynamicString *)(v6 + 16));
        (*(void (**)(uint64_t, uint64_t, double))(*(void *)v9 + 40))(v9, v6, v10);
      }
      ++v5;
      v4 -= 8;
    }
    while (v4);
    os_unfair_lock_lock(v2);
    uint64_t v11 = *((void *)&v24 + 1);
    unint64_t v12 = *((void *)&v24 + 1) + *(void *)&this[118]._os_unfair_lock_opaque;
    if (*(void *)&this[116]._os_unfair_lock_opaque < v12) {
      re::DynamicArray<float *>::setCapacity(&this[114]._os_unfair_lock_opaque, v12);
    }
    uint64_t v13 = v26;
    if (v11)
    {
      uint64_t v14 = 8 * v11;
      uint64_t v15 = v26;
      do
      {
        uint64_t v16 = *v15++;
        uint64_t v27 = v16;
        re::DynamicArray<re::RigDataValue *>::add(v3, &v27);
        v14 -= 8;
      }
      while (v14);
    }
    os_unfair_lock_unlock(v2);
    if (v23) {
      BOOL v17 = v13 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    if (!v17) {
      (*(void (**)(void))(*(void *)v23 + 40))();
    }
  }
  uint64_t result = v19;
  if (v19)
  {
    if (v22) {
      return (*(uint64_t (**)(void))(*(void *)v19 + 40))();
    }
  }
  return result;
}

uint64_t ___ZN2re12AssetManager6deinitEv_block_invoke(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 1346) = 1;
  return result;
}

BOOL re::HashSetBase<re::internal::AssetEntry *,re::internal::AssetEntry *,re::internal::ValueAsKey<re::internal::AssetEntry *>,re::Hash<re::internal::AssetEntry *>,re::EqualTo<re::internal::AssetEntry *>,true,false>::contains(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 24);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((v3 ^ (v3 >> 31)) % v2));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(void *)(v6 + 24 * v4 + 16) == a2) {
    return 1;
  }
  do
  {
    LODWORD(v4) = *(_DWORD *)(v6 + 24 * v4 + 8) & 0x7FFFFFFF;
    BOOL result = v4 != 0x7FFFFFFF;
  }
  while (v4 != 0x7FFFFFFF && *(void *)(v6 + 24 * v4 + 16) != a2);
  return result;
}

void re::AssetManager::unloadAssetAsync(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = (os_unfair_lock_s *)(a2 + 384);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 384));
  unsigned int v8 = atomic_load((unsigned int *)(a2 + 704));
  if (v8 != 3)
  {
    if (v8 == 2)
    {
      unsigned __int8 v13 = atomic_load((unsigned __int8 *)(a1 + 1345));
      if ((v13 & 1) == 0 && !*(unsigned char *)(a1 + 1346)) {
        dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 520));
      }
    }
    else
    {
      if (v8 != 1) {
        goto LABEL_23;
      }
      unsigned __int8 v9 = atomic_load((unsigned __int8 *)(a1 + 1345));
      if ((v9 & 1) == 0 && !*(unsigned char *)(a1 + 1346)) {
        dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 520));
      }
      if (!*(unsigned char *)(a2 + 416))
      {
        if (*(unsigned char *)(a2 + 417))
        {
          uint64_t v10 = *(void *)(a2 + 400);
          if (v10)
          {
            *(_DWORD *)(v10 + 16) = 1;
            *(void *)(a2 + 400) = 0;
          }
          re::AssetManager::putEntryInFailedState_entryStateLocked(v11, a2, 302, (uint64_t)v14);
          if (*(void *)&v14[0])
          {
            if (BYTE8(v14[0])) {
              (*(void (**)(void))(**(void **)&v14[0] + 40))();
            }
            memset(v14, 0, sizeof(v14));
          }
        }
        else
        {
          re::AssetManager::cancelLoadingAsset_entryStateLocked((os_unfair_lock_s *)a1, (re::internal::AssetEntry *)a2, a3);
        }
        goto LABEL_23;
      }
    }
    re::AssetManager::unloadAssetEntry_entryStateLocked((os_unfair_lock_s *)a1, (re::internal::AssetEntry *)a2, a3);
    goto LABEL_23;
  }
  unsigned __int8 v12 = atomic_load((unsigned __int8 *)(a1 + 1345));
  if ((v12 & 1) == 0 && !*(unsigned char *)(a1 + 1346)) {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 520));
  }
  re::internal::AssetEntry::LoadState::clearLoadFailure_locked((re::internal::AssetEntry::LoadState *)(a2 + 704));
LABEL_23:
  os_unfair_lock_unlock(v6);
}

uint64_t re::AssetManager::processUnreferencedUnloadRequests(uint64_t a1, uint64_t a2)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  atomic_load((unsigned __int8 *)(a1 + 1345));
  from = 0;
  long long v39 = 0uLL;
  uint64_t v38 = 0;
  int v40 = 0;
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 896);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 896));
  uint64_t v5 = (_anonymous_namespace_ *)(a1 + 904);
  if (*(void *)(a1 + 920))
  {
    memset(v51, 0, 24);
    uint64_t v38 = 0;
    long long v39 = 0u;
    *(void *)&long long v52 = 0;
    from = 0;
    int v40 = 1;
    DWORD2(v51[1]) = 1;
    re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)&v38, a1 + 904);
    re::DynamicArray<re::internal::DeferredUnregister *>::operator=(a1 + 904, (uint64_t)v51);
    uint64_t v6 = (_anonymous_namespace_ *)re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::deinit((uint64_t)v51);
    re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::setCapacity((void *)(a1 + 904), 0x20uLL);
    ++*(_DWORD *)(a1 + 928);
  }
  lock = v4;
  os_unfair_lock_unlock(v4);
  uint64_t v37 = 0;
  v34[1] = 0;
  uint64_t v35 = 0;
  v34[0] = 0;
  int v36 = 0;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  while (*((void *)&v39 + 1))
  {
    if (dispatch_time(0, 0) >= *(void *)(a2 + 8)) {
      break;
    }
    id to = 0;
    objc_moveWeak(&to, from);
    uint64_t v7 = *((void *)&v39 + 1);
    if (*((void *)&v39 + 1) != 1)
    {
      if (!*((void *)&v39 + 1))
      {
        uint64_t v42 = 0;
        long long v53 = 0u;
        long long v54 = 0u;
        long long v52 = 0u;
        memset(v51, 0, sizeof(v51));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v43 = 136315906;
        uint64_t v44 = "removeAt";
        __int16 v45 = 1024;
        int v46 = 931;
        __int16 v47 = 2048;
        uint64_t v48 = 0;
        __int16 v49 = 2048;
        uint64_t v50 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      unsigned int v8 = from;
      unsigned __int8 v9 = &from[*((void *)&v39 + 1) - 1];
      if (v9 != from)
      {
        objc_destroyWeak(from);
        *unsigned int v8 = 0;
        objc_moveWeak(v8, v9);
        uint64_t v7 = *((void *)&v39 + 1);
      }
    }
    uint64_t v10 = &from[v7];
    objc_destroyWeak(v10 - 1);
    *(v10 - 1) = 0;
    --*((void *)&v39 + 1);
    ++v40;
    uint64_t v11 = (id *)objc_loadWeakRetained(&to);
    if (v11)
    {
      unsigned __int8 v12 = v11;
      id WeakRetained = objc_loadWeakRetained(v11 + 103);
      if (WeakRetained)
      {
      }
      else if (v12[2])
      {
        re::AssetManager::unloadAssetAsync(a1, (uint64_t)(v12 - 1), 0);
        re::internal::AssetEntry::removeFromAssetManager((os_unfair_lock_s *)v12 - 2);
        if ((unint64_t)v12[16]) {
          uint64_t v15 = (const char *)v12[17];
        }
        else {
          uint64_t v15 = (char *)v12 + 129;
        }
        unint64_t v16 = re::Hash<re::DynamicString>::operator()((uint64_t)&v43, (uint64_t)v51);
        if (*(void *)(a1 + 72))
        {
          unint64_t v17 = v16 % *(unsigned int *)(a1 + 96);
          uint64_t v18 = *(void *)(a1 + 80);
          uint64_t v19 = *(unsigned int *)(v18 + 4 * v17);
          if (v19 != 0x7FFFFFFF)
          {
            uint64_t v20 = *(void *)(a1 + 88);
            if (re::DynamicString::operator==(v20 + 56 * v19 + 16, (uint64_t)v51))
            {
              *(_DWORD *)(v18 + 4 * v17) = *(_DWORD *)(v20 + 56 * v19 + 8) & 0x7FFFFFFF;
LABEL_26:
              re::HashTable<re::DynamicString,re::SharedPtr<re::internal::AssetEntry>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(*(void *)(a1 + 88) + 56 * v19);
              *(_DWORD *)(*(void *)(a1 + 88) + 56 * v19 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 88) + 56 * v19 + 8) & 0x80000000 | *(_DWORD *)(a1 + 108);
              --*(_DWORD *)(a1 + 100);
              int v22 = *(_DWORD *)(a1 + 112) + 1;
              *(_DWORD *)(a1 + 10re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v19;
              *(_DWORD *)(a1 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v22;
            }
            else
            {
              while (1)
              {
                uint64_t v21 = v19;
                uint64_t v19 = *(_DWORD *)(v20 + 56 * v19 + 8) & 0x7FFFFFFF;
                if (v19 == 0x7FFFFFFF) {
                  break;
                }
                if (re::DynamicString::operator==(v20 + 56 * v19 + 16, (uint64_t)v51))
                {
                  *(_DWORD *)(v20 + 56 * v21 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(v20 + 56 * v21 + 8) & 0x80000000 | *(_DWORD *)(v20 + 56 * v19 + 8) & 0x7FFFFFFF;
                  goto LABEL_26;
                }
              }
            }
          }
        }
        if (*(void *)&v51[0] && (BYTE8(v51[0]) & 1) != 0) {
          (*(void (**)(void))(**(void **)&v51[0] + 40))();
        }
        if (*((_DWORD *)v12 + 28) == 8)
        {
          unint64_t v23 = (unint64_t)v12[13];
          if (v23 + 1 >= 2) {
            re::internal::AssetIdLoadDescriptorTable::remove((re::internal::AssetIdLoadDescriptorTable *)(a1 + 120), v23);
          }
        }
        if ((unint64_t)v12[13] + 1 >= 2)
        {
          *(void *)&v51[0] = v12[13];
          re::DynamicArray<re::TransitionCondition *>::add(v34, v51);
        }
      }
    }
    objc_destroyWeak(&to);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  if (v35)
  {
    long long v24 = v37;
    uint64_t v25 = 8 * v35;
    do
    {
      uint64_t v26 = *v24;
      uint64_t v27 = *(void *)(a1 + 1144);
      if (v27) {
        (*(void (**)(uint64_t, void))(*(void *)v27 + 8))(v27, *v24);
      }
      uint64_t v28 = *(void *)(a1 + 1072);
      if (v28 && *(unsigned char *)(a1 + 1380)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v28 + 32))(v28, v26);
      }
      ++v24;
      v25 -= 8;
    }
    while (v25);
  }
  if (*((void *)&v39 + 1))
  {
    os_unfair_lock_lock(lock);
    if (*((void *)&v39 + 1))
    {
      id v29 = from;
      uint64_t v30 = 8 * *((void *)&v39 + 1);
      do
      {
        re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::add(v5, v29++);
        v30 -= 8;
      }
      while (v30);
    }
    os_unfair_lock_unlock(lock);
  }
  if (v34[0] && v37) {
    (*(void (**)(void))(*(void *)v34[0] + 40))();
  }
  return re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::deinit((uint64_t)&v38);
}

void re::AssetManager::waitForLoadQueueToComplete(uint64_t a1, int a2)
{
  v7[4] = *MEMORY[0x263EF8340];
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)(a1 + 1345));
  if ((v4 & 1) == 0 && !*(unsigned char *)(a1 + 1346))
  {
    if (a2 == 1)
    {
      dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 520));
    }
    else if (!a2)
    {
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 520));
    }
  }
  while (1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1280));
    uint64_t v5 = *(void *)(a1 + 1304);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1280));
    if (!v5)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
      uint64_t v6 = *(void *)(a1 + 280);
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
      if (!v6 && !*(void *)(a1 + 40)) {
        break;
      }
    }
    re::internal::AssetBackgroundLoader::waitForActiveLoadItemsToComplete(*(re::internal::AssetBackgroundLoader **)(a1 + 1032));
    if (a2)
    {
      usleep(0x3E8u);
    }
    else
    {
      v7[0] = &unk_26E6C9DD8;
      v7[1] = a1;
      v7[2] = 0;
      v7[3] = v7;
      re::runInLocalAutoreleasePool((uint64_t)v7);
      std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](v7);
    }
  }
}

uint64_t re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    unint64_t v3 = *(id **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 8 * v4;
        do
        {
          objc_destroyWeak(v3);
          *v3++ = 0;
          v5 -= 8;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        unint64_t v3 = *(id **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, id *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

double re::HashTable<re::DynamicString,re::SharedPtr<re::internal::AssetEntry>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::SharedPtr<re::internal::AssetEntry>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 56;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::AssetManager::assertOnEngineQueue(re::AssetManager *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 1345);
  if ((v1 & 1) == 0 && !*((unsigned char *)this + 1346)) {
    dispatch_assert_queue_V2(*((dispatch_queue_t *)this + 65));
  }
}

void re::AssetManager::updateLoadRequests(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 640));
  if (v2)
  {
    atomic_store(0, (unsigned __int8 *)(a1 + 640));
    atomic_load((unsigned __int8 *)(a1 + 1345));
    uint64_t v5 = (os_unfair_lock_s *)(a1 + 576);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 576));
    uint64_t v6 = *(void *)(a1 + 600);
    if (v6)
    {
      while (1)
      {
        if (dispatch_time(0, 0) >= *(void *)(a2 + 8))
        {
          atomic_store(1u, (unsigned __int8 *)(a1 + 640));
          goto LABEL_16;
        }
        uint64_t v8 = *(void *)(a1 + 600);
        if (!v8) {
          break;
        }
        uint64_t v9 = *(void *)(a1 + 624);
        uint64_t v10 = *(void *)(a1 + 608);
        uint64_t v11 = *(void *)(v9 + 8 * v10);
        *(void *)(v9 + 8 * v10) = 0;
        if ((unint64_t)(v10 + 1) < *(void *)(a1 + 592)) {
          uint64_t v12 = v10 + 1;
        }
        else {
          uint64_t v12 = 0;
        }
        *(void *)(a1 + 60re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
        *(void *)(a1 + 600) = v8 - 1;
        ++*(_DWORD *)(a1 + 616);
        os_unfair_lock_lock((os_unfair_lock_t)(v11 + 192));
        int v13 = *(unsigned __int8 *)(v11 + 355);
        os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 192));
        if (v13)
        {
        }
        else
        {
          os_unfair_lock_unlock(v5);
          re::AssetLoadRequest::Data::update((os_unfair_lock_s *)v11);
          os_unfair_lock_lock(v5);
          uint64_t v14 = *(void *)(a1 + 600);
          unint64_t v15 = v14 + 1;
          unint64_t v16 = *(void *)(a1 + 592);
          if (v14 + 1 >= v16)
          {
            re::Queue<re::SharedPtr<re::AssetLoadRequest::Data>>::growCapacity((void *)(a1 + 584), v15);
            uint64_t v14 = *(void *)(a1 + 600);
            unint64_t v16 = *(void *)(a1 + 592);
            unint64_t v15 = v14 + 1;
          }
          *(void *)(*(void *)(a1 + 624) + 8 * ((*(void *)(a1 + 608) + v14) % v16)) = v11;
          *(void *)(a1 + 600) = v15;
          ++*(_DWORD *)(a1 + 616);
        }
        if (!--v6) {
          goto LABEL_16;
        }
      }
      re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Queue<T> is empty", "m_size > 0", "dequeue", 569);
      _os_crash();
      __break(1u);
    }
    else
    {
LABEL_16:
      os_unfair_lock_unlock(v5);
    }
  }
}

uint64_t re::AssetManager::afterFrameUpdate(re::AssetManager *this)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 176);
  v3.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v3.__d_.__rep_;
  if (v2)
  {
    if (*((unsigned char *)this + 1424))
    {
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v5 = *((void *)this + 177);
    }
    else
    {
      *((unsigned char *)this + 1424) = 1;
      *((std::chrono::steady_clock::time_point *)this + 177) = v3;
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v5 = v3.__d_.__rep_;
    }
    uint64_t v6 = v3.__d_.__rep_ - v5;
    if (v3.__d_.__rep_ - v5 >= 1000000000)
    {
      uint64_t v8 = *((unsigned int *)this + 374);
      if (v8)
      {
        uint64_t v9 = 0;
        uint64_t v10 = (int *)(*((void *)this + 185) + 8);
        while (1)
        {
          int v11 = *v10;
          v10 += 10;
          if (v11 < 0) {
            break;
          }
          if (v8 == ++v9)
          {
            LODWORD(v9) = *((_DWORD *)this + 374);
            break;
          }
        }
      }
      else
      {
        LODWORD(v9) = 0;
      }
      if (v8 != v9)
      {
        uint64_t v12 = v9;
        do
        {
          re::DynamicString::format((re::DynamicString *)"Registering Entries[%s]: num: %zu, time spent: %0.1f ms\n", (re::DynamicString *)buf, **(void **)(*((void *)this + 185) + 40 * v12 + 16), *(void *)(*((void *)this + 185) + 40 * v12 + 24), (float)((float)*(unint64_t *)(*((void *)this + 185) + 40 * v12 + 32) / 1000000.0));
          uint64_t v13 = buf[8] & 1;
          if (buf[8]) {
            uint64_t v14 = *(const char **)&buf[16];
          }
          else {
            uint64_t v14 = &buf[9];
          }
          if (buf[8]) {
            size_t v15 = *(void *)&buf[8] >> 1;
          }
          else {
            size_t v15 = buf[8] >> 1;
          }
          re::DynamicString::append((re::DynamicString *)&v28, v14, v15);
          uint64_t v7 = *(re **)buf;
          if (*(void *)buf && v13) {
            uint64_t v7 = (re *)(*(uint64_t (**)(void))(**(void **)buf + 40))();
          }
          unsigned int v16 = *((_DWORD *)this + 374);
          if (v16 <= (int)v9 + 1) {
            int v17 = v9 + 1;
          }
          else {
            int v17 = *((_DWORD *)this + 374);
          }
          while (1)
          {
            uint64_t v12 = (v9 + 1);
            if (v17 - 1 == v9) {
              break;
            }
            LODWORD(v9) = v9 + 1;
            int v18 = v12;
            if ((*(_DWORD *)(*((void *)this + 185) + 40 * v12 + 8) & 0x80000000) != 0) {
              goto LABEL_33;
            }
          }
          int v18 = v17;
LABEL_33:
          LODWORD(v9) = v18;
        }
        while (v16 != v18);
      }
      uint64_t v19 = *re::assetsLogObjects(v7);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v20 = *((void *)this + 176);
        double v21 = (float)((float)*((unint64_t *)this + 173) / 1000000.0);
        uint64_t v22 = *((void *)this + 179);
        double v23 = (float)((float)*((unint64_t *)this + 180) / 1000000.0);
        uint64_t v24 = *((void *)this + 181);
        unint64_t v25 = *((void *)this + 182);
        *(_DWORD *)long long buf = 134219778;
        *(void *)&uint8_t buf[4] = v20;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(double *)&buf[14] = (float)((float)v6 / 1000000000.0);
        *(_WORD *)&buf[22] = 2048;
        double v32 = v21;
        __int16 v33 = 2048;
        uint64_t v34 = v22;
        __int16 v35 = 2048;
        double v36 = v23;
        uint64_t v26 = v30;
        __int16 v37 = 2048;
        uint64_t v38 = v24;
        if (v29) {
          uint64_t v26 = *(unsigned char **)&v30[7];
        }
        __int16 v39 = 2048;
        double v40 = (float)((float)v25 / 1000000.0);
        __int16 v41 = 2080;
        uint64_t v42 = v26;
        _os_log_impl(&dword_233120000, v19, OS_LOG_TYPE_DEFAULT, "Asset Manager is overloaded: Asset Manager update timed out %zu times in the last %0.1f seconds (deadline is %0.1f ms).  Asset loading may be slower than usual due to increased load. Showing stats for timed out updates only:\nProcessed load items: %zu, time spent: %0.1f ms\nProcessed Resource Requests: %zu, time spent: %0.1f ms\n%s", buf, 0x52u);
      }
      if (!*((unsigned char *)this + 1424)) {
        *((unsigned char *)this + 1424) = 1;
      }
      *((void *)this + 177) = rep;
      *((void *)this + 176) = 0;
      *(_OWORD *)((char *)this + 143re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
      *(_OWORD *)((char *)this + 144re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
      re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::clear((uint64_t)this + 1464);
      if (v28 && (v29 & 1) != 0) {
        (*(void (**)(void))(*(void *)v28 + 40))();
      }
    }
  }
  else
  {
    if (!*((unsigned char *)this + 1424)) {
      *((unsigned char *)this + 1424) = 1;
    }
    *((std::chrono::steady_clock::time_point *)this + 177) = v3;
  }
  return re::AssetManager::processDeferredPointerUnload((os_unfair_lock_s *)this);
}

void re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_245, 4 * v2);
    }
    uint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 40 * v3;
      do
      {
        uint64_t v6 = *(void *)(a1 + 16) + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0) {
          *(_DWORD *)(v6 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7 & 0x7FFFFFFF;
        }
        v4 += 40;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    int v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

_anonymous_namespace_ *re::DynamicArray<re::SharedPtr<re::AssetLoadRequest>>::add(_anonymous_namespace_ *result, uint64_t *a2)
{
  uint64_t v3 = result;
  unint64_t v5 = *((void *)result + 1);
  unint64_t v4 = *((void *)result + 2);
  if (v4 >= v5)
  {
    unint64_t v6 = v4 + 1;
    if (v5 < v4 + 1)
    {
      if (*(void *)result)
      {
        unint64_t v7 = 2 * v5;
        if (!v5) {
          unint64_t v7 = 8;
        }
        if (v7 <= v6) {
          unint64_t v8 = v6;
        }
        else {
          unint64_t v8 = v7;
        }
        double result = (_anonymous_namespace_ *)re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(result, v8);
      }
      else
      {
        double result = (_anonymous_namespace_ *)re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    unint64_t v4 = *((void *)v3 + 2);
  }
  uint64_t v9 = *a2;
  *(void *)(*((void *)v3 + 4) + 8 * v4) = *a2;
  if (v9)
  {
    double result = (_anonymous_namespace_ *)(id)(v9 + 8);
    unint64_t v4 = *((void *)v3 + 2);
  }
  *((void *)v3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void re::AssetManager::loadNow(re::AssetManager *this, re::internal::AssetEntry *a2, int a3)
{
  if (a3)
  {
    int v5 = 1;
  }
  else
  {
    unsigned __int8 v6 = atomic_load((unsigned __int8 *)this + 1345);
    if ((v6 & 1) == 0 && !*((unsigned char *)this + 1346)) {
      dispatch_assert_queue_V2(*((dispatch_queue_t *)this + 65));
    }
    int v5 = 0;
  }
  re::AssetManager::makeLoadRequest(this, &v9);
  unint64_t v7 = v9;
  re::AssetHandle::AssetHandle((re::AssetHandle *)v8, a2);
  re::AssetLoadRequest::addAsset((re::AssetLoadRequest::Data **)v7, (const re::AssetHandle *)v8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  re::AssetLoadRequest::Data::waitForCompletion(*((void *)v7 + 3), v5);
}

void re::AssetManager::makeLoadRequest(re::AssetManager *this@<X0>, re::AssetLoadRequest **a2@<X8>)
{
  re::AssetLoadRequest::makeAssetLoadRequest(this, a2);
  unint64_t v4 = *a2;
  uint64_t v5 = *((void *)v4 + 3);
  unint64_t v4 = (re::AssetLoadRequest *)((char *)v4 + 24);
  *(void *)(v5 + 24) = this;
  unsigned __int8 v6 = (char *)v4 - 16;
  os_unfair_lock_lock((os_unfair_lock_t)this + 144);
  re::Queue<re::SharedPtr<re::AssetLoadRequest::Data>>::enqueue((void *)this + 73, (uint64_t *)v4);
  os_unfair_lock_unlock((os_unfair_lock_t)this + 144);

  if (*((void *)this + 104) && dispatch_get_specific((char *)this + 832) == (char *)this + 832)
  {
    re::AssetManager::updateScheduler(this);
  }
  else
  {
    dispatch_group_enter(*((dispatch_group_t *)this + 214));
    uint64_t v7 = *((void *)this + 216);
    unint64_t v8 = (std::__shared_weak_count *)*((void *)this + 217);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    v9[0] = MEMORY[0x263EF8330];
    v9[1] = 1174405120;
    v9[2] = ___ZN2re12AssetManager15makeLoadRequestEv_block_invoke;
    v9[3] = &__block_descriptor_tmp_66_0;
    v9[4] = v7;
    uint64_t v10 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    dispatch_async(*((dispatch_queue_t *)this + 65), v9);
    if (v10) {
      std::__shared_weak_count::__release_weak(v10);
    }
    if (v8) {
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void re::AssetManager::updateScheduler(re::AssetManager *this)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)this + 1345);
  if ((v2 & 1) == 0 && !*((unsigned char *)this + 1346)) {
    dispatch_assert_queue_V2(*((dispatch_queue_t *)this + 65));
  }
  if (*((void *)this + 208))
  {
    BOOL v3 = *((unsigned __int8 *)this + 1688) == 3;
    os_unfair_lock_lock((os_unfair_lock_t)this + 144);
    uint64_t v4 = *((void *)this + 75);
    os_unfair_lock_unlock((os_unfair_lock_t)this + 144);
    if (((v3 ^ (v4 == 0)) & 1) == 0)
    {
      if (v4) {
        char v5 = 3;
      }
      else {
        char v5 = 4;
      }
      *((unsigned char *)this + 168re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v5;
      *((unsigned char *)this + 1689) = 1;
      *((_DWORD *)this + 423) = 1023969417;
      *((unsigned char *)this + 1696) = 0;
      unint64_t v6 = *((void *)this + 209);
      if (v6 != -1) {
        re::Scheduler::setTaskOptions(*((re::Scheduler **)this + 208), v6, (float *)this + 422);
      }
      unint64_t v7 = *((void *)this + 210);
      if (v7 != -1) {
        re::Scheduler::setTaskOptions(*((re::Scheduler **)this + 208), v7, (float *)this + 422);
      }
    }
    if (v4 && !*((unsigned char *)this + 1720))
    {
      dispatch_group_enter(*((dispatch_group_t *)this + 214));
      *((_WORD *)this + 860) = 257;
      uint64_t v8 = *((void *)this + 216);
      uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 217);
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      dispatch_time_t v10 = dispatch_time(0, 13000000);
      v11[0] = MEMORY[0x263EF8330];
      v11[1] = 1174405120;
      _OWORD v11[2] = ___ZN2re12AssetManager15updateSchedulerEv_block_invoke;
      v11[3] = &__block_descriptor_tmp_15_4;
      v11[4] = v8;
      uint64_t v12 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      dispatch_after(v10, *((dispatch_queue_t *)this + 65), v11);
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN2re12AssetManager15updateSchedulerEv_block_invoke(uint64_t a1)
{
  unsigned __int8 v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    BOOL v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)(a1 + 32);
      if (v5)
      {
        *(unsigned char *)(v5 + 17re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0;
        v6[0] = MEMORY[0x263EF8330];
        v6[1] = 1174405120;
        v6[2] = ___ZN2re12AssetManager15updateSchedulerEv_block_invoke_2;
        v6[3] = &__block_descriptor_tmp_14_3;
        v6[4] = v5;
        unint64_t v7 = v3;
        atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
        dispatch_sync(*(dispatch_queue_t *)(v5 + 1704), v6);
        dispatch_group_leave(*(dispatch_group_t *)(v5 + 1712));
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v7);
        }
      }
      std::__shared_weak_count::__release_shared[abi:nn180100](v4);
    }
  }
}

void *___ZN2re12AssetManager15updateSchedulerEv_block_invoke_2(void *result)
{
  v2[4] = *MEMORY[0x263EF8340];
  uint64_t v1 = result[4];
  if (!*(unsigned char *)(v1 + 1346))
  {
    if (*(unsigned char *)(v1 + 1721))
    {
      v2[0] = &unk_26E6C9DD8;
      v2[1] = v1;
      v2[2] = 257;
      v2[3] = v2;
      re::runInLocalAutoreleasePool((uint64_t)v2);
      return std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](v2);
    }
  }
  return result;
}

uint64_t __copy_helper_block_8_32c45_ZTSNSt3__110shared_ptrIN2re12AssetManagerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_8_32c45_ZTSNSt3__110shared_ptrIN2re12AssetManagerEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v1);
  }
}

uint64_t __copy_helper_block_8_32c42_ZTSNSt3__18weak_ptrIN2re12AssetManagerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_8_32c42_ZTSNSt3__18weak_ptrIN2re12AssetManagerEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t re::AssetManager::canShareAssetOverNetwork(os_unfair_lock_s *this, const re::AssetHandle *a2)
{
  uint64_t v4 = this + 16;
  os_unfair_lock_lock(this + 16);
  uint64_t v5 = *((void *)re::AssetHandle::assetInfo(a2) + 10);
  if (v5 == -1) {
    uint64_t v5 = 0;
  }
  uint64_t v10 = v5;
  uint64_t v6 = re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)&this[30], &v10);
  os_unfair_lock_unlock(v4);
  unint64_t v7 = (os_unfair_lock_s *)(*((void *)a2 + 1) + 384);
  os_unfair_lock_lock(v7);
  int v8 = *(_DWORD *)(*((void *)a2 + 1) + 420);
  os_unfair_lock_unlock(v7);
  return re::AssetManager::canShareAssetOverNetwork((os_unfair_lock_s **)this, a2, v6, v8);
}

uint64_t re::AssetManager::canShareAssetOverNetwork(os_unfair_lock_s **a1, re::AssetHandle *a2, uint64_t a3, int a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (!a3)
  {
    uint64_t v12 = *re::assetsLogObjects((re *)a1);
    BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v13) {
      return result;
    }
    uint64_t v14 = *((void *)re::AssetHandle::assetInfo(a2) + 10);
    if (v14 == -1) {
      uint64_t v14 = 0;
    }
    int v15 = 134217984;
    uint64_t v16 = v14;
    _os_log_impl(&dword_233120000, v12, OS_LOG_TYPE_DEFAULT, "Cannot share assetId:%llu over the network, cannot find entry in the asset tables (asset was probably unloaded).", (uint8_t *)&v15, 0xCu);
    return 0;
  }
  if (a4 == 2) {
    return 0;
  }
  if (a4) {
    return 1;
  }
  uint64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return 1;
  }
  uint64_t v6 = *(void *)(a3 + 32);
  uint64_t v7 = 144 * v4;
  while (1)
  {
    int v8 = (*(void *)(v6 + 8) & 1) != 0 ? *(const char **)(v6 + 16) : (const char *)(v6 + 9);
    uint64_t result = strcmp(v8, "NetworkAsset");
    if (!result) {
      break;
    }
    uint64_t ProviderForScheme = re::AssetProviderRegistry::tryGetProviderForScheme(a1[141], v8);
    if (ProviderForScheme
      && ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)ProviderForScheme + 96))(ProviderForScheme, v6, 13) & 1) != 0)
    {
      return 0;
    }
    v6 += 144;
    v7 -= 144;
    if (!v7) {
      return 1;
    }
  }
  return result;
}

uint64_t re::AssetLoadDescriptor::getIntrospectableData<re::RealityFileAssetLoadDescriptorParameters>(re::AssetLoadDescriptor *a1, re::DynamicString **a2, re::Allocator *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = &qword_268772000;
  {
    uint64_t v12 = a1;
    int v11 = a3;
    uint64_t v5 = &qword_268772000;
    uint64_t v4 = a2;
    a3 = v11;
    int v9 = v8;
    a1 = v12;
    if (v9)
    {
      re::introspect<re::RealityFileAssetLoadDescriptorParameters>(void)::info = re::introspect_RealityFileAssetLoadDescriptorParameters(0);
      uint64_t v5 = &qword_268772000;
      a1 = v12;
      uint64_t v4 = a2;
      a3 = v11;
    }
  }
  uint64_t v6 = (re **)v5[464];
  return re::AssetLoadDescriptor::getIntrospectableData(a1, v6, v4, a3);
}

re::AssetLoadDescriptor *re::AssetLoadDescriptor::AssetLoadDescriptor(re::AssetLoadDescriptor *this, const re::AssetLoadDescriptor *a2)
{
  uint64_t v4 = re::DynamicString::DynamicString(this, a2);
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)v4 + 32, (uint64_t *)a2 + 4);
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)this + 72, (uint64_t *)a2 + 9);
  re::DynamicString::DynamicString((re::AssetLoadDescriptor *)((char *)this + 112), (const re::AssetLoadDescriptor *)((char *)a2 + 112));
  return this;
}

re::DynamicString *re::DynamicArray<re::AssetLoadDescriptor>::add(_anonymous_namespace_ *this, re::DynamicString *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::AssetLoadDescriptor>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 144 * v4;
  re::DynamicString::DynamicString((re::DynamicString *)v5, a2);
  re::DynamicArray<BOOL>::DynamicArray(v5 + 32, (uint64_t *)a2 + 4);
  re::DynamicArray<BOOL>::DynamicArray(v5 + 72, (uint64_t *)a2 + 9);
  uint64_t result = re::DynamicString::DynamicString((re::DynamicString *)(v5 + 112), (re::DynamicString *)((char *)a2 + 112));
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::AssetLoadDescriptor::~AssetLoadDescriptor(re::AssetLoadDescriptor *this)
{
}

void *re::AssetManager::convertToLoadDescriptor@<X0>(void *this@<X0>, const re::AssetPath *a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v4 = this;
  switch(*(_DWORD *)a2)
  {
    case 0:
    case 8:
      *a3 = 0;
      return this;
    case 2:
      uint64_t ProviderForScheme = this[146];
      if (ProviderForScheme) {
        goto LABEL_31;
      }
      goto LABEL_34;
    case 3:
      uint64_t v7 = (os_unfair_lock_s *)this[141];
      int v8 = "MemoryAsset";
      goto LABEL_30;
    case 4:
      uint64_t v7 = (os_unfair_lock_s *)this[141];
      int v8 = "PeerAsset";
      goto LABEL_30;
    case 5:
      uint64_t ProviderForScheme = this[149];
      if (!ProviderForScheme) {
        goto LABEL_34;
      }
      goto LABEL_31;
    case 6:
      int v9 = (const re::AssetPath *)((char *)a2 + 8);
      uint64_t v10 = (const re::AssetPath *)((char *)a2 + 40);
      int v11 = (const char *)**((void **)a2 + 9);
      re::AssetProviderRegistry::makeDescriptorForResolver(v9, v10, (const re::DynamicString *)&v14, (uint64_t)&v16);
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      v12.n128_f64[0] = re::Optional<re::AssetLoadDescriptor>::Optional((uint64_t)a3, (uint64_t)&v16);
      if ((void)v28)
      {
        if (BYTE8(v28)) {
          (*(void (**)(double))(*(void *)v28 + 40))(v12.n128_f64[0]);
        }
        __n128 v12 = 0uLL;
        long long v28 = 0u;
        long long v29 = 0u;
      }
      if (v23)
      {
        if (v27) {
          (*(void (**)(__n128))(*(void *)v23 + 40))(v12);
        }
        uint64_t v27 = 0;
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        uint64_t v23 = 0;
        ++v26;
      }
      if (v18)
      {
        if (v22) {
          (*(void (**)(__n128))(*(void *)v18 + 40))(v12);
        }
        uint64_t v22 = 0;
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        uint64_t v18 = 0;
        ++v21;
      }
      this = v16;
      if (v16 && (v17 & 1) != 0) {
        return (void *)(*(uint64_t (**)(__n128))(*v16 + 40))(v12);
      }
      return this;
    case 9:
      uint64_t v7 = (os_unfair_lock_s *)this[141];
      if (*((void *)a2 + 2)) {
        int v8 = (const char *)*((void *)a2 + 3);
      }
      else {
        int v8 = (char *)a2 + 17;
      }
LABEL_30:
      uint64_t ProviderForScheme = re::AssetProviderRegistry::tryGetProviderForScheme(v7, v8);
      if (!ProviderForScheme) {
        goto LABEL_34;
      }
LABEL_31:
      this = (void *)(*(uint64_t (**)(uint64_t, const re::AssetPath *))(*(void *)ProviderForScheme + 112))(ProviderForScheme, a2);
      if (!*a3)
      {
        re::Optional<re::AssetLoadDescriptor>::~Optional(a3);
LABEL_34:
        BOOL v13 = *(uint64_t (**)(void))(*(void *)v4[150] + 112);
        return (void *)v13();
      }
      return this;
    default:
      goto LABEL_34;
  }
}

__n128 re::AssetManager::convertToAssetPath@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(os_unfair_lock_s **)(a1 + 1128);
  uint64_t v6 = a2 + 9;
  if (*(void *)(a2 + 8)) {
    uint64_t v7 = *(const char **)(a2 + 16);
  }
  else {
    uint64_t v7 = (const char *)(a2 + 9);
  }
  uint64_t ProviderForScheme = re::AssetProviderRegistry::tryGetProviderForScheme(v5, v7);
  if (ProviderForScheme)
  {
    int v9 = *(void (**)(void))(*(void *)ProviderForScheme + 104);
    v9();
  }
  else
  {
    if (*(void *)(a2 + 8)) {
      uint64_t v11 = *(void *)(a2 + 16);
    }
    else {
      uint64_t v11 = v6;
    }
    re::DynamicString::format((re::DynamicString *)"Unsupported AssetLoadDescriptor type '%s'", (re::DynamicString *)&v14, v11);
    __n128 result = v14;
    uint64_t v12 = v15;
    uint64_t v13 = v16;
    *(unsigned char *)a3 = 0;
    *(__n128 *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = result;
    *(void *)(a3 + 24) = v12;
    *(void *)(a3 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v13;
  }
  return result;
}

uint64_t re::AssetManager::testingGetAssetPathString@<X0>(re::AssetManager *this@<X0>, const re::AssetLoadDescriptor *a2@<X1>, unsigned char *a3@<X8>)
{
  re::AssetManager::convertToAssetPath((uint64_t)this, (uint64_t)a2, (uint64_t)v5);
  if (v5[0])
  {
    *a3 = 1;
    re::DynamicString::DynamicString((re::DynamicString *)(a3 + 8), (const re::DynamicString *)&v6);
  }
  else
  {
    *a3 = 0;
  }
  uint64_t result = v6;
  if (v6)
  {
    if (v7) {
      return (*(uint64_t (**)(void))(*(void *)v6 + 40))();
    }
  }
  return result;
}

void re::AssetManager::tryGetImmutableRealityFileAsset(re::AssetManager *this@<X0>, const re::DynamicString *a2@<X1>, const re::DynamicString *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (os_unfair_lock_s *)((char *)this + 64);
  os_unfair_lock_lock((os_unfair_lock_t)this + 16);
  uint64_t v7 = *((unsigned int *)this + 50);
  long long v28 = v6;
  uint64_t v8 = 0;
  if (v7)
  {
    int v9 = (int *)(*((void *)this + 23) + 8);
    while (1)
    {
      int v10 = *v9;
      v9 += 42;
      if (v10 < 0) {
        break;
      }
      if (v7 == ++v8)
      {
        LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *((_DWORD *)this + 50);
        break;
      }
    }
  }
  if (!*((_DWORD *)this + 49))
  {
LABEL_46:
    int v26 = v28;
    *(unsigned char *)a4 = 0;
    goto LABEL_47;
  }
  unsigned int v11 = 0;
  uint64_t v12 = v8;
  long long v29 = (re::DynamicString *)&v35;
  while (1)
  {
    uint64_t v13 = *((void *)this + 23);
    __n128 v14 = (void *)(v13 + 168 * v12);
    uint64_t v15 = (v14[3] & 1) != 0 ? (const char *)v14[4] : (char *)v14 + 25;
    uint64_t v16 = (_anonymous_namespace_ *)strcmp(v15, "RealityFileAsset");
    if (!v16) {
      break;
    }
LABEL_42:
    ++v11;
    unsigned int v25 = v12 + 1;
    do
    {
      uint64_t v12 = v25;
      if (v25 >= v7) {
        break;
      }
      ++v25;
    }
    while ((*(_DWORD *)(*((void *)this + 23) + 168 * v12 + 8) & 0x80000000) == 0);
    if (v11 >= *((_DWORD *)this + 49)) {
      goto LABEL_46;
    }
  }
  memset(v39, 0, sizeof(v39));
  char v17 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v39, 0);
  long long v40 = 0u;
  long long v41 = 0u;
  uint64_t v18 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v40, 0);
  long long v42 = 0u;
  long long v43 = 0u;
  re::DynamicString::setCapacity(&v42, 0);
  char v44 = 0;
  uint64_t v45 = 1;
  if (!re::AssetLoadDescriptor::getIntrospectableData<re::RealityFileAssetLoadDescriptorParameters>((re::AssetLoadDescriptor *)(v14 + 2), &v38, 0))goto LABEL_30; {
  uint64_t v20 = (BYTE8(v42) & 1) != 0 ? (const char *)v43 : (char *)&v42 + 9;
  }
  int v21 = (*((void *)a3 + 1) & 1) != 0 ? (const char *)*((void *)a3 + 2) : (char *)a3 + 9;
  if (strcmp(v20, v21)) {
    goto LABEL_30;
  }
  re::RealityFileAssetProvider::getFileName(*((re::RealityFileAssetProvider **)this + 148), (uint64_t)v34);
  uint64_t v22 = (re::DynamicString *)&v35;
  if (!v34[0])
  {
LABEL_29:
    v19.n128_f64[0] = re::DynamicString::deinit(v22);
    goto LABEL_30;
  }
  if (v36[8]) {
    uint64_t v23 = *(const char **)&v37[7];
  }
  else {
    uint64_t v23 = v37;
  }
  if (*((void *)a2 + 1)) {
    uint64_t v24 = (const char *)*((void *)a2 + 2);
  }
  else {
    uint64_t v24 = (char *)a2 + 9;
  }
  if (strcmp(v23, v24))
  {
    uint64_t v22 = (re::DynamicString *)v36;
    if (v35) {
      goto LABEL_29;
    }
LABEL_30:
    if ((void)v42)
    {
      if (BYTE8(v42)) {
        (*(void (**)(__n128))(*(void *)v42 + 40))(v19);
      }
      __n128 v19 = 0uLL;
      long long v42 = 0u;
      long long v43 = 0u;
    }
    if ((void)v40)
    {
      if (BYTE8(v40)) {
        (*(void (**)(__n128))(*(void *)v40 + 40))(v19);
      }
      __n128 v19 = 0uLL;
      long long v40 = 0u;
      long long v41 = 0u;
    }
    if (v39[0] && (v39[1] & 1) != 0) {
      (*(void (**)(__n128))(*(void *)v39[0] + 40))(v19);
    }
    LODWORD(v7) = *((_DWORD *)this + 50);
    goto LABEL_42;
  }
  re::AssetManager::assetHandleFromId_assetTablesLocked(this, (const re::DynamicString *)(v13 + 168 * v12 + 128), *(void *)(*((void *)this + 23) + 168 * v12 + 160), (uint64_t *)&v32);
  *(unsigned char *)a4 = 1;
  *(_OWORD *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v32;
  long long v32 = 0uLL;
  *(void *)(a4 + 24) = v33;
  uint64_t v33 = 0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v32);
  if (!v34[0] || (long long v29 = (re::DynamicString *)v36, v35)) {
    v27.n128_f64[0] = re::DynamicString::deinit(v29);
  }
  int v26 = v28;
  if ((void)v42)
  {
    if (BYTE8(v42)) {
      (*(void (**)(__n128))(*(void *)v42 + 40))(v27);
    }
    __n128 v27 = 0uLL;
    long long v42 = 0u;
    long long v43 = 0u;
  }
  if ((void)v40)
  {
    if (BYTE8(v40)) {
      (*(void (**)(__n128))(*(void *)v40 + 40))(v27);
    }
    __n128 v27 = 0uLL;
    long long v40 = 0u;
    long long v41 = 0u;
  }
  if (v39[0] && (v39[1] & 1) != 0) {
    (*(void (**)(__n128))(*(void *)v39[0] + 40))(v27);
  }
LABEL_47:
  os_unfair_lock_unlock(v26);
}

uint64_t *re::AssetManager::assetHandleFromId_assetTablesLocked@<X0>(re::AssetManager *this@<X0>, const re::DynamicString *a2@<X2>, uint64_t a3@<X1>, uint64_t *a4@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  unint64_t v8 = *((void *)a2 + 1);
  if (v8) {
    unint64_t v9 = v8 >> 1;
  }
  else {
    unint64_t v9 = v8 >> 1;
  }
  size_t v10 = v9 + 39;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  unint64_t v21 = 0;
  re::DynamicString::setCapacity(&v20, v10);
  re::DynamicString::append((re::DynamicString *)&v20, "assetId:", 8uLL);
  snprintf(__str, 0x16uLL, "%llu", a3);
  size_t v11 = strlen(__str);
  re::DynamicString::append((re::DynamicString *)&v20, __str, v11);
  re::DynamicString::append((re::DynamicString *)&v20, ".compiled", 9uLL);
  if (v21) {
    unint64_t v12 = v21 >> 1;
  }
  else {
    unint64_t v12 = v21 >> 1;
  }
  if (*((void *)a2 + 1)) {
    uint64_t v13 = (const char *)*((void *)a2 + 2);
  }
  else {
    uint64_t v13 = (char *)a2 + 9;
  }
  size_t v14 = strlen(v13);
  re::DynamicString::append((re::DynamicString *)&v20, v13, v14);
  while (1)
  {
    unint64_t v15 = v21 >> 1;
    if (v21) {
      unint64_t v15 = v21 >> 1;
    }
    if (v12 >= v15) {
      break;
    }
    uint64_t v16 = (char *)re::DynamicString::operator[]((uint64_t)&v20, v12);
    char v17 = __tolower(*v16);
    *(unsigned char *)re::DynamicString::operator[]((uint64_t)&v20, v12++) = v17;
  }
  if (v21) {
    uint64_t v18 = v22;
  }
  else {
    uint64_t v18 = (char *)&v21 + 1;
  }
  re::AssetManager::assetHandle(this, v18, 0, 0, a4);
  uint64_t result = v20;
  if (v20)
  {
    if (v21) {
      return (uint64_t *)(*(uint64_t (**)(void))(*v20 + 40))();
    }
  }
  return result;
}

os_unfair_lock_s *re::AssetManager::assetHandle@<X0>(os_unfair_lock_s *result@<X0>, const re::AssetPath *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  if (!*(_DWORD *)a2)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return result;
  }
  uint64_t v7 = result;
  re::AssetManager::convertToLoadDescriptor(result, a2, v9);
  if (v9[0])
  {
    if (!a3)
    {
      re::AssetManager::assetHandle_assetTablesLocked((re::AssetManager *)v7, (const re::AssetLoadDescriptor *)v10);
      return (os_unfair_lock_s *)re::Optional<re::AssetLoadDescriptor>::~Optional(v9);
    }
    unint64_t v8 = v7 + 16;
    os_unfair_lock_lock(v7 + 16);
    re::AssetManager::assetHandle_assetTablesLocked((re::AssetManager *)v7, (const re::AssetLoadDescriptor *)v10);
  }
  else
  {
    if (!a3)
    {
      re::AssetManager::getOrAddAssetEntry_assetTablesLocked((_anonymous_namespace_ *)v7, a2, 0, 0, a4);
      return (os_unfair_lock_s *)re::Optional<re::AssetLoadDescriptor>::~Optional(v9);
    }
    unint64_t v8 = v7 + 16;
    os_unfair_lock_lock(v7 + 16);
    re::AssetManager::getOrAddAssetEntry_assetTablesLocked((_anonymous_namespace_ *)v7, a2, 0, 0, a4);
  }
  os_unfair_lock_unlock(v8);
  return (os_unfair_lock_s *)re::Optional<re::AssetLoadDescriptor>::~Optional(v9);
}

uint64_t re::AssetManager::assetHandle_assetTablesLocked@<X0>(re::AssetManager *this@<X0>, const re::AssetLoadDescriptor *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = (uint64_t *)re::HashTable<re::AssetLoadDescriptor,unsigned long long,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::tryGet((uint64_t)this + 168, (uint64_t)a2);
  if (v6)
  {
    uint64_t v7 = *v6;
    return re::AssetManager::assetHandle_assetTablesLocked(this, a2, v7, a3);
  }
  else
  {
    if (*((void *)a2 + 1)) {
      unint64_t v9 = (const char *)*((void *)a2 + 2);
    }
    else {
      unint64_t v9 = (char *)a2 + 9;
    }
    if (!strcmp(v9, "NetworkAsset"))
    {
      re::AssetLoadDescriptor::getIntrospectableData<re::NetworkAssetLoadDescriptorParameters>(a2, (re::DynamicString **)v11, 0);
      unint64_t v10 = v11[0];
    }
    else
    {
      uuid_generate_random((unsigned __int8 *)v11);
      unint64_t v10 = (v11[1] + (v11[0] << 6) + (v11[0] >> 2) - 0x61C8864680B583E9) ^ v11[0];
    }
    return re::AssetManager::assetHandle_assetTablesLocked(this, a2, v10, a3);
  }
}

void re::AssetManager::assetHandle(os_unfair_lock_s *this@<X0>, const re::AssetLoadDescriptor *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = this + 16;
  os_unfair_lock_lock(this + 16);
  re::AssetManager::assetHandle_assetTablesLocked((re::AssetManager *)this, a2, a3);
  os_unfair_lock_unlock(v6);
}

uint64_t re::AssetManager::getOrAddAssetEntry_assetTablesLocked@<X0>(_anonymous_namespace_ *a1@<X0>, re::DynamicString *a2@<X1>, char a3@<W2>, _anonymous_namespace_ *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10 = (uint64_t)a1 + 72;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  re::DynamicString::setCapacity(&v29, 0);
  re::AssetPath::fullAssetPath(a2, (re::DynamicString *)&v29);
  size_t v11 = (re::internal::AssetEntry **)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(v10, (uint64_t)&v29);
  if (v11)
  {
    re::AssetHandle::AssetHandle(a5, *v11);
  }
  else
  {
    re::internal::AssetEntry::makeAssetEntry(a4, &v28);
    unint64_t v27 = 0;
    re::AssetPath::getAssetId(a2, &v27);
    unint64_t v25 = v27;
    uint64_t v12 = re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)a1 + 120, (uint64_t *)&v25);
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)(v12 + 32);
      uint64_t v15 = *(void *)(v14 + 8);
      uint64_t v16 = *(const char **)(v14 + 16);
      char v17 = (const char *)(v14 + 9);
      if (v15) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = v17;
      }
      BOOL v19 = strcmp(v18, "MemoryAsset") == 0;
      uint64_t v20 = (os_unfair_lock_s *)v28;
      *(unsigned char *)(v28 + 31re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v19;
      re::AssetManager::assignInitialMetadata((uint64_t)a1, v20, v13);
    }
    else
    {
      uint64_t v20 = (os_unfair_lock_s *)v28;
    }
    re::internal::AssetEntry::addToAssetManager_assetTablesLocked((re::internal::AssetEntry *)v20, a1, a2, a3);
    if (v30) {
      uint64_t v22 = v31;
    }
    else {
      uint64_t v22 = (char *)&v30 + 1;
    }
    uint64_t v23 = (re::internal::AssetEntry **)re::HashTable<re::DynamicString,re::SharedPtr<re::internal::AssetEntry>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::SharedPtr<re::internal::AssetEntry>&>(v10, (const re::DynamicString *)&v25, &v28);
    re::AssetHandle::AssetHandle(a5, *v23);
    if (v25 && (v26 & 1) != 0) {
      (*(void (**)(void))(*(void *)v25 + 40))();
    }
    if (v20) {
  }
    }
  uint64_t result = (uint64_t)v29;
  if (v29)
  {
    if (v30) {
      return (*(uint64_t (**)(void))(*v29 + 40))();
    }
  }
  return result;
}

os_unfair_lock_s *re::AssetManager::assetHandle@<X0>(os_unfair_lock_s *this@<X0>, const re::AssetPath *a2@<X1>, uint64_t *a3@<X8>)
{
  return re::AssetManager::assetHandle(this, a2, 1, a3);
}

unsigned char *re::AssetManager::assetHandle@<X0>(re::AssetManager *a1@<X0>, char *a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  unint64_t v9 = re::AssetManager::parseAssetPath(a1, a2, 0, a4, (uint64_t)v13);
  if (v13[0])
  {
    re::AssetManager::assetHandle((os_unfair_lock_s *)a1, (const re::AssetPath *)v14, a3, a5);
  }
  else
  {
    uint64_t v10 = *re::assetsLogObjects((re *)v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      if (v14[24]) {
        uint64_t v12 = *(unsigned char **)&v15[7];
      }
      else {
        uint64_t v12 = v15;
      }
      *(_DWORD *)long long buf = 136315394;
      char v17 = a2;
      __int16 v18 = 2080;
      BOOL v19 = v12;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "asset string '%s' parse failed: %s", buf, 0x16u);
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
  return re::Result<re::AssetPath,re::DetailedError>::~Result(v13);
}

uint64_t *re::AssetManager::parseAssetPath@<X0>(re::AssetManager *this@<X0>, char *a2@<X1>, const re::AssetPath *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  int v33 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v35 = 0;
  uint64_t v10 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v34, 0);
  *((void *)&v38 + 1) = 0;
  long long v39 = 0uLL;
  re::DynamicString::setCapacity(&v38, 0);
  uint64_t v40 = 0;
  re::AssetPath::parse((re::AssetPath *)&v33, a2, a3, *((const re::internal::AssetTypeRegistry **)this + 130), *((os_unfair_lock_s **)this + 141), v29);
  if (!v29[0])
  {
    *(_OWORD *)long long buf = v30;
    re::DynamicString::DynamicString((re::DynamicString *)&buf[16], (const re::DynamicString *)&v31);
    *(unsigned char *)a5 = 0;
    *(_OWORD *)(a5 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_OWORD *)buf;
    uint64_t v21 = v42[0];
    *(void *)(a5 + 24) = *(void *)&buf[16];
    *(void *)(a5 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v21;
    *(_OWORD *)(a5 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *(_OWORD *)&buf[24];
    goto LABEL_16;
  }
  if (!a4 || !*((unsigned char *)this + 512)) {
    goto LABEL_14;
  }
  unint64_t v27 = 0;
  uint64_t v28 = 0;
  unint64_t v25 = v34;
  uint64_t v26 = 0;
  re::DynamicString::setCapacity(&v25, 0);
  re::AssetPath::fullAssetPath((re::DynamicString *)&v33, (re::DynamicString *)&v25);
  if (v26) {
    size_t v11 = v27;
  }
  else {
    size_t v11 = (char *)&v26 + 1;
  }
  uint64_t v12 = (re *)re::AssetManager::remapDeserializedAssetPath(this, v11);
  if (!v12) {
    goto LABEL_12;
  }
  uint64_t v13 = (char *)v12;
  uint64_t v14 = *re::assetsLogObjects(v12);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    if (v26) {
      uint64_t v24 = v27;
    }
    else {
      uint64_t v24 = (char *)&v26 + 1;
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v24;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v13;
  }
  re::AssetPath::parse((re::AssetPath *)&v33, v13, 0, *((const re::internal::AssetTypeRegistry **)this + 130), *((os_unfair_lock_s **)this + 141), buf);
  re::Result<re::Unit,re::DetailedError>::operator=((uint64_t)v29, (uint64_t)buf);
  if (!buf[0] && *(void *)&buf[24] && (buf[32] & 1) != 0) {
    (*(void (**)(void))(**(void **)&buf[24] + 40))();
  }
  if (v29[0])
  {
LABEL_12:
    if (v25 && (v26 & 1) != 0) {
      (*(void (**)(void))(*v25 + 40))();
    }
LABEL_14:
    *(_DWORD *)long long buf = v33;
    re::DynamicString::DynamicString((re::DynamicString *)&buf[8], (const re::DynamicString *)&v34);
    re::DynamicString::DynamicString((re::DynamicString *)v42, (const re::DynamicString *)&v38);
    uint64_t v15 = v40;
    *(unsigned char *)a5 = 1;
    *(_DWORD *)(a5 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)buf;
    uint64_t v16 = *(void *)&buf[32];
    *(void *)(a5 + 16) = *(void *)&buf[8];
    *(_OWORD *)(a5 + 24) = *(_OWORD *)&buf[16];
    memset(&buf[8], 0, 32);
    uint64_t v17 = v42[0];
    uint64_t v18 = v42[1];
    *(void *)(a5 + 40) = v16;
    *(void *)(a5 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v17;
    uint64_t v19 = v43;
    uint64_t v20 = v44;
    v42[0] = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v45 = v15;
    *(void *)(a5 + 56) = v18;
    *(void *)(a5 + 64) = v19;
    *(void *)(a5 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v20;
    *(void *)(a5 + 80) = v15;
    goto LABEL_16;
  }
  *(_OWORD *)long long buf = v30;
  re::DynamicString::DynamicString((re::DynamicString *)&buf[16], (const re::DynamicString *)&v31);
  *(unsigned char *)a5 = 0;
  *(_OWORD *)(a5 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_OWORD *)buf;
  uint64_t v23 = v42[0];
  *(void *)(a5 + 24) = *(void *)&buf[16];
  *(void *)(a5 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v23;
  *(_OWORD *)(a5 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *(_OWORD *)&buf[24];
  if (v25 && (v26 & 1) != 0) {
    (*(void (**)(void))(*v25 + 40))();
  }
LABEL_16:
  if (!v29[0] && v31 && (v32 & 1) != 0) {
    (*(void (**)(void))(*(void *)v31 + 40))();
  }
  if ((void)v38)
  {
    if (BYTE8(v38)) {
      (*(void (**)(void))(*(void *)v38 + 40))();
    }
    long long v38 = 0u;
    long long v39 = 0u;
  }
  uint64_t result = v34;
  if (v34)
  {
    if (v35) {
      return (uint64_t *)(*(uint64_t (**)(void))(*v34 + 40))();
    }
  }
  return result;
}

unsigned char *re::AssetManager::assetHandle@<X0>(re::AssetManager *this@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  return re::AssetManager::assetHandle(this, a2, 1, 0, a3);
}

uint64_t re::AssetManager::assetHandleWithParentAssetPath@<X0>(re::AssetManager *this@<X0>, char *a2@<X1>, const re::AssetPath *a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  re::AssetPath::invalidAssetPath(this, (uint64_t)&v42);
  uint64_t v10 = re::AssetManager::parseAssetPath(this, a2, (const re::AssetPath *)&v42, 0, (uint64_t)v36);
  if (!v36[0])
  {
    uint64_t v14 = *re::assetsLogObjects((re *)v10);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      if (v38[8]) {
        uint64_t v22 = *(unsigned char **)&v38[16];
      }
      else {
        uint64_t v22 = &v38[9];
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)uint64_t v60 = a2;
      *(_WORD *)&v60[8] = 2080;
      *(void *)&v60[10] = v22;
      _os_log_error_impl(&dword_233120000, v14, OS_LOG_TYPE_ERROR, "asset string '%s' unparsable: %s", buf, 0x16u);
    }
    goto LABEL_16;
  }
  if (v37 != v42
    || ((v38[0] & 1) != 0 ? (size_t v11 = *(const char **)&v38[8]) : (size_t v11 = &v38[1]),
        (v44 & 1) != 0 ? (uint64_t v12 = *(const char **)&v45[7]) : (uint64_t v12 = v45),
        strcmp(v11, v12)))
  {
    if (!a4 || !*((unsigned char *)this + 512)) {
      goto LABEL_42;
    }
    re::AssetManager::parseAssetPath(this, a2, 0, 1, (uint64_t)buf);
    if (v36[0])
    {
      if (!buf[0])
      {
        if ((void)v39)
        {
          if (BYTE8(v39)) {
            (*(void (**)(void))(*(void *)v39 + 40))();
          }
          long long v39 = 0u;
          long long v40 = 0u;
        }
        if (*((void *)&v37 + 1) && (v38[0] & 1) != 0) {
          (*(void (**)(void))(**((void **)&v37 + 1) + 40))();
        }
        v36[0] = 0;
        long long v37 = *(_OWORD *)&v60[4];
        *(void *)long long v38 = *(void *)v61;
        *(void *)&long long v39 = v62;
        *(_OWORD *)&v38[8] = *(_OWORD *)&v61[8];
        *(void *)&long long v62 = 0;
        memset(v61, 0, sizeof(v61));
        goto LABEL_41;
      }
      LODWORD(v37) = *(_DWORD *)&v60[4];
      re::DynamicString::operator=((re::DynamicString *)((char *)&v37 + 8), (re::DynamicString *)&v60[12]);
      re::DynamicString::operator=((re::DynamicString *)&v39, (re::DynamicString *)&v62);
      uint64_t v13 = v65;
    }
    else
    {
      if (!buf[0])
      {
        long long v37 = *(_OWORD *)&v60[4];
        re::DynamicString::operator=((re::DynamicString *)v38, (re::DynamicString *)v61);
        goto LABEL_41;
      }
      if (*(void *)v38 && (v38[8] & 1) != 0) {
        (*(void (**)(void))(**(void **)v38 + 40))();
      }
      v36[0] = 1;
      LODWORD(v37) = *(_DWORD *)&v60[4];
      uint64_t v17 = *(void *)&v61[16];
      *((void *)&v37 + 1) = *(void *)&v60[12];
      *(_OWORD *)long long v38 = *(_OWORD *)v61;
      *(void *)&v60[12] = 0;
      memset(v61, 0, sizeof(v61));
      *(void *)&v38[16] = v17;
      long long v39 = v62;
      uint64_t v18 = v63;
      uint64_t v19 = v64;
      uint64_t v63 = 0;
      uint64_t v64 = 0;
      *(void *)&long long v40 = v18;
      long long v62 = 0uLL;
      uint64_t v13 = v65;
      *((void *)&v40 + 1) = v19;
    }
    long long v41 = v13;
LABEL_41:
    re::Result<re::AssetPath,re::DetailedError>::~Result(buf);
LABEL_42:
    re::AssetManager::assetHandle((os_unfair_lock_s *)this, (const re::AssetPath *)&v37, 1, a5);
    goto LABEL_43;
  }
  if (*(_DWORD *)a3 == 8)
  {
    re::AssetManager::resolveChildLoadDescriptors(this, a3, (uint64_t)buf);
    if (buf[0])
    {
      re::DynamicArray<re::AssetLoadDescriptor>::DynamicArray((uint64_t)v52, (uint64_t *)&v60[4]);
      LOBYTE(v33) = 0;
      uint64_t v15 = (re::AssetLoadDescriptor *)v58;
      if (*(void *)(v58 + 8)) {
        uint64_t v16 = *(const char **)(v58 + 16);
      }
      else {
        uint64_t v16 = (const char *)(v58 + 9);
      }
      if (!strcmp(v16, "NetworkAsset"))
      {
        re::AssetLoadDescriptor::getIntrospectableData<re::NetworkAssetLoadDescriptorParameters>(v15, v32, 0);
        re::AssetManager::assetHandle((os_unfair_lock_s *)this, (uint64_t *)v52, (uint64_t)v32[0], (uint64_t)v48);
      }
      else
      {
        re::AssetManager::assetHandle((os_unfair_lock_s *)this, (uint64_t *)v52, (uint64_t)v48);
      }
      re::Optional<re::AssetHandle>::operator=((uint64_t)&v33, v48);
      if (v48[0]) {
        re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)&v49 + 4));
      }
      if (a4 && *((unsigned char *)this + 512))
      {
        if (!(_BYTE)v33) {
          goto LABEL_77;
        }
        uint64_t v24 = (char *)re::AssetHandle::assetInfo((re::AssetHandle *)&v34);
        if (*((void *)v24 + 13)) {
          unint64_t v25 = (const char *)*((void *)v24 + 14);
        }
        else {
          unint64_t v25 = v24 + 105;
        }
        uint64_t v26 = (char *)re::AssetManager::remapDeserializedAssetPath(this, v25);
        if (v26)
        {
          unint64_t v27 = v26;
          uint64_t v28 = (re *)re::AssetManager::assetHandle(this, v26, 1, 0, (uint64_t *)v32);
          if (v32[1])
          {
            v48[0] = 1;
            re::AssetHandle::AssetHandle((re::AssetHandle *)((char *)&v49 + 4), (const re::AssetHandle *)v32);
            re::Optional<re::AssetHandle>::operator=((uint64_t)&v33, v48);
            if (v48[0]) {
              re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)&v49 + 4));
            }
          }
          else
          {
            long long v29 = *re::assetsLogObjects(v28);
            if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)uint64_t v48 = 136315394;
              __int16 v49 = v27;
              __int16 v50 = 2080;
              uint64_t v51 = v25;
              _os_log_error_impl(&dword_233120000, v29, OS_LOG_TYPE_ERROR, "Asset not found: '%s', remapped from '%s'", v48, 0x16u);
            }
          }
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v32);
        }
      }
      if ((_BYTE)v33)
      {
        re::AssetHandle::AssetHandle((re::AssetHandle *)a5, (const re::AssetHandle *)&v34);
        if ((_BYTE)v33) {
          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v34);
        }
        goto LABEL_78;
      }
LABEL_77:
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
LABEL_78:
      re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)v52);
      if (buf[0]) {
        re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)&v60[4]);
      }
      goto LABEL_43;
    }
LABEL_16:
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    goto LABEL_43;
  }
  uint64_t v20 = re::AssetManager::parseAssetPath(this, a2, a3, a4, (uint64_t)buf);
  if (buf[0])
  {
    re::AssetManager::assetHandle((os_unfair_lock_s *)this, (const re::AssetPath *)&v60[4], 1, a5);
  }
  else
  {
    uint64_t v23 = *re::assetsLogObjects((re *)v20);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      re::AssetPath::fullAssetPath(a3, (re::DynamicString *)&v33);
      long long v30 = (v34 & 1) != 0 ? *(unsigned char **)&v35[7] : v35;
      uint64_t v31 = (v61[8] & 1) != 0 ? *(unsigned char **)&v61[16] : &v61[9];
      *(_DWORD *)long long v52 = 136315650;
      long long v53 = a2;
      __int16 v54 = 2080;
      uint64_t v55 = v30;
      __int16 v56 = 2080;
      uint64_t v57 = v31;
      _os_log_error_impl(&dword_233120000, v23, OS_LOG_TYPE_ERROR, "asset string '%s' parent '%s' parse failed: %s", v52, 0x20u);
      if (v33)
      {
        if (v34) {
          (*(void (**)(void))(*(void *)v33 + 40))();
        }
      }
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
  re::Result<re::AssetPath,re::DetailedError>::~Result(buf);
LABEL_43:
  re::Result<re::AssetPath,re::DetailedError>::~Result(v36);
  if ((void)v46)
  {
    if (BYTE8(v46)) {
      (*(void (**)(void))(*(void *)v46 + 40))();
    }
    long long v46 = 0u;
    long long v47 = 0u;
  }
  uint64_t result = v43;
  if (v43)
  {
    if (v44) {
      return (*(uint64_t (**)(void))(*(void *)v43 + 40))();
    }
  }
  return result;
}

uint64_t re::AssetManager::assetHandleWithParentAssetHandle@<X0>(re::AssetManager *this@<X0>, char *a2@<X1>, const re::AssetHandle *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = (const re::AssetPath *)re::AssetHandle::legacy_assetPath(a3);
  return re::AssetManager::assetHandleWithParentAssetPath(this, a2, v7, 0, a4);
}

uint64_t re::AssetManager::assetHandleWithParentAssetPath@<X0>(re::AssetManager *this@<X0>, char *a2@<X1>, const re::AssetPath *a3@<X2>, uint64_t *a4@<X8>)
{
  return re::AssetManager::assetHandleWithParentAssetPath(this, a2, a3, 0, a4);
}

void re::AssetManager::resolveChildLoadDescriptors(re::AssetManager *this@<X0>, const re::AssetPath *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  unint64_t v32 = 0;
  BOOL AssetId = re::AssetPath::getAssetId(a2, &v32);
  if (!AssetId)
  {
    uint64_t v20 = *re::assetsLogObjects((re *)AssetId);
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
LABEL_27:
      *(unsigned char *)a3 = 0;
      return;
    }
    *(_WORD *)uint64_t v35 = 0;
    uint64_t v21 = "Failed to get assetId from an asset path with type kAssetId.";
    uint64_t v22 = v20;
    uint32_t v23 = 2;
LABEL_30:
    _os_log_error_impl(&dword_233120000, v22, OS_LOG_TYPE_ERROR, v21, v35, v23);
    goto LABEL_27;
  }
  os_unfair_lock_lock((os_unfair_lock_t)this + 16);
  *(void *)uint64_t v35 = v32;
  uint64_t v8 = re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 120, (uint64_t *)v35);
  os_unfair_lock_unlock((os_unfair_lock_t)this + 16);
  if (!v8 || (uint64_t v10 = *(void *)(v8 + 16)) == 0)
  {
    uint64_t v24 = *re::assetsLogObjects(v9);
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
      goto LABEL_27;
    }
    *(_DWORD *)uint64_t v35 = 134217984;
    *(void *)&id v35[4] = v32;
    uint64_t v21 = "Failed to find AssetLoadDescriptors registered for assetId %llu.";
    uint64_t v22 = v24;
    uint32_t v23 = 12;
    goto LABEL_30;
  }
  uint64_t v31 = 0;
  long long v29 = 0uLL;
  uint64_t v28 = 0;
  int v30 = 0;
  uint64_t v11 = *(void *)(v8 + 32);
  uint64_t v12 = 144 * v10;
  do
  {
    if (*(unsigned char *)(v11 + 8)) {
      uint64_t v13 = *(const char **)(v11 + 16);
    }
    else {
      uint64_t v13 = (const char *)(v11 + 9);
    }
    uint64_t ProviderForScheme = re::AssetProviderRegistry::tryGetProviderForScheme(*((os_unfair_lock_s **)this + 141), v13);
    if (ProviderForScheme)
    {
      uint64_t v15 = (re *)(*(void *(**)(unsigned char *__return_ptr))(*(void *)ProviderForScheme + 48))(v35);
      if (v35[0])
      {
        re::DynamicArray<re::AssetLoadDescriptor>::add((_anonymous_namespace_ *)&v28, (re::DynamicString *)&v35[8]);
      }
      else
      {
        uint64_t v18 = *re::assetsLogObjects(v15);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          if (v36) {
            uint64_t v19 = *(unsigned char **)&v37[7];
          }
          else {
            uint64_t v19 = v37;
          }
          *(_DWORD *)long long buf = 136315138;
          char v34 = v19;
          _os_log_error_impl(&dword_233120000, v18, OS_LOG_TYPE_ERROR, "Failed to resolve child AssetLoadDescriptor with error: %s.", buf, 0xCu);
        }
      }
      re::Result<re::AssetLoadDescriptor,re::DynamicString>::~Result(v35);
    }
    else
    {
      uint64_t v16 = *re::assetsLogObjects(0);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        if (*(unsigned char *)(v11 + 8)) {
          uint64_t v17 = *(void *)(v11 + 16);
        }
        else {
          uint64_t v17 = v11 + 9;
        }
        *(_DWORD *)uint64_t v35 = 136315138;
        *(void *)&id v35[4] = v17;
        _os_log_error_impl(&dword_233120000, v16, OS_LOG_TYPE_ERROR, "Failed to find a registered AssetProvider for scheme %s.", v35, 0xCu);
      }
    }
    v11 += 144;
    v12 -= 144;
  }
  while (v12);
  int v25 = v30;
  uint64_t v26 = v31;
  uint64_t v27 = v28;
  *(unsigned char *)a3 = 1;
  *(void *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v27;
  *(_OWORD *)(a3 + 16) = v29;
  uint64_t v28 = 0;
  long long v29 = 0uLL;
  *(void *)(a3 + 40) = v26;
  uint64_t v31 = 0;
  int v30 = v25 + 1;
  *(_DWORD *)(a3 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 1;
  re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)&v28);
}

uint64_t re::AssetLoadDescriptor::getIntrospectableData<re::NetworkAssetLoadDescriptorParameters>(re::AssetLoadDescriptor *a1, re::DynamicString **a2, re::Allocator *a3)
{
  unint64_t v4 = a2;
  uint64_t v5 = &qword_268772000;
  {
    uint64_t v12 = a1;
    uint64_t v11 = a3;
    uint64_t v5 = &qword_268772000;
    unint64_t v4 = a2;
    a3 = v11;
    int v9 = v8;
    a1 = v12;
    if (v9)
    {
      re::introspect<re::NetworkAssetLoadDescriptorParameters>(void)::info = re::introspect_NetworkAssetLoadDescriptorParameters(0);
      uint64_t v5 = &qword_268772000;
      a1 = v12;
      unint64_t v4 = a2;
      a3 = v11;
    }
  }
  uint64_t v6 = (re **)v5[460];
  return re::AssetLoadDescriptor::getIntrospectableData(a1, v6, v4, a3);
}

void re::AssetManager::assetHandle(os_unfair_lock_s *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v8 = a1 + 16;
  os_unfair_lock_lock(a1 + 16);
  re::AssetManager::assetHandle_assetTablesLocked((re::AssetManager *)a1, a2, a3, (uint64_t *)&v9);
  *(unsigned char *)a4 = 1;
  *(_OWORD *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v9;
  long long v9 = 0uLL;
  *(void *)(a4 + 24) = v10;
  uint64_t v10 = 0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v9);
  os_unfair_lock_unlock(v8);
}

uint64_t re::Optional<re::AssetHandle>::operator=(uint64_t a1, void *a2)
{
  int v3 = *(unsigned __int8 *)a2;
  if (*(unsigned char *)a1) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4)
  {
    if (*(unsigned char *)a1) {
      BOOL v5 = v3 == 0;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5)
    {
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 8));
      *(unsigned char *)a1 = 0;
    }
    else
    {
      if (*(unsigned char *)a1) {
        BOOL v6 = 1;
      }
      else {
        BOOL v6 = v3 == 0;
      }
      if (v6)
      {
        uint64_t v7 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = a2[2];
        a2[2] = v7;
      }
      else
      {
        *(unsigned char *)a1 = 1;
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
        *(void *)(a1 + 16) = a2[2];
        a2[2] = 0;
      }
      uint64_t v8 = *(void *)(a1 + 8);
      *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = a2[1];
      a2[1] = v8;
      uint64_t v9 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = a2[3];
      a2[3] = v9;
    }
  }
  return a1;
}

uint64_t re::AssetManager::remapDeserializedAssetPath(re::AssetManager *this, const char *a2)
{
  if (!*((unsigned char *)this + 512)) {
    return 0;
  }
  BOOL v4 = (os_unfair_lock_s *)((char *)this + 64);
  os_unfair_lock_lock((os_unfair_lock_t)this + 16);
  uint64_t v6 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)this + 304, (uint64_t)&v8);
  if (v8 && (v9 & 1) != 0) {
    (*(void (**)(void))(*(void *)v8 + 40))();
  }
  if (v6)
  {
    if (*(unsigned char *)(v6 + 8)) {
      uint64_t v6 = *(void *)(v6 + 16);
    }
    else {
      v6 += 9;
    }
  }
  os_unfair_lock_unlock(v4);
  return v6;
}

uint64_t *re::AssetManager::parseAssetPath@<X0>(re::AssetManager *this@<X0>, char *a2@<X1>, const re::AssetPath *a3@<X2>, uint64_t a4@<X8>)
{
  return re::AssetManager::parseAssetPath(this, a2, a3, 0, a4);
}

void re::AssetManager::assetHandle(os_unfair_lock_s *this@<X0>, const re::AssetLoadDescriptor *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = this + 16;
  os_unfair_lock_lock(this + 16);
  re::AssetManager::assetHandle_assetTablesLocked((re::AssetManager *)this, a2, a3, a4);
  os_unfair_lock_unlock(v8);
}

uint64_t re::AssetManager::assetHandle_assetTablesLocked@<X0>(re::AssetManager *this@<X0>, const re::AssetLoadDescriptor *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v10 = 0;
  memset(v8, 0, sizeof(v8));
  int v9 = 0;
  re::DynamicArray<re::AssetLoadDescriptor>::add((_anonymous_namespace_ *)v8, a2);
  re::AssetManager::assetHandle_assetTablesLocked(this, v8, a3, a4);
  return re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)v8);
}

uint64_t *re::AssetManager::assetHandle_assetTablesLocked@<X0>(re::AssetManager *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = (uint64_t)a1 + 120;
  uint64_t v9 = a2[4];
  uint64_t v11 = a3;
  if (!re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey((uint64_t)a1 + 120, &v11))
  {
    re::internal::AssetIdLoadDescriptorTable::addNewImmutable(v8, a3, a2);
    if (*((void *)a1 + 143)) {
      re::NetworkActionQueue::queueSyncActionShareAsset((uint64_t)a1 + 704, a3, 0);
    }
  }
  return re::AssetManager::assetHandleFromId_assetTablesLocked(a1, (const re::DynamicString *)(v9 + 112), a3, a4);
}

uint64_t re::internal::AssetIdLoadDescriptorTable::addNewImmutable(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v12 = a2;
  if (re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(a1, &v12))
  {
    return 0;
  }
  uint64_t v6 = a3[2];
  if (v6)
  {
    uint64_t v7 = a3[4];
    uint64_t v8 = 144 * v6;
    while (!re::HashTable<re::AssetLoadDescriptor,unsigned long long,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::containsKey(a1 + 48, v7))
    {
      v7 += 144;
      v8 -= 144;
      if (!v8)
      {
        uint64_t v9 = a3[2];
        if (v9)
        {
          uint64_t v10 = (re::DynamicString *)a3[4];
          uint64_t v11 = 144 * v9;
          do
          {
            re::HashTable<re::AssetLoadDescriptor,unsigned long long,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::add<unsigned long long &>(a1 + 48, v10, &v12);
            uint64_t v10 = (re::DynamicString *)((char *)v10 + 144);
            v11 -= 144;
          }
          while (v11);
        }
        goto LABEL_10;
      }
    }
    return 0;
  }
LABEL_10:
  re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(a1, &v12, a3);
  return 1;
}

uint64_t re::AssetManager::createNewImmutableAssetHandle@<X0>(os_unfair_lock_s *a1@<X0>, re::DynamicString *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v10 = 0;
  memset(v8, 0, sizeof(v8));
  int v9 = 0;
  re::DynamicArray<re::AssetLoadDescriptor>::add((_anonymous_namespace_ *)v8, a2);
  uuid_generate_random(out);
  re::AssetManager::createNewImmutableAssetHandle(a1, v8, (*(void *)&out[8] + (*(void *)out << 6) + (*(void *)out >> 2) - 0x61C8864680B583E9) ^ *(void *)out, a3, a4);
  return re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)v8);
}

void re::AssetManager::createNewImmutableAssetHandle(os_unfair_lock_s *a1@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uuid_generate_random((unsigned __int8 *)v9);
  uint64_t v8 = (v9[1] + (v9[0] << 6) + (v9[0] >> 2) - 0x61C8864680B583E9) ^ v9[0];
  re::AssetManager::createNewImmutableAssetHandle(a1, a2, v8, a3, a4);
}

void re::AssetManager::createNewImmutableAssetHandle(os_unfair_lock_s *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (!a2[2])
  {
    *(unsigned char *)a5 = 0;
    return;
  }
  uint64_t v10 = a1 + 16;
  os_unfair_lock_lock(a1 + 16);
  *(void *)&long long v21 = a3;
  BOOL v11 = re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey((uint64_t)&a1[30], (uint64_t *)&v21);
  if (v11)
  {
    uint64_t v12 = *re::assetsLogObjects((re *)v11);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
LABEL_17:
      *(unsigned char *)a5 = 0;
      goto LABEL_18;
    }
    LODWORD(v21) = 134217984;
    *(void *)((char *)&v21 + 4) = a3;
    uint64_t v13 = "Can't create new immutable asset. AssetId:%llu already exists.";
    uint64_t v14 = v12;
LABEL_16:
    _os_log_error_impl(&dword_233120000, v14, OS_LOG_TYPE_ERROR, v13, (uint8_t *)&v21, 0xCu);
    goto LABEL_17;
  }
  uint64_t v15 = a2[2];
  if (v15)
  {
    uint64_t v16 = a2[4];
    uint64_t v17 = 144 * v15;
    while (1)
    {
      BOOL v18 = re::HashTable<re::AssetLoadDescriptor,unsigned long long,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::containsKey((uint64_t)&a1[42], v16);
      if (v18) {
        break;
      }
      v16 += 144;
      v17 -= 144;
      if (!v17) {
        goto LABEL_10;
      }
    }
    uint64_t v19 = *re::assetsLogObjects((re *)v18);
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      goto LABEL_17;
    }
    if (*(unsigned char *)(v16 + 8)) {
      uint64_t v20 = *(void *)(v16 + 16);
    }
    else {
      uint64_t v20 = v16 + 9;
    }
    LODWORD(v21) = 136315138;
    *(void *)((char *)&v21 + 4) = v20;
    uint64_t v13 = "Can't create new immutable asset. An asset with specified load descriptor %s already exists.";
    uint64_t v14 = v19;
    goto LABEL_16;
  }
LABEL_10:
  re::AssetManager::addNewAssetEntry_assetTablesLocked((uint64_t *)&v21, (uint64_t)a1, a2, a3, 0, a4);
  *(unsigned char *)a5 = 1;
  *(_OWORD *)(a5 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v21;
  long long v21 = 0uLL;
  *(void *)(a5 + 24) = v22;
  uint64_t v22 = 0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v21);
LABEL_18:
  os_unfair_lock_unlock(v10);
}

uint64_t re::AssetManager::createNewImmutableAssetHandle@<X0>(os_unfair_lock_s *a1@<X0>, re::DynamicString *a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v12 = 0;
  memset(v10, 0, sizeof(v10));
  int v11 = 0;
  re::DynamicArray<re::AssetLoadDescriptor>::add((_anonymous_namespace_ *)v10, a2);
  re::AssetManager::createNewImmutableAssetHandle(a1, v10, a3, a4, a5);
  return re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)v10);
}

void re::AssetManager::addNewAssetEntry_assetTablesLocked(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5, unsigned int a6)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v12 = a2 + 120;
  *(void *)long long buf = a4;
  BOOL v13 = re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(a2 + 120, (uint64_t *)buf);
  if (v13)
  {
    uint64_t v14 = *re::assetsLogObjects((re *)v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = a4;
      _os_log_error_impl(&dword_233120000, v14, OS_LOG_TYPE_ERROR, "Can't add new assetEntry. AssetId:%llu already exists.", buf, 0xCu);
    }
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  else
  {
    *(_DWORD *)long long buf = 0;
    *(_OWORD *)&uint8_t buf[8] = 0u;
    long long v42 = 0u;
    uint64_t v15 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&buf[8], 0);
    long long v44 = 0u;
    long long v43 = 0u;
    re::DynamicString::setCapacity(&v43, 0);
    uint64_t v45 = 0;
    uint64_t v16 = a3[4];
    if (*(unsigned char *)(v16 + 120)) {
      uint64_t v17 = *(char **)(v16 + 128);
    }
    else {
      uint64_t v17 = (char *)(v16 + 121);
    }
    uint64_t v18 = re::internal::AssetTypeRegistry::assetTypeWithName(*(re::internal::AssetTypeRegistry **)(a2 + 1040), v17);
    re::AssetPath::initAssetIdAssetPath((uint64_t)buf, a4, v18);
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v36 = *(void *)&buf[8];
    uint64_t v37 = 0;
    re::DynamicString::setCapacity(&v36, 0);
    uint64_t v19 = re::AssetPath::fullAssetPath((re::DynamicString *)buf, (re::DynamicString *)&v36);
    if (v37) {
      uint64_t v20 = v38;
    }
    else {
      uint64_t v20 = (char *)&v37 + 1;
    }
    uint64_t v21 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(a2 + 72, (uint64_t)v40);
    uint64_t v22 = *(re **)v40;
    if (*(void *)v40 && (v40[8] & 1) != 0) {
      uint64_t v22 = (re *)(*(uint64_t (**)(void))(**(void **)v40 + 40))();
    }
    if (v21)
    {
      uint64_t v23 = *re::assetsLogObjects(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        if (v37) {
          char v34 = v38;
        }
        else {
          char v34 = (char *)&v37 + 1;
        }
        *(_DWORD *)long long v40 = 136315138;
        *(void *)&v40[4] = v34;
        _os_log_error_impl(&dword_233120000, v23, OS_LOG_TYPE_ERROR, "Can't create new immutable asset. An immutable asset %s already exists.", v40, 0xCu);
      }
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    else
    {
      if (a5) {
        re::internal::AssetIdLoadDescriptorTable::addNewMutable(v12, a4, (uint64_t)a3);
      }
      else {
        re::internal::AssetIdLoadDescriptorTable::addNewImmutable(v12, a4, a3);
      }
      if (*(void *)(a2 + 1144)) {
        re::NetworkActionQueue::queueSyncActionShareAsset(a2 + 704, a4, a6);
      }
      re::internal::AssetEntry::makeAssetEntry((_anonymous_namespace_ *)a6, (uint64_t *)&v35);
      uint64_t v24 = a3[4];
      uint64_t v25 = *(void *)(v24 + 8);
      uint64_t v26 = *(const char **)(v24 + 16);
      uint64_t v27 = (const char *)(v24 + 9);
      if (v25) {
        uint64_t v28 = v26;
      }
      else {
        uint64_t v28 = v27;
      }
      BOOL v29 = strcmp(v28, "MemoryAsset") == 0;
      int v30 = v35;
      *((unsigned char *)v35 + 31re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v29;
      re::internal::AssetEntry::addToAssetManager_assetTablesLocked(v30, (re::AssetManager *)a2, (const re::AssetPath *)buf, a5);
      re::AssetManager::assignInitialMetadata(a2, (os_unfair_lock_s *)v30, (uint64_t)a3);
      if (v37) {
        unint64_t v32 = v38;
      }
      else {
        unint64_t v32 = (char *)&v37 + 1;
      }
      uint64_t v33 = (re::internal::AssetEntry **)re::HashTable<re::DynamicString,re::SharedPtr<re::internal::AssetEntry>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::SharedPtr<re::internal::AssetEntry>&>(a2 + 72, (const re::DynamicString *)v40, (uint64_t *)&v35);
      re::AssetHandle::AssetHandle(a1, *v33);
      if (*(void *)v40 && (v40[8] & 1) != 0) {
        (*(void (**)(void))(**(void **)v40 + 40))();
      }
    }
    if (v36 && (v37 & 1) != 0) {
      (*(void (**)(void))(*(void *)v36 + 40))();
    }
    if ((void)v43)
    {
      if (BYTE8(v43)) {
        (*(void (**)(void))(*(void *)v43 + 40))();
      }
      long long v43 = 0u;
      long long v44 = 0u;
    }
    if (*(void *)&buf[8] && (buf[16] & 1) != 0) {
      (*(void (**)(void))(**(void **)&buf[8] + 40))();
    }
  }
}

void re::AssetManager::existingImmutableAssetHandle(re::AssetManager *this@<X0>, const re::AssetLoadDescriptor *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (os_unfair_lock_s *)((char *)this + 64);
  os_unfair_lock_lock((os_unfair_lock_t)this + 16);
  uint64_t v7 = re::HashTable<re::AssetLoadDescriptor,unsigned long long,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::tryGet((uint64_t)this + 168, (uint64_t)a2);
  if (v7)
  {
    uint64_t v8 = (uint64_t *)v7;
    int v9 = (char *)this + 72;
    if (*((unsigned char *)a2 + 120)) {
      uint64_t v10 = (char *)*((void *)a2 + 16);
    }
    else {
      uint64_t v10 = (char *)a2 + 121;
    }
    int v11 = (_anonymous_namespace_ *)re::internal::AssetTypeRegistry::assetTypeWithName(*((re::internal::AssetTypeRegistry **)this + 130), v10);
    int v23 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v25 = 0;
    uint64_t v12 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v24, 0);
    *((void *)&v28 + 1) = 0;
    long long v29 = 0uLL;
    re::DynamicString::setCapacity(&v28, 0);
    uint64_t v30 = 0;
    re::AssetPath::initAssetIdAssetPath((uint64_t)&v23, *v8, (uint64_t)v11);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v19 = v24;
    uint64_t v20 = 0;
    re::DynamicString::setCapacity(&v19, 0);
    BOOL v13 = re::AssetPath::fullAssetPath((re::DynamicString *)&v23, (re::DynamicString *)&v19);
    if (v20) {
      uint64_t v14 = v21;
    }
    else {
      uint64_t v14 = (char *)&v20 + 1;
    }
    uint64_t v15 = (re::internal::AssetEntry **)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)v9, (uint64_t)&v17);
    if (void)v17 && (BYTE8(v17)) {
      (*(void (**)(void))(*(void *)v17 + 40))();
    }
    if (v15)
    {
      re::AssetHandle::AssetHandle((uint64_t *)&v17, *v15);
      *(_OWORD *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v17;
      long long v17 = 0uLL;
      *(void *)(a3 + 24) = v18;
      uint64_t v18 = 0;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v17);
      char v16 = 1;
    }
    else
    {
      char v16 = 0;
    }
    *(unsigned char *)a3 = v16;
    if (v19 && (v20 & 1) != 0) {
      (*(void (**)(void))(*v19 + 40))();
    }
    if ((void)v28)
    {
      if (BYTE8(v28)) {
        (*(void (**)(void))(*(void *)v28 + 40))();
      }
      long long v28 = 0u;
      long long v29 = 0u;
    }
    if (v24 && (v25 & 1) != 0) {
      (*(void (**)(void))(*v24 + 40))();
    }
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
  os_unfair_lock_unlock(v6);
}

uint64_t re::AssetManager::createNewMutableAssetHandle@<X0>(os_unfair_lock_s *a1@<X0>, re::DynamicString *a2@<X1>, unsigned int a3@<W2>, re::AssetHandle *a4@<X8>)
{
  return re::AssetManager::createNewMutableAssetHandle(a1, a2, a3, 1, a4);
}

uint64_t re::AssetManager::createNewMutableAssetHandle@<X0>(os_unfair_lock_s *a1@<X0>, re::DynamicString *a2@<X1>, unsigned int a3@<W2>, int a4@<W3>, re::AssetHandle *a5@<X8>)
{
  uint64_t v17 = 0;
  memset(v15, 0, sizeof(v15));
  int v16 = 0;
  re::DynamicArray<re::AssetLoadDescriptor>::add((_anonymous_namespace_ *)v15, a2);
  re::AssetManager::createNewMutableAssetHandle(a1, v15, a3, a4, (re::AssetHandle *)&v10);
  char v12 = 1;
  long long v13 = v10;
  long long v10 = 0uLL;
  uint64_t v14 = v11;
  uint64_t v11 = 0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v10);
  re::AssetHandle::AssetHandle(a5, (const re::AssetHandle *)&v13);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v13);
  return re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)v15);
}

void re::AssetManager::createNewMutableAssetHandle(os_unfair_lock_s *a1@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, int a4@<W3>, re::AssetHandle *a5@<X8>)
{
  uuid_generate_random((unsigned __int8 *)&v10);
  re::AssetManager::createNewMutableAssetHandle(a1, a2, (v11[0] + (v10 << 6) + (v10 >> 2) - 0x61C8864680B583E9) ^ v10, a3, a4, (uint64_t)&v10);
  re::AssetHandle::AssetHandle(a5, (const re::AssetHandle *)v11);
  if ((_BYTE)v10) {
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
  }
}

void re::AssetManager::createNewMutableAssetHandle(os_unfair_lock_s *a1@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, re::AssetHandle *a4@<X8>)
{
}

void re::AssetManager::createNewMutableAssetHandle(os_unfair_lock_s *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (!a2[2])
  {
    *(unsigned char *)a6 = 0;
    return;
  }
  if (a5)
  {
    uint64_t v11 = a1 + 16;
    os_unfair_lock_lock(a1 + 16);
  }
  else
  {
    uint64_t v11 = 0;
  }
  *(void *)&long long v14 = a3;
  BOOL v12 = re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey((uint64_t)&a1[30], (uint64_t *)&v14);
  if (!v12)
  {
    re::AssetManager::addNewAssetEntry_assetTablesLocked((uint64_t *)&v14, (uint64_t)a1, a2, a3, 1, a4);
    *(unsigned char *)a6 = 1;
    *(_OWORD *)(a6 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v14;
    long long v14 = 0uLL;
    *(void *)(a6 + 24) = v15;
    uint64_t v15 = 0;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v14);
    if (!v11) {
      return;
    }
    goto LABEL_12;
  }
  long long v13 = *re::assetsLogObjects((re *)v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 134217984;
    *(void *)((char *)&v14 + 4) = a3;
    _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "Can't create new mutable asset. AssetId:%llu already exists.", (uint8_t *)&v14, 0xCu);
  }
  *(unsigned char *)a6 = 0;
  if (v11) {
LABEL_12:
  }
    os_unfair_lock_unlock(v11);
}

uint64_t re::AssetManager::createNewMutableAssetHandle@<X0>(os_unfair_lock_s *a1@<X0>, re::DynamicString *a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v12 = 0;
  memset(v10, 0, sizeof(v10));
  int v11 = 0;
  re::DynamicArray<re::AssetLoadDescriptor>::add((_anonymous_namespace_ *)v10, a2);
  re::AssetManager::createNewMutableAssetHandle(a1, v10, a3, a4, 1, a5);
  return re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)v10);
}

void re::AssetManager::createNewMutableAssetHandle(os_unfair_lock_s *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
}

void re::AssetManager::existingMutableAssetHandles(os_unfair_lock_s *this@<X0>, const re::AssetLoadDescriptor *a2@<X1>, re::AssetManager *a3@<X8>)
{
  uint64_t v6 = this + 16;
  os_unfair_lock_lock(this + 16);
  re::AssetManager::existingMutableAssetHandles_assetTablesLocked(a3, (re::internal::AssetTypeRegistry **)this, (uint64_t)a2);
  os_unfair_lock_unlock(v6);
}

uint64_t re::AssetManager::existingMutableAssetHandles_assetTablesLocked(re::AssetManager *this, re::internal::AssetTypeRegistry **a2, uint64_t a3)
{
  uint64_t result = re::HashTable<re::AssetLoadDescriptor,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::tryGet((uint64_t)(a2 + 27), a3);
  if (result)
  {
    uint64_t v7 = result;
    if (*(unsigned char *)(a3 + 120)) {
      uint64_t v8 = *(char **)(a3 + 128);
    }
    else {
      uint64_t v8 = (char *)(a3 + 121);
    }
    int v9 = (_anonymous_namespace_ *)re::internal::AssetTypeRegistry::assetTypeWithName(a2[130], v8);
    int v29 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v31 = 0;
    unint64_t v10 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v30, 0);
    *((void *)&v34 + 1) = 0;
    long long v35 = 0uLL;
    re::DynamicString::setCapacity(&v34, 0);
    uint64_t v36 = 0;
    *((void *)this + 4) = 0;
    *((void *)this + 1) = 0;
    *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    *(void *)this = 0;
    *((_DWORD *)this + 6) = 0;
    uint64_t v11 = *(unsigned int *)(v7 + 32);
    uint64_t v12 = 0;
    if (v11)
    {
      long long v13 = (int *)(*(void *)(v7 + 16) + 8);
      while (1)
      {
        int v14 = *v13;
        v13 += 6;
        if (v14 < 0) {
          break;
        }
        if (v11 == ++v12)
        {
          LODWORD(v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *(_DWORD *)(v7 + 32);
          break;
        }
      }
    }
    if (v11 != v12)
    {
      uint64_t v15 = (char *)(a2 + 9);
      uint64_t v16 = v12;
      do
      {
        re::AssetPath::initAssetIdAssetPath((uint64_t)&v29, *(void *)(*(void *)(v7 + 16) + 24 * v16 + 16), (uint64_t)v9);
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        uint64_t v26 = 0;
        uint64_t v25 = v30;
        re::DynamicString::setCapacity(&v25, 0);
        uint64_t v17 = re::AssetPath::fullAssetPath((re::DynamicString *)&v29, (re::DynamicString *)&v25);
        if (v26) {
          uint64_t v18 = v27;
        }
        else {
          uint64_t v18 = (char *)&v26 + 1;
        }
        uint64_t v19 = (re::internal::AssetEntry **)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)v15, (uint64_t)&v23);
        if (v23 && (v24 & 1) != 0) {
          (*(void (**)(void))(*(void *)v23 + 40))();
        }
        if (v19)
        {
          re::AssetHandle::AssetHandle(&v23, *v19);
          re::DynamicArray<re::AssetHandle>::add(this, &v23);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v23);
        }
        unsigned int v20 = *(_DWORD *)(v7 + 32);
        if (v20 <= (int)v12 + 1) {
          int v21 = v12 + 1;
        }
        else {
          int v21 = *(_DWORD *)(v7 + 32);
        }
        int v22 = v12;
        while (1)
        {
          uint64_t v16 = (v22 + 1);
          if (v21 - 1 == v22) {
            break;
          }
          ++v22;
          LODWORD(v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v16;
          if ((*(_DWORD *)(*(void *)(v7 + 16) + 24 * v16 + 8) & 0x80000000) != 0) {
            goto LABEL_29;
          }
        }
        LODWORD(v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v21;
LABEL_29:
        if (v25 && (v26 & 1) != 0)
        {
          (*(void (**)(void))(*v25 + 40))();
          unsigned int v20 = *(_DWORD *)(v7 + 32);
        }
      }
      while (v20 != v12);
    }
    if ((void)v34)
    {
      if (BYTE8(v34)) {
        (*(void (**)(void))(*(void *)v34 + 40))();
      }
      long long v34 = 0u;
      long long v35 = 0u;
    }
    uint64_t result = (uint64_t)v30;
    if (v30)
    {
      if (v31) {
        return (*(uint64_t (**)(void))(*v30 + 40))();
      }
    }
  }
  else
  {
    *((void *)this + 4) = 0;
    *((void *)this + 1) = 0;
    *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    *(void *)this = 0;
    *((_DWORD *)this + 6) = 0;
  }
  return result;
}

void *re::DynamicArray<re::AssetHandle>::add(void *this, uint64_t *a2)
{
  int v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::AssetHandle>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  BOOL v5 = (uint64_t *)(v3[4] + 24 * v4);
  uint64_t *v5 = 0;
  v5[1] = 0;
  void v5[2] = 0;
  v5[1] = a2[1];
  a2[1] = 0;
  uint64_t v6 = *v5;
  uint64_t *v5 = 0;
  uint64_t *v5 = *a2;
  *a2 = v6;
  uint64_t v7 = v5[2];
  void v5[2] = a2[2];
  a2[2] = v7;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

uint64_t re::AssetManager::convertToMutable(os_unfair_lock_s *this, const re::AssetHandle *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  if (!v2) {
    return 0;
  }
  if (!*(unsigned char *)(v2 + 257))
  {
    uint64_t v4 = *(void *)(v2 + 112);
    if ((unint64_t)(v4 + 1) >= 2) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v6 = this + 16;
    os_unfair_lock_lock(this + 16);
    uint64_t v7 = this + 30;
    uint64_t v23 = v5;
    uint64_t v8 = re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)&this[30], &v23);
    os_unfair_lock_unlock(v6);
    if (v8)
    {
      uint64_t v9 = *(void *)(v8 + 16);
      if (v9)
      {
        unint64_t v10 = *(uint64_t **)(v8 + 32);
        uint64_t v11 = 144 * v9;
        while (1)
        {
          re::DynamicString::DynamicString((re::DynamicString *)&v23, (const re::DynamicString *)v10);
          re::DynamicArray<BOOL>::DynamicArray((uint64_t)&v26, v10 + 4);
          re::DynamicArray<BOOL>::DynamicArray((uint64_t)&v31, v10 + 9);
          re::DynamicString::DynamicString((re::DynamicString *)&v36, (const re::DynamicString *)(v10 + 14));
          isEngineAssetuint64_t Descriptor = (re *)re::FrameworkAssetProvider::isEngineAssetDescriptor((re::FrameworkAssetProvider *)&v23, v12);
          if (isEngineAssetDescriptor) {
            break;
          }
          if ((void)v36)
          {
            if (BYTE8(v36)) {
              (*(void (**)(void))(*(void *)v36 + 40))();
            }
            long long v36 = 0u;
            long long v37 = 0u;
          }
          if (v31)
          {
            if (v35) {
              (*(void (**)(void))(*(void *)v31 + 40))();
            }
            uint64_t v35 = 0;
            uint64_t v32 = 0;
            uint64_t v33 = 0;
            uint64_t v31 = 0;
            ++v34;
          }
          if (v26)
          {
            if (v30) {
              (*(void (**)(void))(*(void *)v26 + 40))();
            }
            uint64_t v30 = 0;
            uint64_t v27 = 0;
            uint64_t v28 = 0;
            uint64_t v26 = 0;
            ++v29;
          }
          if (v23 && (v24[0] & 1) != 0) {
            (*(void (**)(void))(*(void *)v23 + 40))();
          }
          v10 += 18;
          v11 -= 144;
          if (!v11) {
            goto LABEL_26;
          }
        }
        int v21 = *re::assetsLogObjects(isEngineAssetDescriptor);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_233120000, v21, OS_LOG_TYPE_DEFAULT, "Engine assets cannot be mutated.", buf, 2u);
        }
        if ((void)v36)
        {
          if (BYTE8(v36)) {
            (*(void (**)(void))(*(void *)v36 + 40))();
          }
          long long v36 = 0u;
          long long v37 = 0u;
        }
        if (v31)
        {
          if (v35) {
            (*(void (**)(void))(*(void *)v31 + 40))();
          }
          uint64_t v35 = 0;
          uint64_t v32 = 0;
          uint64_t v33 = 0;
          uint64_t v31 = 0;
          ++v34;
        }
        if (v26)
        {
          if (v30) {
            (*(void (**)(void))(*(void *)v26 + 40))();
          }
          uint64_t v30 = 0;
          uint64_t v27 = 0;
          uint64_t v28 = 0;
          uint64_t v26 = 0;
          ++v29;
        }
        if (v23 && (v24[0] & 1) != 0) {
          (*(void (**)(void))(*(void *)v23 + 40))();
        }
        return 0;
      }
    }
LABEL_26:
    os_unfair_lock_lock(v6);
    re::AssetManager::lookupExistingAsset_assetTablesLocked((re::internal::AssetTypeRegistry **)this, v5, &v23);
    if ((_BYTE)v23)
    {
      *(void *)long long buf = v5;
      uint64_t v14 = re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)&this[30], (uint64_t *)buf);
      uint64_t v15 = *(uint64_t **)(v14 + 32);
      uint64_t v16 = *(void *)(v14 + 16);
      if (v16)
      {
        uint64_t v17 = v14;
        uint64_t v18 = this + 42;
        uint64_t v19 = 144 * v16;
        do
        {
          re::HashTable<re::AssetLoadDescriptor,unsigned long long,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::remove((uint64_t)v18, (uint64_t)v15);
          v15 += 18;
          v19 -= 144;
        }
        while (v19);
        uint64_t v20 = *(void *)(v17 + 16);
        uint64_t v15 = *(uint64_t **)(v17 + 32);
      }
      else
      {
        uint64_t v20 = 0;
      }
      re::internal::AssetIdLoadDescriptorTable::insertIntoMutableTables((uint64_t)v7, v5, v20, v15);
      *(unsigned char *)(v25 + 257) = 1;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v24);
    }
    os_unfair_lock_unlock(v6);
  }
  return 1;
}

uint64_t re::AssetManager::lookupExistingAsset_assetTablesLocked@<X0>(re::internal::AssetTypeRegistry **this@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v15 = a2;
  uint64_t result = re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)(this + 15), &v15);
  if (result && *(void *)(result + 16))
  {
    uint64_t v7 = *(void *)(result + 32);
    if (*(unsigned char *)(v7 + 120)) {
      uint64_t v8 = *(char **)(v7 + 128);
    }
    else {
      uint64_t v8 = (char *)(v7 + 121);
    }
    uint64_t v9 = (_anonymous_namespace_ *)re::internal::AssetTypeRegistry::assetTypeWithName(this[130], v8);
    LODWORD(v15) = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v17 = 0;
    unint64_t v10 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v16, 0);
    *((void *)&v20 + 1) = 0;
    long long v21 = 0uLL;
    re::DynamicString::setCapacity(&v20, 0);
    uint64_t v22 = 0;
    re::AssetPath::initAssetIdAssetPath((uint64_t)&v15, a2, (uint64_t)v9);
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v11 = v16;
    uint64_t v12 = 0;
    re::DynamicString::setCapacity(&v11, 0);
    re::AssetPath::fullAssetPath((re::DynamicString *)&v15, (re::DynamicString *)&v11);
    re::AssetManager::lookupExistingAsset_assetTablesLocked((re::AssetManager *)this, (const re::DynamicString *)&v11, (uint64_t)a3);
    if (v11 && (v12 & 1) != 0) {
      (*(void (**)(void))(*v11 + 40))();
    }
    if ((void)v20)
    {
      if (BYTE8(v20)) {
        (*(void (**)(void))(*(void *)v20 + 40))();
      }
      long long v20 = 0u;
      long long v21 = 0u;
    }
    uint64_t result = (uint64_t)v16;
    if (v16)
    {
      if (v17) {
        return (*(uint64_t (**)(void))(*v16 + 40))();
      }
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void re::AssetManager::lookupExistingAsset(os_unfair_lock_s *this@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v6 = this + 16;
  os_unfair_lock_lock(this + 16);
  re::AssetManager::lookupExistingAsset_assetTablesLocked((re::internal::AssetTypeRegistry **)this, a2, a3);
  os_unfair_lock_unlock(v6);
}

void re::AssetManager::lookupExistingAsset_assetTablesLocked(re::AssetManager *this@<X0>, const re::DynamicString *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (re::internal::AssetEntry **)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)this + 72, (uint64_t)a2);
  if (v4)
  {
    re::AssetHandle::AssetHandle((uint64_t *)&v6, *v4);
    *(_OWORD *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v6;
    long long v6 = 0uLL;
    *(void *)(a3 + 24) = v7;
    uint64_t v7 = 0;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v6);
    char v5 = 1;
  }
  else
  {
    char v5 = 0;
  }
  *(unsigned char *)a3 = v5;
}

void re::AssetManager::lookupExistingAsset(re::AssetManager *this, os_unfair_lock_s *a2, re::DynamicString *a3)
{
  long long v6 = a2 + 16;
  os_unfair_lock_lock(a2 + 16);
  uint64_t v7 = *((void *)a3 + 1);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v8 = v7;
  uint64_t v9 = 0;
  re::DynamicString::setCapacity(&v8, 0);
  re::AssetPath::fullAssetPath(a3, (re::DynamicString *)&v8);
  re::AssetManager::lookupExistingAsset_assetTablesLocked((re::AssetManager *)a2, (const re::DynamicString *)&v8, (uint64_t)this);
  if (v8 && (v9 & 1) != 0) {
    (*(void (**)(void))(*(void *)v8 + 40))();
  }
  os_unfair_lock_unlock(v6);
}

void re::AssetManager::lookupExistingAsset(os_unfair_lock_s *this@<X0>, const re::DynamicString *a2@<X1>, uint64_t a3@<X8>)
{
  long long v6 = this + 16;
  os_unfair_lock_lock(this + 16);
  re::AssetManager::lookupExistingAsset_assetTablesLocked((re::AssetManager *)this, a2, a3);
  os_unfair_lock_unlock(v6);
}

void re::AssetManager::lookupExistingImmutableAssetId(os_unfair_lock_s *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(a2 + 16))
  {
    long long v6 = a1 + 16;
    os_unfair_lock_lock(a1 + 16);
    uint64_t v7 = *(void *)(a2 + 16);
    if (v7)
    {
      uint64_t v8 = *(void *)(a2 + 32);
      uint64_t v9 = (uint64_t)&a1[42];
      uint64_t v10 = 144 * v7;
      while (1)
      {
        uint64_t v11 = (void *)re::HashTable<re::AssetLoadDescriptor,unsigned long long,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::tryGet(v9, v8);
        if (v11) {
          break;
        }
        v8 += 144;
        v10 -= 144;
        if (!v10) {
          goto LABEL_6;
        }
      }
      *(unsigned char *)a3 = 1;
      *(void *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *v11;
    }
    else
    {
LABEL_6:
      *(unsigned char *)a3 = 0;
    }
    os_unfair_lock_unlock(v6);
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
}

void re::AssetManager::loadDescriptorsFromAssetId(os_unfair_lock_s *this@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  long long v6 = this + 16;
  os_unfair_lock_lock(this + 16);
  uint64_t v8 = a2;
  uint64_t v7 = (uint64_t *)re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)&this[30], &v8);
  os_unfair_lock_unlock(v6);
  if (v7)
  {
    *a3 = 1;
    re::DynamicArray<re::AssetLoadDescriptor>::DynamicArray((uint64_t)(a3 + 8), v7);
  }
  else
  {
    *a3 = 0;
  }
}

void re::AssetManager::lookupLoadDescriptors(os_unfair_lock_s *this@<X0>, const re::AssetHandle *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v5 = *((void *)re::AssetHandle::assetInfo(a2) + 10);
  if ((unint64_t)(v5 + 1) > 1
    && (long long v6 = this + 16,
        os_unfair_lock_lock(this + 16),
        uint64_t v8 = v5,
        uint64_t v7 = (uint64_t *)re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)&this[30], &v8), os_unfair_lock_unlock(v6), v7))
  {
    *a3 = 1;
    re::DynamicArray<re::AssetLoadDescriptor>::DynamicArray((uint64_t)(a3 + 8), v7);
  }
  else
  {
    *a3 = 0;
  }
}

void re::internal::AssetIdLoadDescriptorTable::remove(re::internal::AssetIdLoadDescriptorTable *this, unint64_t a2)
{
  unint64_t v40 = a2;
  if (!re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey((uint64_t)this, (uint64_t *)&v40))return; {
  unint64_t v3 = v40;
  }
  unint64_t v4 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v40 ^ (v40 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v40 ^ (v40 >> 30))) >> 27));
  unint64_t v5 = (v4 ^ (v4 >> 31)) % *((unsigned int *)this + 6);
  uint64_t v6 = *((void *)this + 2);
  for (uint64_t i = *(unsigned int *)(*((void *)this + 1) + 4 * v5);
        *(void *)(v6 + (i << 6) + 16) != v40;
  uint64_t v8 = v6 + (i << 6);
  uint64_t v9 = *(void *)(v8 + 40);
  if (!v9) {
    goto LABEL_30;
  }
  uint64_t v10 = *(void *)(v8 + 56);
  uint64_t v11 = v10 + 144 * v9;
  do
  {
    unint64_t v12 = re::Hash<re::AssetLoadDescriptor>::operator()((uint64_t)&v41, v10);
    if (*((void *)this + 6))
    {
      uint64_t v13 = *(unsigned int *)(*((void *)this + 7) + 4 * (v12 % *((unsigned int *)this + 18)));
      if (v13 != 0x7FFFFFFF)
      {
        uint64_t v14 = *((void *)this + 8);
        while (1)
        {
          BOOL v15 = re::EqualTo<re::AssetLoadDescriptor>::operator()((uint64_t)&v42, v14 + 168 * v13 + 16, v10);
          uint64_t v14 = *((void *)this + 8);
          if (v15) {
            break;
          }
          uint64_t v13 = *(_DWORD *)(v14 + 168 * v13 + 8) & 0x7FFFFFFF;
          if (v13 == 0x7FFFFFFF) {
            goto LABEL_15;
          }
        }
        if (*(void *)(v14 + 168 * v13 + 160) == v40) {
          re::HashTable<re::AssetLoadDescriptor,unsigned long long,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::remove((uint64_t)this + 48, v10);
        }
      }
    }
LABEL_15:
    uint64_t v16 = re::HashTable<re::AssetLoadDescriptor,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::tryGet((uint64_t)this + 96, v10);
    if (v16)
    {
      uint64_t v17 = v16;
      if (re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(v16, (uint64_t *)&v40))
      {
        re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(v17, (uint64_t *)&v40);
        if (!*(_DWORD *)(v17 + 28))
        {
          unint64_t v18 = re::Hash<re::AssetLoadDescriptor>::operator()((uint64_t)&v43, v10);
          if (*((void *)this + 12))
          {
            unint64_t v19 = v18 % *((unsigned int *)this + 30);
            uint64_t v20 = *(unsigned int *)(*((void *)this + 13) + 4 * v19);
            if (v20 != 0x7FFFFFFF)
            {
              if (re::EqualTo<re::AssetLoadDescriptor>::operator()((uint64_t)&v44, *((void *)this + 14) + 208 * v20 + 16, v10))
              {
                *(_DWORD *)(*((void *)this + 13) + 4 * v19) = *(_DWORD *)(*((void *)this + 14)
                                                                          + 208 * v20
                                                                          + 8) & 0x7FFFFFFF;
LABEL_27:
                re::HashTable<re::AssetLoadDescriptor,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::EntryWithHash::free(*((void *)this + 14) + 208 * v20);
                uint64_t v23 = *((void *)this + 14) + 208 * v20;
                int v24 = *((_DWORD *)this + 34);
                *(_DWORD *)(v23 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(v23 + 8) & 0x80000000 | *((_DWORD *)this + 33);
                --*((_DWORD *)this + 31);
                *((_DWORD *)this + 33) = v20;
                *((_DWORD *)this + 34) = v24 + 1;
              }
              else
              {
                while (1)
                {
                  uint64_t v21 = v20;
                  uint64_t v22 = *((void *)this + 14);
                  uint64_t v20 = *(_DWORD *)(v22 + 208 * v20 + 8) & 0x7FFFFFFF;
                  if (v20 == 0x7FFFFFFF) {
                    break;
                  }
                  if (re::EqualTo<re::AssetLoadDescriptor>::operator()((uint64_t)&v44, v22 + 208 * v20 + 16, v10))
                  {
                    *(_DWORD *)(*((void *)this + 14) + 208 * v21 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*((void *)this + 14)
                                                                                    + 208 * v21
                                                                                    + 8) & 0x80000000 | *(_DWORD *)(*((void *)this + 14) + 208 * v20 + 8) & 0x7FFFFFFF;
                    goto LABEL_27;
                  }
                }
              }
            }
          }
        }
      }
    }
    v10 += 144;
  }
  while (v10 != v11);
  if (*(void *)this)
  {
    unint64_t v3 = v40;
LABEL_30:
    unint64_t v25 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v3 ^ (v3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v3 ^ (v3 >> 30))) >> 27));
    unint64_t v26 = (v25 ^ (v25 >> 31)) % *((unsigned int *)this + 6);
    uint64_t v27 = *((void *)this + 1);
    uint64_t v28 = *(unsigned int *)(v27 + 4 * v26);
    if (v28 != 0x7FFFFFFF)
    {
      uint64_t v29 = *((void *)this + 2);
      uint64_t v30 = v29 + (v28 << 6);
      if (*(void *)(v30 + 16) == v3)
      {
        *(_DWORD *)(v27 + 4 * v26) = *(_DWORD *)(v30 + 8) & 0x7FFFFFFF;
LABEL_36:
        uint64_t v34 = *((void *)this + 2);
        uint64_t v35 = v34 + (v28 << 6);
        int v38 = *(_DWORD *)(v35 + 8);
        long long v37 = (int *)(v35 + 8);
        int v36 = v38;
        if (v38 < 0)
        {
          *long long v37 = v36 & 0x7FFFFFFF;
          re::DynamicArray<re::AssetLoadDescriptor>::deinit(v34 + (v28 << 6) + 24);
          uint64_t v34 = *((void *)this + 2);
          int v36 = *(_DWORD *)(v34 + (v28 << 6) + 8);
        }
        int v39 = *((_DWORD *)this + 10);
        *(_DWORD *)(v34 + (v28 << 6) + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *((_DWORD *)this + 9) | v36 & 0x80000000;
        --*((_DWORD *)this + 7);
        *((_DWORD *)this + 9) = v28;
        *((_DWORD *)this + 10) = v39 + 1;
      }
      else
      {
        while (1)
        {
          unsigned int v31 = v28;
          int v32 = *(_DWORD *)(v29 + (v28 << 6) + 8);
          uint64_t v28 = v32 & 0x7FFFFFFF;
          if ((v32 & 0x7FFFFFFF) == 0x7FFFFFFF) {
            break;
          }
          uint64_t v33 = v29 + (v28 << 6);
          if (*(void *)(v33 + 16) == v3)
          {
            *(_DWORD *)(v29 + ((unint64_t)v31 << 6) + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(v29 + ((unint64_t)v31 << 6) + 8) & 0x80000000 | *(_DWORD *)(v33 + 8) & 0x7FFFFFFF;
            goto LABEL_36;
          }
        }
      }
    }
  }
}

unint64_t re::internal::AssetIdLoadDescriptorTable::addNewMutable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a2;
  unint64_t result = re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(a1, &v6);
  if ((result & 1) == 0)
  {
    re::internal::AssetIdLoadDescriptorTable::insertIntoMutableTables(a1, v6, *(void *)(a3 + 16), *(uint64_t **)(a3 + 32));
    return re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(a1, &v6, (uint64_t *)a3);
  }
  return result;
}

void re::AssetManager::assetTypeFromString(os_unfair_lock_s *this@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = this + 16;
  os_unfair_lock_lock(this + 16);
  uint64_t v8 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)&this[18], (uint64_t)&v15);
  if (v15 && (v16 & 1) != 0) {
    (*(void (**)(void))(*(void *)v15 + 40))();
  }
  os_unfair_lock_unlock(v6);
  if (v8)
  {
    uint64_t v9 = *(void *)(*(void *)v8 + 264);
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v9;
  }
  else
  {
    re::AssetManager::parseAssetPath((re::AssetManager *)this, a2, 0, 0, (uint64_t)&v15);
    if ((_BYTE)v15)
    {
      *(void *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v17[7];
      char v10 = 1;
    }
    else
    {
      long long v11 = v16;
      re::DynamicString::DynamicString((re::DynamicString *)&v12, (const re::DynamicString *)v17);
      char v10 = 0;
      *(_OWORD *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v11;
      *(void *)(a3 + 24) = v12;
      *(void *)(a3 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v14;
      *(_OWORD *)(a3 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v13;
    }
    *(unsigned char *)a3 = v10;
    re::Result<re::AssetPath,re::DetailedError>::~Result(&v15);
  }
}

double re::AssetManager::assignInitialMetadata(uint64_t a1, os_unfair_lock_s *a2, uint64_t a3)
{
  if (a3 && *(void *)(a3 + 16))
  {
    uint64_t v4 = *(void *)(a3 + 32);
    unint64_t v5 = *(os_unfair_lock_s **)(a1 + 1128);
    uint64_t v6 = (*(unsigned char *)(v4 + 8) & 1) != 0 ? *(const char **)(v4 + 16) : (const char *)(v4 + 9);
    uint64_t ProviderForScheme = re::AssetProviderRegistry::tryGetProviderForScheme(v5, v6);
    if (ProviderForScheme)
    {
      unsigned int v22 = 0;
      long long v20 = 0u;
      long long v21 = 0u;
      uint64_t v23 = 0x7FFFFFFFLL;
      (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)ProviderForScheme + 80))(ProviderForScheme, v4, &v20);
      unsigned int v9 = v22;
      if (v22)
      {
        uint64_t v10 = 0;
        long long v11 = (int *)v21;
        while (1)
        {
          int v12 = *v11;
          v11 += 14;
          if (v12 < 0) {
            break;
          }
          if (v22 == ++v10)
          {
            LODWORD(v10) = v22;
            break;
          }
        }
      }
      else
      {
        LODWORD(v10) = 0;
      }
      if (v22 != v10)
      {
        uint64_t v13 = v10;
        uint64_t v14 = v21;
        do
        {
          uint64_t v15 = v14 + 56 * v13;
          if (*(unsigned char *)(v15 + 32)) {
            long long v16 = *(const char **)(v14 + 56 * v13 + 40);
          }
          else {
            long long v16 = (const char *)(v14 + 56 * v13 + 33);
          }
          uint64_t v17 = (const re::StringID *)(v15 + 8);
          os_unfair_lock_lock(a2 + 96);
          re::internal::AssetEntry::setOrClearMetadata_stateLocked((re::internal::AssetEntry *)a2, v17, v16);
          os_unfair_lock_unlock(a2 + 96);
          uint64_t v14 = v21;
          if (v22 <= (int)v10 + 1) {
            unsigned int v18 = v10 + 1;
          }
          else {
            unsigned int v18 = v22;
          }
          while (1)
          {
            uint64_t v13 = (v10 + 1);
            if (v18 - 1 == v10) {
              break;
            }
            LODWORD(v10) = v10 + 1;
            unsigned int v19 = v13;
            if ((*(_DWORD *)(v21 + 56 * v13) & 0x80000000) != 0) {
              goto LABEL_25;
            }
          }
          unsigned int v19 = v18;
LABEL_25:
          LODWORD(v10) = v19;
        }
        while (v9 != v19);
      }
      return re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v20);
    }
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::SharedPtr<re::internal::AssetEntry>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::SharedPtr<re::internal::AssetEntry>&>(uint64_t a1, const re::DynamicString *a2, uint64_t *a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v19, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    uint64_t v11 = *(unsigned int *)(a1 + 36);
    if (v11 == 0x7FFFFFFF)
    {
      uint64_t v11 = *(unsigned int *)(a1 + 32);
      int v12 = v11;
      if (v11 == *(_DWORD *)(a1 + 24))
      {
        re::HashTable<re::DynamicString,re::SharedPtr<re::internal::AssetEntry>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
        LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7 % *(unsigned int *)(a1 + 24);
        int v12 = *(_DWORD *)(a1 + 32);
      }
      *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v12 + 1;
      uint64_t v13 = *(void *)(a1 + 16);
      int v14 = *(_DWORD *)(v13 + 56 * v11 + 8);
    }
    else
    {
      uint64_t v13 = *(void *)(a1 + 16);
      int v14 = *(_DWORD *)(v13 + 56 * v11 + 8);
      *(_DWORD *)(a1 + 36) = v14 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v13 + 56 * v11 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v14 | 0x80000000;
    *(_DWORD *)(*(void *)(a1 + 16) + 56 * v11 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 56 * v11 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v8);
    *(void *)(*(void *)(a1 + 16) + 56 * v11) = v7;
    re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 56 * v11 + 16), a2);
    uint64_t v15 = *a3;
    *(void *)(*(void *)(a1 + 16) + 56 * v11 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *a3;
    if (v15) {
      id v16 = (id)(v15 + 8);
    }
    *(_DWORD *)(*(void *)(a1 + 8) + 4 * vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v11;
    ++*(_DWORD *)(a1 + 28);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v17 = *(void *)(a1 + 16) + 56 * v11;
    return v17 + 48;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 56 * v9 + 16, (uint64_t)a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 56 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v17 = v10 + 56 * v9;
  return v17 + 48;
}

uint64_t re::AssetManager::assignCompiledAssetDataToAssetHandle(uint64_t *a1, void *a2, uint64_t a3, int a4)
{
  uint64_t v8 = *(void *)(a3 + 8);
  if (atomic_load((unsigned int *)(v8 + 704))) {
    re::AssetManager::unloadAssetAsync((uint64_t)a1, *(void *)(a3 + 8), 1);
  }
  uint64_t v10 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(a1[130], *(void *)(v8 + 264));
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 384));
  re::internal::AssetEntry::setIsLoading_locked((re::internal::AssetEntry *)v8, 1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 384));
  re::AssetManager::processAssetPointer((re::AssetManager *)a1, a2, (re::internal::AssetEntry *)v8);
  if (*(void *)(v8 + 112) == -1) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *(void *)(v8 + 112);
  }
  re::AssetSignpost::ScopeGuard::ScopeGuard((re::AssetSignpost::ScopeGuard *)v20, 2056, v11, **(const char ***)(*(void *)(a3 + 8) + 264));
  uint64_t v12 = (*(uint64_t (**)(uint64_t, void *, void, void))(*(void *)v10 + 24))(v10, a2, 0, 0);
  if (v12)
  {
    re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v20);
    os_unfair_lock_lock((os_unfair_lock_t)(v8 + 384));
    re::internal::SharedAssetPointer::makeSharedAssetPointer((re::internal::SharedAssetPointer *)a2, v20);
    if (*(void *)(v8 + 112) == -1) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = *(void *)(v8 + 112);
    }
    re::internal::AssetEntry::LoadState::setLoadingAssetPointer_locked(v8 + 704, (uint64_t *)v20, v13);
    if (v20[0]) {

    }
    if (a4) {
      re::AssetManager::queueEntryForRegistration_entryStateLocked((os_unfair_lock_s *)a1, (std::chrono::system_clock::time_point *)v8);
    }
    else {
      re::AssetManager::entryReadyForRegistration_entryStateLocked((os_unfair_lock_s *)a1, (re::internal::AssetEntry *)v8, v14, v15);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 384));
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v8 + 384));
    id v16 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, void *))(*(void *)v10 + 16))(v10, a2);
    re::AssetManager::putEntryInFailedState_entryStateLocked(v17, v8, 303, (uint64_t)v19);
    if (*(void *)&v19[0])
    {
      if (BYTE8(v19[0])) {
        (*(void (**)(void))(**(void **)&v19[0] + 40))();
      }
      memset(v19, 0, sizeof(v19));
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 384));
    re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v20);
  }
  return v12;
}

uint64_t re::AssetManager::processAssetPointer(re::AssetManager *this, void *a2, re::internal::AssetEntry *a3)
{
  uint64_t v66 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*((void *)this + 130), *((void *)a3 + 33));
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v66 + 160))(&v76);
  unsigned int v74 = 0;
  long long v72 = 0u;
  long long v73 = 0u;
  uint64_t v75 = 0x7FFFFFFFLL;
  if (v77)
  {
    uint64_t v68 = 0;
    unsigned int v69 = 0;
    uint64_t v3 = 0;
    int v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = v78;
    uint64_t v70 = &v78[v77];
    while (1)
    {
      uint64_t v8 = *v7;
      re::AssetHandle::getOrBuildSerializationString(*v7, (re::DynamicString *)&buf);
      if (BYTE8(buf)) {
        uint64_t v9 = *((void *)&buf + 1) >> 1;
      }
      else {
        uint64_t v9 = BYTE8(buf) >> 1;
      }
      if (v9)
      {
        unint64_t v10 = re::Hash<re::DynamicString>::operator()((uint64_t)&v79, (uint64_t)&buf);
        unint64_t v11 = v10;
        if ((void)v72)
        {
          unint64_t v12 = v10 % v69;
          uint64_t v13 = *(unsigned int *)(v3 + 4 * v12);
          if (v13 != 0x7FFFFFFF)
          {
            while (!re::DynamicString::operator==(v6 + 56 * v13 + 16, (uint64_t)&buf))
            {
              uint64_t v13 = *(_DWORD *)(v6 + 56 * v13 + 8) & 0x7FFFFFFF;
              if (v13 == 0x7FFFFFFF) {
                goto LABEL_13;
              }
            }
            goto LABEL_19;
          }
        }
        else
        {
          unint64_t v12 = 0;
        }
LABEL_13:
        uint64_t v14 = v75;
        if (v75 == 0x7FFFFFFF)
        {
          unsigned int v15 = v5;
          unsigned int v69 = DWORD2(v73);
          if (v5 == DWORD2(v73))
          {
            re::HashTable<re::DynamicString,re::AssetHandle const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity((uint64_t)&v72, 2 * v4);
            unsigned int v15 = v74;
            unint64_t v12 = v11 % DWORD2(v73);
            uint64_t v6 = v73;
            uint64_t v68 = *((void *)&v72 + 1);
            unsigned int v69 = DWORD2(v73);
          }
          uint64_t v16 = v15 + 1;
          unsigned int v74 = v15 + 1;
          uint64_t v14 = v5;
          int v17 = *(_DWORD *)(v6 + 56 * v5 + 8);
          uint64_t v3 = v68;
        }
        else
        {
          int v17 = *(_DWORD *)(v6 + 56 * v75 + 8);
          LODWORD(v75) = v17 & 0x7FFFFFFF;
          uint64_t v16 = v5;
          LODWORD(v5) = v14;
        }
        uint64_t v18 = 56 * v14;
        *(_DWORD *)(v6 + v18 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v17 | 0x80000000;
        uint64_t v6 = v73;
        uint64_t v19 = v73 + v18;
        *(_DWORD *)(v19 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(v73 + v18 + 8) & 0x80000000 | *(_DWORD *)(v3 + 4 * v12);
        *(void *)uint64_t v19 = v11;
        re::DynamicString::DynamicString((re::DynamicString *)(v19 + 16), (const re::DynamicString *)&buf);
        *(void *)(v19 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v8;
        *(_DWORD *)(v3 + 4 * v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v5;
        int v4 = ++HIDWORD(v73);
        ++HIDWORD(v75);
        uint64_t v5 = v16;
      }
LABEL_19:
      if (void)buf && (BYTE8(buf)) {
        (*(void (**)(void))(*(void *)buf + 40))();
      }
      if (++v7 == v70) {
        goto LABEL_25;
      }
    }
  }
  int v4 = 0;
LABEL_25:
  int v20 = v4;
  re::AssetHandle::AssetHandle((re::AssetHandle *)v71, a3);
  long long v21 = (uint64_t **)v78;
  *(_DWORD *)unint64_t v84 = 0;
  long long buf = 0u;
  long long v83 = 0u;
  *(void *)&v84[4] = 0x7FFFFFFFLL;
  unsigned int v22 = this;
  if (v77)
  {
    uint64_t v23 = 8 * v77;
    do
    {
      int v24 = *v21;
      if (!(*v21)[1])
      {
        uint64_t v25 = v24[2];
        if (v25)
        {
          if (*(unsigned char *)(v25 + 8)) {
            unint64_t v26 = *(char **)(v25 + 16);
          }
          else {
            unint64_t v26 = (char *)(v25 + 9);
          }
          uint64_t v27 = (const re::AssetPath *)re::AssetHandle::legacy_assetPath((re::AssetHandle *)v71);
          re::AssetManager::assetHandleWithParentAssetPath(this, v26, v27, 1, &v79);
          uint64_t v28 = v24[1];
          uint64_t v29 = v24[2];
          v24[1] = v80;
          uint64_t v80 = v28;
          uint64_t v30 = *v24;
          *int v24 = 0;
          *int v24 = v79;
          v24[2] = v81;
          uint64_t v79 = v30;
          uint64_t v81 = v29;
          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v79);
        }
      }
      ++v21;
      v23 -= 8;
    }
    while (v23);
  }
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&buf);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v71);
  re::AssetHandle::AssetHandle((re::AssetHandle *)&v79, a3);
  if (!*((void *)this + 143)) {
    goto LABEL_81;
  }
  unsigned int v31 = (re *)re::AssetHandle::assetInfo((re::AssetHandle *)&v79);
  if (*((_DWORD *)v31 + 22) != 8)
  {
    char v44 = *re::assetsLogObjects(v31);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_233120000, v44, OS_LOG_TYPE_DEFAULT, "Cannot share dependencies over network. Only supported for AssetId based assets.", (uint8_t *)&buf, 2u);
    }
    goto LABEL_81;
  }
  if (!v20) {
    goto LABEL_81;
  }
  int v32 = re::AssetHandle::assetInfo((re::AssetHandle *)&v79);
  if ((unint64_t)(v32[10] + 1) >= 2) {
    uint64_t v33 = v32[10];
  }
  else {
    uint64_t v33 = 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)this + 16);
  *(void *)&long long buf = v33;
  uint64_t v34 = re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 120, (uint64_t *)&buf);
  if (v34)
  {
    uint64_t v35 = *(void *)(v34 + 32);
    uint64_t v36 = *(void *)(v35 + 8);
    uint64_t v37 = *(void *)(v35 + 16);
    uint64_t v38 = v35 + 9;
    int v39 = (const char *)((v36 & 1) != 0 ? v37 : v38);
    if (!strcmp(v39, "NetworkAsset"))
    {
      os_unfair_lock_unlock((os_unfair_lock_t)this + 16);
      goto LABEL_81;
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)this + 16);
  *(_DWORD *)unint64_t v84 = 0;
  long long buf = 0u;
  long long v83 = 0u;
  *(void *)&v84[4] = 0x7FFFFFFFLL;
  unsigned int v40 = v74;
  if (v74)
  {
    uint64_t v41 = 0;
    char v42 = (int *)(v73 + 8);
    while (1)
    {
      int v43 = *v42;
      v42 += 14;
      if (v43 < 0) {
        break;
      }
      if (v74 == ++v41)
      {
        LODWORD(v41) = v74;
        break;
      }
    }
  }
  else
  {
    LODWORD(v41) = 0;
  }
  if (v74 == v41) {
    goto LABEL_79;
  }
  uint64_t v45 = v41;
  uint64_t v46 = v73;
  unsigned int v47 = v74;
  do
  {
    uint64_t v48 = v46 + 56 * v45;
    uint64_t v51 = *(void *)(v48 + 48);
    __int16 v50 = (re::AssetHandle **)(v48 + 48);
    uint64_t v49 = v51;
    if (!v51 || !*(void *)(v49 + 8) || re::AssetManager::isDeviceAsset((uint64_t)v22, v49, 13)) {
      goto LABEL_69;
    }
    long long v52 = (re::DynamicString *)(v50 - 4);
    uint64_t v53 = *((void *)re::AssetHandle::assetInfo(*v50) + 10);
    if (v53 == -1) {
      uint64_t v53 = 0;
    }
    v71[0] = v53;
    unint64_t v54 = re::Hash<re::DynamicString>::operator()((uint64_t)v85, (uint64_t)(v50 - 4));
    unint64_t v55 = v54;
    if ((void)buf)
    {
      unint64_t v56 = v54 % DWORD2(v83);
      uint64_t v57 = *(unsigned int *)(*((void *)&buf + 1) + 4 * v56);
      if (v57 != 0x7FFFFFFF)
      {
        uint64_t v58 = v83;
        while (!re::DynamicString::operator==(v58 + 56 * v57 + 16, (uint64_t)v52))
        {
          uint64_t v57 = *(_DWORD *)(v58 + 56 * v57 + 8) & 0x7FFFFFFF;
          if (v57 == 0x7FFFFFFF) {
            goto LABEL_67;
          }
        }
        goto LABEL_68;
      }
    }
    else
    {
      LODWORD(v56) = 0;
    }
LABEL_67:
    re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy((uint64_t)&buf, v56, v55, v52, v71);
    ++*(_DWORD *)&v84[8];
LABEL_68:
    unsigned int v47 = v74;
    uint64_t v46 = v73;
    unsigned int v22 = this;
LABEL_69:
    if (v47 <= (int)v41 + 1) {
      unsigned int v59 = v41 + 1;
    }
    else {
      unsigned int v59 = v47;
    }
    while (1)
    {
      uint64_t v45 = (v41 + 1);
      if (v59 - 1 == v41) {
        break;
      }
      LODWORD(v41) = v41 + 1;
      unsigned int v60 = v45;
      if ((*(_DWORD *)(v46 + 56 * v45 + 8) & 0x80000000) != 0) {
        goto LABEL_76;
      }
    }
    unsigned int v60 = v59;
LABEL_76:
    LODWORD(v41) = v60;
  }
  while (v40 != v60);
  if (HIDWORD(v83)) {
    re::NetworkActionQueue::queueSyncActionShareDependencies((uint64_t)v22 + 704, v33, (uint64_t)&buf);
  }
LABEL_79:
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&buf);
LABEL_81:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v79);
  (*(void (**)(long long *__return_ptr))(*(void *)v66 + 168))(&buf);
  if ((void)v83)
  {
    uint64_t v61 = *(const re::AssetHandle **)v84;
    uint64_t v62 = 24 * v83;
    do
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)&v79, v61);
      re::AssetHandle::loadAsync((re::AssetHandle *)&v79);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v79);
      uint64_t v61 = (const re::AssetHandle *)((char *)v61 + 24);
      v62 -= 24;
    }
    while (v62);
  }
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)&buf);
  double v63 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v72);
  uint64_t result = v76;
  if (v76)
  {
    if (v78) {
      return (*(uint64_t (**)(double))(*(void *)v76 + 40))(v63);
    }
  }
  return result;
}

void re::AssetManager::putEntryInFailedState_entryStateLocked(re *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v7 = *re::assetsLogObjects(a1);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    uint64_t v8 = *(void *)(a2 + 176);
    if ((*(unsigned char *)(a2 + 168) & 1) == 0) {
      uint64_t v8 = a2 + 169;
    }
    if (*(unsigned char *)(a4 + 8)) {
      uint64_t v9 = *(void *)(a4 + 16);
    }
    else {
      uint64_t v9 = a4 + 9;
    }
    int v10 = 136315394;
    uint64_t v11 = v8;
    __int16 v12 = 2080;
    uint64_t v13 = v9;
    _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Asset %s failure: %s", (uint8_t *)&v10, 0x16u);
  }
  *(unsigned char *)(a2 + 417) = 0;
  re::internal::AssetEntry::LoadState::setLoadFailure_locked(a2 + 704, a3, (re::DynamicString *)a4);
  re::internal::AssetEntry::setIsLoading_locked((re::internal::AssetEntry *)a2, 0);
  re::internal::AssetEntry::cancelResourceRequest_stateLocked((re::internal::AssetEntry *)a2);
}

void re::AssetManager::queueEntryForRegistration_entryStateLocked(os_unfair_lock_s *this, std::chrono::system_clock::time_point *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v4 = *re::assetsLogObjects((re *)this);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    if (a2[21].__d_.__rep_) {
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = (char *)a2[22].__d_.__rep_;
    }
    else {
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = (char *)&a2[21].__d_.__rep_ + 1;
    }
    *(_DWORD *)int v10 = 136315138;
    *(void *)&v10[4] = rep;
    _os_log_debug_impl(&dword_233120000, v4, OS_LOG_TYPE_DEBUG, "Asset '%s' queued for registration.", v10, 0xCu);
  }
  if (a2[14].__d_.__rep_ == -1) {
    LODWORD(v6) = 0;
  }
  else {
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v6 = a2[14].__d_.__rep_;
  }
  unint64_t v7 = (const char **)a2[33].__d_.__rep_;
  if (v7) {
    uint64_t v8 = *v7;
  }
  else {
    uint64_t v8 = 0;
  }
  re::AssetSignpost::fireImpulse((re::AssetSignpost *)0x810, v6, v8, v5);
  a2[51].__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  LOBYTE(a2[52].__d_.__rep_) = 1;
  os_unfair_lock_lock(this + 16);
  re::internal::AssetEntry::makeAssetReference((re::internal::AssetEntry *)a2, (re::internal::AssetReference **)v10);
  re::DynamicArray<re::SharedPtr<re::internal::AssetReference>>::add((_anonymous_namespace_ *)&this[66], v10);
  if (*(void *)v10) {

  }
  os_unfair_lock_unlock(this + 16);
}

void re::AssetManager::entryReadyForRegistration_entryStateLocked(os_unfair_lock_s *this, re::internal::AssetEntry *a2, uint64_t a3, const char *a4)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (re::assetsHighFrequencyLoggingEnabled(void)::onceToken != -1) {
    dispatch_once(&re::assetsHighFrequencyLoggingEnabled(void)::onceToken, &__block_literal_global_1);
  }
  if (re::assetsHighFrequencyLoggingEnabled(void)::shouldLog)
  {
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v6 = *re::assetsLogObjects((re *)this);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      if (*((void *)a2 + 21)) {
        int v10 = (char *)*((void *)a2 + 22);
      }
      else {
        int v10 = (char *)a2 + 169;
      }
      *(_DWORD *)uint64_t v11 = 136315138;
      *(void *)&v11[4] = v10;
      _os_log_debug_impl(&dword_233120000, v6, OS_LOG_TYPE_DEBUG, "Registering asset '%s'", v11, 0xCu);
    }
  }
  if (*((void *)a2 + 14) == -1) {
    LODWORD(v7) = 0;
  }
  else {
    uint64_t v7 = *((void *)a2 + 14);
  }
  uint64_t v8 = (const char **)*((void *)a2 + 33);
  if (v8) {
    uint64_t v9 = *v8;
  }
  else {
    uint64_t v9 = 0;
  }
  re::AssetSignpost::fireImpulse((re::AssetSignpost *)0x810, v7, v9, a4);
  re::AssetManager::processAssetRegistration_entryStateLocked((re::AssetManager *)this, a2);
  if (*((unsigned char *)a2 + 416))
  {
    os_unfair_lock_lock(this + 16);
    re::internal::AssetEntry::makeAssetReference(a2, (re::internal::AssetReference **)v11);
    re::DynamicArray<re::SharedPtr<re::internal::AssetReference>>::add((_anonymous_namespace_ *)&this[66], v11);
    if (*(void *)v11) {

    }
    os_unfair_lock_unlock(this + 16);
  }
}

void re::AssetManager::createAssetEntryForNamedAsset(os_unfair_lock_s *this@<X0>, void *a2@<X1>, const re::AssetPath *a3@<X3>, uint64_t *a4@<X8>)
{
  re::AssetManager::assetHandle(this, a3, 1, a4);
  re::AssetHandle::AssetHandle((re::AssetHandle *)v8, (const re::AssetHandle *)a4);
  re::AssetManager::assignCompiledAssetDataToAssetHandle((uint64_t *)this, a2, (uint64_t)v8, 0);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
}

void re::AssetManager::setAssetPointerForExistingAsset(re::AssetManager *this, void *a2, const re::AssetHandle *a3, int a4, int a5)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  re::AssetHandle::AssetHandle((re::AssetHandle *)v31, a3);
  re::AssetManager::assignCompiledAssetDataToAssetHandle((uint64_t *)this, a2, (uint64_t)v31, a4);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v31);
  if (a5)
  {
    unint64_t v10 = *((void *)re::AssetHandle::assetInfo(a3) + 10);
    uint64_t v11 = (char *)re::AssetHandle::legacy_assetPath(a3);
    re::DynamicString::DynamicString((re::DynamicString *)&v29, (const re::DynamicString *)(v11 + 40));
    lock = (os_unfair_lock_s *)((char *)this + 64);
    os_unfair_lock_lock((os_unfair_lock_t)this + 16);
    uint64_t v12 = (re::AssetManager *)((char *)this + 120);
    *(void *)long long buf = v10;
    uint64_t v13 = re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 120, (uint64_t *)buf);
    uint64_t v14 = *(void *)(v13 + 16);
    if (v14)
    {
      uint64_t v15 = *(void *)(v13 + 32);
      uint64_t v16 = v15 + 144 * v14;
      while (1)
      {
        if (*(unsigned char *)(*((void *)a3 + 1) + 312))
        {
          int v17 = (*(void *)(v15 + 8) & 1) != 0 ? *(const char **)(v15 + 16) : (const char *)(v15 + 9);
          if (!strcmp(v17, "MemoryAsset")) {
            break;
          }
        }
        uint64_t v18 = (os_unfair_lock_s *)*((void *)this + 141);
        uint64_t v19 = v18 + 16;
        os_unfair_lock_lock(v18 + 16);
        LOBYTE(v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)&v18[30], v15);
        os_unfair_lock_unlock(v19);
        if (v18) {
          break;
        }
        uint64_t v20 = *(void *)(v15 + 8);
        uint64_t v21 = *(void *)(v15 + 16);
        uint64_t v22 = v15 + 9;
        uint64_t v23 = (const char *)((v20 & 1) != 0 ? v21 : v22);
        uint64_t v13 = strcmp(v23, "NamedAsset");
        if (!v13) {
          break;
        }
        uint64_t v15 = v22 + 135;
        if (v15 == v16) {
          goto LABEL_15;
        }
      }
    }
    else
    {
LABEL_15:
      if (*(unsigned char *)(*((void *)a3 + 1) + 312))
      {
        int v24 = *re::assetsLogObjects((re *)v13);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 134217984;
          *(void *)&uint8_t buf[4] = v10;
          _os_log_error_impl(&dword_233120000, v24, OS_LOG_TYPE_ERROR, "No memory load descriptor for MemoryAsset with id:%llu", buf, 0xCu);
        }
      }
      re::internal::AssetIdLoadDescriptorTable::remove(v12, v10);
      MemoryAssetProvider::makeDescriptor((MemoryAssetProvider *)&v29, **(const re::DynamicString ***)(*((void *)a3 + 1) + 264), (uint64_t)buf);
      uint64_t v28 = 0;
      memset(v26, 0, sizeof(v26));
      int v27 = 0;
      re::DynamicArray<re::AssetLoadDescriptor>::add((_anonymous_namespace_ *)v26, (re::DynamicString *)buf);
      if (*(unsigned char *)(*((void *)a3 + 1) + 257)) {
        re::internal::AssetIdLoadDescriptorTable::addNewMutable((uint64_t)v12, v10, (uint64_t)v26);
      }
      else {
        re::internal::AssetIdLoadDescriptorTable::addNewImmutable((uint64_t)v12, v10, v26);
      }
      re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)v26);
      if ((void)v43)
      {
        if (BYTE8(v43)) {
          (*(void (**)(void))(*(void *)v43 + 40))();
        }
        long long v43 = 0u;
        long long v44 = 0u;
      }
      if (v38)
      {
        if (v42) {
          (*(void (**)(void))(*(void *)v38 + 40))();
        }
        uint64_t v42 = 0;
        uint64_t v39 = 0;
        uint64_t v40 = 0;
        uint64_t v38 = 0;
        ++v41;
      }
      if (v33)
      {
        if (v37) {
          (*(void (**)(void))(*(void *)v33 + 40))();
        }
        uint64_t v37 = 0;
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        uint64_t v33 = 0;
        ++v36;
      }
      if (*(void *)buf && (buf[8] & 1) != 0) {
        (*(void (**)(void))(**(void **)buf + 40))();
      }
    }
    os_unfair_lock_unlock(lock);
    if (v29)
    {
      if (v30) {
        (*(void (**)(void))(*(void *)v29 + 40))();
      }
    }
  }
}

const re::IntrospectionBase *MemoryAssetProvider::makeDescriptor@<X0>(MemoryAssetProvider *this@<X0>, const re::DynamicString *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  uint64_t v7 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)a3, 0);
  *(void *)(a3 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(a3 + 40) = 0;
  *(_DWORD *)(a3 + 56) = 0;
  *(void *)(a3 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 0;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(void *)(a3 + 136) = 0;
  re::DynamicString::setCapacity((void *)(a3 + 112), 0);
  uint64_t v12 = "MemoryAsset";
  uint64_t v13 = 11;
  re::DynamicString::operator=((re::DynamicString *)a3, (uint64_t)&v12);
  size_t v8 = strlen((const char *)a2);
  uint64_t v12 = (const char *)a2;
  uint64_t v13 = v8;
  re::DynamicString::operator=((re::DynamicString *)(a3 + 112), (uint64_t)&v12);
  re::DynamicString::DynamicString((re::DynamicString *)&v10, this);
  re::AssetLoadDescriptor::setIntrospectableData((char **)a3, (const re::IntrospectionBase *)MemoryAssetProvider::s_loadDescriptorParametersIntrospect, &v10, 0);
  uint64_t result = v10;
  if (v10)
  {
    if (v11) {
      return (const re::IntrospectionBase *)(*(uint64_t (**)(void))(*(void *)v10 + 40))();
    }
  }
  return result;
}

void re::AssetManager::createNewImmutableAssetHandleFromExistingAssetData(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, re::AssetHandle *a4@<X3>, int a5@<W4>, unsigned char *a6@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(*((void *)a4 + 1) + 312))
  {
    uuid_generate_random((unsigned __int8 *)&v21);
    re::AssetManager::createNewImmutableAssetHandle((os_unfair_lock_s *)a1, a2, (*((void *)&v21 + 1) + ((void)v21 << 6) + ((unint64_t)v21 >> 2) - 0x61C8864680B583E9) ^ v21, a3, (uint64_t)a6);
    if (*a6)
    {
      uint64_t v13 = (re::AssetHandle *)(a6 + 8);
      re::AssetManager::transferAssetHandleDataToEmptyAssetHandle((re::AssetManager *)a1, a4, v13);
      if (a5)
      {
        unsigned __int8 v14 = atomic_load((unsigned __int8 *)(a1 + 1345));
        if ((v14 & 1) == 0 && !*(unsigned char *)(a1 + 1346)) {
          dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 520));
        }
        re::AssetHandle::internalRegisterAsset(v13);
      }
    }
    else
    {
      uint64_t v16 = *re::assetsLogObjects(v12);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        uint64_t v19 = re::AssetHandle::assetInfo(a4);
        if (v19[17]) {
          uint64_t v20 = (char *)v19[18];
        }
        else {
          uint64_t v20 = (char *)v19 + 137;
        }
        LODWORD(v21) = 136315138;
        *(void *)((char *)&v21 + 4) = v20;
        _os_log_error_impl(&dword_233120000, v16, OS_LOG_TYPE_ERROR, "Failed to create new immutable handle from given existingAsset '%s'", (uint8_t *)&v21, 0xCu);
      }
    }
  }
  else
  {
    uint64_t v15 = *re::assetsLogObjects((re *)a1);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      int v17 = re::AssetHandle::assetInfo(a4);
      if (v17[17]) {
        uint64_t v18 = (char *)v17[18];
      }
      else {
        uint64_t v18 = (char *)v17 + 137;
      }
      LODWORD(v21) = 136315138;
      *(void *)((char *)&v21 + 4) = v18;
      _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "Can't create new immutable handle from given non memory asset '%s'", (uint8_t *)&v21, 0xCu);
    }
    *a6 = 0;
  }
}

void re::AssetManager::transferAssetHandleDataToEmptyAssetHandle(re::AssetManager *this, re::AssetHandle *a2, re::AssetHandle *a3)
{
  re::AssetManager::copyAssetHandleDataToEmptyAssetHandle(this, a2, a3);
  re::AssetHandle::internalUnregisterAsset(a2);
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    unint64_t v6 = *(void *)(v5 + 264);
  }
  else {
    unint64_t v6 = 0;
  }
  uint64_t v7 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*((void *)this + 130), v6);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 384));
  uint64_t v8 = re::internal::AssetEntry::LoadState::clearAndReturnAssetPointer_locked((re::internal::AssetEntry::LoadState *)(v5 + 704));
  (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v8);
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 384));
}

void re::AssetManager::copyNewImmutableAssetHandleFromExistingAssetData(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, re::AssetHandle *a4@<X3>, unsigned char *a5@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  unsigned __int8 v10 = atomic_load((unsigned __int8 *)(a1 + 1345));
  if ((v10 & 1) == 0 && !*(unsigned char *)(a1 + 1346)) {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 520));
  }
  uuid_generate_random((unsigned __int8 *)&v16);
  re::AssetManager::createNewImmutableAssetHandle((os_unfair_lock_s *)a1, a2, (*((void *)&v16 + 1) + ((void)v16 << 6) + ((unint64_t)v16 >> 2) - 0x61C8864680B583E9) ^ v16, a3, (uint64_t)a5);
  if (*a5)
  {
    uint64_t v12 = (re::AssetHandle *)(a5 + 8);
    re::AssetManager::copyAssetHandleDataToEmptyAssetHandle((re::AssetManager *)a1, a4, v12);
    re::AssetHandle::internalRegisterAsset(v12);
  }
  else
  {
    uint64_t v13 = *re::assetsLogObjects(v11);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      unsigned __int8 v14 = re::AssetHandle::assetInfo(a4);
      if (v14[17]) {
        uint64_t v15 = (char *)v14[18];
      }
      else {
        uint64_t v15 = (char *)v14 + 137;
      }
      LODWORD(v16) = 136315138;
      *(void *)((char *)&v16 + 4) = v15;
      _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "Failed to create new immutable handle from given existingAsset '%s'", (uint8_t *)&v16, 0xCu);
    }
  }
}

void re::AssetManager::copyAssetHandleDataToEmptyAssetHandle(re::AssetManager *this, re::AssetHandle *a2, re::AssetHandle *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v5 = (os_unfair_lock_s *)*((void *)a2 + 1);
  os_unfair_lock_lock(v5 + 96);
  uint64_t v6 = *((void *)a3 + 1);
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 384));
  uint64_t v7 = (re::AssetLoader *)re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*((void *)this + 130), *(void *)(v6 + 264));
  uint64_t v8 = (void *)re::internal::AssetEntry::assetPointer((re::internal::AssetEntry *)v5);
  uint64_t v9 = (re::internal::SharedAssetPointer *)re::AssetLoader::cloneAsset(v7, v8);
  uint64_t v10 = re::internal::AssetEntry::LoadState::clearAndReturnAssetPointer_locked((re::internal::AssetEntry::LoadState *)(v6 + 704));
  if (v10) {
    (*(void (**)(re::AssetLoader *, uint64_t))(*(void *)v7 + 16))(v7, v10);
  }
  re::internal::SharedAssetPointer::makeSharedAssetPointer(v9, &v16);
  re::internal::AssetEntry::LoadState::setAssetPointer_locked(v6 + 704, (uint64_t *)&v16);
  if (v16) {

  }
  if (*(void *)(v6 + 112) == -1) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *(void *)(v6 + 112);
  }
  re::AssetSignpost::ScopeGuard::ScopeGuard((re::AssetSignpost::ScopeGuard *)v19, 2056, v11, **(const char ***)(v6 + 264));
  if (((*(uint64_t (**)(re::AssetLoader *, void, void, void))(*(void *)v7 + 24))(v7, *(void *)(*(void *)(v6 + 712) + 24), 0, 0) & 1) == 0)
  {
    if (*(unsigned char *)(v6 + 168)) {
      uint64_t v12 = *(void *)(v6 + 176);
    }
    else {
      uint64_t v12 = v6 + 169;
    }
    uint64_t v13 = (re *)re::DynamicString::format((re::DynamicString *)"Failed to create runtime data for asset '%s'", (re::DynamicString *)&v16, v12);
    unsigned __int8 v14 = *re::assetsLogObjects(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      if (v17) {
        uint64_t v15 = *(unsigned char **)&v18[7];
      }
      else {
        uint64_t v15 = v18;
      }
      *(_DWORD *)long long buf = 136315138;
      long long v21 = v15;
      _os_log_error_impl(&dword_233120000, v14, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
    }
    if (v16 && (v17 & 1) != 0) {
      (*(void (**)(void))(*(void *)v16 + 40))();
    }
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v19);
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 384));
  os_unfair_lock_unlock(v5 + 96);
}

uint64_t re::AssetManager::createNewMutableAssetHandleFromExistingAssetData@<X0>(os_unfair_lock_s *a1@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, re::AssetHandle *a4@<X3>, re::AssetHandle *a5@<X8>)
{
  re::AssetManager::createNewMutableAssetHandle(a1, a2, a3, 1, a5);
  re::AssetManager::transferAssetHandleDataToEmptyAssetHandle((re::AssetManager *)a1, a4, a5);
  return re::AssetHandle::internalRegisterAsset(a5);
}

uint64_t re::AssetManager::assetHandleMemoryPath@<X0>(os_unfair_lock_s *this@<X0>, const char *a2@<X1>, const re::DynamicString **a3@<X2>, uint64_t *a4@<X8>)
{
  MemoryAssetProvider::makeDescriptor((MemoryAssetProvider *)&v9, *a3, (uint64_t)&v11);
  if (v9 && (v10 & 1) != 0) {
    (*(void (**)(void))(*(void *)v9 + 40))();
  }
  os_unfair_lock_lock(this + 16);
  re::AssetManager::assetHandle_assetTablesLocked((re::AssetManager *)this, (const re::AssetLoadDescriptor *)&v11, a4);
  os_unfair_lock_unlock(this + 16);
  if ((void)v23)
  {
    if (BYTE8(v23)) {
      (*(void (**)(void))(*(void *)v23 + 40))();
    }
    long long v23 = 0u;
    long long v24 = 0u;
  }
  if (v18)
  {
    if (v22) {
      (*(void (**)(void))(*(void *)v18 + 40))();
    }
    uint64_t v22 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v18 = 0;
    ++v21;
  }
  if (v13)
  {
    if (v17) {
      (*(void (**)(void))(*(void *)v13 + 40))();
    }
    uint64_t v17 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v13 = 0;
    ++v16;
  }
  uint64_t result = v11;
  if (v11)
  {
    if (v12) {
      return (*(uint64_t (**)(void))(*(void *)v11 + 40))();
    }
  }
  return result;
}

uint64_t re::AssetManager::createOrUpdateAssetEntryForNamedAssetDescriptor@<X0>(uint64_t a1@<X0>, void *a2@<X1>, const char **a3@<X2>, const char *a4@<X3>, unsigned int a5@<W4>, int a6@<W5>, char a7@<W6>, re::AssetHandle *a8@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  *(void *)a8 = 0;
  *((void *)a8 + 1) = 0;
  *((void *)a8 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  int v16 = *a3;
  re::NamedAssetProvider::makeDescriptor((_anonymous_namespace_ *)v45, (re::DynamicString *)v28, (uint64_t)&v29);
  if (*(void *)&v28[0])
  {
    if (BYTE8(v28[0])) {
      (*(void (**)(void))(**(void **)&v28[0] + 40))();
    }
    memset(v28, 0, sizeof(v28));
  }
  if (*(void *)v45 && (v45[8] & 1) != 0) {
    (*(void (**)(void, void))(**(void **)v45 + 40))(*(void *)v45, *(void *)&v47[2]);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  uint64_t v17 = (re *)re::AssetManager::existingMutableAssetHandles_assetTablesLocked((re::AssetManager *)v45, (re::internal::AssetTypeRegistry **)a1, (uint64_t)&v29);
  uint64_t v18 = *(void *)&v47[2];
  if (*(void *)&v47[2])
  {
    if (*(void *)&v47[2] != 1)
    {
      uint64_t v19 = *re::assetsLogObjects(v17);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        *(void *)long long v44 = a4;
        _os_log_impl(&dword_233120000, v19, OS_LOG_TYPE_DEFAULT, "createOrUpdateAssetEntryForNamedAssetDescriptor found more than one existing asset registered with name '%s'.", buf, 0xCu);
      }
    }
    re::AssetHandle::operator=((uint64_t)a8, v48);
  }
  else
  {
    re::AssetManager::createNewMutableAssetHandle((os_unfair_lock_s *)a1, (re::DynamicString *)&v29, a5, 0, (re::AssetHandle *)&v26);
    buf[0] = 1;
    *(_OWORD *)&v44[1] = v26;
    long long v26 = 0uLL;
    *(void *)&v44[5] = v27;
    uint64_t v27 = 0;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v26);
    re::AssetHandle::operator=((uint64_t)a8, (uint64_t *)&v44[1]);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v44[1]);
  }
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)v45);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  if (v18 && (a7 & 1) != 0)
  {
    int v21 = *re::assetsLogObjects(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = *((void *)re::AssetHandle::assetInfo(a8) + 10);
      if (v22 == -1) {
        uint64_t v22 = 0;
      }
      *(_DWORD *)uint64_t v45 = 134218242;
      *(void *)&v45[4] = v22;
      __int16 v46 = 2080;
      *(void *)unsigned int v47 = a4;
      _os_log_impl(&dword_233120000, v21, OS_LOG_TYPE_DEFAULT, "Not replacing contents of asset '%llu' with named asset descriptor value '%s' because preserveOriginalInNameCollision was set.", v45, 0x16u);
    }
    uint64_t v23 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(void *)(a1 + 1040), (unint64_t)a3);
    (*(void (**)(uint64_t, void *))(*(void *)v23 + 16))(v23, a2);
  }
  else
  {
    re::AssetManager::setAssetPointerForExistingAsset((re::AssetManager *)a1, a2, a8, a6, 0);
  }
  if ((void)v41)
  {
    if (BYTE8(v41)) {
      (*(void (**)(void))(*(void *)v41 + 40))();
    }
    long long v41 = 0u;
    long long v42 = 0u;
  }
  if (v36)
  {
    if (v40) {
      (*(void (**)(void))(*(void *)v36 + 40))();
    }
    uint64_t v40 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v36 = 0;
    ++v39;
  }
  if (v31)
  {
    if (v35) {
      (*(void (**)(void))(*(void *)v31 + 40))();
    }
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v31 = 0;
    ++v34;
  }
  uint64_t result = v29;
  if (v29)
  {
    if (v30) {
      return (*(uint64_t (**)(void))(*(void *)v29 + 40))();
    }
  }
  return result;
}

uint64_t re::AssetManager::newAssetEntryForNamedMemoryAsset@<X0>(os_unfair_lock_s *a1@<X0>, void *a2@<X1>, const re::DynamicString **a3@<X2>, const char *a4@<X3>, int a5@<W4>, unsigned int a6@<W5>, int a7@<W6>, const re::AssetHandle *a8@<X8>)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  *(void *)a8 = 0;
  *((void *)a8 + 1) = 0;
  *((void *)a8 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  MemoryAssetProvider::makeDescriptor((MemoryAssetProvider *)&v20, *a3, (uint64_t)&v23);
  if (v20 && (v21 & 1) != 0) {
    (*(void (**)(void))(*(void *)v20 + 40))();
  }
  if (a5)
  {
    re::AssetManager::createNewMutableAssetHandle(a1, (re::DynamicString *)&v23, a6, 1, (re::AssetHandle *)buf);
    LOBYTE(vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 1;
    long long v21 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    uint64_t v22 = v38;
    uint64_t v38 = 0;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
LABEL_7:
    re::AssetHandle::operator=((uint64_t)a8, (uint64_t *)&v21);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v21);
    goto LABEL_8;
  }
  NewImmutableAssetHandle = (re *)re::AssetManager::createNewImmutableAssetHandle(a1, (re::DynamicString *)&v23, a6, (uint64_t)&v20);
  if ((_BYTE)v20) {
    goto LABEL_7;
  }
  uint64_t v18 = *re::assetsLogObjects(NewImmutableAssetHandle);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = a4;
    _os_log_impl(&dword_233120000, v18, OS_LOG_TYPE_DEFAULT, "Failed to create new Immutable Memory Asset with '%s' path.", buf, 0xCu);
  }
  os_unfair_lock_lock(a1 + 16);
  uint64_t v19 = (uint64_t *)re::HashTable<re::AssetLoadDescriptor,unsigned long long,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::tryGet((uint64_t)&a1[42], (uint64_t)&v23);
  if (v19)
  {
    re::AssetManager::lookupExistingAsset_assetTablesLocked((re::internal::AssetTypeRegistry **)a1, *v19, buf);
    if (buf[0])
    {
      re::AssetHandle::operator=((uint64_t)a8, (uint64_t *)&buf[8]);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&buf[8]);
    }
  }
  os_unfair_lock_unlock(a1 + 16);
LABEL_8:
  re::AssetManager::setAssetPointerForExistingAsset((re::AssetManager *)a1, a2, a8, a7, 0);
  if ((void)v35)
  {
    if (BYTE8(v35)) {
      (*(void (**)(void))(*(void *)v35 + 40))();
    }
    long long v35 = 0u;
    long long v36 = 0u;
  }
  if (v30)
  {
    if (v34) {
      (*(void (**)(void))(*(void *)v30 + 40))();
    }
    uint64_t v34 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v30 = 0;
    ++v33;
  }
  if (v25)
  {
    if (v29) {
      (*(void (**)(void))(*(void *)v25 + 40))();
    }
    uint64_t v29 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v25 = 0;
    ++v28;
  }
  uint64_t result = v23;
  if (v23)
  {
    if (v24) {
      return (*(uint64_t (**)(void))(*(void *)v23 + 40))();
    }
  }
  return result;
}

uint64_t re::AssetManager::newAssetEntryForMemoryAsset@<X0>(os_unfair_lock_s *a1@<X0>, void *a2@<X1>, re **a3@<X2>, int a4@<W3>, unsigned int a5@<W4>, int a6@<W5>, const re::AssetHandle *a7@<X8>)
{
  re::stringToLowerCase(*a3, (re::DynamicString *)&v21);
  uint64_t add = atomic_fetch_add((atomic_uint *volatile)&a1[256], 1u);
  if (v22) {
    uint64_t v15 = *(unsigned char **)&v23[7];
  }
  else {
    uint64_t v15 = v23;
  }
  re::DynamicString::format((re::DynamicString *)"asset%d.compiled%s", (re::DynamicString *)&v18, add, v15);
  if (v19) {
    int v16 = *(const char **)&v20[7];
  }
  else {
    int v16 = v20;
  }
  re::AssetManager::newAssetEntryForNamedMemoryAsset(a1, a2, a3, v16, a4, a5, a6, a7);
  if (v18 && (v19 & 1) != 0) {
    (*(void (**)(void))(*(void *)v18 + 40))();
  }
  uint64_t result = v21;
  if (v21)
  {
    if (v22) {
      return (*(uint64_t (**)(void))(*(void *)v21 + 40))();
    }
  }
  return result;
}

uint64_t re::AssetManager::generateRootAssetPathForImportedAsset@<X0>(atomic_uint *this@<X0>, re **a2@<X1>, const char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = (_anonymous_namespace_ *)re::stringToLowerCase(*a2, (re::DynamicString *)&v22);
  if (a3)
  {
    if (*a3)
    {
      re::DynamicString::format((re::DynamicString *)"%s/", (re::DynamicString *)&v16, a3);
      re::DynamicString::operator=((re::DynamicString *)&v19, (re::DynamicString *)&v16);
      if (v16)
      {
        if (v17) {
          (*(void (**)(void))(*(void *)v16 + 40))();
        }
      }
    }
  }
  uint64_t add = atomic_fetch_add(this + 256, 1u);
  if (v20) {
    char v10 = *(unsigned char **)&v21[7];
  }
  else {
    char v10 = v21;
  }
  if (v23) {
    uint64_t v11 = *(unsigned char **)&v24[7];
  }
  else {
    uint64_t v11 = v24;
  }
  char v12 = (_anonymous_namespace_ *)re::DynamicString::format((re::DynamicString *)"imported%s%d/%sroot.compiled%s", (re::DynamicString *)&v16, *a2, add, v10, v11);
  if (v17) {
    uint64_t v13 = *(const char **)&v18[7];
  }
  else {
    uint64_t v13 = v18;
  }
  *(_DWORD *)a4 = 0;
  a4[3] = 0;
  a4[4] = 0;
  a4[2] = 0;
  uint64_t v14 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(a4 + 1, 0);
  a4[6] = 0;
  a4[7] = 0;
  a4[8] = 0;
  re::DynamicString::setCapacity(a4 + 5, 0);
  a4[9] = 0;
  re::AssetPath::initMemoryAssetPath(a4, v13, (uint64_t)a2);
  if (v16 && (v17 & 1) != 0) {
    (*(void (**)(void))(*(void *)v16 + 40))();
  }
  if (v19 && (v20 & 1) != 0) {
    (*(void (**)(void))(*(void *)v19 + 40))();
  }
  uint64_t result = v22;
  if (v22)
  {
    if (v23) {
      return (*(uint64_t (**)(void))(*(void *)v22 + 40))();
    }
  }
  return result;
}

void re::NetworkAssetSerialization::~NetworkAssetSerialization(re::NetworkAssetSerialization *this)
{
  *(void *)this = &unk_26E6CA920;
  re::DynamicString::deinit((re::NetworkAssetSerialization *)((char *)this + 104));
  *(void *)this = &unk_26E6CA958;
  re::Optional<re::AssetPath>::~Optional((unsigned char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6CA920;
  re::DynamicString::deinit((re::NetworkAssetSerialization *)((char *)this + 104));
  *(void *)this = &unk_26E6CA958;
  re::Optional<re::AssetPath>::~Optional((unsigned char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void re::AssetManager::processLoadedAsset_entryStateLocked(re::AssetManager *this, re::internal::AssetEntry *a2, void *a3)
{
  if (re::AssetManager::checkAssetTrust_entryStateLocked(this, a2, a3, 1))
  {
    re::AssetManager::processAssetPointer(this, a3, a2);
    re::internal::SharedAssetPointer::makeSharedAssetPointer((re::internal::SharedAssetPointer *)a3, &v9);
    if (*((void *)a2 + 14) == -1) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = *((void *)a2 + 14);
    }
    re::internal::AssetEntry::LoadState::setLoadingAssetPointer_locked((__uint64_t)a2 + 704, (uint64_t *)&v9, v6);
    if (v9) {

    }
    re::AssetManager::entryReadyForRegistration_entryStateLocked((os_unfair_lock_s *)this, a2, v7, v8);
  }
}

void re::AssetManager::unloadAssetPointer(re::AssetManager *this, const re::AssetType *a2, void *a3, const char *a4, uint64_t a5)
{
  char v10 = re::globalAllocators(this);
  uint64_t v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10[2] + 32))(v10[2], 56, 8);
  *(_OWORD *)uint64_t v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  *((_OWORD *)v11 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  v11[6] = 0;
  re::CancellationTokenSource::CancellationTokenSource((re::CancellationTokenSource *)(v11 + 3));
  uint64_t v14 = v11;
  *uint64_t v11 = a5;
  os_unfair_lock_lock((os_unfair_lock_t)this + 320);
  re::DynamicArray<re::RigDataValue *>::add((re::AssetManager *)((char *)this + 1288), &v14);
  *((_DWORD *)v11 + 4) = 2;
  re::internal::AssetBackgroundLoader::unloadAssetAsync(*((re::internal::AssetBackgroundLoader **)this + 129), v11, a2, a3, a4, &v13);
  uint64_t v12 = v11[1];
  v11[1] = v13;
  uint64_t v13 = (re::internal::AssetLoadItem *)v12;
  if (v12) {

  }
  os_unfair_lock_unlock((os_unfair_lock_t)this + 320);
}

void re::AssetManager::onUnloadComplete(os_unfair_lock_s *this, uint64_t a2)
{
  uint64_t v3 = this + 240;
  uint64_t v4 = a2;
  os_unfair_lock_lock(this + 240);
  re::DynamicArray<re::TransitionCondition *>::add(&this[242]._os_unfair_lock_opaque, &v4);
  os_unfair_lock_unlock(v3);
}

uint64_t re::DynamicArray<re::Function<void ()(re::DynamicArray<unsigned long long>)>>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::Function<void ()(re::DynamicArray<unsigned long long>)>>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 40 * v4;
  *(void *)(v5 + 24) = *(void *)(a2 + 24);
  *(void *)(v5 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  uint64_t result = re::FunctionBase<24ul,void ()(re::DynamicArray<unsigned long long>)>::operator=<24ul>(v5, a2);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::AssetManager::setMetadataIntoAssetEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)(a1 + 1345));
  if ((v6 & 1) == 0 && !*(unsigned char *)(a1 + 1346)) {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 520));
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  re::AssetManager::lookupExistingAsset_assetTablesLocked((re::internal::AssetTypeRegistry **)a1, a2, v7);
  if (v7[0])
  {
    re::AssetHandle::operator=((uint64_t)&v9, v8);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  if (v10) {
    re::internal::AssetEntry::setMetadata(v10, a3);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v9);
}

void re::AssetManager::addResourceSharingClientPeerID(os_unfair_lock_s *this, uint64_t a2)
{
  uint64_t v3 = this + 400;
  uint64_t v5 = a2;
  os_unfair_lock_lock(this + 400);
  unint64_t v4 = this + 402;
  re::DynamicOverflowArray<unsigned long long,1ul>::indexOf((uint64_t)v4, &v5, (uint64_t)v6);
  if (!v6[0]) {
    re::DynamicOverflowArray<unsigned long long,1ul>::add((uint64_t)v4, &v5);
  }
  os_unfair_lock_unlock(v3);
}

void re::AssetManager::removeResourceSharingClientPeerID(re::AssetManager *this, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v3 = (os_unfair_lock_s *)((char *)this + 1600);
  uint64_t v8 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)this + 400);
  re::DynamicOverflowArray<unsigned long long,1ul>::indexOf((uint64_t)this + 1608, &v8, (uint64_t)v9);
  if (v9[0])
  {
    unint64_t v4 = v10;
    unint64_t v5 = *((void *)this + 202);
    if (v5 <= v10)
    {
      uint64_t v11 = 0;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v20 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v12 = 136315906;
      uint64_t v13 = "removeAt";
      __int16 v14 = 1024;
      int v15 = 1000;
      __int16 v16 = 2048;
      unint64_t v17 = v4;
      __int16 v18 = 2048;
      unint64_t v19 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (v5 - 1 > v10)
    {
      if (*((unsigned char *)this + 1624)) {
        unsigned __int8 v6 = (char *)this + 1632;
      }
      else {
        unsigned __int8 v6 = (char *)*((void *)this + 205);
      }
      *(void *)&v6[8 * v10] = *(void *)&v6[8 * v5 - 8];
    }
    int v7 = *((_DWORD *)this + 406);
    *((void *)this + 20re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v5 - 1;
    *((_DWORD *)this + 406) = v7 + 2;
  }
  os_unfair_lock_unlock(v3);
  atomic_store(1u, (unsigned __int8 *)this + 640);
}

void re::AssetManager::getAssetsReceivedFromPeer(re::AssetManager *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v6 = *((void *)this + 133);
  if (v6)
  {
    *(void *)(a3 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    *(void *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 24) = 0;
    (*(void (**)(uint8_t *__return_ptr))(*(void *)v6 + 48))(buf);
    if (v16) {
      re::DynamicArray<re::AssetHandle>::setCapacity((void *)a3, v16);
    }
    int v7 = (os_unfair_lock_s *)((char *)this + 64);
    os_unfair_lock_lock((os_unfair_lock_t)this + 16);
    if (v16)
    {
      uint64_t v8 = v17;
      uint64_t v9 = (char *)this + 72;
      unint64_t v10 = 32 * v16;
      do
      {
        uint64_t v11 = (re::internal::AssetEntry **)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)v9, v8);
        if (v11)
        {
          re::AssetHandle::AssetHandle(v13, *v11);
          re::DynamicArray<re::AssetHandle>::add((void *)a3, v13);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
        }
        v8 += 32;
        v10 -= 32;
      }
      while (v10);
    }
    os_unfair_lock_unlock(v7);
    re::DynamicArray<re::DynamicString>::deinit((uint64_t)buf);
  }
  else
  {
    int v12 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v15 = a2;
      _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "Cannot get assets received from PeerID %llu, ResourceFetchService not found!", buf, 0xCu);
    }
    *(void *)(a3 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    *(void *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 24) = 0;
  }
}

void re::AssetManager::receiveAssetLoadState(re::AssetManager *this, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  int v12 = (os_unfair_lock_s *)((char *)this + 64);
  os_unfair_lock_lock((os_unfair_lock_t)this + 16);
  re::AssetManager::lookupExistingAsset_assetTablesLocked((re::internal::AssetTypeRegistry **)this, a2, v16);
  os_unfair_lock_unlock(v12);
  if (v16[0])
  {
    if (v18)
    {
      if (a6)
      {
        int v15 = a6;
        unsigned __int8 v13 = 1;
      }
      else
      {
        unsigned __int8 v13 = 0;
      }
      v14[0] = v13;
      re::internal::AssetEntry::setResourceClientLoadState(v18, a3, a4, a5, v14);
      atomic_store(1u, (unsigned __int8 *)this + 640);
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v17);
  }
}

uint64_t re::AssetManager::getCombinedLoadState(uint64_t a1, re::AssetHandle *this, int a3, unsigned int a4, uint64_t a5)
{
  if (*(void *)(a5 + 8)) {
    BOOL v7 = *(void *)(a1 + 1144) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7 && (unint64_t)(*((void *)re::AssetHandle::assetInfo(this) + 10) + 1) >= 2 && a3 != 0)
  {
    uint64_t v17 = (os_unfair_lock_s *)(*((void *)this + 1) + 384);
    os_unfair_lock_lock(v17);
    uint64_t v18 = *((void *)this + 1);
    if (*(_DWORD *)(v18 + 420) != 2)
    {
      uint64_t v19 = *(void *)(a5 + 8);
      if (v19)
      {
        int v12 = 0;
        int v13 = 0;
        int v14 = 0;
        int v15 = 0;
        int v16 = 0;
        long long v20 = *(void **)a5;
        uint64_t v21 = *(void *)a5 + 8 * v19;
        uint64_t v22 = *(void *)(v18 + 528);
        do
        {
          uint64_t v23 = v18 + 544;
          if ((*(_DWORD *)(v18 + 536) & 1) == 0) {
            uint64_t v23 = *(void *)(v18 + 552);
          }
          if (v22)
          {
            long long v24 = (_DWORD *)(v23 + 8);
            uint64_t v25 = 32 * v22;
            while (*((void *)v24 - 1) != *v20)
            {
              v24 += 8;
              v25 -= 32;
              if (!v25) {
                goto LABEL_35;
              }
            }
            switch(*v24)
            {
              case 0:
                int v16 = 1;
                break;
              case 1:
                int v12 = 1;
                break;
              case 2:
                ++v13;
                break;
              case 3:
                int v14 = 1;
                break;
              default:
                break;
            }
          }
          else
          {
LABEL_35:
            int v15 = 1;
          }
          ++v20;
        }
        while (v20 != (void *)v21);
      }
      else
      {
        int v16 = 0;
        int v15 = 0;
        int v14 = 0;
        int v13 = 0;
        int v12 = 0;
      }
      os_unfair_lock_unlock(v17);
      goto LABEL_13;
    }
    os_unfair_lock_unlock(v17);
  }
  if (a4 < 4) {
    return dword_23436F730[a4];
  }
  int v12 = 0;
  int v13 = 0;
  int v14 = 0;
  int v15 = 0;
  int v16 = 0;
LABEL_13:
  uint64_t result = 2;
  switch(a4)
  {
    case 0u:
      int v16 = 1;
      if (v14) {
        goto LABEL_18;
      }
      goto LABEL_20;
    case 1u:
      int v12 = 1;
      goto LABEL_17;
    case 2u:
      ++v13;
      if (!v14) {
        goto LABEL_20;
      }
      goto LABEL_18;
    case 3u:
      return result;
    default:
LABEL_17:
      if (v14)
      {
LABEL_18:
        uint64_t result = 2;
      }
      else
      {
LABEL_20:
        uint64_t result = 0;
        if (!v15 && !v16 && !v12) {
          uint64_t result = *(void *)(a5 + 8) + 1 == v13;
        }
      }
      break;
  }
  return result;
}

uint64_t re::AssetManager::getNetworkAssetService(re::AssetManager *this)
{
  return *((void *)this + 143);
}

void re::AssetManager::ownerPeerID(os_unfair_lock_s *this@<X1>, uint64_t a2@<X0>, int a3@<W2>, uint64_t a4@<X8>)
{
  atomic_load((unsigned __int8 *)(a2 + 1345));
  re::internal::AssetEntry::ownerPeerID((uint64_t)this, (uint64_t)v12);
  if (v12[0])
  {
LABEL_2:
    *(unsigned char *)a4 = 1;
    *(void *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v13;
    return;
  }
  if (this[30]._os_unfair_lock_opaque == 8)
  {
    uint64_t v8 = *(void *)(a2 + 1144);
    if (v8)
    {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v8 + 120))(&v10);
      if ((_BYTE)v10)
      {
        unint64_t v9 = v11;
        unint64_t v13 = v11;
        if (a3) {
          os_unfair_lock_lock(this + 96);
        }
        re::internal::AssetEntry::ownerPeerID((uint64_t)this, (uint64_t)&v10);
        if (!(_BYTE)v10 || v11 != v9) {
          re::internal::AssetEntry::setOwnerPeerID((atomic_ullong *)this, v9);
        }
        if (a3) {
          os_unfair_lock_unlock(this + 96);
        }
        goto LABEL_2;
      }
    }
  }
  *(unsigned char *)a4 = 0;
}

BOOL re::AssetManager::checkAssetTrust_entryStateLocked(re::AssetManager *this, re::internal::AssetEntry *a2, uint64_t a3, void *a4, int a5)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v10 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*((void *)this + 130), *((void *)a2 + 33));
  re::AssetManager::ownerPeerID((os_unfair_lock_s *)a2, (uint64_t)this, 0, (uint64_t)buf);
  if (!buf[0]) {
    goto LABEL_18;
  }
  int v12 = *(re **)&v32[4];
  unint64_t v11 = (re *)(*(uint64_t (**)(void))(**((void **)this + 143) + 104))(*((void *)this + 143));
  if (v12 == v11) {
    goto LABEL_18;
  }
  uint64_t v13 = atomic_load((unsigned int *)a2 + 172);
  int v14 = (re *)(*(void *(**)(unsigned char *__return_ptr, uint64_t, void *, char *, re *, uint64_t))(*(void *)v10 + 264))(v28, v10, a4, (char *)a2 + 32, v12, v13);
  if (v28[0])
  {
    int v15 = v28[1];
    int v16 = *re::assetsLogObjects(v14);
    if (v15)
    {
      unint64_t v11 = (re *)os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG);
      if (v11)
      {
        *(_DWORD *)uint64_t v29 = 134217984;
        uint64_t v30 = v12;
        uint64_t v17 = "Asset Entitlement success. Registration completed for asset owned by %llu.";
        uint64_t v18 = v16;
LABEL_25:
        _os_log_debug_impl(&dword_233120000, v18, OS_LOG_TYPE_DEBUG, v17, v29, 0xCu);
        goto LABEL_18;
      }
      goto LABEL_18;
    }
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      goto LABEL_11;
    }
    *(_DWORD *)uint64_t v29 = 134217984;
    uint64_t v30 = v12;
    long long v20 = "Asset Entitlement fail. Asset owned by %llu will not be registered due to not being trustworthy.";
    uint64_t v21 = v16;
LABEL_23:
    _os_log_error_impl(&dword_233120000, v21, OS_LOG_TYPE_ERROR, v20, v29, 0xCu);
    goto LABEL_11;
  }
  uint64_t v19 = *re::assetsLogObjects(v14);
  if (!a5)
  {
    unint64_t v11 = (re *)os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG);
    if (v11)
    {
      *(_DWORD *)uint64_t v29 = 134217984;
      uint64_t v30 = v12;
      uint64_t v17 = "Asset Entitlement indeterminate. Asset owned by %llu will be allowed to load and will be checked again.";
      uint64_t v18 = v19;
      goto LABEL_25;
    }
LABEL_18:
    uint64_t v26 = *re::assetsLogObjects(v11);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)uint64_t v32 = a3;
      _os_log_debug_impl(&dword_233120000, v26, OS_LOG_TYPE_DEBUG, "checkAssetTrust - Asset entitlement check succeeded. Asset owned by %llu is trustworthy", buf, 0xCu);
    }
    return 1;
  }
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t v29 = 134217984;
    uint64_t v30 = v12;
    long long v20 = "Asset Entitlement fail. Asset owned by %llu will not be registered due to no result from credential check.";
    uint64_t v21 = v19;
    goto LABEL_23;
  }
LABEL_11:
  uint64_t v22 = (re *)re::DynamicString::format((re::DynamicString *)"Asset originating from (ownerPeer:%llu), does not have the appropriateentitlements.", (re::DynamicString *)v27, a3);
  re::AssetManager::putEntryInFailedState_entryStateLocked(v22, (uint64_t)a2, 302, (uint64_t)v27);
  uint64_t v23 = *(re **)&v27[0];
  if (*(void *)&v27[0])
  {
    if (BYTE8(v27[0])) {
      uint64_t v23 = (re *)(*(uint64_t (**)(void))(**(void **)&v27[0] + 40))();
    }
    memset(v27, 0, sizeof(v27));
  }
  long long v24 = *re::assetsLogObjects(v23);
  BOOL result = os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)uint64_t v32 = a3;
    _os_log_error_impl(&dword_233120000, v24, OS_LOG_TYPE_ERROR, "checkAssetTrust - Asset entitlement check FAIL. Asset owned by %llu is not trustworthy", buf, 0xCu);
    return 0;
  }
  return result;
}

uint64_t re::AssetManager::isAssetEntryShareableAndFetchable_entryStateLocked(re::AssetManager *this, re::internal::AssetEntry *a2)
{
  if (*((void *)this + 133)) {
    BOOL v2 = *((_DWORD *)a2 + 105) == 2;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return 0;
  }
  int v4 = *((_DWORD *)a2 + 30);
  if (v4 != 8 && v4 != 4) {
    return 0;
  }
  uint64_t v7 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*((void *)this + 130), *((void *)a2 + 33));
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v7 + 192))(v7)) {
    return 0;
  }
  re::AssetManager::fromPeerID((uint64_t)v14, (uint64_t)this, (os_unfair_lock_s *)a2, 0);
  if (!v14[0] || !v15) {
    return 0;
  }
  re::DynamicString::format((re::DynamicString *)"%llu", (re::DynamicString *)&v11, v15);
  if (v12) {
    uint64_t v8 = *(unsigned char **)&v13[7];
  }
  else {
    uint64_t v8 = v13;
  }
  uint64_t v9 = (*(uint64_t (**)(void, unsigned char *))(**((void **)this + 133) + 32))(*((void *)this + 133), v8);
  if (v11 && (v12 & 1) != 0) {
    (*(void (**)(void))(*(void *)v11 + 40))();
  }
  return v9;
}

void re::AssetManager::fromPeerID(uint64_t a1, uint64_t a2, os_unfair_lock_s *this, int a4)
{
  atomic_load((unsigned __int8 *)(a2 + 1345));
  re::internal::AssetEntry::fromPeerID((uint64_t)this, (uint64_t)v12);
  if (v12[0])
  {
LABEL_2:
    *(unsigned char *)a1 = 1;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v13;
    return;
  }
  if (this[30]._os_unfair_lock_opaque == 8)
  {
    uint64_t v8 = *(void *)(a2 + 1144);
    if (v8)
    {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v8 + 128))(&v10);
      if ((_BYTE)v10)
      {
        unint64_t v9 = v11;
        unint64_t v13 = v11;
        if (a4) {
          os_unfair_lock_lock(this + 96);
        }
        re::internal::AssetEntry::fromPeerID((uint64_t)this, (uint64_t)&v10);
        if (!(_BYTE)v10 || v11 != v9) {
          re::internal::AssetEntry::setFromPeerID((atomic_ullong *)this, v9);
        }
        if (a4) {
          os_unfair_lock_unlock(this + 96);
        }
        goto LABEL_2;
      }
    }
  }
  *(unsigned char *)a1 = 0;
}

uint64_t re::AssetManager::tryReuseExistingAsset_locked(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3, char a4)
{
  v91[4] = *MEMORY[0x263EF8340];
  unint64_t v55 = a1 + 16;
  os_unfair_lock_lock(a1 + 16);
  unint64_t v56 = (uint64_t *)a3;
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    uint64_t v7 = *(uint64_t **)(a3 + 32);
    uint64_t v8 = 144 * v6;
    while (1)
    {
      re::DynamicString::DynamicString((re::DynamicString *)&v70, (const re::DynamicString *)v7);
      re::DynamicArray<BOOL>::DynamicArray((uint64_t)&v74, v7 + 4);
      re::DynamicArray<BOOL>::DynamicArray((uint64_t)&v79, v7 + 9);
      re::DynamicString::DynamicString((re::DynamicString *)&v84, (const re::DynamicString *)(v7 + 14));
      unint64_t v9 = (uint64_t *)re::HashTable<re::AssetLoadDescriptor,unsigned long long,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::tryGet((uint64_t)&a1[42], (uint64_t)&v70);
      if (v9)
      {
        uint64_t v10 = *v9;
        uint64_t v11 = *(void *)(a2 + 112);
        if (v11 == -1) {
          uint64_t v11 = 0;
        }
        if (v10 != v11) {
          break;
        }
      }
      if ((void)v84)
      {
        if (BYTE8(v84)) {
          (*(void (**)(void))(*(void *)v84 + 40))();
        }
        long long v84 = 0u;
        long long v85 = 0u;
      }
      if (v79)
      {
        if (v83) {
          (*(void (**)(void))(*(void *)v79 + 40))();
        }
        uint64_t v83 = 0;
        uint64_t v80 = 0;
        uint64_t v81 = 0;
        uint64_t v79 = 0;
        ++v82;
      }
      if (v74)
      {
        if (v78) {
          (*(void (**)(void))(*(void *)v74 + 40))();
        }
        uint64_t v78 = 0;
        uint64_t v75 = 0;
        uint64_t v76 = 0;
        unsigned int v74 = 0;
        ++v77;
      }
      if (v70 && (v71 & 1) != 0) {
        (*(void (**)(void))(*(void *)v70 + 40))();
      }
      v7 += 18;
      v8 -= 144;
      if (!v8) {
        goto LABEL_23;
      }
    }
    if ((void)v84)
    {
      if (BYTE8(v84)) {
        (*(void (**)(void))(*(void *)v84 + 40))();
      }
      long long v84 = 0u;
      long long v85 = 0u;
    }
    char v12 = v56;
    if (v79)
    {
      if (v83) {
        (*(void (**)(void))(*(void *)v79 + 40))();
      }
      uint64_t v83 = 0;
      uint64_t v80 = 0;
      uint64_t v81 = 0;
      uint64_t v79 = 0;
      ++v82;
    }
    unint64_t v13 = v55;
    if (v74)
    {
      if (v78) {
        (*(void (**)(void))(*(void *)v74 + 40))();
      }
      uint64_t v78 = 0;
      uint64_t v75 = 0;
      uint64_t v76 = 0;
      unsigned int v74 = 0;
      ++v77;
    }
    uint64_t v38 = v70;
    if (v70 && (v71 & 1) != 0) {
      uint64_t v38 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v70 + 40))();
    }
    uint64_t v39 = **(const char ***)(a2 + 264);
    re::AssetManager::assetHandleFromId_assetTablesLocked((re::AssetManager *)a1, (const re::DynamicString *)&v70, v10, &v64);
    if (v70 && (v71 & 1) != 0) {
      (*(void (**)(void))(*(void *)v70 + 40))();
    }
  }
  else
  {
LABEL_23:
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    unint64_t v13 = v55;
    char v12 = v56;
  }
  os_unfair_lock_unlock(v13);
  if (v65)
  {
    unsigned int v14 = atomic_load((unsigned int *)(v65 + 704));
    if (v14 == 2) {
      goto LABEL_102;
    }
  }
  os_unfair_lock_lock(v13);
  uint64_t v90 = 0;
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  uint64_t v86 = 0;
  int v89 = 0;
  uint64_t v15 = v12[2];
  if (v15)
  {
    int v16 = (uint64_t *)v12[4];
    uint64_t v57 = &v16[18 * v15];
    do
    {
      re::DynamicString::DynamicString((re::DynamicString *)&v70, (const re::DynamicString *)v16);
      re::DynamicArray<BOOL>::DynamicArray((uint64_t)&v74, v16 + 4);
      re::DynamicArray<BOOL>::DynamicArray((uint64_t)&v79, v16 + 9);
      re::DynamicString::DynamicString((re::DynamicString *)&v84, (const re::DynamicString *)(v16 + 14));
      uint64_t v17 = re::HashTable<re::AssetLoadDescriptor,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::tryGet((uint64_t)&a1[54], (uint64_t)&v70);
      if (v17)
      {
        uint64_t v18 = v17;
        uint64_t v19 = *(unsigned int *)(v17 + 32);
        if (v19)
        {
          uint64_t v20 = 0;
          uint64_t v21 = (int *)(*(void *)(v17 + 16) + 8);
          while (1)
          {
            int v22 = *v21;
            v21 += 6;
            if (v22 < 0) {
              break;
            }
            if (v19 == ++v20)
            {
              LODWORD(vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = *(_DWORD *)(v17 + 32);
              break;
            }
          }
        }
        else
        {
          LODWORD(vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0;
        }
        if (v19 != v20)
        {
          uint64_t v23 = v20;
          unsigned int v24 = *(_DWORD *)(v17 + 32);
          do
          {
            uint64_t v25 = *(void *)(*(void *)(v18 + 16) + 24 * v23 + 16);
            uint64_t v26 = *(void *)(a2 + 112);
            if (v26 == -1) {
              uint64_t v26 = 0;
            }
            if (v25 != v26)
            {
              uint64_t v27 = **(const char ***)(a2 + 264);
              re::AssetManager::assetHandleFromId_assetTablesLocked((re::AssetManager *)a1, (const re::DynamicString *)&v67, v25, v69);
              if (v67 && (v68 & 1) != 0) {
                (*(void (**)(void))(*(void *)v67 + 40))();
              }
              re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)&v86, (re::AssetHandle *)v69);
              re::AssetHandle::~AssetHandle((re::AssetHandle *)v69);
              unsigned int v24 = *(_DWORD *)(v18 + 32);
            }
            if (v24 <= (int)v20 + 1) {
              unsigned int v28 = v20 + 1;
            }
            else {
              unsigned int v28 = v24;
            }
            while (1)
            {
              uint64_t v23 = (v20 + 1);
              if (v28 - 1 == v20) {
                break;
              }
              LODWORD(vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = v20 + 1;
              unsigned int v29 = v23;
              if ((*(_DWORD *)(*(void *)(v18 + 16) + 24 * v23 + 8) & 0x80000000) != 0) {
                goto LABEL_51;
              }
            }
            unsigned int v29 = v28;
LABEL_51:
            LODWORD(vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = v29;
          }
          while (v19 != v29);
        }
      }
      if ((void)v84)
      {
        if (BYTE8(v84)) {
          (*(void (**)(void))(*(void *)v84 + 40))();
        }
        long long v84 = 0u;
        long long v85 = 0u;
      }
      if (v79)
      {
        if (v83) {
          (*(void (**)(void))(*(void *)v79 + 40))();
        }
        uint64_t v83 = 0;
        uint64_t v80 = 0;
        uint64_t v81 = 0;
        uint64_t v79 = 0;
        ++v82;
      }
      if (v74)
      {
        if (v78) {
          (*(void (**)(void))(*(void *)v74 + 40))();
        }
        uint64_t v78 = 0;
        uint64_t v75 = 0;
        uint64_t v76 = 0;
        unsigned int v74 = 0;
        ++v77;
      }
      if (v70 && (v71 & 1) != 0) {
        (*(void (**)(void))(*(void *)v70 + 40))();
      }
      v16 += 18;
    }
    while (v16 != v57);
    uint64_t v30 = v86;
    uint64_t v15 = v87;
    uint64_t v31 = v88;
    uint64_t v32 = v90;
    int v33 = v89 + 1;
    unint64_t v13 = v55;
    char v12 = v56;
  }
  else
  {
    uint64_t v32 = 0;
    uint64_t v31 = 0;
    uint64_t v30 = 0;
    int v33 = 1;
  }
  uint64_t v70 = (_anonymous_namespace_ *)v30;
  uint64_t v71 = v15;
  uint64_t v72 = v31;
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  uint64_t v86 = 0;
  unsigned int v74 = v32;
  uint64_t v90 = 0;
  int v89 = v33;
  int v73 = 1;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)&v86);
  os_unfair_lock_unlock(v13);
  if (!v31) {
    goto LABEL_101;
  }
  uint64_t v34 = 24 * v31;
  while (1)
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)&v86, v32);
    if (v87) {
      break;
    }
LABEL_80:
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v86);
    uint64_t v32 = (const re::AssetHandle *)((char *)v32 + 24);
    v34 -= 24;
    if (!v34) {
      goto LABEL_101;
    }
  }
  unsigned int v35 = atomic_load((unsigned int *)(v87 + 704));
  if (v35 != 2)
  {
    uint64_t v36 = v87;
    goto LABEL_78;
  }
  if ((a4 & 1) == 0)
  {
    uint64_t v36 = v87;
    if (*(unsigned char *)(v87 + 256))
    {
LABEL_78:
      unsigned int v37 = atomic_load((unsigned int *)(v36 + 704));
      if (v37 == 1) {
        re::AssetHandle::operator=((uint64_t)&v64, &v86);
      }
      goto LABEL_80;
    }
  }
  re::AssetHandle::operator=((uint64_t)&v64, &v86);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v86);
LABEL_101:
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)&v70);
LABEL_102:
  if (v65 && (unsigned int v40 = atomic_load((unsigned int *)(v65 + 704)), v40 == 2))
  {
    re::AssetManager::findDependencies((re::AssetManager *)a1, (const re::AssetHandle *)&v64, (uint64_t)&v70);
  }
  else
  {
    unsigned int v74 = 0;
    uint64_t v71 = 0;
    uint64_t v72 = 0;
    uint64_t v70 = 0;
    int v73 = 0;
  }
  if (!v65) {
    goto LABEL_117;
  }
  unsigned int v41 = atomic_load((unsigned int *)(v65 + 704));
  if (v41 == 2)
  {
    if (!v72
      || ((uint64_t v42 = v12[4],
           uint64_t v43 = *(void *)(v42 + 8),
           long long v44 = *(const char **)(v42 + 16),
           uint64_t v45 = (const char *)(v42 + 9),
           (v43 & 1) != 0)
        ? (__int16 v46 = v44)
        : (__int16 v46 = v45),
          !strcmp(v46, "AssetPath")))
    {
      re::internal::AssetEntry::LoadState::setAssetPointer_locked(a2 + 704, (uint64_t *)(v65 + 712));
      re::internal::AssetEntry::setIsLoading_locked((re::internal::AssetEntry *)a2, 0);
      goto LABEL_119;
    }
  }
  if (v65 && (unsigned int v47 = atomic_load((unsigned int *)(v65 + 704)), v47 == 1))
  {
    re::AssetManager::makeLoadRequest((re::AssetManager *)a1, &v67);
    uint64_t v48 = v67;
    re::AssetLoadRequest::addAsset((re::AssetLoadRequest::Data **)v67, (const re::AssetHandle *)&v64);
    re::AssetHandle::AssetHandle((re::AssetHandle *)&v86, (re::internal::AssetEntry *)a2);
    re::AssetHandle::AssetHandle((re::AssetHandle *)&v59, (const re::AssetHandle *)&v86);
    re::AssetHandle::AssetHandle((re::AssetHandle *)((char *)&v60 + 8), (const re::AssetHandle *)&v64);
    re::DynamicArray<re::AssetLoadDescriptor>::DynamicArray((uint64_t)v62, v12);
    double v63 = a1;
    uint64_t v49 = (char *)operator new(0x68uLL);
    uint64_t v50 = *((void *)&v59 + 1);
    *((void *)v49 + 1) = v59;
    *((void *)v49 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v50;
    *(void *)uint64_t v49 = &unk_26E6C9EF8;
    *(_OWORD *)(v49 + 24) = v60;
    long long v59 = 0u;
    long long v60 = 0u;
    uint64_t v51 = *((void *)&v61 + 1);
    *((void *)v49 + 5) = v61;
    *((void *)v49 + 6) = v51;
    long long v61 = 0u;
    re::DynamicArray<re::AssetLoadDescriptor>::DynamicArray((uint64_t)(v49 + 56), v62);
    *((void *)v49 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v63;
    v91[3] = v49;
    re::AssetLoadRequest::setCompletionHandler((uint64_t)v48, (uint64_t)v91, 0);
    std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:nn180100](v91);
    re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)v62);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)&v60 + 8));
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v59);
    re::DynamicArray<re::SharedPtr<re::AssetLoadRequest>>::add((_anonymous_namespace_ *)&a1[6], (uint64_t *)&v67);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v86);
    if (v48) {

    }
LABEL_119:
    uint64_t v52 = 1;
  }
  else
  {
LABEL_117:
    uint64_t v52 = 0;
  }
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)&v70);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v64);
  return v52;
}

uint64_t re::DynamicArray<re::AssetLoadDescriptor>::slice(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 + 1 <= 1)
  {
    uint64_t v4 = 0;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v5) = 136315906;
    *(void *)((char *)&v5 + 4) = "slice";
    WORD6(v5) = 1024;
    HIWORD(v5) = 1119;
    _os_log_send_and_compose_impl();
    a1 = _os_crash_msg();
    __break(1u);
    goto LABEL_6;
  }
  if (a3 == -1)
  {
LABEL_6:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::slice(size_t,size_t). index, %zu, count = %zu, array size = %zu", "!overflow", "slice", 1125, 1, a3, a1, v4, v5);
    a1 = _os_crash();
    __break(1u);
LABEL_7:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Invalid count. index = %zu, count = %zu, array size = %zu", "endIndexExclusive <= m_size", "slice", 1129, 1, a3, a1);
    _os_crash();
    __break(1u);
  }
  if (a3 + 1 > a1) {
    goto LABEL_7;
  }
  return a2 + 144;
}

_anonymous_namespace_ *re::DynamicArray<re::AssetLoadDescriptor>::operator=(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)this)
  {
    if (v4)
    {
      re::DynamicArray<re::AssetLoadDescriptor>::copy(this, *(re::DynamicString **)a2, v4);
      re::DynamicArray<re::AssetLoadDescriptor>::resize(this, *(void *)(a2 + 8));
    }
    else
    {
      re::DynamicArray<re::AssetLoadDescriptor>::clear((uint64_t)this);
    }
  }
  else if (v4)
  {
    re::DynamicArray<re::AssetLoadDescriptor>::setCapacity(this, v4);
    ++*((_DWORD *)this + 6);
    re::DynamicArray<re::AssetLoadDescriptor>::copy(this, *(re::DynamicString **)a2, *(void *)(a2 + 8));
  }
  return this;
}

uint64_t re::AssetLoadDescriptor::getIntrospectableData<re::PeerAssetLoadDescriptorParameters>(re::AssetLoadDescriptor *a1, re::DynamicString **a2, re::Allocator *a3)
{
  unint64_t v4 = a2;
  long long v5 = &qword_268772000;
  {
    char v12 = a1;
    uint64_t v11 = a3;
    long long v5 = &qword_268772000;
    unint64_t v4 = a2;
    a3 = v11;
    int v9 = v8;
    a1 = v12;
    if (v9)
    {
      re::introspect<re::PeerAssetLoadDescriptorParameters>(void)::info = re::introspect_PeerAssetLoadDescriptorParameters(0);
      long long v5 = &qword_268772000;
      a1 = v12;
      unint64_t v4 = a2;
      a3 = v11;
    }
  }
  uint64_t v6 = (re **)v5[462];
  return re::AssetLoadDescriptor::getIntrospectableData(a1, v6, v4, a3);
}

void re::AssetManager::reuseExistingOrLoadNewAsset_locked(os_unfair_lock_s *a1, void *a2, uint64_t *a3)
{
  if ((re::AssetManager::tryReuseExistingAsset_locked(a1, (uint64_t)a2, (uint64_t)a3, 0) & 1) == 0)
  {
    re::AssetManager::loadAssetFromDescriptorsOnBackgroundTask_entryStateLocked((uint64_t)a1, a2, a3);
  }
}

uint64_t re::AssetManager::assetNonSharedDataByteSize_entryStateLocked(re::AssetManager *this, re::internal::AssetEntry *a2)
{
  unsigned int v2 = atomic_load((unsigned int *)a2 + 176);
  if (v2 != 2) {
    return 0;
  }
  uint64_t v4 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*((void *)this + 130), *((void *)a2 + 33));
  if (!*((unsigned char *)a2 + 352))
  {
    uint64_t v5 = re::internal::AssetEntry::assetPointer(a2);
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 40))(v4, v5);
    if (!*((unsigned char *)a2 + 352)) {
      *((unsigned char *)a2 + 35re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 1;
    }
    *((void *)a2 + 45) = v6;
  }
  if (*((unsigned char *)a2 + 336))
  {
    uint64_t v7 = *((void *)a2 + 43);
  }
  else
  {
    uint64_t v9 = re::internal::AssetEntry::assetPointer(a2);
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 48))(v4, v9);
    if (!*((unsigned char *)a2 + 336)) {
      *((unsigned char *)a2 + 336) = 1;
    }
    *((void *)a2 + 43) = v7;
  }
  return *((void *)a2 + 45) + v7;
}

void re::AssetManager::internalUnloadSharedAssetPointer(re::AssetManager *this, void *a2, const re::ExistingAssetInformation *a3, const re::AssetType *a4)
{
  uint64_t v8 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*((void *)this + 130), (unint64_t)a4);
  (*(void (**)(uint64_t, void *, const re::ExistingAssetInformation *))(*(void *)v8 + 88))(v8, a2, a3);
  if (*((void *)a3 + 17)) {
    uint64_t v9 = (const char *)*((void *)a3 + 18);
  }
  else {
    uint64_t v9 = (char *)a3 + 137;
  }
  if (*((void *)a3 + 10) == -1) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *((void *)a3 + 10);
  }
  re::AssetManager::unloadAssetPointer(this, a4, a2, v9, v10);
}

void re::AssetManager::internalAssetEntryUnloadAssetPointer_entryStateLocked(re::AssetManager *this, re::internal::AssetEntry *a2)
{
  if (!re::internal::AssetEntry::hasAssetPointer(a2))
  {
LABEL_38:
    re::internal::AssetEntry::LoadState::resetAssetPointer_locked((re::internal::AssetEntry *)((char *)a2 + 704));
    return;
  }
  atomic_load((unsigned __int8 *)this + 1345);
  if (objc_isUniquelyReferenced())
  {
    uint64_t v4 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*((void *)this + 130), *((void *)a2 + 33));
    unsigned __int8 v5 = atomic_load((unsigned __int8 *)this + 1345);
    if ((v5 & 1) != 0
      || (uint64_t v6 = v4,
          uint64_t v7 = re::internal::AssetEntry::assetPointer(a2),
          !(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v6 + 72))(v6, v7)))
    {
      unsigned int v14 = (void *)re::internal::AssetEntry::assetPointer(a2);
      re::AssetManager::internalUnloadSharedAssetPointer(this, v14, (re::internal::AssetEntry *)((char *)a2 + 32), *((const re::AssetType **)a2 + 33));
    }
    else
    {
      uint64_t v8 = (re *)re::internal::AssetEntry::assetPointer(a2);
      uint64_t v15 = *((void *)a2 + 33);
      uint64_t v9 = re::globalAllocators(v8);
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9[2] + 32))(v9[2], 248, 8);
      int v16 = *((_DWORD *)a2 + 8);
      re::DynamicString::DynamicString((re::DynamicString *)v17, (re::internal::AssetEntry *)((char *)a2 + 40));
      re::DynamicString::DynamicString((re::DynamicString *)v18, (re::internal::AssetEntry *)((char *)a2 + 72));
      uint64_t v11 = *((void *)a2 + 14);
      uint64_t v19 = *((void *)a2 + 13);
      uint64_t v20 = v11;
      int v21 = *((_DWORD *)a2 + 30);
      re::DynamicString::DynamicString((re::DynamicString *)v22, (re::internal::AssetEntry *)((char *)a2 + 128));
      re::DynamicString::DynamicString((re::DynamicString *)v23, (re::internal::AssetEntry *)((char *)a2 + 160));
      re::DynamicString::DynamicString((re::DynamicString *)v24, (re::internal::AssetEntry *)((char *)a2 + 192));
      re::DynamicString::DynamicString((re::DynamicString *)v25, (re::internal::AssetEntry *)((char *)a2 + 224));
      *(_DWORD *)(v10 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v16;
      re::DynamicString::DynamicString((re::DynamicString *)(v10 + 16), (const re::DynamicString *)v17);
      re::DynamicString::DynamicString((re::DynamicString *)(v10 + 48), (const re::DynamicString *)v18);
      *(void *)(v10 + 80) = v19;
      int v12 = v21;
      *(void *)(v10 + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v20;
      *(_DWORD *)(v10 + 96) = v12;
      re::DynamicString::DynamicString((re::DynamicString *)(v10 + 104), (const re::DynamicString *)v22);
      re::DynamicString::DynamicString((re::DynamicString *)(v10 + 136), (const re::DynamicString *)v23);
      re::DynamicString::DynamicString((re::DynamicString *)(v10 + 168), (const re::DynamicString *)v24);
      re::DynamicString::DynamicString((re::DynamicString *)(v10 + 200), (const re::DynamicString *)v25);
      if (v25[0])
      {
        if (v25[1]) {
          (*(void (**)(void))(*(void *)v25[0] + 40))();
        }
        memset(v25, 0, sizeof(v25));
      }
      if (v24[0])
      {
        if (v24[1]) {
          (*(void (**)(void))(*(void *)v24[0] + 40))();
        }
        memset(v24, 0, sizeof(v24));
      }
      if (v23[0])
      {
        if (v23[1]) {
          (*(void (**)(void))(*(void *)v23[0] + 40))();
        }
        memset(v23, 0, sizeof(v23));
      }
      if (v22[0])
      {
        if (v22[1]) {
          (*(void (**)(void))(*(void *)v22[0] + 40))();
        }
        memset(v22, 0, sizeof(v22));
      }
      if (v18[0])
      {
        if (v18[1]) {
          (*(void (**)(void))(*(void *)v18[0] + 40))();
        }
        memset(v18, 0, sizeof(v18));
      }
      if (v17[0])
      {
        if (v17[1]) {
          (*(void (**)(void))(*(void *)v17[0] + 40))();
        }
        memset(v17, 0, sizeof(v17));
      }
      uint64_t v26 = v10;
      *(void *)uint64_t v10 = v8;
      *(void *)(v10 + 23re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v15;
      *(_DWORD *)(v10 + 240) = 0;
      os_unfair_lock_lock((os_unfair_lock_t)this + 112);
      re::DynamicArray<re::RigDataValue *>::add((re::AssetManager *)((char *)this + 456), &v26);
      os_unfair_lock_unlock((os_unfair_lock_t)this + 112);
    }
    re::internal::AssetEntry::LoadState::clearAndResetAssetPointer_locked((re::internal::AssetEntry *)((char *)a2 + 704));
    goto LABEL_38;
  }
  re::internal::AssetEntry::LoadState::resetAssetPointer_locked((re::internal::AssetEntry *)((char *)a2 + 704));
  if (*((void *)a2 + 14) == -1) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = *((void *)a2 + 14);
  }
  re::AssetManager::onUnloadComplete((os_unfair_lock_s *)this, v13);
}

void re::AssetManager::internalAssetEntryUnloadLoadingAssetPointer_entryStateLocked(re::AssetManager *this, re::internal::AssetEntry *a2)
{
  if (re::internal::AssetEntry::hasLoadingAssetPointer(a2))
  {
    atomic_load((unsigned __int8 *)this + 1345);
    if (objc_isUniquelyReferenced())
    {
      re::AssetManager::internalUnloadSharedAssetPointer(this, *(void **)(*((void *)a2 + 90) + 24), (re::internal::AssetEntry *)((char *)a2 + 32), *((const re::AssetType **)a2 + 33));
      re::internal::AssetEntry::LoadState::clearAndResetLoadingAssetPointer_locked((re::internal::AssetEntry *)((char *)a2 + 704));
    }
  }
  re::internal::AssetEntry::LoadState::resetLoadingAssetPointer_locked((re::internal::AssetEntry *)((char *)a2 + 704));
}

uint64_t re::AssetManager::processAssetRegistration_entryStateLocked(re::AssetManager *this, re::internal::AssetEntry *a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v4 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*((void *)this + 130), *((void *)a2 + 33));
  int v5 = *((unsigned __int8 *)this + 1394);
  if (*((unsigned char *)this + 1394)) {
    BOOL v6 = *((unsigned char *)a2 + 416) == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6 && re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyTracing(0, 0)) {
    kdebug_trace();
  }
  int v7 = (*(uint64_t (**)(uint64_t, void, char *))(*(void *)v4 + 80))(v4, *(void *)(*((void *)a2 + 90) + 24), (char *)a2 + 32);
  uint64_t result = re::internal::enableSignposts(0, 0);
  if (result)
  {
    uint64_t result = re::internal::enableHighFrequencyTracing(0, 0);
    if (result) {
      uint64_t result = kdebug_trace();
    }
  }
  if (!v7)
  {
    re::AssetManager::internalAssetEntryUnloadAssetPointer_entryStateLocked(this, a2);
    *(int8x16_t *)((char *)a2 + 71re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = vextq_s8(*(int8x16_t *)((char *)a2 + 712), *(int8x16_t *)((char *)a2 + 712), 8uLL);
    refreshed = (re *)re::internal::AssetEntry::LoadState::refreshLoadState_locked((__uint64_t)a2 + 704);
    if (*((unsigned char *)a2 + 416))
    {
      v15.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      unint64_t v16 = (v15.__d_.__rep_ - *((void *)a2 + 51)) / 1000;
      if (v16 > *((void *)this + 175))
      {
        uint64_t v17 = *re::assetsLogObjects((re *)v15.__d_.__rep_);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          if (*((void *)a2 + 21)) {
            uint64_t v18 = (char *)*((void *)a2 + 22);
          }
          else {
            uint64_t v18 = (char *)a2 + 169;
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v16;
          _os_log_impl(&dword_233120000, v17, OS_LOG_TYPE_DEFAULT, "Registration completed for asset '%s' in %llu milliseconds.", (uint8_t *)&buf, 0x16u);
        }
        goto LABEL_59;
      }
      if (re::assetsHighFrequencyLoggingEnabled(void)::onceToken != -1) {
        dispatch_once(&re::assetsHighFrequencyLoggingEnabled(void)::onceToken, &__block_literal_global_1);
      }
      if (!re::assetsHighFrequencyLoggingEnabled(void)::shouldLog) {
        goto LABEL_59;
      }
      uint64_t v25 = *re::assetsLogObjects((re *)v15.__d_.__rep_);
      if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_59;
      }
      if (*((void *)a2 + 21)) {
        unsigned int v35 = (char *)*((void *)a2 + 22);
      }
      else {
        unsigned int v35 = (char *)a2 + 169;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v35;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v16;
      int v22 = "Registration completed for asset '%s' in %llu milliseconds.";
      uint64_t v23 = v25;
      uint32_t v24 = 22;
    }
    else
    {
      if (re::assetsHighFrequencyLoggingEnabled(void)::onceToken != -1) {
        dispatch_once(&re::assetsHighFrequencyLoggingEnabled(void)::onceToken, &__block_literal_global_1);
      }
      if (!re::assetsHighFrequencyLoggingEnabled(void)::shouldLog) {
        goto LABEL_59;
      }
      uint64_t v20 = *re::assetsLogObjects(refreshed);
      if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_59;
      }
      if (*((void *)a2 + 21)) {
        int v21 = (char *)*((void *)a2 + 22);
      }
      else {
        int v21 = (char *)a2 + 169;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
      int v22 = "Registration completed for asset '%s'";
      uint64_t v23 = v20;
      uint32_t v24 = 12;
    }
    _os_log_debug_impl(&dword_233120000, v23, OS_LOG_TYPE_DEBUG, v22, (uint8_t *)&buf, v24);
LABEL_59:
    *((unsigned char *)a2 + 416) = 0;
    re::internal::AssetEntry::setIsLoading_locked(a2, 0);
    if (*((unsigned char *)this + 1360))
    {
      int v26 = re::AssetManager::assetByteSize_entryLocked(this, a2);
      uint64_t v27 = std::to_string(&buf, v26);
      v36[0] = 0;
      v36[1] = "";
      unsigned int v28 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &buf
          : (std::string *)buf.__r_.__value_.__r.__words[0];
      re::internal::AssetEntry::setOrClearMetadata_stateLocked(a2, (const re::StringID *)v36, (const char *)v28);
      re::StringID::destroyString((re::StringID *)v36);
      re::internal::AssetEntry::updateMetadata(a2, 1);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
    if (v5)
    {
      if (!*((unsigned char *)this + 1360)) {
        re::AssetManager::assetByteSize_entryLocked(this, a2);
      }
      if (re::internal::enableSignposts(0, 0)) {
        kdebug_trace();
      }
    }
    if (*((unsigned char *)this + 1377))
    {
      unsigned int v29 = (re *)re::AssetManager::assetNonSharedDataByteSize_entryStateLocked(this, a2);
      uint64_t v30 = *re::assetsLogObjects(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        if (*((void *)a2 + 21)) {
          uint64_t v34 = (char *)*((void *)a2 + 22);
        }
        else {
          uint64_t v34 = (char *)a2 + 169;
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v29;
        _os_log_debug_impl(&dword_233120000, v30, OS_LOG_TYPE_DEBUG, "Asset: %s has Non shared data size of %zu bytes", (uint8_t *)&buf, 0x16u);
      }
    }
LABEL_72:
    if (*((void *)a2 + 14) == -1) {
      LODWORD(v31) = 0;
    }
    else {
      uint64_t v31 = *((void *)a2 + 14);
    }
    uint64_t v32 = (const char **)*((void *)a2 + 33);
    if (v32) {
      int v33 = *v32;
    }
    else {
      int v33 = 0;
    }
    return re::AssetSignpost::fireImpulse((re::AssetSignpost *)0x811, v31, v33, v9);
  }
  if (v7 != 1)
  {
    if (v7 == 2)
    {
      if (*((void *)a2 + 21)) {
        uint64_t v10 = (const char *)*((void *)a2 + 22);
      }
      else {
        uint64_t v10 = (char *)a2 + 169;
      }
      if (*((void *)a2 + 14) == -1) {
        uint64_t v11 = 0;
      }
      else {
        uint64_t v11 = *((void *)a2 + 14);
      }
      re::AssetManager::unloadAssetPointer(this, *((const re::AssetType **)a2 + 33), *(void **)(*((void *)a2 + 90) + 24), v10, v11);
      re::internal::AssetEntry::LoadState::clearAndResetLoadingAssetPointer_locked((re::internal::AssetEntry *)((char *)a2 + 704));
      re::AssetManager::internalAssetEntryUnloadAssetPointer_entryStateLocked(this, a2);
      *((unsigned char *)a2 + 416) = 0;
      re::internal::AssetEntry::setIsLoading_locked(a2, 0);
      re::AssetManager::putEntryInFailedState_entryStateLocked(v13, (uint64_t)a2, 304, (uint64_t)v37);
      if (*(void *)&v37[0])
      {
        if (BYTE8(v37[0])) {
          (*(void (**)(void))(**(void **)&v37[0] + 40))();
        }
        memset(v37, 0, sizeof(v37));
      }
      if (v5 && re::internal::enableSignposts(0, 0)) {
        kdebug_trace();
      }
    }
    else if ((v7 & 0xFFFFFFFD) != 0)
    {
      return result;
    }
    goto LABEL_72;
  }
  int v19 = *((unsigned __int8 *)a2 + 416);
  if (v5 && !*((unsigned char *)a2 + 416))
  {
    uint64_t result = re::internal::enableSignposts(0, 0);
    if (result) {
      uint64_t result = kdebug_trace();
    }
    int v19 = *((unsigned __int8 *)a2 + 416);
  }
  if (!v19)
  {
    uint64_t result = std::chrono::system_clock::now().__d_.__rep_;
    *((void *)a2 + 51) = result;
  }
  *((unsigned char *)a2 + 416) = 1;
  return result;
}

uint64_t re::AssetManager::assetByteSize_entryLocked(re::AssetManager *this, re::internal::AssetEntry *a2)
{
  if (*((unsigned char *)a2 + 320)) {
    return *((void *)a2 + 41);
  }
  unsigned int v4 = atomic_load((unsigned int *)a2 + 176);
  if (v4 != 2) {
    return 0;
  }
  uint64_t v5 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*((void *)this + 130), *((void *)a2 + 33));
  uint64_t v6 = re::internal::AssetEntry::assetPointer(a2);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, v6);
  if (!*((unsigned char *)a2 + 320)) {
    *((unsigned char *)a2 + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 1;
  }
  *((void *)a2 + 41) = result;
  return result;
}

BOOL re::AssetManager::isDeviceAsset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::AssetManager::deviceAssetPath(a1, a2, 0, a3, v5);
  int v3 = v5[0];
  if (v5[0] && v6 && (v7 & 1) != 0) {
    (*(void (**)(void))(*(void *)v6 + 40))();
  }
  return v3 != 0;
}

BOOL re::AssetManager::checkAssetTrust_entryStateLocked(re::AssetManager *this, re::internal::AssetEntry *a2, void *a3, int a4)
{
  if (*((_DWORD *)a2 + 30) == 8
    && (re::AssetManager::ownerPeerID((os_unfair_lock_s *)a2, (uint64_t)this, 0, (uint64_t)v9), v9[0])
    && v10)
  {
    return re::AssetManager::checkAssetTrust_entryStateLocked(this, a2, v10, a3, a4);
  }
  else
  {
    return 1;
  }
}

uint64_t re::AssetManager::putEntryInLoadingState_entryStateLocked(re::AssetManager *this, const re::AssetType **a2, char a3)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  re::internal::AssetEntry::setIsLoading_locked((re::internal::AssetEntry *)a2, 1);
  int v61 = *((_DWORD *)a2 + 30);
  re::DynamicString::DynamicString((re::DynamicString *)&v62, (const re::DynamicString *)(a2 + 5));
  Entry = re::HashTable<re::internal::AssetLoadingRoot,re::DynamicString,re::internal::AssetLoadingRoot,re::internal::AssetLoadingRoot,true,false>::findEntry((uint64_t)this + 1080, &v61, (uint64_t)&v47);
  unsigned int v7 = HIDWORD(v48);
  if (HIDWORD(v48) == 0x7FFFFFFF)
  {
    int v8 = *((_DWORD *)a2 + 30);
    if (v8 != 8)
    {
      if (v8 == 4)
      {
        isAssetEntryShareableAndFetchable_entryStateLocked = (_anonymous_namespace_ *)re::AssetManager::isAssetEntryShareableAndFetchable_entryStateLocked(this, (re::internal::AssetEntry *)a2);
        if (isAssetEntryShareableAndFetchable_entryStateLocked)
        {
          *((unsigned char *)a2 + 417) = 1;
          re::AssetManager::fromPeerID((uint64_t)v57, (uint64_t)this, (os_unfair_lock_s *)a2, 0);
          re::DynamicString::format((re::DynamicString *)"%llu", (re::DynamicString *)&v47, v57[1]);
          uint64_t v10 = *((void *)this + 133);
          if (v48) {
            uint64_t v11 = v49;
          }
          else {
            uint64_t v11 = (char *)&v48 + 1;
          }
          inited = (re *)objc_initWeak(&location, a2 + 1);
          unint64_t v55 = this;
          v65[2] = (id)re::globalAllocators(inited)[2];
          uint64_t v66 = 0;
          uint64_t v64 = &unk_26E6C9BF0;
          v65[0] = 0;
          objc_moveWeak(v65, &location);
          v65[1] = v55;
          uint64_t v66 = &v64;
          (*(void (**)(atomic_uint **__return_ptr, uint64_t, char *, char *, void **))(*(void *)v10 + 64))(&v56, v10, v11, (char *)a2 + 32, &v64);
          uint64_t v13 = (atomic_uint *)a2[49];
          a2[49] = (const re::AssetType *)v56;
          unint64_t v56 = v13;
          if (v13)
          {
            re::details::release<re::ResourceRequest>(v13);
            unint64_t v56 = 0;
          }
          re::FunctionBase<24ul,void ()(re::Result<re::SharedResourcePayload,re::WrappedError>)>::destroyCallable((uint64_t)&v64);
          objc_destroyWeak(&location);
          if (v47 && (v48 & 1) != 0) {
            (*(void (**)(void))(*v47 + 40))();
          }
        }
        else if (*((void *)this + 132))
        {
          dispatch_assert_queue_V2(*((dispatch_queue_t *)this + 65));
          unsigned int v47 = 0;
          if ((unint64_t)a2[6]) {
            int v26 = (const char *)a2[7];
          }
          else {
            int v26 = (char *)a2 + 49;
          }
          uint64_t v27 = (_anonymous_namespace_ *)sscanf(v26, "%llu", &v47);
          uint64_t v28 = *((void *)this + 132);
          uint64_t v29 = (uint64_t)v47;
          if ((unint64_t)a2[17]) {
            uint64_t v30 = (const char *)a2[18];
          }
          else {
            uint64_t v30 = (char *)a2 + 137;
          }
          re::internal::AssetNetworkLoader::sendRequestToNetworkPeer_entryStateLocked(v28, (uint64_t)a2, v29, (re::DynamicString *)v53);
          if (*(void *)&v53[0])
          {
            if (BYTE8(v53[0])) {
              (*(void (**)(void))(**(void **)&v53[0] + 40))();
            }
            memset(v53, 0, sizeof(v53));
          }
        }
        else
        {
          re::AssetManager::putEntryInFailedState_entryStateLocked(v32, (uint64_t)a2, 302, (uint64_t)v52);
          if (*(void *)&v52[0])
          {
            if (BYTE8(v52[0])) {
              (*(void (**)(void))(**(void **)&v52[0] + 40))();
            }
            memset(v52, 0, sizeof(v52));
          }
        }
      }
      else
      {
        int v19 = re::globalAllocators(Entry);
        uint64_t v20 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v19[2] + 32))(v19[2], 56, 8);
        *(_OWORD *)uint64_t v20 = 0u;
        *((_OWORD *)v20 + 1) = 0u;
        *((_OWORD *)v20 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
        v20[6] = 0;
        re::CancellationTokenSource::CancellationTokenSource((re::CancellationTokenSource *)(v20 + 3));
        unsigned int v47 = v20;
        *uint64_t v20 = 0;
        *((_DWORD *)v20 + 4) = 0;
        re::internal::AssetBackgroundLoader::loadAssetAsync(*((re::internal::AssetBackgroundLoader **)this + 129), v20, a2[33], (const re::AssetPath *)(a2 + 4), v57);
        uint64_t v21 = v20[1];
        v20[1] = v57[0];
        v57[0] = (re::internal::AssetLoadItem *)v21;
        if (v21) {

        }
        os_unfair_lock_lock((os_unfair_lock_t)this + 320);
        a2[50] = (const re::AssetType *)v20;
        re::DynamicArray<re::RigDataValue *>::add((re::AssetManager *)((char *)this + 1288), &v47);
        os_unfair_lock_unlock((os_unfair_lock_t)this + 320);
      }
      goto LABEL_70;
    }
    uint64_t v17 = (uint64_t)a2[14];
    if ((unint64_t)(v17 + 1) < 2)
    {
      re::AssetManager::putEntryInFailedState_entryStateLocked(v18, (uint64_t)a2, 200, (uint64_t)v42);
      if (*(void *)&v42[0])
      {
        if (BYTE8(v42[0])) {
          (*(void (**)(void))(**(void **)&v42[0] + 40))();
        }
        memset(v42, 0, sizeof(v42));
      }
      goto LABEL_70;
    }
    os_unfair_lock_lock((os_unfair_lock_t)this + 16);
    unsigned int v47 = (void *)v17;
    uint64_t v31 = (uint64_t *)re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 120, (uint64_t *)&v47);
    if (v31)
    {
      re::DynamicArray<re::AssetLoadDescriptor>::DynamicArray((uint64_t)&v47, v31);
    }
    else
    {
      uint64_t v51 = 0;
      uint64_t v48 = 0;
      uint64_t v49 = 0;
      unsigned int v47 = 0;
      int v50 = 0;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)this + 16);
    if (v49)
    {
      uint64_t v34 = (const re::AssetLoadDescriptor *)v51;
      if (*(void *)(v51 + 8)) {
        unsigned int v35 = *(const char **)(v51 + 16);
      }
      else {
        unsigned int v35 = (const char *)(v51 + 9);
      }
      uint64_t v36 = (_anonymous_namespace_ *)strcmp(v35, "NetworkAsset");
      if (v36)
      {
        unsigned int v37 = (_anonymous_namespace_ *)strcmp(v35, "PeerAsset");
        if (v37)
        {
          re::AssetManager::reuseExistingOrLoadNewAsset_locked((os_unfair_lock_s *)this, a2, (uint64_t *)&v47);
        }
        else if (*((void *)this + 132) && *((void *)this + 143))
        {
          re::AssetLoadDescriptor::AssetLoadDescriptor((re::AssetLoadDescriptor *)v44, v34);
          re::NetworkActionQueue::queueSyncActionPeerLoad((uint64_t)this + 704, v17, (const re::AssetLoadDescriptor *)v44);
          re::AssetLoadDescriptor::~AssetLoadDescriptor((re::AssetLoadDescriptor *)v44);
        }
        else
        {
          re::AssetManager::putEntryInFailedState_entryStateLocked(v40, (uint64_t)a2, 302, (uint64_t)v43);
          if (*(void *)&v43[0])
          {
            if (BYTE8(v43[0])) {
              (*(void (**)(void))(**(void **)&v43[0] + 40))();
            }
            memset(v43, 0, sizeof(v43));
          }
        }
        goto LABEL_69;
      }
      if (!*((void *)this + 143))
      {
        re::AssetManager::putEntryInFailedState_entryStateLocked(v41, (uint64_t)a2, 302, (uint64_t)v45);
        if (*(void *)&v45[0])
        {
          if (BYTE8(v45[0])) {
            (*(void (**)(void))(**(void **)&v45[0] + 40))();
          }
          memset(v45, 0, sizeof(v45));
        }
        goto LABEL_69;
      }
    }
    else if (!*((void *)this + 143) || (a3 & 1) != 0)
    {
      re::AssetManager::putEntryInFailedState_entryStateLocked(v38, (uint64_t)a2, 302, (uint64_t)v46);
      if (*(void *)&v46[0])
      {
        if (BYTE8(v46[0])) {
          (*(void (**)(void))(**(void **)&v46[0] + 40))();
        }
        memset(v46, 0, sizeof(v46));
      }
      goto LABEL_69;
    }
    re::AssetManager::queueSyncActionNetworkLoad(this, v17, (const re::internal::AssetEntry *)a2);
LABEL_69:
    re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)&v47);
    goto LABEL_70;
  }
  if (*((void *)this + 132))
  {
    uint64_t v14 = *((void *)this + 137);
    dispatch_assert_queue_V2(*((dispatch_queue_t *)this + 65));
    unsigned int v47 = 0;
    if (*(unsigned char *)(v14 + 88 * v7 + 64)) {
      std::chrono::system_clock::time_point v15 = *(const char **)(v14 + 88 * v7 + 72);
    }
    else {
      std::chrono::system_clock::time_point v15 = (const char *)(v14 + 88 * v7 + 65);
    }
    int v22 = (_anonymous_namespace_ *)sscanf(v15, "%llu", &v47);
    uint64_t v23 = *((void *)this + 132);
    uint64_t v24 = (uint64_t)v47;
    if ((unint64_t)a2[17]) {
      uint64_t v25 = (const char *)a2[18];
    }
    else {
      uint64_t v25 = (char *)a2 + 137;
    }
    re::internal::AssetNetworkLoader::sendRequestToNetworkPeer_entryStateLocked(v23, (uint64_t)a2, v24, (re::DynamicString *)v60);
    if (*(void *)&v60[0])
    {
      if (BYTE8(v60[0])) {
        (*(void (**)(void))(**(void **)&v60[0] + 40))();
      }
      memset(v60, 0, sizeof(v60));
    }
  }
  else
  {
    re::AssetManager::putEntryInFailedState_entryStateLocked(v16, (uint64_t)a2, 302, (uint64_t)&v58);
    if ((void)v58)
    {
      if (BYTE8(v58)) {
        (*(void (**)(void, void))(*(void *)v58 + 40))(v58, v59);
      }
      long long v58 = 0u;
      long long v59 = 0u;
    }
  }
LABEL_70:
  uint64_t result = v62;
  if (v62)
  {
    if (v63) {
      return (*(uint64_t (**)(void))(*(void *)v62 + 40))();
    }
  }
  return result;
}

uint64_t *re::AssetManager::queueSyncActionNetworkLoad(re::AssetManager *this, uint64_t a2, const re::internal::AssetEntry *a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  int v12 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v14 = 0;
  uint64_t v6 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v13, 0);
  *((void *)&v17 + 1) = 0;
  long long v18 = 0uLL;
  re::DynamicString::setCapacity(&v17, 0);
  uint64_t v19 = 0;
  if (*((void *)a3 + 14) == -1) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *((void *)a3 + 14);
  }
  inited = (re *)re::AssetPath::initAssetIdAssetPath((uint64_t)&v12, v7, *((void *)a3 + 33));
  if (*((void *)this + 143))
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    long long buf = (unint64_t)v13;
    re::DynamicString::setCapacity(&buf, 0);
    re::AssetPath::fullAssetPath((re::DynamicString *)&v12, (re::DynamicString *)&buf);
    re::NetworkActionQueue::queueSyncActionNetworkLoad((re::AssetManager *)((char *)this + 704), a2, (const re::DynamicString *)&buf);
    if (void)buf && (BYTE8(buf)) {
      (*(void (**)(void))(*(void *)buf + 40))();
    }
  }
  else
  {
    uint64_t v9 = *re::assetsLogObjects(inited);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      if (*((void *)a3 + 21)) {
        uint64_t v10 = (char *)*((void *)a3 + 22);
      }
      else {
        uint64_t v10 = (char *)a3 + 169;
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v10;
      _os_log_impl(&dword_233120000, v9, OS_LOG_TYPE_DEFAULT, "Trying to queue network load for %s when NetworkAssetService not available!", (uint8_t *)&buf, 0xCu);
    }
  }
  if ((void)v17)
  {
    if (BYTE8(v17)) {
      (*(void (**)(void))(*(void *)v17 + 40))();
    }
    long long v17 = 0u;
    long long v18 = 0u;
  }
  uint64_t result = v13;
  if (v13)
  {
    if (v14) {
      return (uint64_t *)(*(uint64_t (**)(void))(*v13 + 40))();
    }
  }
  return result;
}

void re::AssetManager::findDependencies(re::AssetManager *this@<X0>, const re::AssetHandle *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)a2 + 1);
  if (v5 && (unsigned int v6 = atomic_load((unsigned int *)(v5 + 704)), v6 == 2))
  {
    uint64_t v7 = (const re::internal::AssetEntry *)*((void *)a2 + 1);
    re::AssetManager::findDependencies(this, v7, a3);
  }
  else
  {
    int v8 = *re::assetsLogObjects(this);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = re::AssetHandle::assetInfo(a2);
      if (v9[17]) {
        uint64_t v10 = (char *)v9[18];
      }
      else {
        uint64_t v10 = (char *)v9 + 137;
      }
      int v11 = 136315138;
      int v12 = v10;
      _os_log_impl(&dword_233120000, v8, OS_LOG_TYPE_DEFAULT, "Tried to get dependencies for unloaded asset '%s'", (uint8_t *)&v11, 0xCu);
    }
    *(void *)(a3 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    *(void *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 24) = 0;
  }
}

void re::AssetManager::loadAssetFromDescriptorsOnBackgroundTask_entryStateLocked(uint64_t a1, void *a2, uint64_t *a3)
{
  unsigned int v6 = re::globalAllocators((re *)a1);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[2] + 32))(v6[2], 56, 8);
  *(_OWORD *)uint64_t v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(void *)(v7 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  re::CancellationTokenSource::CancellationTokenSource((re::CancellationTokenSource *)(v7 + 24));
  uint64_t v16 = v7;
  if (a2[14] == -1) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = a2[14];
  }
  *(void *)uint64_t v7 = v8;
  *(_DWORD *)(v7 + 16) = 0;
  uint64_t v9 = *(void *)(a1 + 1032);
  uint64_t v10 = a2[33];
  uint64_t v11 = *(void *)(v7 + 48);
  uint64_t v14 = v11;
  if (v11) {
    id v12 = (id)(v11 + 8);
  }
  re::internal::AssetBackgroundLoader::loadAssetAsync(v9, v7, v10, v8, a3, &v14, &v15);
  uint64_t v13 = *(void *)(v7 + 8);
  *(void *)(v7 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v15;
  uint64_t v15 = (re::internal::AssetLoadItem *)v13;
  if (v13)
  {

    uint64_t v15 = 0;
  }
  if (v14)
  {

    uint64_t v14 = 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1280));
  a2[50] = v7;
  re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)(a1 + 1288), &v16);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1280));
}

unsigned __int8 *re::AssetManager::loadAssetAsync_entryStateLocked(unsigned __int8 *this, re::internal::AssetEntry *a2, char a3)
{
  if (atomic_load((unsigned int *)a2 + 176)) {
    return this;
  }
  unsigned __int8 v5 = atomic_load(this + 1345);
  if (v5)
  {
    re::AssetManager::putEntryInFailedState_entryStateLocked(v8, (uint64_t)a2, 100, (uint64_t)&v16);
    this = v16;
    if (!v16 || (v17 & 1) == 0) {
      return this;
    }
    uint64_t v7 = v18;
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(void *)this + 40))(this, v7);
  }
  if (!*((void *)a2 + 33))
  {
    re::AssetManager::putEntryInFailedState_entryStateLocked(v9, (uint64_t)a2, 200, (uint64_t)&v13);
    this = v13;
    if (!v13 || (v14 & 1) == 0) {
      return this;
    }
    uint64_t v7 = v15;
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(void *)this + 40))(this, v7);
  }
  if (*((unsigned char *)a2 + 312))
  {
    re::AssetManager::putEntryInFailedState_entryStateLocked(v6, (uint64_t)a2, 200, (uint64_t)&v10);
    this = (unsigned __int8 *)v10;
    if (!v10 || (v11 & 1) == 0) {
      return this;
    }
    uint64_t v7 = v12;
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(void *)this + 40))(this, v7);
  }
  return (unsigned __int8 *)re::AssetManager::putEntryInLoadingState_entryStateLocked((re::AssetManager *)this, (const re::AssetType **)a2, a3);
}

void re::AssetManager::loadAssetAsync(re::AssetManager *this, os_unfair_lock_s *a2, BOOL a3)
{
  unsigned int v6 = a2 + 96;
  os_unfair_lock_lock(a2 + 96);
  re::AssetManager::loadAssetAsync_entryStateLocked(this, (re::internal::AssetEntry *)a2, a3);
  os_unfair_lock_unlock(v6);
}

void re::AssetManager::unloadAssetEntry_entryStateLocked(os_unfair_lock_s *this, re::internal::AssetEntry *a2, int a3)
{
  if (*((unsigned char *)a2 + 416))
  {
    *((unsigned char *)a2 + 416) = 0;
    if (a3)
    {
      unsigned __int8 v5 = this + 16;
      os_unfair_lock_lock(this + 16);
    }
    else
    {
      unsigned __int8 v5 = 0;
    }
    uint64_t v6 = *(void *)&this[70]._os_unfair_lock_opaque;
    if (v6)
    {
      unint64_t v7 = 0;
      while (*(re::internal::AssetEntry **)(*(void *)(*(void *)&this[74]._os_unfair_lock_opaque + 8 * v7) + 24) != a2)
      {
        if (v6 == ++v7) {
          goto LABEL_9;
        }
      }
    }
    else
    {
LABEL_9:
      unint64_t v7 = -1;
    }
    re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::removeAt((uint64_t)&this[66], v7);
    if (v5) {
      os_unfair_lock_unlock(v5);
    }
  }
  re::AssetManager::internalAssetEntryUnloadLoadingAssetPointer_entryStateLocked((re::AssetManager *)this, a2);
  re::AssetManager::internalAssetEntryUnloadAssetPointer_entryStateLocked((re::AssetManager *)this, a2);
  re::internal::AssetEntry::setIsLoading_locked(a2, 0);
  re::internal::AssetEntry::cancelResourceRequest_stateLocked(a2);
}

void re::AssetManager::cancelLoadingAsset_entryStateLocked(os_unfair_lock_s *a1, re::internal::AssetEntry *this, int a3)
{
  uint64_t v6 = *((void *)this + 50);
  if (v6)
  {
    *(_DWORD *)(v6 + 16) = 1;
    *((void *)this + 50) = 0;
  }
  if (*((_DWORD *)this + 30) == 8)
  {
    if (*((void *)this + 14) == -1) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = *((void *)this + 14);
    }
    re::NetworkActionQueue::removeLoadActions(a1 + 176, v7);
  }
  if ((re::internal::AssetEntry::hasAssetPointer(this) & 1) != 0
    || re::internal::AssetEntry::hasLoadingAssetPointer(this))
  {
    re::AssetManager::unloadAssetEntry_entryStateLocked(a1, this, a3);
  }
  re::internal::AssetEntry::setIsLoading_locked(this, 0);
}

void re::AssetManager::processUpdatedResourcePayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  uint64_t v6 = (os_unfair_lock_s *)(a2 + 384);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 384));
  if (*(void *)(a2 + 112) == -1) {
    LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  }
  else {
    uint64_t v8 = *(void *)(a2 + 112);
  }
  uint64_t v9 = *(const char ***)(a2 + 264);
  if (v9) {
    uint64_t v10 = *v9;
  }
  else {
    uint64_t v10 = 0;
  }
  re::AssetSignpost::fireImpulse((re::AssetSignpost *)0x80F, v8, v10, v7);
  if (*(unsigned char *)a3)
  {
    unsigned int v11 = atomic_load((unsigned int *)(a2 + 704));
    uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 1144) + 104))(*(void *)(a1 + 1144));
    re::DynamicString::format((re::DynamicString *)"%llu", (re::DynamicString *)&v61, v12);
    re::AssetHandle::AssetHandle((re::AssetHandle *)v59, (re::internal::AssetEntry *)a2);
    if (v60) {
      BOOL v13 = *(unsigned __int8 *)(v60 + 259) != 0;
    }
    else {
      BOOL v13 = 0;
    }
    re::DefaultAssetSerialize::DefaultAssetSerialize((re::DefaultAssetSerialize *)&v56, (const re::AssetHandle *)v59);
    unint64_t v56 = &unk_26E6CA920;
    v57[88] = 1;
    int v26 = re::DynamicString::DynamicString((re::DynamicString *)v58, (const re::DynamicString *)&v61);
    v58[4] = a1;
    if (v11 == 2)
    {
      uint64_t v34 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(void *)(a1 + 1040), *(void *)(a2 + 264));
      *(unsigned char *)(a2 + 256) = 1;
      ++*(_DWORD *)(a2 + 260);
      uint64_t v35 = re::internal::AssetEntry::assetPointer((re::internal::AssetEntry *)a2);
      uint64_t v36 = *(void **)(a3 + 8);
      *(void *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      id v51 = v36;
      (*(void (**)(uint64_t, uint64_t, id *, void **))(*(void *)v34 + 232))(v34, v35, &v51, &v56);

      if (*(unsigned char *)(a1 + 1377)) {
        re::AssetManager::assetNonSharedDataByteSize_entryStateLocked((re::AssetManager *)a1, (re::internal::AssetEntry *)a2);
      }
    }
    else if (v11 == 1)
    {
      uint64_t v27 = (re *)re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(void *)(a1 + 1040), *(void *)(a2 + 264));
      if (*(unsigned char *)(a1 + 1393))
      {
        uint64_t v28 = v27;
        uint64_t v29 = (void *)(*(uint64_t (**)(re *))(*(void *)v27 + 120))(v27);
        LOBYTE(buf) = 0;
        id v54 = *(id *)(a3 + 8);
        int v30 = (*(uint64_t (**)(re *, id *, void *, void **, long long *, void))(*(void *)v28 + 208))(v28, &v54, v29, &v56, &buf, 0);

        if (!v30) {
          goto LABEL_51;
        }
        uint64_t v31 = *(void **)(a3 + 8);
        *(void *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
        id v53 = v31;
        if (*(void *)(a2 + 168)) {
          uint64_t v32 = *(void *)(a2 + 176);
        }
        else {
          uint64_t v32 = a2 + 169;
        }
        char v33 = (*(uint64_t (**)(re *, id *, void *, uint64_t))(*(void *)v28 + 224))(v28, &v53, v29, v32);

        if (*(unsigned char *)(a2 + 352) || (_BYTE)buf)
        {
          if (!*(unsigned char *)(a2 + 352) || (_BYTE)buf)
          {
            if (!*(unsigned char *)(a2 + 352) && (_BYTE)buf) {
              *(unsigned char *)(a2 + 35re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 1;
            }
            *(void *)(a2 + 360) = *((void *)&buf + 1);
          }
          else
          {
            *(unsigned char *)(a2 + 35re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
          }
        }
        if (v33)
        {
          *(unsigned char *)(a2 + 417) = 0;
          re::AssetManager::processLoadedAsset_entryStateLocked((re::AssetManager *)a1, (re::internal::AssetEntry *)a2, v29);
        }
        else
        {
LABEL_51:
          uint64_t v48 = (_anonymous_namespace_ *)(*(uint64_t (**)(re *, void *))(*(void *)v28 + 16))(v28, v29);
          re::AssetManager::putEntryInFailedState_entryStateLocked(v49, a2, 302, (uint64_t)v52);
          if (*(void *)&v52[0])
          {
            if (BYTE8(v52[0])) {
              (*(void (**)(void))(**(void **)&v52[0] + 40))();
            }
            memset(v52, 0, sizeof(v52));
          }
        }
      }
      else
      {
        uint64_t v39 = *(void **)(a3 + 8);
        *(void *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
        id v55 = v39;
        unsigned int v40 = re::globalAllocators(v27);
        uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v40[2] + 32))(v40[2], 56, 8);
        *(_OWORD *)uint64_t v41 = 0u;
        *(_OWORD *)(v41 + 16) = 0u;
        *(_OWORD *)(v41 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
        *(void *)(v41 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
        re::CancellationTokenSource::CancellationTokenSource((re::CancellationTokenSource *)(v41 + 24));
        *(void *)&long long buf = v41;
        if (*(void *)(a2 + 112) == -1) {
          uint64_t v42 = 0;
        }
        else {
          uint64_t v42 = *(void *)(a2 + 112);
        }
        *(void *)uint64_t v41 = v42;
        *(_DWORD *)(v41 + 16) = 0;
        uint64_t v43 = *(re **)(a1 + 1032);
        uint64_t v44 = *(void *)(a2 + 264);
        uint64_t v45 = *(void *)(v41 + 48);
        uint64_t v65 = v45;
        if (v45)
        {
          int v50 = v43;
          id v46 = (id)(v45 + 8);
          uint64_t v43 = v50;
        }
        re::internal::AssetBackgroundLoader::loadAssetAsync(v43, v41, v44, v42, (uint64_t *)&v55, &v65, v13, &v66);
        uint64_t v47 = *(void *)(v41 + 8);
        *(void *)(v41 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v66;
        uint64_t v66 = (re::internal::AssetLoadItem *)v47;
        if (v47)
        {

          uint64_t v66 = 0;
        }
        if (v45) {

        }
        os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1280));
        *(void *)(a2 + 400) = v41;
        re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)(a1 + 1288), &buf);
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1280));
      }
    }
    else
    {
      unsigned int v37 = *re::assetsLogObjects(v26);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
      {
        if (*(void *)(a2 + 168)) {
          uint64_t v38 = *(void *)(a2 + 176);
        }
        else {
          uint64_t v38 = a2 + 169;
        }
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v38;
        _os_log_debug_impl(&dword_233120000, v37, OS_LOG_TYPE_DEBUG, "Updated payload for asset '%s' was ignored (asset is not currently loaded)", (uint8_t *)&buf, 0xCu);
      }
    }
    unint64_t v56 = &unk_26E6CA920;
    if (v58[0])
    {
      if (v58[1]) {
        (*(void (**)(void))(*(void *)v58[0] + 40))();
      }
      memset(v58, 0, 32);
    }
    unint64_t v56 = &unk_26E6CA958;
    re::Optional<re::AssetPath>::~Optional(v57);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v59);
    if (v61 && (v62 & 1) != 0) {
      (*(void (**)(void))(*(void *)v61 + 40))();
    }
  }
  else
  {
    uint64_t v15 = *(void **)(a3 + 8);
    char v14 = (id *)(a3 + 8);
    CFStringRef v16 = CFErrorCopyDescription((CFErrorRef)v15);
    char v17 = (re::AssetLoader *)re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(void *)(a1 + 1040), *(void *)(a2 + 264));
    re::internal::AssetEntry::LoadState::unloadAssetPointer_locked(a2 + 704, v17);
    CFStringRef v18 = re::WrappedError::domain(v14);
    if (CFStringCompare(v18, @"REResourceSharingErrorDomain", 0) || [*v14 code] != 600)
    {
      CStringPtr = CFStringGetCStringPtr(v16, 0x8000100u);
      uint64_t v20 = (re::DynamicString *)v63;
      uint64_t v21 = (re *)re::DynamicString::format((re::DynamicString *)"Failed to fetch asset: %s", (re::DynamicString *)v63, CStringPtr);
      uint64_t v22 = v63;
      uint64_t v23 = a2;
      int v24 = 302;
    }
    else
    {
      uint64_t v19 = CFStringGetCStringPtr(v16, 0x8000100u);
      uint64_t v20 = (re::DynamicString *)v64;
      uint64_t v21 = (re *)re::DynamicString::format((re::DynamicString *)"Resource Memory limit hit for asset: %s", (re::DynamicString *)v64, v19);
      uint64_t v22 = v64;
      uint64_t v23 = a2;
      int v24 = 400;
    }
    re::AssetManager::putEntryInFailedState_entryStateLocked(v21, v23, v24, (uint64_t)v22);
    re::DynamicString::deinit(v20);
    CFRelease(v16);
  }
  os_unfair_lock_unlock(v6);
}

void re::AssetManager::setAssetPayloadRequestOptions(uint64_t a1, uint64_t a2, id *a3)
{
  uint64_t v6 = (os_unfair_lock_s *)(a2 + 384);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 384));
  uint64_t v7 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(void *)(a1 + 1040), *(void *)(a2 + 264));
  uint64_t v8 = re::internal::AssetEntry::assetPointer((re::internal::AssetEntry *)a2);
  id v10 = *a3;
  (*(void (**)(uint64_t, uint64_t, id *))(*(void *)v7 + 240))(v7, v8, &v10);

  uint64_t v9 = *(void *)(a2 + 392);
  if (v9) {
    (*(void (**)(void, uint64_t, id *))(**(void **)(a1 + 1064) + 72))(*(void *)(a1 + 1064), v9, a3);
  }
  os_unfair_lock_unlock(v6);
}

void re::AssetManager::assetPayloadDidChange(re::AssetManager *this, re::internal::AssetEntry *a2)
{
  if (*((unsigned char *)a2 + 320)) {
    *((unsigned char *)a2 + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0;
  }
  if (*((unsigned char *)a2 + 336)) {
    *((unsigned char *)a2 + 336) = 0;
  }
  if (*((unsigned char *)a2 + 352)) {
    *((unsigned char *)a2 + 35re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  }
  unsigned int v4 = (void *)*((void *)this + 134);
  if (v4)
  {
    if (*((void *)this + 104) && dispatch_get_specific((char *)this + 832) == (char *)this + 832)
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)location, a2);
      (*(void (**)(void *, id *))(*(void *)v4 + 16))(v4, location);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)location);
    }
    else
    {
      uint64_t v5 = *((void *)this + 216);
      uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 217);
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      objc_initWeak(location, (char *)a2 + 8);
      block[0] = MEMORY[0x263EF8330];
      block[1] = 1174405120;
      block[2] = ___ZN2re12AssetManager21assetPayloadDidChangeERNS_8internal10AssetEntryE_block_invoke;
      block[3] = &__block_descriptor_tmp_59;
      block[4] = v5;
      uint64_t v8 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v9[0] = 0;
      objc_copyWeak(v9, location);
      v9[1] = v4;
      dispatch_async(*((dispatch_queue_t *)this + 65), block);
      objc_destroyWeak(v9);
      v9[0] = 0;
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
      objc_destroyWeak(location);
      if (v6) {
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void ___ZN2re12AssetManager21assetPayloadDidChangeERNS_8internal10AssetEntryE_block_invoke(uint64_t a1)
{
  unsigned int v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    int v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      unsigned int v4 = v3;
      uint64_t v5 = *(void *)(a1 + 32);
      if (v5)
      {
        id WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 48));
        if (WeakRetained)
        {
          uint64_t v7 = WeakRetained;
          v9[0] = MEMORY[0x263EF8330];
          v9[1] = 1174405120;
          id v9[2] = ___ZN2re12AssetManager21assetPayloadDidChangeERNS_8internal10AssetEntryE_block_invoke_2;
          v9[3] = &__block_descriptor_tmp_58_0;
          v9[4] = v5;
          id v10 = v4;
          atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v11 = *(void *)(a1 + 56);
          uint64_t v12 = WeakRetained - 8;
          uint64_t v8 = WeakRetained;
          dispatch_sync(*(dispatch_queue_t *)(v5 + 1704), v9);
          if (v12)
          {

            uint64_t v12 = 0;
          }
          if (v10) {
            std::__shared_weak_count::__release_shared[abi:nn180100](v10);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:nn180100](v4);
    }
  }
}

void ___ZN2re12AssetManager21assetPayloadDidChangeERNS_8internal10AssetEntryE_block_invoke_2(uint64_t a1)
{
  if (!*(unsigned char *)(*(void *)(a1 + 32) + 1346))
  {
    uint64_t v1 = *(void *)(a1 + 48);
    re::AssetHandle::AssetHandle((re::AssetHandle *)v2, *(re::internal::AssetEntry **)(a1 + 56));
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v1 + 16))(v1, v2);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v2);
  }
}

void *__copy_helper_block_8_32c45_ZTSNSt3__110shared_ptrIN2re12AssetManagerEEE56c46_ZTSN2re9SharedPtrINS_8internal10AssetEntryEEE(void *result, void *a2)
{
  uint64_t v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[7];
  result[7] = v3;
  if (v3) {
    return (id)(v3 + 8);
  }
  return result;
}

void __destroy_helper_block_8_32c45_ZTSNSt3__110shared_ptrIN2re12AssetManagerEEE56c46_ZTSN2re9SharedPtrINS_8internal10AssetEntryEEE(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2)
  {

    *(void *)(a1 + 56) = 0;
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:nn180100](v3);
  }
}

void __copy_helper_block_8_32c42_ZTSNSt3__18weak_ptrIN2re12AssetManagerEEE48c48_ZTSN2re10ArcWeakPtrINS_8internal10AssetEntryEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  objc_copyWeak((id *)(a1 + 48), (id *)(a2 + 48));
}

void __destroy_helper_block_8_32c42_ZTSNSt3__18weak_ptrIN2re12AssetManagerEEE48c48_ZTSN2re10ArcWeakPtrINS_8internal10AssetEntryEEE(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 48));
  *(void *)(a1 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void re::AssetManager::makeSharedResourcePayload(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v5 = *(unint64_t **)(a2 + 8);
  uint64_t v6 = re::AssetHandle::AssetHandle((re::AssetHandle *)v14, (re::internal::AssetEntry *)v5);
  re::DefaultAssetSerialize::DefaultAssetSerialize((re::DefaultAssetSerialize *)&v11, (const re::AssetHandle *)v14);
  uint64_t v11 = &unk_26E6CA920;
  v12[88] = 0;
  re::DynamicString::DynamicString((re::DynamicString *)v13, (const re::DynamicString *)&v9);
  v13[4] = a1;
  if (v9 && (v10 & 1) != 0) {
    (*(void (**)(void))(*(void *)v9 + 40))();
  }
  uint64_t v7 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(void *)(a1 + 1040), v5[33]);
  uint64_t v8 = re::internal::AssetEntry::assetPointer((re::internal::AssetEntry *)v5);
  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v7 + 200))(v7, v8, &v11);
  uint64_t v11 = &unk_26E6CA920;
  if (v13[0])
  {
    if (v13[1]) {
      (*(void (**)(void))(*(void *)v13[0] + 40))();
    }
    memset(v13, 0, 32);
  }
  uint64_t v11 = &unk_26E6CA958;
  re::Optional<re::AssetPath>::~Optional(v12);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v14);
}

uint64_t re::AssetManager::setResourcePayloadObserver(uint64_t result, uint64_t a2)
{
  *(void *)(result + 107re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = a2;
  return result;
}

void re::AssetManager::cancelLoadingAssetId(os_unfair_lock_s *this, uint64_t a2)
{
  unsigned int v4 = this + 16;
  os_unfair_lock_lock(this + 16);
  re::AssetManager::lookupExistingAsset_assetTablesLocked((re::internal::AssetTypeRegistry **)this, a2, v11);
  os_unfair_lock_unlock(v4);
  if (v11[0])
  {
    uint64_t v5 = (uint64_t)v13;
    uint64_t v6 = v13 + 96;
    os_unfair_lock_lock(v13 + 96);
    unsigned int v7 = atomic_load((unsigned int *)(v5 + 704));
    if (v7 == 1)
    {
      re::internal::AssetEntry::cancelResourceRequest_stateLocked((re::internal::AssetEntry *)v5);
      uint64_t v8 = *(void *)(v5 + 400);
      if (v8 && !*(_DWORD *)(v8 + 16) && !*(void *)(v5 + 720)) {
        atomic_store(1u, (unsigned __int8 *)(*(void *)(v8 + 48) + 24));
      }
      re::AssetManager::cancelLoadingAsset_entryStateLocked(this, (re::internal::AssetEntry *)v5, 1);
      uint64_t v9 = (re *)re::DynamicString::format((re::DynamicString *)"AssetId %llu has been removed over the network.", (re::DynamicString *)v10, a2);
      re::AssetManager::putEntryInFailedState_entryStateLocked(v9, v5, 302, (uint64_t)v10);
      if (*(void *)&v10[0])
      {
        if (BYTE8(v10[0])) {
          (*(void (**)(void))(**(void **)&v10[0] + 40))();
        }
        memset(v10, 0, sizeof(v10));
      }
    }
    os_unfair_lock_unlock(v6);
    if (v11[0]) {
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v12);
    }
  }
}

void re::AssetManager::entryLoadStateChanged(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 <= 3 && *a3 != 1) {
    atomic_store(1u, (unsigned __int8 *)(a1 + 640));
  }
  if (!*(unsigned char *)(a1 + 1394)) {
    goto LABEL_16;
  }
  int v6 = *a3;
  if (*a3 == 3)
  {
    if (!re::internal::enableSignposts(0, 0)) {
      goto LABEL_16;
    }
LABEL_15:
    kdebug_trace();
    goto LABEL_16;
  }
  if (v6 == 2)
  {
    if (!re::internal::enableSignposts(0, 0)) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  if (v6 == 1 && re::internal::enableSignposts(0, 0)) {
    goto LABEL_15;
  }
LABEL_16:
  uint64_t v7 = *(void *)(a2 + 112);
  if ((unint64_t)(v7 + 1) >= 2 && *(void *)(a1 + 1144))
  {
    re::NetworkActionQueue::queueSyncActionShareLoadState((re::NetworkActionQueue *)(a1 + 704), v7);
  }
}

void re::AssetManager::enqueueUnreferencedUnloadRequest(os_unfair_lock_s *this, re::internal::AssetEntry *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (re::assetsHighFrequencyLoggingEnabled(void)::onceToken != -1) {
    dispatch_once(&re::assetsHighFrequencyLoggingEnabled(void)::onceToken, &__block_literal_global_1);
  }
  if (re::assetsHighFrequencyLoggingEnabled(void)::shouldLog)
  {
    unsigned int v4 = *re::assetsLogObjects((re *)this);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      if (*((unsigned char *)a2 + 168)) {
        uint64_t v5 = (char *)*((void *)a2 + 22);
      }
      else {
        uint64_t v5 = (char *)a2 + 169;
      }
      int v9 = 136315138;
      char v10 = v5;
      _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "Enqueue unreferenced unload request: %s", (uint8_t *)&v9, 0xCu);
    }
  }
  int v6 = this + 224;
  os_unfair_lock_lock(this + 224);
  uint64_t v7 = (_anonymous_namespace_ *)&this[226];
  if (a2) {
    uint64_t v8 = (char *)a2 + 8;
  }
  else {
    uint64_t v8 = 0;
  }
  objc_initWeak((id *)&v9, v8);
  re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::add(v7, (id *)&v9);
  objc_destroyWeak((id *)&v9);
  os_unfair_lock_unlock(v6);
}

uint64_t *re::AssetManager::registerAssetType(uint64_t a1, char **a2, uint64_t *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 520));
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1280));
  uint64_t v6 = *(void *)(a1 + 1304);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1280));
  if (v6)
  {
    uint64_t v8 = *re::assetsLogObjects(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *a2;
      *(_DWORD *)long long buf = 136315138;
      CFStringRef v16 = v9;
      _os_log_impl(&dword_233120000, v8, OS_LOG_TYPE_DEFAULT, "Registering an asset type (%s) while there are active asset loading background tasks. Tasks that are already active may fail if they expect the type to be registered. Also, this could lead to a race condition.", buf, 0xCu);
    }
  }
  (*(void (**)(void))(*(void *)*a3 + 112))();
  uint64_t v10 = *(void *)(a1 + 1040);
  uint64_t v11 = *a3;
  *a3 = 0;
  uint64_t v13 = v11;
  std::__function::__value_func<void ()(re::AssetLoader *)>::__value_func[abi:nn180100]((uint64_t)&v14, (uint64_t)(a3 + 1));
  re::internal::AssetTypeRegistry::registerAssetType(v10, a2, &v13);
  return std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100](&v13);
}

void re::AssetManager::registerCustomAssetType(re::AssetManager *this@<X0>, const re::CustomAssetRegistrationParameters *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  re::CustomAssetRegistrationParameters::validate(a2, v20);
  if (v20[0])
  {
    uint64_t v7 = re::globalAllocators(v6);
    uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[2] + 32))(v7[2], 24, 8);
    int v9 = (const void *)*((void *)a2 + 8);
    if (*((void *)a2 + 7)) {
      uint64_t v10 = (const void *)*((void *)a2 + 7);
    }
    else {
      uint64_t v10 = &__block_literal_global_0;
    }
    *uint64_t v8 = &unk_26E6C94B8;
    v8[1] = v10;
    CFRetain(v10);
    if (v9) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = &__block_literal_global_5;
    }
    v8[2] = v11;
    CFRetain(v11);
    uint64_t v29 = buf;
    uint64_t v27 = v26;
    *(void *)long long buf = &unk_26E6C9F88;
    uint64_t v25 = v8;
    v26[0] = &unk_26E6C9F88;
    std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](buf);
    if (*((void *)a2 + 4)) {
      uint64_t v12 = (char *)*((void *)a2 + 5);
    }
    else {
      uint64_t v12 = (char *)a2 + 33;
    }
    uint64_t v13 = (uint64_t)v25;
    uint64_t v25 = 0;
    uint64_t v22 = v13;
    if (v27)
    {
      if (v27 == v26)
      {
        int v24 = v23;
        (*(void (**)(void *, void *))(v26[0] + 24))(v26, v23);
      }
      else
      {
        int v24 = v27;
        uint64_t v27 = 0;
      }
    }
    else
    {
      int v24 = 0;
    }
    dispatch_assert_queue_V2(*((dispatch_queue_t *)this + 65));
    os_unfair_lock_lock((os_unfair_lock_t)this + 320);
    uint64_t v15 = *((void *)this + 163);
    os_unfair_lock_unlock((os_unfair_lock_t)this + 320);
    if (v15)
    {
      uint64_t v17 = *re::assetsLogObjects(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v12;
        _os_log_impl(&dword_233120000, v17, OS_LOG_TYPE_DEFAULT, "Registering an asset type (%s) while there are active asset loading background tasks. Tasks that are already active may fail if they expect the type to be registered. Also, this could lead to a race condition.", buf, 0xCu);
      }
    }
    uint64_t v18 = *((void *)this + 130);
    uint64_t v19 = v22;
    uint64_t v22 = 0;
    *(void *)long long buf = v19;
    if (v24)
    {
      if (v24 == v23)
      {
        int v30 = &buf[8];
        (*(void (**)(void *))(v23[0] + 24))(v23);
      }
      else
      {
        int v30 = v24;
        int v24 = 0;
      }
    }
    else
    {
      int v30 = 0;
    }
    re::internal::AssetTypeRegistry::registerOwnedAssetType(v12, v18, (uint64_t *)buf, a3);
    std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)buf);
    std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100](&v22);
    std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v25);
  }
  else
  {
    id v14 = v21;
    *(unsigned char *)a3 = 0;
    *(void *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v14;
  }
  if (!v20[0]) {
}
  }

BOOL re::AssetManager::registerAssetProvider(re::AssetManager *this, re::AssetProvider *a2)
{
  uint64_t v2 = (os_unfair_lock_s *)*((void *)this + 141);
  uint64_t v7 = a2;
  if (!a2) {
    return re::AssetProviderRegistry::registerAssetProvider(v2, (uint64_t *)&v7);
  }
  uint64_t v3 = (char *)a2 + 8;
  unsigned int v4 = (char *)a2 + 8;
  BOOL v5 = re::AssetProviderRegistry::registerAssetProvider(v2, (uint64_t *)&v7);

  return v5;
}

uint64_t re::AssetManager::getCompilerForExtension(re::AssetManager *this, const char *a2)
{
  return (***((uint64_t (****)(void, const char *))this + 131))(*((void *)this + 131), a2);
}

uint64_t non-virtual thunk to're::AssetManager::getCompilerForExtension(re::AssetManager *this, const char *a2)
{
  return (***((uint64_t (****)(void, const char *))this + 130))(*((void *)this + 130), a2);
}

void ___ZN2re12AssetManager15makeLoadRequestEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      unsigned int v4 = v3;
      uint64_t v5 = *(void *)(a1 + 32);
      if (v5)
      {
        v6[0] = MEMORY[0x263EF8330];
        v6[1] = 1174405120;
        v6[2] = ___ZN2re12AssetManager15makeLoadRequestEv_block_invoke_2;
        v6[3] = &__block_descriptor_tmp_63;
        v6[4] = v5;
        uint64_t v7 = v3;
        atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
        dispatch_sync(*(dispatch_queue_t *)(v5 + 1704), v6);
        dispatch_group_leave(*(dispatch_group_t *)(v5 + 1712));
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v7);
        }
      }
      std::__shared_weak_count::__release_shared[abi:nn180100](v4);
    }
  }
}

void ___ZN2re12AssetManager15makeLoadRequestEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(re::AssetManager **)(a1 + 32);
  if (!*((unsigned char *)v1 + 1346)) {
    re::AssetManager::updateScheduler(v1);
  }
}

BOOL re::AssetManager::isLoading(re::AssetManager *this)
{
  dispatch_assert_queue_V2(*((dispatch_queue_t *)this + 65));
  os_unfair_lock_lock((os_unfair_lock_t)this + 320);
  uint64_t v2 = *((void *)this + 163);
  os_unfair_lock_unlock((os_unfair_lock_t)this + 320);
  if (v2) {
    return 1;
  }
  os_unfair_lock_lock((os_unfair_lock_t)this + 16);
  uint64_t v3 = *((void *)this + 35);
  os_unfair_lock_unlock((os_unfair_lock_t)this + 16);
  if (v3) {
    return 1;
  }
  os_unfair_lock_lock((os_unfair_lock_t)this + 144);
  uint64_t v5 = *((void *)this + 75);
  if (v5)
  {
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(os_unfair_lock_s **)(*((void *)this + 78)
                                + 8 * ((unint64_t)(v6 + *((void *)this + 76)) % *((void *)this + 74)));
      uint64_t v8 = v7 + 48;
      os_unfair_lock_lock(v7 + 48);
      LODWORD(v7) = v7[84];
      os_unfair_lock_unlock(v8);
      if (!v7) {
        break;
      }
      if (v5 == ++v6) {
        goto LABEL_8;
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)this + 144);
    return 1;
  }
LABEL_8:
  os_unfair_lock_unlock((os_unfair_lock_t)this + 144);
  uint64_t v9 = *((void *)this + 132);
  if (v9)
  {
    if (*(_DWORD *)(v9 + 92)) {
      return 1;
    }
  }
  uint64_t v10 = *((void *)this + 133);
  if (v10)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v10 + 24))(v10)) {
      return 1;
    }
  }
  return re::NetworkActionQueue::hasLoadActions((os_unfair_lock_s *)this + 176);
}

uint64_t re::AssetManager::assetByteSize(re::AssetManager *this, re::AssetHandle *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = atomic_load((unsigned int *)(v2 + 704));
  if (v3 != 2) {
    return 0;
  }
  uint64_t v5 = (os_unfair_lock_s *)*((void *)a2 + 1);
  os_unfair_lock_lock(v5 + 96);
  uint64_t v6 = re::AssetManager::assetByteSize_entryLocked(this, (re::internal::AssetEntry *)v5);
  os_unfair_lock_unlock(v5 + 96);
  return v6;
}

uint64_t re::AssetManager::assetNonSharedDataByteSize(re::AssetManager *this, re::AssetHandle *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = atomic_load((unsigned int *)(v2 + 704));
  if (v3 != 2) {
    return 0;
  }
  uint64_t v5 = (os_unfair_lock_s *)*((void *)a2 + 1);
  os_unfair_lock_lock(v5 + 96);
  uint64_t v6 = re::AssetManager::assetNonSharedDataByteSize_entryStateLocked(this, (re::internal::AssetEntry *)v5);
  os_unfair_lock_unlock(v5 + 96);
  return v6;
}

double re::AssetManager::gatherAssetStatisticsByType@<D0>(re::AssetManager *this@<X0>, void *a2@<X8>)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  dispatch_assert_queue_V2(*((dispatch_queue_t *)this + 65));
  uint64_t v4 = *(unsigned int *)(*((void *)this + 130) + 28);
  a2[1] = v4;
  a2[2] = 0;
  if (v4)
  {
                                                       + 32))();
    a2[2] = v6;
    if (!v6) {
      goto LABEL_79;
    }
    uint64_t v8 = v6;
    uint64_t v9 = v6;
    uint64_t v10 = v4 - 1;
    if (v4 != 1)
    {
      uint64_t v9 = v6;
      do
      {
        *(void *)uint64_t v9 = 0;
        *((void *)v9 + 1) = 0;
        *((_DWORD *)v9 + 6) = 0;
        *((void *)v9 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
        *((_OWORD *)v9 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0uLL;
        *((_OWORD *)v9 + 3) = 0uLL;
        *((_OWORD *)v9 + 4) = 0uLL;
        *((_OWORD *)v9 + 5) = 0uLL;
        *((void *)v9 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
        uint64_t v9 = (_anonymous_namespace_ *)((char *)v9 + 104);
        --v10;
      }
      while (v10);
    }
    *(void *)uint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    *((_DWORD *)v9 + 6) = 0;
    *((void *)v9 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    *((_OWORD *)v9 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
    *((_OWORD *)v9 + 3) = 0u;
    *((_OWORD *)v9 + 4) = 0u;
    *((_OWORD *)v9 + 5) = 0u;
    *((void *)v9 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v11 = *((void *)this + 130);
  uint64_t v12 = *(unsigned int *)(v11 + 32);
  if (v12)
  {
    uint64_t v13 = 0;
    id v14 = (int *)(*(void *)(v11 + 16) + 8);
    while (1)
    {
      int v15 = *v14;
      v14 += 16;
      if (v15 < 0) {
        break;
      }
      if (v12 == ++v13)
      {
        LODWORD(v13) = *(_DWORD *)(v11 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v13) = 0;
  }
  if (v12 != v13)
  {
    uint64_t v16 = 0;
    uint64_t v17 = v13;
    while (v16 != v4)
    {
      *((void *)v8 + 13 * v16++ + 5) = *(void *)(*(void *)(v11 + 16) + (v17 << 6) + 16);
      if (v12 <= (int)v13 + 1) {
        int v18 = v13 + 1;
      }
      else {
        int v18 = v12;
      }
      while (1)
      {
        uint64_t v17 = (v13 + 1);
        if (v18 - 1 == v13) {
          break;
        }
        uint64_t v6 = (_anonymous_namespace_ *)*(unsigned int *)(*(void *)(v11 + 16) + (v17 << 6) + 8);
        LODWORD(v13) = v13 + 1;
        int v19 = v17;
        if ((v6 & 0x80000000) != 0) {
          goto LABEL_24;
        }
      }
      int v19 = v18;
LABEL_24:
      LODWORD(v13) = v19;
      if (v12 == v19) {
        goto LABEL_25;
      }
    }
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v61 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)id v54 = 136315906;
    *(void *)&v54[4] = "operator[]";
    __int16 v55 = 1024;
    int v56 = 468;
    __int16 v57 = 2048;
    uint64_t v58 = v4;
    __int16 v59 = 2048;
    uint64_t v60 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_79:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
  }
LABEL_25:
  LODWORD(v63) = 0;
  long long v61 = 0u;
  long long v62 = 0u;
  *(void *)((char *)&v63 + 4) = 0x7FFFFFFFLL;
  if (v4)
  {
    uint64_t v20 = (_anonymous_namespace_ *)((char *)v8 + 104 * v4);
    do
    {
      unint64_t v21 = *((void *)v8 + 5);
      *(void *)id v54 = v8;
      unint64_t v22 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v21 ^ (v21 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v21 ^ (v21 >> 30))) >> 27));
      unint64_t v23 = v22 ^ (v22 >> 31);
      if ((void)v61)
      {
        unint64_t v24 = v23 % DWORD2(v62);
        uint64_t v25 = *(unsigned int *)(*((void *)&v61 + 1) + 4 * v24);
        if (v25 != 0x7FFFFFFF)
        {
          while (*(void *)(v62 + 32 * v25 + 16) != v21)
          {
            uint64_t v25 = *(_DWORD *)(v62 + 32 * v25 + 8) & 0x7FFFFFFF;
            if (v25 == 0x7FFFFFFF) {
              goto LABEL_33;
            }
          }
          goto LABEL_34;
        }
      }
      else
      {
        LODWORD(v24) = 0;
      }
LABEL_33:
      re::HashTable<re::AssetType const*,re::AssetTypeStatistics *,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addAsMove((uint64_t)&v61, v24, v23, (void *)v8 + 5, v54);
      ++DWORD2(v63);
LABEL_34:
      uint64_t v8 = (_anonymous_namespace_ *)((char *)v8 + 104);
    }
    while (v8 != v20);
  }
  os_unfair_lock_lock((os_unfair_lock_t)this + 16);
  uint64_t v27 = *((unsigned int *)this + 26);
  uint64_t v28 = 0;
  if (v27)
  {
    uint64_t v29 = (int *)(*((void *)this + 11) + 8);
    while (1)
    {
      int v30 = *v29;
      v29 += 14;
      if (v30 < 0) {
        break;
      }
      if (v27 == ++v28)
      {
        LODWORD(v2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *((_DWORD *)this + 26);
        break;
      }
    }
  }
  if (v27 != v28)
  {
    uint64_t v31 = v28;
    uint64_t v32 = *((void *)this + 11);
    do
    {
      uint64_t v33 = *(void *)(v32 + 56 * v31 + 48);
      if (v33) {
        int v26 = (_anonymous_namespace_ *)(id)(v33 + 8);
      }
      if ((void)v61)
      {
        unint64_t v34 = *(void *)(v33 + 264);
        unint64_t v35 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v34 ^ (v34 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v34 ^ (v34 >> 30))) >> 27));
        unint64_t v36 = (v35 ^ (v35 >> 31)) % DWORD2(v62);
        uint64_t v37 = v62;
        uint64_t v38 = *(unsigned int *)(*((void *)&v61 + 1) + 4 * v36);
        if (v38 != 0x7FFFFFFF)
        {
          while (*(void *)(v62 + 32 * v38 + 16) != v34)
          {
            uint64_t v38 = *(_DWORD *)(v62 + 32 * v38 + 8) & 0x7FFFFFFF;
            if (v38 == 0x7FFFFFFF) {
              goto LABEL_50;
            }
          }
          goto LABEL_51;
        }
      }
      else
      {
        uint64_t v37 = v62;
      }
LABEL_50:
      uint64_t v38 = 0x7FFFFFFFLL;
LABEL_51:
      uint64_t v39 = *(void *)(v37 + 32 * v38 + 24);
      unint64_t v40 = *(void *)(v39 + 8);
      unint64_t v41 = *(void *)(v39 + 16);
      if (v41 >= v40)
      {
        unint64_t v42 = v41 + 1;
        if (v40 < v41 + 1)
        {
          if (*(void *)v39)
          {
            uint64_t v43 = 2 * v40;
            BOOL v44 = v40 == 0;
            unint64_t v45 = 8;
            if (!v44) {
              unint64_t v45 = v43;
            }
            if (v45 <= v42) {
              unint64_t v46 = v42;
            }
            else {
              unint64_t v46 = v45;
            }
            re::DynamicArray<re::AssetPath>::setCapacity((void *)v39, v46);
          }
          else
          {
            re::DynamicArray<re::AssetPath>::setCapacity((void *)v39, v42);
            ++*(_DWORD *)(v39 + 24);
          }
        }
        unint64_t v41 = *(void *)(v39 + 16);
      }
      uint64_t v47 = *(void *)(v39 + 32) + 80 * v41;
      *(_DWORD *)uint64_t v47 = *(_DWORD *)(v33 + 32);
      re::DynamicString::DynamicString((re::DynamicString *)(v47 + 8), (const re::DynamicString *)(v33 + 40));
      re::DynamicString::DynamicString((re::DynamicString *)(v47 + 40), (const re::DynamicString *)(v33 + 72));
      *(void *)(v47 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *(void *)(v33 + 104);
      ++*(void *)(v39 + 16);
      ++*(_DWORD *)(v39 + 24);
      ++*(void *)(v39 + 48);
      unsigned int v48 = atomic_load((unsigned int *)(v33 + 704));
      switch(v48)
      {
        case 0u:
          uint64_t v49 = (void *)(v39 + 56);
          goto LABEL_67;
        case 1u:
          uint64_t v49 = (void *)(v39 + 64);
          goto LABEL_67;
        case 2u:
          ++*(void *)(v39 + 72);
          *(void *)(v39 + 88) += *(void *)(v33 + 648);
          os_unfair_lock_lock((os_unfair_lock_t)(v33 + 384));
          uint64_t v50 = re::AssetManager::assetByteSize_entryLocked(this, (re::internal::AssetEntry *)v33);
          os_unfair_lock_unlock((os_unfair_lock_t)(v33 + 384));
          uint64_t v49 = (void *)(v39 + 96);
          goto LABEL_68;
        case 3u:
          uint64_t v49 = (void *)(v39 + 80);
LABEL_67:
          uint64_t v50 = 1;
LABEL_68:
          *v49 += v50;
          break;
        default:
          break;
      }

      uint64_t v32 = *((void *)this + 11);
      if (*((_DWORD *)this + 26) <= (v28 + 1)) {
        int v51 = v28 + 1;
      }
      else {
        int v51 = *((_DWORD *)this + 26);
      }
      while (1)
      {
        uint64_t v31 = (v28 + 1);
        if (v51 - 1 == v28) {
          break;
        }
        LODWORD(v2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v28 + 1;
        int v52 = v31;
        if ((*(_DWORD *)(v32 + 56 * v31 + 8) & 0x80000000) != 0) {
          goto LABEL_76;
        }
      }
      int v52 = v51;
LABEL_76:
      LODWORD(v2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v52;
    }
    while (v27 != v52);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)this + 16);
  return re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v61);
}

void re::AssetManager::findAssetHandlesOfType(os_unfair_lock_s *this@<X0>, const re::AssetType *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  lock = this + 16;
  os_unfair_lock_lock(this + 16);
  uint64_t os_unfair_lock_opaque = this[26]._os_unfair_lock_opaque;
  if (os_unfair_lock_opaque)
  {
    uint64_t v8 = 0;
    uint64_t v9 = (int *)(*(void *)&this[22]._os_unfair_lock_opaque + 8);
    while (1)
    {
      int v10 = *v9;
      v9 += 14;
      if (v10 < 0) {
        break;
      }
      if (os_unfair_lock_opaque == ++v8)
      {
        LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = this[26];
        break;
      }
    }
  }
  else
  {
    LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  }
  if (os_unfair_lock_opaque == v8)
  {
    unint64_t v11 = 0;
  }
  else
  {
    unint64_t v11 = 0;
    uint64_t v12 = v8;
    uint64_t v13 = *(void *)&this[22]._os_unfair_lock_opaque;
    unsigned int v14 = this[26]._os_unfair_lock_opaque;
    do
    {
      uint64_t v15 = *(void *)(v13 + 56 * v12 + 48);
      if (v15)
      {
        uint64_t v16 = (void *)(v15 + 8);
        id v17 = (id)(v15 + 8);
        int v18 = *(const re::AssetType **)(v15 + 264);

        unsigned int v14 = this[26]._os_unfair_lock_opaque;
        uint64_t v13 = *(void *)&this[22]._os_unfair_lock_opaque;
      }
      else
      {
        int v18 = (const re::AssetType *)MEMORY[0x108];
      }
      if (v18 == a2) {
        ++v11;
      }
      if (v14 <= (int)v8 + 1) {
        unsigned int v19 = v8 + 1;
      }
      else {
        unsigned int v19 = v14;
      }
      while (1)
      {
        uint64_t v12 = (v8 + 1);
        if (v19 - 1 == v8) {
          break;
        }
        LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v8 + 1;
        unsigned int v20 = v12;
        if ((*(_DWORD *)(v13 + 56 * v12 + 8) & 0x80000000) != 0) {
          goto LABEL_22;
        }
      }
      unsigned int v20 = v19;
LABEL_22:
      LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v20;
    }
    while (os_unfair_lock_opaque != v20);
  }
  long long v42 = 0uLL;
  uint64_t v43 = 0;
  uint64_t v21 = this[26]._os_unfair_lock_opaque;
  if (v21)
  {
    uint64_t v22 = 0;
    unint64_t v23 = (int *)(*(void *)&this[22]._os_unfair_lock_opaque + 8);
    while (1)
    {
      int v24 = *v23;
      v23 += 14;
      if (v24 < 0) {
        break;
      }
      if (v21 == ++v22)
      {
        LODWORD(v2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = this[26];
        break;
      }
    }
  }
  else
  {
    LODWORD(v2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  }
  if (v21 != v22)
  {
    unint64_t v25 = 0;
    uint64_t v26 = v22;
    uint64_t v27 = *(void *)&this[22]._os_unfair_lock_opaque;
    do
    {
      uint64_t v28 = *(const re::AssetType ***)(v27 + 56 * v26 + 48);
      if (v28) {
        uint64_t v29 = v28 + 1;
      }
      if (v28[33] == a2)
      {
        re::AssetHandle::AssetHandle(&v39, (re::internal::AssetEntry *)v28);
        uint64_t v30 = *((void *)&v42 + 1);
        if (*((void *)&v42 + 1) <= v25)
        {
          uint64_t v44 = 0;
          long long v56 = 0u;
          long long v57 = 0u;
          long long v55 = 0u;
          long long v53 = 0u;
          long long v54 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v45 = 136315906;
          unint64_t v46 = "operator[]";
          __int16 v47 = 1024;
          int v48 = 468;
          __int16 v49 = 2048;
          unint64_t v50 = v25;
          __int16 v51 = 2048;
          uint64_t v52 = v30;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        uint64_t v31 = (uint64_t *)(v43 + 24 * v25);
        uint64_t v32 = v31[1];
        v31[1] = v40;
        uint64_t v40 = v32;
        uint64_t v33 = *v31;
        *uint64_t v31 = 0;
        *uint64_t v31 = v39;
        uint64_t v39 = v33;
        uint64_t v34 = v31[2];
        v31[2] = v41;
        uint64_t v41 = v34;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v39);
        ++v25;
      }

      uint64_t v27 = *(void *)&this[22]._os_unfair_lock_opaque;
      if (this[26]._os_unfair_lock_opaque <= (v22 + 1)) {
        uint32_t v35 = v22 + 1;
      }
      else {
        uint32_t v35 = this[26]._os_unfair_lock_opaque;
      }
      while (1)
      {
        uint64_t v26 = (v22 + 1);
        if (v35 - 1 == v22) {
          break;
        }
        LODWORD(v2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v22 + 1;
        uint32_t v36 = v26;
        if ((*(_DWORD *)(v27 + 56 * v26 + 8) & 0x80000000) != 0) {
          goto LABEL_43;
        }
      }
      uint32_t v36 = v35;
LABEL_43:
      LODWORD(v2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v36;
    }
    while (v21 != v36);
  }
  *(_OWORD *)a3 = v42;
  uint64_t v37 = v43;
  uint64_t v43 = 0;
  long long v42 = 0uLL;
  *(void *)(a3 + 16) = v37;
  re::FixedArray<re::AssetHandle>::deinit(&v42);
  os_unfair_lock_unlock(lock);
}

uint64_t re::AssetManager::enableBackgroundLoading(uint64_t this, char a2)
{
  uint64_t v2 = *(void *)(this + 1032);
  *(unsigned char *)(v2 + 4) = a2;
  *(unsigned char *)(v2 + 5) = a2;
  return this;
}

uint64_t re::AssetManager::enableNetworkLoadingRedirector(uint64_t a1, int a2, const char *a3, const char *a4)
{
  uint64_t v12 = a4;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 520));
  int v9 = a2;
  re::HashTable<re::internal::AssetLoadingRoot,re::DynamicString,re::internal::AssetLoadingRoot,re::internal::AssetLoadingRoot,true,false>::addOrReplace<char const*&>(a1 + 1080, (re::DynamicString *)&v9, &v12);
  uint64_t result = v10;
  if (v10)
  {
    if (v11) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
    }
  }
  return result;
}

uint64_t re::HashTable<re::internal::AssetLoadingRoot,re::DynamicString,re::internal::AssetLoadingRoot,re::internal::AssetLoadingRoot,true,false>::addOrReplace<char const*&>(uint64_t a1, re::DynamicString *a2, const char **a3)
{
  *(void *)unsigned int v14 = 0;
  *(void *)uint64_t v15 = 0;
  uint64_t v16 = 0;
  re::HashTable<re::internal::AssetLoadingRoot,re::DynamicString,re::internal::AssetLoadingRoot,re::internal::AssetLoadingRoot,true,false>::findEntry(a1, a2, (uint64_t)v14);
  unsigned int v6 = v15[1];
  if (v15[1] == 0x7FFFFFFF)
  {
    unsigned int v7 = re::HashTable<re::internal::AssetLoadingRoot,re::DynamicString,re::internal::AssetLoadingRoot,re::internal::AssetLoadingRoot,true,false>::addEmplace<char const*&>(a1, v15[0], *(unint64_t *)v14, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v8 = a1 + 16;
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v8 = a1 + 16;
    re::DynamicString::deinit((re::DynamicString *)(v9 + 88 * v15[1] + 56));
    uint64_t v10 = (re::DynamicString *)(*(void *)v8 + 88 * v6 + 56);
    char v11 = *a3;
    ++*(_DWORD *)(v8 + 24);
    unsigned int v7 = v15[1];
  }
  return *(void *)v8 + 88 * v7 + 56;
}

uint64_t re::AssetManager::disableNetworkLoadingRedirector(uint64_t a1, int a2, const char *a3)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 520));
  int v8 = a2;
  re::HashTable<re::internal::AssetLoadingRoot,re::DynamicString,re::internal::AssetLoadingRoot,re::internal::AssetLoadingRoot,true,false>::remove(a1 + 1080, &v8);
  uint64_t result = v9;
  if (v9)
  {
    if (v10) {
      return (*(uint64_t (**)(void))(*(void *)v9 + 40))();
    }
  }
  return result;
}

BOOL re::HashTable<re::internal::AssetLoadingRoot,re::DynamicString,re::internal::AssetLoadingRoot,re::internal::AssetLoadingRoot,true,false>::remove(uint64_t a1, _DWORD *a2)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  re::HashTable<re::internal::AssetLoadingRoot,re::DynamicString,re::internal::AssetLoadingRoot,re::internal::AssetLoadingRoot,true,false>::findEntry(a1, a2, (uint64_t)&v11);
  unsigned int v3 = HIDWORD(v12);
  if (HIDWORD(v12) != 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    int v5 = *(_DWORD *)(v4 + 88 * HIDWORD(v12) + 8) & 0x7FFFFFFF;
    if (v13 == 0x7FFFFFFF)
    {
      *(_DWORD *)(*(void *)(a1 + 8) + 4 * v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v5;
      unsigned int v6 = HIDWORD(v12);
    }
    else
    {
      *(_DWORD *)(v4 + 88 * v13 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(v4 + 88 * v13 + 8) & 0x80000000 | v5;
      unsigned int v6 = v3;
    }
    re::HashTable<re::internal::AssetLoadingRoot,re::DynamicString,re::internal::AssetLoadingRoot,re::internal::AssetLoadingRoot,true,false>::EntryWithHash::free((_DWORD *)(*(void *)(a1 + 16) + 88 * v6));
    int v7 = HIDWORD(v12);
    uint64_t v8 = *(void *)(a1 + 16) + 88 * HIDWORD(v12);
    *(_DWORD *)(v8 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(v8 + 8) & 0x80000000 | *(_DWORD *)(a1 + 36);
    --*(_DWORD *)(a1 + 28);
    int v9 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = v7;
    *(_DWORD *)(a1 + 40) = v9;
  }
  return v3 != 0x7FFFFFFF;
}

void re::AssetManager::findDependencies(re::AssetManager *this@<X0>, const re::internal::AssetEntry *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6 = (os_unfair_lock_s *)((char *)a2 + 384);
  os_unfair_lock_lock((os_unfair_lock_t)a2 + 96);
  unsigned int v7 = atomic_load((unsigned int *)a2 + 176);
  if (v7 == 2)
  {
    uint64_t v8 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*((void *)this + 130), *((void *)a2 + 33));
    uint64_t v9 = re::internal::AssetEntry::assetPointer(a2);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 104))(v8, v9);
  }
  else
  {
    *(void *)(a3 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    *(void *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 24) = 0;
  }
  os_unfair_lock_unlock(v6);
}

void re::AssetManager::deviceAssetPath(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  uint64_t v6 = *(void *)(*(void *)(a2 + 8) + 112);
  if ((unint64_t)(v6 + 1) < 2
    || (char v10 = (os_unfair_lock_s *)(a1 + 64),
        os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64)),
        uint64_t v22 = v6,
        uint64_t v11 = re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 120, &v22), os_unfair_lock_unlock(v10), !v11))
  {
LABEL_2:
    *a5 = 0;
    return;
  }
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  re::DynamicString::setCapacity(&v36, 0);
  uint64_t v13 = *(void *)(v11 + 16);
  if (!v13)
  {
LABEL_30:
    if (v36)
    {
      if (v37) {
        (*(void (**)(uint64_t *, uint64_t))(*v36 + 40))(v36, v38);
      }
    }
    goto LABEL_2;
  }
  unsigned int v14 = *(uint64_t **)(v11 + 32);
  uint64_t v15 = 144 * v13;
  while (1)
  {
    re::DynamicString::DynamicString((re::DynamicString *)&v22, (const re::DynamicString *)v14);
    re::DynamicArray<BOOL>::DynamicArray((uint64_t)&v24, v14 + 4);
    re::DynamicArray<BOOL>::DynamicArray((uint64_t)&v29, v14 + 9);
    re::DynamicString::DynamicString((re::DynamicString *)&v34, (const re::DynamicString *)(v14 + 14));
    re::AssetProviderRegistry::deviceAssetPath(*(os_unfair_lock_s **)(a1 + 1128), (uint64_t)&v22, a4, v19);
    int v16 = v19[0];
    if (v19[0] && (a3 & 1) == 0)
    {
      if (BYTE8(v34)) {
        id v17 = (char *)v35;
      }
      else {
        id v17 = (char *)&v34 + 9;
      }
      uint64_t v18 = re::internal::AssetTypeRegistry::assetTypeWithName(*(re::internal::AssetTypeRegistry **)(a1 + 1040), v17);
      re::AssetPath::updateWithCompiledExtension((char *)&v20, v18);
      int v16 = v19[0];
    }
    if (v16) {
      break;
    }
    if ((void)v34)
    {
      if (BYTE8(v34)) {
        (*(void (**)(void))(*(void *)v34 + 40))();
      }
      long long v34 = 0u;
      long long v35 = 0u;
    }
    if (v29)
    {
      if (v33) {
        (*(void (**)(void))(*(void *)v29 + 40))();
      }
      uint64_t v33 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v29 = 0;
      ++v32;
    }
    if (v24)
    {
      if (v28) {
        (*(void (**)(void))(*(void *)v24 + 40))();
      }
      uint64_t v28 = 0;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v24 = 0;
      ++v27;
    }
    if (v22 && (v23 & 1) != 0) {
      (*(void (**)(void))(*(void *)v22 + 40))();
    }
    v14 += 18;
    v15 -= 144;
    if (!v15) {
      goto LABEL_30;
    }
  }
  *a5 = 1;
  re::DynamicString::DynamicString((re::DynamicString *)(a5 + 8), (const re::DynamicString *)&v20);
  if (v19[0] && v20 && (v21 & 1) != 0) {
    (*(void (**)(void))(*(void *)v20 + 40))();
  }
  if ((void)v34)
  {
    if (BYTE8(v34)) {
      (*(void (**)(void))(*(void *)v34 + 40))();
    }
    long long v34 = 0u;
    long long v35 = 0u;
  }
  if (v29)
  {
    if (v33) {
      (*(void (**)(void))(*(void *)v29 + 40))();
    }
    uint64_t v33 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v29 = 0;
    ++v32;
  }
  if (v24)
  {
    if (v28) {
      (*(void (**)(void))(*(void *)v24 + 40))();
    }
    uint64_t v28 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v24 = 0;
    ++v27;
  }
  if (v22 && (v23 & 1) != 0) {
    (*(void (**)(void))(*(void *)v22 + 40))();
  }
  if (v36 && (v37 & 1) != 0) {
    (*(void (**)(uint64_t *, uint64_t))(*v36 + 40))(v36, v38);
  }
}

uint64_t re::AssetManager::getAssetCompatibilityService(re::AssetManager *this)
{
  return *((void *)this + 145);
}

uint64_t re::AssetManager::getBlockingAssetLoadRequestService(re::AssetManager *this)
{
  return *((void *)this + 144);
}

void re::AssetManager::registerExplicitDependency(re::AssetManager *this, re::internal::AssetEntry **a2, re::internal::AssetEntry **a3)
{
}

void re::AssetManager::registeredAssetTypes(re::AssetManager *this@<X0>, void *a2@<X8>)
{
  a2[2] = 0;
  uint64_t v3 = *((void *)this + 130);
  uint64_t v4 = *(unsigned int *)(v3 + 28);
  a2[1] = v4;
  if (v4)
  {
    uint64_t v5 = 2 * v4;
    a2[2] = v6;
    if (!v6) {
      goto LABEL_26;
    }
    uint64_t v8 = v6;
    uint64_t v9 = v6;
    if (v4 != 1)
    {
      bzero(v6, v5 * 8 - 16);
      uint64_t v9 = &v8[v5 - 2];
    }
    *uint64_t v9 = 0;
    v9[1] = 0;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v10 = *(unsigned int *)(v3 + 32);
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = (int *)(*(void *)(v3 + 16) + 8);
    while (1)
    {
      int v13 = *v12;
      v12 += 16;
      if (v13 < 0) {
        break;
      }
      if (v10 == ++v11)
      {
        LODWORD(v11) = *(_DWORD *)(v3 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v11) = 0;
  }
  if (v10 != v11)
  {
    uint64_t v14 = 0;
    uint64_t v15 = v11;
    uint64_t v16 = *(void *)(v3 + 16);
    while (1)
    {
      uint64_t v17 = v16 + (v15 << 6);
      uint64_t v18 = *(void *)(v17 + 16);
      uint64_t v19 = (*(uint64_t (**)(void))(**(void **)(v17 + 24) + 112))(*(void *)(v17 + 24));
      if (v14 == v4) {
        break;
      }
      uint64_t v20 = &v8[2 * v14];
      *uint64_t v20 = v18;
      v20[1] = v19;
      ++v14;
      uint64_t v16 = *(void *)(v3 + 16);
      if (*(_DWORD *)(v3 + 32) <= (v11 + 1)) {
        int v21 = v11 + 1;
      }
      else {
        int v21 = *(_DWORD *)(v3 + 32);
      }
      while (1)
      {
        uint64_t v15 = (v11 + 1);
        if (v21 - 1 == v11) {
          break;
        }
        LODWORD(v11) = v11 + 1;
        int v22 = v15;
        if ((*(_DWORD *)(v16 + (v15 << 6) + 8) & 0x80000000) != 0) {
          goto LABEL_23;
        }
      }
      int v22 = v21;
LABEL_23:
      LODWORD(v11) = v22;
      if (v10 == v22) {
        return;
      }
    }
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_26:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::AssetManager::pathStringfromAssetId(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  int v9 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = 0;
  uint64_t v6 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v10, 0);
  *((void *)&v14 + 1) = 0;
  long long v15 = 0uLL;
  re::DynamicString::setCapacity(&v14, 0);
  uint64_t v16 = 0;
  re::AssetPath::initAssetIdAssetPath((uint64_t)&v9, a2, a3);
  uint64_t v7 = v10;
  *((void *)a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)a1 + 3) = 0;
  *(void *)a1 = v7;
  *((void *)a1 + 1) = 0;
  re::DynamicString::setCapacity(a1, 0);
  re::AssetPath::fullAssetPath((re::DynamicString *)&v9, a1);
  if ((void)v14)
  {
    if (BYTE8(v14)) {
      (*(void (**)(void))(*(void *)v14 + 40))();
    }
    long long v14 = 0u;
    long long v15 = 0u;
  }
  uint64_t result = (uint64_t)v10;
  if (v10)
  {
    if (v11) {
      return (*(uint64_t (**)(void))(*v10 + 40))();
    }
  }
  return result;
}

re::DynamicString *re::AssetManager::lookupAssetPathString@<X0>(os_unfair_lock_s *this@<X0>, const re::DynamicString *a2@<X1>, const re::AssetPath *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = this + 16;
  os_unfair_lock_lock(this + 16);
  uint64_t v9 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)&this[18], (uint64_t)a2);
  os_unfair_lock_unlock(v8);
  if (v9)
  {
    uint64_t result = re::DynamicString::DynamicString((re::DynamicString *)&v68, a2);
    *(unsigned char *)a4 = 1;
    uint64_t v12 = v70;
    *(void *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v68;
    *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v12;
    *(_OWORD *)(a4 + 16) = v69;
    return result;
  }
  re::AssetPath::invalidAssetPath(v10, (uint64_t)&v80);
  if (*((void *)a2 + 1)) {
    uint64_t v13 = (char *)*((void *)a2 + 2);
  }
  else {
    uint64_t v13 = (char *)a2 + 9;
  }
  re::AssetManager::parseAssetPath((re::AssetManager *)this, v13, (const re::AssetPath *)&v80, 0, (uint64_t)v74);
  if (v74[0])
  {
    *(void *)&v60[16] = 0;
    uint64_t v61 = 0;
    *(_OWORD *)uint64_t v60 = v76;
    re::DynamicString::setCapacity(v60, 0);
    re::AssetPath::fullAssetPath((re::DynamicString *)&v75, (re::DynamicString *)v60);
    os_unfair_lock_lock(v8);
    uint64_t v14 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)&this[18], (uint64_t)v60);
    os_unfair_lock_unlock(v8);
    if (v14)
    {
      re::DynamicString::DynamicString((re::DynamicString *)&v68, (const re::DynamicString *)v60);
      *(unsigned char *)a4 = 1;
      uint64_t v15 = v70;
      *(void *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v68;
      *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v15;
      *(_OWORD *)(a4 + 16) = v69;
LABEL_10:
      if (*(void *)v60 && (v60[8] & 1) != 0) {
        (*(void (**)(void))(**(void **)v60 + 40))();
      }
      goto LABEL_45;
    }
    int v19 = v75;
    if (v75 == v80
      && ((v77 & 1) != 0 ? (uint64_t v20 = *(const char **)&v78[7]) : (uint64_t v20 = v78),
          (v82 & 1) != 0 ? (int v21 = *(const char **)&v83[7]) : (int v21 = v83),
          !strcmp(v20, v21)))
    {
      if (*((unsigned char *)a2 + 8)) {
        uint64_t v16 = (char *)*((void *)a2 + 2);
      }
      else {
        uint64_t v16 = (char *)a2 + 9;
      }
    }
    else
    {
      if (v19 != 5)
      {
        uint64_t v31 = (_anonymous_namespace_ *)re::AssetManager::convertToLoadDescriptor(this, (const re::AssetPath *)&v75, &v68);
        if ((_BYTE)v68
          && (os_unfair_lock_lock(v8),
              int v32 = (uint64_t *)re::HashTable<re::AssetLoadDescriptor,unsigned long long,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::tryGet((uint64_t)&this[42], (uint64_t)&v69), os_unfair_lock_unlock(v8), v32))
        {
          re::AssetManager::pathStringfromAssetId((_anonymous_namespace_ *)&v65, *v32, v79);
          long long v33 = v65;
          uint64_t v34 = v66;
          uint64_t v35 = v67;
          *(unsigned char *)a4 = 1;
          *(_OWORD *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v33;
          *(void *)(a4 + 24) = v34;
          *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v35;
        }
        else
        {
          re::DynamicString::operator+((re::DynamicString *)&v62, (uint64_t)a2, (re::DynamicString *)&v65);
          long long v41 = v65;
          long long v65 = 0uLL;
          uint64_t v42 = v66;
          uint64_t v43 = v67;
          uint64_t v66 = 0;
          uint64_t v67 = 0;
          *(unsigned char *)a4 = 0;
          *(_OWORD *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v41;
          *(void *)(a4 + 24) = v42;
          *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v43;
          if (void)v62 && (BYTE8(v62)) {
            (*(void (**)(void))(*(void *)v62 + 40))();
          }
        }
        re::Optional<re::AssetLoadDescriptor>::~Optional(&v68);
        goto LABEL_10;
      }
      if (*((void *)a2 + 1)) {
        uint64_t v16 = (char *)*((void *)a2 + 2);
      }
      else {
        uint64_t v16 = (char *)a2 + 9;
      }
      int v22 = strrchr(v16, 47);
      if (v22) {
        uint64_t v16 = v22 + 1;
      }
    }
    if (*(void *)v60 && (v60[8] & 1) != 0) {
      (*(void (**)(void))(**(void **)v60 + 40))();
    }
  }
  else if (*((unsigned char *)a2 + 8))
  {
    uint64_t v16 = (char *)*((void *)a2 + 2);
  }
  else
  {
    uint64_t v16 = (char *)a2 + 9;
  }
  re::AssetManager::parseAssetPath((re::AssetManager *)this, v16, a3, 0, (uint64_t)&v68);
  if ((_BYTE)v68)
  {
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    long long v65 = *((unint64_t *)&v69 + 1);
    re::DynamicString::setCapacity(&v65, 0);
    re::AssetPath::fullAssetPath((re::DynamicString *)&v69, (re::DynamicString *)&v65);
    os_unfair_lock_lock(v8);
    uint64_t v17 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)&this[18], (uint64_t)&v65);
    os_unfair_lock_unlock(v8);
    if (v17)
    {
      re::DynamicString::DynamicString((re::DynamicString *)v60, (const re::DynamicString *)&v65);
      *(unsigned char *)a4 = 1;
      *(void *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(void *)v60;
      *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v61;
      *(_OWORD *)(a4 + 16) = *(_OWORD *)&v60[8];
      goto LABEL_19;
    }
    if (*(_DWORD *)a3 == 8)
    {
      re::AssetManager::resolveChildLoadDescriptors((re::AssetManager *)this, a3, (uint64_t)v60);
      if (v60[0])
      {
        re::AssetManager::lookupExistingImmutableAssetId(this, (uint64_t)&v60[8], (uint64_t)v54);
        if (v54[0])
        {
          re::AssetManager::pathStringfromAssetId((_anonymous_namespace_ *)&v62, v55, (uint64_t)v73);
          long long v28 = v62;
          uint64_t v29 = v63;
          uint64_t v30 = v64;
          *(unsigned char *)a4 = 1;
          *(_OWORD *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v28;
          *(void *)(a4 + 24) = v29;
          *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v30;
        }
        else
        {
          if (*((void *)a2 + 1)) {
            __int16 v49 = (char *)*((void *)a2 + 2);
          }
          else {
            __int16 v49 = (char *)a2 + 9;
          }
          re::AssetPath::fullAssetPath(a3, (re::DynamicString *)&v56);
          if (v57) {
            unint64_t v50 = v59;
          }
          else {
            unint64_t v50 = v58;
          }
          re::DynamicString::format((re::DynamicString *)"Failed to find a registered AssetId for load descriptors resolved from relative path %s from parent %s. The resolved load descriptors must already be registered with an AssetId.", (re::DynamicString *)&v62, v49, v50);
          long long v51 = v62;
          uint64_t v52 = v63;
          uint64_t v53 = v64;
          *(unsigned char *)a4 = 0;
          *(_OWORD *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v51;
          *(void *)(a4 + 24) = v52;
          *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v53;
          if (v56 && (v57 & 1) != 0) {
            (*(void (**)(void))(*(void *)v56 + 40))();
          }
        }
        re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)&v60[8]);
        goto LABEL_19;
      }
      if (*((void *)a2 + 1)) {
        uint64_t v44 = (char *)*((void *)a2 + 2);
      }
      else {
        uint64_t v44 = (char *)a2 + 9;
      }
      re::AssetPath::fullAssetPath(a3, (re::DynamicString *)&v56);
      if (v57) {
        int v45 = v59;
      }
      else {
        int v45 = v58;
      }
      re::DynamicString::format((re::DynamicString *)"Failed to resolve child load descriptors with relative path %s from parent %s.", (re::DynamicString *)&v62, v44, v45);
      long long v46 = v62;
      __int16 v47 = v63;
      uint64_t v48 = v64;
      *(unsigned char *)a4 = 0;
      *(_OWORD *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v46;
      *(void *)(a4 + 24) = v47;
      *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v48;
      uint64_t v39 = v56;
      if (v56 && (v57 & 1) != 0)
      {
        uint64_t v40 = v59;
        goto LABEL_82;
      }
    }
    else
    {
      re::DynamicString::operator+((re::DynamicString *)&v62, (uint64_t)a2, (re::DynamicString *)v60);
      long long v36 = *(_OWORD *)v60;
      memset(v60, 0, sizeof(v60));
      uint64_t v37 = *(void *)&v60[16];
      uint64_t v38 = v61;
      uint64_t v61 = 0;
      *(unsigned char *)a4 = 0;
      *(_OWORD *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v36;
      *(void *)(a4 + 24) = v37;
      *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v38;
      uint64_t v39 = v62;
      if (void)v62 && (BYTE8(v62))
      {
        uint64_t v40 = v63;
LABEL_82:
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v39 + 40))(v39, v40);
      }
    }
LABEL_19:
    if (void)v65 && (BYTE8(v65)) {
      (*(void (**)(void))(*(void *)v65 + 40))();
    }
    goto LABEL_44;
  }
  if (*((void *)a2 + 1)) {
    char v23 = (char *)*((void *)a2 + 2);
  }
  else {
    char v23 = (char *)a2 + 9;
  }
  if (v71) {
    uint64_t v24 = *(unsigned char **)&v72[7];
  }
  else {
    uint64_t v24 = v72;
  }
  re::DynamicString::format((re::DynamicString *)"Unexpected error parsing unknown path '%s': %s", (re::DynamicString *)v60, v23, v24);
  long long v25 = *(_OWORD *)v60;
  uint64_t v26 = *(void *)&v60[16];
  uint64_t v27 = v61;
  *(unsigned char *)a4 = 0;
  *(_OWORD *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v25;
  *(void *)(a4 + 24) = v26;
  *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v27;
LABEL_44:
  re::Result<re::AssetPath,re::DetailedError>::~Result(&v68);
LABEL_45:
  re::Result<re::AssetPath,re::DetailedError>::~Result(v74);
  if ((void)v84)
  {
    if (BYTE8(v84)) {
      (*(void (**)(void))(*(void *)v84 + 40))();
    }
    long long v84 = 0u;
    long long v85 = 0u;
  }
  uint64_t result = (re::DynamicString *)v81;
  if (v81)
  {
    if (v82) {
      return (re::DynamicString *)(*(uint64_t (**)(void))(*(void *)v81 + 40))();
    }
  }
  return result;
}

re::DynamicString *re::AssetManager::getDescription_assetTablesLocked@<X0>(re::AssetManager *this@<X0>, const re::internal::AssetEntry *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *((void *)a2 + 14);
  if ((unint64_t)(v6 + 1) >= 2
    && (uint64_t v10 = this,
        uint64_t v29 = (uint64_t *)*((void *)a2 + 14),
        (this = (re::AssetManager *)re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 120, (uint64_t *)&v29)) != 0))
  {
    uint64_t v11 = this;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    re::DynamicString::setCapacity((void *)a4, 0);
    if ((a3 & 1) == 0)
    {
      re::DynamicString::format((re::DynamicString *)"%llu ", (re::DynamicString *)&v29, v6);
      re::DynamicString::operator=((re::DynamicString *)a4, (re::DynamicString *)&v29);
      if (v29)
      {
        if (v30) {
          (*(void (**)(void))(*v29 + 40))();
        }
      }
    }
    uint64_t v12 = (const char *)**((void **)a2 + 33);
    size_t v13 = strlen(v12);
    re::DynamicString::append((re::DynamicString *)a4, v12, v13);
    uint64_t v14 = (_anonymous_namespace_ *)re::DynamicString::append((re::DynamicString *)a4, " ", 1uLL);
    unint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    re::DynamicString::setCapacity(&v29, 0);
    uint64_t v15 = *((void *)v11 + 2);
    if (v15)
    {
      uint64_t v16 = 144 * v15;
      uint64_t v17 = v15 - 1;
      uint64_t v18 = *((void *)v11 + 4);
      do
      {
        re::DynamicString::append((re::DynamicString *)a4, "(", 1uLL);
        unint64_t v19 = *(void *)(v18 + 8);
        uint64_t v20 = (const char *)(v18 + 9);
        if (v19) {
          int v21 = *(const char **)(v18 + 16);
        }
        else {
          int v21 = (const char *)(v18 + 9);
        }
        size_t v22 = v19 >> 1;
        size_t v23 = v19 >> 1;
        if (*(void *)(v18 + 8)) {
          size_t v24 = v22;
        }
        else {
          size_t v24 = v23;
        }
        re::DynamicString::append((re::DynamicString *)a4, v21, v24);
        re::DynamicString::append((re::DynamicString *)a4, ")", 1uLL);
        if (*(unsigned char *)(v18 + 8)) {
          uint64_t v20 = *(const char **)(v18 + 16);
        }
        uint64_t ProviderForScheme = re::AssetProviderRegistry::tryGetProviderForScheme(*((os_unfair_lock_s **)v10 + 141), v20);
        if (ProviderForScheme)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(void *)ProviderForScheme + 72))(ProviderForScheme, v18, &v29);
          if (v30) {
            uint64_t v26 = v31;
          }
          else {
            uint64_t v26 = (char *)&v30 + 1;
          }
          if (v30) {
            size_t v27 = v30 >> 1;
          }
          else {
            size_t v27 = v30 >> 1;
          }
          long long v28 = (re::DynamicString *)a4;
        }
        else
        {
          long long v28 = (re::DynamicString *)a4;
          uint64_t v26 = "<no registered provider>";
          size_t v27 = 24;
        }
        re::DynamicString::append(v28, v26, v27);
        if (v17) {
          re::DynamicString::append((re::DynamicString *)a4, ";", 1uLL);
        }
        v18 += 144;
        --v17;
        v16 -= 144;
      }
      while (v16);
    }
    uint64_t result = (re::DynamicString *)v29;
    if (v29 && (v30 & 1) != 0) {
      return (re::DynamicString *)(*(uint64_t (**)(void))(*v29 + 40))();
    }
  }
  else
  {
    if (*((void *)a2 + 17)) {
      uint64_t v7 = (const char *)*((void *)a2 + 18);
    }
    else {
      uint64_t v7 = (char *)a2 + 137;
    }
  }
  return result;
}

uint64_t re::AssetManager::finalizeAssetLoad(re::AssetManager *this, void *a2, void *a3, char *a4)
{
  re::AssetManager::assetHandle(this, a4, 1, 0, v7);
  re::AssetManager::processAssetPointer(this, a3, (re::internal::AssetEntry *)v7[1]);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v7);
  return 1;
}

uint64_t non-virtual thunk to're::AssetManager::finalizeAssetLoad(re::AssetManager *this, void *a2, void *a3, char *a4)
{
  return 1;
}

void re::AssetManager::setDeserializedAssetPathRemapping(os_unfair_lock_s *this, const char *a2, const char *a3)
{
  uint64_t v8 = a3;
  uint64_t v6 = this + 16;
  os_unfair_lock_lock(this + 16);
  if (a3) {
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const*&>((uint64_t)&this[76], (re::DynamicString *)&v9, 2, &v8);
  }
  else {
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::remove((uint64_t)&this[76], (uint64_t)&v9);
  }
  if (v9 && (v10 & 1) != 0) {
    (*(void (**)(void))(*(void *)v9 + 40))();
  }
  LOBYTE(this[128]._os_unfair_lock_opaque) = this[83]._os_unfair_lock_opaque != 0;
  os_unfair_lock_unlock(v6);
}

void re::AssetManager::fromPeerID(os_unfair_lock_s *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = this + 16;
  os_unfair_lock_lock(this + 16);
  re::AssetManager::lookupExistingAsset_assetTablesLocked((re::internal::AssetTypeRegistry **)this, a2, v9);
  os_unfair_lock_unlock(v6);
  if (v9[0])
  {
    if (v11 && *((void *)v11 + 3)) {
      re::internal::AssetEntry::fromPeerID((uint64_t)v11, a3);
    }
    else {
      *(unsigned char *)a3 = 0;
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v10);
  }
  else
  {
    uint64_t v7 = *(void *)&this[286]._os_unfair_lock_opaque;
    if (v7)
    {
      uint64_t v8 = *(void (**)(void))(*(void *)v7 + 128);
      v8();
    }
    else
    {
      *(unsigned char *)a3 = 1;
      *(void *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    }
  }
}

void re::internal::AssetIdLoadDescriptorTable::insertIntoMutableTables(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  v19[1] = *MEMORY[0x263EF8340];
  uint64_t v17 = a2;
  if (a3)
  {
    uint64_t v4 = a4;
    uint64_t v6 = &a4[18 * a3];
    uint64_t v7 = (void *)(a1 + 96);
    while (1)
    {
      uint64_t v8 = re::HashTable<re::AssetLoadDescriptor,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::tryGet((uint64_t)v7, (uint64_t)v4);
      if (!v8) {
        break;
      }
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v8, &v17);
LABEL_14:
      v4 += 18;
      if (v4 == v6) {
        return;
      }
    }
    v19[0] = v17;
    memset(v14, 0, sizeof(v14));
    int v15 = 0;
    uint64_t v16 = 0x7FFFFFFFLL;
    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)v14, v19);
    unint64_t v9 = re::Hash<re::AssetLoadDescriptor>::operator()((uint64_t)&v18, (uint64_t)v4);
    unint64_t v10 = v9;
    if (*v7)
    {
      unint64_t v11 = v9 % *(unsigned int *)(a1 + 120);
      uint64_t v12 = *(unsigned int *)(*(void *)(a1 + 104) + 4 * v11);
      if (v12 != 0x7FFFFFFF)
      {
        uint64_t v13 = *(void *)(a1 + 112);
        while (!re::EqualTo<re::AssetLoadDescriptor>::operator()((uint64_t)&v18, v13 + 208 * v12 + 16, (uint64_t)v4))
        {
          uint64_t v13 = *(void *)(a1 + 112);
          uint64_t v12 = *(_DWORD *)(v13 + 208 * v12 + 8) & 0x7FFFFFFF;
          if (v12 == 0x7FFFFFFF) {
            goto LABEL_12;
          }
        }
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v11) = 0;
    }
LABEL_12:
    re::HashTable<re::AssetLoadDescriptor,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::addAsMove((uint64_t)v7, v11, v10, v4, (uint64_t *)v14);
    ++*(_DWORD *)(a1 + 136);
LABEL_13:
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v14);
    goto LABEL_14;
  }
}

uint64_t re::HashTable<re::AssetLoadDescriptor,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::AssetLoadDescriptor>::operator()((uint64_t)&v9, a2);
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if (v5 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  while (1)
  {
    BOOL v7 = re::EqualTo<re::AssetLoadDescriptor>::operator()((uint64_t)&v10, v6 + 208 * v5 + 16, a2);
    uint64_t v6 = *(void *)(a1 + 16);
    if (v7) {
      break;
    }
    uint64_t v5 = *(_DWORD *)(v6 + 208 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v6 + 208 * v5 + 160;
}

BOOL re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *a2;
  unint64_t v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(void *)(v6 + (v4 << 6) + 16) == v2) {
    return 1;
  }
  do
  {
    uint64_t v4 = *(_DWORD *)(v6 + (v4 << 6) + 8) & 0x7FFFFFFF;
    BOOL result = v4 != 0x7FFFFFFF;
  }
  while (v4 != 0x7FFFFFFF && *(void *)(v6 + (v4 << 6) + 16) != v2);
  return result;
}

unint64_t re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    unint64_t v12 = *(void *)(a1 + 16) + ((unint64_t)v13 << 6);
    return v12 + 24;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + (v10 << 6) + 16) != v6)
  {
    uint64_t v10 = *(_DWORD *)(v11 + (v10 << 6) + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  unint64_t v12 = v11 + (v10 << 6);
  return v12 + 24;
}

BOOL re::HashTable<re::AssetLoadDescriptor,unsigned long long,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::containsKey(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::AssetLoadDescriptor>::operator()((uint64_t)&v9, a2);
  uint64_t v5 = 0x7FFFFFFFLL;
  if (*(void *)a1)
  {
    uint64_t v6 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
    if (v6 != 0x7FFFFFFF)
    {
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v5 = 0x7FFFFFFFLL;
      while (!re::EqualTo<re::AssetLoadDescriptor>::operator()((uint64_t)&v10, v7 + 168 * v6 + 16, a2))
      {
        uint64_t v7 = *(void *)(a1 + 16);
        uint64_t v6 = *(_DWORD *)(v7 + 168 * v6 + 8) & 0x7FFFFFFF;
        if (v6 == 0x7FFFFFFF) {
          return v5 != 0x7FFFFFFF;
        }
      }
      uint64_t v5 = v6;
    }
  }
  return v5 != 0x7FFFFFFF;
}

uint64_t re::HashTable<re::AssetLoadDescriptor,unsigned long long,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::add<unsigned long long &>(uint64_t a1, re::DynamicString *a2, void *a3)
{
  unint64_t v6 = re::Hash<re::AssetLoadDescriptor>::operator()((uint64_t)&v15, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashTable<re::AssetLoadDescriptor,unsigned long long,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::addEmplace<unsigned long long &>(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v13 = *(void *)(a1 + 16) + 168 * v12;
    return v13 + 160;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (1)
  {
    BOOL v11 = re::EqualTo<re::AssetLoadDescriptor>::operator()((uint64_t)&v16, v10 + 168 * v9 + 16, (uint64_t)a2);
    uint64_t v10 = *(void *)(a1 + 16);
    if (v11) {
      break;
    }
    uint64_t v9 = *(_DWORD *)(v10 + 168 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v13 = v10 + 168 * v9;
  return v13 + 160;
}

void re::HashTable<re::AssetLoadDescriptor,unsigned long long,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::remove(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::AssetLoadDescriptor>::operator()((uint64_t)&v12, a2);
  if (*(void *)a1)
  {
    unint64_t v5 = v4 % *(unsigned int *)(a1 + 24);
    uint64_t v6 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v5);
    if (v6 != 0x7FFFFFFF)
    {
      if (re::EqualTo<re::AssetLoadDescriptor>::operator()((uint64_t)&v13, *(void *)(a1 + 16) + 168 * v6 + 16, a2))
      {
        *(_DWORD *)(*(void *)(a1 + 8) + 4 * v5) = *(_DWORD *)(*(void *)(a1 + 16) + 168 * v6 + 8) & 0x7FFFFFFF;
LABEL_8:
        re::HashTable<re::AssetLoadDescriptor,unsigned long long,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::EntryWithHash::free((_DWORD *)(*(void *)(a1 + 16) + 168 * v6));
        uint64_t v10 = *(void *)(a1 + 16) + 168 * v6;
        int v11 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)(v10 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(v10 + 8) & 0x80000000 | *(_DWORD *)(a1 + 36);
        --*(_DWORD *)(a1 + 28);
        *(_DWORD *)(a1 + 36) = v6;
        *(_DWORD *)(a1 + 40) = v11 + 1;
      }
      else
      {
        while (1)
        {
          unsigned int v7 = v6;
          uint64_t v8 = *(void *)(a1 + 16);
          int v9 = *(_DWORD *)(v8 + 168 * v6 + 8);
          uint64_t v6 = v9 & 0x7FFFFFFF;
          if ((v9 & 0x7FFFFFFF) == 0x7FFFFFFF) {
            break;
          }
          if (re::EqualTo<re::AssetLoadDescriptor>::operator()((uint64_t)&v13, v8 + 168 * v6 + 16, a2))
          {
            *(_DWORD *)(*(void *)(a1 + 16) + 168 * v7 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 168 * v7 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 16) + 168 * v6 + 8) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
}

BOOL re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(uint64_t a1, uint64_t *a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 24);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  unint64_t v4 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
                        % v2));
  if (v5 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (*(void *)(v7 + 24 * v5 + 16) == v3) {
    return 1;
  }
  do
  {
    LODWORD(v5) = *(_DWORD *)(v7 + 24 * v5 + 8) & 0x7FFFFFFF;
    BOOL result = v5 != 0x7FFFFFFF;
  }
  while (v5 != 0x7FFFFFFF && *(void *)(v7 + 24 * v5 + 16) != v3);
  return result;
}

void *re::AssetManager::addCleanupBlock(uint64_t a1, uint64_t a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 1346))
  {
    uint64_t v2 = *(void *)(a2 + 24);
    if (v2)
    {
      uint64_t v3 = *(uint64_t (**)(void))(*(void *)v2 + 48);
      return (void *)v3();
    }
    else
    {
      uint64_t v7 = (re::AssetManager *)std::__throw_bad_function_call[abi:nn180100]();
      return (void *)re::AssetManager::assetRuntimeSizeLimit(v7);
    }
  }
  else
  {
    uint64_t v6 = (os_unfair_lock_s *)(a1 + 384);
    std::__function::__value_func<void ()(void)>::__value_func[abi:nn180100]((uint64_t)v8, a2);
    os_unfair_lock_lock(v6);
    re::DynamicArray<std::function<void ()(void)>>::add((_anonymous_namespace_ *)(a1 + 392), (uint64_t)v8);
    os_unfair_lock_unlock(v6);
    return std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](v8);
  }
}

uint64_t re::AssetManager::assetRuntimeSizeLimit(re::AssetManager *this)
{
  return *((void *)this + 171);
}

uint64_t re::AssetManager::forExportOnly(re::AssetManager *this)
{
  return *((unsigned __int8 *)this + 1376);
}

double re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 40 * v3;
      do
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0) {
          *(_DWORD *)(v6 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7 & 0x7FFFFFFF;
        }
        v4 += 40;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::AssetManager::AssetChangeCallbackImpl::stateChanged(re::AssetManager **this, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
}

double re::HashTable<re::AssetLoadDescriptor,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::AssetLoadDescriptor,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 208;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::AssetLoadDescriptor,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::EntryWithHash::free(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 0)
  {
    *(_DWORD *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v1 & 0x7FFFFFFF;
    uint64_t v3 = (re::DynamicString *)(a1 + 16);
    re::DynamicString::deinit((re::DynamicString *)(a1 + 128));
    re::DynamicArray<unsigned long>::deinit(a1 + 88);
    re::DynamicArray<unsigned long>::deinit(a1 + 48);
    re::DynamicString::deinit(v3);
    return re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)(a1 + 160));
  }
  return result;
}

double re::HashTable<re::AssetLoadDescriptor,unsigned long long,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::AssetLoadDescriptor,unsigned long long,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::EntryWithHash::free((_DWORD *)(a1[2] + v3));
        ++v4;
        v3 += 168;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::AssetLoadDescriptor,unsigned long long,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::EntryWithHash::free(_DWORD *a1)
{
  int v1 = a1[2];
  if (v1 < 0)
  {
    a1[2] = v1 & 0x7FFFFFFF;
    uint64_t v3 = (re::DynamicString *)(a1 + 4);
    re::DynamicString::deinit((re::DynamicString *)(a1 + 32));
    re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 22));
    re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 12));
    return re::DynamicString::deinit(v3);
  }
  return result;
}

double re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7 & 0x7FFFFFFF;
          re::DynamicArray<re::AssetLoadDescriptor>::deinit(v6 + 24);
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 64;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::Queue<re::SharedPtr<re::AssetLoadRequest::Data>>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = a1[5];
    if (v3)
    {
      uint64_t v4 = a1[2];
      if (v4)
      {
        for (uint64_t i = 0; i != v4; ++i)
        {
          unint64_t v6 = (i + a1[3]) % (unint64_t)a1[1];
          uint64_t v7 = a1[5];
          uint64_t v8 = *(void *)(v7 + 8 * v6);
          if (v8)
          {

            *(void *)(v7 + 8 * v6) = 0;
            uint64_t v4 = a1[2];
          }
        }
        uint64_t v2 = *a1;
        uint64_t v3 = a1[5];
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, v3);
    }
    a1[5] = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *((_DWORD *)a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  }
  return result;
}

void *std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t re::DynamicArray<unsigned long long>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4) {
        re::DynamicArray<char const*>::copy((void **)a1, (uint64_t)a2);
      }
      else {
        *(void *)(a1 + 16) = 0;
      }
      ++*(_DWORD *)(a1 + 24);
    }
    else if (v4)
    {
      unint64_t v5 = a2[2];
      *(void *)a1 = v4;
      re::DynamicArray<float *>::setCapacity((void *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<char const*>::copy((void **)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::FunctionBase<24ul,void ()(re::DynamicArray<unsigned long long>)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(re::DynamicArray<unsigned long long>)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,void ()(re::DynamicArray<unsigned long long>)>::destroyCallable(uint64_t a1))(void)
{
  double result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    double result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      double result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *a2;
  unint64_t v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(void *)(v6 + (v4 << 6) + 16) != v2)
  {
    while (1)
    {
      uint64_t v4 = *(_DWORD *)(v6 + (v4 << 6) + 8) & 0x7FFFFFFF;
      if (v4 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v6 + (v4 << 6) + 16) == v2) {
        return v6 + (v4 << 6) + 24;
      }
    }
    return 0;
  }
  return v6 + (v4 << 6) + 24;
}

uint64_t re::DynamicOverflowArray<unsigned long long,1ul>::DynamicOverflowArray(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[1];
    *(void *)a1 = v3;
    re::DynamicOverflowArray<unsigned long long,1ul>::setCapacity((void *)a1, v5);
    *(_DWORD *)(a1 + 16) += 2;
    re::DynamicOverflowArray<unsigned long long,1ul>::copy(a1, (uint64_t)a2);
  }
  return a1;
}

void *re::DynamicOverflowArray<unsigned long long,1ul>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 >= *(void *)(a1 + 8))
  {
    re::DynamicOverflowArray<unsigned long long,1ul>::setCapacity((void *)a1, *(void *)(a2 + 8));
    if (*(unsigned char *)(a2 + 16)) {
      unint64_t v7 = (const void *)(a2 + 24);
    }
    else {
      unint64_t v7 = *(const void **)(a2 + 32);
    }
    uint64_t v8 = *(void *)(a1 + 8);
    int v9 = *(_DWORD *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = (void *)(a1 + 24);
      if (!v8)
      {
LABEL_18:
        if (v9) {
          uint64_t v11 = a1 + 24;
        }
        else {
          uint64_t v11 = *(void *)(a1 + 32);
        }
        uint64_t v12 = *(void *)(a1 + 8);
        char v13 = (void *)(v11 + 8 * v12);
        if (*(_DWORD *)(a2 + 16)) {
          uint64_t v14 = a2 + 24;
        }
        else {
          uint64_t v14 = *(void *)(a2 + 32);
        }
        double result = memcpy(v13, (const void *)(v14 + 8 * v12), 8 * v4 - 8 * v12);
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v10 = *(void **)(a1 + 32);
      if (!v8) {
        goto LABEL_18;
      }
    }
    memmove(v10, v7, 8 * v8);
    int v9 = *(_DWORD *)(a1 + 16);
    goto LABEL_18;
  }
  if (*(unsigned char *)(a2 + 16)) {
    unint64_t v5 = (const void *)(a2 + 24);
  }
  else {
    unint64_t v5 = *(const void **)(a2 + 32);
  }
  if ((*(unsigned char *)(a1 + 16) & 1) == 0)
  {
    double result = *(void **)(a1 + 32);
    if (!v4) {
      goto LABEL_25;
    }
    goto LABEL_15;
  }
  double result = (void *)(a1 + 24);
  if (v4) {
LABEL_15:
  }
    double result = memmove(result, v5, 8 * v4);
LABEL_25:
  *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v4;
  return result;
}

void *re::DynamicOverflowArray<unsigned long long,1ul>::setCapacity(void *result, unint64_t a2)
{
  unint64_t v4 = result;
  uint64_t v5 = *result;
  if (a2 && !v5)
  {
    double result = (void *)re::DynamicOverflowArray<unsigned long long,1ul>::setCapacity(v4, a2);
    int v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  int v7 = *((_DWORD *)result + 4);
  if (v7) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = result[3];
  }
  if (v8 != a2)
  {
    unint64_t v9 = result[1];
    if (v9 <= a2 && (a2 > 1 || (v7 & 1) == 0))
    {
      if (a2 < 2)
      {
        uint64_t v14 = result + 3;
        uint64_t v15 = v4[4];
        if (v7) {
          char v16 = v4 + 3;
        }
        else {
          char v16 = (const void *)v4[4];
        }
        memcpy(v14, v16, 8 * v9);
        double result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 40))(v5, v15);
        int v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 61)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 8, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        uint64_t v2 = 8 * a2;
        uint64_t v10 = (void *)(*(uint64_t (**)(void, unint64_t, uint64_t))(*(void *)v5 + 32))(*result, 8 * a2, 8);
        if (v10)
        {
          uint64_t v12 = v10;
          if (v4[2]) {
            char v13 = v4 + 3;
          }
          else {
            char v13 = (const void *)v4[4];
          }
          double result = memcpy(v10, v13, 8 * v4[1]);
          int v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            double result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v4 + 40))(*v4, v4[4]);
            int v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[3] = a2;
          v4[4] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(void *)(*v4 + 8));
      double result = (void *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::HashTable<re::AssetLoadDescriptor,unsigned long long,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::AssetLoadDescriptor>::operator()((uint64_t)&v9, a2);
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if (v5 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  while (1)
  {
    BOOL v7 = re::EqualTo<re::AssetLoadDescriptor>::operator()((uint64_t)&v10, v6 + 168 * v5 + 16, a2);
    uint64_t v6 = *(void *)(a1 + 16);
    if (v7) {
      break;
    }
    uint64_t v5 = *(_DWORD *)(v6 + 168 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v6 + 168 * v5 + 160;
}

BOOL re::EqualTo<re::AssetLoadDescriptor>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL result = re::DynamicString::operator==(a2, a3);
  if (result)
  {
    BOOL result = re::DynamicString::operator==(a2 + 112, a3 + 112);
    if (result)
    {
      size_t v6 = *(void *)(a2 + 48);
      return v6 == *(void *)(a3 + 48) && memcmp(*(const void **)(a2 + 64), *(const void **)(a3 + 64), v6) == 0;
    }
  }
  return result;
}

unint64_t re::Hash<re::AssetLoadDescriptor>::operator()(uint64_t a1, uint64_t a2)
{
  id v9[2] = *MEMORY[0x263EF8340];
  unint64_t v3 = re::Hash<re::DynamicString>::operator()((uint64_t)v9, a2);
  unint64_t v4 = re::Hash<re::DynamicString>::operator()((uint64_t)v9, a2 + 112);
  uint64_t v5 = *(void *)(a2 + 48);
  if (v5)
  {
    MurmurHash3_x64_128(*(void *)(a2 + 64), v5, 0, v9);
    unint64_t v6 = ((v9[1] - 0x61C8864680B583E9 + (v9[0] << 6) + (v9[0] >> 2)) ^ v9[0]) - 0x61C8864680B583E9;
  }
  else
  {
    unint64_t v6 = 0x9E3779B97F4A7C17;
  }
  unint64_t v7 = ((v3 << 6) - 0x61C8864680B583E9 + (v3 >> 2) + v4) ^ v3;
  return ((v7 >> 2) + (v7 << 6) + v6) ^ v7;
}

void std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SharedPtr<re::internal::AssetReference> *,re::SharedPtr<re::internal::AssetReference> *,re::SharedPtr<re::internal::AssetReference> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      uint64_t v6 = *v5++;
      re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(a3++, v6);
    }
    while (v5 != a2);
  }
}

unsigned char *re::Optional<re::AssetPath>::~Optional(unsigned char *a1)
{
  if (*a1)
  {
    re::DynamicString::deinit((re::DynamicString *)(a1 + 48));
    re::DynamicString::deinit((re::DynamicString *)(a1 + 16));
  }
  return a1;
}

_anonymous_namespace_ *re::DynamicOverflowArray<unsigned long long,1ul>::add(uint64_t a1, void *a2)
{
  BOOL result = re::DynamicOverflowArray<unsigned long long,1ul>::ensureCapacity((_anonymous_namespace_ *)a1);
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v5 = a1 + 24;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 32);
  }
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)(v5 + 8 * v6) = *a2;
  *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v6 + 1;
  *(_DWORD *)(a1 + 16) += 2;
  return result;
}

uint64_t re::DynamicOverflowArray<unsigned long long,1ul>::indexOf@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *(_DWORD *)(result + 16);
  if (v3) {
    unint64_t v4 = (void *)(result + 24);
  }
  else {
    unint64_t v4 = *(void **)(result + 32);
  }
  uint64_t v5 = *(void *)(result + 8);
  if (v5)
  {
    uint64_t v6 = 8 * v5;
    unint64_t v7 = &v4[v5];
    while (*v4 != *a2)
    {
      ++v4;
      v6 -= 8;
      if (!v6)
      {
        unint64_t v4 = v7;
        break;
      }
    }
  }
  if (v3) {
    uint64_t v8 = result + 24;
  }
  else {
    uint64_t v8 = *(void *)(result + 32);
  }
  if (v4 == (void *)(v8 + 8 * v5))
  {
    *(unsigned char *)a3 = 0;
  }
  else
  {
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = ((uint64_t)v4 - v8) >> 3;
  }
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<unsigned long long,1ul>::ensureCapacity(_anonymous_namespace_ *result)
{
  int v1 = result;
  if (*(void *)result)
  {
    unint64_t v2 = *((void *)result + 1);
    if (*((unsigned char *)result + 16)) {
      unint64_t v3 = 1;
    }
    else {
      unint64_t v3 = *((void *)result + 3);
    }
    if (v2 >= v3)
    {
      return re::DynamicOverflowArray<unsigned long long,1ul>::growCapacity(result, v2 + 1);
    }
  }
  else
  {
    unint64_t v4 = *((void *)v1 + 1) + 1;
    BOOL result = (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned long long,1ul>::setCapacity(v1, v4);
    *((_DWORD *)v1 + 4) += 2;
  }
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<unsigned long long,1ul>::growCapacity(_anonymous_namespace_ *result, unint64_t a2)
{
  unint64_t v2 = a2;
  unint64_t v3 = result;
  if (!*(void *)result)
  {
    BOOL result = (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned long long,1ul>::setCapacity(v3, v2);
    *((_DWORD *)v3 + 4) += 2;
    return result;
  }
  if (*((unsigned char *)result + 16))
  {
    if (a2 <= 1) {
      return result;
    }
    unint64_t v5 = 2;
  }
  else
  {
    unint64_t v4 = *((void *)result + 3);
    if (v4 >= a2) {
      return result;
    }
    unint64_t v5 = 2 * v4;
  }
  if (v5 > a2) {
    a2 = v5;
  }
  return (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned long long,1ul>::setCapacity(result, a2);
}

uint64_t re::internal::Callable<re::AssetManager::tryLoadAssetOverNetwork_entryStateLocked(re::internal::AssetEntry &)::$_0,void ()(re::Result<re::SharedResourcePayload,re::WrappedError>)>::~Callable(uint64_t a1)
{
  *(void *)a1 = &unk_26E6C9B88;
  objc_destroyWeak((id *)(a1 + 8));
  *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  return a1;
}

void re::internal::Callable<re::AssetManager::tryLoadAssetOverNetwork_entryStateLocked(re::internal::AssetEntry &)::$_0,void ()(re::Result<re::SharedResourcePayload,re::WrappedError>)>::~Callable(uint64_t a1)
{
  *(void *)a1 = &unk_26E6C9B88;
  objc_destroyWeak((id *)(a1 + 8));
  *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  JUMPOUT(0x237DBCBD0);
}

void re::internal::Callable<re::AssetManager::tryLoadAssetOverNetwork_entryStateLocked(re::internal::AssetEntry &)::$_0,void ()(re::Result<re::SharedResourcePayload,re::WrappedError>)>::operator()(uint64_t a1, uint64_t a2)
{
  v8[0] = *(unsigned char *)a2;
  unint64_t v2 = *(void **)(a2 + 8);
  *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  id v7 = v2;
  char v9 = v2;
  uint64_t v3 = *(void *)(a1 + 16);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  if (WeakRetained)
  {
    unint64_t v5 = WeakRetained;
    re::AssetManager::processUpdatedResourcePayload(v3, (uint64_t)WeakRetained - 8, (uint64_t)v8);

    uint64_t v6 = v9;
  }
  else
  {
    uint64_t v6 = v7;
  }
}

uint64_t re::internal::Callable<re::AssetManager::tryLoadAssetOverNetwork_entryStateLocked(re::internal::AssetEntry &)::$_0,void ()(re::Result<re::SharedResourcePayload,re::WrappedError>)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6C9B88;
  *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  objc_copyWeak((id *)(a2 + 8), (id *)(a1 + 8));
  *(void *)(a2 + 16) = *(void *)(a1 + 16);
  return a2;
}

uint64_t re::internal::Callable<re::AssetManager::tryLoadAssetOverNetwork_entryStateLocked(re::internal::AssetEntry &)::$_0,void ()(re::Result<re::SharedResourcePayload,re::WrappedError>)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6C9B88;
  *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  objc_moveWeak((id *)(a2 + 8), (id *)(a1 + 8));
  *(void *)(a2 + 16) = *(void *)(a1 + 16);
  return a2;
}

uint64_t re::internal::Callable<re::AssetManager::tryLoadAssetOverNetwork_entryStateLocked(re::internal::AssetEntry &)::$_0,void ()(re::Result<re::SharedResourcePayload,re::WrappedError>)>::size()
{
  return 24;
}

uint64_t (***re::FunctionBase<24ul,void ()(re::Result<re::SharedResourcePayload,re::WrappedError>)>::destroyCallable(uint64_t a1))(void)
{
  BOOL result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    BOOL result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      BOOL result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  }
  return result;
}

uint64_t std::__throw_bad_variant_access[abi:nn180100]()
{
  std::__libcpp_verbose_abort("bad_variant_access was thrown in -fno-exceptions mode");
  return re::DynamicArray<re::internal::DeferredUnregister *>::operator=(v0, v1);
}

uint64_t re::DynamicArray<re::internal::DeferredUnregister *>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = *(void *)result;
    uint64_t v3 = *(void *)a2;
    if (*(void *)result) {
      BOOL v4 = v3 == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4 || v2 == v3)
    {
      uint64_t v6 = *(void *)(result + 8);
      uint64_t v7 = *(void *)(a2 + 8);
      *(void *)BOOL result = v3;
      *(void *)(result + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7;
      *(void *)a2 = v2;
      *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v6;
      uint64_t v8 = *(void *)(result + 16);
      *(void *)(result + 16) = *(void *)(a2 + 16);
      *(void *)(a2 + 16) = v8;
      uint64_t v9 = *(void *)(result + 32);
      *(void *)(result + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *(void *)(a2 + 32);
      *(void *)(a2 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v9;
      ++*(_DWORD *)(a2 + 24);
      ++*(_DWORD *)(result + 24);
    }
    else
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
      BOOL result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

_anonymous_namespace_ *re::DynamicArray<re::SharedPtr<re::internal::AssetReference>>::add(_anonymous_namespace_ *result, void *a2)
{
  uint64_t v3 = result;
  unint64_t v5 = *((void *)result + 1);
  unint64_t v4 = *((void *)result + 2);
  if (v4 >= v5)
  {
    unint64_t v6 = v4 + 1;
    if (v5 < v4 + 1)
    {
      if (*(void *)result)
      {
        unint64_t v7 = 2 * v5;
        if (!v5) {
          unint64_t v7 = 8;
        }
        if (v7 <= v6) {
          unint64_t v8 = v6;
        }
        else {
          unint64_t v8 = v7;
        }
        BOOL result = (_anonymous_namespace_ *)re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(result, v8);
      }
      else
      {
        BOOL result = (_anonymous_namespace_ *)re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    unint64_t v4 = *((void *)v3 + 2);
  }
  *(void *)(*((void *)v3 + 4) + 8 * v4) = *a2;
  *a2 = 0;
  *((void *)v3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return result;
}

uint64_t re::internal::Callable<re::AssetManager::putEntryInLoadingState_entryStateLocked(re::internal::AssetEntry &,BOOL)::$_0,void ()(re::Result<re::SharedResourcePayload,re::WrappedError>)>::~Callable(uint64_t a1)
{
  *(void *)a1 = &unk_26E6C9BF0;
  objc_destroyWeak((id *)(a1 + 8));
  *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  return a1;
}

void re::internal::Callable<re::AssetManager::putEntryInLoadingState_entryStateLocked(re::internal::AssetEntry &,BOOL)::$_0,void ()(re::Result<re::SharedResourcePayload,re::WrappedError>)>::~Callable(uint64_t a1)
{
  *(void *)a1 = &unk_26E6C9BF0;
  objc_destroyWeak((id *)(a1 + 8));
  *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  JUMPOUT(0x237DBCBD0);
}

void re::internal::Callable<re::AssetManager::putEntryInLoadingState_entryStateLocked(re::internal::AssetEntry &,BOOL)::$_0,void ()(re::Result<re::SharedResourcePayload,re::WrappedError>)>::operator()(uint64_t a1, uint64_t a2)
{
  v8[0] = *(unsigned char *)a2;
  uint64_t v2 = *(void **)(a2 + 8);
  *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  id v7 = v2;
  uint64_t v9 = v2;
  uint64_t v3 = *(void *)(a1 + 16);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  if (WeakRetained)
  {
    unint64_t v5 = WeakRetained;
    re::AssetManager::processUpdatedResourcePayload(v3, (uint64_t)WeakRetained - 8, (uint64_t)v8);

    unint64_t v6 = v9;
  }
  else
  {
    unint64_t v6 = v7;
  }
}

uint64_t re::internal::Callable<re::AssetManager::putEntryInLoadingState_entryStateLocked(re::internal::AssetEntry &,BOOL)::$_0,void ()(re::Result<re::SharedResourcePayload,re::WrappedError>)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6C9BF0;
  *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  objc_copyWeak((id *)(a2 + 8), (id *)(a1 + 8));
  *(void *)(a2 + 16) = *(void *)(a1 + 16);
  return a2;
}

uint64_t re::internal::Callable<re::AssetManager::putEntryInLoadingState_entryStateLocked(re::internal::AssetEntry &,BOOL)::$_0,void ()(re::Result<re::SharedResourcePayload,re::WrappedError>)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6C9BF0;
  *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  objc_moveWeak((id *)(a2 + 8), (id *)(a1 + 8));
  *(void *)(a2 + 16) = *(void *)(a1 + 16);
  return a2;
}

uint64_t re::internal::Callable<re::AssetManager::putEntryInLoadingState_entryStateLocked(re::internal::AssetEntry &,BOOL)::$_0,void ()(re::Result<re::SharedResourcePayload,re::WrappedError>)>::size()
{
  return 24;
}

re::CancellationTokenSource *re::CancellationTokenSource::CancellationTokenSource(re::CancellationTokenSource *this)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *((void *)this + 3) = 0;
  *(void *)this = &unk_26E6C9C48;
  uint64_t v3 = re::globalAllocators(v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 32, 8);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v4, 0);
  *(void *)uint64_t v4 = &unk_26E6C9C90;
  *(unsigned char *)(v4 + 24) = 0;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = v4;
  if (v5) {

  }
  return this;
}

void re::CancellationTokenSource::~CancellationTokenSource(re::CancellationTokenSource *this)
{
  *(void *)this = &unk_26E6C9C48;
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {

    *((void *)this + 3) = 0;
  }
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6C9C48;
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {

    *((void *)this + 3) = 0;
  }
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void re::CancellationToken::~CancellationToken(re::CancellationToken *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void *std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::add(_anonymous_namespace_ *this, id *from)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = (id *)(*((void *)this + 4) + 8 * v4);
  id *v5 = 0;
  objc_moveWeak(v5, from);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
}

void *re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      BOOL result = (void *)*result;
      if (!*v5)
      {
        BOOL result = (void *)re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 61)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 8, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 8 * a2;
          BOOL result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 8 * a2, 8);
          if (result)
          {
            unint64_t v7 = (id *)result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        BOOL result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      unint64_t v8 = (id *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 8 * v9;
        uint64_t v11 = v7;
        uint64_t v12 = v7;
        do
        {
          *v12++ = 0;
          objc_moveWeak(v11, v8);
          objc_destroyWeak(v8);
          *v8++ = 0;
          uint64_t v11 = v12;
          v10 -= 8;
        }
        while (v10);
        unint64_t v8 = (id *)v5[4];
      }
      BOOL result = (void *)(*(uint64_t (**)(void, id *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::Queue<re::SharedPtr<re::AssetLoadRequest::Data>>::enqueue(void *this, uint64_t *a2)
{
  uint64_t v3 = this;
  unint64_t v5 = this[1];
  uint64_t v4 = this[2];
  if (v4 + 1 >= v5)
  {
    this = re::Queue<re::SharedPtr<re::AssetLoadRequest::Data>>::growCapacity(this, v4 + 1);
    unint64_t v5 = v3[1];
    uint64_t v4 = v3[2];
  }
  unint64_t v6 = (v3[3] + v4) % v5;
  uint64_t v7 = *a2;
  *(void *)(v3[5] + 8 * v6) = *a2;
  if (v7)
  {
    this = (id)(v7 + 8);
    uint64_t v4 = v3[2];
  }
  v3[2] = v4 + 1;
  ++*((_DWORD *)v3 + 8);
  return this;
}

void *re::Queue<re::SharedPtr<re::AssetLoadRequest::Data>>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::Queue<re::SharedPtr<re::AssetLoadRequest::Data>>::setCapacity(this, a2);
    }
    else
    {
      this = re::Queue<re::SharedPtr<re::AssetLoadRequest::Data>>::setCapacity(v4, v3);
      v4[2] = 0;
      v4[3] = 0;
      *((_DWORD *)v4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    }
  }
  return this;
}

void *re::Queue<re::SharedPtr<re::AssetLoadRequest::Data>>::setCapacity(void *result, unint64_t a2)
{
  unint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    BOOL v6 = result + 2;
    if (result[2] <= a2)
    {
      BOOL result = (void *)*result;
      if (!*v5)
      {
        BOOL result = (void *)re::Queue<re::SharedPtr<re::AssetLoadRequest::Data>>::setCapacity(v5, a2);
        *BOOL v6 = 0;
        v6[1] = 0;
        *((_DWORD *)v6 + 4) = 0;
        return result;
      }
      if (a2)
      {
        if (a2 >> 61)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in Queue<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 440, 8, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 8 * a2;
          BOOL result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 8 * a2, 8);
          if (result)
          {
            unint64_t v8 = result;
            unint64_t v3 = v5[1];
            if (!v3) {
              goto LABEL_18;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Queue<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 444, v2, *(void *)(*v5 + 8));
        BOOL result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v8 = 0;
      if (!v3)
      {
LABEL_18:
        v5[5] = v8;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v9 = v5[2];
      uint64_t v10 = v5[5];
      if (v9)
      {
        unint64_t v11 = v5[3];
        unint64_t v12 = v11;
        do
        {
          v8[v12] = *(void *)(v10 + 8 * (v11 % v3));
          *(void *)(v10 + 8 * (v11 % v3)) = 0;
          if (v12 + 1 < a2) {
            ++v12;
          }
          else {
            unint64_t v12 = 0;
          }
          ++v11;
          --v9;
        }
        while (v9);
      }
      BOOL result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v10);
      goto LABEL_18;
    }
  }
  return result;
}

void *re::DynamicArray<re::AssetPath>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      BOOL result = (void *)*result;
      if (!*v5)
      {
        BOOL result = (void *)re::DynamicArray<re::AssetPath>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x50uLL))
        {
          uint64_t v2 = 80 * a2;
          BOOL result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 80 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 80, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        BOOL result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      unint64_t v8 = (void *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = &v8[10 * v9];
        unint64_t v11 = v7;
        do
        {
          *(_DWORD *)unint64_t v11 = *(_DWORD *)v8;
          *(_OWORD *)(v11 + 1) = 0u;
          *(_OWORD *)(v11 + 3) = 0u;
          unint64_t v12 = (re::DynamicString *)(v8 + 1);
          v11[1] = v8[1];
          v8[1] = 0;
          v11[4] = v8[4];
          v8[4] = 0;
          uint64_t v14 = v11[2];
          uint64_t v13 = v11[3];
          uint64_t v15 = v8[3];
          unint64_t v11[2] = v8[2];
          void v11[3] = v15;
          v8[2] = v14;
          uint64_t v8[3] = v13;
          *(_OWORD *)(v11 + 7) = 0u;
          *(_OWORD *)(v11 + 5) = 0u;
          uint64_t v17 = v8[5];
          char v16 = (re::DynamicString *)(v8 + 5);
          void v11[5] = v17;
          *(void *)char v16 = 0;
          unsigned char v11[8] = *((void *)v16 + 3);
          *((void *)v16 + 3) = 0;
          uint64_t v19 = v11[6];
          uint64_t v18 = v11[7];
          uint64_t v20 = *((void *)v16 + 2);
          v11[6] = *((void *)v16 + 1);
          v11[7] = v20;
          *((void *)v16 + 1) = v19;
          *((void *)v16 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v18;
          v11[9] = *((void *)v16 + 4);
          re::DynamicString::deinit(v16);
          re::DynamicString::deinit(v12);
          unint64_t v8 = (void *)((char *)v16 + 40);
          v11 += 10;
        }
        while (v8 != v10);
        unint64_t v8 = (void *)v5[4];
      }
      BOOL result = (void *)(*(uint64_t (**)(void, void *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::FixedArray<re::AssetHandle>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  if (!a3) {
    return;
  }
  if (a3 >= 0xAAAAAAAAAAAAAABLL)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 24, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v5 = 24 * a3;
  uint64_t v6 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 24 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  unint64_t v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 24);
    unint64_t v8 = (void *)((char *)v8 + v5 - 24);
  }
  *unint64_t v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
}

void *re::FixedArray<re::AssetHandle>::deinit(void *result)
{
  if (*result)
  {
    uint64_t v1 = result;
    uint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      uint64_t v4 = (re::AssetHandle *)result[2];
      uint64_t v5 = 24 * v2;
      do
      {
        re::AssetHandle::~AssetHandle(v4);
        uint64_t v4 = (re::AssetHandle *)(v6 + 24);
        v5 -= 24;
      }
      while (v5);
      BOOL result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v1 + 40))(*v1, v1[2]);
      void *v3 = 0;
      v3[1] = 0;
    }
    void *v1 = 0;
  }
  return result;
}

re::DynamicString *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::AssetPath *,re::AssetPath *,re::AssetPath *>(re::DynamicString *result, re::DynamicString *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v4 = (void *)(a3 + 40);
    uint64_t v5 = (void *)((char *)result + 40);
    do
    {
      *((_DWORD *)v4 - 10) = *((_DWORD *)v5 - 10);
      re::DynamicString::operator=((re::DynamicString *)(v4 - 4), (re::DynamicString *)(v5 - 4));
      BOOL result = re::DynamicString::operator=((re::DynamicString *)v4, (re::DynamicString *)v5);
      v4[4] = v5[4];
      v4 += 10;
      uint64_t v6 = (re::DynamicString *)(v5 + 5);
      v5 += 10;
    }
    while (v6 != a2);
  }
  return result;
}

uint64_t re::DynamicArray<re::AssetPath>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 80 * v4;
        uint64_t v6 = (re::DynamicString *)(v3 + 40);
        do
        {
          re::DynamicString::deinit(v6);
          re::DynamicString::deinit((re::DynamicString *)((char *)v6 - 32));
          uint64_t v6 = (re::DynamicString *)((char *)v6 + 80);
          v5 -= 80;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::remove(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v13, a2);
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v5 = v4 % *(unsigned int *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(v6 + 4 * v5);
  if (v7 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  if (!re::DynamicString::operator==(v9 + 80 * v7 + 16, a2))
  {
    while (1)
    {
      unsigned int v10 = v7;
      int v11 = *(_DWORD *)(v9 + 80 * v7 + 8);
      uint64_t v7 = v11 & 0x7FFFFFFF;
      if ((v11 & 0x7FFFFFFF) == 0x7FFFFFFF) {
        return 0;
      }
      if (re::DynamicString::operator==(v9 + 80 * v7 + 16, a2))
      {
        *(_DWORD *)(v9 + 80 * v10 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(v9 + 80 * v10 + 8) & 0x80000000 | *(_DWORD *)(v9 + 80 * v7 + 8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v9 + 80 * v7 + 8) & 0x7FFFFFFF;
LABEL_9:
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free((_DWORD *)(*(void *)(a1 + 16) + 80 * v7));
  int v12 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(*(void *)(a1 + 16) + 80 * v7 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 80 * v7 + 8) & 0x80000000 | *(_DWORD *)(a1 + 36);
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 40) = v12 + 1;
  return 1;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const*&>(uint64_t a1, re::DynamicString *a2, int a3, const char **a4)
{
  unint64_t v8 = re::Hash<re::DynamicString>::operator()((uint64_t)&v19, (uint64_t)a2);
  unint64_t v9 = v8;
  if (!*(void *)a1)
  {
    LODWORD(v10) = 0;
    goto LABEL_8;
  }
  unint64_t v10 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v11 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v10);
  if (v11 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<char const*&>(a1, v10, v9, a2, a4);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v14 = *(void *)(a1 + 16) + 80 * v13;
    return v14 + 48;
  }
  uint64_t v12 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v12 + 80 * v11 + 16, (uint64_t)a2))
  {
    uint64_t v11 = *(_DWORD *)(v12 + 80 * v11 + 8) & 0x7FFFFFFF;
    if (v11 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  switch(a3)
  {
    case 0:
    case 1:
      uint64_t v14 = v12 + 80 * v11;
      break;
    case 2:
    case 3:
      re::DynamicString::deinit((re::DynamicString *)(v12 + 80 * v11 + 48));
      char v16 = (re::DynamicString *)(*(void *)(a1 + 16) + 80 * v11 + 48);
      uint64_t v17 = *a4;
      ++*(_DWORD *)(a1 + 40);
      uint64_t v14 = *(void *)(a1 + 16) + 80 * v11;
      break;
    default:
      goto LABEL_8;
  }
  return v14 + 48;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<char const*&>(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, const char **a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 80 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 80 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 80 * v10 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 80 * v10 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 80 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 80 * v10) = a3;
  uint64_t v14 = re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 80 * v10 + 16), a4);
  uint64_t v15 = (re::DynamicString *)(*(void *)(a1 + 16) + 80 * v10 + 48);
  char v16 = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * are::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)int v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), (re::DynamicString *)(*(void *)&v13[16] + v10 + 16));
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 80;
        }
        while (v11 < v9);
      }
      re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, void *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 80 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 80 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 80 * v10 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 80 * v10 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 80 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 80 * v10) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 80 * v10 + 16), a4);
  uint64_t v14 = *(void *)(a1 + 16) + 80 * v10;
  *(_OWORD *)(v14 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(void *)(v14 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = a5[3];
  uint64_t v15 = a5[1];
  *(void *)(v14 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *a5;
  *a5 = 0;
  uint64_t v16 = a5[2];
  a5[3] = 0;
  uint64_t v18 = *(void *)(v14 + 56);
  uint64_t v17 = *(void *)(v14 + 64);
  *(void *)(v14 + 56) = v15;
  *(void *)(v14 + 64) = v16;
  a5[1] = v18;
  a5[2] = v17;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * are::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unsigned int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    long long v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 80 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_245, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

double re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(_DWORD *a1)
{
  int v1 = a1[2];
  if (v1 < 0)
  {
    a1[2] = v1 & 0x7FFFFFFF;
    re::DynamicString::deinit((re::DynamicString *)(a1 + 4));
    return re::DynamicString::deinit((re::DynamicString *)(a1 + 12));
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v8, a2);
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if (v5 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v6 + 80 * v5 + 16, a2))
  {
    uint64_t v5 = *(_DWORD *)(v6 + 80 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v6 + 80 * v5 + 48;
}

uint64_t re::DynamicArray<std::function<void ()(void)>>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<std::function<void ()(void)>>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t result = std::__function::__value_func<void ()(void)>::__value_func[abi:nn180100](*((void *)this + 4) + 32 * v4, a2);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void *re::DynamicArray<std::function<void ()(void)>>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<std::function<void ()(void)>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<std::function<void ()(void)>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<std::function<void ()(void)>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<std::function<void ()(void)>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 59)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 32, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 32 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_21;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_21:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      char v8 = (void *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 32 * v9;
        uint64_t v11 = v7;
        do
        {
          uint64_t v12 = (void *)v8[3];
          if (v12)
          {
            if (v8 == v12)
            {
              void v11[3] = v11;
              (*(void (**)(void, void *))(*(void *)v8[3] + 24))(v8[3], v11);
            }
            else
            {
              void v11[3] = v12;
              uint64_t v8[3] = 0;
            }
          }
          else
          {
            void v11[3] = 0;
          }
          std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](v8);
          v8 += 4;
          v11 += 4;
          v10 -= 32;
        }
        while (v10);
        char v8 = (void *)v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, void *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_21;
    }
  }
  return result;
}

uint64_t std::__function::__value_func<void ()(void)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

double re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free((_DWORD *)(a1[2] + v3));
        ++v4;
        v3 += 80;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::DynamicArray<re::DynamicString>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(re::DynamicString **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 32 * v4;
        do
        {
          re::DynamicString::deinit(v3);
          uint64_t v3 = (re::DynamicString *)((char *)v3 + 32);
          v5 -= 32;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(re::DynamicString **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, re::DynamicString *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::AssetHandle>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(re::AssetHandle **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 24 * v4;
        do
        {
          re::AssetHandle::~AssetHandle(v3);
          uint64_t v3 = (re::AssetHandle *)((char *)v3 + 24);
          v5 -= 24;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(re::AssetHandle **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, re::AssetHandle *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void *re::DynamicArray<re::AssetHandle>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::AssetHandle>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::AssetHandle>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::AssetHandle>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::AssetHandle>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x18uLL))
        {
          uint64_t v2 = 24 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      char v8 = (re::AssetHandle *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 24 * v9;
        uint64_t v11 = v7;
        do
        {
          *uint64_t v11 = 0;
          v11[1] = 0;
          unint64_t v11[2] = 0;
          v11[1] = *((void *)v8 + 1);
          *((void *)v8 + 1) = 0;
          uint64_t v12 = *v11;
          *uint64_t v11 = 0;
          *uint64_t v11 = *(void *)v8;
          *(void *)char v8 = v12;
          uint64_t v13 = v11[2];
          unint64_t v11[2] = *((void *)v8 + 2);
          *((void *)v8 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v13;
          re::AssetHandle::~AssetHandle(v8);
          char v8 = (re::AssetHandle *)((char *)v8 + 24);
          v11 += 3;
          v10 -= 24;
        }
        while (v10);
        char v8 = (re::AssetHandle *)v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, re::AssetHandle *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

unsigned __int8 *re::Result<re::DynamicArray<re::DynamicArray<re::AssetLoadDescriptor>>,re::WrappedError>::~Result(unsigned __int8 *a1)
{
  int v3 = *a1;
  uint64_t v2 = (id *)(a1 + 8);
  if (v3) {
    re::DynamicArray<re::DynamicArray<re::AssetLoadDescriptor>>::deinit((uint64_t)v2);
  }
  else {

  }
  return a1;
}

uint64_t re::DynamicArray<re::DynamicArray<re::AssetLoadDescriptor>>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 40 * v4;
        do
        {
          re::DynamicArray<re::AssetLoadDescriptor>::deinit(v3);
          v3 += 40;
          v5 -= 40;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, int a4, re::AssetHandle *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 40 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 40 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 40 * v9 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 40 * v9 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 40 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 40 * v9) = a3;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(*(void *)(a1 + 16) + 40 * v9 + 16), a5);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * are::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), *(void *)&v13[16] + v10 + 16, (void *)(*(void *)&v13[16] + v10 + 16));
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 40;
        }
        while (v11 < v9);
      }
      re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

void re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unsigned int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    long long v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  signed int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 40 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_245, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 601);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v9 + 1;
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(v10 + 40 * v8 + 8);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(v10 + 40 * v8 + 8);
    *(_DWORD *)(a1 + 36) = v11 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v10 + 40 * v8 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v11 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 40 * v8 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 40 * v8 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 40 * vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = a3;
  signed int v12 = (void *)(*(void *)(a1 + 16) + 40 * v8);
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = 0;
  v12[3] = a5[1];
  a5[1] = 0;
  uint64_t v13 = v12[2];
  v12[2] = 0;
  v12[2] = *a5;
  *a5 = v13;
  uint64_t v14 = v12[4];
  v12[4] = a5[2];
  a5[2] = v14;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * are::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

double re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      unint64_t v4 = 0;
      uint64_t v5 = 8;
      do
      {
        uint64_t v6 = a1[2];
        int v7 = *(_DWORD *)(v6 + v5);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v5) = v7 & 0x7FFFFFFF;
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v6 + v5 + 8));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        ++v4;
        v5 += 40;
      }
      while (v4 < v3);
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::internal::AssetLoadingRoot,re::DynamicString,re::internal::AssetLoadingRoot,re::internal::AssetLoadingRoot,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::internal::AssetLoadingRoot,re::DynamicString,re::internal::AssetLoadingRoot,re::internal::AssetLoadingRoot,true,false>::EntryWithHash::free((_DWORD *)(a1[2] + v3));
        ++v4;
        v3 += 88;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::internal::AssetLoadingRoot,re::DynamicString,re::internal::AssetLoadingRoot,re::internal::AssetLoadingRoot,true,false>::EntryWithHash::free(_DWORD *a1)
{
  int v1 = a1[2];
  if (v1 < 0)
  {
    a1[2] = v1 & 0x7FFFFFFF;
    re::DynamicString::deinit((re::DynamicString *)(a1 + 6));
    return re::DynamicString::deinit((re::DynamicString *)(a1 + 14));
  }
  return result;
}

void re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  signed int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 40 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_245, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void MemoryAssetProvider::~MemoryAssetProvider(MemoryAssetProvider *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

const char *MemoryAssetProvider::schemeName(MemoryAssetProvider *this)
{
  return "MemoryAsset";
}

void MemoryAssetProvider::load(uint64_t a1, uint64_t a2)
{
}

re::DynamicString *MemoryAssetProvider::resolveChild@<X0>(const re::AssetLoadDescriptor *a1@<X1>, re::AssetProvider *a2@<X2>, const re::DynamicString *a3@<X3>, uint64_t a4@<X8>)
{
  if (*((unsigned char *)a1 + 8)) {
    signed int v9 = (const char *)*((void *)a1 + 2);
  }
  else {
    signed int v9 = (char *)a1 + 9;
  }
  uint64_t v10 = (_anonymous_namespace_ *)strcmp(v9, "MemoryAsset");
  if (v10)
  {
    double result = (re::DynamicString *)re::DynamicString::format((re::DynamicString *)"Scheme %s does not match scheme %s.", (re::DynamicString *)v30, v9, "MemoryAsset");
    long long v12 = *(_OWORD *)v30;
    long long v13 = *(_OWORD *)&v30[16];
    *(unsigned char *)a4 = 0;
    *(_OWORD *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    *(_OWORD *)(a4 + 24) = v13;
  }
  else
  {
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    re::DynamicString::setCapacity(&v40, 0);
    uint64_t v14 = re::AssetLoadDescriptor::getIntrospectableData<re::DynamicString>(a1, &v40);
    if (v14)
    {
      if (v41) {
        uint64_t v15 = v42;
      }
      else {
        uint64_t v15 = (re::PathBuffer *)((char *)&v41 + 1);
      }
      re::AssetProvider::resolveChildPath(a2, v15, (re::DynamicString *)&v38);
      MemoryAssetProvider::makeDescriptor((MemoryAssetProvider *)&v38, a3, (uint64_t)&v20);
      uint64_t v16 = v20;
      uint64_t v20 = 0;
      *(void *)unint64_t v30 = v16;
      *(_OWORD *)&v30[24] = v22;
      long long v22 = 0u;
      *(_OWORD *)&v30[8] = v21;
      long long v21 = 0u;
      long long v31 = v23;
      long long v23 = 0u;
      ++v24;
      int v32 = 1;
      long long v33 = v25;
      long long v34 = v26;
      long long v25 = 0u;
      long long v26 = 0u;
      ++v27;
      int v35 = 1;
      *(_OWORD *)long long v36 = *(_OWORD *)v28;
      memset(v28, 0, sizeof(v28));
      long long v37 = v29;
      *(void *)&v36[16] = *(void *)&v28[16];
      long long v29 = 0uLL;
      v17.n128_f64[0] = re::Optional<re::AssetLoadDescriptor>::Optional(a4, (uint64_t)v30);
      if (*(void *)&v36[8])
      {
        if (v36[16]) {
          (*(void (**)(double))(**(void **)&v36[8] + 40))(v17.n128_f64[0]);
        }
        __n128 v17 = 0uLL;
        *(_OWORD *)&char v36[8] = 0u;
        long long v37 = 0u;
      }
      if (*((void *)&v33 + 1))
      {
        if (*(void *)v36) {
          (*(void (**)(__n128))(**((void **)&v33 + 1) + 40))(v17);
        }
        *(void *)long long v36 = 0;
        long long v34 = 0uLL;
        *((void *)&v33 + 1) = 0;
        ++v35;
      }
      if (*(void *)&v30[32])
      {
        if ((void)v33) {
          (*(void (**)(__n128))(**(void **)&v30[32] + 40))(v17);
        }
        *(void *)&long long v33 = 0;
        long long v31 = 0uLL;
        *(void *)&v30[32] = 0;
        ++v32;
      }
      if (*(void *)v30)
      {
        if (v30[8]) {
          (*(void (**)(__n128))(**(void **)v30 + 40))(v17);
        }
        __n128 v17 = 0uLL;
        memset(v30, 0, 32);
      }
      if (*(void *)&v28[8])
      {
        if (v28[16]) {
          (*(void (**)(__n128))(**(void **)&v28[8] + 40))(v17);
        }
        __n128 v17 = 0uLL;
        *(_OWORD *)&v28[8] = 0u;
        long long v29 = 0u;
      }
      if (*((void *)&v25 + 1))
      {
        if (*(void *)v28) {
          (*(void (**)(__n128))(**((void **)&v25 + 1) + 40))(v17);
        }
        *(void *)long long v28 = 0;
        long long v26 = 0uLL;
        *((void *)&v25 + 1) = 0;
        ++v27;
      }
      if (*((void *)&v22 + 1))
      {
        if ((void)v25) {
          (*(void (**)(__n128))(**((void **)&v22 + 1) + 40))(v17);
        }
        *(void *)&long long v25 = 0;
        long long v23 = 0uLL;
        *((void *)&v22 + 1) = 0;
        ++v24;
      }
      if (v20 && (v21 & 1) != 0) {
        (*(void (**)(__n128))(*(void *)v20 + 40))(v17);
      }
      if (v38 && (v39 & 1) != 0) {
        (*(void (**)(__n128))(*(void *)v38 + 40))(v17);
      }
    }
    else
    {
      __n128 v17 = *(__n128 *)v30;
      uint64_t v18 = *(void *)&v30[16];
      uint64_t v19 = *(void *)&v30[24];
      *(unsigned char *)a4 = 0;
      *(__n128 *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v17;
      *(void *)(a4 + 24) = v18;
      *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v19;
    }
    double result = v40;
    if (v40)
    {
      if (v41) {
        return (re::DynamicString *)(*(uint64_t (**)(__n128))(*(void *)v40 + 40))(v17);
      }
    }
  }
  return result;
}

re::DynamicString *MemoryAssetProvider::getDescription(MemoryAssetProvider *this, const re::AssetLoadDescriptor *a2, re::DynamicString *a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  re::DynamicString::setCapacity(&v6, 0);
  if (re::AssetLoadDescriptor::getIntrospectableData<re::DynamicString>(a2, &v6))
  {
    re::DynamicString::operator=(a3, (re::DynamicString *)&v6);
  }
  else
  {
    v10[0] = "mangled";
    v10[1] = 7;
    re::DynamicString::operator=(a3, (uint64_t)v10);
  }
  double result = v6;
  if (v6)
  {
    if (v7) {
      return (re::DynamicString *)(*(uint64_t (**)(void))(*(void *)v6 + 40))();
    }
  }
  return result;
}

re::DynamicString *MemoryAssetProvider::getAssetPathForRelease@<X0>(_anonymous_namespace_ *a1@<X0>, char *a2@<X1>, re::internal::AssetTypeRegistry *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v27 = 0;
  long long v28 = 0;
  uint64_t v29 = 0;
  re::DynamicString::setCapacity(&v26, 0);
  re::AssetLoadDescriptor::getIntrospectableData<re::DynamicString>((re::AssetLoadDescriptor *)a2, &v26);
  if (*((void *)a2 + 15)) {
    uint64_t v7 = (char *)*((void *)a2 + 16);
  }
  else {
    uint64_t v7 = a2 + 121;
  }
  uint64_t v8 = (_anonymous_namespace_ *)re::internal::AssetTypeRegistry::assetTypeWithName(a3, v7);
  LODWORD(v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v20 = 0;
  uint64_t v9 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v19, 0);
  *((void *)&v23 + 1) = 0;
  long long v24 = 0uLL;
  re::DynamicString::setCapacity(&v23, 0);
  uint64_t v25 = 0;
  if (v27) {
    uint64_t v10 = v28;
  }
  else {
    uint64_t v10 = (char *)&v27 + 1;
  }
  re::AssetPath::initMemoryAssetPath(&v18, v10, (uint64_t)v8);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  long long v15 = (unint64_t)v19;
  re::DynamicString::setCapacity(&v15, 0);
  re::AssetPath::fullAssetPath((re::DynamicString *)&v18, (re::DynamicString *)&v15);
  long long v11 = v15;
  uint64_t v12 = v16;
  uint64_t v13 = v17;
  *(unsigned char *)a4 = 1;
  *(_OWORD *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v11;
  *(void *)(a4 + 24) = v12;
  *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v13;
  if ((void)v23)
  {
    if (BYTE8(v23)) {
      (*(void (**)(void))(*(void *)v23 + 40))();
    }
    long long v23 = 0u;
    long long v24 = 0u;
  }
  if (v19 && (v20 & 1) != 0) {
    (*(void (**)(void))(*v19 + 40))();
  }
  double result = v26;
  if (v26)
  {
    if (v27) {
      return (re::DynamicString *)(*(uint64_t (**)(void))(*(void *)v26 + 40))();
    }
  }
  return result;
}

uint64_t MemoryAssetProvider::makeDescriptorFromAssetPath@<X0>(const re::DynamicString ***a1@<X1>, uint64_t a2@<X8>)
{
  MemoryAssetProvider::makeDescriptor((MemoryAssetProvider *)(a1 + 5), *a1[9], (uint64_t)&v6);
  v4.n128_f64[0] = re::Optional<re::AssetLoadDescriptor>::Optional(a2, (uint64_t)&v6);
  if ((void)v18)
  {
    if (BYTE8(v18)) {
      (*(void (**)(double))(*(void *)v18 + 40))(v4.n128_f64[0]);
    }
    __n128 v4 = 0uLL;
    long long v18 = 0u;
    long long v19 = 0u;
  }
  if (v13)
  {
    if (v17) {
      (*(void (**)(__n128))(*(void *)v13 + 40))(v4);
    }
    uint64_t v17 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v13 = 0;
    ++v16;
  }
  if (v8)
  {
    if (v12) {
      (*(void (**)(__n128))(*(void *)v8 + 40))(v4);
    }
    uint64_t v12 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v8 = 0;
    ++v11;
  }
  uint64_t result = v6;
  if (v6)
  {
    if (v7) {
      return (*(uint64_t (**)(__n128))(*(void *)v6 + 40))(v4);
    }
  }
  return result;
}

uint64_t re::AssetLoadDescriptor::getIntrospectableData<re::DynamicString>(re::AssetLoadDescriptor *a1, re::DynamicString **a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = &qword_268772000;
  {
    uint64_t v10 = a1;
    uint64_t v3 = &qword_268772000;
    int v8 = v6;
    uint64_t v2 = a2;
    a1 = v10;
    if (v8)
    {
      re::introspect<re::DynamicString>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicString>::get(0, v7);
      uint64_t v3 = &qword_268772000;
      uint64_t v2 = a2;
      a1 = v10;
    }
  }
  __n128 v4 = (re **)v3[452];
  return re::AssetLoadDescriptor::getIntrospectableData(a1, v4, v2, 0);
}

void std::__shared_ptr_pointer<re::AssetManager *,re::AssetManager::init(re::AssetManager::Config const&)::$_0,std::allocator<re::AssetManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t std::__shared_ptr_pointer<re::AssetManager *,re::AssetManager::init(re::AssetManager::Config const&)::$_0,std::allocator<re::AssetManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t re::DynamicArray<re::internal::AssetNetworkLoader::SerializedAssetResponse>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 112 * v4;
        uint64_t v6 = v3 + 64;
        do
        {
          re::DynamicArray<unsigned long>::deinit(v6);
          re::DynamicString::deinit((re::DynamicString *)(v6 - 32));
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v6 - 56));
          v6 += 112;
          v5 -= 112;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

double re::HashTable<re::DynamicString,re::internal::AssetNetworkLoader::FragmentedNetworkAsset,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      unint64_t v4 = 0;
      uint64_t v5 = 8;
      do
      {
        uint64_t v6 = a1[2];
        int v7 = *(_DWORD *)(v6 + v5);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v5) = v7 & 0x7FFFFFFF;
          re::DynamicString::deinit((re::DynamicString *)(v6 + v5 + 8));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        ++v4;
        v5 += 88;
      }
      while (v4 < v3);
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::DynamicString,re::internal::AssetNetworkLoader::PendingRequestedAsset,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::internal::AssetNetworkLoader::PendingRequestedAsset,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free((_DWORD *)(a1[2] + v3));
        ++v4;
        v3 += 80;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<re::DynamicString,re::internal::AssetNetworkLoader::PendingRequestedAsset,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(_DWORD *a1)
{
  int v1 = a1[2];
  if (v1 < 0)
  {
    a1[2] = v1 & 0x7FFFFFFF;
    re::DynamicString::deinit((re::DynamicString *)(a1 + 4));
    re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 14));
  }
}

void re::HashSetBase<re::internal::AssetEntry *,re::internal::AssetEntry *,re::internal::ValueAsKey<re::internal::AssetEntry *>,re::Hash<re::internal::AssetEntry *>,re::EqualTo<re::internal::AssetEntry *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashSetBase<re::internal::AssetEntry *,re::internal::AssetEntry *,re::internal::ValueAsKey<re::internal::AssetEntry *>,re::Hash<re::internal::AssetEntry *>,re::EqualTo<re::internal::AssetEntry *>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      uint64_t v7 = *(void *)(a1 + 16);
      *(void *)&v13[16] = v7;
      *(void *)(a1 + 16) = v6;
      long long v9 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = (void *)(v7 + 16);
        do
        {
          if ((*(_DWORD *)(v11 - 1) & 0x80000000) != 0) {
            re::HashSetBase<re::internal::AssetEntry *,re::internal::AssetEntry *,re::internal::ValueAsKey<re::internal::AssetEntry *>,re::Hash<re::internal::AssetEntry *>,re::EqualTo<re::internal::AssetEntry *>,true,false>::addAsMove(a1, *(v11 - 2) % (unint64_t)*(unsigned int *)(a1 + 24), *(v11 - 2), v11);
          }
          v11 += 3;
          --v10;
        }
        while (v10);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

void re::HashSetBase<re::internal::AssetEntry *,re::internal::AssetEntry *,re::internal::ValueAsKey<re::internal::AssetEntry *>,re::Hash<re::internal::AssetEntry *>,re::EqualTo<re::internal::AssetEntry *>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  signed int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 24 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_245, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 601);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashSetBase<re::internal::AssetEntry *,re::internal::AssetEntry *,re::internal::ValueAsKey<re::internal::AssetEntry *>,re::Hash<re::internal::AssetEntry *>,re::EqualTo<re::internal::AssetEntry *>,true,false>::addAsMove(uint64_t result, unsigned int a2, unint64_t a3, void *a4)
{
  uint64_t v6 = result;
  uint64_t v7 = *(unsigned int *)(result + 36);
  if (v7 == 0x7FFFFFFF)
  {
    uint64_t v7 = *(unsigned int *)(result + 32);
    int v8 = v7;
    if (v7 == *(_DWORD *)(result + 24))
    {
      double result = re::HashSetBase<re::internal::AssetEntry *,re::internal::AssetEntry *,re::internal::ValueAsKey<re::internal::AssetEntry *>,re::Hash<re::internal::AssetEntry *>,re::EqualTo<re::internal::AssetEntry *>,true,false>::setCapacity(result, (2 * *(_DWORD *)(result + 28)));
      a2 = a3 % *(unsigned int *)(v6 + 24);
      int v8 = *(_DWORD *)(v6 + 32);
    }
    *(_DWORD *)(v6 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v8 + 1;
    uint64_t v9 = *(void *)(v6 + 16);
    int v10 = *(_DWORD *)(v9 + 24 * v7 + 8);
  }
  else
  {
    uint64_t v9 = *(void *)(result + 16);
    int v10 = *(_DWORD *)(v9 + 24 * v7 + 8);
    *(_DWORD *)(result + 36) = v10 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v9 + 24 * v7 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v10 | 0x80000000;
  *(_DWORD *)(*(void *)(v6 + 16) + 24 * v7 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(v6 + 16) + 24 * v7 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(v6 + 8) + 4 * a2);
  *(void *)(*(void *)(v6 + 16) + 24 * v7) = a3;
  *(void *)(*(void *)(v6 + 16) + 24 * v7 + 16) = *a4;
  *(_DWORD *)(*(void *)(v6 + 8) + 4 * are::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v7;
  ++*(_DWORD *)(v6 + 28);
  return result;
}

void re::HashTable<re::DynamicString,re::SharedPtr<re::internal::AssetEntry>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 0)
  {
    *(_DWORD *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v1 & 0x7FFFFFFF;
    re::DynamicString::deinit((re::DynamicString *)(a1 + 16));
    uint64_t v3 = *(void *)(a1 + 48);
    if (v3)
    {

      *(void *)(a1 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    }
  }
}

double re::HashTable<unsigned long long,re::SharedPtr<re::RealityFile>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7 & 0x7FFFFFFF;
          uint64_t v8 = *(void *)(v6 + 24);
          if (v8)
          {

            *(void *)(v6 + 24) = 0;
            unint64_t v3 = *((unsigned int *)a1 + 8);
          }
        }
        v4 += 32;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void std::__list_imp<re::Pair<re::DynamicString,re::Pair<re::SharedPtr<re::RealityFile>,unsigned int,true>,true>>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    unint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        long long v5 = (uint64_t *)v3[1];
        std::__destroy_at[abi:nn180100]<re::Pair<re::DynamicString,re::Pair<re::SharedPtr<re::RealityFile>,unsigned int,true>,true>,0>((re::DynamicString *)(v3 + 2));
        operator delete(v3);
        unint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

double std::__destroy_at[abi:nn180100]<re::Pair<re::DynamicString,re::Pair<re::SharedPtr<re::RealityFile>,unsigned int,true>,true>,0>(re::DynamicString *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {

    *((void *)this + 4) = 0;
  }
  return re::DynamicString::deinit(this);
}

void std::__function::__func<re::AssetManager::update(BOOL,BOOL)::$_0,std::allocator<re::AssetManager::update(BOOL,BOOL)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<re::AssetManager::update(BOOL,BOOL)::$_0,std::allocator<re::AssetManager::update(BOOL,BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26E6C9DD8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = result;
  return result;
}

__n128 std::__function::__func<re::AssetManager::update(BOOL,BOOL)::$_0,std::allocator<re::AssetManager::update(BOOL,BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6C9DD8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = result;
  return result;
}

void std::__function::__func<re::AssetManager::update(BOOL,BOOL)::$_0,std::allocator<re::AssetManager::update(BOOL,BOOL)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v298 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 8);
  BOOL v4 = re::internal::enableSignposts(0, 0);
  if (v4)
  {
    BOOL v4 = re::internal::enableHighFrequencyTracing(0, 0);
    if (v4)
    {
      re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)buf, 2000, v3);
      re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)buf);
    }
  }
  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v4);
  if (isStatisticCollectionEnabled)
  {
    uint64_t v6 = re::profilerThreadContext(isStatisticCollectionEnabled);
    if (*(void *)(v6 + 152)) {
      uint64_t v255 = mach_absolute_time();
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (*(unsigned char *)(a1 + 17)) {
    *(unsigned char *)(v3 + 1721) = 0;
  }
  long long v7 = *(_OWORD *)(v3 + 1448);
  long long v272 = *(_OWORD *)(v3 + 1432);
  long long v273 = v7;
  uint64_t v8 = (void *)(v3 + 1464);
  long long v274 = 0u;
  long long v275 = 0u;
  int v276 = 0;
  uint64_t v277 = 0x7FFFFFFFLL;
  uint64_t v9 = *(void *)(v3 + 1464);
  if (v9)
  {
    if (*(_DWORD *)(v3 + 1492) <= 3u) {
      signed int v10 = 3;
    }
    else {
      signed int v10 = *(_DWORD *)(v3 + 1492);
    }
    re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::init((uint64_t)&v274, v9, v10);
    re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::copy((uint64_t)&v274, v3 + 1464);
  }
  uint64_t v256 = v6;
  if (!*(unsigned char *)(a1 + 16))
  {
    dispatch_time_t v13 = dispatch_time(0, 0);
    unint64_t v11 = -1;
    goto LABEL_19;
  }
  unint64_t v11 = *(void *)(v3 + 1384);
  dispatch_time_t v12 = dispatch_time(0, 0);
  dispatch_time_t v13 = v12;
  if (v11 == -1)
  {
LABEL_19:
    dispatch_time_t v14 = -1;
    goto LABEL_20;
  }
  dispatch_time_t v14 = dispatch_time(v12, v11);
LABEL_20:
  *(void *)&v291[32] = 0;
  memset(v291, 0, 28);
  uint64_t v15 = *(void *)(v3 + 40);
  if (v15)
  {
    int v16 = *(unint64_t **)(v3 + 56);
    uint64_t v17 = 8 * v15;
    do
    {
      unint64_t v18 = *v16;
      buf[0].n128_u64[0] = v18;
      if (v18) {
        id v19 = (id)(v18 + 8);
      }
      uint64_t v20 = *(os_unfair_lock_s **)(v18 + 24);
      uint64_t v21 = v20 + 48;
      os_unfair_lock_lock(v20 + 48);
      unint64_t os_unfair_lock_opaque = v20[84]._os_unfair_lock_opaque;
      os_unfair_lock_unlock(v21);
      if (os_unfair_lock_opaque) {
        re::DynamicArray<re::SharedPtr<re::AssetLoadRequest>>::add((_anonymous_namespace_ *)v291, (uint64_t *)buf);
      }

      ++v16;
      v17 -= 8;
    }
    while (v17);
    if (*(void *)&v291[16])
    {
      uint64_t v22 = *(os_unfair_lock_s **)&v291[32];
      long long v23 = (os_unfair_lock_s *)(*(void *)&v291[32] + 8 * *(void *)&v291[16]);
      do
      {
        uint64_t v24 = *(void *)&v22->_os_unfair_lock_opaque;
        if (*(void *)&v22->_os_unfair_lock_opaque) {
          id v25 = (id)(v24 + 8);
        }
        long long v26 = *(void **)(v3 + 56);
        unint64_t v27 = *(void *)(v3 + 40);
        long long v28 = &v26[v27];
        uint64_t v29 = v26;
        if (v27)
        {
          uint64_t v30 = 8 * v27;
          uint64_t v29 = *(void **)(v3 + 56);
          while (*v29 != v24)
          {
            ++v29;
            v30 -= 8;
            if (!v30)
            {
              uint64_t v29 = &v26[v27];
              break;
            }
          }
        }
        unint64_t os_unfair_lock_opaque = v29 - v26;
        if (os_unfair_lock_opaque != v27)
        {
          if (v27 <= os_unfair_lock_opaque) {
            goto LABEL_456;
          }
          uint64_t v31 = v27 - 1;
          if (v27 - 1 > os_unfair_lock_opaque)
          {
            uint64_t v32 = v26[os_unfair_lock_opaque];
            v26[os_unfair_lock_opaque] = *(v28 - 1);
            *(v28 - 1) = v32;
            long long v26 = *(void **)(v3 + 56);
          }
          long long v33 = &v26[v27];
          uint64_t v34 = *(v33 - 1);
          if (v34)
          {

            *(v33 - 1) = 0;
            uint64_t v31 = *(void *)(v3 + 40) - 1;
          }
          *(void *)(v3 + 40) = v31;
          ++*(_DWORD *)(v3 + 48);
        }
        if (v24) {

        }
        v22 += 2;
      }
      while (v22 != v23);
    }
  }
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)v291);
  v271[0] = v13;
  v271[1] = v14;
  v271[2] = v11;
  re::AssetManager::updateLoadRequests(v3, (uint64_t)v271);
  dispatch_time_t v257 = v13;
  unint64_t v258 = v11;
  v270[0] = v13;
  v270[1] = v14;
  v270[2] = v11;
  re::AssetManager::processUnreferencedUnloadRequests(v3, (uint64_t)v270);
  if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyTracing(0, 0))
  {
    re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)buf, 2012, 61);
    re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)buf);
  }
  atomic_load((unsigned __int8 *)(v3 + 1345));
  v259.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  int v35 = (os_unfair_lock_s *)(v3 + 64);
  lock = (os_unfair_lock_s *)(v3 + 64);
  dispatch_time_t v268 = v14;
  do
  {
    uint64_t LoadItemResult = re::internal::AssetBackgroundLoader::tryGetLoadItemResult(*(void *)(v3 + 1032), 1);
    if (!LoadItemResult) {
      break;
    }
    unint64_t v27 = LoadItemResult;
    uint64_t v38 = *(void *)(LoadItemResult + 24);
    int v39 = *(_DWORD *)(v38 + 16);
    switch(v39)
    {
      case 2:
        re::AssetManager::onUnloadComplete((os_unfair_lock_s *)v3, *(void *)v38);
        break;
      case 1:
        int v41 = *(_DWORD *)(LoadItemResult + 136);
        if (v41 == 3)
        {
          uint64_t v43 = *re::assetsLogObjects((re *)LoadItemResult);
          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
          {
            if (*(unsigned char *)(v27 + 40)) {
              unint64_t v44 = *(void *)(v27 + 48);
            }
            else {
              unint64_t v44 = v27 + 41;
            }
            buf[0].n128_u32[0] = 136315138;
            *(unint64_t *)((char *)buf[0].n128_u64 + 4) = v44;
            _os_log_impl(&dword_233120000, v43, OS_LOG_TYPE_DEFAULT, "Asset load (which was cancelled) failed '%s'", (uint8_t *)buf, 0xCu);
          }
          if (*(unsigned char *)(v27 + 144)) {
            re::DynamicString::append((re::DynamicString *)(v27 + 152), " (was also cancelled)", 0x15uLL);
          }
        }
        else
        {
          if (v41 != 2) {
            goto LABEL_463;
          }
          if (*(unsigned char *)(LoadItemResult + 40)) {
            uint64_t v42 = *(const char **)(LoadItemResult + 48);
          }
          else {
            uint64_t v42 = (const char *)(LoadItemResult + 41);
          }
          re::AssetManager::unloadAssetPointer((re::AssetManager *)v3, *(const re::AssetType **)(LoadItemResult + 64), *(void **)(LoadItemResult + 96), v42, *(void *)v38);
          *(void *)(v27 + 96) = 0;
        }
        break;
      case 0:
        v292[0] = 0;
        if (*(unsigned char *)(LoadItemResult + 344))
        {
          uint64_t v40 = *(void *)(LoadItemResult + 360);
          goto LABEL_66;
        }
        if (*(unsigned char *)(LoadItemResult + 184))
        {
          uint64_t v40 = *(void *)(LoadItemResult + 240);
LABEL_66:
          os_unfair_lock_lock(v35);
          re::AssetManager::lookupExistingAsset_assetTablesLocked((re::internal::AssetTypeRegistry **)v3, v40, buf);
          os_unfair_lock_unlock(v35);
LABEL_67:
          uint64_t LoadItemResult = re::Optional<re::AssetHandle>::operator=((uint64_t)v292, buf);
          if (buf[0].n128_u8[0]) {
            re::AssetHandle::~AssetHandle((re::AssetHandle *)&buf[0].n128_i8[8]);
          }
        }
        else if (*(unsigned char *)(LoadItemResult + 248))
        {
          re::AssetManager::lookupExistingAsset((re::AssetManager *)buf, (os_unfair_lock_s *)v3, (re::DynamicString *)(LoadItemResult + 256));
          goto LABEL_67;
        }
        if (v292[0])
        {
          uint64_t v45 = *(void *)&v292[16];
          long long v46 = (os_unfair_lock_s *)(*(void *)&v292[16] + 384);
          os_unfair_lock_lock((os_unfair_lock_t)(*(void *)&v292[16] + 384));
          *(void *)(v45 + 400) = 0;
          int v49 = *(_DWORD *)(v27 + 136);
          if (v49 == 3)
          {
            if (*(unsigned char *)(v27 + 144))
            {
              if (*(unsigned char *)(v27 + 160)) {
                long long v54 = *(const char **)(v27 + 168);
              }
              else {
                long long v54 = (const char *)(v27 + 161);
              }
            }
            else
            {
              long long v54 = "Load failed";
            }
            if (*(void *)(v45 + 24))
            {
              re::AssetManager::putEntryInFailedState_entryStateLocked(v66, v45, 300, (uint64_t)buf);
              int v35 = (os_unfair_lock_s *)(v3 + 64);
              dispatch_time_t v14 = v268;
              if (buf[0].n128_u64[0])
              {
                if (buf[0].n128_u8[8]) {
                  (*(void (**)(void))(*(void *)buf[0].n128_u64[0] + 40))();
                }
                memset(buf, 0, sizeof(buf));
              }
            }
            else
            {
              uint64_t v67 = *re::assetsLogObjects(v47);
              int v35 = (os_unfair_lock_s *)(v3 + 64);
              dispatch_time_t v14 = v268;
              if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
              {
                if (*(unsigned char *)(v27 + 40)) {
                  unint64_t v68 = *(void *)(v27 + 48);
                }
                else {
                  unint64_t v68 = v27 + 41;
                }
                buf[0].n128_u32[0] = 136315394;
                *(unint64_t *)((char *)buf[0].n128_u64 + 4) = v68;
                buf[0].n128_u16[6] = 2080;
                *(unint64_t *)((char *)&buf[0].n128_u64[1] + 6) = (unint64_t)v54;
                _os_log_error_impl(&dword_233120000, v67, OS_LOG_TYPE_ERROR, "Failed to load asset path '%s' -- %s", (uint8_t *)buf, 0x16u);
              }
            }
          }
          else
          {
            if (v49 != 2) {
              goto LABEL_464;
            }
            if (*(unsigned char *)(v45 + 416))
            {
              unint64_t v50 = *re::assetsLogObjects(v47);
              int v35 = (os_unfair_lock_s *)(v3 + 64);
              dispatch_time_t v14 = v268;
              if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
              {
                if (*(unsigned char *)(v27 + 40)) {
                  unint64_t v51 = *(void *)(v27 + 48);
                }
                else {
                  unint64_t v51 = v27 + 41;
                }
                buf[0].n128_u32[0] = 136315138;
                *(unint64_t *)((char *)buf[0].n128_u64 + 4) = v51;
                _os_log_impl(&dword_233120000, v50, OS_LOG_TYPE_DEFAULT, "Couldn't load asset at %s as there is an existing asset being registered", (uint8_t *)buf, 0xCu);
              }
              uint64_t v71 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(void *)(v3 + 1040), *(void *)(v27 + 64));
              (*(void (**)(uint64_t, void))(*(void *)v71 + 16))(v71, *(void *)(v27 + 96));
              *(void *)(v27 + 96) = 0;
              *(_DWORD *)(v27 + 136) = 3;
              goto LABEL_140;
            }
            if (!*(unsigned char *)(v27 + 344))
            {
LABEL_139:
              *(unsigned char *)(v45 + 417) = 0;
              re::AssetManager::processLoadedAsset_entryStateLocked((re::AssetManager *)v3, (re::internal::AssetEntry *)v45, *(void **)(v27 + 96));
              *(void *)(v45 + 64re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(void *)(v27 + 408);
              uint64_t v74 = *(void *)(v27 + 128);
              *(void *)(v45 + 76re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(void *)(v27 + 120);
              *(unsigned char *)(v45 + 776) = v74;
              int v35 = (os_unfair_lock_s *)(v3 + 64);
              dispatch_time_t v14 = v268;
              goto LABEL_140;
            }
            uint64_t v55 = *re::assetsLogObjects(v47);
            if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
            {
              if (*(unsigned char *)(v27 + 40)) {
                unint64_t v82 = *(void *)(v27 + 48);
              }
              else {
                unint64_t v82 = v27 + 41;
              }
              buf[0].n128_u32[0] = 136315138;
              *(unint64_t *)((char *)buf[0].n128_u64 + 4) = v82;
              _os_log_debug_impl(&dword_233120000, v55, OS_LOG_TYPE_DEBUG, "Processing Payload for '%s'", (uint8_t *)buf, 0xCu);
            }
            uint64_t v56 = (*(uint64_t (**)(void))(**(void **)(v3 + 1144) + 104))(*(void *)(v3 + 1144));
            re::DynamicString::format((re::DynamicString *)"%llu", (re::DynamicString *)&v278, v56);
            re::AssetHandle::AssetHandle(&v281, (re::internal::AssetEntry *)v45);
            re::DefaultAssetSerialize::DefaultAssetSerialize((re::DefaultAssetSerialize *)buf, (const re::AssetHandle *)&v281);
            buf[0].n128_u64[0] = (unint64_t)&unk_26E6CA920;
            BYTE8(v287) = 1;
            re::DynamicString::DynamicString((re::DynamicString *)&v288, (const re::DynamicString *)&v278);
            uint64_t v290 = v3;
            uint64_t v57 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(void *)(v3 + 1040), *(void *)(v27 + 64));
            (*(void (**)(uint8_t *__return_ptr))(*(void *)v57 + 160))(v291);
            if (*(void *)&v291[16])
            {
              uint64_t v58 = *(re::AssetHandle ***)&v291[32];
              uint64_t v59 = 8 * *(void *)&v291[16];
              do
              {
                uint64_t v60 = *v58;
                uint64_t v61 = re::AssetHandle::serializationString(*v58, (re::DynamicString *)v295);
                if (v295[8]) {
                  uint64_t v62 = *(void *)&v295[8] >> 1;
                }
                else {
                  uint64_t v62 = v295[8] >> 1;
                }
                if (v62)
                {
                  if (v295[8]) {
                    long long v63 = *(unsigned char **)&v295[16];
                  }
                  else {
                    long long v63 = &v295[9];
                  }
                }
                if (*(void *)v295 && (v295[8] & 1) != 0) {
                  (*(void (**)(void))(**(void **)v295 + 40))();
                }
                ++v58;
                v59 -= 8;
              }
              while (v59);
            }
            uint64_t v64 = *(void *)(v27 + 352);
            *(void *)(v27 + 35re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
            *(void *)v295 = v64;
            if (*(unsigned char *)(v27 + 40)) {
              unint64_t v65 = *(void *)(v27 + 48);
            }
            else {
              unint64_t v65 = v27 + 41;
            }
            char v72 = (*(uint64_t (**)(uint64_t, unsigned char *, void, unint64_t))(*(void *)v57 + 224))(v57, v295, *(void *)(v27 + 96), v65);

            if ((v72 & 1) == 0) {
              (*(void (**)(uint64_t, void))(*(void *)v57 + 16))(v57, *(void *)(v27 + 96));
            }
            int v73 = *(_anonymous_namespace_ **)v291;
            uint64_t v8 = (void *)(v3 + 1464);
            if (*(void *)v291 && *(void *)&v291[32]) {
              int v73 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)v291 + 40))();
            }
            if (v72)
            {
              buf[0].n128_u64[0] = (unint64_t)&unk_26E6CA920;
              if ((void)v288)
              {
                if (BYTE8(v288)) {
                  (*(void (**)(void))(*(void *)v288 + 40))();
                }
                long long v288 = 0u;
                long long v289 = 0u;
              }
              buf[0].n128_u64[0] = (unint64_t)&unk_26E6CA958;
              re::Optional<re::AssetPath>::~Optional(&buf[0].n128_u8[8]);
              re::AssetHandle::~AssetHandle((re::AssetHandle *)&v281);
              if (v278 && (v279 & 1) != 0) {
                (*(void (**)(void))(*(void *)v278 + 40))();
              }
              goto LABEL_139;
            }
            re::AssetManager::putEntryInFailedState_entryStateLocked(v81, v45, 303, (uint64_t)v291);
            int v35 = (os_unfair_lock_s *)(v3 + 64);
            dispatch_time_t v14 = v268;
            if (*(void *)v291)
            {
              if (v291[8]) {
                (*(void (**)(void))(**(void **)v291 + 40))();
              }
              memset(v291, 0, 32);
            }
            buf[0].n128_u64[0] = (unint64_t)&unk_26E6CA920;
            if ((void)v288)
            {
              if (BYTE8(v288)) {
                (*(void (**)(void))(*(void *)v288 + 40))();
              }
              long long v288 = 0u;
              long long v289 = 0u;
            }
            buf[0].n128_u64[0] = (unint64_t)&unk_26E6CA958;
            re::Optional<re::AssetPath>::~Optional(&buf[0].n128_u8[8]);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)&v281);
            if (v278 && (v279 & 1) != 0) {
              (*(void (**)(void))(*(void *)v278 + 40))();
            }
          }
LABEL_140:
          os_unfair_lock_unlock(v46);
        }
        else
        {
          uint64_t v52 = *re::assetsLogObjects((re *)LoadItemResult);
          if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
          {
            if (*(unsigned char *)(v27 + 40)) {
              unint64_t v53 = *(void *)(v27 + 48);
            }
            else {
              unint64_t v53 = v27 + 41;
            }
            buf[0].n128_u32[0] = 136315138;
            *(unint64_t *)((char *)buf[0].n128_u64 + 4) = v53;
            _os_log_impl(&dword_233120000, v52, OS_LOG_TYPE_DEFAULT, "Existing asset not found for '%s', may have been unloaded.", (uint8_t *)buf, 0xCu);
          }
          uint64_t v69 = *(void *)(v27 + 96);
          if (v69)
          {
            uint64_t v70 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(void *)(v3 + 1040), *(void *)(v27 + 64));
            (*(void (**)(uint64_t, uint64_t))(*(void *)v70 + 16))(v70, v69);
          }
        }
        if (v292[0]) {
          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v292[8]);
        }
        break;
    }
    ++*(void *)(v3 + 1432);
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 1280));
    long long v23 = *(os_unfair_lock_s **)(v27 + 24);
    unint64_t v76 = *(os_unfair_lock_s ***)(v3 + 1320);
    unint64_t v11 = *(void *)(v3 + 1304);
    char v77 = v76;
    if (v11)
    {
      uint64_t v78 = 8 * v11;
      char v77 = *(os_unfair_lock_s ***)(v3 + 1320);
      while (*v77 != v23)
      {
        ++v77;
        v78 -= 8;
        if (!v78)
        {
          char v77 = &v76[v11];
          break;
        }
      }
    }
    unint64_t os_unfair_lock_opaque = v77 - v76;
    if (os_unfair_lock_opaque != v11)
    {
      if (v11 <= os_unfair_lock_opaque) {
        goto LABEL_455;
      }
      if (v11 - 1 > os_unfair_lock_opaque) {
        v76[os_unfair_lock_opaque] = v76[v11 - 1];
      }
      *(void *)(v3 + 1304) = v11 - 1;
      ++*(_DWORD *)(v3 + 1312);
    }
    if (v23)
    {
      unint64_t v11 = re::globalAllocators(v75)[2];
      *(void *)&v23[6]._unint64_t os_unfair_lock_opaque = &unk_26E6C9C48;
      uint64_t v79 = *(void *)&v23[12]._os_unfair_lock_opaque;
      if (v79)
      {

        *(void *)&v23[12]._unint64_t os_unfair_lock_opaque = 0;
      }
      *(void *)&v23[6]._unint64_t os_unfair_lock_opaque = &unk_26E6DECE0;
      objc_destructInstance(&v23[8]);
      uint64_t v80 = *(void *)&v23[2]._os_unfair_lock_opaque;
      if (v80)
      {

        *(void *)&v23[2]._unint64_t os_unfair_lock_opaque = 0;
      }
      (*(void (**)(unint64_t, os_unfair_lock_s *))(*(void *)v11 + 40))(v11, v23);
    }
    re::internal::AssetBackgroundLoader::assetLoadItemFree(*(void *)(v3 + 1032), v27);
    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 1280));
  }
  while (dispatch_time(0, 0) < v14);
  *(void *)(v3 + 1440) += std::chrono::steady_clock::now().__d_.__rep_ - v259.__d_.__rep_;
  uint64_t v83 = *(void *)(v3 + 1072);
  if (v83)
  {
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = std::chrono::steady_clock::now().__d_.__rep_;
    *(void *)(v3 + 1448) += (*(uint64_t (**)(uint64_t, dispatch_time_t))(*(void *)v83 + 40))(v83, v14);
    *(void *)(v3 + 1456) += std::chrono::steady_clock::now().__d_.__rep_ - rep;
  }
  if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyTracing(0, 0))
  {
    re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)buf, 2012, 61);
    re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)buf);
  }
  atomic_load((unsigned __int8 *)(v3 + 1345));
  memset(v291, 0, 36);
  *(void *)&v291[36] = 0x7FFFFFFFLL;
  os_unfair_lock_lock(v35);
  *(void *)&v297[2] = 0;
  memset(v295, 0, sizeof(v295));
  if (*(void *)(v3 + 264))
  {
    unint64_t v85 = *(void *)(v3 + 280);
    *(void *)v295 = *(void *)(v3 + 264);
    re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(v295, v85);
    ++*(_DWORD *)&v295[24];
    unint64_t v86 = *(void *)(v3 + 280);
    uint64_t v87 = *(void *)&v295[16];
    if (v86 >= *(void *)&v295[16])
    {
      re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(v295, *(void *)(v3 + 280));
      uint64_t v90 = *(void *)&v295[16];
      long long v23 = *(os_unfair_lock_s **)&v297[2];
      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SharedPtr<re::internal::AssetReference> *,re::SharedPtr<re::internal::AssetReference> *,re::SharedPtr<re::internal::AssetReference> *,0>(*(uint64_t **)(v3 + 296), (uint64_t *)(*(void *)(v3 + 296) + 8 * *(void *)&v295[16]), *(uint64_t **)&v297[2]);
      if (v90 != v86)
      {
        uint64_t v91 = (uint64_t *)(*(void *)(v3 + 296) + 8 * v90);
        v23 += 2 * v90;
        uint64_t v92 = 8 * v86 - 8 * v90;
        do
        {
          uint64_t v93 = *v91;
          *(void *)&v23->_unint64_t os_unfair_lock_opaque = *v91;
          if (v93) {
            id v94 = (id)(v93 + 8);
          }
          ++v91;
          v23 += 2;
          v92 -= 8;
        }
        while (v92);
      }
    }
    else
    {
      uint64_t v88 = *(void *)&v297[2];
      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SharedPtr<re::internal::AssetReference> *,re::SharedPtr<re::internal::AssetReference> *,re::SharedPtr<re::internal::AssetReference> *,0>(*(uint64_t **)(v3 + 296), (uint64_t *)(*(void *)(v3 + 296) + 8 * v86), *(uint64_t **)&v297[2]);
      long long v23 = (os_unfair_lock_s *)(v88 + 8 * v86);
      uint64_t v89 = 8 * v87 - 8 * v86;
      do
      {
        if (*(void *)&v23->_os_unfair_lock_opaque)
        {

          *(void *)&v23->_unint64_t os_unfair_lock_opaque = 0;
        }
        v23 += 2;
        v89 -= 8;
      }
      while (v89);
    }
    *(void *)&v295[16] = v86;
    os_unfair_lock_unlock(v35);
    if (v86)
    {
      unint64_t v27 = 0;
      unint64_t v11 = 40;
      do
      {
        if (dispatch_time(0, 0) >= v268) {
          break;
        }
        if (v86 <= v27) {
          goto LABEL_457;
        }
        uint64_t v95 = *(void *)(*(void *)(*(void *)&v297[2] + 8 * v27) + 24);
        *(void *)v292 = v95;
        if (!v95) {
          goto LABEL_224;
        }
        id v96 = (id)(v95 + 8);
        uint64_t v97 = *(void *)v292;
        if (!*(void *)v292) {
          goto LABEL_224;
        }
        if (*(unsigned char *)(*(void *)v292 + 640)) {
          goto LABEL_223;
        }
        v98.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        long long v23 = (os_unfair_lock_s *)(*(void *)v292 + 384);
        os_unfair_lock_lock((os_unfair_lock_t)(*(void *)v292 + 384));
        unint64_t os_unfair_lock_opaque = *(void *)v292;
        *(unsigned char *)(*(void *)v292 + 640) = 1;
        buf[0].n128_u64[0] = (unint64_t)&unk_26E6C9E58;
        buf[0].n128_u64[1] = v3;
        buf[1].n128_u64[0] = (unint64_t)v292;
        buf[1].n128_u64[1] = (unint64_t)buf;
        re::runInLocalAutoreleasePool((uint64_t)buf);
        std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](buf);
        unint64_t v99 = *(void *)v292;
        *(unsigned char *)(*(void *)v292 + 640) = 0;
        if (!*(unsigned char *)(os_unfair_lock_opaque + 416))
        {
          buf[0].n128_u64[0] = v99;
          unint64_t v100 = 0x94D049BB133111EBLL
               * ((0xBF58476D1CE4E5B9 * (v99 ^ (v99 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v99 ^ (v99 >> 30))) >> 27));
          unint64_t v101 = v100 ^ (v100 >> 31);
          if (!*(_DWORD *)&v291[24])
          {
            LODWORD(v10re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
LABEL_210:
            re::HashSetBase<re::internal::AssetEntry *,re::internal::AssetEntry *,re::internal::ValueAsKey<re::internal::AssetEntry *>,re::Hash<re::internal::AssetEntry *>,re::EqualTo<re::internal::AssetEntry *>,true,false>::addAsMove((uint64_t)v291, v102, v101, buf);
            ++*(_DWORD *)&v291[40];
            goto LABEL_211;
          }
          unint64_t v102 = v101 % *(unsigned int *)&v291[24];
          uint64_t v103 = *(unsigned int *)(*(void *)&v291[8] + 4 * v102);
          if (v103 == 0x7FFFFFFF) {
            goto LABEL_210;
          }
          while (*(void *)(*(void *)&v291[16] + 24 * v103 + 16) != v99)
          {
            LODWORD(v103) = *(_DWORD *)(*(void *)&v291[16] + 24 * v103 + 8) & 0x7FFFFFFF;
            if (v103 == 0x7FFFFFFF) {
              goto LABEL_210;
            }
          }
        }
LABEL_211:
        v104.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        unint64_t v105 = *(void *)(*(void *)v292 + 264);
        unint64_t v106 = 0x94D049BB133111EBLL
             * ((0xBF58476D1CE4E5B9 * (v105 ^ (v105 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v105 ^ (v105 >> 30))) >> 27));
        unint64_t v107 = v106 ^ (v106 >> 31);
        if (!*v8)
        {
          LODWORD(v10re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
LABEL_218:
          unint64_t v278 = *(void *)(*(void *)v292 + 264);
          buf[0].n128_u64[0] = 1;
          buf[0].n128_u64[1] = v104.__d_.__rep_ - v98.__d_.__rep_;
LABEL_219:
          re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addAsMove((uint64_t)v8, v108, v107, &v278, buf);
          ++*(_DWORD *)(v3 + 1504);
          goto LABEL_222;
        }
        unint64_t v108 = v107 % *(unsigned int *)(v3 + 1488);
        uint64_t v109 = *(unsigned int *)(*(void *)(v3 + 1472) + 4 * v108);
        if (v109 == 0x7FFFFFFF) {
          goto LABEL_218;
        }
        uint64_t v110 = *(void *)(v3 + 1480);
        if (*(void *)(v110 + 40 * v109 + 16) != v105)
        {
          while (1)
          {
            unsigned int v111 = *(_DWORD *)(v110 + 40 * *(unsigned int *)(*(void *)(v3 + 1472) + 4 * v108) + 8) & 0x7FFFFFFF;
            if (v111 == 0x7FFFFFFF) {
              break;
            }
            if (*(void *)(v110 + 40 * v111 + 16) == v105) {
              goto LABEL_221;
            }
          }
          unint64_t v278 = *(void *)(*(void *)v292 + 264);
          buf[0].n128_u64[0] = 1;
          buf[0].n128_u64[1] = v104.__d_.__rep_ - v98.__d_.__rep_;
          while (1)
          {
            int v114 = *(_DWORD *)(v110 + 40 * v109 + 8);
            uint64_t v109 = v114 & 0x7FFFFFFF;
            if ((v114 & 0x7FFFFFFF) == 0x7FFFFFFF) {
              goto LABEL_219;
            }
            if (*(void *)(v110 + 40 * v109 + 16) == v105) {
              goto LABEL_222;
            }
          }
        }
        unsigned int v111 = *(_DWORD *)(*(void *)(v3 + 1472) + 4 * v108);
LABEL_221:
        uint64_t v112 = v110 + 40 * v111;
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v113 = *(void *)(v112 + 32) + v104.__d_.__rep_ - v98.__d_.__rep_;
        ++*(void *)(v112 + 24);
        *(void *)(v112 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v113;
LABEL_222:
        os_unfair_lock_unlock(v23);
        uint64_t v97 = *(void *)v292;
        if (*(void *)v292)
        {
LABEL_223:

          unint64_t v86 = *(void *)&v295[16];
        }
LABEL_224:
        ++v27;
      }
      while (v86 > v27);
    }
  }
  else
  {
    os_unfair_lock_unlock(v35);
  }
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)v295);
  v115 = (os_unfair_lock_s *)(v3 + 64);
  os_unfair_lock_lock(lock);
  unint64_t v116 = *(void *)(v3 + 280);
  dispatch_time_t v117 = v268;
  if (v116)
  {
    unint64_t v118 = 0;
    do
    {
      uint64_t v119 = *(void *)(v3 + 296);
      while (!re::HashSetBase<re::internal::AssetEntry *,re::internal::AssetEntry *,re::internal::ValueAsKey<re::internal::AssetEntry *>,re::Hash<re::internal::AssetEntry *>,re::EqualTo<re::internal::AssetEntry *>,true,false>::contains((uint64_t)v291, *(void *)(*(void *)(v119 + 8 * v118) + 24)))
      {
        if (v116 <= ++v118) {
          goto LABEL_237;
        }
      }
      re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::removeAt(v3 + 264, v118);
      unint64_t v116 = *(void *)(v3 + 280);
    }
    while (v116 > v118);
  }
LABEL_237:
  os_unfair_lock_unlock(lock);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v291);
  uint64_t v120 = *(re::internal::AssetNetworkLoader **)(v3 + 1056);
  if (v120) {
    re::internal::AssetNetworkLoader::update(v120);
  }
  v269[0] = v257;
  v269[1] = v268;
  v269[2] = v258;
  re::AssetManager::updateLoadRequests(v3, (uint64_t)v269);
  uint64_t v122 = *(void *)(v3 + 1352);
  if (v122 && *(unsigned char *)(v122 + 204) && !*(unsigned char *)(v122 + 17))
  {
    int v155 = *(_DWORD *)(v122 + 176);
    if (re::ProfilerConfig::isStatisticCollectionEnabled(v121) && (v155 & 4) != 0)
    {
      *(void *)v295 = 0;
      *(void *)v292 = 0;
      unint64_t v278 = 0;
      re::AssetManager::gatherAssetStatisticsByType((re::AssetManager *)v3, v291);
      if (*(void *)&v291[8])
      {
        v157 = 0;
        int v158 = 0;
        unint64_t v159 = 0;
        unint64_t v160 = 0;
        uint64_t v161 = *(void *)&v291[16];
        uint64_t v260 = *(void *)&v291[16] + 104 * *(void *)&v291[8];
        do
        {
          *(void *)v286 = 0;
          memset(buf, 0, 28);
          if (*(void *)v161)
          {
            v263 = v157;
            unint64_t v265 = v160;
            v261 = v158;
            unint64_t v162 = *(void *)(v161 + 16);
            buf[0].n128_u64[0] = *(void *)v161;
            re::DynamicArray<re::AssetPath>::setCapacity(buf, v162);
            ++buf[1].n128_u32[2];
            unint64_t v163 = *(void *)(v161 + 16);
            unint64_t v164 = buf[1].n128_u64[0];
            if (v163 >= buf[1].n128_u64[0])
            {
              re::DynamicArray<re::AssetPath>::setCapacity(buf, *(void *)(v161 + 16));
              unint64_t v168 = buf[1].n128_u64[0];
              uint64_t v169 = *(void *)v286;
              uint64_t v156 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::AssetPath *,re::AssetPath *,re::AssetPath *>(*(re::DynamicString **)(v161 + 32), (re::DynamicString *)(*(void *)(v161 + 32) + 80 * buf[1].n128_u64[0]), *(uint64_t *)v286);
              if (v168 != v163)
              {
                uint64_t v170 = *(void *)(v161 + 32);
                uint64_t v171 = v170 + 80 * v163;
                uint64_t v172 = 80 * v168;
                do
                {
                  uint64_t v173 = v170 + v172;
                  *(_DWORD *)(v169 + v17re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *(_DWORD *)(v170 + v172);
                  re::DynamicString::DynamicString((re::DynamicString *)(v169 + v172 + 8), (const re::DynamicString *)(v170 + v172 + 8));
                  uint64_t v156 = re::DynamicString::DynamicString((re::DynamicString *)(v169 + v172 + 40), (const re::DynamicString *)(v170 + v172 + 40));
                  *(void *)(v169 + v172 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *(void *)(v170 + v172 + 72);
                  v170 += 80;
                  v169 += 80;
                }
                while (v173 + 80 != v171);
              }
            }
            else
            {
              uint64_t v165 = *(void *)v286;
              std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::AssetPath *,re::AssetPath *,re::AssetPath *>(*(re::DynamicString **)(v161 + 32), (re::DynamicString *)(*(void *)(v161 + 32) + 80 * v163), *(uint64_t *)v286);
              uint64_t v166 = 80 * v164 - 80 * v163;
              unint64_t v167 = (re::DynamicString *)(v165 + 80 * v163 + 40);
              do
              {
                re::DynamicString::deinit(v167);
                re::DynamicString::deinit((re::DynamicString *)((char *)v167 - 32));
                unint64_t v167 = (re::DynamicString *)((char *)v167 + 80);
                v166 -= 80;
              }
              while (v166);
            }
            buf[1].n128_u64[0] = v163;
            uint64_t v8 = (void *)(v3 + 1464);
            int v158 = v261;
            v157 = v263;
            unint64_t v160 = v265;
          }
          *(_OWORD *)&v286[8] = *(_OWORD *)(v161 + 40);
          *(_OWORD *)&v286[24] = *(_OWORD *)(v161 + 56);
          *(_OWORD *)&v286[40] = *(_OWORD *)(v161 + 72);
          long long v287 = *(_OWORD *)(v161 + 88);
          v174 = *(uint64_t **)&v286[8];
          uint64_t v175 = re::MeshAsset::assetType(v156);
          v176 = v174;
          do
          {
            long long v177 = v176;
            if (v176 == v175) {
              break;
            }
            v176 = (uint64_t *)v176[2];
          }
          while (v176);
          uint64_t v178 = *((void *)&v287 + 1);
          BOOL v179 = v177 == v175;
          if (v177 == v175) {
            uint64_t v180 = *((void *)&v287 + 1);
          }
          else {
            uint64_t v180 = 0;
          }
          v160 += v180;
          if (v179) {
            v157 = (re::AssetHandle *)((char *)v157 + 1);
          }
          v181 = re::TextureAsset::assetType((re::TextureAsset *)v175);
          while (1)
          {
            v182 = v174;
            if (v174 == v181) {
              break;
            }
            v174 = (uint64_t *)v174[2];
            if (!v174)
            {
              uint64_t v178 = 0;
              break;
            }
          }
          if (v182 == v181) {
            ++v159;
          }
          int v158 = (re::AssetHandle *)((char *)v158 + v178);
          uint64_t v156 = (re::MeshAsset *)re::DynamicArray<re::AssetPath>::deinit((uint64_t)buf);
          v161 += 104;
        }
        while (v161 != v260);
      }
      else
      {
        unint64_t v160 = 0;
        unint64_t v159 = 0;
        int v158 = 0;
        v157 = 0;
      }
      v264 = v157;
      unint64_t v266 = v160;
      os_unfair_lock_lock(lock);
      unint64_t v11 = *(unsigned int *)(v3 + 104);
      if (v11)
      {
        uint64_t v183 = 0;
        v184 = (int *)(*(void *)(v3 + 88) + 8);
        while (1)
        {
          int v185 = *v184;
          v184 += 14;
          if (v185 < 0) {
            break;
          }
          if (v11 == ++v183)
          {
            LODWORD(v183) = *(_DWORD *)(v3 + 104);
            break;
          }
        }
      }
      else
      {
        LODWORD(v183) = 0;
      }
      if (v11 == v183)
      {
        unint64_t v186 = 0;
        unint64_t v187 = 0;
        v262 = 0;
      }
      else
      {
        unint64_t v186 = 0;
        unint64_t v187 = 0;
        v262 = 0;
        uint64_t v188 = v183;
        uint64_t v189 = *(void *)(v3 + 88);
        do
        {
          uint64_t v190 = *(void *)(v189 + 56 * v188 + 48);
          if (v190) {
            id v191 = (id)(v190 + 8);
          }
          unsigned int v192 = atomic_load((unsigned int *)(v190 + 704));
          v193 = (unint64_t *)v295;
          switch(v192)
          {
            case 0u:
              goto LABEL_370;
            case 1u:
              v193 = (unint64_t *)v292;
              goto LABEL_370;
            case 2u:
              ++v187;
              v262 = (re::AssetHandle *)((char *)v262 + *(void *)(v190 + 648));
              break;
            case 3u:
              v193 = &v278;
LABEL_370:
              ++*v193;
              break;
            default:
              break;
          }
          ++v186;

          uint64_t v189 = *(void *)(v3 + 88);
          if (*(_DWORD *)(v3 + 104) <= (v183 + 1)) {
            int v194 = v183 + 1;
          }
          else {
            int v194 = *(_DWORD *)(v3 + 104);
          }
          while (1)
          {
            uint64_t v188 = (v183 + 1);
            if (v194 - 1 == v183) {
              break;
            }
            LODWORD(v183) = v183 + 1;
            int v195 = v188;
            if ((*(_DWORD *)(v189 + 56 * v188 + 8) & 0x80000000) != 0) {
              goto LABEL_378;
            }
          }
          int v195 = v194;
LABEL_378:
          LODWORD(v183) = v195;
        }
        while (v11 != v195);
      }
      os_unfair_lock_unlock(lock);
      uint64_t v197 = re::ProfilerConfig::isStatisticCollectionEnabled(v196);
      if (v197)
      {
        uint64_t v197 = re::profilerThreadContext((re *)v197);
        v198 = *(int64x2_t **)(v197 + 152);
        if (v198)
        {
          unint64_t v199 = *(void *)v295;
          unint64_t v200 = v198[220].u64[0];
          if (v200 >= *(void *)v295) {
            unint64_t v200 = *(void *)v295;
          }
          v198[220].i64[0] = v200;
          unint64_t v201 = v198[220].u64[1];
          if (v201 <= v199) {
            unint64_t v201 = v199;
          }
          v198[220].i64[1] = v201;
          int64x2_t v202 = vdupq_n_s64(1uLL);
          v202.i64[0] = v199;
          v198[221] = vaddq_s64(v198[221], v202);
          *(unsigned char *)(v197 + 184) = 0;
        }
      }
      uint64_t v203 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v197);
      if (v203)
      {
        uint64_t v203 = re::profilerThreadContext((re *)v203);
        v204 = *(int64x2_t **)(v203 + 152);
        if (v204)
        {
          unint64_t v205 = *(void *)v292;
          unint64_t v206 = v204[224].u64[0];
          if (v206 >= *(void *)v292) {
            unint64_t v206 = *(void *)v292;
          }
          v204[224].i64[0] = v206;
          unint64_t v207 = v204[224].u64[1];
          if (v207 <= v205) {
            unint64_t v207 = v205;
          }
          v204[224].i64[1] = v207;
          int64x2_t v208 = vdupq_n_s64(1uLL);
          v208.i64[0] = v205;
          v204[225] = vaddq_s64(v204[225], v208);
          *(unsigned char *)(v203 + 184) = 0;
        }
      }
      uint64_t v209 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v203);
      if (v209)
      {
        uint64_t v209 = re::profilerThreadContext((re *)v209);
        v210 = *(int64x2_t **)(v209 + 152);
        if (v210)
        {
          unint64_t v211 = v210[228].u64[0];
          if (v211 >= v187) {
            unint64_t v211 = v187;
          }
          v210[228].i64[0] = v211;
          unint64_t v212 = v210[228].u64[1];
          if (v212 <= v187) {
            unint64_t v212 = v187;
          }
          v210[228].i64[1] = v212;
          int64x2_t v213 = vdupq_n_s64(1uLL);
          v213.i64[0] = v187;
          v210[229] = vaddq_s64(v210[229], v213);
          *(unsigned char *)(v209 + 184) = 0;
        }
      }
      uint64_t v214 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v209);
      if (v214)
      {
        uint64_t v214 = re::profilerThreadContext((re *)v214);
        v215 = *(int64x2_t **)(v214 + 152);
        if (v215)
        {
          unint64_t v216 = v278;
          unint64_t v217 = v215[232].u64[0];
          if (v217 >= v278) {
            unint64_t v217 = v278;
          }
          v215[232].i64[0] = v217;
          unint64_t v218 = v215[232].u64[1];
          if (v218 <= v216) {
            unint64_t v218 = v216;
          }
          v215[232].i64[1] = v218;
          int64x2_t v219 = vdupq_n_s64(1uLL);
          v219.i64[0] = v216;
          v215[233] = vaddq_s64(v215[233], v219);
          *(unsigned char *)(v214 + 184) = 0;
        }
      }
      uint64_t v220 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v214);
      v115 = (os_unfair_lock_s *)(v3 + 64);
      dispatch_time_t v117 = v268;
      if (v220)
      {
        uint64_t v220 = re::profilerThreadContext((re *)v220);
        v221 = *(int64x2_t **)(v220 + 152);
        if (v221)
        {
          unint64_t v222 = v221[236].u64[0];
          if (v222 >= v186) {
            unint64_t v222 = v186;
          }
          v221[236].i64[0] = v222;
          unint64_t v223 = v221[236].u64[1];
          if (v223 <= v186) {
            unint64_t v223 = v186;
          }
          v221[236].i64[1] = v223;
          int64x2_t v224 = vdupq_n_s64(1uLL);
          v224.i64[0] = v186;
          v221[237] = vaddq_s64(v221[237], v224);
          *(unsigned char *)(v220 + 184) = 0;
        }
      }
      uint64_t v225 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v220);
      if (v225)
      {
        uint64_t v225 = re::profilerThreadContext((re *)v225);
        v226 = *(int64x2_t **)(v225 + 152);
        if (v226)
        {
          v227 = (re::AssetHandle *)v226[240].i64[0];
          if (v227 >= v262) {
            v227 = v262;
          }
          v226[240].i64[0] = (uint64_t)v227;
          v228 = (re::AssetHandle *)v226[240].i64[1];
          if (v228 <= v262) {
            v228 = v262;
          }
          v226[240].i64[1] = (uint64_t)v228;
          int64x2_t v229 = vdupq_n_s64(1uLL);
          v229.i64[0] = (uint64_t)v262;
          v226[241] = vaddq_s64(v226[241], v229);
          *(unsigned char *)(v225 + 184) = 0;
        }
      }
      uint64_t v230 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v225);
      if (v230)
      {
        uint64_t v230 = re::profilerThreadContext((re *)v230);
        v231 = *(int64x2_t **)(v230 + 152);
        if (v231)
        {
          v232 = (re::AssetHandle *)v231[252].i64[0];
          if (v232 >= v264) {
            v232 = v264;
          }
          v231[252].i64[0] = (uint64_t)v232;
          v233 = (re::AssetHandle *)v231[252].i64[1];
          if (v233 <= v264) {
            v233 = v264;
          }
          v231[252].i64[1] = (uint64_t)v233;
          int64x2_t v234 = vdupq_n_s64(1uLL);
          v234.i64[0] = (uint64_t)v264;
          v231[253] = vaddq_s64(v231[253], v234);
          *(unsigned char *)(v230 + 184) = 0;
        }
      }
      uint64_t v235 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v230);
      if (v235)
      {
        uint64_t v235 = re::profilerThreadContext((re *)v235);
        v236 = *(int64x2_t **)(v235 + 152);
        if (v236)
        {
          unint64_t v237 = v236[256].u64[0];
          if (v237 >= v266) {
            unint64_t v237 = v266;
          }
          v236[256].i64[0] = v237;
          unint64_t v238 = v236[256].u64[1];
          if (v238 <= v266) {
            unint64_t v238 = v266;
          }
          v236[256].i64[1] = v238;
          int64x2_t v239 = vdupq_n_s64(1uLL);
          v239.i64[0] = v266;
          v236[257] = vaddq_s64(v236[257], v239);
          *(unsigned char *)(v235 + 184) = 0;
        }
      }
      uint64_t v240 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v235);
      if (v240)
      {
        uint64_t v240 = re::profilerThreadContext((re *)v240);
        v241 = *(int64x2_t **)(v240 + 152);
        if (v241)
        {
          unint64_t v242 = v241[260].u64[0];
          if (v242 >= v159) {
            unint64_t v242 = v159;
          }
          v241[260].i64[0] = v242;
          unint64_t v243 = v241[260].u64[1];
          if (v243 <= v159) {
            unint64_t v243 = v159;
          }
          v241[260].i64[1] = v243;
          int64x2_t v244 = vdupq_n_s64(1uLL);
          v244.i64[0] = v159;
          v241[261] = vaddq_s64(v241[261], v244);
          *(unsigned char *)(v240 + 184) = 0;
        }
      }
      v245 = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v240);
      if (v245)
      {
        uint64_t v246 = re::profilerThreadContext(v245);
        v247 = *(int64x2_t **)(v246 + 152);
        if (v247)
        {
          unint64_t v248 = v247[264].u64[0];
          if (v248 >= (unint64_t)v158) {
            unint64_t v248 = (unint64_t)v158;
          }
          v247[264].i64[0] = v248;
          unint64_t v249 = v247[264].u64[1];
          if (v249 <= (unint64_t)v158) {
            unint64_t v249 = (unint64_t)v158;
          }
          v247[264].i64[1] = v249;
          int64x2_t v250 = vdupq_n_s64(1uLL);
          v250.i64[0] = (uint64_t)v158;
          v247[265] = vaddq_s64(v247[265], v250);
          *(unsigned char *)(v246 + 184) = 0;
        }
      }
      uint64_t v251 = *(void *)v291;
      if (*(void *)v291 && *(void *)&v291[8])
      {
        uint64_t v252 = 0;
        uint64_t v253 = *(void *)&v291[16];
        uint64_t v254 = 104 * *(void *)&v291[8];
        do
        {
          re::DynamicArray<re::AssetPath>::deinit(v253 + v252);
          v252 += 104;
        }
        while (v254 != v252);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v251 + 40))(v251, v253);
      }
    }
  }
  else
  {
    re::ProfilerConfig::isStatisticCollectionEnabled(v121);
  }
  unsigned __int8 v123 = atomic_load((unsigned __int8 *)(v3 + 1345));
  if ((v123 & 1) == 0 && !*(unsigned char *)(v3 + 1346)) {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v3 + 520));
  }
  if (!*(void *)(v3 + 1144))
  {
    re::NetworkActionQueue::readActions((re::NetworkActionQueue *)(v3 + 704), (uint64_t)buf);
    if (buf[1].n128_u64[0])
    {
      uint64_t v143 = *re::assetsLogObjects(v142);
      if (os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v291 = 0;
        _os_log_impl(&dword_233120000, v143, OS_LOG_TYPE_DEFAULT, "Found queued network actions when NetworkAssetService does not exist!, this can occur during AssetManager::deinit()", v291, 2u);
      }
    }
    v141 = buf;
    goto LABEL_291;
  }
  re::NetworkActionQueue::readActions((re::NetworkActionQueue *)(v3 + 704), (uint64_t)v291);
  unint64_t v278 = 0;
  unint64_t v279 = 0;
  uint64_t v280 = 0;
  uint64_t v281 = 0;
  unint64_t v282 = 0;
  uint64_t v283 = 0;
  uint64_t v124 = *(void *)&v291[16];
  buf[0].n128_u8[0] = 0;
  uint64_t v127 = *(void *)&v291[16];
  buf[0].n128_u8[0] = 0;
  unint64_t v129 = *(void *)&v291[16];
  *(void *)&v297[2] = 0;
  memset(&v295[8], 0, 20);
  re::DynamicArray<re::AssetHandle>::setCapacity(v295, v129);
  ++*(_DWORD *)&v295[24];
  os_unfair_lock_lock(v115);
  if (!*(void *)&v291[16]) {
    goto LABEL_271;
  }
  uint64_t v130 = (_DWORD *)(*(void *)&v291[32] + 160);
  uint64_t v131 = 168 * *(void *)&v291[16];
  do
  {
    if (*v130 == 4 || *v130 == 1)
    {
      memset(buf, 0, 24);
      re::DynamicArray<re::AssetHandle>::add(v295, (uint64_t *)buf);
      v133 = buf;
LABEL_260:
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v133);
      goto LABEL_261;
    }
    re::AssetManager::lookupExistingAsset_assetTablesLocked((re::internal::AssetTypeRegistry **)v3, *((void *)v130 - 1), buf);
    if (buf[0].n128_u8[0])
    {
      re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)v295, (re::AssetHandle *)&buf[0].n128_i8[8]);
    }
    else
    {
      memset(v292, 0, 24);
      re::DynamicArray<re::AssetHandle>::add(v295, (uint64_t *)v292);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v292);
    }
    if (buf[0].n128_u8[0])
    {
      v133 = (__n128 *)&buf[0].n128_i8[8];
      goto LABEL_260;
    }
LABEL_261:
    v130 += 42;
    v131 -= 168;
  }
  while (v131);
  unint64_t v134 = *(void *)&v291[16];
  if (*(void *)&v291[16])
  {
    uint64_t v135 = 0;
    uint64_t v136 = 0;
    long long v23 = 0;
    unint64_t v11 = 1;
    while (1)
    {
      unint64_t os_unfair_lock_opaque = *(void *)&v295[16];
      if (*(void *)&v295[16] <= (unint64_t)v23) {
        break;
      }
      if ((*(_DWORD *)(*(void *)&v291[32] + v135 + 160) - 1) >= 7)
      {
        char v137 = ((uint64_t (*)(uint64_t))re::AssetManager::performQueuedSyncAction)(v3);
        unint64_t os_unfair_lock_opaque = v279;
        if (v279 <= (unint64_t)v23) {
          goto LABEL_461;
        }
        *((unsigned char *)&v23->_os_unfair_lock_opaque + v280) = v137;
        unint64_t os_unfair_lock_opaque = v282;
        if (v282 <= (unint64_t)v23) {
          goto LABEL_462;
        }
        *((unsigned char *)&v23->_os_unfair_lock_opaque + v283) = 1;
        if (dispatch_time(0, 0) >= v117) {
          goto LABEL_271;
        }
        unint64_t v134 = *(void *)&v291[16];
      }
      long long v23 = (os_unfair_lock_s *)((char *)v23 + 1);
      v136 += 24;
      v135 += 168;
      if ((unint64_t)v23 >= v134) {
        goto LABEL_271;
      }
    }
LABEL_458:
    uint64_t v284 = 0;
    memset(v286, 0, 48);
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v292 = 136315906;
    *(void *)&v292[4] = "operator[]";
    *(_WORD *)&v292[12] = 1024;
    *(_DWORD *)&v292[14] = 789;
    *(_WORD *)&v292[18] = 2048;
    *(void *)&v292[20] = v23;
    __int16 v293 = 2048;
    unint64_t v294 = os_unfair_lock_opaque;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_459:
    uint64_t v284 = 0;
    memset(v286, 0, 48);
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v292 = 136315906;
    *(void *)&v292[4] = "operator[]";
    *(_WORD *)&v292[12] = 1024;
    *(_DWORD *)&v292[14] = 468;
    *(_WORD *)&v292[18] = 2048;
    *(void *)&v292[20] = v23;
    __int16 v293 = 2048;
    unint64_t v294 = os_unfair_lock_opaque;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_460:
    uint64_t v284 = 0;
    memset(v286, 0, 48);
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v292 = 136315906;
    *(void *)&v292[4] = "operator[]";
    *(_WORD *)&v292[12] = 1024;
    *(_DWORD *)&v292[14] = 468;
    *(_WORD *)&v292[18] = 2048;
    *(void *)&v292[20] = v23;
    __int16 v293 = 2048;
    unint64_t v294 = os_unfair_lock_opaque;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_461:
    uint64_t v284 = 0;
    memset(v286, 0, 48);
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v292 = 136315906;
    *(void *)&v292[4] = "operator[]";
    *(_WORD *)&v292[12] = 1024;
    *(_DWORD *)&v292[14] = 468;
    *(_WORD *)&v292[18] = 2048;
    *(void *)&v292[20] = v23;
    __int16 v293 = 2048;
    unint64_t v294 = os_unfair_lock_opaque;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_462:
    uint64_t v284 = 0;
    memset(v286, 0, 48);
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v292 = 136315906;
    *(void *)&v292[4] = "operator[]";
    *(_WORD *)&v292[12] = 1024;
    *(_DWORD *)&v292[14] = 468;
    *(_WORD *)&v292[18] = 2048;
    *(void *)&v292[20] = v23;
    __int16 v293 = 2048;
    unint64_t v294 = os_unfair_lock_opaque;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_463:
    re::internal::assertLog((re::internal *)4, v37, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "processLoadItem", 3109);
    _os_crash();
    __break(1u);
LABEL_464:
    re::internal::assertLog((re::internal *)4, v48, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "processLoadItem", 3088);
    _os_crash();
    __break(1u);
  }
LABEL_271:
  os_unfair_lock_unlock(v115);
  unint64_t v138 = *(void *)&v291[16];
  if (*(void *)&v291[16])
  {
    uint64_t v139 = 0;
    unint64_t v27 = 0;
    long long v23 = 0;
    while (1)
    {
      unint64_t os_unfair_lock_opaque = *(void *)&v295[16];
      if (*(void *)&v295[16] <= (unint64_t)v23) {
        break;
      }
      if ((*(_DWORD *)(*(void *)&v291[32] + v139 + 160) - 1) <= 6)
      {
        char v140 = ((uint64_t (*)(uint64_t))re::AssetManager::performQueuedSyncAction)(v3);
        unint64_t os_unfair_lock_opaque = v279;
        if (v279 <= (unint64_t)v23) {
          goto LABEL_459;
        }
        *((unsigned char *)&v23->_os_unfair_lock_opaque + v280) = v140;
        unint64_t os_unfair_lock_opaque = v282;
        if (v282 <= (unint64_t)v23) {
          goto LABEL_460;
        }
        *((unsigned char *)&v23->_os_unfair_lock_opaque + v283) = 1;
        if (dispatch_time(0, 0) >= v117) {
          goto LABEL_280;
        }
        unint64_t v138 = *(void *)&v291[16];
      }
      long long v23 = (os_unfair_lock_s *)((char *)v23 + 1);
      v27 += 24;
      v139 += 168;
      if ((unint64_t)v23 >= v138) {
        goto LABEL_280;
      }
    }
    uint64_t v284 = 0;
    memset(v286, 0, 48);
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v292 = 136315906;
    *(void *)&v292[4] = "operator[]";
    *(_WORD *)&v292[12] = 1024;
    *(_DWORD *)&v292[14] = 789;
    *(_WORD *)&v292[18] = 2048;
    *(void *)&v292[20] = v23;
    __int16 v293 = 2048;
    unint64_t v294 = os_unfair_lock_opaque;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_455:
    *(void *)v295 = 0;
    memset(v286, 0, 48);
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v291 = 136315906;
    *(void *)&v291[4] = "removeAt";
    *(_WORD *)&v291[12] = 1024;
    *(_DWORD *)&v291[14] = 931;
    *(_WORD *)&v291[18] = 2048;
    *(void *)&v291[20] = os_unfair_lock_opaque;
    *(_WORD *)&v291[28] = 2048;
    *(void *)&v291[30] = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_456:
    *(void *)v292 = 0;
    memset(v286, 0, 48);
    memset(buf, 0, sizeof(buf));
    unint64_t v86 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v295 = 136315906;
    *(void *)&v295[4] = "removeAt";
    *(_WORD *)&v295[12] = 1024;
    *(_DWORD *)&v295[14] = 931;
    *(_WORD *)&v295[18] = 2048;
    *(void *)&v295[20] = os_unfair_lock_opaque;
    __int16 v296 = 2048;
    *(void *)v297 = v27;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_457:
    unint64_t v278 = 0;
    memset(v286, 0, 48);
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v292 = 136315906;
    *(void *)&v292[4] = "operator[]";
    *(_WORD *)&v292[12] = 1024;
    *(_DWORD *)&v292[14] = 789;
    *(_WORD *)&v292[18] = 2048;
    *(void *)&v292[20] = v27;
    __int16 v293 = 2048;
    unint64_t v294 = v86;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_458;
  }
LABEL_280:
  re::NetworkActionQueue::removeActions(v3 + 704, (uint64_t)&v278, (uint64_t)&v281);
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)v295);
  if (v281 && v282) {
    (*(void (**)(void))(*(void *)v281 + 40))();
  }
  uint64_t v8 = (void *)(v3 + 1464);
  if (v278 && v279) {
    (*(void (**)(void))(*(void *)v278 + 40))();
  }
  v141 = (__n128 *)v291;
LABEL_291:
  re::DynamicArray<re::NetworkActionQueue::Action>::deinit((uint64_t)v141);
  *(void *)v286 = 0;
  memset(buf, 0, 28);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 960));
  re::DynamicArray<unsigned long long>::operator=((uint64_t)buf, (uint64_t *)(v3 + 968));
  *(void *)(v3 + 984) = 0;
  ++*(_DWORD *)(v3 + 992);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 960));
  uint64_t v144 = *(void *)(v3 + 1528);
  if (v144)
  {
    uint64_t v145 = *(void *)(v3 + 1544);
    uint64_t v146 = 40 * v144;
    do
    {
      *(void *)&v291[24] = *(void *)(v145 + 24);
      *(void *)&v291[32] = 0;
      re::FunctionBase<24ul,void ()(re::DynamicArray<unsigned long long>)>::operator=<24ul>((uint64_t)v291, v145);
      re::DynamicArray<char const*>::DynamicArray((uint64_t)v295, (uint64_t *)buf);
      (*(void (**)(void, unsigned char *))(**(void **)&v291[32] + 16))(*(void *)&v291[32], v295);
      if (*(void *)v295)
      {
        if (*(void *)&v297[2]) {
          (*(void (**)(void))(**(void **)v295 + 40))();
        }
        *(void *)&v297[2] = 0;
        memset(v295, 0, 24);
        ++*(_DWORD *)&v295[24];
      }
      re::FunctionBase<24ul,void ()(re::DynamicArray<unsigned long long>)>::destroyCallable((uint64_t)v291);
      v145 += 40;
      v146 -= 40;
    }
    while (v146);
  }
  if (buf[0].n128_u64[0] && *(void *)v286) {
    (*(void (**)(void))(*(void *)buf[0].n128_u64[0] + 40))();
  }
  re::AssetManager::updateScheduler((re::AssetManager *)v3);
  uint64_t v147 = *(void *)(v3 + 1144);
  if (v147) {
    (*(void (**)(uint64_t))(*(void *)v147 + 200))(v147);
  }
  if (dispatch_time(0, 0) >= v117)
  {
    if (re::internal::enableSignposts(0, 0)) {
      kdebug_trace();
    }
    ++*(void *)(v3 + 1408);
  }
  else
  {
    long long v148 = v273;
    *(_OWORD *)(v3 + 143re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v272;
    *(_OWORD *)(v3 + 144re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v148;
    if (*v8)
    {
      if ((void)v274)
      {
        re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::copy((uint64_t)v8, (uint64_t)&v274);
        ++*(_DWORD *)(v3 + 1504);
      }
      else
      {
        re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::clear((uint64_t)v8);
      }
    }
    else if ((void)v274)
    {
      if (HIDWORD(v275) <= 3) {
        signed int v154 = 3;
      }
      else {
        signed int v154 = HIDWORD(v275);
      }
      re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::init((uint64_t)v8, v274, v154);
      re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::copy((uint64_t)v8, (uint64_t)&v274);
    }
  }
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)&v274);
  if (v256)
  {
    if (*(void *)(v256 + 152))
    {
      uint64_t v149 = mach_absolute_time();
      v150 = *(int64x2_t **)(v256 + 152);
      if (v150)
      {
        uint64_t v151 = v150[88].u64[0];
        if (v151 >= v149 - v255) {
          uint64_t v151 = v149 - v255;
        }
        v150[88].i64[0] = v151;
        uint64_t v152 = v150[88].u64[1];
        if (v152 <= v149 - v255) {
          uint64_t v152 = v149 - v255;
        }
        v150[88].i64[1] = v152;
        int64x2_t v153 = vdupq_n_s64(1uLL);
        v153.i64[0] = v149 - v255;
        v150[89] = vaddq_s64(v150[89], v153);
        *(unsigned char *)(v256 + 184) = 0;
      }
    }
  }
}

uint64_t std::__function::__func<re::AssetManager::update(BOOL,BOOL)::$_0,std::allocator<re::AssetManager::update(BOOL,BOOL)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<re::AssetManager::update(BOOL,BOOL)::$_0,std::allocator<re::AssetManager::update(BOOL,BOOL)::$_0>,void ()(void)>::target_type()
{
}

void re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = (uint64_t *)(*(void *)(a2 + 16) + v6);
      if ((v8[1] & 0x80000000) != 0)
      {
        unint64_t v9 = *v8;
        unint64_t v10 = *(unsigned int *)(a1 + 24);
        unint64_t v11 = *v8 % v10;
        uint64_t v12 = *(unsigned int *)(a1 + 36);
        if (v12 == 0x7FFFFFFF)
        {
          uint64_t v12 = *(unsigned int *)(a1 + 32);
          int v13 = v12;
          if (v12 == v10)
          {
            re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
            unint64_t v11 = v9 % *(unsigned int *)(a1 + 24);
            int v13 = *(_DWORD *)(a1 + 32);
          }
          *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v13 + 1;
          uint64_t v14 = *(void *)(a1 + 16);
          int v15 = *(_DWORD *)(v14 + 40 * v12 + 8);
        }
        else
        {
          uint64_t v14 = *(void *)(a1 + 16);
          int v15 = *(_DWORD *)(v14 + 40 * v12 + 8);
          *(_DWORD *)(a1 + 36) = v15 & 0x7FFFFFFF;
        }
        *(_DWORD *)(v14 + 40 * v12 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v15 | 0x80000000;
        *(_DWORD *)(*(void *)(a1 + 16) + 40 * v12 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 40 * v12 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v11);
        *(void *)(*(void *)(a1 + 16) + 40 * v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v9;
        *(void *)(*(void *)(a1 + 16) + 40 * v12 + 16) = v8[2];
        *(_OWORD *)(*(void *)(a1 + 16) + 40 * v12 + 24) = *(_OWORD *)(v8 + 3);
        *(_DWORD *)(*(void *)(a1 + 8) + 4 * v11) = v12;
        ++*(_DWORD *)(a1 + 28);
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 40;
    }
  }
}

void re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)int v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      uint64_t v7 = *(void *)(a1 + 16);
      *(void *)&v13[16] = v7;
      *(void *)(a1 + 16) = v6;
      long long v9 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        uint64_t v11 = v7 + 16;
        do
        {
          if ((*(_DWORD *)(v11 - 8) & 0x80000000) != 0) {
            re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addAsMove(a1, *(void *)(v11 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v11 - 16), (void *)v11, (__n128 *)(v11 + 8));
          }
          v11 += 40;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

__n128 re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, __n128 *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 40 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 40 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 40 * v9 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 40 * v9 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 40 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 40 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 40 * v9 + 16) = *a4;
  __n128 result = *a5;
  *(__n128 *)(*(void *)(a1 + 16) + 40 * v9 + 24) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * are::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

void *re::DynamicArray<re::AssetLoadDescriptor>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::AssetLoadDescriptor>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::AssetLoadDescriptor>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

unsigned char *re::Result<re::AssetPath,re::DetailedError>::~Result(unsigned char *a1)
{
  if (*a1)
  {
    re::DynamicString::deinit((re::DynamicString *)(a1 + 48));
    unint64_t v2 = (re::DynamicString *)(a1 + 16);
  }
  else
  {
    unint64_t v2 = (re::DynamicString *)(a1 + 24);
  }
  re::DynamicString::deinit(v2);
  return a1;
}

unsigned char *re::Result<re::AssetLoadDescriptor,re::DynamicString>::~Result(unsigned char *a1)
{
  if (*a1)
  {
    re::DynamicString::deinit((re::DynamicString *)(a1 + 120));
    re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 80));
    re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 40));
  }
  re::DynamicString::deinit((re::DynamicString *)(a1 + 8));
  return a1;
}

void re::HashTable<re::DynamicString,re::SharedPtr<re::internal::AssetEntry>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(void *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::SharedPtr<re::internal::AssetEntry>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v22, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v22;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)uint64_t v22 = v5;
      *(void *)&v22[16] = v6;
      *(_OWORD *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7;
      long long v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        int v13 = (void *)(v6 + 48);
        do
        {
          if ((*(_DWORD *)(v13 - 5) & 0x80000000) != 0)
          {
            unint64_t v14 = *(v13 - 6);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<re::DynamicString,re::SharedPtr<re::internal::AssetEntry>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 56 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 56 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 56 * v17 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 56 * v17 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 56 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 56 * v17) = v14;
            re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 56 * v17 + 16), (const re::DynamicString *)(v13 - 4));
            *(void *)(*(void *)(a1 + 16) + 56 * v17 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *v13;
            *int v13 = 0;
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v11;
          }
          v13 += 7;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::DynamicString,re::SharedPtr<re::internal::AssetEntry>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2) {
      signed int v21 = a2;
    }
    else {
      signed int v21 = 3;
    }
  }
}

void re::HashTable<re::DynamicString,re::SharedPtr<re::internal::AssetEntry>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 56 * v10, 16);
  if (v12)
  {
    unint64_t v14 = v12;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_245, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void std::__function::__func<re::AssetManager::processRegisteringEntries(re::AssetManager::UpdateDeadline)::$_2,std::allocator<re::AssetManager::processRegisteringEntries(re::AssetManager::UpdateDeadline)::$_2>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<re::AssetManager::processRegisteringEntries(re::AssetManager::UpdateDeadline)::$_2,std::allocator<re::AssetManager::processRegisteringEntries(re::AssetManager::UpdateDeadline)::$_2>,void ()(void)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26E6C9E58;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = result;
  return result;
}

__n128 std::__function::__func<re::AssetManager::processRegisteringEntries(re::AssetManager::UpdateDeadline)::$_2,std::allocator<re::AssetManager::processRegisteringEntries(re::AssetManager::UpdateDeadline)::$_2>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6C9E58;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = result;
  return result;
}

uint64_t std::__function::__func<re::AssetManager::processRegisteringEntries(re::AssetManager::UpdateDeadline)::$_2,std::allocator<re::AssetManager::processRegisteringEntries(re::AssetManager::UpdateDeadline)::$_2>,void ()(void)>::operator()(uint64_t a1)
{
  return re::AssetManager::processAssetRegistration_entryStateLocked(*(re::AssetManager **)(a1 + 8), **(re::internal::AssetEntry ***)(a1 + 16));
}

uint64_t std::__function::__func<re::AssetManager::processRegisteringEntries(re::AssetManager::UpdateDeadline)::$_2,std::allocator<re::AssetManager::processRegisteringEntries(re::AssetManager::UpdateDeadline)::$_2>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::AssetManager::processRegisteringEntries(re::AssetManager::UpdateDeadline)::$_2,std::allocator<re::AssetManager::processRegisteringEntries(re::AssetManager::UpdateDeadline)::$_2>,void ()(void)>::target_type()
{
}

void *re::DynamicArray<re::Function<void ()(re::DynamicArray<unsigned long long>)>>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::Function<void ()(re::DynamicArray<unsigned long long>)>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::Function<void ()(re::DynamicArray<unsigned long long>)>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::Function<void ()(re::DynamicArray<unsigned long long>)>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 == a2) {
    return result;
  }
  uint64_t v5 = result;
  if (result[2] > a2) {
    return result;
  }
  __n128 result = (void *)*result;
  if (!*v5)
  {
    __n128 result = (void *)re::DynamicArray<re::Function<void ()(re::DynamicArray<unsigned long long>)>>::setCapacity(v5, a2);
    ++*((_DWORD *)v5 + 6);
    return result;
  }
  if (a2)
  {
    if (is_mul_ok(a2, 0x28uLL))
    {
      uint64_t v2 = 40 * a2;
      __n128 result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
      if (result)
      {
        unint64_t v7 = result;
        if (!v5[1]) {
          goto LABEL_27;
        }
        goto LABEL_11;
      }
    }
    else
    {
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
      _os_crash();
      __break(1u);
    }
    re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
    __n128 result = (void *)_os_crash();
    __break(1u);
    return result;
  }
  unint64_t v7 = 0;
  if (!v3) {
    goto LABEL_27;
  }
LABEL_11:
  uint64_t v8 = v5[4];
  uint64_t v9 = v5[2];
  if (!v9) {
    goto LABEL_26;
  }
  uint64_t v10 = 40 * v9;
  uint64_t v11 = (uint64_t)v7;
  do
  {
    *(void *)(v11 + 24) = *(void *)(v8 + 24);
    *(void *)(v11 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    if (v8 == v11) {
      goto LABEL_24;
    }
    re::FunctionBase<24ul,void ()(re::DynamicArray<unsigned long long>)>::destroyCallable(v11);
    uint64_t v12 = *(void *)(v8 + 32);
    if (*(void *)(v11 + 24) == *(void *)(v8 + 24))
    {
      uint64_t v13 = v8;
      if (v8 != v12)
      {
        *(void *)(v11 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v12;
        *(void *)(v8 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v13 = *(void *)(v8 + 32);
      if (!v12) {
        goto LABEL_24;
      }
    }
    unint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 40))(v13);
    uint64_t v15 = v11;
    if (v14 >= 0x19)
    {
      unint64_t v16 = v14;
      uint64_t v17 = *(void *)(v11 + 24);
      if (v17) {
        uint64_t v15 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v17 + 32))(v17, v16, 0);
      }
      else {
        uint64_t v15 = 0;
      }
    }
    *(void *)(v11 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v15;
    (*(void (**)(void))(**(void **)(v8 + 32) + 32))(*(void *)(v8 + 32));
    re::FunctionBase<24ul,void ()(re::DynamicArray<unsigned long long>)>::destroyCallable(v8);
LABEL_24:
    re::FunctionBase<24ul,void ()(re::DynamicArray<unsigned long long>)>::destroyCallable(v8);
    v8 += 40;
    v11 += 40;
    v10 -= 40;
  }
  while (v10);
  uint64_t v8 = v5[4];
LABEL_26:
  __n128 result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
LABEL_27:
  v5[4] = v7;
  v5[1] = a2;
  return result;
}

void re::details::release<re::ResourceRequest>(atomic_uint *a1)
{
  unsigned int add = atomic_fetch_add(a1 + 2, 0xFFFFFFFF);
  uint64_t v3 = (const void *)(add - 1);
  if (add - 1048578 <= 0xFFEFFFFE)
  {
    re::internal::refCountCheckFailHandler(0, a1, v3);
    if (v3) {
      return;
    }
  }
  else if (add != 1)
  {
    return;
  }
  unint64_t v4 = *(void (**)(atomic_uint *))(*(void *)a1 + 16);
  v4(a1);
}

void re::DynamicArray<re::AssetLoadDescriptor>::resize(_anonymous_namespace_ *a1, unint64_t a2)
{
  uint64_t v3 = a1;
  unint64_t v4 = *((void *)a1 + 2);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v9 = 144 * a2;
    unint64_t v10 = a2;
    do
    {
      uint64_t v11 = *((void *)v3 + 4) + v9;
      re::DynamicString::deinit((re::DynamicString *)(v11 + 112));
      re::DynamicArray<unsigned long>::deinit(v11 + 72);
      re::DynamicArray<unsigned long>::deinit(v11 + 32);
      re::DynamicString::deinit((re::DynamicString *)v11);
      ++v10;
      v9 += 144;
    }
    while (v10 < *((void *)v3 + 2));
  }
  else
  {
    if (*((void *)a1 + 1) < a2)
    {
      a1 = (_anonymous_namespace_ *)re::DynamicArray<re::AssetLoadDescriptor>::setCapacity(a1, a2);
      unint64_t v4 = *((void *)v3 + 2);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 144 * v4;
      do
      {
        uint64_t v7 = *((void *)v3 + 4) + v6;
        *(_OWORD *)uint64_t v7 = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        uint64_t v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)v7, 0);
        *(void *)(v7 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
        *(void *)(v7 + 40) = 0;
        *(_DWORD *)(v7 + 56) = 0;
        *(void *)(v7 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        *(_DWORD *)(v7 + 96) = 0;
        *(_OWORD *)(v7 + 104) = 0u;
        *(_OWORD *)(v7 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0u;
        *(void *)(v7 + 136) = 0;
        a1 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)(v7 + 112), 0);
        v6 += 144;
        --v5;
      }
      while (v5);
    }
  }
  *((void *)v3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = a2;
  ++*((_DWORD *)v3 + 6);
}

re::DynamicString *re::DynamicArray<re::AssetLoadDescriptor>::copy(re::DynamicString *this, re::DynamicString *a2, unint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = this;
    unint64_t v4 = *((void *)this + 2);
    if (v4 == -1)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (v4 >= a3)
    {
      this = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::AssetLoadDescriptor const*,re::AssetLoadDescriptor const*,re::AssetLoadDescriptor*>(a2, (re::DynamicString *)((char *)a2 + 144 * a3), *((void *)this + 4));
    }
    else
    {
      re::DynamicArray<re::AssetLoadDescriptor>::growCapacity(this, a3);
      uint64_t v7 = *((void *)v3 + 2);
      uint64_t v8 = (re::DynamicString *)((char *)a2 + 144 * v7);
      this = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::AssetLoadDescriptor const*,re::AssetLoadDescriptor const*,re::AssetLoadDescriptor*>(a2, v8, *((void *)v3 + 4));
      if (v7 != a3)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *((void *)v3 + 4) + 144 * *((void *)v3 + 2);
        do
        {
          re::DynamicString::DynamicString((re::DynamicString *)(v10 + v9), (re::DynamicString *)((char *)v8 + v9));
          re::DynamicArray<BOOL>::DynamicArray(v10 + v9 + 32, (uint64_t *)((char *)v8 + v9 + 32));
          re::DynamicArray<BOOL>::DynamicArray(v10 + v9 + 72, (uint64_t *)((char *)v8 + v9 + 72));
          this = re::DynamicString::DynamicString((re::DynamicString *)(v10 + v9 + 112), (re::DynamicString *)((char *)v8 + v9 + 112));
          v9 += 144;
        }
        while (-144 * v7 + 144 * a3 != v9);
      }
      *((void *)v3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = a3;
    }
    ++*((_DWORD *)v3 + 6);
  }
  return this;
}

re::DynamicString *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::AssetLoadDescriptor const*,re::AssetLoadDescriptor const*,re::AssetLoadDescriptor*>(re::DynamicString *result, re::DynamicString *a2, uint64_t a3)
{
  if (result != a2)
  {
    unint64_t v5 = result;
    uint64_t v6 = 0;
    do
    {
      re::DynamicString::operator=((re::DynamicString *)(a3 + v6), (re::DynamicString *)((char *)v5 + v6));
      re::DynamicArray<BOOL>::operator=(a3 + v6 + 32, (uint64_t *)((char *)v5 + v6 + 32));
      re::DynamicArray<BOOL>::operator=(a3 + v6 + 72, (uint64_t *)((char *)v5 + v6 + 72));
      __n128 result = re::DynamicString::operator=((re::DynamicString *)(a3 + v6 + 112), (re::DynamicString *)((char *)v5 + v6 + 112));
      v6 += 144;
    }
    while ((re::DynamicString *)((char *)v5 + v6) != a2);
  }
  return result;
}

uint64_t re::DynamicArray<re::NetworkActionQueue::Action>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 168 * v4;
        do
        {
          uint64_t v6 = *(unsigned int *)(v3 + 144);
          if (v6 != -1) {
            ((void (*)(char *, uint64_t))off_26E6C9EC8[v6])(&v7, v3);
          }
          *(_DWORD *)(v3 + 144) = -1;
          v3 += 168;
          v5 -= 168;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2re23AssetNetworkSharingModeENS8_9HashTableINS8_13DynamicStringEyNS8_4HashISB_EENS8_7EqualToISB_EELb1ELb0EEENS8_19AssetLoadDescriptorESB_EEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJS9_SG_SH_SB_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2re23AssetNetworkSharingModeENS8_9HashTableINS8_13DynamicStringEyNS8_4HashISB_EENS8_7EqualToISB_EELb1ELb0EEENS8_19AssetLoadDescriptorESB_EEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJS9_SG_SH_SB_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  re::DynamicString::deinit((re::DynamicString *)(a2 + 112));
  re::DynamicArray<unsigned long>::deinit(a2 + 72);
  re::DynamicArray<unsigned long>::deinit(a2 + 32);
  return re::DynamicString::deinit((re::DynamicString *)a2);
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2re23AssetNetworkSharingModeENS8_9HashTableINS8_13DynamicStringEyNS8_4HashISB_EENS8_7EqualToISB_EELb1ELb0EEENS8_19AssetLoadDescriptorESB_EEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJS9_SG_SH_SB_EEEEEEDcSL_DpT0_(int a1, re::DynamicString *this)
{
  return re::DynamicString::deinit(this);
}

void *re::FixedArray<BOOL>::init<BOOL>(void *result, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  re::DynamicString *result = a2;
  result[1] = a3;
  if (a3)
  {
    uint64_t v6 = result;
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, a3, 1);
    v6[2] = result;
    if (result)
    {
      uint64_t v8 = a3 - 1;
      if (a3 != 1)
      {
        do
        {
          *(unsigned char *)uint64_t result = *a4;
          uint64_t result = (void *)((char *)result + 1);
          --v8;
        }
        while (v8);
      }
      *(unsigned char *)uint64_t result = *a4;
    }
    else
    {
      re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      uint64_t result = (void *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

void re::HashTable<re::DynamicString,re::AssetHandle const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v21, 0, 36);
      *(void *)&v21[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::SharedPtr<re::internal::AssetEntry>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v21, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v21;
      uint64_t v6 = *(unint64_t **)(a1 + 16);
      long long v7 = *(_OWORD *)&v21[8];
      *(_OWORD *)signed int v21 = v5;
      *(void *)&v21[16] = v6;
      *(_OWORD *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7;
      long long v9 = *(_OWORD *)&v21[24];
      *(_OWORD *)&v21[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v21[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        do
        {
          if ((v6[1] & 0x80000000) != 0)
          {
            unint64_t v13 = *v6;
            unint64_t v14 = *(unsigned int *)(a1 + 24);
            unint64_t v15 = *v6 % v14;
            uint64_t v16 = *(unsigned int *)(a1 + 36);
            if (v16 == 0x7FFFFFFF)
            {
              uint64_t v16 = *(unsigned int *)(a1 + 32);
              int v17 = v16;
              if (v16 == v14)
              {
                re::HashTable<re::DynamicString,re::AssetHandle const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v15 = v13 % *(unsigned int *)(a1 + 24);
                int v17 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v17 + 1;
              uint64_t v18 = *(void *)(a1 + 16);
              int v19 = *(_DWORD *)(v18 + 56 * v16 + 8);
            }
            else
            {
              uint64_t v18 = *(void *)(a1 + 16);
              int v19 = *(_DWORD *)(v18 + 56 * v16 + 8);
              *(_DWORD *)(a1 + 36) = v19 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v18 + 56 * v16 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v19 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 56 * v16 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 56 * v16 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v15);
            *(void *)(*(void *)(a1 + 16) + 56 * v16) = v13;
            re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 56 * v16 + 16), (const re::DynamicString *)(v6 + 2));
            *(void *)(*(void *)(a1 + 16) + 56 * v16 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v6[6];
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v15) = v16;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v11;
          }
          v6 += 7;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v21);
    }
  }
  else
  {
    if (a2) {
      signed int v20 = a2;
    }
    else {
      signed int v20 = 3;
    }
  }
}

_anonymous_namespace_ *re::HashTable<re::internal::AssetLoadingRoot,re::DynamicString,re::internal::AssetLoadingRoot,re::internal::AssetLoadingRoot,true,false>::findEntry@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  re::DynamicString::setCapacity(&v20, 0);
  re::DynamicString::DynamicString((re::DynamicString *)v18, (const re::DynamicString *)(a2 + 2));
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v19, (uint64_t)v18);
  if (v18[0])
  {
    if (v18[1]) {
      (*(void (**)(void))(*(void *)v18[0] + 40))();
    }
    memset(v18, 0, sizeof(v18));
  }
  uint64_t result = (_anonymous_namespace_ *)v20;
  if (v20 && (v21 & 1) != 0) {
    uint64_t result = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*v20 + 40))();
  }
  int v8 = 0x7FFFFFFF;
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_23;
  }
  unint64_t v9 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_23:
    int v12 = 0x7FFFFFFF;
    goto LABEL_25;
  }
  unint64_t v16 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v17 = a3;
  uint64_t v11 = *(void *)(a1 + 16);
  int v8 = 0x7FFFFFFF;
  int v12 = 0x7FFFFFFF;
  do
  {
    uint64_t v13 = v10;
    uint64_t v14 = v11 + 88 * v10;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    re::DynamicString::setCapacity(&v20, 0);
    if (*(_DWORD *)(v14 + 16) == *a2)
    {
      BOOL v15 = re::DynamicString::operator==(v11 + 88 * v13 + 24, (uint64_t)(a2 + 2));
      uint64_t result = (_anonymous_namespace_ *)v20;
      if (v20 && (v21 & 1) != 0) {
        uint64_t result = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*v20 + 40))();
      }
      if (v15)
      {
        int v8 = v13;
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t result = (_anonymous_namespace_ *)v20;
      if (v20 && (v21 & 1) != 0) {
        uint64_t result = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*v20 + 40))();
      }
    }
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v10 = *(_DWORD *)(v11 + 88 * v13 + 8) & 0x7FFFFFFF;
    int v12 = v13;
  }
  while (v10 != 0x7FFFFFFF);
  int v12 = v13;
LABEL_24:
  a3 = v17;
  LODWORD(v9) = v16;
LABEL_25:
  *(void *)a3 = v6;
  *(_DWORD *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v9;
  *(_DWORD *)(a3 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v8;
  *(_DWORD *)(a3 + 16) = v12;
  return result;
}

void *std::__function::__func<re::AssetManager::tryReuseExistingAsset_locked(re::internal::AssetEntry &,re::DynamicArray<re::AssetLoadDescriptor> const&,BOOL)::$_2,std::allocator<re::AssetManager::tryReuseExistingAsset_locked(re::internal::AssetEntry &,re::DynamicArray<re::AssetLoadDescriptor> const&,BOOL)::$_2>,void ()(BOOL)>::~__func(void *a1)
{
  *a1 = &unk_26E6C9EF8;
  re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)(a1 + 7));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 4));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 1));
  return a1;
}

void std::__function::__func<re::AssetManager::tryReuseExistingAsset_locked(re::internal::AssetEntry &,re::DynamicArray<re::AssetLoadDescriptor> const&,BOOL)::$_2,std::allocator<re::AssetManager::tryReuseExistingAsset_locked(re::internal::AssetEntry &,re::DynamicArray<re::AssetLoadDescriptor> const&,BOOL)::$_2>,void ()(BOOL)>::~__func(void *a1)
{
  *a1 = &unk_26E6C9EF8;
  re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)(a1 + 7));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 4));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 1));
  JUMPOUT(0x237DBCBD0);
}

void *std::__function::__func<re::AssetManager::tryReuseExistingAsset_locked(re::internal::AssetEntry &,re::DynamicArray<re::AssetLoadDescriptor> const&,BOOL)::$_2,std::allocator<re::AssetManager::tryReuseExistingAsset_locked(re::internal::AssetEntry &,re::DynamicArray<re::AssetLoadDescriptor> const&,BOOL)::$_2>,void ()(BOOL)>::__clone(uint64_t a1)
{
  int v1 = (uint64_t *)(a1 + 8);
  uint64_t v2 = operator new(0x68uLL);
  *uint64_t v2 = &unk_26E6C9EF8;
  std::__compressed_pair_elem<re::AssetManager::tryReuseExistingAsset_locked(re::internal::AssetEntry &,re::DynamicArray<re::AssetLoadDescriptor> const&,BOOL)::$_2,0,false>::__compressed_pair_elem[abi:nn180100]<re::AssetManager::tryReuseExistingAsset_locked(re::internal::AssetEntry &,re::DynamicArray<re::AssetLoadDescriptor> const&,BOOL)::$_2 const&,0ul>((re::AssetHandle *)(v2 + 1), v1);
  return v2;
}

re::AssetHandle *std::__function::__func<re::AssetManager::tryReuseExistingAsset_locked(re::internal::AssetEntry &,re::DynamicArray<re::AssetLoadDescriptor> const&,BOOL)::$_2,std::allocator<re::AssetManager::tryReuseExistingAsset_locked(re::internal::AssetEntry &,re::DynamicArray<re::AssetLoadDescriptor> const&,BOOL)::$_2>,void ()(BOOL)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6C9EF8;
  return std::__compressed_pair_elem<re::AssetManager::tryReuseExistingAsset_locked(re::internal::AssetEntry &,re::DynamicArray<re::AssetLoadDescriptor> const&,BOOL)::$_2,0,false>::__compressed_pair_elem[abi:nn180100]<re::AssetManager::tryReuseExistingAsset_locked(re::internal::AssetEntry &,re::DynamicArray<re::AssetLoadDescriptor> const&,BOOL)::$_2 const&,0ul>((re::AssetHandle *)(a2 + 1), (uint64_t *)(a1 + 8));
}

void std::__function::__func<re::AssetManager::tryReuseExistingAsset_locked(re::internal::AssetEntry &,re::DynamicArray<re::AssetLoadDescriptor> const&,BOOL)::$_2,std::allocator<re::AssetManager::tryReuseExistingAsset_locked(re::internal::AssetEntry &,re::DynamicArray<re::AssetLoadDescriptor> const&,BOOL)::$_2>,void ()(BOOL)>::destroy(uint64_t a1)
{
  uint64_t v2 = (re::AssetHandle *)(a1 + 8);
  re::DynamicArray<re::AssetLoadDescriptor>::deinit(a1 + 56);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 32));
  re::AssetHandle::~AssetHandle(v2);
}

void std::__function::__func<re::AssetManager::tryReuseExistingAsset_locked(re::internal::AssetEntry &,re::DynamicArray<re::AssetLoadDescriptor> const&,BOOL)::$_2,std::allocator<re::AssetManager::tryReuseExistingAsset_locked(re::internal::AssetEntry &,re::DynamicArray<re::AssetLoadDescriptor> const&,BOOL)::$_2>,void ()(BOOL)>::destroy_deallocate(uint64_t a1)
{
  uint64_t v2 = (re::AssetHandle *)(a1 + 8);
  re::DynamicArray<re::AssetLoadDescriptor>::deinit(a1 + 56);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 32));
  re::AssetHandle::~AssetHandle(v2);
  operator delete((void *)a1);
}

void std::__function::__func<re::AssetManager::tryReuseExistingAsset_locked(re::internal::AssetEntry &,re::DynamicArray<re::AssetLoadDescriptor> const&,BOOL)::$_2,std::allocator<re::AssetManager::tryReuseExistingAsset_locked(re::internal::AssetEntry &,re::DynamicArray<re::AssetLoadDescriptor> const&,BOOL)::$_2>,void ()(BOOL)>::operator()(void *a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  uint64_t v4 = (os_unfair_lock_s *)a1[12];
  long long v5 = (os_unfair_lock_s *)(a1[2] + 384);
  os_unfair_lock_lock(v5);
  if (v3 || (uint64_t v6 = a1[5]) != 0 && (v7 = atomic_load((unsigned int *)(v6 + 704)), v7 == 2)) {
    re::AssetManager::reuseExistingOrLoadNewAsset_locked(v4, (void *)a1[2], a1 + 7);
  }
  else {
    re::AssetManager::loadAssetFromDescriptorsOnBackgroundTask_entryStateLocked((uint64_t)v4, (void *)a1[2], a1 + 7);
  }
  os_unfair_lock_unlock(v5);
}

uint64_t std::__function::__func<re::AssetManager::tryReuseExistingAsset_locked(re::internal::AssetEntry &,re::DynamicArray<re::AssetLoadDescriptor> const&,BOOL)::$_2,std::allocator<re::AssetManager::tryReuseExistingAsset_locked(re::internal::AssetEntry &,re::DynamicArray<re::AssetLoadDescriptor> const&,BOOL)::$_2>,void ()(BOOL)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::AssetManager::tryReuseExistingAsset_locked(re::internal::AssetEntry &,re::DynamicArray<re::AssetLoadDescriptor> const&,BOOL)::$_2,std::allocator<re::AssetManager::tryReuseExistingAsset_locked(re::internal::AssetEntry &,re::DynamicArray<re::AssetLoadDescriptor> const&,BOOL)::$_2>,void ()(BOOL)>::target_type()
{
}

re::AssetHandle *std::__compressed_pair_elem<re::AssetManager::tryReuseExistingAsset_locked(re::internal::AssetEntry &,re::DynamicArray<re::AssetLoadDescriptor> const&,BOOL)::$_2,0,false>::__compressed_pair_elem[abi:nn180100]<re::AssetManager::tryReuseExistingAsset_locked(re::internal::AssetEntry &,re::DynamicArray<re::AssetLoadDescriptor> const&,BOOL)::$_2 const&,0ul>(re::AssetHandle *a1, uint64_t *a2)
{
  uint64_t v4 = re::AssetHandle::AssetHandle(a1, (const re::AssetHandle *)a2);
  re::AssetHandle::AssetHandle((re::AssetHandle *)((char *)v4 + 24), (const re::AssetHandle *)(a2 + 3));
  re::DynamicArray<re::AssetLoadDescriptor>::DynamicArray((uint64_t)a1 + 48, a2 + 6);
  *((void *)a1 + 11) = a2[11];
  return a1;
}

uint64_t std::__function::__value_func<void ()(re::AssetLoader *)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = v3;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t *std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    std::function<void ()(re::AssetLoader *)>::operator()((uint64_t)(a1 + 1), v2);
  }
  std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](a1 + 1);
  return a1;
}

uint64_t std::function<void ()(re::AssetLoader *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x2333208B4);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void std::__function::__func<re::AssetManager::registerCustomAssetType(re::CustomAssetRegistrationParameters const&)::$_0,std::allocator<re::AssetManager::registerCustomAssetType(re::CustomAssetRegistrationParameters const&)::$_0>,void ()(re::AssetLoader *)>::~__func()
{
}

void *std::__function::__func<re::AssetManager::registerCustomAssetType(re::CustomAssetRegistrationParameters const&)::$_0,std::allocator<re::AssetManager::registerCustomAssetType(re::CustomAssetRegistrationParameters const&)::$_0>,void ()(re::AssetLoader *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26E6C9F88;
  return result;
}

void std::__function::__func<re::AssetManager::registerCustomAssetType(re::CustomAssetRegistrationParameters const&)::$_0,std::allocator<re::AssetManager::registerCustomAssetType(re::CustomAssetRegistrationParameters const&)::$_0>,void ()(re::AssetLoader *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6C9F88;
}

re *std::__function::__func<re::AssetManager::registerCustomAssetType(re::CustomAssetRegistrationParameters const&)::$_0,std::allocator<re::AssetManager::registerCustomAssetType(re::CustomAssetRegistrationParameters const&)::$_0>,void ()(re::AssetLoader *)>::operator()(uint64_t a1, void (****a2)(void))
{
  return re::internal::destroyPersistent<re::AssetLoader>((re *)"operator()", 5248, *a2);
}

uint64_t std::__function::__func<re::AssetManager::registerCustomAssetType(re::CustomAssetRegistrationParameters const&)::$_0,std::allocator<re::AssetManager::registerCustomAssetType(re::CustomAssetRegistrationParameters const&)::$_0>,void ()(re::AssetLoader *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::AssetManager::registerCustomAssetType(re::CustomAssetRegistrationParameters const&)::$_0,std::allocator<re::AssetManager::registerCustomAssetType(re::CustomAssetRegistrationParameters const&)::$_0>,void ()(re::AssetLoader *)>::target_type()
{
}

re *re::internal::destroyPersistent<re::AssetLoader>(re *result, uint64_t a2, void (***a3)(void))
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    (**a3)(a3);
    long long v5 = *(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

void *std::__function::__value_func<void ()(re::AssetLoader *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(re::AssetCompiler *)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = v3;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t *std::unique_ptr<re::AssetCompiler,std::function<void ()(re::AssetCompiler*)>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    std::function<void ()(re::AssetCompiler *)>::operator()((uint64_t)(a1 + 1), v2);
  }
  std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](a1 + 1);
  return a1;
}

void *std::function<void ()(re::AssetCompiler *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](v4);
}

void *std::__function::__value_func<void ()(re::AssetCompiler *)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void re::HashTable<re::AssetType const*,re::AssetTypeStatistics *,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unsigned int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_245, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<re::AssetType const*,re::AssetTypeStatistics *,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v25, 0, 36);
          *(void *)&v25[36] = 0x7FFFFFFFLL;
          re::HashTable<re::AssetType const*,re::AssetTypeStatistics *,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::init((uint64_t)v25, v13, v12);
          long long v15 = *(_OWORD *)v25;
          *(_OWORD *)id v25 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v25[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v25[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v25[24];
          *(_OWORD *)&v25[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v25[32];
          *(_OWORD *)(a1 + 24) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashTable<re::AssetType const*,re::AssetTypeStatistics *,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21, v21 + 8);
              }
              v21 += 32;
              --v20;
            }
            while (v20);
          }
          re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v25);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 32 * v9 + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 32 * v9 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 32 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * are::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v9;
  ++*(_DWORD *)(a1 + 28);
}

uint64_t re::HashTable<re::internal::AssetLoadingRoot,re::DynamicString,re::internal::AssetLoadingRoot,re::internal::AssetLoadingRoot,true,false>::addEmplace<char const*&>(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, const char **a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::internal::AssetLoadingRoot,re::DynamicString,re::internal::AssetLoadingRoot,re::internal::AssetLoadingRoot,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 88 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 88 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  uint64_t v14 = 88 * v10;
  *(_DWORD *)(v12 + v14 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v14 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + v14 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = a3;
  uint64_t v15 = *(void *)(a1 + 16) + v14;
  *(_DWORD *)(v15 + 16) = *(_DWORD *)a4;
  uint64_t v16 = re::DynamicString::DynamicString((re::DynamicString *)(v15 + 24), (re::DynamicString *)((char *)a4 + 8));
  uint64_t v17 = (re::DynamicString *)(*(void *)(a1 + 16) + 88 * v10 + 56);
  unsigned int v18 = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * are::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::internal::AssetLoadingRoot,re::DynamicString,re::internal::AssetLoadingRoot,re::internal::AssetLoadingRoot,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v27, 0, 36);
      *(void *)&v27[36] = 0x7FFFFFFFLL;
      re::HashTable<re::internal::AssetLoadingRoot,re::DynamicString,re::internal::AssetLoadingRoot,re::internal::AssetLoadingRoot,true,false>::init((uint64_t)v27, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v27;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v27[8];
      *(_OWORD *)unint64_t v27 = v5;
      *(void *)&v27[16] = v6;
      *(_OWORD *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7;
      long long v9 = *(_OWORD *)&v27[24];
      *(_OWORD *)&v27[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v27[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        int v13 = (void *)(v6 + 80);
        do
        {
          if ((*(_DWORD *)(v13 - 9) & 0x80000000) != 0)
          {
            unint64_t v14 = *(v13 - 10);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            unsigned int v17 = *(_DWORD *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              unsigned int v17 = *(_DWORD *)(a1 + 32);
              unsigned int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<re::internal::AssetLoadingRoot,re::DynamicString,re::internal::AssetLoadingRoot,re::internal::AssetLoadingRoot,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                unsigned int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 88 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 88 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 88 * v17 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v20 | 0x80000000;
            uint64_t v21 = *(void *)(a1 + 16) + 88 * v17;
            *(_DWORD *)(v21 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(v21 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 88 * v17) = v14;
            uint64_t v22 = *(void *)(a1 + 16) + 88 * v17;
            *(_DWORD *)(v22 + 16) = *((_DWORD *)v13 - 16);
            re::DynamicString::DynamicString((re::DynamicString *)(v22 + 24), (const re::DynamicString *)(v13 - 7));
            uint64_t v23 = *(void *)(a1 + 16) + 88 * v17;
            *(_OWORD *)(v23 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
            *(_OWORD *)(v23 + 56) = 0u;
            *(void *)(v23 + 56) = *(v13 - 3);
            *(v13 - 3) = 0;
            uint64_t v24 = *(void *)(v23 + 72);
            *(void *)(v23 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *(v13 - 1);
            *(v13 - 1) = v24;
            *(void *)(v23 + 80) = *v13;
            *int v13 = 0;
            uint64_t v25 = *(void *)(v23 + 64);
            *(void *)(v23 + 64) = *(v13 - 2);
            *(v13 - re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v25;
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v11;
          }
          v13 += 11;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::internal::AssetLoadingRoot,re::DynamicString,re::internal::AssetLoadingRoot,re::internal::AssetLoadingRoot,true,false>::deinit((uint64_t *)v27);
    }
  }
  else
  {
    if (a2) {
      signed int v26 = a2;
    }
    else {
      signed int v26 = 3;
    }
  }
}

void re::HashTable<re::internal::AssetLoadingRoot,re::DynamicString,re::internal::AssetLoadingRoot,re::internal::AssetLoadingRoot,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 88 * v10, 16);
  if (v12)
  {
    unint64_t v14 = v12;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_245, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t *re::HashTable<re::AssetLoadDescriptor,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t *a4, uint64_t *a5)
{
  unsigned int v10 = *(_DWORD *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    unsigned int v10 = *(_DWORD *)(a1 + 32);
    unsigned int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      int v12 = *(_DWORD *)(a1 + 28);
      signed int v13 = 2 * v12;
      uint64_t v14 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v13) {
          BOOL v15 = v10 == v13;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v30, 0, 36);
          *(void *)&v30[36] = 0x7FFFFFFFLL;
          re::HashTable<re::AssetLoadDescriptor,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::init((uint64_t)v30, v14, v13);
          long long v16 = *(_OWORD *)v30;
          *(_OWORD *)uint64_t v30 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          uint64_t v17 = *(void *)&v30[16];
          uint64_t v18 = *(void *)(a1 + 16);
          *(void *)&v30[16] = v18;
          *(void *)(a1 + 16) = v17;
          long long v20 = *(_OWORD *)&v30[24];
          *(_OWORD *)&v30[24] = *(_OWORD *)(a1 + 24);
          unsigned int v19 = *(_DWORD *)&v30[32];
          *(_OWORD *)(a1 + 24) = v20;
          uint64_t v21 = v19;
          if (v19)
          {
            uint64_t v22 = v18 + 160;
            do
            {
              if ((*(_DWORD *)(v22 - 152) & 0x80000000) != 0) {
                re::HashTable<re::AssetLoadDescriptor,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::addAsMove(a1, *(void *)(v22 - 160) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v22 - 160), v22 - 144, v22);
              }
              v22 += 208;
              --v21;
            }
            while (v21);
          }
          re::HashTable<re::AssetLoadDescriptor,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::deinit((uint64_t *)v30);
        }
      }
      else
      {
        if (v13) {
          signed int v25 = 2 * v12;
        }
        else {
          signed int v25 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      unsigned int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v11 + 1;
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 208 * v10 + 8);
  }
  else
  {
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 208 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 208 * v10 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v24 | 0x80000000;
  uint64_t v26 = 208 * v10;
  *(_DWORD *)(*(void *)(a1 + 16) + v26 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + v26 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + v26) = a3;
  uint64_t v27 = *(void *)(a1 + 16) + v26;
  re::DynamicString::DynamicString((re::DynamicString *)(v27 + 16), (const re::DynamicString *)a4);
  re::DynamicArray<BOOL>::DynamicArray(v27 + 48, a4 + 4);
  re::DynamicArray<BOOL>::DynamicArray(v27 + 88, a4 + 9);
  re::DynamicString::DynamicString((re::DynamicString *)(v27 + 128), (const re::DynamicString *)(a4 + 14));
  uint64_t v28 = *(void *)(a1 + 16) + 208 * v10;
  *(_OWORD *)(v28 + 160) = 0u;
  v28 += 160;
  *(_DWORD *)(v28 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(_OWORD *)(v28 + 16) = 0u;
  *(void *)(v28 + 36) = 0x7FFFFFFFLL;
  uint64_t result = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v28, a5);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * are::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

void re::HashTable<re::AssetLoadDescriptor,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 208 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_245, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + (v10 << 6) + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + (v10 << 6) + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + (v10 << 6) + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + (v10 << 6) + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + (v10 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + (v10 << 6)) = a3;
  *(void *)(*(void *)(a1 + 16) + (v10 << 6) + 16) = *a4;
  re::DynamicArray<re::AssetLoadDescriptor>::DynamicArray(*(void *)(a1 + 16) + (v10 << 6) + 24, a5);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * are::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v25, 0, 36);
      *(void *)&v25[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v25, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v25;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v25[8];
      *(_OWORD *)signed int v25 = v5;
      *(void *)&v25[16] = v6;
      *(_OWORD *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7;
      long long v9 = *(_OWORD *)&v25[24];
      *(_OWORD *)&v25[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v25[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        uint64_t v13 = v6 + 32;
        do
        {
          if ((*(_DWORD *)(v13 - 24) & 0x80000000) != 0)
          {
            unint64_t v14 = *(void *)(v13 - 32);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + (v17 << 6) + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + (v17 << 6) + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + (v17 << 6) + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + (v17 << 6) + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + (v17 << 6) + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + (v17 << 6)) = v14;
            *(void *)(*(void *)(a1 + 16) + (v17 << 6) + 16) = *(void *)(v13 - 16);
            uint64_t v21 = *(void *)(a1 + 16) + (v17 << 6);
            *(void *)(v21 + 56) = 0;
            *(_DWORD *)(v21 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
            *(void *)(v21 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
            *(void *)(v21 + 40) = 0;
            *(void *)(v21 + 24) = 0;
            *(void *)(v21 + 24) = *(void *)(v13 - 8);
            *(void *)(v13 - re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
            *(void *)(v21 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *(void *)v13;
            *(void *)uint64_t v13 = 0;
            uint64_t v22 = *(void *)(v21 + 40);
            *(void *)(v21 + 40) = *(void *)(v13 + 8);
            *(void *)(v13 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v22;
            uint64_t v23 = *(void *)(v21 + 56);
            *(void *)(v21 + 56) = *(void *)(v13 + 24);
            *(void *)(v13 + 24) = v23;
            ++*(_DWORD *)(v13 + 16);
            ++*(_DWORD *)(v21 + 48);
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v11;
          }
          v13 += 64;
          --v10;
        }
        while (v10);
      }
      re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v25);
    }
  }
  else
  {
    if (a2) {
      signed int v24 = a2;
    }
    else {
      signed int v24 = 3;
    }
  }
}

void re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + (v10 << 6), 16);
  if (v12)
  {
    unint64_t v14 = v12;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_245, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<re::AssetLoadDescriptor,unsigned long long,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::addEmplace<unsigned long long &>(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, void *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::AssetLoadDescriptor,unsigned long long,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 168 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 168 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 168 * v10 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v13 | 0x80000000;
  uint64_t v14 = 168 * v10;
  *(_DWORD *)(*(void *)(a1 + 16) + v14 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + v14 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = a3;
  uint64_t v15 = *(void *)(a1 + 16) + v14;
  re::DynamicString::DynamicString((re::DynamicString *)(v15 + 16), a4);
  re::DynamicArray<BOOL>::DynamicArray(v15 + 48, (uint64_t *)a4 + 4);
  re::DynamicArray<BOOL>::DynamicArray(v15 + 88, (uint64_t *)a4 + 9);
  re::DynamicString::DynamicString((re::DynamicString *)(v15 + 128), (re::DynamicString *)((char *)a4 + 112));
  uint64_t v16 = *(void *)(a1 + 8);
  *(void *)(*(void *)(a1 + 16) + 168 * v10 + 160) = *a5;
  *(_DWORD *)(v16 + 4 * are::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::AssetLoadDescriptor,unsigned long long,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(void *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<re::AssetLoadDescriptor,unsigned long long,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::init((uint64_t)v24, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v24;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)signed int v24 = v5;
      *(void *)&v24[16] = v6;
      *(_OWORD *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7;
      long long v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        int v13 = (uint64_t *)(v6 + 88);
        do
        {
          if ((*(_DWORD *)(v13 - 10) & 0x80000000) != 0)
          {
            unint64_t v14 = *(v13 - 11);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            unsigned int v17 = *(_DWORD *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              unsigned int v17 = *(_DWORD *)(a1 + 32);
              unsigned int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<re::AssetLoadDescriptor,unsigned long long,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                unsigned int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 168 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 168 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 168 * v17 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v20 | 0x80000000;
            uint64_t v21 = *(void *)(a1 + 16) + 168 * v17;
            *(_DWORD *)(v21 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(v21 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 168 * v17) = v14;
            uint64_t v22 = *(void *)(a1 + 16) + 168 * v17;
            re::DynamicString::DynamicString((re::DynamicString *)(v22 + 16), (const re::DynamicString *)(v13 - 9));
            re::DynamicArray<BOOL>::DynamicArray(v22 + 48, v13 - 5);
            re::DynamicArray<BOOL>::DynamicArray(v22 + 88, v13);
            re::DynamicString::DynamicString((re::DynamicString *)(v22 + 128), (const re::DynamicString *)(v13 + 5));
            *(void *)(*(void *)(a1 + 16) + 168 * v17 + 160) = v13[9];
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v11;
          }
          v13 += 21;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::AssetLoadDescriptor,unsigned long long,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::deinit((uint64_t *)v24);
    }
  }
  else
  {
    if (a2) {
      signed int v23 = a2;
    }
    else {
      signed int v23 = 3;
    }
  }
}

void re::HashTable<re::AssetLoadDescriptor,unsigned long long,re::Hash<re::AssetLoadDescriptor>,re::EqualTo<re::AssetLoadDescriptor>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 168 * v10, 16);
  if (v12)
  {
    unint64_t v14 = v12;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_245, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::NetworkSendBlockingAssetLoadRequestManager::registerECSSendBlockingAssetLoadRequest(uint64_t a1, uint64_t *a2)
{
  if (!*(unsigned char *)(a1 + 8)) {
    return;
  }
  unint64_t v4 = (os_unfair_lock_s *)(a1 + 64);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  uint64_t v5 = *a2;
  unint64_t v6 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  unint64_t v8 = *(unsigned int *)(a1 + 96);
  if (!v8)
  {
    LODWORD(v9) = 0;
    goto LABEL_10;
  }
  unint64_t v9 = v7 % v8;
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 80) + 4 * (v7 % v8));
  if (v10 == 0x7FFFFFFF)
  {
LABEL_10:
    re::HashSetBase<re::SharedPtr<re::AssetLoadRequest>,re::SharedPtr<re::AssetLoadRequest>,re::internal::ValueAsKey<re::SharedPtr<re::AssetLoadRequest>>,re::Hash<re::SharedPtr<re::AssetLoadRequest>>,re::EqualTo<re::SharedPtr<re::AssetLoadRequest>>,true,false>::addAsMove(a1 + 72, v9, v7, a2);
    ++*(_DWORD *)(a1 + 112);
    goto LABEL_11;
  }
  uint64_t v11 = *(void *)(a1 + 88);
  while (*(void *)(v11 + 24 * v10 + 16) != v5)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 24 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_10;
    }
  }
LABEL_11:
  os_unfair_lock_unlock(v4);
}

void re::NetworkSendBlockingAssetLoadRequestManager::clearECSSendBlockingAssetLoadRequests(os_unfair_lock_s *this)
{
  uint64_t v2 = this + 16;
  os_unfair_lock_lock(this + 16);
  re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::clear((uint64_t)&this[18]);
  os_unfair_lock_unlock(v2);
}

double re::NetworkSendBlockingAssetLoadRequestManager::flushAndWaitForECSSendBlockingAssetLoadRequests(os_unfair_lock_s *this)
{
  int v1 = (uint64_t *)this;
  uint64_t v40 = *MEMORY[0x263EF8340];
  int v36 = 0;
  uint64_t v2 = this + 16;
  os_unfair_lock_lock(this + 16);
  v1 += 9;
  int v39 = 0;
  memset(buf, 0, sizeof(buf));
  long long v33 = 0u;
  uint64_t v34 = 0;
  long long v38 = xmmword_23436F740;
  long long v35 = xmmword_23436F740;
  re::HashSetBase<re::SharedPtr<re::AssetLoadRequest>,re::SharedPtr<re::AssetLoadRequest>,re::internal::ValueAsKey<re::SharedPtr<re::AssetLoadRequest>>,re::Hash<re::SharedPtr<re::AssetLoadRequest>>,re::EqualTo<re::SharedPtr<re::AssetLoadRequest>>,true,false>::operator=((uint64_t)&v33, v1);
  re::HashSetBase<re::SharedPtr<re::AssetLoadRequest>,re::SharedPtr<re::AssetLoadRequest>,re::internal::ValueAsKey<re::SharedPtr<re::AssetLoadRequest>>,re::Hash<re::SharedPtr<re::AssetLoadRequest>>,re::EqualTo<re::SharedPtr<re::AssetLoadRequest>>,true,false>::operator=((uint64_t)v1, (uint64_t *)buf);
  re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)buf);
  os_unfair_lock_unlock(v2);
  int v3 = DWORD2(v35);
  if (DWORD2(v35))
  {
    uint64_t v4 = 0;
    uint64_t v5 = (int *)(v34 + 8);
    while (1)
    {
      int v6 = *v5;
      v5 += 6;
      if (v6 < 0) {
        break;
      }
      if (DWORD2(v35) == ++v4)
      {
        LODWORD(v4) = DWORD2(v35);
        break;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if (DWORD2(v35) != v4)
  {
    uint64_t v7 = v4;
    uint64_t v8 = v34;
    do
    {
      uint64_t v9 = v8 + 24 * v7;
      uint64_t v11 = *(void *)(v9 + 16);
      uint64_t v10 = v9 + 16;
      re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v32, 2074, v11);
      uint64_t v12 = *(void *)(*(void *)v10 + 24);
      uint64_t v13 = (os_unfair_lock_s *)(v12 + 192);
      os_unfair_lock_lock((os_unfair_lock_t)(v12 + 192));
      uint64_t v14 = *(void *)(v12 + 216);
      os_unfair_lock_unlock(v13);
      if (v14)
      {
        unint64_t v16 = *re::assetsLogObjects(v15);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v17 = *(void **)(*(void *)v10 + 24);
          uint64_t v18 = v17[11];
          uint64_t v19 = v17[13];
          int v20 = (char *)v17[14];
          uint64_t v21 = (char *)v17 + 105;
          if (v19) {
            uint64_t v21 = v20;
          }
          *(_DWORD *)long long buf = 134218498;
          *(void *)&uint8_t buf[4] = v18;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v21;
          *(_WORD *)&buf[22] = 2048;
          *(void *)&long long v38 = v14;
          _os_log_impl(&dword_233120000, v16, OS_LOG_TYPE_DEFAULT, "Waiting for ECS send blocking AssetLoadRequest with first assetId %llu (%s) to complete loading %zu remaining assets", buf, 0x20u);
        }
        re::AssetLoadRequest::Data::waitForCompletion(*(void *)(*(void *)v10 + 24), 0);
        signed int v23 = *re::assetsLogObjects(v22);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          signed int v24 = *(void **)(*(void *)v10 + 24);
          uint64_t v25 = v24[11];
          uint64_t v26 = v24[13];
          uint64_t v27 = (char *)v24[14];
          uint64_t v28 = (char *)v24 + 105;
          if (v26) {
            uint64_t v28 = v27;
          }
          *(_DWORD *)long long buf = 134218242;
          *(void *)&uint8_t buf[4] = v25;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v28;
          _os_log_impl(&dword_233120000, v23, OS_LOG_TYPE_DEFAULT, "Completed waiting for ECS send blocking AssetLoadRequest with first assetId %llu (%s).", buf, 0x16u);
        }
      }
      else
      {
        re::AssetLoadRequest::Data::waitForCompletion(*(void *)(*(void *)v10 + 24), 0);
      }
      re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v32);
      uint64_t v8 = v34;
      if (DWORD2(v35) <= (v4 + 1)) {
        int v29 = v4 + 1;
      }
      else {
        int v29 = DWORD2(v35);
      }
      while (1)
      {
        uint64_t v7 = (v4 + 1);
        if (v29 - 1 == v4) {
          break;
        }
        LODWORD(v4) = v4 + 1;
        int v30 = v7;
        if ((*(_DWORD *)(v34 + 24 * v7 + 8) & 0x80000000) != 0) {
          goto LABEL_26;
        }
      }
      int v30 = v29;
LABEL_26:
      LODWORD(v4) = v30;
    }
    while (v3 != v30);
  }
  return re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)&v33);
}

uint64_t re::NetworkSendBlockingAssetLoadRequestManager::setIsListeningForECSSendBlockingAssetLoadRequests(uint64_t this)
{
  *(unsigned char *)(this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 1;
  return this;
}

void re::HashSetBase<re::SharedPtr<re::AssetLoadRequest>,re::SharedPtr<re::AssetLoadRequest>,re::internal::ValueAsKey<re::SharedPtr<re::AssetLoadRequest>>,re::Hash<re::SharedPtr<re::AssetLoadRequest>>,re::EqualTo<re::SharedPtr<re::AssetLoadRequest>>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4)
{
  uint64_t v7 = *(unsigned int *)(a1 + 36);
  if (v7 == 0x7FFFFFFF)
  {
    uint64_t v7 = *(unsigned int *)(a1 + 32);
    int v8 = v7;
    if (v7 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<re::SharedPtr<re::AssetLoadRequest>,re::SharedPtr<re::AssetLoadRequest>,re::internal::ValueAsKey<re::SharedPtr<re::AssetLoadRequest>>,re::Hash<re::SharedPtr<re::AssetLoadRequest>>,re::EqualTo<re::SharedPtr<re::AssetLoadRequest>>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v8 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v8 + 1;
    uint64_t v9 = *(void *)(a1 + 16);
    int v10 = *(_DWORD *)(v9 + 24 * v7 + 8);
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 16);
    int v10 = *(_DWORD *)(v9 + 24 * v7 + 8);
    *(_DWORD *)(a1 + 36) = v10 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v9 + 24 * v7 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v10 | 0x80000000;
  uint64_t v11 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + 24 * v7 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v7 + 8) & 0x80000000 | *(_DWORD *)(v11 + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 24 * v7) = a3;
  *(void *)(*(void *)(a1 + 16) + 24 * v7 + 16) = *a4;
  *a4 = 0;
  *(_DWORD *)(v11 + 4 * are::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v7;
  ++*(_DWORD *)(a1 + 28);
}

void re::HashSetBase<re::SharedPtr<re::AssetLoadRequest>,re::SharedPtr<re::AssetLoadRequest>,re::internal::ValueAsKey<re::SharedPtr<re::AssetLoadRequest>>,re::Hash<re::SharedPtr<re::AssetLoadRequest>>,re::EqualTo<re::SharedPtr<re::AssetLoadRequest>>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v14, 0, 36);
      *(void *)&v14[36] = 0x7FFFFFFFLL;
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::init((uint64_t)v14, v4, a2);
      long long v5 = *(_OWORD *)v14;
      *(_OWORD *)uint64_t v14 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v14[16];
      uint64_t v7 = *(void *)(a1 + 16);
      *(void *)&v14[16] = v7;
      *(void *)(a1 + 16) = v6;
      long long v9 = *(_OWORD *)&v14[24];
      *(_OWORD *)&unsigned char v14[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v14[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        uint64_t v12 = v7 + 16;
        do
        {
          if ((*(_DWORD *)(v12 - 8) & 0x80000000) != 0) {
            re::HashSetBase<re::SharedPtr<re::AssetLoadRequest>,re::SharedPtr<re::AssetLoadRequest>,re::internal::ValueAsKey<re::SharedPtr<re::AssetLoadRequest>>,re::Hash<re::SharedPtr<re::AssetLoadRequest>>,re::EqualTo<re::SharedPtr<re::AssetLoadRequest>>,true,false>::addAsMove(a1, *(void *)(v12 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v12 - 16), v12);
          }
          ++v11;
          v12 += 24;
        }
        while (v11 < v10);
      }
      re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)v14);
    }
  }
  else
  {
    if (a2) {
      signed int v13 = a2;
    }
    else {
      signed int v13 = 3;
    }
  }
}

uint64_t re::HashSetBase<re::SharedPtr<re::AssetLoadRequest>,re::SharedPtr<re::AssetLoadRequest>,re::internal::ValueAsKey<re::SharedPtr<re::AssetLoadRequest>>,re::Hash<re::SharedPtr<re::AssetLoadRequest>>,re::EqualTo<re::SharedPtr<re::AssetLoadRequest>>,true,false>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = *a2;
    if (*(void *)a1) {
      BOOL v6 = v4 == v5;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6)
    {
      *(void *)a1 = v5;
      *a2 = v4;
      uint64_t v7 = *(void *)(a1 + 8);
      *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = a2[1];
      a2[1] = v7;
      uint64_t v8 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = a2[2];
      a2[2] = v8;
      LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(a1 + 24);
      *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
      *((_DWORD *)a2 + 6) = v8;
      LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(a1 + 28);
      *(_DWORD *)(a1 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *((_DWORD *)a2 + 7);
      *((_DWORD *)a2 + 7) = v8;
      LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(a1 + 32);
      *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *((_DWORD *)a2 + 8);
      *((_DWORD *)a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v8;
      LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(a1 + 36);
      *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
      *((_DWORD *)a2 + 9) = v8;
    }
    else
    {
      re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::clear(a1);
      if (v5)
      {
        unsigned int v9 = *((_DWORD *)a2 + 7);
        if (*(_DWORD *)(a1 + 24) < v9) {
          re::HashSetBase<re::SharedPtr<re::AssetLoadRequest>,re::SharedPtr<re::AssetLoadRequest>,re::internal::ValueAsKey<re::SharedPtr<re::AssetLoadRequest>>,re::Hash<re::SharedPtr<re::AssetLoadRequest>>,re::EqualTo<re::SharedPtr<re::AssetLoadRequest>>,true,false>::setCapacity(a1, v9);
        }
        unint64_t v10 = *((unsigned int *)a2 + 8);
        if (v10)
        {
          uint64_t v11 = 0;
          for (unint64_t i = 0; i < v10; ++i)
          {
            signed int v13 = (unint64_t *)(a2[2] + v11);
            if ((v13[1] & 0x80000000) != 0)
            {
              unint64_t v14 = *v13;
              unint64_t v15 = *(unsigned int *)(a1 + 24);
              unint64_t v16 = *v13 % v15;
              uint64_t v17 = *(unsigned int *)(a1 + 36);
              if (v17 == 0x7FFFFFFF)
              {
                uint64_t v17 = *(unsigned int *)(a1 + 32);
                int v18 = v17;
                if (v17 == v15)
                {
                  re::HashSetBase<re::SharedPtr<re::AssetLoadRequest>,re::SharedPtr<re::AssetLoadRequest>,re::internal::ValueAsKey<re::SharedPtr<re::AssetLoadRequest>>,re::Hash<re::SharedPtr<re::AssetLoadRequest>>,re::EqualTo<re::SharedPtr<re::AssetLoadRequest>>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
                  unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                  int v18 = *(_DWORD *)(a1 + 32);
                }
                *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v18 + 1;
                uint64_t v19 = *(void *)(a1 + 16);
                int v20 = *(_DWORD *)(v19 + 24 * v17 + 8);
              }
              else
              {
                uint64_t v19 = *(void *)(a1 + 16);
                int v20 = *(_DWORD *)(v19 + 24 * v17 + 8);
                *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
              }
              *(_DWORD *)(v19 + 24 * v17 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v20 | 0x80000000;
              uint64_t v21 = *(void *)(a1 + 8);
              *(_DWORD *)(*(void *)(a1 + 16) + 24 * v17 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v17 + 8) & 0x80000000 | *(_DWORD *)(v21 + 4 * v16);
              *(void *)(*(void *)(a1 + 16) + 24 * v17) = v14;
              unint64_t v22 = v13[2];
              *(void *)(*(void *)(a1 + 16) + 24 * v17 + 16) = v22;
              if (v22)
              {
                id v23 = (id)(v22 + 8);
                uint64_t v21 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(v21 + 4 * v16) = v17;
              ++*(_DWORD *)(a1 + 28);
              unint64_t v10 = *((unsigned int *)a2 + 8);
            }
            v11 += 24;
          }
        }
        ++*(_DWORD *)(a1 + 40);
      }
    }
  }
  return a1;
}

void re::internal::ResourceRequestQueue::enqueue(uint64_t a1, void *a2)
{
  id v3 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
  re::DynamicArray<void({block_pointer} {__strong})(void)>::add((_anonymous_namespace_ *)(a1 + 32), (const void **)&v3);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 24));
  atomic_store(1u, (unsigned __int8 *)(a1 + 72));
}

void *re::DynamicArray<void({block_pointer} {__strong})(void)>::add(_anonymous_namespace_ *this, const void **a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<void({block_pointer} {__strong})(void)>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4);
  uint64_t result = _Block_copy(*a2);
  *(void *)(v5 + 8 * v4) = result;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::internal::ResourceRequestQueue::flushAsync(uint64_t a1, dispatch_queue_t *a2)
{
  if (a1) {
    id v3 = (void *)(a1 + 8);
  }
  else {
    id v3 = 0;
  }
  objc_initWeak(&location, v3);
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 3321888768;
  v4[2] = ___ZN2re8internal20ResourceRequestQueue10flushAsyncERKNS_8dispatch5QueueE_block_invoke;
  v4[3] = &__block_descriptor_40_a8_32c58_ZTSN2re10ArcWeakPtrINS_8internal20ResourceRequestQueueEEE_e5_v8__0l;
  id v5 = 0;
  objc_copyWeak(&v5, &location);
  dispatch_async(*a2, v4);
  objc_destroyWeak(&v5);
  id v5 = 0;
  objc_destroyWeak(&location);
}

void ___ZN2re8internal20ResourceRequestQueue10flushAsyncERKNS_8dispatch5QueueE_block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v2 = WeakRetained;
    re::internal::ResourceRequestQueue::flushSync((dispatch_time_t)WeakRetained - 8, 0xFFFFFFFFFFFFFFFFLL);
  }
}

dispatch_time_t re::internal::ResourceRequestQueue::flushSync(dispatch_time_t this, dispatch_time_t a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(this + 72));
  if (v2)
  {
    uint64_t v4 = this;
    if (a2 == -1 || (this = dispatch_time(0, 0), this < a2))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(v4 + 24));
      uint64_t v5 = *(void *)(v4 + 40);
      unint64_t v6 = *(void *)(v4 + 48);
      v11[0] = *(void *)(v4 + 32);
      v11[1] = v5;
      unint64_t v11[2] = v6;
      *(void *)(v4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
      *(void *)(v4 + 40) = 0;
      *(void *)(v4 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      uint64_t v7 = *(const void ***)(v4 + 64);
      signed int v13 = v7;
      *(void *)(v4 + 64) = 0;
      ++*(_DWORD *)(v4 + 56);
      int v12 = 1;
      atomic_store(0, (unsigned __int8 *)(v4 + 72));
      os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 24));
      if (v6)
      {
        unint64_t v8 = 0;
        while (a2 == -1 || dispatch_time(0, 0) < a2)
        {
          unsigned int v9 = (void (**)(void))*v7++;
          v9[2]();
          if (v6 == ++v8) {
            return re::DynamicArray<re::ObjCObject>::deinit((uint64_t)v11);
          }
        }
        os_unfair_lock_lock((os_unfair_lock_t)(v4 + 24));
        unint64_t v10 = v6 - v8;
        if (v6 > v8)
        {
          do
          {
            re::DynamicArray<void({block_pointer} {__strong})(void)>::add((_anonymous_namespace_ *)(v4 + 32), v7++);
            --v10;
          }
          while (v10);
        }
        atomic_store(1u, (unsigned __int8 *)(v4 + 72));
        os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 24));
      }
      return re::DynamicArray<re::ObjCObject>::deinit((uint64_t)v11);
    }
  }
  return this;
}

void __copy_helper_block_a8_32c58_ZTSN2re10ArcWeakPtrINS_8internal20ResourceRequestQueueEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_a8_32c58_ZTSN2re10ArcWeakPtrINS_8internal20ResourceRequestQueueEEE(uint64_t a1)
{
  *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
}

void *re::DynamicArray<void({block_pointer} {__strong})(void)>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<void({block_pointer} {__strong})(void)>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<void({block_pointer} {__strong})(void)>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<void({block_pointer} {__strong})(void)>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<void({block_pointer} {__strong})(void)>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 61)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 8, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 8 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 8 * a2, 8);
          if (result)
          {
            unint64_t v7 = (void **)result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      unint64_t v8 = (const void **)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 8 * v9;
        uint64_t v11 = v7;
        do
        {
          *v11++ = _Block_copy(*v8);
          int v12 = (void *)*v8++;

          v10 -= 8;
        }
        while (v10);
        unint64_t v8 = (const void **)v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, const void **))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

BOOL ends_with(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a2[1];
  unint64_t v4 = a1[1];
  if (v3 + a3 > v4) {
    return 0;
  }
  uint64_t v6 = (char *)(*a1 + ~a3 + v4);
  uint64_t v7 = *a2 - 1;
  do
  {
    BOOL v5 = v3 == 0;
    if (!v3) {
      break;
    }
    __darwin_ct_rune_t v8 = *v6--;
    __darwin_ct_rune_t v9 = __tolower(*(char *)(v7 + v3--));
  }
  while (v9 == __tolower(v8));
  return v5;
}

void file_seek(FILE *a1, uint64_t a2, int a3)
{
  fseek(a1, a2, a3);
  JUMPOUT(0x237DBD630);
}

size_t file_read(FILE *__stream, void *__ptr, size_t a3)
{
  return fread(__ptr, 1uLL, a3, __stream);
}

size_t file_write(FILE *__stream, const void *__ptr, size_t a3)
{
  return fwrite(__ptr, 1uLL, a3, __stream);
}

uint64_t file_close(FILE *a1)
{
  fflush(a1);
  return fclose(a1);
}

BOOL file_swap(FILE *a1, FILE *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  int v3 = fileno(a1);
  if (fcntl(v3, 50, v7)) {
    return 0;
  }
  int v4 = fileno(a2);
  return !fcntl(v4, 50, v6) && renamex_np(v7, v6, 2u) == 0;
}

uint64_t _collect_paths(const char *a1, const char *a2, uint64_t *a3)
{
  if (stat(a2, &v60)) {
    return 0;
  }
  int v8 = v60.st_mode & 0xF000;
  if (v8 != 0x8000 && v8 != 0x4000) {
    return 0;
  }
  memset(&__str, 0, sizeof(__str));
  size_t v9 = strlen(a2);
  std::string::reserve(&__str, v9 + 1);
  MEMORY[0x237DBC5F0](&__str, a2);
  if (v8 != 0x8000)
  {
    std::string::append(&__str, 1uLL, 47);
    size_t v13 = strlen(a1);
    std::string::basic_string(&v58, &__str, v13 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v54);
    if ((*((unsigned char *)&v58.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (!v58.__r_.__value_.__l.__size_) {
        goto LABEL_57;
      }
      if (v58.__r_.__value_.__l.__size_ != 1) {
        goto LABEL_25;
      }
      unint64_t v14 = (std::string *)v58.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (!*((unsigned char *)&v58.__r_.__value_.__s + 23)) {
        goto LABEL_57;
      }
      if (HIBYTE(v58.__r_.__value_.__r.__words[2]) != 1)
      {
LABEL_25:
        std::string::value_type v53 = 0;
        _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_bEEC2B8nn180100IJLm0ELm1ELm2EEJS8_S8_bEJEJEJRS8_SB_bEEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSD_IJDpT2_EEEDpOT3_(&v54, (long long *)&__str, (long long *)&v58, &v53);
        unint64_t v19 = a3[2];
        unint64_t v20 = a3[1];
        if (v20 >= v19)
        {
          uint64_t v28 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v20 - *a3) >> 3);
          unint64_t v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) > 0x492492492492492) {
            goto LABEL_79;
          }
          unint64_t v30 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v19 - *a3) >> 3);
          if (2 * v30 > v29) {
            unint64_t v29 = 2 * v30;
          }
          if (v30 >= 0x249249249249249) {
            unint64_t v31 = 0x492492492492492;
          }
          else {
            unint64_t v31 = v29;
          }
          unint64_t v65 = a3 + 2;
          if (v31) {
            unint64_t v31 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::tuple<std::string,std::string,BOOL>>>(v31);
          }
          else {
            uint64_t v32 = 0;
          }
          unint64_t v38 = v31 + 56 * v28;
          unint64_t v61 = v31;
          unint64_t v62 = v38;
          unint64_t v64 = v31 + 56 * v32;
          long long v39 = *(_OWORD *)&v54.__r_.__value_.__l.__data_;
          *(void *)(v38 + 16) = *((void *)&v54.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v38 = v39;
          memset(&v54, 0, sizeof(v54));
          long long v40 = *(_OWORD *)__p;
          *(void *)(v38 + 40) = v56;
          *(_OWORD *)(v38 + 24) = v40;
          __p[1] = 0;
          uint64_t v56 = 0;
          __p[0] = 0;
          *(unsigned char *)(v38 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v57;
          unint64_t v63 = v38 + 56;
          std::vector<std::tuple<std::string,std::string,BOOL>>::__swap_out_circular_buffer(a3, &v61);
          uint64_t v41 = a3[1];
          std::__split_buffer<std::tuple<std::string,std::string,BOOL>>::~__split_buffer((uint64_t)&v61);
          int v42 = SHIBYTE(v56);
          a3[1] = v41;
          if (v42 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v21 = *(_OWORD *)&v54.__r_.__value_.__l.__data_;
          *(void *)(v20 + 16) = *((void *)&v54.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v20 = v21;
          *(_OWORD *)&v54.__r_.__value_.__l.__data_ = 0uLL;
          uint64_t v22 = v56;
          *(_OWORD *)(v20 + 24) = *(_OWORD *)__p;
          *(void *)(v20 + 40) = v22;
          v54.__r_.__value_.__r.__words[2] = 0;
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v56 = 0;
          *(unsigned char *)(v20 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v57;
          a3[1] = v20 + 56;
        }
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v54.__r_.__value_.__l.__data_);
        }
LABEL_57:
        uint64_t v43 = opendir(a2);
        if (v43)
        {
          unint64_t v44 = v43;
          uint64_t v45 = readdir(v43);
          if (v45)
          {
            long long v46 = v45;
            while (1)
            {
              int v48 = v46->d_name[0];
              d_name = v46->d_name;
              if (v48 != 46)
              {
                memset(&v54, 0, sizeof(v54));
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type size = __str.__r_.__value_.__l.__size_;
                }
                size_t v50 = strlen(d_name);
                std::string::reserve(&v54, size + v50);
                std::string::operator=(&v54, &__str);
                std::string::append(&v54, d_name);
                if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  unint64_t v51 = &v54;
                }
                else {
                  unint64_t v51 = (std::string *)v54.__r_.__value_.__r.__words[0];
                }
                int v52 = _collect_paths(a1, v51, a3);
                if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v54.__r_.__value_.__l.__data_);
                }
                if (!v52) {
                  break;
                }
              }
              long long v46 = readdir(v44);
              if (!v46) {
                goto LABEL_71;
              }
            }
            uint64_t v6 = 0;
          }
          else
          {
LABEL_71:
            uint64_t v6 = 1;
          }
          closedir(v44);
        }
        else
        {
          uint64_t v6 = 0;
        }
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v58.__r_.__value_.__l.__data_);
        }
        goto LABEL_77;
      }
      unint64_t v14 = &v58;
    }
    if (v14->__r_.__value_.__s.__data_[0] == 47) {
      goto LABEL_57;
    }
    goto LABEL_25;
  }
  size_t v10 = strlen(a1);
  std::string::basic_string(&v58, &__str, v10 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v54);
  char v11 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v58.__r_.__value_.__l.__size_)
    {
LABEL_50:
      operator delete(v58.__r_.__value_.__l.__data_);
      goto LABEL_51;
    }
    if (v58.__r_.__value_.__l.__size_ != 1) {
      goto LABEL_19;
    }
    int v12 = (std::string *)v58.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&v58.__r_.__value_.__s + 23)) {
      goto LABEL_51;
    }
    if (HIBYTE(v58.__r_.__value_.__r.__words[2]) != 1) {
      goto LABEL_19;
    }
    int v12 = &v58;
  }
  if (v12->__r_.__value_.__s.__data_[0] == 47) {
    goto LABEL_49;
  }
LABEL_19:
  std::string::value_type v53 = 1;
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_bEEC2B8nn180100IJLm0ELm1ELm2EEJS8_S8_bEJEJEJRS8_SB_bEEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSD_IJDpT2_EEEDpOT3_(&v54, (long long *)&__str, (long long *)&v58, &v53);
  unint64_t v15 = a3[2];
  unint64_t v16 = a3[1];
  if (v16 >= v15)
  {
    uint64_t v23 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v16 - *a3) >> 3);
    unint64_t v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) <= 0x492492492492492)
    {
      unint64_t v25 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v15 - *a3) >> 3);
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x249249249249249) {
        unint64_t v26 = 0x492492492492492;
      }
      else {
        unint64_t v26 = v24;
      }
      unint64_t v65 = a3 + 2;
      if (v26) {
        unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::tuple<std::string,std::string,BOOL>>>(v26);
      }
      else {
        uint64_t v27 = 0;
      }
      unint64_t v33 = v26 + 56 * v23;
      unint64_t v61 = v26;
      unint64_t v62 = v33;
      unint64_t v64 = v26 + 56 * v27;
      long long v34 = *(_OWORD *)&v54.__r_.__value_.__l.__data_;
      *(void *)(v33 + 16) = *((void *)&v54.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v33 = v34;
      memset(&v54, 0, sizeof(v54));
      long long v35 = *(_OWORD *)__p;
      *(void *)(v33 + 40) = v56;
      *(_OWORD *)(v33 + 24) = v35;
      __p[1] = 0;
      uint64_t v56 = 0;
      __p[0] = 0;
      *(unsigned char *)(v33 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v57;
      unint64_t v63 = v33 + 56;
      std::vector<std::tuple<std::string,std::string,BOOL>>::__swap_out_circular_buffer(a3, &v61);
      uint64_t v36 = a3[1];
      std::__split_buffer<std::tuple<std::string,std::string,BOOL>>::~__split_buffer((uint64_t)&v61);
      int v37 = SHIBYTE(v56);
      a3[1] = v36;
      if (v37 < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_46;
    }
LABEL_79:
    abort();
  }
  long long v17 = *(_OWORD *)&v54.__r_.__value_.__l.__data_;
  *(void *)(v16 + 16) = *((void *)&v54.__r_.__value_.__l + 2);
  *(_OWORD *)unint64_t v16 = v17;
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = 0uLL;
  uint64_t v18 = v56;
  *(_OWORD *)(v16 + 24) = *(_OWORD *)__p;
  *(void *)(v16 + 40) = v18;
  v54.__r_.__value_.__r.__words[2] = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v56 = 0;
  *(unsigned char *)(v16 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v57;
  a3[1] = v16 + 56;
LABEL_46:
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  char v11 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
LABEL_49:
  if (v11 < 0) {
    goto LABEL_50;
  }
LABEL_51:
  uint64_t v6 = 1;
LABEL_77:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v6;
}

BOOL _collect_paths(char *a1, uint64_t *a2)
{
  if (stat(a1, &v30)) {
    return 0;
  }
  int v5 = v30.st_mode & 0xF000;
  BOOL v6 = v5 == 0x8000;
  if (v5 == 0x8000)
  {
    std::string::basic_string[abi:nn180100]<0>(&v29, a1);
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v7 = &v29;
    }
    else {
      uint64_t v7 = (std::string *)v29.__r_.__value_.__r.__words[0];
    }
    int v8 = basename((char *)v7);
    MEMORY[0x237DBC5F0](&v29, v8);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v23, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
    }
    else {
      std::string v23 = v29;
    }
    BOOL v24 = v6;
    std::string::basic_string[abi:nn180100]<0>(v25, a1);
    std::string __p = v23;
    memset(&v23, 0, sizeof(v23));
    BOOL v28 = v24;
    unint64_t v9 = a2[2];
    unint64_t v10 = a2[1];
    if (v10 >= v9)
    {
      uint64_t v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v10 - *a2) >> 3);
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) > 0x492492492492492) {
        abort();
      }
      unint64_t v15 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v9 - *a2) >> 3);
      if (2 * v15 > v14) {
        unint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x249249249249249) {
        unint64_t v16 = 0x492492492492492;
      }
      else {
        unint64_t v16 = v14;
      }
      v31[4] = a2 + 2;
      if (v16) {
        unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::tuple<std::string,std::string,BOOL>>>(v16);
      }
      else {
        uint64_t v17 = 0;
      }
      unint64_t v18 = v16 + 56 * v13;
      v31[0] = v16;
      v31[1] = v18;
      v31[3] = v16 + 56 * v17;
      long long v19 = *(_OWORD *)v25;
      *(void *)(v18 + 16) = v26;
      *(_OWORD *)unint64_t v18 = v19;
      v25[1] = 0;
      uint64_t v26 = 0;
      v25[0] = 0;
      long long v20 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v18 + 40) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)(v18 + 24) = v20;
      memset(&__p, 0, sizeof(__p));
      *(unsigned char *)(v18 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v28;
      v31[2] = v18 + 56;
      std::vector<std::tuple<std::string,std::string,BOOL>>::__swap_out_circular_buffer(a2, v31);
      uint64_t v21 = a2[1];
      std::__split_buffer<std::tuple<std::string,std::string,BOOL>>::~__split_buffer((uint64_t)v31);
      int v22 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      a2[1] = v21;
      if (v22 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v11 = *(_OWORD *)v25;
      *(void *)(v10 + 16) = v26;
      *(_OWORD *)unint64_t v10 = v11;
      v25[1] = 0;
      uint64_t v26 = 0;
      v25[0] = 0;
      std::string::size_type v12 = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)(v10 + 24) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v10 + 40) = v12;
      memset(&__p, 0, sizeof(__p));
      *(unsigned char *)(v10 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v28;
      a2[1] = v10 + 56;
    }
    if (SHIBYTE(v26) < 0) {
      operator delete(v25[0]);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    return 1;
  }
  return v5 == 0x4000 && (_collect_paths(a1, a1, a2) & 1) != 0;
}

std::string *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_bEEC2B8nn180100IJLm0ELm1ELm2EEJS8_S8_bEJEJEJRS8_SB_bEEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSD_IJDpT2_EEEDpOT3_(std::string *this, long long *a2, long long *a3, std::string::value_type *a4)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  int v8 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v9 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  this[2].__r_.__value_.__s.__data_[0] = *a4;
  return this;
}

uint64_t *std::vector<std::tuple<std::string,std::string,BOOL>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 56;
      long long v6 = *(_OWORD *)(v3 - 56);
      *(void *)(v4 - 40) = *(void *)(v3 - 40);
      *(_OWORD *)(v4 - 56) = v6;
      *(void *)(v3 - 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v3 - 40) = 0;
      *(void *)(v3 - 56) = 0;
      long long v7 = *(_OWORD *)(v3 - 32);
      *(void *)(v4 - 16) = *(void *)(v3 - 16);
      *(_OWORD *)(v4 - 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v7;
      *(void *)(v3 - 24) = 0;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
      *(unsigned char *)(v4 - re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(unsigned char *)(v3 - 8);
      v3 -= 56;
      v4 -= 56;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v8 = *result;
  void *result = v5;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::tuple<std::string,std::string,BOOL>>>(unint64_t a1)
{
  if (a1 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(56 * a1);
}

uint64_t std::__split_buffer<std::tuple<std::string,std::string,BOOL>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = i - 56;
    std::allocator<std::tuple<std::string,std::string,BOOL>>::destroy[abi:nn180100](v4, i - 56);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::allocator<std::tuple<std::string,std::string,BOOL>>::destroy[abi:nn180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void *re::allocInfo_ExternalResolverLoadDescriptorParameters(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_36, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_36))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF74FE8, "ExternalResolverLoadDescriptorParameters");
    __cxa_guard_release(&_MergedGlobals_36);
  }
  return &unk_26AF74FE8;
}

void re::initInfo_ExternalResolverLoadDescriptorParameters(re *this, re::IntrospectionBase *a2)
{
  v10[0] = 0x924A8B63D20795E0;
  v10[1] = "ExternalResolverLoadDescriptorParameters";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v11;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF74FC8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF74FC8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      long long v7 = re::IntrospectionInfo<re::DynamicString>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "assetKey";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF74FC0 = v8;
      __cxa_guard_release(&qword_26AF74FC8);
    }
  }
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 1;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = &qword_26AF74FC0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ExternalResolverLoadDescriptorParameters>;
  *((void *)this + 11) = 0;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ExternalResolverLoadDescriptorParameters>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ExternalResolverLoadDescriptorParameters>;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::ExternalResolverLoadDescriptorParameters>;
  re::IntrospectionRegistry::add(this, v3);
  long long v9 = v11;
}

void *re::internal::defaultConstruct<re::ExternalResolverLoadDescriptorParameters>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  return re::DynamicString::setCapacity((void *)a3, 0);
}

double re::internal::defaultDestruct<re::ExternalResolverLoadDescriptorParameters>(int a1, int a2, re::DynamicString *this)
{
  return re::DynamicString::deinit(this);
}

void *re::internal::defaultConstructV2<re::ExternalResolverLoadDescriptorParameters>(_anonymous_namespace_ *a1)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  return re::DynamicString::setCapacity(a1, 0);
}

uint64_t re::ExternalResolverAssetProvider::ExternalResolverAssetProvider(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, long long *a5, char a6)
{
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)a1 = &unk_26E6CA0C0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  re::DynamicString::setCapacity((void *)(a1 + 24), 0);
  *(void *)(a1 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(a1 + 80) = 0;
  uint64_t v13 = a1 + 72;
  *(void *)(a1 + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF74FE0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF74FE0))
  {
    qword_26AF74FD8 = re::internal::getOrCreateInfo((re::internal *)"ExternalResolverLoadDescriptorParameters", (uint64_t (*)(re::internal *))re::allocInfo_ExternalResolverLoadDescriptorParameters, (re::IntrospectionBase *(*)(void))re::initInfo_ExternalResolverLoadDescriptorParameters, (void (*)(re::IntrospectionBase *))&unk_26AF74FD0, 0);
    uint64_t v13 = a1 + 72;
    __cxa_guard_release(&qword_26AF74FE0);
  }
  re::ExternalResolverAssetProvider::s_loadDescriptorParametersIntrospect = qword_26AF74FD8;
  v16[0] = a2;
  v16[1] = strlen(a2);
  re::DynamicString::operator=((re::DynamicString *)(a1 + 24), (uint64_t)v16);
  *(void *)(a1 + 56) = a4;
  *(void *)(a1 + 64) = a3;
  long long v14 = *a5;
  *(void *)(v13 + 16) = *((void *)a5 + 2);
  *(_OWORD *)uint64_t v13 = v14;
  *(unsigned char *)(a1 + 96) = a6;
  return a1;
}

void re::ExternalResolverAssetProvider::~ExternalResolverAssetProvider(re::ExternalResolverAssetProvider *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::DynamicString::deinit((re::ExternalResolverAssetProvider *)((char *)this + 24));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

re::DynamicString *re::ExternalResolverAssetProvider::load@<X0>(re::ExternalResolverAssetProvider *this@<X0>, const re::AssetLoadDescriptor *a2@<X1>, re::AssetSerializationScheme *a3@<X3>, uint64_t a4@<X8>)
{
  long long v9 = (re::ExternalResolverAssetProvider *)((char *)this + 24);
  BOOL v10 = re::DynamicString::operator!=((uint64_t)a2, (uint64_t)this + 24);
  if (v10)
  {
    if (*((unsigned char *)a2 + 8)) {
      long long v11 = (char *)*((void *)a2 + 2);
    }
    else {
      long long v11 = (char *)a2 + 9;
    }
    if (*((unsigned char *)this + 32)) {
      unint64_t v15 = (char *)*((void *)this + 5);
    }
    else {
      unint64_t v15 = (char *)this + 33;
    }
    uint64_t result = (re::DynamicString *)re::DynamicString::format((re::DynamicString *)"Scheme %s does not match scheme %s.", (re::DynamicString *)&v31, v11, v15);
    long long v20 = v31;
    uint64_t v21 = v32;
    uint64_t v22 = v33;
    *(unsigned char *)a4 = 0;
    *(_OWORD *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v20;
    *(void *)(a4 + 24) = v21;
    *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v22;
  }
  else
  {
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    re::DynamicString::setCapacity(&v34, 0);
    uint64_t v12 = re::AssetLoadDescriptor::getIntrospectableData<re::ExternalResolverLoadDescriptorParameters>(a2, &v34);
    if (v12)
    {
      re::AssetProviderRegistry::getPathFromResolver(*((os_unfair_lock_s **)this + 11), v9, (const re::DynamicString *)&v34, (uint64_t)&v31);
      if ((_BYTE)v31)
      {
        if (*((unsigned char *)a2 + 120)) {
          long long v14 = (char *)*((void *)a2 + 16);
        }
        else {
          long long v14 = (char *)a2 + 121;
        }
        re::loadCompiledOrSourceFile((char *)&v31 + 8, v14, (re::internal::AssetTypeRegistry **)this + 9, (uint64_t)a3, a4);
      }
      else
      {
        re::DynamicString::operator+((re::DynamicString *)&v26, (uint64_t)v9, (re::DynamicString *)&v28);
        long long v23 = v28;
        long long v28 = 0uLL;
        uint64_t v24 = v29;
        uint64_t v25 = v30;
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        *(unsigned char *)a4 = 0;
        *(_OWORD *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v23;
        *(void *)(a4 + 24) = v24;
        *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v25;
        if (v26 && (v27 & 1) != 0) {
          (*(void (**)(void))(*(void *)v26 + 40))();
        }
      }
      if (_BYTE)v31 && *((void *)&v31 + 1) && (v32) {
        (*(void (**)(void))(**((void **)&v31 + 1) + 40))();
      }
    }
    else
    {
      long long v16 = v31;
      uint64_t v17 = v32;
      uint64_t v18 = v33;
      *(unsigned char *)a4 = 0;
      *(_OWORD *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v16;
      *(void *)(a4 + 24) = v17;
      *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v18;
    }
    uint64_t result = v34;
    if (v34 && (v35 & 1) != 0) {
      return (re::DynamicString *)(*(uint64_t (**)(re::DynamicString *, uint64_t))(*(void *)v34 + 40))(v34, v36);
    }
  }
  return result;
}

uint64_t re::AssetLoadDescriptor::getIntrospectableData<re::ExternalResolverLoadDescriptorParameters>(re::AssetLoadDescriptor *a1, re::DynamicString **a2)
{
  uint64_t v2 = a2;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF74FE0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v5 = a1;
    int v7 = __cxa_guard_acquire(&qword_26AF74FE0);
    uint64_t v2 = a2;
    int v8 = v7;
    a1 = v5;
    if (v8)
    {
      qword_26AF74FD8 = re::internal::getOrCreateInfo((re::internal *)"ExternalResolverLoadDescriptorParameters", (uint64_t (*)(re::internal *))re::allocInfo_ExternalResolverLoadDescriptorParameters, (re::IntrospectionBase *(*)(void))re::initInfo_ExternalResolverLoadDescriptorParameters, (void (*)(re::IntrospectionBase *))&unk_26AF74FD0, 0);
      __cxa_guard_release(&qword_26AF74FE0);
      a1 = v5;
      uint64_t v2 = a2;
    }
  }
  uint64_t v3 = (re **)qword_26AF74FD8;
  return re::AssetLoadDescriptor::getIntrospectableData(a1, v3, v2, 0);
}

__n128 re::ExternalResolverAssetProvider::resolveChild@<Q0>(re::ExternalResolverAssetProvider *this@<X0>, const re::AssetLoadDescriptor *a2@<X1>, re::AssetProvider *a3@<X2>, const char *a4@<X3>, uint64_t a5@<X8>)
{
  BOOL v10 = (re::ExternalResolverAssetProvider *)((char *)this + 24);
  BOOL v11 = re::DynamicString::operator!=((uint64_t)a2, (uint64_t)this + 24);
  if (v11)
  {
    if (*((unsigned char *)a2 + 8)) {
      uint64_t v12 = (char *)*((void *)a2 + 2);
    }
    else {
      uint64_t v12 = (char *)a2 + 9;
    }
    if (*((unsigned char *)this + 32)) {
      uint64_t v18 = (char *)*((void *)this + 5);
    }
    else {
      uint64_t v18 = (char *)this + 33;
    }
    re::DynamicString::format((re::DynamicString *)"Scheme %s does not match scheme %s.", (re::DynamicString *)v33, v12, v18);
    __n128 result = *(__n128 *)v33;
    uint64_t v21 = *(void *)&v33[16];
    uint64_t v22 = *(void *)&v33[24];
    *(unsigned char *)a5 = 0;
    *(__n128 *)(a5 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = result;
    *(void *)(a5 + 24) = v21;
    *(void *)(a5 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v22;
  }
  else
  {
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    re::DynamicString::setCapacity(&v43, 0);
    uint64_t v13 = re::AssetLoadDescriptor::getIntrospectableData<re::ExternalResolverLoadDescriptorParameters>(a2, &v43);
    if (v13)
    {
      if (v44) {
        long long v14 = v45;
      }
      else {
        long long v14 = (re::PathBuffer *)((char *)&v44 + 1);
      }
      unint64_t v15 = (_anonymous_namespace_ *)re::AssetProvider::resolveChildPath(a3, v14, (re::DynamicString *)&v41);
      re::AssetProviderRegistry::makeDescriptorForResolver(v10, (const re::DynamicString *)&v41, (const re::DynamicString *)&v23, (uint64_t)v25);
      uint64_t v16 = *(void *)v25;
      memset(v25, 0, sizeof(v25));
      *(void *)uint64_t v33 = v16;
      *(_OWORD *)&v33[24] = *(_OWORD *)&v25[24];
      *(_OWORD *)&v33[8] = *(_OWORD *)&v25[8];
      long long v34 = v26;
      long long v26 = 0u;
      ++v27;
      int v35 = 1;
      long long v36 = v28;
      long long v37 = v29;
      long long v28 = 0u;
      long long v29 = 0u;
      ++v30;
      int v38 = 1;
      *(_OWORD *)long long v39 = *(_OWORD *)v31;
      memset(v31, 0, sizeof(v31));
      long long v40 = v32;
      *(void *)&v39[16] = *(void *)&v31[16];
      long long v32 = 0uLL;
      result.n128_f64[0] = re::Optional<re::AssetLoadDescriptor>::Optional(a5, (uint64_t)v33);
      if (*(void *)&v39[8])
      {
        if (v39[16]) {
          (*(void (**)(double))(**(void **)&v39[8] + 40))(result.n128_f64[0]);
        }
        __n128 result = 0uLL;
        *(_OWORD *)&v39[8] = 0u;
        long long v40 = 0u;
      }
      if (*((void *)&v36 + 1))
      {
        if (*(void *)v39) {
          (*(void (**)(__n128))(**((void **)&v36 + 1) + 40))(result);
        }
        *(void *)long long v39 = 0;
        long long v37 = 0uLL;
        *((void *)&v36 + 1) = 0;
        ++v38;
      }
      if (*(void *)&v33[32])
      {
        if ((void)v36) {
          (*(void (**)(__n128))(**(void **)&v33[32] + 40))(result);
        }
        *(void *)&long long v36 = 0;
        long long v34 = 0uLL;
        *(void *)&v33[32] = 0;
        ++v35;
      }
      if (*(void *)v33)
      {
        if (v33[8]) {
          (*(void (**)(__n128))(**(void **)v33 + 40))(result);
        }
        __n128 result = 0uLL;
        memset(v33, 0, 32);
      }
      if (*(void *)&v31[8])
      {
        if (v31[16]) {
          (*(void (**)(__n128))(**(void **)&v31[8] + 40))(result);
        }
        __n128 result = 0uLL;
        *(_OWORD *)&unsigned char v31[8] = 0u;
        long long v32 = 0u;
      }
      if (*((void *)&v28 + 1))
      {
        if (*(void *)v31) {
          (*(void (**)(__n128))(**((void **)&v28 + 1) + 40))(result);
        }
        *(void *)long long v31 = 0;
        long long v29 = 0uLL;
        *((void *)&v28 + 1) = 0;
        ++v30;
      }
      if (*(void *)&v25[32])
      {
        if ((void)v28) {
          (*(void (**)(__n128))(**(void **)&v25[32] + 40))(result);
        }
        *(void *)&long long v28 = 0;
        long long v26 = 0uLL;
        *(void *)&v25[32] = 0;
        ++v27;
      }
      if (*(void *)v25)
      {
        if (v25[8]) {
          (*(void (**)(__n128))(**(void **)v25 + 40))(result);
        }
        __n128 result = 0uLL;
        memset(v25, 0, 32);
      }
      if (v23 && (v24 & 1) != 0) {
        (*(void (**)(__n128))(*(void *)v23 + 40))(result);
      }
      if (v41 && (v42 & 1) != 0) {
        (*(void (**)(__n128))(*(void *)v41 + 40))(result);
      }
    }
    else
    {
      __n128 result = *(__n128 *)v33;
      uint64_t v19 = *(void *)&v33[16];
      uint64_t v20 = *(void *)&v33[24];
      *(unsigned char *)a5 = 0;
      *(__n128 *)(a5 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = result;
      *(void *)(a5 + 24) = v19;
      *(void *)(a5 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v20;
    }
    if (v43 && (v44 & 1) != 0) {
      (*(void (**)(__n128))(*(void *)v43 + 40))(result);
    }
  }
  return result;
}

uint64_t re::ExternalResolverAssetProvider::isDeviceAssetForRelease(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 96);
}

re::DynamicString *re::ExternalResolverAssetProvider::getAssetPathForRelease@<X0>(_anonymous_namespace_ *a1@<X0>, re::AssetLoadDescriptor *a2@<X1>, const re::internal::AssetTypeRegistry *a3@<X2>, os_unfair_lock_s *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  re::DynamicString::setCapacity(&v39, 0);
  char v9 = re::AssetLoadDescriptor::getIntrospectableData<re::ExternalResolverLoadDescriptorParameters>(a2, &v39);
  BOOL v10 = (char *)a2 + 9;
  if (v9)
  {
    if (*((void *)a2 + 1)) {
      BOOL v10 = (char *)*((void *)a2 + 2);
    }
    if (v40) {
      BOOL v11 = v41;
    }
    else {
      BOOL v11 = (char *)&v40 + 1;
    }
    uint64_t v12 = (_anonymous_namespace_ *)re::DynamicString::format((re::DynamicString *)"%s:%s", (re::DynamicString *)&v36, v10, v11);
    LODWORD(v29) = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v30 = 0;
    uint64_t v13 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)&v29 + 1, 0);
    *((void *)&v33 + 1) = 0;
    long long v34 = 0uLL;
    re::DynamicString::setCapacity(&v33, 0);
    uint64_t v35 = 0;
    if (v37) {
      long long v14 = *(char **)&v38[7];
    }
    else {
      long long v14 = v38;
    }
    double v15 = re::AssetPath::parse((re::AssetPath *)&v29, v14, 0, a3, a4, v26);
    if (!v26[0] && (void)v27)
    {
      if (BYTE8(v27)) {
        (*(void (**)(double))(*(void *)v27 + 40))(v15);
      }
      long long v27 = 0u;
      long long v28 = 0u;
    }
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    long long v23 = *((unint64_t *)&v29 + 1);
    re::DynamicString::setCapacity(&v23, 0);
    re::AssetPath::fullAssetPath((re::DynamicString *)&v29, (re::DynamicString *)&v23);
    long long v16 = v23;
    uint64_t v17 = v24;
    uint64_t v18 = v25;
    *(unsigned char *)a5 = 1;
    *(_OWORD *)(a5 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v16;
    *(void *)(a5 + 24) = v17;
    *(void *)(a5 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v18;
    if ((void)v33)
    {
      if (BYTE8(v33)) {
        (*(void (**)(void))(*(void *)v33 + 40))();
      }
      long long v33 = 0u;
      long long v34 = 0u;
    }
    if (*((void *)&v29 + 1) && (v30 & 1) != 0) {
      (*(void (**)(void))(**((void **)&v29 + 1) + 40))();
    }
    if (v36 && (v37 & 1) != 0) {
      (*(void (**)(void))(*(void *)v36 + 40))();
    }
  }
  else
  {
    if (*((void *)a2 + 1)) {
      BOOL v10 = (char *)*((void *)a2 + 2);
    }
    re::DynamicString::format((re::DynamicString *)"Failed to deserialize parameters for %s", (re::DynamicString *)&v29, v10);
    long long v19 = v29;
    uint64_t v20 = v30;
    uint64_t v21 = v31;
    *(unsigned char *)a5 = 0;
    *(_OWORD *)(a5 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v19;
    *(void *)(a5 + 24) = v20;
    *(void *)(a5 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v21;
  }
  __n128 result = v39;
  if (v39)
  {
    if (v40) {
      return (re::DynamicString *)(*(uint64_t (**)(void))(*(void *)v39 + 40))();
    }
  }
  return result;
}

re::DynamicString *re::ExternalResolverAssetProvider::getDescription(re::ExternalResolverAssetProvider *this, const re::AssetLoadDescriptor *a2, re::DynamicString *a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  re::DynamicString::setCapacity(&v6, 0);
  if (re::AssetLoadDescriptor::getIntrospectableData<re::ExternalResolverLoadDescriptorParameters>(a2, &v6))
  {
    re::DynamicString::operator=(a3, (re::DynamicString *)&v6);
  }
  else
  {
    v10[0] = "mangled";
    v10[1] = 7;
    re::DynamicString::operator=(a3, (uint64_t)v10);
  }
  __n128 result = v6;
  if (v6)
  {
    if (v7) {
      return (re::DynamicString *)(*(uint64_t (**)(void))(*(void *)v6 + 40))();
    }
  }
  return result;
}

uint64_t re::ExternalResolverAssetProvider::schemeName(re::ExternalResolverAssetProvider *this)
{
  if (*((unsigned char *)this + 32)) {
    return *((void *)this + 5);
  }
  else {
    return (uint64_t)this + 33;
  }
}

uint64_t guess_compression_from_magic_number(unsigned __int8 *a1)
{
  if (*(_WORD *)a1 == 30306 && a1[2] == 120) {
    return 2;
  }
  if (*(_WORD *)a1 != 30306 || a1[2] != 52)
  {
    if (*a1 == 253 && *(_DWORD *)(a1 + 1) == 1515747895) {
      return 4;
    }
    if (*(_WORD *)a1 != 25200 || a1[2] != 122) {
      return 0;
    }
    int v5 = a1[3];
    if (v5 != 52)
    {
      if (v5 != 101)
      {
        if (v5 != 120) {
          return 0;
        }
        return 4;
      }
      return 2;
    }
  }
  return 3;
}

void reality_compression_stream_begin()
{
}

uint64_t reality_compression_process_stream_chunk@<X0>(int flags@<W1>, uint64_t result@<X0>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  uint64_t v43 = *(void *)result;
  uint64_t v44 = *(void *)(result + 16);
  *(void *)(a4 + 24) = *(void *)result;
  *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v44;
  uint64_t v9 = a3 + 20;
  uint64_t v8 = *(compression_stream **)a3;
  *(void *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v10 = a3 + 8;
  while (1)
  {
    BOOL v11 = *(const uint8_t **)v6;
    if (*(_DWORD *)(a3 + 56) != 1)
    {
      size_t v13 = *(void *)(v6 + 8);
      long long v14 = *(uint8_t **)(v6 + 16);
      v8->src_ptr = v11;
      v8->src_std::string::size_type size = v13;
      size_t v15 = *(void *)(v6 + 24);
      v8->dst_ptr = v14;
      v8->dst_std::string::size_type size = v15;
      __n128 result = compression_stream_process(v8, flags);
      if (result == -1) {
        goto LABEL_45;
      }
      src_ptr = v8->src_ptr;
      int64_t v17 = *(void *)(v6 + 8) + *(void *)v6 - (void)src_ptr;
      *(void *)uint64_t v6 = src_ptr;
      *(void *)(v6 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v17;
      dst_std::string::size_type size = v8->dst_size;
      *(void *)(v6 + 16) = v8->dst_ptr;
      *(void *)(v6 + 24) = dst_size;
      if (result == 1)
      {
LABEL_46:
        int v38 = 1;
        goto LABEL_47;
      }
      goto LABEL_42;
    }
    unint64_t v12 = *(void *)(v6 + 8);
    if (*(unsigned char *)(a3 + 36))
    {
      if (v12 <= 0xB)
      {
        *(unsigned char *)(a3 + 37) = 0;
LABEL_19:
        *(void *)(a3 + 40) = v12;
        goto LABEL_27;
      }
      uint64_t v19 = *(void *)v11;
      *(_DWORD *)(v10 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *((_DWORD *)v11 + 2);
      *(void *)uint64_t v10 = v19;
      v11 += 12;
      v12 -= 12;
      *(void *)(a3 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = bswap64(*(void *)(a3 + 12));
      *(_WORD *)(a3 + 36) = 4096;
      *(void *)(a3 + 40) = 0;
    }
    if (*(unsigned char *)(a3 + 8) != 112 || *(unsigned char *)(a3 + 9) != 98 || *(unsigned char *)(a3 + 10) != 122)
    {
      *(unsigned char *)(a3 + 37) = 0;
      BOOL v11 = *(const uint8_t **)v6;
      unint64_t v12 = *(void *)(v6 + 8);
      goto LABEL_19;
    }
    unint64_t v20 = *(unsigned __int8 *)(a3 + 37);
    if (*(unsigned char *)(a3 + 37)) {
      break;
    }
LABEL_26:
    *(void *)uint64_t v6 = v11;
    *(void *)(v6 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
LABEL_27:
    size_t v26 = *(void *)(a3 + 40);
    if (v12 < v26) {
      size_t v26 = v12;
    }
    v8->src_ptr = v11;
    v8->src_std::string::size_type size = v26;
    long long v27 = *(uint8_t **)(v6 + 16);
    size_t v28 = *(void *)(v6 + 24);
    v8->dst_ptr = v27;
    v8->dst_std::string::size_type size = v28;
    if (*(unsigned char *)(a3 + 48))
    {
      __n128 result = compression_stream_process(v8, 0);
      if (result == -1)
      {
LABEL_45:
        int v38 = 0;
        goto LABEL_47;
      }
      long long v29 = v8->src_ptr;
      uint64_t v30 = *(const uint8_t **)(v6 + 8);
      uint64_t v31 = &v29[-*(void *)v6];
      *(void *)(a3 + 40) -= v31;
      int64_t v17 = v30 - v31;
      *(void *)uint64_t v6 = v29;
      *(void *)(v6 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v30 - v31;
      size_t v32 = v8->dst_size;
      *(void *)(v6 + 16) = v8->dst_ptr;
      *(void *)(v6 + 24) = v32;
      if (result == 1)
      {
        if (flags && v30 == v31) {
          goto LABEL_46;
        }
        *(_DWORD *)a4 = 2;
        compression_stream_destroy(v8);
        __n128 result = compression_stream_init(v8, *(compression_stream_operation *)(a3 + 56), *(compression_algorithm *)(a3 + 60));
        *(unsigned char *)(a3 + 37) = 16;
        int64_t v17 = *(void *)(v6 + 8);
      }
    }
    else
    {
      if (v26 >= v28) {
        size_t v33 = v28;
      }
      else {
        size_t v33 = v26;
      }
      __n128 result = (uint64_t)memcpy(v27, v11, v33);
      size_t v34 = v8->dst_size;
      uint64_t v35 = &v8->dst_ptr[v33];
      uint64_t v36 = *(void *)(v6 + 8);
      int64_t v17 = v36 - v33;
      *(void *)uint64_t v6 = &v8->src_ptr[v33];
      *(void *)(v6 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v36 - v33;
      *(void *)(v6 + 16) = v35;
      *(void *)(v6 + 24) = v34 - v33;
      size_t v37 = *(void *)(a3 + 40) - v33;
      *(void *)(a3 + 40) = v37;
      if (!v37)
      {
        if (flags && v36 == v33) {
          goto LABEL_46;
        }
        *(_DWORD *)a4 = 2;
        *(unsigned char *)(a3 + 37) = 16;
      }
    }
LABEL_42:
    if (!v17 || !*(void *)(v6 + 24))
    {
      int v38 = 2;
LABEL_47:
      uint64_t v39 = v43;
      uint64_t v40 = v44;
      BOOL v11 = *(const uint8_t **)v6;
      goto LABEL_48;
    }
  }
  if (flags)
  {
    if (!v12 && v20 == 16)
    {
      unint64_t v12 = 0;
      *(unsigned char *)(a3 + 37) = 0;
      *(void *)uint64_t v6 = v11;
      *(void *)(v6 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      goto LABEL_27;
    }
    if (v12 < v20) {
      goto LABEL_45;
    }
  }
  if (v20 >= v12) {
    size_t v21 = v12;
  }
  else {
    size_t v21 = *(unsigned __int8 *)(a3 + 37);
  }
  __n128 result = (uint64_t)memcpy((void *)(v9 - v20 + 16), v11, v21);
  v11 += v21;
  v12 -= v21;
  int v22 = *(unsigned __int8 *)(a3 + 37) - v21;
  *(unsigned char *)(a3 + 37) = v22;
  if (!v22)
  {
    unint64_t v23 = *(void *)(a3 + 20);
    *(void *)(a3 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = bswap64(v23);
    unint64_t v24 = *(void *)(a3 + 28);
    unint64_t v25 = bswap64(v24);
    *(void *)(a3 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v25;
    *(void *)(a3 + 40) = v25;
    *(unsigned char *)(a3 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v24 != v23;
    goto LABEL_26;
  }
  *(void *)uint64_t v6 = v11;
  *(void *)(v6 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
  int v38 = 2;
  uint64_t v39 = v43;
  uint64_t v40 = v44;
LABEL_48:
  *(_DWORD *)a4 = v38;
  uint64_t v41 = &v11[-v39];
  uint64_t v42 = *(void *)(v6 + 16) - v40;
  *(void *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v41;
  *(void *)(a4 + 16) = v42;
  return result;
}

void reality_compression_stream_end(compression_stream **a1)
{
  compression_stream_destroy(*a1);
  if (*a1) {
    MEMORY[0x237DBCBD0](*a1, 0x10D0C405C4BD7A1);
  }
  JUMPOUT(0x237DBCBD0);
}

void *reality_archive_file_pack(char *a1, const char *a2, int a3)
{
  int v5 = zip_file_create(a2);
  if (!v5) {
    return v5;
  }
  std::string __p = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  if (!_collect_paths(a1, (uint64_t *)&__p)) {
    goto LABEL_47;
  }
  unint64_t v6 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * ((v35 - (unsigned char *)__p) >> 3));
  if (v35 == __p) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6;
  }
  std::__introsort<std::_ClassicAlgPolicy,reality_archive_file_pack(char const*,char const*,BOOL)::$_0 &,std::tuple<std::string,std::string,BOOL> *,false>((uint64_t)__p, (long long *)v35, v7, 1);
  if (a3) {
    char v8 = 1;
  }
  else {
    char v8 = 2;
  }
  uint64_t v9 = (char *)__p;
  uint64_t v10 = v35;
  if (__p == v35)
  {
LABEL_45:
    int v5 = (void *)zip_close(v5);
    goto LABEL_48;
  }
  while (1)
  {
    uint64_t v11 = (uint64_t)(v9 + 24);
    int v12 = v9[47];
    if (v9[48]) {
      break;
    }
    if ((v12 & 0x80) != 0) {
      uint64_t v11 = *(void *)v11;
    }
    if (!zip_append_entry(v5, v11, 0, 0, 0)) {
      goto LABEL_47;
    }
LABEL_41:
    v9 += 56;
    if (v9 == v10) {
      goto LABEL_45;
    }
  }
  if ((v12 & 0x80) != 0)
  {
    uint64_t v15 = *((void *)v9 + 4);
    if (v15 == 11)
    {
      uint64_t v17 = *(void *)(*(void *)v11 + 3);
      BOOL v18 = **(void **)v11 == 0x6A2E726564616568;
      unsigned int v19 = 779248996;
LABEL_27:
      uint64_t v21 = v19 | 0x6E6F736A00000000;
      BOOL v20 = v18 && v17 == v21;
      goto LABEL_30;
    }
    char v14 = v8;
    if (v15 != 13) {
      goto LABEL_33;
    }
    size_t v13 = *(uint64_t **)v11;
LABEL_22:
    uint64_t v16 = *v13;
    uint64_t v17 = *(uint64_t *)((char *)v13 + 5);
    BOOL v18 = v16 == 0x70614D7465737361;
    unsigned int v19 = 779116877;
    goto LABEL_27;
  }
  if (v12 != 11)
  {
    size_t v13 = (uint64_t *)(v9 + 24);
    char v14 = v8;
    if (v12 != 13) {
      goto LABEL_33;
    }
    goto LABEL_22;
  }
  BOOL v20 = *(void *)v11 == 0x6A2E726564616568 && *(void *)(v9 + 27) == 0x6E6F736A2E726564;
LABEL_30:
  char v14 = v8;
  if (v20) {
    char v14 = 0;
  }
LABEL_33:
  int v22 = v9;
  if (v9[23] < 0)
  {
    int v22 = *(const char **)v9;
    if ((v12 & 0x80) == 0) {
      goto LABEL_35;
    }
LABEL_44:
    uint64_t v11 = *(void *)v11;
    goto LABEL_35;
  }
  if ((v12 & 0x80) != 0) {
    goto LABEL_44;
  }
LABEL_35:
  unint64_t v23 = malloc_type_malloc(0x10000uLL, 0xC2A086EBuLL);
  entry = (void *)zip_create_entry(v5, v11, 0x63006300080000uLL >> (16 * v14));
  if (entry)
  {
    uint64_t v25 = zip_entry_save_data_begin(entry);
    size_t v26 = fopen(v22, "rb");
    if (v26)
    {
      long long v27 = v26;
      size_t v28 = fread(v23, 1uLL, 0x10000uLL, v26);
      if (v28)
      {
        size_t v29 = v28;
        do
        {
          zip_entry_save_data_write((Bytef *)v23, v29, v25);
          size_t v29 = fread(v23, 1uLL, 0x10000uLL, v27);
        }
        while (v29);
      }
      zip_entry_save_data_end(v25);
      fclose(v27);
      free(v23);
      goto LABEL_41;
    }
  }
  free(v23);
LABEL_47:
  int v5 = 0;
LABEL_48:
  uint64_t v30 = (long long *)__p;
  if (__p)
  {
    uint64_t v31 = (long long *)v35;
    size_t v32 = __p;
    if (v35 != __p)
    {
      do
      {
        uint64_t v31 = (long long *)((char *)v31 - 56);
        std::allocator<std::tuple<std::string,std::string,BOOL>>::destroy[abi:nn180100]((uint64_t)&v36, (uint64_t)v31);
      }
      while (v31 != v30);
      size_t v32 = __p;
    }
    uint64_t v35 = (char *)v30;
    operator delete(v32);
  }
  return v5;
}

void std::__introsort<std::_ClassicAlgPolicy,reality_archive_file_pack(char const*,char const*,BOOL)::$_0 &,std::tuple<std::string,std::string,BOOL> *,false>(uint64_t a1, long long *a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v10 = (uint64_t)a2 - 56;
    uint64_t v93 = (uint64_t)a2 - 168;
    uint64_t v94 = (uint64_t)(a2 - 7);
    unint64_t v11 = a1;
    unint64_t v96 = (unint64_t)a2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v11;
          uint64_t v12 = (uint64_t)a2 - v11;
          uint64_t v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)a2 - v11) >> 3);
          if (!(!v5 & v4))
          {
            switch(v13)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(v10, a1))
                {
                  long long v49 = *(_OWORD *)a1;
                  uint64_t v103 = *(void *)(a1 + 16);
                  long long v102 = v49;
                  long long v50 = *(_OWORD *)v10;
                  *(void *)(a1 + 16) = *(void *)(v10 + 16);
                  *(_OWORD *)a1 = v50;
                  long long v51 = v102;
                  *(void *)(v10 + 16) = v103;
                  *(_OWORD *)uint64_t v10 = v51;
                  long long v102 = *(_OWORD *)(a1 + 24);
                  long long v52 = v102;
                  uint64_t v103 = *(void *)(a1 + 40);
                  uint64_t v53 = v103;
                  uint64_t v54 = *((void *)a2 - 2);
                  *(_OWORD *)(a1 + 24) = *(a2 - 2);
                  *(void *)(a1 + 40) = v54;
                  *((void *)a2 - re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v53;
                  *(a2 - re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v52;
                  LOBYTE(v53) = *(unsigned char *)(a1 + 48);
                  *(unsigned char *)(a1 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *((unsigned char *)a2 - 8);
                  *((unsigned char *)a2 - re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v53;
                }
                break;
              case 3:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,reality_archive_file_pack(char const*,char const*,BOOL)::$_0 &,std::tuple<std::string,std::string,BOOL> *>(a1, a1 + 56, v10);
                break;
              case 4:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,reality_archive_file_pack(char const*,char const*,BOOL)::$_0 &,std::tuple<std::string,std::string,BOOL> *>(a1, a1 + 56, a1 + 112, v10);
                break;
              case 5:
                std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,reality_archive_file_pack(char const*,char const*,BOOL)::$_0 &,std::tuple<std::string,std::string,BOOL> *,0>(a1, a1 + 56, a1 + 112, a1 + 168, v10);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v12 <= 1343)
          {
            if (a4)
            {
              if ((long long *)a1 != a2)
              {
                uint64_t v55 = a1 + 56;
                if ((long long *)(a1 + 56) != a2)
                {
                  uint64_t v56 = 0;
                  uint64_t v57 = a1;
                  do
                  {
                    uint64_t v58 = v55;
                    if (reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(v55, v57))
                    {
                      long long v59 = *(_OWORD *)v58;
                      uint64_t v103 = *(void *)(v58 + 16);
                      long long v102 = v59;
                      *(void *)(v58 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
                      *(void *)(v58 + 16) = 0;
                      *(void *)uint64_t v58 = 0;
                      long long v104 = *(_OWORD *)(v57 + 80);
                      uint64_t v105 = *(void *)(v57 + 96);
                      *(void *)(v57 + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
                      *(void *)(v57 + 96) = 0;
                      *(void *)(v57 + 80) = 0;
                      char v106 = *(unsigned char *)(v57 + 104);
                      uint64_t v60 = v56;
                      while (1)
                      {
                        std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,std::string,BOOL>,std::tuple<std::string,std::string,BOOL>,std::string,std::string,BOOL,0ul,1ul,2ul>(a1 + v60 + 56, (long long *)(a1 + v60));
                        if (!v60) {
                          break;
                        }
                        v60 -= 56;
                        if ((reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()((uint64_t)&v102, v60 + a1) & 1) == 0)
                        {
                          uint64_t v61 = a1 + v60 + 56;
                          goto LABEL_83;
                        }
                      }
                      uint64_t v61 = a1;
LABEL_83:
                      std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,std::string,BOOL>,std::tuple<std::string,std::string,BOOL>,std::string,std::string,BOOL,0ul,1ul,2ul>(v61, &v102);
                      a2 = (long long *)v96;
                      if (SHIBYTE(v105) < 0) {
                        operator delete((void *)v104);
                      }
                      if (SHIBYTE(v103) < 0) {
                        operator delete((void *)v102);
                      }
                    }
                    uint64_t v55 = v58 + 56;
                    v56 += 56;
                    uint64_t v57 = v58;
                  }
                  while ((long long *)(v58 + 56) != a2);
                }
              }
            }
            else if ((long long *)a1 != a2)
            {
              uint64_t v90 = a1 + 56;
              if ((long long *)(a1 + 56) != a2)
              {
                do
                {
                  uint64_t v91 = v90;
                  if (reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(v90, a1))
                  {
                    long long v92 = *(_OWORD *)v91;
                    uint64_t v103 = *(void *)(v91 + 16);
                    long long v102 = v92;
                    *(void *)(v91 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
                    *(void *)(v91 + 16) = 0;
                    *(void *)uint64_t v91 = 0;
                    long long v104 = *(_OWORD *)(a1 + 80);
                    uint64_t v105 = *(void *)(a1 + 96);
                    *(void *)(a1 + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
                    *(void *)(a1 + 96) = 0;
                    *(void *)(a1 + 80) = 0;
                    char v106 = *(unsigned char *)(a1 + 104);
                    do
                    {
                      std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,std::string,BOOL>,std::tuple<std::string,std::string,BOOL>,std::string,std::string,BOOL,0ul,1ul,2ul>(a1 + 56, (long long *)a1);
                      a1 -= 56;
                    }
                    while ((reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()((uint64_t)&v102, a1) & 1) != 0);
                    std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,std::string,BOOL>,std::tuple<std::string,std::string,BOOL>,std::string,std::string,BOOL,0ul,1ul,2ul>(a1 + 56, &v102);
                    if (SHIBYTE(v105) < 0) {
                      operator delete((void *)v104);
                    }
                    if (SHIBYTE(v103) < 0) {
                      operator delete((void *)v102);
                    }
                  }
                  uint64_t v90 = v91 + 56;
                  a1 = v91;
                }
                while ((long long *)(v91 + 56) != a2);
              }
            }
            return;
          }
          if (!a3)
          {
            if ((long long *)a1 != a2)
            {
              int64_t v62 = (unint64_t)(v13 - 2) >> 1;
              int64_t v63 = v62;
              do
              {
                int64_t v64 = v63;
                if (v62 >= v63)
                {
                  uint64_t v65 = (2 * v63) | 1;
                  uint64_t v66 = (long long *)(a1 + 56 * v65);
                  if (2 * v63 + 2 < v13
                    && reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(a1 + 56 * v65, (uint64_t)v66 + 56))
                  {
                    uint64_t v66 = (long long *)((char *)v66 + 56);
                    uint64_t v65 = 2 * v64 + 2;
                  }
                  uint64_t v67 = a1 + 56 * v64;
                  a2 = (long long *)v96;
                  if ((reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()((uint64_t)v66, v67) & 1) == 0)
                  {
                    long long v68 = *(_OWORD *)v67;
                    uint64_t v103 = *(void *)(v67 + 16);
                    long long v102 = v68;
                    *(void *)(v67 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
                    *(void *)(v67 + 16) = 0;
                    *(void *)uint64_t v67 = 0;
                    long long v69 = *(_OWORD *)(v67 + 24);
                    uint64_t v105 = *(void *)(v67 + 40);
                    long long v104 = v69;
                    *(void *)(v67 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
                    *(void *)(v67 + 40) = 0;
                    *(void *)(v67 + 24) = 0;
                    char v106 = *(unsigned char *)(v67 + 48);
                    do
                    {
                      uint64_t v70 = (uint64_t)v66;
                      std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,std::string,BOOL>,std::tuple<std::string,std::string,BOOL>,std::string,std::string,BOOL,0ul,1ul,2ul>(v67, v66);
                      if (v62 < v65) {
                        break;
                      }
                      uint64_t v71 = (2 * v65) | 1;
                      uint64_t v66 = (long long *)(a1 + 56 * v71);
                      uint64_t v72 = 2 * v65 + 2;
                      if (v72 < v13
                        && reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(a1 + 56 * v71, (uint64_t)v66 + 56))
                      {
                        uint64_t v66 = (long long *)((char *)v66 + 56);
                        uint64_t v71 = v72;
                      }
                      uint64_t v67 = v70;
                      uint64_t v65 = v71;
                    }
                    while (!reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()((uint64_t)v66, (uint64_t)&v102));
                    std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,std::string,BOOL>,std::tuple<std::string,std::string,BOOL>,std::string,std::string,BOOL,0ul,1ul,2ul>(v70, &v102);
                    if (SHIBYTE(v105) < 0) {
                      operator delete((void *)v104);
                    }
                    a2 = (long long *)v96;
                    if (SHIBYTE(v103) < 0) {
                      operator delete((void *)v102);
                    }
                  }
                }
                int64_t v63 = v64 - 1;
              }
              while (v64);
              int64_t v73 = v12 / 0x38uLL;
              uint64_t v95 = (long long *)(a1 + 24);
              do
              {
                uint64_t v74 = 0;
                long long v75 = *(_OWORD *)a1;
                uint64_t v98 = *(void *)(a1 + 16);
                *(_OWORD *)uint64_t v97 = v75;
                *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
                *(void *)(a1 + 16) = 0;
                *(void *)a1 = 0;
                long long v76 = *v95;
                uint64_t v100 = *(void *)(a1 + 40);
                long long __p = v76;
                *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
                *(void *)(a1 + 40) = 0;
                *(void *)uint64_t v95 = 0;
                char v101 = *(unsigned char *)(a1 + 48);
                uint64_t v77 = a1;
                do
                {
                  uint64_t v78 = v77 + 56 * v74 + 56;
                  uint64_t v79 = (2 * v74) | 1;
                  uint64_t v80 = 2 * v74 + 2;
                  if (v80 < v73
                    && reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(v77 + 56 * v74 + 56, v77 + 56 * v74 + 112))
                  {
                    v78 += 56;
                    uint64_t v79 = v80;
                  }
                  std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,std::string,BOOL>,std::tuple<std::string,std::string,BOOL>,std::string,std::string,BOOL,0ul,1ul,2ul>(v77, (long long *)v78);
                  uint64_t v77 = v78;
                  uint64_t v74 = v79;
                }
                while (v79 <= (uint64_t)((unint64_t)(v73 - 2) >> 1));
                uint64_t v81 = (long long *)((char *)a2 - 56);
                if ((long long *)v78 == (long long *)((char *)a2 - 56))
                {
                  unint64_t v82 = (long long *)((char *)a2 - 56);
                  std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,std::string,BOOL>,std::tuple<std::string,std::string,BOOL>,std::string,std::string,BOOL,0ul,1ul,2ul>(v78, (long long *)v97);
                }
                else
                {
                  std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,std::string,BOOL>,std::tuple<std::string,std::string,BOOL>,std::string,std::string,BOOL,0ul,1ul,2ul>(v78, v81);
                  unint64_t v82 = (long long *)((char *)a2 - 56);
                  std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,std::string,BOOL>,std::tuple<std::string,std::string,BOOL>,std::string,std::string,BOOL,0ul,1ul,2ul>((uint64_t)v81, (long long *)v97);
                  uint64_t v83 = v78 - a1 + 56;
                  if (v83 >= 57)
                  {
                    unint64_t v84 = (v83 / 0x38uLL - 2) >> 1;
                    unint64_t v85 = (long long *)(a1 + 56 * v84);
                    if (reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()((uint64_t)v85, v78))
                    {
                      long long v86 = *(_OWORD *)v78;
                      uint64_t v103 = *(void *)(v78 + 16);
                      long long v102 = v86;
                      *(void *)(v78 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
                      *(void *)(v78 + 16) = 0;
                      *(void *)uint64_t v78 = 0;
                      long long v87 = *(_OWORD *)(v78 + 24);
                      uint64_t v105 = *(void *)(v78 + 40);
                      long long v104 = v87;
                      *(void *)(v78 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
                      *(void *)(v78 + 40) = 0;
                      *(void *)(v78 + 24) = 0;
                      char v106 = *(unsigned char *)(v78 + 48);
                      do
                      {
                        uint64_t v88 = (uint64_t)v85;
                        std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,std::string,BOOL>,std::tuple<std::string,std::string,BOOL>,std::string,std::string,BOOL,0ul,1ul,2ul>(v78, v85);
                        if (!v84) {
                          break;
                        }
                        unint64_t v84 = (v84 - 1) >> 1;
                        unint64_t v85 = (long long *)(a1 + 56 * v84);
                        uint64_t v78 = v88;
                      }
                      while ((reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()((uint64_t)v85, (uint64_t)&v102) & 1) != 0);
                      std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,std::string,BOOL>,std::tuple<std::string,std::string,BOOL>,std::string,std::string,BOOL,0ul,1ul,2ul>(v88, &v102);
                      if (SHIBYTE(v105) < 0) {
                        operator delete((void *)v104);
                      }
                      if (SHIBYTE(v103) < 0) {
                        operator delete((void *)v102);
                      }
                    }
                  }
                }
                if (SHIBYTE(v100) < 0) {
                  operator delete((void *)__p);
                }
                if (SHIBYTE(v98) < 0) {
                  operator delete(v97[0]);
                }
                BOOL v89 = v73-- <= 2;
                a2 = v82;
              }
              while (!v89);
            }
            return;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          uint64_t v15 = a1 + 56 * ((unint64_t)v13 >> 1);
          if ((unint64_t)v12 < 0x1C01)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,reality_archive_file_pack(char const*,char const*,BOOL)::$_0 &,std::tuple<std::string,std::string,BOOL> *>(v15, a1, v10);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,reality_archive_file_pack(char const*,char const*,BOOL)::$_0 &,std::tuple<std::string,std::string,BOOL> *>(a1, v15, v10);
            uint64_t v16 = 56 * v14;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,reality_archive_file_pack(char const*,char const*,BOOL)::$_0 &,std::tuple<std::string,std::string,BOOL> *>(a1 + 56, v16 + a1 - 56, v94);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,reality_archive_file_pack(char const*,char const*,BOOL)::$_0 &,std::tuple<std::string,std::string,BOOL> *>(a1 + 112, a1 + 56 + v16, v93);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,reality_archive_file_pack(char const*,char const*,BOOL)::$_0 &,std::tuple<std::string,std::string,BOOL> *>(v16 + a1 - 56, v15, a1 + 56 + v16);
            long long v17 = *(_OWORD *)a1;
            uint64_t v103 = *(void *)(a1 + 16);
            long long v102 = v17;
            uint64_t v18 = *(void *)(v15 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v15;
            *(void *)(a1 + 16) = v18;
            long long v19 = v102;
            *(void *)(v15 + 16) = v103;
            *(_OWORD *)uint64_t v15 = v19;
            long long v102 = *(_OWORD *)(a1 + 24);
            long long v20 = v102;
            uint64_t v103 = *(void *)(a1 + 40);
            uint64_t v21 = v103;
            uint64_t v22 = *(void *)(v15 + 40);
            *(_OWORD *)(a1 + 24) = *(_OWORD *)(v15 + 24);
            *(void *)(a1 + 40) = v22;
            *(void *)(v15 + 40) = v21;
            *(_OWORD *)(v15 + 24) = v20;
            LOBYTE(v21) = *(unsigned char *)(a1 + 48);
            *(unsigned char *)(a1 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(unsigned char *)(v15 + 48);
            *(unsigned char *)(v15 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v21;
          }
          --a3;
          if ((a4 & 1) != 0
            || (reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(a1 - 56, a1) & 1) != 0)
          {
            break;
          }
          long long v38 = *(_OWORD *)a1;
          uint64_t v103 = *(void *)(a1 + 16);
          long long v102 = v38;
          *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)a1 = 0;
          long long v39 = *(_OWORD *)(a1 + 24);
          uint64_t v105 = *(void *)(a1 + 40);
          long long v104 = v39;
          *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
          *(void *)(a1 + 40) = 0;
          *(void *)(a1 + 24) = 0;
          char v106 = *(unsigned char *)(a1 + 48);
          if (reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()((uint64_t)&v102, v10))
          {
            unint64_t v11 = a1;
            a2 = (long long *)v96;
            do
              v11 += 56;
            while ((reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()((uint64_t)&v102, v11) & 1) == 0);
          }
          else
          {
            unint64_t v40 = a1 + 56;
            a2 = (long long *)v96;
            do
            {
              unint64_t v11 = v40;
              if (v40 >= v96) {
                break;
              }
              int v41 = reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()((uint64_t)&v102, v40);
              unint64_t v40 = v11 + 56;
            }
            while (!v41);
          }
          unint64_t v42 = (unint64_t)a2;
          if (v11 < (unint64_t)a2)
          {
            unint64_t v42 = (unint64_t)a2;
            do
              v42 -= 56;
            while ((reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()((uint64_t)&v102, v42) & 1) != 0);
          }
          while (v11 < v42)
          {
            long long v43 = *(_OWORD *)v11;
            uint64_t v98 = *(void *)(v11 + 16);
            *(_OWORD *)uint64_t v97 = v43;
            long long v44 = *(_OWORD *)v42;
            *(void *)(v11 + 16) = *(void *)(v42 + 16);
            *(_OWORD *)unint64_t v11 = v44;
            long long v45 = *(_OWORD *)v97;
            *(void *)(v42 + 16) = v98;
            *(_OWORD *)unint64_t v42 = v45;
            uint64_t v46 = *(void *)(v11 + 40);
            long long v47 = *(_OWORD *)(v11 + 24);
            uint64_t v48 = *(void *)(v42 + 40);
            *(_OWORD *)(v11 + 24) = *(_OWORD *)(v42 + 24);
            *(void *)(v11 + 40) = v48;
            *(_OWORD *)(v42 + 24) = v47;
            *(void *)(v42 + 40) = v46;
            LOBYTE(v46) = *(unsigned char *)(v11 + 48);
            *(unsigned char *)(v11 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(unsigned char *)(v42 + 48);
            *(unsigned char *)(v42 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v46;
            do
              v11 += 56;
            while (!reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()((uint64_t)&v102, v11));
            do
              v42 -= 56;
            while ((reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()((uint64_t)&v102, v42) & 1) != 0);
          }
          if (v11 - 56 != a1) {
            std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,std::string,BOOL>,std::tuple<std::string,std::string,BOOL>,std::string,std::string,BOOL,0ul,1ul,2ul>(a1, (long long *)(v11 - 56));
          }
          std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,std::string,BOOL>,std::tuple<std::string,std::string,BOOL>,std::string,std::string,BOOL,0ul,1ul,2ul>(v11 - 56, &v102);
          if (SHIBYTE(v105) < 0) {
            operator delete((void *)v104);
          }
          if (SHIBYTE(v103) < 0) {
            operator delete((void *)v102);
          }
          a4 = 0;
        }
        uint64_t v23 = 0;
        long long v24 = *(_OWORD *)a1;
        uint64_t v103 = *(void *)(a1 + 16);
        long long v102 = v24;
        *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        long long v25 = *(_OWORD *)(a1 + 24);
        uint64_t v105 = *(void *)(a1 + 40);
        long long v104 = v25;
        *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
        *(void *)(a1 + 40) = 0;
        *(void *)(a1 + 24) = 0;
        char v106 = *(unsigned char *)(a1 + 48);
        do
          v23 += 56;
        while ((reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(v23 + a1, (uint64_t)&v102) & 1) != 0);
        unint64_t v26 = a1 + v23;
        unint64_t v27 = v96;
        BOOL v5 = v23 == 56;
        a2 = (long long *)v96;
        if (v5)
        {
          unint64_t v27 = v96;
          do
          {
            if (v26 >= v27) {
              break;
            }
            v27 -= 56;
          }
          while ((reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(v27, (uint64_t)&v102) & 1) == 0);
        }
        else
        {
          do
            v27 -= 56;
          while (!reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(v27, (uint64_t)&v102));
        }
        if (v26 >= v27)
        {
          uint64_t v36 = (long long *)(v26 - 56);
        }
        else
        {
          unint64_t v28 = v26;
          unint64_t v29 = v27;
          do
          {
            long long v30 = *(_OWORD *)v28;
            uint64_t v98 = *(void *)(v28 + 16);
            *(_OWORD *)uint64_t v97 = v30;
            long long v31 = *(_OWORD *)v29;
            *(void *)(v28 + 16) = *(void *)(v29 + 16);
            *(_OWORD *)unint64_t v28 = v31;
            long long v32 = *(_OWORD *)v97;
            *(void *)(v29 + 16) = v98;
            *(_OWORD *)unint64_t v29 = v32;
            uint64_t v33 = *(void *)(v28 + 40);
            long long v34 = *(_OWORD *)(v28 + 24);
            uint64_t v35 = *(void *)(v29 + 40);
            *(_OWORD *)(v28 + 24) = *(_OWORD *)(v29 + 24);
            *(void *)(v28 + 40) = v35;
            *(_OWORD *)(v29 + 24) = v34;
            *(void *)(v29 + 40) = v33;
            LOBYTE(v33) = *(unsigned char *)(v28 + 48);
            *(unsigned char *)(v28 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(unsigned char *)(v29 + 48);
            *(unsigned char *)(v29 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v33;
            do
              v28 += 56;
            while ((reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(v28, (uint64_t)&v102) & 1) != 0);
            do
              v29 -= 56;
            while (!reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(v29, (uint64_t)&v102));
          }
          while (v28 < v29);
          uint64_t v36 = (long long *)(v28 - 56);
        }
        if (v36 != (long long *)a1) {
          std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,std::string,BOOL>,std::tuple<std::string,std::string,BOOL>,std::string,std::string,BOOL,0ul,1ul,2ul>(a1, v36);
        }
        std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,std::string,BOOL>,std::tuple<std::string,std::string,BOOL>,std::string,std::string,BOOL,0ul,1ul,2ul>((uint64_t)v36, &v102);
        if (SHIBYTE(v105) < 0) {
          operator delete((void *)v104);
        }
        if (SHIBYTE(v103) < 0) {
          operator delete((void *)v102);
        }
        if (v26 >= v27) {
          break;
        }
LABEL_36:
        std::__introsort<std::_ClassicAlgPolicy,reality_archive_file_pack(char const*,char const*,BOOL)::$_0 &,std::tuple<std::string,std::string,BOOL> *,false>(a1, v36, a3, a4 & 1);
        a4 = 0;
        unint64_t v11 = (unint64_t)v36 + 56;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,reality_archive_file_pack(char const*,char const*,BOOL)::$_0 &,std::tuple<std::string,std::string,BOOL> *>(a1, (uint64_t)v36);
      unint64_t v11 = (unint64_t)v36 + 56;
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,reality_archive_file_pack(char const*,char const*,BOOL)::$_0 &,std::tuple<std::string,std::string,BOOL> *>((uint64_t)v36 + 56, v96))
      {
        break;
      }
      if (!v37) {
        goto LABEL_36;
      }
    }
    a2 = v36;
    if (!v37) {
      continue;
    }
    break;
  }
}

uint64_t reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  char v4 = *(void **)(a1 + 24);
  uint64_t v2 = (void *)(a1 + 24);
  uint64_t v3 = v4;
  size_t v5 = v2[1];
  if (*((char *)v2 + 23) >= 0)
  {
    size_t v6 = *((unsigned __int8 *)v2 + 23);
  }
  else
  {
    uint64_t v2 = v3;
    size_t v6 = v5;
  }
  uint64_t v9 = *(uint64_t **)(a2 + 24);
  uint64_t v7 = a2 + 24;
  char v8 = v9;
  uint64_t v10 = *(unsigned __int8 *)(v7 + 23);
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(v7 + 8);
  }
  else {
    char v8 = (uint64_t *)v7;
  }
  if (v10 != 11)
  {
    if (v6 == 11)
    {
      if (*v2 == 0x6A2E726564616568 && *(void *)((char *)v2 + 3) == 0x6E6F736A2E726564) {
        return 1;
      }
      if (v10 != 13) {
        return 0;
      }
    }
    else if (v10 != 13)
    {
      goto LABEL_29;
    }
    if (*v8 ^ 0x70614D7465737361 | *(uint64_t *)((char *)v8 + 5) ^ 0x6E6F736A2E70614DLL) {
      BOOL v16 = v6 == 13;
    }
    else {
      BOOL v16 = 0;
    }
    if (v16) {
      return memcmp(v2, "assetMap.json", v6) == 0;
    }
    return 0;
  }
  uint64_t v11 = *v8;
  uint64_t v12 = *(uint64_t *)((char *)v8 + 3);
  if (v11 == 0x6A2E726564616568 && v12 == 0x6E6F736A2E726564) {
    return 0;
  }
  if (v6 == 11) {
    return *v2 == 0x6A2E726564616568 && *(void *)((char *)v2 + 3) == 0x6E6F736A2E726564;
  }
LABEL_29:
  if (v6 != 13) {
    return 0;
  }
  return memcmp(v2, "assetMap.json", v6) == 0;
}

__n128 std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,reality_archive_file_pack(char const*,char const*,BOOL)::$_0 &,std::tuple<std::string,std::string,BOOL> *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,reality_archive_file_pack(char const*,char const*,BOOL)::$_0 &,std::tuple<std::string,std::string,BOOL> *>(a1, a2, a3, a4);
  if (reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(a5, a4))
  {
    uint64_t v11 = *(void *)(a4 + 16);
    long long v12 = *(_OWORD *)a4;
    uint64_t v13 = *(void *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(void *)(a4 + 16) = v13;
    *(_OWORD *)a5 = v12;
    *(void *)(a5 + 16) = v11;
    uint64_t v14 = *(void *)(a4 + 40);
    long long v15 = *(_OWORD *)(a4 + 24);
    uint64_t v16 = *(void *)(a5 + 40);
    *(_OWORD *)(a4 + 24) = *(_OWORD *)(a5 + 24);
    *(void *)(a4 + 40) = v16;
    *(_OWORD *)(a5 + 24) = v15;
    *(void *)(a5 + 40) = v14;
    LOBYTE(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = *(unsigned char *)(a4 + 48);
    *(unsigned char *)(a4 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(unsigned char *)(a5 + 48);
    *(unsigned char *)(a5 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v14;
    if (reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(a4, a3))
    {
      uint64_t v17 = *(void *)(a3 + 16);
      long long v18 = *(_OWORD *)a3;
      uint64_t v19 = *(void *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(void *)(a3 + 16) = v19;
      *(_OWORD *)a4 = v18;
      *(void *)(a4 + 16) = v17;
      uint64_t v20 = *(void *)(a3 + 40);
      long long v21 = *(_OWORD *)(a3 + 24);
      uint64_t v22 = *(void *)(a4 + 40);
      *(_OWORD *)(a3 + 24) = *(_OWORD *)(a4 + 24);
      *(void *)(a3 + 40) = v22;
      *(_OWORD *)(a4 + 24) = v21;
      *(void *)(a4 + 40) = v20;
      char v23 = *(unsigned char *)(a3 + 48);
      *(unsigned char *)(a3 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(unsigned char *)(a4 + 48);
      *(unsigned char *)(a4 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v23;
      if (reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(a3, a2))
      {
        uint64_t v24 = *(void *)(a2 + 16);
        long long v25 = *(_OWORD *)a2;
        uint64_t v26 = *(void *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(void *)(a2 + 16) = v26;
        *(_OWORD *)a3 = v25;
        *(void *)(a3 + 16) = v24;
        uint64_t v27 = *(void *)(a2 + 40);
        long long v28 = *(_OWORD *)(a2 + 24);
        uint64_t v29 = *(void *)(a3 + 40);
        *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
        *(void *)(a2 + 40) = v29;
        *(_OWORD *)(a3 + 24) = v28;
        *(void *)(a3 + 40) = v27;
        char v30 = *(unsigned char *)(a2 + 48);
        *(unsigned char *)(a2 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(unsigned char *)(a3 + 48);
        *(unsigned char *)(a3 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v30;
        if (reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(a2, a1))
        {
          uint64_t v31 = *(void *)(a1 + 16);
          long long v32 = *(_OWORD *)a1;
          uint64_t v33 = *(void *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v33;
          *(_OWORD *)a2 = v32;
          *(void *)(a2 + 16) = v31;
          uint64_t v34 = *(void *)(a1 + 40);
          __n128 result = *(__n128 *)(a1 + 24);
          uint64_t v35 = *(void *)(a2 + 40);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
          *(void *)(a1 + 40) = v35;
          *(__n128 *)(a2 + 24) = result;
          *(void *)(a2 + 40) = v34;
          char v36 = *(unsigned char *)(a1 + 48);
          *(unsigned char *)(a1 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(unsigned char *)(a2 + 48);
          *(unsigned char *)(a2 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v36;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,reality_archive_file_pack(char const*,char const*,BOOL)::$_0 &,std::tuple<std::string,std::string,BOOL> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(a2, a1);
  uint64_t result = reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(a3, a2);
  if (v6)
  {
    uint64_t v8 = a1 + 24;
    if (result)
    {
      uint64_t v9 = (char *)(a1 + 48);
      uint64_t v10 = *(void *)(a1 + 16);
      long long v11 = *(_OWORD *)a1;
      uint64_t v12 = *(void *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(void *)(a1 + 16) = v12;
    }
    else
    {
      uint64_t v26 = *(void *)(a1 + 16);
      long long v27 = *(_OWORD *)a1;
      uint64_t v28 = *(void *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = v28;
      *(_OWORD *)a2 = v27;
      *(void *)(a2 + 16) = v26;
      uint64_t v29 = *(void *)(a1 + 40);
      long long v30 = *(_OWORD *)v8;
      uint64_t v31 = *(void *)(a2 + 40);
      *(_OWORD *)uint64_t v8 = *(_OWORD *)(a2 + 24);
      *(void *)(a1 + 40) = v31;
      *(_OWORD *)(a2 + 24) = v30;
      *(void *)(a2 + 40) = v29;
      uint64_t v9 = (char *)(a2 + 48);
      LOBYTE(v29) = *(unsigned char *)(a1 + 48);
      *(unsigned char *)(a1 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(unsigned char *)(a2 + 48);
      *(unsigned char *)(a2 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v29;
      uint64_t result = reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(a3, a2);
      if (!result) {
        return result;
      }
      uint64_t v8 = a2 + 24;
      uint64_t v10 = *(void *)(a2 + 16);
      long long v11 = *(_OWORD *)a2;
      uint64_t v32 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v32;
    }
    *(_OWORD *)a3 = v11;
    *(void *)(a3 + 16) = v10;
    uint64_t v33 = *(void *)(v8 + 16);
    long long v34 = *(_OWORD *)v8;
    uint64_t v35 = *(void *)(a3 + 40);
    *(_OWORD *)uint64_t v8 = *(_OWORD *)(a3 + 24);
    *(void *)(v8 + 16) = v35;
    *(_OWORD *)(a3 + 24) = v34;
    *(void *)(a3 + 40) = v33;
    uint64_t v19 = (char *)(a3 + 48);
    goto LABEL_10;
  }
  if (result)
  {
    uint64_t v13 = *(void *)(a2 + 16);
    long long v14 = *(_OWORD *)a2;
    uint64_t v15 = *(void *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(void *)(a2 + 16) = v15;
    *(_OWORD *)a3 = v14;
    *(void *)(a3 + 16) = v13;
    uint64_t v16 = *(void *)(a2 + 40);
    long long v17 = *(_OWORD *)(a2 + 24);
    uint64_t v18 = *(void *)(a3 + 40);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
    *(void *)(a2 + 40) = v18;
    *(_OWORD *)(a3 + 24) = v17;
    *(void *)(a3 + 40) = v16;
    uint64_t v19 = (char *)(a2 + 48);
    LOBYTE(v16) = *(unsigned char *)(a2 + 48);
    *(unsigned char *)(a2 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(unsigned char *)(a3 + 48);
    *(unsigned char *)(a3 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v16;
    uint64_t result = reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(a2, a1);
    if (result)
    {
      uint64_t v20 = *(void *)(a1 + 16);
      long long v21 = *(_OWORD *)a1;
      uint64_t v22 = *(void *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = v22;
      *(_OWORD *)a2 = v21;
      *(void *)(a2 + 16) = v20;
      uint64_t v23 = *(void *)(a1 + 40);
      long long v24 = *(_OWORD *)(a1 + 24);
      uint64_t v25 = *(void *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(void *)(a1 + 40) = v25;
      *(_OWORD *)(a2 + 24) = v24;
      *(void *)(a2 + 40) = v23;
      uint64_t v9 = (char *)(a1 + 48);
LABEL_10:
      char v36 = *v9;
      *uint64_t v9 = *v19;
      *uint64_t v19 = v36;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,reality_archive_file_pack(char const*,char const*,BOOL)::$_0 &,std::tuple<std::string,std::string,BOOL> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x6DB6DB6DB6DB6DB7 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      char v6 = (_OWORD *)(a2 - 56);
      if (reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(a2 - 56, a1))
      {
        uint64_t v7 = *(void *)(a1 + 16);
        long long v8 = *(_OWORD *)a1;
        uint64_t v9 = *(void *)(a2 - 40);
        *(_OWORD *)a1 = *v6;
        *(void *)(a1 + 16) = v9;
        *char v6 = v8;
        *(void *)(a2 - 40) = v7;
        uint64_t v10 = *(void *)(a1 + 40);
        long long v11 = *(_OWORD *)(a1 + 24);
        uint64_t v12 = *(void *)(a2 - 16);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 - 32);
        *(void *)(a1 + 40) = v12;
        *(_OWORD *)(a2 - 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v11;
        *(void *)(a2 - 16) = v10;
        LOBYTE(v10) = *(unsigned char *)(a1 + 48);
        *(unsigned char *)(a1 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(unsigned char *)(a2 - 8);
        *(unsigned char *)(a2 - re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v10;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,reality_archive_file_pack(char const*,char const*,BOOL)::$_0 &,std::tuple<std::string,std::string,BOOL> *>(a1, a1 + 56, a2 - 56);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,reality_archive_file_pack(char const*,char const*,BOOL)::$_0 &,std::tuple<std::string,std::string,BOOL> *>(a1, a1 + 56, a1 + 112, a2 - 56);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,reality_archive_file_pack(char const*,char const*,BOOL)::$_0 &,std::tuple<std::string,std::string,BOOL> *,0>(a1, a1 + 56, a1 + 112, a1 + 168, a2 - 56);
      return 1;
    default:
      uint64_t v13 = a1 + 112;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,reality_archive_file_pack(char const*,char const*,BOOL)::$_0 &,std::tuple<std::string,std::string,BOOL> *>(a1, a1 + 56, a1 + 112);
      uint64_t v14 = a1 + 168;
      if (a1 + 168 == a2) {
        return 1;
      }
      uint64_t v15 = 0;
      int v16 = 0;
      break;
  }
  while (1)
  {
    if (reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(v14, v13))
    {
      *(_OWORD *)long long v21 = *(_OWORD *)v14;
      uint64_t v22 = *(void *)(v14 + 16);
      *(void *)uint64_t v14 = 0;
      *(void *)(v14 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      long long v17 = *(_OWORD *)(v14 + 24);
      *(void *)(v14 + 16) = 0;
      *(void *)(v14 + 24) = 0;
      long long __p = v17;
      uint64_t v24 = *(void *)(v14 + 40);
      char v25 = *(unsigned char *)(v14 + 48);
      uint64_t v18 = v15;
      *(void *)(v14 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
      *(void *)(v14 + 40) = 0;
      while (1)
      {
        std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,std::string,BOOL>,std::tuple<std::string,std::string,BOOL>,std::string,std::string,BOOL,0ul,1ul,2ul>(a1 + v18 + 168, (long long *)(a1 + v18 + 112));
        if (v18 == -112) {
          break;
        }
        char v19 = reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()((uint64_t)v21, a1 + v18 + 56);
        v18 -= 56;
        if ((v19 & 1) == 0)
        {
          uint64_t v20 = a1 + v18 + 168;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,std::string,BOOL>,std::tuple<std::string,std::string,BOOL>,std::string,std::string,BOOL,0ul,1ul,2ul>(v20, (long long *)v21);
      if (SHIBYTE(v24) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v22) < 0) {
        operator delete(v21[0]);
      }
      if (++v16 == 8) {
        return v14 + 56 == a2;
      }
    }
    uint64_t v13 = v14;
    v15 += 56;
    v14 += 56;
    if (v14 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,reality_archive_file_pack(char const*,char const*,BOOL)::$_0 &,std::tuple<std::string,std::string,BOOL> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,reality_archive_file_pack(char const*,char const*,BOOL)::$_0 &,std::tuple<std::string,std::string,BOOL> *>(a1, a2, a3);
  if (reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(a4, a3))
  {
    uint64_t v9 = *(void *)(a3 + 16);
    long long v10 = *(_OWORD *)a3;
    uint64_t v11 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v11;
    *(_OWORD *)a4 = v10;
    *(void *)(a4 + 16) = v9;
    uint64_t v12 = *(void *)(a3 + 40);
    long long v13 = *(_OWORD *)(a3 + 24);
    uint64_t v14 = *(void *)(a4 + 40);
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(a4 + 24);
    *(void *)(a3 + 40) = v14;
    *(_OWORD *)(a4 + 24) = v13;
    *(void *)(a4 + 40) = v12;
    LOBYTE(v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *(unsigned char *)(a3 + 48);
    *(unsigned char *)(a3 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(unsigned char *)(a4 + 48);
    *(unsigned char *)(a4 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    if (reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(a3, a2))
    {
      uint64_t v15 = *(void *)(a2 + 16);
      long long v16 = *(_OWORD *)a2;
      uint64_t v17 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v17;
      *(_OWORD *)a3 = v16;
      *(void *)(a3 + 16) = v15;
      uint64_t v18 = *(void *)(a2 + 40);
      long long v19 = *(_OWORD *)(a2 + 24);
      uint64_t v20 = *(void *)(a3 + 40);
      *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
      *(void *)(a2 + 40) = v20;
      *(_OWORD *)(a3 + 24) = v19;
      *(void *)(a3 + 40) = v18;
      char v21 = *(unsigned char *)(a2 + 48);
      *(unsigned char *)(a2 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(unsigned char *)(a3 + 48);
      *(unsigned char *)(a3 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v21;
      if (reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(a2, a1))
      {
        uint64_t v22 = *(void *)(a1 + 16);
        long long v23 = *(_OWORD *)a1;
        uint64_t v24 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v24;
        *(_OWORD *)a2 = v23;
        *(void *)(a2 + 16) = v22;
        uint64_t v25 = *(void *)(a1 + 40);
        __n128 result = *(__n128 *)(a1 + 24);
        uint64_t v26 = *(void *)(a2 + 40);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(void *)(a1 + 40) = v26;
        *(__n128 *)(a2 + 24) = result;
        *(void *)(a2 + 40) = v25;
        char v27 = *(unsigned char *)(a1 + 48);
        *(unsigned char *)(a1 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(unsigned char *)(a2 + 48);
        *(unsigned char *)(a2 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v27;
      }
    }
  }
  return result;
}

__n128 std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,std::string,BOOL>,std::tuple<std::string,std::string,BOOL>,std::string,std::string,BOOL,0ul,1ul,2ul>(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  size_t v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v5);
  }
  __n128 result = *(__n128 *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(__n128 *)size_t v5 = result;
  *((unsigned char *)a2 + 47) = 0;
  *((unsigned char *)a2 + 24) = 0;
  *(unsigned char *)(a1 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *((unsigned char *)a2 + 48);
  return result;
}

uint64_t re::NamedFileRegistry::registerFileNameAlias(os_unfair_lock_s *a1, uint64_t a2, const char *a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  re::DynamicString::DynamicString((re::DynamicString *)v21, (const re::DynamicString *)a2);
  re::NamedFileRegistry::tryGetFilePathFor(a1, (uint64_t)v21, v22);
  if (*(void *)&v21[0])
  {
    if (BYTE8(v21[0])) {
      (*(void (**)(void))(**(void **)&v21[0] + 40))();
    }
    memset(v21, 0, sizeof(v21));
  }
  if (!v22[0])
  {
    os_unfair_lock_lock(a1);
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicString&>((uint64_t)&a1[2], (re::DynamicString *)a2, (const re::DynamicString *)a3);
    os_unfair_lock_unlock(a1);
LABEL_32:
    uint64_t v19 = 1;
    goto LABEL_33;
  }
  if (v24) {
    char v6 = v26;
  }
  else {
    char v6 = v25;
  }
  uint64_t v7 = (char *)(a3 + 9);
  if (*((void *)a3 + 1)) {
    long long v8 = (const char *)*((void *)a3 + 2);
  }
  else {
    long long v8 = a3 + 9;
  }
  uint64_t v9 = (re *)strcmp(v6, v8);
  int v10 = (int)v9;
  uint64_t v11 = *re::assetsLogObjects(v9);
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  if (!v10)
  {
    if (v12)
    {
      if (*(unsigned char *)(a2 + 8)) {
        uint64_t v17 = *(void *)(a2 + 16);
      }
      else {
        uint64_t v17 = a2 + 9;
      }
      if (a3[8]) {
        uint64_t v7 = (char *)*((void *)a3 + 2);
      }
      *(_DWORD *)long long buf = 136315394;
      uint64_t v28 = v17;
      __int16 v29 = 2080;
      long long v30 = v7;
      _os_log_impl(&dword_233120000, v11, OS_LOG_TYPE_DEFAULT, "FileNameAlias '%s' already registered for file '%s'", buf, 0x16u);
    }
    goto LABEL_32;
  }
  if (v12)
  {
    uint64_t v15 = *(void *)(a2 + 8);
    if (v15) {
      uint64_t v16 = *(void *)(a2 + 16);
    }
    else {
      uint64_t v16 = a2 + 9;
    }
    if (a3[8]) {
      uint64_t v7 = (char *)*((void *)a3 + 2);
    }
    if (v15) {
      uint64_t v18 = *(void *)(a2 + 16);
    }
    else {
      uint64_t v18 = a2 + 9;
    }
    *(_DWORD *)long long buf = 136315650;
    uint64_t v28 = v16;
    __int16 v29 = 2080;
    long long v30 = v7;
    __int16 v31 = 2080;
    uint64_t v32 = v18;
    _os_log_impl(&dword_233120000, v11, OS_LOG_TYPE_DEFAULT, "Failed to register '%s' alias for file '%s'! FileAlias '%s' already registered for different file.", buf, 0x20u);
  }
  uint64_t v19 = 0;
LABEL_33:
  if (v22[0] && v23 && (v24 & 1) != 0) {
    (*(void (**)(uint64_t, const char *, uint64_t, uint64_t))(*(void *)v23 + 40))(v23, v26, v13, v14);
  }
  return v19;
}

void re::NamedFileRegistry::tryGetFilePathFor(os_unfair_lock_s *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  os_unfair_lock_lock(a1);
  char v6 = (const re::DynamicString *)re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)&a1[2], a2);
  if (v6)
  {
    *a3 = 1;
    re::DynamicString::DynamicString((re::DynamicString *)(a3 + 8), v6);
  }
  else
  {
    *a3 = 0;
  }
  os_unfair_lock_unlock(a1);
}

void re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_2, 4 * v2);
    }
    if (*(_DWORD *)(a1 + 32))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free((_DWORD *)(*(void *)(a1 + 16) + v3));
        ++v4;
        v3 += 80;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    int v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

uint64_t re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicString&>(uint64_t a1, re::DynamicString *a2, const re::DynamicString *a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<re::DynamicString&>(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 80 * v11;
    return v12 + 48;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 80 * v9 + 16, (uint64_t)a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 80 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v10 + 80 * v9;
  return v12 + 48;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<re::DynamicString&>(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, const re::DynamicString *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 80 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 80 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 80 * v10 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 80 * v10 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 80 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 80 * v10) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 80 * v10 + 16), a4);
  re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 80 * v10 + 48), a5);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * are::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

re::RealityFileWriter *re::RealityFileWriter::RealityFileWriter(re::RealityFileWriter *this)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)this = &unk_26E6CA160;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *(void *)((char *)this + 60) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *((_DWORD *)this + 26) = 0;
  *(void *)((char *)this + 10re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)((char *)this + 156) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  re::DynamicString::setCapacity((void *)this + 21, 0);
  *((_DWORD *)this + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(void *)((char *)this + 236) = 0x7FFFFFFFLL;
  uint64_t v3 = re::RealityArchiveWriter::RealityArchiveWriter((re::RealityFileWriter *)((char *)this + 248));
  *((_DWORD *)this + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *((_OWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *((_DWORD *)this + 9re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_DWORD *)this + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)((char *)this + 45re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_DWORD *)this + 124) = 0;
  *(void *)((char *)this + 500) = 0x7FFFFFFFLL;
  *((unsigned char *)this + 51re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 55re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 5re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  re::make::shared::object<re::RealityFileWriter::WritingParameters>(v3, &v8);
  uint64_t v4 = *((void *)this + 40);
  uint64_t v5 = v8;
  *((void *)this + 40) = v8;
  uint64_t v8 = v4;
  if (v4)
  {

    uint64_t v5 = *((void *)this + 40);
  }
  if (*(uint64_t *)(v5 + 24) < 3) {
    int v6 = 1;
  }
  else {
    int v6 = 2;
  }
  *((_DWORD *)this + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v6;
  return this;
}

uint64_t re::RealityFileWriter::RealityFileWriter(uint64_t a1, uint64_t *a2)
{
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)a1 = &unk_26E6CA160;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 60) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(a1 + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  *(void *)(a1 + 10re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 15re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(a1 + 156) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  re::DynamicString::setCapacity((void *)(a1 + 168), 0);
  *(_DWORD *)(a1 + 23re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 236) = 0x7FFFFFFFLL;
  re::RealityArchiveWriter::RealityArchiveWriter((re::RealityArchiveWriter *)(a1 + 248));
  *(_DWORD *)(a1 + 35re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(_OWORD *)(a1 + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_DWORD *)(a1 + 39re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 43re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_DWORD *)(a1 + 44re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a1 + 45re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_DWORD *)(a1 + 496) = 0;
  *(void *)(a1 + 500) = 0x7FFFFFFFLL;
  *(unsigned char *)(a1 + 51re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 55re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(a1 + 5re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(a1 + 320), *a2);
  if (*(uint64_t *)(*(void *)(a1 + 320) + 24) < 3) {
    int v5 = 1;
  }
  else {
    int v5 = 2;
  }
  *(_DWORD *)(a1 + 31re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v5;
  return a1;
}

void re::RealityFileWriter::~RealityFileWriter(re::RealityFileWriter *this)
{
  *(void *)this = &unk_26E6CA160;
  re::FixedArray<re::DynamicString>::deinit((void *)this + 68);
  re::FixedArray<re::DynamicString>::deinit((void *)this + 65);
  re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 58);
  v2.n128_f64[0] = re::HashTable<re::DynamicString,re::SharedPtr<re::internal::AssetEntry>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 52);
  uint64_t v3 = *((void *)this + 51);
  if (v3)
  {

    *((void *)this + 51) = 0;
  }
  uint64_t v4 = *((void *)this + 46);
  if (v4)
  {
    uint64_t v5 = *((void *)this + 50);
    if (v5)
    {
      uint64_t v6 = *((void *)this + 48);
      if (v6)
      {
        uint64_t v7 = 40 * v6;
        do
        {
          re::FunctionBase<24ul,BOOL ()(re::AssetPathMapping &,re::AssetService *)>::destroyCallable(v5);
          v5 += 40;
          v7 -= 40;
        }
        while (v7);
        uint64_t v4 = *((void *)this + 46);
        uint64_t v5 = *((void *)this + 50);
      }
      (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)v4 + 40))(v4, v5, v2);
    }
    *((void *)this + 50) = 0;
    *((void *)this + 47) = 0;
    *((void *)this + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *((void *)this + 46) = 0;
    ++*((_DWORD *)this + 98);
  }
  uint64_t v8 = *((void *)this + 41);
  if (v8)
  {
    uint64_t v9 = *((void *)this + 45);
    if (v9)
    {
      uint64_t v10 = *((void *)this + 43);
      if (v10)
      {
        uint64_t v11 = 40 * v10;
        do
        {
          re::FunctionBase<24ul,BOOL ()(re::AssetPathMapping &,re::AssetPath const&,re::AssetService *)>::destroyCallable(v9);
          v9 += 40;
          v11 -= 40;
        }
        while (v11);
        uint64_t v8 = *((void *)this + 41);
        uint64_t v9 = *((void *)this + 45);
      }
      (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)v8 + 40))(v8, v9, v2);
    }
    *((void *)this + 45) = 0;
    *((void *)this + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    *((void *)this + 43) = 0;
    *((void *)this + 41) = 0;
    ++*((_DWORD *)this + 88);
  }
  uint64_t v12 = *((void *)this + 40);
  if (v12)
  {

    *((void *)this + 40) = 0;
  }
  re::RealityArchiveWriter::~RealityArchiveWriter((re::RealityFileWriter *)((char *)this + 248));
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 25);
  re::DynamicString::deinit((re::RealityFileWriter *)((char *)this + 168));
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 15);
  re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 9);
  re::HashTable<re::DynamicString,re::SharedPtr<re::internal::AssetEntry>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 3);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::RealityFileWriter::~RealityFileWriter(this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::DynamicArray<re::Function<BOOL ()(re::AssetPathMapping &,re::AssetPath const&,re::AssetService *)>>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::Function<BOOL ()(re::AssetPathMapping &,re::AssetPath const&,re::AssetService *)>>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 40 * v4;
  *(void *)(v5 + 24) = *(void *)(a2 + 24);
  *(void *)(v5 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  uint64_t result = re::FunctionBase<24ul,BOOL ()(re::AssetPathMapping &,re::AssetPath const&,re::AssetService *)>::operator=<24ul>(v5, a2);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::DynamicArray<re::Function<BOOL ()(re::AssetPathMapping &,re::AssetService *)>>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::Function<BOOL ()(re::AssetPathMapping &,re::AssetService *)>>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 40 * v4;
  *(void *)(v5 + 24) = *(void *)(a2 + 24);
  *(void *)(v5 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  uint64_t result = re::FunctionBase<24ul,BOOL ()(re::AssetPathMapping &,re::AssetService *)>::operator=<24ul>(v5, a2);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::RealityFileWriter::setOrClearMetadataString(_anonymous_namespace_ *a1, StringID *a2, const char *a3)
{
  uint64_t v4 = (uint64_t)a1 + 464;
  if (a3)
  {
    re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(v4, a2, (re::DynamicString *)&v8);
    uint64_t result = v8;
    if (v8)
    {
      if (v9) {
        return (*(uint64_t (**)(void))(*(void *)v8 + 40))();
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t)a1 + 464;
    return re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v7, a2);
  }
  return result;
}

uint64_t re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, re::DynamicString *a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 56 * v11;
    return v12 + 24;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::StringID::operator==((void *)(v10 + 56 * v9 + 8), a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 56 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  re::DynamicString::operator=((re::DynamicString *)(v10 + 56 * v9 + 24), a3);
  ++*(_DWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 16) + 56 * v9;
  return v12 + 24;
}

uint64_t re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(uint64_t a1, void *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v4 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  unint64_t v5 = ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
     % *(unsigned int *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(v6 + 4 * v5);
  if (v7 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  if (!re::StringID::operator==((void *)(v9 + 56 * v7 + 8), a2))
  {
    while (1)
    {
      unsigned int v10 = v7;
      int v11 = *(_DWORD *)(v9 + 56 * v7);
      uint64_t v7 = v11 & 0x7FFFFFFF;
      if ((v11 & 0x7FFFFFFF) == 0x7FFFFFFF) {
        return 0;
      }
      if (re::StringID::operator==((void *)(v9 + 56 * v7 + 8), a2))
      {
        *(_DWORD *)(v9 + 56 * v10) = *(_DWORD *)(v9 + 56 * v10) & 0x80000000 | *(_DWORD *)(v9
                                                                                             + 56 * v7) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v9 + 56 * v7) & 0x7FFFFFFF;
LABEL_9:
  re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free((_DWORD *)(*(void *)(a1 + 16) + 56 * v7));
  int v12 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(*(void *)(a1 + 16) + 56 * v7) = *(_DWORD *)(*(void *)(a1 + 16) + 56 * v7) & 0x80000000 | *(_DWORD *)(a1 + 36);
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 40) = v12 + 1;
  return 1;
}

re::DynamicString *re::RealityFileWriter::getMetadataString@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = (re::DynamicString *)re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 464, a2);
  if (result)
  {
    *a3 = 1;
    return re::DynamicString::DynamicString((re::DynamicString *)(a3 + 8), result);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void *re::RealityFileWriter::open@<X0>(re::RealityFileWriter *this@<X0>, const re::DynamicString *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((void *)this + 34))
  {
    unint64_t v4 = v51;
    long long v51 = 0;
    *(unsigned char *)a3 = 0;
    *(void *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v4;

    uint64_t result = v29;
    if (v29 && (v30[0] & 1) != 0)
    {
      uint64_t v6 = v31;
      return (void *)(*(uint64_t (**)(void *, char *))(*(void *)result + 40))(result, v6);
    }
    return result;
  }
  uint64_t v9 = (re::RealityFileWriter *)((char *)this + 248);
  if (*((void *)a2 + 1)) {
    unsigned int v10 = (re *)*((void *)a2 + 2);
  }
  else {
    unsigned int v10 = (const re::DynamicString *)((char *)a2 + 9);
  }
  re::filePathWithURL(v10, (re::DynamicString *)&v46);
  if (v47) {
    int v11 = v49;
  }
  else {
    int v11 = (re *)v48;
  }
  re::RealityArchiveWriter::open(v9, v11, (uint64_t)v43);
  if (!v43[0])
  {
    uint64_t v17 = v29;
    __int16 v29 = 0;
    *(unsigned char *)a3 = 0;
    *(void *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v17;

    goto LABEL_55;
  }
  int v12 = re::DynamicString::operator=((re::RealityFileWriter *)((char *)this + 168), a2);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)&v29, 0);
  __int16 v29 = &unk_26E6CA258;
  long long v32 = 0u;
  long long v33 = 0u;
  char v14 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v32, 0);
  long long v35 = 0u;
  long long v34 = 0u;
  re::DynamicString::setCapacity(&v34, 0);
  int v36 = 2;
  memset(v39, 0, sizeof(v39));
  uint64_t v41 = 0x7FFFFFFFLL;
  int v40 = 0;
  int v42 = 0;
  long long v51 = "com.apple.RealityKit";
  uint64_t v52 = 20;
  re::DynamicString::operator=((re::DynamicString *)&v32, (uint64_t)&v51);
  re::Bundle::realityKitFramework((uint64_t)&v51);
  if ((_BYTE)v51) {
    id v15 = (id)v52;
  }
  else {
    id v15 = 0;
  }
  id v16 = v15;
  id v28 = v16;
  if ((_BYTE)v51) {

  }
  if (v28)
  {
    re::Bundle::versionString(&v28, (re::DynamicString *)&v51);
  }
  else
  {
  }
  re::DynamicString::operator=((re::DynamicString *)&v34, (re::DynamicString *)&v51);
  if (v51 && (v52 & 1) != 0) {
    (*(void (**)(void))(*(void *)v51 + 40))();
  }
  uint64_t v18 = *((void *)this + 40);
  uint64_t v19 = *(void *)(v18 + 24);
  uint64_t v20 = *(unsigned int *)(v18 + 36);
  if (v19 <= 6 && v20 >= 2)
  {
    re::DynamicString::format((re::DynamicString *)"The target platform %u cannot be used for reality file version %lld, because older REKit builds did not recognize target platform specificatons.", (re::DynamicString *)&v51, v20, v19);
    uint64_t v21 = v56[0];
    v56[0] = 0;
    *(unsigned char *)a3 = 0;
    *(void *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v21;

    if (v51 && (v52 & 1) != 0) {
      (*(void (**)(void))(*(void *)v51 + 40))();
    }
    goto LABEL_46;
  }
  int v37 = v19;
  int v38 = 0;
  int v42 = v20;
  re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=((uint64_t)v39, (uint64_t)this + 464);
  {
    re::introspect<re::RealityFileHeader>(void)::info = (_UNKNOWN *)re::introspect_RealityFileHeader(0);
  }
  long long v58 = *((_OWORD *)re::introspect<re::RealityFileHeader>(void)::info + 2);
  uint64_t v22 = (re *)v58;
  if (!(void)v58)
  {
    re::DynamicString::format((re::DynamicString *)"Type of object for file \"%s\" has not been registered", (re::DynamicString *)&v51, "header.json");
    id v25 = (id)v56[0];
    v56[0] = 0;

    if (v51 && (v52 & 1) != 0) {
      (*(void (**)(void))(*(void *)v51 + 40))();
    }
    goto LABEL_45;
  }
  CFDataRef Mutable = CFDataCreateMutable(0, 0);
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v57);
  re::TypeRegistry::typeInfo(v22, (re **)&v58, &v51);
  char v24 = (_anonymous_namespace_ *)re::TypeInfo::TypeInfo((uint64_t)v56, (uint64_t)&v52);
  if ((_BYTE)v51)
  {
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v57);
  }
  else
  {
    uint64_t v26 = v50;
    long long v50 = 0;

    if (!(_BYTE)v51 && v54 && (v55 & 1) != 0) {
      (*(void (**)(void))(*(void *)v54 + 40))();
    }
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v57);
    if (v26)
    {
      CFRelease(Mutable);
LABEL_44:
      id v25 = v26;

LABEL_45:
      *(unsigned char *)a3 = 0;
      *(void *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v25;
      goto LABEL_46;
    }
  }
  re::RealityArchiveWriter::writeEntry((uint64_t)v9, (uint64_t)"header.json", Mutable, 1, (uint64_t)&v51);
  if (!(_BYTE)v51)
  {
    uint64_t v26 = (void *)v56[0];
    v56[0] = 0;

    if (!(_BYTE)v51 && v52 && (v53 & 1) != 0) {
      (*(void (**)(void))(*(void *)v52 + 40))();
    }
    CFRelease(Mutable);
    if (!v26) {
      goto LABEL_35;
    }
    goto LABEL_44;
  }
  CFRelease(Mutable);
LABEL_35:
  *(unsigned char *)a3 = 1;
LABEL_46:

  __int16 v29 = &unk_26E6CA258;
  v27.n128_f64[0] = re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v39);
  if ((void)v34)
  {
    if (BYTE8(v34)) {
      (*(void (**)(double))(*(void *)v34 + 40))(v27.n128_f64[0]);
    }
    __n128 v27 = 0uLL;
    long long v34 = 0u;
    long long v35 = 0u;
  }
  if ((void)v32)
  {
    if (BYTE8(v32)) {
      (*(void (**)(__n128))(*(void *)v32 + 40))(v27);
    }
    long long v32 = 0u;
    long long v33 = 0u;
  }
  __int16 v29 = &unk_26E6DECE0;
  objc_destructInstance(v30);
LABEL_55:
  if (!v43[0] && v44 && (v45 & 1) != 0) {
    (*(void (**)(void))(*(void *)v44 + 40))();
  }
  uint64_t result = (void *)v46;
  if (v46 && (v47 & 1) != 0)
  {
    uint64_t v6 = (char *)v49;
    return (void *)(*(uint64_t (**)(void *, char *))(*(void *)result + 40))(result, v6);
  }
  return result;
}

void anonymous namespace'::makeError(__CFString *this@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = v4 >> 1;
  if ((v4 & 1) == 0) {
    unint64_t v5 = v4 >> 1;
  }
  if (v5)
  {
    if (v4) {
      uint64_t v6 = *(void *)(a2 + 16);
    }
    else {
      uint64_t v6 = a2 + 9;
    }
    re::WrappedError::make((re::WrappedError *)@"RERealityFileWriterErrorDomain", this, v6, a3);
  }
  else
  {
    re::WrappedError::make((re::WrappedError *)@"RERealityFileWriterErrorDomain", this, 0, a3);
  }
}

{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  unint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = v4 >> 1;
  if ((v4 & 1) == 0) {
    unint64_t v5 = v4 >> 1;
  }
  if (v5)
  {
    if (v4) {
      uint64_t v6 = *(void *)(a2 + 16);
    }
    else {
      uint64_t v6 = a2 + 9;
    }
    re::WrappedError::make((re::WrappedError *)@"RERealityFileErrorDomain", this, v6, a3);
  }
  else
  {
    re::WrappedError::make((re::WrappedError *)@"RERealityFileErrorDomain", this, 0, a3);
  }
}

void re::RealityFileHeader::~RealityFileHeader(re::RealityFileHeader *this)
{
  *(void *)this = &unk_26E6CA258;
  __n128 v2 = (re::RealityFileHeader *)((char *)this + 56);
  re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 13);
  re::DynamicString::deinit(v2);
  re::DynamicString::deinit((re::RealityFileHeader *)((char *)this + 24));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6CA258;
  __n128 v2 = (re::RealityFileHeader *)((char *)this + 56);
  re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 13);
  re::DynamicString::deinit(v2);
  re::DynamicString::deinit((re::RealityFileHeader *)((char *)this + 24));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

BOOL re::RealityFileWriter::isAssetWritten(re::RealityFileWriter *this, const re::AssetHandle *a2)
{
  uint64_t v3 = (re::DynamicString *)re::AssetHandle::legacy_assetPath(a2);
  uint64_t v4 = *((void *)v3 + 1);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v8 = v4;
  uint64_t v9 = 0;
  re::DynamicString::setCapacity(&v8, 0);
  re::AssetPath::fullAssetPath(v3, (re::DynamicString *)&v8);
  re::RealityFileWriter::AssetInfoTable::tryGetAssetInfo((re::RealityFileWriter *)((char *)this + 24), (const re::DynamicString *)&v8, &v7);
  if (v7)
  {
    BOOL v5 = *(_DWORD *)(v7 + 24) == 1;
  }
  else
  {
    BOOL v5 = 0;
  }
  if (v8 && (v9 & 1) != 0) {
    (*(void (**)(void))(*(void *)v8 + 40))();
  }
  return v5;
}

uint64_t *re::RealityFileWriter::AssetInfoTable::tryGetAssetInfo@<X0>(re::RealityFileWriter::AssetInfoTable *this@<X0>, const re::DynamicString *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (uint64_t *)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)this, (uint64_t)a2);
  if (result)
  {
    uint64_t v5 = *result;
    *a3 = *result;
    if (v5)
    {
      return (uint64_t *)(id)(v5 + 8);
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t re::RealityFileWriter::writeAsset(uint64_t a1, re::AssetHandle *a2, re::RealityFileWriter::AssetWriteResult **a3)
{
  if (*a3) {
    re::RealityFileWriter::AssetWriteResult::clear(*a3);
  }
  if (v108[0])
  {
    unsigned int v105 = 0;
    long long v103 = 0u;
    long long v104 = 0u;
    uint64_t v106 = 0x7FFFFFFFLL;
    uint64_t v6 = *(void *)(*((void *)a2 + 1) + 24);
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 328))(v6);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, void))(*(void *)v7 + 72))(v7, *(void *)(*(void *)(a1 + 320) + 24));
    uint64_t v9 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, re::AssetHandle *, uint64_t))(*(void *)v6 + 320))(v6, a2, v8);
    if (v9)
    {
      uint64_t v10 = *a3;
      if (v10)
      {
        re::ObjCObject::operator=((id *)v10 + 12, &v102);
      }
      else
      {
      }

      if (v100 && (v101 & 1) != 0) {
        (*(void (**)(void))(*(void *)v100 + 40))();
      }
      if (v10) {

      }
      re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit((uint64_t *)&v103);
      return 0;
    }
    re::RealityFileWriter::getOrMakeAssetInfo((re::RealityFileWriter *)v98, (const re::AssetHandle *)a1, a2);
    if (!v98[0])
    {
      uint64_t v20 = *a3;
      if (*a3)
      {
        uint64_t v21 = (char *)v20 + 8;
        uint64_t v97 = v99;
        re::ObjCObject::operator=((id *)v20 + 12, (id *)&v97);
      }
      else
      {
        uint64_t v97 = v99;
      }
      uint64_t v19 = 0;
      goto LABEL_118;
    }
    int v13 = v99;
    if (v99) {
      char v14 = v99 + 8;
    }
    if (v13[6] == 1) {
      goto LABEL_13;
    }
    if ((**(unsigned int (***)(uint64_t, re::AssetHandle *))v7)(v7, a2))
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)v95, a2);
      if ((*(unsigned int (**)(uint64_t, unsigned char *, void))(*(void *)v7 + 8))(v7, v95, *(void *)(*(void *)(a1 + 320) + 24)))
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, unsigned char *, void))(*(void *)v7 + 16))(&v100, v7, v95, *(void *)(*(void *)(a1 + 320) + 24));
        if (!(_BYTE)v100)
        {
          uint64_t v48 = *a3;
          if (*a3)
          {
            long long v49 = (char *)v48 + 8;
            id v94 = v101;
            re::ObjCObject::operator=((id *)v48 + 12, &v94);
          }
          else
          {
            id v94 = v101;
          }
          re::Result<re::AssetHandle,re::WrappedError>::~Result((unsigned __int8 *)&v100);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v95);
          goto LABEL_116;
        }
        re::AssetHandle::operator=((uint64_t)v95, (uint64_t *)&v101);
        re::Result<re::AssetHandle,re::WrappedError>::~Result((unsigned __int8 *)&v100);
      }
      re::RealityFileWriter::remapSceneAsset((re::RealityFileWriter *)&v100, *(const re::AssetHandle **)(a1 + 408), (const re::DynamicString *)v95, (uint64_t)a2 + 56);
      if (!(_BYTE)v100)
      {
        uint64_t v44 = *a3;
        if (*a3)
        {
          char v45 = (char *)v44 + 8;
          id v93 = v101;
          re::ObjCObject::operator=((id *)v44 + 12, &v93);
        }
        else
        {
          id v93 = v101;
        }
        goto LABEL_114;
      }
      re::AssetHandle::operator=((uint64_t)v95, (uint64_t *)&v101);
      uint64_t v90 = v13;
      uint64_t v22 = v13 + 2;
      uint64_t v23 = v13 + 2;
      int v24 = *((unsigned __int8 *)a2 + 89);
      v89[0] = *((unsigned char *)a2 + 90);
      if (v89[0]) {
        v89[1] = *((unsigned char *)a2 + 91);
      }
      re::RealityFileWriter::findDependenciesAndSaveAsset((uint64_t)v91, a1, v7, (const re::AssetHandle *)v95, (uint64_t *)&v90, (uint64_t)&v103, v24, v89);

      uint64_t v90 = 0;
      if (!v91[0])
      {
        uint64_t v46 = *a3;
        if (*a3)
        {
          char v47 = (char *)v46 + 8;
          id v88 = v92;
          re::ObjCObject::operator=((id *)v46 + 12, &v88);
        }
        else
        {
          id v88 = v92;
        }
        goto LABEL_114;
      }
      if ((*(uint64_t (**)(uint64_t, unsigned char *, void))(*(void *)v7 + 40))(v7, v95, *(void *)(*(void *)(a1 + 320) + 24)))
      {
        int64_t v73 = v13;
        id v25 = v22;
        re::RealityFileWriter::assignSceneSettingsToAssetInfo((_anonymous_namespace_ *)&v86, (re::DynamicString *)a1, (uint64_t *)&v73, (uint64_t)a2, 1);

        int64_t v73 = 0;
        if (!(_BYTE)v86)
        {
          uint64_t v26 = *a3;
          if (*a3)
          {
            __n128 v27 = (char *)v26 + 8;
            id v28 = v87;
            id v72 = v28;
            re::ObjCObject::operator=((id *)v26 + 12, &v72);
          }
          else
          {
            id v28 = v87;
            id v72 = v28;
          }
          goto LABEL_114;
        }
LABEL_120:
        int v65 = 0;
LABEL_115:
        re::Result<re::AssetHandle,re::WrappedError>::~Result((unsigned __int8 *)&v100);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v95);
        if (v65) {
          goto LABEL_116;
        }
LABEL_13:
        if (*a3)
        {
          re::DynamicString::operator=((re::RealityFileWriter::AssetWriteResult *)((char *)*a3 + 24), (re::DynamicString *)(v13 + 8));
          unsigned int v15 = v105;
          if (v105)
          {
            uint64_t v16 = 0;
            uint64_t v17 = (int *)(v104 + 8);
            while (1)
            {
              int v18 = *v17;
              v17 += 10;
              if (v18 < 0) {
                break;
              }
              if (v105 == ++v16)
              {
                LODWORD(v16) = v105;
                break;
              }
            }
          }
          else
          {
            LODWORD(v16) = 0;
          }
          if (v105 != v16)
          {
            uint64_t v38 = v16;
            uint64_t v39 = v104;
            do
            {
              re::AssetHandle::AssetHandle((re::AssetHandle *)&v100, (const re::AssetHandle *)(v39 + 40 * v38 + 16));
              re::DynamicArray<re::AssetHandle>::add((re::RealityFileWriter::AssetWriteResult *)((char *)*a3 + 56), (re::AssetHandle *)&v100);
              re::AssetHandle::~AssetHandle((re::AssetHandle *)&v100);
              uint64_t v39 = v104;
              if (v105 <= (int)v16 + 1) {
                unsigned int v40 = v16 + 1;
              }
              else {
                unsigned int v40 = v105;
              }
              int v41 = v16;
              while (1)
              {
                uint64_t v38 = (v41 + 1);
                if (v40 - 1 == v41) {
                  break;
                }
                ++v41;
                LODWORD(v16) = v38;
                if ((*(_DWORD *)(v104 + 40 * v38 + 8) & 0x80000000) != 0) {
                  goto LABEL_63;
                }
              }
              LODWORD(v16) = v40;
LABEL_63:
              ;
            }
            while (v15 != v16);
          }
          uint64_t v19 = 1;
          if (!v13) {
            goto LABEL_118;
          }
        }
        else
        {
          uint64_t v19 = 1;
        }
        goto LABEL_117;
      }
      (*(void (**)(uint64_t *__return_ptr, uint64_t, unsigned char *, void))(*(void *)v7 + 48))(&v86, v7, v95, *(void *)(*(void *)(a1 + 320) + 24));
      re::RealityFileWriter::getOrMakeAssetInfo((re::RealityFileWriter *)v84, (const re::AssetHandle *)a1, (re::AssetHandle *)&v86);
      if (!v84[0])
      {
        char v57 = *a3;
        if (*a3)
        {
          long long v58 = (char *)v57 + 8;
          uint64_t v83 = v85;
          re::ObjCObject::operator=((id *)v57 + 12, (id *)&v83);
        }
        else
        {
          uint64_t v83 = v85;
        }
        int v59 = 1;
        goto LABEL_113;
      }
      long long v50 = v85;
      if (v85)
      {
        long long v51 = v85 + 8;
        uint64_t v52 = v50 + 8;
      }
      uint64_t v80 = v50;
      int v53 = *((unsigned __int8 *)a2 + 89);
      v79[0] = *((unsigned char *)a2 + 90);
      if (v79[0]) {
        v79[1] = *((unsigned char *)a2 + 91);
      }
      re::RealityFileWriter::findDependenciesAndSaveAsset((uint64_t)v81, a1, v7, (const re::AssetHandle *)&v86, (uint64_t *)&v80, (uint64_t)&v103, v53, v79);
      if (v50)
      {
        uint64_t v54 = v50 + 8;

        uint64_t v80 = 0;
        if (v81[0])
        {
          long long v75 = v50;
          id v55 = v54;
          re::RealityFileWriter::assignSceneSettingsToAssetInfo((_anonymous_namespace_ *)v76, (re::DynamicString *)a1, (uint64_t *)&v75, (uint64_t)a2, 1);

          long long v75 = 0;
LABEL_96:
          if (v76[0])
          {
            re::RealityFileWriter::AssetInfo::addSceneVariant((re::RealityFileWriter::AssetInfo *)v50, (const re::DynamicString *)(v13 + 8), v56);
            int v59 = 0;
            goto LABEL_111;
          }
          int64_t v62 = *a3;
          if (*a3)
          {
            int64_t v63 = (char *)v62 + 8;
            id v64 = v77;
            id v74 = v64;
            re::ObjCObject::operator=((id *)v62 + 12, &v74);
          }
          else
          {
            id v64 = v77;
            id v74 = v64;
          }
LABEL_110:
          int v59 = 1;
LABEL_111:
          if (v50) {

          }
LABEL_113:
          re::Result<re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::WrappedError>::~Result((uint64_t)v84);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v86);
          if (!v59) {
            goto LABEL_120;
          }
LABEL_114:
          int v65 = 1;
          goto LABEL_115;
        }
      }
      else if (v81[0])
      {
        long long v75 = 0;
        re::RealityFileWriter::assignSceneSettingsToAssetInfo((_anonymous_namespace_ *)v76, (re::DynamicString *)a1, (uint64_t *)&v75, (uint64_t)a2, 1);
        goto LABEL_96;
      }
      uint64_t v60 = *a3;
      if (*a3)
      {
        uint64_t v61 = (char *)v60 + 8;
        id v78 = v82;
        re::ObjCObject::operator=((id *)v60 + 12, &v78);
      }
      else
      {
        id v78 = v82;
      }
      goto LABEL_110;
    }
    uint64_t v71 = v13;
    __int16 v29 = v13 + 2;
    long long v30 = v13 + 2;
    int v31 = *((unsigned __int8 *)a2 + 89);
    v70[0] = *((unsigned char *)a2 + 90);
    if (v70[0]) {
      v70[1] = *((unsigned char *)a2 + 91);
    }
    re::RealityFileWriter::findDependenciesAndSaveAsset((uint64_t)&v100, a1, v7, a2, (uint64_t *)&v71, (uint64_t)&v103, v31, v70);

    uint64_t v71 = 0;
    if ((_BYTE)v100)
    {
      long long v68 = v13;
      id v32 = v29;
      re::RealityFileWriter::assignLabelToAssetInfo((re::DynamicString *)a1, (uint64_t *)&v68, (re::AssetHandle *)((char *)a2 + 56), (uint64_t)v95);

      long long v68 = 0;
      if (v95[0]) {
        goto LABEL_13;
      }
      long long v33 = *a3;
      if (*a3)
      {
        long long v34 = (char *)v33 + 8;
        long long v35 = (char *)v33 + 8;
        id v36 = v96;
        id v67 = v36;
        re::ObjCObject::operator=((id *)v33 + 12, &v67);
        id v37 = v67;
LABEL_68:

LABEL_87:
LABEL_116:
        uint64_t v19 = 0;
LABEL_117:

LABEL_118:
        re::Result<re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::WrappedError>::~Result((uint64_t)v98);
        re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit((uint64_t *)&v103);
        return v19;
      }
      id v36 = v96;
      id v67 = v36;
    }
    else
    {
      int v42 = *a3;
      if (*a3)
      {
        long long v34 = (char *)v42 + 8;
        long long v43 = (char *)v42 + 8;
        id v36 = v101;
        id v69 = v36;
        re::ObjCObject::operator=((id *)v42 + 12, &v69);
        id v37 = v69;
        goto LABEL_68;
      }
      id v36 = v101;
      id v69 = v36;
    }

    goto LABEL_87;
  }
  uint64_t v11 = *a3;
  if (*a3)
  {
    int v12 = (char *)v11 + 8;
    id v107 = v109;
    re::ObjCObject::operator=((id *)v11 + 12, &v107);
  }
  else
  {
    id v107 = v109;
  }
  return 0;
}

void re::RealityFileWriter::AssetWriteResult::clear(re::RealityFileWriter::AssetWriteResult *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    *((void *)this + 4) = 1;
    uint64_t v3 = (unsigned char *)*((void *)this + 5);
  }
  else
  {
    *((unsigned char *)this + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v2 & 1;
    uint64_t v3 = (char *)this + 33;
  }
  unsigned char *v3 = 0;
  re::DynamicArray<re::AssetHandle>::clear((re::RealityFileWriter::AssetWriteResult *)((char *)this + 56));
  uint64_t v4 = (void *)*((void *)this + 12);
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
}

unsigned char *anonymous namespace'::checkAssetIsValid(unsigned char *this, const re::AssetHandle *a2)
{
  uint64_t v2 = this;
  uint64_t v3 = *((void *)a2 + 1);
  if (v3 && *(void *)(v3 + 24))
  {
    unsigned int v4 = atomic_load((unsigned int *)(v3 + 704));
    if (v4 == 2)
    {
      *this = 1;
      return this;
    }
    uint64_t v9 = (re::DynamicString *)re::AssetHandle::legacy_assetPath(a2);
    uint64_t v10 = *((void *)v9 + 1);
    unsigned int v15 = 0;
    uint64_t v16 = 0;
    uint64_t v13 = v10;
    uint64_t v14 = 0;
    re::DynamicString::setCapacity(&v13, 0);
    re::AssetPath::fullAssetPath(v9, (re::DynamicString *)&v13);
    if (v14) {
      uint64_t v11 = v15;
    }
    else {
      uint64_t v11 = (char *)&v14 + 1;
    }
    re::DynamicString::format((re::DynamicString *)"The asset (%s) is not loaded.", (re::DynamicString *)v17, v11);
    uint64_t v8 = 4;
  }
  else
  {
    uint64_t v5 = (re::DynamicString *)re::AssetHandle::legacy_assetPath(a2);
    uint64_t v6 = *((void *)v5 + 1);
    unsigned int v15 = 0;
    uint64_t v16 = 0;
    uint64_t v13 = v6;
    uint64_t v14 = 0;
    re::DynamicString::setCapacity(&v13, 0);
    re::AssetPath::fullAssetPath(v5, (re::DynamicString *)&v13);
    if (v14) {
      uint64_t v7 = v15;
    }
    else {
      uint64_t v7 = (char *)&v14 + 1;
    }
    re::DynamicString::format((re::DynamicString *)"The asset (%s) is not bound to an AssetService.", (re::DynamicString *)v17, v7);
    uint64_t v8 = 3;
  }
  uint64_t v12 = v18;
  uint64_t v18 = 0;
  *uint64_t v2 = 0;
  *((void *)v2 + 1) = v12;

  if (*(void *)&v17[0])
  {
    if (BYTE8(v17[0])) {
      (*(void (**)(void))(**(void **)&v17[0] + 40))();
    }
    memset(v17, 0, sizeof(v17));
  }
  this = (unsigned char *)v13;
  if (v13)
  {
    if (v14) {
      return (unsigned char *)(*(uint64_t (**)(void))(*(void *)v13 + 40))();
    }
  }
  return this;
}

uint64_t re::RealityFileWriter::getOrMakeAssetInfo(re::RealityFileWriter *this, const re::AssetHandle *a2, re::AssetHandle *a3)
{
  uint64_t v6 = (re::DynamicString *)re::AssetHandle::legacy_assetPath(a3);
  uint64_t v7 = *((void *)v6 + 1);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v12 = v7;
  uint64_t v13 = 0;
  re::DynamicString::setCapacity(&v12, 0);
  re::AssetPath::fullAssetPath(v6, (re::DynamicString *)&v12);
  re::RealityFileWriter::getOrMakeAssetInfo(this, a2, (re::DynamicString *)&v12, *(const char **)(*(void *)(*((void *)a3 + 1) + 264) + 8), **(char ***)(*((void *)a3 + 1) + 264));
  if (*(unsigned char *)this)
  {
    uint64_t v9 = *((void *)this + 1);
    re::AssetHandle::composedMetadata(a3, (uint64_t)v11);
    re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(v9 + 208, (uint64_t)v11);
    v8.n128_f64[0] = re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v11);
  }
  uint64_t result = v12;
  if (v12)
  {
    if (v13) {
      return (*(uint64_t (**)(__n128))(*(void *)v12 + 40))(v8);
    }
  }
  return result;
}

void re::RealityFileWriter::remapSceneAsset(re::RealityFileWriter *this, const re::AssetHandle *a2, const re::DynamicString *a3, uint64_t a4)
{
  if (a2)
  {
    uint64_t v5 = *(void (**)(const re::AssetHandle *, const re::DynamicString *, uint64_t))(*(void *)a2 + 32);
    v5(a2, a3, a4);
  }
  else
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)&v6, a3);
    *(unsigned char *)this = 1;
    *(_OWORD *)((char *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v6;
    long long v6 = 0uLL;
    *((void *)this + 3) = v7;
    uint64_t v7 = 0;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v6);
  }
}

void re::RealityFileWriter::findDependenciesAndSaveAsset(uint64_t a1, uint64_t a2, uint64_t a3, const re::AssetHandle *a4, uint64_t *a5, uint64_t a6, int a7, unsigned char *a8)
{
  uint64_t v70 = *a5;
  if (v70)
  {
    uint64_t v15 = (void *)(v70 + 8);
    id v16 = (id)(v70 + 8);
    re::RealityFileWriter::checkAssetIsWritable((uint64_t)v71, a4, (uint64_t)&v70);

    uint64_t v70 = 0;
  }
  else
  {
    re::RealityFileWriter::checkAssetIsWritable((uint64_t)v71, a4, (uint64_t)&v70);
  }
  if (v71[0])
  {
    uint64_t v17 = *((void *)a4 + 1);
    if (v17) {
      uint64_t v18 = *(uint64_t **)(v17 + 24);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v20 = (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 72))(a3, *(void *)(*(void *)(a2 + 320) + 24));
    re::AssetManager::findDependencies((re::AssetManager *)v18, a4, (uint64_t)v67);
    unsigned int v65 = 0;
    long long v63 = 0u;
    long long v64 = 0u;
    uint64_t v66 = 0x7FFFFFFFLL;
    int v52 = a7;
    *(void *)int v53 = a2;
    long long v51 = a8;
    if (v68)
    {
      uint64_t v21 = v69;
      uint64_t v22 = 24 * v68;
      do
      {
        if (*((void *)v21 + 1) && !re::AssetManager::isDeviceAsset((uint64_t)v18, (uint64_t)v21, v20)) {
          re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::add((uint64_t)&v63, v21);
        }
        uint64_t v21 = (re::AssetHandle *)((char *)v21 + 24);
        v22 -= 24;
      }
      while (v22);
      unsigned int v23 = v65;
      if (v65)
      {
        uint64_t v24 = 0;
        id v25 = (int *)(v64 + 8);
        while (1)
        {
          int v26 = *v25;
          v25 += 10;
          if (v26 < 0) {
            break;
          }
          if (v65 == ++v24)
          {
            LODWORD(v24) = v65;
            break;
          }
        }
LABEL_22:
        if (v23 != v24)
        {
          uint64_t v27 = v24;
          uint64_t v28 = v64;
          do
          {
            re::AssetHandle::AssetHandle((re::AssetHandle *)v57, (const re::AssetHandle *)(v28 + 40 * v27 + 16));
            re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::add(a6, (re::AssetHandle *)v57);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)v57);
            uint64_t v28 = v64;
            if (v65 <= (int)v24 + 1) {
              unsigned int v29 = v24 + 1;
            }
            else {
              unsigned int v29 = v65;
            }
            int v30 = v24;
            while (1)
            {
              uint64_t v27 = (v30 + 1);
              if (v29 - 1 == v30) {
                break;
              }
              ++v30;
              LODWORD(v24) = v27;
              if ((*(_DWORD *)(v64 + 40 * v27 + 8) & 0x80000000) != 0) {
                goto LABEL_32;
              }
            }
            LODWORD(v24) = v29;
LABEL_32:
            ;
          }
          while (v23 != v24);
        }
        uint64_t v31 = *a5;
        uint64_t v60 = v31;
        if (v31)
        {
          id v32 = (void *)(v31 + 8);
          id v33 = (id)(v31 + 8);
          re::RealityFileWriter::addDependentAssets((uint64_t)v61, *(const re::AssetHandle **)v53, &v60, (uint64_t)&v63);
        }
        else
        {
          re::RealityFileWriter::addDependentAssets((uint64_t)v61, *(const re::AssetHandle **)v53, &v60, (uint64_t)&v63);
        }
        if (v61[0])
        {
          int v58 = 0;
          memset(v57, 0, sizeof(v57));
          uint64_t v59 = 0x7FFFFFFFLL;
          signed int v35 = HIDWORD(v64);
          if (HIDWORD(v64))
          {
            unsigned int v36 = v65;
            if (v65)
            {
              uint64_t v37 = 0;
              uint64_t v38 = (int *)(v64 + 8);
              while (1)
              {
                int v39 = *v38;
                v38 += 10;
                if (v39 < 0) {
                  break;
                }
                if (v65 == ++v37)
                {
                  LODWORD(v37) = v65;
                  break;
                }
              }
            }
            else
            {
              LODWORD(v37) = 0;
            }
            if (v65 != v37)
            {
              uint64_t v41 = v37;
              uint64_t v42 = v64;
              do
              {
                long long v43 = (re::AssetHandle *)(v42 + 40 * v41 + 16);
                uint64_t v44 = (re::DynamicString *)re::AssetHandle::legacy_assetPath(v43);
                uint64_t v45 = *((void *)v44 + 1);
                uint64_t v76 = 0;
                uint64_t v77 = 0;
                uint64_t v75 = 0;
                uint64_t v74 = v45;
                re::DynamicString::setCapacity(&v74, 0);
                re::AssetPath::fullAssetPath(v44, (re::DynamicString *)&v74);
                re::RealityFileWriter::AssetInfoTable::tryGetAssetInfo((re::RealityFileWriter::AssetInfoTable *)(*(void *)v53 + 24), (const re::DynamicString *)&v74, &v73);
                uint64_t v46 = v73;
                re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::add((uint64_t)v57, v43, (const re::DynamicString *)(v73 + 32));
                if (v46) {

                }
                if (v74 && (v75 & 1) != 0) {
                  (*(void (**)(void))(*(void *)v74 + 40))();
                }
                uint64_t v42 = v64;
                if (v65 <= (int)v37 + 1) {
                  unsigned int v47 = v37 + 1;
                }
                else {
                  unsigned int v47 = v65;
                }
                while (1)
                {
                  uint64_t v41 = (v37 + 1);
                  if (v47 - 1 == v37) {
                    break;
                  }
                  LODWORD(v37) = v37 + 1;
                  unsigned int v48 = v41;
                  if ((*(_DWORD *)(v64 + 40 * v41 + 8) & 0x80000000) != 0) {
                    goto LABEL_59;
                  }
                }
                unsigned int v48 = v47;
LABEL_59:
                LODWORD(v37) = v48;
              }
              while (v36 != v48);
            }
          }
          uint64_t v49 = *a5;
          uint64_t v56 = v49;
          if (v49) {
            id v50 = (id)(v49 + 8);
          }
          v55[0] = *v51;
          if (v55[0]) {
            v55[1] = v51[1];
          }
          re::RealityFileWriter::saveAssetToArchive(a1, *(re::AssetPathMapping **)v53, a4, &v56, (uint64_t)v57, v52, v55, v18[145]);
          if (v49) {

          }
          re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit((uint64_t *)v57);
          if (v61[0])
          {
LABEL_68:
            re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit((uint64_t *)&v63);
            re::DynamicArray<re::AssetHandle>::deinit((uint64_t)v67);
            if (v71[0]) {
              return;
            }
            goto LABEL_69;
          }
        }
        else
        {
          *(unsigned char *)a1 = 0;
          id v40 = v62;
          id v62 = 0;
          *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v40;
        }

        goto LABEL_68;
      }
    }
    else
    {
      unsigned int v23 = 0;
    }
    LODWORD(v24) = 0;
    goto LABEL_22;
  }
  *(unsigned char *)a1 = 0;
  id v19 = v72;
  id v72 = 0;
  *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v19;
LABEL_69:
}

void re::RealityFileWriter::assignSceneSettingsToAssetInfo(_anonymous_namespace_ *a1, re::DynamicString *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v9 = *a3;
  if (!a4)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    re::DynamicString::setCapacity(&v21, 0);
    re::DynamicString::operator=((re::DynamicString *)(v9 + 136), (re::DynamicString *)&v21);
    if (v21 && (v22 & 1) != 0) {
      (*(void (**)(void))(*v21 + 40))();
    }
    uint64_t v13 = *a3;
    *(unsigned char *)(v13 + 256) = a5;
    uint64_t v20 = v13;
    uint64_t v14 = (_anonymous_namespace_ *)(id)(v13 + 8);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    re::DynamicString::setCapacity(&v21, 0);
    re::RealityFileWriter::assignLabelToAssetInfo(a2, &v20, (re::DynamicString *)&v21, (uint64_t)a1);
    if (v21 && (v22 & 1) != 0) {
      (*(void (**)(void))(*v21 + 40))();
    }
    goto LABEL_22;
  }
  re::DynamicString::operator=((re::DynamicString *)(v9 + 136), (re::DynamicString *)(a4 + 24));
  uint64_t v11 = *a3;
  BOOL v12 = (a5 & 1) != 0 || *(unsigned char *)(a4 + 88) != 0;
  *(unsigned char *)(v11 + 256) = v12;
  re::FixedArray<re::DynamicString>::operator=((re::DynamicString *)(v11 + 264), a4 + 96);
  if (!*(void *)(a4 + 104)
    || ((unint64_t v15 = *(void *)(a4 + 64), (v15 & 1) != 0) ? (v16 = v15 >> 1) : (v16 = v15 >> 1), v16))
  {
    uint64_t v13 = *a3;
    uint64_t v25 = v13;
    if (!v13)
    {
      re::RealityFileWriter::assignLabelToAssetInfo(a2, &v25, (re::DynamicString *)(a4 + 56), (uint64_t)a1);
      return;
    }
    id v17 = (id)(v13 + 8);
    re::RealityFileWriter::assignLabelToAssetInfo(a2, &v25, (re::DynamicString *)(a4 + 56), (uint64_t)a1);
    goto LABEL_22;
  }
  uint64_t v18 = *a3;
  uint64_t v26 = v18;
  if (v18)
  {
    id v19 = (id)(v18 + 8);
    uint64_t v18 = *a3;
  }
  re::RealityFileWriter::assignLabelToAssetInfo(a2, &v26, (re::DynamicString *)(v18 + 32), (uint64_t)a1);
  uint64_t v13 = v26;
  if (v26) {
LABEL_22:
  }
}

uint64_t re::RealityFileWriter::AssetInfo::addSceneVariant(re::RealityFileWriter::AssetInfo *this, const re::DynamicString *a2, const re::DynamicString *a3)
{
  uint64_t v3 = (re::RealityFileWriter::AssetInfo *)((char *)this + 168);
  int v6 = 4;
  re::DynamicString::DynamicString((re::DynamicString *)&v7, a2);
  double v4 = re::DynamicArray<re::SceneCompatibilityVariant>::add(v3, (uint64_t)&v6);
  uint64_t result = v7;
  if (v7)
  {
    if (v8) {
      return (*(uint64_t (**)(double))(*(void *)v7 + 40))(v4);
    }
  }
  return result;
}

re::DynamicString *re::RealityFileWriter::assignLabelToAssetInfo@<X0>(re::DynamicString *result@<X0>, uint64_t *a2@<X1>, re::DynamicString *a3@<X2>, uint64_t a4@<X8>)
{
  int v6 = result;
  unint64_t v8 = *((void *)a3 + 1);
  if (v8) {
    unint64_t v9 = v8 >> 1;
  }
  else {
    unint64_t v9 = v8 >> 1;
  }
  if (!v9)
  {
    unint64_t v16 = *(void *)(*a2 + 72);
    if (v16) {
      unint64_t v17 = v16 >> 1;
    }
    else {
      unint64_t v17 = v16 >> 1;
    }
    if (!v17) {
      goto LABEL_22;
    }
    re::HashTable<re::DynamicString,re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::remove((uint64_t)result + 416, *a2 + 64);
LABEL_21:
    uint64_t result = re::DynamicString::operator=((re::DynamicString *)(*a2 + 64), a3);
LABEL_22:
    *(unsigned char *)a4 = 1;
    return result;
  }
  unint64_t v10 = re::Hash<re::DynamicString>::operator()((uint64_t)&v20, (uint64_t)a3);
  if (!*((void *)v6 + 52)
    || (uint64_t v11 = *(unsigned int *)(*((void *)v6 + 53) + 4 * (v10 % *((unsigned int *)v6 + 110))),
        v11 == 0x7FFFFFFF))
  {
LABEL_10:
    uint64_t v13 = (uint64_t)v6 + 416;
    unint64_t v14 = *(void *)(*a2 + 72);
    if (v14) {
      unint64_t v15 = v14 >> 1;
    }
    else {
      unint64_t v15 = v14 >> 1;
    }
    if (v15) {
      re::HashTable<re::DynamicString,re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::remove(v13, *a2 + 64);
    }
    re::HashTable<re::DynamicString,re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::SharedPtr<re::RealityFileWriter::AssetInfo>&>(v13, a3, a2);
    goto LABEL_21;
  }
  uint64_t v12 = *((void *)v6 + 54);
  while (1)
  {
    uint64_t result = (re::DynamicString *)re::DynamicString::operator==(v12 + 56 * v11 + 16, (uint64_t)a3);
    if (result) {
      break;
    }
    uint64_t v11 = *(_DWORD *)(v12 + 56 * v11 + 8) & 0x7FFFFFFF;
    if (v11 == 0x7FFFFFFF) {
      goto LABEL_10;
    }
  }
  if (*(void *)(v12 + 56 * v11 + 48) == *a2) {
    goto LABEL_22;
  }
  if (*((void *)a3 + 1)) {
    uint64_t v18 = (char *)*((void *)a3 + 2);
  }
  else {
    uint64_t v18 = (char *)a3 + 9;
  }
  re::DynamicString::format((re::DynamicString *)"An asset naming conflict occurred because multiple assets have been assigned the caller name '%s'.", (re::DynamicString *)&v20, v18);
  uint64_t v19 = v22;
  uint64_t v22 = 0;
  *(unsigned char *)a4 = 0;
  *(void *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v19;

  uint64_t result = v20;
  if (v20 && (v21 & 1) != 0) {
    return (re::DynamicString *)(*(uint64_t (**)(void))(*(void *)v20 + 40))();
  }
  return result;
}

uint64_t re::RealityFileWriter::writeDataEntry(const re::DynamicString *a1, const char *a2, void *a3, re::RealityFileWriter::AssetWriteResult **a4)
{
  if (*a4) {
    re::RealityFileWriter::AssetWriteResult::clear(*a4);
  }
  if (a3[1]) {
    unint64_t v8 = (re::path *)a3[2];
  }
  else {
    unint64_t v8 = (re::path *)((char *)a3 + 9);
  }
  unint64_t v9 = (const char *)re::path::ext(v8, a2);
  if (v9 && *v9)
  {
    re::RealityFileWriter::getOrMakeAssetInfo((re::RealityFileWriter *)&v33, a1, (re::DynamicString *)a3, v9, 0);
    if ((_BYTE)v33)
    {
      unint64_t v10 = v34[0];
      if (v34[0]) {
        uint64_t v11 = (char *)v34[0] + 8;
      }
      if (v10[6] == 1
        || (unsigned int v29 = v10,
            uint64_t v12 = v10 + 2,
            re::RealityFileWriter::saveEntryToArchive((uint64_t)&v30, (uint64_t)a1, (const __CFData *)a2, (uint64_t *)&v29, 0), v10 + 2, (_BYTE)v30))
      {
        if (*a4) {
          re::DynamicString::operator=((re::RealityFileWriter::AssetWriteResult *)((char *)*a4 + 24), (re::DynamicString *)(v10 + 8));
        }
        uint64_t v13 = 1;
      }
      else
      {
        uint64_t v25 = *a4;
        if (*a4)
        {
          uint64_t v26 = (char *)v25 + 8;
          id v27 = v31;
          id v28 = v27;
          re::ObjCObject::operator=((id *)v25 + 12, &v28);
        }
        else
        {
          id v27 = v31;
          id v28 = v27;
        }
        uint64_t v13 = 0;
      }
    }
    else
    {
      uint64_t v19 = *a4;
      if (*a4)
      {
        uint64_t v20 = (char *)v19 + 8;
        id v32 = v34[0];
        re::ObjCObject::operator=((id *)v19 + 12, &v32);
      }
      else
      {
        id v32 = v34[0];
      }
      uint64_t v13 = 0;
    }
    re::Result<re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::WrappedError>::~Result((uint64_t)&v33);
  }
  else
  {
    unint64_t v14 = *a4;
    if (*a4)
    {
      unint64_t v15 = (char *)v14 + 8;
      if (a3[1]) {
        unint64_t v16 = (char *)a3[2];
      }
      else {
        unint64_t v16 = (char *)a3 + 9;
      }
      re::DynamicString::format((re::DynamicString *)"Could not parse an extension from the path %s.", (re::DynamicString *)&v33, v16);
      unint64_t v17 = (unint64_t)v34[0] >> 1;
      if (((uint64_t)v34[0] & 1) == 0) {
        unint64_t v17 = LOBYTE(v34[0]) >> 1;
      }
      if (v17)
      {
        if ((uint64_t)v34[0]) {
          uint64_t v18 = (char *)v34[1];
        }
        else {
          uint64_t v18 = (char *)v34 + 1;
        }
        re::WrappedError::make((re::WrappedError *)@"RERealityFileWriterErrorDomain", (const __CFString *)7, (uint64_t)v18, &v30);
      }
      else
      {
        re::WrappedError::make((re::WrappedError *)@"RERealityFileWriterErrorDomain", (const __CFString *)7, 0, &v30);
      }
      char v21 = (void **)((char *)v14 + 96);
      if ((id *)((char *)v14 + 96) != &v30)
      {
        id v22 = v30;
        id v30 = 0;
        uint64_t v23 = *v21;
        *char v21 = v22;
      }
      if (v33 && ((uint64_t)v34[0] & 1) != 0) {
        (*(void (**)(void))(*(void *)v33 + 40))();
      }
    }
    else
    {
      re::DynamicString::format((re::DynamicString *)"Could not parse an extension from the path %s.", (re::DynamicString *)&v33, v8);
      if (v33 && ((uint64_t)v34[0] & 1) != 0) {
        (*(void (**)(void))(*(void *)v33 + 40))();
      }
    }
    return 0;
  }
  return v13;
}

void re::RealityFileWriter::getOrMakeAssetInfo(re::RealityFileWriter *this, const re::DynamicString *a2, re::DynamicString *a3, const char *a4, char *a5)
{
  unint64_t v10 = (char *)a2 + 24;
  AssetInfo = re::RealityFileWriter::AssetInfoTable::tryGetAssetInfo((const re::DynamicString *)((char *)a2 + 24), a3, &v72);
  uint64_t v12 = v72;
  if (v72) {
    goto LABEL_2;
  }
  if (a5)
  {
    size_t v15 = re::RigEvaluation::HashString::operator()((int)&v77, a5);
    if (*((void *)a2 + 15))
    {
      uint64_t v16 = *(unsigned int *)(*((void *)a2 + 16) + 4 * (v15 % *((unsigned int *)a2 + 36)));
      if (v16 != 0x7FFFFFFF)
      {
        uint64_t v17 = *((void *)a2 + 17);
        while (1)
        {
          uint64_t v18 = v17 + 32 * v16;
          if (!strcmp(*(const char **)(v18 + 16), a5)) {
            break;
          }
          uint64_t v16 = *(_DWORD *)(v18 + 8) & 0x7FFFFFFF;
          if (v16 == 0x7FFFFFFF) {
            goto LABEL_13;
          }
        }
        uint64_t v36 = (*(_DWORD *)(v18 + 24) + 1);
        *(_DWORD *)(v18 + 24) = v36;
        goto LABEL_37;
      }
    }
LABEL_13:
    size_t v19 = re::RigEvaluation::HashString::operator()((int)&v77, a5);
    size_t v20 = v19;
    if (*((void *)a2 + 15))
    {
      unint64_t v21 = v19 % *((unsigned int *)a2 + 36);
      uint64_t v22 = *(unsigned int *)(*((void *)a2 + 16) + 4 * v21);
      if (v22 != 0x7FFFFFFF)
      {
        id v67 = this;
        uint64_t v23 = *((void *)a2 + 17);
        while (1)
        {
          uint64_t v24 = v23 + 32 * v22;
          if (!strcmp(*(const char **)(v24 + 16), a5)) {
            break;
          }
          uint64_t v22 = *(_DWORD *)(v24 + 8) & 0x7FFFFFFF;
          if (v22 == 0x7FFFFFFF)
          {
            this = v67;
            goto LABEL_31;
          }
        }
        uint64_t v36 = 0;
        this = v67;
        goto LABEL_37;
      }
    }
    else
    {
      LODWORD(v21) = 0;
    }
LABEL_31:
    uint64_t v32 = *((unsigned int *)a2 + 39);
    if (v32 == 0x7FFFFFFF)
    {
      uint64_t v32 = *((unsigned int *)a2 + 38);
      int v33 = v32;
      if (v32 == *((_DWORD *)a2 + 36))
      {
        re::HashTable<char const*,int,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::setCapacity((uint64_t)a2 + 120, 2 * *((_DWORD *)a2 + 37));
        LODWORD(v21) = v20 % *((unsigned int *)a2 + 36);
        int v33 = *((_DWORD *)a2 + 38);
      }
      *((_DWORD *)a2 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v33 + 1;
      uint64_t v34 = *((void *)a2 + 17);
      int v35 = *(_DWORD *)(v34 + 32 * v32 + 8);
    }
    else
    {
      uint64_t v34 = *((void *)a2 + 17);
      int v35 = *(_DWORD *)(v34 + 32 * v32 + 8);
      *((_DWORD *)a2 + 39) = v35 & 0x7FFFFFFF;
    }
    uint64_t v36 = 0;
    *(_DWORD *)(v34 + 32 * v32 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v35 | 0x80000000;
    *(_DWORD *)(*((void *)a2 + 17) + 32 * v32 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*((void *)a2 + 17) + 32 * v32 + 8) & 0x80000000 | *(_DWORD *)(*((void *)a2 + 16) + 4 * v21);
    *(void *)(*((void *)a2 + 17) + 32 * v3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v20;
    *(void *)(*((void *)a2 + 17) + 32 * v32 + 16) = a5;
    *(_DWORD *)(*((void *)a2 + 17) + 32 * v32 + 24) = 0;
    *(_DWORD *)(*((void *)a2 + 16) + 4 * v21) = v32;
    ++*((_DWORD *)a2 + 37);
    ++*((_DWORD *)a2 + 40);
LABEL_37:
    uint64_t v37 = v10;
    re::DynamicString::format((re::DynamicString *)"%s_%i.%s", (re::DynamicString *)&v70, a5, v36, a4);
    if (*(void *)&v68[0] && (BYTE8(v68[0]) & 1) != 0) {
      (*(void (**)(void))(**(void **)&v68[0] + 40))();
    }
    goto LABEL_102;
  }
  uint64_t v25 = this;
  uint64_t v26 = re::DynamicString::DynamicString((re::DynamicString *)&v77, a3);
  re::DynamicString::rfind((uint64_t)v26, 47, v75);
  if (v75[0]) {
    unint64_t v27 = *(void *)&v75[8] + 1;
  }
  else {
    unint64_t v27 = 0;
  }
  re::DynamicString::rfind((uint64_t)&v77, 58, &v73);
  if (v27 <= v74 + 1) {
    unint64_t v28 = v74 + 1;
  }
  else {
    unint64_t v28 = v27;
  }
  if ((_BYTE)v73) {
    unint64_t v29 = v28;
  }
  else {
    unint64_t v29 = v27;
  }
  unint64_t v30 = *((void *)&v77 + 1);
  re::DynamicString::rfind((uint64_t)&v77, 46, &v70);
  if ((_BYTE)v70)
  {
    unint64_t v31 = v71[0];
    this = v25;
  }
  else
  {
    unint64_t v31 = v30 >> 1;
    if ((v30 & 1) == 0) {
      unint64_t v31 = v30 >> 1;
    }
    this = v25;
    if (!v29) {
      goto LABEL_46;
    }
  }
  re::DynamicString::substr((re::DynamicString *)&v77, v29, v31 - v29, (re::DynamicString *)v68);
  re::DynamicString::operator=((re::DynamicString *)&v77, (re::DynamicString *)v68);
  if (*(void *)&v68[0] && (BYTE8(v68[0]) & 1) != 0) {
    (*(void (**)(void))(**(void **)&v68[0] + 40))();
  }
LABEL_46:
  uint64_t v38 = v10;
  v75[0] = 95;
  re::DynamicString::find((re::DynamicString *)&v77, v75, 1, 0, (uint64_t)v68);
  if (!LOBYTE(v68[0])) {
    goto LABEL_66;
  }
  unint64_t v39 = (BYTE8(v77) & 1) != 0 ? *((void *)&v77 + 1) >> 1 : BYTE8(v77) >> 1;
  unint64_t v40 = *((void *)&v68[0] + 1) + 1;
  if (*((void *)&v68[0] + 1) + 1 >= v39) {
    goto LABEL_66;
  }
  int v41 = 0;
  char v42 = 1;
  uint64_t v43 = MEMORY[0x263EF8318];
  do
  {
    uint64_t v44 = *(unsigned __int8 *)re::DynamicString::operator[]((uint64_t)&v77, v40);
    if ((v42 & 1) == 0)
    {
      if ((v44 & 0x80) != 0 || (*(_DWORD *)(v43 + 4 * v44 + 60) & 0x400) == 0) {
        goto LABEL_63;
      }
      goto LABEL_59;
    }
    if ((v44 & 0x80) != 0) {
      goto LABEL_63;
    }
    if ((*(_DWORD *)(v43 + 4 * v44 + 60) & 0x10000) == 0)
    {
      if (v44 != 95) {
        goto LABEL_63;
      }
LABEL_59:
      char v42 = 0;
      goto LABEL_61;
    }
    ++v41;
    char v42 = 1;
LABEL_61:
    ++v40;
  }
  while (v39 != v40);
  unint64_t v40 = v39;
LABEL_63:
  if (v40 != v39 || v41 < 4 || v41 > 8)
  {
LABEL_66:
    re::DynamicString::DynamicString((re::DynamicString *)v75, a3);
    uint64_t v45 = (char *)v76;
    if ((v75[8] & 1) == 0) {
      uint64_t v45 = &v75[9];
    }
    uint64_t v46 = v75[8] >> 1;
    int v47 = 5381;
    if (v75[8]) {
      uint64_t v46 = *(void *)&v75[8] >> 1;
    }
    for (; v46; --v46)
    {
      int v48 = *v45++;
      int v47 = v48 - (v47 & 0xFFFFFF) + ((v47 & 0xFFFFFF) << 7);
    }
    if (BYTE8(v77)) {
      unint64_t v49 = *((void *)&v77 + 1) >> 1;
    }
    else {
      unint64_t v49 = BYTE8(v77) >> 1;
    }
    if (v49 > 0xF4)
    {
      re::DynamicString::substr((re::DynamicString *)&v77, v49 - 244, 0xF4uLL, (re::DynamicString *)v68);
      re::DynamicString::operator=((re::DynamicString *)&v77, (re::DynamicString *)v68);
      if (*(void *)&v68[0])
      {
        if (BYTE8(v68[0])) {
          (*(void (**)(void))(**(void **)&v68[0] + 40))();
        }
      }
    }
    re::DynamicString::appendf((re::DynamicString *)&v77, "_%x", v47);
    if (*(void *)v75)
    {
      if (v75[8]) {
        (*(void (**)(void))(**(void **)v75 + 40))();
      }
      *(_OWORD *)uint64_t v75 = 0u;
      long long v76 = 0u;
    }
  }
  re::DynamicString::operator+((re::DynamicString *)&v77, ".", (re::DynamicString *)v68);
  re::DynamicString::operator+((re::DynamicString *)v68, a4, (re::DynamicString *)&v70);
  if (*(void *)&v68[0] && (BYTE8(v68[0]) & 1) != 0) {
    (*(void (**)(void))(**(void **)&v68[0] + 40))();
  }
  for (uint64_t i = 1; ; uint64_t i = (i + 1))
  {
    re::DynamicString::DynamicString((re::DynamicString *)v68, (const re::DynamicString *)&v70);
    BOOL v51 = re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)a2 + 72, (uint64_t)v68);
    if (*(void *)&v68[0])
    {
      if (BYTE8(v68[0])) {
        (*(void (**)(void))(**(void **)&v68[0] + 40))();
      }
      memset(v68, 0, sizeof(v68));
    }
    if (!v51) {
      break;
    }
    int v52 = v78;
    if ((BYTE8(v77) & 1) == 0) {
      int v52 = (char *)&v77 + 9;
    }
    re::DynamicString::format((re::DynamicString *)"%s_%d.%s", (re::DynamicString *)&v73, v52, i, a4);
    re::DynamicString::operator=((re::DynamicString *)&v70, (re::DynamicString *)&v73);
    if (v73 && (v74 & 1) != 0) {
      (*(void (**)(void))(*(void *)v73 + 40))();
    }
  }
  if (void)v77 && (BYTE8(v77)) {
    (*(void (**)(void))(*(void *)v77 + 40))();
  }
  uint64_t v37 = v38;
LABEL_102:
  unint64_t v53 = re::Hash<re::DynamicString>::operator()((uint64_t)v68, (uint64_t)a3);
  if (!*v37
    || (uint64_t v54 = *(unsigned int *)(*((void *)a2 + 4) + 4 * (v53 % *((unsigned int *)a2 + 12))), v54 == 0x7FFFFFFF))
  {
LABEL_107:
    uint64_t v56 = (char *)a2 + 72;
    BOOL v57 = re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)v56, (uint64_t)&v70);
    if (v57)
    {
      if (v71[0]) {
        int v58 = (char *)v71[1];
      }
      else {
        int v58 = (char *)v71 + 1;
      }
      re::DynamicString::format((re::DynamicString *)"The serialization string '%s' is already in use.", (re::DynamicString *)&v77, v58);
      goto LABEL_117;
    }
    uint64_t v59 = re::globalAllocators((re *)v57);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v59[2] + 32))(v59[2], 288, 8);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)v12, 0);
    *(void *)uint64_t v12 = &unk_26E6CA210;
    *(_DWORD *)(v12 + 24) = 0;
    uint64_t v60 = re::DynamicString::DynamicString((re::DynamicString *)(v12 + 32), (const re::DynamicString *)&v70);
    *(_OWORD *)(v12 + 80) = 0u;
    *(_OWORD *)(v12 + 64) = 0u;
    uint64_t v61 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)(v12 + 64), 0);
    *(void *)(v12 + 96) = 0;
    *(void *)(v12 + 104) = 0;
    *(_DWORD *)(v12 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0;
    *(void *)(v12 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    *(_OWORD *)(v12 + 12re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
    *(_OWORD *)(v12 + 144) = 0u;
    *(void *)(v12 + 160) = 0;
    re::DynamicString::setCapacity((void *)(v12 + 136), 0);
    *(void *)(v12 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(void *)(v12 + 176) = 0;
    *(_DWORD *)(v12 + 19re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    *(void *)(v12 + 184) = 0;
    *(_OWORD *)(v12 + 200) = 0u;
    *(_OWORD *)(v12 + 216) = 0u;
    *(_OWORD *)(v12 + 22re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
    *(void *)(v12 + 244) = 0x7FFFFFFFLL;
    *(unsigned char *)(v12 + 256) = 0;
    *(void *)(v12 + 27re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    *(void *)(v12 + 280) = 0;
    *(void *)(v12 + 264) = 0;
    *(void *)&long long v77 = v12;
    re::HashTable<re::DynamicString,re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::SharedPtr<re::RealityFileWriter::AssetInfo>&>((uint64_t)v37, a3, (uint64_t *)&v77);
    re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add((uint64_t)v56, (re::DynamicString *)&v70);
    id v62 = (id)(v12 + 8);
    LOBYTE(v68[0]) = 1;
    *((void *)&v68[0] + 1) = v12;

    id v63 = (id)(v12 + 8);
    char v64 = 0;
    uint64_t v72 = v12;
  }
  else
  {
    uint64_t v55 = *((void *)a2 + 5);
    while (!re::DynamicString::operator==(v55 + 56 * v54 + 16, (uint64_t)a3))
    {
      uint64_t v54 = *(_DWORD *)(v55 + 56 * v54 + 8) & 0x7FFFFFFF;
      if (v54 == 0x7FFFFFFF) {
        goto LABEL_107;
      }
    }
    if (*((void *)a3 + 1)) {
      unsigned int v65 = (char *)*((void *)a3 + 2);
    }
    else {
      unsigned int v65 = (char *)a3 + 9;
    }
    re::DynamicString::format((re::DynamicString *)"The AssetPath '%s' is already in use.", (re::DynamicString *)&v77, v65);
LABEL_117:
    LOBYTE(v68[0]) = 0;
    *(_OWORD *)((char *)v68 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v77;
    *((void *)&v68[1] + 1) = v78;
    uint64_t v69 = v79;
    char v64 = 1;
    uint64_t v66 = v77;
    *(void *)&long long v77 = 0;
    *(unsigned char *)this = 0;
    *((void *)this + 1) = v66;

    uint64_t v12 = 0;
  }
  if (LOBYTE(v68[0]))
  {
    if (*((void *)&v68[0] + 1)) {
  }
    }
  else if (*((void *)&v68[0] + 1) && (v68[1] & 1) != 0)
  {
    (*(void (**)(void))(**((void **)&v68[0] + 1) + 40))();
  }
  if (v70 && (v71[0] & 1) != 0) {
    (*(void (**)(void))(*(void *)v70 + 40))();
  }
  if (v64) {
    goto LABEL_4;
  }
  if (v12)
  {
LABEL_2:
    id v13 = (id)(v12 + 8);
    uint64_t v14 = v72;
    goto LABEL_3;
  }
  uint64_t v14 = 0;
LABEL_3:
  *(unsigned char *)this = 1;
  *((void *)this + 1) = v12;
  uint64_t v12 = v14;
LABEL_4:
  if (v12) {
}
  }

uint64_t re::RealityFileWriter::saveEntryToArchive(uint64_t a1, uint64_t a2, const __CFData *a3, uint64_t *a4, int a5)
{
  uint64_t v6 = *a4;
  if (*(_DWORD *)(*a4 + 24) == 1)
  {
    if (*(unsigned char *)(v6 + 40)) {
      uint64_t v7 = *(void *)(v6 + 48);
    }
    else {
      uint64_t v7 = v6 + 41;
    }
    re::DynamicString::format((re::DynamicString *)"The asset (%s) has already been written.", (re::DynamicString *)&v19, v7);
    uint64_t v13 = v22;
    uint64_t v22 = 0;
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v13;

    uint64_t result = v19;
    if (v19 && (v20 & 1) != 0)
    {
      size_t v15 = v21;
      return (*(uint64_t (**)(uint64_t, char *))(*(void *)result + 40))(result, v15);
    }
  }
  else
  {
    if (*(unsigned char *)(v6 + 40)) {
      uint64_t v12 = *(void *)(v6 + 48);
    }
    else {
      uint64_t v12 = v6 + 41;
    }
    re::DynamicString::format((re::DynamicString *)"assets/%s", (re::DynamicString *)&v22, v12);
    if (v23) {
      uint64_t v16 = v25;
    }
    else {
      uint64_t v16 = v24;
    }
    re::RealityArchiveWriter::writeEntry(a2 + 248, (uint64_t)v16, a3, a5, (uint64_t)&v19);
    if ((_BYTE)v19)
    {
      *(_DWORD *)(*a4 + 24) = 1;
      *(unsigned char *)a1 = 1;
    }
    else
    {
      uint64_t v17 = v18;
      uint64_t v18 = 0;
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v17;

      if (!(_BYTE)v19 && v20 && (v21 & 1) != 0) {
        (*(void (**)(void))(*(void *)v20 + 40))();
      }
    }
    uint64_t result = v22;
    if (v22 && (v23 & 1) != 0)
    {
      size_t v15 = v25;
      return (*(uint64_t (**)(uint64_t, char *))(*(void *)result + 40))(result, v15);
    }
  }
  return result;
}

uint64_t re::RealityFileWriter::writeAllDependencies(uint64_t a1, uint64_t a2, re::RealityFileWriter::AssetWriteResult **a3)
{
  id v65[3] = *MEMORY[0x263EF8340];
  if (*a3) {
    re::RealityFileWriter::AssetWriteResult::clear(*a3);
  }
  while (2)
  {
    uint64_t v5 = *(unsigned int *)(a1 + 56);
    if (v5)
    {
      uint64_t v6 = 0;
      uint64_t v7 = (int *)(*(void *)(a1 + 40) + 8);
      while (1)
      {
        int v8 = *v7;
        v7 += 14;
        if (v8 < 0) {
          break;
        }
        if (v5 == ++v6)
        {
          LODWORD(v6) = *(_DWORD *)(a1 + 56);
          break;
        }
      }
    }
    else
    {
      LODWORD(v6) = 0;
    }
    if (v5 == v6) {
      return 1;
    }
    uint64_t v9 = v6;
    while (1)
    {
      uint64_t v10 = *(void *)(a1 + 40);
      uint64_t v11 = *(void *)(v10 + 56 * v9 + 48);
      if (v11) {
        id v12 = (id)(v11 + 8);
      }
      if (!*(_DWORD *)(v11 + 24)) {
        break;
      }

      unsigned int v13 = *(_DWORD *)(a1 + 56);
      if (v13 <= (int)v6 + 1) {
        unsigned int v13 = v6 + 1;
      }
      while (1)
      {
        uint64_t v9 = (v6 + 1);
        if (v13 - 1 == v6) {
          break;
        }
        LODWORD(v6) = v6 + 1;
        unsigned int v14 = v9;
        if ((*(_DWORD *)(*(void *)(a1 + 40) + 56 * v9 + 8) & 0x80000000) != 0) {
          goto LABEL_20;
        }
      }
      unsigned int v14 = v13;
LABEL_20:
      LODWORD(v6) = v14;
      if (v5 == v14) {
        return 1;
      }
    }
    char v54 = 1;
    re::DynamicString::DynamicString((re::DynamicString *)&v55, (const re::DynamicString *)(v10 + 56 * v9 + 16));

    if (!v54) {
      return 1;
    }
    re::DynamicString::DynamicString((re::DynamicString *)&v51, (const re::DynamicString *)&v55);
    if (v52) {
      size_t v15 = *(unsigned char **)&v53[7];
    }
    else {
      size_t v15 = v53;
    }
    (*(void (**)(void *__return_ptr, uint64_t, unsigned char *))(*(void *)a2 + 8))(v50, a2, v15);
    int v48 = 0;
    memset(v47, 0, sizeof(v47));
    uint64_t v49 = 0x7FFFFFFFLL;
    uint64_t v16 = (AssetService *)re::AssetHandle::legacy_assetPath((re::AssetHandle *)v50);
    re::RealityFileWriter::customizeAssetPathMapping(&v45, (re::AssetPathMapping *)a1, (const re::AssetPath *)v47, v16, a2);
    if ((_BYTE)v45)
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)v43, (const re::AssetHandle *)v50);
      re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::HashTable((uint64_t)v41, (uint64_t)v47);
      if (v42)
      {
        BOOL v17 = re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::containsKey((uint64_t)v41, (uint64_t)v43);
        re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(v41);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v43);
        if (v17)
        {
          uint64_t v19 = *re::assetsLogObjects(v18);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v20 = **(void **)(v50[1] + 264);
            uint64_t v21 = *((void *)re::AssetHandle::assetInfo((re::AssetHandle *)v50) + 10);
            if (v21 == -1) {
              uint64_t v21 = 0;
            }
            *(_DWORD *)long long buf = 136315394;
            uint64_t v58 = v20;
            __int16 v59 = 2048;
            uint64_t v60 = v21;
            _os_log_impl(&dword_233120000, v19, OS_LOG_TYPE_DEFAULT, "Not writing remapped %s with assetID: %llu", buf, 0x16u);
          }
          int v22 = 3;
          goto LABEL_61;
        }
      }
      else
      {
        re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(v41);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v43);
      }
      re::RealityFileWriter::AssetInfoTable::tryGetAssetInfo((re::RealityFileWriter::AssetInfoTable *)(a1 + 24), (const re::DynamicString *)&v51, (uint64_t *)&v40);
      re::AssetHandle::AssetHandle((re::AssetHandle *)buf, (const re::AssetHandle *)v50);
      uint64_t v25 = v40;
      re::DynamicString::DynamicString((re::DynamicString *)v61, (const re::DynamicString *)(v40 + 136));
      re::DynamicString::DynamicString((re::DynamicString *)v62, (const re::DynamicString *)(v25 + 64));
      v63[0] = v25[256];
      *(_WORD *)&v63[1] = 0;
      memset(v65, 0, 24);
      re::AssetHandle::AssetHandle((re::AssetHandle *)v33, (const re::AssetHandle *)buf);
      re::DynamicString::DynamicString((re::DynamicString *)v34, (const re::DynamicString *)v61);
      re::DynamicString::DynamicString((re::DynamicString *)v35, (const re::DynamicString *)v62);
      __int16 v36 = *(_WORD *)v63;
      char v37 = v63[2];
      if (v63[2]) {
        char v38 = v64;
      }
      re::FixedArray<re::DynamicString>::FixedArray((re::DynamicString *)v39, (uint64_t)v65);
      uint64_t v26 = *a3;
      uint64_t v32 = v26;
      if (v26)
      {
        unint64_t v27 = (char *)v26 + 8;
        unint64_t v28 = (char *)v26 + 8;
        int v29 = re::RealityFileWriter::writeAsset(a1, (re::AssetHandle *)v33, &v32);

        uint64_t v32 = 0;
      }
      else
      {
        int v29 = re::RealityFileWriter::writeAsset(a1, (re::AssetHandle *)v33, &v32);
      }
      re::FixedArray<re::DynamicString>::deinit(v39);
      if (v35[0])
      {
        if (v35[1]) {
          (*(void (**)(void))(*(void *)v35[0] + 40))();
        }
        memset(v35, 0, sizeof(v35));
      }
      if (v34[0])
      {
        if (v34[1]) {
          (*(void (**)(void))(*(void *)v34[0] + 40))();
        }
        memset(v34, 0, sizeof(v34));
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v33);
      re::FixedArray<re::DynamicString>::deinit(v65);
      if (v62[0])
      {
        if (v62[1]) {
          (*(void (**)(void))(*(void *)v62[0] + 40))();
        }
        memset(v62, 0, sizeof(v62));
      }
      if (v61[0])
      {
        if (v61[1]) {
          (*(void (**)(void))(*(void *)v61[0] + 40))();
        }
        memset(v61, 0, sizeof(v61));
      }
      int v22 = v29 ^ 1;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);

      goto LABEL_61;
    }
    char v23 = *a3;
    if (*a3)
    {
      uint64_t v24 = (char *)v23 + 8;
      id v44 = v46;
      re::ObjCObject::operator=((id *)v23 + 12, &v44);
    }
    else
    {
      id v44 = v46;
    }
    int v22 = 1;
LABEL_61:
    re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(v47);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v50);
    if (v51 && (v52 & 1) != 0) {
      (*(void (**)(void))(*(void *)v51 + 40))();
    }
    if (v54 && v55 && (v56 & 1) != 0) {
      (*(void (**)(void))(*(void *)v55 + 40))();
    }
    switch(v22)
    {
      case 1:
        uint64_t result = 0;
        break;
      case 2:
        return 1;
      default:
        continue;
    }
    return result;
  }
}

uint64_t (***re::RealityFileWriter::customizeAssetPathMapping(uint64_t (***this)(void), re::AssetPathMapping *a2, const re::AssetPath *a3, AssetService *a4, uint64_t a5))(void)
{
  uint64_t v9 = (uint64_t)this;
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v10 = *((void *)a2 + 48);
  if (v10)
  {
    uint64_t v11 = *((void *)a2 + 50);
    uint64_t v12 = 40 * v10;
    do
    {
      uint64_t v24 = *(void *)(v11 + 24);
      uint64_t v25 = 0;
      re::FunctionBase<24ul,BOOL ()(re::AssetPathMapping &,re::AssetService *)>::operator=<24ul>((uint64_t)v23, v11);
      uint64_t v20 = a5;
      unsigned int v13 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, const re::AssetPath *, uint64_t *))(*(void *)v25 + 16))(v25, a3, &v20);
      if (!v13)
      {
        uint64_t v18 = v22;
        uint64_t v22 = 0;
        *(unsigned char *)uint64_t v9 = 0;
        *(void *)(v9 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v18;

        if (v20 && (v21 & 1) != 0) {
          (*(void (**)(void))(*(void *)v20 + 40))();
        }
        return re::FunctionBase<24ul,BOOL ()(re::AssetPathMapping &,re::AssetService *)>::destroyCallable((uint64_t)v23);
      }
      this = re::FunctionBase<24ul,BOOL ()(re::AssetPathMapping &,re::AssetService *)>::destroyCallable((uint64_t)v23);
      v11 += 40;
      v12 -= 40;
    }
    while (v12);
    if (*((void *)a2 + 48)) {
      goto LABEL_10;
    }
  }
  uint64_t v14 = *((void *)a2 + 43);
  if (v14)
  {
    uint64_t v15 = *((void *)a2 + 45);
    uint64_t v16 = 40 * v14;
    while (1)
    {
      uint64_t v24 = *(void *)(v15 + 24);
      uint64_t v25 = 0;
      re::FunctionBase<24ul,BOOL ()(re::AssetPathMapping &,re::AssetPath const&,re::AssetService *)>::operator=<24ul>((uint64_t)v23, v15);
      uint64_t v20 = a5;
      BOOL v17 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, const re::AssetPath *, AssetService *, uint64_t *))(*(void *)v25 + 16))(v25, a3, a4, &v20);
      if (!v17) {
        break;
      }
      this = re::FunctionBase<24ul,BOOL ()(re::AssetPathMapping &,re::AssetPath const&,re::AssetService *)>::destroyCallable((uint64_t)v23);
      v15 += 40;
      v16 -= 40;
      if (!v16) {
        goto LABEL_10;
      }
    }
    uint64_t v19 = v22;
    uint64_t v22 = 0;
    *(unsigned char *)uint64_t v9 = 0;
    *(void *)(v9 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v19;

    if (v20)
    {
      if (v21) {
        (*(void (**)(void))(*(void *)v20 + 40))();
      }
    }
    return re::FunctionBase<24ul,BOOL ()(re::AssetPathMapping &,re::AssetPath const&,re::AssetService *)>::destroyCallable((uint64_t)v23);
  }
  else
  {
LABEL_10:
    *(unsigned char *)uint64_t v9 = 1;
  }
  return this;
}

uint64_t re::RealityFileWriter::writeAssetArrayAndDependencies(uint64_t a1, uint64_t a2, int a3, re::RealityFileWriter::AssetWriteResult **a4)
{
  uint64_t v259 = *MEMORY[0x263EF8340];
  if (*a4) {
    re::RealityFileWriter::AssetWriteResult::clear(*a4);
  }
  if (!*(void *)(a2 + 8)) {
    return 1;
  }
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  unint64_t v8 = (unint64_t)v253;
  do
  {
    if (!(_BYTE)v254)
    {
      uint64_t v14 = *a4;
      if (*a4)
      {
        uint64_t v15 = (char *)v14 + 8;
        id v16 = *((id *)&v254 + 1);
        id v250 = v16;
        re::ObjCObject::operator=((id *)v14 + 12, &v250);
      }
      else
      {
        id v16 = *((id *)&v254 + 1);
        id v250 = v16;
      }
      return 0;
    }
    ++v7;
    unint64_t v10 = *(void *)(a2 + 8);
    v6 += 120;
  }
  while (v7 < v10);
  if (!v10) {
    goto LABEL_355;
  }
  uint64_t v11 = *(void *)(a2 + 16);
  uint64_t v12 = *(void *)(v11 + 8);
  if (v12) {
    v210 = *(re::AssetManager **)(v12 + 24);
  }
  else {
    v210 = 0;
  }
  if (v10 >= 2)
  {
    BOOL v17 = (re::AssetManager **)(v11 + 128);
    unint64_t v18 = v10 - 1;
    while (1)
    {
      uint64_t v19 = *v17;
      if (*v17) {
        uint64_t v19 = (re::AssetManager *)*((void *)v19 + 3);
      }
      if (v210 != v19) {
        break;
      }
      v17 += 15;
      if (!--v18) {
        goto LABEL_23;
      }
    }
    uint64_t v13 = (uint64_t)*a4;
    if (*a4)
    {
      re::ObjCObject::operator=((id *)(v13 + 96), &v249);
    }
    else
    {
    }

    if (void)v254 && (BYTE8(v254)) {
      (*(void (**)(void))(*(void *)v254 + 40))();
    }
    if (!v13) {
      return v13;
    }

    return 0;
  }
LABEL_23:
  int v199 = a3;
  uint64_t v20 = *((void *)v210 + 145);
  memset(v253, 0, 36);
  *(void *)&v253[36] = 0x7FFFFFFFLL;
  char v21 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, void))(*(void *)v20 + 72))(v20, *(void *)(*(void *)(a1 + 320) + 24));
  unsigned int v208 = v21;
  unint64_t v22 = *(void *)(a2 + 8);
  unint64_t v248 = 0;
  uint64_t v246 = 0;
  unint64_t v247 = 0;
  uint64_t v201 = v20;
  if (*(void *)(a2 + 8))
  {
    uint64_t v205 = 0;
    unint64_t v8 = 0;
    unsigned int v206 = 0;
    uint64_t v23 = 0;
    unsigned int v202 = 0;
    uint64_t v203 = 0;
    for (unint64_t i = 0; i < *(void *)(a2 + 8); ++i)
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)buf, (const re::AssetHandle *)(*(void *)(a2 + 16) + 120 * i));
      BOOL isDeviceAsset = re::AssetManager::isDeviceAsset((uint64_t)v210, (uint64_t)buf, v208);
      if (isDeviceAsset)
      {
        uint64_t v49 = *a4;
        if (*a4)
        {
          re::ObjCObject::operator=((id *)v49 + 12, &v245);
        }
        else
        {
        }

        if (void)v254 && (BYTE8(v254)) {
          (*(void (**)(void))(*(void *)v254 + 40))();
        }
        if (v49) {

        }
        goto LABEL_333;
      }
      if ((**(unsigned int (***)(uint64_t, uint8_t *))v20)(v20, buf))
      {
        if ((*(unsigned int (**)(uint64_t, uint8_t *, void))(*(void *)v20 + 8))(v20, buf, *(void *)(*(void *)(a1 + 320) + 24)))
        {
          (*(void (**)(long long *__return_ptr, uint64_t, uint8_t *, void))(*(void *)v20 + 16))(&v254, v20, buf, *(void *)(*(void *)(a1 + 320) + 24));
          if (!(_BYTE)v254)
          {
            v150 = *a4;
            if (*a4)
            {
              uint64_t v151 = (char *)v150 + 8;
              id v244 = *((id *)&v254 + 1);
              re::ObjCObject::operator=((id *)v150 + 12, &v244);
            }
            else
            {
              id v244 = *((id *)&v254 + 1);
            }
            uint64_t v152 = (unsigned __int8 *)&v254;
LABEL_332:
            re::Result<re::AssetHandle,re::WrappedError>::~Result(v152);
LABEL_333:
            re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
            uint64_t v13 = 0;
            goto LABEL_345;
          }
          re::AssetHandle::operator=((uint64_t)buf, (uint64_t *)&v254 + 1);
          re::Result<re::AssetHandle,re::WrappedError>::~Result((unsigned __int8 *)&v254);
        }
        unint64_t v26 = *(void *)(a2 + 8);
        if (v26 <= i) {
          goto LABEL_354;
        }
        re::RealityFileWriter::remapSceneAsset((re::RealityFileWriter *)v240, *(const re::AssetHandle **)(a1 + 408), (const re::DynamicString *)buf, *(void *)(a2 + 16) + 120 * i + 56);
        if (!v240[0])
        {
          uint64_t v143 = *a4;
          if (*a4)
          {
            uint64_t v144 = (char *)v143 + 8;
            id v243 = *(id *)&v240[8];
            re::ObjCObject::operator=((id *)v143 + 12, &v243);
          }
          else
          {
            id v243 = *(id *)&v240[8];
          }
          uint64_t v152 = v240;
          goto LABEL_332;
        }
        re::AssetHandle::operator=((uint64_t)buf, (uint64_t *)&v240[8]);
        re::Result<re::AssetHandle,re::WrappedError>::~Result(v240);
      }
      unint64_t v26 = *(void *)(a2 + 8);
      if (v26 <= i)
      {
        *(void *)uint64_t v240 = 0;
        long long v257 = 0u;
        long long v258 = 0u;
        long long v255 = 0u;
        long long v256 = 0u;
        long long v254 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v252 = 136315906;
        *(void *)&v252[4] = "operator[]";
        *(_WORD *)&v252[12] = 1024;
        *(_DWORD *)&v252[14] = 476;
        *(_WORD *)&v252[18] = 2048;
        *(void *)&v252[20] = i;
        *(_WORD *)&v252[28] = 2048;
        *(void *)&v252[30] = v26;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_353:
        *(void *)uint64_t v240 = 0;
        long long v257 = 0u;
        long long v258 = 0u;
        long long v255 = 0u;
        long long v256 = 0u;
        long long v254 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v252 = 136315906;
        *(void *)&v252[4] = "operator[]";
        *(_WORD *)&v252[12] = 1024;
        *(_DWORD *)&v252[14] = 468;
        *(_WORD *)&v252[18] = 2048;
        *(void *)&v252[20] = i;
        *(_WORD *)&v252[28] = 2048;
        *(void *)&v252[30] = v26;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_354:
        uint64_t v230 = 0;
        long long v257 = 0u;
        long long v258 = 0u;
        long long v255 = 0u;
        long long v256 = 0u;
        long long v254 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v252 = 136315906;
        *(void *)&v252[4] = "operator[]";
        *(_WORD *)&v252[12] = 1024;
        *(_DWORD *)&v252[14] = 476;
        *(_WORD *)&v252[18] = 2048;
        *(void *)&v252[20] = i;
        *(_WORD *)&v252[28] = 2048;
        *(void *)&v252[30] = v26;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_355:
        *(void *)uint64_t v252 = 0;
        *(_OWORD *)(v8 + 96) = 0u;
        *(_OWORD *)(v8 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
        *(_OWORD *)(v8 + 64) = 0u;
        *(_OWORD *)(v8 + 80) = 0u;
        *(_OWORD *)(v8 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v253 = 136315906;
        *(void *)&v253[4] = "operator[]";
        *(_WORD *)&v253[12] = 1024;
        *(_DWORD *)&v253[14] = 476;
        *(_WORD *)&v253[18] = 2048;
        *(void *)&v253[20] = 0;
        *(_WORD *)&v253[28] = 2048;
        *(void *)&v253[30] = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (*(void *)&buf[8]) {
        uint64_t v27 = *(void *)(*(void *)&buf[8] + 664);
      }
      else {
        uint64_t v27 = 0;
      }
      uint64_t v28 = *(void *)(a2 + 16);
      unint64_t v29 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (*(void *)&buf[8] ^ (*(void *)&buf[8] >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                          * (*(void *)&buf[8] ^ (*(void *)&buf[8] >> 30))) >> 27));
      unint64_t v30 = v27 ^ (v29 >> 31) ^ v29;
      if (*(void *)v253)
      {
        unint64_t v31 = v30 % v202;
        uint64_t v32 = *(unsigned int *)(v203 + 4 * v31);
        if (v32 != 0x7FFFFFFF)
        {
          while (*(void *)(v23 + 160 * v32 + 24) != *(void *)&buf[8])
          {
            uint64_t v32 = *(_DWORD *)(v23 + 160 * v32 + 8) & 0x7FFFFFFF;
            if (v32 == 0x7FFFFFFF) {
              goto LABEL_43;
            }
          }
          unsigned int v39 = v206;
          goto LABEL_51;
        }
      }
      else
      {
        unint64_t v31 = 0;
      }
LABEL_43:
      uint64_t v33 = *(unsigned int *)&v253[36];
      if (*(_DWORD *)&v253[36] == 0x7FFFFFFF)
      {
        unsigned int v34 = v206;
        unsigned int v202 = *(_DWORD *)&v253[24];
        if (v206 == *(_DWORD *)&v253[24])
        {
          re::HashTable<re::AssetHandle,re::RealityFileWriter::AssetHandleWithMetadata,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::setCapacity((uint64_t)v253, 2 * v8);
          unsigned int v34 = *(_DWORD *)&v253[32];
          unsigned int v202 = *(_DWORD *)&v253[24];
          unint64_t v31 = v30 % *(unsigned int *)&v253[24];
          uint64_t v23 = *(void *)&v253[16];
          uint64_t v205 = *(void *)&v253[8];
        }
        unsigned int v204 = v34 + 1;
        *(_DWORD *)&v253[32] = v34 + 1;
        uint64_t v33 = v206;
        int v35 = *(_DWORD *)(v23 + 160 * v206 + 8);
      }
      else
      {
        int v35 = *(_DWORD *)(v23 + 160 * *(unsigned int *)&v253[36] + 8);
        *(_DWORD *)&v253[36] = v35 & 0x7FFFFFFF;
        unsigned int v204 = v206;
        unsigned int v206 = v33;
      }
      *(_DWORD *)(v23 + 160 * v33 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v35 | 0x80000000;
      uint64_t v23 = *(void *)&v253[16];
      uint64_t v36 = *(void *)&v253[16] + 160 * v33;
      *(_DWORD *)(v36 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(v36 + 8) & 0x80000000 | *(_DWORD *)(v205 + 4 * v31);
      *(void *)uint64_t v36 = v30;
      re::AssetHandle::AssetHandle((re::AssetHandle *)(v36 + 16), (const re::AssetHandle *)buf);
      re::AssetHandle::AssetHandle((re::AssetHandle *)(v36 + 40), (const re::AssetHandle *)(v28 + 120 * i));
      uint64_t v37 = v28 + 120 * i;
      re::DynamicString::DynamicString((re::DynamicString *)(v36 + 64), (const re::DynamicString *)(v37 + 24));
      re::DynamicString::DynamicString((re::DynamicString *)(v36 + 96), (const re::DynamicString *)(v37 + 56));
      *(_WORD *)(v36 + 12re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_WORD *)(v37 + 88);
      int v38 = *(unsigned __int8 *)(v37 + 90);
      *(unsigned char *)(v36 + 130) = v38;
      if (v38) {
        *(unsigned char *)(v23 + 160 * v33 + 131) = *(unsigned char *)(v28 + 120 * i + 91);
      }
      re::FixedArray<re::DynamicString>::FixedArray((re::DynamicString *)(v23 + 160 * v33 + 136), v28 + 120 * i + 96);
      *(_DWORD *)(v205 + 4 * v31) = v206;
      unint64_t v8 = ++*(_DWORD *)&v253[28];
      ++*(_DWORD *)&v253[40];
      uint64_t v203 = v205;
      uint64_t v20 = v201;
      unsigned int v39 = v204;
LABEL_51:
      unint64_t v26 = v247;
      if (v247 <= i) {
        goto LABEL_353;
      }
      re::AssetHandle::operator=((uint64_t)v248 + 24 * i, (uint64_t *)buf);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
      unsigned int v206 = v39;
    }
  }
  LODWORD(v256) = 0;
  long long v254 = 0u;
  long long v255 = 0u;
  *(void *)((char *)&v256 + 4) = 0x7FFFFFFFLL;
  if (v199)
  {
    *(void *)uint64_t v240 = v248;
    *(void *)&v240[8] = v247;
    re::AssetDeduplication::deduplicate((uint64_t)v240, (uint64_t)v210, (uint64_t)v252);
    re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::operator=((uint64_t)&v254, (uint64_t *)v252);
    re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit((uint64_t *)v252);
  }
  memset(v252, 0, 36);
  *(void *)&v252[36] = 0x7FFFFFFFLL;
  if (!v247)
  {
    int v45 = 0;
LABEL_74:
    LODWORD(v46) = 0;
    goto LABEL_75;
  }
  unint64_t v40 = v248;
  uint64_t v41 = 24 * v247;
  do
  {
    uint64_t v42 = *(void *)(a1 + 320);
    uint64_t v242 = v42;
    if (v42)
    {
      uint64_t v43 = (void *)(v42 + 8);
      id v44 = (id)(v42 + 8);

      uint64_t v242 = 0;
    }
    else
    {
    }
    if (!v240[0])
    {
      __int16 v59 = *a4;
      if (*a4)
      {
        uint64_t v60 = (char *)v59 + 8;
        id v61 = *(id *)&v240[8];
        id v241 = v61;
        re::ObjCObject::operator=((id *)v59 + 12, &v241);
      }
      else
      {
        id v61 = *(id *)&v240[8];
        id v241 = v61;
      }
      goto LABEL_343;
    }
    unint64_t v40 = (const re::AssetHandle *)((char *)v40 + 24);
    v41 -= 24;
  }
  while (v41);
  int v45 = *(_DWORD *)&v252[32];
  if (!*(_DWORD *)&v252[32]) {
    goto LABEL_74;
  }
  uint64_t v46 = 0;
  int v47 = (int *)(*(void *)&v252[16] + 8);
  while (1)
  {
    int v48 = *v47;
    v47 += 10;
    if (v48 < 0) {
      break;
    }
    if (*(unsigned int *)&v252[32] == ++v46)
    {
      LODWORD(v46) = *(_DWORD *)&v252[32];
      break;
    }
  }
LABEL_75:
  if (v45 != v46)
  {
    uint64_t v50 = v46;
    uint64_t v51 = *(void *)&v252[16];
    do
    {
      char v52 = (re::AssetHandle *)(v51 + 40 * v50 + 16);
      if (!re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::containsKey((uint64_t)&v254, (uint64_t)v52))re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::add((uint64_t)&v254, v52, v52); {
      uint64_t v51 = *(void *)&v252[16];
      }
      if (*(_DWORD *)&v252[32] <= (v46 + 1)) {
        int v53 = v46 + 1;
      }
      else {
        int v53 = *(_DWORD *)&v252[32];
      }
      while (1)
      {
        uint64_t v50 = (v46 + 1);
        if (v53 - 1 == v46) {
          break;
        }
        LODWORD(v46) = v46 + 1;
        int v54 = v50;
        if ((*(_DWORD *)(*(void *)&v252[16] + 40 * v50 + 8) & 0x80000000) != 0) {
          goto LABEL_86;
        }
      }
      int v54 = v53;
LABEL_86:
      LODWORD(v46) = v54;
    }
    while (v45 != v54);
  }
  int v55 = v256;
  if (v256)
  {
    uint64_t v56 = 0;
    BOOL v57 = (int *)(v255 + 8);
    while (1)
    {
      int v58 = *v57;
      v57 += 16;
      if (v58 < 0) {
        break;
      }
      if (v256 == ++v56)
      {
        LODWORD(v56) = v256;
        break;
      }
    }
  }
  else
  {
    LODWORD(v56) = 0;
  }
  unsigned int v62 = v256;
  if (v256 != v56)
  {
    uint64_t v63 = v56;
    uint64_t v64 = v255;
    do
    {
      unsigned int v65 = (re::AssetHandle *)(v64 + (v63 << 6) + 16);
      memset(v240, 0, 36);
      *(void *)&v240[36] = 0x7FFFFFFFLL;
      uint64_t v66 = (AssetService *)re::AssetHandle::legacy_assetPath(v65);
      re::RealityFileWriter::customizeAssetPathMapping(&v230, (re::AssetPathMapping *)a1, (const re::AssetPath *)v240, v66, (uint64_t)v210);
      if (!(_BYTE)v230)
      {
        uint64_t v145 = *a4;
        if (*a4)
        {
          uint64_t v146 = (char *)v145 + 8;
          id v147 = v231;
          id v239 = v147;
          re::ObjCObject::operator=((id *)v145 + 12, &v239);
        }
        else
        {
          id v147 = v231;
          id v239 = v147;
        }
        re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit((uint64_t *)v240);
        goto LABEL_343;
      }
      re::AssetHandle::AssetHandle((re::AssetHandle *)v238, v65);
      re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::HashTable((uint64_t)v236, (uint64_t)v240);
      if (v237)
      {
        BOOL v67 = re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::containsKey((uint64_t)v236, (uint64_t)v238);
        re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(v236);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v238);
        if (v67)
        {
          uint64_t v69 = *re::assetsLogObjects(v68);
          if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v70 = **(void **)(*((void *)v65 + 1) + 264);
            uint64_t v71 = *((void *)re::AssetHandle::assetInfo(v65) + 10);
            if (v71 == -1) {
              uint64_t v71 = 0;
            }
            *(_DWORD *)long long buf = 136315394;
            *(void *)&uint8_t buf[4] = v70;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = v71;
            _os_log_impl(&dword_233120000, v69, OS_LOG_TYPE_DEFAULT, "Not writing remapped %s with assetID: %llu", buf, 0x16u);
          }
          if ((void)v254)
          {
            unint64_t v72 = *((void *)v65 + 1);
            uint64_t v73 = v72 ? *(void *)(v72 + 664) : 0;
            unint64_t v74 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v72 ^ (v72 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v72 ^ (v72 >> 30))) >> 27));
            unint64_t v75 = (v73 ^ (v74 >> 31) ^ v74) % DWORD2(v255);
            uint64_t v76 = *(unsigned int *)(*((void *)&v254 + 1) + 4 * v75);
            if (v76 != 0x7FFFFFFF)
            {
              uint64_t v77 = v255 + (v76 << 6);
              if (*(void *)(v77 + 24) == v72)
              {
                *(_DWORD *)(*((void *)&v254 + 1) + 4 * v75) = *(_DWORD *)(v77 + 8) & 0x7FFFFFFF;
LABEL_115:
                re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::EntryWithHash::free((_DWORD *)(v255 + (v76 << 6)));
                *(_DWORD *)(v255 + (v76 << 6) + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(v255 + (v76 << 6) + 8) & 0x80000000 | DWORD1(v256);
                --HIDWORD(v255);
                *(void *)((char *)&v256 + 4) = __PAIR64__(DWORD2(v256), v76) + 0x100000000;
              }
              else
              {
                while (1)
                {
                  uint64_t v78 = v76;
                  uint64_t v76 = *(_DWORD *)(v255 + (v76 << 6) + 8) & 0x7FFFFFFF;
                  if (v76 == 0x7FFFFFFF) {
                    break;
                  }
                  uint64_t v79 = v255 + (v76 << 6);
                  if (*(void *)(v79 + 24) == v72)
                  {
                    *(_DWORD *)(v255 + (v78 << 6) + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(v255 + (v78 << 6) + 8) & 0x80000000 | *(_DWORD *)(v79 + 8) & 0x7FFFFFFF;
                    goto LABEL_115;
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(v236);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v238);
      }
      re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit((uint64_t *)v240);
      unsigned int v62 = v256;
      uint64_t v64 = v255;
      if (v256 <= (int)v56 + 1) {
        int v80 = v56 + 1;
      }
      else {
        int v80 = v256;
      }
      while (1)
      {
        uint64_t v63 = (v56 + 1);
        if (v80 - 1 == v56) {
          break;
        }
        LODWORD(v56) = v56 + 1;
        int v81 = v63;
        if ((*(_DWORD *)(v255 + (v63 << 6) + 8) & 0x80000000) != 0) {
          goto LABEL_123;
        }
      }
      int v81 = v80;
LABEL_123:
      LODWORD(v56) = v81;
    }
    while (v55 != v81);
  }
  uint64_t v82 = 0;
  if (v62)
  {
    uint64_t v83 = (int *)(v255 + 8);
    while (1)
    {
      int v84 = *v83;
      v83 += 16;
      if (v84 < 0) {
        break;
      }
      if (v62 == ++v82)
      {
        LODWORD(v8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v62;
        break;
      }
    }
  }
  if (v62 != v82)
  {
    uint64_t v86 = v82;
    uint64_t v87 = v255;
    while (1)
    {
      id v88 = (unint64_t *)(v87 + (v86 << 6));
      BOOL v89 = (re::AssetHandle *)(v88 + 2);
      unint64_t v90 = v88[3];
      if (v90 == v88[6])
      {
        uint64_t v94 = re::HashTable<re::AssetHandle,re::RealityFileWriter::AssetHandleWithMetadata,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::tryGet((uint64_t)v253, v90);
        if (v94) {
          uint64_t v95 = (const re::AssetHandle *)v94;
        }
        else {
          uint64_t v95 = v89;
        }
        re::AssetHandle::AssetHandle((re::AssetHandle *)v240, v95);
        re::RealityFileWriter::getOrMakeAssetInfo((re::RealityFileWriter *)buf, (const re::AssetHandle *)a1, (re::AssetHandle *)v240);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v240);
        if (!buf[0])
        {
          uint64_t v156 = *a4;
          if (*a4)
          {
            v157 = (char *)v156 + 8;
            id v235 = *(id *)&buf[8];
            re::ObjCObject::operator=((id *)v156 + 12, &v235);
          }
          else
          {
            id v235 = *(id *)&buf[8];
          }
          re::Result<re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::WrappedError>::~Result((uint64_t)buf);
LABEL_343:
          uint64_t v13 = 0;
          goto LABEL_344;
        }
        if (*(void *)&buf[8])
        {
          id v96 = (void *)(*(void *)&buf[8] + 8);
          id v97 = (id)(*(void *)&buf[8] + 8);
        }
        re::Result<re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::WrappedError>::~Result((uint64_t)buf);
      }
      else
      {
        uint64_t v91 = (re::DynamicString *)re::AssetHandle::legacy_assetPath(v89);
        uint64_t v92 = *((void *)v91 + 1);
        memset(&v240[8], 0, 24);
        *(void *)uint64_t v240 = v92;
        re::DynamicString::setCapacity(v240, 0);
        re::AssetPath::fullAssetPath(v91, (re::DynamicString *)v240);
        re::RealityFileWriter::AssetInfoTable::tryGetAssetInfo((re::RealityFileWriter::AssetInfoTable *)(a1 + 24), (const re::DynamicString *)v240, (uint64_t *)&v230);
        id v93 = v230;
        if (v230)
        {
          if (*((_DWORD *)v230 + 6) == 1)
          {
            if (v240[8]) {
              int64x2_t v153 = *(unsigned char **)&v240[16];
            }
            else {
              int64x2_t v153 = &v240[9];
            }
            re::DynamicString::format((re::DynamicString *)"The asset '%s' has been selected to be pruned from the reality file because it is a duplicate of another asset, but it has already been written to the reality file. This could happen if ::writeAssetArrayAndDependencies is invoked with the deduplicate argument after previous calls to write assets.", (re::DynamicString *)buf, v153);
            if (*(void *)buf && (buf[8] & 1) != 0) {
              (*(void (**)(void))(**(void **)buf + 40))();
            }
            signed int v154 = *a4;
            if (*a4)
            {
              int v155 = (char *)v154 + 8;
              id v234 = v228;
              re::ObjCObject::operator=((id *)v154 + 12, &v234);
            }
            else
            {
              id v234 = v228;
            }
            if (*(void *)v240 && (v240[8] & 1) != 0) {
              (*(void (**)(void))(**(void **)v240 + 40))();
            }
            goto LABEL_343;
          }
        }
        if (*(void *)v240 && (v240[8] & 1) != 0) {
          (*(void (**)(void))(**(void **)v240 + 40))();
        }
      }
      unsigned int v85 = v256;
      uint64_t v87 = v255;
      if (v256 <= (int)v82 + 1) {
        int v98 = v82 + 1;
      }
      else {
        int v98 = v256;
      }
      while (1)
      {
        uint64_t v86 = (v82 + 1);
        if (v98 - 1 == v82) {
          break;
        }
        LODWORD(v8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v82 + 1;
        int v99 = v86;
        if ((*(_DWORD *)(v255 + (v86 << 6) + 8) & 0x80000000) != 0) {
          goto LABEL_153;
        }
      }
      int v99 = v98;
LABEL_153:
      LODWORD(v8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v99;
      if (v62 == v99) {
        goto LABEL_154;
      }
    }
  }
  unsigned int v85 = v62;
LABEL_154:
  memset(v240, 0, 36);
  *(void *)&v240[36] = 0x7FFFFFFFLL;
  uint64_t v100 = 0;
  if (v85)
  {
    id v101 = (int *)(v255 + 8);
    while (1)
    {
      int v102 = *v101;
      v101 += 16;
      if (v102 < 0) {
        break;
      }
      if (v85 == ++v100)
      {
        LODWORD(v100) = v85;
        break;
      }
    }
  }
  if (v85 != v100)
  {
    uint64_t v104 = v100;
    unsigned int v105 = (void *)(a1 + 200);
    uint64_t v106 = v255;
    unsigned int v207 = v85;
    while (1)
    {
      id v107 = v105;
      unint64_t v108 = (void *)(v106 + (v104 << 6));
      id v109 = (re::AssetHandle *)(v108 + 2);
      uint64_t v110 = v108 + 5;
      uint64_t v111 = re::HashTable<re::AssetHandle,re::RealityFileWriter::AssetHandleWithMetadata,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::tryGet((uint64_t)v253, v108[6]);
      if (v111) {
        uint64_t v112 = (const re::AssetHandle *)v111;
      }
      else {
        uint64_t v112 = (const re::AssetHandle *)(v108 + 5);
      }
      re::AssetHandle::AssetHandle((re::AssetHandle *)buf, v112);
      re::RealityFileWriter::getAssetInfo((re::RealityFileWriter *)&v220, (const re::AssetHandle *)a1, (re::AssetHandle *)buf);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
      uint64_t v113 = v220;
      int v114 = (const re::DynamicString *)(v220 + 32);
      re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::add((uint64_t)v240, (re::AssetHandle *)(v108 + 2), (const re::DynamicString *)(v220 + 32));
      uint64_t v115 = v108[3];
      uint64_t v116 = v108[6];
      if (v115 != v116) {
        goto LABEL_201;
      }
      re::AssetManager::findDependencies(v210, (const re::AssetHandle *)(v108 + 2), (uint64_t)&v230);
      memset(buf, 0, 36);
      *(void *)&buf[36] = 0x7FFFFFFFLL;
      if (v232)
      {
        dispatch_time_t v117 = v233;
        uint64_t v118 = 24 * v232;
        do
        {
          if (*((void *)v117 + 1)) {
            re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::add((uint64_t)buf, v117);
          }
          dispatch_time_t v117 = (re::AssetHandle *)((char *)v117 + 24);
          v118 -= 24;
        }
        while (v118);
        int v119 = *(_DWORD *)&buf[32];
        if (*(_DWORD *)&buf[32])
        {
          uint64_t v120 = 0;
          uint64_t v121 = (int *)(*(void *)&buf[16] + 8);
          while (1)
          {
            int v122 = *v121;
            v121 += 10;
            if (v122 < 0) {
              goto LABEL_184;
            }
            if (*(unsigned int *)&buf[32] == ++v120)
            {
              LODWORD(v1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = *(_DWORD *)&buf[32];
              goto LABEL_184;
            }
          }
        }
      }
      else
      {
        int v119 = 0;
      }
      LODWORD(v1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0;
LABEL_184:
      if (v119 != v120)
      {
        uint64_t v123 = v120;
        uint64_t v124 = (_anonymous_namespace_ *)(v113 + 96);
        uint64_t v125 = *(void *)&buf[16];
        do
        {
          uint64_t v126 = v125 + 40 * v123 + 16;
          if (!re::AssetManager::isDeviceAsset((uint64_t)v210, v126, v208))
          {
            uint64_t v127 = re::HashTable<re::AssetHandle,re::RealityFileWriter::AssetHandleWithMetadata,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::tryGet((uint64_t)v253, *(void *)(v126 + 8));
            v128 = (const re::AssetHandle *)(v127 ? v127 : v126);
            re::AssetHandle::AssetHandle((re::AssetHandle *)&v228, v128);
            re::RealityFileWriter::getAssetInfo((re::RealityFileWriter *)&v215, (const re::AssetHandle *)a1, (re::AssetHandle *)&v228);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)&v228);
            if (v215)
            {
              uint64_t v227 = v215;
              unint64_t v129 = (void *)(v215 + 8);
              id v130 = (id)(v215 + 8);
              re::DynamicArray<re::SharedPtr<re::AssetLoadRequest>>::add(v124, &v227);

              uint64_t v227 = 0;
            }
          }
          uint64_t v125 = *(void *)&buf[16];
          if (*(_DWORD *)&buf[32] <= (v120 + 1)) {
            int v131 = v120 + 1;
          }
          else {
            int v131 = *(_DWORD *)&buf[32];
          }
          while (1)
          {
            uint64_t v123 = (v120 + 1);
            if (v131 - 1 == v120) {
              break;
            }
            LODWORD(v1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = v120 + 1;
            int v132 = v123;
            if ((*(_DWORD *)(*(void *)&buf[16] + 40 * v123 + 8) & 0x80000000) != 0) {
              goto LABEL_199;
            }
          }
          int v132 = v131;
LABEL_199:
          LODWORD(v1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = v132;
        }
        while (v119 != v132);
      }
      re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit((uint64_t *)buf);
      re::DynamicArray<re::AssetHandle>::deinit((uint64_t)&v230);
      uint64_t v115 = *((void *)v109 + 1);
      uint64_t v116 = v110[1];
      unsigned int v85 = v207;
LABEL_201:
      unsigned int v105 = v107;
      if (v115 == v116) {
        goto LABEL_220;
      }
      re::DynamicString::DynamicString((re::DynamicString *)&v230, v114);
      if (!re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)v107, (uint64_t)&v230))
      {
        *(void *)&buf[32] = 0;
        memset(buf, 0, 28);
        re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add((uint64_t)v107, (re::DynamicString *)&v230, (uint64_t)buf);
        re::DynamicArray<re::DynamicString>::deinit((uint64_t)buf);
      }
      unint64_t v133 = re::Hash<re::DynamicString>::operator()((uint64_t)buf, (uint64_t)&v230);
      if (*v107)
      {
        uint64_t v134 = *(void *)(a1 + 216);
        uint64_t v135 = *(unsigned int *)(*(void *)(a1 + 208) + 4 * (v133 % *(unsigned int *)(a1 + 224)));
        if (v135 != 0x7FFFFFFF)
        {
          while (!re::DynamicString::operator==(v134 + 88 * v135 + 16, (uint64_t)&v230))
          {
            uint64_t v135 = *(_DWORD *)(v134 + 88 * v135 + 8) & 0x7FFFFFFF;
            if (v135 == 0x7FFFFFFF) {
              goto LABEL_210;
            }
          }
          goto LABEL_211;
        }
      }
      else
      {
        uint64_t v134 = *(void *)(a1 + 216);
      }
LABEL_210:
      uint64_t v135 = 0x7FFFFFFFLL;
LABEL_211:
      uint64_t v136 = (_anonymous_namespace_ *)(v134 + 88 * v135 + 48);
      char v137 = (char *)re::AssetHandle::assetInfo(v109);
      if (*((void *)v137 + 13)) {
        unint64_t v138 = (const char *)*((void *)v137 + 14);
      }
      else {
        unint64_t v138 = v137 + 105;
      }
      v139.n128_f64[0] = re::DynamicArray<re::DynamicString>::add(v136, buf);
      if (*(void *)buf && (buf[8] & 1) != 0) {
        (*(void (**)(double))(**(void **)buf + 40))(v139.n128_f64[0]);
      }
      if (v230 && (v231 & 1) != 0) {
        (*((void (**)(__n128))*v230 + 5))(v139);
      }
LABEL_220:
      if (v220) {

      }
      unsigned int v103 = v256;
      uint64_t v106 = v255;
      if (v256 <= (int)v100 + 1) {
        int v140 = v100 + 1;
      }
      else {
        int v140 = v256;
      }
      while (1)
      {
        uint64_t v104 = (v100 + 1);
        if (v140 - 1 == v100) {
          break;
        }
        LODWORD(v100) = v100 + 1;
        int v141 = v104;
        if ((*(_DWORD *)(v255 + (v104 << 6) + 8) & 0x80000000) != 0) {
          goto LABEL_229;
        }
      }
      int v141 = v140;
LABEL_229:
      LODWORD(v100) = v141;
      if (v85 == v141) {
        goto LABEL_230;
      }
    }
  }
  unsigned int v103 = v85;
LABEL_230:
  if (v199)
  {
    re::AssetDeduplication::remap((uint64_t)&v254, (uint64_t)v240, (uint64_t)buf);
    uint64_t v142 = *(void *)buf;
    if (!*(void *)v240 || *(void *)v240 == *(void *)buf)
    {
      *(void *)long long buf = *(void *)v240;
      long long v148 = *(_OWORD *)&v240[8];
      *(void *)uint64_t v240 = v142;
      *(void *)&v240[8] = *(void *)&buf[8];
      *(void *)&v240[16] = *(void *)&buf[16];
      *(_OWORD *)&uint8_t buf[8] = v148;
      long long v149 = *(_OWORD *)&v240[24];
      *(_OWORD *)&v240[24] = *(_OWORD *)&buf[24];
      *(_OWORD *)&uint8_t buf[24] = v149;
    }
    else if (*(void *)buf)
    {
      re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::copy((uint64_t)v240, (uint64_t)buf);
      ++*(_DWORD *)&v240[40];
    }
    else
    {
      re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::clear((uint64_t)v240);
    }
    re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit((uint64_t *)buf);
    unsigned int v103 = v256;
  }
  uint64_t v158 = 0;
  if (v103)
  {
    unint64_t v159 = (int *)(v255 + 8);
    while (1)
    {
      int v160 = *v159;
      v159 += 16;
      if (v160 < 0) {
        break;
      }
      if (v103 == ++v158)
      {
        LODWORD(v15re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v103;
        break;
      }
    }
  }
  if (v103 == v158)
  {
LABEL_326:
    uint64_t v13 = 1;
    goto LABEL_327;
  }
  uint64_t v161 = v158;
  uint64_t v162 = v255;
  unsigned int v163 = v103;
  while (1)
  {
    unint64_t v164 = (void *)(v162 + (v161 << 6));
    if (v164[3] == v164[6]) {
      break;
    }
LABEL_318:
    if (v163 <= (int)v158 + 1) {
      unsigned int v189 = v158 + 1;
    }
    else {
      unsigned int v189 = v163;
    }
    while (1)
    {
      uint64_t v161 = (v158 + 1);
      if (v189 - 1 == v158) {
        break;
      }
      LODWORD(v15re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v158 + 1;
      unsigned int v190 = v161;
      if ((*(_DWORD *)(v162 + (v161 << 6) + 8) & 0x80000000) != 0) {
        goto LABEL_325;
      }
    }
    unsigned int v190 = v189;
LABEL_325:
    LODWORD(v15re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v190;
    if (v103 == v190) {
      goto LABEL_326;
    }
  }
  re::AssetHandle::AssetHandle((re::AssetHandle *)buf, (const re::AssetHandle *)(v164 + 5));
  uint64_t v165 = re::HashTable<re::AssetHandle,re::RealityFileWriter::AssetHandleWithMetadata,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::tryGet((uint64_t)v253, *(unint64_t *)&buf[8]);
  if (v165) {
    uint64_t v166 = (uint8_t *)v165;
  }
  else {
    uint64_t v166 = buf;
  }
  re::AssetHandle::AssetHandle((re::AssetHandle *)&v230, (const re::AssetHandle *)v166);
  re::RealityFileWriter::getAssetInfo((re::RealityFileWriter *)&v226, (const re::AssetHandle *)a1, (re::AssetHandle *)&v230);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v230);
  unint64_t v167 = (unsigned __int8 *)re::HashTable<re::AssetHandle,re::RealityFileWriter::AssetHandleWithMetadata,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::tryGet((uint64_t)v253, *(unint64_t *)&buf[8]);
  uint64_t v168 = v226;
  if (*(_DWORD *)(v226 + 24) == 1) {
    goto LABEL_283;
  }
  uint64_t v225 = v226;
  id v169 = (id)(v226 + 8);
  if (v167)
  {
    int v170 = v167[89];
    v224[0] = v167[90];
    if (v224[0]) {
      v224[1] = v167[91];
    }
  }
  else
  {
    int v170 = 0;
    v224[0] = 0;
  }
  re::RealityFileWriter::saveAssetToArchive((uint64_t)&v230, (re::AssetPathMapping *)a1, (re::AssetHandle *)buf, &v225, (uint64_t)v240, v170, v224, v201);

  uint64_t v225 = 0;
  if ((_BYTE)v230)
  {
LABEL_283:
    int v171 = (**(uint64_t (***)(uint64_t, uint8_t *))v201)(v201, buf);
    char v172 = v171;
    if (!v171
      || ((*(uint64_t (**)(uint64_t, uint8_t *, void))(*(void *)v201 + 40))(v201, buf, *(void *)(*(void *)(a1 + 320) + 24)) & 1) != 0)
    {
      uint64_t v212 = v168;
      id v173 = (id)(v168 + 8);
      re::RealityFileWriter::assignSceneSettingsToAssetInfo((_anonymous_namespace_ *)&v230, (re::DynamicString *)a1, &v212, (uint64_t)v167, v172);

      uint64_t v212 = 0;
      if (!(_BYTE)v230)
      {
        id v191 = *a4;
        if (*a4)
        {
          unsigned int v192 = (char *)v191 + 8;
          v193 = (char *)v191 + 8;
          id v194 = v231;
          id v211 = v194;
          re::ObjCObject::operator=((id *)v191 + 12, &v211);
          id v195 = v211;
LABEL_336:

          goto LABEL_350;
        }
        id v194 = v231;
        id v211 = v194;
        goto LABEL_349;
      }
      goto LABEL_317;
    }
    (*(void (**)(uint64_t (***__return_ptr)(void), uint64_t, uint8_t *, void))(*(void *)v201 + 48))(&v230, v201, buf, *(void *)(*(void *)(a1 + 320) + 24));
    re::RealityFileWriter::getOrMakeAssetInfo((re::RealityFileWriter *)&v228, (const re::AssetHandle *)a1, (re::AssetHandle *)&v230);
    if (!(_BYTE)v228)
    {
      uint64_t v178 = *a4;
      if (*a4)
      {
        BOOL v179 = (char *)v178 + 8;
        unint64_t v222 = v229;
        re::ObjCObject::operator=((id *)v178 + 12, (id *)&v222);
      }
      else
      {
        unint64_t v222 = v229;
      }
      int v183 = 1;
LABEL_316:
      re::Result<re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::WrappedError>::~Result((uint64_t)&v228);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v230);
      if (v183) {
        goto LABEL_351;
      }
LABEL_317:

      re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
      unsigned int v163 = v256;
      uint64_t v162 = v255;
      goto LABEL_318;
    }
    v174 = v229;
    if (v229)
    {
      uint64_t v175 = v229 + 8;
      v176 = v174 + 8;
    }
    int64x2_t v219 = v174;
    if (v167)
    {
      int v177 = v167[89];
      v218[0] = v167[90];
      if (v218[0]) {
        v218[1] = v167[91];
      }
    }
    else
    {
      int v177 = 0;
      v218[0] = 0;
    }
    re::RealityFileWriter::saveAssetToArchive((uint64_t)&v220, (re::AssetPathMapping *)a1, (re::AssetHandle *)&v230, (uint64_t *)&v219, (uint64_t)v240, v177, v218, v201);
    if (v174)
    {
      uint64_t v180 = v174 + 8;

      int64x2_t v219 = 0;
      if ((_BYTE)v220)
      {
        uint64_t v214 = v174;
        id v181 = v180;
        re::RealityFileWriter::assignSceneSettingsToAssetInfo((_anonymous_namespace_ *)&v215, (re::DynamicString *)a1, (uint64_t *)&v214, (uint64_t)v167, 1);

        uint64_t v214 = 0;
LABEL_301:
        if ((_BYTE)v215)
        {
          re::RealityFileWriter::AssetInfo::addSceneVariant((re::RealityFileWriter::AssetInfo *)v174, (const re::DynamicString *)(v168 + 32), v182);
          int v183 = 0;
          goto LABEL_314;
        }
        unint64_t v186 = *a4;
        if (*a4)
        {
          unint64_t v187 = (char *)v186 + 8;
          id v188 = v216;
          id v213 = v188;
          re::ObjCObject::operator=((id *)v186 + 12, &v213);
        }
        else
        {
          id v188 = v216;
          id v213 = v188;
        }
LABEL_313:
        int v183 = 1;
LABEL_314:
        if (v174) {

        }
        goto LABEL_316;
      }
    }
    else if ((_BYTE)v220)
    {
      uint64_t v214 = 0;
      re::RealityFileWriter::assignSceneSettingsToAssetInfo((_anonymous_namespace_ *)&v215, (re::DynamicString *)a1, (uint64_t *)&v214, (uint64_t)v167, 1);
      goto LABEL_301;
    }
    v184 = *a4;
    if (*a4)
    {
      int v185 = (char *)v184 + 8;
      id v217 = v221;
      re::ObjCObject::operator=((id *)v184 + 12, &v217);
    }
    else
    {
      id v217 = v221;
    }
    goto LABEL_313;
  }
  v196 = *a4;
  if (*a4)
  {
    unsigned int v192 = (char *)v196 + 8;
    uint64_t v197 = (char *)v196 + 8;
    id v194 = v231;
    id v223 = v194;
    re::ObjCObject::operator=((id *)v196 + 12, &v223);
    id v195 = v223;
    goto LABEL_336;
  }
  id v194 = v231;
  id v223 = v194;
LABEL_349:

LABEL_350:
LABEL_351:

  re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
  uint64_t v13 = 0;
LABEL_327:
  re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit((uint64_t *)v240);
LABEL_344:
  re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit((uint64_t *)v252);
  re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit((uint64_t *)&v254);
LABEL_345:
  re::FixedArray<re::AssetHandle>::deinit(&v246);
  re::HashTable<re::AssetHandle,re::RealityFileWriter::AssetHandleWithMetadata,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit((uint64_t *)v253);
  return v13;
}

uint64_t re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    if (!*(void *)a1 || *(void *)a1 == *a2)
    {
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)a1, a2);
    }
    else if (*a2)
    {
      re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::copy(a1, (uint64_t)a2);
      ++*(_DWORD *)(a1 + 40);
    }
    else
    {
      re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::clear(a1);
    }
  }
  return a1;
}

uint64_t anonymous namespace'::gatherDependencies(uint64_t result, const re::AssetHandle *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = result;
  if (!*((void *)a2 + 1)) {
    goto LABEL_9;
  }
  uint64_t result = re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::contains(a4, (uint64_t)a2);
  if (result) {
    goto LABEL_9;
  }
  if (!v36[0])
  {
    *(unsigned char *)uint64_t v5 = 0;
    uint64_t v12 = v37;
    uint64_t v37 = 0;
    *(void *)(v5 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    return result;
  }
  uint64_t v10 = *((void *)a2 + 1);
  uint64_t v11 = v10 ? *(re::AssetManager **)(v10 + 24) : 0;
  uint64_t result = re::AssetManager::isDeviceAsset((uint64_t)v11, (uint64_t)a2, a3);
  if (result)
  {
LABEL_9:
    *(unsigned char *)uint64_t v5 = 1;
  }
  else
  {
    re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::add(a4, a2);
    re::AssetManager::findDependencies(v11, a2, (uint64_t)v33);
    if (v34)
    {
      uint64_t v13 = v35;
      uint64_t v14 = 24 * v34;
      while (1)
      {
        uint64_t v15 = *a5;
        if (!*(unsigned char *)(*a5 + 40))
        {
          uint64_t v16 = *((void *)v13 + 1);
          if (v16)
          {
            if (*(re::AssetManager **)(v16 + 24) != v11) {
              break;
            }
          }
        }
        uint64_t v24 = *a5;
        BOOL v17 = (void *)(v15 + 8);
        id v18 = (id)(v15 + 8);

        uint64_t v24 = 0;
        if (!*(unsigned char *)v5) {
          return re::DynamicArray<re::AssetHandle>::deinit((uint64_t)v33);
        }
        uint64_t v13 = (re::AssetHandle *)((char *)v13 + 24);
        v14 -= 24;
        if (!v14) {
          goto LABEL_17;
        }
      }
      uint64_t v19 = (re::AssetPath *)re::AssetHandle::legacy_assetPath(v13);
      re::AssetPath::fullAssetPath(v19, (re::DynamicString *)&v28);
      if (v29) {
        uint64_t v20 = *(unsigned char **)&v30[7];
      }
      else {
        uint64_t v20 = v30;
      }
      char v21 = (re::AssetPath *)re::AssetHandle::legacy_assetPath(a2);
      re::AssetPath::fullAssetPath(v21, (re::DynamicString *)&v25);
      if (v26) {
        unint64_t v22 = *(unsigned char **)&v27[7];
      }
      else {
        unint64_t v22 = v27;
      }
      re::DynamicString::format((re::DynamicString *)"The dependent asset (%s) does not come from the same engine as (%s)", (re::DynamicString *)v31, v20, v22);
      uint64_t v23 = v32;
      uint64_t v32 = 0;
      *(unsigned char *)uint64_t v5 = 0;
      *(void *)(v5 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v23;

      if (*(void *)&v31[0])
      {
        if (BYTE8(v31[0])) {
          (*(void (**)(void))(**(void **)&v31[0] + 40))();
        }
        memset(v31, 0, sizeof(v31));
      }
      if (v25 && (v26 & 1) != 0) {
        (*(void (**)(void))(*(void *)v25 + 40))();
      }
      if (v28)
      {
        if (v29) {
          (*(void (**)(void))(*(void *)v28 + 40))();
        }
      }
    }
    else
    {
LABEL_17:
      *(unsigned char *)uint64_t v5 = 1;
    }
    return re::DynamicArray<re::AssetHandle>::deinit((uint64_t)v33);
  }
  return result;
}

BOOL re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::containsKey(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1)
  {
    unint64_t v2 = *(void *)(a2 + 8);
    if (v2) {
      uint64_t v3 = *(void *)(v2 + 664);
    }
    else {
      uint64_t v3 = 0;
    }
    unint64_t v5 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) >> 27));
    uint64_t v6 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((v3 ^ (v5 >> 31) ^ v5) % *(unsigned int *)(a1 + 24)));
    uint64_t v4 = 0x7FFFFFFFLL;
    if (v6 != 0x7FFFFFFF)
    {
      do
      {
        uint64_t v7 = *(void *)(a1 + 16) + (v6 << 6);
        uint64_t v4 = v6;
        if (*(void *)(v7 + 24) == v2) {
          break;
        }
        uint64_t v6 = *(_DWORD *)(v7 + 8) & 0x7FFFFFFF;
        uint64_t v4 = 0x7FFFFFFFLL;
      }
      while (v6 != 0x7FFFFFFF);
    }
  }
  else
  {
    uint64_t v4 = 0x7FFFFFFFLL;
  }
  return v4 != 0x7FFFFFFF;
}

unint64_t re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::add(uint64_t a1, re::AssetHandle *a2, const re::AssetHandle *a3)
{
  unint64_t v6 = *((void *)a2 + 1);
  if (v6) {
    uint64_t v7 = *(void *)(v6 + 664);
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v8 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27));
  unint64_t v9 = v7 ^ (v8 >> 31) ^ v8;
  if (!*(void *)a1)
  {
    LODWORD(v10) = 0;
    goto LABEL_10;
  }
  unint64_t v10 = v9 % *(unsigned int *)(a1 + 24);
  uint64_t v11 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v10);
  if (v11 == 0x7FFFFFFF)
  {
LABEL_10:
    unsigned int v13 = re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::addAsCopy(a1, v10, v9, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return *(void *)(a1 + 16) + ((unint64_t)v13 << 6) + 40;
  }
  while (1)
  {
    uint64_t v12 = *(void *)(a1 + 16) + (v11 << 6);
    if (*(void *)(v12 + 24) == v6) {
      return v12 + 40;
    }
    uint64_t v11 = *(_DWORD *)(v12 + 8) & 0x7FFFFFFF;
    if (v11 == 0x7FFFFFFF) {
      goto LABEL_10;
    }
  }
}

uint64_t re::RealityFileWriter::getAssetInfo(re::RealityFileWriter *this, const re::AssetHandle *a2, re::AssetHandle *a3)
{
  unint64_t v5 = (re::DynamicString *)re::AssetHandle::legacy_assetPath(a3);
  uint64_t v6 = *((void *)v5 + 1);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v8 = v6;
  uint64_t v9 = 0;
  re::DynamicString::setCapacity(&v8, 0);
  re::AssetPath::fullAssetPath(v5, (re::DynamicString *)&v8);
  re::RealityFileWriter::AssetInfoTable::tryGetAssetInfo((const re::AssetHandle *)((char *)a2 + 24), (const re::DynamicString *)&v8, (uint64_t *)this);
  uint64_t result = v8;
  if (v8)
  {
    if (v9) {
      return (*(uint64_t (**)(void))(*(void *)v8 + 40))();
    }
  }
  return result;
}

uint64_t re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::add(uint64_t a1, re::AssetHandle *a2, const re::DynamicString *a3)
{
  unint64_t v6 = *((void *)a2 + 1);
  if (v6) {
    uint64_t v7 = *(void *)(v6 + 664);
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v8 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27));
  unint64_t v9 = v7 ^ (v8 >> 31) ^ v8;
  if (!*(void *)a1)
  {
    LODWORD(v10) = 0;
    goto LABEL_11;
  }
  unint64_t v10 = v9 % *(unsigned int *)(a1 + 24);
  uint64_t v11 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v10);
  if (v11 == 0x7FFFFFFF)
  {
LABEL_11:
    unsigned int v13 = re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::addAsCopy(a1, v10, v9, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v14 = *(void *)(a1 + 16) + 72 * v13;
    return v14 + 40;
  }
  uint64_t v12 = *(void *)(a1 + 16);
  while (*(void *)(v12 + 72 * v11 + 24) != v6)
  {
    uint64_t v11 = *(_DWORD *)(v12 + 72 * v11 + 8) & 0x7FFFFFFF;
    if (v11 == 0x7FFFFFFF) {
      goto LABEL_11;
    }
  }
  uint64_t v14 = v12 + 72 * v11;
  return v14 + 40;
}

BOOL re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v9, a2);
  uint64_t v5 = 0x7FFFFFFFLL;
  if (*(void *)a1)
  {
    uint64_t v6 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
    if (v6 != 0x7FFFFFFF)
    {
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v5 = 0x7FFFFFFFLL;
      while (!re::DynamicString::operator==(v7 + 88 * v6 + 16, a2))
      {
        uint64_t v6 = *(_DWORD *)(v7 + 88 * v6 + 8) & 0x7FFFFFFF;
        if (v6 == 0x7FFFFFFF) {
          return v5 != 0x7FFFFFFF;
        }
      }
      uint64_t v5 = v6;
    }
  }
  return v5 != 0x7FFFFFFF;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add(uint64_t a1, re::DynamicString *a2, uint64_t a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 88 * v11;
    return v12 + 48;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 88 * v9 + 16, (uint64_t)a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 88 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v10 + 88 * v9;
  return v12 + 48;
}

double re::DynamicArray<re::DynamicString>::add(_anonymous_namespace_ *this, void *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::DynamicString>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 32 * v4;
  double result = 0.0;
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(void *)(v5 + 24) = a2[3];
  uint64_t v7 = a2[1];
  *(void *)uint64_t v5 = *a2;
  *a2 = 0;
  uint64_t v8 = a2[2];
  a2[3] = 0;
  uint64_t v10 = *(void *)(v5 + 8);
  uint64_t v9 = *(void *)(v5 + 16);
  *(void *)(v5 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7;
  *(void *)(v5 + 16) = v8;
  a2[1] = v10;
  a2[2] = v9;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::HashTable<re::AssetHandle,re::RealityFileWriter::AssetHandleWithMetadata,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::tryGet(uint64_t a1, unint64_t a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = a2 ? *(void *)(a2 + 664) : 0;
  unint64_t v3 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((v2 ^ (v3 >> 31) ^ v3) % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  while (*(void *)(v5 + 160 * v4 + 24) != a2)
  {
    uint64_t v4 = *(_DWORD *)(v5 + 160 * v4 + 8) & 0x7FFFFFFF;
    if (v4 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v5 + 160 * v4 + 40;
}

uint64_t *re::RealityFileWriter::saveAssetToArchive(uint64_t a1, re::AssetPathMapping *a2, re::AssetHandle *this, uint64_t *a4, uint64_t a5, int a6, unsigned char *a7, uint64_t a8)
{
  v82[5] = *MEMORY[0x263EF8340];
  uint64_t v16 = *((void *)this + 1);
  if (!v16)
  {
    uint64_t v18 = 0;
    goto LABEL_5;
  }
  unsigned int v17 = atomic_load((unsigned int *)(v16 + 704));
  if (v17 != 2)
  {
    uint64_t v18 = *((void *)this + 1);
LABEL_5:
    re::AssetHandle::loadNow(v18, 0);
  }
  uint64_t v19 = *((void *)this + 1);
  if (v19)
  {
    unsigned int v20 = atomic_load((unsigned int *)(v19 + 704));
    if (v20 == 2)
    {
      re::AssetHandle::serializableAsset(this, v82);
      uint64_t v21 = v82[0];
      (*(void (**)(uint64_t *__return_ptr, uint64_t, re::AssetHandle *))(*(void *)a8 + 64))(&v77, a8, this);
      if (!(_BYTE)v77)
      {
        id v29 = v78;
        *(unsigned char *)a1 = 0;
        *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v29;
LABEL_78:
        if (!(_BYTE)v77) {

        }
        return std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:nn180100](v82);
      }
      if (((*(uint64_t (**)(uint64_t, re::AssetHandle *, void))(*(void *)a8 + 56))(a8, this, *(void *)(*((void *)a2 + 40) + 24)) & 1) == 0)
      {
        uint64_t v30 = *a4;
        if (*(unsigned char *)(*a4 + 40)) {
          uint64_t v31 = *(void *)(v30 + 48);
        }
        else {
          uint64_t v31 = v30 + 41;
        }
        re::DynamicString::format((re::DynamicString *)"This asset (%s) is not supported by this version of RealityKit.", (re::DynamicString *)&v79, v31);
        uint64_t v32 = v76[0];
        v76[0] = 0;
        *(unsigned char *)a1 = 0;
        *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v32;

        if (v79 && (v80 & 1) != 0) {
          (*(void (**)(void))(*(void *)v79 + 40))();
        }
        goto LABEL_78;
      }
      (*(void (**)(uint64_t *__return_ptr, uint64_t, re::AssetHandle *, void, void))(*(void *)a8 + 32))(&v79, a8, this, *(void *)(*((void *)a2 + 40) + 24), *(unsigned __int8 *)(*((void *)a2 + 40) + 41));
      if (!(_BYTE)v79)
      {
        id v33 = v80;
        *(unsigned char *)a1 = 0;
        *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v33;
        goto LABEL_74;
      }
      if ((_BYTE)v80) {
        unint64_t v22 = v81;
      }
      else {
        unint64_t v22 = (const re::IntrospectionBase **)v21;
      }
      uint64_t v23 = *((void *)this + 1);
      if (v23) {
        uint64_t v24 = *(void *)(v23 + 24);
      }
      else {
        uint64_t v24 = 0;
      }
      re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::HashTable((uint64_t)v76, a5);
      uint64_t v34 = (AssetService *)re::AssetHandle::legacy_assetPath(this);
      int v35 = (_anonymous_namespace_ *)re::RealityFileWriter::customizeAssetPathMapping(&v74, a2, (const re::AssetPath *)v76, v34, v24);
      if (!(_BYTE)v74)
      {
        *(unsigned char *)a1 = 0;
        uint64_t v40 = v75;
        uint64_t v75 = 0;
        *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v40;
LABEL_73:
        re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(v76);
LABEL_74:
        if ((_BYTE)v79)
        {
          if ((_BYTE)v80) {
            std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v81);
          }
        }
        else
        {
        }
        goto LABEL_78;
      }
      long long v73 = 0u;
      memset(v72, 0, sizeof(v72));
      DWORD1(v73) = 0x7FFFFFFF;
      uint64_t v36 = &v59;
      uint64_t v37 = std::to_string(&v59, *(void *)(*((void *)a2 + 40) + 24));
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v36 = (std::string *)v59.__r_.__value_.__r.__words[0];
      }
      re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<re::DynamicString>((uint64_t)v72, (re::DynamicString *)&v66, 2, &v60);
      if ((void)v60)
      {
        if (BYTE8(v60)) {
          (*(void (**)(void))(*(void *)v60 + 40))();
        }
        long long v60 = 0u;
        long long v61 = 0u;
      }
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v59.__r_.__value_.__l.__data_);
      }
      if (v66 && (v67 & 1) != 0) {
        (*(void (**)(void))(*(void *)v66 + 40))();
      }
      uint64_t v38 = *((void *)this + 1);
      if (v38) {
        unint64_t v39 = *(void *)(v38 + 264);
      }
      else {
        unint64_t v39 = 0;
      }
      uint64_t v41 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(void *)(v24 + 1040), v39);
      uint64_t v42 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, const re::IntrospectionBase **, uint64_t *))(*(void *)v41 + 288))(v41, v22, v72);
      uint64_t v43 = *((void *)a2 + 40);
      uint64_t v44 = *(void *)(v43 + 24);
      if (*a7)
      {
        if (a7[1])
        {
LABEL_49:
          if (v44 <= 5)
          {
            int v45 = (void *)v60;
            *(void *)&long long v60 = 0;

            if (v66 && (v67 & 1) != 0) {
              (*(void (**)(void))(*(void *)v66 + 40))();
            }
            id v46 = v45;
            *(unsigned char *)a1 = 0;
            *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v46;

LABEL_72:
            re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v72);
            goto LABEL_73;
          }
          int v47 = 3;
LABEL_57:
          v71[1] = 0;
          v71[2] = 0;
          uint64_t v48 = *(void *)(v24 + 1040);
          bytes = 0;
          v71[0] = v48;
          uint64_t v67 = 0;
          CFIndex length = 0;
          int v69 = 0;
          v65[0] = &unk_26E7147E8;
          v65[1] = &v66;
          uint64_t v66 = 0;
          long long v60 = (unint64_t)v71;
          int v62 = v47;
          BOOL v63 = *(void *)(v43 + 24) > 6;
          *(void *)&long long v61 = v76;
          *((void *)&v61 + 1) = v72;
          char v64 = 0;
          uint64_t v49 = (const re::AssetPath *)re::AssetHandle::legacy_assetPath(this);
          uint64_t v50 = *((void *)this + 1);
          if (v50) {
            uint64_t v51 = *(uint64_t **)(v50 + 264);
          }
          else {
            uint64_t v51 = 0;
          }
          re::AssetUtilities::saveCompiledAssetToStream((uint64_t)v65, v22, v49, v51, (uint64_t)&v60, (unsigned __int8 *)&v59);
          if (v59.__r_.__value_.__s.__data_[0])
          {
            if (!a6) {
              a6 = (*(uint64_t (**)(uint64_t, const re::IntrospectionBase **))(*(void *)v41 + 248))(v41, v22) ^ 1;
            }
            CFDataRef v52 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], bytes, length, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
            uint64_t v53 = *a4;
            uint64_t v57 = v53;
            if (v53)
            {
              int v54 = (void *)(v53 + 8);
              id v55 = (id)(v53 + 8);
              re::RealityFileWriter::saveEntryToArchive(a1, (uint64_t)a2, v52, &v57, a6);
            }
            else
            {
              re::RealityFileWriter::saveEntryToArchive(a1, (uint64_t)a2, v52, &v57, a6);
            }
            CFRelease(v52);
          }
          else
          {
            uint64_t v56 = v58;
            uint64_t v58 = 0;
            *(unsigned char *)a1 = 0;
            *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v56;
          }
          if (!v59.__r_.__value_.__s.__data_[0]
            && v59.__r_.__value_.__l.__size_
            && (v59.__r_.__value_.__s.__data_[16] & 1) != 0)
          {
            (*(void (**)(void))(*(void *)v59.__r_.__value_.__l.__size_ + 40))();
          }
          if (v66 && bytes) {
            (*(void (**)(void))(*(void *)v66 + 40))();
          }
          goto LABEL_72;
        }
      }
      else if (v44 > 5)
      {
        goto LABEL_49;
      }
      int v47 = 2;
      goto LABEL_57;
    }
  }
  uint64_t v25 = re::AssetHandle::assetInfo(this);
  if (v25[17]) {
    char v26 = (char *)v25[18];
  }
  else {
    char v26 = (char *)v25 + 137;
  }
  re::DynamicString::format((re::DynamicString *)"Asset '%s' failed to load", (re::DynamicString *)&v79, v26);
  uint64_t v27 = v76[0];
  v76[0] = 0;
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v27;

  double result = (uint64_t *)v79;
  if (v79 && (v80 & 1) != 0) {
    return (uint64_t *)(*(uint64_t (**)(void))(*(void *)v79 + 40))();
  }
  return result;
}

uint64_t re::RealityFileWriter::editAssetLabel@<X0>(re::RealityFileWriter *this@<X0>, const re::AssetHandle *a2@<X1>, const re::DynamicString *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = (re::DynamicString *)re::AssetHandle::legacy_assetPath(a2);
  uint64_t v8 = *((void *)v7 + 1);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v19 = v8;
  uint64_t v20 = 0;
  re::DynamicString::setCapacity(&v19, 0);
  re::AssetPath::fullAssetPath(v7, (re::DynamicString *)&v19);
  re::RealityFileWriter::AssetInfoTable::tryGetAssetInfo((re::RealityFileWriter *)((char *)this + 24), (const re::DynamicString *)&v19, &v18);
  if (v18)
  {
    uint64_t v14 = v18;
    uint64_t v9 = (void *)(v18 + 8);
    id v10 = (id)(v18 + 8);
    re::RealityFileWriter::assignLabelToAssetInfo(this, &v14, a3, a4);
  }
  else
  {
    if (v20) {
      uint64_t v12 = v21;
    }
    else {
      uint64_t v12 = (char *)&v20 + 1;
    }
    re::DynamicString::format((re::DynamicString *)"The asset (%s) is not registered with this RealityFileWriter.", (re::DynamicString *)&v15, v12);
    uint64_t v13 = v17;
    uint64_t v17 = 0;
    *(unsigned char *)a4 = 0;
    *(void *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v13;

    if (v15 && (v16 & 1) != 0) {
      (*(void (**)(void))(*(void *)v15 + 40))();
    }
  }
  uint64_t result = v19;
  if (v19)
  {
    if (v20) {
      return (*(uint64_t (**)(void))(*(void *)v19 + 40))();
    }
  }
  return result;
}

re::DynamicString *re::FixedArray<re::DynamicString>::operator=(re::DynamicString *a1, uint64_t a2)
{
  if (a1 != (re::DynamicString *)a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)a1)
    {
      if (!v4) {
        return a1;
      }
      goto LABEL_7;
    }
    if (v4)
    {
      re::FixedArray<re::DynamicString>::init<>(a1, v4, *(void *)(a2 + 8));
LABEL_7:
      re::FixedArray<re::DynamicString>::copy(a1, a2);
    }
  }
  return a1;
}

void re::RealityFileWriter::checkAssetIsWritable(uint64_t a1, const re::AssetHandle *a2, uint64_t a3)
{
  if (v16[0])
  {
    if (*(_DWORD *)(*(void *)a3 + 24) == 1)
    {
      unint64_t v6 = (re::DynamicString *)re::AssetHandle::legacy_assetPath(a2);
      uint64_t v7 = *((void *)v6 + 1);
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v10 = v7;
      uint64_t v11 = 0;
      re::DynamicString::setCapacity(&v10, 0);
      re::AssetPath::fullAssetPath(v6, (re::DynamicString *)&v10);
      if (v11) {
        uint64_t v8 = v12;
      }
      else {
        uint64_t v8 = (char *)&v11 + 1;
      }
      re::DynamicString::format((re::DynamicString *)"The asset (%s) has already been written.", (re::DynamicString *)v14, v8);
      uint64_t v9 = v15;
      uint64_t v15 = 0;
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v9;

      if (*(void *)&v14[0])
      {
        if (BYTE8(v14[0])) {
          (*(void (**)(void))(**(void **)&v14[0] + 40))();
        }
        memset(v14, 0, sizeof(v14));
      }
      if (v10)
      {
        if (v11) {
          (*(void (**)(void))(*(void *)v10 + 40))();
        }
      }
    }
    else
    {
      *(unsigned char *)a1 = 1;
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v17;
  }
}

void re::RealityFileWriter::addDependentAssets(uint64_t a1, const re::AssetHandle *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8 = *(unsigned int *)(a4 + 32);
  if (v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = (int *)(*(void *)(a4 + 16) + 8);
    while (1)
    {
      int v11 = *v10;
      v10 += 10;
      if (v11 < 0) {
        break;
      }
      if (v8 == ++v9)
      {
        LODWORD(v9) = *(_DWORD *)(a4 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  if (v8 == v9)
  {
LABEL_23:
    *(unsigned char *)a1 = 1;
  }
  else
  {
    uint64_t v12 = v9;
    uint64_t v13 = *(void *)(a4 + 16);
    while (1)
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)v24, (const re::AssetHandle *)(v13 + 40 * v12 + 16));
      re::RealityFileWriter::getOrMakeAssetInfo((re::RealityFileWriter *)v22, a2, (re::AssetHandle *)v24);
      int v14 = v22[0];
      if (v22[0])
      {
        uint64_t v15 = *a3;
        uint64_t v21 = v23;
        if (v23)
        {
          char v16 = v23 + 8;
          uint64_t v17 = v23 + 8;
          re::DynamicArray<re::SharedPtr<re::AssetLoadRequest>>::add((_anonymous_namespace_ *)(v15 + 96), (uint64_t *)&v21);

          uint64_t v21 = 0;
        }
        else
        {
          re::DynamicArray<re::SharedPtr<re::AssetLoadRequest>>::add((_anonymous_namespace_ *)(v15 + 96), (uint64_t *)&v21);
        }
      }
      else
      {
        uint64_t v18 = v23;
        *(unsigned char *)a1 = 0;
        *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v18;
      }
      re::Result<re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::WrappedError>::~Result((uint64_t)v22);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v24);
      if (!v14) {
        break;
      }
      uint64_t v13 = *(void *)(a4 + 16);
      if (*(_DWORD *)(a4 + 32) <= (v9 + 1)) {
        int v19 = v9 + 1;
      }
      else {
        int v19 = *(_DWORD *)(a4 + 32);
      }
      while (1)
      {
        uint64_t v12 = (v9 + 1);
        if (v19 - 1 == v9) {
          break;
        }
        LODWORD(v9) = v9 + 1;
        int v20 = v12;
        if ((*(_DWORD *)(v13 + 40 * v12 + 8) & 0x80000000) != 0) {
          goto LABEL_22;
        }
      }
      int v20 = v19;
LABEL_22:
      LODWORD(v9) = v20;
      if (v8 == v20) {
        goto LABEL_23;
      }
    }
  }
}

void re::RealityFileWriter::close(re::RealityFileWriter *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v239 = *MEMORY[0x263EF8340];
  if (*((void *)this + 34))
  {
    uint64_t v5 = (uint64_t *)*((unsigned int *)this + 14);
    if (v5)
    {
      unint64_t v6 = 0;
      uint64_t v7 = (int *)(*((void *)this + 5) + 8);
      while (1)
      {
        int v8 = *v7;
        v7 += 14;
        if (v8 < 0) {
          break;
        }
        unint64_t v6 = (uint64_t *)((char *)v6 + 1);
        if (v5 == v6)
        {
          unint64_t v6 = (uint64_t *)*((unsigned int *)this + 14);
          break;
        }
      }
    }
    else
    {
      unint64_t v6 = 0;
    }
    if (v5 != v6)
    {
      unint64_t v10 = v6;
      unint64_t v2 = 56;
      while (1)
      {
        uint64_t v11 = *(void *)(*((void *)this + 5) + 56 * v10 + 48);
        if (v11) {
          id v12 = (id)(v11 + 8);
        }
        int v13 = *(_DWORD *)(v11 + 24);

        if (v13 != 1) {
          break;
        }
        unsigned int v14 = *((_DWORD *)this + 14);
        if (v14 <= (int)v6 + 1) {
          unint64_t v15 = (v6 + 1);
        }
        else {
          unint64_t v15 = v14;
        }
        while (1)
        {
          unint64_t v10 = (v6 + 1);
          if (v15 - 1 == v6) {
            break;
          }
          LODWORD(v6) = v6 + 1;
          char v16 = (uint64_t *)v10;
          if ((*(_DWORD *)(*((void *)this + 5) + 56 * v10 + 8) & 0x80000000) != 0) {
            goto LABEL_21;
          }
        }
        char v16 = (uint64_t *)v15;
LABEL_21:
        unint64_t v6 = v16;
        if (v5 == v16) {
          goto LABEL_22;
        }
      }
      uint64_t v45 = v219;
      *(void *)&long long v219 = 0;
      *(unsigned char *)a2 = 0;
      *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v45;
      goto LABEL_65;
    }
LABEL_22:
    int v171 = this;
    unint64_t v17 = *((void *)this + 66);
    long long v219 = 0u;
    memset(v220, 0, 20);
    *(void *)&v220[20] = 0x7FFFFFFFLL;
    if (v17)
    {
      if (v17 >= 0x555555555555556) {
        goto LABEL_351;
      }
      if (!v19)
      {
LABEL_352:
        re::internal::assertLog((re::internal *)4, v20, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
        _os_crash();
        __break(1u);
LABEL_353:
        re::internal::assertLog((re::internal *)4, v128, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
        _os_crash();
        __break(1u);
LABEL_354:
        *(void *)&long long v185 = 0;
        memset(v192, 0, 32);
        long long v190 = 0u;
        long long v191 = 0u;
        long long v189 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v227 = 136315906;
        *(void *)&v227[4] = "operator[]";
        *(_WORD *)&v227[12] = 1024;
        *(_DWORD *)&v227[14] = 476;
        *(_WORD *)&v227[18] = 2048;
        *(void *)&v227[20] = v6;
        __int16 v228 = 2048;
        *(void *)int64x2_t v229 = v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      CFDataRef v21 = (const __CFData *)v19;
      uint64_t v22 = v19;
      unint64_t v23 = v17 - 1;
      if (v17 != 1)
      {
        uint64_t v22 = v19;
        do
        {
          *(_OWORD *)(v22 + 16) = 0uLL;
          *(_OWORD *)(v22 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0uLL;
          *(_OWORD *)uint64_t v22 = 0uLL;
          *(_DWORD *)(v22 + 36) = 0x7FFFFFFF;
          v22 += 48;
          --v23;
        }
        while (v23);
      }
      *(_OWORD *)(v22 + 16) = 0u;
      *(_OWORD *)(v22 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
      *(_OWORD *)uint64_t v22 = 0u;
      *(_DWORD *)(v22 + 36) = 0x7FFFFFFF;
    }
    else
    {
      CFDataRef v21 = 0;
    }
    uint64_t v24 = *((unsigned int *)v171 + 14);
    if (v24)
    {
      unint64_t v25 = 0;
      char v26 = (int *)(*((void *)v171 + 5) + 8);
      while (1)
      {
        int v27 = *v26;
        v26 += 14;
        if (v27 < 0) {
          break;
        }
        if (v24 == ++v25)
        {
          unint64_t v25 = *((unsigned int *)v171 + 14);
          break;
        }
      }
    }
    else
    {
      unint64_t v25 = 0;
    }
    if (v24 == v25) {
      goto LABEL_56;
    }
    unint64_t v28 = v25;
    do
    {
      uint64_t v29 = *((void *)v171 + 5);
      uint64_t v30 = *(void **)(v29 + 56 * v28 + 48);
      if (v30) {
        uint64_t v31 = v30 + 1;
      }
      uint64_t v32 = v30[34];
      if (!v32) {
        goto LABEL_48;
      }
      if (v32 != v17)
      {
        if (*(unsigned char *)(v29 + 56 * v28 + 24)) {
          uint64_t v49 = *(void *)(v29 + 56 * v28 + 32);
        }
        else {
          uint64_t v49 = v29 + 56 * v28 + 25;
        }
        re::DynamicString::format((re::DynamicString *)"Asset '%s' has %zu configuration names, but there are %zu configuration set names.", (re::DynamicString *)&v189, v49, v30[34], v17);
        uint64_t v42 = *(unsigned int **)v227;
        *(void *)uint64_t v227 = 0;

        if (void)v189 && (BYTE8(v189)) {
          (*(void (**)(void))(*(void *)v189 + 40))();
        }
LABEL_109:

LABEL_110:
        int v56 = 1;
        goto LABEL_111;
      }
      uint64_t v33 = 0;
      unint64_t v34 = 0;
      unint64_t v180 = 1;
      CFDataRef Mutable = v21;
      do
      {
        unint64_t v175 = 0;
        unint64_t v36 = v30[34];
        if (v36 <= v34)
        {
          *(void *)&long long v185 = 0;
          memset(v192, 0, 32);
          long long v190 = 0u;
          long long v191 = 0u;
          long long v189 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v227 = 136315906;
          *(void *)&v227[4] = "operator[]";
          *(_WORD *)&v227[12] = 1024;
          *(_DWORD *)&v227[14] = 476;
          *(_WORD *)&v227[18] = 2048;
          *(void *)&v227[20] = v34;
          __int16 v228 = 2048;
          *(void *)int64x2_t v229 = v36;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_307:
          *(void *)&long long v185 = 0;
          memset(v192, 0, 32);
          long long v190 = 0u;
          long long v191 = 0u;
          long long v189 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v227 = 136315906;
          *(void *)&v227[4] = "operator[]";
          *(_WORD *)&v227[12] = 1024;
          *(_DWORD *)&v227[14] = 468;
          *(_WORD *)&v227[18] = 2048;
          *(void *)&v227[20] = v17;
          __int16 v228 = 2048;
          *(void *)int64x2_t v229 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_308;
        }
        unint64_t v175 = re::Hash<re::DynamicString>::operator()((uint64_t)&v172, v30[35] + v33);
        if (v17 == v34) {
          goto LABEL_307;
        }
        re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add((uint64_t)Mutable, (uint64_t *)&v175);
        v180 *= v34 + v175;
        ++v34;
        CFDataRef Mutable = (const __CFData *)((char *)Mutable + 48);
        v33 += 32;
      }
      while (v17 != v34);
      BOOL v37 = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains((uint64_t)&v219, (uint64_t *)&v180);
      if (v37)
      {
        uint64_t v50 = v30[34];
        if (v50)
        {
          uint64_t v51 = (re::DynamicString *)v30[35];
          uint64_t v52 = 32 * v50;
          do
          {
            re::DynamicString::operator+(v51, ", ", (re::DynamicString *)v227);
            if (v227[8]) {
              uint64_t v53 = *(const char **)&v227[16];
            }
            else {
              uint64_t v53 = &v227[9];
            }
            if (v227[8]) {
              size_t v54 = *(void *)&v227[8] >> 1;
            }
            else {
              size_t v54 = v227[8] >> 1;
            }
            re::DynamicString::append((re::DynamicString *)&v189, v53, v54);
            if (*(void *)v227 && (v227[8] & 1) != 0) {
              (*(void (**)(void))(**(void **)v227 + 40))();
            }
            uint64_t v51 = (re::DynamicString *)((char *)v51 + 32);
            v52 -= 32;
          }
          while (v52);
        }
        if (BYTE8(v189)) {
          id v55 = (char *)v190;
        }
        else {
          id v55 = (char *)&v189 + 9;
        }
        re::DynamicString::format((re::DynamicString *)"This combination of configuration names is not unique in the reality file: %s", (re::DynamicString *)v227, v55);
        uint64_t v42 = (unsigned int *)v185;
        *(void *)&long long v185 = 0;

        if (*(void *)v227 && (v227[8] & 1) != 0) {
          (*(void (**)(void))(**(void **)v227 + 40))();
        }
        if (void)v189 && (BYTE8(v189)) {
          (*(void (**)(void))(*(void *)v189 + 40))();
        }
        if (!v30) {
          goto LABEL_110;
        }
        goto LABEL_109;
      }
      re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add((uint64_t)&v219, (uint64_t *)&v180);
LABEL_48:

      LODWORD(v3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *((_DWORD *)v171 + 14);
      if (v38 <= (int)v25 + 1) {
        unint64_t v38 = (v25 + 1);
      }
      else {
        unint64_t v38 = v38;
      }
      while (1)
      {
        unint64_t v28 = (v25 + 1);
        if (v38 - 1 == v25) {
          break;
        }
        LODWORD(v25) = v25 + 1;
        unint64_t v39 = v28;
        if ((*(_DWORD *)(*((void *)v171 + 5) + 56 * v28 + 8) & 0x80000000) != 0) {
          goto LABEL_55;
        }
      }
      unint64_t v39 = v38;
LABEL_55:
      unint64_t v25 = v39;
    }
    while (v24 != v39);
LABEL_56:
    if (!v17)
    {
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v219);
      goto LABEL_117;
    }
    uint64_t v40 = 0;
    unint64_t v6 = 0;
    unint64_t v41 = 1;
    uint64_t v42 = (unsigned int *)v21;
    while (2)
    {
      uint64_t v43 = v42[7];
      if ((unint64_t)v6 >= *((void *)v171 + 69)
        || (unint64_t v180 = 0,
            unint64_t v180 = re::Hash<re::DynamicString>::operator()((uint64_t)&v172, *((void *)v171 + 70) + v40),
            re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains((uint64_t)v42, (uint64_t *)&v180)))
      {
        v41 *= v43;
        unint64_t v6 = (uint64_t *)((char *)v6 + 1);
        v40 += 32;
        v42 += 12;
        if ((uint64_t *)v17 != v6) {
          continue;
        }
        if (v41 == *(unsigned int *)&v220[12])
        {
          if (v41 > 0x40000)
          {
            re::DynamicString::format((re::DynamicString *)"There are %zu scenes in the reality file addressed by configurations, which exceeds the maximum number %u.", (re::DynamicString *)&v189, v41, 0x40000);
            uint64_t v44 = 23;
            goto LABEL_101;
          }
          int v56 = 0;
LABEL_111:
          if (v17)
          {
            uint64_t v57 = 0;
            do
            {
              double v58 = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)((char *)v21 + v57));
              v57 += 48;
            }
            while (48 * v17 != v57);
          }
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v219);
          if (v56)
          {
            std::string v59 = v42;
            *(unsigned char *)a2 = 0;
            *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v59;

            return;
          }
LABEL_117:
          unint64_t v17 = (unint64_t)v171;
          if (*((unsigned char *)v171 + 512)) {
            BOOL v159 = *(void *)(*((void *)v171 + 40) + 24) > 7;
          }
          else {
            BOOL v159 = 0;
          }
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&v189, 0);
          *((void *)&v190 + 1) = 0;
          *(void *)&long long v189 = &unk_26E6CAC78;
          long long v191 = 0uLL;
          uint64_t v194 = 0;
          BOOL v195 = 0;
          memset(&v192[8], 0, 32);
          *(_DWORD *)unsigned int v192 = 0;
          int v193 = 0;
          memset(v196, 0, sizeof(v196));
          long long v197 = 0u;
          long long v198 = 0u;
          long long v199 = 0u;
          long long v201 = 0u;
          memset(v202, 0, sizeof(v202));
          uint64_t v203 = 0x7FFFFFFFLL;
          long long v204 = 0u;
          long long v205 = 0u;
          int v200 = 0;
          int v206 = 0;
          uint64_t v207 = 0x7FFFFFFFLL;
          long long v208 = 0u;
          long long v209 = 0u;
          int v210 = 0;
          uint64_t v211 = 0x7FFFFFFFLL;
          long long v212 = 0u;
          long long v213 = 0u;
          int v214 = 0;
          uint64_t v215 = 0x7FFFFFFFLL;
          uint64_t v218 = 0;
          uint64_t v216 = 0;
          uint64_t v217 = 0;
          unsigned int v187 = 0;
          long long v186 = 0u;
          long long v185 = 0u;
          uint64_t v188 = 0x7FFFFFFFLL;
          v184 = 0;
          unint64_t v181 = 0;
          unint64_t v182 = 0;
          unint64_t v180 = 0;
          int v183 = 0;
          uint64_t v60 = *((unsigned int *)v171 + 14);
          if (v60)
          {
            uint64_t v61 = 0;
            int v62 = (int *)(*((void *)v171 + 5) + 8);
            while (1)
            {
              int v63 = *v62;
              v62 += 14;
              if (v63 < 0) {
                break;
              }
              if (v60 == ++v61)
              {
                LODWORD(v61) = *((_DWORD *)v171 + 14);
                break;
              }
            }
          }
          else
          {
            LODWORD(v61) = 0;
          }
          if (v60 == v61)
          {
            unint64_t v165 = 0;
            unsigned int v64 = *((_DWORD *)v171 + 14);
          }
          else
          {
            unsigned int v164 = 0;
            unint64_t v165 = 0;
            int v162 = 0;
            unsigned int v167 = 0;
            uint64_t v65 = 0;
            uint64_t v66 = v61;
            uint64_t v168 = 0;
            uint64_t v166 = 0;
            uint64_t v161 = 0;
            int v163 = *((_DWORD *)v171 + 14);
            do
            {
              unint64_t v67 = *(void *)(*(void *)(v17 + 40) + 56 * v66 + 48);
              if (v67) {
                id v68 = (id)(v67 + 8);
              }
              memset(v227, 0, sizeof(v227));
              uint64_t v232 = 0;
              v233[0] = 0;
              long long v235 = 0u;
              long long v236 = 0u;
              int v237 = 0;
              *(_OWORD *)&v229[2] = 0u;
              long long v230 = 0u;
              int v231 = 0;
              uint64_t v238 = 0x7FFFFFFFLL;
              re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)v227, (re::DynamicString *)(v67 + 32));
              unint64_t v69 = *(void *)(v67 + 72);
              if (v69) {
                unint64_t v70 = v69 >> 1;
              }
              else {
                unint64_t v70 = v69 >> 1;
              }
              if (v70)
              {
                LOBYTE(v219) = 1;
                re::DynamicString::DynamicString((re::DynamicString *)((char *)&v219 + 8), (const re::DynamicString *)(v67 + 64));
              }
              else
              {
                LOBYTE(v219) = 0;
              }
              re::Optional<re::DynamicString>::operator=(v233, &v219);
              if (_BYTE)v219 && *((void *)&v219 + 1) && (v220[0]) {
                (*(void (**)(void))(**((void **)&v219 + 1) + 40))();
              }
              re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=((uint64_t)&v235, v67 + 208);
              uint64_t v71 = *(void *)&v192[32];
              if (*(void *)&v192[32] >= *(void *)&v192[24])
              {
                re::DynamicArray<re::AssetMapAssetDescriptor>::growCapacity(&v192[16], *(void *)&v192[32] + 1);
                uint64_t v71 = *(void *)&v192[32];
              }
              uint64_t v72 = v194;
              uint64_t v73 = v194 + 168 * v71;
              re::DynamicArray<re::DynamicString>::DynamicArray(v73, (uint64_t *)v227);
              re::DynamicArray<unsigned long>::DynamicArray(v73 + 40, (uint64_t *)&v229[10]);
              int v74 = v233[0];
              *(unsigned char *)(v73 + 80) = v233[0];
              if (v74) {
                re::DynamicString::DynamicString((re::DynamicString *)(v72 + 168 * v71 + 88), (const re::DynamicString *)v234);
              }
              uint64_t v75 = v72 + 168 * v71;
              *(_OWORD *)(v75 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0u;
              uint64_t v76 = v75 + 120;
              *(_DWORD *)(v76 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
              *(_OWORD *)(v76 + 16) = 0u;
              *(void *)(v76 + 36) = 0x7FFFFFFFLL;
              if ((void)v235)
              {
                if (HIDWORD(v236) <= 3) {
                  signed int v77 = 3;
                }
                else {
                  signed int v77 = HIDWORD(v236);
                }
                re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init(v76, v235, v77);
                re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(v76, (uint64_t)&v235);
              }
              ++*(void *)&v192[32];
              ++v193;
              if (*(unsigned char *)(v67 + 256))
              {
                re::SceneDescriptor::SceneDescriptor((re::SceneDescriptor *)&v219);
                re::DynamicString::operator=((re::DynamicString *)&v220[8], (re::DynamicString *)(v67 + 32));
                re::DynamicString::operator=((re::DynamicString *)&v220[40], (re::DynamicString *)(v67 + 64));
                unint64_t v78 = *(void *)(v67 + 144);
                if (v78) {
                  unint64_t v79 = v78 >> 1;
                }
                else {
                  unint64_t v79 = v78 >> 1;
                }
                if (v79)
                {
                  LOBYTE(v175) = 1;
                  re::DynamicString::DynamicString((re::DynamicString *)&v176, (const re::DynamicString *)(v67 + 136));
                  re::Optional<re::DynamicString>::operator=(v221, &v175);
                  if ((_BYTE)v175)
                  {
                    if (v176 && (v177 & 1) != 0) {
                      (*(void (**)(void))(*(void *)v176 + 40))();
                    }
                  }
                }
                unint64_t v80 = *(void *)(v67 + 168);
                uint64_t v179 = 0;
                uint64_t v176 = 0;
                uint64_t v177 = 0;
                unint64_t v175 = 0;
                LODWORD(v17re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
                if (v80)
                {
                  unint64_t v81 = *(void *)(v67 + 184);
                  unint64_t v175 = v80;
                  re::DynamicArray<re::SceneCompatibilityVariant>::setCapacity(&v175, v81);
                  LODWORD(v17re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v178 + 1;
                  re::DynamicArray<re::SceneCompatibilityVariant>::copy((uint64_t)&v175, v67 + 168);
                  if (v177)
                  {
                    uint64_t v82 = 40 * v177;
                    uint64_t v83 = (const re::DynamicString *)(v179 + 8);
                    do
                    {
                      int v172 = *((_DWORD *)v83 - 2);
                      re::DynamicString::DynamicString((re::DynamicString *)&v173, v83);
                      re::DynamicArray<re::SceneCompatibilityVariant>::add((_anonymous_namespace_ *)v226, (re::DynamicString *)&v172);
                      if (v173 && (v174 & 1) != 0) {
                        (*(void (**)(void))(*(void *)v173 + 40))();
                      }
                      uint64_t v83 = (const re::DynamicString *)((char *)v83 + 40);
                      v82 -= 40;
                    }
                    while (v82);
                  }
                }
                re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)&v175);
                uint64_t v84 = *((void *)&v191 + 1);
                if (*((void *)&v191 + 1) >= (unint64_t)v191)
                {
                  re::DynamicArray<re::SceneDescriptor>::growCapacity((void *)&v190 + 1, *((void *)&v191 + 1) + 1);
                  uint64_t v84 = *((void *)&v191 + 1);
                }
                re::SceneDescriptor::SceneDescriptor((re::SceneDescriptor *)(*(void *)&v192[8] + 200 * v84), (const re::SceneDescriptor *)&v219);
                ++*((void *)&v191 + 1);
                ++*(_DWORD *)v192;
                *(void *)&long long v219 = &unk_26E6CABF8;
                re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)v226);
                if ((void)v224)
                {
                  if (BYTE8(v224)) {
                    (*(void (**)(void))(*(void *)v224 + 40))();
                  }
                  long long v224 = 0u;
                  long long v225 = 0u;
                }
                if (v221[0] && (void)v222)
                {
                  if (BYTE8(v222)) {
                    (*(void (**)(void))(*(void *)v222 + 40))();
                  }
                  long long v222 = 0u;
                  long long v223 = 0u;
                }
                if (*(void *)&v220[40])
                {
                  if (v220[48]) {
                    (*(void (**)(void))(**(void **)&v220[40] + 40))();
                  }
                  memset(&v220[40], 0, 32);
                }
                if (*(void *)&v220[8])
                {
                  if (v220[16]) {
                    (*(void (**)(void))(**(void **)&v220[8] + 40))();
                  }
                  memset(&v220[8], 0, 32);
                }
                *(void *)&long long v219 = &unk_26E6DECE0;
                objc_destructInstance((char *)&v219 + 8);
              }
              unint64_t v85 = 0x94D049BB133111EBLL
                  * ((0xBF58476D1CE4E5B9 * (v67 ^ (v67 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v67 ^ (v67 >> 30))) >> 27));
              unint64_t v86 = v85 ^ (v85 >> 31);
              if ((void)v185)
              {
                unint64_t v87 = v86 % v164;
                uint64_t v88 = v166;
                for (uint64_t i = *(unsigned int *)(v166 + 4 * v87);
                      i != 0x7FFFFFFF;
                      uint64_t i = *(_DWORD *)(v65 + 32 * i + 8) & 0x7FFFFFFF)
                {
                  if (*(void *)(v65 + 32 * i + 16) == v67) {
                    goto LABEL_200;
                  }
                }
              }
              else
              {
                unint64_t v87 = 0;
                uint64_t v88 = v166;
              }
              uint64_t v90 = v188;
              if (v188 == 0x7FFFFFFF)
              {
                unsigned int v91 = v167;
                unsigned int v164 = DWORD2(v186);
                if (v167 == DWORD2(v186))
                {
                  re::HashTable<re::SharedPtr<re::RealityFileWriter::AssetInfo>,unsigned long,re::Hash<re::SharedPtr<re::RealityFileWriter::AssetInfo>>,re::EqualTo<re::SharedPtr<re::RealityFileWriter::AssetInfo>>,true,false>::setCapacity((uint64_t)&v185, 2 * v162);
                  unsigned int v91 = v187;
                  unsigned int v164 = DWORD2(v186);
                  unint64_t v87 = v86 % DWORD2(v186);
                  uint64_t v65 = v186;
                }
                unsigned int v92 = v91 + 1;
                unsigned int v187 = v91 + 1;
                uint64_t v90 = v167;
                int v93 = *(_DWORD *)(v65 + 32 * v167 + 8);
                uint64_t v88 = *((void *)&v185 + 1);
              }
              else
              {
                int v93 = *(_DWORD *)(v65 + 32 * v188 + 8);
                LODWORD(v18re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v93 & 0x7FFFFFFF;
                unsigned int v92 = v167;
                unsigned int v167 = v90;
              }
              *(_DWORD *)(v65 + 32 * v90 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v93 | 0x80000000;
              uint64_t v65 = v186;
              uint64_t v94 = v186 + 32 * v90;
              *(_DWORD *)(v94 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(v94 + 8) & 0x80000000 | *(_DWORD *)(v88 + 4 * v87);
              *(void *)uint64_t v94 = v86;
              *(void *)(v94 + 16) = v67;
              if (v67)
              {
                uint64_t v95 = v88;
                id v96 = (id)(v67 + 8);
                uint64_t v88 = v95;
              }
              *(void *)(v94 + 24) = v168;
              *(_DWORD *)(v88 + 4 * v87) = v167;
              int v162 = ++HIDWORD(v186);
              ++HIDWORD(v188);
              unsigned int v167 = v92;
LABEL_200:
              uint64_t v166 = v88;
              if (*(void *)(v67 + 272))
              {
                *(void *)&long long v219 = v168;
                id v97 = re::FixedArray<re::DynamicString>::FixedArray((re::DynamicString *)((char *)&v219 + 8), v67 + 264);
                unint64_t v98 = v165;
                if (v165 >= v181)
                {
                  unint64_t v100 = v165 + 1;
                  if (v181 < v165 + 1)
                  {
                    if (v180)
                    {
                      unint64_t v101 = 8;
                      if (v181) {
                        unint64_t v101 = 2 * v181;
                      }
                      if (v101 <= v100) {
                        unint64_t v102 = v165 + 1;
                      }
                      else {
                        unint64_t v102 = v101;
                      }
                      re::DynamicArray<re::RealityFileConfigurationEntryDescriptor>::setCapacity(&v180, v102);
                    }
                    else
                    {
                      re::DynamicArray<re::RealityFileConfigurationEntryDescriptor>::setCapacity(&v180, v100);
                      ++v183;
                    }
                  }
                  unint64_t v98 = v182;
                  int v99 = v184;
                }
                else
                {
                  int v99 = v161;
                }
                uint64_t v161 = v99;
                unsigned int v103 = &v99[4 * v98];
                *unsigned int v103 = v219;
                re::FixedArray<re::DynamicString>::FixedArray((re::DynamicString *)(v103 + 1), (uint64_t)&v219 + 8);
                unint64_t v165 = ++v182;
                ++v183;
                re::FixedArray<re::DynamicString>::deinit((void *)&v219 + 1);
              }
              v104.n128_f64[0] = re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v235);
              if (v233[0] && v234[0])
              {
                if (v234[1]) {
                  (*(void (**)(double))(*(void *)v234[0] + 40))(v104.n128_f64[0]);
                }
                __n128 v104 = 0uLL;
                memset(v234, 0, sizeof(v234));
              }
              if (*(void *)&v229[10])
              {
                if (v232) {
                  (*(void (**)(__n128))(**(void **)&v229[10] + 40))(v104);
                }
                uint64_t v232 = 0;
                long long v230 = 0uLL;
                *(void *)&v229[10] = 0;
                ++v231;
              }
              ++v168;
              re::DynamicArray<re::DynamicString>::deinit((uint64_t)v227);

              unint64_t v17 = (unint64_t)v171;
              unsigned int v64 = *((_DWORD *)v171 + 14);
              if (v64 <= (int)v61 + 1) {
                int v105 = v61 + 1;
              }
              else {
                int v105 = *((_DWORD *)v171 + 14);
              }
              while (1)
              {
                uint64_t v66 = (v61 + 1);
                if (v105 - 1 == v61) {
                  break;
                }
                LODWORD(v61) = v61 + 1;
                int v106 = v66;
                if ((*(_DWORD *)(*((void *)v171 + 5) + 56 * v66 + 8) & 0x80000000) != 0) {
                  goto LABEL_230;
                }
              }
              int v106 = v105;
LABEL_230:
              LODWORD(v61) = v106;
            }
            while (v163 != v106);
          }
          uint64_t v107 = 0;
          if (v64)
          {
            unint64_t v108 = (int *)(*(void *)(v17 + 40) + 8);
            while (1)
            {
              int v109 = *v108;
              v108 += 14;
              if (v109 < 0) {
                break;
              }
              if (v64 == ++v107)
              {
                LODWORD(v107) = v64;
                break;
              }
            }
          }
          unsigned int v169 = v64;
          if (v64 != v107)
          {
            unint64_t v110 = 0;
            uint64_t v111 = v107;
            unint64_t v112 = DWORD2(v186);
            unint64_t v2 = *((void *)&v185 + 1);
            uint64_t v113 = v185;
            unint64_t v6 = (uint64_t *)v186;
            while (1)
            {
              int v114 = *(void **)(*(void *)(v17 + 40) + 56 * v111 + 48);
              if (v114) {
                uint64_t v115 = v114 + 1;
              }
              unint64_t v17 = *(void *)&v192[32];
              if (*(void *)&v192[32] <= v110)
              {
                unint64_t v175 = 0;
                memset(v220, 0, 64);
                long long v219 = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)uint64_t v227 = 136315906;
                *(void *)&v227[4] = "operator[]";
                *(_WORD *)&v227[12] = 1024;
                *(_DWORD *)&v227[14] = 789;
                *(_WORD *)&v227[18] = 2048;
                *(void *)&v227[20] = v110;
                __int16 v228 = 2048;
                *(void *)int64x2_t v229 = v17;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_351:
                re::internal::assertLog((re::internal *)6, v18, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element std::string::size_type size = %zu, count = %zu", "!overflow", "init", 324, 48, v17);
                _os_crash();
                __break(1u);
                goto LABEL_352;
              }
              uint64_t v116 = v194 + 168 * v110;
              dispatch_time_t v117 = (void *)(v116 + 40);
              unint64_t v118 = v114[14];
              if (*(void *)(v116 + 48) < v118)
              {
                re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(v117, v118);
                unint64_t v118 = v114[14];
              }
              if (!v118) {
                break;
              }
              unint64_t v170 = v110;
              int v119 = (void *)v114[16];
              uint64_t v120 = &v119[v118];
              do
              {
                *(void *)&long long v219 = 0;
                if (v113
                  && (unint64_t v121 = 0xBF58476D1CE4E5B9 * (*v119 ^ (*v119 >> 30)),
                      uint64_t v122 = *(unsigned int *)(v2
                                             + 4
                                             * (((0x94D049BB133111EBLL * (v121 ^ (v121 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                                  * (v121 ^ (v121 >> 27))) >> 31))
                                              % v112)),
                      v122 != 0x7FFFFFFF))
                {
                  uint64_t v123 = v6[4 * v122 + 2];
                  for (j = v122; v123 != *v119; uint64_t v122 = j)
                  {
                    uint64_t j = v6[4 * j + 1] & 0x7FFFFFFF;
                    uint64_t v122 = 0x7FFFFFFFLL;
                    if (j == 0x7FFFFFFF) {
                      break;
                    }
                    uint64_t v123 = v6[4 * j + 2];
                  }
                }
                else
                {
                  uint64_t v122 = 0x7FFFFFFFLL;
                }
                *(void *)&long long v219 = v6[4 * v122 + 3];
                re::DynamicArray<unsigned long>::add(v117, &v219);
                ++v119;
              }
              while (v119 != v120);
              unint64_t v110 = v170 + 1;
              if (v114) {
                goto LABEL_257;
              }
LABEL_258:
              unint64_t v17 = (unint64_t)v171;
              if (*((_DWORD *)v171 + 14) <= (v107 + 1)) {
                int v125 = v107 + 1;
              }
              else {
                int v125 = *((_DWORD *)v171 + 14);
              }
              while (1)
              {
                uint64_t v111 = (v107 + 1);
                if (v125 - 1 == v107) {
                  break;
                }
                LODWORD(v107) = v107 + 1;
                int v126 = v111;
                if ((*(_DWORD *)(*((void *)v171 + 5) + 56 * v111 + 8) & 0x80000000) != 0) {
                  goto LABEL_265;
                }
              }
              int v126 = v125;
LABEL_265:
              LODWORD(v107) = v126;
              if (v169 == v126) {
                goto LABEL_266;
              }
            }
            ++v110;
LABEL_257:

            goto LABEL_258;
          }
LABEL_266:
          BOOL v195 = v159;
          re::FixedArray<re::DynamicString>::operator=((re::DynamicString *)v196, v17 + 520);
          unint64_t v2 = (unint64_t)&v189;
          uint64_t v127 = re::FixedArray<re::DynamicString>::operator=((re::DynamicString *)((char *)&v196[1] + 8), v17 + 544);
          unint64_t v6 = v184;
          if (!(void)v197)
          {
            if (v165)
            {
              unint64_t v2 = v165;
              goto LABEL_269;
            }
LABEL_273:
            unint64_t v134 = v180;
            if (v180 && v184)
            {
              if (v182)
              {
                uint64_t v135 = 32 * v182;
                uint64_t v136 = v184 + 1;
                do
                {
                  re::FixedArray<re::DynamicString>::deinit(v136);
                  v136 += 4;
                  v135 -= 32;
                }
                while (v135);
                unint64_t v134 = v180;
              }
              (*(void (**)(unint64_t))(*(void *)v134 + 40))(v134);
            }
            re::HashTable<re::SharedPtr<re::RealityFileWriter::AssetInfo>,unsigned long,re::Hash<re::SharedPtr<re::RealityFileWriter::AssetInfo>>,re::EqualTo<re::SharedPtr<re::RealityFileWriter::AssetInfo>>,true,false>::deinit((uint64_t *)&v185);
            {
              re::introspect<re::AssetMap>(void)::info = (_UNKNOWN *)re::introspect_AssetMap(0);
            }
            long long v185 = *((_OWORD *)re::introspect<re::AssetMap>(void)::info + 2);
            char v137 = (re *)v185;
            if (!(void)v185)
            {
              re::DynamicString::format((re::DynamicString *)"Type of object for file \"%s\" has not been registered", (re::DynamicString *)&v219, "assetMap.json");
              id v144 = *(id *)v227;
              *(void *)uint64_t v227 = 0;

              if (void)v219 && (BYTE8(v219)) {
                (*(void (**)(void))(*(void *)v219 + 40))();
              }
LABEL_303:
              *(unsigned char *)a2 = 0;
              *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v144;
              goto LABEL_304;
            }
            CFDataRef Mutable = CFDataCreateMutable(0, 0);
            re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v175);
            re::TypeRegistry::typeInfo(v137, (re **)&v185, &v219);
            unint64_t v138 = (_anonymous_namespace_ *)re::TypeInfo::TypeInfo((uint64_t)v227, (uint64_t)&v219 + 8);
            if ((_BYTE)v219)
            {
              re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v175);
              goto LABEL_284;
            }
            unint64_t v25 = v180;
            unint64_t v180 = 0;

            if ((_BYTE)v219)
            {
LABEL_298:
              re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v175);
              if (v25)
              {
                CFRelease(Mutable);
                goto LABEL_302;
              }
LABEL_284:
              re::RealityArchiveWriter::writeEntry(v17 + 248, (uint64_t)"assetMap.json", Mutable, 1, (uint64_t)&v219);
              if ((_BYTE)v219)
              {
                CFRelease(Mutable);
                goto LABEL_286;
              }
              unint64_t v25 = *(void *)v227;
              *(void *)uint64_t v227 = 0;

              if (!(_BYTE)v219 && *((void *)&v219 + 1) && (v220[0] & 1) != 0) {
                (*(void (**)(void, void))(**((void **)&v219 + 1) + 40))(*((void *)&v219 + 1), *(void *)&v220[8]);
              }
              CFRelease(Mutable);
              if (v25)
              {
LABEL_302:
                id v144 = (id)v25;

                goto LABEL_303;
              }
LABEL_286:
              if (!*(_DWORD *)(v17 + 228)) {
                goto LABEL_324;
              }
              {
                re::introspect<re::DeduplicationInformation>(void)::info = (_UNKNOWN *)re::introspect_DeduplicationInformation(0);
              }
              long long v185 = *((_OWORD *)re::introspect<re::DeduplicationInformation>(void)::info + 2);
              __n128 v139 = (re *)v185;
              if ((void)v185)
              {
                CFDataRef v140 = CFDataCreateMutable(0, 0);
                re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v175);
                re::TypeRegistry::typeInfo(v139, (re **)&v185, &v219);
                int v141 = (_anonymous_namespace_ *)re::TypeInfo::TypeInfo((uint64_t)v227, (uint64_t)&v219 + 8);
                if ((_BYTE)v219)
                {
                  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v175);
                  goto LABEL_291;
                }
                long long v148 = (void *)v180;
                unint64_t v180 = 0;

                if (!(_BYTE)v219 && *(void *)&v220[8] && (v220[16] & 1) != 0) {
                  (*(void (**)(void, void))(**(void **)&v220[8] + 40))(*(void *)&v220[8], *(void *)&v220[24]);
                }
                re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v175);
                if (v148)
                {
                  CFRelease(v140);
                  goto LABEL_322;
                }
LABEL_291:
                re::RealityArchiveWriter::writeEntry(v17 + 248, (uint64_t)"dedupe.json", v140, 0, (uint64_t)&v219);
                if ((_BYTE)v219)
                {
                  CFRelease(v140);
                  goto LABEL_293;
                }
                long long v148 = *(void **)v227;
                *(void *)uint64_t v227 = 0;

                if (!(_BYTE)v219 && *((void *)&v219 + 1) && (v220[0] & 1) != 0) {
                  (*(void (**)(void, void))(**((void **)&v219 + 1) + 40))(*((void *)&v219 + 1), *(void *)&v220[8]);
                }
                CFRelease(v140);
                if (v148)
                {
LABEL_322:
                  id v142 = v148;
                  uint64_t v143 = (unsigned char *)a2;
                  *(unsigned char *)a2 = 0;
                  *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v142;
                }
                else
                {
LABEL_293:
                  id v142 = 0;
                  uint64_t v143 = (unsigned char *)a2;
                  *(unsigned char *)a2 = 1;
                }

                if (*v143)
                {
LABEL_324:
                  re::RealityArchiveWriter::close((re::RealityArchiveWriter *)(v17 + 248), (uint64_t)&v219);
                  if ((_BYTE)v219)
                  {
                    if (*(_DWORD *)(v17 + 148))
                    {
                      uint64_t v149 = *(unsigned int *)(v17 + 144);
                      if (v149) {
                        memset_pattern16(*(void **)(v17 + 128), &memset_pattern_91, 4 * v149);
                      }
                      uint64_t v150 = *(unsigned int *)(v17 + 152);
                      if (v150)
                      {
                        uint64_t v151 = 0;
                        uint64_t v152 = 32 * v150;
                        do
                        {
                          uint64_t v153 = *(void *)(v17 + 136) + v151;
                          int v154 = *(_DWORD *)(v153 + 8);
                          if (v154 < 0) {
                            *(_DWORD *)(v153 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v154 & 0x7FFFFFFF;
                          }
                          v151 += 32;
                        }
                        while (v152 != v151);
                      }
                      *(_DWORD *)(v17 + 14re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
                      *(_DWORD *)(v17 + 15re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
                      int v155 = *(_DWORD *)(v17 + 160) + 1;
                      *(_DWORD *)(v17 + 156) = 0x7FFFFFFF;
                      *(_DWORD *)(v17 + 160) = v155;
                    }
                    uint64_t v156 = *(void *)(v17 + 176);
                    if (v156)
                    {
                      *(void *)(v17 + 176) = 1;
                      v157 = *(unsigned char **)(v17 + 184);
                    }
                    else
                    {
                      *(unsigned char *)(v17 + 176) = v156 & 1;
                      v157 = (unsigned char *)(v17 + 177);
                    }
                    unsigned char *v157 = 0;
                    *(unsigned char *)a2 = 1;
                  }
                  else
                  {
                    uint64_t v158 = *(void *)v227;
                    *(void *)uint64_t v227 = 0;
                    *(unsigned char *)a2 = 0;
                    *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v158;
                  }
                  if (!(_BYTE)v219)
                  {
                    uint64_t v146 = *((void *)&v219 + 1);
                    if (*((void *)&v219 + 1))
                    {
                      if (v220[0])
                      {
                        uint64_t v147 = *(void *)&v220[8];
LABEL_343:
                        (*(void (**)(uint64_t, uint64_t))(*(void *)v146 + 40))(v146, v147);
                      }
                    }
                  }
                }
              }
              else
              {
                re::DynamicString::format((re::DynamicString *)"Type of object for file \"%s\" has not been registered", (re::DynamicString *)&v219, "dedupe.json");
                uint64_t v145 = *(void *)v227;
                *(void *)uint64_t v227 = 0;
                *(unsigned char *)a2 = 0;
                *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v145;

                uint64_t v146 = v219;
                if (void)v219 && (BYTE8(v219))
                {
                  uint64_t v147 = *(void *)v220;
                  goto LABEL_343;
                }
              }
LABEL_304:
              re::AssetMap::~AssetMap((re::AssetMap *)&v189);
              return;
            }
LABEL_308:
            if (*(void *)&v220[8] && (v220[16] & 1) != 0) {
              (*(void (**)(void, void))(**(void **)&v220[8] + 40))(*(void *)&v220[8], *(void *)&v220[24]);
            }
            goto LABEL_298;
          }
LABEL_269:
          if (*((void *)&v197 + 1) == v165)
          {
            if (v165)
            {
              unint64_t v129 = &v6[4 * v165];
              id v130 = (void *)v198;
              do
              {
                uint64_t v131 = (uint64_t)(v6 + 1);
                uint64_t v132 = *v6;
                v6 += 4;
                unint64_t v133 = (re::DynamicString *)(v130 + 1);
                void *v130 = v132;
                v130 += 4;
                re::FixedArray<re::DynamicString>::operator=(v133, v131);
              }
              while (v6 != v129);
            }
            goto LABEL_273;
          }
          goto LABEL_353;
        }
        re::DynamicString::format((re::DynamicString *)"There are %zu possible combinations of configuration names in the reality file, but only %u combinations were utilized.", (re::DynamicString *)&v189, v41, *(unsigned int *)&v220[12]);
      }
      else
      {
        unint64_t v2 = *((void *)v171 + 69);
        if (v2 <= (unint64_t)v6) {
          goto LABEL_354;
        }
        uint64_t v47 = *((void *)v171 + 70) + v40;
        if (*(unsigned char *)(v47 + 8)) {
          uint64_t v48 = *(void *)(v47 + 16);
        }
        else {
          uint64_t v48 = v47 + 9;
        }
        re::DynamicString::format((re::DynamicString *)"A default configuration name of '%s' was specified for configuration set at index %zu, but no matching configurations were added to the set.", (re::DynamicString *)&v189, v48, v6);
      }
      break;
    }
    uint64_t v44 = 22;
LABEL_101:
    uint64_t v42 = *(unsigned int **)v227;
    *(void *)uint64_t v227 = 0;

    if (void)v189 && (BYTE8(v189)) {
      (*(void (**)(void))(*(void *)v189 + 40))();
    }
    goto LABEL_110;
  }
  uint64_t v9 = v219;
  *(void *)&long long v219 = 0;
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v9;
LABEL_65:

  if (void)v189 && (BYTE8(v189)) {
    (*(void (**)(void))(*(void *)v189 + 40))();
  }
}

BOOL re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v10, a2);
  unint64_t v5 = *(unsigned int *)(a1 + 24);
  uint64_t v6 = 0x7FFFFFFFLL;
  if (v5)
  {
    uint64_t v7 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % v5));
    if (v7 != 0x7FFFFFFF)
    {
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v6 = 0x7FFFFFFFLL;
      while (!re::DynamicString::operator==(v8 + 48 * v7 + 16, a2))
      {
        uint64_t v7 = *(_DWORD *)(v8 + 48 * v7 + 8) & 0x7FFFFFFF;
        if (v7 == 0x7FFFFFFF) {
          return v6 != 0x7FFFFFFF;
        }
      }
      uint64_t v6 = v7;
    }
  }
  return v6 != 0x7FFFFFFF;
}

re::DynamicString *re::HashTable<re::DynamicString,re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::SharedPtr<re::RealityFileWriter::AssetInfo>&>(uint64_t a1, const re::DynamicString *a2, uint64_t *a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v17, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    uint64_t v12 = *(unsigned int *)(a1 + 36);
    if (v12 == 0x7FFFFFFF)
    {
      uint64_t v12 = *(unsigned int *)(a1 + 32);
      int v13 = v12;
      if (v12 == *(_DWORD *)(a1 + 24))
      {
        re::HashTable<re::DynamicString,re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
        LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7 % *(unsigned int *)(a1 + 24);
        int v13 = *(_DWORD *)(a1 + 32);
      }
      *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v13 + 1;
      uint64_t v14 = *(void *)(a1 + 16);
      int v15 = *(_DWORD *)(v14 + 56 * v12 + 8);
    }
    else
    {
      uint64_t v14 = *(void *)(a1 + 16);
      int v15 = *(_DWORD *)(v14 + 56 * v12 + 8);
      *(_DWORD *)(a1 + 36) = v15 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v14 + 56 * v12 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v15 | 0x80000000;
    *(_DWORD *)(*(void *)(a1 + 16) + 56 * v12 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 56 * v12 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v8);
    *(void *)(*(void *)(a1 + 16) + 56 * v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v7;
    uint64_t result = re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 56 * v12 + 16), a2);
    uint64_t v16 = *a3;
    *(void *)(*(void *)(a1 + 16) + 56 * v12 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *a3;
    if (v16) {
      uint64_t result = (re::DynamicString *)(id)(v16 + 8);
    }
    *(_DWORD *)(*(void *)(a1 + 8) + 4 * vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    ++*(_DWORD *)(a1 + 28);
    ++*(_DWORD *)(a1 + 40);
    return result;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t result = (re::DynamicString *)re::DynamicString::operator==(v10 + 56 * v9 + 16, (uint64_t)a2);
    if (result) {
      return result;
    }
    uint64_t v9 = *(_DWORD *)(v10 + 56 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
}

uint64_t re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add(uint64_t a1, re::DynamicString *a2)
{
  unint64_t v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v13, (uint64_t)a2);
  unint64_t v5 = v4;
  unint64_t v6 = *(unsigned int *)(a1 + 24);
  if (!v6)
  {
    LODWORD(v7) = 0;
    goto LABEL_8;
  }
  unint64_t v7 = v4 % v6;
  uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % v6));
  if (v8 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, v7, v5, (int)a2, a2);
    ++*(_DWORD *)(a1 + 40);
    return *(void *)(a1 + 16) + 48 * v11 + 16;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v10 = v9 + 48 * v8 + 16;
    if (re::DynamicString::operator==(v10, (uint64_t)a2)) {
      return v10;
    }
    uint64_t v8 = *(_DWORD *)(v9 + 48 * v8 + 8) & 0x7FFFFFFF;
    if (v8 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
}

void re::HashTable<re::DynamicString,re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::remove(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v12, a2);
  if (*(void *)a1)
  {
    unint64_t v5 = v4 % *(unsigned int *)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(v6 + 4 * v5);
    if (v7 != 0x7FFFFFFF)
    {
      uint64_t v8 = *(void *)(a1 + 16);
      if (re::DynamicString::operator==(v8 + 56 * v7 + 16, a2))
      {
        *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v8 + 56 * v7 + 8) & 0x7FFFFFFF;
LABEL_8:
        re::HashTable<re::DynamicString,re::SharedPtr<re::internal::AssetEntry>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(*(void *)(a1 + 16) + 56 * v7);
        int v11 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)(*(void *)(a1 + 16) + 56 * v7 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 56 * v7 + 8) & 0x80000000 | *(_DWORD *)(a1 + 36);
        --*(_DWORD *)(a1 + 28);
        *(_DWORD *)(a1 + 36) = v7;
        *(_DWORD *)(a1 + 40) = v11 + 1;
      }
      else
      {
        while (1)
        {
          unsigned int v9 = v7;
          int v10 = *(_DWORD *)(v8 + 56 * v7 + 8);
          uint64_t v7 = v10 & 0x7FFFFFFF;
          if ((v10 & 0x7FFFFFFF) == 0x7FFFFFFF) {
            break;
          }
          if (re::DynamicString::operator==(v8 + 56 * v7 + 16, a2))
          {
            *(_DWORD *)(v8 + 56 * v9 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(v8 + 56 * v9 + 8) & 0x80000000 | *(_DWORD *)(v8 + 56 * v7 + 8) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
}

uint64_t re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  unint64_t v7 = *(unsigned int *)(a1 + 24);
  if (!v7)
  {
    LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % v7;
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v6 % v7));
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v12 = re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsCopy(a1, v8, v6, (uint64_t)a2, a2);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 16) + 24 * v12;
    return v11 + 16;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (*(void *)(v10 + 24 * v9 + 16) != v4)
  {
    LODWORD(v9) = *(_DWORD *)(v10 + 24 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v11 = v10 + 24 * v9;
  return v11 + 16;
}

re::DynamicString *re::DynamicArray<re::DynamicString>::add(_anonymous_namespace_ *this, re::DynamicString *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::DynamicString>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t result = re::DynamicString::DynamicString((re::DynamicString *)(*((void *)this + 4) + 32 * v4), a2);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

unsigned __int8 *re::Optional<re::DynamicString>::operator=(unsigned __int8 *a1, void *a2)
{
  int v3 = *a1;
  int v4 = *(unsigned __int8 *)a2;
  if (*a1) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (!v5)
  {
    unint64_t v6 = (re::DynamicString *)(a1 + 8);
    if (v3) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      re::DynamicString::deinit(v6);
      *a1 = 0;
    }
    else
    {
      if (v3) {
        BOOL v8 = 1;
      }
      else {
        BOOL v8 = v4 == 0;
      }
      if (v8)
      {
        re::DynamicString::operator=(v6, (re::DynamicString *)(a2 + 1));
      }
      else
      {
        *a1 = 1;
        *(_OWORD *)unint64_t v6 = 0u;
        *(_OWORD *)(a1 + 24) = 0u;
        *((void *)a1 + 4) = a2[4];
        uint64_t v9 = a2[2];
        *((void *)a1 + 1) = a2[1];
        a2[1] = 0;
        uint64_t v10 = a2[3];
        a2[4] = 0;
        uint64_t v12 = *((void *)a1 + 2);
        uint64_t v11 = *((void *)a1 + 3);
        *((void *)a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v9;
        *((void *)a1 + 3) = v10;
        a2[2] = v12;
        a2[3] = v11;
      }
    }
  }
  return a1;
}

re::DynamicString *re::DynamicArray<re::SceneCompatibilityVariant>::add(_anonymous_namespace_ *this, re::DynamicString *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::SceneCompatibilityVariant>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  BOOL v5 = (_DWORD *)(*((void *)this + 4) + 40 * v4);
  _DWORD *v5 = *(_DWORD *)a2;
  uint64_t result = re::DynamicString::DynamicString((re::DynamicString *)(v5 + 2), (re::DynamicString *)((char *)a2 + 8));
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

double re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 88;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 8);
  if (v1 < 0)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v1 & 0x7FFFFFFF;
    re::DynamicString::deinit((re::DynamicString *)(result + 16));
    return re::DynamicArray<re::DynamicString>::deinit(v2 + 48);
  }
  return result;
}

double re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      unint64_t v4 = 0;
      uint64_t v5 = 8;
      do
      {
        uint64_t v6 = a1[2];
        int v7 = *(_DWORD *)(v6 + v5);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v5) = v7 & 0x7FFFFFFF;
          re::DynamicString::deinit((re::DynamicString *)(v6 + v5 + 8));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        ++v4;
        v5 += 48;
      }
      while (v4 < v3);
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

re::AssetHandle *re::DynamicArray<re::AssetHandle>::clear(re::AssetHandle *result)
{
  int v1 = result;
  uint64_t v2 = *((void *)result + 2);
  *((void *)result + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  if (v2)
  {
    double result = (re::AssetHandle *)*((void *)result + 4);
    uint64_t v3 = 24 * v2;
    do
    {
      re::AssetHandle::~AssetHandle(result);
      double result = (re::AssetHandle *)(v4 + 24);
      v3 -= 24;
    }
    while (v3);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

double re::DynamicArray<re::SceneCompatibilityVariant>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::SceneCompatibilityVariant>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 40 * v4;
  *(_DWORD *)uint64_t v5 = *(_DWORD *)a2;
  double result = 0.0;
  *(_OWORD *)(v5 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(v5 + 24) = 0u;
  *(void *)(v5 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 16);
  *(void *)(v5 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  uint64_t v8 = *(void *)(a2 + 24);
  *(void *)(a2 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  uint64_t v10 = *(void *)(v5 + 16);
  uint64_t v9 = *(void *)(v5 + 24);
  *(void *)(v5 + 16) = v7;
  *(void *)(v5 + 24) = v8;
  *(void *)(a2 + 16) = v10;
  *(void *)(a2 + 24) = v9;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void *re::DynamicArray<re::SceneCompatibilityVariant>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::SceneCompatibilityVariant>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::SceneCompatibilityVariant>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::SceneCompatibilityVariant>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::SceneCompatibilityVariant>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          uint64_t v2 = 40 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = (void *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = &v8[5 * v9];
        uint64_t v11 = v7;
        do
        {
          *(_DWORD *)uint64_t v11 = *(_DWORD *)v8;
          *(_OWORD *)(v11 + 1) = 0u;
          *(_OWORD *)(v11 + 3) = 0u;
          uint64_t v13 = v8[1];
          uint64_t v12 = (re::DynamicString *)(v8 + 1);
          v11[1] = v13;
          *(void *)uint64_t v12 = 0;
          v11[4] = *((void *)v12 + 3);
          *((void *)v12 + 3) = 0;
          uint64_t v15 = v11[2];
          uint64_t v14 = v11[3];
          uint64_t v16 = *((void *)v12 + 2);
          unint64_t v11[2] = *((void *)v12 + 1);
          void v11[3] = v16;
          *((void *)v12 + 1) = v15;
          *((void *)v12 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v14;
          re::DynamicString::deinit(v12);
          uint64_t v8 = (void *)((char *)v12 + 32);
          v11 += 5;
        }
        while (v8 != v10);
        uint64_t v8 = (void *)v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, void *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

BOOL re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::containsKey(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1)
  {
    unint64_t v2 = *(void *)(a2 + 8);
    if (v2) {
      uint64_t v3 = *(void *)(v2 + 664);
    }
    else {
      uint64_t v3 = 0;
    }
    unint64_t v5 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) >> 27));
    uint64_t v6 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((v3 ^ (v5 >> 31) ^ v5) % *(unsigned int *)(a1 + 24)));
    uint64_t v4 = 0x7FFFFFFFLL;
    if (v6 != 0x7FFFFFFF)
    {
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v4 = 0x7FFFFFFFLL;
      while (*(void *)(v7 + 72 * v6 + 24) != v2)
      {
        uint64_t v6 = *(_DWORD *)(v7 + 72 * v6 + 8) & 0x7FFFFFFF;
        if (v6 == 0x7FFFFFFF) {
          return v4 != 0x7FFFFFFF;
        }
      }
      uint64_t v4 = v6;
    }
  }
  else
  {
    uint64_t v4 = 0x7FFFFFFFLL;
  }
  return v4 != 0x7FFFFFFF;
}

uint64_t re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::HashTable(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 36) = 0x7FFFFFFFLL;
  uint64_t v4 = *(void *)a2;
  if (v4)
  {
    if (*(_DWORD *)(a2 + 28) <= 3u) {
      signed int v5 = 3;
    }
    else {
      signed int v5 = *(_DWORD *)(a2 + 28);
    }
    re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::init(a1, v4, v5);
    re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::copy(a1, a2);
  }
  return a1;
}

void re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  signed int v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      signed int v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 72 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_91, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::addAsCopy(a1, *(void *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)v8, (re::AssetHandle *)(v8 + 16), (const re::DynamicString *)(v8 + 40));
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 72;
    }
  }
}

void re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_91, 4 * v2);
    }
    if (*(_DWORD *)(a1 + 32))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::EntryWithHash::free((_DWORD *)(*(void *)(a1 + 16) + v3));
        ++v4;
        v3 += 72;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    int v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

void re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), (re::AssetHandle *)(*(void *)&v13[16] + v10 + 16), (void *)(*(void *)&v13[16] + v10 + 40));
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 72;
        }
        while (v11 < v9);
      }
      re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, re::AssetHandle *a4, const re::DynamicString *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 72 * v10 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 72 * v10 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 72 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 72 * v10) = a3;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(*(void *)(a1 + 16) + 72 * v10 + 16), a4);
  re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 72 * v10 + 40), a5);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * are::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

double re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::EntryWithHash::free(_DWORD *a1)
{
  int v1 = a1[2];
  if (v1 < 0)
  {
    a1[2] = v1 & 0x7FFFFFFF;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 4));
    return re::DynamicString::deinit((re::DynamicString *)(a1 + 10));
  }
  return result;
}

uint64_t re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, re::AssetHandle *a4, void *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 72 * v10 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 72 * v10 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 72 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 72 * v10) = a3;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(*(void *)(a1 + 16) + 72 * v10 + 16), a4);
  uint64_t v14 = *(void *)(a1 + 16) + 72 * v10;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(void *)(v14 + 64) = a5[3];
  uint64_t v15 = a5[1];
  *(void *)(v14 + 40) = *a5;
  *a5 = 0;
  uint64_t v16 = a5[2];
  a5[3] = 0;
  uint64_t v18 = *(void *)(v14 + 48);
  uint64_t v17 = *(void *)(v14 + 56);
  *(void *)(v14 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v15;
  *(void *)(v14 + 56) = v16;
  a5[1] = v18;
  a5[2] = v17;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * are::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

double re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::AssetHandle,re::DynamicString,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::EntryWithHash::free((_DWORD *)(a1[2] + v3));
        ++v4;
        v3 += 72;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::FunctionBase<24ul,BOOL ()(re::AssetPathMapping &,re::AssetService *)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,BOOL ()(re::AssetPathMapping &,re::AssetService *)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,BOOL ()(re::AssetPathMapping &,re::AssetService *)>::destroyCallable(uint64_t a1))(void)
{
  double result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    double result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      double result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  }
  return result;
}

uint64_t re::FunctionBase<24ul,BOOL ()(re::AssetPathMapping &,re::AssetPath const&,re::AssetService *)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,BOOL ()(re::AssetPathMapping &,re::AssetPath const&,re::AssetService *)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,BOOL ()(re::AssetPathMapping &,re::AssetPath const&,re::AssetService *)>::destroyCallable(uint64_t a1))(void)
{
  double result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    double result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      double result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  }
  return result;
}

re::SceneDescriptor *re::SceneDescriptor::SceneDescriptor(re::SceneDescriptor *this)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)this = &unk_26E6CABF8;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v3 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)this + 3, 0);
  *(_OWORD *)((char *)this + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  uint64_t v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)this + 7, 0);
  *((unsigned char *)this + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  re::DynamicString::setCapacity((void *)this + 16, 0);
  *((void *)this + 24) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0;
  *((_DWORD *)this + 46) = 0;
  return this;
}

void re::DynamicArray<re::SceneCompatibilityVariant>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= *(void *)(a1 + 16))
  {
    re::DynamicArray<re::SceneCompatibilityVariant>::setCapacity((void *)a1, *(void *)(a2 + 16));
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SceneCompatibilityVariant *,re::SceneCompatibilityVariant *,re::SceneCompatibilityVariant *,0>(*(int **)(a2 + 32), (int *)(*(void *)(a2 + 32) + 40 * *(void *)(a1 + 16)), *(_DWORD **)(a1 + 32));
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v4)
    {
      uint64_t v9 = 40 * v4 - 40 * v8;
      uint64_t v10 = 40 * v8 + 8;
      int v11 = (const re::DynamicString *)(*(void *)(a2 + 32) + v10);
      uint64_t v12 = (re::DynamicString *)(*(void *)(a1 + 32) + v10);
      do
      {
        *((_DWORD *)v12 - re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *((_DWORD *)v11 - 2);
        int v13 = re::DynamicString::DynamicString(v12, v11);
        int v11 = (const re::DynamicString *)((char *)v11 + 40);
        uint64_t v12 = (re::DynamicString *)((char *)v13 + 40);
        v9 -= 40;
      }
      while (v9);
    }
  }
  else
  {
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SceneCompatibilityVariant *,re::SceneCompatibilityVariant *,re::SceneCompatibilityVariant *,0>(*(int **)(a2 + 32), (int *)(*(void *)(a2 + 32) + 40 * v4), *(_DWORD **)(a1 + 32));
    uint64_t v5 = *(void *)(a1 + 16);
    if (v4 != v5)
    {
      uint64_t v6 = 40 * v5 - 40 * v4;
      unint64_t v7 = (re::DynamicString *)(*(void *)(a1 + 32) + 40 * v4 + 8);
      do
      {
        re::DynamicString::deinit(v7);
        unint64_t v7 = (re::DynamicString *)((char *)v7 + 40);
        v6 -= 40;
      }
      while (v6);
    }
  }
  *(void *)(a1 + 16) = v4;
}

int *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SceneCompatibilityVariant *,re::SceneCompatibilityVariant *,re::SceneCompatibilityVariant *,0>(int *a1, int *a2, _DWORD *a3)
{
  unint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      uint64_t v6 = (re::DynamicString *)(v4 + 2);
      int v7 = *v4;
      v4 += 10;
      uint64_t v8 = (re::DynamicString *)(a3 + 2);
      *a3 = v7;
      a3 += 10;
      re::DynamicString::operator=(v8, v6);
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t re::DynamicArray<re::SceneCompatibilityVariant>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 40 * v4;
        uint64_t v6 = (re::DynamicString *)(v3 + 8);
        do
        {
          re::DynamicString::deinit(v6);
          uint64_t v6 = (re::DynamicString *)((char *)v6 + 40);
          v5 -= 40;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void *re::FixedArray<re::DynamicString>::deinit(void *result)
{
  if (*result)
  {
    int v1 = result;
    uint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      uint64_t v4 = (re::DynamicString *)result[2];
      uint64_t v5 = 32 * v2;
      do
      {
        double v6 = re::DynamicString::deinit(v4);
        uint64_t v4 = (re::DynamicString *)((char *)v4 + 32);
        v5 -= 32;
      }
      while (v5);
      uint64_t result = (void *)(*(uint64_t (**)(void, void, double))(*(void *)*v1 + 40))(*v1, v1[2], v6);
      void *v3 = 0;
      v3[1] = 0;
    }
    void *v1 = 0;
  }
  return result;
}

void *re::FixedArray<re::DynamicString>::init<>(void *result, uint64_t a2, unint64_t a3)
{
  re::DynamicString *result = a2;
  result[1] = a3;
  if (!a3) {
    return result;
  }
  if (a3 >> 59)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element std::string::size_type size = %zu, count = %zu", "!overflow", "init", 324, 32, a3);
    _os_crash();
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v4 = result;
  uint64_t v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 32 * a3, 8);
  v4[2] = v5;
  if (!v5)
  {
LABEL_11:
    re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    uint64_t result = (void *)_os_crash();
    __break(1u);
    return result;
  }
  int v7 = v5;
  for (unint64_t i = a3 - 1; i; --i)
  {
    *(_OWORD *)int v7 = 0u;
    *((_OWORD *)v7 + 1) = 0u;
    uint64_t v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v7, 0);
    int v7 = (_anonymous_namespace_ *)((char *)v7 + 32);
  }
  *(_OWORD *)int v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  return re::DynamicString::setCapacity(v7, 0);
}

re::DynamicString *re::FixedArray<re::DynamicString>::copy(re::DynamicString *result, uint64_t a2)
{
  uint64_t v2 = *((void *)result + 1);
  if (v2 == *(void *)(a2 + 8))
  {
    if (v2)
    {
      uint64_t v3 = *(re::DynamicString **)(a2 + 16);
      uint64_t result = (re::DynamicString *)*((void *)result + 2);
      uint64_t v4 = 32 * v2;
      do
      {
        uint64_t v5 = re::DynamicString::operator=(result, v3);
        uint64_t v3 = (re::DynamicString *)((char *)v3 + 32);
        uint64_t result = (re::DynamicString *)((char *)v5 + 32);
        v4 -= 32;
      }
      while (v4);
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
    uint64_t result = (re::DynamicString *)_os_crash();
    __break(1u);
  }
  return result;
}

void re::make::shared::object<re::RealityFileWriter::WritingParameters>(re *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = re::globalAllocators(a1);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 48, 8);
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v4, 0);
  *(void *)uint64_t v4 = &unk_26E6CA1A8;
  *(void *)(v4 + 24) = 2;
  *(unsigned char *)(v4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(_DWORD *)(v4 + 36) = 1;
  *(_WORD *)(v4 + 40) = 0;
  *a2 = v4;
}

void re::RealityFileWriter::WritingParameters::~WritingParameters(re::RealityFileWriter::WritingParameters *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void *re::DynamicArray<re::Function<BOOL ()(re::AssetPathMapping &,re::AssetPath const&,re::AssetService *)>>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::Function<BOOL ()(re::AssetPathMapping &,re::AssetPath const&,re::AssetService *)>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::Function<BOOL ()(re::AssetPathMapping &,re::AssetPath const&,re::AssetService *)>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::Function<BOOL ()(re::AssetPathMapping &,re::AssetPath const&,re::AssetService *)>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 == a2) {
    return result;
  }
  uint64_t v5 = result;
  if (result[2] > a2) {
    return result;
  }
  uint64_t result = (void *)*result;
  if (!*v5)
  {
    uint64_t result = (void *)re::DynamicArray<re::Function<BOOL ()(re::AssetPathMapping &,re::AssetPath const&,re::AssetService *)>>::setCapacity(v5, a2);
    ++*((_DWORD *)v5 + 6);
    return result;
  }
  if (a2)
  {
    if (is_mul_ok(a2, 0x28uLL))
    {
      uint64_t v2 = 40 * a2;
      uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
      if (result)
      {
        unint64_t v7 = result;
        if (!v5[1]) {
          goto LABEL_27;
        }
        goto LABEL_11;
      }
    }
    else
    {
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
      _os_crash();
      __break(1u);
    }
    re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
    uint64_t result = (void *)_os_crash();
    __break(1u);
    return result;
  }
  unint64_t v7 = 0;
  if (!v3) {
    goto LABEL_27;
  }
LABEL_11:
  uint64_t v8 = v5[4];
  uint64_t v9 = v5[2];
  if (!v9) {
    goto LABEL_26;
  }
  uint64_t v10 = 40 * v9;
  uint64_t v11 = (uint64_t)v7;
  do
  {
    *(void *)(v11 + 24) = *(void *)(v8 + 24);
    *(void *)(v11 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    if (v8 == v11) {
      goto LABEL_24;
    }
    re::FunctionBase<24ul,BOOL ()(re::AssetPathMapping &,re::AssetPath const&,re::AssetService *)>::destroyCallable(v11);
    uint64_t v12 = *(void *)(v8 + 32);
    if (*(void *)(v11 + 24) == *(void *)(v8 + 24))
    {
      uint64_t v13 = v8;
      if (v8 != v12)
      {
        *(void *)(v11 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v12;
        *(void *)(v8 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v13 = *(void *)(v8 + 32);
      if (!v12) {
        goto LABEL_24;
      }
    }
    unint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 40))(v13);
    uint64_t v15 = v11;
    if (v14 >= 0x19)
    {
      unint64_t v16 = v14;
      uint64_t v17 = *(void *)(v11 + 24);
      if (v17) {
        uint64_t v15 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v17 + 32))(v17, v16, 0);
      }
      else {
        uint64_t v15 = 0;
      }
    }
    *(void *)(v11 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v15;
    (*(void (**)(void))(**(void **)(v8 + 32) + 32))(*(void *)(v8 + 32));
    re::FunctionBase<24ul,BOOL ()(re::AssetPathMapping &,re::AssetPath const&,re::AssetService *)>::destroyCallable(v8);
LABEL_24:
    re::FunctionBase<24ul,BOOL ()(re::AssetPathMapping &,re::AssetPath const&,re::AssetService *)>::destroyCallable(v8);
    v8 += 40;
    v11 += 40;
    v10 -= 40;
  }
  while (v10);
  uint64_t v8 = v5[4];
LABEL_26:
  uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
LABEL_27:
  v5[4] = v7;
  v5[1] = a2;
  return result;
}

void *re::DynamicArray<re::Function<BOOL ()(re::AssetPathMapping &,re::AssetService *)>>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::Function<BOOL ()(re::AssetPathMapping &,re::AssetService *)>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::Function<BOOL ()(re::AssetPathMapping &,re::AssetService *)>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::Function<BOOL ()(re::AssetPathMapping &,re::AssetService *)>>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 == a2) {
    return result;
  }
  uint64_t v5 = result;
  if (result[2] > a2) {
    return result;
  }
  uint64_t result = (void *)*result;
  if (!*v5)
  {
    uint64_t result = (void *)re::DynamicArray<re::Function<BOOL ()(re::AssetPathMapping &,re::AssetService *)>>::setCapacity(v5, a2);
    ++*((_DWORD *)v5 + 6);
    return result;
  }
  if (a2)
  {
    if (is_mul_ok(a2, 0x28uLL))
    {
      uint64_t v2 = 40 * a2;
      uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
      if (result)
      {
        unint64_t v7 = result;
        if (!v5[1]) {
          goto LABEL_27;
        }
        goto LABEL_11;
      }
    }
    else
    {
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
      _os_crash();
      __break(1u);
    }
    re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
    uint64_t result = (void *)_os_crash();
    __break(1u);
    return result;
  }
  unint64_t v7 = 0;
  if (!v3) {
    goto LABEL_27;
  }
LABEL_11:
  uint64_t v8 = v5[4];
  uint64_t v9 = v5[2];
  if (!v9) {
    goto LABEL_26;
  }
  uint64_t v10 = 40 * v9;
  uint64_t v11 = (uint64_t)v7;
  do
  {
    *(void *)(v11 + 24) = *(void *)(v8 + 24);
    *(void *)(v11 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    if (v8 == v11) {
      goto LABEL_24;
    }
    re::FunctionBase<24ul,BOOL ()(re::AssetPathMapping &,re::AssetService *)>::destroyCallable(v11);
    uint64_t v12 = *(void *)(v8 + 32);
    if (*(void *)(v11 + 24) == *(void *)(v8 + 24))
    {
      uint64_t v13 = v8;
      if (v8 != v12)
      {
        *(void *)(v11 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v12;
        *(void *)(v8 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v13 = *(void *)(v8 + 32);
      if (!v12) {
        goto LABEL_24;
      }
    }
    unint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 40))(v13);
    uint64_t v15 = v11;
    if (v14 >= 0x19)
    {
      unint64_t v16 = v14;
      uint64_t v17 = *(void *)(v11 + 24);
      if (v17) {
        uint64_t v15 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v17 + 32))(v17, v16, 0);
      }
      else {
        uint64_t v15 = 0;
      }
    }
    *(void *)(v11 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v15;
    (*(void (**)(void))(**(void **)(v8 + 32) + 32))(*(void *)(v8 + 32));
    re::FunctionBase<24ul,BOOL ()(re::AssetPathMapping &,re::AssetService *)>::destroyCallable(v8);
LABEL_24:
    re::FunctionBase<24ul,BOOL ()(re::AssetPathMapping &,re::AssetService *)>::destroyCallable(v8);
    v8 += 40;
    v11 += 40;
    v10 -= 40;
  }
  while (v10);
  uint64_t v8 = v5[4];
LABEL_26:
  uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
LABEL_27:
  v5[4] = v7;
  v5[1] = a2;
  return result;
}

uint64_t re::Result<re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::WrappedError>::~Result(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(unsigned char *)a1)
  {
    if (v2)
    {

      *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    }
  }
  else
  {
  }
  return a1;
}

unsigned __int8 *re::Result<re::AssetHandle,re::WrappedError>::~Result(unsigned __int8 *a1)
{
  int v3 = *a1;
  uint64_t v2 = (re::AssetHandle *)(a1 + 8);
  if (v3) {
    re::AssetHandle::~AssetHandle(v2);
  }
  else {

  }
  return a1;
}

re::DynamicString *re::FixedArray<re::DynamicString>::FixedArray(re::DynamicString *a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  uint64_t v4 = *(void *)a2;
  if (v4)
  {
    re::FixedArray<re::DynamicString>::init<>(a1, v4, *(void *)(a2 + 8));
    re::FixedArray<re::DynamicString>::copy(a1, a2);
  }
  return a1;
}

double re::HashTable<re::AssetHandle,re::RealityFileWriter::AssetHandleWithMetadata,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7 & 0x7FFFFFFF;
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v6 + 16));
          re::FixedArray<re::DynamicString>::deinit((void *)(v6 + 136));
          re::DynamicString::deinit((re::DynamicString *)(v6 + 96));
          re::DynamicString::deinit((re::DynamicString *)(v6 + 64));
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v6 + 40));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 160;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<re::AssetHandle,re::RealityFileWriter::AssetHandleWithMetadata,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v34, 0, 36);
      *(void *)&v34[36] = 0x7FFFFFFFLL;
      re::HashTable<re::AssetHandle,re::RealityFileWriter::AssetHandleWithMetadata,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::init((uint64_t)v34, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v34;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v34[8];
      *(_OWORD *)unint64_t v34 = v5;
      *(void *)&v34[16] = v6;
      *(_OWORD *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7;
      long long v9 = *(_OWORD *)&v34[24];
      *(_OWORD *)&v34[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v34[32];
      *(_OWORD *)(a1 + 24) = v9;
      if (v8)
      {
        uint64_t v10 = 0;
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        uint64_t v13 = 160 * v8;
        do
        {
          unint64_t v14 = (unint64_t *)(v6 + v10);
          if ((*(_DWORD *)(v6 + v10 + 8) & 0x80000000) != 0)
          {
            unint64_t v15 = *v14;
            unint64_t v16 = *(unsigned int *)(a1 + 24);
            unint64_t v17 = *v14 % v16;
            uint64_t v18 = *(unsigned int *)(a1 + 36);
            if (v18 == 0x7FFFFFFF)
            {
              uint64_t v18 = *(unsigned int *)(a1 + 32);
              int v19 = v18;
              if (v18 == v16)
              {
                re::HashTable<re::AssetHandle,re::RealityFileWriter::AssetHandleWithMetadata,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v17 = v15 % *(unsigned int *)(a1 + 24);
                int v19 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v19 + 1;
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 160 * v18 + 8);
            }
            else
            {
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 160 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 160 * v18 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 160 * v18 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 160 * v18 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v17);
            *(void *)(*(void *)(a1 + 16) + 160 * v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v15;
            re::AssetHandle::AssetHandle((re::AssetHandle *)(*(void *)(a1 + 16) + 160 * v18 + 16), (const re::AssetHandle *)(v14 + 2));
            uint64_t v22 = *(void *)(a1 + 16);
            uint64_t v23 = v22 + 160 * v18;
            uint64_t v24 = v6 + v10;
            *(void *)(v23 + 40) = 0;
            *(void *)(v23 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
            *(void *)(v23 + 56) = 0;
            *(void *)(v23 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(void *)(v6 + v10 + 48);
            *(void *)(v24 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
            unint64_t v25 = *(void *)(v23 + 40);
            *(void *)(v23 + 40) = 0;
            *(void *)(v23 + 40) = v14[5];
            v14[5] = v25;
            uint64_t v26 = *(void *)(v23 + 56);
            *(void *)(v23 + 56) = *(void *)(v6 + v10 + 56);
            *(void *)(v24 + 56) = v26;
            *(_OWORD *)(v23 + 64) = 0u;
            *(_OWORD *)(v23 + 80) = 0u;
            *(void *)(v23 + 64) = *(void *)(v6 + v10 + 64);
            *(void *)(v24 + 64) = 0;
            uint64_t v27 = *(void *)(v23 + 80);
            *(void *)(v23 + 80) = *(void *)(v6 + v10 + 80);
            *(void *)(v24 + 80) = v27;
            *(void *)(v23 + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(void *)(v6 + v10 + 88);
            *(void *)(v24 + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
            uint64_t v28 = *(void *)(v23 + 72);
            *(void *)(v23 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *(void *)(v6 + v10 + 72);
            *(void *)(v24 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v28;
            *(_OWORD *)(v23 + 96) = 0u;
            *(_OWORD *)(v23 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
            *(void *)(v23 + 96) = *(void *)(v6 + v10 + 96);
            *(void *)(v24 + 96) = 0;
            uint64_t v29 = *(void *)(v23 + 112);
            *(void *)(v23 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *(void *)(v6 + v10 + 112);
            *(void *)(v24 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v29;
            *(void *)(v23 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = *(void *)(v6 + v10 + 120);
            *(void *)(v24 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0;
            uint64_t v30 = *(void *)(v23 + 104);
            *(void *)(v23 + 104) = *(void *)(v6 + v10 + 104);
            *(void *)(v24 + 104) = v30;
            *(_WORD *)(v23 + 12re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_WORD *)(v6 + v10 + 128);
            LODWORD(v30) = *(unsigned __int8 *)(v6 + v10 + 130);
            *(unsigned char *)(v23 + 130) = v30;
            if (v30) {
              *(unsigned char *)(v22 + 160 * v18 + 131) = *(unsigned char *)(v24 + 131);
            }
            uint64_t v31 = (void *)(v22 + 160 * v18);
            v31[17] = 0;
            v31[18] = 0;
            v31[19] = 0;
            v31[17] = *(void *)(v24 + 136);
            *(void *)(v24 + 136) = 0;
            v31[18] = *(void *)(v24 + 144);
            *(void *)(v24 + 144) = 0;
            uint64_t v32 = v31[19];
            v31[19] = *(void *)(v24 + 152);
            *(void *)(v24 + 15re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v32;
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v17) = v18;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v11;
          }
          v10 += 160;
        }
        while (v13 != v10);
      }
      re::HashTable<re::AssetHandle,re::RealityFileWriter::AssetHandleWithMetadata,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit((uint64_t *)v34);
    }
  }
  else
  {
    if (a2) {
      signed int v33 = a2;
    }
    else {
      signed int v33 = 3;
    }
  }
}

void re::HashTable<re::AssetHandle,re::RealityFileWriter::AssetHandleWithMetadata,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 160 * v10, 16);
  if (v12)
  {
    unint64_t v14 = v12;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_91, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

double re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::EntryWithHash::free((_DWORD *)(a1[2] + v3));
        ++v4;
        v3 += 64;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::EntryWithHash::free(_DWORD *a1)
{
  int v1 = a1[2];
  if (v1 < 0)
  {
    a1[2] = v1 & 0x7FFFFFFF;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 4));
    re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 10));
  }
}

void re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_91, 4 * v2);
    }
    if (*(_DWORD *)(a1 + 32))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::EntryWithHash::free((_DWORD *)(*(void *)(a1 + 16) + v3));
        ++v4;
        v3 += 64;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    int v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

void re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::addAsCopy(a1, *(void *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)v8, (re::AssetHandle *)(v8 + 16), (const re::AssetHandle *)(v8 + 40));
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 64;
    }
  }
}

void re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), (re::AssetHandle *)(*(void *)&v13[16] + v10 + 16), (void *)(*(void *)&v13[16] + v10 + 40));
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 64;
        }
        while (v11 < v9);
      }
      re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, re::AssetHandle *a4, const re::AssetHandle *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + (v10 << 6) + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + (v10 << 6) + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + (v10 << 6) + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + (v10 << 6) + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + (v10 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + (v10 << 6)) = a3;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(*(void *)(a1 + 16) + (v10 << 6) + 16), a4);
  re::AssetHandle::AssetHandle((re::AssetHandle *)(*(void *)(a1 + 16) + (v10 << 6) + 40), a5);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * are::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

uint64_t re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, re::AssetHandle *a4, void *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + (v10 << 6) + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + (v10 << 6) + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + (v10 << 6) + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + (v10 << 6) + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + (v10 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + (v10 << 6)) = a3;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(*(void *)(a1 + 16) + (v10 << 6) + 16), a4);
  unint64_t v14 = (void *)(*(void *)(a1 + 16) + (v10 << 6));
  v14[5] = 0;
  v14[6] = 0;
  v14[7] = 0;
  v14[6] = a5[1];
  a5[1] = 0;
  uint64_t v15 = v14[5];
  v14[5] = 0;
  v14[5] = *a5;
  *a5 = v15;
  uint64_t v16 = v14[7];
  v14[7] = a5[2];
  a5[2] = v16;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * are::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::AssetHandle,re::AssetHandle,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unsigned int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    long long v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + (v10 << 6), 16);
  if (v12)
  {
    unint64_t v14 = v12;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_91, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, uint64_t a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 88 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 88 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 88 * v10 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v13 | 0x80000000;
  uint64_t v14 = 88 * v10;
  *(_DWORD *)(*(void *)(a1 + 16) + v14 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + v14 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + v14 + 16), a4);
  uint64_t v15 = *(void *)(a1 + 16) + 88 * v10;
  *(void *)(v15 + 80) = 0;
  *(_DWORD *)(v15 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(v15 + 56) = 0;
  *(void *)(v15 + 64) = 0;
  *(void *)(v15 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  uint64_t v16 = *(void *)(a5 + 8);
  *(void *)(v15 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(void *)a5;
  *(void *)(v15 + 56) = v16;
  *(void *)a5 = 0;
  *(void *)(a5 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  uint64_t v17 = *(void *)(v15 + 64);
  *(void *)(v15 + 64) = *(void *)(a5 + 16);
  *(void *)(a5 + 16) = v17;
  uint64_t v18 = *(void *)(v15 + 80);
  *(void *)(v15 + 80) = *(void *)(a5 + 32);
  *(void *)(a5 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v18;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v15 + 72);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * are::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)int v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), (re::DynamicString *)(*(void *)&v13[16] + v10 + 16), *(void *)&v13[16] + v10 + 48);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 88;
        }
        while (v11 < v9);
      }
      re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

void re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unsigned int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    long long v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  signed int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 88 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_91, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void *re::DynamicArray<re::DynamicString>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::DynamicString>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::DynamicString>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::DynamicString>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::DynamicString>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 59)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 32, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 32 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      long long v8 = (re::DynamicString *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = (re::DynamicString *)((char *)v8 + 32 * v9);
        uint64_t v11 = v7;
        do
        {
          *(_OWORD *)uint64_t v11 = 0u;
          *((_OWORD *)v11 + 1) = 0u;
          void v11[3] = *((void *)v8 + 3);
          uint64_t v12 = *((void *)v8 + 1);
          *uint64_t v11 = *(void *)v8;
          *(void *)long long v8 = 0;
          uint64_t v13 = *((void *)v8 + 2);
          *((void *)v8 + 3) = 0;
          uint64_t v15 = v11[1];
          uint64_t v14 = v11[2];
          v11[1] = v12;
          unint64_t v11[2] = v13;
          *((void *)v8 + 1) = v15;
          *((void *)v8 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v14;
          re::DynamicString::deinit(v8);
          long long v8 = (re::DynamicString *)((char *)v8 + 32);
          v11 += 4;
        }
        while (v8 != v10);
        long long v8 = (re::DynamicString *)v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, re::DynamicString *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

double re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free((_DWORD *)(a1[2] + v3));
        ++v4;
        v3 += 88;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(_DWORD *a1)
{
  int v1 = a1[2];
  if (v1 < 0)
  {
    a1[2] = v1 & 0x7FFFFFFF;
    double v3 = re::DynamicString::deinit((re::DynamicString *)(a1 + 4));
    uint64_t v4 = a1[20];
    if (v4 != -1) {
      ((void (*)(char *, _DWORD *, double))*(&off_26E6CA1E0 + v4))(&v5, a1 + 12, v3);
    }
    a1[20] = -1;
  }
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2re13DynamicStringENS8_4DataEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, re::DynamicString *this)
{
  return re::DynamicString::deinit(this);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2re13DynamicStringENS8_4DataEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, id *a2)
{
}

uint64_t re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<re::DynamicString>(uint64_t a1, re::DynamicString *a2, int a3, void *a4)
{
  unint64_t v8 = re::Hash<re::DynamicString>::operator()((uint64_t)&v26, (uint64_t)a2);
  unint64_t v9 = v8;
  if (!*(void *)a1)
  {
    LODWORD(v10) = 0;
    goto LABEL_8;
  }
  unint64_t v10 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v11 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v10);
  if (v11 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<re::DynamicString>(a1, v10, v9, a2, a4);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v14 = *(void *)(a1 + 16) + 88 * v13;
    return v14 + 48;
  }
  uint64_t v12 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v12 + 88 * v11 + 16, (uint64_t)a2))
  {
    uint64_t v11 = *(_DWORD *)(v12 + 88 * v11 + 8) & 0x7FFFFFFF;
    if (v11 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  switch(a3)
  {
    case 0:
    case 1:
      uint64_t v14 = v12 + 88 * v11;
      return v14 + 48;
    case 2:
      uint64_t v16 = v12 + 88 * v11;
      uint64_t v17 = (re::DynamicString *)(v16 + 48);
      uint64_t v18 = *(unsigned int *)(v16 + 80);
      if (v18 != -1) {
        (*(&off_26E6CA1E0 + v18))((int)&v27, v17);
      }
      goto LABEL_16;
    case 3:
      uint64_t v19 = v12 + 88 * v11;
      uint64_t v17 = (re::DynamicString *)(v19 + 48);
      uint64_t v20 = *(unsigned int *)(v19 + 80);
      if (v20 != -1) {
        (*(&off_26E6CA1E0 + v20))((int)&v28, v17);
      }
LABEL_16:
      *((_DWORD *)v17 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = -1;
      uint64_t v21 = *(void *)(a1 + 16) + 88 * v11;
      *(_OWORD *)(v21 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
      *(_OWORD *)(v21 + 64) = 0u;
      *(void *)(v21 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = a4[3];
      uint64_t v22 = a4[1];
      *(void *)(v21 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *a4;
      *a4 = 0;
      uint64_t v23 = a4[2];
      a4[3] = 0;
      uint64_t v25 = *(void *)(v21 + 56);
      uint64_t v24 = *(void *)(v21 + 64);
      *(void *)(v21 + 56) = v22;
      *(void *)(v21 + 64) = v23;
      a4[1] = v25;
      a4[2] = v24;
      *(_DWORD *)(v21 + 80) = 0;
      ++*(_DWORD *)(a1 + 40);
      uint64_t v14 = *(void *)(a1 + 16) + 88 * v11;
      break;
    default:
      goto LABEL_8;
  }
  return v14 + 48;
}

uint64_t re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<re::DynamicString>(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, void *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 88 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 88 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 88 * v10 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v13 | 0x80000000;
  uint64_t v14 = 88 * v10;
  *(_DWORD *)(*(void *)(a1 + 16) + v14 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + v14 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + v14 + 16), a4);
  uint64_t v15 = *(void *)(a1 + 16) + 88 * v10;
  *(_OWORD *)(v15 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(v15 + 64) = 0u;
  *(void *)(v15 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = a5[3];
  uint64_t v16 = a5[1];
  *(void *)(v15 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *a5;
  *a5 = 0;
  uint64_t v17 = a5[2];
  a5[3] = 0;
  uint64_t v19 = *(void *)(v15 + 56);
  uint64_t v18 = *(void *)(v15 + 64);
  *(void *)(v15 + 56) = v16;
  *(void *)(v15 + 64) = v17;
  a5[1] = v19;
  a5[2] = v18;
  *(_DWORD *)(v15 + 80) = 0;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * are::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)int v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), (re::DynamicString *)(*(void *)&v13[16] + v10 + 16), *(void *)&v13[16] + v10 + 48);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 88;
        }
        while (v11 < v9);
      }
      re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, uint64_t a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 88 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 88 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 88 * v10 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v13 | 0x80000000;
  uint64_t v14 = 88 * v10;
  *(_DWORD *)(*(void *)(a1 + 16) + v14 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + v14 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + v14 + 16), a4);
  uint64_t v15 = *(void *)(a1 + 16) + 88 * v10;
  *(unsigned char *)(v15 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  v15 += 48;
  *(_DWORD *)(v15 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<re::DynamicString,re::Data>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<re::DynamicString,re::Data>,(std::__variant_detail::_Trait)1>>((unsigned int *)v15, a5);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * are::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

unsigned int *std::__variant_detail::__ctor<std::__variant_detail::__traits<re::DynamicString,re::Data>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<re::DynamicString,re::Data>,(std::__variant_detail::_Trait)1>>(unsigned int *result, uint64_t a2)
{
  double v3 = result;
  uint64_t v4 = result[8];
  if (v4 != -1) {
    double result = (unsigned int *)(*(&off_26E6CA1E0 + v4))((int)&v7, (re::DynamicString *)result);
  }
  v3[8] = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5 != -1)
  {
    double result = (unsigned int *)((uint64_t (*)(char *, unsigned int *, uint64_t))off_26E6CA1F0[v5])(&v6, v3, a2);
    v3[8] = v5;
  }
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2re13DynamicStringENS8_4DataEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, void *a3)
{
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(void *)(a2 + 24) = a3[3];
  uint64_t v4 = a3[1];
  *(void *)a2 = *a3;
  *a3 = 0;
  uint64_t v5 = a3[2];
  a3[3] = 0;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v4;
  *(void *)(a2 + 16) = v5;
  a3[1] = v7;
  a3[2] = v6;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2re13DynamicStringENS8_4DataEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void re::RealityFileWriter::AssetInfo::~AssetInfo(re::RealityFileWriter::AssetInfo *this)
{
  *(void *)this = &unk_26E6CA210;
  uint64_t v2 = (re::RealityFileWriter::AssetInfo *)((char *)this + 32);
  re::FixedArray<re::DynamicString>::deinit((void *)this + 33);
  re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 26);
  re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 168);
  re::DynamicString::deinit((re::RealityFileWriter::AssetInfo *)((char *)this + 136));
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)this + 96);
  re::DynamicString::deinit((re::RealityFileWriter::AssetInfo *)((char *)this + 64));
  re::DynamicString::deinit(v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6CA210;
  uint64_t v2 = (re::RealityFileWriter::AssetInfo *)((char *)this + 32);
  re::FixedArray<re::DynamicString>::deinit((void *)this + 33);
  re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 26);
  re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 168);
  re::DynamicString::deinit((re::RealityFileWriter::AssetInfo *)((char *)this + 136));
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)this + 96);
  re::DynamicString::deinit((re::RealityFileWriter::AssetInfo *)((char *)this + 64));
  re::DynamicString::deinit(v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void re::HashTable<re::DynamicString,re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(void *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v22, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v22;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)uint64_t v22 = v5;
      *(void *)&v22[16] = v6;
      *(_OWORD *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7;
      long long v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        int v13 = (void *)(v6 + 48);
        do
        {
          if ((*(_DWORD *)(v13 - 5) & 0x80000000) != 0)
          {
            unint64_t v14 = *(v13 - 6);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<re::DynamicString,re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 56 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 56 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 56 * v17 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 56 * v17 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 56 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 56 * v17) = v14;
            re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 56 * v17 + 16), (const re::DynamicString *)(v13 - 4));
            *(void *)(*(void *)(a1 + 16) + 56 * v17 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *v13;
            *int v13 = 0;
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v11;
          }
          v13 += 7;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::DynamicString,re::SharedPtr<re::internal::AssetEntry>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2) {
      signed int v21 = a2;
    }
    else {
      signed int v21 = 3;
    }
  }
}

void re::HashTable<re::DynamicString,re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 56 * v10, 16);
  if (v12)
  {
    unint64_t v14 = v12;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_91, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, int a4, re::DynamicString *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 48 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 48 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 48 * v9 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 48 * v9 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 48 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 48 * v9) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 48 * v9 + 16), a5);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * are::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), *(void *)&v13[16] + v10 + 16, (void *)(*(void *)&v13[16] + v10 + 16));
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 48;
        }
        while (v11 < v9);
      }
      re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

void re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unsigned int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    long long v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  signed int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 48 * v10, 16);
  if (v12)
  {
    unint64_t v14 = v12;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_91, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 601);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v9 + 1;
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(v10 + 48 * v8 + 8);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(v10 + 48 * v8 + 8);
    *(_DWORD *)(a1 + 36) = v11 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v10 + 48 * v8 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v11 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 48 * v8 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 48 * v8 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 48 * vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = a3;
  uint64_t v12 = *(void *)(a1 + 16) + 48 * v8;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_OWORD *)(v12 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(void *)(v12 + 40) = a5[3];
  uint64_t v13 = a5[1];
  *(void *)(v12 + 16) = *a5;
  *a5 = 0;
  uint64_t v14 = a5[2];
  a5[3] = 0;
  uint64_t v16 = *(void *)(v12 + 24);
  uint64_t v15 = *(void *)(v12 + 32);
  *(void *)(v12 + 24) = v13;
  *(void *)(v12 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v14;
  a5[1] = v16;
  a5[2] = v15;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * are::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashTable<char const*,int,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(void *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<char const*,int,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v22, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v22;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)uint64_t v22 = v5;
      *(void *)&v22[16] = v6;
      *(_OWORD *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7;
      long long v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        uint64_t v13 = v6 + 16;
        do
        {
          if ((*(_DWORD *)(v13 - 8) & 0x80000000) != 0)
          {
            unint64_t v14 = *(void *)(v13 - 16);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<char const*,int,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 32 * v17 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 32 * v17 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 32 * v17) = v14;
            *(void *)(*(void *)(a1 + 16) + 32 * v17 + 16) = *(void *)v13;
            *(_DWORD *)(*(void *)(a1 + 16) + 32 * v17 + 24) = *(_DWORD *)(v13 + 8);
            uint64_t v12 = *(void *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v11;
          }
          v13 += 32;
          --v10;
        }
        while (v10);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2) {
      signed int v21 = a2;
    }
    else {
      signed int v21 = 3;
    }
  }
}

void re::HashTable<char const*,int,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    unint64_t v14 = v12;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_91, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v9 + 1;
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(v10 + 24 * v8 + 8);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(v10 + 24 * v8 + 8);
    *(_DWORD *)(a1 + 36) = v11 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v10 + 24 * v8 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v11 | 0x80000000;
  uint64_t v12 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + 24 * v8 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v8 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 24 * vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = a3;
  *(void *)(*(void *)(a1 + 16) + 24 * v8 + 16) = *a5;
  *(_DWORD *)(v12 + 4 * are::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsCopy(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), *(void *)&v13[16] + v10 + 16, *(void *)&v13[16] + v10 + 16);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 24;
        }
        while (v11 < v9);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

void re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unsigned int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    long long v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  signed int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 24 * v10, 16);
  if (v12)
  {
    unint64_t v14 = v12;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_91, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 601);
    _os_crash();
    __break(1u);
  }
}

double re::HashTable<re::SharedPtr<re::RealityFileWriter::AssetInfo>,unsigned long,re::Hash<re::SharedPtr<re::RealityFileWriter::AssetInfo>>,re::EqualTo<re::SharedPtr<re::RealityFileWriter::AssetInfo>>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7 & 0x7FFFFFFF;
          uint64_t v8 = *(void *)(v6 + 16);
          if (v8)
          {

            *(void *)(v6 + 16) = 0;
            unint64_t v3 = *((unsigned int *)a1 + 8);
          }
        }
        v4 += 32;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void *re::DynamicArray<re::AssetMapAssetDescriptor>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::AssetMapAssetDescriptor>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::AssetMapAssetDescriptor>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::AssetMapAssetDescriptor>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::AssetMapAssetDescriptor>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xA8uLL))
        {
          uint64_t v2 = 168 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 168 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 168, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 168 * v9;
        uint64_t v11 = (uint64_t)v7;
        do
        {
          re::ObjectHelper::move<re::AssetMapAssetDescriptor>(v8, v11);
          v8 += 168;
          v11 += 168;
          v10 -= 168;
        }
        while (v10);
        uint64_t v8 = v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::ObjectHelper::move<re::AssetMapAssetDescriptor>(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v3;
  *(void *)a1 = 0;
  *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *(void *)(a1 + 32);
  *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v5;
  ++*(_DWORD *)(a1 + 24);
  ++*(_DWORD *)(a2 + 24);
  *(void *)(a2 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(a2 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  *(_DWORD *)(a2 + 64) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = a1 + 40;
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(void *)(a2 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v6;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v8;
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a2 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *(void *)(a1 + 72);
  *(void *)(a1 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v9;
  ++*(_DWORD *)(a1 + 64);
  ++*(_DWORD *)(a2 + 64);
  LODWORD(v9) = *(unsigned __int8 *)(a1 + 80);
  *(unsigned char *)(a2 + 80) = v9;
  if (v9)
  {
    *(_OWORD *)(a2 + 104) = 0u;
    *(_OWORD *)(a2 + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
    *(void *)(a2 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *(void *)(a1 + 112);
    uint64_t v10 = *(void *)(a1 + 96);
    *(void *)(a2 + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(void *)(a1 + 88);
    *(void *)(a1 + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    uint64_t v11 = *(void *)(a1 + 104);
    *(void *)(a1 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    uint64_t v13 = *(void *)(a2 + 96);
    uint64_t v12 = *(void *)(a2 + 104);
    *(void *)(a2 + 96) = v10;
    *(void *)(a2 + 104) = v11;
    *(void *)(a1 + 96) = v13;
    *(void *)(a1 + 104) = v12;
  }
  *(_OWORD *)(a2 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  uint64_t v14 = a2 + 120;
  *(_DWORD *)(v14 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(_OWORD *)(v14 + 16) = 0u;
  *(void *)(v14 + 36) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v14, (uint64_t *)(a1 + 120));
  re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(a1 + 120));
  if (*(unsigned char *)(a1 + 80)) {
    re::DynamicString::deinit((re::DynamicString *)(a1 + 88));
  }
  re::DynamicArray<unsigned long>::deinit(v7);
  return re::DynamicArray<re::DynamicString>::deinit(a1);
}

uint64_t re::DynamicArray<re::DynamicString>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::DynamicString>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::DynamicString>::copy((void *)a1, (uint64_t)a2);
  }
  return a1;
}

void re::DynamicArray<re::DynamicString>::copy(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  unint64_t v5 = a1[2];
  if (v4 >= v5)
  {
    re::DynamicArray<re::DynamicString>::setCapacity(a1, *(void *)(a2 + 16));
    uint64_t v12 = *(re::DynamicString **)(a2 + 32);
    uint64_t v13 = a1[2];
    uint64_t v14 = (re::DynamicString *)a1[4];
    if (v13)
    {
      uint64_t v15 = 32 * v13;
      do
      {
        unint64_t v16 = re::DynamicString::operator=(v14, v12);
        uint64_t v12 = (re::DynamicString *)((char *)v12 + 32);
        uint64_t v14 = (re::DynamicString *)((char *)v16 + 32);
        v15 -= 32;
      }
      while (v15);
      uint64_t v14 = (re::DynamicString *)a1[4];
      uint64_t v13 = a1[2];
      uint64_t v12 = *(re::DynamicString **)(a2 + 32);
    }
    if (v13 != v4)
    {
      uint64_t v17 = (re::DynamicString *)((char *)v12 + 32 * v13);
      int v18 = (re::DynamicString *)((char *)v14 + 32 * v13);
      uint64_t v19 = 32 * v4 - 32 * v13;
      do
      {
        int v20 = re::DynamicString::DynamicString(v18, v17);
        uint64_t v17 = (const re::DynamicString *)((char *)v17 + 32);
        int v18 = (re::DynamicString *)((char *)v20 + 32);
        v19 -= 32;
      }
      while (v19);
    }
  }
  else
  {
    uint64_t v6 = (re::DynamicString *)a1[4];
    if (v4)
    {
      uint64_t v7 = *(re::DynamicString **)(a2 + 32);
      uint64_t v8 = 32 * v4;
      do
      {
        uint64_t v9 = re::DynamicString::operator=(v6, v7);
        uint64_t v7 = (re::DynamicString *)((char *)v7 + 32);
        uint64_t v6 = (re::DynamicString *)((char *)v9 + 32);
        v8 -= 32;
      }
      while (v8);
      uint64_t v6 = (re::DynamicString *)a1[4];
      unint64_t v5 = a1[2];
    }
    if (v4 != v5)
    {
      uint64_t v10 = (re::DynamicString *)((char *)v6 + 32 * v4);
      uint64_t v11 = 32 * v5 - 32 * v4;
      do
      {
        re::DynamicString::deinit(v10);
        uint64_t v10 = (re::DynamicString *)((char *)v10 + 32);
        v11 -= 32;
      }
      while (v11);
    }
  }
  a1[2] = v4;
}

void *re::DynamicArray<re::SceneDescriptor>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::SceneDescriptor>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::SceneDescriptor>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::SceneDescriptor>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::SceneDescriptor>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xC8uLL))
        {
          uint64_t v2 = 200 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 200 * a2, 8);
          if (result)
          {
            unint64_t v7 = (re::SceneDescriptor *)result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 200, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = (const re::SceneDescriptor *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 200 * v9;
        uint64_t v11 = (const re::SceneDescriptor *)v5[4];
        uint64_t v12 = v7;
        uint64_t v13 = v11;
        do
        {
          re::SceneDescriptor::SceneDescriptor(v12, v8);
          uint64_t v14 = *(void (***)(const re::SceneDescriptor *))v13;
          uint64_t v13 = (const re::SceneDescriptor *)((char *)v13 + 200);
          (*v14)(v8);
          uint64_t v12 = (re::SceneDescriptor *)((char *)v12 + 200);
          uint64_t v11 = (const re::SceneDescriptor *)((char *)v11 + 200);
          uint64_t v8 = v13;
          v10 -= 200;
        }
        while (v10);
        uint64_t v8 = (const re::SceneDescriptor *)v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, const re::SceneDescriptor *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::HashTable<re::SharedPtr<re::RealityFileWriter::AssetInfo>,unsigned long,re::Hash<re::SharedPtr<re::RealityFileWriter::AssetInfo>>,re::EqualTo<re::SharedPtr<re::RealityFileWriter::AssetInfo>>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(void *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<char const*,int,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v24, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v24;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)uint64_t v24 = v5;
      *(void *)&v24[16] = v6;
      *(_OWORD *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7;
      long long v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&unsigned char v24[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        uint64_t v13 = (uint64_t *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v13 - 1) & 0x80000000) != 0)
          {
            unint64_t v14 = *(v13 - 2);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<re::SharedPtr<re::RealityFileWriter::AssetInfo>,unsigned long,re::Hash<re::SharedPtr<re::RealityFileWriter::AssetInfo>>,re::EqualTo<re::SharedPtr<re::RealityFileWriter::AssetInfo>>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 32 * v17 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 32 * v17 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 32 * v17) = v14;
            uint64_t v21 = *v13;
            *(void *)(*(void *)(a1 + 16) + 32 * v17 + 16) = *v13;
            if (v21)
            {
              id v22 = (id)(v21 + 8);
              uint64_t v12 = *(void *)(a1 + 8);
            }
            *(void *)(*(void *)(a1 + 16) + 32 * v17 + 24) = v13[1];
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v11;
          }
          v13 += 4;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::SharedPtr<re::RealityFileWriter::AssetInfo>,unsigned long,re::Hash<re::SharedPtr<re::RealityFileWriter::AssetInfo>>,re::EqualTo<re::SharedPtr<re::RealityFileWriter::AssetInfo>>,true,false>::deinit((uint64_t *)v24);
    }
  }
  else
  {
    if (a2) {
      signed int v23 = a2;
    }
    else {
      signed int v23 = 3;
    }
  }
}

void *re::DynamicArray<re::RealityFileConfigurationEntryDescriptor>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    long long v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::RealityFileConfigurationEntryDescriptor>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 59)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 32, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 32 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 8);
          if (result)
          {
            long long v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      long long v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      unsigned int v8 = (void *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = &v8[4 * v9];
        int v11 = v7;
        do
        {
          *int v11 = *v8;
          v11[1] = 0;
          unint64_t v11[2] = 0;
          void v11[3] = 0;
          uint64_t v13 = v8[1];
          uint64_t v12 = v8 + 1;
          v11[1] = v13;
          *uint64_t v12 = 0;
          uint64_t v14 = v11[3];
          uint64_t v15 = v12[2];
          unint64_t v11[2] = v12[1];
          void v11[3] = v15;
          v12[1] = 0;
          v12[2] = v14;
          re::FixedArray<re::DynamicString>::deinit(v12);
          unsigned int v8 = v12 + 3;
          v11 += 4;
        }
        while (v8 != v10);
        unsigned int v8 = (void *)v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, void *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::FixedArray<re::RealityFileConfigurationEntryDescriptor>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  if (!a3) {
    return;
  }
  if (a3 >> 59)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element std::string::size_type size = %zu, count = %zu", "!overflow", "init", 324, 32, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v5 = 32 * a3;
  uint64_t v6 = (_OWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 32 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  unsigned int v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 32);
    unsigned int v8 = (_OWORD *)((char *)v8 + v5 - 32);
  }
  *unsigned int v8 = 0u;
  v8[1] = 0u;
}

uint64_t zip_save_manifest(uint64_t a1, const char *a2, void **a3, unint64_t a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  bzero(__src, 0x800uLL);
  if (a4 > 0x40) {
    return 0;
  }
  if (a4)
  {
    uint64_t v9 = __src;
    unint64_t v10 = a4;
    do
    {
      zip_calculate_signature(*a3, (uint64_t)v16);
      long long v11 = v16[1];
      *(_OWORD *)uint64_t v9 = v16[0];
      *((_OWORD *)v9 + 1) = v11;
      if (!(*(void *)v9 | *((void *)v9 + 1) | *((void *)v9 + 2) | *((void *)v9 + 3))) {
        return 0;
      }
      v9 += 32;
      ++a3;
    }
    while (--v10);
  }
  if (a2) {
    size_t v12 = strlen(a2) + 1;
  }
  else {
    size_t v12 = 0;
  }
  uint64_t v13 = (char *)malloc_type_malloc(v12 + 32 * a4 + 10, 0xC2A086EBuLL);
  uint64_t v14 = v13;
  *(_DWORD *)uint64_t v13 = 21250386;
  *((_WORD *)v13 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 2;
  *((_WORD *)v13 + 3) = v12;
  *((_WORD *)v13 + 4) = a4;
  uint64_t v15 = v13 + 10;
  if (v12)
  {
    memcpy(v13 + 10, a2, v12);
    v15 += v12;
  }
  if (a4) {
    memcpy(v15, __src, 32 * a4);
  }
  zip_set_comment(a1, v14, v12 + 32 * a4 + 10);
  free(v14);
  return 1;
}

re::internal::AssetLoadItem *re::internal::AssetLoadItem::AssetLoadItem(re::internal::AssetLoadItem *this)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)this = &unk_26E6CA2A0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  re::DynamicString::setCapacity((void *)this + 4, 0);
  *(_OWORD *)((char *)this + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *((unsigned char *)this + 104) = 1;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((unsigned char *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0;
  *((unsigned char *)this + 12re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *((unsigned char *)this + 144) = 0;
  *((unsigned char *)this + 184) = 0;
  *((unsigned char *)this + 24re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *((unsigned char *)this + 344) = 0;
  *((_DWORD *)this + 94) = 0;
  *((void *)this + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = this;
  uint64_t v3 = (char *)this + 8;
  *((void *)this + 49) = 0;
  *((_DWORD *)this + 100) = 0;
  *((void *)this + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)this + 53) = 0;
  *((void *)this + 51) = 0;
  *((unsigned char *)this + 43re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  return this;
}

void re::internal::AssetLoadItem::~AssetLoadItem(id *this)
{
  *this = &unk_26E6CA2A0;

  uint64_t v2 = (char *)this[48];
  if (v2)
  {

    this[48] = 0;
  }
  re::Optional<re::internal::AssetLoadItem::PayloadSource>::~Optional((uint64_t)(this + 43));
  re::Optional<re::AssetPath>::~Optional((unsigned char *)this + 248);
  re::Optional<re::internal::AssetLoadItem::DescriptorSource>::~Optional((uint64_t)(this + 23));
  if (*((unsigned char *)this + 144)) {
    re::DynamicString::deinit((re::DynamicString *)(this + 19));
  }
  re::DynamicString::deinit((re::DynamicString *)(this + 4));
  *this = &unk_26E6DECE0;
  objc_destructInstance(this + 1);
}

{
  uint64_t vars8;

  re::internal::AssetLoadItem::~AssetLoadItem(this);
  JUMPOUT(0x237DBCBD0);
}

re::internal::AssetBackgroundLoader *re::internal::AssetBackgroundLoader::AssetBackgroundLoader(re::internal::AssetBackgroundLoader *this, const char *a2)
{
  re::Defaults::intValue((re::Defaults *)"assetBackgroundLoaderTaskLimit", a2, (uint64_t)v5);
  if (v5[0]) {
    int v3 = v6;
  }
  else {
    int v3 = 8;
  }
  *(_DWORD *)this = v3;
  *((_WORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 257;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = (char *)this + 360;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *(_OWORD *)((char *)this + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *((_DWORD *)this + 26) = 0;
  *((void *)this + 16) = (char *)this + 360;
  *((void *)this + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 15re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *((_DWORD *)this + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 24) = (char *)this + 360;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  *((_DWORD *)this + 56) = 0;
  *((void *)this + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = (char *)this + 360;
  *((void *)this + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((_DWORD *)this + 74) = 0;
  *((void *)this + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *((_OWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *(_OWORD *)((char *)this + 34re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  return this;
}

const char *re::internal::AssetBackgroundLoader::init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(a1 + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = a2;
  *(void *)(a1 + 32re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = a3;
  *(void *)(a1 + 336) = a4;
  *(void *)(a1 + 344) = a5;
  *(void *)(a1 + 35re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = a6;
  uint64_t v7 = MEMORY[0x263EF83A8];
  unsigned int v8 = dispatch_queue_attr_make_with_qos_class(MEMORY[0x263EF83A8], QOS_CLASS_USER_INITIATED, -15);
  global_queue = dispatch_get_global_queue(25, 0);
  *(void *)(a1 + 36re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = dispatch_queue_create_with_target_V2("com.apple.re.AssetBackgroundLoader", v8, global_queue);
  unint64_t v10 = dispatch_queue_attr_make_with_qos_class(v7, QOS_CLASS_USER_INITIATED, 0);
  *(void *)(a1 + 376) = dispatch_queue_create_with_target_V2("com.apple.re.AssetBackgroundLoaderPriority", v10, global_queue);
  long long v11 = dispatch_group_create();

  size_t v12 = *(void **)(a1 + 384);
  *(void *)(a1 + 384) = v11;

  uint64_t v13 = getenv("RE_ASSET_BACKGROUND_LOADING_ENABLE");
  if (v13) {
    *(unsigned char *)(a1 + 4) = atoi(v13) != 0;
  }
  double result = getenv("RE_ASSET_BACKGROUND_UNLOADING_ENABLE");
  if (result)
  {
    double result = (const char *)atoi(result);
    *(unsigned char *)(a1 + 5) = result != 0;
  }
  return result;
}

void re::internal::AssetBackgroundLoader::runIfNeeded(re::internal::AssetBackgroundLoader *this, os_unfair_lock_s *a2)
{
  uint64_t v4 = a2 + 100;
  os_unfair_lock_lock(a2 + 100);
  unsigned int v6 = atomic_load(&a2[94]._os_unfair_lock_opaque);
  if (v6 == 2)
  {
    re::internal::AssetBackgroundLoader::unloadAsset((re::internal::AssetBackgroundLoader *)a2, v5);
  }
  else
  {
    if (v6 != 1) {
      goto LABEL_6;
    }
    re::internal::AssetBackgroundLoader::loadAsset((uint64_t)a2, *((void *)this + 43));
  }
  atomic_store(4u, &a2[94]._os_unfair_lock_opaque);
  re::internal::AssetBackgroundLoader::onActiveTaskDone((uint64_t)this, a2, 1);
LABEL_6:
  re::internal::AssetBackgroundLoader::startPendingLoadItems((os_unfair_lock_s *)this, 1);
  os_unfair_lock_unlock(v4);
}

void re::internal::AssetBackgroundLoader::loadAsset(uint64_t a1, uint64_t a2)
{
  uint64_t v116 = *MEMORY[0x263EF8340];
  if (a2) {
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)a2 + 80))(a2, *(void *)(a1 + 64), a1);
  }
  uint64_t v4 = re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v102, 2002, a1);
  uint64_t v5 = *re::assetsLogObjects(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    if (*(void *)(a1 + 40)) {
      uint64_t v53 = *(void *)(a1 + 48);
    }
    else {
      uint64_t v53 = a1 + 41;
    }
    buf[0].uint32_t numer = 136315138;
    *(void *)&buf[0].uint32_t denom = v53;
    _os_log_debug_impl(&dword_233120000, v5, OS_LOG_TYPE_DEBUG, "Loading asset '%s'", (uint8_t *)buf, 0xCu);
  }
  unsigned int v6 = (_anonymous_namespace_ *)mach_absolute_time();
  uint64_t v7 = v6;
  unint64_t v101 = &unk_26E6CA830;
  if (*(unsigned char *)(a1 + 344))
  {
    unint64_t v8 = *(void *)(a1 + 64);
    if (v8)
    {
      uint64_t v9 = (re *)re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(void *)(a1 + 72), v8);
      unint64_t v10 = *re::assetsLogObjects(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        if (*(void *)(a1 + 40)) {
          uint64_t v79 = *(void *)(a1 + 48);
        }
        else {
          uint64_t v79 = a1 + 41;
        }
        buf[0].uint32_t numer = 136315138;
        *(void *)&buf[0].uint32_t denom = v79;
        _os_log_debug_impl(&dword_233120000, v10, OS_LOG_TYPE_DEBUG, "Loading asset '%s' from payload", (uint8_t *)buf, 0xCu);
      }
      uint64_t v11 = (*(uint64_t (**)(re *))(*(void *)v9 + 120))(v9);
      memset(buf, 0, 36);
      *(void *)&buf[4].uint32_t denom = 0x7FFFFFFFLL;
      re::SharedResourcePayload::clientObject((id *)(a1 + 352), &v110);
      uint64_t v12 = v110;

      if (!v12) {
        goto LABEL_75;
      }
      re::SharedResourcePayload::clientObject((id *)(a1 + 352), &cf);
      if ((void)cf) {
        CFHashCode v14 = CFHash((CFTypeRef)cf);
      }
      else {
        CFHashCode v14 = 0;
      }
      id v96 = v7;
      unint64_t v37 = re::Hash<re::DynamicString>::operator()((uint64_t)v109, (uint64_t)&v110);
      unint64_t v38 = v37;
      if (buf[0])
      {
        unint64_t v39 = v37 % buf[3].numer;
        uint64_t v40 = *(unsigned int *)(*(void *)&buf[1] + 4 * v39);
        if (v40 != 0x7FFFFFFF)
        {
          CFHashCode v94 = v14;
          mach_timebase_info v41 = buf[2];
          while (!re::DynamicString::operator==(*(void *)&v41 + 88 * v40 + 16, (uint64_t)&v110))
          {
            uint64_t v40 = *(_DWORD *)(*(void *)&v41 + 88 * v40 + 8) & 0x7FFFFFFF;
            if (v40 == 0x7FFFFFFF)
            {
              CFHashCode v14 = v94;
              goto LABEL_65;
            }
          }
          goto LABEL_71;
        }
      }
      else
      {
        LODWORD(v39) = 0;
      }
LABEL_65:
      uint32_t denom = buf[4].denom;
      if (buf[4].denom == 0x7FFFFFFF)
      {
        uint32_t denom = buf[4].numer;
        uint32_t numer = buf[4].numer;
        if (buf[4].numer == buf[3].numer)
        {
          re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity((uint64_t)buf, 2 * buf[3].denom);
          uint32_t numer = buf[4].numer;
          LODWORD(v39) = v38 % buf[3].numer;
        }
        buf[4].uint32_t numer = numer + 1;
        mach_timebase_info v44 = buf[2];
        int v45 = *(_DWORD *)(*(void *)&buf[2] + 88 * denom + 8);
      }
      else
      {
        mach_timebase_info v44 = buf[2];
        int v45 = *(_DWORD *)(*(void *)&buf[2] + 88 * buf[4].denom + 8);
        buf[4].uint32_t denom = v45 & 0x7FFFFFFF;
      }
      *(_DWORD *)(*(void *)&v44 + 88 * denom + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v45 | 0x80000000;
      uint64_t v46 = 88 * denom;
      *(_DWORD *)(*(void *)&buf[2] + v46 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)&buf[2] + v46 + 8) & 0x80000000 | *(_DWORD *)(*(void *)&buf[1] + 4 * v39);
      *(void *)(*(void *)&buf[2] + v46) = v38;
      re::DynamicString::DynamicString((re::DynamicString *)(*(void *)&buf[2] + v46 + 16), (const re::DynamicString *)&v110);
      uint64_t v47 = *(void *)&buf[2] + 88 * denom;
      *(void *)(v47 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v14;
      *(_DWORD *)(v47 + 80) = 2;
      *(_DWORD *)(*(void *)&buf[1] + 4 * v39) = denom;
      ++buf[3].denom;
      ++buf[5].numer;
LABEL_71:
      if (void)v110 && (BYTE8(v110)) {
        (*(void (**)(void))(*(void *)v110 + 40))();
      }

      uint64_t v7 = v96;
LABEL_75:
      id v100 = *(id *)(a1 + 352);
      int v48 = (*(uint64_t (**)(re *, id *, uint64_t, void **, uint64_t, mach_timebase_info *))(*(void *)v9 + 208))(v9, &v100, v11, &v101, a1 + 104, buf);

      if (v48)
      {
        *(void *)(a1 + 96) = v11;
      }
      else
      {
        uint64_t v50 = *re::assetsLogObjects(v49);
        if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
        {
          if (*(void *)(a1 + 40)) {
            uint64_t v51 = *(void *)(a1 + 48);
          }
          else {
            uint64_t v51 = a1 + 41;
          }
          LODWORD(v110) = 136315138;
          *(void *)((char *)&v110 + 4) = v51;
          _os_log_impl(&dword_233120000, v50, OS_LOG_TYPE_DEFAULT, "rdar://102632350 Asset '%s' failed to load from payload.", (uint8_t *)&v110, 0xCu);
        }
        uint64_t v52 = (_anonymous_namespace_ *)(*(uint64_t (**)(re *, uint64_t))(*(void *)v9 + 16))(v9, v11);
        re::internal::AssetLoadItem::setFailure((re::internal::AssetLoadItem *)a1, (const re::DynamicString *)&v110);
        if (void)v110 && (BYTE8(v110)) {
          (*(void (**)(void))(*(void *)v110 + 40))();
        }
      }
      re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)buf);
      goto LABEL_195;
    }
    re::internal::AssetLoadItem::setFailure((re::internal::AssetLoadItem *)a1, (const re::DynamicString *)buf);
    uint64_t v29 = (_anonymous_namespace_ *)buf[0];
    if (!*(void *)buf || (buf[1].numer & 1) == 0) {
      goto LABEL_195;
    }
    mach_timebase_info v30 = buf[2];
LABEL_194:
    uint64_t v29 = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, mach_timebase_info))(*(void *)v29 + 40))(v29, v30);
    goto LABEL_195;
  }
  if (!*(unsigned char *)(a1 + 184))
  {
    buf[0].uint32_t numer = *(_DWORD *)(a1 + 256);
    re::DynamicString::DynamicString((re::DynamicString *)&buf[1], (const re::DynamicString *)(a1 + 264));
    re::DynamicString::DynamicString((re::DynamicString *)&buf[5], (const re::DynamicString *)(a1 + 296));
    *(_OWORD *)&buf[9].uint32_t numer = *(_OWORD *)(a1 + 328);
    int v31 = dyld_program_sdk_at_least();
    if (!CompiledAsset)
    {
      unint64_t v34 = 0;
LABEL_127:
      memset(v109, 0, 32);
      re::DynamicString::setCapacity(v109, 0);
      BOOL v64 = re::AssetPath::temp_filePathToSourceAssetInBundle((re::AssetPath *)buf, (re::DynamicString *)v109, *(os_unfair_lock_s **)(a1 + 88));
      if (!v64)
      {
        re::internal::AssetLoadItem::setFailure((re::internal::AssetLoadItem *)a1, (const re::DynamicString *)&v110);
        if (void)v110 && (BYTE8(v110)) {
          (*(void (**)(void))(*(void *)v110 + 40))();
        }
        if (*(void *)v109 && (v109[8] & 1) != 0) {
          (*(void (**)(void))(**(void **)v109 + 40))();
        }
        if (buf[5])
        {
          if (buf[6].numer) {
            (*(void (**)(void))(**(void **)&buf[5] + 40))();
          }
          memset(&buf[5], 0, 32);
        }
        if (*(void *)&buf[1] && (buf[2].numer & 1) != 0) {
          (*(void (**)(void))(**(void **)&buf[1] + 40))();
        }
        goto LABEL_213;
      }
      uint64_t v65 = v7;
      uint64_t v66 = (uint64_t (***)(void, char *))buf[10];
      if (v109[8]) {
        unint64_t v67 = *(char **)&v109[16];
      }
      else {
        unint64_t v67 = (char *)((unint64_t)v109 | 9);
      }
      id v68 = strrchr(v67, 46) + 1;
      uint64_t v69 = (**v66)(v66, v68);
      if (v69)
      {
        uint64_t v70 = v69;
        uint64_t v71 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(void *)(a1 + 72), *(void *)(a1 + 64));
        uint64_t v72 = (*(uint64_t (**)(uint64_t, void))(*(void *)v71 + 176))(v71, 0);
        (*(void (**)(long long *__return_ptr, uint64_t, char *, uint64_t, void **))(*(void *)v70 + 40))(&v110, v70, v67, v72, &v101);
        uint64_t v73 = (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v70 + 56))(v70, v72);
        int v74 = *re::assetsLogObjects(v73);
        BOOL v75 = os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG);
        if (v75)
        {
          if (*(void *)(a1 + 40)) {
            uint64_t v92 = *(void *)(a1 + 48);
          }
          else {
            uint64_t v92 = a1 + 41;
          }
          LODWORD(cf) = 136315138;
          *(void *)((char *)&cf + 4) = v92;
          _os_log_debug_impl(&dword_233120000, v74, OS_LOG_TYPE_DEBUG, "Compiling source asset '%s'", (uint8_t *)&cf, 0xCu);
        }
        uint64_t v7 = v65;
        if ((_BYTE)v110)
        {
          uint64_t v76 = *re::assetsLogObjects((re *)v75);
          if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
          {
            if (*(void *)(a1 + 40)) {
              uint64_t v93 = *(void *)(a1 + 48);
            }
            else {
              uint64_t v93 = a1 + 41;
            }
            LODWORD(cf) = 136315138;
            *(void *)((char *)&cf + 4) = v93;
            _os_log_debug_impl(&dword_233120000, v76, OS_LOG_TYPE_DEBUG, "Compiled asset '%s'", (uint8_t *)&cf, 0xCu);
          }
          *(void *)(a1 + 96) = *((void *)&v110 + 1);
          if (*(unsigned char *)(a1 + 344)) {
            uint64_t v77 = *(void *)(a1 + 360);
          }
          else {
            uint64_t v77 = 0;
          }
          re::AssetSignpost::ScopeGuard::ScopeGuard((re::AssetSignpost::ScopeGuard *)&v98, 2056, v77, **(const char ***)(a1 + 64));
          if (((*(uint64_t (**)(uint64_t, void, void, void))(*(void *)v71 + 24))(v71, *(void *)(a1 + 96), 0, 0) & 1) == 0)
          {
            unint64_t v78 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, void))(*(void *)v71 + 16))(v71, *(void *)(a1 + 96));
            *(void *)(a1 + 96) = 0;
            re::internal::AssetLoadItem::setFailure((re::internal::AssetLoadItem *)a1, (const re::DynamicString *)&cf);
            if ((void)cf)
            {
              if (BYTE8(cf)) {
                (*(void (**)(void))(*(void *)cf + 40))();
              }
            }
          }
          re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)&v98);
        }
        else
        {
          std::error_code::message(&v98, (const std::error_code *)((char *)&v110 + 8));
          if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v80 = &v98;
          }
          else {
            unint64_t v80 = (std::string *)v98.__r_.__value_.__r.__words[0];
          }
          if (v113) {
            unint64_t v81 = v114;
          }
          else {
            unint64_t v81 = (char *)&v113 + 1;
          }
          re::DynamicString::format((re::DynamicString *)"Failed to compile -- %s (%s)", (re::DynamicString *)&cf, v80, v81);
          re::internal::AssetLoadItem::setFailure((re::internal::AssetLoadItem *)a1, (const re::DynamicString *)&cf);
          if (void)cf && (BYTE8(cf)) {
            (*(void (**)(void))(*(void *)cf + 40))();
          }
          if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v98.__r_.__value_.__l.__data_);
          }
        }
        if (!(_BYTE)v110 && v112 && (v113 & 1) != 0) {
          (*(void (**)(void))(*(void *)v112 + 40))();
        }
      }
      else
      {
        re::DynamicString::format((re::DynamicString *)"Failed to compile -- no compiler for files with extension %s", (re::DynamicString *)&v110, v68);
        re::internal::AssetLoadItem::setFailure((re::internal::AssetLoadItem *)a1, (const re::DynamicString *)&v110);
        if (void)v110 && (BYTE8(v110)) {
          (*(void (**)(void))(*(void *)v110 + 40))();
        }
        uint64_t v7 = v65;
      }
      uint64_t CompiledAsset = *(void *)v109;
      if (*(void *)v109 && (v109[8] & 1) != 0) {
        uint64_t CompiledAsset = (*(uint64_t (**)(void))(**(void **)v109 + 40))();
      }
      uint64_t v62 = *(void *)(a1 + 96);
LABEL_180:
      if (!v62 && *(_DWORD *)(a1 + 136) != 3)
      {
        if (!v34) {
          unint64_t v34 = "Unknown failure";
        }
        re::internal::AssetLoadItem::setFailure((re::internal::AssetLoadItem *)a1, (const re::DynamicString *)&v110);
        if (void)v110 && (BYTE8(v110)) {
          (*(void (**)(void))(*(void *)v110 + 40))();
        }
      }
      if (buf[5])
      {
        if (buf[6].numer) {
          (*(void (**)(void))(**(void **)&buf[5] + 40))();
        }
        memset(&buf[5], 0, 32);
      }
      uint64_t v29 = (_anonymous_namespace_ *)buf[1];
      if (*(void *)&buf[1] && (buf[2].numer & 1) != 0)
      {
        mach_timebase_info v30 = buf[3];
        goto LABEL_194;
      }
LABEL_195:
      if (!*(void *)(a1 + 96))
      {
        if (*(_DWORD *)(a1 + 136) != 3)
        {
          re::internal::AssetLoadItem::setFailure((re::internal::AssetLoadItem *)a1, (const re::DynamicString *)buf);
          if (buf[0])
          {
            if (buf[1].numer) {
              (*(void (**)(void))(**(void **)buf + 40))();
            }
          }
        }
        goto LABEL_211;
      }
      *(_DWORD *)(a1 + 136) = 2;
      uint64_t v82 = mach_absolute_time();
      unint64_t v83 = v82 - (void)v7;
      *(void *)(a1 + 40re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v82 - (void)v7;
      double v84 = *(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale;
      if (*(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale < 0.0)
      {
        uint64_t v82 = mach_timebase_info(buf);
        if (v82)
        {
          double v87 = NAN;
LABEL_205:
          double v88 = v87 / 1000000.0;
          if (v87 / 1000000.0 > 1000.0)
          {
            BOOL v89 = *re::assetsLogObjects((re *)v82);
            if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
            {
              if (*(void *)(a1 + 40)) {
                uint64_t v90 = *(void *)(a1 + 48);
              }
              else {
                uint64_t v90 = a1 + 41;
              }
              buf[0].uint32_t numer = 134218498;
              *(void *)&buf[0].uint32_t denom = a1;
              LOWORD(buf[1].denom) = 2080;
              *(void *)((char *)&buf[1].denom + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v90;
              HIWORD(buf[2].denom) = 2048;
              buf[3] = *(mach_timebase_info *)&v88;
              _os_log_impl(&dword_233120000, v89, OS_LOG_TYPE_DEFAULT, "Asset(%llu) '%s' took '%.0f' ms to load", (uint8_t *)buf, 0x20u);
            }
          }
LABEL_211:
          if (a2) {
            (*(void (**)(uint64_t, void, uint64_t))(*(void *)a2 + 88))(a2, *(void *)(a1 + 64), a1);
          }
          goto LABEL_213;
        }
        LODWORD(v85) = buf[0].numer;
        LODWORD(v86) = buf[0].denom;
        double v84 = (double)v85 / (double)v86;
        re::convertMachTimeToNanoSecs(unsigned long long)::tmscale = *(void *)&v84;
      }
      double v87 = v84 * (double)v83;
      goto LABEL_205;
    }
    signed int v33 = *(const char ***)(a1 + 64);
    v97[0] = 0;
    uint64_t CompiledAsset = re::AssetUtilities::loadCompiledAsset((_anonymous_namespace_ *)buf, a1 + 72, v33, (uint64_t)&v101, (uint64_t)v97, (uint64_t)&v110);
    if ((_BYTE)v110)
    {
      unint64_t v34 = 0;
      uint64_t v35 = *((void *)&v110 + 1);
      *(void *)(a1 + 96) = *((void *)&v110 + 1);
      if (v35) {
        goto LABEL_55;
      }
    }
    else
    {
      *(void *)(a1 + 96) = 0;
      uint64_t CompiledAsset = re::WrappedError::localizedDescription((id *)&v110 + 1);
      unint64_t v34 = (const char *)CompiledAsset;
      if (*(void *)(a1 + 96))
      {
LABEL_55:
        unint64_t v36 = *re::assetsLogObjects((re *)CompiledAsset);
        uint64_t CompiledAsset = os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG);
        if (CompiledAsset)
        {
          if (*(void *)(a1 + 40)) {
            uint64_t v91 = *(void *)(a1 + 48);
          }
          else {
            uint64_t v91 = a1 + 41;
          }
          LODWORD(cf) = 136315138;
          *(void *)((char *)&cf + 4) = v91;
          _os_log_debug_impl(&dword_233120000, v36, OS_LOG_TYPE_DEBUG, "Loaded compiled asset '%s'", (uint8_t *)&cf, 0xCu);
        }
        goto LABEL_121;
      }
    }
    if (v34) {
      int v61 = 1;
    }
    else {
      int v61 = v31;
    }
    if (!v61) {
      unint64_t v34 = "Can't find source asset path";
    }
LABEL_121:
    if (!(_BYTE)v110) {

    }
    uint64_t v62 = *(void *)(a1 + 96);
    if (v62) {
      int v63 = 0;
    }
    else {
      int v63 = v31;
    }
    if (v63 != 1) {
      goto LABEL_180;
    }
    goto LABEL_127;
  }
  uint64_t v95 = v6;
  uint64_t v15 = (_anonymous_namespace_ *)re::DynamicArray<re::AssetLoadDescriptor>::DynamicArray((uint64_t)&v110, (uint64_t *)(a1 + 192));
  unint64_t v16 = *(char **)(a1 + 232);
  int v114 = v16;
  if (v16) {
    uint64_t v15 = v16 + 8;
  }
  uint64_t v115 = *(void *)(a1 + 240);
  uint64_t v108 = 0;
  unint64_t v106 = 0;
  long long cf = 0uLL;
  int v107 = 0;
  if (v111)
  {
    uint64_t v17 = v113;
    uint64_t v18 = 144 * v111;
    while (1)
    {
      uint64_t v19 = (*(unsigned char *)(v17 + 8) & 1) != 0 ? *(const char **)(v17 + 16) : (const char *)(v17 + 9);
      uint64_t ProviderForScheme = (re *)re::AssetProviderRegistry::tryGetProviderForScheme(*(os_unfair_lock_s **)(a1 + 88), v19);
      if (!ProviderForScheme) {
        break;
      }
      uint64_t v21 = ProviderForScheme;
      if (re::assetsHighFrequencyLoggingEnabled(void)::onceToken != -1) {
        dispatch_once(&re::assetsHighFrequencyLoggingEnabled(void)::onceToken, &__block_literal_global_1);
      }
      if (re::assetsHighFrequencyLoggingEnabled(void)::shouldLog)
      {
        id v22 = *re::assetsLogObjects(ProviderForScheme);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          if (*(unsigned char *)(v17 + 8)) {
            uint64_t v23 = *(void *)(v17 + 16);
          }
          else {
            uint64_t v23 = v17 + 9;
          }
          buf[0].uint32_t numer = 136315138;
          *(void *)&buf[0].uint32_t denom = v23;
          _os_log_impl(&dword_233120000, v22, OS_LOG_TYPE_DEFAULT, "Loading requested descriptor of type '%s'", (uint8_t *)buf, 0xCu);
        }
      }
      (*(void (**)(mach_timebase_info *__return_ptr, re *, uint64_t, uint64_t, void **, char *))(*(void *)v21 + 40))(buf, v21, v17, v115, &v101, v114);
      if (LOBYTE(buf[0].numer))
      {
        *(mach_timebase_info *)(a1 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = buf[6];
        *(unsigned char *)(a1 + 12re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = buf[7].numer;
        uint64_t v15 = (_anonymous_namespace_ *)buf[1];
        *(mach_timebase_info *)(a1 + 96) = buf[5];
        if (v15 && (buf[2].numer & 1) != 0) {
          uint64_t v15 = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, void))(*(void *)v15 + 40))(v15, *(void *)&buf[3]);
        }
        goto LABEL_94;
      }
      if (*(unsigned char *)(v17 + 8)) {
        uint64_t v27 = *(void *)(v17 + 16);
      }
      else {
        uint64_t v27 = v17 + 9;
      }
      if (buf[2].numer) {
        char v28 = (char *)buf[3];
      }
      else {
        char v28 = (char *)&buf[2] + 1;
      }
      re::DynamicString::format((re::DynamicString *)"Asset provider load failed: type '%s' -- %s", (re::DynamicString *)v109, v27, v28);
      v25.n128_f64[0] = re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)&cf, v109);
      if (*(void *)v109 && (v109[8] & 1) != 0) {
        (*(void (**)(double))(**(void **)v109 + 40))(v25.n128_f64[0]);
      }
      uint64_t v15 = (_anonymous_namespace_ *)buf[1];
      if (*(void *)&buf[1] && (buf[2].numer & 1) != 0)
      {
        mach_timebase_info v26 = buf[3];
LABEL_46:
        uint64_t v15 = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, mach_timebase_info, __n128))(*(void *)v15 + 40))(v15, v26, v25);
      }
LABEL_47:
      v17 += 144;
      v18 -= 144;
      if (!v18) {
        goto LABEL_94;
      }
    }
    if (*(unsigned char *)(v17 + 8)) {
      uint64_t v24 = *(void *)(v17 + 16);
    }
    else {
      uint64_t v24 = v17 + 9;
    }
    re::DynamicString::format((re::DynamicString *)"No asset provider found: type '%s'", (re::DynamicString *)buf, v24);
    v25.n128_f64[0] = re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)&cf, buf);
    uint64_t v15 = (_anonymous_namespace_ *)buf[0];
    if (!*(void *)buf || (buf[1].numer & 1) == 0) {
      goto LABEL_47;
    }
    mach_timebase_info v26 = buf[2];
    goto LABEL_46;
  }
LABEL_94:
  if (*(void *)(a1 + 96))
  {
    re::DynamicArray<re::DynamicString>::deinit((uint64_t)&cf);
    if (v114)
    {

      int v114 = 0;
    }
    uint64_t v29 = (_anonymous_namespace_ *)re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)&v110);
    uint64_t v7 = v95;
    goto LABEL_195;
  }
  unint64_t v54 = v106;
  *(_OWORD *)&v98.__r_.__value_.__r.__words[1] = 0uLL;
  uint64_t v99 = 0;
  re::DynamicString::setCapacity(&v98, 0);
  if (v54)
  {
    uint64_t v55 = 0;
    for (unint64_t i = 0; i != v54; ++i)
    {
      unint64_t v57 = v106;
      if (v106 <= i)
      {
        uint64_t v103 = 0;
        memset(buf, 0, 80);
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)int v109 = 136315906;
        *(void *)&v109[4] = "operator[]";
        *(_WORD *)&v109[12] = 1024;
        *(_DWORD *)&v109[14] = 789;
        *(_WORD *)&v109[18] = 2048;
        *(void *)&v109[20] = i;
        *(_WORD *)&v109[28] = 2048;
        *(void *)&v109[30] = v57;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v58 = v108 + v55;
      if (*(unsigned char *)(v108 + v55 + 8)) {
        std::string v59 = *(const char **)(v58 + 16);
      }
      else {
        std::string v59 = (const char *)(v58 + 9);
      }
      size_t v60 = strlen(v59);
      re::DynamicString::append((re::DynamicString *)&v98, v59, v60);
      if (i < v54 - 1) {
        re::DynamicString::append((re::DynamicString *)&v98, "; ", 2uLL);
      }
      v55 += 32;
    }
  }
  re::internal::AssetLoadItem::setFailure((re::internal::AssetLoadItem *)a1, (const re::DynamicString *)&v98);
  if (a2) {
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)a2 + 88))(a2, *(void *)(a1 + 64), a1);
  }
  if (v98.__r_.__value_.__r.__words[0] && (v98.__r_.__value_.__s.__data_[8] & 1) != 0) {
    (*(void (**)(void))(*(void *)v98.__r_.__value_.__l.__data_ + 40))();
  }
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)&cf);
  if (v114)
  {

    int v114 = 0;
  }
  re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)&v110);
LABEL_213:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v102);
}

void re::internal::AssetBackgroundLoader::onActiveTaskDone(uint64_t a1, void *a2, int a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  unsigned int v6 = *re::assetsLogObjects((re *)a1);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    if (a2[5]) {
      uint64_t v23 = (char *)a2[6];
    }
    else {
      uint64_t v23 = (char *)a2 + 41;
    }
    LODWORD(buf[0]) = 136315138;
    *(void *)((char *)buf + 4) = v23;
    _os_log_debug_impl(&dword_233120000, v6, OS_LOG_TYPE_DEBUG, "Finished background processing of asset '%s'", (uint8_t *)buf, 0xCu);
  }
  v7.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (v7.__d_.__rep_ - a2[53] >= 1000000
    && re::internal::enableSignposts(0, 0)
    && re::internal::enableHighFrequencyTracing(0, 0))
  {
    kdebug_trace();
  }
  unint64_t v8 = (os_unfair_lock_s *)(a1 + 360);
  if (a3 == 1) {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 360));
  }
  uint64_t v9 = *(void **)(a1 + 232);
  unint64_t v10 = *(void *)(a1 + 216);
  uint64_t v11 = v9;
  if (v10)
  {
    uint64_t v12 = 8 * v10;
    uint64_t v11 = *(void **)(a1 + 232);
    while ((void *)*v11 != a2)
    {
      ++v11;
      v12 -= 8;
      if (!v12)
      {
        uint64_t v11 = &v9[v10];
        break;
      }
    }
  }
  unint64_t v13 = v11 - v9;
  if (v13 != v10)
  {
    if (v10 <= v13)
    {
      long long v26 = 0u;
      long long v27 = 0u;
      long long v25 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (v10 - 1 > v13) {
      v9[v13] = v9[v10 - 1];
    }
    *(void *)(a1 + 216) = v10 - 1;
    ++*(_DWORD *)(a1 + 224);
  }
  buf[0] = a2;
  CFHashCode v14 = (re *)re::Queue<re::internal::AssetLoadItem *>::enqueue((void *)(a1 + 264), buf);
  uint64_t v15 = *(void *)(a1 + 88);
  if (v15)
  {
    uint64_t v16 = *(void *)(a1 + 216);
    uint64_t v17 = *(void *)(*(void *)(*(void *)(a1 + 112) + 8 * *(void *)(a1 + 96)) + 416);
    if (a3 == 1) {
      os_unfair_lock_unlock(v8);
    }
    uint64_t v18 = v7.__d_.__rep_ - v17;
    if (v18 >= 5000000)
    {
      uint64_t v19 = *re::assetsLogObjects(v14);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v20 = a2[5];
        uint64_t v21 = (char *)a2[6];
        LODWORD(buf[0]) = 136315906;
        if (v20) {
          id v22 = v21;
        }
        else {
          id v22 = (char *)a2 + 41;
        }
        *(void *)((char *)buf + 4) = v22;
        WORD2(buf[1]) = 2048;
        *(void *)((char *)&buf[1] + 6) = v18 / 1000;
        HIWORD(buf[2]) = 2048;
        buf[3] = v15;
        LOWORD(v25) = 2048;
        *(void *)((char *)&v25 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v16;
        _os_log_impl(&dword_233120000, v19, OS_LOG_TYPE_DEFAULT, "Asset '%s' has been in pending state in Asset Background Loader for '%lld' ms, pending queue size is '%zu', active queue size is '%zu", (uint8_t *)buf, 0x2Au);
      }
    }
  }
  else if (a3 == 1)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 360));
  }
}

void re::internal::AssetBackgroundLoader::unloadAsset(re::internal::AssetBackgroundLoader *this, re::internal::AssetLoadItem *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v17, 2010, (uint64_t)this);
  uint64_t v3 = mach_absolute_time();
  unint64_t v4 = *((void *)this + 8);
  if (v4)
  {
    uint64_t v5 = (re *)re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*((void *)this + 9), v4);
    unsigned int v6 = *re::assetsLogObjects(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      if (*((void *)this + 5)) {
        uint64_t v16 = (char *)*((void *)this + 6);
      }
      else {
        uint64_t v16 = (char *)this + 41;
      }
      *(_DWORD *)info = 136315138;
      *(void *)&info[4] = v16;
      _os_log_debug_impl(&dword_233120000, v6, OS_LOG_TYPE_DEBUG, "Unloading asset '%s'", info, 0xCu);
    }
    (*(void (**)(re *, void))(*(void *)v5 + 16))(v5, *((void *)this + 12));
  }
  uint64_t v7 = mach_absolute_time();
  uint64_t v8 = v7;
  double v9 = *(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale;
  if (*(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale >= 0.0) {
    goto LABEL_8;
  }
  uint64_t v7 = mach_timebase_info((mach_timebase_info_t)info);
  if (!v7)
  {
    LODWORD(v10) = *(_DWORD *)info;
    LODWORD(v11) = *(_DWORD *)&info[4];
    double v9 = (double)v10 / (double)v11;
    re::convertMachTimeToNanoSecs(unsigned long long)::tmscale = *(void *)&v9;
LABEL_8:
    double v12 = v9 * (double)(v8 - v3);
    goto LABEL_9;
  }
  double v12 = NAN;
LABEL_9:
  double v13 = v12 / 1000000.0;
  if (v12 / 1000000.0 > 1000.0)
  {
    CFHashCode v14 = *re::assetsLogObjects((re *)v7);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      if (*((void *)this + 5)) {
        uint64_t v15 = (char *)*((void *)this + 6);
      }
      else {
        uint64_t v15 = (char *)this + 41;
      }
      *(_DWORD *)info = 134218498;
      *(void *)&info[4] = this;
      __int16 v19 = 2080;
      uint64_t v20 = v15;
      __int16 v21 = 2048;
      double v22 = v13;
      _os_log_impl(&dword_233120000, v14, OS_LOG_TYPE_DEFAULT, "Asset(%llu) '%s' took '%.0f' ms to unload", info, 0x20u);
    }
  }
  *((_DWORD *)this + 34) = 4;
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v17);
}

void re::internal::AssetBackgroundLoader::startPendingLoadItems(os_unfair_lock_s *a1, int a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v3 = a1 + 90;
  if (a2 == 1) {
    os_unfair_lock_lock(a1 + 90);
  }
  v4.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (*(void *)&a1[54]._os_unfair_lock_opaque < (unint64_t)(int)a1->_os_unfair_lock_opaque)
  {
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = v4.__d_.__rep_;
    do
    {
      uint64_t v7 = *(void *)&a1[38]._os_unfair_lock_opaque;
      uint64_t v8 = (uint64_t)&a1[34];
      if (!v7)
      {
        uint64_t v8 = (uint64_t)&a1[18];
        if (!*(void *)&a1[22]._os_unfair_lock_opaque) {
          break;
        }
      }
      double v9 = (re *)re::Queue<re::internal::AssetLoadItem *>::dequeue(v8, v5.__d_.__rep_);
      unint64_t v10 = v9;
      uint64_t v11 = rep - *((void *)v9 + 52);
      if (v11 >= 300000)
      {
        double v12 = *re::assetsLogObjects(v9);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          double v13 = "";
          if (v7) {
            double v13 = "Priority ";
          }
          if (*((unsigned char *)v10 + 40)) {
            CFHashCode v14 = (char *)*((void *)v10 + 6);
          }
          else {
            CFHashCode v14 = (char *)v10 + 41;
          }
          uint64_t v15 = *(void *)&a1[38]._os_unfair_lock_opaque;
          uint64_t v16 = *(void *)&a1[22]._os_unfair_lock_opaque;
          uint64_t v17 = *(void *)&a1[54]._os_unfair_lock_opaque;
          uint64_t v18 = *(void *)&a1[70]._os_unfair_lock_opaque;
          *(_DWORD *)long long buf = 136316674;
          __int16 v21 = v13;
          __int16 v22 = 2080;
          uint64_t v23 = v14;
          __int16 v24 = 2048;
          uint64_t v25 = v11 / 1000;
          __int16 v26 = 2048;
          uint64_t v27 = v15;
          __int16 v28 = 2048;
          uint64_t v29 = v16;
          __int16 v30 = 2048;
          uint64_t v31 = v17;
          __int16 v32 = 2048;
          uint64_t v33 = v18;
          _os_log_impl(&dword_233120000, v12, OS_LOG_TYPE_DEFAULT, "%sAsset '%s' has been in pending state in Asset Background Loader for '%lld' ms, started loading now\nPending Priority: %zu, Pending Normal: %zu, Active: %zu, Done: %zu", buf, 0x48u);
        }
      }
      re::internal::AssetBackgroundLoader::startBackgroundTask(a1, v10, 0, v7 != 0);
    }
    while (*(void *)&a1[54]._os_unfair_lock_opaque < (unint64_t)(int)a1->_os_unfair_lock_opaque);
  }
  if (a2 == 1) {
    os_unfair_lock_unlock(v3);
  }
}

void *re::Queue<re::internal::AssetLoadItem *>::enqueue(void *this, void *a2)
{
  uint64_t v3 = this;
  unint64_t v5 = this[1];
  uint64_t v4 = this[2];
  unint64_t v6 = v4 + 1;
  if (v4 + 1 >= v5)
  {
    this = re::Queue<re::internal::AssetLoadItem *>::growCapacity(this, v6);
    unint64_t v5 = v3[1];
    uint64_t v4 = v3[2];
    unint64_t v6 = v4 + 1;
  }
  *(void *)(v3[5] + 8 * ((v3[3] + v4) % v5)) = *a2;
  v3[2] = v6;
  ++*((_DWORD *)v3 + 8);
  return this;
}

void re::internal::AssetBackgroundLoader::prepareBackgroundTask(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v6 = *(_DWORD *)(a2 + 136);
  if (*(unsigned char *)(a1 + 4)) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = v6 == 0;
  }
  if (v7)
  {
    re::internal::AssetBackgroundLoader::loadAsset(a2, *(void *)(a1 + 344));
  }
  else
  {
    if (*(unsigned char *)(a1 + 5)) {
      BOOL v8 = 0;
    }
    else {
      BOOL v8 = v6 == 1;
    }
    if (!v8)
    {
      double v9 = *re::assetsLogObjects((re *)a1);
      BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG);
      if (v6)
      {
        if (v10)
        {
          if (*(void *)(a2 + 40)) {
            uint64_t v12 = *(void *)(a2 + 48);
          }
          else {
            uint64_t v12 = a2 + 41;
          }
          *(_DWORD *)CFHashCode v14 = 136315138;
          *(void *)&unsigned __int8 v14[4] = v12;
          unsigned int v11 = 2;
          _os_log_debug_impl(&dword_233120000, v9, OS_LOG_TYPE_DEBUG, "Starting background unload of asset '%s'", v14, 0xCu);
        }
        else
        {
          unsigned int v11 = 2;
        }
      }
      else
      {
        if (v10)
        {
          if (*(void *)(a2 + 40)) {
            uint64_t v13 = *(void *)(a2 + 48);
          }
          else {
            uint64_t v13 = a2 + 41;
          }
          *(_DWORD *)CFHashCode v14 = 136315138;
          *(void *)&unsigned __int8 v14[4] = v13;
          _os_log_debug_impl(&dword_233120000, v9, OS_LOG_TYPE_DEBUG, "Starting background load of asset '%s'", v14, 0xCu);
        }
        unsigned int v11 = 1;
      }
      atomic_store(v11, (unsigned int *)(a2 + 376));
      *(std::chrono::system_clock::time_point *)(a2 + 424) = std::chrono::system_clock::now();
      if (a3 == 1)
      {
        os_unfair_lock_lock((os_unfair_lock_t)(a1 + 360));
        *(void *)CFHashCode v14 = a2;
        re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)(a1 + 200), v14);
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 360));
      }
      else
      {
        *(void *)CFHashCode v14 = a2;
        re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)(a1 + 200), v14);
      }
      return;
    }
    re::internal::AssetBackgroundLoader::unloadAsset((re::internal::AssetBackgroundLoader *)a2, (re::internal::AssetLoadItem *)a2);
  }
  if (a3 == 1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 360));
    *(void *)CFHashCode v14 = a2;
    re::Queue<re::internal::AssetLoadItem *>::enqueue((void *)(a1 + 264), v14);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 360));
  }
  else
  {
    *(void *)CFHashCode v14 = a2;
    re::Queue<re::internal::AssetLoadItem *>::enqueue((void *)(a1 + 264), v14);
  }
}

void re::internal::AssetBackgroundLoader::startBackgroundTask(uint64_t a1, uint64_t a2, int a3, int a4)
{
  re::internal::AssetBackgroundLoader::prepareBackgroundTask(a1, a2, a3);
  if (*(unsigned char *)(a1 + 4) && *(unsigned char *)(a1 + 5))
  {
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 384));
    id v7 = (id)(a2 + 8);
    uint64_t v8 = 368;
    if (a4) {
      uint64_t v8 = 376;
    }
    double v9 = *(NSObject **)(a1 + v8);
    v10[0] = MEMORY[0x263EF8330];
    v10[1] = 0x40000000;
    void v10[2] = ___ZN2re8internal21AssetBackgroundLoader19startBackgroundTaskERNS0_13AssetLoadItemENS1_9LockStateEb_block_invoke;
    uint64_t v10[3] = &__block_descriptor_tmp_1;
    v10[4] = a1;
    v10[5] = a2;
    dispatch_async(v9, v10);
  }
}

void ___ZN2re8internal21AssetBackgroundLoader19startBackgroundTaskERNS0_13AssetLoadItemENS1_9LockStateEb_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(re::internal::AssetBackgroundLoader **)(a1 + 32);
  re::internal::AssetBackgroundLoader::runIfNeeded(v2, *(os_unfair_lock_s **)(a1 + 40));

  uint64_t v3 = *((void *)v2 + 48);
  dispatch_group_leave(v3);
}

void re::internal::AssetBackgroundLoader::queueOrStartBackgroundTask(os_unfair_lock_s *this, std::chrono::system_clock::time_point *a2, const char *a3, int a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v8 = this + 90;
  os_unfair_lock_lock(this + 90);
  if (*(void *)&this[54]._os_unfair_lock_opaque >= (unint64_t)(int)this->_os_unfair_lock_opaque)
  {
    if (re::assetsHighFrequencyLoggingEnabled(void)::onceToken != -1) {
      dispatch_once(&re::assetsHighFrequencyLoggingEnabled(void)::onceToken, &__block_literal_global_1);
    }
    if (re::assetsHighFrequencyLoggingEnabled(void)::shouldLog)
    {
      BOOL v10 = *re::assetsLogObjects(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        if (a2[5].__d_.__rep_) {
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = (char *)a2[6].__d_.__rep_;
        }
        else {
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = (char *)&a2[5].__d_.__rep_ + 1;
        }
        *(_DWORD *)uint64_t v13 = 136315394;
        *(void *)&v13[4] = a3;
        __int16 v14 = 2080;
        uint64_t v15 = rep;
        _os_log_impl(&dword_233120000, v10, OS_LOG_TYPE_DEFAULT, "Deferring background %s of asset '%s'", v13, 0x16u);
      }
    }
    a2[52].__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (a4) {
      uint64_t v12 = this + 34;
    }
    else {
      uint64_t v12 = this + 18;
    }
    *(void *)uint64_t v13 = a2;
    re::Queue<re::internal::AssetLoadItem *>::enqueue(v12, v13);
    os_unfair_lock_unlock(v8);
  }
  else
  {
    os_unfair_lock_unlock(v8);
    re::internal::AssetBackgroundLoader::startBackgroundTask((uint64_t)this, (uint64_t)a2, 1, a4);
  }
}

void re::internal::AssetBackgroundLoader::loadAssetAsync(re *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int a7@<W6>, re::internal::AssetLoadItem **a8@<X8>)
{
  re::make::shared::object<re::internal::AssetLoadItem>(a1, a8);
  uint64_t v16 = *a8;
  *((void *)v16 + 3) = a2;
  *((void *)v16 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = a3;
  *((void *)v16 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((_DWORD *)v16 + 34) = 0;
  uint64_t v17 = *((void *)a1 + 42);
  *((void *)v16 + 9) = *((void *)a1 + 40);
  *((void *)v16 + 10) = 0;
  *((void *)v16 + 11) = v17;
  uint64_t v18 = *a5;
  *a5 = 0;
  uint64_t v19 = *a6;
  if (v19) {
    id v20 = (id)(v19 + 8);
  }
  LOBYTE(v24) = 1;
  uint64_t v25 = v18;
  uint64_t v26 = a4;
  uint64_t v27 = v19;
  re::Optional<re::internal::AssetLoadItem::PayloadSource>::operator=((uint64_t)*a8 + 344, &v24);
  re::Optional<re::internal::AssetLoadItem::PayloadSource>::~Optional((uint64_t)&v24);
  __int16 v21 = *a8;
  unint64_t v22 = *((void *)*a8 + 5);
  if (v22) {
    unint64_t v23 = v22 >> 1;
  }
  else {
    unint64_t v23 = v22 >> 1;
  }
  if (!v23)
  {
    re::DynamicString::format((re::DynamicString *)"#%llu", (re::DynamicString *)&v24, a4);
    re::DynamicString::operator=((re::internal::AssetLoadItem *)((char *)*a8 + 32), (re::DynamicString *)&v24);
    if (v24 && (v25 & 1) != 0) {
      (*(void (**)(void))(*(void *)v24 + 40))();
    }
    __int16 v21 = *a8;
  }
  re::internal::AssetBackgroundLoader::queueOrStartBackgroundTask((os_unfair_lock_s *)a1, (std::chrono::system_clock::time_point *)v21, "load", a7);
}

uint64_t re::Optional<re::internal::AssetLoadItem::PayloadSource>::operator=(uint64_t a1, void *a2)
{
  int v3 = *(unsigned __int8 *)a2;
  if (*(unsigned char *)a1) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4)
  {
    if (*(unsigned char *)a1) {
      BOOL v5 = v3 == 0;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5)
    {
      uint64_t v12 = *(void *)(a1 + 24);
      if (v12)
      {

        *(void *)(a1 + 24) = 0;
      }

      *(unsigned char *)a1 = 0;
    }
    else
    {
      if (*(unsigned char *)a1) {
        BOOL v7 = 1;
      }
      else {
        BOOL v7 = v3 == 0;
      }
      if (v7)
      {
        if ((void *)a1 != a2)
        {
          uint64_t v8 = a2[1];
          a2[1] = 0;
          double v9 = *(void **)(a1 + 8);
          *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v8;
        }
        uint64_t v10 = *(void *)(a1 + 24);
        uint64_t v11 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v11;
        a2[3] = v10;
      }
      else
      {
        *(unsigned char *)a1 = 1;
        uint64_t v13 = a2[1];
        uint64_t v14 = a2[2];
        a2[1] = 0;
        *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v13;
        *(void *)(a1 + 16) = v14;
        *(void *)(a1 + 24) = a2[3];
        a2[3] = 0;
      }
    }
  }
  return a1;
}

void re::internal::AssetBackgroundLoader::loadAssetAsync(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, re::internal::AssetLoadItem **a7@<X8>)
{
  re::make::shared::object<re::internal::AssetLoadItem>((re *)a1, a7);
  uint64_t v14 = *a7;
  *((void *)v14 + 3) = a2;
  *((void *)v14 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = a3;
  *((void *)v14 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((_DWORD *)v14 + 34) = 0;
  uint64_t v15 = *(void *)(a1 + 336);
  *((void *)v14 + 9) = *(void *)(a1 + 320);
  *((void *)v14 + 10) = 0;
  *((void *)v14 + 11) = v15;
  re::DynamicArray<re::AssetLoadDescriptor>::DynamicArray((uint64_t)&v34, a5);
  uint64_t v17 = *a6;
  *((void *)&v37 + 1) = v17;
  if (v17)
  {
    id v18 = (id)(v17 + 8);
    uint64_t v17 = *((void *)&v37 + 1);
  }
  uint64_t v38 = a4;
  LOBYTE(v39) = 1;
  uint64_t v19 = v34;
  uint64_t v20 = v35;
  uint64_t v34 = 0;
  uint64_t v40 = v19;
  uint64_t v21 = *((void *)&v35 + 1);
  long long v41 = v35;
  long long v35 = 0u;
  uint64_t v22 = v37;
  ++v36;
  int v42 = 1;
  uint64_t v43 = v37;
  uint64_t v44 = v17;
  long long v37 = 0u;
  uint64_t v45 = a4;
  unint64_t v23 = *a7;
  if (*((unsigned char *)*a7 + 184))
  {
    if ((uint64_t *)((char *)*a7 + 184) != &v39)
    {
      uint64_t v24 = *((void *)v23 + 24);
      if (v24 && v19 && v24 != v19)
      {
        re::internal::assertLog((re::internal *)4, v16, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
        _os_crash();
        __break(1u);
        return;
      }
      uint64_t v40 = *((void *)v23 + 24);
      long long v25 = *(_OWORD *)((char *)v23 + 200);
      *((void *)v23 + 24) = v19;
      *((void *)v23 + 25) = v20;
      *((void *)v23 + 26) = v21;
      long long v41 = v25;
      uint64_t v26 = *((void *)v23 + 28);
      *((void *)v23 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v22;
      uint64_t v43 = v26;
      int v42 = 2;
      ++*((_DWORD *)v23 + 54);
    }
    uint64_t v27 = *((void *)v23 + 29);
  }
  else
  {
    uint64_t v27 = 0;
    *((unsigned char *)v23 + 184) = 1;
    *((void *)v23 + 24) = v19;
    *((void *)v23 + 25) = v20;
    *((void *)v23 + 26) = v21;
    long long v41 = 0uLL;
    uint64_t v40 = 0;
    *((void *)v23 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v22;
    uint64_t v43 = 0;
    int v42 = 2;
    *((_DWORD *)v23 + 54) = 1;
  }
  uint64_t v44 = v27;
  *((void *)v23 + 29) = v17;
  *((void *)v23 + 30) = a4;
  re::Optional<re::internal::AssetLoadItem::DescriptorSource>::~Optional((uint64_t)&v39);
  if (*((void *)&v37 + 1))
  {

    *((void *)&v37 + 1) = 0;
  }
  re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)&v34);
  if (a5[2])
  {
    uint64_t v28 = a5[4];
    uint64_t v29 = (*(unsigned char *)(v28 + 8) & 1) != 0 ? *(const char **)(v28 + 16) : (const char *)(v28 + 9);
    uint64_t ProviderForScheme = re::AssetProviderRegistry::tryGetProviderForScheme(*(os_unfair_lock_s **)(a1 + 336), v29);
    if (ProviderForScheme) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)ProviderForScheme + 72))(ProviderForScheme, v28, (uint64_t)*a7 + 32);
    }
  }
  uint64_t v31 = *a7;
  unint64_t v32 = *((void *)*a7 + 5);
  if (v32) {
    unint64_t v33 = v32 >> 1;
  }
  else {
    unint64_t v33 = v32 >> 1;
  }
  if (!v33)
  {
    re::DynamicString::format((re::DynamicString *)"#%llu", (re::DynamicString *)&v39, a4);
    re::DynamicString::operator=((re::internal::AssetLoadItem *)((char *)*a7 + 32), (re::DynamicString *)&v39);
    if (v39)
    {
      if (v40) {
        (*(void (**)(void))(*(void *)v39 + 40))();
      }
    }
    uint64_t v31 = *a7;
  }
  re::internal::AssetBackgroundLoader::queueOrStartBackgroundTask((os_unfair_lock_s *)a1, (std::chrono::system_clock::time_point *)v31, "load", 0);
}

void re::internal::AssetBackgroundLoader::loadAssetAsync(re::internal::AssetBackgroundLoader *this@<X0>, void *a2@<X1>, const re::AssetType *a3@<X2>, const re::AssetPath *a4@<X3>, re::internal::AssetLoadItem **a5@<X8>)
{
  re::make::shared::object<re::internal::AssetLoadItem>(this, a5);
  uint64_t v10 = *a5;
  *((void *)v10 + 3) = a2;
  *((void *)v10 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = a3;
  *((void *)v10 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((_DWORD *)v10 + 34) = 0;
  uint64_t v11 = *((void *)this + 42);
  *((void *)v10 + 9) = *((void *)this + 40);
  *((void *)v10 + 10) = 0;
  *((void *)v10 + 11) = v11;
  int v17 = *(_DWORD *)a4;
  re::DynamicString::DynamicString((re::DynamicString *)&v18, (const re::AssetPath *)((char *)a4 + 8));
  re::DynamicString::DynamicString((re::DynamicString *)&v21, (const re::AssetPath *)((char *)a4 + 40));
  uint64_t v12 = *((void *)this + 41);
  uint64_t v23 = *((void *)a4 + 9);
  uint64_t v24 = v12;
  LOBYTE(v25) = 1;
  LODWORD(v26) = v17;
  uint64_t v27 = v18;
  uint64_t v13 = v20;
  long long v28 = v19;
  uint64_t v20 = 0;
  uint64_t v18 = 0;
  long long v19 = 0uLL;
  uint64_t v29 = v13;
  long long v30 = v21;
  uint64_t v14 = *((void *)&v22 + 1);
  uint64_t v31 = v22;
  long long v22 = 0uLL;
  long long v21 = 0uLL;
  uint64_t v32 = v14;
  uint64_t v33 = v23;
  uint64_t v15 = (uint64_t)*a5 + 248;
  uint64_t v34 = v12;
  re::Optional<re::internal::AssetLoadItem::LegacySource>::operator=(v15, (unsigned __int8 *)&v25);
  re::Optional<re::AssetPath>::~Optional(&v25);
  if ((void)v21)
  {
    if (BYTE8(v21)) {
      (*(void (**)(void))(*(void *)v21 + 40))();
    }
    long long v21 = 0u;
    long long v22 = 0u;
  }
  if (v18 && (v19 & 1) != 0) {
    (*(void (**)(void))(*(void *)v18 + 40))();
  }
  uint64_t v16 = *((void *)a4 + 1);
  uint64_t v27 = 0;
  *(void *)&long long v28 = 0;
  uint64_t v25 = v16;
  uint64_t v26 = 0;
  re::DynamicString::setCapacity(&v25, 0);
  re::AssetPath::fullAssetPath(a4, (re::DynamicString *)&v25);
  re::DynamicString::operator=((re::internal::AssetLoadItem *)((char *)*a5 + 32), (re::DynamicString *)&v25);
  if (v25 && (v26 & 1) != 0) {
    (*(void (**)(void))(*(void *)v25 + 40))();
  }
  re::internal::AssetBackgroundLoader::queueOrStartBackgroundTask((os_unfair_lock_s *)this, (std::chrono::system_clock::time_point *)*a5, "load", 0);
}

uint64_t re::Optional<re::internal::AssetLoadItem::LegacySource>::operator=(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  if (*(unsigned char *)a1) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4)
  {
    if (*(unsigned char *)a1) {
      BOOL v5 = v3 == 0;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5)
    {
      re::DynamicString::deinit((re::DynamicString *)(a1 + 48));
      re::DynamicString::deinit((re::DynamicString *)(a1 + 16));
      *(unsigned char *)a1 = 0;
    }
    else
    {
      if (*(unsigned char *)a1) {
        BOOL v7 = 1;
      }
      else {
        BOOL v7 = v3 == 0;
      }
      if (v7)
      {
        *(_DWORD *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *((_DWORD *)a2 + 2);
        re::DynamicString::operator=((re::DynamicString *)(a1 + 16), (re::DynamicString *)(a2 + 16));
        re::DynamicString::operator=((re::DynamicString *)(a1 + 48), (re::DynamicString *)(a2 + 48));
      }
      else
      {
        *(unsigned char *)a1 = 1;
        *(_DWORD *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *((_DWORD *)a2 + 2);
        *(_OWORD *)(a1 + 16) = 0u;
        *(_OWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
        *(void *)(a1 + 40) = *((void *)a2 + 5);
        uint64_t v8 = *((void *)a2 + 3);
        *(void *)(a1 + 16) = *((void *)a2 + 2);
        *((void *)a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
        uint64_t v9 = *((void *)a2 + 4);
        *((void *)a2 + 5) = 0;
        uint64_t v11 = *(void *)(a1 + 24);
        uint64_t v10 = *(void *)(a1 + 32);
        *(void *)(a1 + 24) = v8;
        *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v9;
        *((void *)a2 + 3) = v11;
        *((void *)a2 + 4) = v10;
        *(_OWORD *)(a1 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
        *(_OWORD *)(a1 + 64) = 0u;
        *(void *)(a1 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *((void *)a2 + 9);
        uint64_t v12 = *((void *)a2 + 7);
        *(void *)(a1 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *((void *)a2 + 6);
        *((void *)a2 + 6) = 0;
        uint64_t v13 = *((void *)a2 + 8);
        *((void *)a2 + 9) = 0;
        uint64_t v15 = *(void *)(a1 + 56);
        uint64_t v14 = *(void *)(a1 + 64);
        *(void *)(a1 + 56) = v12;
        *(void *)(a1 + 64) = v13;
        *((void *)a2 + 7) = v15;
        *((void *)a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v14;
      }
      *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
    }
  }
  return a1;
}

void re::internal::AssetBackgroundLoader::unloadAssetAsync(re::internal::AssetBackgroundLoader *this@<X0>, void *a2@<X1>, const re::AssetType *a3@<X2>, void *a4@<X3>, const char *a5@<X4>, re::internal::AssetLoadItem **a6@<X8>)
{
  re::make::shared::object<re::internal::AssetLoadItem>(this, a6);
  uint64_t v12 = *a6;
  *((void *)v12 + 3) = a2;
  *((void *)v12 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = a3;
  *((void *)v12 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = a4;
  *((_DWORD *)v12 + 34) = 1;
  uint64_t v13 = *((void *)this + 42);
  *((void *)v12 + 9) = *((void *)this + 40);
  *((void *)v12 + 10) = 0;
  *((void *)v12 + 11) = v13;
  uint64_t v14 = (re::internal::AssetLoadItem *)((char *)*a6 + 32);
  v16[0] = a5;
  v16[1] = strlen(a5);
  re::DynamicString::operator=(v14, (uint64_t)v16);
  uint64_t v15 = *a6;
  re::internal::AssetBackgroundLoader::queueOrStartBackgroundTask((os_unfair_lock_s *)this, (std::chrono::system_clock::time_point *)v15, "unload", 0);
}

unsigned __int8 *re::internal::AssetLoadItem::setFailure(re::internal::AssetLoadItem *this, const re::DynamicString *a2)
{
  LOBYTE(v4) = 1;
  re::DynamicString::DynamicString((re::DynamicString *)&v5, a2);
  double result = re::Optional<re::DynamicString>::operator=((unsigned __int8 *)this + 144, &v4);
  if ((_BYTE)v4)
  {
    double result = (unsigned __int8 *)v5;
    if (v5)
    {
      if (v6) {
        double result = (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)v5 + 40))();
      }
    }
  }
  *((_DWORD *)this + 34) = 3;
  return result;
}

uint64_t re::Queue<re::internal::AssetLoadItem *>::dequeue(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8 * v3);
    if ((unint64_t)(v3 + 1) < *(void *)(a1 + 8)) {
      uint64_t v5 = v3 + 1;
    }
    else {
      uint64_t v5 = 0;
    }
    *(void *)(a1 + 16) = v2 - 1;
    *(void *)(a1 + 24) = v5;
    ++*(_DWORD *)(a1 + 32);
    return v4;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Queue<T> is empty", "m_size > 0", "dequeue", 569);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::internal::AssetBackgroundLoader::tryGetLoadItemResult(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 360);
  if (a2 == 1) {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 360));
  }
  if (*(void *)(a1 + 280))
  {
    uint64_t v5 = re::Queue<re::internal::AssetLoadItem *>::dequeue(a1 + 264, a2);
  }
  else
  {
    if (*(void *)(a1 + 216))
    {
      char v6 = *(uint64_t **)(a1 + 232);
      v7.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      uint64_t v8 = *(void *)(a1 + 232);
      uint64_t v9 = *(void *)(a1 + 216);
      if (v6 != (uint64_t *)(v8 + 8 * v9))
      {
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = v7.__d_.__rep_;
        do
        {
          uint64_t v11 = rep - *(void *)(*v6 + 424);
          if (*(unsigned char *)(*v6 + 432)) {
            BOOL v12 = 1;
          }
          else {
            BOOL v12 = v11 < 1001000;
          }
          if (!v12)
          {
            uint64_t v13 = *re::assetsLogObjects((re *)v7.__d_.__rep_);
            v7.__d_.__rep_ = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
            if (LODWORD(v7.__d_.__rep_))
            {
              uint64_t v14 = *v6;
              if (*(unsigned char *)(*v6 + 40)) {
                uint64_t v15 = *(void *)(v14 + 48);
              }
              else {
                uint64_t v15 = v14 + 41;
              }
              uint64_t v16 = *(void *)(a1 + 88);
              uint64_t v17 = *(void *)(a1 + 216);
              uint64_t v18 = *(void *)(a1 + 280);
              *(_DWORD *)long long buf = 136316162;
              uint64_t v21 = v15;
              __int16 v22 = 2048;
              uint64_t v23 = v11 / 1000;
              __int16 v24 = 2048;
              uint64_t v25 = v16;
              __int16 v26 = 2048;
              uint64_t v27 = v17;
              __int16 v28 = 2048;
              uint64_t v29 = v18;
              _os_log_impl(&dword_233120000, v13, OS_LOG_TYPE_DEFAULT, "Asset '%s' has been in active state in Asset Background Loader for '%lld' ms.\nPending: %zu, Active: %zu, Done: %zu", buf, 0x34u);
            }
            *(unsigned char *)(*v6 + 43re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 1;
            uint64_t v8 = *(void *)(a1 + 232);
            uint64_t v9 = *(void *)(a1 + 216);
          }
          ++v6;
        }
        while (v6 != (uint64_t *)(v8 + 8 * v9));
      }
    }
    uint64_t v5 = 0;
  }
  if (v2 == 1) {
    os_unfair_lock_unlock(v4);
  }
  return v5;
}

void re::internal::AssetBackgroundLoader::assetLoadItemFree(uint64_t a1, uint64_t a2)
{
  if (a2) {
    id v3 = (id)(a2 + 8);
  }
  uint64_t v4 = *(void *)(a2 + 384);
  if (v4)
  {

    *(void *)(a2 + 384) = 0;
  }
}

void re::internal::AssetBackgroundLoader::waitForActiveLoadItemsToComplete(re::internal::AssetBackgroundLoader *this)
{
  for (unint64_t i = (os_unfair_lock_s *)*((void *)this + 24); ; unint64_t i = (os_unfair_lock_s *)*((void *)this + 24))
  {
    os_unfair_lock_lock(i);
    if (!*((void *)this + 27)) {
      break;
    }
    id v3 = (os_unfair_lock_s *)**((void **)this + 29);
    if (!v3) {
      break;
    }
    uint64_t v4 = &v3[2];
    os_unfair_lock_unlock(*((os_unfair_lock_t *)this + 24));
    re::internal::AssetBackgroundLoader::runIfNeeded(this, v3);
  }
  uint64_t v5 = (os_unfair_lock_s *)*((void *)this + 24);
  os_unfair_lock_unlock(v5);
}

void re::internal::AssetBackgroundLoader::loadNow(os_unfair_lock_s *this, re::internal::AssetLoadItem *a2, int a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  char v6 = this + 90;
  if (a3 == 1) {
    os_unfair_lock_lock(this + 90);
  }
  uint64_t v7 = *(void *)&this[38]._os_unfair_lock_opaque;
  if (v7)
  {
    char v8 = 0;
LABEL_5:
    uint64_t v9 = 1 - v7;
    do
    {
      *(void *)uint64_t v17 = re::Queue<re::internal::AssetLoadItem *>::dequeue((uint64_t)&this[34], (uint64_t)a2);
      if (*(re::internal::AssetLoadItem **)v17 == a2)
      {
        uint64_t v7 = -v9;
        char v8 = 1;
        if (v9) {
          goto LABEL_5;
        }
        goto LABEL_21;
      }
      re::Queue<re::internal::AssetLoadItem *>::enqueue(&this[34]._os_unfair_lock_opaque, v17);
      ++v9;
    }
    while (v9 != 1);
    if (v8) {
      goto LABEL_21;
    }
  }
  uint64_t v10 = *(void *)&this[22]._os_unfair_lock_opaque;
  if (v10)
  {
    char v11 = 0;
LABEL_14:
    uint64_t v12 = 1 - v10;
    do
    {
      *(void *)uint64_t v17 = re::Queue<re::internal::AssetLoadItem *>::dequeue((uint64_t)&this[18], (uint64_t)a2);
      if (*(re::internal::AssetLoadItem **)v17 == a2)
      {
        uint64_t v10 = -v12;
        char v11 = 1;
        if (v12) {
          goto LABEL_14;
        }
        goto LABEL_21;
      }
      re::Queue<re::internal::AssetLoadItem *>::enqueue(&this[18]._os_unfair_lock_opaque, v17);
      ++v12;
    }
    while (v12 != 1);
    if ((v11 & 1) == 0) {
      goto LABEL_28;
    }
LABEL_21:
    v13.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v14 = v13.__d_.__rep_ - *((void *)a2 + 52);
    if (v14 >= 300000)
    {
      uint64_t v15 = *re::assetsLogObjects((re *)v13.__d_.__rep_);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        if (*((unsigned char *)a2 + 40)) {
          uint64_t v16 = (char *)*((void *)a2 + 6);
        }
        else {
          uint64_t v16 = (char *)a2 + 41;
        }
        *(_DWORD *)uint64_t v17 = 136315394;
        *(void *)&void v17[4] = v16;
        __int16 v18 = 2048;
        uint64_t v19 = v14 / 1000;
        _os_log_impl(&dword_233120000, v15, OS_LOG_TYPE_DEFAULT, "Asset '%s' has been in pending state in Asset Background Loader for '%lld' ms, started loading now via loadNow", v17, 0x16u);
      }
    }
    re::internal::AssetBackgroundLoader::prepareBackgroundTask((uint64_t)this, (uint64_t)a2, 0);
  }
LABEL_28:
  if (a3 == 1) {
    os_unfair_lock_unlock(v6);
  }
  re::internal::AssetBackgroundLoader::runIfNeeded((re::internal::AssetBackgroundLoader *)this, (os_unfair_lock_s *)a2);
}

uint64_t re::Optional<re::internal::AssetLoadItem::DescriptorSource>::~Optional(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void *)(a1 + 48);
    if (v2)
    {

      *(void *)(a1 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    }
    re::DynamicArray<re::AssetLoadDescriptor>::deinit(a1 + 8);
  }
  return a1;
}

uint64_t re::Optional<re::internal::AssetLoadItem::PayloadSource>::~Optional(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2)
    {

      *(void *)(a1 + 24) = 0;
    }
  }
  return a1;
}

void *re::Queue<re::internal::AssetLoadItem *>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::Queue<re::internal::AssetLoadItem *>::setCapacity(this, a2);
    }
    else
    {
      this = re::Queue<re::internal::AssetLoadItem *>::setCapacity(v4, v3);
      v4[2] = 0;
      v4[3] = 0;
      *((_DWORD *)v4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    }
  }
  return this;
}

void *re::Queue<re::internal::AssetLoadItem *>::setCapacity(void *result, unint64_t a2)
{
  unint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    BOOL v6 = result + 2;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::Queue<re::internal::AssetLoadItem *>::setCapacity(v5, a2);
        *BOOL v6 = 0;
        v6[1] = 0;
        *((_DWORD *)v6 + 4) = 0;
        return result;
      }
      if (a2)
      {
        if (a2 >> 61)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in Queue<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 440, 8, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 8 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 8 * a2, 8);
          if (result)
          {
            char v8 = result;
            unint64_t v3 = v5[1];
            if (!v3) {
              goto LABEL_18;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v7, "assertion failure: '%s' (%s:line %i) Queue<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 444, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      char v8 = 0;
      if (!v3)
      {
LABEL_18:
        v5[5] = v8;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v9 = v5[2];
      if (v9)
      {
        unint64_t v10 = v5[3];
        unint64_t v11 = v10;
        do
        {
          v8[v11] = *(void *)(v5[5] + 8 * (v10 % v3));
          if (v11 + 1 < a2) {
            ++v11;
          }
          else {
            unint64_t v11 = 0;
          }
          ++v10;
          --v9;
        }
        while (v9);
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v5 + 40))(*v5, v5[5]);
      goto LABEL_18;
    }
  }
  return result;
}

re::internal::AssetLoadItem *re::make::shared::object<re::internal::AssetLoadItem>@<X0>(re *a1@<X0>, re::internal::AssetLoadItem **a2@<X8>)
{
  unint64_t v3 = re::globalAllocators(a1);
  uint64_t v4 = (re::internal::AssetLoadItem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 440, 8);
  uint64_t result = re::internal::AssetLoadItem::AssetLoadItem(v4);
  *a2 = result;
  return result;
}

double re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free((_DWORD *)(a1[2] + v3));
        ++v4;
        v3 += 88;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(_DWORD *a1)
{
  int v1 = a1[2];
  if (v1 < 0)
  {
    a1[2] = v1 & 0x7FFFFFFF;
    double v3 = re::DynamicString::deinit((re::DynamicString *)(a1 + 4));
    uint64_t v4 = a1[20];
    if (v4 != -1) {
      ((void (*)(char *, _DWORD *, double))*(&off_26E6CA2D8 + v4))(&v5, a1 + 12, v3);
    }
    a1[20] = -1;
  }
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2re13DynamicStringENS8_4DataEmEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_mEEEEEEDcSE_DpT0_(int a1, re::DynamicString *this)
{
  return re::DynamicString::deinit(this);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2re13DynamicStringENS8_4DataEmEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_mEEEEEEDcSE_DpT0_(uint64_t a1, id *a2)
{
}

void re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)std::chrono::system_clock::time_point v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), (re::DynamicString *)(*(void *)&v13[16] + v10 + 16), *(void *)&v13[16] + v10 + 48);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 88;
        }
        while (v11 < v9);
      }
      re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, uint64_t a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,std::variant<re::DynamicString,re::Data,unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 88 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 88 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 88 * v10 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v13 | 0x80000000;
  uint64_t v14 = 88 * v10;
  *(_DWORD *)(*(void *)(a1 + 16) + v14 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + v14 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + v14 + 16), a4);
  uint64_t v15 = *(void *)(a1 + 16) + 88 * v10;
  *(unsigned char *)(v15 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  v15 += 48;
  *(_DWORD *)(v15 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<re::DynamicString,re::Data,unsigned long>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<re::DynamicString,re::Data,unsigned long>,(std::__variant_detail::_Trait)1>>((unsigned int *)v15, a5);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * are::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

unsigned int *std::__variant_detail::__ctor<std::__variant_detail::__traits<re::DynamicString,re::Data,unsigned long>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<re::DynamicString,re::Data,unsigned long>,(std::__variant_detail::_Trait)1>>(unsigned int *result, uint64_t a2)
{
  double v3 = result;
  uint64_t v4 = result[8];
  if (v4 != -1) {
    double result = (unsigned int *)(*(&off_26E6CA2D8 + v4))((int)&v7, (re::DynamicString *)result);
  }
  v3[8] = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5 != -1)
  {
    double result = (unsigned int *)((uint64_t (*)(char *, unsigned int *, uint64_t))off_26E6CA2F0[v5])(&v6, v3, a2);
    v3[8] = v5;
  }
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2re13DynamicStringENS8_4DataEmEEEE19__generic_constructB8nn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_mEEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, void *a3)
{
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(void *)(a2 + 24) = a3[3];
  uint64_t v4 = a3[1];
  *(void *)a2 = *a3;
  *a3 = 0;
  uint64_t v5 = a3[2];
  a3[3] = 0;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v4;
  *(void *)(a2 + 16) = v5;
  a3[1] = v7;
  a3[2] = v6;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2re13DynamicStringENS8_4DataEmEEEE19__generic_constructB8nn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_mEEEOSQ_EEEDcSI_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2re13DynamicStringENS8_4DataEmEEEE19__generic_constructB8nn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_mEEEOSQ_EEEDcSI_DpT0_(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void *re::allocInfo_AssetService(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_37, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_37))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF75068, "AssetService");
    __cxa_guard_release(&_MergedGlobals_37);
  }
  return &unk_26AF75068;
}

void re::initInfo_AssetService(re *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x308AF415FCB3338ALL;
  v5[1] = "AssetService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v6;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = &re::initInfo_AssetService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::introspect_AssetService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AssetService", (uint64_t (*)(re::internal *))re::allocInfo_AssetService, (re::IntrospectionBase *(*)(void))re::initInfo_AssetService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::AssetService>, this);
}

re::RealityArchiveWriter *re::RealityArchiveWriter::RealityArchiveWriter(re::RealityArchiveWriter *this)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)this = &unk_26E6CA318;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = 0;
  re::DynamicString::setCapacity((void *)this + 4, 0);
  *((_DWORD *)this + 16) = 1;
  return this;
}

void re::RealityArchiveWriter::~RealityArchiveWriter(re::RealityArchiveWriter *this)
{
  *(void *)this = &unk_26E6CA318;
  re::DynamicString::deinit((re::RealityArchiveWriter *)((char *)this + 32));
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    zip_close(v2);
    *((void *)this + 3) = 0;
  }
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::RealityArchiveWriter::~RealityArchiveWriter(this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::RealityArchiveWriter::open@<X0>(re::RealityArchiveWriter *this@<X0>, re *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((void *)this + 3))
  {
  }
  else if (re::ensureFolderExistsForFile(a2, (const char *)a2))
  {
    if (!*((void *)this + 3))
    {
      uint64_t v10 = zip_file_create((const char *)a2);
      *((void *)this + 3) = v10;
      if (v10)
      {
        v10->_extra = (__sFILEX *)4096;
        *(void *)&long long v11 = a2;
        *((void *)&v11 + 1) = strlen((const char *)a2);
        uint64_t result = (uint64_t)re::DynamicString::operator=((re::RealityArchiveWriter *)((char *)this + 32), (uint64_t)&v11);
        *(unsigned char *)a3 = 1;
        return result;
      }
    }
    uint64_t result = re::DynamicString::format((re::DynamicString *)"Failed to open reality archive for writing at path '%s'.", (re::DynamicString *)&v11, a2);
  }
  else
  {
    uint64_t result = re::DynamicString::format((re::DynamicString *)"Could not create parent folders for file path %s.", (re::DynamicString *)&v11, a2);
  }
  long long v7 = v11;
  uint64_t v8 = v12;
  uint64_t v9 = v13;
  *(unsigned char *)a3 = 0;
  *(_OWORD *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7;
  *(void *)(a3 + 24) = v8;
  *(void *)(a3 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v9;
  return result;
}

uint64_t re::RealityArchiveWriter::getCompressionMethod(re::RealityArchiveWriter *this, uint64_t a2)
{
  unsigned int v2 = *((_DWORD *)this + 16);
  if (v2 < 3) {
    return (0x20301u >> (8 * v2)) & 3;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Unknown compression method set", "!\"Unreachable code\"", "convertToArchiveCompression", 47);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

__n128 re::RealityArchiveWriter::writeEntry@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const __CFData *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  long long v7 = *(void **)(a1 + 24);
  if (!v7)
  {
LABEL_22:
    __n128 result = v22;
    uint64_t v20 = v23;
    uint64_t v21 = v24;
    *(unsigned char *)a5 = 0;
    *(__n128 *)(a5 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = result;
    *(void *)(a5 + 24) = v20;
    *(void *)(a5 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v21;
    return result;
  }
  if (a4 == 3)
  {
    LOWORD(v10) = 8;
  }
  else if (a4 == 2)
  {
    LOWORD(v10) = 99;
  }
  else if (a4)
  {
    LOWORD(v10) = 0;
  }
  else
  {
    unint64_t v10 = 0xE006300630008uLL >> (16 * (*(unsigned char *)(a1 + 64) - 1));
    if ((*(_DWORD *)(a1 + 64) - 1) >= 4) {
      LOWORD(v10) = 0;
    }
  }
  entry = (void *)zip_create_entry(v7, a2, v10);
  if (!entry)
  {
    re::DynamicString::format((re::DynamicString *)"Failed to create archive entry named '%s'.", (re::DynamicString *)&v22, a2);
    goto LABEL_22;
  }
  uint64_t v12 = zip_entry_save_data_begin(entry);
  if (!v12)
  {
    re::DynamicString::format((re::DynamicString *)"Failed to initialize entry '%s' for writing.", (re::DynamicString *)&v22, a2);
    goto LABEL_22;
  }
  uint64_t v13 = v12;
  CFIndex Length = CFDataGetLength(a3);
  BytePtr = (Bytef *)CFDataGetBytePtr(a3);
  if (zip_entry_save_data_write(BytePtr, Length, v13) == Length)
  {
    if (zip_entry_save_data_end(v13))
    {
      *(unsigned char *)a5 = 1;
      return result;
    }
    re::DynamicString::format((re::DynamicString *)"Failed to finalize write of entry '%s'.", (re::DynamicString *)&v22, a2);
    goto LABEL_22;
  }
  re::DynamicString::format((re::DynamicString *)"Failed to write data to entry '%s'.", (re::DynamicString *)&v22, a2);
  __n128 v17 = v22;
  uint64_t v18 = v23;
  uint64_t v19 = v24;
  *(unsigned char *)a5 = 0;
  *(__n128 *)(a5 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v17;
  *(void *)(a5 + 24) = v18;
  *(void *)(a5 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v19;
  zip_entry_save_data_end(v13);
  return result;
}

__n128 re::RealityArchiveWriter::close@<Q0>(re::RealityArchiveWriter *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = (void **)((char *)this + 24);
  uint64_t v4 = *((void *)this + 3);
  if (!v4)
  {
    long long v11 = "This RealityArchiveWriter is not opened for writing.";
LABEL_12:
    __n128 result = v14;
    uint64_t v12 = v15;
    uint64_t v13 = v16;
    *(unsigned char *)a2 = 0;
    *(__n128 *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = result;
    *(void *)(a2 + 24) = v12;
    *(void *)(a2 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v13;
    return result;
  }
  uint64_t v6 = zip_save_manifest(v4, 0, v5, 1uLL);
  if ((v6 & 1) == 0)
  {
    long long v11 = "Failed to save archive manifest.";
    goto LABEL_12;
  }
  if (*v5)
  {
    uint64_t v8 = zip_close(*v5);
    void *v5 = 0;
    if ((v8 & 1) == 0)
    {
      long long v11 = "Failed to write and close archive.";
      goto LABEL_12;
    }
  }
  uint64_t v9 = *((void *)this + 5);
  if (v9)
  {
    *((void *)this + 5) = 1;
    unint64_t v10 = (unsigned char *)*((void *)this + 6);
  }
  else
  {
    *((unsigned char *)this + 40) = v9 & 1;
    unint64_t v10 = (char *)this + 41;
  }
  *unint64_t v10 = 0;
  *(unsigned char *)a2 = 1;
  return result;
}

void *re::allocInfo_ResourceSharingService(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_38, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_38))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF750E8, "ResourceSharingService");
    __cxa_guard_release(&_MergedGlobals_38);
  }
  return &unk_26AF750E8;
}

void re::initInfo_ResourceSharingService(re *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xEF2E39053FE8140ELL;
  v5[1] = "ResourceSharingService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v6;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = &re::initInfo_ResourceSharingService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::introspect_ResourceSharingService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ResourceSharingService", (uint64_t (*)(re::internal *))re::allocInfo_ResourceSharingService, (re::IntrospectionBase *(*)(void))re::initInfo_ResourceSharingService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ResourceSharingService>, this);
}

void *re::allocInfo_ResourceFetchService(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_39, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_39))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF75168, "ResourceFetchService");
    __cxa_guard_release(&_MergedGlobals_39);
  }
  return &unk_26AF75168;
}

void re::initInfo_ResourceFetchService(re *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xB75BF8A4312FB3D2;
  v5[1] = "ResourceFetchService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v6;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = &re::initInfo_ResourceFetchService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::introspect_ResourceFetchService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ResourceFetchService", (uint64_t (*)(re::internal *))re::allocInfo_ResourceFetchService, (re::IntrospectionBase *(*)(void))re::initInfo_ResourceFetchService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ResourceFetchService>, this);
}

re::AssetPath *re::AssetPath::AssetPath(re::AssetPath *this, re::Allocator *a2)
{
  *(_DWORD *)this = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)this + 1) = a2;
  re::DynamicString::setCapacity((void *)this + 1, 0);
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *((void *)this + 5) = a2;
  re::DynamicString::setCapacity((void *)this + 5, 0);
  *((void *)this + 9) = 0;
  return this;
}

uint64_t re::AssetPath::reset(uint64_t this)
{
  *(_DWORD *)this = 0;
  uint64_t v1 = *(void *)(this + 16);
  if (v1)
  {
    *(void *)(this + 16) = 1;
    unsigned int v2 = *(unsigned char **)(this + 24);
  }
  else
  {
    *(unsigned char *)(this + 16) = v1 & 1;
    unsigned int v2 = (unsigned char *)(this + 17);
  }
  *unsigned int v2 = 0;
  uint64_t v3 = *(void *)(this + 48);
  if (v3)
  {
    *(void *)(this + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 1;
    long long v4 = *(unsigned char **)(this + 56);
  }
  else
  {
    *(unsigned char *)(this + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v3 & 1;
    long long v4 = (unsigned char *)(this + 49);
  }
  unsigned char *v4 = 0;
  *(void *)(this + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  return this;
}

__n128 re::AssetPath::hadParseError@<Q0>(uint64_t a1@<X0>, const char *a2@<X1>, const char **a3@<X2>, uint64_t a4@<X8>)
{
  long long v7 = (_anonymous_namespace_ *)re::AssetPath::reset(a1);
  v11.n128_u64[1] = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  re::DynamicString::setCapacity(&v11, 0);
  re::DynamicString::appendf((re::DynamicString *)&v11, "Invalid asset path: %s '%s'", a2, *a3);
  __n128 result = v11;
  uint64_t v9 = v12;
  uint64_t v10 = v13;
  *(unsigned char *)a4 = 0;
  *(void *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 200;
  *(void *)(a4 + 16) = re::AssetErrorCategory(void)::instance;
  *(__n128 *)(a4 + 24) = result;
  *(void *)(a4 + 40) = v9;
  *(void *)(a4 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v10;
  return result;
}

BOOL re::AssetPath::tryParseBuiltInPrefix(re::AssetPath *this, const char *a2, size_t a3, BOOL *a4)
{
  if (!matchPrefix("app", a2, a3))
  {
    if (matchPrefix("framework", a2, a3))
    {
      int v9 = 2;
LABEL_5:
      *(_DWORD *)this = v9;
      BOOL v8 = 1;
      goto LABEL_19;
    }
    if (matchPrefix("assetId", a2, a3))
    {
      BOOL v8 = 0;
      int v10 = 8;
    }
    else
    {
      BOOL matched = matchPrefix("engine", a2, a3);
      if (matched)
      {
        *(_DWORD *)this = 2;
        v13[0] = re::bundleFrameworkIdentifier((re *)matched);
        v13[1] = (const char *)strlen(v13[0]);
        re::DynamicString::operator=((re::AssetPath *)((char *)this + 8), (uint64_t)v13);
        BOOL v8 = 0;
        goto LABEL_19;
      }
      if (matchPrefix("memory", a2, a3))
      {
        BOOL v8 = 0;
        int v10 = 3;
      }
      else if (matchPrefix("singlefilearchive", a2, a3))
      {
        BOOL v8 = 0;
        int v10 = 7;
      }
      else
      {
        if (matchPrefix("peer", a2, a3))
        {
          int v9 = 4;
          goto LABEL_5;
        }
        BOOL result = matchPrefix("sourcepath", a2, a3);
        if (!result) {
          return result;
        }
        BOOL v8 = 0;
        int v10 = 5;
      }
    }
    *(_DWORD *)this = v10;
    goto LABEL_19;
  }
  BOOL v8 = 1;
  *(_DWORD *)this = 1;
LABEL_19:
  *a4 = v8;
  return 1;
}

BOOL matchPrefix(const char *a1, const char *a2, size_t a3)
{
  return strlen(a1) == a3 && !memcmp(a2, a1, a3);
}

BOOL re::AssetPath::tryParseExternalPrefix(uint64_t a1, const char *a2, size_t a3, os_unfair_lock_s *a4)
{
  BOOL v8 = a4 + 16;
  os_unfair_lock_lock(a4 + 16);
  BOOL v9 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)&a4[30], (uint64_t)&v11);
  os_unfair_lock_unlock(v8);
  if (v9)
  {
    *(_DWORD *)a1 = 6;
    re::DynamicString::operator=((re::DynamicString *)(a1 + 8), (re::DynamicString *)&v11);
  }
  if (v11 && (v12 & 1) != 0) {
    (*(void (**)(void))(*(void *)v11 + 40))();
  }
  return v9;
}

BOOL re::AssetPath::tryParseOtherResolverPrefix(re::AssetPath *this, const char *a2, size_t a3, os_unfair_lock_s *a4)
{
  if (v12) {
    BOOL v8 = *(const char **)&v13[7];
  }
  else {
    BOOL v8 = v13;
  }
  uint64_t ProviderForScheme = re::AssetProviderRegistry::tryGetProviderForScheme(a4, v8);
  if (ProviderForScheme)
  {
    *(_DWORD *)this = 9;
    re::DynamicString::operator=((re::AssetPath *)((char *)this + 8), (re::DynamicString *)&v11);
  }
  if (v11 && (v12 & 1) != 0) {
    (*(void (**)(void))(*(void *)v11 + 40))();
  }
  return ProviderForScheme != 0;
}

void re::AssetPath::parseRootAndFilePath(char *__s@<X1>, uint64_t a2@<X0>, const char **a3@<X2>, unsigned char *a4@<X8>)
{
  BOOL v8 = strchr(__s, 47);
  if (!v8)
  {
    uint64_t v11 = "Missing slash after prefix";
LABEL_8:
    re::AssetPath::hadParseError(a2, v11, a3, (uint64_t)a4);
    return;
  }
  BOOL v9 = v8;
  re::DynamicString::assign((re::DynamicString *)(a2 + 8), __s, v8 - __s);
  if (*(unsigned char *)(a2 + 16))
  {
    int v10 = *(char **)(a2 + 24);
    if (!v10) {
      goto LABEL_11;
    }
  }
  else
  {
    int v10 = (char *)(a2 + 17);
  }
  if (strpbrk(v10, ":<>|\"?*"))
  {
    uint64_t v11 = "Invalid characters in root";
    goto LABEL_8;
  }
LABEL_11:
  re::AssetPath::parseFilePath(v9, a2, (uint64_t)a3, 1, a4);
}

void re::AssetPath::parseFilePath(char *__s@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, int a4@<W3>, unsigned char *a5@<X8>)
{
  long long v7 = __s;
  int v10 = strrchr(__s, 46);
  if (v10)
  {
    uint64_t v11 = v10;
    char v12 = (_anonymous_namespace_ *)(v10 + 1);
    unint64_t v36 = 0;
    long long v37 = 0;
    uint64_t v38 = 0;
    re::DynamicString::setCapacity(&v35, 0);
    if (v14)
    {
      *(void *)(a2 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v14;
      if (dyld_program_sdk_at_least() && (*(_DWORD *)a2 - 3) >= 6)
      {
        re::DynamicString::assign((re::DynamicString *)&v35, v7, v11 - v7);
        if (v36)
        {
          long long v7 = v37;
          size_t v15 = v36 >> 1;
          if (!v37) {
            goto LABEL_14;
          }
        }
        else
        {
          long long v7 = (char *)&v36 + 1;
          size_t v15 = v36 >> 1;
        }
LABEL_12:
        if (strpbrk(v7, ":<>|\"?*") && *(_DWORD *)a2 != 6)
        {
          __n128 v17 = "Contains invalid characters in file path";
          goto LABEL_23;
        }
LABEL_14:
        if (strstr(v7, "//"))
        {
          __n128 v17 = "Paths can't have double slashes";
LABEL_23:
          __n128 v24 = re::AssetPath::hadParseError(a2, v17, (const char **)a3, (uint64_t)a5);
LABEL_24:
          if (v35)
          {
            if (v36) {
              (*(void (**)(__n128))(*v35 + 40))(v24);
            }
          }
          return;
        }
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        uint64_t v18 = (re::AssetPath *)re::DynamicString::setCapacity(&v31, 0);
        if (!v15)
        {
          re::internal::assertLog((re::internal *)6, v19, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < size()", "operator[]", 251, 0, 0);
          _os_crash();
          __break(1u);
          return;
        }
        int v20 = *v7;
        if (v20 == 47 || a4)
        {
          if (v20 == 47 && *(_DWORD *)a2 != 3 && *(_DWORD *)a2 != 5) {
            ++v7;
          }
        }
        else
        {
          ParentDirectory = re::AssetPath::getParentDirectory(v18, *(const re::AssetPath **)(a3 + 8));
          re::DynamicString::append((re::DynamicString *)&v31, ParentDirectory, v22);
          size_t v23 = strlen(v7);
          re::DynamicString::append((re::DynamicString *)&v31, v7, v23);
          if (v32)
          {
            long long v7 = v33;
            if (!v33)
            {
              uint64_t v25 = 0;
              goto LABEL_37;
            }
          }
          else
          {
            long long v7 = (char *)&v32 + 1;
          }
        }
        uint64_t v25 = v7 - 1;
        do
          int v26 = *++v25;
        while (v26 == 47);
LABEL_37:
        int v27 = 0;
        do
        {
          if (!v25) {
            break;
          }
          __int16 v28 = strchr(v25, 47);
          if (!v28) {
            break;
          }
          uint64_t v29 = v28;
          if (v28 - v25 == 2)
          {
            if (!strncmp(v25, "..", 2uLL)) {
              --v27;
            }
            else {
              ++v27;
            }
            if (v27 < 0)
            {
              __n128 v24 = re::AssetPath::hadParseError(a2, "Unsupported relative path", (const char **)a3, (uint64_t)a5);
              goto LABEL_53;
            }
          }
          else if (v28 - v25 == 1)
          {
            if (*v25 != 46) {
              ++v27;
            }
          }
          else
          {
            ++v27;
          }
          uint64_t v25 = v29 + 1;
        }
        while (v29[1]);
        v30[0] = v7;
        v30[1] = strlen(v7);
        re::AssetPath::standardizePath(v30, (re::DynamicString *)(a2 + 40));
        *a5 = 1;
LABEL_53:
        if (v31 && (v32 & 1) != 0) {
          (*(void (**)(void))(*v31 + 40))();
        }
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v16 = re::internal::AssetTypeRegistry::assetTypeWithExtension(*(re::internal::AssetTypeRegistry **)(a3 + 16), (const char *)v12);
      *(void *)(a2 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v16;
      if (!v16)
      {
        __n128 v17 = "Unknown asset type suffix";
        goto LABEL_23;
      }
    }
    size_t v15 = strlen(v7);
    if (!v7) {
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  re::AssetPath::hadParseError(a2, "Missing asset type suffix", (const char **)a3, (uint64_t)a5);
}

const char *re::AssetPath::getParentDirectory(re::AssetPath *this, const re::AssetPath *a2)
{
  if (!a2) {
    return "";
  }
  if (*(_DWORD *)a2 == 6)
  {
    uint64_t v3 = (*((void *)a2 + 2) & 1) != 0 ? (const char *)*((void *)a2 + 3) : (char *)a2 + 17;
    if (!strcmp(v3, "invalidResolver")) {
      return "i/n/v/a/l/i/d/";
    }
  }
  if (*((unsigned char *)a2 + 48)) {
    long long v4 = (char *)*((void *)a2 + 7);
  }
  else {
    long long v4 = (char *)a2 + 49;
  }
  if (strrchr(v4, 47)) {
    return v4;
  }
  else {
    return "";
  }
}

uint64_t anonymous namespace'::tryParseCompiledExtension(_anonymous_namespace_ *this, re::internal::AssetTypeRegistry *a2, const re::internal::AssetTypeRegistry *a3)
{
  if (strncmp("compiled", (const char *)this, 8uLL)) {
    return 0;
  }
  return re::internal::AssetTypeRegistry::assetTypeWithName(a2, (char *)this + 8);
}

unsigned char *re::AssetPath::standardizePath(void *a1, re::DynamicString *this)
{
  re::DynamicString::deinit(this);
  size_t v4 = a1[1] + 1;
  BOOL result = re::DynamicString::setCapacity(this, v4);
  v25[0] = "/";
  v25[1] = 1;
  if (!a1[1]) {
    return result;
  }
  unint64_t v7 = 0;
  while (1)
  {
    BOOL result = re::StringSlice::findFirstOf(a1, (uint64_t)v25, v7, (uint64_t)v23);
    unint64_t v9 = a1[1];
    unint64_t v10 = v23[0] ? v24 + 1 : a1[1];
    size_t v11 = v10 - v7;
    if (v10 - v7 != 2) {
      break;
    }
    if (v9 <= v7) {
      goto LABEL_37;
    }
    char v12 = (unsigned char *)*a1;
    if (*(unsigned char *)(*a1 + v7) != 46) {
      goto LABEL_26;
    }
    unint64_t v20 = v7 + 1;
    if (v9 <= v7 + 1) {
      goto LABEL_39;
    }
    if (v12[v20] != 47) {
      goto LABEL_26;
    }
LABEL_27:
    unint64_t v7 = v10;
    if (v10 >= a1[1]) {
      return result;
    }
  }
  if (v11 != 3)
  {
    char v12 = (unsigned char *)*a1;
LABEL_26:
    BOOL result = re::DynamicString::append(this, &v12[v7], v11);
    goto LABEL_27;
  }
  if (v9 > v7)
  {
    char v12 = (unsigned char *)*a1;
    if (*(unsigned char *)(*a1 + v7) != 46) {
      goto LABEL_26;
    }
    unint64_t v13 = v7 + 1;
    if (v9 <= v7 + 1) {
      goto LABEL_38;
    }
    if (v12[v13] != 46) {
      goto LABEL_26;
    }
    unint64_t v14 = v7 + 2;
    if (v9 <= v7 + 2) {
      goto LABEL_40;
    }
    if (v12[v14] != 47) {
      goto LABEL_26;
    }
    unint64_t v15 = *((void *)this + 1);
    if (v15) {
      unint64_t v16 = v15 >> 1;
    }
    else {
      unint64_t v16 = v15 >> 1;
    }
    if (v16 >= 2)
    {
      re::DynamicString::rfind((uint64_t)this, 47, v16 - 2, (uint64_t)v21);
      if (v21[0])
      {
        unint64_t v18 = v22 + 1;
        uint64_t v19 = this;
LABEL_34:
        BOOL result = re::DynamicString::resize(v19, v18, 0);
        goto LABEL_27;
      }
      if (!a1[1]) {
        goto LABEL_41;
      }
      char v12 = (unsigned char *)*a1;
    }
    uint64_t v19 = this;
    if (*v12 != 47)
    {
      unint64_t v18 = 0;
      goto LABEL_34;
    }
    re::DynamicString::resize(this, 1uLL, 0);
    BOOL result = (unsigned char *)re::DynamicString::operator[]((uint64_t)this, 0);
    unsigned char *result = 47;
    goto LABEL_27;
  }
  re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < size()", "operator[]", 251, v7, v9);
  _os_crash();
  __break(1u);
LABEL_37:
  re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < size()", "operator[]", 251, v7, v9);
  _os_crash();
  __break(1u);
LABEL_38:
  re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < size()", "operator[]", 251, v13, v9);
  _os_crash();
  __break(1u);
LABEL_39:
  re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < size()", "operator[]", 251, v20, v9);
  _os_crash();
  __break(1u);
LABEL_40:
  re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < size()", "operator[]", 251, v14, v9);
  _os_crash();
  __break(1u);
LABEL_41:
  re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, std::string::size_type size = %zu", "index < size()", "operator[]", 251, 0, 0);
  BOOL result = (unsigned char *)_os_crash();
  __break(1u);
  return result;
}

BOOL re::AssetPath::putCurrentAppNameInRoot(re::AssetPath *this)
{
  re::Bundle::application(&v9);
  id v2 = v9;
  if (v9)
  {
    re::Bundle::ID(&v9, (re::DynamicString *)&v7);
    re::DynamicString::operator=((re::AssetPath *)((char *)this + 8), (re::DynamicString *)&v7);
    if (v7 && (v8 & 1) != 0) {
      (*(void (**)(void))(*(void *)v7 + 40))();
    }
    unint64_t v3 = *((void *)this + 2);
    if (v3) {
      unint64_t v4 = v3 >> 1;
    }
    else {
      unint64_t v4 = v3 >> 1;
    }
    BOOL v5 = v4 != 0;
    id v2 = v9;
  }
  else
  {
    BOOL v5 = 0;
  }

  return v5;
}

double re::AssetPath::parse@<D0>(re::AssetPath *this@<X0>, char *a2@<X1>, const re::AssetPath *a3@<X2>, const re::internal::AssetTypeRegistry *a4@<X3>, os_unfair_lock_s *a5@<X4>, unsigned char *a6@<X8>)
{
  re::AssetPath::reset((uint64_t)this);
  v23[0] = a2;
  v23[1] = (const char *)a3;
  v23[2] = (const char *)a4;
  char v12 = strchr(a2, 58);
  if (!v12)
  {
    if (!*a2)
    {
      *(_DWORD *)this = 0;
      *a6 = 1;
      return result;
    }
    if (!a3) {
      goto LABEL_16;
    }
    int v17 = *(_DWORD *)a3;
    if (*(_DWORD *)a3 <= 8u)
    {
      if (((1 << v17) & 0x1EE) != 0)
      {
        *(_DWORD *)this = v17;
        re::DynamicString::operator=((re::AssetPath *)((char *)this + 8), (const re::AssetPath *)((char *)a3 + 8));
        goto LABEL_18;
      }
      if (!v17)
      {
LABEL_16:
        if (!re::AssetPath::putCurrentAppNameInRoot(this))
        {
          uint64_t v21 = "Can't find current app name";
          goto LABEL_22;
        }
        *(_DWORD *)this = 1;
LABEL_18:
        unint64_t v18 = a6;
        uint64_t v19 = this;
        unint64_t v16 = a2;
        int v20 = 0;
LABEL_19:
        re::AssetPath::parseFilePath(v16, (uint64_t)v19, (uint64_t)v23, v20, v18);
        return result;
      }
    }
    uint64_t v21 = "Invalid parent asset path";
    goto LABEL_22;
  }
  unint64_t v14 = v12;
  size_t v15 = v12 - a2;
  BOOL v22 = 0;
  if (re::AssetPath::tryParseBuiltInPrefix(this, a2, v12 - a2, &v22)
    || re::AssetPath::tryParseExternalPrefix((uint64_t)this, a2, v15, a5)
    || re::AssetPath::tryParseOtherResolverPrefix(this, a2, v15, a5))
  {
    unint64_t v16 = v14 + 1;
    if (v22)
    {
      re::AssetPath::parseRootAndFilePath(v16, (uint64_t)this, v23, a6);
      return result;
    }
    unint64_t v18 = a6;
    uint64_t v19 = this;
    int v20 = 1;
    goto LABEL_19;
  }
  uint64_t v21 = "Unknown prefix";
LABEL_22:
  *(void *)&double result = re::AssetPath::hadParseError((uint64_t)this, v21, v23, (uint64_t)a6).n128_u64[0];
  return result;
}

re::DynamicString *re::AssetPath::fullAssetPath(re::DynamicString *this, re::DynamicString *a2)
{
  unint64_t v3 = this;
  switch(*(_DWORD *)this)
  {
    case 0:
      v45[0] = "";
      v45[1] = 0;
      return re::DynamicString::operator=(a2, (uint64_t)v45);
    case 1:
      unint64_t v9 = *((void *)this + 2);
      if (v9) {
        unint64_t v10 = v9 >> 1;
      }
      else {
        unint64_t v10 = v9 >> 1;
      }
      uint64_t v11 = (uint64_t)this + 40;
      unint64_t v12 = *((void *)this + 6);
      if (v12) {
        unint64_t v13 = v12 >> 1;
      }
      else {
        unint64_t v13 = v12 >> 1;
      }
      re::DynamicString::setCapacity(a2, v10 + v13 + 7);
      unint64_t v14 = "app:";
      size_t v15 = a2;
      size_t v16 = 4;
      goto LABEL_25;
    case 2:
      unint64_t v17 = *((void *)this + 2);
      if (v17) {
        unint64_t v18 = v17 >> 1;
      }
      else {
        unint64_t v18 = v17 >> 1;
      }
      uint64_t v11 = (uint64_t)this + 40;
      unint64_t v19 = *((void *)this + 6);
      if (v19) {
        unint64_t v20 = v19 >> 1;
      }
      else {
        unint64_t v20 = v19 >> 1;
      }
      re::DynamicString::setCapacity(a2, v18 + v20 + 12);
      unint64_t v14 = "framework:";
      size_t v15 = a2;
      size_t v16 = 10;
LABEL_25:
      re::DynamicString::append(v15, v14, v16);
      if (*((unsigned char *)v3 + 16)) {
        uint64_t v21 = (const char *)*((void *)v3 + 3);
      }
      else {
        uint64_t v21 = (char *)v3 + 17;
      }
      size_t v39 = strlen(v21);
      re::DynamicString::append(a2, v21, v39);
      re::DynamicString::append(a2, "/", 1uLL);
      if (*((unsigned char *)v3 + 48)) {
        uint64_t v40 = (const char *)*((void *)v3 + 7);
      }
      else {
        uint64_t v40 = (char *)v3 + 49;
      }
      size_t v41 = strlen(v40);
      re::DynamicString::append(a2, v40, v41);
      if (this) {
        return this;
      }
      re::DynamicString::append(a2, ".", 1uLL);
      int v42 = *(const char **)(*((void *)v3 + 9) + 8);
      goto LABEL_66;
    case 3:
      unint64_t v22 = *((void *)this + 6);
      if (v22) {
        unint64_t v23 = v22 >> 1;
      }
      else {
        unint64_t v23 = v22 >> 1;
      }
      re::DynamicString::setCapacity(a2, v23 + 8);
      uint64_t v24 = "memory:";
      uint64_t v25 = a2;
      size_t v26 = 7;
      goto LABEL_63;
    case 4:
      unint64_t v27 = *((void *)this + 2);
      if (v27) {
        unint64_t v28 = v27 >> 1;
      }
      else {
        unint64_t v28 = v27 >> 1;
      }
      unint64_t v29 = *((void *)this + 6);
      if (v29) {
        unint64_t v30 = v29 >> 1;
      }
      else {
        unint64_t v30 = v29 >> 1;
      }
      re::DynamicString::setCapacity(a2, v28 + v30 + 7);
      re::DynamicString::append(a2, "peer:", 5uLL);
      if (*((unsigned char *)v3 + 16)) {
        uint64_t v31 = (const char *)*((void *)v3 + 3);
      }
      else {
        uint64_t v31 = (char *)v3 + 17;
      }
      size_t v43 = strlen(v31);
      re::DynamicString::append(a2, v31, v43);
      uint64_t v24 = "/";
      goto LABEL_62;
    case 5:
      unint64_t v32 = *((void *)this + 6);
      if (v32) {
        unint64_t v33 = v32 >> 1;
      }
      else {
        unint64_t v33 = v32 >> 1;
      }
      re::DynamicString::setCapacity(a2, v33 + 12);
      uint64_t v24 = "sourcepath:";
      uint64_t v25 = a2;
      size_t v26 = 11;
      goto LABEL_63;
    case 6:
    case 9:
      unint64_t v4 = *((void *)this + 2);
      if (v4) {
        unint64_t v5 = v4 >> 1;
      }
      else {
        unint64_t v5 = v4 >> 1;
      }
      unint64_t v6 = *((void *)this + 6);
      if (v6) {
        unint64_t v7 = v6 >> 1;
      }
      else {
        unint64_t v7 = v6 >> 1;
      }
      re::DynamicString::setCapacity(a2, v5 + v7 + 2);
      if (*((unsigned char *)v3 + 16)) {
        char v8 = (const char *)*((void *)v3 + 3);
      }
      else {
        char v8 = (char *)v3 + 17;
      }
      size_t v38 = strlen(v8);
      re::DynamicString::append(a2, v8, v38);
      uint64_t v24 = ":";
LABEL_62:
      uint64_t v25 = a2;
      size_t v26 = 1;
      goto LABEL_63;
    case 7:
      unint64_t v34 = *((void *)this + 6);
      if (v34) {
        unint64_t v35 = v34 >> 1;
      }
      else {
        unint64_t v35 = v34 >> 1;
      }
      re::DynamicString::setCapacity(a2, v35 + 19);
      uint64_t v24 = "singlefilearchive:";
      uint64_t v25 = a2;
      size_t v26 = 18;
      goto LABEL_63;
    case 8:
      unint64_t v36 = *((void *)this + 6);
      if (v36) {
        unint64_t v37 = v36 >> 1;
      }
      else {
        unint64_t v37 = v36 >> 1;
      }
      re::DynamicString::setCapacity(a2, v37 + 9);
      uint64_t v24 = "assetId:";
      uint64_t v25 = a2;
      size_t v26 = 8;
LABEL_63:
      re::DynamicString::append(v25, v24, v26);
      if (*((unsigned char *)v3 + 48)) {
        int v42 = (const char *)*((void *)v3 + 7);
      }
      else {
        int v42 = (char *)v3 + 49;
      }
LABEL_66:
      size_t v44 = strlen(v42);
      this = (re::DynamicString *)re::DynamicString::append(a2, v42, v44);
      break;
    default:
      return this;
  }
  return this;
}

re::DynamicString *re::AssetPath::fullAssetPath@<X0>(re::AssetPath *this@<X0>, re::DynamicString *a2@<X8>)
{
  uint64_t v4 = *((void *)this + 1);
  *((void *)a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = v4;
  *((void *)a2 + 1) = 0;
  re::DynamicString::setCapacity(a2, 0);
  return re::AssetPath::fullAssetPath(this, a2);
}

re::DynamicString *re::AssetPath::makeRelativeAssetPath@<X0>(re::AssetPath *this@<X0>, const re::AssetPath *a2@<X1>, re::DynamicString *a3@<X8>)
{
  BOOL v6 = *(_DWORD *)this != *(_DWORD *)a2 || (*(_DWORD *)this | 8) == 8;
  if (v6
    || ((*((void *)this + 2) & 1) != 0 ? (unint64_t v10 = (const char *)*((void *)this + 3)) : (unint64_t v10 = (char *)this + 17),
        (*((void *)a2 + 2) & 1) != 0 ? (uint64_t v11 = (const char *)*((void *)a2 + 3)) : (uint64_t v11 = (char *)a2 + 17),
        unint64_t v12 = (_anonymous_namespace_ *)strcmp(v10, v11),
        v12))
  {
    uint64_t v7 = *((void *)a2 + 1);
    *((void *)a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    *((void *)a3 + 3) = 0;
    *(void *)a3 = v7;
    *((void *)a3 + 1) = 0;
    re::DynamicString::setCapacity(a3, 0);
    return re::AssetPath::fullAssetPath(a2, a3);
  }
  else
  {
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + 1) = 0u;
    unint64_t v13 = (re::AssetPath *)re::DynamicString::setCapacity(a3, 0);
    ParentDirectory = re::AssetPath::getParentDirectory(v13, this);
    size_t v16 = v14;
    unint64_t v17 = *(const char **)(*((void *)a2 + 9) + 8);
    if (*((unsigned char *)a2 + 48)) {
      unint64_t v18 = (const char *)*((void *)a2 + 7);
    }
    else {
      unint64_t v18 = (char *)a2 + 49;
    }
    if (!strncmp(v18, ParentDirectory, v14))
    {
      unint64_t v19 = &v18[v16];
    }
    else
    {
      re::DynamicString::append(a3, "/", 1uLL);
      if (*((void *)a2 + 6)) {
        unint64_t v19 = (const char *)*((void *)a2 + 7);
      }
      else {
        unint64_t v19 = (char *)a2 + 49;
      }
    }
    size_t v20 = strlen(v19);
    re::DynamicString::append(a3, v19, v20);
    re::DynamicString::append(a3, ".", 1uLL);
    size_t v21 = strlen(v17);
    return (re::DynamicString *)re::DynamicString::append(a3, v17, v21);
  }
}

re::DynamicString *re::AssetPath::assetPathForNetwork@<X0>(re::AssetPath *this@<X0>, const char *a2@<X1>, re::DynamicString *a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)this == 3)
  {
    size_t v9 = strlen(a2);
    re::DynamicString::append(a3, a2, v9);
    re::DynamicString::append(a3, "/", 1uLL);
    if (*((unsigned char *)this + 48)) {
      unint64_t v10 = (const char *)*((void *)this + 7);
    }
    else {
      unint64_t v10 = (char *)this + 49;
    }
    size_t v12 = strlen(v10);
    return (re::DynamicString *)re::DynamicString::append(a3, v10, v12);
  }
  else if (*(_DWORD *)this == 5)
  {
    unint64_t v5 = *re::assetsLogObjects(this);
    BOOL v6 = (_anonymous_namespace_ *)os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      unint64_t v13 = v5;
      re::AssetPath::fullAssetPath(this, (re::DynamicString *)&v15);
      if (v16) {
        size_t v14 = *(unsigned char **)&v17[7];
      }
      else {
        size_t v14 = v17;
      }
      *(_DWORD *)long long buf = 136315138;
      unint64_t v19 = v14;
      _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "Can't get network asset handle for source asset path '%s'", buf, 0xCu);

      BOOL v6 = v15;
      if (v15)
      {
        if (v16) {
          BOOL v6 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v15 + 40))();
        }
      }
    }
  }
  else
  {
    uint64_t v11 = *((void *)this + 1);
    *((void *)a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    *((void *)a3 + 3) = 0;
    *(void *)a3 = v11;
    *((void *)a3 + 1) = 0;
    re::DynamicString::setCapacity(a3, 0);
    return re::AssetPath::fullAssetPath(this, a3);
  }
}

uint64_t re::AssetPath::filePathToAsset(re::AssetPath *this, re::DynamicString *a2, uint64_t a3, os_unfair_lock_s *a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  int v4 = a3;
  uint64_t BundleResource = 0;
  switch(*(_DWORD *)this)
  {
    case 0:
    case 3:
    case 4:
    case 7:
    case 8:
      return BundleResource;
    case 1:
      char v8 = *(const char **)(*((void *)this + 9) + 8);
      if (*((unsigned char *)this + 16)) {
        size_t v9 = (re::Bundle *)*((void *)this + 3);
      }
      else {
        size_t v9 = (re::AssetPath *)((char *)this + 17);
      }
      re::Bundle::searchForAppOrAppExtension(v9, &buf);
      uint64_t v11 = (void *)buf;
      if (!(void)buf)
      {
        re::Bundle::application(&v22);
        id v12 = v22;
        unint64_t v13 = (void *)buf;
        id v22 = 0;
        *(void *)&long long buf = v12;

        uint64_t v11 = (void *)buf;
      }
      id v21 = v11;

      id v14 = (id)buf;
      goto LABEL_26;
    case 2:
      if (*((unsigned char *)this + 16)) {
        unint64_t v10 = (re::Bundle *)*((void *)this + 3);
      }
      else {
        unint64_t v10 = (re::AssetPath *)((char *)this + 17);
      }
      size_t v15 = *(const char **)(*((void *)this + 9) + 8);
      re::Bundle::findWithBundleID(v10, &v22);
      if (v22)
      {
        id v20 = v22;
      }
      else
      {
        unint64_t v17 = *re::assetsLogObjects(v16);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          if (*((unsigned char *)this + 16)) {
            unint64_t v19 = (char *)*((void *)this + 3);
          }
          else {
            unint64_t v19 = (char *)this + 17;
          }
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v19;
          _os_log_error_impl(&dword_233120000, v17, OS_LOG_TYPE_ERROR, "Unable to make compiled asset '%s' file path because no valid framework was found", (uint8_t *)&buf, 0xCu);
        }
        uint64_t BundleResource = 0;
      }
      id v14 = v22;
LABEL_26:

      break;
    case 5:
      re::DynamicString::operator=(a2, (re::AssetPath *)((char *)this + 40));
      if ((v4 & 1) == 0)
      {
        re::DynamicString::operator=(a2, (re::DynamicString *)&buf);
        if ((void)buf)
        {
          if (BYTE8(buf)) {
            (*(void (**)(void))(*(void *)buf + 40))();
          }
        }
      }
      uint64_t BundleResource = 1;
      break;
    case 6:
      re::AssetPath::getPathFromResolver((re::AssetPath *)&buf, this, a4);
      uint64_t BundleResource = (_BYTE)buf != 0;
      if ((_BYTE)buf)
      {
        re::DynamicString::operator=(a2, (re::DynamicString *)((char *)&buf + 8));
        if ((_BYTE)buf)
        {
          if (*((void *)&buf + 1) && (v24 & 1) != 0) {
            (*(void (**)(void))(**((void **)&buf + 1) + 40))();
          }
        }
      }
      break;
    default:
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, a3, a4, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "filePathToAsset", 770);
      _os_crash();
      __break(1u);
      JUMPOUT(0x23333C9C8);
  }
  return BundleResource;
}

uint64_t anonymous namespace'::findBundleResource(re::DynamicString *a1, id *a2, _anonymous_namespace_ *a3, const char *a4, int a5, uint64_t a6)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  char v13 = (char)v12;
  if ((v12 & 1) != 0 || a5)
  {
    id v14 = (*((void *)a3 + 1) & 1) != 0 ? (const char *)*((void *)a3 + 2) : (char *)a3 + 9;
    id v12 = (char *)re::Bundle::pathForResource(a2, v14, a1);
    if (v12) {
      return 1;
    }
  }
  if ((v13 & 1) == 0)
  {
    if (buf[8]) {
      char v16 = *(const char **)&v32[2];
    }
    else {
      char v16 = &buf[9];
    }
    if (re::Bundle::pathForResource(a2, v16, a1))
    {
      uint64_t v17 = dyld_program_sdk_at_least();
      if (v17)
      {
        if (*(void *)buf)
        {
          if (buf[8]) {
            (*(void (**)(void))(**(void **)buf + 40))();
          }
        }
        return 1;
      }
      unint64_t v18 = *re::assetsLogObjects((re *)v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        if (buf[8]) {
          unint64_t v19 = *(unsigned char **)&v32[2];
        }
        else {
          unint64_t v19 = &buf[9];
        }
        if (*((void *)a3 + 1)) {
          id v20 = (char *)*((void *)a3 + 2);
        }
        else {
          id v20 = (char *)a3 + 9;
        }
        int v24 = 136315650;
        uint64_t v25 = a6;
        __int16 v26 = 2080;
        unint64_t v27 = v19;
        __int16 v28 = 2080;
        unint64_t v29 = v20;
        _os_log_impl(&dword_233120000, v18, OS_LOG_TYPE_DEFAULT, "%s compiled resource '%s' exists, but was requested as '%s'", (uint8_t *)&v24, 0x20u);
      }
    }
    id v12 = *(char **)buf;
    if (*(void *)buf && (buf[8] & 1) != 0) {
      id v12 = (char *)(*(uint64_t (**)(void))(**(void **)buf + 40))();
    }
  }
  id v21 = *re::assetsLogObjects((re *)v12);
  BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v22)
  {
    if (*((void *)a3 + 1)) {
      unint64_t v23 = (char *)*((void *)a3 + 2);
    }
    else {
      unint64_t v23 = (char *)a3 + 9;
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = a6;
    __int16 v31 = 2080;
    *(void *)unint64_t v32 = v23;
    _os_log_impl(&dword_233120000, v21, OS_LOG_TYPE_DEFAULT, "Failed to find %s resource file '%s'", buf, 0x16u);
    return 0;
  }
  return result;
}

re::DynamicString *anonymous namespace'::setExtension@<X0>(_anonymous_namespace_ *this@<X0>, const re::DynamicString *a2@<X1>, re::DynamicString *a3@<X8>)
{
  uint64_t result = re::DynamicString::DynamicString(a3, this);
  if ((v7 & 1) == 0)
  {
    re::DynamicString::append(a3, ".", 1uLL);
    size_t v9 = strlen((const char *)a2);
    return (re::DynamicString *)re::DynamicString::append(a3, (const char *)a2, v9);
  }
  return result;
}

void re::AssetPath::getPathFromResolver(re::AssetPath *this, const re::AssetProviderRegistry *a2, os_unfair_lock_s *a3)
{
  if (a3)
  {
    int v4 = (const re::AssetProviderRegistry *)((char *)a2 + 40);
    unint64_t v5 = (const re::AssetProviderRegistry *)((char *)a2 + 8);
    re::AssetProviderRegistry::getPathFromResolver(a3, v5, v4, (uint64_t)this);
  }
  else
  {
    BOOL v6 = *re::assetsLogObjects(this);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)unsigned __int8 v7 = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Tried to open resolver asset path without a resolve manager defined", v7, 2u);
    }
    *(unsigned char *)this = 0;
  }
}

BOOL re::AssetPath::temp_filePathToSourceAssetInBundle(re::AssetPath *this, re::DynamicString *a2, os_unfair_lock_s *a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  BOOL v5 = 0;
  switch(*(_DWORD *)this)
  {
    case 0:
    case 3:
    case 4:
    case 7:
      return v5;
    case 1:
      if (*((unsigned char *)this + 16)) {
        BOOL v6 = (re::Bundle *)*((void *)this + 3);
      }
      else {
        BOOL v6 = (re::AssetPath *)((char *)this + 17);
      }
      re::Bundle::searchForAppOrAppExtension(v6, &v22);
      if (v22)
      {
        if (*((unsigned char *)this + 48)) {
          unint64_t v10 = (const char *)*((void *)this + 7);
        }
        else {
          unint64_t v10 = (char *)this + 49;
        }
        BOOL v16 = re::Bundle::pathForResource(&v22, v10, a2);
        if (v16) {
          goto LABEL_36;
        }
        char v13 = *re::assetsLogObjects((re *)v16);
        if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          goto LABEL_49;
        }
        if (*((unsigned char *)this + 48)) {
          uint64_t v17 = (char *)*((void *)this + 7);
        }
        else {
          uint64_t v17 = (char *)this + 49;
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)int v24 = v17;
        id v20 = "Failed to find app resource file '%s'";
      }
      else
      {
        char v13 = *re::assetsLogObjects(v9);
        if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          goto LABEL_49;
        }
        if (*((unsigned char *)this + 16)) {
          id v14 = (char *)*((void *)this + 3);
        }
        else {
          id v14 = (char *)this + 17;
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)int v24 = v14;
        id v20 = "Unable to make source asset file path because missing app '%s'";
      }
      goto LABEL_48;
    case 2:
      if (*((unsigned char *)this + 16)) {
        unsigned __int8 v7 = (re::Bundle *)*((void *)this + 3);
      }
      else {
        unsigned __int8 v7 = (re::AssetPath *)((char *)this + 17);
      }
      re::Bundle::findWithBundleID(v7, &v22);
      if (!v22)
      {
        char v13 = *re::assetsLogObjects(v11);
        if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          goto LABEL_49;
        }
        if (*((unsigned char *)this + 16)) {
          size_t v15 = (char *)*((void *)this + 3);
        }
        else {
          size_t v15 = (char *)this + 17;
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)int v24 = v15;
        id v20 = "Unable to make compiled asset '%s' file path because no valid framework was found";
        goto LABEL_48;
      }
      if (*((unsigned char *)this + 48)) {
        id v12 = (const char *)*((void *)this + 7);
      }
      else {
        id v12 = (char *)this + 49;
      }
      BOOL v18 = re::Bundle::pathForResource(&v22, v12, a2);
      if (v18)
      {
LABEL_36:
        BOOL v5 = 1;
        goto LABEL_50;
      }
      char v13 = *re::assetsLogObjects((re *)v18);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        if (*((unsigned char *)this + 48)) {
          unint64_t v19 = (char *)*((void *)this + 7);
        }
        else {
          unint64_t v19 = (char *)this + 49;
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)int v24 = v19;
        id v20 = "Failed to find framework resource file '%s'";
LABEL_48:
        _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, v20, buf, 0xCu);
      }
LABEL_49:
      BOOL v5 = 0;
LABEL_50:

      return v5;
    case 5:
      if (*((unsigned char *)this + 48)) {
        char v8 = (const char *)*((void *)this + 7);
      }
      else {
        char v8 = (char *)this + 49;
      }
      re::DynamicString::assignf(a2, "%s", v8);
      return 1;
    case 6:
      re::AssetPath::getPathFromResolver((re::AssetPath *)buf, this, a3);
      BOOL v5 = buf[0] != 0;
      if (buf[0])
      {
        re::DynamicString::operator=(a2, (re::DynamicString *)&v24[4]);
        if (buf[0])
        {
          if (*(void *)&v24[4] && (v25 & 1) != 0) {
            (*(void (**)(void))(**(void **)&v24[4] + 40))();
          }
        }
      }
      return v5;
    default:
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, a3, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "temp_filePathToSourceAssetInBundle", 825);
      _os_crash();
      __break(1u);
      JUMPOUT(0x23333D0F8);
  }
}

uint64_t re::AssetPath::initMemoryAssetPath(void *a1, const char *a2, uint64_t a3)
{
  *(_DWORD *)a1 = 3;
  uint64_t v6 = a1[2];
  if (v6)
  {
    a1[2] = 1;
    unsigned __int8 v7 = (unsigned char *)a1[3];
  }
  else
  {
    *((unsigned char *)a1 + 16) = v6 & 1;
    unsigned __int8 v7 = (char *)a1 + 17;
  }
  *unsigned __int8 v7 = 0;
  a1[9] = a3;
  re::DynamicString::operator=((re::DynamicString *)(a1 + 5), (re::DynamicString *)v11);
  if (*(void *)&v11[0])
  {
    if (BYTE8(v11[0])) {
      (*(void (**)(void))(**(void **)&v11[0] + 40))();
    }
    memset(v11, 0, sizeof(v11));
  }
  uint64_t result = v9;
  if (v9)
  {
    if (v10) {
      return (*(uint64_t (**)(void))(*(void *)v9 + 40))();
    }
  }
  return result;
}

re::DynamicString *re::AssetPath::initSingleFileArchiveAssetPath(uint64_t a1, char *__s, uint64_t a3)
{
  *(_DWORD *)a1 = 7;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    *(void *)(a1 + 16) = 1;
    uint64_t v6 = *(unsigned char **)(a1 + 24);
  }
  else
  {
    *(unsigned char *)(a1 + 16) = v5 & 1;
    uint64_t v6 = (unsigned char *)(a1 + 17);
  }
  *uint64_t v6 = 0;
  v8[0] = __s;
  v8[1] = strlen(__s);
  uint64_t result = re::DynamicString::operator=((re::DynamicString *)(a1 + 40), (uint64_t)v8);
  *(void *)(a1 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = a3;
  return result;
}

uint64_t re::AssetPath::initAssetIdAssetPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = 8;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    *(void *)(a1 + 16) = 1;
    uint64_t v6 = *(unsigned char **)(a1 + 24);
  }
  else
  {
    *(unsigned char *)(a1 + 16) = v5 & 1;
    uint64_t v6 = (unsigned char *)(a1 + 17);
  }
  *uint64_t v6 = 0;
  re::DynamicString::format((re::DynamicString *)"%llu.%s", (re::DynamicString *)&v8, a2, *(void *)(a3 + 8));
  re::DynamicString::operator=((re::DynamicString *)(a1 + 40), (re::DynamicString *)&v8);
  uint64_t result = v8;
  if (v8 && (v9 & 1) != 0) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)v8 + 40))();
  }
  *(void *)(a1 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = a3;
  return result;
}

BOOL re::AssetPath::getAssetId(re::AssetPath *this, unint64_t *a2)
{
  if (*(_DWORD *)this != 8) {
    return 0;
  }
  if (*((unsigned char *)this + 48)) {
    id v2 = (const char *)*((void *)this + 7);
  }
  else {
    id v2 = (char *)this + 49;
  }
  return sscanf(v2, "%llu", a2) == 1;
}

char *anonymous namespace'::hasExtension(uint64_t a1, const char *a2)
{
  if (*(void *)(a1 + 8)) {
    unint64_t v3 = *(char **)(a1 + 16);
  }
  else {
    unint64_t v3 = (char *)(a1 + 9);
  }
  uint64_t result = strrchr(v3, 46);
  if (result) {
    return (char *)(strcmp(result + 1, a2) == 0);
  }
  return result;
}

re::DynamicString *re::AssetPath::initPeerAssetPath(uint64_t a1, char *__s, const char *a3, uint64_t a4)
{
  *(_DWORD *)a1 = 4;
  unsigned __int8 v7 = (re::DynamicString *)(a1 + 8);
  char v10 = __s;
  size_t v11 = strlen(__s);
  re::DynamicString::operator=(v7, (uint64_t)&v10);
  size_t v8 = strlen(a3);
  char v10 = (char *)a3;
  size_t v11 = v8;
  uint64_t result = re::DynamicString::operator=((re::DynamicString *)(a1 + 40), (uint64_t)&v10);
  *(void *)(a1 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = a4;
  return result;
}

re::DynamicString *re::AssetPath::invalidAssetPath@<X0>(re::AssetPath *this@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(a2 + 16) = 0;
  unint64_t v3 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)(a2 + 8), 0);
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  re::DynamicString::setCapacity((void *)(a2 + 40), 0);
  *(void *)(a2 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(_DWORD *)a2 = 6;
  uint64_t v5 = "invalidResolver";
  uint64_t v6 = 15;
  re::DynamicString::operator=((re::DynamicString *)(a2 + 8), (uint64_t)&v5);
  uint64_t v5 = "none";
  uint64_t v6 = 4;
  uint64_t result = re::DynamicString::operator=((re::DynamicString *)(a2 + 40), (uint64_t)&v5);
  *(void *)(a2 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  return result;
}

const char *re::AssetPath::removingCompiledExtension@<X0>(re::AssetPath *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = strrchr((char *)this, 46);
  if (result && (uint64_t v6 = result, result = (const char *)strncmp(".compiled", result, 9uLL), !result))
  {
    *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = this;
    *(void *)(a2 + 16) = v6 - (const char *)this;
    char v7 = 1;
  }
  else
  {
    char v7 = 0;
  }
  *(unsigned char *)a2 = v7;
  return result;
}

re::AssetPath *re::AssetPath::fixLegacyPath(re::AssetPath *this, const char *a2)
{
  id v2 = this;
  uint64_t v8 = *MEMORY[0x263EF8340];
  strcpy(__s1, "engine:");
  if (!strncmp(__s1, (const char *)this, 7uLL)
    || !strncmp("framework:", (const char *)v2, 0xAuLL)
    && re::isEngineFrameworkPath((re::AssetPath *)((char *)v2 + 10), v3))
  {
    re::AssetPath::removingCompiledExtension(v2, (uint64_t)v5);
    if (v5[0]) {
      return (re::AssetPath *)v6;
    }
  }
  strlen((const char *)v2);
  return v2;
}

char *re::AssetPath::getAssetTypeNameFromPath(re::AssetPath *this, const char *a2)
{
  uint64_t result = strrchr((char *)this, 46);
  if (result)
  {
    if (!strncmp("compiled", (const char *)this, 8uLL)) {
      return (char *)this + 8;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t re::AssetPath::getAssetTypeFromFilePath(re::AssetPath *this, re::internal::AssetTypeRegistry *a2, const re::internal::AssetTypeRegistry *a3)
{
  uint64_t result = (uint64_t)strrchr((char *)this, 46);
  if (result)
  {
    uint64_t v6 = (const char *)(result + 1);
    if (!result)
    {
      return re::internal::AssetTypeRegistry::assetTypeWithExtension(a2, v6);
    }
  }
  return result;
}

BOOL re::AssetPath::pathIsAppBased(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  unint64_t v2 = v1 >> 1;
  if ((v1 & 1) == 0) {
    unint64_t v2 = (v1 >> 1) & 0x7C;
  }
  if (v2 < 4) {
    return 0;
  }
  if (v1) {
    unint64_t v3 = *(const char **)(a1 + 16);
  }
  else {
    unint64_t v3 = (const char *)(a1 + 9);
  }
  return strncmp(v3, "app:", 4uLL) == 0;
}

char *re::AssetPath::updateWithCompiledExtension(char *result, uint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = (_anonymous_namespace_ *)result;
    unint64_t v3 = *(const char **)(a2 + 8);
    int v4 = (*((void *)result + 1) & 1) != 0 ? (char *)*((void *)result + 2) : result + 9;
    uint64_t result = strrchr(v4, 46);
    if (result)
    {
      uint64_t result = (char *)strcmp(result + 1, v3);
      if (result)
      {
        if (*(void *)&v6[0])
        {
          if (BYTE8(v6[0])) {
            (*(void (**)(void))(**(void **)&v6[0] + 40))();
          }
          memset(v6, 0, sizeof(v6));
        }
        re::DynamicString::append(v2, ".", 1uLL);
        size_t v5 = strlen(v3);
        return (char *)re::DynamicString::append(v2, v3, v5);
      }
    }
  }
  return result;
}

void zip_copy_with_read_handle()
{
}

uint64_t zip_find_central_directory(void *a1)
{
  if ((*((unsigned char *)a1 + 137) & 1) == 0) {
    return 0;
  }
  *((unsigned char *)a1 + 137) &= ~2u;
  unint64_t v2 = (void **)a1[19];
  unint64_t v3 = (void **)a1[20];
  if (v3 == v2)
  {
    int v4 = a1 + 23;
    unint64_t v3 = (void **)a1[19];
  }
  else
  {
    int v4 = a1 + 23;
    unint64_t v5 = a1[22];
    uint64_t v6 = &v2[v5 / 0x27];
    unint64_t v7 = (unint64_t)*v6;
    unint64_t v8 = (unint64_t)*v6 + 104 * (v5 % 0x27);
    unint64_t v9 = (unint64_t)v2[(a1[23] + v5) / 0x27] + 104 * ((a1[23] + v5) % 0x27);
    if (v8 != v9)
    {
      do
      {
        if (*(char *)(v8 + 31) < 0)
        {
          operator delete(*(void **)(v8 + 8));
          unint64_t v7 = (unint64_t)*v6;
        }
        v8 += 104;
        if (v8 - v7 == 4056)
        {
          unint64_t v10 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v10;
          unint64_t v8 = v10;
        }
      }
      while (v8 != v9);
      unint64_t v2 = (void **)a1[19];
      unint64_t v3 = (void **)a1[20];
    }
  }
  void *v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v12 = a1[20];
      unint64_t v2 = (void **)(a1[19] + 8);
      a1[19] = v2;
      unint64_t v11 = v12 - (void)v2;
    }
    while (v11 > 0x10);
  }
  if (v11 >> 3 == 1)
  {
    uint64_t v13 = 19;
  }
  else
  {
    if (v11 >> 3 != 2) {
      goto LABEL_18;
    }
    uint64_t v13 = 39;
  }
  a1[22] = v13;
LABEL_18:
  unint64_t v14 = ((uint64_t (*)(void, void, uint64_t))a1[1])(*a1, 0, 2);
  if (v14 >= 0x16)
  {
    unint64_t v15 = v14;
    unint64_t v16 = 0;
    if (v14 - 22 >= 0x10000) {
      unint64_t v17 = 0x10000;
    }
    else {
      unint64_t v17 = v14 - 22;
    }
    BOOL v18 = 1;
    for (uint64_t i = -22; ; --i)
    {
      size_2[0] = 0;
      ((void (*)(void, unint64_t, void))a1[1])(*a1, v15 + i, 0);
      if (((uint64_t (*)(void, _DWORD *, uint64_t))a1[2])(*a1, size_2, 4) != 4) {
        goto LABEL_42;
      }
      if (size_2[0] == 101010256) {
        break;
      }
      BOOL v18 = v16 < v17;
      if (v17 + 1 == ++v16) {
        return 0;
      }
    }
    unint64_t v21 = v15 + i;
    ((void (*)(void, unint64_t, void))a1[1])(*a1, v15 + i, 0);
    uint64_t v22 = ((uint64_t (*)(void, char *, uint64_t))a1[2])(*a1, v39, 22);
    int v23 = 0;
    if (v22 != 22) {
      return v18 & v23;
    }
    uint64_t v24 = size;
    if (!size) {
      goto LABEL_33;
    }
    char v25 = malloc_type_malloc(size, 0xC2A086EBuLL);
    if (*((unsigned char *)a1 + 88)) {
      free((void *)a1[9]);
    }
    a1[9] = v25;
    a1[10] = v24;
    *((unsigned char *)a1 + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 1;
    if (((uint64_t (*)(void, void *, uint64_t))a1[2])(*a1, v25, v24) == a1[10])
    {
LABEL_33:
      if (v21 < 0x14)
      {
        uint64_t v26 = 0;
      }
      else
      {
        uint64_t v26 = v15 - v16 - 42;
        ((void (*)(void, uint64_t, void))a1[1])(*a1, v26, 0);
        uint64_t v27 = ((uint64_t (*)(void, _DWORD *, uint64_t))a1[2])(*a1, size_2, 4);
        int v23 = 0;
        if (v27 != 4) {
          return v18 & v23;
        }
      }
      if (size_2[0] != 117853008)
      {
        ((void (*)(void, void, void))a1[1])(*a1, v41, 0);
        uint64_t v31 = ((uint64_t (*)(void, _DWORD *, uint64_t))a1[2])(*a1, size_2, 4);
        int v23 = 0;
        if (v31 != 4) {
          return v18 & v23;
        }
        if (size_2[0] == 33639248)
        {
          uint64_t v28 = v41;
          unsigned int v32 = v40;
          a1[6] = v41;
          uint64_t v30 = v32 + v28;
        }
        else
        {
          uint64_t v33 = v40;
          uint64_t v28 = v15 - v40 - v16 - 22;
          a1[6] = v28;
          uint64_t v30 = v15 + v33 - v16 - 22;
        }
LABEL_48:
        a1[7] = v28;
        a1[8] = v30;
        int v23 = 1;
        return v18 & v23;
      }
      ((void (*)(void, uint64_t, void))a1[1])(*a1, v26, 0);
      if (((uint64_t (*)(void, char *, uint64_t))a1[2])(*a1, v37, 20) == 20)
      {
        ((void (*)(void, uint64_t, void))a1[1])(*a1, v38, 0);
        if (((uint64_t (*)(void, int *, uint64_t))a1[2])(*a1, v34, 56) == 56 && v34[0] == 101075792)
        {
          uint64_t v29 = v35;
          uint64_t v28 = v36;
          a1[6] = v36;
          uint64_t v30 = v29 + v28;
          goto LABEL_48;
        }
      }
    }
LABEL_42:
    int v23 = 0;
    return v18 & v23;
  }
  return 0;
}

unint64_t zip_load_entry_from_central_directory(void *a1)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (!a1[6]) {
    return 0;
  }
  if ((*((unsigned char *)a1 + 137) & 1) == 0) {
    return 0;
  }
  unint64_t v2 = a1[7];
  if (v2 >= a1[8]) {
    return 0;
  }
  ((void (*)(void, void, void))a1[1])(*a1, a1[7], 0);
  if (((uint64_t (*)(void, _WORD *, uint64_t))a1[2])(*a1, v21, 46) != 46 || *(_DWORD *)v21 != 33639248) {
    return 0;
  }
  uint64_t v31 = a1;
  *(_OWORD *)long long __p = 0u;
  long long v33 = 0u;
  int8x16_t v34 = 0u;
  memset(v35, 0, 36);
  std::string::basic_string[abi:nn180100](&__b, __len, 0);
  if (SBYTE7(v33) < 0) {
    operator delete(__p[0]);
  }
  *(void *)&long long v33 = v30;
  *(_OWORD *)long long __p = __b;
  __int16 v36 = v21[7];
  v35[0] = v22;
  v35[9] = *(_DWORD *)&v21[5];
  if (v30 >= 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  uint64_t v7 = ((uint64_t (*)(void, void **, void))a1[2])(*a1, v6, __len);
  if (v7 == __len)
  {
    unint64_t v8 = v2 + v7 + 46;
    unint64_t v9 = v8 + __len_2;
    if (v8 < v9)
    {
      char v10 = 0;
      while (1)
      {
        if (((uint64_t (*)(void, unsigned __int16 *, uint64_t))a1[2])(*a1, &v19, 4) != 4) {
          goto LABEL_41;
        }
        if (v19 == 65534) {
          break;
        }
        if (v19 == 1)
        {
          long long __b = 0uLL;
          uint64_t v30 = 0;
          if (v20 >= 0x18u) {
            uint64_t v11 = 24;
          }
          else {
            uint64_t v11 = v20;
          }
          if (((uint64_t (*)(void, long long *, uint64_t))a1[2])(*a1, &__b, v11) != v11 || v20 < 8u) {
            goto LABEL_41;
          }
          if (v24 == -1)
          {
            v34.i64[0] = __b;
            unint64_t v12 = 1;
          }
          else
          {
            unint64_t v12 = 0;
          }
          unint64_t v13 = (unint64_t)v20 >> 3;
          if (v23 == -1)
          {
            if (v12 >= v13) {
              goto LABEL_41;
            }
            uint64_t v14 = *((void *)&__b + v12++);
            v34.i64[1] = v14;
          }
          if (v28 == -1)
          {
            if (v12 >= v13) {
              goto LABEL_41;
            }
            *((void *)&v33 + 1) = *((void *)&__b + v12);
          }
          v8 += v20 + 4;
          char v10 = 1;
          if (v8 >= v9) {
            goto LABEL_46;
          }
        }
        else
        {
LABEL_30:
          v8 += v20 + 4;
          if (v8 >= v9)
          {
            if (v10) {
              goto LABEL_46;
            }
            goto LABEL_43;
          }
        }
      }
      if (v20 != 32 || ((uint64_t (*)(void, _DWORD *, uint64_t))a1[2])(*a1, &v35[1], 32) != 32) {
        goto LABEL_41;
      }
      goto LABEL_30;
    }
LABEL_43:
    uint64_t v15 = v28;
    v16.i64[0] = v23;
    v16.i64[1] = v24;
    int8x16_t v34 = vextq_s8(v16, v16, 8uLL);
    uint64_t v17 = a1[16];
    if (a1[15] > (unint64_t)v28) {
      a1[16] = ++v17;
    }
    *((void *)&v33 + 1) = v15 | (v17 << 32);
    a1[15] = v15;
LABEL_46:
    a1[7] += __len + (unint64_t)__len_2 + __len_4 + 46;
    std::deque<zip_entry_t>::push_back(a1 + 18, (uint64_t)&v31);
    unint64_t v18 = a1[23] + a1[22] - 1;
    unint64_t v4 = *(void *)(a1[19] + 8 * (v18 / 0x27)) + 104 * (v18 % 0x27);
  }
  else
  {
LABEL_41:
    unint64_t v4 = 0;
  }
  if (SBYTE7(v33) < 0) {
    operator delete(__p[0]);
  }
  return v4;
}

__n128 std::deque<zip_entry_t>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 39 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<zip_entry_t>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x27)) + 104 * (v7 % 0x27);
  *(void *)unint64_t v8 = *(void *)a2;
  long long v9 = *(_OWORD *)(a2 + 8);
  *(void *)(v8 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(v8 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v9;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(_OWORD *)(v8 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *(_OWORD *)(a2 + 32);
  long long v11 = *(_OWORD *)(a2 + 64);
  __n128 result = *(__n128 *)(a2 + 80);
  long long v12 = *(_OWORD *)(a2 + 48);
  *(_WORD *)(v8 + 96) = *(_WORD *)(a2 + 96);
  *(_OWORD *)(v8 + 64) = v11;
  *(__n128 *)(v8 + 80) = result;
  *(_OWORD *)(v8 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
  ++a1[5];
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  std::string *v11;
  long long v12;
  uint64_t v13;
  __n128 result;
  long long v15;
  long long v16;

  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 39 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<zip_entry_t>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x27));
  long long v9 = v7 % 0x27;
  char v10 = (void *)(v8 + 104 * (v7 % 0x27));
  *char v10 = *(void *)a2;
  long long v11 = (std::string *)(v10 + 1);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 8);
    v11->__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  unint64_t v13 = v8 + 104 * v9;
  *(_OWORD *)(v13 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *(_OWORD *)(a2 + 32);
  __n128 result = *(__n128 *)(a2 + 48);
  uint64_t v15 = *(_OWORD *)(a2 + 64);
  int8x16_t v16 = *(_OWORD *)(a2 + 80);
  *(_WORD *)(v13 + 96) = *(_WORD *)(a2 + 96);
  *(_OWORD *)(v13 + 64) = v15;
  *(_OWORD *)(v13 + 80) = v16;
  *(__n128 *)(v13 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = result;
  ++a1[5];
  return result;
}

uint64_t zip_load_all_from_central_directory(void *a1)
{
  if (!zip_find_central_directory(a1)) {
    return 0;
  }
  uint64_t v2 = -1;
  do
    ++v2;
  while (zip_load_entry_from_central_directory(a1));
  return v2;
}

unint64_t zip_load_entry_from_file_header(void *a1)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  if ((*((unsigned char *)a1 + 137) & 2) == 0) {
    return 0;
  }
  *((unsigned char *)a1 + 137) &= ~1u;
  uint64_t v2 = a1[7];
  ((void (*)(void, uint64_t, void))a1[1])(*a1, v2, 0);
  BOOL v3 = ((uint64_t (*)(void, int *, uint64_t))a1[2])(*a1, &v35, 30) == 30 && v35 == 67324752;
  if (!v3) {
    return 0;
  }
  size_t v44 = a1;
  uint64_t v46 = 0;
  *(_OWORD *)long long __p = 0u;
  int8x16_t v48 = 0u;
  memset(v49, 0, sizeof(v49));
  int v50 = 0;
  uint64_t v47 = v2;
  std::string::basic_string[abi:nn180100](&__len[3], __len[0], 0);
  if (SHIBYTE(v46) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v46 = v43;
  *(_OWORD *)long long __p = *(_OWORD *)&__len[3];
  __int16 v52 = v38;
  LODWORD(v49[0]) = v39;
  int v51 = v37;
  v6.i64[0] = v40;
  v6.i64[1] = v41;
  int8x16_t v48 = vextq_s8(v6, v6, 8uLL);
  if (v43 >= 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = (void **)__p[0];
  }
  uint64_t v8 = ((uint64_t (*)(void, void **, void))a1[2])(*a1, v7, __len[0]);
  uint64_t v9 = __len[0];
  if (v8 == __len[0])
  {
    unint64_t v10 = v2 + v8 + 30;
    uint64_t v11 = __len[1];
    unint64_t v12 = v10 + __len[1];
    if (v10 >= v12)
    {
LABEL_26:
      uint64_t v13 = v9 + v11 + 30;
      if ((v36 & 8) == 0)
      {
        uint64_t v14 = v48.i64[1] + v13 + a1[7];
        a1[7] = v14;
LABEL_28:
        a1[6] = v14;
        std::deque<zip_entry_t>::push_back(a1 + 18, (uint64_t)&v44);
        unint64_t v15 = a1[23] + a1[22] - 1;
        unint64_t v4 = *(void *)(a1[19] + 8 * (v15 / 0x27)) + 104 * (v15 % 0x27);
        goto LABEL_34;
      }
      int8x16_t v16 = (char *)malloc_type_malloc(0x10000uLL, 0xC2A086EBuLL);
      unint64_t v17 = ((uint64_t (*)(void, void, uint64_t))a1[1])(*a1, 0, 2);
      if (v17 - v47 >= 8 && (*((unsigned char *)a1 + 137) & 2) != 0)
      {
        unint64_t v18 = v17;
        uint64_t v19 = v47 + v13;
        if (v19 + 28 <= v17)
        {
          do
          {
            unint64_t v20 = v18 - v19 >= 0x10000 ? 0x10000 : v18 - v19;
            ((void (*)(void, uint64_t, void))a1[1])(*a1, v19, 0);
            if (((uint64_t (*)(void, char *, unint64_t))a1[2])(*a1, v16, v20) != v20) {
              break;
            }
            if (v20 >= 0x1D)
            {
              uint64_t v21 = 0;
              uint64_t v22 = -v19;
              unsigned int v23 = v16;
              unint64_t v24 = v20;
              while (1)
              {
                if (*(_DWORD *)&v16[v21] == 134695760)
                {
                  uint64_t v25 = v21 + 4;
                  uint64_t v26 = 4;
                  while (1)
                  {
                    int v27 = *(_DWORD *)&v23[v26];
                    if (v27 == 33639248 || v27 == 67324752) {
                      break;
                    }
                    if (v24 == ++v26) {
                      goto LABEL_51;
                    }
                  }
                  if (v24 != v26) {
                    break;
                  }
                }
LABEL_51:
                --v22;
                --v24;
                ++v23;
                BOOL v3 = v21++ == v20 - 29;
                if (v3) {
                  goto LABEL_53;
                }
              }
              a1[7] = v26 - v22;
              if (v26 == 24)
              {
                int v30 = *(_DWORD *)&v16[v25];
                uint64_t v31 = *(void *)&v16[v25 + 4];
                uint64_t v32 = *(void *)&v16[v25 + 12];
              }
              else
              {
                if (v26 != 16) {
                  break;
                }
                int v30 = *(_DWORD *)&v16[v25];
                uint64_t v31 = *(unsigned int *)&v16[v25 + 4];
                uint64_t v32 = *(unsigned int *)&v16[v25 + 8];
              }
              LODWORD(v49[0]) = v30;
              v48.i64[0] = v32;
              v48.i64[1] = v31;
              ((void (*)(void))a1[1])(*a1);
              free(v16);
              uint64_t v14 = a1[7];
              goto LABEL_28;
            }
LABEL_53:
            unint64_t v29 = v20 + v19;
            uint64_t v19 = v20 + v19 - 28;
          }
          while (v29 <= v18);
        }
      }
      free(v16);
    }
    else
    {
      while (((uint64_t (*)(void, unsigned __int16 *, uint64_t))a1[2])(*a1, &v33, 4) == 4)
      {
        if (v33 == 1)
        {
          *(_OWORD *)&__len[3] = 0uLL;
          if (v34 < 0x10u || ((uint64_t (*)(void, _WORD *, uint64_t))a1[2])(*a1, &__len[3], 16) != 16) {
            break;
          }
          int8x16_t v48 = *(int8x16_t *)&__len[3];
        }
        else if (v33 == 65534 {
               && (v34 != 32
        }
                || ((uint64_t (*)(void, char *, uint64_t))a1[2])(*a1, (char *)v49 + 4, 32) != 32))
        {
          break;
        }
        v10 += v34 + 4;
        if (v10 >= v12)
        {
          uint64_t v9 = __len[0];
          uint64_t v11 = __len[1];
          goto LABEL_26;
        }
      }
    }
  }
  unint64_t v4 = 0;
LABEL_34:
  if (SHIBYTE(v46) < 0) {
    operator delete(__p[0]);
  }
  return v4;
}

unint64_t zip_create_entry(void *a1, uint64_t a2, __int16 a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  memset(v13, 0, sizeof(v13));
  long long v12 = 0u;
  long long v11 = 0u;
  long long v10 = 0u;
  *(_OWORD *)long long __p = 0u;
  uint64_t v8 = a1;
  MEMORY[0x237DBC5F0](__p);
  *((void *)&v10 + 1) = -1;
  long long v11 = 0u;
  long long v12 = 0u;
  memset(v13, 0, 20);
  v13[10] = a3;
  *(_DWORD *)&v13[11] = 0;
  if (SBYTE7(v10) < 0 && (unint64_t)__p[1] >> 16)
  {
    unint64_t v5 = 0;
LABEL_5:
    operator delete(__p[0]);
    return v5;
  }
  std::deque<zip_entry_t>::push_back(a1 + 18, (uint64_t)&v8);
  unint64_t v6 = a1[23] + a1[22] - 1;
  unint64_t v5 = *(void *)(a1[19] + 8 * (v6 / 0x27)) + 104 * (v6 % 0x27);
  if (SBYTE7(v10) < 0) {
    goto LABEL_5;
  }
  return v5;
}

void *zip_append_entry(void *a1, uint64_t a2, __int16 a3, Bytef *a4, unint64_t a5)
{
  __n128 result = (void *)zip_create_entry(a1, a2, a3);
  if (result)
  {
    uint64_t v8 = result;
    if (zip_entry_save_data(result, a4, a5)) {
      return v8;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t zip_save_central_directory(void *a1)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v1 = a1[14];
  if (!v1) {
    return 1;
  }
  if (a1[6] % a1[13])
  {
    *((unsigned char *)a1 + 137) &= 0xFCu;
    unint64_t entry = zip_create_entry(a1, (uint64_t)".align/", 0);
    *(void *)(entry + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = a1[6];
    uint64_t result = (uint64_t)zip_write_file_header(entry, a1[13], 3);
    if (!result) {
      return result;
    }
    a1[6] += result;
    uint64_t v1 = a1[14];
  }
  ((void (*)(void))a1[1])(*a1);
  uint64_t v5 = a1[19];
  if (a1[20] == v5)
  {
    uint64_t v8 = a1 + 23;
  }
  else
  {
    unint64_t v6 = a1[22];
    unint64_t v7 = *(void *)(v5 + 8 * (v6 / 0x27)) + 104 * (v6 % 0x27);
    uint64_t v8 = a1 + 23;
    unint64_t v9 = *(void *)(v5 + 8 * ((a1[23] + v6) / 0x27)) + 104 * ((a1[23] + v6) % 0x27);
    if (v7 != v9)
    {
      long long v10 = (void *)(v5 + 8 * (v6 / 0x27));
      while (1)
      {
        LODWORD(v11) = *(char *)(v7 + 31);
        if ((v11 & 0x80000000) != 0 && *(void *)(v7 + 16) >> 16) {
          return 0;
        }
        if (*((unsigned char *)a1 + 136) || *(_DWORD *)(v7 + 52) || *(_DWORD *)(v7 + 44)) {
          break;
        }
        uint64_t v31 = *(unsigned int *)(v7 + 36);
        *(_DWORD *)uint64_t v46 = 33639248;
        *(_WORD *)&void v46[4] = 4926;
        if (v31) {
          goto LABEL_14;
        }
        int v13 = 0;
        __int16 v12 = 20;
LABEL_15:
        uint64_t v11 = v11;
        *(_WORD *)&v46[6] = v12;
        *(_WORD *)&v46[8] = 0;
        *(_WORD *)&v46[10] = *(_WORD *)(v7 + 92);
        int v14 = *(_DWORD *)(v7 + 56);
        int v47 = *(_DWORD *)(v7 + 94);
        LODWORD(v4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v14;
        if ((v11 & 0x80) != 0) {
          uint64_t v11 = *(unsigned __int16 *)(v7 + 16);
        }
        unint64_t v15 = (void *)(v7 + 8);
        WORD2(v49) = v11;
        LODWORD(v50) = 0;
        WORD2(v50) = 0;
        if (*(char *)(v7 + 31) < 0)
        {
          uint64_t v17 = *(void *)(v7 + 16);
          int v16 = -2119958528;
          if (v17)
          {
            unint64_t v18 = (void *)*v15;
LABEL_22:
            if (*((unsigned char *)v18 + v17 - 1) == 47) {
              int v16 = 1107230720;
            }
            else {
              int v16 = -2119958528;
            }
          }
        }
        else
        {
          int v16 = -2119958528;
          uint64_t v17 = *(unsigned __int8 *)(v7 + 31);
          if (*(unsigned char *)(v7 + 31))
          {
            unint64_t v18 = (void *)(v7 + 8);
            goto LABEL_22;
          }
        }
        *(_DWORD *)((char *)&v50 + 6) = v16;
        uint64_t v19 = *(void *)(v7 + 60);
        int v20 = *(_DWORD *)(v7 + 48);
        if (v13) {
          int v20 = -1;
        }
        int v21 = *(_DWORD *)(v7 + 40);
        if (v13) {
          int v21 = -1;
        }
        HIDWORD(v4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v20;
        LODWORD(v49) = v21;
        int v22 = *(_DWORD *)(v7 + 32);
        uint64_t v23 = 28;
        if (v13) {
          int v22 = -1;
        }
        else {
          uint64_t v23 = 0;
        }
        *(_DWORD *)((char *)&v50 + 10) = v22;
        uint64_t v24 = v19 | *(void *)(v7 + 68) | *(void *)(v7 + 76) | *(void *)(v7 + 84);
        BOOL v35 = v24 == 0;
        BOOL v25 = v24 != 0;
        uint64_t v26 = 36;
        if (v35) {
          uint64_t v26 = 0;
        }
        uint64_t v27 = v26 + v23;
        HIWORD(v49) = v27;
        if ((unint64_t)(v27 + v11) >> 16) {
          return 0;
        }
        uint64_t v28 = ((uint64_t (*)(void, unsigned char *, uint64_t))a1[3])(*a1, v46, 46);
        a1[14] += v28;
        if (v28 != 46) {
          return 0;
        }
        if (*(char *)(v7 + 31) < 0) {
          unint64_t v15 = (void *)*v15;
        }
        uint64_t v29 = ((uint64_t (*)(void, void *, void))a1[3])(*a1, v15, WORD2(v49));
        a1[14] += v29;
        if (v29 != WORD2(v49)) {
          return 0;
        }
        if (v13)
        {
          long long v52 = *(_OWORD *)(v7 + 40);
          uint64_t v53 = *(void *)(v7 + 32);
          if (!zip_write_extra_field(a1, 1, (uint64_t)&v52, 24)) {
            return 0;
          }
        }
        if (v25 && !zip_write_extra_field(a1, 65534, v7 + 60, 32)) {
          return 0;
        }
        v7 += 104;
        if (v7 - *v10 == 4056)
        {
          unint64_t v30 = v10[1];
          ++v10;
          unint64_t v7 = v30;
        }
        if (v7 == v9)
        {
          uint64_t v8 = a1 + 23;
          goto LABEL_51;
        }
      }
      *(_DWORD *)uint64_t v46 = 33639248;
      *(_WORD *)&void v46[4] = 4926;
LABEL_14:
      __int16 v12 = 45;
      int v13 = 1;
      goto LABEL_15;
    }
  }
LABEL_51:
  unint64_t v32 = a1[14] - v1;
  unint64_t v33 = a1[6];
  unint64_t v34 = v33 + v32;
  a1[8] = v33 + v32;
  if (*((unsigned char *)a1 + 136)) {
    BOOL v35 = 0;
  }
  else {
    BOOL v35 = HIDWORD(v33) == 0;
  }
  BOOL v36 = v35 && HIDWORD(v32) == 0;
  int v37 = !v36;
  unint64_t v38 = a1[23];
  if (!v36)
  {
    *(_DWORD *)uint64_t v46 = 101075792;
    *(void *)&void v46[4] = -101075744;
    uint64_t v48 = 0;
    unint64_t v49 = v38;
    int v47 = 2954046;
    *(void *)&long long v50 = v38;
    *((void *)&v50 + 1) = v32;
    unint64_t v51 = v33;
    uint64_t v39 = ((uint64_t (*)(void, unsigned char *, uint64_t))a1[3])(*a1, v46, 56);
    a1[14] += v39;
    if (v39 != 56) {
      return 0;
    }
    *(void *)&long long v52 = 117853008;
    *((void *)&v52 + 1) = v34;
    LODWORD(v53) = 1;
    uint64_t v40 = ((uint64_t (*)(void, long long *, uint64_t))a1[3])(*a1, &v52, 20);
    a1[14] += v40;
    if (v40 != 20) {
      return 0;
    }
    unint64_t v38 = *v8;
  }
  if (!(v38 >> 16))
  {
    unint64_t v41 = a1[10];
    if (!(v41 >> 16))
    {
      *(void *)uint64_t v46 = 101010256;
      *(_WORD *)&v46[8] = v38;
      *(_WORD *)&v46[10] = v38;
      int v42 = v37 ? -1 : v32;
      int v47 = v42;
      int v43 = (v37 & 1) != 0 ? -1 : *((_DWORD *)a1 + 12);
      LODWORD(v4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v43;
      WORD2(v4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v41;
      uint64_t v44 = ((uint64_t (*)(void, unsigned char *, uint64_t))a1[3])(*a1, v46, 22);
      a1[14] += v44;
      if (v44 == 22)
      {
        if (!a1[10]
          || (uint64_t v45 = ((uint64_t (*)(void, void))a1[3])(*a1, a1[9]), a1[14] += v45, v45 == a1[10]))
        {
          a1[14] = 0;
          return 1;
        }
      }
    }
  }
  return 0;
}

BOOL zip_write_extra_field(void *a1, __int16 a2, uint64_t a3, uint64_t a4)
{
  v10[0] = a2;
  v10[1] = a4;
  uint64_t v7 = ((uint64_t (*)(void, _WORD *, uint64_t))a1[3])(*a1, v10, 4);
  a1[14] += v7;
  if (v7 != 4) {
    return 0;
  }
  uint64_t v8 = ((uint64_t (*)(void, uint64_t, uint64_t))a1[3])(*a1, a3, a4);
  a1[14] += v8;
  return v8 == a4;
}

void **zip_clone_entry(uint64_t a1, void **a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  unint64_t v4 = (_OWORD *)((char *)a2 + 60);
  if (*(void **)((char *)a2 + 60)) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = *(void **)((char *)a2 + 68) == 0;
  }
  BOOL v7 = v5 && *(void **)((char *)a2 + 76) == 0 && *(void **)((char *)a2 + 84) == 0;
  int v8 = !v7;
  if (!v7 || !*((_WORD *)a2 + 46))
  {
    *(unsigned char *)(a1 + 137) &= 0xFCu;
    unint64_t v9 = a2 + 1;
    if (*((char *)a2 + 31) < 0) {
      unint64_t v9 = (void *)*v9;
    }
    unint64_t entry = (void **)zip_create_entry((void *)a1, (uint64_t)v9, *((_WORD *)a2 + 46));
    *(_OWORD *)(entry + 5) = *(_OWORD *)(a2 + 5);
    entry[4] = *(void **)(a1 + 48);
    *(_DWORD *)((char *)entry + 94) = *(_DWORD *)((char *)a2 + 94);
    *((_DWORD *)entry + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = *((_DWORD *)a2 + 14);
    long long v11 = v4[1];
    *(_OWORD *)((char *)entry + 60) = *v4;
    *(_OWORD *)((char *)entry + 76) = v11;
    uint64_t v12 = zip_entry_data_offset(a2);
    if (v12)
    {
      uint64_t v13 = v12;
      unint64_t v14 = v12 - (void)a2[4];
      if (v14 <= 0x10000)
      {
        unint64_t v15 = malloc_type_malloc(0x10000uLL, 0xC2A086EBuLL);
        ((void (*)(void, void *, void))(*a2)[1])(**a2, a2[4], 0);
        if (((uint64_t (*)(void, void *, unint64_t))(*a2)[2])(**a2, v15, v14) == v14)
        {
          ((void (*)(void, void *, void))(*entry)[1])(**entry, entry[4], 0);
          int v16 = *entry;
          uint64_t v17 = ((uint64_t (*)(void, void *, unint64_t))(*entry)[3])(**entry, v15, v14);
          v16[14] += v17;
          if (v17 == v14)
          {
            unint64_t v18 = entry[4];
            CC_SHA256_Init(&c);
            if (!a2[6])
            {
LABEL_29:
              *(void *)(a1 + 48) += (char *)entry[6] + v14;
              if (!v8 && entry[5])
              {
                CC_SHA256_Final(md, &c);
                long long v24 = v29;
                *(_OWORD *)((char *)entry + 60) = *(_OWORD *)md;
                *(_OWORD *)((char *)entry + 76) = v24;
              }
              goto LABEL_35;
            }
            unint64_t v19 = 0;
            uint64_t v26 = (char *)v18 + v14;
            while (1)
            {
              ((void (*)(void, unint64_t, void))(*a2)[1])(**a2, v19 + v13, 0);
              uint64_t v20 = (unint64_t)a2[6] - v19 >= 0x10000 ? 0x10000 : (uint64_t)a2[6] - v19;
              uint64_t v21 = ((uint64_t (*)(void, void *, uint64_t))(*a2)[2])(**a2, v15, v20);
              ((void (*)(void, char *, void))(*entry)[1])(**entry, &v26[v19], 0);
              int v22 = *entry;
              uint64_t v23 = ((uint64_t (*)(void, void *, uint64_t))(*entry)[3])(**entry, v15, v21);
              v22[14] += v23;
              if (v21 != v23) {
                break;
              }
              if (!v8) {
                CC_SHA256_Update(&c, v15, v21);
              }
              v19 += v21;
              if (v19 >= (unint64_t)a2[6]) {
                goto LABEL_29;
              }
            }
          }
        }
        unint64_t entry = 0;
LABEL_35:
        free(v15);
        return entry;
      }
    }
  }
  return 0;
}

void *zip_set_comment(uint64_t a1, const void *a2, size_t size)
{
  unint64_t v6 = malloc_type_malloc(size, 0xC2A086EBuLL);
  if (*(unsigned char *)(a1 + 88)) {
    free(*(void **)(a1 + 72));
  }
  *(void *)(a1 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v6;
  *(void *)(a1 + 80) = size;
  *(unsigned char *)(a1 + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 1;
  return memcpy(v6, a2, size);
}

double zip_calculate_signature@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v3 = a1[23];
  if (v3)
  {
    CC_SHA256_Init(&c);
    uint64_t v5 = 0;
    while (1)
    {
      unint64_t v6 = v5 + a1[22];
      uint64_t v7 = *(void *)(a1[19] + 8 * (v6 / 0x27));
      unint64_t v8 = v6 % 0x27;
      uint64_t v9 = v7 + 104 * (v6 % 0x27);
      long long v10 = (const char *)(v9 + 8);
      if (*(char *)(v9 + 31) < 0)
      {
        uint64_t v11 = *(void *)(v7 + 104 * v8 + 16);
        if (!v11) {
          goto LABEL_9;
        }
        uint64_t v12 = *(const char **)v10;
      }
      else
      {
        uint64_t v11 = *(unsigned __int8 *)(v9 + 31);
        if (!*(unsigned char *)(v9 + 31)) {
          goto LABEL_9;
        }
        uint64_t v12 = (const char *)(v9 + 8);
      }
      if (v12[v11 - 1] != 47)
      {
LABEL_9:
        long long data = 0u;
        long long v22 = 0u;
        uint64_t v13 = v7 + 104 * v8;
        long long v14 = *(_OWORD *)(v13 + 76);
        long long data = *(_OWORD *)(v13 + 60);
        long long v22 = v14;
        if ((void)data) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = *((void *)&data + 1) == 0;
        }
        if (v15 && (void)v14 == 0 && *((void *)&v14 + 1) == 0) {
          break;
        }
        if (*(char *)(v9 + 31) < 0) {
          long long v10 = *(const char **)v10;
        }
        CC_LONG v18 = strlen(v10);
        CC_SHA256_Update(&c, v10, v18);
        CC_SHA256_Update(&c, &data, 0x20u);
      }
      if (v3 == ++v5)
      {
        CC_SHA256_Final((unsigned __int8 *)a2, &c);
        return result;
      }
    }
  }
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

uint64_t zip_close(void *a1)
{
  uint64_t v2 = zip_save_central_directory(a1);
  uint64_t v3 = (void (*)(void))a1[4];
  if (v3) {
    v3(*a1);
  }
  std::deque<zip_entry_t>::~deque[abi:nn180100]((uint64_t)(a1 + 18));
  unint64_t v4 = (void **)(a1 + 9);
  if (*((unsigned char *)a1 + 88)) {
    free(*v4);
  }
  _OWORD *v4 = 0;
  a1[10] = 0;
  *((unsigned char *)a1 + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  MEMORY[0x237DBCBD0](a1, 0x1080C4077E95D12);
  return v2;
}

BOOL zip_verify_crc_archive(void *a1)
{
  uint64_t v2 = (Bytef *)malloc_type_malloc(0x10000uLL, 0xC2A086EBuLL);
  unint64_t v3 = a1[23];
  if (v3)
  {
    unint64_t v4 = a1[22];
    uint64_t v5 = *(void *)(a1[19] + 8 * (v4 / 0x27));
    if (v5)
    {
      uint64_t v6 = 0;
      BOOL v7 = 0;
      unint64_t v8 = v4 % 0x27;
      uint64_t v9 = v5 + 104 * (v4 % 0x27);
      while (1)
      {
        long long v10 = (void *)(v5 + 104 * v8 + 8);
        if (*(char *)(v9 + 31) < 0)
        {
          uint64_t v11 = *(void *)(v5 + 104 * v8 + 16);
          if (v11)
          {
            long long v10 = (void *)*v10;
LABEL_9:
            if (*((unsigned char *)v10 + v11 - 1) == 47) {
              goto LABEL_16;
            }
          }
        }
        else
        {
          uint64_t v11 = *(unsigned __int8 *)(v9 + 31);
          if (*(unsigned char *)(v9 + 31)) {
            goto LABEL_9;
          }
        }
        data_begin = (int *)zip_entry_load_data_begin((void **)v9);
        unsigned int v13 = crc32(0, 0, 0);
        unint64_t v14 = zip_entry_load_data_read((uint64_t)v2, 0x10000uLL, (uint64_t)data_begin);
        if (v14)
        {
          uInt v15 = v14;
          do
          {
            unsigned int v13 = crc32(v13, v2, v15);
            unint64_t v16 = zip_entry_load_data_read((uint64_t)v2, 0x10000uLL, (uint64_t)data_begin);
            uInt v15 = v16;
          }
          while (v16);
        }
        int v17 = *(_DWORD *)(v5 + 104 * v8 + 56);
        if (data_begin) {
          zip_entry_load_data_end(data_begin);
        }
        if (v17 != v13) {
          goto LABEL_21;
        }
LABEL_16:
        BOOL v7 = ++v6 >= v3;
        if (v6 != v3)
        {
          unint64_t v18 = a1[22] + v6;
          uint64_t v5 = *(void *)(a1[19] + 8 * (v18 / 0x27));
          unint64_t v8 = v18 % 0x27;
          uint64_t v9 = v5 + 104 * (v18 % 0x27);
          if (v5) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
    BOOL v7 = 0;
  }
  else
  {
    BOOL v7 = 1;
  }
LABEL_21:
  free(v2);
  return v7;
}

uint64_t std::deque<zip_entry_t>::~deque[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  unint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    unint64_t v4 = (void *)(a1 + 40);
    unint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    unint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = &v2[v5 / 0x27];
    unint64_t v7 = (unint64_t)*v6;
    unint64_t v8 = (unint64_t)*v6 + 104 * (v5 % 0x27);
    unint64_t v9 = (unint64_t)v2[(*(void *)(a1 + 40) + v5) / 0x27] + 104 * ((*(void *)(a1 + 40) + v5) % 0x27);
    if (v8 != v9)
    {
      do
      {
        if (*(char *)(v8 + 31) < 0)
        {
          operator delete(*(void **)(v8 + 8));
          unint64_t v7 = (unint64_t)*v6;
        }
        v8 += 104;
        if (v8 - v7 == 4056)
        {
          unint64_t v10 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v10;
          unint64_t v8 = v10;
        }
      }
      while (v8 != v9);
      uint64_t v2 = *(void ***)(a1 + 8);
      unint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  void *v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 19;
    goto LABEL_16;
  }
  if (v12 == 2)
  {
    uint64_t v13 = 39;
LABEL_16:
    *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      unint64_t v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v15 = *(void *)(a1 + 16);
    if (v15 != v16) {
      *(void *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__deque_iterator<zip_entry_t,zip_entry_t const*,zip_entry_t const&,zip_entry_t const* const*,long,39l>::operator+=[abi:nn180100](void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (void *)*result;
    unint64_t v3 = a2 + 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(result[1] - *(void *)*result) >> 3);
    if ((uint64_t)v3 < 1)
    {
      unint64_t v5 = 38 - v3;
      uint64_t v6 = &v2[-(v5 / 0x27)];
      void *result = v6;
      unint64_t v4 = *v6 + 104 * (39 * (v5 / 0x27) - v5) + 3952;
    }
    else
    {
      void *result = &v2[v3 / 0x27];
      unint64_t v4 = v2[v3 / 0x27] + 104 * (v3 % 0x27);
    }
    result[1] = v4;
  }
  return result;
}

double std::__for_each_segment[abi:nn180100]<std::__deque_iterator<zip_entry_t,zip_entry_t const*,zip_entry_t const&,zip_entry_t const* const*,long,39l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<zip_entry_t,zip_entry_t const*,zip_entry_t const&,zip_entry_t const* const*,long,39l>,std::__deque_iterator<zip_entry_t,zip_entry_t*,zip_entry_t&,zip_entry_t**,long,39l>>>(std::string::size_type *a1, std::string::size_type a2, std::string::size_type *a3, std::string::size_type a4, uint64_t a5)
{
  unsigned __int16 size = *(void **)a5;
  std::string::size_type v8 = *(void *)(a5 + 8);
  if (a1 != a3)
  {
    unint64_t v10 = a1 + 1;
    for (std::string::size_type i = *a1 + 4056; ; std::string::size_type i = v12 + 4056)
    {
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<zip_entry_t const*,std::__deque_iterator<zip_entry_t,zip_entry_t*,zip_entry_t&,zip_entry_t**,long,39l>,0>(&v14, a2, i, size, v8);
      std::string::size_type v8 = v14.__r_.__value_.__r.__words[2];
      unsigned __int16 size = (void *)v14.__r_.__value_.__l.__size_;
      *(void *)a5 = v14.__r_.__value_.__l.__size_;
      *(void *)(a5 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v8;
      if (v10 == a3) {
        break;
      }
      std::string::size_type v12 = *v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<zip_entry_t const*,std::__deque_iterator<zip_entry_t,zip_entry_t*,zip_entry_t&,zip_entry_t**,long,39l>,0>(&v14, a2, a4, size, v8);
  double result = *(double *)&v14.__r_.__value_.__l.__size_;
  *(_OWORD *)a5 = *(_OWORD *)&v14.__r_.__value_.__r.__words[1];
  return result;
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<zip_entry_t const*,std::__deque_iterator<zip_entry_t,zip_entry_t*,zip_entry_t&,zip_entry_t**,long,39l>,0>(std::string *result, std::string::size_type a2, std::string::size_type a3, void *a4, std::string::size_type a5)
{
  uint64_t v6 = a4;
  std::string::size_type v7 = a2;
  std::string::size_type v8 = (std::string::__raw *)result;
  if (a2 == a3)
  {
    std::string::size_type v9 = a2;
  }
  else
  {
    std::string::size_type v9 = a3;
    uint64_t v10 = *a4;
    while (1)
    {
      uint64_t v11 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v10 - a5 + 4056) >> 3);
      if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v9 - v7) >> 3) < v11) {
        uint64_t v11 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v9 - v7) >> 3);
      }
      if (v11)
      {
        std::string::size_type v12 = v7 + 104 * v11;
        do
        {
          *(void *)a5 = *(void *)v7;
          double result = std::string::operator=((std::string *)(a5 + 8), (const std::string *)(v7 + 8));
          *(_OWORD *)(a5 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *(_OWORD *)(v7 + 32);
          long long v14 = *(_OWORD *)(v7 + 64);
          long long v13 = *(_OWORD *)(v7 + 80);
          long long v15 = *(_OWORD *)(v7 + 48);
          *(_WORD *)(a5 + 96) = *(_WORD *)(v7 + 96);
          *(_OWORD *)(a5 + 64) = v14;
          *(_OWORD *)(a5 + 80) = v13;
          *(_OWORD *)(a5 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v15;
          a5 += 104;
          v7 += 104;
        }
        while (v7 != v12);
        std::string::size_type v7 = v12;
      }
      if (v7 == v9) {
        break;
      }
      std::string::size_type v16 = v6[1];
      ++v6;
      uint64_t v10 = v16;
      a5 = v16;
    }
    if (*v6 + 4056 == a5)
    {
      std::string::size_type v17 = v6[1];
      ++v6;
      a5 = v17;
    }
  }
  v8->__words[0] = v9;
  v8->__words[1] = (std::string::size_type)v6;
  v8->__words[2] = a5;
  return result;
}

void std::__split_buffer<zip_entry_t *>::push_back(void *a1, void *a2)
{
  unint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    unint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      std::string::size_type v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v16);
      unint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      unint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        unint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      BOOL v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        unint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      long long v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        unint64_t v4 = (char *)a1[1];
      }
      long long v15 = &v4[8 * v11];
      unint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)unint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<zip_entry_t *>::push_front(uint64_t a1, void *a2)
{
  unint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      long long v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v11);
      unint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      long long v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        unint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)unint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        unint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      unint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        unint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    unint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(unint64_t a1)
{
  if (a1 >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(8 * a1);
}

void *std::string::basic_string[abi:nn180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *long long __b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

void std::deque<zip_entry_t>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x27;
  unint64_t v4 = v2 - 39;
  if (v3)
  {
    a1[4] = v4;
    unint64_t v5 = (void *)a1[1];
    uint64_t v6 = (char *)a1[2];
    uint64_t v9 = *v5;
    size_t v7 = (char *)(v5 + 1);
    uint64_t v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_31:
      *(void *)uint64_t v6 = v8;
      a1[2] += 8;
      return;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v28 = 1;
      }
      else {
        unint64_t v28 = (uint64_t)&v6[-*a1] >> 2;
      }
      long long v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v28);
      uint64_t v30 = &v29[8 * (v28 >> 2)];
      unint64_t v32 = &v29[8 * v31];
      unint64_t v33 = (uint64_t *)a1[1];
      uint64_t v6 = v30;
      uint64_t v34 = a1[2] - (void)v33;
      if (v34)
      {
        uint64_t v6 = &v30[v34 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v35 = 8 * (v34 >> 3);
        BOOL v36 = &v29[8 * (v28 >> 2)];
        do
        {
          uint64_t v37 = *v33++;
          *(void *)BOOL v36 = v37;
          v36 += 8;
          v35 -= 8;
        }
        while (v35);
      }
      goto LABEL_28;
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    BOOL v12 = v10 >> 3 < -1;
    uint64_t v13 = (v10 >> 3) + 2;
    if (v12) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v11 + 1;
    }
    uint64_t v15 = -(v14 >> 1);
    uint64_t v16 = v14 >> 1;
    uint64_t v17 = &v7[-8 * v16];
    int64_t v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      size_t v7 = (char *)a1[1];
    }
    uint64_t v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_31;
  }
  uint64_t v19 = a1[2];
  unint64_t v20 = (v19 - a1[1]) >> 3;
  uint64_t v21 = a1[3];
  uint64_t v22 = v21 - *a1;
  if (v20 < v22 >> 3)
  {
    if (v21 != v19)
    {
      *(void *)&long long v49 = operator new(0xFD8uLL);
      std::__split_buffer<zip_entry_t *>::push_back(a1, &v49);
      return;
    }
    *(void *)&long long v49 = operator new(0xFD8uLL);
    std::__split_buffer<zip_entry_t *>::push_front((uint64_t)a1, &v49);
    uint64_t v39 = (void *)a1[1];
    uint64_t v6 = (char *)a1[2];
    uint64_t v40 = *v39;
    size_t v7 = (char *)(v39 + 1);
    uint64_t v8 = v40;
    a1[1] = v7;
    if (v6 != (char *)a1[3]) {
      goto LABEL_31;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v41 = 1;
      }
      else {
        unint64_t v41 = (uint64_t)&v6[-*a1] >> 2;
      }
      long long v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v41);
      uint64_t v30 = &v29[8 * (v41 >> 2)];
      unint64_t v32 = &v29[8 * v42];
      int v43 = (uint64_t *)a1[1];
      uint64_t v6 = v30;
      uint64_t v44 = a1[2] - (void)v43;
      if (v44)
      {
        uint64_t v6 = &v30[v44 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v45 = 8 * (v44 >> 3);
        uint64_t v46 = &v29[8 * (v41 >> 2)];
        do
        {
          uint64_t v47 = *v43++;
          *(void *)uint64_t v46 = v47;
          v46 += 8;
          v45 -= 8;
        }
        while (v45);
      }
LABEL_28:
      unint64_t v38 = (char *)*a1;
      *a1 = v29;
      a1[1] = v30;
      a1[2] = v6;
      a1[3] = v32;
      if (v38)
      {
        operator delete(v38);
        uint64_t v6 = (char *)a1[2];
      }
      goto LABEL_31;
    }
    goto LABEL_5;
  }
  if (v21 == *a1) {
    unint64_t v23 = 1;
  }
  else {
    unint64_t v23 = v22 >> 2;
  }
  unint64_t v51 = a1 + 3;
  *(void *)&long long v49 = std::__allocate_at_least[abi:nn180100]<std::allocator<zip_entry_t *>>(v23);
  *((void *)&v49 + 1) = v49 + 8 * v20;
  *(void *)&long long v50 = *((void *)&v49 + 1);
  *((void *)&v50 + 1) = v49 + 8 * v24;
  uint64_t v48 = operator new(0xFD8uLL);
  std::__split_buffer<zip_entry_t *>::push_back(&v49, &v48);
  for (std::string::size_type i = (void *)a1[2]; i != (void *)a1[1]; std::__split_buffer<zip_entry_t *>::push_front((uint64_t)&v49, i))
    --i;
  uint64_t v26 = (char *)*a1;
  long long v27 = v50;
  *(_OWORD *)a1 = v49;
  *((_OWORD *)a1 + 1) = v27;
  if (v26) {
    operator delete(v26);
  }
}

void *re::internal::AssetNetworkLoader::init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v20[4] = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = a3;
  *(void *)(a1 + 160) = re::globalAllocators((re *)a1)[2];
  *(void *)(a1 + 16) = a4;
  v20[0] = &unk_26E6CA390;
  v20[1] = a1;
  v20[3] = v20;
  uint64_t v6 = *(void *)(a1 + 8);
  std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::__value_func[abi:nn180100]((uint64_t)v19, (uint64_t)v20);
  (*(void (**)(uint64_t, void *))(*(void *)v6 + 24))(v6, v19);
  std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100](v19);
  v18[0] = &unk_26E6CA420;
  v18[1] = a1;
  v18[3] = v18;
  uint64_t v7 = *(void *)(a1 + 8);
  std::__function::__value_func<void ()(unsigned long long)>::__value_func[abi:nn180100]((uint64_t)v17, (uint64_t)v18);
  (*(void (**)(uint64_t, void *))(*(void *)v7 + 32))(v7, v17);
  std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100](v17);
  re::dispatch::Queue::global((re::dispatch::Queue *)0x21, 0, &v16);
  uint64_t v12 = 0x100000001;
  int v13 = 1;
  uint64_t v14 = &v16;
  re::dispatch::Queue::make("com.apple.re.AssetNetworkLoaderBackgroundSerializer", (int *)&v12, &v15);
  uint64_t v8 = (void **)(a1 + 264);
  if ((NSObject **)(a1 + 264) != &v15)
  {
    uint64_t v9 = v15;
    uint64_t v15 = 0;
    uint64_t v10 = *v8;
    *uint64_t v8 = v9;
  }
  std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100](v18);
  return std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100](v20);
}

void *re::internal::AssetNetworkLoader::deinit(re::internal::AssetNetworkLoader *this)
{
  uint64_t v47[4] = *MEMORY[0x263EF8340];
  atomic_store(1u, (unsigned __int8 *)this + 256);
  uint64_t v2 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v2)
  {
    uint64_t v3 = v2 << 6;
    unint64_t v4 = (re::AssetHandle *)(*((void *)this + 7) + 40);
    do
    {
      re::AssetHandle::~AssetHandle(v4);
      re::DynamicString::deinit((re::AssetHandle *)((char *)v4 - 32));
      unint64_t v4 = (re::AssetHandle *)((char *)v4 + 64);
      v3 -= 64;
    }
    while (v3);
  }
  ++*((_DWORD *)this + 12);
  os_unfair_lock_lock((os_unfair_lock_t)this + 48);
  uint64_t v5 = *((void *)this + 27);
  *((void *)this + 27) = 0;
  if (v5)
  {
    uint64_t v6 = 112 * v5;
    uint64_t v7 = *((void *)this + 29) + 64;
    do
    {
      re::DynamicArray<unsigned long>::deinit(v7);
      re::DynamicString::deinit((re::DynamicString *)(v7 - 32));
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(v7 - 56));
      v7 += 112;
      v6 -= 112;
    }
    while (v6);
  }
  ++*((_DWORD *)this + 56);
  os_unfair_lock_unlock((os_unfair_lock_t)this + 48);
  uint64_t v8 = *((unsigned int *)this + 24);
  if (v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = (int *)(*((void *)this + 10) + 8);
    while (1)
    {
      int v11 = *v10;
      v10 += 20;
      if (v11 < 0) {
        break;
      }
      if (v8 == ++v9)
      {
        LODWORD(v9) = *((_DWORD *)this + 24);
        break;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  unsigned int v12 = *((_DWORD *)this + 24);
  if (v8 != v9)
  {
    uint64_t v13 = v9;
    do
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)v44, (const re::AssetHandle *)(*((void *)this + 10) + 80 * v13 + 56));
      if (v45)
      {
        uint64_t v14 = v45 + 96;
        os_unfair_lock_lock(v45 + 96);
        uint64_t v15 = *(re **)this;
        uint64_t v16 = (uint64_t)v45;
        re::AssetManager::putEntryInFailedState_entryStateLocked(v15, v16, 302, (uint64_t)v43);
        if (*(void *)&v43[0])
        {
          if (BYTE8(v43[0])) {
            (*(void (**)(void))(**(void **)&v43[0] + 40))();
          }
          memset(v43, 0, sizeof(v43));
        }
        os_unfair_lock_unlock(v14);
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v44);
      unsigned int v12 = *((_DWORD *)this + 24);
      if (v12 <= (int)v9 + 1) {
        int v18 = v9 + 1;
      }
      else {
        int v18 = *((_DWORD *)this + 24);
      }
      while (1)
      {
        uint64_t v13 = (v9 + 1);
        if (v18 - 1 == v9) {
          break;
        }
        LODWORD(v9) = v9 + 1;
        int v19 = v13;
        if ((*(_DWORD *)(*((void *)this + 10) + 80 * v13 + 8) & 0x80000000) != 0) {
          goto LABEL_28;
        }
      }
      int v19 = v18;
LABEL_28:
      LODWORD(v9) = v19;
    }
    while (v8 != v19);
  }
  if (*((_DWORD *)this + 23))
  {
    uint64_t v20 = *((unsigned int *)this + 22);
    if (v20)
    {
      memset_pattern16(*((void **)this + 9), &unk_2343655D0, 4 * v20);
      unsigned int v12 = *((_DWORD *)this + 24);
    }
    if (v12)
    {
      uint64_t v21 = 0;
      unint64_t v22 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::internal::AssetNetworkLoader::PendingRequestedAsset,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free((_DWORD *)(*((void *)this + 10) + v21));
        ++v22;
        v21 += 80;
      }
      while (v22 < *((unsigned int *)this + 24));
    }
    *((_DWORD *)this + 23) = 0;
    *((_DWORD *)this + 24) = 0;
    int v23 = *((_DWORD *)this + 26) + 1;
    *((_DWORD *)this + 25) = 0x7FFFFFFF;
    *((_DWORD *)this + 26) = v23;
  }
  v24.n128_f64[0] = re::HashTable<re::DynamicString,re::internal::AssetNetworkLoader::PendingRequestedAsset,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8);
  uint64_t v25 = *((unsigned int *)this + 36);
  if (v25)
  {
    uint64_t v26 = 0;
    long long v27 = (int *)(*((void *)this + 16) + 8);
    while (1)
    {
      int v28 = *v27;
      v27 += 22;
      if (v28 < 0) {
        break;
      }
      if (v25 == ++v26)
      {
        LODWORD(v26) = *((_DWORD *)this + 36);
        break;
      }
    }
  }
  else
  {
    LODWORD(v26) = 0;
  }
  unsigned int v29 = *((_DWORD *)this + 36);
  if (v25 != v26)
  {
    uint64_t v30 = v26;
    do
    {
      (*(void (**)(void, void, __n128))(**((void **)this + 20) + 40))(*((void *)this + 20), *(void *)(*((void *)this + 16) + 88 * v30 + 56), v24);
      unsigned int v29 = *((_DWORD *)this + 36);
      if (v29 <= (int)v26 + 1) {
        int v31 = v26 + 1;
      }
      else {
        int v31 = *((_DWORD *)this + 36);
      }
      int v32 = v26;
      while (1)
      {
        uint64_t v30 = (v32 + 1);
        if (v31 - 1 == v32) {
          break;
        }
        ++v32;
        LODWORD(v26) = v30;
        if ((*(_DWORD *)(*((void *)this + 16) + 88 * v30 + 8) & 0x80000000) != 0) {
          goto LABEL_52;
        }
      }
      LODWORD(v26) = v31;
LABEL_52:
      ;
    }
    while (v25 != v26);
  }
  if (*((_DWORD *)this + 35))
  {
    uint64_t v33 = *((unsigned int *)this + 34);
    if (v33)
    {
      memset_pattern16(*((void **)this + 15), &unk_2343655D0, 4 * v33);
      unsigned int v29 = *((_DWORD *)this + 36);
    }
    if (v29)
    {
      unint64_t v34 = 0;
      uint64_t v35 = 8;
      do
      {
        uint64_t v36 = *((void *)this + 16);
        int v37 = *(_DWORD *)(v36 + v35);
        if (v37 < 0)
        {
          *(_DWORD *)(v36 + v35) = v37 & 0x7FFFFFFF;
          re::DynamicString::deinit((re::DynamicString *)(v36 + v35 + 8));
          unsigned int v29 = *((_DWORD *)this + 36);
        }
        ++v34;
        v35 += 88;
      }
      while (v34 < v29);
    }
    *((_DWORD *)this + 35) = 0;
    *((_DWORD *)this + 36) = 0;
    int v38 = *((_DWORD *)this + 38) + 1;
    *((_DWORD *)this + 37) = 0x7FFFFFFF;
    *((_DWORD *)this + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v38;
  }
  double v39 = re::HashTable<re::DynamicString,re::internal::AssetNetworkLoader::FragmentedNetworkAsset,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 14);
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0;
  uint64_t v40 = *((void *)this + 1);
  v47[3] = 0;
  (*(void (**)(uint64_t, void *, double))(*(void *)v40 + 32))(v40, v47, v39);
  std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100](v47);
  uint64_t v41 = *((void *)this + 1);
  v46[3] = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v41 + 24))(v41, v46);
  double result = std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100](v46);
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  return result;
}

uint64_t re::internal::AssetNetworkLoader::sendFailureResponse(re *a1, uint64_t a2, uint64_t a3, re::DynamicString *a4)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v8 = *re::assetsLogObjects(a1);
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    if (*(void *)(a3 + 168)) {
      uint64_t v10 = *(void *)(a3 + 176);
    }
    else {
      uint64_t v10 = a3 + 169;
    }
    *(_DWORD *)long long buf = 134218242;
    *(void *)long long v27 = a2;
    *(_WORD *)&v27[8] = 2080;
    *(void *)&v27[10] = v10;
    _os_log_impl(&dword_233120000, v8, OS_LOG_TYPE_DEFAULT, "Sending peer asset load failure to '%llu' for '%s'", buf, 0x16u);
  }
  *(void *)&v27[12] = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  re::DynamicString::setCapacity(&v27[4], 0);
  *(_DWORD *)long long buf = 102;
  int v11 = re::DynamicString::operator=((re::DynamicString *)&v27[4], a4);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF751E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF751E8))
  {
    _MergedGlobals_40 = re::introspect_AssetSimpleMessage(0);
    __cxa_guard_release(&qword_26AF751E8);
  }
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  if ((v12 & 1) == 0)
  {
    uint64_t v17 = *re::assetsLogObjects((re *)v12);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    if (*(void *)(a3 + 168)) {
      uint64_t v21 = *(void *)(a3 + 176);
    }
    else {
      uint64_t v21 = a3 + 169;
    }
    *(_DWORD *)__n128 v24 = 136315138;
    uint64_t v25 = v21;
    int v19 = "Failed to serialize network message for '%s'";
    goto LABEL_23;
  }
  uint64_t v13 = *((void *)a1 + 1);
  uint64_t v14 = v23;
  char v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v13 + 16))(v13, a2, v23, v22);
  if ((v15 & 1) == 0)
  {
    uint64_t v17 = *re::assetsLogObjects(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      if (*(void *)(a3 + 168)) {
        uint64_t v18 = *(void *)(a3 + 176);
      }
      else {
        uint64_t v18 = a3 + 169;
      }
      *(_DWORD *)__n128 v24 = 136315138;
      uint64_t v25 = v18;
      int v19 = "Failed to send failure message for '%s'";
LABEL_23:
      _os_log_error_impl(&dword_233120000, v17, OS_LOG_TYPE_ERROR, v19, v24, 0xCu);
    }
  }
LABEL_15:
  uint64_t result = *(void *)&v27[4];
  if (*(void *)&v27[4])
  {
    if (v27[12]) {
      return (*(uint64_t (**)(void))(**(void **)&v27[4] + 40))();
    }
  }
  return result;
}

re::AssetHandle *re::DynamicArray<re::internal::NetworkLoadRequestData>::add(uint64_t a1, void *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)a1)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        re::DynamicArray<re::internal::NetworkLoadRequestData>::setCapacity((void *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::internal::NetworkLoadRequestData>::setCapacity((void *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    unint64_t v5 = *(void *)(a1 + 16);
  }
  int v11 = (void *)(*(void *)(a1 + 32) + (v5 << 6));
  *int v11 = *a2;
  re::DynamicString::DynamicString((re::DynamicString *)(v11 + 1), (const re::DynamicString *)(a2 + 1));
  uint64_t result = re::AssetHandle::AssetHandle((re::AssetHandle *)(v11 + 5), (const re::AssetHandle *)(a2 + 5));
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

void re::internal::AssetNetworkLoader::queueAssetSerializationResponse(uint64_t a1, uint64_t *a2)
{
  re::AssetHandle::AssetHandle((re::AssetHandle *)v16, (const re::AssetHandle *)(a2 + 5));
  re::DynamicString::DynamicString((re::DynamicString *)&v13, (const re::DynamicString *)(a2 + 1));
  uint64_t v4 = *a2;
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 1174405120;
  void v8[2] = ___ZN2re8internal18AssetNetworkLoader31queueAssetSerializationResponseERKNS0_22NetworkLoadRequestDataE_block_invoke;
  uint64_t v8[3] = &__block_descriptor_tmp_48;
  v8[4] = a1;
  re::AssetHandle::AssetHandle((re::AssetHandle *)v9, (const re::AssetHandle *)v16);
  re::DynamicString::DynamicString((re::DynamicString *)&v10, (const re::DynamicString *)&v13);
  uint64_t v12 = v4;
  dispatch_async(*(dispatch_queue_t *)(a1 + 264), v8);
  if ((void)v10)
  {
    if (BYTE8(v10)) {
      (*(void (**)(void, void, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 40))(v10, v11, v5, v6, v7);
    }
    long long v10 = 0u;
    long long v11 = 0u;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
  if (v13 && (v14 & 1) != 0) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 40))(v13, v15);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v16);
}

void ___ZN2re8internal18AssetNetworkLoader31queueAssetSerializationResponseERKNS0_22NetworkLoadRequestDataE_block_invoke(uint64_t a1)
{
  uint64_t v90 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *re::assetsLogObjects((re *)a1);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    uint64_t v46 = re::AssetHandle::assetInfo((re::AssetHandle *)(a1 + 40));
    if (v46[17]) {
      uint64_t v47 = (char *)v46[18];
    }
    else {
      uint64_t v47 = (char *)v46 + 137;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v47;
    _os_log_debug_impl(&dword_233120000, v3, OS_LOG_TYPE_DEBUG, "Async network serialization of '%s'", buf, 0xCu);
  }
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)(v2 + 256));
  if ((v5 & 1) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      unint64_t v7 = *(void *)(v6 + 264);
    }
    else {
      unint64_t v7 = 0;
    }
    int v61 = (re::AssetHandle *)(a1 + 40);
    long long v10 = (_anonymous_namespace_ *)re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(void *)(*(void *)v2 + 1040), v7);
    memset(v72, 0, 32);
    re::DynamicString::setCapacity(v72, 0);
    LODWORD(v71) = 101;
    re::DynamicString::operator=((re::DynamicString *)v72, (re::DynamicString *)(a1 + 64));
    long long v11 = (_anonymous_namespace_ *)(*(void *(**)(uint64_t *__return_ptr))(**(void **)(v2 + 8) + 40))(&v67);
    uint64_t v66 = 0;
    long long v64 = 0uLL;
    int v65 = 0;
    uint64_t v12 = (_anonymous_namespace_ *)re::DynamicArray<char>::setCapacity(&v63, 0x100uLL);
    ++v65;
    v62[0] = &unk_26E7147E8;
    v62[1] = &v63;
    uint64_t v13 = *(uint64_t (****)(void, void *, uint64_t, uint64_t, unsigned char *))(v2 + 16);
    char v14 = *(re::internal::AssetEntry **)(a1 + 48);
    if (v68) {
      uint64_t v15 = v70;
    }
    else {
      uint64_t v15 = v69;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF751E8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF751E8))
    {
      _MergedGlobals_40 = re::introspect_AssetSimpleMessage(0);
      __cxa_guard_release(&qword_26AF751E8);
    }
    if ((v16 & 1) == 0)
    {
      __n128 v24 = *re::assetsLogObjects((re *)v16);
      BOOL v25 = os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
      if (v25)
      {
        if (*((void *)v14 + 21)) {
          uint64_t v26 = (char *)*((void *)v14 + 22);
        }
        else {
          uint64_t v26 = (char *)v14 + 169;
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v26;
        _os_log_error_impl(&dword_233120000, v24, OS_LOG_TYPE_ERROR, "Failed to serialize network message for '%s'", buf, 0xCu);
      }
      goto LABEL_40;
    }
    uint64_t v17 = re::AssetHandle::AssetHandle((re::AssetHandle *)v73, v14);
    uint64_t v18 = *((void *)v14 + 3);
    re::DefaultAssetSerialize::DefaultAssetSerialize((re::DefaultAssetSerialize *)buf, (const re::AssetHandle *)v73);
    *(void *)long long buf = &unk_26E6CA920;
    LOBYTE(v86) = 0;
    re::DynamicString::DynamicString((re::DynamicString *)&v87, (const re::DynamicString *)&v76);
    uint64_t v89 = v18;
    if (v76 && (v77 & 1) != 0) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v76 + 40))(v76, v78, v19);
    }
    uint64_t v20 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(void *)v10 + 112))(v10);
    re::AssetHandle::serializableAsset((re::AssetHandle *)v73, &v76);
    uint64_t v21 = (re *)(**v13)(v13, v62, v20, v76, buf);
    if (v21)
    {
      uint64_t v22 = (re *)(*(uint64_t (**)(_anonymous_namespace_ *, void *, uint64_t, void))(*(void *)v10 + 56))(v10, v62, v76, 0);
      if (v22)
      {
        char v23 = 1;
        goto LABEL_34;
      }
      long long v27 = *re::assetsLogObjects(v22);
      if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
LABEL_33:
        char v23 = 0;
LABEL_34:
        std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:nn180100](&v76);
        *(void *)long long buf = &unk_26E6CA920;
        if ((void)v87)
        {
          if (BYTE8(v87)) {
            (*(void (**)(void, void, uint64_t))(*(void *)v87 + 40))(v87, v88, v30);
          }
          long long v87 = 0u;
          long long v88 = 0u;
        }
        *(void *)long long buf = &unk_26E6CA958;
        re::Optional<re::AssetPath>::~Optional(&buf[8]);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v73);
        if (v23)
        {
          char v31 = 0;
LABEL_42:
          unsigned __int8 v33 = atomic_load((unsigned __int8 *)(v2 + 256));
          if (v33)
          {
            uint64_t v44 = *re::assetsLogObjects((re *)v25);
            if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
            {
              if (*(unsigned char *)(a1 + 72)) {
                uint64_t v45 = *(void *)(a1 + 80);
              }
              else {
                uint64_t v45 = a1 + 73;
              }
              *(_DWORD *)long long buf = 136315138;
              *(void *)&uint8_t buf[4] = v45;
              _os_log_impl(&dword_233120000, v44, OS_LOG_TYPE_DEFAULT, "Deiniting AssetNetworkLoader: Skipping asset serialization response for %s", buf, 0xCu);
            }
          }
          else
          {
            os_unfair_lock_lock((os_unfair_lock_t)(v2 + 192));
            uint64_t v35 = *re::assetsLogObjects(v34);
            if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v58 = re::AssetHandle::assetInfo(v61);
              if (v58[17]) {
                std::string v59 = (char *)v58[18];
              }
              else {
                std::string v59 = (char *)v58 + 137;
              }
              *(_DWORD *)long long buf = 136315138;
              *(void *)&uint8_t buf[4] = v59;
              _os_log_debug_impl(&dword_233120000, v35, OS_LOG_TYPE_DEBUG, "Completed network serialization of Asset '%s'", buf, 0xCu);
            }
            *(void *)long long buf = *(void *)(a1 + 96);
            re::AssetHandle::AssetHandle((re::AssetHandle *)&buf[8], v61);
            uint64_t v36 = re::DynamicString::DynamicString((re::DynamicString *)&v81, (const re::DynamicString *)(a1 + 64));
            unint64_t v83 = v63;
            long long v84 = v64;
            int v63 = 0;
            long long v64 = 0uLL;
            uint64_t v86 = v66;
            uint64_t v66 = 0;
            ++v65;
            int v85 = 1;
            LOBYTE(v87) = v31;
            unint64_t v37 = *(void *)(v2 + 208);
            unint64_t v38 = *(void *)(v2 + 216);
            if (v38 >= v37)
            {
              unint64_t v39 = v38 + 1;
              if (v37 < v38 + 1)
              {
                if (*(void *)(v2 + 200))
                {
                  uint64_t v40 = 2 * v37;
                  BOOL v41 = v37 == 0;
                  unint64_t v42 = 8;
                  if (!v41) {
                    unint64_t v42 = v40;
                  }
                  if (v42 <= v39) {
                    unint64_t v43 = v39;
                  }
                  else {
                    unint64_t v43 = v42;
                  }
                  re::DynamicArray<re::internal::AssetNetworkLoader::SerializedAssetResponse>::setCapacity((void *)(v2 + 200), v43);
                }
                else
                {
                  re::DynamicArray<re::internal::AssetNetworkLoader::SerializedAssetResponse>::setCapacity((void *)(v2 + 200), v39);
                  ++*(_DWORD *)(v2 + 224);
                }
              }
              unint64_t v38 = *(void *)(v2 + 216);
            }
            uint64_t v48 = *(void *)(v2 + 232) + 112 * v38;
            *(void *)uint64_t v48 = *(void *)buf;
            *(void *)(v48 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
            *(void *)(v48 + 16) = 0;
            *(void *)(v48 + 24) = 0;
            *(void *)(v48 + 16) = *(void *)&buf[16];
            *(void *)&uint8_t buf[16] = 0;
            uint64_t v49 = *(void *)(v48 + 8);
            *(void *)(v48 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
            *(void *)(v48 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(void *)&buf[8];
            *(void *)&uint8_t buf[8] = v49;
            uint64_t v50 = *(void *)(v48 + 24);
            *(void *)(v48 + 24) = v80;
            uint64_t v80 = v50;
            *(_OWORD *)(v48 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
            *(_OWORD *)(v48 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
            *(void *)(v48 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v81;
            *(void *)&long long v81 = 0;
            uint64_t v51 = *(void *)(v48 + 48);
            *(void *)(v48 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v82;
            *(void *)&long long v82 = v51;
            *(void *)(v48 + 56) = *((void *)&v82 + 1);
            *((void *)&v82 + 1) = 0;
            uint64_t v52 = *(void *)(v48 + 40);
            *(void *)(v48 + 40) = *((void *)&v81 + 1);
            *((void *)&v81 + 1) = v52;
            *(void *)(v48 + 96) = 0;
            *(_DWORD *)(v48 + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
            *(void *)(v48 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
            *(void *)(v48 + 80) = 0;
            *(void *)(v48 + 64) = 0;
            *(void *)(v48 + 64) = v83;
            unint64_t v83 = 0;
            *(void *)(v48 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v84;
            *(void *)&long long v84 = 0;
            uint64_t v53 = *(void *)(v48 + 80);
            *(void *)(v48 + 80) = *((void *)&v84 + 1);
            *((void *)&v84 + 1) = v53;
            uint64_t v54 = *(void *)(v48 + 96);
            *(void *)(v48 + 96) = v86;
            uint64_t v86 = v54;
            ++v85;
            ++*(_DWORD *)(v48 + 88);
            *(unsigned char *)(v48 + 104) = v87;
            ++*(void *)(v2 + 216);
            ++*(_DWORD *)(v2 + 224);
            if (v83)
            {
              if (v54) {
                (*(void (**)(void))(*v83 + 40))();
              }
              uint64_t v86 = 0;
              long long v84 = 0uLL;
              unint64_t v83 = 0;
              ++v85;
            }
            if ((void)v81)
            {
              if (BYTE8(v81)) {
                (*(void (**)(void))(*(void *)v81 + 40))();
              }
              long long v81 = 0u;
              long long v82 = 0u;
            }
            re::AssetHandle::~AssetHandle((re::AssetHandle *)&buf[8]);
            os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 192));
          }
          if (v63 && v66) {
            (*(void (**)(void))(*v63 + 40))();
          }
          if (v67 && (v68 & 1) != 0) {
            (*(void (**)(void))(*(void *)v67 + 40))();
          }
          if (*(void *)&v72[0])
          {
            if (BYTE8(v72[0])) {
              (*(void (**)(void))(**(void **)&v72[0] + 40))();
            }
          }
          return;
        }
LABEL_40:
        int v32 = *re::assetsLogObjects((re *)v25);
        BOOL v25 = os_log_type_enabled(v32, OS_LOG_TYPE_ERROR);
        if (v25)
        {
          uint64_t v55 = re::AssetHandle::assetInfo(v61);
          if (v55[17]) {
            int v56 = (char *)v55[18];
          }
          else {
            int v56 = (char *)v55 + 137;
          }
          if (v68) {
            unint64_t v57 = v70;
          }
          else {
            unint64_t v57 = v69;
          }
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = v56;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v57;
          _os_log_error_impl(&dword_233120000, v32, OS_LOG_TYPE_ERROR, "Failed to create a response message for '%s' for peer '%s'", buf, 0x16u);
        }
        char v31 = 1;
        goto LABEL_42;
      }
      if (*((void *)v14 + 21)) {
        size_t v60 = (char *)*((void *)v14 + 22);
      }
      else {
        size_t v60 = (char *)v14 + 169;
      }
      *(_DWORD *)int v74 = 136315138;
      BOOL v75 = v60;
      uint64_t v29 = "Serializing compiled file blob failed '%s'";
    }
    else
    {
      long long v27 = *re::assetsLogObjects(v21);
      if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
        goto LABEL_33;
      }
      if (*((void *)v14 + 21)) {
        uint64_t v28 = (char *)*((void *)v14 + 22);
      }
      else {
        uint64_t v28 = (char *)v14 + 169;
      }
      *(_DWORD *)int v74 = 136315138;
      BOOL v75 = v28;
      uint64_t v29 = "Serializing compiled file failed '%s'";
    }
    _os_log_error_impl(&dword_233120000, v27, OS_LOG_TYPE_ERROR, v29, v74, 0xCu);
    goto LABEL_33;
  }
  BOOL v8 = *re::assetsLogObjects((re *)v4);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 72)) {
      uint64_t v9 = *(void *)(a1 + 80);
    }
    else {
      uint64_t v9 = a1 + 73;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v9;
    _os_log_impl(&dword_233120000, v8, OS_LOG_TYPE_DEFAULT, "Deiniting AssetNetworkLoader: Skipping asset serialization for %s", buf, 0xCu);
  }
}

re::DynamicString *__copy_helper_block_8_40c22_ZTSN2re11AssetHandleE64c24_ZTSN2re13DynamicStringE(uint64_t a1, uint64_t a2)
{
  re::AssetHandle::AssetHandle((re::AssetHandle *)(a1 + 40), (const re::AssetHandle *)(a2 + 40));
  return re::DynamicString::DynamicString((re::DynamicString *)(a1 + 64), (const re::DynamicString *)(a2 + 64));
}

void __destroy_helper_block_8_40c22_ZTSN2re11AssetHandleE64c24_ZTSN2re13DynamicStringE(uint64_t a1)
{
  uint64_t v1 = (re::AssetHandle *)(a1 + 40);
  re::DynamicString::deinit((re::DynamicString *)(a1 + 64));
  re::AssetHandle::~AssetHandle(v1);
}

void re::internal::AssetNetworkLoader::receiveAssetResponse(re::internal::AssetNetworkLoader *this, uint64_t a2, re::internal::AssetEntry *a3, const char *a4, unint64_t a5)
{
  v41[6] = *MEMORY[0x263EF8340];
  long long v10 = (os_unfair_lock_s *)((char *)a3 + 384);
  os_unfair_lock_lock((os_unfair_lock_t)a3 + 96);
  if (*((unsigned char *)a3 + 417))
  {
    uint64_t v12 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(void *)(*(void *)this + 1040), *((void *)a3 + 33));
    re::AssetHandle::AssetHandle((re::AssetHandle *)v36, a3);
    re::DynamicString::format((re::DynamicString *)"%llu", (re::DynamicString *)&v34, a2);
    uint64_t v13 = *(void *)this;
    re::DefaultAssetSerialize::DefaultAssetSerialize((re::DefaultAssetSerialize *)buf, (const re::AssetHandle *)v36);
    *(void *)long long buf = &unk_26E6CA920;
    char v40 = 1;
    re::DynamicString::DynamicString((re::DynamicString *)v41, (const re::DynamicString *)&v34);
    v41[4] = v13;
    *((unsigned char *)a3 + 417) = 0;
    unint64_t v32 = a5;
    unint64_t v33 = 0;
    char v31 = a4;
    uint64_t v14 = (*(uint64_t (**)(void, void, void, uint8_t *, const char *, unint64_t, unint64_t *))(**((void **)this + 2) + 8))(*((void *)this + 2), *(void *)this, *((void *)a3 + 33), buf, a4, a5, &v33);
    if (v14)
    {
      uint64_t v15 = (void *)v14;
      char v31 = (const char *)re::Slice<unsigned char>::range(&v31, v33, a5);
      unint64_t v32 = v16;
      BOOL v25 = &unk_26E7144B8;
      char v26 = 0;
      long long v27 = v31;
      unint64_t v28 = v16;
      re::FixedArrayInputStream::FixedArrayInputStream((re::FixedArrayInputStream *)v29, v31, v16, -1);
      if (*((void *)a3 + 14) == -1) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = *((void *)a3 + 14);
      }
      re::AssetSignpost::ScopeGuard::ScopeGuard((re::AssetSignpost::ScopeGuard *)v24, 2056, v17, **((const char ***)a3 + 33));
      uint64_t v18 = (re *)(*(uint64_t (**)(uint64_t, void *, void **, void))(*(void *)v12 + 24))(v12, v15, &v25, 0);
      if (v18)
      {
        re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v24);
        re::AssetManager::processLoadedAsset_entryStateLocked(*(re::AssetManager **)this, a3, v15);
      }
      else
      {
        uint64_t v22 = *re::assetsLogObjects(v18);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          if (*((void *)a3 + 21)) {
            char v23 = (char *)*((void *)a3 + 22);
          }
          else {
            char v23 = (char *)a3 + 169;
          }
          *(_DWORD *)unint64_t v37 = 136315138;
          unint64_t v38 = v23;
          _os_log_error_impl(&dword_233120000, v22, OS_LOG_TYPE_ERROR, "Failed to create runtime data for network asset '%s'", v37, 0xCu);
        }
        re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v24);
      }
      BOOL v25 = &unk_26E7144B8;
      re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)v29);
    }
    else
    {
      uint64_t v21 = *(re **)this;
      re::AssetManager::putEntryInFailedState_entryStateLocked(v21, (uint64_t)a3, 302, (uint64_t)v30);
      if (*(void *)&v30[0])
      {
        if (BYTE8(v30[0])) {
          (*(void (**)(void))(**(void **)&v30[0] + 40))();
        }
        memset(v30, 0, sizeof(v30));
      }
    }
    *(void *)long long buf = &unk_26E6CA920;
    if (v41[0])
    {
      if (v41[1]) {
        (*(void (**)(void))(*(void *)v41[0] + 40))();
      }
      memset(v41, 0, 32);
    }
    *(void *)long long buf = &unk_26E6CA958;
    re::Optional<re::AssetPath>::~Optional(&buf[8]);
    if (v34 && (v35 & 1) != 0) {
      (*(void (**)(void))(*(void *)v34 + 40))();
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v36);
  }
  else
  {
    uint64_t v19 = *re::assetsLogObjects(v11);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      if (*((void *)a3 + 21)) {
        uint64_t v20 = (char *)*((void *)a3 + 22);
      }
      else {
        uint64_t v20 = (char *)a3 + 169;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v20;
      _os_log_error_impl(&dword_233120000, v19, OS_LOG_TYPE_ERROR, "Received unexpected asset response '%s'", buf, 0xCu);
    }
  }
  os_unfair_lock_unlock(v10);
}

uint64_t re::Slice<unsigned char>::range(void *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a1[1];
  if (v3 < a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. fromInclusive = %zu, unsigned __int16 size = %zu", "fromInclusive <= size()", "range", 241, a2, v3);
    _os_crash();
    __break(1u);
  }
  else if (v3 >= a3)
  {
    return *a1 + a2;
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. toExclusive = %zu, unsigned __int16 size = %zu", "toExclusive <= size()", "range", 242, a2, v3);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

void re::internal::AssetNetworkLoader::receiveAssetFailure(re **this, os_unfair_lock_s *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  BOOL v4 = a2 + 96;
  os_unfair_lock_lock(a2 + 96);
  if (BYTE1(a2[104]._os_unfair_lock_opaque))
  {
    uint64_t v6 = *this;
    re::AssetManager::putEntryInFailedState_entryStateLocked(v6, (uint64_t)a2, 302, (uint64_t)v9);
    if (*(void *)&v9[0])
    {
      if (BYTE8(v9[0])) {
        (*(void (**)(void))(**(void **)&v9[0] + 40))();
      }
      memset(v9, 0, sizeof(v9));
    }
  }
  else
  {
    unint64_t v7 = *re::assetsLogObjects(v5);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      if (*(void *)&a2[42]._os_unfair_lock_opaque) {
        BOOL v8 = *(char **)&a2[44]._os_unfair_lock_opaque;
      }
      else {
        BOOL v8 = (char *)&a2[42]._os_unfair_lock_opaque + 1;
      }
      *(_DWORD *)long long buf = 136315138;
      long long v11 = v8;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "Received unexpected asset request failure '%s'", buf, 0xCu);
    }
  }
  os_unfair_lock_unlock(v4);
}

uint64_t *re::internal::AssetNetworkLoader::receiveMessageFromNetworkPeer(re::internal::AssetNetworkLoader *this, unint64_t a2, char *a3, unsigned int a4)
{
  uint64_t v109 = *MEMORY[0x263EF8340];
  v103[0] = &unk_26E7150B0;
  v103[1] = a3;
  uint64_t v8 = a4;
  uint64_t v104 = a4;
  uint64_t v105 = 0;
  uint64_t v97 = 0;
  std::string v98 = 0;
  uint64_t v99 = 0;
  uint64_t v9 = (re *)re::DynamicString::setCapacity(&v96, 0);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF751E8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v9 = (re *)__cxa_guard_acquire(&qword_26AF751E8);
    if (v9)
    {
      _MergedGlobals_40 = re::introspect_AssetSimpleMessage(0);
      __cxa_guard_release(&qword_26AF751E8);
    }
  }
  long long v10 = (const re::IntrospectionBase *)_MergedGlobals_40;
  long long v11 = re::globalAllocators(v9);
  if (v12)
  {
    unint64_t v84 = a2;
    uint64_t v13 = *(const re::internal::AssetTypeRegistry **)(*(void *)this + 1040);
    uint64_t v14 = *(os_unfair_lock_s **)(*(void *)this + 1128);
    LODWORD(buf) = 0;
    memset(v91, 0, sizeof(v91));
    uint64_t v15 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v91, 0);
    long long v93 = 0u;
    long long v92 = 0u;
    re::DynamicString::setCapacity(&v92, 0);
    uint64_t v94 = 0;
    if (v97) {
      unint64_t v16 = v98;
    }
    else {
      unint64_t v16 = (char *)&v97 + 1;
    }
    double v18 = re::AssetPath::parse((re::AssetPath *)&buf, v16, 0, v13, v14, v107);
    if (!v107[0])
    {
      uint64_t v22 = *(re **)&v107[24];
      if (*(void *)&v107[24] && (v107[32] & 1) != 0) {
        uint64_t v22 = (re *)(*(uint64_t (**)(void, void, double))(**(void **)&v107[24] + 40))(*(void *)&v107[24], *(void *)&v107[40], v18);
      }
      char v23 = *re::assetsLogObjects(v22);
      if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        goto LABEL_81;
      }
      *(_WORD *)int v107 = 0;
      __n128 v24 = "Received invalid asset network message: failed to parse asset path";
      goto LABEL_26;
    }
    if (buf == 3)
    {
      if ((v95 - 104) > 0xFFFFFFFC)
      {
        re::DynamicString::format((re::DynamicString *)"%llu", (re::DynamicString *)v107, v84);
        if (v107[8]) {
          BOOL v25 = *(char **)&v107[16];
        }
        else {
          BOOL v25 = &v107[9];
        }
        if (BYTE8(v92)) {
          char v26 = (const char *)v93;
        }
        else {
          char v26 = (char *)&v92 + 9;
        }
        re::AssetPath::initPeerAssetPath((uint64_t)&buf, v25, v26, v94);
        uint64_t v19 = this;
        if (*(void *)v107 && (v107[8] & 1) != 0) {
          (*(void (**)(void))(**(void **)v107 + 40))();
        }
        goto LABEL_36;
      }
      char v23 = *re::assetsLogObjects(v17);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int v107 = 0;
        __n128 v24 = "Received invalid asset network message: only responses can have memory asset paths";
LABEL_26:
        _os_log_error_impl(&dword_233120000, v23, OS_LOG_TYPE_ERROR, v24, v107, 2u);
      }
    }
    else
    {
      uint64_t v19 = this;
      if (buf != 4)
      {
LABEL_36:
        *(void *)int v107 = *(void *)&v91[0];
        memset(&v107[8], 0, 24);
        re::DynamicString::setCapacity(v107, 0);
        re::AssetPath::fullAssetPath((re::DynamicString *)&buf, (re::DynamicString *)v107);
        unint64_t v27 = re::Hash<re::DynamicString>::operator()((uint64_t)v106, (uint64_t)v107);
        uint64_t v83 = (uint64_t)v19 + 64;
        if (*((void *)v19 + 8)
          && (uint64_t v28 = *(unsigned int *)(*((void *)v19 + 9) + 4 * (v27 % *((unsigned int *)v19 + 22))),
              v28 != 0x7FFFFFFF))
        {
          uint64_t v30 = *((void *)v19 + 10);
          while (!re::DynamicString::operator==(v30 + 80 * v28 + 16, (uint64_t)v107))
          {
            uint64_t v28 = *(_DWORD *)(v30 + 80 * v28 + 8) & 0x7FFFFFFF;
            if (v28 == 0x7FFFFFFF)
            {
              uint64_t v29 = 0;
              goto LABEL_44;
            }
          }
          uint64_t v29 = v30 + 80 * v28 + 48;
LABEL_44:
          uint64_t v19 = this;
        }
        else
        {
          uint64_t v29 = 0;
        }
        char v31 = *(re **)v107;
        if (*(void *)v107 && (v107[8] & 1) != 0) {
          char v31 = (re *)(*(uint64_t (**)(void))(**(void **)v107 + 40))();
        }
        if (v95 == 100)
        {
          unint64_t v32 = re::AssetManager::assetHandle(*(os_unfair_lock_s **)v19, (const re::AssetPath *)&buf, 1, &v88);
          uint64_t v33 = v89;
          if (!v89)
          {
LABEL_80:
            re::AssetHandle::~AssetHandle((re::AssetHandle *)&v88);
            goto LABEL_81;
          }
          uint64_t v34 = *re::assetsLogObjects((re *)v32);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
          {
            re::AssetPath::fullAssetPath((re::AssetPath *)&buf, (re::DynamicString *)v107);
            std::string v59 = (v107[8] & 1) != 0 ? *(unsigned char **)&v107[16] : &v107[9];
            *(_DWORD *)unint64_t v106 = 134218242;
            *(void *)&v106[4] = v84;
            *(_WORD *)&v106[12] = 2080;
            *(void *)&v106[14] = v59;
            _os_log_debug_impl(&dword_233120000, v34, OS_LOG_TYPE_DEBUG, "Received peer asset load request from '%llu' for '%s'", v106, 0x16u);
            if (*(void *)v107)
            {
              if (v107[8]) {
                (*(void (**)(void))(**(void **)v107 + 40))();
              }
            }
          }
          long long v87 = 0uLL;
          long long v86 = *(unint64_t *)&v91[0];
          re::DynamicString::setCapacity(&v86, 0);
          re::AssetPath::fullAssetPath((re::DynamicString *)&buf, (re::DynamicString *)&v86);
          os_unfair_lock_lock((os_unfair_lock_t)(v33 + 384));
          unsigned int v36 = atomic_load((unsigned int *)(v33 + 704));
          int v37 = *(_DWORD *)(v33 + 420);
          if (v37 == 2)
          {
            uint64_t v44 = *re::assetsLogObjects(v35);
            if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
            {
              if (BYTE8(v86)) {
                int v65 = (char *)v87;
              }
              else {
                int v65 = (char *)&v86 + 9;
              }
              *(_DWORD *)int v107 = 136315138;
              *(void *)&v107[4] = v65;
              uint64_t v49 = "Requested asset %s, is set to not sync over the network";
              goto LABEL_133;
            }
          }
          else
          {
            if (v37 == 1)
            {
              re::DynamicString::DynamicString((re::DynamicString *)v107, (const re::DynamicString *)&v86);
              unint64_t v38 = v19;
              goto LABEL_67;
            }
            if (v36 == 2)
            {
              memset(&v107[16], 0, 24);
              re::DynamicString::setCapacity(&v107[8], 0);
              uint64_t v46 = re::AssetHandle::AssetHandle((re::AssetHandle *)v106, (re::internal::AssetEntry *)v33);
              *(_OWORD *)&v107[40] = *(_OWORD *)v106;
              memset(v106, 0, 24);
              uint64_t v108 = *(void *)&v106[16];
              re::AssetHandle::~AssetHandle(v46);
              *(void *)int v107 = v84;
              re::DynamicString::operator=((re::DynamicString *)&v107[8], (re::DynamicString *)&v86);
              re::internal::AssetNetworkLoader::queueAssetSerializationResponse((uint64_t)v19, (uint64_t *)v107);
              goto LABEL_73;
            }
            if (*(_DWORD *)(v33 + 120))
            {
              if (!*(unsigned char *)(v33 + 312))
              {
                AssetAsync_entryStateLocked = re::AssetManager::loadAssetAsync_entryStateLocked(*(unsigned __int8 **)v19, (re::internal::AssetEntry *)v33, 0);
                if (v36 == 3)
                {
                  long long v64 = *re::assetsLogObjects((re *)AssetAsync_entryStateLocked);
                  if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
                  {
                    if (*(void *)(v33 + 168)) {
                      uint64_t v77 = *(void *)(v33 + 176);
                    }
                    else {
                      uint64_t v77 = v33 + 169;
                    }
                    uint64_t v78 = *(void *)(v33 + 728);
                    uint64_t v79 = *(void *)(v78 + 224);
                    uint64_t v80 = *(void *)(v78 + 232);
                    uint64_t v81 = v78 + 225;
                    if (v79) {
                      uint64_t v81 = v80;
                    }
                    *(_DWORD *)int v107 = 136315394;
                    *(void *)&v107[4] = v77;
                    *(_WORD *)&v107[12] = 2080;
                    *(void *)&v107[14] = v81;
                    _os_log_error_impl(&dword_233120000, v64, OS_LOG_TYPE_ERROR, "Network asset requested failed: Asset loading failed '%s' (%s)", v107, 0x16u);
                  }
                  re::DynamicString::DynamicString((re::DynamicString *)v107, (const re::DynamicString *)&v86);
                  re::internal::AssetNetworkLoader::sendFailureResponse(this, v84, v33, (re::DynamicString *)v107);
                  uint64_t v45 = *(void *)v107;
                  if (!*(void *)v107) {
                    goto LABEL_76;
                  }
                  goto LABEL_68;
                }
                re::DynamicString::DynamicString((re::DynamicString *)&v107[8]);
                *(void *)&v107[40] = 0;
                *(void *)&v107[48] = 0;
                uint64_t v108 = 0;
                uint64_t v66 = re::AssetHandle::AssetHandle((re::AssetHandle *)v106, (re::internal::AssetEntry *)v33);
                long long v67 = *(_OWORD *)&v107[40];
                *(_OWORD *)&v107[40] = *(_OWORD *)v106;
                *(_OWORD *)unint64_t v106 = v67;
                uint64_t v68 = v108;
                uint64_t v108 = *(void *)&v106[16];
                *(void *)&v106[16] = v68;
                re::AssetHandle::~AssetHandle(v66);
                *(void *)int v107 = v84;
                re::DynamicString::operator=((re::DynamicString *)&v107[8], (re::DynamicString *)&v86);
                re::DynamicArray<re::internal::NetworkLoadRequestData>::add((uint64_t)v19 + 24, v107);
LABEL_73:
                re::AssetHandle::~AssetHandle((re::AssetHandle *)&v107[40]);
                if (*(void *)&v107[8] && (v107[16] & 1) != 0) {
                  (*(void (**)(void))(**(void **)&v107[8] + 40))();
                }
                goto LABEL_76;
              }
              uint64_t v44 = *re::assetsLogObjects(v35);
              if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
              {
                if (*(void *)(v33 + 168)) {
                  uint64_t v48 = *(void *)(v33 + 176);
                }
                else {
                  uint64_t v48 = v33 + 169;
                }
                *(_DWORD *)int v107 = 136315138;
                *(void *)&v107[4] = v48;
                uint64_t v49 = "Network asset requested failed: Memory asset is not loaded '%s'";
LABEL_133:
                _os_log_error_impl(&dword_233120000, v44, OS_LOG_TYPE_ERROR, v49, v107, 0xCu);
              }
            }
            else
            {
              uint64_t v44 = *re::assetsLogObjects(v35);
              if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
              {
                if (*(void *)(v33 + 168)) {
                  uint64_t v58 = *(void *)(v33 + 176);
                }
                else {
                  uint64_t v58 = v33 + 169;
                }
                *(_DWORD *)int v107 = 136315138;
                *(void *)&v107[4] = v58;
                uint64_t v49 = "Network asset requested failed: Asset is empty '%s'";
                goto LABEL_133;
              }
            }
          }
          re::DynamicString::DynamicString((re::DynamicString *)v107, (const re::DynamicString *)&v86);
          unint64_t v38 = this;
LABEL_67:
          re::internal::AssetNetworkLoader::sendFailureResponse(v38, v84, v33, (re::DynamicString *)v107);
          uint64_t v45 = *(void *)v107;
          if (!*(void *)v107)
          {
LABEL_76:
            os_unfair_lock_unlock((os_unfair_lock_t)(v33 + 384));
            if ((void)v86)
            {
              if (BYTE8(v86)) {
                (*(void (**)(void))(*(void *)v86 + 40))();
              }
              long long v86 = 0u;
              long long v87 = 0u;
            }
            goto LABEL_80;
          }
LABEL_68:
          if (v107[8]) {
            (*(void (**)(uint64_t, void))(*(void *)v45 + 40))(v45, *(void *)&v107[16]);
          }
          memset(v107, 0, 32);
          goto LABEL_76;
        }
        if (!v29) {
          goto LABEL_81;
        }
        unint64_t v39 = *(os_unfair_lock_s **)(v29 + 16);
        if (!v39) {
          goto LABEL_81;
        }
        char v40 = (re::AssetHandle *)(v29 + 8);
        switch(v95)
        {
          case 'g':
            size_t v50 = v104 - v105;
            uint64_t v51 = &a3[v8 - (v104 - v105)];
            if (v101)
            {
              __srCC_SHA256_CTX c = v51;
              uint64_t v52 = re::HashTable<re::DynamicString,re::internal::AssetNetworkLoader::FragmentedNetworkAsset,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator[]((uint64_t)v19 + 112, (uint64_t)&v96);
              uint64_t v53 = v52;
              uint64_t v54 = *(char **)(v52 + 16);
              *(void *)(v52 + 16) = &v54[v50];
              int v55 = *(_DWORD *)(v52 + 32);
              if (v55 != v101)
              {
                log = *re::assetsLogObjects((re *)v52);
                BOOL v56 = os_log_type_enabled(log, OS_LOG_TYPE_ERROR);
                int v55 = v101;
                if (v56)
                {
                  int v75 = *(_DWORD *)(v53 + 32);
                  if (v97) {
                    uint64_t v76 = v98;
                  }
                  else {
                    uint64_t v76 = (char *)&v97 + 1;
                  }
                  *(_DWORD *)int v107 = 67109634;
                  *(_DWORD *)&v107[4] = v101;
                  *(_WORD *)&v107[8] = 1024;
                  *(_DWORD *)&v107[10] = v75;
                  *(_WORD *)&v107[14] = 2080;
                  *(void *)&v107[16] = v76;
                  _os_log_error_impl(&dword_233120000, log, OS_LOG_TYPE_ERROR, "Received asset fragment number %u when expecting fragment number %u for asset %s. This will quite possibly corrupt the asset.", v107, 0x18u);
                  int v55 = v101;
                }
              }
              *(_DWORD *)(v53 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v55 + 1;
              uint64_t v51 = __src;
            }
            else
            {
              uint64_t v54 = (char *)(*(uint64_t (**)(void, void, void))(**((void **)v19 + 20) + 32))(*((void *)v19 + 20), v100, 0);
              *(void *)int v107 = v84;
              *(void *)&v107[8] = v54;
              *(void *)&v107[16] = &v54[v50];
              *(_DWORD *)&v107[24] = v100;
              *(_DWORD *)&v107[28] = v102;
              *(_DWORD *)&v107[32] = v101 + 1;
              re::HashTable<re::DynamicString,re::internal::AssetNetworkLoader::FragmentedNetworkAsset,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addNew((uint64_t)v19 + 112, (const re::DynamicString *)&v96, (long long *)v107);
            }
            size_t v60 = (re *)memcpy(v54, v51, v50);
            int v61 = *re::assetsLogObjects(v60);
            if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
            {
              int v71 = v101;
              int v72 = v102;
              uint64_t v73 = re::AssetHandle::assetInfo(v40);
              if (v73[17]) {
                int v74 = (char *)v73[18];
              }
              else {
                int v74 = (char *)v73 + 137;
              }
              *(_DWORD *)int v107 = 67110402;
              *(_DWORD *)&v107[4] = v71;
              *(_WORD *)&v107[8] = 1024;
              *(_DWORD *)&v107[10] = v72;
              *(_WORD *)&v107[14] = 2048;
              *(void *)&v107[16] = v84;
              *(_WORD *)&v107[24] = 2080;
              *(void *)&v107[26] = v74;
              *(_WORD *)&v107[34] = 2048;
              *(void *)&v107[36] = v50;
              *(_WORD *)&v107[44] = 1024;
              *(_DWORD *)&v107[46] = a4;
              _os_log_debug_impl(&dword_233120000, v61, OS_LOG_TYPE_DEBUG, "Received peer fragmented asset (%u / %u) load response from '%llu' for '%s' payloadSize = %zu, bufferSize = %u", v107, 0x32u);
            }
            if (v101 != v102 - 1) {
              goto LABEL_81;
            }
            uint64_t v62 = re::HashTable<re::DynamicString,re::internal::AssetNetworkLoader::FragmentedNetworkAsset,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator[]((uint64_t)v19 + 112, (uint64_t)&v96);
            re::internal::AssetNetworkLoader::receiveMessageFromNetworkPeer(v19, v84, *(const void **)(v62 + 8), *(_DWORD *)(v62 + 24));
            re::HashTable<re::DynamicString,re::internal::AssetNetworkLoader::FragmentedNetworkAsset,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::remove((uint64_t)v19 + 112, (uint64_t)&v96);
            (*(void (**)(void, void))(**((void **)v19 + 20) + 40))(*((void *)v19 + 20), *(void *)(v62 + 8));
            goto LABEL_122;
          case 'f':
            unint64_t v57 = *re::assetsLogObjects(v31);
            if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v69 = re::AssetHandle::assetInfo(v40);
              if (v69[17]) {
                uint64_t v70 = (char *)v69[18];
              }
              else {
                uint64_t v70 = (char *)v69 + 137;
              }
              *(_DWORD *)int v107 = 134218242;
              *(void *)&v107[4] = v84;
              *(_WORD *)&v107[12] = 2080;
              *(void *)&v107[14] = v70;
              _os_log_debug_impl(&dword_233120000, v57, OS_LOG_TYPE_DEBUG, "Received peer asset load failure from '%llu' for '%s'", v107, 0x16u);
            }
            re::internal::AssetNetworkLoader::receiveAssetFailure((re **)v19, v39);
            goto LABEL_122;
          case 'e':
            BOOL v41 = *re::assetsLogObjects(v31);
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
            {
              unint64_t v42 = re::AssetHandle::assetInfo(v40);
              if (v42[17]) {
                unint64_t v43 = (char *)v42[18];
              }
              else {
                unint64_t v43 = (char *)v42 + 137;
              }
              *(_DWORD *)int v107 = 134218242;
              *(void *)&v107[4] = v84;
              *(_WORD *)&v107[12] = 2080;
              *(void *)&v107[14] = v43;
              _os_log_impl(&dword_233120000, v41, OS_LOG_TYPE_DEFAULT, "Received peer asset load response from '%llu' for '%s'", v107, 0x16u);
            }
            re::internal::AssetNetworkLoader::receiveAssetResponse(v19, v84, (re::internal::AssetEntry *)v39, &a3[v8 - (v104 - v105)], v104 - v105);
LABEL_122:
            re::AssetPath::fullAssetPath((re::AssetPath *)&buf, (re::DynamicString *)v107);
            re::HashTable<re::DynamicString,re::internal::AssetNetworkLoader::PendingRequestedAsset,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::remove(v83, (uint64_t)v107);
            if (*(void *)v107 && (v107[8] & 1) != 0) {
              (*(void (**)(void))(**(void **)v107 + 40))();
            }
            goto LABEL_81;
        }
        char v23 = *re::assetsLogObjects(v31);
        if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
          goto LABEL_81;
        }
        *(_WORD *)int v107 = 0;
        __n128 v24 = "Received invalid asset network message: unknown message type";
        goto LABEL_26;
      }
      if (v95 == 100)
      {
        if (BYTE8(v92)) {
          uint64_t v20 = (const char *)v93;
        }
        else {
          uint64_t v20 = (char *)&v92 + 9;
        }
        re::AssetPath::initMemoryAssetPath(&buf, v20, v94);
        goto LABEL_36;
      }
      char v23 = *re::assetsLogObjects(v17);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int v107 = 0;
        __n128 v24 = "Received invalid asset network message: only requests can have peer asset paths";
        goto LABEL_26;
      }
    }
LABEL_81:
    if ((void)v92)
    {
      if (BYTE8(v92)) {
        (*(void (**)(void))(*(void *)v92 + 40))();
      }
      long long v92 = 0u;
      long long v93 = 0u;
    }
    if (*(void *)&v91[0] && (BYTE8(v91[0]) & 1) != 0) {
      (*(void (**)(void))(**(void **)&v91[0] + 40))();
    }
    goto LABEL_88;
  }
  uint64_t v21 = *re::assetsLogObjects((re *)v12);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_error_impl(&dword_233120000, v21, OS_LOG_TYPE_ERROR, "Received invalid asset network message: failed to parse message", (uint8_t *)&buf, 2u);
  }
LABEL_88:
  uint64_t result = v96;
  if (v96)
  {
    if (v97) {
      return (uint64_t *)(*(uint64_t (**)(void))(*v96 + 40))();
    }
  }
  return result;
}

void re::HashTable<re::DynamicString,re::internal::AssetNetworkLoader::PendingRequestedAsset,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::remove(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v12, a2);
  if (*(void *)a1)
  {
    unint64_t v5 = v4 % *(unsigned int *)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(v6 + 4 * v5);
    if (v7 != 0x7FFFFFFF)
    {
      uint64_t v8 = *(void *)(a1 + 16);
      if (re::DynamicString::operator==(v8 + 80 * v7 + 16, a2))
      {
        *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v8 + 80 * v7 + 8) & 0x7FFFFFFF;
LABEL_8:
        re::HashTable<re::DynamicString,re::internal::AssetNetworkLoader::PendingRequestedAsset,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free((_DWORD *)(*(void *)(a1 + 16) + 80 * v7));
        int v11 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)(*(void *)(a1 + 16) + 80 * v7 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 80 * v7 + 8) & 0x80000000 | *(_DWORD *)(a1 + 36);
        --*(_DWORD *)(a1 + 28);
        *(_DWORD *)(a1 + 36) = v7;
        *(_DWORD *)(a1 + 40) = v11 + 1;
      }
      else
      {
        while (1)
        {
          unsigned int v9 = v7;
          int v10 = *(_DWORD *)(v8 + 80 * v7 + 8);
          uint64_t v7 = v10 & 0x7FFFFFFF;
          if ((v10 & 0x7FFFFFFF) == 0x7FFFFFFF) {
            break;
          }
          if (re::DynamicString::operator==(v8 + 80 * v7 + 16, a2))
          {
            *(_DWORD *)(v8 + 80 * v9 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(v8 + 80 * v9 + 8) & 0x80000000 | *(_DWORD *)(v8 + 80 * v7 + 8) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
}

uint64_t re::HashTable<re::DynamicString,re::internal::AssetNetworkLoader::FragmentedNetworkAsset,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addNew(uint64_t a1, const re::DynamicString *a2, long long *a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v12, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    uint64_t result = re::HashTable<re::DynamicString,re::internal::AssetNetworkLoader::FragmentedNetworkAsset,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return result;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t result = re::DynamicString::operator==(v10 + 88 * v9 + 16, (uint64_t)a2);
    if (result) {
      return result;
    }
    uint64_t v9 = *(_DWORD *)(v10 + 88 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
}

uint64_t re::HashTable<re::DynamicString,re::internal::AssetNetworkLoader::FragmentedNetworkAsset,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator[](uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v9, a2);
  uint64_t v5 = 0x7FFFFFFFLL;
  if (*(void *)a1)
  {
    uint64_t v6 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
    if (v6 != 0x7FFFFFFF)
    {
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v5 = 0x7FFFFFFFLL;
      while (!re::DynamicString::operator==(v7 + 88 * v6 + 16, a2))
      {
        uint64_t v6 = *(_DWORD *)(v7 + 88 * v6 + 8) & 0x7FFFFFFF;
        if (v6 == 0x7FFFFFFF) {
          return *(void *)(a1 + 16) + 88 * v5 + 48;
        }
      }
      uint64_t v5 = v6;
    }
  }
  return *(void *)(a1 + 16) + 88 * v5 + 48;
}

void re::HashTable<re::DynamicString,re::internal::AssetNetworkLoader::FragmentedNetworkAsset,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::remove(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v17, a2);
  if (*(void *)a1)
  {
    unint64_t v5 = v4 % *(unsigned int *)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(v6 + 4 * v5);
    if (v7 != 0x7FFFFFFF)
    {
      uint64_t v8 = *(void *)(a1 + 16);
      if (re::DynamicString::operator==(v8 + 88 * v7 + 16, a2))
      {
        *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v8 + 88 * v7 + 8) & 0x7FFFFFFF;
LABEL_8:
        uint64_t v11 = *(void *)(a1 + 16);
        uint64_t v12 = v11 + 88 * v7;
        int v15 = *(_DWORD *)(v12 + 8);
        uint64_t v14 = (int *)(v12 + 8);
        int v13 = v15;
        if (v15 < 0)
        {
          *uint64_t v14 = v13 & 0x7FFFFFFF;
          re::DynamicString::deinit((re::DynamicString *)(v11 + 88 * v7 + 16));
          uint64_t v11 = *(void *)(a1 + 16);
          int v13 = *(_DWORD *)(v11 + 88 * v7 + 8);
        }
        int v16 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)(v11 + 88 * v7 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(a1 + 36) | v13 & 0x80000000;
        --*(_DWORD *)(a1 + 28);
        *(_DWORD *)(a1 + 36) = v7;
        *(_DWORD *)(a1 + 40) = v16 + 1;
      }
      else
      {
        while (1)
        {
          unsigned int v9 = v7;
          int v10 = *(_DWORD *)(v8 + 88 * v7 + 8);
          uint64_t v7 = v10 & 0x7FFFFFFF;
          if ((v10 & 0x7FFFFFFF) == 0x7FFFFFFF) {
            break;
          }
          if (re::DynamicString::operator==(v8 + 88 * v7 + 16, a2))
          {
            *(_DWORD *)(v8 + 88 * v9 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(v8 + 88 * v9 + 8) & 0x80000000 | *(_DWORD *)(v8 + 88 * v7 + 8) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
}

uint64_t re::internal::AssetNetworkLoader::sendRequestToNetworkPeer_entryStateLocked(uint64_t a1, uint64_t a2, uint64_t a3, re::DynamicString *a4)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v8 = *re::assetsLogObjects((re *)a1);
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG);
  if (v9)
  {
    if (*(void *)(a2 + 168)) {
      uint64_t v23 = *(void *)(a2 + 176);
    }
    else {
      uint64_t v23 = a2 + 169;
    }
    *(_DWORD *)uint64_t buf = 134218242;
    *(void *)unint64_t v32 = a3;
    *(_WORD *)&v32[8] = 2080;
    *(void *)&unsigned char v32[10] = v23;
    _os_log_debug_impl(&dword_233120000, v8, OS_LOG_TYPE_DEBUG, "Sending peer asset load request to '%llu' for '%s'", buf, 0x16u);
  }
  *(void *)&unsigned char v32[12] = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  re::DynamicString::setCapacity(&v32[4], 0);
  *(_DWORD *)uint64_t buf = 100;
  int v10 = re::DynamicString::operator=((re::DynamicString *)&v32[4], a4);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF751E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF751E8))
  {
    _MergedGlobals_40 = re::introspect_AssetSimpleMessage(0);
    __cxa_guard_release(&qword_26AF751E8);
  }
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  if (v11)
  {
    uint64_t v12 = v29;
    char v13 = (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), a3, v29, v28);
    if (v13)
    {
      *(unsigned char *)(a2 + 417) = 1;
      uint64_t v24 = a3;
      re::AssetHandle::AssetHandle((re::AssetHandle *)v25, (re::internal::AssetEntry *)a2);
      unint64_t v15 = re::Hash<re::DynamicString>::operator()((uint64_t)&v30, (uint64_t)a4);
      unint64_t v16 = v15;
      if (*(void *)(a1 + 64))
      {
        unint64_t v17 = v15 % *(unsigned int *)(a1 + 88);
        uint64_t v18 = *(unsigned int *)(*(void *)(a1 + 72) + 4 * v17);
        if (v18 != 0x7FFFFFFF)
        {
          uint64_t v19 = *(void *)(a1 + 80);
          while (!re::DynamicString::operator==(v19 + 80 * v18 + 16, (uint64_t)a4))
          {
            uint64_t v18 = *(_DWORD *)(v19 + 80 * v18 + 8) & 0x7FFFFFFF;
            if (v18 == 0x7FFFFFFF) {
              goto LABEL_20;
            }
          }
          goto LABEL_21;
        }
      }
      else
      {
        LODWORD(v17) = 0;
      }
LABEL_20:
      re::HashTable<re::DynamicString,re::internal::AssetNetworkLoader::PendingRequestedAsset,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1 + 64, v17, v16, a4, &v24);
      ++*(_DWORD *)(a1 + 104);
LABEL_21:
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v25);
      goto LABEL_22;
    }
    uint64_t v21 = *(re **)a1;
    re::AssetManager::putEntryInFailedState_entryStateLocked(v21, a2, 302, (uint64_t)v26);
    if (*(void *)&v26[0])
    {
      if (BYTE8(v26[0])) {
        (*(void (**)(void))(**(void **)&v26[0] + 40))();
      }
      memset(v26, 0, sizeof(v26));
    }
  }
  else
  {
    uint64_t v20 = *(re **)a1;
    re::AssetManager::putEntryInFailedState_entryStateLocked(v20, a2, 302, (uint64_t)v27);
    if (*(void *)&v27[0])
    {
      if (BYTE8(v27[0])) {
        (*(void (**)(void))(**(void **)&v27[0] + 40))();
      }
      memset(v27, 0, sizeof(v27));
    }
  }
LABEL_22:
  uint64_t result = *(void *)&v32[4];
  if (*(void *)&v32[4])
  {
    if (v32[12]) {
      return (*(uint64_t (**)(void))(**(void **)&v32[4] + 40))(*(void *)&v32[4]);
    }
  }
  return result;
}

void re::DynamicArray<re::internal::NetworkLoadRequestData>::removeAt(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 - 1 > a2)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = v4 + (v2 << 6);
    uint64_t v6 = v4 + (a2 << 6);
    *(void *)uint64_t v6 = *(void *)(v5 - 64);
    re::DynamicString::operator=((re::DynamicString *)(v6 + 8), (re::DynamicString *)(v5 - 56));
    long long v7 = *(_OWORD *)(v6 + 40);
    *(void *)(v6 + 40) = 0;
    uint64_t v8 = *(void *)(v5 - 16);
    *(void *)(v6 + 40) = *(void *)(v5 - 24);
    *(void *)(v6 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v8;
    *(_OWORD *)(v5 - 24) = v7;
    uint64_t v9 = *(void *)(v6 + 56);
    *(void *)(v6 + 56) = *(void *)(v5 - 8);
    *(void *)(v5 - re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v9;
    unint64_t v2 = *(void *)(a1 + 16);
  }
  unint64_t v10 = *(void *)(a1 + 32) + (v2 << 6);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(v10 - 24));
  re::DynamicString::deinit((re::DynamicString *)(v10 - 56));
  --*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::internal::AssetNetworkLoader::update(re::internal::AssetNetworkLoader *this)
{
  uint64_t v103 = *MEMORY[0x263EF8340];
  if ((int)*((void *)this + 5) >= 1)
  {
    uint64_t v2 = *((void *)this + 5) + 1;
    while (1)
    {
      unint64_t v3 = (v2 - 2);
      unint64_t v4 = *((void *)this + 5);
      if (v4 <= v3)
      {
        *(void *)long long v87 = 0;
        long long v85 = 0u;
        long long v86 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)std::string v98 = 136315906;
        *(void *)uint64_t v99 = "operator[]";
        *(_WORD *)&v99[8] = 1024;
        *(_DWORD *)&v99[10] = 789;
        *(_WORD *)&v99[14] = 2048;
        *(void *)&v99[16] = (v2 - 2);
        *(_WORD *)&v99[24] = 2048;
        *(void *)&v99[26] = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v5 = *((void *)this + 7);
      uint64_t v6 = (uint64_t *)(v5 + (v3 << 6));
      uint64_t v7 = v6[6];
      os_unfair_lock_lock((os_unfair_lock_t)(v7 + 384));
      unsigned int v9 = atomic_load((unsigned int *)(v7 + 704));
      if (!v9)
      {
        unint64_t v10 = *re::assetsLogObjects(v8);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          if (*(unsigned char *)(v7 + 168)) {
            uint64_t v14 = *(void *)(v7 + 176);
          }
          else {
            uint64_t v14 = v7 + 169;
          }
          *(_DWORD *)uint64_t buf = 136315138;
          *(void *)&uint8_t buf[4] = v14;
          _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Network asset requested failed: Asset didn't load '%s'", buf, 0xCu);
        }
        uint64_t v11 = *v6;
        re::DynamicString::DynamicString((re::DynamicString *)v76, (const re::DynamicString *)(v5 + (v3 << 6) + 8));
        re::internal::AssetNetworkLoader::sendFailureResponse(this, v11, v7, (re::DynamicString *)v76);
        if (*(void *)&v76[0])
        {
          if (BYTE8(v76[0])) {
            (*(void (**)(void))(**(void **)&v76[0] + 40))();
          }
          memset(v76, 0, sizeof(v76));
        }
        goto LABEL_18;
      }
      if (v9 == 3) {
        break;
      }
      if (v9 == 2)
      {
        re::internal::AssetNetworkLoader::queueAssetSerializationResponse((uint64_t)this, (uint64_t *)(v5 + (v3 << 6)));
LABEL_18:
        re::DynamicArray<re::internal::NetworkLoadRequestData>::removeAt((uint64_t)this + 24, (v2 - 2));
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 384));
      if ((unint64_t)--v2 <= 1) {
        goto LABEL_31;
      }
    }
    uint64_t v12 = *re::assetsLogObjects(v8);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      if (*(unsigned char *)(v7 + 168)) {
        uint64_t v15 = *(void *)(v7 + 176);
      }
      else {
        uint64_t v15 = v7 + 169;
      }
      uint64_t v16 = *(void *)(v7 + 728);
      uint64_t v17 = *(void *)(v16 + 224);
      uint64_t v18 = *(void *)(v16 + 232);
      uint64_t v19 = v16 + 225;
      if (v17) {
        uint64_t v19 = v18;
      }
      *(_DWORD *)uint64_t buf = 136315394;
      *(void *)&uint8_t buf[4] = v15;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v19;
      _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "Network asset requested failed: Asset loading failed '%s' (%s)", buf, 0x16u);
    }
    uint64_t v13 = *v6;
    re::DynamicString::DynamicString((re::DynamicString *)v77, (const re::DynamicString *)(v5 + (v3 << 6) + 8));
    re::internal::AssetNetworkLoader::sendFailureResponse(this, v13, v7, (re::DynamicString *)v77);
    if (*(void *)&v77[0])
    {
      if (BYTE8(v77[0])) {
        (*(void (**)(void))(**(void **)&v77[0] + 40))();
      }
      memset(v77, 0, sizeof(v77));
    }
    goto LABEL_18;
  }
LABEL_31:
  os_unfair_lock_lock((os_unfair_lock_t)this + 48);
  memset(buf, 0, 24);
  uint64_t v72 = 0;
  long long v73 = 0u;
  *(void *)&buf[32] = 0;
  int v75 = 0;
  int v74 = 1;
  *(_DWORD *)&unsigned char buf[24] = 1;
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)&v72, (uint64_t)this + 200);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)this + 200, (uint64_t)buf);
  re::DynamicArray<re::internal::AssetNetworkLoader::SerializedAssetResponse>::deinit((uint64_t)buf);
  os_unfair_lock_unlock((os_unfair_lock_t)this + 48);
  if (*((void *)&v73 + 1))
  {
    uint64_t v21 = v75;
    uint64_t v22 = &v75[14 * *((void *)&v73 + 1)];
    do
    {
      int v23 = *((unsigned __int8 *)v21 + 104);
      uint64_t v24 = *re::assetsLogObjects((re *)v20);
      if (v23)
      {
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          unint64_t v57 = re::AssetHandle::assetInfo((re::AssetHandle *)(v21 + 1));
          if (v57[17]) {
            uint64_t v58 = (char *)v57[18];
          }
          else {
            uint64_t v58 = (char *)v57 + 137;
          }
          uint64_t v59 = *v21;
          *(_DWORD *)uint64_t buf = 136315394;
          *(void *)&uint8_t buf[4] = v58;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v59;
          _os_log_error_impl(&dword_233120000, v24, OS_LOG_TYPE_ERROR, "Failed to serialize reponse for asset '%s' for Peer '%llu'", buf, 0x16u);
        }
        uint64_t v25 = *v21;
        uint64_t v26 = v21[2];
        re::DynamicString::DynamicString((re::DynamicString *)buf, (const re::DynamicString *)(v21 + 4));
        re::internal::AssetNetworkLoader::sendFailureResponse(this, v25, v26, (re::DynamicString *)buf);
        uint64_t v20 = *(void *)buf;
        if (*(void *)buf && (buf[8] & 1) != 0) {
          uint64_t v20 = (*(uint64_t (**)(void))(**(void **)buf + 40))();
        }
      }
      else
      {
        BOOL v27 = os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
        if (v27)
        {
          uint64_t v28 = re::AssetHandle::assetInfo((re::AssetHandle *)(v21 + 1));
          if (v28[17]) {
            uint64_t v29 = (char *)v28[18];
          }
          else {
            uint64_t v29 = (char *)v28 + 137;
          }
          uint64_t v30 = *v21;
          *(_DWORD *)uint64_t buf = 136315394;
          *(void *)&uint8_t buf[4] = v29;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v30;
          _os_log_impl(&dword_233120000, v24, OS_LOG_TYPE_DEFAULT, "Sending network response for asset '%s' to Peer '%llu'", buf, 0x16u);
        }
        char v31 = (_anonymous_namespace_ *)re::AssetSimpleMessage::maxBytesPerPacket((re::AssetSimpleMessage *)v27);
        uint64_t v32 = v21[10];
        if (v31 && (size_t v33 = (size_t)v31, v71 = v21[10], v71 > (unint64_t)v31))
        {
          memset(&buf[8], 0, 32);
          re::DynamicString::setCapacity(&buf[8], 0);
          *(_DWORD *)uint64_t buf = 101;
          uint64_t v34 = re::DynamicString::operator=((re::DynamicString *)&buf[8], (re::DynamicString *)(v21 + 4));
          LODWORD(v85) = (v32 - 1) / v33 + 1;
          *(_DWORD *)&unsigned char buf[40] = v32;
          *(_DWORD *)&buf[44] = -1;
          uint64_t v35 = *re::assetsLogObjects(v34);
          unsigned int v36 = (_anonymous_namespace_ *)os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG);
          if (v36)
          {
            long long v64 = &buf[17];
            if (buf[16]) {
              long long v64 = *(uint8_t **)&buf[24];
            }
            uint64_t v65 = *v21;
            *(_DWORD *)std::string v98 = 136315650;
            *(void *)uint64_t v99 = v64;
            *(_WORD *)&v99[8] = 2048;
            *(void *)&v99[10] = v65;
            *(_WORD *)&v99[18] = 1024;
            *(_DWORD *)&v99[20] = v85;
            _os_log_debug_impl(&dword_233120000, v35, OS_LOG_TYPE_DEBUG, "Asset %s for peer %llu needs to be fragmented (%u)", v98, 0x1Cu);
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF751E8, memory_order_acquire) & 1) == 0)
          {
            unsigned int v36 = (_anonymous_namespace_ *)__cxa_guard_acquire(&qword_26AF751E8);
            if (v36)
            {
              _MergedGlobals_40 = re::introspect_AssetSimpleMessage(0);
              __cxa_guard_release(&qword_26AF751E8);
            }
          }
          int v37 = (const re::IntrospectionBase *)_MergedGlobals_40;
          memset(&v99[12], 0, 24);
          re::DynamicString::setCapacity(&v99[4], 0);
          unint64_t v38 = re::DynamicString::operator=((re::DynamicString *)&v99[4], (re::DynamicString *)&buf[8]);
          int v100 = *(_DWORD *)&buf[40];
          long long v82 = &unk_26E714838;
          int v83 = 0;
          if (v39)
          {
            uint64_t v40 = v83;
            if (v83)
            {
              unsigned int v102 = (*(_DWORD *)&buf[40] - 1) / v33 + 1;
              *(_DWORD *)std::string v98 = 103;
              uint64_t v42 = v41;
              int v101 = 0;
              if (v102)
              {
                uint64_t v70 = v22;
                uint64_t v43 = 0;
                while (1)
                {
                  if (v33 >= v71 - v43) {
                    size_t v44 = v71 - v43;
                  }
                  else {
                    size_t v44 = v33;
                  }
                  uint64_t v78 = &unk_26E714D80;
                  uint64_t v79 = v42;
                  size_t v80 = v44 + v40;
                  uint64_t v81 = 0;
                  uint64_t v45 = *re::assetsLogObjects((re *)v41);
                  if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
                  {
                    uint64_t v49 = &v99[13];
                    if (v99[12]) {
                      uint64_t v49 = *(unsigned char **)&v99[20];
                    }
                    uint64_t v50 = *v21;
                    *(_DWORD *)long long v87 = 136316418;
                    *(void *)&v87[4] = v49;
                    __int16 v88 = 2048;
                    uint64_t v89 = v50;
                    __int16 v90 = 1024;
                    int v91 = v101;
                    __int16 v92 = 1024;
                    unsigned int v93 = v102;
                    __int16 v94 = 2048;
                    size_t v95 = v44;
                    __int16 v96 = 2048;
                    size_t v97 = v44 + v40;
                    _os_log_debug_impl(&dword_233120000, v45, OS_LOG_TYPE_DEBUG, "Sending '%s' fragmented to peer '%llu', current fragment (%u/ %u) payloadSize = %zu, bytesSent = %zu", v87, 0x36u);
                  }
                  if ((v46 & 1) == 0) {
                    break;
                  }
                  if (v80 - v81 >= v44) {
                    size_t v47 = v44;
                  }
                  else {
                    size_t v47 = v80 - v81;
                  }
                  memcpy((void *)(v79 + v81), (const void *)(v21[12] + v43), v47);
                  v81 += v47;
                  uint64_t v41 = (*(uint64_t (**)(void, uint64_t, uint64_t, size_t))(**((void **)this + 1) + 16))(*((void *)this + 1), *v21, v42, v44 + v40);
                  int v48 = v41;
                  if (++v101 < v102)
                  {
                    v43 += v44;
                    if (v41) {
                      continue;
                    }
                  }
                  uint64_t v22 = v70;
                  goto LABEL_90;
                }
                int v63 = *re::assetsLogObjects((re *)v46);
                if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v68 = &v99[13];
                  if (v99[12]) {
                    uint64_t v68 = *(unsigned char **)&v99[20];
                  }
                  *(_DWORD *)long long v87 = 136315138;
                  *(void *)&v87[4] = v68;
                  _os_log_error_impl(&dword_233120000, v63, OS_LOG_TYPE_ERROR, "Failed to serialize network message for '%s'", v87, 0xCu);
                }
                int v56 = 0;
                int v48 = 1;
                uint64_t v22 = v70;
              }
              else
              {
                int v48 = 1;
LABEL_90:
                int v56 = 1;
              }
            }
            else
            {
              size_t v60 = *re::assetsLogObjects((re *)v39);
              if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
              {
                long long v67 = &buf[17];
                if (buf[16]) {
                  long long v67 = *(uint8_t **)&buf[24];
                }
                *(_DWORD *)long long v87 = 136315138;
                *(void *)&v87[4] = v67;
                _os_log_error_impl(&dword_233120000, v60, OS_LOG_TYPE_ERROR, "Failed to serialize network message for '%s'", v87, 0xCu);
              }
              int v48 = 0;
              int v56 = 0;
            }
          }
          else
          {
            int v55 = *re::assetsLogObjects((re *)v39);
            if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
            {
              uint64_t v66 = &buf[17];
              if (buf[16]) {
                uint64_t v66 = *(uint8_t **)&buf[24];
              }
              *(_DWORD *)long long v87 = 136315138;
              *(void *)&v87[4] = v66;
              _os_log_error_impl(&dword_233120000, v55, OS_LOG_TYPE_ERROR, "Failed to serialize network message for '%s'", v87, 0xCu);
            }
            int v48 = 0;
            int v56 = 0;
          }
          if (*(void *)&v99[4] && (v99[12] & 1) != 0) {
            (*(void (**)(void))(**(void **)&v99[4] + 40))();
          }
          uint64_t v20 = *(void *)&buf[8];
          if (*(void *)&buf[8] && (buf[16] & 1) != 0) {
            uint64_t v20 = (*(uint64_t (**)(void))(**(void **)&buf[8] + 40))();
          }
          BOOL v51 = v48 != 0;
          if (!v56) {
            goto LABEL_98;
          }
        }
        else
        {
          uint64_t v20 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**((void **)this + 1) + 16))(*((void *)this + 1), *v21, v21[12], v32);
          BOOL v51 = v20;
        }
        uint64_t v52 = *re::assetsLogObjects((re *)v20);
        uint64_t v20 = os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG);
        if (v20)
        {
          uint64_t v61 = *v21;
          if (v21[5]) {
            uint64_t v62 = (char *)v21[6];
          }
          else {
            uint64_t v62 = (char *)v21 + 41;
          }
          *(_DWORD *)uint64_t buf = 134218242;
          *(void *)&uint8_t buf[4] = v61;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v62;
          _os_log_debug_impl(&dword_233120000, v52, OS_LOG_TYPE_DEBUG, "Sending peer asset load result to '%llu' for '%s'", buf, 0x16u);
          if (!v51)
          {
LABEL_68:
            uint64_t v53 = *re::assetsLogObjects((re *)v20);
            uint64_t v20 = os_log_type_enabled(v53, OS_LOG_TYPE_ERROR);
            if (v20)
            {
              if (v21[5]) {
                uint64_t v54 = (char *)v21[6];
              }
              else {
                uint64_t v54 = (char *)v21 + 41;
              }
              *(_DWORD *)uint64_t buf = 136315138;
              *(void *)&uint8_t buf[4] = v54;
              _os_log_error_impl(&dword_233120000, v53, OS_LOG_TYPE_ERROR, "Failed to send message for '%s'", buf, 0xCu);
            }
          }
        }
        else if (!v51)
        {
          goto LABEL_68;
        }
      }
LABEL_98:
      v21 += 14;
    }
    while (v21 != v22);
  }
  return re::DynamicArray<re::internal::AssetNetworkLoader::SerializedAssetResponse>::deinit((uint64_t)&v72);
}

void *re::DynamicArray<re::internal::AssetNetworkLoader::SerializedAssetResponse>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::internal::AssetNetworkLoader::SerializedAssetResponse>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x70uLL))
        {
          uint64_t v2 = 112 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 112 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element unsigned __int16 size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 112, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        unsigned char v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 112 * v9;
        uint64_t v11 = v8 + 8;
        uint64_t v12 = v7;
        do
        {
          *uint64_t v12 = *(void *)(v11 - 8);
          v12[1] = 0;
          v12[2] = 0;
          v12[3] = 0;
          v12[2] = *(void *)(v11 + 8);
          *(void *)(v11 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
          uint64_t v13 = v12[1];
          v12[1] = 0;
          v12[1] = *(void *)v11;
          *(void *)uint64_t v11 = v13;
          uint64_t v14 = v12[3];
          v12[3] = *(void *)(v11 + 16);
          *(void *)(v11 + 16) = v14;
          *((_OWORD *)v12 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
          *((_OWORD *)v12 + 3) = 0u;
          v12[4] = *(void *)(v11 + 24);
          *(void *)(v11 + 24) = 0;
          v12[7] = *(void *)(v11 + 48);
          *(void *)(v11 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
          uint64_t v16 = v12[5];
          uint64_t v15 = v12[6];
          uint64_t v17 = *(void *)(v11 + 40);
          v12[5] = *(void *)(v11 + 32);
          v12[6] = v17;
          *(void *)(v11 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v16;
          *(void *)(v11 + 40) = v15;
          v12[12] = 0;
          *((_DWORD *)v12 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
          v12[9] = 0;
          v12[10] = 0;
          char v12[8] = 0;
          uint64_t v18 = *(void *)(v11 + 64);
          char v12[8] = *(void *)(v11 + 56);
          *(void *)(v11 + 56) = 0;
          v12[9] = v18;
          *(void *)(v11 + 64) = 0;
          uint64_t v19 = v12[10];
          v12[10] = *(void *)(v11 + 72);
          *(void *)(v11 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v19;
          uint64_t v20 = v12[12];
          v12[12] = *(void *)(v11 + 88);
          *(void *)(v11 + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v20;
          ++*(_DWORD *)(v11 + 80);
          ++*((_DWORD *)v12 + 22);
          *((unsigned char *)v12 + 104) = *(unsigned char *)(v11 + 96);
          re::DynamicArray<unsigned long>::deinit(v11 + 56);
          re::DynamicString::deinit((re::DynamicString *)(v11 + 24));
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
          uint64_t v21 = v11 + 104;
          v11 += 112;
          v12 += 14;
        }
        while (v21 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void std::__function::__func<re::internal::AssetNetworkLoader::init(re::AssetManager *,re::AssetNetworkMessaging *,re::NetworkAssetSerializationService *)::$_0,std::allocator<re::internal::AssetNetworkLoader::init(re::AssetManager *,re::AssetNetworkMessaging *,re::NetworkAssetSerializationService *)::$_0>,void ()(unsigned long long,void const*,unsigned int)>::~__func()
{
}

void *std::__function::__func<re::internal::AssetNetworkLoader::init(re::AssetManager *,re::AssetNetworkMessaging *,re::NetworkAssetSerializationService *)::$_0,std::allocator<re::internal::AssetNetworkLoader::init(re::AssetManager *,re::AssetNetworkMessaging *,re::NetworkAssetSerializationService *)::$_0>,void ()(unsigned long long,void const*,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26E6CA390;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::internal::AssetNetworkLoader::init(re::AssetManager *,re::AssetNetworkMessaging *,re::NetworkAssetSerializationService *)::$_0,std::allocator<re::internal::AssetNetworkLoader::init(re::AssetManager *,re::AssetNetworkMessaging *,re::NetworkAssetSerializationService *)::$_0>,void ()(unsigned long long,void const*,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E6CA390;
  a2[1] = v2;
  return result;
}

uint64_t *std::__function::__func<re::internal::AssetNetworkLoader::init(re::AssetManager *,re::AssetNetworkMessaging *,re::NetworkAssetSerializationService *)::$_0,std::allocator<re::internal::AssetNetworkLoader::init(re::AssetManager *,re::AssetNetworkMessaging *,re::NetworkAssetSerializationService *)::$_0>,void ()(unsigned long long,void const*,unsigned int)>::operator()(uint64_t a1, unint64_t *a2, char **a3, unsigned int *a4)
{
  return re::internal::AssetNetworkLoader::receiveMessageFromNetworkPeer(*(re::internal::AssetNetworkLoader **)(a1 + 8), *a2, *a3, *a4);
}

uint64_t std::__function::__func<re::internal::AssetNetworkLoader::init(re::AssetManager *,re::AssetNetworkMessaging *,re::NetworkAssetSerializationService *)::$_0,std::allocator<re::internal::AssetNetworkLoader::init(re::AssetManager *,re::AssetNetworkMessaging *,re::NetworkAssetSerializationService *)::$_0>,void ()(unsigned long long,void const*,unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::internal::AssetNetworkLoader::init(re::AssetManager *,re::AssetNetworkMessaging *,re::NetworkAssetSerializationService *)::$_0,std::allocator<re::internal::AssetNetworkLoader::init(re::AssetManager *,re::AssetNetworkMessaging *,re::NetworkAssetSerializationService *)::$_0>,void ()(unsigned long long,void const*,unsigned int)>::target_type()
{
}

void *std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(unsigned long long,void const*,unsigned int)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void std::__function::__func<re::internal::AssetNetworkLoader::init(re::AssetManager *,re::AssetNetworkMessaging *,re::NetworkAssetSerializationService *)::$_1,std::allocator<re::internal::AssetNetworkLoader::init(re::AssetManager *,re::AssetNetworkMessaging *,re::NetworkAssetSerializationService *)::$_1>,void ()(unsigned long long)>::~__func()
{
}

void *std::__function::__func<re::internal::AssetNetworkLoader::init(re::AssetManager *,re::AssetNetworkMessaging *,re::NetworkAssetSerializationService *)::$_1,std::allocator<re::internal::AssetNetworkLoader::init(re::AssetManager *,re::AssetNetworkMessaging *,re::NetworkAssetSerializationService *)::$_1>,void ()(unsigned long long)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26E6CA420;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::internal::AssetNetworkLoader::init(re::AssetManager *,re::AssetNetworkMessaging *,re::NetworkAssetSerializationService *)::$_1,std::allocator<re::internal::AssetNetworkLoader::init(re::AssetManager *,re::AssetNetworkMessaging *,re::NetworkAssetSerializationService *)::$_1>,void ()(unsigned long long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E6CA420;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::internal::AssetNetworkLoader::init(re::AssetManager *,re::AssetNetworkMessaging *,re::NetworkAssetSerializationService *)::$_1,std::allocator<re::internal::AssetNetworkLoader::init(re::AssetManager *,re::AssetNetworkMessaging *,re::NetworkAssetSerializationService *)::$_1>,void ()(unsigned long long)>::operator()(_anonymous_namespace_ *a1, uint64_t *a2)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a2;
  uint64_t v3 = *((void *)a1 + 1);
  uint64_t v39 = 0;
  v36[1] = 0;
  uint64_t v37 = 0;
  int v38 = 0;
  re::DynamicArray<re::DynamicString>::setCapacity(v36, 0);
  ++v38;
  unint64_t v4 = (re *)re::DynamicString::format((re::DynamicString *)"%llu", (re::DynamicString *)&v34, v2);
  uint64_t v5 = *(unsigned int *)(v3 + 96);
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (int *)(*(void *)(v3 + 80) + 8);
    while (1)
    {
      int v8 = *v7;
      v7 += 20;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(v3 + 96);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 != v6)
  {
    uint64_t v21 = v6;
    do
    {
      uint64_t v22 = *(void *)(v3 + 80);
      uint64_t v23 = v22 + 80 * v21;
      if (*(void *)(v23 + 48) == v2)
      {
        uint64_t v24 = (re::DynamicString *)(v23 + 16);
        uint64_t v25 = *(void *)(v22 + 80 * v21 + 64);
        if (v25)
        {
          uint64_t v26 = (os_unfair_lock_s *)(v25 + 384);
          os_unfair_lock_lock((os_unfair_lock_t)(v25 + 384));
          if (*(unsigned char *)(v25 + 417))
          {
            uint64_t v28 = *(re **)v3;
            re::DynamicString::format((re::DynamicString *)"Network peer %llu has left", (re::DynamicString *)v33, v2);
            re::AssetManager::putEntryInFailedState_entryStateLocked(v28, v25, 302, (uint64_t)v33);
            if (*(void *)&v33[0])
            {
              if (BYTE8(v33[0])) {
                (*(void (**)(void))(**(void **)&v33[0] + 40))();
              }
              memset(v33, 0, sizeof(v33));
            }
            re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)v36, v24);
          }
          else
          {
            uint64_t v29 = *re::assetsLogObjects(v27);
            if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
            {
              if (*(unsigned char *)(v22 + 80 * v21 + 24)) {
                uint64_t v32 = *(char **)(v22 + 80 * v21 + 32);
              }
              else {
                uint64_t v32 = (char *)v24 + 9;
              }
              *(_DWORD *)uint64_t buf = 136315138;
              *(void *)&uint8_t buf[4] = v32;
              _os_log_error_impl(&dword_233120000, v29, OS_LOG_TYPE_ERROR, "Pending requested asset state is inconsistent: expected loading-from-peer state: %s", buf, 0xCu);
            }
          }
          os_unfair_lock_unlock(v26);
        }
        else
        {
          unint64_t v4 = re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)v36, v24);
        }
      }
      unsigned int v30 = *(_DWORD *)(v3 + 96);
      if (v30 <= (int)v6 + 1) {
        unsigned int v30 = v6 + 1;
      }
      while (1)
      {
        uint64_t v21 = (v6 + 1);
        if (v30 - 1 == v6) {
          break;
        }
        LODWORD(v6) = v6 + 1;
        unsigned int v31 = v21;
        if ((*(_DWORD *)(*(void *)(v3 + 80) + 80 * v21 + 8) & 0x80000000) != 0) {
          goto LABEL_49;
        }
      }
      unsigned int v31 = v30;
LABEL_49:
      LODWORD(v6) = v31;
    }
    while (v5 != v31);
  }
  if (v37)
  {
    uint64_t v9 = *re::assetsLogObjects(v4);
    BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    uint64_t v11 = v37;
    if (v10)
    {
      *(_DWORD *)uint64_t buf = 134218240;
      *(void *)&uint8_t buf[4] = v37;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v2;
      _os_log_impl(&dword_233120000, v9, OS_LOG_TYPE_DEFAULT, "%zu network asset load outstanding request(s) to peer '%llu' are being abandoned due to that peer leaving", buf, 0x16u);
      uint64_t v11 = v37;
    }
    if (v11)
    {
      uint64_t v12 = v39;
      uint64_t v13 = v39 + 32 * v11;
      do
      {
        re::HashTable<re::DynamicString,re::internal::AssetNetworkLoader::PendingRequestedAsset,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::remove(v3 + 64, v12);
        unint64_t v14 = re::Hash<re::DynamicString>::operator()((uint64_t)buf, v12);
        if (*(void *)(v3 + 112))
        {
          uint64_t v15 = *(unsigned int *)(*(void *)(v3 + 120) + 4 * (v14 % *(unsigned int *)(v3 + 136)));
          if (v15 != 0x7FFFFFFF)
          {
            uint64_t v16 = *(void *)(v3 + 128);
            while (!re::DynamicString::operator==(v16 + 88 * v15 + 16, v12))
            {
              uint64_t v15 = *(_DWORD *)(v16 + 88 * v15 + 8) & 0x7FFFFFFF;
              if (v15 == 0x7FFFFFFF) {
                goto LABEL_20;
              }
            }
            (*(void (**)(void, void))(**(void **)(v3 + 160) + 40))(*(void *)(v3 + 160), *(void *)(v16 + 88 * v15 + 56));
            re::HashTable<re::DynamicString,re::internal::AssetNetworkLoader::FragmentedNetworkAsset,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::remove(v3 + 112, v12);
          }
        }
LABEL_20:
        v12 += 32;
      }
      while (v12 != v13);
    }
  }
  if ((int)*(void *)(v3 + 40) >= 1)
  {
    unint64_t v17 = *(void *)(v3 + 40) + 1;
    do
    {
      unint64_t v18 = (v17 - 2);
      unint64_t v19 = *(void *)(v3 + 40);
      if (v19 <= v18)
      {
        uint64_t v40 = 0;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v50 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v41 = 136315906;
        uint64_t v42 = "operator[]";
        __int16 v43 = 1024;
        int v44 = 789;
        __int16 v45 = 2048;
        uint64_t v46 = (v17 - 2);
        __int16 v47 = 2048;
        unint64_t v48 = v19;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (*(void *)(*(void *)(v3 + 56) + (v18 << 6)) == v2) {
        re::DynamicArray<re::internal::NetworkLoadRequestData>::removeAt(v3 + 24, (v17 - 2));
      }
      --v17;
    }
    while (v17 > 1);
  }
  if (v34 && (v35 & 1) != 0) {
    (*(void (**)(void))(*(void *)v34 + 40))();
  }
  return re::DynamicArray<re::DynamicString>::deinit((uint64_t)v36);
}

uint64_t std::__function::__func<re::internal::AssetNetworkLoader::init(re::AssetManager *,re::AssetNetworkMessaging *,re::NetworkAssetSerializationService *)::$_1,std::allocator<re::internal::AssetNetworkLoader::init(re::AssetManager *,re::AssetNetworkMessaging *,re::NetworkAssetSerializationService *)::$_1>,void ()(unsigned long long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::internal::AssetNetworkLoader::init(re::AssetManager *,re::AssetNetworkMessaging *,re::NetworkAssetSerializationService *)::$_1,std::allocator<re::internal::AssetNetworkLoader::init(re::AssetManager *,re::AssetNetworkMessaging *,re::NetworkAssetSerializationService *)::$_1>,void ()(unsigned long long)>::target_type()
{
}

void *std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(unsigned long long)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *re::DynamicArray<re::internal::NetworkLoadRequestData>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::internal::NetworkLoadRequestData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 58)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element unsigned __int16 size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 64, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          unint64_t v2 = a2 << 6;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, a2 << 6, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        unsigned char v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        BOOL v10 = (void *)(v8 + (v9 << 6));
        uint64_t v11 = (re::AssetHandle *)(v8 + 40);
        uint64_t v12 = v7;
        do
        {
          *uint64_t v12 = *((void *)v11 - 5);
          *(_OWORD *)(v12 + 1) = 0u;
          *(_OWORD *)(v12 + 3) = 0u;
          v12[1] = *((void *)v11 - 4);
          *((void *)v11 - 4) = 0;
          v12[4] = *((void *)v11 - 1);
          *((void *)v11 - 1) = 0;
          uint64_t v14 = v12[2];
          uint64_t v13 = v12[3];
          uint64_t v15 = *((void *)v11 - 2);
          v12[2] = *((void *)v11 - 3);
          v12[3] = v15;
          *((void *)v11 - 3) = v14;
          *((void *)v11 - re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v13;
          v12[5] = 0;
          v12[6] = 0;
          v12[7] = 0;
          v12[6] = *((void *)v11 + 1);
          *((void *)v11 + 1) = 0;
          uint64_t v16 = v12[5];
          v12[5] = 0;
          v12[5] = *(void *)v11;
          *(void *)uint64_t v11 = v16;
          uint64_t v17 = v12[7];
          v12[7] = *((void *)v11 + 2);
          *((void *)v11 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v17;
          re::AssetHandle::~AssetHandle(v11);
          re::DynamicString::deinit((re::AssetHandle *)((char *)v11 - 32));
          unint64_t v18 = (void *)((char *)v11 + 24);
          uint64_t v11 = (re::AssetHandle *)((char *)v11 + 64);
          v12 += 8;
        }
        while (v18 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::DynamicArray<char>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v2 = result[1];
  if (v2 != a2)
  {
    unint64_t v4 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (*v4)
      {
        if (!a2)
        {
          uint64_t v6 = 0;
          if (!v2) {
            goto LABEL_8;
          }
          goto LABEL_7;
        }
        uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, a2, 1);
        if (result)
        {
          uint64_t v6 = result;
          if (!v4[1])
          {
LABEL_8:
            void v4[4] = v6;
            v4[1] = a2;
            return result;
          }
LABEL_7:
          memcpy(v6, (const void *)v4[4], v4[2]);
          uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v4 + 40))(*v4, v4[4]);
          goto LABEL_8;
        }
        re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, a2, *(void *)(*v4 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
      }
      else
      {
        uint64_t result = (void *)re::DynamicArray<char>::setCapacity(v4, a2);
        ++*((_DWORD *)v4 + 6);
      }
    }
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::internal::AssetNetworkLoader::FragmentedNetworkAsset,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, const re::DynamicString *a4, long long *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      int v12 = *(_DWORD *)(a1 + 28);
      signed int v13 = 2 * v12;
      uint64_t v14 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v13) {
          BOOL v15 = v10 == v13;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v32, 0, 36);
          *(void *)&v32[36] = 0x7FFFFFFFLL;
          re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v32, v14, v13);
          long long v16 = *(_OWORD *)v32;
          *(_OWORD *)uint64_t v32 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          uint64_t v17 = *(void *)&v32[16];
          uint64_t v18 = *(void *)(a1 + 16);
          *(void *)&unsigned char v32[16] = v18;
          *(void *)(a1 + 16) = v17;
          long long v20 = *(_OWORD *)&v32[24];
          *(_OWORD *)&unsigned char v32[24] = *(_OWORD *)(a1 + 24);
          unsigned int v19 = *(_DWORD *)&v32[32];
          *(_OWORD *)(a1 + 24) = v20;
          unint64_t v21 = v19;
          if (v19)
          {
            unint64_t v22 = 0;
            uint64_t v23 = v18 + 48;
            do
            {
              if ((*(_DWORD *)(v23 - 40) & 0x80000000) != 0) {
                re::HashTable<re::DynamicString,re::internal::AssetNetworkLoader::FragmentedNetworkAsset,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(void *)(v23 - 48) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v23 - 48), v23 - 32, v23);
              }
              ++v22;
              v23 += 88;
            }
            while (v22 < v21);
          }
          re::HashTable<re::DynamicString,re::internal::AssetNetworkLoader::FragmentedNetworkAsset,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v32);
        }
      }
      else
      {
        if (v13) {
          signed int v26 = 2 * v12;
        }
        else {
          signed int v26 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v11 + 1;
    uint64_t v24 = *(void *)(a1 + 16);
    int v25 = *(_DWORD *)(v24 + 88 * v10 + 8);
  }
  else
  {
    uint64_t v24 = *(void *)(a1 + 16);
    int v25 = *(_DWORD *)(v24 + 88 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v25 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v24 + 88 * v10 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v25 | 0x80000000;
  uint64_t v27 = 88 * v10;
  *(_DWORD *)(*(void *)(a1 + 16) + v27 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + v27 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + v27) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + v27 + 16), a4);
  uint64_t v28 = *(void *)(a1 + 16) + 88 * v10;
  long long v29 = *a5;
  long long v30 = a5[1];
  *(void *)(v28 + 80) = *((void *)a5 + 4);
  *(_OWORD *)(v28 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v29;
  *(_OWORD *)(v28 + 64) = v30;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * are::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

re::DynamicString *re::HashTable<re::DynamicString,re::internal::AssetNetworkLoader::PendingRequestedAsset,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, const re::DynamicString *a4, void *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      int v12 = *(_DWORD *)(a1 + 28);
      signed int v13 = 2 * v12;
      uint64_t v14 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v13) {
          BOOL v15 = v10 == v13;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v31, 0, 36);
          *(void *)&v31[36] = 0x7FFFFFFFLL;
          re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init((uint64_t)v31, v14, v13);
          long long v16 = *(_OWORD *)v31;
          *(_OWORD *)unsigned int v31 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          uint64_t v17 = *(void *)&v31[16];
          uint64_t v18 = *(void *)(a1 + 16);
          *(void *)&v31[16] = v18;
          *(void *)(a1 + 16) = v17;
          long long v20 = *(_OWORD *)&v31[24];
          *(_OWORD *)&unsigned char v31[24] = *(_OWORD *)(a1 + 24);
          unsigned int v19 = *(_DWORD *)&v31[32];
          *(_OWORD *)(a1 + 24) = v20;
          unint64_t v21 = v19;
          if (v19)
          {
            unint64_t v22 = 0;
            uint64_t v23 = v18 + 48;
            do
            {
              if ((*(_DWORD *)(v23 - 40) & 0x80000000) != 0) {
                re::HashTable<re::DynamicString,re::internal::AssetNetworkLoader::PendingRequestedAsset,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(void *)(v23 - 48) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v23 - 48), v23 - 32, v23);
              }
              ++v22;
              v23 += 80;
            }
            while (v22 < v21);
          }
          re::HashTable<re::DynamicString,re::internal::AssetNetworkLoader::PendingRequestedAsset,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v31);
        }
      }
      else
      {
        if (v13) {
          signed int v26 = 2 * v12;
        }
        else {
          signed int v26 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v11 + 1;
    uint64_t v24 = *(void *)(a1 + 16);
    int v25 = *(_DWORD *)(v24 + 80 * v10 + 8);
  }
  else
  {
    uint64_t v24 = *(void *)(a1 + 16);
    int v25 = *(_DWORD *)(v24 + 80 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v25 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v24 + 80 * v10 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v25 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 80 * v10 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 80 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 80 * v10) = a3;
  uint64_t result = re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 80 * v10 + 16), a4);
  uint64_t v28 = (void *)(*(void *)(a1 + 16) + 80 * v10);
  v28[6] = *a5;
  v28[7] = 0;
  v28[8] = 0;
  v28[9] = 0;
  v28[8] = a5[2];
  a5[2] = 0;
  uint64_t v29 = v28[7];
  v28[7] = 0;
  v28[7] = a5[1];
  a5[1] = v29;
  uint64_t v30 = v28[9];
  v28[9] = a5[3];
  a5[3] = v30;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * are::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

void *re::allocInfo_FileAssetLoadDescriptorParameters(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_41, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_41))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF75220, "FileAssetLoadDescriptorParameters");
    __cxa_guard_release(&_MergedGlobals_41);
  }
  return &unk_26AF75220;
}

void re::initInfo_FileAssetLoadDescriptorParameters(re *this, re::IntrospectionBase *a2)
{
  v10[0] = 0x2764D90FB3166F26;
  v10[1] = "FileAssetLoadDescriptorParameters";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v11;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF75200, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF75200);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::DynamicString>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "path";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF751F8 = v8;
      __cxa_guard_release(&qword_26AF75200);
    }
  }
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 1;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = &qword_26AF751F8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::FileAssetLoadDescriptorParameters>;
  *((void *)this + 11) = 0;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::FileAssetLoadDescriptorParameters>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::FileAssetLoadDescriptorParameters>;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::FileAssetLoadDescriptorParameters>;
  re::IntrospectionRegistry::add(this, v3);
  long long v9 = v11;
}

void *re::internal::defaultConstruct<re::FileAssetLoadDescriptorParameters>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  return re::DynamicString::setCapacity((void *)a3, 0);
}

double re::internal::defaultDestruct<re::FileAssetLoadDescriptorParameters>(int a1, int a2, re::DynamicString *this)
{
  return re::DynamicString::deinit(this);
}

void *re::internal::defaultConstructV2<re::FileAssetLoadDescriptorParameters>(_anonymous_namespace_ *a1)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  return re::DynamicString::setCapacity(a1, 0);
}

_anonymous_namespace_ *re::FileAssetProvider::FileAssetProvider(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *((void *)a1 + 3) = 0;
  *(void *)a1 = &unk_26E6CA4B0;
  *((void *)a1 + 4) = 0;
  *((void *)a1 + 5) = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF75218, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF75218))
  {
    qword_26AF75210 = re::internal::getOrCreateInfo((re::internal *)"FileAssetLoadDescriptorParameters", (uint64_t (*)(re::internal *))re::allocInfo_FileAssetLoadDescriptorParameters, (re::IntrospectionBase *(*)(void))re::initInfo_FileAssetLoadDescriptorParameters, (void (*)(re::IntrospectionBase *))&unk_26AF75208, 0);
    __cxa_guard_release(&qword_26AF75218);
  }
  re::FileAssetProvider::s_loadDescriptorParametersIntrospect = qword_26AF75210;
  *((void *)a1 + 4) = a3;
  *((void *)a1 + 5) = a4;
  *((void *)a1 + 3) = a2;
  return a1;
}

void re::FileAssetProvider::~FileAssetProvider(re::FileAssetProvider *this)
{
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::FileAssetProvider::makeDescriptor@<X0>(_anonymous_namespace_ *a1@<X0>, re::DynamicString *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  uint64_t v6 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)a3, 0);
  *(void *)(a3 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(a3 + 40) = 0;
  *(_DWORD *)(a3 + 56) = 0;
  *(void *)(a3 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 0;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(void *)(a3 + 136) = 0;
  re::DynamicString::setCapacity((void *)(a3 + 112), 0);
  int v12 = (uint64_t *)"FileAsset";
  uint64_t v13 = 9;
  re::DynamicString::operator=((re::DynamicString *)a3, (uint64_t)&v12);
  uint64_t v7 = re::DynamicString::operator=((re::DynamicString *)(a3 + 112), a2);
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  re::DynamicString::setCapacity(&v12, 0);
  re::DynamicString::operator=((re::DynamicString *)&v12, a1);
  re::DynamicString::DynamicString((re::DynamicString *)v11, (const re::DynamicString *)&v12);
  re::AssetLoadDescriptor::setIntrospectableData((char **)a3, (const re::IntrospectionBase *)re::FileAssetProvider::s_loadDescriptorParametersIntrospect, (const re::IntrospectionBase **)v11, 0);
  if (*(void *)&v11[0])
  {
    if (BYTE8(v11[0])) {
      (*(void (**)(void))(**(void **)&v11[0] + 40))();
    }
    memset(v11, 0, sizeof(v11));
  }
  uint64_t result = (uint64_t)v12;
  if (v12)
  {
    if (v13) {
      return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*v12 + 40))(v12, v14, v8, v9);
    }
  }
  return result;
}

re::DynamicString *re::FileAssetProvider::load@<X0>(re::internal::AssetTypeRegistry **this@<X0>, const re::AssetLoadDescriptor *a2@<X1>, re::AssetSerializationScheme *a3@<X3>, uint64_t a4@<X8>)
{
  if (*((unsigned char *)a2 + 8)) {
    uint64_t v9 = (const char *)*((void *)a2 + 2);
  }
  else {
    uint64_t v9 = (char *)a2 + 9;
  }
  uint64_t v10 = (_anonymous_namespace_ *)strcmp(v9, "FileAsset");
  if (v10)
  {
    long long v12 = v23;
    uint64_t v13 = v24;
    uint64_t v14 = v25;
    *(unsigned char *)a4 = 0;
    *(_OWORD *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    *(void *)(a4 + 24) = v13;
    *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v14;
  }
  else
  {
    *((void *)&v23 + 1) = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    re::DynamicString::setCapacity(&v23, 0);
    uint64_t Descriptor = re::AssetLoadDescriptor::getIntrospectableData<re::FileAssetLoadDescriptorParameters>(a2, (re::DynamicString **)&v23);
    if (Descriptor)
    {
      if (*((unsigned char *)a2 + 120)) {
        long long v16 = (char *)*((void *)a2 + 16);
      }
      else {
        long long v16 = (char *)a2 + 121;
      }
      re::loadCompiledOrSourceFile((char *)&v23, v16, this + 3, (uint64_t)a3, a4);
    }
    else
    {
      long long v17 = v20;
      uint64_t v18 = v21;
      uint64_t v19 = v22;
      *(unsigned char *)a4 = 0;
      *(_OWORD *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v17;
      *(void *)(a4 + 24) = v18;
      *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v19;
    }
    uint64_t result = (re::DynamicString *)v23;
    if ((void)v23)
    {
      if (BYTE8(v23)) {
        return (re::DynamicString *)(*(uint64_t (**)(void))(*(void *)v23 + 40))();
      }
    }
  }
  return result;
}

uint64_t re::AssetLoadDescriptor::getIntrospectableData<re::FileAssetLoadDescriptorParameters>(re::AssetLoadDescriptor *a1, re::DynamicString **a2)
{
  uint64_t v2 = a2;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF75218, memory_order_acquire) & 1) == 0)
  {
    uint64_t v5 = a1;
    int v7 = __cxa_guard_acquire(&qword_26AF75218);
    uint64_t v2 = a2;
    int v8 = v7;
    a1 = v5;
    if (v8)
    {
      qword_26AF75210 = re::internal::getOrCreateInfo((re::internal *)"FileAssetLoadDescriptorParameters", (uint64_t (*)(re::internal *))re::allocInfo_FileAssetLoadDescriptorParameters, (re::IntrospectionBase *(*)(void))re::initInfo_FileAssetLoadDescriptorParameters, (void (*)(re::IntrospectionBase *))&unk_26AF75208, 0);
      __cxa_guard_release(&qword_26AF75218);
      a1 = v5;
      uint64_t v2 = a2;
    }
  }
  uint64_t v3 = (re **)qword_26AF75210;
  return re::AssetLoadDescriptor::getIntrospectableData(a1, v3, v2, 0);
}

re::DynamicString *re::FileAssetProvider::resolveChild@<X0>(const re::AssetLoadDescriptor *a1@<X1>, re::AssetProvider *a2@<X2>, const char *a3@<X3>, uint64_t a4@<X8>)
{
  if (*((unsigned char *)a1 + 8)) {
    uint64_t v9 = (const char *)*((void *)a1 + 2);
  }
  else {
    uint64_t v9 = (char *)a1 + 9;
  }
  uint64_t v10 = (_anonymous_namespace_ *)strcmp(v9, "FileAsset");
  if (v10)
  {
    uint64_t result = (re::DynamicString *)re::DynamicString::format((re::DynamicString *)"Scheme %s does not match scheme %s.", (re::DynamicString *)v30, v9, "FileAsset");
    long long v12 = *(_OWORD *)v30;
    long long v13 = *(_OWORD *)&v30[16];
    *(unsigned char *)a4 = 0;
    *(_OWORD *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    *(_OWORD *)(a4 + 24) = v13;
  }
  else
  {
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    re::DynamicString::setCapacity(&v40, 0);
    uint64_t v14 = re::AssetLoadDescriptor::getIntrospectableData<re::FileAssetLoadDescriptorParameters>(a1, &v40);
    if (v14)
    {
      if (v41) {
        uint64_t v15 = v42;
      }
      else {
        uint64_t v15 = (re::PathBuffer *)((char *)&v41 + 1);
      }
      long long v16 = (_anonymous_namespace_ *)re::AssetProvider::resolveChildPath(a2, v15, (re::DynamicString *)&v38);
      re::FileAssetProvider::makeDescriptor((_anonymous_namespace_ *)&v38, (re::DynamicString *)v21, (uint64_t)v22);
      uint64_t v17 = *(void *)v22;
      memset(v22, 0, sizeof(v22));
      *(void *)uint64_t v30 = v17;
      *(_OWORD *)&v30[24] = *(_OWORD *)&v22[24];
      *(_OWORD *)&unsigned char v30[8] = *(_OWORD *)&v22[8];
      long long v31 = v23;
      long long v23 = 0u;
      ++v24;
      int v32 = 1;
      long long v33 = v25;
      long long v34 = v26;
      long long v25 = 0u;
      long long v26 = 0u;
      ++v27;
      int v35 = 1;
      *(_OWORD *)unsigned int v36 = *(_OWORD *)v28;
      memset(v28, 0, sizeof(v28));
      long long v37 = v29;
      *(void *)&v36[16] = *(void *)&v28[16];
      long long v29 = 0uLL;
      v18.n128_f64[0] = re::Optional<re::AssetLoadDescriptor>::Optional(a4, (uint64_t)v30);
      if (*(void *)&v36[8])
      {
        if (v36[16]) {
          (*(void (**)(double))(**(void **)&v36[8] + 40))(v18.n128_f64[0]);
        }
        __n128 v18 = 0uLL;
        *(_OWORD *)&unsigned char v36[8] = 0u;
        long long v37 = 0u;
      }
      if (*((void *)&v33 + 1))
      {
        if (*(void *)v36) {
          (*(void (**)(__n128))(**((void **)&v33 + 1) + 40))(v18);
        }
        *(void *)unsigned int v36 = 0;
        long long v34 = 0uLL;
        *((void *)&v33 + 1) = 0;
        ++v35;
      }
      if (*(void *)&v30[32])
      {
        if ((void)v33) {
          (*(void (**)(__n128))(**(void **)&v30[32] + 40))(v18);
        }
        *(void *)&long long v33 = 0;
        long long v31 = 0uLL;
        *(void *)&v30[32] = 0;
        ++v32;
      }
      if (*(void *)v30)
      {
        if (v30[8]) {
          (*(void (**)(__n128))(**(void **)v30 + 40))(v18);
        }
        __n128 v18 = 0uLL;
        memset(v30, 0, 32);
      }
      if (*(void *)&v28[8])
      {
        if (v28[16]) {
          (*(void (**)(__n128))(**(void **)&v28[8] + 40))(v18);
        }
        __n128 v18 = 0uLL;
        *(_OWORD *)&v28[8] = 0u;
        long long v29 = 0u;
      }
      if (*((void *)&v25 + 1))
      {
        if (*(void *)v28) {
          (*(void (**)(__n128))(**((void **)&v25 + 1) + 40))(v18);
        }
        *(void *)uint64_t v28 = 0;
        long long v26 = 0uLL;
        *((void *)&v25 + 1) = 0;
        ++v27;
      }
      if (*(void *)&v22[32])
      {
        if ((void)v25) {
          (*(void (**)(__n128))(**(void **)&v22[32] + 40))(v18);
        }
        *(void *)&long long v25 = 0;
        long long v23 = 0uLL;
        *(void *)&v22[32] = 0;
        ++v24;
      }
      if (*(void *)v22)
      {
        if (v22[8]) {
          (*(void (**)(__n128))(**(void **)v22 + 40))(v18);
        }
        __n128 v18 = 0uLL;
        memset(v22, 0, 32);
      }
      if (*(void *)&v21[0])
      {
        if (BYTE8(v21[0])) {
          (*(void (**)(__n128))(**(void **)&v21[0] + 40))(v18);
        }
        __n128 v18 = 0uLL;
        memset(v21, 0, sizeof(v21));
      }
      if (v38 && (v39 & 1) != 0) {
        (*(void (**)(__n128))(*(void *)v38 + 40))(v18);
      }
    }
    else
    {
      __n128 v18 = *(__n128 *)v30;
      uint64_t v19 = *(void *)&v30[16];
      uint64_t v20 = *(void *)&v30[24];
      *(unsigned char *)a4 = 0;
      *(__n128 *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v18;
      *(void *)(a4 + 24) = v19;
      *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v20;
    }
    uint64_t result = v40;
    if (v40)
    {
      if (v41) {
        return (re::DynamicString *)(*(uint64_t (**)(__n128))(*(void *)v40 + 40))(v18);
      }
    }
  }
  return result;
}

re::DynamicString *re::FileAssetProvider::getDescription(re::FileAssetProvider *this, const re::AssetLoadDescriptor *a2, re::DynamicString *a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  re::DynamicString::setCapacity(&v6, 0);
  if (re::AssetLoadDescriptor::getIntrospectableData<re::FileAssetLoadDescriptorParameters>(a2, &v6))
  {
    re::DynamicString::operator=(a3, (re::DynamicString *)&v6);
  }
  else
  {
    v10[0] = "mangled";
    v10[1] = 7;
    re::DynamicString::operator=(a3, (uint64_t)v10);
  }
  uint64_t result = v6;
  if (v6)
  {
    if (v7) {
      return (re::DynamicString *)(*(uint64_t (**)(void))(*(void *)v6 + 40))();
    }
  }
  return result;
}

re::DynamicString *re::FileAssetProvider::getAssetPathForRelease@<X0>(_anonymous_namespace_ *a1@<X0>, re::AssetLoadDescriptor *a2@<X1>, const re::internal::AssetTypeRegistry *a3@<X2>, os_unfair_lock_s *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v36 = 0;
  long long v37 = 0;
  uint64_t v38 = 0;
  re::DynamicString::setCapacity(&v35, 0);
  uint64_t v9 = re::AssetLoadDescriptor::getIntrospectableData<re::FileAssetLoadDescriptorParameters>(a2, &v35);
  if (v9)
  {
    if (v36) {
      uint64_t v10 = v37;
    }
    else {
      uint64_t v10 = (char *)&v36 + 1;
    }
    long long v11 = (_anonymous_namespace_ *)re::DynamicString::format((re::DynamicString *)"sourcepath:%s", (re::DynamicString *)&v32, v10);
    LODWORD(v25) = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v26 = 0;
    long long v12 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)&v25 + 1, 0);
    *((void *)&v29 + 1) = 0;
    long long v30 = 0uLL;
    re::DynamicString::setCapacity(&v29, 0);
    uint64_t v31 = 0;
    if (v33) {
      long long v13 = *(char **)&v34[7];
    }
    else {
      long long v13 = v34;
    }
    double v14 = re::AssetPath::parse((re::AssetPath *)&v25, v13, 0, a3, a4, v22);
    if (!v22[0] && (void)v23)
    {
      if (BYTE8(v23)) {
        (*(void (**)(double))(*(void *)v23 + 40))(v14);
      }
      long long v23 = 0u;
      long long v24 = 0u;
    }
    re::DynamicString::DynamicString((re::DynamicString *)&v19, (const re::DynamicString *)&v32);
    *(unsigned char *)a5 = 1;
    *(void *)(a5 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v19;
    *(void *)(a5 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v21;
    *(_OWORD *)(a5 + 16) = v20;
    if ((void)v29)
    {
      if (BYTE8(v29)) {
        (*(void (**)(void))(*(void *)v29 + 40))();
      }
      long long v29 = 0u;
      long long v30 = 0u;
    }
    if (*((void *)&v25 + 1) && (v26 & 1) != 0) {
      (*(void (**)(void))(**((void **)&v25 + 1) + 40))();
    }
    if (v32 && (v33 & 1) != 0) {
      (*(void (**)(void))(*(void *)v32 + 40))();
    }
  }
  else
  {
    long long v15 = v25;
    uint64_t v16 = v26;
    uint64_t v17 = v27;
    *(unsigned char *)a5 = 0;
    *(_OWORD *)(a5 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v15;
    *(void *)(a5 + 24) = v16;
    *(void *)(a5 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v17;
  }
  uint64_t result = v35;
  if (v35)
  {
    if (v36) {
      return (re::DynamicString *)(*(uint64_t (**)(void))(*(void *)v35 + 40))();
    }
  }
  return result;
}

uint64_t *re::FileAssetProvider::makeDescriptorFromAssetPath@<X0>(re::FileAssetProvider *this@<X0>, const char ***a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  re::DynamicString::setCapacity(&v23, 0);
  uint64_t v5 = (_anonymous_namespace_ *)re::AssetPath::filePathToAsset((re::AssetPath *)a2, (re::DynamicString *)&v23, 1, 0);
  uint64_t v6 = *a2[9];
  re::FileAssetProvider::makeDescriptor((_anonymous_namespace_ *)&v23, (re::DynamicString *)v9, (uint64_t)v10);
  v7.n128_f64[0] = re::Optional<re::AssetLoadDescriptor>::Optional(a3, (uint64_t)v10);
  if ((void)v21)
  {
    if (BYTE8(v21)) {
      (*(void (**)(double))(*(void *)v21 + 40))(v7.n128_f64[0]);
    }
    __n128 v7 = 0uLL;
    long long v21 = 0u;
    long long v22 = 0u;
  }
  if (v16)
  {
    if (v20) {
      (*(void (**)(__n128))(*(void *)v16 + 40))(v7);
    }
    uint64_t v20 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v16 = 0;
    ++v19;
  }
  if (v11)
  {
    if (v15) {
      (*(void (**)(__n128))(*(void *)v11 + 40))(v7);
    }
    uint64_t v15 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v11 = 0;
    ++v14;
  }
  if (*(void *)&v10[0])
  {
    if (BYTE8(v10[0])) {
      (*(void (**)(__n128))(**(void **)&v10[0] + 40))(v7);
    }
    __n128 v7 = 0uLL;
    memset(v10, 0, sizeof(v10));
  }
  if (*(void *)&v9[0])
  {
    if (BYTE8(v9[0])) {
      (*(void (**)(__n128))(**(void **)&v9[0] + 40))(v7);
    }
    __n128 v7 = 0uLL;
    memset(v9, 0, sizeof(v9));
  }
  uint64_t result = v23;
  if (v23)
  {
    if (v24) {
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, __n128))(*v23 + 40))(v23, v25, v7);
    }
  }
  return result;
}

const char *re::FileAssetProvider::schemeName(re::FileAssetProvider *this)
{
  return "FileAsset";
}

void *re::allocInfo_NetworkAssetService(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_42, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_42))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF752A0, "NetworkAssetService");
    __cxa_guard_release(&_MergedGlobals_42);
  }
  return &unk_26AF752A0;
}

void re::initInfo_NetworkAssetService(re *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x999814F5B285CDA6;
  v5[1] = "NetworkAssetService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v6;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = &re::initInfo_NetworkAssetService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::introspect_NetworkAssetService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"NetworkAssetService", (uint64_t (*)(re::internal *))re::allocInfo_NetworkAssetService, (re::IntrospectionBase *(*)(void))re::initInfo_NetworkAssetService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::NetworkAssetService>, this);
}

void reality_v1_entry_load_data_begin()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

unint64_t reality_v1_entry_load_data_read(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 32))
  {
    unint64_t v6 = 0;
    if (a2)
    {
      unint64_t v7 = *(void *)(a3 + 64);
      while (1)
      {
        if (v7)
        {
          unint64_t v8 = *(void *)(a3 + 8);
        }
        else
        {
          uint64_t v9 = *(void *)(a3 + 40);
          unint64_t v10 = *(void *)(a3 + 48);
          *(void *)(a3 + 56) = v9;
          unint64_t v7 = zip_entry_load_data_read(v9, v10, *(void *)(a3 + 24));
          *(void *)(a3 + 64) = v7;
          unint64_t v8 = *(void *)(a3 + 8) + v7;
          *(void *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v8;
        }
        BOOL v11 = v8 == *(void *)(a3 + 16);
        uint64_t v18 = *(void *)(a3 + 56);
        unint64_t v19 = v7;
        unint64_t v20 = v6 + a1;
        unint64_t v21 = a2 - v6;
        uint64_t v17 = 0;
        long long v15 = 0u;
        long long v16 = 0u;
        reality_compression_process_stream_chunk(v11, (uint64_t)&v18, *(void *)(a3 + 32), (uint64_t)&v15);
        int v12 = v15;
        if (!v15) {
          break;
        }
        unint64_t v7 = v19;
        *(void *)(a3 + 56) = v18;
        *(void *)(a3 + 64) = v7;
        v6 += v16;
        if (v12 == 1 || v6 >= a2) {
          return v6;
        }
      }
      unint64_t v6 = 0;
      *(_DWORD *)a3 = 1;
    }
    return v6;
  }
  else
  {
    uint64_t v13 = *(void *)(a3 + 24);
    return zip_entry_load_data_read(a1, a2, v13);
  }
}

void reality_v1_entry_load_data_end(uint64_t a1)
{
  zip_entry_load_data_end(*(int **)(a1 + 24));
  uint64_t v2 = *(compression_stream ***)(a1 + 32);
  if (v2)
  {
    reality_compression_stream_end(v2);
    free(*(void **)(a1 + 40));
  }
  JUMPOUT(0x237DBCBD0);
}

void std::__function::__func<re::internal::AssetDependencyWalker::findAssetHandles(re::IntrospectionBase const&,void const*,std::function<void ()(re::AssetHandle *)>)::$_0,std::allocator<re::internal::AssetDependencyWalker::findAssetHandles(re::IntrospectionBase const&,void const*,std::function<void ()(re::AssetHandle *)>)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::~__func()
{
}

void *std::__function::__func<re::internal::AssetDependencyWalker::findAssetHandles(re::IntrospectionBase const&,void const*,std::function<void ()(re::AssetHandle *)>)::$_0,std::allocator<re::internal::AssetDependencyWalker::findAssetHandles(re::IntrospectionBase const&,void const*,std::function<void ()(re::AssetHandle *)>)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26E6CA550;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::internal::AssetDependencyWalker::findAssetHandles(re::IntrospectionBase const&,void const*,std::function<void ()(re::AssetHandle *)>)::$_0,std::allocator<re::internal::AssetDependencyWalker::findAssetHandles(re::IntrospectionBase const&,void const*,std::function<void ()(re::AssetHandle *)>)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E6CA550;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::internal::AssetDependencyWalker::findAssetHandles(re::IntrospectionBase const&,void const*,std::function<void ()(re::AssetHandle *)>)::$_0,std::allocator<re::internal::AssetDependencyWalker::findAssetHandles(re::IntrospectionBase const&,void const*,std::function<void ()(re::AssetHandle *)>)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::operator()(uint64_t result, uint64_t a2, uint64_t *a3)
{
  if (*(_DWORD *)(a2 + 16) == 11
    && *(uint64_t (**)(uint64_t, uint64_t, re::DynamicString *, re::AssetSerializationScheme *))(a2 + 72) == re::AssetHandle::introspectionSerialize)
  {
    uint64_t v3 = *(void *)(*(void *)(result + 8) + 24);
    uint64_t v5 = *a3;
    if (v3)
    {
      return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, &v5);
    }
    else
    {
      long long v4 = std::__throw_bad_function_call[abi:nn180100]();
      return std::__function::__func<re::internal::AssetDependencyWalker::findAssetHandles(re::IntrospectionBase const&,void const*,std::function<void ()(re::AssetHandle *)>)::$_0,std::allocator<re::internal::AssetDependencyWalker::findAssetHandles(re::IntrospectionBase const&,void const*,std::function<void ()(re::AssetHandle *)>)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::target(v4);
    }
  }
  return result;
}

uint64_t std::__function::__func<re::internal::AssetDependencyWalker::findAssetHandles(re::IntrospectionBase const&,void const*,std::function<void ()(re::AssetHandle *)>)::$_0,std::allocator<re::internal::AssetDependencyWalker::findAssetHandles(re::IntrospectionBase const&,void const*,std::function<void ()(re::AssetHandle *)>)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::internal::AssetDependencyWalker::findAssetHandles(re::IntrospectionBase const&,void const*,std::function<void ()(re::AssetHandle *)>)::$_0,std::allocator<re::internal::AssetDependencyWalker::findAssetHandles(re::IntrospectionBase const&,void const*,std::function<void ()(re::AssetHandle *)>)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::target_type()
{
}

void *std::__function::__value_func<void ()(re::IntrospectionBase const&,void const*)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t reality_archive_file_upgrade(const char *a1, const char *a2, int a3)
{
  uint64_t v5 = zip_file_open(a1);
  unint64_t v6 = (void *)v5;
  if (!v5) {
    return (uint64_t)v6;
  }
  *(void *)(v5 + 104) = 4096;
  unint64_t v7 = zip_file_create(a2);
  int v44 = v7;
  if (!v7) {
    goto LABEL_88;
  }
  unint64_t v8 = v7;
  v7->_extra = (__sFILEX *)4096;
  uint64_t v9 = v6[23];
  unint64_t v10 = malloc_type_malloc(0x10000uLL, 0xC2A086EBuLL);
  if (!v9)
  {
    uint64_t v40 = v8;
    uint64_t v41 = a2;
LABEL_81:
    zip_save_manifest((uint64_t)v40, v41, (void **)&v44, 1uLL);
    if (!zip_close(v6))
    {
      unint64_t v6 = 0;
      goto LABEL_85;
    }
    if (v8)
    {
      unint64_t v6 = (void *)zip_close(v8);
      free(v10);
    }
    else
    {
      free(v10);
      return 1;
    }
    return (uint64_t)v6;
  }
  uint64_t v11 = 0;
  if (a3) {
    int v12 = 1;
  }
  else {
    int v12 = 2;
  }
  while (1)
  {
    unint64_t v13 = v6[22] + v11;
    uint64_t v14 = *(void *)(v6[19] + 8 * (v13 / 0x27));
    unint64_t v15 = v13 % 0x27;
    uint64_t v16 = v14 + 104 * v15;
    uint64_t v17 = (char *)(v16 + 8);
    if (*(char *)(v16 + 31) < 0) {
      break;
    }
    if (!*(unsigned char *)(v16 + 31) || v17[*(unsigned __int8 *)(v16 + 31) - 1] != 47) {
      goto LABEL_15;
    }
LABEL_13:
    zip_clone_entry((uint64_t)v44, (void **)v16);
    if (++v11 == v9)
    {
      unint64_t v8 = v44;
      uint64_t v40 = v44;
      uint64_t v41 = a2;
      goto LABEL_81;
    }
  }
  uint64_t v18 = *(void *)(v14 + 104 * v15 + 16);
  if (v18 && *(unsigned char *)(*(void *)v17 + v18 - 1) == 47) {
    goto LABEL_13;
  }
  uint64_t v17 = *(char **)v17;
LABEL_15:
  std::string::basic_string[abi:nn180100]<0>(&v43, v17);
  std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
  char v20 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
  unint64_t v21 = (std::string *)v43.__r_.__value_.__r.__words[0];
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v43.__r_.__value_.__l.__size_;
  }
  else {
    unint64_t v21 = &v43;
  }
  if (size)
  {
    long long v22 = (std::string *)((char *)v21 + size);
    long long v23 = v21;
    uint64_t v24 = v22;
    do
    {
      if (v23->__r_.__value_.__s.__data_[0] == 46)
      {
        uint64_t v25 = 1u;
        while (v25 != 4)
        {
          if ((std::string *)((char *)v23 + v25) == v22) {
            goto LABEL_29;
          }
          int v26 = v23->__r_.__value_.__s.__data_[v25];
          int v27 = aArz[v25++];
          if (v26 != v27) {
            goto LABEL_21;
          }
        }
        uint64_t v24 = v23;
      }
LABEL_21:
      long long v23 = (std::string *)((char *)v23 + 1);
    }
    while (v23 != v22);
LABEL_29:
    if (v24 != v22 && (char *)v24 - (char *)v21 != -1)
    {
      std::string::erase(&v43, (char *)v24 - (char *)v21, 0xFFFFFFFFFFFFFFFFLL);
      char v20 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
    }
  }
  if (v20 < 0)
  {
    if (v43.__r_.__value_.__l.__size_ == 11)
    {
      long long v34 = (std::string *)v43.__r_.__value_.__r.__words[0];
      BOOL v36 = *(void *)v43.__r_.__value_.__l.__data_ == 0x6A2E726564616568
         && *(void *)(v43.__r_.__value_.__r.__words[0] + 3) == 0x6E6F736A2E726564;
      char v33 = v44;
      if (v36) {
        goto LABEL_63;
      }
    }
    else
    {
      if (v43.__r_.__value_.__l.__size_ == 13)
      {
        uint64_t v28 = (unint64_t *)v43.__r_.__value_.__r.__words[0];
        goto LABEL_39;
      }
      char v33 = v44;
    }
    int v32 = v12;
    goto LABEL_66;
  }
  if (v20 == 11)
  {
    BOOL v35 = v43.__r_.__value_.__r.__words[0] == 0x6A2E726564616568
       && *(std::string::size_type *)((char *)v43.__r_.__value_.__r.__words + 3) == 0x6E6F736A2E726564;
    long long v34 = &v43;
    char v33 = v44;
    if (!v35) {
      goto LABEL_57;
    }
LABEL_63:
    __int16 v37 = 0;
    goto LABEL_73;
  }
  if (v20 != 13)
  {
    long long v34 = &v43;
    char v33 = v44;
LABEL_57:
    int v32 = v12;
    goto LABEL_67;
  }
  uint64_t v28 = (unint64_t *)&v43;
LABEL_39:
  unint64_t v29 = bswap64(*v28);
  unint64_t v30 = 0x61737365744D6170;
  if (v29 == 0x61737365744D6170
    && (unint64_t v29 = bswap64(*(unint64_t *)((char *)v28 + 5)), v30 = 0x4D61702E6A736F6ELL, v29 == 0x4D61702E6A736F6ELL))
  {
    int v31 = 0;
  }
  else if (v29 < v30)
  {
    int v31 = -1;
  }
  else
  {
    int v31 = 1;
  }
  if (v31) {
    int v32 = v12;
  }
  else {
    int v32 = 0;
  }
  char v33 = v44;
  if ((v20 & 0x80) == 0)
  {
    long long v34 = &v43;
    goto LABEL_67;
  }
LABEL_66:
  long long v34 = (std::string *)v43.__r_.__value_.__r.__words[0];
LABEL_67:
  unsigned int v38 = v32 - 2;
  if (v32 == 1) {
    __int16 v39 = 8;
  }
  else {
    __int16 v39 = 0;
  }
  if (v38 >= 2) {
    __int16 v37 = v39;
  }
  else {
    __int16 v37 = 99;
  }
LABEL_73:
  if (zip_create_entry(v33, (uint64_t)v34, v37)) {
    reality_v1_entry_load_data_begin();
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  unint64_t v8 = v44;
LABEL_85:
  free(v10);
  if (v8) {
    zip_close(v8);
  }
  if (v6)
  {
LABEL_88:
    zip_close(v6);
    return 0;
  }
  return (uint64_t)v6;
}

uint64_t re::internal::PushLoadManager::pushLoadAsset(uint64_t a1, unint64_t a2, char *a3, unint64_t a4, unint64_t a5, unsigned int a6, int a7)
{
  v44[6] = *MEMORY[0x263EF8340];
  unint64_t v34 = a2;
  uint64_t v14 = (void *)(a1 + 24);
  uint64_t v15 = re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 24, a2);
  if (v15)
  {
    uint64_t result = *(void *)(v15 + 8);
    if (result) {
      return re::internal::AssetEntry::fromPeerID(result, (uint64_t)buf);
    }
    return result;
  }
  uint64_t v17 = (_anonymous_namespace_ *)re::internal::AssetTypeRegistry::assetTypeWithName(*(re::internal::AssetTypeRegistry **)(*(void *)(a1 + 72) + 1040), a3);
  if (v17)
  {
    uint64_t v18 = (const char **)v17;
    *(void *)&uint8_t buf[8] = 0;
    *(void *)&uint8_t buf[16] = 0;
    uint64_t v36 = 0;
    unint64_t v19 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(buf, 0);
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    int v40 = 0;
    uint64_t v39 = 0;
    long long v41 = 0u;
    long long v42 = 0u;
    int v43 = 0;
    memset(v44, 0, 40);
    char v20 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v44[1], 0);
    unint64_t v21 = *v18;
    re::NetworkAssetLoadDescriptor::init((uint64_t)buf, (const re::IntrospectionBase *)a2, (re::DynamicString *)v33);
    if (*(void *)&v33[0])
    {
      if (BYTE8(v33[0])) {
        (*(void (**)(void))(**(void **)&v33[0] + 40))();
      }
      memset(v33, 0, sizeof(v33));
    }
    long long v22 = *(os_unfair_lock_s **)(a1 + 72);
    os_unfair_lock_lock(v22 + 16);
    re::AssetManager::assetHandle_assetTablesLocked((re::AssetManager *)v22, (const re::AssetLoadDescriptor *)buf, a2, &v31);
    os_unfair_lock_unlock(v22 + 16);
    re::internal::AssetEntry::setOwnerPeerID((atomic_ullong *)v32, a4);
    re::internal::AssetEntry::setFromPeerID((atomic_ullong *)v32, a5);
    long long v23 = v32;
    atomic_store(a6, (unsigned int *)v32 + 172);
    if (a7) {
      *((unsigned char *)v23 + 259) = 1;
    }
    memset(v30, 0, sizeof(v30));
    re::AssetHandle::operator=((uint64_t)v30, &v31);
    unint64_t v24 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    unint64_t v25 = v24 ^ (v24 >> 31);
    if (*v14)
    {
      unint64_t v26 = v25 % *(unsigned int *)(a1 + 48);
      uint64_t v27 = *(unsigned int *)(*(void *)(a1 + 32) + 4 * v26);
      if (v27 != 0x7FFFFFFF)
      {
        uint64_t v28 = *(void *)(a1 + 40);
        if (*(void *)(v28 + 48 * v27 + 16) == a2)
        {
LABEL_24:
          re::AssetHandle::loadAsync((re::AssetHandle *)&v31);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v30);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v31);
          if (v44[1])
          {
            if (v44[2]) {
              (*(void (**)(void))(*(void *)v44[1] + 40))();
            }
            memset(&v44[1], 0, 32);
          }
          if (*((void *)&v41 + 1))
          {
            if (v44[0]) {
              (*(void (**)(void))(**((void **)&v41 + 1) + 40))();
            }
            v44[0] = 0;
            long long v42 = 0uLL;
            *((void *)&v41 + 1) = 0;
            ++v43;
          }
          if (v37)
          {
            if ((void)v41) {
              (*(void (**)(void))(*(void *)v37 + 40))();
            }
            *(void *)&long long v41 = 0;
            uint64_t v38 = 0;
            uint64_t v39 = 0;
            uint64_t v37 = 0;
            ++v40;
          }
          uint64_t result = *(void *)buf;
          if (*(void *)buf && (buf[8] & 1) != 0) {
            return (*(uint64_t (**)(void))(**(void **)buf + 40))();
          }
          return result;
        }
        while (1)
        {
          LODWORD(v27) = *(_DWORD *)(v28 + 48 * v27 + 8) & 0x7FFFFFFF;
          if (v27 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v28 + 48 * v27 + 16) == a2) {
            goto LABEL_24;
          }
        }
      }
    }
    else
    {
      LODWORD(v26) = 0;
    }
    re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)v14, v26, v25, &v34, v30);
    ++*(_DWORD *)(a1 + 64);
    goto LABEL_24;
  }
  unint64_t v29 = *re::assetsLogObjects(0);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 136315394;
    *(void *)&uint8_t buf[4] = a3;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = a2;
    _os_log_error_impl(&dword_233120000, v29, OS_LOG_TYPE_ERROR, "Could not find asset type named '%s' in the type registry. Aborting push-load for asset %llu.", buf, 0x16u);
  }
  uint64_t result = *(void *)(a1 + 80);
  if (result) {
    return (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t, void, uint64_t))(*(void *)result + 112))(result, a2, a5, 3, 0, 200);
  }
  return result;
}

void re::internal::PushLoadManager::releaseAsset(re::internal::PushLoadManager *this, unint64_t a2)
{
  uint64_t v3 = (char *)this + 24;
  uint64_t v4 = re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 24, a2);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5) {
      re::internal::AssetEntry::fromPeerID(v5, (uint64_t)&v6);
    }
    re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove((uint64_t)v3, a2);
  }
}

void re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(uint64_t a1, unint64_t a2)
{
  if (*(void *)a1)
  {
    unint64_t v3 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    unint64_t v4 = (v3 ^ (v3 >> 31)) % *(unsigned int *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(unsigned int *)(v5 + 4 * v4);
    if (v6 != 0x7FFFFFFF)
    {
      uint64_t v7 = *(void *)(a1 + 16);
      if (*(void *)(v7 + 48 * v6 + 16) == a2)
      {
        *(_DWORD *)(v5 + 4 * v4) = *(_DWORD *)(v7 + 48 * v6 + 8) & 0x7FFFFFFF;
LABEL_8:
        uint64_t v10 = *(void *)(a1 + 16);
        uint64_t v11 = v10 + 48 * v6;
        int v14 = *(_DWORD *)(v11 + 8);
        unint64_t v13 = (int *)(v11 + 8);
        int v12 = v14;
        if (v14 < 0)
        {
          *unint64_t v13 = v12 & 0x7FFFFFFF;
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v10 + 48 * v6 + 24));
          uint64_t v10 = *(void *)(a1 + 16);
          int v12 = *(_DWORD *)(v10 + 48 * v6 + 8);
        }
        int v15 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)(v10 + 48 * v6 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(a1 + 36) | v12 & 0x80000000;
        --*(_DWORD *)(a1 + 28);
        *(_DWORD *)(a1 + 36) = v6;
        *(_DWORD *)(a1 + 40) = v15 + 1;
      }
      else
      {
        while (1)
        {
          unsigned int v8 = v6;
          int v9 = *(_DWORD *)(v7 + 48 * v6 + 8);
          uint64_t v6 = v9 & 0x7FFFFFFF;
          if ((v9 & 0x7FFFFFFF) == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v7 + 48 * v6 + 16) == a2)
          {
            *(_DWORD *)(v7 + 48 * v8 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(v7 + 48 * v8 + 8) & 0x80000000 | *(_DWORD *)(v7 + 48 * v6 + 8) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
}

uint64_t re::internal::PushLoadManager::onPeerDisconnected(re::internal::PushLoadManager *this, uint64_t a2)
{
  unint64_t v25 = 0;
  v22[1] = 0;
  uint64_t v23 = 0;
  v22[0] = 0;
  int v24 = 0;
  uint64_t v4 = *((unsigned int *)this + 14);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (int *)(*((void *)this + 5) + 8);
    while (1)
    {
      int v7 = *v6;
      v6 += 12;
      if (v7 < 0) {
        break;
      }
      if (v4 == ++v5)
      {
        LODWORD(v5) = *((_DWORD *)this + 14);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if (v4 != v5)
  {
    unsigned int v8 = (char *)this + 24;
    uint64_t v9 = v5;
    unsigned int v10 = *((_DWORD *)this + 14);
    do
    {
      uint64_t v11 = *((void *)this + 5) + 48 * v9;
      uint64_t v12 = *(void *)(v11 + 32);
      if (v12)
      {
        re::internal::AssetEntry::fromPeerID(v12, (uint64_t)v20);
        if (v20[0]) {
          BOOL v13 = v21 == a2;
        }
        else {
          BOOL v13 = 0;
        }
        if (v13) {
          re::DynamicArray<re::TransitionCondition *>::add(v22, (void *)(v11 + 16));
        }
        unsigned int v10 = *((_DWORD *)this + 14);
      }
      if (v10 <= (int)v5 + 1) {
        unsigned int v14 = v5 + 1;
      }
      else {
        unsigned int v14 = v10;
      }
      while (1)
      {
        uint64_t v9 = (v5 + 1);
        if (v14 - 1 == v5) {
          break;
        }
        LODWORD(v5) = v5 + 1;
        unsigned int v15 = v9;
        if ((*(_DWORD *)(*((void *)this + 5) + 48 * v9 + 8) & 0x80000000) != 0) {
          goto LABEL_24;
        }
      }
      unsigned int v15 = v14;
LABEL_24:
      LODWORD(v5) = v15;
    }
    while (v4 != v15);
    if (v23)
    {
      uint64_t v16 = v25;
      uint64_t v17 = 8 * v23;
      do
      {
        unint64_t v18 = *v16++;
        re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove((uint64_t)v8, v18);
        v17 -= 8;
      }
      while (v17);
    }
  }
  uint64_t result = v22[0];
  if (v22[0])
  {
    if (v25) {
      return (*(uint64_t (**)(void))(*(void *)v22[0] + 40))();
    }
  }
  return result;
}

void re::internal::PushLoadManager::~PushLoadManager(re::internal::PushLoadManager *this)
{
  *(void *)this = &unk_26E6CA5E0;
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 3);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6CA5E0;
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 3);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

double re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7 & 0x7FFFFFFF;
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v6 + 24));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 48;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(void *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v28, v13, v12);
          long long v15 = *(_OWORD *)v28;
          *(_OWORD *)uint64_t v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v28[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v28[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v28[24];
          *(_OWORD *)&unsigned char v28[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21, v21 + 8);
              }
              v21 += 48;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v28);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 48 * v9 + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 48 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 48 * v9 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 48 * v9 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 48 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 48 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 48 * v9 + 16) = *a4;
  unint64_t v25 = (void *)(*(void *)(a1 + 16) + 48 * v9);
  v25[3] = 0;
  void v25[4] = 0;
  v25[5] = 0;
  void v25[4] = a5[1];
  a5[1] = 0;
  uint64_t v26 = v25[3];
  v25[3] = 0;
  v25[3] = *a5;
  *a5 = v26;
  uint64_t v27 = v25[5];
  v25[5] = a5[2];
  a5[2] = v27;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * are::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v9;
  ++*(_DWORD *)(a1 + 28);
}

uint64_t re::AssetSerializationScheme::storedCodingKey(re::AssetSerializationScheme *this, re::DynamicString *a2, const re::AssetHandle *a3)
{
  re::AssetHandle::serializationString(a2, (re::DynamicString *)&v8);
  if (v9) {
    unint64_t v5 = v9 >> 1;
  }
  else {
    unint64_t v5 = v9 >> 1;
  }
  if (v5)
  {
    re::DynamicString::operator=(this, (re::DynamicString *)&v8);
  }
  else
  {
    if (*((void *)a2 + 1))
    {
      uint64_t v6 = 0;
      goto LABEL_9;
    }
    v10[0] = &str_16;
    v10[1] = 0;
    re::DynamicString::operator=(this, (uint64_t)v10);
  }
  uint64_t v6 = 1;
LABEL_9:
  if (v8 && (v9 & 1) != 0) {
    (*(void (**)(void))(*(void *)v8 + 40))();
  }
  return v6;
}

uint64_t re::AssetSerializationScheme::deviceCodingKey(re::DynamicString *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + 8);
  if (!v4) {
    return 0;
  }
  uint64_t result = *(void *)(v4 + 24);
  if (!result) {
    return result;
  }
  re::AssetManager::deviceAssetPath(result, a4, a2, a3, v7);
  if (!v7[0]) {
    return 0;
  }
  re::DynamicString::operator=(a1, (re::DynamicString *)&v8);
  if (v7[0] && v8 && (v9 & 1) != 0) {
    (*(void (**)(void))(*(void *)v8 + 40))();
  }
  return 1;
}

BOOL re::AssetSerializationScheme::relativeCodingKey(re::DynamicString *a1, re::AssetHandle *this, unsigned char *a3)
{
  int v3 = *a3;
  if (*a3)
  {
    unint64_t v5 = (re::AssetPath *)(a3 + 8);
    uint64_t v6 = (const re::AssetPath *)re::AssetHandle::legacy_assetPath(this);
    re::AssetPath::makeRelativeAssetPath(v5, v6, (re::DynamicString *)&v8);
    re::DynamicString::operator=(a1, (re::DynamicString *)&v8);
    if (v8)
    {
      if (v9) {
        (*(void (**)(void))(*(void *)v8 + 40))();
      }
    }
  }
  return v3 != 0;
}

uint64_t re::AssetSerializationScheme::commonCodingKey(re::AssetSerializationScheme *a1, re::DynamicString *a2, const re::AssetHandle *a3, unsigned __int8 *a4)
{
  re::Optional<re::AssetPath>::Optional((uint64_t)v8, a4);
  re::AssetSerializationScheme::commonCodingKeyInternal(a1, a2, a3, v8);
  re::Optional<re::AssetPath>::~Optional(v8);
  return 1;
}

uint64_t re::AssetSerializationScheme::commonCodingKeyInternal(re::AssetSerializationScheme *a1, re::DynamicString *a2, const re::AssetHandle *a3, unsigned __int8 *a4)
{
  if (re::AssetSerializationScheme::storedCodingKey(a1, a2, a3)) {
    return 1;
  }
  if (re::AssetSerializationScheme::deviceCodingKey(a1, 0, (uint64_t)a3, (uint64_t)a2)) {
    return 2;
  }
  re::Optional<re::AssetPath>::Optional((uint64_t)v13, a4);
  BOOL v9 = re::AssetSerializationScheme::relativeCodingKey(a1, a2, v13);
  re::Optional<re::AssetPath>::~Optional(v13);
  if (v9) {
    return 3;
  }
  int v10 = (char *)re::AssetHandle::assetInfo(a2);
  if (*((void *)v10 + 13)) {
    int v11 = (const char *)*((void *)v10 + 14);
  }
  else {
    int v11 = v10 + 105;
  }
  size_t v12 = strlen(v11);
  v14[0] = v11;
  v14[1] = v12;
  re::DynamicString::operator=(a1, (uint64_t)v14);
  return 4;
}

unsigned char *re::AssetSerializationScheme::relativeHandle(uint64_t *a1, re::AssetManager *this, char *a3, unsigned char *a4)
{
  if (*a4) {
    return (unsigned char *)re::AssetManager::assetHandleWithParentAssetPath(this, a3, (const re::AssetPath *)(a4 + 8), 1, a1);
  }
  else {
    return re::AssetManager::assetHandle(this, a3, 1, 1, a1);
  }
}

uint64_t re::ZeroAssetSerialization::fromHandle(uint64_t a1)
{
  return 0;
}

uint64_t re::ZeroAssetSerialization::toHandle(uint64_t a1)
{
  return 0;
}

re::DefaultAssetSerialize *re::DefaultAssetSerialize::DefaultAssetSerialize(re::DefaultAssetSerialize *this, const re::AssetHandle *a2)
{
  *(void *)this = &unk_26E6CA958;
  *((unsigned char *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  int v3 = (char *)this + 8;
  if (a2) {
    uint64_t v4 = (re::DynamicString *)re::AssetHandle::legacy_assetPath(a2);
  }
  else {
    uint64_t v4 = 0;
  }
  optionalFromPointer<re::AssetPath>(v4, (uint64_t)v6);
  re::Optional<re::AssetPath>::operator=((uint64_t)v3, v6);
  re::Optional<re::AssetPath>::~Optional(v6);
  return this;
}

re::DynamicString *optionalFromPointer<re::AssetPath>@<X0>(re::DynamicString *result@<X0>, uint64_t a2@<X8>)
{
  if (result)
  {
    int v3 = result;
    *(unsigned char *)a2 = 1;
    *(_DWORD *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)result;
    re::DynamicString::DynamicString((re::DynamicString *)(a2 + 16), (re::DynamicString *)((char *)result + 8));
    uint64_t result = re::DynamicString::DynamicString((re::DynamicString *)(a2 + 48), (re::DynamicString *)((char *)v3 + 40));
    *(void *)(a2 + 80) = *((void *)v3 + 9);
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  return result;
}

uint64_t re::Optional<re::AssetPath>::operator=(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  if (*(unsigned char *)a1) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4)
  {
    if (*(unsigned char *)a1) {
      BOOL v5 = v3 == 0;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5)
    {
      re::DynamicString::deinit((re::DynamicString *)(a1 + 48));
      re::DynamicString::deinit((re::DynamicString *)(a1 + 16));
      *(unsigned char *)a1 = 0;
    }
    else
    {
      if (*(unsigned char *)a1) {
        BOOL v7 = 1;
      }
      else {
        BOOL v7 = v3 == 0;
      }
      if (v7)
      {
        *(_DWORD *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *((_DWORD *)a2 + 2);
        re::DynamicString::operator=((re::DynamicString *)(a1 + 16), (re::DynamicString *)(a2 + 16));
        re::DynamicString::operator=((re::DynamicString *)(a1 + 48), (re::DynamicString *)(a2 + 48));
      }
      else
      {
        *(unsigned char *)a1 = 1;
        *(_DWORD *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *((_DWORD *)a2 + 2);
        *(_OWORD *)(a1 + 16) = 0u;
        *(_OWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
        *(void *)(a1 + 40) = *((void *)a2 + 5);
        uint64_t v8 = *((void *)a2 + 3);
        *(void *)(a1 + 16) = *((void *)a2 + 2);
        *((void *)a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
        uint64_t v9 = *((void *)a2 + 4);
        *((void *)a2 + 5) = 0;
        uint64_t v11 = *(void *)(a1 + 24);
        uint64_t v10 = *(void *)(a1 + 32);
        *(void *)(a1 + 24) = v8;
        *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v9;
        *((void *)a2 + 3) = v11;
        *((void *)a2 + 4) = v10;
        *(_OWORD *)(a1 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
        *(_OWORD *)(a1 + 64) = 0u;
        *(void *)(a1 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *((void *)a2 + 9);
        uint64_t v12 = *((void *)a2 + 7);
        *(void *)(a1 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *((void *)a2 + 6);
        *((void *)a2 + 6) = 0;
        uint64_t v13 = *((void *)a2 + 8);
        *((void *)a2 + 9) = 0;
        uint64_t v15 = *(void *)(a1 + 56);
        uint64_t v14 = *(void *)(a1 + 64);
        *(void *)(a1 + 56) = v12;
        *(void *)(a1 + 64) = v13;
        *((void *)a2 + 7) = v15;
        *((void *)a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v14;
      }
      *(void *)(a1 + 80) = *((void *)a2 + 10);
    }
  }
  return a1;
}

uint64_t re::DefaultAssetSerialize::fromHandle(re::DefaultAssetSerialize *this, re::DynamicString *a2, const re::AssetHandle *a3)
{
  re::Optional<re::AssetPath>::Optional((uint64_t)v6, (unsigned __int8 *)this + 8);
  re::AssetSerializationScheme::commonCodingKey(a2, a3, (const re::AssetHandle *)0xD, v6);
  re::Optional<re::AssetPath>::~Optional(v6);
  return 1;
}

void re::DefaultAssetSerialize::toHandle(re::DefaultAssetSerialize *this, re::AssetHandle *a2, const char *a3, re::Allocator *a4)
{
}

re::DirectAssetDeserialize *re::DirectAssetDeserialize::DirectAssetDeserialize(re::DirectAssetDeserialize *this, AssetService *a2, const re::AssetPath *a3)
{
  *(void *)this = &unk_26E6CA658;
  *((unsigned char *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  BOOL v4 = (char *)this + 8;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = a2;
  optionalFromPointer<re::AssetPath>(a3, (uint64_t)v6);
  re::Optional<re::AssetPath>::operator=((uint64_t)v4, v6);
  re::Optional<re::AssetPath>::~Optional(v6);
  return this;
}

BOOL re::DirectAssetDeserialize::toHandle(re::DirectAssetDeserialize *this, re::AssetHandle *a2, char *a3, re::Allocator *a4)
{
  uint64_t v6 = (re::AssetManager *)*((void *)this + 12);
  re::Optional<re::AssetPath>::Optional((uint64_t)v10, (unsigned __int8 *)this + 8);
  re::AssetSerializationScheme::relativeHandle((uint64_t *)&v11, v6, a3, v10);
  long long v7 = *(_OWORD *)a2;
  *(_OWORD *)a2 = v11;
  long long v11 = v7;
  uint64_t v8 = *((void *)a2 + 2);
  *((void *)a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v12;
  uint64_t v12 = v8;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v11);
  re::Optional<re::AssetPath>::~Optional(v10);
  return *((void *)a2 + 1) != 0;
}

void re::DirectAssetDeserialize::fromHandle(re::DirectAssetDeserialize *this, re::DynamicString *a2, const re::AssetHandle *a3)
{
}

void re::DeferredAssetDeserialize::fromHandle(re::DeferredAssetDeserialize *this, re::DynamicString *a2, const re::AssetHandle *a3)
{
}

uint64_t re::DeferredAssetDeserialize::toHandle(re::DeferredAssetDeserialize *this, re::AssetHandle *a2, re::AssetPath *a3, re::Allocator *a4)
{
  return 1;
}

re::RemappedAssetSerialize *re::RemappedAssetSerialize::RemappedAssetSerialize(re::RemappedAssetSerialize *this, const re::AssetPath *a2, const re::AssetPathMapping *a3)
{
  *(void *)this = &unk_26E6CA688;
  *((unsigned char *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  BOOL v5 = (char *)this + 8;
  optionalFromPointer<re::AssetPath>(a2, (uint64_t)v7);
  re::Optional<re::AssetPath>::operator=((uint64_t)v5, v7);
  re::Optional<re::AssetPath>::~Optional(v7);
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = a3;
  return this;
}

uint64_t re::RemappedAssetSerialize::fromHandle(re::RemappedAssetSerialize *this, re::DynamicString *a2, const re::AssetHandle *a3)
{
  uint64_t v6 = (re::AssetPathMapping *)*((void *)this + 12);
  if (!v6 || (re::AssetPathMapping::lookupString(v6, a2, a3) & 1) == 0)
  {
    re::Optional<re::AssetPath>::Optional((uint64_t)v8, (unsigned __int8 *)this + 8);
    re::AssetSerializationScheme::commonCodingKey(a2, a3, (const re::AssetHandle *)0xD, v8);
    re::Optional<re::AssetPath>::~Optional(v8);
  }
  return 1;
}

void re::RemappedAssetSerialize::toHandle(re::RemappedAssetSerialize *this, re::AssetHandle *a2, const char *a3, re::Allocator *a4)
{
}

BOOL re::RealityFileAssetSerialize::fromHandle(re::RealityFileAssetSerialize *this, re::DynamicString *a2, const re::AssetHandle *a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v6 = (re::AssetPathMapping *)*((void *)this + 12);
  if (v6 && re::AssetPathMapping::lookupString(v6, a2, a3))
  {
    if (re::AssetPath::pathIsAppBased((uint64_t)a2))
    {
      re::Defaults::BOOLValue((re::Defaults *)"AllowAppBasedAssetPaths", v7, v20);
      if (v20[0]) {
        BOOL v8 = v20[1] == 0;
      }
      else {
        BOOL v8 = 1;
      }
      return !v8;
    }
    re::AssetHandle::getLegacyAppPath(a3, v20);
    if (!v20[0]) {
      return 1;
    }
  }
  else
  {
    re::AssetHandle::getLegacyAppPath(a3, v20);
    if (!v20[0])
    {
      re::Optional<re::AssetPath>::Optional((uint64_t)v19, (unsigned __int8 *)this + 8);
      int v12 = re::AssetSerializationScheme::commonCodingKeyInternal(a2, a3, (const re::AssetHandle *)0xD, v19);
      re::Optional<re::AssetPath>::~Optional(v19);
      uint64_t v9 = 1;
      if (!*((unsigned char *)this + 104) && v12 == 3)
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF75320, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_26AF75320))
        {
          _MergedGlobals_43 = 1;
          __cxa_guard_release(&qword_26AF75320);
        }
        if (*((void *)a2 + 1)) {
          uint64_t v13 = (const char *)*((void *)a2 + 2);
        }
        else {
          uint64_t v13 = (char *)a2 + 9;
        }
        if (_MergedGlobals_43) {
          size_t v14 = 8;
        }
        else {
          size_t v14 = 0;
        }
        uint64_t v15 = (re *)strncmp(v13, "assetId:", v14);
        if (!v15)
        {
          uint64_t v16 = *re::assetsLogObjects(v15);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            if (*((void *)a2 + 1)) {
              unsigned int v18 = (char *)*((void *)a2 + 2);
            }
            else {
              unsigned int v18 = (char *)a2 + 9;
            }
            *(_DWORD *)uint64_t buf = 136315138;
            signed int v24 = v18;
            _os_log_error_impl(&dword_233120000, v16, OS_LOG_TYPE_ERROR, "RealityFileAssetSerialize generated an AssetId-based serialization string: '%s'.", buf, 0xCu);
          }
          uint64_t v9 = 0;
        }
      }
      goto LABEL_17;
    }
  }
  re::DynamicString::operator=(a2, (re::DynamicString *)&v21);
  re::Defaults::BOOLValue((re::Defaults *)"AllowAppBasedAssetPaths", v10, (char *)buf);
  if (buf[0]) {
    BOOL v11 = buf[1] == 0;
  }
  else {
    BOOL v11 = 1;
  }
  uint64_t v9 = !v11;
LABEL_17:
  if (v20[0] && v21 && (v22 & 1) != 0) {
    (*(void (**)(void))(*(void *)v21 + 40))();
  }
  return v9;
}

void re::RealityFileAssetSerialize::toHandle(re::RealityFileAssetSerialize *this, re::AssetHandle *a2, const char *a3, re::Allocator *a4)
{
}

void re::RealityFileAssetDeserialization::fromHandle(re::RealityFileAssetDeserialization *this, re::DynamicString *a2, const re::AssetHandle *a3)
{
}

uint64_t re::RealityFileAssetDeserialization::toHandle(re::RealityFileAssetDeserialization *this, re::AssetHandle *a2, const char *a3, re::Allocator *a4)
{
  if (!re::AssetPath::pathIsAppBased((uint64_t)&v11)
    || (re::Defaults::BOOLValue((re::Defaults *)"AllowAppBasedAssetPaths", v8, v13), uint64_t v9 = 0, v13[0]) && v13[1])
  {
    uint64_t v9 = (*(uint64_t (**)(void, re::AssetHandle *, const char *, re::Allocator *))(**((void **)this + 1)
                                                                                             + 24))(*((void *)this + 1), a2, a3, a4);
  }
  if (v11 && (v12 & 1) != 0) {
    (*(void (**)(void))(*(void *)v11 + 40))();
  }
  return v9;
}

uint64_t re::NetworkAssetSerialization::fromHandle(re::NetworkAssetSerialization *this, re::DynamicString *a2, os_unfair_lock_s **a3)
{
  if (a3[1])
  {
    uint64_t v6 = re::AssetHandle::assetInfo((re::AssetHandle *)a3);
    if (v6[10] == -1) {
      LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    }
    else {
      uint64_t v8 = v6[10];
    }
    uint64_t v9 = a3[1];
    if (v9 && (uint64_t v10 = *(const char ***)&v9[66]._os_unfair_lock_opaque) != 0) {
      uint64_t v11 = *v10;
    }
    else {
      uint64_t v11 = 0;
    }
    re::AssetSignpost::fireImpulse((re::AssetSignpost *)0x80A, v8, v11, v7);
  }
  if ((re::AssetSerializationScheme::storedCodingKey(a2, (re::DynamicString *)a3, (const re::AssetHandle *)a3) & 1) == 0
    && (re::AssetSerializationScheme::deviceCodingKey(a2, 1, 13, (uint64_t)a3) & 1) == 0)
  {
    char v12 = a3[1];
    if (v12
      && (uint64_t v13 = v12 + 96,
          os_unfair_lock_lock(v12 + 96),
          uint32_t os_unfair_lock_opaque = v12[105]._os_unfair_lock_opaque,
          os_unfair_lock_unlock(v13),
          os_unfair_lock_opaque == 2))
    {
      unsigned int v18 = "nosync";
      uint64_t v19 = 6;
      re::DynamicString::operator=(a2, (uint64_t)&v18);
    }
    else
    {
      uint64_t v15 = (re::AssetPath *)re::AssetHandle::legacy_assetPath((re::AssetHandle *)a3);
      if (*((unsigned char *)this + 112)) {
        uint64_t v16 = (const char *)*((void *)this + 15);
      }
      else {
        uint64_t v16 = (char *)this + 113;
      }
      re::AssetPath::assetPathForNetwork(v15, v16, (re::DynamicString *)&v18);
      re::DynamicString::operator=(a2, (re::DynamicString *)&v18);
      if (v18 && (v19 & 1) != 0) {
        (*(void (**)(void))(*(void *)v18 + 40))();
      }
    }
  }
  return 1;
}

uint64_t re::NetworkAssetSerialization::toHandle(re::NetworkAssetSerialization *this, re::AssetHandle *a2, char *__s1, re::Allocator *a4)
{
  v63[6] = *MEMORY[0x263EF8340];
  if (strcmp(__s1, "nosync"))
  {
    if (*((unsigned char *)this + 8)) {
      long long v7 = (re::NetworkAssetSerialization *)((char *)this + 16);
    }
    else {
      long long v7 = 0;
    }
    uint64_t v8 = re::AssetManager::parseAssetPath(*((re::AssetManager **)this + 17), __s1, v7, 1, (uint64_t)v44);
    if (v44[0])
    {
      if (v45[0] != 8)
      {
LABEL_13:
        size_t v14 = (re::AssetManager *)*((void *)this + 17);
        re::Optional<re::AssetPath>::Optional((uint64_t)v42, (unsigned __int8 *)this + 8);
        re::AssetSerializationScheme::relativeHandle((uint64_t *)buf, v14, __s1, v42);
        long long v15 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *(_OWORD *)buf;
        *(_OWORD *)uint64_t buf = v15;
        uint64_t v16 = *((void *)a2 + 2);
        *((void *)a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *(void *)&buf[16];
        *(void *)&uint8_t buf[16] = v16;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
        re::Optional<re::AssetPath>::~Optional(v42);
        if (*((_DWORD *)re::AssetHandle::assetInfo(a2) + 22) == 4)
        {
          uint64_t v17 = re::AssetHandle::legacy_assetPath(a2);
          unsigned int v18 = (v17[2] & 1) != 0 ? (char *)v17[3] : (char *)v17 + 17;
          if ((*(unsigned int (**)(re::NetworkAssetSerialization *, char *))(*(void *)this + 32))(this, v18))
          {
            uint64_t v19 = (os_unfair_lock_s *)*((void *)this + 17);
            uint64_t v20 = (char *)re::AssetHandle::legacy_assetPath(a2);
            if (v20[48]) {
              uint64_t v21 = (const char *)*((void *)v20 + 7);
            }
            else {
              uint64_t v21 = v20 + 49;
            }
            uint64_t v22 = *((void *)a2 + 1);
            if (v22) {
              int v23 = *(const re::DynamicString ***)(v22 + 264);
            }
            else {
              int v23 = 0;
            }
            re::AssetManager::assetHandleMemoryPath(v19, v21, v23, (uint64_t *)buf);
            long long v32 = *(_OWORD *)a2;
            *(_OWORD *)a2 = *(_OWORD *)buf;
            *(_OWORD *)uint64_t buf = v32;
            uint64_t v33 = *((void *)a2 + 2);
            *((void *)a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *(void *)&buf[16];
            *(void *)&uint8_t buf[16] = v33;
            re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
          }
        }
        if (*((void *)a2 + 1))
        {
          unint64_t v34 = re::AssetHandle::assetInfo(a2);
          if (v34[10] == -1) {
            LODWORD(v36) = 0;
          }
          else {
            uint64_t v36 = v34[10];
          }
          uint64_t v37 = *((void *)a2 + 1);
          if (v37 && (uint64_t v38 = *(const char ***)(v37 + 264)) != 0) {
            uint64_t v39 = *v38;
          }
          else {
            uint64_t v39 = 0;
          }
          re::AssetSignpost::fireImpulse((re::AssetSignpost *)0x80B, v36, v39, v35);
        }
        uint64_t v24 = 1;
        goto LABEL_62;
      }
      int v43 = 0;
      if (v47[23]) {
        uint64_t v9 = *(const char **)&v48[7];
      }
      else {
        uint64_t v9 = v48;
      }
      uint64_t v10 = (re *)sscanf(v9, "%llu", &v43);
      if (v10 == 1)
      {
        uint64_t v11 = (os_unfair_lock_s *)*((void *)this + 17);
        char v12 = v11 + 16;
        os_unfair_lock_lock(v11 + 16);
        uint64_t v13 = (uint64_t)&v11[30];
        *(void *)uint64_t buf = v43;
        if (!re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v13, (uint64_t *)buf))
        {
          memset(buf, 0, sizeof(buf));
          uint64_t v28 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(buf, 0);
          uint64_t v56 = 0;
          uint64_t v57 = 0;
          uint64_t v58 = 0;
          long long v60 = 0u;
          long long v61 = 0u;
          int v59 = 0;
          int v62 = 0;
          memset(v63, 0, 40);
          unint64_t v29 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v63[1], 0);
          unint64_t v30 = v43;
          uint64_t v31 = *v49;
          re::NetworkAssetLoadDescriptor::init((uint64_t)buf, v30, (re::DynamicString *)v50);
          if (v50[0])
          {
            if (v50[1]) {
              (*(void (**)(void))(*(void *)v50[0] + 40))();
            }
            memset(v50, 0, sizeof(v50));
          }
          uint64_t v54 = 0;
          uint64_t v52 = 0;
          long long v51 = 0uLL;
          int v53 = 0;
          re::DynamicArray<re::AssetLoadDescriptor>::add((_anonymous_namespace_ *)&v51, (re::DynamicString *)buf);
          re::internal::AssetIdLoadDescriptorTable::addNewImmutable(v13, (uint64_t)v43, (uint64_t *)&v51);
          re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)&v51);
          if (v63[1])
          {
            if (v63[2]) {
              (*(void (**)(void))(*(void *)v63[1] + 40))();
            }
            memset(&v63[1], 0, 32);
          }
          if (*((void *)&v60 + 1))
          {
            if (v63[0]) {
              (*(void (**)(void))(**((void **)&v60 + 1) + 40))();
            }
            v63[0] = 0;
            long long v61 = 0uLL;
            *((void *)&v60 + 1) = 0;
            ++v62;
          }
          if (v56)
          {
            if ((void)v60) {
              (*(void (**)(void))(*(void *)v56 + 40))();
            }
            *(void *)&long long v60 = 0;
            uint64_t v57 = 0;
            uint64_t v58 = 0;
            uint64_t v56 = 0;
            ++v59;
          }
          if (*(void *)buf && (buf[8] & 1) != 0) {
            (*(void (**)(void))(**(void **)buf + 40))();
          }
        }
        os_unfair_lock_unlock(v12);
        goto LABEL_13;
      }
      uint64_t v27 = *re::assetsLogObjects(v10);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        re::AssetPath::fullAssetPath((re::AssetPath *)v45, (re::DynamicString *)buf);
        long long v41 = (buf[8] & 1) != 0 ? *(uint8_t **)&buf[16] : &buf[9];
        LODWORD(v51) = 136315138;
        *(void *)((char *)&v51 + 4) = v41;
        _os_log_error_impl(&dword_233120000, v27, OS_LOG_TYPE_ERROR, "invalid asset path asset Id: %s", (uint8_t *)&v51, 0xCu);
        if (*(void *)buf)
        {
          if (buf[8]) {
            (*(void (**)(void))(**(void **)buf + 40))();
          }
        }
      }
    }
    else
    {
      uint64_t v25 = *re::assetsLogObjects((re *)v8);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        if (v46) {
          uint64_t v26 = *(unsigned char **)&v47[7];
        }
        else {
          uint64_t v26 = v47;
        }
        *(_DWORD *)uint64_t buf = 136315394;
        *(void *)&uint8_t buf[4] = __s1;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v26;
        _os_log_error_impl(&dword_233120000, v25, OS_LOG_TYPE_ERROR, "asset string '%s' parse failed: %s", buf, 0x16u);
      }
    }
    uint64_t v24 = 0;
LABEL_62:
    re::Result<re::AssetPath,re::DetailedError>::~Result(v44);
    return v24;
  }
  return 1;
}

uint64_t re::PassthroughAssetSerialization::fromHandle(re::PassthroughAssetSerialization *this, re::DynamicString *a2, const re::AssetHandle *a3)
{
  re::AssetHandle::serializationString(a3, (re::DynamicString *)&v5);
  re::DynamicString::operator=(a2, (re::DynamicString *)&v5);
  if (v5 && (v6 & 1) != 0) {
    (*(void (**)(void))(*(void *)v5 + 40))();
  }
  return 1;
}

uint64_t re::PassthroughAssetSerialization::toHandle(re::PassthroughAssetSerialization *this, re::AssetHandle *a2, re::AssetPath *a3, re::Allocator *a4)
{
  return 1;
}

void re::PeanutToAlmondAssetSerialization::fromHandle(re::PeanutToAlmondAssetSerialization *this, re::DynamicString *a2, const re::AssetHandle *a3)
{
}

BOOL re::PeanutToAlmondAssetSerialization::toHandle(re::AssetManager **this, re::AssetHandle *a2, char *__s, re::Allocator *a4)
{
  uint64_t v5 = __s;
  uint64_t v40 = *MEMORY[0x263EF8340];
  size_t v8 = strlen(__s);
  uint64_t v9 = (_anonymous_namespace_ *)strncmp("reality:", v5, 8uLL);
  if (v9)
  {
    *(void *)&uint8_t buf[8] = 0;
    *(void *)&uint8_t buf[16] = 0;
    uint64_t v39 = 0;
    re::DynamicString::setCapacity(buf, 0);
    uint64_t v10 = (_anonymous_namespace_ *)re::AssetPath::removingCompiledExtension((re::AssetPath *)v5, (uint64_t)v24);
    if (v24[0])
    {
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      if (v26) {
        size_t v11 = v26 + 1;
      }
      else {
        size_t v11 = 0;
      }
      uint64_t v30 = 0;
      re::DynamicString::setCapacity(&v29, v11);
      re::DynamicString::operator=((re::DynamicString *)&v29, (uint64_t)&v25);
      re::DynamicString::operator=((re::DynamicString *)buf, (re::DynamicString *)&v29);
      if (v29 && (v30 & 1) != 0) {
        (*(void (**)(void))(*v29 + 40))();
      }
      if (buf[8]) {
        uint64_t v5 = *(char **)&buf[16];
      }
      else {
        uint64_t v5 = &buf[9];
      }
    }
    re::AssetHandle::setSerializationString(a2, (re::AssetPath *)v5, a4);
    if (*(void *)buf && (buf[8] & 1) != 0) {
      (*(void (**)(void))(**(void **)buf + 40))();
    }
    return 1;
  }
  else
  {
    strcpy(__s2, ".reality/");
    char v12 = strstr(v5 + 8, __s2);
    BOOL v13 = v12 != 0;
    if (v12)
    {
      v28[0] = v5 + 8;
      v28[1] = v12 - v5;
      *(void *)&uint8_t buf[16] = 0;
      uint64_t v39 = 0;
      if (v12 == v5) {
        size_t v14 = 0;
      }
      else {
        size_t v14 = v12 - (v5 + 8) + 9;
      }
      *(void *)uint64_t buf = a4;
      *(void *)&uint8_t buf[8] = 0;
      re::DynamicString::setCapacity(buf, v14);
      re::DynamicString::operator=((re::DynamicString *)buf, (uint64_t)v28);
      strcpy(v36, "assets/");
      long long v15 = strstr(v5 + 8, v36);
      if (v15)
      {
        v27[0] = v15 + 7;
        v27[1] = &v5[v8] - (v15 + 7);
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        if (&v5[v8] == v15 + 7) {
          size_t v16 = 0;
        }
        else {
          size_t v16 = &v5[v8] - (v15 + 7) + 1;
        }
        unint64_t v29 = (uint64_t *)a4;
        uint64_t v30 = 0;
        re::DynamicString::setCapacity(&v29, v16);
        re::DynamicString::operator=((re::DynamicString *)&v29, (uint64_t)v27);
        re::AssetManager::tryGetImmutableRealityFileAsset(this[1], (const re::DynamicString *)buf, (const re::DynamicString *)&v29, (uint64_t)v24);
        if (v24[0])
        {
          unsigned int v18 = (re::DynamicString *)re::AssetHandle::legacy_assetPath((re::AssetHandle *)&v25);
          unint64_t v19 = *((void *)v18 + 1);
          unint64_t v34 = 0;
          uint64_t v35 = 0;
          long long v33 = v19;
          re::DynamicString::setCapacity(&v33, 0);
          re::AssetPath::fullAssetPath(v18, (re::DynamicString *)&v33);
          if (BYTE8(v33)) {
            uint64_t v20 = v34;
          }
          else {
            uint64_t v20 = (re::AssetPath *)((char *)&v33 + 9);
          }
          re::AssetHandle::setSerializationString(a2, v20, a4);
          if (void)v33 && (BYTE8(v33)) {
            (*(void (**)(void))(*(void *)v33 + 40))();
          }
        }
        else
        {
          int v23 = *re::assetsLogObjects(v17);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(v33) = 136315138;
            *(void *)((char *)&v33 + 4) = v5;
            _os_log_impl(&dword_233120000, v23, OS_LOG_TYPE_DEFAULT, "PeanutToAlmond Asset Deserialization: No existing asset found for %s", (uint8_t *)&v33, 0xCu);
          }
        }
        if (v24[0]) {
          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v25);
        }
        if (v29 && (v30 & 1) != 0) {
          (*(void (**)(void))(*v29 + 40))();
        }
      }
      if (*(void *)buf && (buf[8] & 1) != 0) {
        (*(void (**)(void))(**(void **)buf + 40))();
      }
    }
    else
    {
      uint64_t v22 = *re::assetsLogObjects(0);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 136315394;
        *(void *)&uint8_t buf[4] = __s2;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v5;
        _os_log_error_impl(&dword_233120000, v22, OS_LOG_TYPE_ERROR, "PeanutToAlmond Asset Deserialization failure: Invalid AssetHandle: No %s extension found in legacy reality file path '%s'", buf, 0x16u);
      }
    }
  }
  return v13;
}

uint64_t re::AlmondToPeanutAssetSerialization::fromHandle(re::AlmondToPeanutAssetSerialization *this, re::AssetPath **a2, const re::AssetHandle *a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v6 = *((void *)this + 2);
  if (!v6
    || ((*(uint64_t (**)(uint64_t, re::AssetPath **, const re::AssetHandle *))(*(void *)v6 + 16))(v6, a2, a3) & 1) == 0)
  {
    re::AssetHandle::serializationString(a3, (re::DynamicString *)&v34);
    re::DynamicString::operator=((re::DynamicString *)a2, (re::DynamicString *)&v34);
    if (v34)
    {
      if (v35[0]) {
        (*(void (**)(void))(*(void *)v34 + 40))();
      }
    }
  }
  if ((unint64_t)a2[1]) {
    size_t v8 = a2[2];
  }
  else {
    size_t v8 = (re::AssetPath *)((char *)a2 + 9);
  }
  uint64_t AssetTypeFromFilePath = re::AssetPath::getAssetTypeFromFilePath(v8, *(re::internal::AssetTypeRegistry **)(*((void *)this + 1) + 1040), v7);
  uint64_t v10 = re::AssetPath::updateWithCompiledExtension((char *)a2, AssetTypeFromFilePath);
  LODWORD(v34) = 0;
  memset(v35, 0, sizeof(v35));
  size_t v11 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v35, 0);
  long long v37 = 0u;
  long long v36 = 0u;
  re::DynamicString::setCapacity(&v36, 0);
  uint64_t v38 = 0;
  if ((unint64_t)a2[1]) {
    char v12 = (char *)a2[2];
  }
  else {
    char v12 = (char *)a2 + 9;
  }
  double v13 = re::AssetPath::parse((re::AssetPath *)&v34, v12, 0, *(const re::internal::AssetTypeRegistry **)(*((void *)this + 1) + 1040), *(os_unfair_lock_s **)(*((void *)this + 1) + 1128), v31);
  if (!v31[0] && (void)v32)
  {
    if (BYTE8(v32)) {
      (*(void (**)(double))(*(void *)v32 + 40))(v13);
    }
    long long v32 = 0u;
    long long v33 = 0u;
  }
  uint64_t v30 = 0;
  if (v34 == 8
    && ((BYTE8(v36) & 1) != 0 ? (size_t v14 = (const char *)v37) : (size_t v14 = (char *)&v36 + 9), sscanf(v14, "%llu", &v30) == 1))
  {
    uint64_t v15 = v30;
  }
  else
  {
    size_t v16 = re::AssetHandle::assetInfo(a3);
    uint64_t v15 = v16[10];
    if ((unint64_t)(v15 + 1) < 2) {
      goto LABEL_40;
    }
    uint64_t v30 = v16[10];
  }
  re::AssetManager::loadDescriptorsFromAssetId(*((os_unfair_lock_s **)this + 1), v15, v28);
  if (v28[0] && v29[2])
  {
    re::AssetManager::convertToAssetPath(*((void *)this + 1), v29[4], (uint64_t)&v23);
    if ((_BYTE)v23)
    {
      if (v25) {
        unsigned int v18 = v27;
      }
      else {
        unsigned int v18 = v26;
      }
      size_t v19 = strlen(v18);
      *(void *)&long long buf = v18;
      *((void *)&buf + 1) = v19;
    }
    else
    {
      uint64_t v20 = *re::assetsLogObjects(v17);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        if (v25) {
          uint64_t v22 = v27;
        }
        else {
          uint64_t v22 = v26;
        }
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v22;
        _os_log_error_impl(&dword_233120000, v20, OS_LOG_TYPE_ERROR, "AlmondToPeanut AssetHandle Serialization Error: %s", (uint8_t *)&buf, 0xCu);
      }
      *(void *)&long long buf = &str_16;
      *((void *)&buf + 1) = 0;
    }
    re::DynamicString::operator=((re::DynamicString *)a2, (uint64_t)&buf);
    if (v24 && (v25 & 1) != 0) {
      (*(void (**)(void))(*(void *)v24 + 40))();
    }
  }
  else
  {
    int v23 = &str_16;
    uint64_t v24 = 0;
    re::DynamicString::operator=((re::DynamicString *)a2, (uint64_t)&v23);
  }
  if (v28[0]) {
    re::DynamicArray<re::AssetLoadDescriptor>::deinit((uint64_t)v29);
  }
LABEL_40:
  if ((void)v36)
  {
    if (BYTE8(v36)) {
      (*(void (**)(void))(*(void *)v36 + 40))();
    }
    long long v36 = 0u;
    long long v37 = 0u;
  }
  if (v35[0] && (v35[1] & 1) != 0) {
    (*(void (**)(void))(*(void *)v35[0] + 40))();
  }
  return 1;
}

void re::AlmondToPeanutAssetSerialization::toHandle(re::AlmondToPeanutAssetSerialization *this, re::AssetHandle *a2, const char *a3, re::Allocator *a4)
{
}

void re::ZeroAssetSerialization::~ZeroAssetSerialization(re::ZeroAssetSerialization *this)
{
}

void re::DefaultAssetSerialize::~DefaultAssetSerialize(re::DefaultAssetSerialize *this)
{
  *(void *)this = &unk_26E6CA958;
  re::Optional<re::AssetPath>::~Optional((unsigned char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6CA958;
  re::Optional<re::AssetPath>::~Optional((unsigned char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void re::DirectAssetDeserialize::~DirectAssetDeserialize(re::DirectAssetDeserialize *this)
{
  *(void *)this = &unk_26E6CA658;
  re::Optional<re::AssetPath>::~Optional((unsigned char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6CA658;
  re::Optional<re::AssetPath>::~Optional((unsigned char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void re::DeferredAssetDeserialize::~DeferredAssetDeserialize(re::DeferredAssetDeserialize *this)
{
}

void re::RemappedAssetSerialize::~RemappedAssetSerialize(re::RemappedAssetSerialize *this)
{
  *(void *)this = &unk_26E6CA688;
  re::Optional<re::AssetPath>::~Optional((unsigned char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6CA688;
  re::Optional<re::AssetPath>::~Optional((unsigned char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void re::RealityFileAssetSerialize::~RealityFileAssetSerialize(re::RealityFileAssetSerialize *this)
{
  *(void *)this = &unk_26E6CA688;
  re::Optional<re::AssetPath>::~Optional((unsigned char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6CA688;
  re::Optional<re::AssetPath>::~Optional((unsigned char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void re::RealityFileAssetDeserialization::~RealityFileAssetDeserialization(re::RealityFileAssetDeserialization *this)
{
}

uint64_t re::NetworkAssetSerialization::isLocalPeerID(re::NetworkAssetSerialization *this, const char *a2)
{
  return 0;
}

void re::PassthroughAssetSerialization::~PassthroughAssetSerialization(re::PassthroughAssetSerialization *this)
{
}

void re::PeanutToAlmondAssetSerialization::~PeanutToAlmondAssetSerialization(re::PeanutToAlmondAssetSerialization *this)
{
}

void re::AlmondToPeanutAssetSerialization::~AlmondToPeanutAssetSerialization(re::AlmondToPeanutAssetSerialization *this)
{
}

uint64_t re::Optional<re::AssetPath>::Optional(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  *(unsigned char *)a1 = v3;
  if (v3)
  {
    *(_DWORD *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *((_DWORD *)a2 + 2);
    re::DynamicString::DynamicString((re::DynamicString *)(a1 + 16), (const re::DynamicString *)(a2 + 16));
    re::DynamicString::DynamicString((re::DynamicString *)(a1 + 48), (const re::DynamicString *)(a2 + 48));
    *(void *)(a1 + 80) = *((void *)a2 + 10);
  }
  return a1;
}

uint64_t re::directMeshConnectionId(void **a1)
{
  uint64_t v1 = *a1;
  if (v1) {
    [v1 auditToken];
  }
  else {
    memset(&v3, 0, sizeof(v3));
  }
  audit_token_t atoken = v3;
  return audit_token_to_pid(&atoken);
}

void re::ResourceFetchManager::xpcInterface(void *a1@<X8>)
{
  audit_token_t v3 = [MEMORY[0x263F08D80] interfaceWithProtocol:&unk_26E74AAC8];
  BOOL v4 = [MEMORY[0x263EFFA08] setWithObject:objc_opt_class()];
  [v3 setClasses:v4 forSelector:sel_associateConnectionWithPeerID_clientPorts_ argumentIndex:1 ofReply:0];

  id v5 = v3;
  *a1 = v5;
}

void re::ResourceFetchManager::~ResourceFetchManager(void **this)
{
  re::ResourceFetchManager::deinit(this);

  uint64_t v2 = (char *)this[34];
  if (v2)
  {

    this[34] = 0;
  }
  audit_token_t v3 = (char *)this[33];
  if (v3)
  {

    this[33] = 0;
  }
  BOOL v4 = (char *)this[32];
  if (v4)
  {

    this[32] = 0;
  }

  re::DynamicArray<re::SharedPtr<re::ResourceFetchManager::Request>>::deinit((uint64_t)(this + 14));
  re::DynamicArray<re::ResourceFetchManager::Connection>::deinit((uint64_t)(this + 9));
}

{
  uint64_t vars8;

  re::ResourceFetchManager::~ResourceFetchManager(this);
  JUMPOUT(0x237DBCBC0);
}

void **re::ResourceFetchManager::deinit(void **this)
{
  if (*((unsigned char *)this + 8))
  {
    uint64_t v1 = this;
    MEMORY[0x237DB8630](5, 0, re::ResourceFetchManager::renderServerContextDidCommit, this);
    [v1[3] invalidate];
    os_unfair_lock_lock((os_unfair_lock_t)v1 + 16);
    uint64_t v2 = v1[11];
    if (v2)
    {
      audit_token_t v3 = (id *)v1[13];
      BOOL v4 = &v3[8 * (void)v2];
      do
      {
        id v5 = v1[34];
        uint64_t v6 = v5[15];
        if (v6)
        {
          uint64_t v7 = 48 * v6;
          size_t v8 = (uint64_t *)(v5[17] + 40);
          do
          {
            int v9 = [v3[1] pid];
            id v10 = v3[1];
            if (v10)
            {
              [v10 auditToken];
              id v10 = v3[1];
            }
            else
            {
              long long v37 = 0u;
              long long v38 = 0u;
            }
            size_t v11 = objc_msgSend(v10, "peerID", v37, v38);
            int v39 = v9;
            id v40 = v11;
            uint64_t v12 = *v8;
            v8 += 6;
            (*(void (**)(uint64_t, int *, long long *, id *))(*(void *)v12 + 16))(v12, &v39, &v37, &v40);
            v7 -= 48;
          }
          while (v7);
        }
        v3 += 8;
      }
      while (v3 != v4);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)v1 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)v1 + 16);
    [v1[2] invalidate];
    double v13 = v1[11];
    if (v13)
    {
      size_t v14 = (char *)v1[13];
      uint64_t v15 = &v14[64 * (void)v13];
      do
      {
        uint64_t v16 = *((unsigned int *)v14 + 12);
        if (v16)
        {
          uint64_t v17 = 0;
          unsigned int v18 = (int *)(*((void *)v14 + 4) + 8);
          while (1)
          {
            int v19 = *v18;
            v18 += 22;
            if (v19 < 0) {
              break;
            }
            if (v16 == ++v17)
            {
              LODWORD(v17) = *((_DWORD *)v14 + 12);
              break;
            }
          }
        }
        else
        {
          LODWORD(v17) = 0;
        }
        if (v16 != v17)
        {
          uint64_t v20 = v17;
          do
          {
            uint64_t v21 = *((void *)v14 + 4) + 88 * v20;
            uint64_t v22 = *(void *)(v21 + 64);
            if (v22)
            {
              int v23 = *(uint64_t **)(v21 + 80);
              uint64_t v24 = 8 * v22;
              do
              {
                uint64_t v25 = *v23++;
                *(void *)(v25 + 16) = 0;
                v24 -= 8;
              }
              while (v24);
            }
            if (v16 <= (int)v17 + 1) {
              int v26 = v17 + 1;
            }
            else {
              int v26 = v16;
            }
            while (1)
            {
              uint64_t v20 = (v17 + 1);
              if (v26 - 1 == v17) {
                break;
              }
              LODWORD(v17) = v17 + 1;
              int v27 = v20;
              if ((*(_DWORD *)(*((void *)v14 + 4) + 88 * v20 + 8) & 0x80000000) != 0) {
                goto LABEL_31;
              }
            }
            int v27 = v26;
LABEL_31:
            LODWORD(v17) = v27;
          }
          while (v16 != v27);
        }
        re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)(v14 + 16));
        uint64_t v28 = (re::PeerIDValidator *)[*((id *)v14 + 1) peerID];
        unint64_t v29 = re::PeerIDValidator::instance(v28);
        re::PeerIDValidator::remove_impl((re::PeerIDValidator *)v29, (unint64_t)v28);
        [*(id *)v14 invalidate];
        [*((id *)v14 + 1) invalidate];
        re::ObjCObject::operator=((void **)v14, 0);
        uint64_t v30 = (void *)*((void *)v14 + 1);
        *((void *)v14 + 1) = 0;

        v14 += 64;
      }
      while (v14 != v15);
    }
    uint64_t v31 = v1[16];
    if (v31)
    {
      long long v32 = (uint64_t *)v1[18];
      uint64_t v33 = 8 * (void)v31;
      do
      {
        uint64_t v34 = *v32++;
        re::makeResourceSharingError((__CFString *)0x191, 0, &v40);
        id v35 = v40;
        id v40 = 0;
        LOBYTE(v37) = 0;
        *((void *)&v37 + 1) = v35;
        (*(void (**)(void, long long *))(**(void **)(v34 + 96) + 16))(*(void *)(v34 + 96), &v37);

        v33 -= 8;
      }
      while (v33);
    }
    re::DynamicArray<re::SharedPtr<re::ResourceFetchManager::Request>>::deinit((uint64_t)(v1 + 14));
    re::DynamicArray<re::ResourceFetchManager::Connection>::deinit((uint64_t)(v1 + 9));
    os_unfair_lock_unlock((os_unfair_lock_t)v1 + 16);
    re::DynamicArray<re::ResourceFetchManager::ConnectionAddedHandler>::deinit((uint64_t)v1[34] + 64);
    re::DynamicArray<re::ResourceFetchManager::ConnectionAddedHandler>::deinit((uint64_t)v1[34] + 104);
    long long v36 = (char *)v1[34];
    if (v36)
    {

      v1[34] = 0;
    }
    re::ObjCObject::operator=(v1 + 4, 0);
    re::ObjCObject::operator=(v1 + 3, 0);
    this = re::ObjCObject::operator=(v1 + 2, 0);
    *((unsigned char *)v1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  }
  return this;
}

void re::ResourceFetchManager::renderServerContextDidCommit(re::ResourceFetchManager *this, os_unfair_lock_s *a2, void *a3, void *a4)
{
  id v5 = (id)voucher_copy();

  if (v5)
  {
    long long v22 = 0u;
    long long v23 = 0u;
    CARenderContextGetAuditToken();
    memset(&atoken, 0, sizeof(atoken));
    pid_t v6 = audit_token_to_pid(&atoken);
    uint64_t v7 = a2 + 16;
    long long v19 = v22;
    long long v20 = v23;
    id v8 = v5;
    os_unfair_lock_lock(a2 + 16);
    uint64_t v9 = *(void *)&a2[22]._os_unfair_lock_opaque;
    if (v9)
    {
      uint64_t v10 = *(void *)&a2[26]._os_unfair_lock_opaque;
      size_t v11 = a2 + 48;
      uint64_t v12 = (void **)&a2[50];
      uint64_t v13 = v9 << 6;
      size_t v14 = (id *)(v10 + 8);
      do
      {
        if (*v14 && [*v14 pid] == v6)
        {
          if (*v14)
          {
            [*v14 auditToken];
          }
          else
          {
            long long v24 = 0u;
            long long v25 = 0u;
          }
          if ((void)v24 == (void)v19
            && *((void *)&v24 + 1) == *((void *)&v19 + 1)
            && (void)v25 == (void)v20
            && *((void *)&v25 + 1) == *((void *)&v20 + 1))
          {
            id v18 = v8;
            os_unfair_lock_lock(v11);
            re::ObjCObject::operator=(v12, v18);
            os_unfair_lock_unlock(v11);

            [*v14 setVoucher:v18];
          }
        }
        v14 += 8;
        v13 -= 64;
      }
      while (v13);
    }
    os_unfair_lock_unlock(v7);
  }
}

void re::ResourceFetchManager::init(re::ResourceFetchManager *this, id *a2)
{
  re::ObjCObject::operator=((id *)this + 6, a2);
  audit_token_t v3 = [[REResourceFetchServer alloc] initWithResourceFetchManager:this];
  re::ObjCObject::operator=((void **)this + 2, v3);

  re::xpc::Listener::makeAnonymous(&v19);
  BOOL v4 = (void **)((char *)this + 24);
  if ((id *)((char *)this + 24) != &v19)
  {
    id v5 = v19;
    id v19 = 0;
    pid_t v6 = *v4;
    id *v4 = v5;
  }
  re::xpc::Listener::setDelegate((id *)this + 3, (uint64_t *)this + 2);
  uint64_t v7 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v8 = dispatch_queue_attr_make_with_qos_class(v7, QOS_CLASS_USER_INITIATED, 0);

  dispatch_queue_t v9 = dispatch_queue_create("com.apple.CoreRE.ResourceFetchManager-service-queue", v8);
  re::ObjCObject::operator=((void **)this + 4, v9);

  re::xpc::Connection::setQueue((id *)this + 3, (re::ResourceFetchManager *)((char *)this + 32));
  uint64_t v10 = dispatch_queue_attr_make_with_autorelease_frequency(MEMORY[0x263EF83A8], DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  size_t v11 = dispatch_queue_attr_make_with_qos_class(v10, QOS_CLASS_USER_INITIATED, 0);

  dispatch_queue_t v12 = dispatch_queue_create("com.apple.CoreRE.ResourceFetchManager-decode-queue", v11);
  re::ObjCObject::operator=((void **)this + 5, v12);

  os_unfair_lock_lock((os_unfair_lock_t)this + 16);
  re::DynamicArray<re::ResourceFetchManager::Connection>::setCapacity((void *)this + 9, 8uLL);
  ++*((_DWORD *)this + 24);
  re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)this + 14, 0x40uLL);
  ++*((_DWORD *)this + 34);
  os_unfair_lock_unlock((os_unfair_lock_t)this + 16);
  uint64_t v15 = re::globalAllocators(v14);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15[2] + 32))(v15[2], 144, 8);
  *(_OWORD *)uint64_t v16 = 0u;
  *(_OWORD *)(v16 + 16) = 0u;
  *(_OWORD *)(v16 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(v16 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(v16 + 64) = 0u;
  *(_OWORD *)(v16 + 80) = 0u;
  *(_OWORD *)(v16 + 96) = 0u;
  *(_OWORD *)(v16 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(v16 + 12re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v16, 0);
  *(void *)uint64_t v16 = &unk_26E6CAB80;
  *(void *)(v16 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = re::globalAllocators(v17)[2];
  *(void *)(v16 + 136) = 0;
  *(_DWORD *)(v16 + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(_OWORD *)(v16 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_DWORD *)(v16 + 12re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(_OWORD *)(v16 + 96) = 0u;
  *(_OWORD *)(v16 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  uint64_t v18 = *((void *)this + 34);
  *((void *)this + 34) = v16;
  if (v18) {

  }
  [*((id *)this + 3) resume];
  CARenderNotificationAddObserver();
  *((unsigned char *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 1;
}

uint64_t re::DynamicArray<re::ResourceFetchManager::ConnectionAddedHandler>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 48 * v4;
        uint64_t v6 = v3 + 8;
        do
        {
          re::FunctionBase<24ul,void ()(int,audit_token_t,unsigned long long)>::destroyCallable(v6);
          v6 += 48;
          v5 -= 48;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::ResourceFetchManager::xpcEndpoint(id *this@<X0>, void *a2@<X8>)
{
}

BOOL re::ResourceFetchManager::hasPendingRequestedResources(os_unfair_lock_s *this)
{
  uint64_t v2 = this + 16;
  os_unfair_lock_lock(this + 16);
  BOOL v3 = *(void *)&this[32]._os_unfair_lock_opaque != 0;
  os_unfair_lock_unlock(v2);
  return v3;
}

uint64_t re::ResourceFetchManager::hasConnectionToPeer(os_unfair_lock_s *this, const char *a2)
{
  unint64_t v3 = strtoull_l(a2, 0, 10, 0);
  uint64_t v4 = this + 16;
  os_unfair_lock_lock(this + 16);
  uint64_t v5 = *(void *)&this[22]._os_unfair_lock_opaque;
  if (v5)
  {
    uint64_t v6 = *(void *)&this[26]._os_unfair_lock_opaque;
    uint64_t v7 = v5 << 6;
    id v8 = (id *)(v6 + 8);
    while (!*v8 || [*v8 peerID] != v3)
    {
      v8 += 8;
      v7 -= 64;
      if (!v7) {
        goto LABEL_6;
      }
    }
    uint64_t v9 = 1;
  }
  else
  {
LABEL_6:
    uint64_t v9 = 0;
  }
  os_unfair_lock_unlock(v4);
  return v9;
}

void re::ResourceFetchManager::fetchResource(re::AssetPath *this@<X2>, uint64_t a2@<X0>, const char *a3@<X1>, uint64_t a4@<X3>, unsigned int **a5@<X8>)
{
  uint64_t v111 = *MEMORY[0x263EF8340];
  *(void *)long long v87 = 0;
  re::AssetPath::getAssetId(this, (unint64_t *)v87);
  if (*((void *)this + 6)) {
    size_t v11 = (re::AssetPath *)*((void *)this + 7);
  }
  else {
    size_t v11 = (re::AssetPath *)((char *)this + 49);
  }
  AssetTypeNameFromPath = re::AssetPath::getAssetTypeNameFromPath(v11, v10);
  re::AssetSignpost::fireImpulse((re::AssetSignpost *)0x80C, v87[0], AssetTypeNameFromPath, v13);
  size_t v14 = (re *)strtoull_l(a3, 0, 10, 0);
  long long v86 = v14;
  int v15 = *(_DWORD *)this;
  if (*(_DWORD *)this != 8 && v15 != 4)
  {
    if (v15)
    {
      uint64_t v31 = re::resourceSharingLogObjects(v14)[1];
      if (os_log_type_enabled(v31, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_fault_impl(&dword_233120000, v31, OS_LOG_TYPE_FAULT, "Only peer asset paths can be fetched from another process", buf, 2u);
      }
      re::makeResourceSharingError((__CFString *)0x1F4, 0, buf);
      long long v32 = *(void **)buf;
      *(void *)long long buf = 0;
      v82[0] = 0;
      int v83 = v32;
      (*(void (**)(void, char *))(**(void **)(a4 + 32) + 16))(*(void *)(a4 + 32), v82);
      long long v25 = v83;
    }
    else
    {
      long long v23 = re::resourceSharingLogObjects(v14)[1];
      if (os_log_type_enabled(v23, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_fault_impl(&dword_233120000, v23, OS_LOG_TYPE_FAULT, "Invalid resource fetch request for empty asset path", buf, 2u);
      }
      re::makeResourceSharingError((__CFString *)0x1F4, 0, buf);
      long long v24 = *(void **)buf;
      *(void *)long long buf = 0;
      v84[0] = 0;
      long long v85 = v24;
      (*(void (**)(void, char *))(**(void **)(a4 + 32) + 16))(*(void *)(a4 + 32), v84);
      long long v25 = v85;
    }

    *a5 = 0;
    return;
  }
  uint64_t v17 = v14;
  long long v80 = 0u;
  long long v81 = 0u;
  uint64_t v18 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v80, 0);
  if (*(_DWORD *)this == 4)
  {
    *(_DWORD *)long long buf = 0;
    memset(&buf[8], 0, 32);
    id v19 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&buf[8], 0);
    memset(&buf[40], 0, 32);
    re::DynamicString::setCapacity(&buf[40], 0);
    *(void *)&buf[72] = 0;
    if (*((void *)this + 6)) {
      long long v20 = (const char *)*((void *)this + 7);
    }
    else {
      long long v20 = (char *)this + 49;
    }
    re::AssetPath::initMemoryAssetPath(buf, v20, *((void *)this + 9));
    uint64_t v98 = 0;
    uint64_t v99 = 0;
    uint64_t v96 = *(void *)&buf[8];
    size_t v97 = 0;
    re::DynamicString::setCapacity(&v96, 0);
    re::AssetPath::fullAssetPath((re::DynamicString *)buf, (re::DynamicString *)&v96);
    re::DynamicString::operator=((re::DynamicString *)&v80, (re::DynamicString *)&v96);
    if (v96 && (v97 & 1) != 0) {
      (*(void (**)(void))(*(void *)v96 + 40))();
    }
    if (*(void *)&buf[40])
    {
      if (buf[48]) {
        (*(void (**)(void))(**(void **)&buf[40] + 40))();
      }
      memset(&buf[40], 0, 32);
    }
    uint64_t v21 = *(void *)&buf[8];
    if (*(void *)&buf[8] && (buf[16] & 1) != 0)
    {
      uint64_t v22 = *(void *)&buf[24];
LABEL_30:
      (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 40))(v21, v22);
    }
  }
  else
  {
    *(void *)long long buf = *((void *)this + 1);
    memset(&buf[8], 0, 24);
    re::DynamicString::setCapacity(buf, 0);
    re::AssetPath::fullAssetPath(this, (re::DynamicString *)buf);
    re::DynamicString::operator=((re::DynamicString *)&v80, (re::DynamicString *)buf);
    uint64_t v21 = *(void *)buf;
    if (*(void *)buf && (buf[8] & 1) != 0)
    {
      uint64_t v22 = *(void *)&buf[16];
      goto LABEL_30;
    }
  }
  int v26 = (os_unfair_lock_s *)(a2 + 64);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 64));
  uint64_t v96 = 0;
  size_t v97 = &v96;
  uint64_t v98 = 0x3812000000;
  uint64_t v99 = __Block_byref_object_copy_;
  int v100 = __Block_byref_object_dispose_;
  int v101 = "";
  *(void *)unsigned int v102 = 0;
  uint64_t v28 = *(void *)(a2 + 88);
  if (!v28) {
    goto LABEL_93;
  }
  uint64_t v29 = *(void *)(a2 + 104);
  uint64_t v30 = v28 << 6;
  while (1)
  {
    int v27 = *(re **)(v29 + 8);
    if (v27)
    {
      int v27 = (re *)[(re *)v27 peerID];
      if (v27 == v17) {
        break;
      }
    }
    v29 += 64;
    v30 -= 64;
    if (!v30) {
      goto LABEL_93;
    }
  }
  uint64_t v33 = *(void **)(v29 + 8);
  re::DynamicString::DynamicString((re::DynamicString *)v95, (const re::DynamicString *)&v80);
  uint64_t v108 = *(void *)(a4 + 24);
  uint64_t v109 = 0;
  re::FunctionBase<24ul,void ()(re::Result<re::SharedResourcePayload,re::WrappedError>)>::operator=<24ul>((uint64_t)v107, a4);
  re::ResourceFetchManager::Request::create((uint64_t *)buf, a2, v33, (re::DynamicString *)v95, (uint64_t)v107);
  uint64_t v34 = (atomic_uint *)v97[6];
  v97[6] = *(void *)buf;
  if (v34) {
    re::details::release<re::ResourceRequest>(v34);
  }
  re::FunctionBase<24ul,void ()(re::Result<re::SharedResourcePayload,re::WrappedError>)>::destroyCallable((uint64_t)v107);
  id v35 = *(_anonymous_namespace_ **)&v95[0];
  if (*(void *)&v95[0])
  {
    if (BYTE8(v95[0])) {
      id v35 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)&v95[0] + 40))();
    }
    memset(v95, 0, sizeof(v95));
  }
  uint64_t v79 = a4;
  long long v36 = v97;
  unint64_t v38 = *(void *)(a2 + 120);
  unint64_t v37 = *(void *)(a2 + 128);
  if (v37 >= v38)
  {
    unint64_t v39 = v37 + 1;
    if (v38 < v37 + 1)
    {
      if (*(void *)(a2 + 112))
      {
        unint64_t v40 = 2 * v38;
        if (!v38) {
          unint64_t v40 = 8;
        }
        if (v40 <= v39) {
          unint64_t v41 = v39;
        }
        else {
          unint64_t v41 = v40;
        }
        re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)(a2 + 112), v41);
      }
      else
      {
        re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)(a2 + 112), v39);
        ++*(_DWORD *)(a2 + 136);
      }
    }
    unint64_t v37 = *(void *)(a2 + 128);
  }
  long long v42 = (unsigned int *)v36[6];
  *(void *)(*(void *)(a2 + 144) + 8 * v37) = v42;
  if (v42)
  {
    re::details::retain<re::ResourceFetchManager::Request>(v42);
    unint64_t v37 = *(void *)(a2 + 128);
  }
  uint64_t v78 = a5;
  *(void *)(a2 + 12re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v37 + 1;
  ++*(_DWORD *)(a2 + 136);
  uint64_t v43 = v97[6] + 32;
  unint64_t v44 = re::Hash<re::DynamicString>::operator()((uint64_t)buf, v43);
  __int16 v45 = (void *)(v29 + 16);
  if (*(void *)(v29 + 16))
  {
    uint64_t v46 = *(unsigned int *)(*(void *)(v29 + 24) + 4 * (v44 % *(unsigned int *)(v29 + 40)));
    if (v46 != 0x7FFFFFFF)
    {
      uint64_t v47 = *(void *)(v29 + 32);
      while (1)
      {
        unint64_t v44 = re::DynamicString::operator==(v47 + 88 * v46 + 16, v43);
        if (v44) {
          break;
        }
        uint64_t v46 = *(_DWORD *)(v47 + 88 * v46 + 8) & 0x7FFFFFFF;
        if (v46 == 0x7FFFFFFF) {
          goto LABEL_65;
        }
      }
      uint64_t v54 = v97[6] + 32;
      unint64_t v55 = re::Hash<re::DynamicString>::operator()((uint64_t)buf, v54);
      if (*v45)
      {
        uint64_t v56 = *(void *)(v29 + 32);
        uint64_t v57 = *(unsigned int *)(*(void *)(v29 + 24) + 4 * (v55 % *(unsigned int *)(v29 + 40)));
        int v26 = (os_unfair_lock_s *)(a2 + 64);
        a5 = v78;
        if (v57 == 0x7FFFFFFF)
        {
LABEL_74:
          uint64_t v57 = 0x7FFFFFFFLL;
        }
        else
        {
          while (!re::DynamicString::operator==(v56 + 88 * v57 + 16, v54))
          {
            uint64_t v57 = *(_DWORD *)(v56 + 88 * v57 + 8) & 0x7FFFFFFF;
            if (v57 == 0x7FFFFFFF) {
              goto LABEL_74;
            }
          }
        }
      }
      else
      {
        uint64_t v56 = *(void *)(v29 + 32);
        uint64_t v57 = 0x7FFFFFFFLL;
        int v26 = (os_unfair_lock_s *)(a2 + 64);
        a5 = v78;
      }
      uint64_t v72 = v97[6];
      uint64_t v73 = v56 + 88 * v57;
      unint64_t v76 = *(void *)(v73 + 64);
      int v75 = (uint64_t *)(v73 + 64);
      unint64_t v74 = v76;
      if (v76 >= *(v75 - 1))
      {
        re::DynamicArray<float *>::growCapacity((void *)(v56 + 88 * v57 + 48), v74 + 1);
        unint64_t v74 = *v75;
      }
      uint64_t v77 = v56 + 88 * v57;
      *(void *)(*(void *)(v77 + 80) + 8 * v74) = v72;
      uint64_t *v75 = v74 + 1;
      ++*(_DWORD *)(v77 + 72);
      a4 = v79;
      goto LABEL_89;
    }
  }
LABEL_65:
  uint64_t v48 = v97[6];
  *(void *)&__src[0] = v48;
  __dst = 0;
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  LODWORD(v9re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  re::DynamicArray<float *>::setCapacity(&v89, 1uLL);
  int v49 = v92 + 1;
  LODWORD(v9re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v92 + 1;
  if (v91)
  {
    if (v91 == -1)
    {
      v105[0] = 0;
      memset(buf, 0, 80);
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)block = 136315906;
      *(void *)&block[4] = "copy";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 643;
      *(_WORD *)&block[18] = 2048;
      *(void *)&block[20] = 0;
      *(_WORD *)&block[28] = 2048;
      *(void *)&block[30] = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(void *)__dst = v48;
  }
  else
  {
    re::DynamicArray<float *>::growCapacity(&v89, 1uLL);
    uint64_t v50 = v91;
    long long v51 = (char *)__dst;
    uint64_t v52 = (char *)__src + 8 * v91;
    if (v91)
    {
      memcpy(__dst, __src, 8 * v91);
      size_t v53 = 8 - 8 * v50;
    }
    else
    {
      size_t v53 = 8;
    }
    memcpy(&v51[8 * v50], v52, v53);
    uint64_t v91 = 1;
    int v49 = (int)v92;
  }
  uint64_t v58 = (re::DynamicString *)(v48 + 32);
  LODWORD(v9re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v49 + 1;
  unint64_t v59 = re::Hash<re::DynamicString>::operator()((uint64_t)buf, v48 + 32);
  unint64_t v60 = v59;
  if (*v45)
  {
    unint64_t v61 = v59 % *(unsigned int *)(v29 + 40);
    uint64_t v62 = *(unsigned int *)(*(void *)(v29 + 24) + 4 * v61);
    if (v62 != 0x7FFFFFFF)
    {
      uint64_t v63 = *(void *)(v29 + 32);
      while (!re::DynamicString::operator==(v63 + 88 * v62 + 16, (uint64_t)v58))
      {
        uint64_t v62 = *(_DWORD *)(v63 + 88 * v62 + 8) & 0x7FFFFFFF;
        if (v62 == 0x7FFFFFFF) {
          goto LABEL_84;
        }
      }
      goto LABEL_85;
    }
  }
  else
  {
    LODWORD(v61) = 0;
  }
LABEL_84:
  re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(v29 + 16, v61, v60, v58, (uint64_t)&v89);
  ++*(_DWORD *)(v29 + 56);
LABEL_85:
  if (v89 && __dst) {
    (*(void (**)(void))(*v89 + 40))();
  }
  a5 = v78;
  a4 = v79;
  int v26 = (os_unfair_lock_s *)(a2 + 64);
LABEL_89:
  if (BYTE8(v80)) {
    unint64_t v64 = v81;
  }
  else {
    unint64_t v64 = (unint64_t)&v80 | 9;
  }
  uint64_t v65 = [NSString stringWithUTF8String:v64];
  *(void *)long long buf = MEMORY[0x263EF8330];
  *(void *)&uint8_t buf[8] = 3221225472;
  *(void *)&uint8_t buf[16] = ___ZZN2re20ResourceFetchManager13fetchResourceEPKcRKNS_9AssetPathENS_8FunctionIFvNS_6ResultINS_21SharedResourcePayloadENS_12WrappedErrorEEEEEEENK3__0clERNS0_14SharedXPCStateE_block_invoke;
  *(void *)&unsigned char buf[24] = &unk_264BE23A8;
  *(void *)&uint8_t buf[32] = v65;
  *(void *)&unsigned char buf[40] = &v96;
  *(void *)&uint8_t buf[48] = a2;
  id v66 = v65;
  re::xpc::Connection::remoteObjectProxyWithErrorHandler((id *)v29, (uint64_t)buf, &v89);
  long long v67 = v89;

  uint64_t v89 = (uint64_t *)MEMORY[0x263EF8330];
  uint64_t v90 = 3221225472;
  uint64_t v91 = (uint64_t)___ZZN2re20ResourceFetchManager13fetchResourceEPKcRKNS_9AssetPathENS_8FunctionIFvNS_6ResultINS_21SharedResourcePayloadENS_12WrappedErrorEEEEEEENK3__0clERNS0_14SharedXPCStateE_block_invoke_186;
  __int16 v92 = &unk_264BE23D0;
  __dst = &v96;
  uint64_t v94 = a2;
  [v67 fetchResourceAtAssetPath:v66 withReply:&v89];

LABEL_93:
  uint64_t v68 = (unsigned int *)v97[6];
  if (v68) {
    goto LABEL_103;
  }
  uint64_t v69 = re::resourceSharingLogObjects(v27)[1];
  if (os_log_type_enabled(v69, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)block = 134217984;
    *(void *)&block[4] = v86;
    _os_log_fault_impl(&dword_233120000, v69, OS_LOG_TYPE_FAULT, "No resource fetch connection exists for peer '%llu'", block, 0xCu);
  }
  re::DynamicString::DynamicString((re::DynamicString *)__src, (const re::DynamicString *)&v80);
  v105[3] = *(void *)(a4 + 24);
  v105[4] = 0;
  re::FunctionBase<24ul,void ()(re::Result<re::SharedResourcePayload,re::WrappedError>)>::operator=<24ul>((uint64_t)v105, a4);
  re::ResourceFetchManager::Request::create(&v88, a2, 0, (re::DynamicString *)__src, (uint64_t)v105);
  re::FunctionBase<24ul,void ()(re::Result<re::SharedResourcePayload,re::WrappedError>)>::destroyCallable((uint64_t)v105);
  if (*(void *)&__src[0])
  {
    if (BYTE8(__src[0])) {
      (*(void (**)(void))(**(void **)&__src[0] + 40))();
    }
    memset(__src, 0, sizeof(__src));
  }
  uint64_t v70 = (unsigned int *)v88;
  *(unsigned char *)(v88 + 104) = 1;
  unint64_t v71 = *(id *)(a2 + 48);
  *(void *)block = MEMORY[0x263EF8330];
  *(void *)&block[8] = 3321888768;
  *(void *)&block[16] = ___ZZN2re20ResourceFetchManager13fetchResourceEPKcRKNS_9AssetPathENS_8FunctionIFvNS_6ResultINS_21SharedResourcePayloadENS_12WrappedErrorEEEEEEENK3__0clERNS0_14SharedXPCStateE_block_invoke_188;
  *(void *)&block[24] = &__block_descriptor_48_a8_40c55_ZTSN2re9SharedPtrINS_20ResourceFetchManager7RequestEEE_e5_v8__0l;
  *(void *)&block[32] = &v86;
  *(void *)uint64_t v104 = v70;
  re::details::retain<re::ResourceFetchManager::Request>(v70);
  dispatch_async(v71, block);

  if (*(void *)v104)
  {
    re::details::release<re::ResourceRequest>(*(atomic_uint **)v104);
    *(void *)uint64_t v104 = 0;
  }
  re::details::release<re::ResourceRequest>((atomic_uint *)v70);
  uint64_t v68 = (unsigned int *)v97[6];
  if (v68) {
LABEL_103:
  }
    re::details::retain<re::ResourceFetchManager::Request>(v68);
  _Block_object_dispose(&v96, 8);
  if (*(void *)v102) {
    re::details::release<re::ResourceRequest>(*(atomic_uint **)v102);
  }
  os_unfair_lock_unlock(v26);
  *a5 = v68;
  if (void)v80 && (BYTE8(v80)) {
    (*(void (**)(void))(*(void *)v80 + 40))();
  }
}

void re::ResourceFetchManager::setRequestOptions(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v6 = (os_unfair_lock_s *)(a1 + 64);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  if (*(void *)(a2 + 16))
  {
    if (*(unsigned char *)(a2 + 104))
    {
      id v8 = re::resourceSharingLogObjects(v7)[1];
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        if (*(unsigned char *)(a2 + 40)) {
          uint64_t v9 = *(void *)(a2 + 48);
        }
        else {
          uint64_t v9 = a2 + 41;
        }
        int v26 = 136315138;
        uint64_t v27 = v9;
        long long v23 = "Resource request for '%s' is cancelled, ignoring set-options request";
        long long v24 = v8;
        uint32_t v25 = 12;
LABEL_23:
        _os_log_debug_impl(&dword_233120000, v24, OS_LOG_TYPE_DEBUG, v23, (uint8_t *)&v26, v25);
      }
    }
    else
    {
      uint64_t v13 = *(void *)(a1 + 88);
      if (v13)
      {
        uint64_t v7 = *(re **)(a1 + 104);
        uint64_t v14 = v13 << 6;
        while (*((void *)v7 + 1) != *(void *)(a2 + 24))
        {
          uint64_t v7 = (re *)((char *)v7 + 64);
          v14 -= 64;
          if (!v14) {
            goto LABEL_13;
          }
        }
        uint64_t v17 = re::ResourceFetchManager::Connection::remoteObjectProxy((id *)v7);
        uint64_t v18 = *a3;
        id v19 = NSString;
        if (*(unsigned char *)(a2 + 40)) {
          uint64_t v20 = *(void *)(a2 + 48);
        }
        else {
          uint64_t v20 = a2 + 41;
        }
        id v21 = v18;
        uint64_t v22 = [v19 stringWithUTF8String:v20];
        [v17 setSubscriptionOptions:v21 forResourceAtAssetPath:v22];
      }
      else
      {
LABEL_13:
        int v15 = re::resourceSharingLogObjects(v7)[1];
        if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
        {
          uint64_t v16 = *(void *)(a2 + 24);
          int v26 = 138412290;
          uint64_t v27 = v16;
          _os_log_fault_impl(&dword_233120000, v15, OS_LOG_TYPE_FAULT, "No resource fetch connection exists for client %@", (uint8_t *)&v26, 0xCu);
        }
      }
    }
  }
  else
  {
    uint64_t v10 = re::resourceSharingLogObjects(v7)[1];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = *(void *)(a2 + 24);
      if (*(unsigned char *)(a2 + 40)) {
        uint64_t v12 = *(void *)(a2 + 48);
      }
      else {
        uint64_t v12 = a2 + 41;
      }
      int v26 = 138412546;
      uint64_t v27 = v11;
      __int16 v28 = 2080;
      uint64_t v29 = v12;
      long long v23 = "Resource connection %@ is closed, ignoring set-options request for '%s'";
      long long v24 = v10;
      uint32_t v25 = 22;
      goto LABEL_23;
    }
  }
  os_unfair_lock_unlock(v6);
}

void re::ResourceFetchManager::cancelRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 64);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  if (*(void *)(a2 + 16))
  {
    if (!*(unsigned char *)(a2 + 104))
    {
      *(unsigned char *)(a2 + 104) = 1;
      uint64_t v11 = *(void *)(a1 + 88);
      if (v11)
      {
        uint64_t v12 = *(void *)(a1 + 104) + 16;
        uint64_t v13 = v11 << 6;
        while (*(void *)(v12 - 8) != *(void *)(a2 + 24))
        {
          v12 += 64;
          v13 -= 64;
          if (!v13) {
            goto LABEL_13;
          }
        }
        uint64_t v17 = a2 + 32;
        uint64_t v18 = re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(v12, a2 + 32);
        if (v18)
        {
          uint64_t v19 = v18;
          uint64_t v20 = *(void **)(v18 + 32);
          unint64_t v21 = *(void *)(v18 + 16);
          uint64_t v22 = v20;
          if (v21)
          {
            uint64_t v23 = 8 * v21;
            uint64_t v22 = *(void **)(v18 + 32);
            while (*v22 != a2)
            {
              ++v22;
              v23 -= 8;
              if (!v23)
              {
                uint64_t v22 = &v20[v21];
                break;
              }
            }
          }
          unint64_t v24 = v22 - v20;
          if (v24 == v21)
          {
            uint32_t v25 = re::resourceSharingLogObjects((re *)v18)[1];
            if (os_log_type_enabled(v25, OS_LOG_TYPE_FAULT))
            {
              if (*(unsigned char *)(a2 + 40)) {
                uint64_t v34 = *(void *)(a2 + 48);
              }
              else {
                uint64_t v34 = a2 + 41;
              }
              LODWORD(buf[0]) = 134218242;
              *(void *)((char *)buf + 4) = a2;
              WORD6(buf[0]) = 2080;
              *(void *)((char *)buf + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = v34;
              _os_log_fault_impl(&dword_233120000, v25, OS_LOG_TYPE_FAULT, "Request %p for '%s' is not registered with the resource fetch manager", (uint8_t *)buf, 0x16u);
            }
            unint64_t v26 = *(void *)(v19 + 16);
          }
          else
          {
            if (v21 <= v24)
            {
              memset(buf, 0, sizeof(buf));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            unint64_t v26 = v21 - 1;
            if (v21 - 1 > v24) {
              v20[v24] = v20[v21 - 1];
            }
            *(void *)(v18 + 16) = v26;
            ++*(_DWORD *)(v18 + 24);
          }
          if (!v26)
          {
            __int16 v28 = re::ResourceFetchManager::Connection::remoteObjectProxy((id *)(v12 - 16));
            if (*(unsigned char *)(a2 + 40)) {
              uint64_t v29 = *(void *)(a2 + 48);
            }
            else {
              uint64_t v29 = a2 + 41;
            }
            uint64_t v33 = [NSString stringWithUTF8String:v29];
            [v28 unsubscribeFromResourceAtAssetPath:v33];

            re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::remove(v12, v17);
          }
          goto LABEL_42;
        }
        uint64_t v14 = re::resourceSharingLogObjects(0)[1];
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_FAULT)) {
          goto LABEL_42;
        }
        if (*(unsigned char *)(a2 + 40)) {
          uint64_t v27 = *(void *)(a2 + 48);
        }
        else {
          uint64_t v27 = a2 + 41;
        }
        LODWORD(buf[0]) = 136315138;
        *(void *)((char *)buf + 4) = v27;
        uint64_t v16 = "No request for '%s' is registered with the resource fetch manager";
      }
      else
      {
LABEL_13:
        uint64_t v14 = re::resourceSharingLogObjects(v5)[1];
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_FAULT)) {
          goto LABEL_42;
        }
        uint64_t v15 = *(void *)(a2 + 24);
        LODWORD(buf[0]) = 138412290;
        *(void *)((char *)buf + 4) = v15;
        uint64_t v16 = "No resource fetch connection exists for client %@";
      }
      _os_log_fault_impl(&dword_233120000, v14, OS_LOG_TYPE_FAULT, v16, (uint8_t *)buf, 0xCu);
      goto LABEL_42;
    }
    uint64_t v6 = re::resourceSharingLogObjects(v5)[1];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      if (*(unsigned char *)(a2 + 40)) {
        uint64_t v7 = *(void *)(a2 + 48);
      }
      else {
        uint64_t v7 = a2 + 41;
      }
      LODWORD(buf[0]) = 136315138;
      *(void *)((char *)buf + 4) = v7;
      uint64_t v30 = "Resource request for '%s' was already cancelled";
      uint64_t v31 = v6;
      uint32_t v32 = 12;
LABEL_39:
      _os_log_debug_impl(&dword_233120000, v31, OS_LOG_TYPE_DEBUG, v30, (uint8_t *)buf, v32);
    }
  }
  else
  {
    id v8 = re::resourceSharingLogObjects(v5)[1];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *(void *)(a2 + 24);
      if (*(unsigned char *)(a2 + 40)) {
        uint64_t v10 = *(void *)(a2 + 48);
      }
      else {
        uint64_t v10 = a2 + 41;
      }
      LODWORD(buf[0]) = 138412546;
      *(void *)((char *)buf + 4) = v9;
      WORD6(buf[0]) = 2080;
      *(void *)((char *)buf + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = v10;
      uint64_t v30 = "Resource connection %@ is closed, ignoring cancellation of request for '%s'";
      uint64_t v31 = v8;
      uint32_t v32 = 22;
      goto LABEL_39;
    }
  }
LABEL_42:
  os_unfair_lock_unlock(v4);
}

void re::ResourceFetchManager::executeWithMostRecentTransportVoucher(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 192);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 192));
  id v8 = *(id *)(a1 + 200);
  os_unfair_lock_unlock(v4);
  if (v8)
  {
    id v5 = v8;
    id v6 = (id)voucher_adopt();

    (*(void (**)(void))(**(void **)(a2 + 32) + 16))(*(void *)(a2 + 32));
    id v7 = v6;
  }
  else
  {
    (*(void (**)(void))(**(void **)(a2 + 32) + 16))(*(void *)(a2 + 32));
  }
}

void re::ResourceFetchManager::executeWithMostRecentTransportVoucherForPeerID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (os_unfair_lock_s *)(a1 + 64);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  uint64_t v7 = *(void *)(a1 + 88);
  if (!v7)
  {
LABEL_6:
    os_unfair_lock_unlock(v6);
LABEL_7:
    (*(void (**)(void))(**(void **)(a3 + 32) + 16))(*(void *)(a3 + 32));
    uint64_t v10 = 0;
    goto LABEL_8;
  }
  id v8 = (id *)(*(void *)(a1 + 104) + 8);
  uint64_t v9 = v7 << 6;
  while (!*v8 || [*v8 peerID] != a2)
  {
    v8 += 8;
    v9 -= 64;
    if (!v9) {
      goto LABEL_6;
    }
  }
  id v11 = [*v8 voucher];

  os_unfair_lock_unlock(v6);
  if (!v11) {
    goto LABEL_7;
  }
  id v14 = v11;
  id v12 = (id)voucher_adopt();

  (*(void (**)(void))(**(void **)(a3 + 32) + 16))(*(void *)(a3 + 32));
  id v13 = v12;

  uint64_t v10 = v14;
LABEL_8:
}

void re::ResourceFetchManager::setPushLoadHandler(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 256);
  if (v3 != *a2)
  {
    if (v2)
    {
      id v5 = (id)(v2 + 8);
      uint64_t v3 = *(void *)(a1 + 256);
    }
    if (v3) {

    }
    *(void *)(a1 + 256) = v2;
  }
}

void re::ResourceFetchManager::reportLoadState(os_unfair_lock_s *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v12 = this + 16;
  os_unfair_lock_lock(this + 16);
  uint64_t v13 = *(void *)&this[22]._os_unfair_lock_opaque;
  if (v13)
  {
    uint64_t v14 = *(void *)&this[26]._os_unfair_lock_opaque;
    uint64_t v15 = v13 << 6;
    while (1)
    {
      uint64_t v16 = *(void **)(v14 + 8);
      if (v16)
      {
        if ([v16 peerID] == a3) {
          break;
        }
      }
      v14 += 64;
      v15 -= 64;
      if (!v15) {
        goto LABEL_6;
      }
    }
    uint64_t v19 = re::ResourceFetchManager::Connection::remoteObjectProxy((id *)v14);
    [v19 reportLoadState:a4 forAssetId:a2 assetSize:a5 errorCode:a6];

    os_unfair_lock_unlock(v12);
  }
  else
  {
LABEL_6:
    os_unfair_lock_unlock(v12);
    uint64_t v18 = re::resourceSharingLogObjects(v17)[1];
    if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
    {
      int v20 = 134218240;
      uint64_t v21 = a3;
      __int16 v22 = 2048;
      uint64_t v23 = a2;
      _os_log_fault_impl(&dword_233120000, v18, OS_LOG_TYPE_FAULT, "No resource fetch connection exists for peer '%llu'. Cannot report load state for asset '%llu'.", (uint8_t *)&v20, 0x16u);
    }
  }
}

void ___ZN2re20ResourceFetchManager13addConnectionENS_3xpc10ConnectionE_block_invoke(id *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = re::resourceSharingLogObjects((re *)a1)[1];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = a1[4];
    *(_DWORD *)long long buf = 138412290;
    id v9 = v3;
    _os_log_impl(&dword_233120000, v2, OS_LOG_TYPE_DEFAULT, "Resource connection with client %@ was interrupted", buf, 0xCu);
  }
  uint64_t v4 = [a1[4] resourceFetchManager];
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = a1[4];
    id v7 = v6;
    re::ResourceFetchManager::connectionInterruptedOrInvalidated(v5, &v7);
  }
}

void re::ResourceFetchManager::connectionInterruptedOrInvalidated(uint64_t a1, id *a2)
{
  uint64_t v114 = *MEMORY[0x263EF8340];
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  uint64_t v4 = *(void *)(a1 + 272);
  uint64_t v5 = *(void *)(v4 + 120);
  if (v5)
  {
    uint64_t v6 = 48 * v5;
    id v7 = (uint64_t *)(*(void *)(v4 + 136) + 40);
    do
    {
      id v8 = *a2;
      int v9 = [v8 pid];
      id v10 = *a2;
      id v11 = v10;
      if (v10) {
        [v10 auditToken];
      }
      else {
        memset(v99, 0, sizeof(v99));
      }
      id v12 = *a2;
      uint64_t v13 = [v12 peerID];
      int v101 = v9;
      *(void *)long long buf = v13;
      uint64_t v14 = *v7;
      v7 += 6;
      (*(void (**)(uint64_t, int *, _OWORD *, uint8_t *))(*(void *)v14 + 16))(v14, &v101, v99, buf);

      v6 -= 48;
    }
    while (v6);
  }
  uint64_t v15 = (os_unfair_lock_s *)(a1 + 64);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  uint64_t v17 = *(void *)(a1 + 88);
  if (!v17)
  {
LABEL_11:
    __int16 v22 = re::resourceSharingLogObjects(v16)[1];
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      id v23 = *a2;
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v23;
      id v24 = v23;
      uint32_t v25 = v22;
      _os_log_debug_impl(&dword_233120000, v25, OS_LOG_TYPE_DEBUG, "Resource fetch connection with client %@ interrupted/invalidated: not found in connection list", buf, 0xCu);
    }
    goto LABEL_72;
  }
  unint64_t v18 = 0;
  uint64_t v19 = *(void *)(a1 + 104);
  uint64_t v20 = 32;
  while (1)
  {
    uint64_t v21 = v19 + v20;
    if (*(id *)(v19 + v20 - 24) == *a2) {
      break;
    }
    ++v18;
    v20 += 64;
    if (v17 == v18) {
      goto LABEL_11;
    }
  }
  uint64_t v26 = v21 - 16;
  uint64_t v27 = *(unsigned int *)(v21 + 16);
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = (int *)(*(void *)(v19 + v20) + 8);
    while (1)
    {
      int v30 = *v29;
      v29 += 22;
      if (v30 < 0) {
        break;
      }
      if (v27 == ++v28)
      {
        LODWORD(v2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v27;
        break;
      }
    }
  }
  else
  {
    LODWORD(v2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  }
  if (v27 != v28)
  {
    uint64_t v31 = v28;
    do
    {
      uint64_t v32 = *(void *)(v19 + v20) + 88 * v31;
      uint64_t v33 = *(void *)(v32 + 64);
      if (v33)
      {
        uint64_t v34 = *(uint64_t **)(v32 + 80);
        uint64_t v35 = 8 * v33;
        do
        {
          uint64_t v36 = *v34++;
          *(void *)(v36 + 16) = 0;
          v35 -= 8;
        }
        while (v35);
      }
      if (v27 <= (int)v28 + 1) {
        int v37 = v28 + 1;
      }
      else {
        int v37 = v27;
      }
      while (1)
      {
        uint64_t v31 = (v28 + 1);
        if (v37 - 1 == v28) {
          break;
        }
        LODWORD(v2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v28 + 1;
        int v38 = v31;
        if ((*(_DWORD *)(*(void *)(v19 + v20) + 88 * v31 + 8) & 0x80000000) != 0) {
          goto LABEL_31;
        }
      }
      int v38 = v37;
LABEL_31:
      LODWORD(v2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v38;
    }
    while (v27 != v38);
  }
  re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(v26);
  uint64_t v39 = *(void *)(a1 + 264);
  if (v39)
  {
    uint64_t v40 = re::directMeshConnectionId(a2);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v39 + 40))(v39, v40);
  }
  uint64_t v41 = *(void *)(a1 + 256);
  if (v41)
  {
    id v42 = (id)(v41 + 8);
    id v43 = *a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v41 + 48))(v41, [v43 peerID]);
  }
  unint64_t v44 = (re::PeerIDValidator *)[*a2 peerID];
  __int16 v45 = re::PeerIDValidator::instance(v44);
  re::PeerIDValidator::remove_impl((re::PeerIDValidator *)v45, (unint64_t)v44);
  unint64_t v46 = *(void *)(a1 + 88);
  if (v46 <= v18)
  {
    uint64_t v100 = 0;
    long long v112 = 0u;
    long long v113 = 0u;
    long long v110 = 0u;
    long long v111 = 0u;
    *(_OWORD *)long long buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v101 = 136315906;
    unsigned int v102 = "operator[]";
    __int16 v103 = 1024;
    int v104 = 789;
    __int16 v105 = 2048;
    unint64_t v106 = v18;
    __int16 v107 = 2048;
    unint64_t v108 = v46;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_76;
  }
  [*(id *)(*(void *)(a1 + 104) + v20 - 32) invalidate];
  unint64_t v46 = *(void *)(a1 + 88);
  if (v46 <= v18)
  {
LABEL_76:
    uint64_t v100 = 0;
    long long v112 = 0u;
    long long v113 = 0u;
    long long v110 = 0u;
    long long v111 = 0u;
    *(_OWORD *)long long buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v101 = 136315906;
    unsigned int v102 = "operator[]";
    __int16 v103 = 1024;
    int v104 = 789;
    __int16 v105 = 2048;
    unint64_t v106 = v18;
    __int16 v107 = 2048;
    unint64_t v108 = v46;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_77:
    uint64_t v100 = 0;
    long long v112 = 0u;
    long long v113 = 0u;
    long long v110 = 0u;
    long long v111 = 0u;
    *(_OWORD *)long long buf = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v101 = 136315906;
    unsigned int v102 = "removeAt";
    __int16 v103 = 1024;
    int v104 = 931;
    __int16 v105 = 2048;
    unint64_t v106 = v18;
    __int16 v107 = 2048;
    unint64_t v108 = v46;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  [*(id *)(*(void *)(a1 + 104) + v20 - 24) invalidate];
  unint64_t v46 = *(void *)(a1 + 88);
  if (v46 <= v18) {
    goto LABEL_77;
  }
  if (v46 - 1 > v18)
  {
    uint64_t v96 = v41;
    uint64_t v47 = *(void *)(a1 + 104);
    uint64_t v48 = v47 + (v46 << 6);
    uint64_t v49 = v47 + v20;
    uint64_t v50 = v20 - (v46 << 6);
    if (v50 != -32)
    {
      uint64_t v51 = *(void *)(v48 - 64);
      *(void *)(v48 - 64) = 0;
      uint64_t v52 = *(void **)(v49 - 32);
      *(void *)(v49 - 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v51;
    }
    uint64_t v53 = *(void *)(v48 - 56);
    *(void *)(v48 - 56) = 0;
    uint64_t v54 = *(void **)(v49 - 24);
    *(void *)(v49 - 24) = v53;

    if (v50 != -32)
    {
      unint64_t v55 = (uint64_t *)(v48 - 48);
      uint64_t v58 = *(void *)(v49 - 16);
      uint64_t v57 = (uint64_t *)(v49 - 16);
      uint64_t v56 = v58;
      if (!v58 || (uint64_t v59 = *v55, v56 == *v55))
      {
        re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap(v57, v55);
      }
      else
      {
        re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)v57);
        if (v59)
        {
          uint64_t v95 = v47 + v20;
          unsigned int v60 = *(_DWORD *)(v48 - 20);
          if (*(_DWORD *)(v47 + v20 + 8) < v60) {
            re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity((uint64_t)v57, v60);
          }
          uint64_t v91 = (uint64_t)v57;
          unint64_t v61 = *(unsigned int *)(v48 - 16);
          if (v61)
          {
            uint64_t v62 = 0;
            unint64_t v63 = 0;
            unint64_t v64 = (_DWORD *)(v47 + v20);
            uint64_t v94 = (_DWORD *)(v47 + v20);
            uint64_t v92 = v48;
            uint64_t v93 = v47;
            do
            {
              uint64_t v65 = (unint64_t *)(*(void *)(v48 - 32) + v62);
              if ((v65[1] & 0x80000000) != 0)
              {
                uint64_t v97 = *(void *)(v48 - 32);
                unint64_t v66 = *v65;
                unint64_t v67 = *(unsigned int *)(v95 + 8);
                unint64_t v68 = *v65 % v67;
                unsigned int v69 = v64[5];
                if (v69 == 0x7FFFFFFF)
                {
                  unsigned int v69 = v64[4];
                  unsigned int v70 = v69;
                  if (v69 == v67)
                  {
                    re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(v91, 2 * v64[3]);
                    unint64_t v64 = v94;
                    unint64_t v68 = v66 % *(unsigned int *)(v95 + 8);
                    unsigned int v70 = v94[4];
                  }
                  v64[4] = v70 + 1;
                  uint64_t v71 = *(void *)(v47 + v20);
                  int v72 = *(_DWORD *)(v71 + 88 * v69 + 8);
                }
                else
                {
                  uint64_t v71 = *(void *)(v47 + v20);
                  int v72 = *(_DWORD *)(v71 + 88 * v69 + 8);
                  v64[5] = v72 & 0x7FFFFFFF;
                }
                *(_DWORD *)(v71 + 88 * v69 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v72 | 0x80000000;
                unint64_t v98 = v68;
                uint64_t v73 = *(void *)(v47 + v20) + 88 * v69;
                *(_DWORD *)(v73 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(v73 + 8) & 0x80000000 | *(_DWORD *)(*((void *)v64 - 1) + 4 * v68);
                *(void *)(*(void *)(v47 + v20) + 88 * v69) = v66;
                re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(v47 + v20) + 88 * v69 + 16), (const re::DynamicString *)(v65 + 2));
                uint64_t v74 = *(void *)(v47 + v20);
                uint64_t v75 = v74 + 88 * v69;
                *(void *)(v75 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
                uint64_t v76 = v75 + 48;
                *(void *)(v76 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
                uint64_t v77 = (void **)(v76 + 32);
                *(void *)(v76 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
                *(void *)(v76 + 16) = 0;
                *(_DWORD *)(v76 + 24) = 0;
                unint64_t v78 = v65[6];
                if (v78)
                {
                  uint64_t v79 = v74 + 88 * v69;
                  unint64_t v80 = *(void *)(v97 + v62 + 64);
                  *(void *)uint64_t v76 = v78;
                  re::DynamicArray<float *>::setCapacity((void *)v76, v80);
                  unint64_t v82 = *(void *)(v79 + 64);
                  long long v81 = (unint64_t *)(v79 + 64);
                  ++*((_DWORD *)v81 + 2);
                  unint64_t v83 = *(void *)(v97 + v62 + 64);
                  if (v83 >= v82)
                  {
                    re::DynamicArray<float *>::setCapacity((void *)v76, v83);
                    unint64_t v84 = *v81;
                    if (*v81)
                    {
                      memmove(*v77, *(const void **)(v97 + v62 + 80), 8 * v84);
                      unint64_t v84 = *v81;
                    }
                    memcpy((char *)*v77 + 8 * v84, (const void *)(*(void *)(v97 + v62 + 80) + 8 * v84), 8 * v83 - 8 * v84);
                  }
                  else if (v83)
                  {
                    memmove(*v77, *(const void **)(v97 + v62 + 80), 8 * v83);
                  }
                  *long long v81 = v83;
                }
                uint64_t v15 = (os_unfair_lock_s *)(a1 + 64);
                unint64_t v64 = v94;
                *(_DWORD *)(*((void *)v94 - 1) + 4 * v9re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v69;
                ++v94[3];
                uint64_t v48 = v92;
                uint64_t v47 = v93;
                unint64_t v61 = *(unsigned int *)(v92 - 16);
              }
              ++v63;
              v62 += 88;
            }
            while (v63 < v61);
          }
          ++*(_DWORD *)(v47 + v20 + 24);
        }
      }
    }
    unint64_t v46 = *(void *)(a1 + 88);
    uint64_t v41 = v96;
  }
  unint64_t v85 = *(void *)(a1 + 104) + (v46 << 6);
  re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v85 - 48));

  --*(void *)(a1 + 88);
  ++*(_DWORD *)(a1 + 96);
  long long v87 = re::resourceSharingLogObjects(v86)[1];
  if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
  {
    id v88 = *a2;
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v88;
    id v89 = v88;
    uint64_t v90 = v87;
    _os_log_debug_impl(&dword_233120000, v90, OS_LOG_TYPE_DEBUG, "Resource fetch connection with client %@ interrupted/invalidated: removed from connection list", buf, 0xCu);

    if (!v41) {
      goto LABEL_72;
    }
    goto LABEL_71;
  }
  if (v41) {
LABEL_71:
  }

LABEL_72:
  os_unfair_lock_unlock(v15);
}

void ___ZN2re20ResourceFetchManager13addConnectionENS_3xpc10ConnectionE_block_invoke_66(id *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = re::resourceSharingLogObjects((re *)a1)[1];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = a1[4];
    *(_DWORD *)long long buf = 138412290;
    id v9 = v3;
    _os_log_impl(&dword_233120000, v2, OS_LOG_TYPE_DEFAULT, "Resource connection with client %@ was invalidated", buf, 0xCu);
  }
  uint64_t v4 = [a1[4] resourceFetchManager];
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = a1[4];
    id v7 = v6;
    re::ResourceFetchManager::connectionInterruptedOrInvalidated(v5, &v7);
  }
}

void re::ResourceFetchManager::connectedPeers(os_unfair_lock_s *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v4 = this + 16;
  *(_DWORD *)(a2 + 24) = 0;
  os_unfair_lock_lock(this + 16);
  unint64_t v5 = *(void *)&this[22]._os_unfair_lock_opaque;
  if (v5)
  {
    re::DynamicArray<float *>::setCapacity((void *)a2, v5);
    uint64_t v6 = *(void *)&this[22]._os_unfair_lock_opaque;
    if (v6)
    {
      uint64_t v7 = *(void *)&this[26]._os_unfair_lock_opaque;
      uint64_t v8 = v6 << 6;
      id v9 = (id *)(v7 + 8);
      do
      {
        if (*v9 && [*v9 peerID])
        {
          uint64_t v10 = [*v9 peerID];
          re::DynamicArray<re::TransitionCondition *>::add((void *)a2, &v10);
        }
        v9 += 8;
        v8 -= 64;
      }
      while (v8);
    }
  }
  os_unfair_lock_unlock(v4);
}

void re::ResourceFetchManager::assetPathsFetchedFromPeerId(os_unfair_lock_s *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  uint64_t v6 = this + 16;
  *(_DWORD *)(a3 + 24) = 0;
  os_unfair_lock_lock(this + 16);
  uint64_t v7 = *(void *)&this[22]._os_unfair_lock_opaque;
  if (v7)
  {
    uint64_t v8 = *(void *)&this[26]._os_unfair_lock_opaque;
    uint64_t v9 = v8 + (v7 << 6);
    do
    {
      uint64_t v10 = *(void **)(v8 + 8);
      if (v10 && [v10 peerID] && objc_msgSend(*(id *)(v8 + 8), "peerID") == a2)
      {
        unint64_t v11 = *(unsigned int *)(v8 + 44);
        if (*(void *)(a3 + 8) < v11) {
          re::DynamicArray<re::DynamicString>::setCapacity((void *)a3, v11);
        }
        uint64_t v12 = *(unsigned int *)(v8 + 48);
        if (v12)
        {
          uint64_t v13 = 0;
          uint64_t v14 = (int *)(*(void *)(v8 + 32) + 8);
          while (1)
          {
            int v15 = *v14;
            v14 += 22;
            if (v15 < 0) {
              break;
            }
            if (v12 == ++v13)
            {
              LODWORD(v13) = *(_DWORD *)(v8 + 48);
              break;
            }
          }
        }
        else
        {
          LODWORD(v13) = 0;
        }
        if (v12 != v13)
        {
          uint64_t v16 = v13;
          do
          {
            re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)a3, (re::DynamicString *)(*(void *)(v8 + 32) + 88 * v16 + 16));
            if (*(_DWORD *)(v8 + 48) <= (v13 + 1)) {
              int v17 = v13 + 1;
            }
            else {
              int v17 = *(_DWORD *)(v8 + 48);
            }
            int v18 = v13;
            while (1)
            {
              uint64_t v16 = (v18 + 1);
              if (v17 - 1 == v18) {
                break;
              }
              ++v18;
              LODWORD(v13) = v16;
              if ((*(_DWORD *)(*(void *)(v8 + 32) + 88 * v16 + 8) & 0x80000000) != 0) {
                goto LABEL_24;
              }
            }
            LODWORD(v13) = v17;
LABEL_24:
            ;
          }
          while (v12 != v13);
        }
      }
      v8 += 64;
    }
    while (v8 != v9);
  }
  os_unfair_lock_unlock(v6);
}

uint64_t re::ResourceFetchManager::taskIdentifierPortForPeerID(os_unfair_lock_s *this, uint64_t a2)
{
  uint64_t v4 = this + 16;
  os_unfair_lock_lock(this + 16);
  uint64_t v5 = *(void *)&this[22]._os_unfair_lock_opaque;
  if (v5)
  {
    uint64_t v6 = *(void *)&this[26]._os_unfair_lock_opaque;
    uint64_t v7 = v5 << 6;
    uint64_t v8 = (id *)(v6 + 8);
    while (!*v8 || ![*v8 peerID] || objc_msgSend(*v8, "peerID") != a2)
    {
      v8 += 8;
      v7 -= 64;
      if (!v7) {
        goto LABEL_7;
      }
    }
    unint64_t v11 = [*v8 clientPorts];
    uint64_t v12 = v11;
    if (v11) {
      uint64_t v9 = [v11 taskIdentifierToken];
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
LABEL_7:
    uint64_t v9 = 0;
  }
  os_unfair_lock_unlock(v4);
  return v9;
}

void re::ResourceFetchManager::resourcePayloadDidUpdate(uint64_t a1, id *a2, const re::DynamicString *a3, id *a4)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  uint64_t v8 = *(void **)(a1 + 48);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3321888768;
  block[2] = ___ZN2re20ResourceFetchManager24resourcePayloadDidUpdateENS0_12ClientObjectENS_13DynamicStringENS_6ResultINS_21SharedResourcePayloadENS_12WrappedErrorEEE_block_invoke;
  block[3] = &__block_descriptor_96_a8_32c160_ZTSKZN2re20ResourceFetchManager24resourcePayloadDidUpdateENS0_12ClientObjectENS_13DynamicStringENS_6ResultINS_21SharedResourcePayloadENS_12WrappedErrorEEEE3__0_e5_v8__0l;
  uint64_t v10 = a1;
  uint64_t v9 = v8;
  id v11 = *a2;
  re::DynamicString::DynamicString((re::DynamicString *)v12, a3);
  char v13 = *(unsigned char *)a4;
  id v14 = a4[1];
  block[4] = v10;
  id v16 = v11;
  re::DynamicString::DynamicString((re::DynamicString *)v17, (const re::DynamicString *)v12);
  char v18 = v13;
  id v19 = v14;
  dispatch_async(v9, block);

  if (v12[0])
  {
    if (v12[1]) {
      (*(void (**)(void))(*(void *)v12[0] + 40))();
    }
    memset(v12, 0, sizeof(v12));
  }

  if (v17[0])
  {
    if (v17[1]) {
      (*(void (**)(void))(*(void *)v17[0] + 40))();
    }
    memset(v17, 0, sizeof(v17));
  }
}

void ___ZN2re20ResourceFetchManager24resourcePayloadDidUpdateENS0_12ClientObjectENS_13DynamicStringENS_6ResultINS_21SharedResourcePayloadENS_12WrappedErrorEEE_block_invoke(uint64_t a1)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(a1 + 80)) {
    [*(id *)(a1 + 88) setClientObject:*(void *)(a1 + 40)];
  }
  uint64_t v33 = 0;
  unint64_t v34 = 0;
  int v35 = 1;
  id v3 = (os_unfair_lock_s *)(v2 + 64);
  unint64_t v36 = 0;
  int v37 = 0;
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 64));
  uint64_t v5 = *(void *)(v2 + 88);
  if (!v5)
  {
LABEL_7:
    uint64_t v7 = re::resourceSharingLogObjects(v4)[1];
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_FAULT)) {
      goto LABEL_8;
    }
    int v30 = *(void **)(a1 + 40);
    *(_DWORD *)long long buf = 138412290;
    *(void *)uint64_t v39 = v30;
    uint64_t v31 = v7;
    id v32 = v30;
    _os_log_fault_impl(&dword_233120000, v31, OS_LOG_TYPE_FAULT, "No resource fetch connection exists for client %@", buf, 0xCu);
LABEL_58:

    goto LABEL_8;
  }
  uint64_t v4 = (re *)(*(void *)(v2 + 104) + 16);
  uint64_t v6 = v5 << 6;
  while (*((void *)v4 - 1) != *(void *)(a1 + 40))
  {
    uint64_t v4 = (re *)((char *)v4 + 64);
    v6 -= 64;
    if (!v6) {
      goto LABEL_7;
    }
  }
  id v14 = (_anonymous_namespace_ *)re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)v4, a1 + 48);
  if (!v14)
  {
    uint64_t v27 = re::resourceSharingLogObjects(0)[1];
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_8;
    }
    uint64_t v28 = *(void **)(a1 + 40);
    if (*(unsigned char *)(a1 + 56)) {
      uint64_t v29 = *(void *)(a1 + 64);
    }
    else {
      uint64_t v29 = a1 + 57;
    }
    *(_DWORD *)long long buf = 138412546;
    *(void *)uint64_t v39 = v28;
    *(_WORD *)&v39[8] = 2080;
    *(void *)&v39[10] = v29;
    uint64_t v31 = v27;
    id v32 = v28;
    _os_log_impl(&dword_233120000, v31, OS_LOG_TYPE_DEFAULT, "Resource connection %@ ignored a message: no requests for '%s' are registered", buf, 0x16u);
    goto LABEL_58;
  }
  uint64_t v15 = *((void *)v14 + 2);
  if (v15)
  {
    id v16 = (unsigned int **)*((void *)v14 + 4);
    for (uint64_t i = 8 * v15; i; i -= 8)
    {
      char v18 = *v16;
      if (*v16) {
        re::details::retain<re::ResourceFetchManager::Request>(*v16);
      }
      if (v33)
      {
        char v19 = v35;
        if ((v35 & 1) == 0)
        {
          unint64_t v20 = v34 + 1;
          if (v34 < v36 || v36 >= v20) {
            goto LABEL_48;
          }
          unint64_t v22 = 2 * v36;
          goto LABEL_44;
        }
        unint64_t v20 = v34 + 1;
        if (v34 + 1 >= 2)
        {
          unint64_t v22 = 2;
LABEL_44:
          if (v22 <= v20) {
            unint64_t v23 = v20;
          }
          else {
            unint64_t v23 = v22;
          }
          id v14 = (_anonymous_namespace_ *)re::DynamicOverflowArray<re::SharedPtr<re::ResourceFetchManager::Request>,1ul>::setCapacity((uint64_t *)&v33, v23);
          char v19 = v35;
        }
      }
      else
      {
        id v14 = (_anonymous_namespace_ *)re::DynamicOverflowArray<re::SharedPtr<re::ResourceFetchManager::Request>,1ul>::setCapacity((uint64_t *)&v33, v34 + 1);
        char v19 = v35 + 2;
        v35 += 2;
      }
LABEL_48:
      BOOL v24 = (v19 & 1) == 0;
      uint32_t v25 = v37;
      unint64_t v26 = v34;
      if (!v24) {
        uint32_t v25 = &v36;
      }
      v25[v34] = (unint64_t)v18;
      unint64_t v34 = v26 + 1;
      v35 += 2;
      ++v16;
    }
  }
LABEL_8:
  os_unfair_lock_unlock(v3);
  if (v35) {
    uint64_t v8 = (unsigned int **)&v36;
  }
  else {
    uint64_t v8 = (unsigned int **)v37;
  }
  if (v34)
  {
    uint64_t v9 = 8 * v34;
    do
    {
      uint64_t v10 = *v8;
      if (*v8) {
        re::details::retain<re::ResourceFetchManager::Request>(*v8);
      }
      buf[0] = *(unsigned char *)(a1 + 80);
      *(void *)&uint64_t v39[4] = *(id *)(a1 + 88);
      (*(void (**)(void, uint8_t *))(**((void **)v10 + 12) + 16))(*((void *)v10 + 12), buf);

      re::details::release<re::ResourceRequest>((atomic_uint *)v10);
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  if (v33)
  {
    char v11 = v35;
    if (v34)
    {
      if (v35) {
        uint64_t v12 = (atomic_uint **)&v36;
      }
      else {
        uint64_t v12 = (atomic_uint **)v37;
      }
      uint64_t v13 = 8 * v34;
      do
      {
        if (*v12)
        {
          re::details::release<re::ResourceRequest>(*v12);
          *uint64_t v12 = 0;
        }
        ++v12;
        v13 -= 8;
      }
      while (v13);
      char v11 = v35;
    }
    if ((v11 & 1) == 0) {
      (*(void (**)(uint64_t *, unint64_t *))(*v33 + 40))(v33, v37);
    }
  }
}

id __copy_helper_block_a8_32c160_ZTSKZN2re20ResourceFetchManager24resourcePayloadDidUpdateENS0_12ClientObjectENS_13DynamicStringENS_6ResultINS_21SharedResourcePayloadENS_12WrappedErrorEEEE3__0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 40);
  *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 48), (const re::DynamicString *)(a2 + 48));
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  id result = *(id *)(a2 + 88);
  *(void *)(a1 + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = result;
  return result;
}

void __destroy_helper_block_a8_32c160_ZTSKZN2re20ResourceFetchManager24resourcePayloadDidUpdateENS0_12ClientObjectENS_13DynamicStringENS_6ResultINS_21SharedResourcePayloadENS_12WrappedErrorEEEE3__0(uint64_t a1)
{
  re::DynamicString::deinit((re::DynamicString *)(a1 + 48));
  uint64_t v2 = *(void **)(a1 + 40);
}

void re::ResourceFetchManager::receiveFetchResponse(uint64_t a1, uint64_t a2)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  uint64_t v4 = *(id *)(a1 + 48);
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 3321888768;
  void v10[2] = ___ZN2re20ResourceFetchManager20receiveFetchResponseENS0_13FetchResponseE_block_invoke;
  uint64_t v10[3] = &__block_descriptor_64_a8_32c80_ZTSKZN2re20ResourceFetchManager20receiveFetchResponseENS0_13FetchResponseEE3__0_e5_v8__0l;
  uint64_t v5 = *(unsigned int **)a2;
  if (*(void *)a2) {
    re::details::retain<re::ResourceFetchManager::Request>(*(unsigned int **)a2);
  }
  id v6 = *(id *)(a2 + 8);
  id v7 = *(id *)(a2 + 16);
  v10[4] = a1;
  *(void *)char v11 = v5;
  if (v5) {
    re::details::retain<re::ResourceFetchManager::Request>(v5);
  }
  id v12 = v6;
  id v13 = v7;
  id v8 = v7;
  id v9 = v6;
  dispatch_async(v4, v10);

  if (v5) {
    re::details::release<re::ResourceRequest>((atomic_uint *)v5);
  }

  if (*(void *)v11) {
    re::details::release<re::ResourceRequest>(*(atomic_uint **)v11);
  }
}

void ___ZN2re20ResourceFetchManager20receiveFetchResponseENS0_13FetchResponseE_block_invoke(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void **)(a1 + 56);
  if (v4)
  {
    id v5 = v4;
    v20[0] = 0;
LABEL_5:
    id v21 = v5;
    (*(void (**)(void, char *))(**(void **)(v3 + 96) + 16))(*(void *)(v3 + 96), v20);
    id v7 = v21;
    goto LABEL_6;
  }
  id v6 = *(void **)(a1 + 48);
  if (v6)
  {
    [v6 setClientObject:*(void *)(v3 + 24)];
    id v5 = *(id *)(a1 + 48);
    v20[0] = 1;
    goto LABEL_5;
  }
  char v18 = re::resourceSharingLogObjects(0)[1];
  if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_fault_impl(&dword_233120000, v18, OS_LOG_TYPE_FAULT, "Invalid resource fetch response, both payload and error are nil", buf, 2u);
  }
  re::makeResourceSharingError((__CFString *)0x1F5, 0, buf);
  char v19 = *(void **)buf;
  *(void *)long long buf = 0;
  v20[0] = 0;
  id v21 = v19;
  (*(void (**)(void, char *))(**(void **)(v3 + 96) + 16))(*(void *)(v3 + 96), v20);

  id v7 = *(id *)buf;
LABEL_6:

  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 64));
  id v8 = *(void **)(v2 + 144);
  unint64_t v9 = *(void *)(v2 + 128);
  uint64_t v10 = &v8[v9];
  char v11 = v8;
  if (v9)
  {
    uint64_t v12 = 8 * v9;
    char v11 = *(void **)(v2 + 144);
    while (*v11 != *(void *)(a1 + 40))
    {
      ++v11;
      v12 -= 8;
      if (!v12)
      {
        char v11 = &v8[v9];
        break;
      }
    }
  }
  unint64_t v13 = v11 - v8;
  if (v13 != v9)
  {
    if (v9 <= v13)
    {
      uint64_t v22 = 0;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      *(_OWORD *)long long buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v23 = 136315906;
      BOOL v24 = "removeAt";
      __int16 v25 = 1024;
      int v26 = 931;
      __int16 v27 = 2048;
      unint64_t v28 = v13;
      __int16 v29 = 2048;
      unint64_t v30 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v14 = v9 - 1;
    if (v9 - 1 > v13)
    {
      uint64_t v15 = v8[v13];
      v8[v13] = *(v10 - 1);
      *(v10 - 1) = v15;
      id v8 = *(void **)(v2 + 144);
    }
    id v16 = &v8[v9];
    int v17 = (atomic_uint *)*(v16 - 1);
    if (v17)
    {
      re::details::release<re::ResourceRequest>(v17);
      *(v16 - 1) = 0;
      uint64_t v14 = *(void *)(v2 + 128) - 1;
    }
    *(void *)(v2 + 12re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v14;
    ++*(_DWORD *)(v2 + 136);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 64));
}

id __copy_helper_block_a8_32c80_ZTSKZN2re20ResourceFetchManager20receiveFetchResponseENS0_13FetchResponseEE3__0(void *a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int **)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v4;
  if (v4) {
    re::details::retain<re::ResourceFetchManager::Request>(v4);
  }
  a1[6] = *(id *)(a2 + 48);
  id result = *(id *)(a2 + 56);
  a1[7] = result;
  return result;
}

void __destroy_helper_block_a8_32c80_ZTSKZN2re20ResourceFetchManager20receiveFetchResponseENS0_13FetchResponseEE3__0(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)(a1 + 40);
  if (v2)
  {
    re::details::release<re::ResourceRequest>(v2);
    *(void *)(a1 + 40) = 0;
  }
}

void re::ResourceFetchManager::setDirectMeshHandler(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 264);
  if (v3 != *a2)
  {
    if (v2)
    {
      id v5 = (id)(v2 + 8);
      uint64_t v3 = *(void *)(a1 + 264);
    }
    if (v3) {

    }
    *(void *)(a1 + 264) = v2;
  }
}

uint64_t re::ResourceFetchManager::setReferenceObjectHandler(uint64_t a1, uint64_t a2)
{
  return re::FunctionBase<24ul,void ()(NSObject  {objcproto13OS_xpc_object}*)>::operator=<24ul>(*(void *)(a1 + 272) + 24, a2);
}

uint64_t re::ResourceFetchManager::addOnConnectionAddedHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 280);
  *(void *)(a1 + 280) = v3 + 1;
  uint64_t v16 = *(void *)(a2 + 24);
  uint64_t v17 = 0;
  uint64_t v4 = (_anonymous_namespace_ *)re::FunctionBase<24ul,void ()(int,audit_token_t,unsigned long long)>::operator=<24ul>((uint64_t)v15, a2);
  uint64_t v5 = *(void *)(a1 + 272);
  unint64_t v6 = *(void *)(v5 + 72);
  unint64_t v7 = *(void *)(v5 + 80);
  if (v7 >= v6)
  {
    unint64_t v8 = v7 + 1;
    if (v6 < v7 + 1)
    {
      if (*(void *)(v5 + 64))
      {
        uint64_t v9 = 2 * v6;
        BOOL v10 = v6 == 0;
        unint64_t v11 = 8;
        if (!v10) {
          unint64_t v11 = v9;
        }
        if (v11 <= v8) {
          unint64_t v12 = v8;
        }
        else {
          unint64_t v12 = v11;
        }
        re::DynamicArray<re::ResourceFetchManager::ConnectionAddedHandler>::setCapacity((void *)(v5 + 64), v12);
      }
      else
      {
        re::DynamicArray<re::ResourceFetchManager::ConnectionAddedHandler>::setCapacity((void *)(v5 + 64), v8);
        ++*(_DWORD *)(v5 + 88);
      }
    }
    unint64_t v7 = *(void *)(v5 + 80);
  }
  unint64_t v13 = (void *)(*(void *)(v5 + 96) + 48 * v7);
  *unint64_t v13 = v3;
  v13[4] = v16;
  void v13[5] = 0;
  re::FunctionBase<24ul,void ()(int,audit_token_t,unsigned long long)>::operator=<24ul>((uint64_t)(v13 + 1), (uint64_t)v15);
  ++*(void *)(v5 + 80);
  ++*(_DWORD *)(v5 + 88);
  re::FunctionBase<24ul,void ()(int,audit_token_t,unsigned long long)>::destroyCallable((uint64_t)v15);
  return v3;
}

uint64_t re::ResourceFetchManager::removeOnConnectionAddedHandler(uint64_t this, uint64_t a2)
{
  v14[5] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(this + 272);
  if (*(void *)(v2 + 80))
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = 48 * v5;
      while (1)
      {
        unint64_t v7 = (uint64_t *)(*(void *)(v2 + 96) + v6);
        uint64_t v13 = *v7;
        v14[3] = v7[4];
        unsigned __int8 v14[4] = 0;
        re::FunctionBase<24ul,void ()(int,audit_token_t,unsigned long long)>::operator=<24ul>((uint64_t)v14, (uint64_t)(v7 + 1));
        this = (uint64_t)re::FunctionBase<24ul,void ()(int,audit_token_t,unsigned long long)>::destroyCallable((uint64_t)v14);
        if (v13 != a2) {
          break;
        }
        ++v5;
        unint64_t v8 = *(void *)(v2 + 80);
        v6 += 48;
        if (v5 >= v8) {
          goto LABEL_10;
        }
      }
      if (v4 != v5)
      {
        uint64_t v9 = *(void *)(v2 + 96);
        BOOL v10 = (void *)(v9 + 48 * v4);
        *BOOL v10 = *(void *)(v9 + v6);
        this = re::FunctionBase<24ul,void ()(int,audit_token_t,unsigned long long)>::operator=<24ul>((uint64_t)(v10 + 1), v9 + v6 + 8);
      }
      ++v5;
      ++v4;
      unint64_t v8 = *(void *)(v2 + 80);
    }
    while (v5 < v8);
LABEL_10:
    if (v4 != v8)
    {
      uint64_t v11 = 48 * v8 - 48 * v4;
      uint64_t v12 = *(void *)(v2 + 96) + 48 * v4 + 8;
      do
      {
        this = (uint64_t)re::FunctionBase<24ul,void ()(int,audit_token_t,unsigned long long)>::destroyCallable(v12);
        v12 += 48;
        v11 -= 48;
      }
      while (v11);
      *(void *)(v2 + 80) = v4;
      ++*(_DWORD *)(v2 + 88);
    }
  }
  return this;
}

uint64_t re::ResourceFetchManager::addOnConnectionInterruptedOrInvalidatedHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 280);
  *(void *)(a1 + 280) = v3 + 1;
  uint64_t v16 = *(void *)(a2 + 24);
  uint64_t v17 = 0;
  uint64_t v4 = (_anonymous_namespace_ *)re::FunctionBase<24ul,void ()(int,audit_token_t,unsigned long long)>::operator=<24ul>((uint64_t)v15, a2);
  uint64_t v5 = *(void *)(a1 + 272);
  unint64_t v6 = *(void *)(v5 + 112);
  unint64_t v7 = *(void *)(v5 + 120);
  if (v7 >= v6)
  {
    unint64_t v8 = v7 + 1;
    if (v6 < v7 + 1)
    {
      if (*(void *)(v5 + 104))
      {
        uint64_t v9 = 2 * v6;
        BOOL v10 = v6 == 0;
        unint64_t v11 = 8;
        if (!v10) {
          unint64_t v11 = v9;
        }
        if (v11 <= v8) {
          unint64_t v12 = v8;
        }
        else {
          unint64_t v12 = v11;
        }
        re::DynamicArray<re::ResourceFetchManager::ConnectionAddedHandler>::setCapacity((void *)(v5 + 104), v12);
      }
      else
      {
        re::DynamicArray<re::ResourceFetchManager::ConnectionAddedHandler>::setCapacity((void *)(v5 + 104), v8);
        ++*(_DWORD *)(v5 + 128);
      }
    }
    unint64_t v7 = *(void *)(v5 + 120);
  }
  uint64_t v13 = (void *)(*(void *)(v5 + 136) + 48 * v7);
  *uint64_t v13 = v3;
  v13[4] = v16;
  void v13[5] = 0;
  re::FunctionBase<24ul,void ()(int,audit_token_t,unsigned long long)>::operator=<24ul>((uint64_t)(v13 + 1), (uint64_t)v15);
  ++*(void *)(v5 + 120);
  ++*(_DWORD *)(v5 + 128);
  re::FunctionBase<24ul,void ()(int,audit_token_t,unsigned long long)>::destroyCallable((uint64_t)v15);
  return v3;
}

uint64_t re::ResourceFetchManager::removeOnConnectionInterruptedOrInvalidatedHandler(uint64_t this, uint64_t a2)
{
  v14[5] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(this + 272);
  if (*(void *)(v2 + 120))
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = 48 * v5;
      while (1)
      {
        unint64_t v7 = (uint64_t *)(*(void *)(v2 + 136) + v6);
        uint64_t v13 = *v7;
        v14[3] = v7[4];
        unsigned __int8 v14[4] = 0;
        re::FunctionBase<24ul,void ()(int,audit_token_t,unsigned long long)>::operator=<24ul>((uint64_t)v14, (uint64_t)(v7 + 1));
        this = (uint64_t)re::FunctionBase<24ul,void ()(int,audit_token_t,unsigned long long)>::destroyCallable((uint64_t)v14);
        if (v13 != a2) {
          break;
        }
        ++v5;
        unint64_t v8 = *(void *)(v2 + 120);
        v6 += 48;
        if (v5 >= v8) {
          goto LABEL_10;
        }
      }
      if (v4 != v5)
      {
        uint64_t v9 = *(void *)(v2 + 136);
        BOOL v10 = (void *)(v9 + 48 * v4);
        *BOOL v10 = *(void *)(v9 + v6);
        this = re::FunctionBase<24ul,void ()(int,audit_token_t,unsigned long long)>::operator=<24ul>((uint64_t)(v10 + 1), v9 + v6 + 8);
      }
      ++v5;
      ++v4;
      unint64_t v8 = *(void *)(v2 + 120);
    }
    while (v5 < v8);
LABEL_10:
    if (v4 != v8)
    {
      uint64_t v11 = 48 * v8 - 48 * v4;
      uint64_t v12 = *(void *)(v2 + 136) + 48 * v4 + 8;
      do
      {
        this = (uint64_t)re::FunctionBase<24ul,void ()(int,audit_token_t,unsigned long long)>::destroyCallable(v12);
        v12 += 48;
        v11 -= 48;
      }
      while (v11);
      *(void *)(v2 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = v4;
      ++*(_DWORD *)(v2 + 128);
    }
  }
  return this;
}

void re::ResourceFetchManager::setShaderGraphLoader(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = *(void **)(a1 + 296);
  *(void *)(a1 + 296) = v3;
}

void re::ResourceFetchManager::tryGetShaderGraph(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  unint64_t v7 = a4;
  unint64_t v8 = (os_unfair_lock_s *)(a1 + 64);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  uint64_t v9 = *(void *)(a1 + 88);
  if (v9)
  {
    BOOL v10 = (id *)(*(void *)(a1 + 104) + 8);
    uint64_t v11 = v9 << 6;
    while ([*v10 hash] != a2)
    {
      v10 += 8;
      v11 -= 64;
      if (!v11) {
        goto LABEL_5;
      }
    }
    id v12 = *v10;
    os_unfair_lock_unlock(v8);
    if (v12)
    {
      id v13 = v12;
      objc_sync_enter(v13);
      [v13 pendingShaderGraphs];
      if (v30)
      {
        unint64_t v14 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) >> 27));
        unint64_t v15 = v14 ^ (v14 >> 31);
        uint64_t v16 = *(unsigned int *)(v31 + 4 * (v15 % v33));
        if (v16 != 0x7FFFFFFF)
        {
          if (*(void *)(v32 + 32 * v16 + 16) == a3)
          {
LABEL_12:
            uint64_t v17 = v32 + 32 * v16;
            double v18 = re::HashTable<unsigned long long,re::SharedPtr<re::RealityFile>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(&v30);
            v7[2](v7, *(void *)(v17 + 24), v18);
            [v13 pendingShaderGraphs];
            if (v30)
            {
              unint64_t v19 = v15 % v33;
              uint64_t v20 = *(unsigned int *)(v31 + 4 * v19);
              if (v20 != 0x7FFFFFFF)
              {
                uint64_t v21 = v32 + 32 * v20;
                if (*(void *)(v21 + 16) == a3)
                {
                  *(_DWORD *)(v31 + 4 * v19) = *(_DWORD *)(v21 + 8) & 0x7FFFFFFF;
LABEL_19:
                  uint64_t v25 = v32 + 32 * v20;
                  int v26 = *(_DWORD *)(v25 + 8);
                  if (v26 < 0)
                  {
                    *(_DWORD *)(v25 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v26 & 0x7FFFFFFF;
                    uint64_t v29 = *(void *)(v25 + 24);
                    unint64_t v28 = (void *)(v25 + 24);
                    uint64_t v27 = v29;
                    if (v29)
                    {

                      *unint64_t v28 = 0;
                    }
                  }
                  *(_DWORD *)(v32 + 32 * v20 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(v32 + 32 * v20 + 8) & 0x80000000 | v35;
                  --v34;
                  int v35 = v20;
                  ++v36;
                }
                else
                {
                  while (1)
                  {
                    unsigned int v22 = v20;
                    int v23 = *(_DWORD *)(v32 + 32 * v20 + 8);
                    uint64_t v20 = v23 & 0x7FFFFFFF;
                    if ((v23 & 0x7FFFFFFF) == 0x7FFFFFFF) {
                      break;
                    }
                    uint64_t v24 = v32 + 32 * v20;
                    if (*(void *)(v24 + 16) == a3)
                    {
                      *(_DWORD *)(v32 + 32 * v22 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(v32 + 32 * v22 + 8) & 0x80000000 | *(_DWORD *)(v24 + 8) & 0x7FFFFFFF;
                      goto LABEL_19;
                    }
                  }
                }
              }
            }
          }
          else
          {
            while (1)
            {
              uint64_t v16 = *(_DWORD *)(v32 + 32 * v16 + 8) & 0x7FFFFFFF;
              if (v16 == 0x7FFFFFFF) {
                break;
              }
              if (*(void *)(v32 + 32 * v16 + 16) == a3) {
                goto LABEL_12;
              }
            }
          }
        }
      }
      re::HashTable<unsigned long long,re::SharedPtr<re::RealityFile>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(&v30);
      objc_sync_exit(v13);
    }
  }
  else
  {
LABEL_5:
    os_unfair_lock_unlock(v8);
  }
}

void re::ResourceFetchManager::Request::create(uint64_t *a1, uint64_t a2, void *a3, re::DynamicString *a4, uint64_t a5)
{
  uint64_t v9 = a3;
  BOOL v10 = re::globalAllocators(v9);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10[2] + 32))(v10[2], 112, 8);
  *(_OWORD *)(v11 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(v11 + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(void *)(v11 + 104) = 0;
  *(_DWORD *)(v11 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 1;
  *(void *)uint64_t v11 = &unk_26E6CAAD8;
  *(_OWORD *)(v11 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  id v12 = (re *)re::DynamicString::setCapacity((void *)(v11 + 32), 0);
  *(void *)(v11 + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = re::globalAllocators(v12)[2];
  *(void *)(v11 + 96) = 0;
  *(unsigned char *)(v11 + 104) = 0;
  *a1 = v11;
  id v13 = *(void **)(v11 + 24);
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = v9;
  unint64_t v14 = v9;

  re::DynamicString::operator=((re::DynamicString *)(v11 + 32), a4);
  re::FunctionBase<24ul,void ()(re::Result<re::SharedResourcePayload,re::WrappedError>)>::operator=<24ul>(v11 + 64, a5);
}

uint64_t re::ResourceFetchManager::Request::dispose(BOOL this)
{
  uint64_t v1 = (re::ResourceFetchManager::Request *)this;
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(void *)(this + 16))
  {
    if (!*(unsigned char *)(this + 104))
    {
      uint64_t v2 = re::resourceSharingLogObjects((re *)this)[1];
      this = os_log_type_enabled(v2, OS_LOG_TYPE_FAULT);
      if (this)
      {
        if (*((unsigned char *)v1 + 40)) {
          unint64_t v5 = (char *)*((void *)v1 + 6);
        }
        else {
          unint64_t v5 = (char *)v1 + 41;
        }
        int v6 = 136315138;
        unint64_t v7 = v5;
        _os_log_fault_impl(&dword_233120000, v2, OS_LOG_TYPE_FAULT, "Resource request for '%s' was not cancelled before being released", (uint8_t *)&v6, 0xCu);
      }
    }
  }
  uint64_t v3 = re::globalAllocators((re *)this)[2];
  re::ResourceFetchManager::Request::~Request((id *)v1);
  return (*(uint64_t (**)(uint64_t, re::ResourceFetchManager::Request *))(*(void *)v3 + 40))(v3, v1);
}

void re::ResourceFetchManager::Request::~Request(id *this)
{
  re::ResourceFetchManager::Request::~Request(this);
  JUMPOUT(0x237DBCBD0);
}

{
  re::FunctionBase<24ul,void ()(re::Result<re::SharedResourcePayload,re::WrappedError>)>::destroyCallable((uint64_t)(this + 8));
  re::DynamicString::deinit((re::DynamicString *)(this + 4));
}

void *re::DynamicArray<re::ResourceFetchManager::Connection>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      id result = (void *)*result;
      if (!*v5)
      {
        id result = (void *)re::DynamicArray<re::ResourceFetchManager::Connection>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 58)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 64, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          unint64_t v2 = a2 << 6;
          id result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, a2 << 6, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        id result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        unsigned char v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = (long long *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        BOOL v10 = &v8[4 * v9];
        uint64_t v11 = v7;
        do
        {
          long long v12 = *v8;
          *(void *)uint64_t v8 = 0;
          *((void *)v8 + 1) = 0;
          *(_OWORD *)uint64_t v11 = v12;
          *((_OWORD *)v11 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
          *((_DWORD *)v11 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
          *((_OWORD *)v11 + 1) = 0u;
          *(void *)((char *)v11 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x7FFFFFFFLL;
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap(v11 + 2, (uint64_t *)v8 + 2);
          re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v8 + 2);

          id v13 = *(void **)v8;
          v8 += 4;

          v11 += 8;
        }
        while (v8 != v10);
        uint64_t v8 = (long long *)v5[4];
      }
      id result = (void *)(*(uint64_t (**)(void, long long *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

double re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free((_DWORD *)(a1[2] + v3));
        ++v4;
        v3 += 88;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

_DWORD *re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(_DWORD *result)
{
  int v1 = result[2];
  if (v1 < 0)
  {
    uint64_t v2 = result;
    result[2] = v1 & 0x7FFFFFFF;
    double v3 = re::DynamicString::deinit((re::DynamicString *)(result + 4));
    double result = (_DWORD *)*((void *)v2 + 6);
    if (result)
    {
      if (*((void *)v2 + 10)) {
        double result = (_DWORD *)(*(uint64_t (**)(_DWORD *, double))(*(void *)result + 40))(result, v3);
      }
      *((void *)v2 + 10) = 0;
      *((void *)v2 + 7) = 0;
      *((void *)v2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *((void *)v2 + 6) = 0;
      ++v2[18];
    }
  }
  return result;
}

void re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &unk_2343655D0, 4 * v2);
    }
    if (*(_DWORD *)(a1 + 32))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free((_DWORD *)(*(void *)(a1 + 16) + v3));
        ++v4;
        v3 += 88;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    int v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

uint64_t re::DynamicArray<re::SharedPtr<re::ResourceFetchManager::Request>>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(atomic_uint ***)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 8 * v4;
        do
        {
          if (*v3)
          {
            re::details::release<re::ResourceRequest>(*v3);
            void *v3 = 0;
          }
          ++v3;
          v5 -= 8;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(atomic_uint ***)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, atomic_uint **))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::ResourceFetchManager::Connection>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = (uint64_t *)(v3 + 16);
        uint64_t v6 = v4 << 6;
        do
        {
          re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v5);

          v5 += 8;
          v6 -= 64;
        }
        while (v6);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

long long *re::PeerIDValidator::instance(re::PeerIDValidator *this)
{
  {
    re::PeerIDValidator::instance(void)::instance = 0u;
    unk_268773088 = 0u;
    dword_268773098 = 1065353216;
  }
  return &re::PeerIDValidator::instance(void)::instance;
}

void re::PeerIDValidator::remove_impl(re::PeerIDValidator *this, unint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t v8 = a2;
  uint64_t v3 = (re *)std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>(this, &v8);
  if (v3)
  {
    int v4 = *((_DWORD *)v3 + 17) - 1;
    *((_DWORD *)v3 + 17) = v4;
    uint64_t v5 = *re::resourceSharingLogObjects(v3);
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      if (v6)
      {
        *(_DWORD *)long long buf = 134217984;
        unint64_t v10 = v8;
        _os_log_debug_impl(&dword_233120000, v5, OS_LOG_TYPE_DEBUG, "PeerIDValidator: Decrementing count for Entry with PeerID %llu.", buf, 0xCu);
      }
    }
    else
    {
      if (v6)
      {
        *(_DWORD *)long long buf = 134217984;
        unint64_t v10 = v8;
        _os_log_debug_impl(&dword_233120000, v5, OS_LOG_TYPE_DEBUG, "PeerIDValidator: Removing Entry with PeerID %llu.", buf, 0xCu);
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>>>::__erase_unique<unsigned long long>(this, &v8);
    }
  }
  else
  {
    unint64_t v7 = *re::resourceSharingLogObjects(0);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      unint64_t v10 = v8;
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, "PeerIDValidator: Error removing Entry for PeerID %llu -- not found.", buf, 0xCu);
    }
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>>>::__erase_unique<unsigned long long>(void *a1, unint64_t *a2)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>>>::remove(a1, a2, (uint64_t)&__p);
  uint64_t v3 = __p;
  long long __p = 0;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  BOOL v6 = *(void **)(*result + 8 * v4);
  do
  {
    unint64_t v7 = v6;
    BOOL v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  *unint64_t v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(void *)(a2 + 48);
  *(void *)(a2 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)(a1 + 48);
  if (v2)
  {
    re::details::release<re::ResourceRequest>(v2);
    *(void *)(a1 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  }
}

void ___ZZN2re20ResourceFetchManager13fetchResourceEPKcRKNS_9AssetPathENS_8FunctionIFvNS_6ResultINS_21SharedResourcePayloadENS_12WrappedErrorEEEEEEENK3__0clERNS0_14SharedXPCStateE_block_invoke(void *a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int8x8_t v3 = a2;
  uint64_t v4 = a1[6];
  uint8x8_t v5 = re::resourceSharingLogObjects(v3)[1];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = a1[4];
    *(_DWORD *)long long buf = 138412546;
    uint64_t v14 = v6;
    __int16 v15 = 2112;
    uint64_t v16 = v3;
    _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, "Encountered an error communicating with the remote object proxy, which will cause a load failure for asset '%@'. If the error domain is NSCocoaErrorDomain and the code is 4101 (NSXPCConnectionReplyInvalid), then the underlying issue might have been been logged from Foundation (see NSXPCConnection.m) with subsystem com.apple.Foundation and category xpc.exceptions. The error is: %@", buf, 0x16u);
  }
  unint64_t v7 = *(unsigned int **)(*(void *)(a1[5] + 8) + 48);
  uint64_t v10 = v7;
  if (v7)
  {
    re::details::retain<re::ResourceFetchManager::Request>(v7);
    uint64_t v11 = 0;
    long long v12 = v3;
    unint64_t v8 = v3;
    re::ResourceFetchManager::receiveFetchResponse(v4, (uint64_t)&v10);

    re::details::release<re::ResourceRequest>((atomic_uint *)v7);
  }
  else
  {
    uint64_t v11 = 0;
    long long v12 = v3;
    unint64_t v9 = v3;
    re::ResourceFetchManager::receiveFetchResponse(v4, (uint64_t)&v10);
  }
}

void ___ZZN2re20ResourceFetchManager13fetchResourceEPKcRKNS_9AssetPathENS_8FunctionIFvNS_6ResultINS_21SharedResourcePayloadENS_12WrappedErrorEEEEEEENK3__0clERNS0_14SharedXPCStateE_block_invoke_186(uint64_t a1, void *a2, void *a3)
{
  id v11 = a2;
  id v5 = a3;
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(a1 + 40);
  unint64_t v8 = *(unsigned int **)(*(void *)(*(void *)(a1 + 32) + 8) + 48);
  long long v12 = v8;
  if (v8)
  {
    re::details::retain<re::ResourceFetchManager::Request>(v8);
    id v13 = v11;
    id v14 = v6;
    id v9 = v6;
    id v10 = v11;
    re::ResourceFetchManager::receiveFetchResponse(v7, (uint64_t)&v12);

    re::details::release<re::ResourceRequest>((atomic_uint *)v8);
  }
  else
  {
    id v13 = v11;
    id v14 = v5;
    re::ResourceFetchManager::receiveFetchResponse(v7, (uint64_t)&v12);
  }
}

uint64_t ___ZZN2re20ResourceFetchManager13fetchResourceEPKcRKNS_9AssetPathENS_8FunctionIFvNS_6ResultINS_21SharedResourcePayloadENS_12WrappedErrorEEEEEEENK3__0clERNS0_14SharedXPCStateE_block_invoke_188(uint64_t a1)
{
  re::DynamicString::format((re::DynamicString *)"No resource fetch connection exists for peer '%llu'", (re::DynamicString *)&v9, **(void **)(a1 + 32));
  uint64_t v2 = *(void *)(a1 + 40);
  if (v10) {
    int8x8_t v3 = *(unsigned char **)&v11[7];
  }
  else {
    int8x8_t v3 = v11;
  }
  re::makeResourceSharingErrorWithDescription((__CFString *)0x1F4, (uint64_t)v3, &v6);
  id v4 = v6;
  id v6 = 0;
  v7[0] = 0;
  id v8 = v4;
  (*(void (**)(void, unsigned char *))(**(void **)(v2 + 96) + 16))(*(void *)(v2 + 96), v7);

  uint64_t result = v9;
  if (v9)
  {
    if (v10) {
      return (*(uint64_t (**)(void))(*(void *)v9 + 40))();
    }
  }
  return result;
}

void __copy_helper_block_a8_40c55_ZTSN2re9SharedPtrINS_20ResourceFetchManager7RequestEEE(uint64_t a1, uint64_t a2)
{
  int8x8_t v3 = *(unsigned int **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  if (v3) {
    re::details::retain<re::ResourceFetchManager::Request>(v3);
  }
}

void __destroy_helper_block_a8_40c55_ZTSN2re9SharedPtrINS_20ResourceFetchManager7RequestEEE(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)(a1 + 40);
  if (v2)
  {
    re::details::release<re::ResourceRequest>(v2);
    *(void *)(a1 + 40) = 0;
  }
}

uint64_t re::FunctionBase<24ul,void ()(re::Result<re::SharedResourcePayload,re::WrappedError>)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(re::Result<re::SharedResourcePayload,re::WrappedError>)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (*(void *)(a1 + 24) == *(void *)(a2 + 24))
    {
      uint64_t v5 = a2;
      if (v4 != a2)
      {
        *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v4;
        *(void *)(a2 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
        return a1;
      }
    }
    else
    {
      uint64_t v5 = *(void *)(a2 + 32);
      if (!v4) {
        return a1;
      }
    }
    unint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 40))(v5);
    uint64_t v7 = a1;
    if (v6 >= 0x19)
    {
      unint64_t v8 = v6;
      uint64_t v9 = *(void *)(a1 + 24);
      if (v9) {
        uint64_t v7 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v9 + 32))(v9, v8, 0);
      }
      else {
        uint64_t v7 = 0;
      }
    }
    *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v7;
    (*(void (**)(void))(**(void **)(a2 + 32) + 32))(*(void *)(a2 + 32));
    re::FunctionBase<24ul,void ()(re::Result<re::SharedResourcePayload,re::WrappedError>)>::destroyCallable(a2);
  }
  return a1;
}

re::DynamicString *re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, uint64_t a5)
{
  unsigned int v10 = *(_DWORD *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    unsigned int v10 = *(_DWORD *)(a1 + 32);
    unsigned int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      unsigned int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 88 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 88 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 88 * v10 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v13 | 0x80000000;
  uint64_t v14 = 88 * v10;
  *(_DWORD *)(*(void *)(a1 + 16) + v14 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + v14 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = a3;
  uint64_t result = re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + v14 + 16), a4);
  uint64_t v16 = *(void *)(a1 + 16) + 88 * v10;
  *(void *)(v16 + 80) = 0;
  *(_DWORD *)(v16 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(v16 + 56) = 0;
  *(void *)(v16 + 64) = 0;
  *(void *)(v16 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  uint64_t v17 = *(void *)(a5 + 8);
  *(void *)(v16 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(void *)a5;
  *(void *)(v16 + 56) = v17;
  *(void *)a5 = 0;
  *(void *)(a5 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  uint64_t v18 = *(void *)(v16 + 64);
  *(void *)(v16 + 64) = *(void *)(a5 + 16);
  *(void *)(a5 + 16) = v18;
  uint64_t v19 = *(void *)(v16 + 80);
  *(void *)(v16 + 80) = *(void *)(a5 + 32);
  *(void *)(a5 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v19;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v16 + 72);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * are::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

void re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v14, 0, 36);
      *(void *)&v14[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v14, v4, a2);
      long long v5 = *(_OWORD *)v14;
      *(_OWORD *)uint64_t v14 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v14[16];
      uint64_t v7 = *(void *)(a1 + 16);
      *(void *)&v14[16] = v7;
      *(void *)(a1 + 16) = v6;
      long long v9 = *(_OWORD *)&v14[24];
      *(_OWORD *)&uint8_t v14[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v14[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        uint64_t v12 = v7 + 48;
        do
        {
          if ((*(_DWORD *)(v12 - 40) & 0x80000000) != 0) {
            re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(void *)(v12 - 48) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v12 - 48), (re::DynamicString *)(v12 - 32));
          }
          ++v11;
          v12 += 88;
        }
        while (v11 < v10);
      }
      re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v14);
    }
  }
  else
  {
    if (a2) {
      signed int v13 = a2;
    }
    else {
      signed int v13 = 3;
    }
  }
}

void re::details::retain<re::ResourceFetchManager::Request>(unsigned int *a1)
{
  uint64_t v2 = a1 + 2;
  if (!atomic_load(a1 + 2))
  {
    long long v5 = (const void *)atomic_load(v2);
    re::internal::refCountCheckFailHandler((re::internal *)1, a1, v5);
  }
  unsigned int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)v2, 1u, memory_order_relaxed);
  if (add_explicit - 0x100000 <= 0xFFEFFFFE)
  {
    re::internal::refCountCheckFailHandler((re::internal *)1, a1, (const void *)(add_explicit + 1));
  }
}

id re::ResourceFetchManager::Connection::remoteObjectProxy(id *this)
{
  re::xpc::Connection::remoteObjectProxy(this, &v3);
  id v1 = v3;

  return v1;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v8, a2);
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if (v5 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v6 + 88 * v5 + 16, a2))
  {
    uint64_t v5 = *(_DWORD *)(v6 + 88 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v6 + 88 * v5 + 48;
}

unint64_t re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::remove(uint64_t a1, uint64_t a2)
{
  unint64_t result = re::Hash<re::DynamicString>::operator()((uint64_t)&v13, a2);
  if (*(void *)a1)
  {
    unint64_t v5 = result % *(unsigned int *)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(v6 + 4 * v5);
    if (v7 != 0x7FFFFFFF)
    {
      uint64_t v8 = *(void *)(a1 + 16);
      unint64_t result = re::DynamicString::operator==(v8 + 88 * v7 + 16, a2);
      if (result)
      {
        *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v8 + 88 * v7 + 8) & 0x7FFFFFFF;
LABEL_8:
        unint64_t result = (unint64_t)re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free((_DWORD *)(*(void *)(a1 + 16) + 88 * v7));
        uint64_t v11 = *(void *)(a1 + 16) + 88 * v7;
        int v12 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)(v11 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(v11 + 8) & 0x80000000 | *(_DWORD *)(a1 + 36);
        --*(_DWORD *)(a1 + 28);
        *(_DWORD *)(a1 + 36) = v7;
        *(_DWORD *)(a1 + 40) = v12 + 1;
      }
      else
      {
        while (1)
        {
          unsigned int v9 = v7;
          int v10 = *(_DWORD *)(v8 + 88 * v7 + 8);
          uint64_t v7 = v10 & 0x7FFFFFFF;
          if ((v10 & 0x7FFFFFFF) == 0x7FFFFFFF) {
            break;
          }
          unint64_t result = re::DynamicString::operator==(v8 + 88 * v7 + 16, a2);
          if (result)
          {
            *(_DWORD *)(v8 + 88 * v9 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(v8 + 88 * v9 + 8) & 0x80000000 | *(_DWORD *)(v8 + 88 * v7 + 8) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
  return result;
}

uint64_t re::DynamicOverflowArray<re::SharedPtr<re::ResourceFetchManager::Request>,1ul>::setCapacity(uint64_t *a1, unint64_t a2)
{
  uint64_t result = *a1;
  if (a2 && !result)
  {
    uint64_t result = re::DynamicOverflowArray<re::SharedPtr<re::ResourceFetchManager::Request>,1ul>::setCapacity(a1, a2);
    int v6 = *((_DWORD *)a1 + 4) + 2;
LABEL_4:
    *((_DWORD *)a1 + 4) = v6;
    return result;
  }
  int v7 = *((_DWORD *)a1 + 4);
  if (v7) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = a1[3];
  }
  if (v8 != a2)
  {
    unint64_t v9 = a1[1];
    if (v9 <= a2 && (a2 > 1 || (v7 & 1) == 0))
    {
      if (a2 < 2)
      {
        uint64_t v14 = a1[4];
        if (v9)
        {
          if (v7) {
            __int16 v15 = a1 + 3;
          }
          else {
            __int16 v15 = (uint64_t *)a1[4];
          }
          a1[3] = *v15;
          *__int16 v15 = 0;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v14);
        int v6 = *((_DWORD *)a1 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 61)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 8, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        uint64_t v2 = 8 * a2;
        uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)result + 32))(result, 8 * a2, 8);
        if (result)
        {
          uint64_t v11 = result;
          int v12 = *((_DWORD *)a1 + 4);
          if (v12) {
            char v13 = a1 + 3;
          }
          else {
            char v13 = (void *)a1[4];
          }
          uint64_t v16 = a1[1];
          if (v16)
          {
            uint64_t v17 = 8 * v16;
            uint64_t v18 = (void *)result;
            do
            {
              *v18++ = *v13;
              *v13++ = 0;
              v17 -= 8;
            }
            while (v17);
            int v12 = *((_DWORD *)a1 + 4);
          }
          if ((v12 & 1) == 0)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a1 + 40))(*a1, a1[4]);
            int v12 = *((_DWORD *)a1 + 4);
          }
          *((_DWORD *)a1 + 4) = v12 & 0xFFFFFFFE;
          a1[3] = a2;
          a1[4] = v11;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(void *)(*a1 + 8));
      uint64_t result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::FunctionBase<24ul,void ()(NSObject  {objcproto13OS_xpc_object}*)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(NSObject  {objcproto13OS_xpc_object}*)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,void ()(NSObject  {objcproto13OS_xpc_object}*)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  }
  return result;
}

uint64_t re::FunctionBase<24ul,void ()(int,audit_token_t,unsigned long long)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(int,audit_token_t,unsigned long long)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(int,audit_token_t,unsigned long long)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (*(void *)(a1 + 24) == *(void *)(a2 + 24))
    {
      unint64_t v5 = a2;
      if (v4 != a2)
      {
        *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v4;
        *(void *)(a2 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
        return a1;
      }
    }
    else
    {
      unint64_t v5 = *(void *)(a2 + 32);
      if (!v4) {
        return a1;
      }
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 40))(v5);
    unint64_t v7 = a1;
    if (v6 >= 0x19)
    {
      uint64_t v8 = v6;
      unint64_t v9 = *(void *)(a1 + 24);
      if (v9) {
        unint64_t v7 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v9 + 32))(v9, v8, 0);
      }
      else {
        unint64_t v7 = 0;
      }
    }
    *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v7;
    (*(void (**)(void))(**(void **)(a2 + 32) + 32))(*(void *)(a2 + 32));
    re::FunctionBase<24ul,void ()(int,audit_token_t,unsigned long long)>::destroyCallable(a2);
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,void ()(int,audit_token_t,unsigned long long)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  }
  return result;
}

BOOL re::PeerIDValidator::validateOrAdd_impl(void *a1, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v4 = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>(a1, (unint64_t *)a2);
  if (v4)
  {
    unint64_t v5 = v4;
    if (*(_DWORD *)(a2 + 8) != *((_DWORD *)v4 + 8))
    {
      uint64_t v18 = *re::resourceSharingLogObjects((re *)v4);
      BOOL result = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      uint64_t v19 = v5[3];
      int v20 = *(_DWORD *)(a2 + 8);
      int v21 = *((_DWORD *)v5 + 8);
      *(_DWORD *)int v26 = 134218496;
      *(void *)&v26[4] = v19;
      *(_WORD *)&v26[12] = 1024;
      *(_DWORD *)&v26[14] = v20;
      *(_WORD *)&v26[18] = 1024;
      *(_DWORD *)&v26[20] = v21;
      int v12 = "PeerIDValidator: Attempting to add Entry with invalid pid for PeerID %llu: %u != %u.";
      char v13 = v18;
      uint32_t v14 = 24;
      goto LABEL_20;
    }
    if (*(void *)((char *)v4 + 36) != *(void *)(a2 + 12)
      || *(void *)((char *)v4 + 44) != *(void *)(a2 + 20)
      || *(void *)((char *)v4 + 52) != *(void *)(a2 + 28)
      || *(void *)((char *)v4 + 60) != *(void *)(a2 + 36))
    {
      unint64_t v9 = *re::resourceSharingLogObjects((re *)v4);
      BOOL result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      uint64_t v11 = v5[3];
      *(_DWORD *)int v26 = 134217984;
      *(void *)&v26[4] = v11;
      int v12 = "PeerIDValidator: Attempting to add Entry with invalid auditToken for PeerID: %llu.";
      char v13 = v9;
      uint32_t v14 = 12;
LABEL_20:
      _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, v12, v26, v14);
      return 0;
    }
    ++*((_DWORD *)v4 + 17);
    unsigned int v22 = *re::resourceSharingLogObjects((re *)v4);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v24 = v5[3];
      int v25 = *((_DWORD *)v5 + 17);
      *(_DWORD *)int v26 = 134218240;
      *(void *)&v26[4] = v24;
      *(_WORD *)&v26[12] = 1024;
      *(_DWORD *)&v26[14] = v25;
      _os_log_debug_impl(&dword_233120000, v22, OS_LOG_TYPE_DEBUG, "PeerIDValidator: Incrementing count for Entry with PeerID %llu to %u.", v26, 0x12u);
    }
    return 1;
  }
  else
  {
    *(_DWORD *)(a2 + 44) = 1;
    __int16 v15 = *re::resourceSharingLogObjects(0);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v23 = *(void *)a2;
      *(_DWORD *)int v26 = 134217984;
      *(void *)&v26[4] = v23;
      _os_log_debug_impl(&dword_233120000, v15, OS_LOG_TYPE_DEBUG, "PeerIDValidator: Adding new Entry with PeerID %llu.", v26, 0xCu);
    }
    *(void *)int v26 = *(void *)a2;
    long long v16 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&v26[8] = *(_OWORD *)a2;
    long long v27 = v16;
    long long v28 = *(_OWORD *)(a2 + 32);
    std::__hash_table<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,re::PeerIDValidator::Entry>>((uint64_t)a1, (unint64_t *)v26, (uint64_t)v26);
    return v17 & 1;
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,re::PeerIDValidator::Entry>>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x48uLL);
  *uint64_t v10 = 0;
  v10[1] = v6;
  long long v12 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v10 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v10 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v12;
  *((_OWORD *)v10 + 3) = *(_OWORD *)(a3 + 32);
  v10[8] = *(void *)(a3 + 48);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  int v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *uint64_t v10 = *v20;
LABEL_38:
    *int v20 = v10;
    goto LABEL_39;
  }
  *uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v21 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    int v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = a1 + 16;
      unint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *unint64_t v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v11;
            unint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          unint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint64_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  }
}

void re::ResourceFetchManager::ConnectionEventHandlers::~ConnectionEventHandlers(re::ResourceFetchManager::ConnectionEventHandlers *this)
{
  *(void *)this = &unk_26E6CAB80;
  uint64_t v2 = (char *)this + 24;
  re::DynamicArray<re::ResourceFetchManager::ConnectionAddedHandler>::deinit((uint64_t)this + 104);
  re::DynamicArray<re::ResourceFetchManager::ConnectionAddedHandler>::deinit((uint64_t)this + 64);
  re::FunctionBase<24ul,void ()(NSObject  {objcproto13OS_xpc_object}*)>::destroyCallable((uint64_t)v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6CAB80;
  uint64_t v2 = (char *)this + 24;
  re::DynamicArray<re::ResourceFetchManager::ConnectionAddedHandler>::deinit((uint64_t)this + 104);
  re::DynamicArray<re::ResourceFetchManager::ConnectionAddedHandler>::deinit((uint64_t)this + 64);
  re::FunctionBase<24ul,void ()(NSObject  {objcproto13OS_xpc_object}*)>::destroyCallable((uint64_t)v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void *re::DynamicArray<re::ResourceFetchManager::ConnectionAddedHandler>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      BOOL result = (void *)*result;
      if (!*v5)
      {
        BOOL result = (void *)re::DynamicArray<re::ResourceFetchManager::ConnectionAddedHandler>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          uint64_t v2 = 48 * a2;
          BOOL result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        BOOL result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        unsigned char v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 48 * v9;
        uint64_t v11 = (uint64_t)(v7 + 1);
        uint64_t v12 = v8 + 8;
        do
        {
          *(void *)(v11 - re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(void *)(v12 - 8);
          *(void *)(v11 + 24) = *(void *)(v12 + 24);
          *(void *)(v11 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
          re::FunctionBase<24ul,void ()(int,audit_token_t,unsigned long long)>::operator=<24ul>(v11, v12);
          re::FunctionBase<24ul,void ()(int,audit_token_t,unsigned long long)>::destroyCallable(v12);
          v11 += 48;
          uint64_t v13 = v12 + 40;
          v12 += 48;
        }
        while (v13 != v10);
        uint64_t v8 = v5[4];
      }
      BOOL result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::HashTable<unsigned long long,re::SharedPtr<re::SharedObject>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashTable<unsigned long long,re::SharedPtr<re::SharedObject>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashTable<unsigned long long,re::SharedPtr<re::SharedObject>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = (unint64_t *)(*(void *)(a2 + 16) + v6);
      if ((v8[1] & 0x80000000) != 0)
      {
        unint64_t v9 = *v8;
        unint64_t v10 = *(unsigned int *)(a1 + 24);
        unint64_t v11 = *v8 % v10;
        uint64_t v12 = *(unsigned int *)(a1 + 36);
        if (v12 == 0x7FFFFFFF)
        {
          uint64_t v12 = *(unsigned int *)(a1 + 32);
          int v13 = v12;
          if (v12 == v10)
          {
            re::HashTable<unsigned long long,re::SharedPtr<re::SharedObject>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
            unint64_t v11 = v9 % *(unsigned int *)(a1 + 24);
            int v13 = *(_DWORD *)(a1 + 32);
          }
          *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v13 + 1;
          uint64_t v14 = *(void *)(a1 + 16);
          int v15 = *(_DWORD *)(v14 + 32 * v12 + 8);
        }
        else
        {
          uint64_t v14 = *(void *)(a1 + 16);
          int v15 = *(_DWORD *)(v14 + 32 * v12 + 8);
          *(_DWORD *)(a1 + 36) = v15 & 0x7FFFFFFF;
        }
        *(_DWORD *)(v14 + 32 * v12 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v15 | 0x80000000;
        uint64_t v16 = *(void *)(a1 + 8);
        *(_DWORD *)(*(void *)(a1 + 16) + 32 * v12 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v12 + 8) & 0x80000000 | *(_DWORD *)(v16 + 4 * v11);
        *(void *)(*(void *)(a1 + 16) + 32 * v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v9;
        unint64_t v17 = v8[3];
        *(void *)(*(void *)(a1 + 16) + 32 * v12 + 16) = v8[2];
        *(void *)(*(void *)(a1 + 16) + 32 * v12 + 24) = v17;
        if (v17)
        {
          id v18 = (id)(v17 + 8);
          uint64_t v16 = *(void *)(a1 + 8);
        }
        *(_DWORD *)(v16 + 4 * v11) = v12;
        ++*(_DWORD *)(a1 + 28);
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 32;
    }
  }
}

void re::HashTable<unsigned long long,re::SharedPtr<re::SharedObject>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &unk_2343655D0, 4 * v2);
    }
    unint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = *(void *)(a1 + 16) + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7 & 0x7FFFFFFF;
          uint64_t v8 = *(void *)(v6 + 24);
          if (v8)
          {

            *(void *)(v6 + 24) = 0;
            unint64_t v3 = *(unsigned int *)(a1 + 32);
          }
        }
        v4 += 32;
      }
    }
    *(_DWORD *)(a1 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    int v9 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v9;
  }
}

void re::HashTable<unsigned long long,re::SharedPtr<re::SharedObject>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(void *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v22, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v22;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)unsigned int v22 = v5;
      *(void *)&v22[16] = v6;
      *(_OWORD *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7;
      long long v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&char v22[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      uint64_t v10 = v8;
      if (v8)
      {
        int v11 = DWORD1(v9);
        uint64_t v12 = v7;
        int v13 = (void *)(v6 + 24);
        do
        {
          if ((*(_DWORD *)(v13 - 2) & 0x80000000) != 0)
          {
            unint64_t v14 = *(v13 - 3);
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = v14 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<unsigned long long,re::SharedPtr<re::SharedObject>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, (2 * v11));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v12 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 32 * v17 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 32 * v17 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 32 * v17) = v14;
            *(void *)(*(void *)(a1 + 16) + 32 * v17 + 16) = *(v13 - 1);
            *(void *)(*(void *)(a1 + 16) + 32 * v17 + 24) = *v13;
            *int v13 = 0;
            *(_DWORD *)(v12 + 4 * v16) = v17;
            int v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v11;
          }
          v13 += 4;
          --v10;
        }
        while (v10);
      }
      re::HashTable<unsigned long long,re::SharedPtr<re::RealityFile>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2) {
      signed int v21 = a2;
    }
    else {
      signed int v21 = 3;
    }
  }
}

void *re::allocInfo_PrereleaseVersionInfo(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF75330, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF75330))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF756F8, "PrereleaseVersionInfo");
    __cxa_guard_release(&qword_26AF75330);
  }
  return &unk_26AF756F8;
}

void re::initInfo_PrereleaseVersionInfo(re *this, re::IntrospectionBase *a2)
{
  v14[0] = 0x1EE93697053F1DC4;
  v14[1] = "PrereleaseVersionInfo";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF75338, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF75338);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      long long v7 = re::IntrospectionInfo<re::DynamicString>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "id";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF75478 = v8;
      long long v9 = re::introspectionAllocator((re *)v8);
      int v11 = re::IntrospectionInfo<re::DynamicString>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "frameworkVersion";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x2000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF75480 = v12;
      __cxa_guard_release(&qword_26AF75338);
    }
  }
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x4000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 2;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = &qword_26AF75478;
  *((void *)this + 9) = re::internal::defaultConstruct<re::PrereleaseVersionInfo>;
  *((void *)this + 11) = 0;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::PrereleaseVersionInfo>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::PrereleaseVersionInfo>;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::PrereleaseVersionInfo>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

void *re::internal::defaultConstruct<re::PrereleaseVersionInfo>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  uint64_t v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)a3, 0);
  *(_OWORD *)(a3 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(a3 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  long long v5 = (void *)(a3 + 32);
  return re::DynamicString::setCapacity(v5, 0);
}

double re::internal::defaultDestruct<re::PrereleaseVersionInfo>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString::deinit((re::DynamicString *)(a3 + 32));
  return re::DynamicString::deinit((re::DynamicString *)a3);
}

void *re::internal::defaultConstructV2<re::PrereleaseVersionInfo>(_OWORD *a1)
{
  *a1 = 0u;
  a1[1] = 0u;
  uint64_t v2 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(a1, 0);
  a1[2] = 0u;
  a1[3] = 0u;
  unint64_t v3 = a1 + 2;
  return re::DynamicString::setCapacity(v3, 0);
}

double re::internal::defaultDestructV2<re::PrereleaseVersionInfo>(uint64_t a1)
{
  re::DynamicString::deinit((re::DynamicString *)(a1 + 32));
  return re::DynamicString::deinit((re::DynamicString *)a1);
}

void *re::allocInfo_PrereleaseSchemaVersion(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF75348, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF75348))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF75770, "PrereleaseSchemaVersion");
    __cxa_guard_release(&qword_26AF75348);
  }
  return &unk_26AF75770;
}

void re::initInfo_PrereleaseSchemaVersion(re *this, re::IntrospectionBase *a2)
{
  v14[0] = 0xC639F5DA5C92FC66;
  v14[1] = "PrereleaseSchemaVersion";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF75350, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF75350);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      long long v7 = re::IntrospectionInfo<re::DynamicString>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "id";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF75488 = v8;
      long long v9 = re::introspectionAllocator((re *)v8);
      int v11 = re::introspect_int((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "sdk";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x2000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF75490 = v12;
      __cxa_guard_release(&qword_26AF75350);
    }
  }
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 2;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = &qword_26AF75488;
  *((void *)this + 9) = re::internal::defaultConstruct<re::PrereleaseSchemaVersion>;
  *((void *)this + 11) = 0;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::PrereleaseSchemaVersion>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::PrereleaseSchemaVersion>;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::PrereleaseSchemaVersion>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

void *re::internal::defaultConstruct<re::PrereleaseSchemaVersion>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  return re::DynamicString::setCapacity((void *)a3, 0);
}

double re::internal::defaultDestruct<re::PrereleaseSchemaVersion>(int a1, int a2, re::DynamicString *this)
{
  return re::DynamicString::deinit(this);
}

void *re::internal::defaultConstructV2<re::PrereleaseSchemaVersion>(_anonymous_namespace_ *a1)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  return re::DynamicString::setCapacity(a1, 0);
}

void *re::allocInfo_PrereleaseHeader(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF75360, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF75360))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF757E8, "PrereleaseHeader");
    __cxa_guard_release(&qword_26AF75360);
  }
  return &unk_26AF757E8;
}

void re::initInfo_PrereleaseHeader(re *this, re::IntrospectionBase *a2)
{
  v20[0] = 0xDD9D25828C678FA2;
  v20[1] = "PrereleaseHeader";
  re::StringID::destroyString((re::StringID *)v20);
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v21;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF75368, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF75368);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      uint64_t v6 = v5;
      long long v7 = (re *)qword_26AF75358;
      if (!qword_26AF75358)
      {
        long long v7 = (re *)re::allocInfo_PrereleaseSchemaVersion(v5);
        qword_26AF75358 = (uint64_t)v7;
        re::initInfo_PrereleaseSchemaVersion(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "schemaVersion";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x1800000001;
      *(_DWORD *)(v9 + 40) = 0;
      *(void *)(v9 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF754B8 = v9;
      uint64_t v10 = (re *)re::introspectionAllocator((re *)v9);
      int v11 = v10;
      uint64_t v12 = (re *)qword_26AF75340;
      if (!qword_26AF75340)
      {
        uint64_t v12 = (re *)re::allocInfo_PrereleaseVersionInfo(v10);
        qword_26AF75340 = (uint64_t)v12;
        re::initInfo_PrereleaseVersionInfo(v12, v13);
      }
      uint64_t v14 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "versionInfo";
      *(void *)(v14 + 16) = v12;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x4000000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF754C0 = v14;
      long long v15 = re::introspectionAllocator((re *)v14);
      uint64_t v17 = re::IntrospectionInfo<re::DynamicString>::get(1, v16);
      uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "identifier";
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x8000000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF754C8 = v18;
      __cxa_guard_release(&qword_26AF75368);
    }
  }
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 3;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = &qword_26AF754B8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::PrereleaseHeader>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::PrereleaseHeader>;
  *((void *)this + 11) = re::internal::defaultRetain<re::PrereleaseHeader>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = re::internal::defaultRelease<re::PrereleaseHeader>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::PrereleaseHeader>;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::PrereleaseHeader>;
  re::IntrospectionRegistry::add(this, v3);
  long long v19 = v21;
}

uint64_t re::internal::defaultConstruct<re::PrereleaseHeader>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::PrereleaseHeader>(a3);
}

uint64_t re::internal::defaultDestruct<re::PrereleaseHeader>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::PrereleaseHeader>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *re::allocInfo_SceneCompatibilityVariant(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF75378, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF75378))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF75860, "SceneCompatibilityVariant");
    __cxa_guard_release(&qword_26AF75378);
  }
  return &unk_26AF75860;
}

void re::initInfo_SceneCompatibilityVariant(re *this, re::IntrospectionBase *a2)
{
  v14[0] = 0x181C570854B9A702;
  v14[1] = "SceneCompatibilityVariant";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF75380, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF75380);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      long long v7 = re::introspect_int((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "version";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF75498 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      int v11 = re::IntrospectionInfo<re::DynamicString>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "fileName";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF754A0 = v12;
      __cxa_guard_release(&qword_26AF75380);
    }
  }
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 2;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = &qword_26AF75498;
  *((void *)this + 9) = re::internal::defaultConstruct<re::SceneCompatibilityVariant>;
  *((void *)this + 11) = 0;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::SceneCompatibilityVariant>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::SceneCompatibilityVariant>;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::SceneCompatibilityVariant>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

void *re::internal::defaultConstruct<re::SceneCompatibilityVariant>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  unint64_t v3 = (void *)(a3 + 8);
  *(_OWORD *)(a3 + 24) = 0u;
  return re::DynamicString::setCapacity(v3, 0);
}

double re::internal::defaultDestruct<re::SceneCompatibilityVariant>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicString::deinit((re::DynamicString *)(a3 + 8));
}

void *re::internal::defaultConstructV2<re::SceneCompatibilityVariant>(uint64_t a1)
{
  *(_OWORD *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  id v1 = (void *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  return re::DynamicString::setCapacity(v1, 0);
}

double re::internal::defaultDestructV2<re::SceneCompatibilityVariant>(uint64_t a1)
{
  return re::DynamicString::deinit((re::DynamicString *)(a1 + 8));
}

void *re::allocInfo_SceneDescriptor(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF75390, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF75390))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF758D8, "SceneDescriptor");
    __cxa_guard_release(&qword_26AF75390);
  }
  return &unk_26AF758D8;
}

void re::initInfo_SceneDescriptor(re *this, re::IntrospectionBase *a2)
{
  v20[0] = 0xABFCACCDD6C081F6;
  v20[1] = "SceneDescriptor";
  re::StringID::destroyString((re::StringID *)v20);
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v21;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF75398, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF75398);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      long long v7 = re::IntrospectionInfo<re::DynamicString>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "fileName";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x1800000001;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF754E8 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      int v11 = re::IntrospectionInfo<re::DynamicString>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "sceneName";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x3800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF754F0 = v12;
      long long v13 = re::introspectionAllocator((re *)v12);
      long long v15 = re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "sceneIdentifier";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x5800000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF754F8 = v16;
      uint64_t v17 = (re *)re::introspectionAllocator((re *)v16);
      re::IntrospectionInfo<re::DynamicArray<re::SceneCompatibilityVariant>>::get(v17);
      uint64_t v18 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "sceneCompatibilityVariants";
      *(void *)(v18 + 16) = &qword_26AF755B0;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0xA000000004;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF75500 = v18;
      __cxa_guard_release(&qword_26AF75398);
    }
  }
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0xC800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 4;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = &qword_26AF754E8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::SceneDescriptor>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::SceneDescriptor>;
  *((void *)this + 11) = re::internal::defaultRetain<re::SceneDescriptor>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = re::internal::defaultRelease<re::SceneDescriptor>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::SceneDescriptor>;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::SceneDescriptor>;
  re::IntrospectionRegistry::add(this, v3);
  long long v19 = v21;
}

uint64_t *re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(int a1, const re::IntrospectionBase *a2)
{
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(BOOL)::info);
    re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(BOOL)::info = (uint64_t)&unk_26E6CAD78;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(BOOL)::isInitialized) {
      return &re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    int v3 = re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    if (v3) {
      return &re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(BOOL)::info;
    }
    long long v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
  }
  uint64_t v6 = (re *)re::IntrospectionInfo<re::DynamicString>::get(1, a2);
  if (re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      long long v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
    }
  }
  else
  {
    uint64_t v9 = (uint64_t)v6;
    re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(BOOL)::isInitialized = 1;
    int v10 = *((_DWORD *)v6 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(BOOL)::info, 0);
    qword_2687730C8 = 0x280000000DLL;
    dword_2687730D0 = v10;
    word_2687730D4 = 0;
    *(void *)&xmmword_2687730D8 = 0;
    *((void *)&xmmword_2687730D8 + 1) = 0xFFFFFFFFLL;
    qword_2687730E8 = v9;
    unk_2687730F0 = 0;
    re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(BOOL)::info = (uint64_t)&unk_26E6CAD78;
    re::IntrospectionRegistry::add(v11, v12);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(BOOL)::info, (const re::IntrospectionBase *)&v15);
    if (BYTE8(v15)) {
      long long v13 = v16;
    }
    else {
      long long v13 = (char *)&v15 + 9;
    }
    if (void)v15 && (BYTE8(v15)) {
      (*(void (**)(void))(*(void *)v15 + 40))();
    }
    long long v15 = *(_OWORD *)(v9 + 32);
    xmmword_2687730D8 = v14;
    re::StringID::destroyString((re::StringID *)v17);
    if ((a1 & 1) == 0) {
      goto LABEL_9;
    }
  }
  return &re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(BOOL)::info;
}

void re::IntrospectionInfo<re::DynamicArray<re::SceneCompatibilityVariant>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF75458, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF75458);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF755B0);
      qword_26AF755B0 = (uint64_t)&unk_26E6CADF8;
      __cxa_guard_release(&qword_26AF75458);
    }
  }
  if ((byte_26AF75329 & 1) == 0)
  {
    id v1 = (void *)qword_26AF75388;
    if (qword_26AF75388
      || (id v1 = re::allocInfo_SceneCompatibilityVariant(a1),
          qword_26AF75388 = (uint64_t)v1,
          re::initInfo_SceneCompatibilityVariant((re *)v1, v2),
          (byte_26AF75329 & 1) == 0))
    {
      byte_26AF75329 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF755B0, 0);
      qword_26AF755C0 = 0x2800000003;
      dword_26AF755C8 = v3;
      word_26AF755CC = 0;
      *(void *)&xmmword_26AF755D0 = 0;
      *((void *)&xmmword_26AF755D0 + 1) = 0xFFFFFFFFLL;
      qword_26AF755E0 = (uint64_t)v1;
      qword_26AF755E8 = 0;
      qword_26AF755B0 = (uint64_t)&unk_26E6CADF8;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF755B0, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      long long v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SceneCompatibilityVariant>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SceneCompatibilityVariant>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SceneCompatibilityVariant>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SceneCompatibilityVariant>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::SceneCompatibilityVariant>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SceneCompatibilityVariant>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::SceneCompatibilityVariant>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SceneCompatibilityVariant>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF755D0 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

re::SceneDescriptor *re::internal::defaultConstruct<re::SceneDescriptor>(int a1, int a2, re::SceneDescriptor *this)
{
  *((void *)this + 24) = 0;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return re::SceneDescriptor::SceneDescriptor(this);
}

uint64_t re::internal::defaultDestruct<re::SceneDescriptor>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

re::SceneDescriptor *re::internal::defaultConstructV2<re::SceneDescriptor>(re::SceneDescriptor *this)
{
  *((void *)this + 24) = 0;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return re::SceneDescriptor::SceneDescriptor(this);
}

uint64_t re::internal::defaultDestructV2<re::SceneDescriptor>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void *re::allocInfo_AssetMapAssetDescriptor(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF753A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF753A8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF75950, "AssetMapAssetDescriptor");
    __cxa_guard_release(&qword_26AF753A8);
  }
  return &unk_26AF75950;
}

void re::initInfo_AssetMapAssetDescriptor(re *this, re::IntrospectionBase *a2)
{
  v22[0] = 0xF2989CE2313F00E6;
  v22[1] = "AssetMapAssetDescriptor";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v23;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF753B0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF753B0);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      long long v7 = re::IntrospectionInfo<re::DynamicArray<re::DynamicString>>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "fileNames";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF75508 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      long long v11 = re::IntrospectionInfo<re::DynamicArray<unsigned long>>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "internalDependencies";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x2800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF75510 = v12;
      long long v13 = re::introspectionAllocator((re *)v12);
      char v15 = re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "label";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x5000000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF75518 = v16;
      uint64_t v17 = re::introspectionAllocator((re *)v16);
      long long v19 = re::IntrospectionInfo<re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "metadata";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x7800000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF75520 = v20;
      __cxa_guard_release(&qword_26AF753B0);
    }
  }
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0xA800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 4;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = &qword_26AF75508;
  *((void *)this + 9) = re::internal::defaultConstruct<re::AssetMapAssetDescriptor>;
  *((void *)this + 11) = 0;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::AssetMapAssetDescriptor>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::AssetMapAssetDescriptor>;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::AssetMapAssetDescriptor>;
  re::IntrospectionRegistry::add(this, v3);
  long long v21 = v23;
}

uint64_t *re::IntrospectionInfo<re::DynamicArray<re::DynamicString>>::get(int a1, const re::IntrospectionBase *a2)
{
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&re::IntrospectionInfo<re::DynamicArray<re::DynamicString>>::get(BOOL)::info);
    re::IntrospectionInfo<re::DynamicArray<re::DynamicString>>::get(BOOL)::info = (uint64_t)&unk_26E6CAE90;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::DynamicArray<re::DynamicString>>::get(BOOL)::isInitialized) {
      return &re::IntrospectionInfo<re::DynamicArray<re::DynamicString>>::get(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    int v3 = re::IntrospectionInfo<re::DynamicArray<re::DynamicString>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    if (v3) {
      return &re::IntrospectionInfo<re::DynamicArray<re::DynamicString>>::get(BOOL)::info;
    }
    long long v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
  }
  uint64_t v6 = (re *)re::IntrospectionInfo<re::DynamicString>::get(1, a2);
  if (re::IntrospectionInfo<re::DynamicArray<re::DynamicString>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      long long v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
    }
  }
  else
  {
    uint64_t v9 = (uint64_t)v6;
    re::IntrospectionInfo<re::DynamicArray<re::DynamicString>>::get(BOOL)::isInitialized = 1;
    int v10 = *((_DWORD *)v6 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::DynamicArray<re::DynamicString>>::get(BOOL)::info, 0);
    qword_268773118 = 0x2800000003;
    dword_268773120 = v10;
    word_268773124 = 0;
    *(void *)&xmmword_268773128 = 0;
    *((void *)&xmmword_268773128 + 1) = 0xFFFFFFFFLL;
    qword_268773138 = v9;
    unk_268773140 = 0;
    re::IntrospectionInfo<re::DynamicArray<re::DynamicString>>::get(BOOL)::info = (uint64_t)&unk_26E6CAE90;
    re::IntrospectionRegistry::add(v11, v12);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::DynamicArray<re::DynamicString>>::get(BOOL)::info, (const re::IntrospectionBase *)&v15);
    if (BYTE8(v15)) {
      long long v13 = v16;
    }
    else {
      long long v13 = (char *)&v15 + 9;
    }
    if (void)v15 && (BYTE8(v15)) {
      (*(void (**)(void))(*(void *)v15 + 40))();
    }
    long long v15 = *(_OWORD *)(v9 + 32);
    xmmword_268773128 = v14;
    re::StringID::destroyString((re::StringID *)v17);
    if ((a1 & 1) == 0) {
      goto LABEL_9;
    }
  }
  return &re::IntrospectionInfo<re::DynamicArray<re::DynamicString>>::get(BOOL)::info;
}

uint64_t *re::IntrospectionInfo<re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(int a1, const re::IntrospectionBase *a2)
{
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&re::IntrospectionInfo<re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(BOOL)::info);
    re::IntrospectionInfo<re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(BOOL)::info = (uint64_t)&unk_26E6CAF28;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(BOOL)::isInitialized) {
      return &re::IntrospectionInfo<re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v19);
    int v3 = re::IntrospectionInfo<re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v19);
    if (v3) {
      return &re::IntrospectionInfo<re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(BOOL)::info;
    }
    long long v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
  }
  uint64_t v6 = re::IntrospectionInfo<re::StringID>::get(1, a2);
  uint64_t v8 = (re *)re::IntrospectionInfo<re::DynamicString>::get(1, v7);
  if (re::IntrospectionInfo<re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      uint64_t v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
    }
  }
  else
  {
    uint64_t v11 = (uint64_t)v8;
    re::IntrospectionInfo<re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(BOOL)::isInitialized = 1;
    int v12 = *((_DWORD *)v8 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(BOOL)::info, 0);
    qword_268773168 = 0x3000000007;
    dword_268773170 = v12;
    word_268773174 = 0;
    *(void *)&xmmword_268773178 = 0;
    *((void *)&xmmword_268773178 + 1) = 0xFFFFFFFFLL;
    qword_268773188 = (uint64_t)v6;
    unk_268773190 = 0;
    qword_268773198 = v11;
    unk_2687731A0 = 0;
    re::IntrospectionInfo<re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(BOOL)::info = (uint64_t)&unk_26E6CAF28;
    re::IntrospectionRegistry::add(v13, v14);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(BOOL)::info, (const re::IntrospectionBase *)&v19);
    if (BYTE8(v19)) {
      long long v15 = v20;
    }
    else {
      long long v15 = (char *)&v19 + 9;
    }
    if (void)v19 && (BYTE8(v19)) {
      (*(void (**)(void))(*(void *)v19 + 40))();
    }
    long long v16 = v6[2];
    long long v18 = *(_OWORD *)(v11 + 32);
    long long v19 = v16;
    xmmword_268773178 = v17;
    re::StringID::destroyString((re::StringID *)v21);
    if ((a1 & 1) == 0) {
      goto LABEL_9;
    }
  }
  return &re::IntrospectionInfo<re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(BOOL)::info;
}

double re::internal::defaultConstruct<re::AssetMapAssetDescriptor>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(unsigned char *)(a3 + 80) = 0;
  *(_OWORD *)(a3 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_DWORD *)(a3 + 15re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(_OWORD *)(a3 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(a3 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_DWORD *)(a3 + 64) = 0;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(a3 + 156) = 0x7FFFFFFFLL;
  return result;
}

uint64_t re::internal::defaultDestruct<re::AssetMapAssetDescriptor>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(a3 + 120));
  if (*(unsigned char *)(a3 + 80)) {
    re::DynamicString::deinit((re::DynamicString *)(a3 + 88));
  }
  re::DynamicArray<unsigned long>::deinit(a3 + 40);
  return re::DynamicArray<re::DynamicString>::deinit(a3);
}

double re::internal::defaultConstructV2<re::AssetMapAssetDescriptor>(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 15re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(_OWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(a1 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(a1 + 156) = 0x7FFFFFFFLL;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::AssetMapAssetDescriptor>(uint64_t a1)
{
  re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(a1 + 120));
  if (*(unsigned char *)(a1 + 80)) {
    re::DynamicString::deinit((re::DynamicString *)(a1 + 88));
  }
  re::DynamicArray<unsigned long>::deinit(a1 + 40);
  return re::DynamicArray<re::DynamicString>::deinit(a1);
}

void *re::allocInfo_RealityFileConfigurationEntryDescriptor(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF753C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF753C0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF759C8, "RealityFileConfigurationEntryDescriptor");
    __cxa_guard_release(&qword_26AF753C0);
  }
  return &unk_26AF759C8;
}

void re::initInfo_RealityFileConfigurationEntryDescriptor(re *this, re::IntrospectionBase *a2)
{
  v14[0] = 0x45B4E41531619F2ELL;
  v14[1] = "RealityFileConfigurationEntryDescriptor";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF753C8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF753C8);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      long long v7 = re::introspect_size_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "assetIndex";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF754A8 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::IntrospectionInfo<re::FixedArray<re::DynamicString>>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "configurations";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF754B0 = v12;
      __cxa_guard_release(&qword_26AF753C8);
    }
  }
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 2;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = &qword_26AF754A8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RealityFileConfigurationEntryDescriptor>;
  *((void *)this + 11) = 0;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RealityFileConfigurationEntryDescriptor>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RealityFileConfigurationEntryDescriptor>;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::RealityFileConfigurationEntryDescriptor>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

uint64_t *re::IntrospectionInfo<re::FixedArray<re::DynamicString>>::get(int a1, const re::IntrospectionBase *a2)
{
  {
    re::IntrospectionFixedArrayBase::IntrospectionFixedArrayBase((re::IntrospectionFixedArrayBase *)&re::IntrospectionInfo<re::FixedArray<re::DynamicString>>::get(BOOL)::info);
    re::IntrospectionInfo<re::FixedArray<re::DynamicString>>::get(BOOL)::info = (uint64_t)&unk_26E6CAFC8;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::FixedArray<re::DynamicString>>::get(BOOL)::isInitialized) {
      return &re::IntrospectionInfo<re::FixedArray<re::DynamicString>>::get(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    int v3 = re::IntrospectionInfo<re::FixedArray<re::DynamicString>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    if (v3) {
      return &re::IntrospectionInfo<re::FixedArray<re::DynamicString>>::get(BOOL)::info;
    }
    long long v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
  }
  uint64_t v6 = (re *)re::IntrospectionInfo<re::DynamicString>::get(1, a2);
  if (re::IntrospectionInfo<re::FixedArray<re::DynamicString>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      long long v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
    }
  }
  else
  {
    uint64_t v9 = (uint64_t)v6;
    re::IntrospectionInfo<re::FixedArray<re::DynamicString>>::get(BOOL)::isInitialized = 1;
    int v10 = *((_DWORD *)v6 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::FixedArray<re::DynamicString>>::get(BOOL)::info, 0);
    qword_2687731C8 = 0x1800000004;
    dword_2687731D0 = v10;
    word_2687731D4 = 0;
    *(void *)&xmmword_2687731D8 = 0;
    *((void *)&xmmword_2687731D8 + 1) = 0xFFFFFFFFLL;
    qword_2687731E8 = v9;
    unk_2687731F0 = 0;
    re::IntrospectionInfo<re::FixedArray<re::DynamicString>>::get(BOOL)::info = (uint64_t)&unk_26E6CAFC8;
    re::IntrospectionRegistry::add(v11, v12);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::FixedArray<re::DynamicString>>::get(BOOL)::info, (const re::IntrospectionBase *)&v15);
    if (BYTE8(v15)) {
      long long v13 = v16;
    }
    else {
      long long v13 = (char *)&v15 + 9;
    }
    if (void)v15 && (BYTE8(v15)) {
      (*(void (**)(void))(*(void *)v15 + 40))();
    }
    long long v15 = *(_OWORD *)(v9 + 32);
    xmmword_2687731D8 = v14;
    re::StringID::destroyString((re::StringID *)v17);
    if ((a1 & 1) == 0) {
      goto LABEL_9;
    }
  }
  return &re::IntrospectionInfo<re::FixedArray<re::DynamicString>>::get(BOOL)::info;
}

void re::internal::defaultConstruct<re::RealityFileConfigurationEntryDescriptor>(uint64_t a1, uint64_t a2, void *a3)
{
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = 0;
}

void *re::internal::defaultDestruct<re::RealityFileConfigurationEntryDescriptor>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::FixedArray<re::DynamicString>::deinit((void *)(a3 + 8));
}

void *re::internal::defaultConstructV2<re::RealityFileConfigurationEntryDescriptor>(void *result)
{
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void *re::internal::defaultDestructV2<re::RealityFileConfigurationEntryDescriptor>(uint64_t a1)
{
  return re::FixedArray<re::DynamicString>::deinit((void *)(a1 + 8));
}

void *re::allocInfo_AssetMap(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF753D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF753D8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF75A40, "AssetMap");
    __cxa_guard_release(&qword_26AF753D8);
  }
  return &unk_26AF75A40;
}

void re::initInfo_AssetMap(re *this, re::IntrospectionBase *a2)
{
  v24[0] = 0x371DB3700D8;
  v24[1] = "AssetMap";
  re::StringID::destroyString((re::StringID *)v24);
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v25;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF753E0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF753E0);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      re::IntrospectionInfo<re::DynamicArray<re::SceneDescriptor>>::get(v5);
      uint64_t v6 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v6 = 1;
      *(void *)(v6 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "scenes";
      *(void *)(v6 + 16) = &qword_26AF755F0;
      *(void *)(v6 + 24) = 0;
      *(void *)(v6 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x1800000001;
      *(_DWORD *)(v6 + 40) = 0;
      *(void *)(v6 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v6 + 56) = 0;
      *(_DWORD *)(v6 + 64) = 0;
      qword_26AF75550 = v6;
      long long v7 = (re *)re::introspectionAllocator((re *)v6);
      re::IntrospectionInfo<re::DynamicArray<re::AssetMapAssetDescriptor>>::get(v7);
      uint64_t v8 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v7 + 32))(v7, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "assets";
      *(void *)(v8 + 16) = &qword_26AF75630;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x4000000002;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF75558 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::introspect_BOOL((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "certifiedFreeOfChangeSceneActions";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x6800000003;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF75560 = v12;
      long long v13 = re::introspectionAllocator((re *)v12);
      long long v15 = re::IntrospectionInfo<re::FixedArray<re::DynamicString>>::get(1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "configurationSetNames";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x7000000004;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF75568 = v16;
      long long v17 = (re *)re::introspectionAllocator((re *)v16);
      re::IntrospectionInfo<re::FixedArray<re::RealityFileConfigurationEntryDescriptor>>::get(v17);
      uint64_t v18 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v18 = 1;
      *(void *)(v18 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "configurationEntryDescriptors";
      *(void *)(v18 + 16) = &qword_26AF75670;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0xA000000005;
      *(_DWORD *)(v18 + 40) = 0;
      *(void *)(v18 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_26AF75570 = v18;
      long long v19 = re::introspectionAllocator((re *)v18);
      long long v21 = re::IntrospectionInfo<re::FixedArray<re::DynamicString>>::get(1, v20);
      uint64_t v22 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, 72, 8);
      *(_DWORD *)uint64_t v22 = 1;
      *(void *)(v22 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "defaultConfigurationNames";
      *(void *)(v22 + 16) = v21;
      *(void *)(v22 + 24) = 0;
      *(void *)(v22 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x8800000006;
      *(_DWORD *)(v22 + 40) = 0;
      *(void *)(v22 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_26AF75578 = v22;
      __cxa_guard_release(&qword_26AF753E0);
    }
  }
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x1B800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 6;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = &qword_26AF75550;
  *((void *)this + 9) = re::internal::defaultConstruct<re::AssetMap>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::AssetMap>;
  *((void *)this + 11) = re::internal::defaultRetain<re::AssetMap>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = re::internal::defaultRelease<re::AssetMap>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::AssetMap>;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::AssetMap>;
  re::IntrospectionRegistry::add(this, v3);
  long long v23 = v25;
}

void re::IntrospectionInfo<re::DynamicArray<re::SceneDescriptor>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF75460, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF75460);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF755F0);
      qword_26AF755F0 = (uint64_t)&unk_26E6CB060;
      __cxa_guard_release(&qword_26AF75460);
    }
  }
  if ((byte_26AF7532A & 1) == 0)
  {
    id v1 = (void *)qword_26AF753A0;
    if (qword_26AF753A0
      || (id v1 = re::allocInfo_SceneDescriptor(a1),
          qword_26AF753A0 = (uint64_t)v1,
          re::initInfo_SceneDescriptor((re *)v1, v2),
          (byte_26AF7532A & 1) == 0))
    {
      byte_26AF7532A = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF755F0, 0);
      qword_26AF75600 = 0x2800000003;
      dword_26AF75608 = v3;
      word_26AF7560C = 0;
      *(void *)&xmmword_26AF75610 = 0;
      *((void *)&xmmword_26AF75610 + 1) = 0xFFFFFFFFLL;
      qword_26AF75620 = (uint64_t)v1;
      qword_26AF75628 = 0;
      qword_26AF755F0 = (uint64_t)&unk_26E6CB060;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF755F0, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      long long v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SceneDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SceneDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SceneDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SceneDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::SceneDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SceneDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::SceneDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SceneDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF75610 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::AssetMapAssetDescriptor>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF75468, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF75468);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF75630);
      qword_26AF75630 = (uint64_t)&unk_26E6CB0F8;
      __cxa_guard_release(&qword_26AF75468);
    }
  }
  if ((byte_26AF7532B & 1) == 0)
  {
    id v1 = (void *)qword_26AF753B8;
    if (qword_26AF753B8
      || (id v1 = re::allocInfo_AssetMapAssetDescriptor(a1),
          qword_26AF753B8 = (uint64_t)v1,
          re::initInfo_AssetMapAssetDescriptor((re *)v1, v2),
          (byte_26AF7532B & 1) == 0))
    {
      byte_26AF7532B = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF75630, 0);
      qword_26AF75640 = 0x2800000003;
      dword_26AF75648 = v3;
      word_26AF7564C = 0;
      *(void *)&xmmword_26AF75650 = 0;
      *((void *)&xmmword_26AF75650 + 1) = 0xFFFFFFFFLL;
      qword_26AF75660 = (uint64_t)v1;
      qword_26AF75668 = 0;
      qword_26AF75630 = (uint64_t)&unk_26E6CB0F8;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF75630, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      long long v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AssetMapAssetDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AssetMapAssetDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AssetMapAssetDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AssetMapAssetDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::AssetMapAssetDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::AssetMapAssetDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::AssetMapAssetDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::AssetMapAssetDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF75650 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::IntrospectionInfo<re::FixedArray<re::RealityFileConfigurationEntryDescriptor>>::get(re *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF75470, memory_order_acquire) & 1) == 0)
  {
    a1 = (re *)__cxa_guard_acquire(&qword_26AF75470);
    if (a1)
    {
      re::IntrospectionFixedArrayBase::IntrospectionFixedArrayBase((re::IntrospectionFixedArrayBase *)&qword_26AF75670);
      qword_26AF75670 = (uint64_t)&unk_26E6CB190;
      __cxa_guard_release(&qword_26AF75470);
    }
  }
  if ((byte_26AF7532C & 1) == 0)
  {
    id v1 = (void *)qword_26AF753D0;
    if (qword_26AF753D0
      || (id v1 = re::allocInfo_RealityFileConfigurationEntryDescriptor(a1),
          qword_26AF753D0 = (uint64_t)v1,
          re::initInfo_RealityFileConfigurationEntryDescriptor((re *)v1, v2),
          (byte_26AF7532C & 1) == 0))
    {
      byte_26AF7532C = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF75670, 0);
      qword_26AF75680 = 0x1800000004;
      dword_26AF75688 = v3;
      word_26AF7568C = 0;
      *(void *)&xmmword_26AF75690 = 0;
      *((void *)&xmmword_26AF75690 + 1) = 0xFFFFFFFFLL;
      qword_26AF756A0 = (uint64_t)v1;
      qword_26AF756A8 = 0;
      qword_26AF75670 = (uint64_t)&unk_26E6CB190;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF75670, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      long long v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x18uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::RealityFileConfigurationEntryDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::RealityFileConfigurationEntryDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::RealityFileConfigurationEntryDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::RealityFileConfigurationEntryDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerFixedArray<re::RealityFileConfigurationEntryDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<re::RealityFileConfigurationEntryDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerFixedArray<re::RealityFileConfigurationEntryDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<re::RealityFileConfigurationEntryDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF75690 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

double re::internal::defaultConstruct<re::AssetMap>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::AssetMap>(a3);
}

uint64_t re::internal::defaultDestruct<re::AssetMap>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::AssetMap>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::introspect_AssetMap(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AssetMap", (uint64_t (*)(re::internal *))re::allocInfo_AssetMap, (re::IntrospectionBase *(*)(void))re::initInfo_AssetMap, (void (*)(re::IntrospectionBase *))&unk_26AF753E8, this);
}

void *re::allocInfo_RealityFileVersionInfo(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF753F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF753F0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF75AB8, "RealityFileVersionInfo");
    __cxa_guard_release(&qword_26AF753F0);
  }
  return &unk_26AF75AB8;
}

void re::initInfo_RealityFileVersionInfo(re *this, re::IntrospectionBase *a2)
{
  v17[0] = 0x3B095B3399DAFC74;
  v17[1] = "RealityFileVersionInfo";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v18;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF753F8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF753F8);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      long long v7 = re::IntrospectionInfo<re::DynamicString>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "id";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF754D0 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      long long v11 = re::IntrospectionInfo<re::DynamicString>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "frameworkVersion";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x2000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF754D8 = v12;
      long long v13 = (re *)re::introspectionAllocator((re *)v12);
      re::introspect_RealityFilePlatform(v13, v14);
      uint64_t v15 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "originPlatform";
      *(void *)(v15 + 16) = &qword_26AF756B0;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x4000000003;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF754E0 = v15;
      __cxa_guard_release(&qword_26AF753F8);
    }
  }
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x4800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 3;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = &qword_26AF754D0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RealityFileVersionInfo>;
  *((void *)this + 11) = 0;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RealityFileVersionInfo>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RealityFileVersionInfo>;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::RealityFileVersionInfo>;
  re::IntrospectionRegistry::add(this, v3);
  long long v16 = v18;
}

void *re::internal::defaultConstruct<re::RealityFileVersionInfo>(_anonymous_namespace_ *a1, uint64_t a2, _OWORD *a3)
{
  int v3 = a3;
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v3, 0);
  v3[2] = 0u;
  v3[3] = 0u;
  v3 += 2;
  double result = re::DynamicString::setCapacity(v3, 0);
  *((_DWORD *)v3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 2;
  return result;
}

double re::internal::defaultDestruct<re::RealityFileVersionInfo>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString::deinit((re::DynamicString *)(a3 + 32));
  return re::DynamicString::deinit((re::DynamicString *)a3);
}

void *re::internal::defaultConstructV2<re::RealityFileVersionInfo>(_anonymous_namespace_ *a1)
{
  id v1 = a1;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  uint64_t v2 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v1, 0);
  *((_OWORD *)v1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *((_OWORD *)v1 + 3) = 0u;
  id v1 = (_anonymous_namespace_ *)((char *)v1 + 32);
  double result = re::DynamicString::setCapacity(v1, 0);
  *((_DWORD *)v1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 2;
  return result;
}

double re::internal::defaultDestructV2<re::RealityFileVersionInfo>(uint64_t a1)
{
  re::DynamicString::deinit((re::DynamicString *)(a1 + 32));
  return re::DynamicString::deinit((re::DynamicString *)a1);
}

void re::introspect_RealityFilePlatform(re *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF75408, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF75408);
    if (v24)
    {
      long long v25 = re::introspectionAllocator(v24);
      int v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)int v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = "RealityFilePlatformNone";
      qword_26AF75580 = (uint64_t)v26;
      long long v27 = re::introspectionAllocator(v26);
      long long v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)long long v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = "RealityFilePlatformAll";
      qword_26AF75588 = (uint64_t)v28;
      uint64_t v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *((void *)v30 + 1) = 2;
      *((void *)v30 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = "RealityFilePlatformIOS";
      qword_26AF75590 = (uint64_t)v30;
      uint64_t v31 = re::introspectionAllocator(v30);
      uint64_t v32 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 24, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *((void *)v32 + 1) = 3;
      *((void *)v32 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = "RealityFilePlatformMacOS";
      qword_26AF75598 = (uint64_t)v32;
      unsigned int v33 = re::introspectionAllocator(v32);
      int v34 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 24, 8);
      *(_DWORD *)int v34 = 1;
      *((void *)v34 + 1) = 4;
      *((void *)v34 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = "RealityFilePlatformVisionOS";
      qword_26AF755A0 = (uint64_t)v34;
      int v35 = re::introspectionAllocator(v34);
      uint64_t v36 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 24, 8);
      *(_DWORD *)uint64_t v36 = 2;
      *(void *)(v36 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 4;
      *(void *)(v36 + 16) = "RealityFilePlatformXROS";
      qword_26AF755A8 = v36;
      __cxa_guard_release(&qword_26AF75408);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF75410, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF75410))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF756B0, "RealityFilePlatform", 4, 4, 1, 1);
    qword_26AF756B0 = (uint64_t)&unk_26E715E00;
    qword_26AF756F0 = (uint64_t)&re::introspect_RealityFilePlatform(BOOL)::enumTable;
    dword_26AF756C0 = 9;
    __cxa_guard_release(&qword_26AF75410);
  }
  if ((_MergedGlobals_44 & 1) == 0)
  {
    _MergedGlobals_44 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF756B0, a2);
    uint64_t v38 = 0xCED4E9B28AD038BELL;
    uint64_t v39 = "RealityFilePlatform";
    v42[0] = 0x607DD0F01DCLL;
    v42[1] = "uint32_t";
    uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v42);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v42);
      uint64_t v4 = (unsigned int *)qword_26AF756F0;
      v41[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v42, &v38, 1, 1, (uint64_t)v41);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  uint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v40.var0 = 2 * v10;
            v40.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v42, v14, &v40);
            re::StringID::destroyString((re::StringID *)&v40);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              long long v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v40.var0 = 2 * v18;
              v40.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v42, v22, &v40);
              re::StringID::destroyString((re::StringID *)&v40);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v42, v23);
      xmmword_26AF756D0 = (__int128)v40;
      re::StringID::destroyString((re::StringID *)&v38);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v42);
      re::internal::assertLog((re::internal *)5, v37, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "RealityFilePlatform", v38, v39);
      _os_crash();
      __break(1u);
    }
  }
}

void *re::allocInfo_RealityFileHeader(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF75418, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF75418))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF75B30, "RealityFileHeader");
    __cxa_guard_release(&qword_26AF75418);
  }
  return &unk_26AF75B30;
}

void re::initInfo_RealityFileHeader(re *this, re::IntrospectionBase *a2)
{
  v26[0] = 0x6061B851532742F2;
  v26[1] = "RealityFileHeader";
  re::StringID::destroyString((re::StringID *)v26);
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v27;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF75420, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF75420);
    if (v4)
    {
      long long v5 = (re *)re::introspectionAllocator(v4);
      unint64_t v6 = v5;
      long long v7 = (re *)qword_26AF75400;
      if (!qword_26AF75400)
      {
        long long v7 = (re *)re::allocInfo_RealityFileVersionInfo(v5);
        qword_26AF75400 = (uint64_t)v7;
        re::initInfo_RealityFileVersionInfo(v7, v8);
      }
      uint64_t v9 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "versionInfo";
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x1800000001;
      *(_DWORD *)(v9 + 40) = 0;
      *(void *)(v9 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF75528 = v9;
      uint64_t v10 = re::introspectionAllocator((re *)v9);
      uint64_t v12 = re::introspect_int((re *)1, v11);
      uint64_t v13 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "minVersion";
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x6000000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_26AF75530 = v13;
      uint64_t v14 = re::introspectionAllocator((re *)v13);
      uint64_t v16 = re::IntrospectionInfo<re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(1, v15);
      uint64_t v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "metadata";
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x6800000004;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_26AF75538 = v17;
      uint64_t v18 = (re *)re::introspectionAllocator((re *)v17);
      re::introspect_RealityFilePlatform(v18, v19);
      uint64_t v20 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "targetPlatform";
      *(void *)(v20 + 16) = &qword_26AF756B0;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x9800000005;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF75540 = v20;
      int v21 = re::introspectionAllocator((re *)v20);
      uint64_t v23 = re::introspect_int((re *)1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "restrictedSeedVersion";
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x6400000006;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF75548 = v24;
      __cxa_guard_release(&qword_26AF75420);
    }
  }
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 5;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = &qword_26AF75528;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RealityFileHeader>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RealityFileHeader>;
  *((void *)this + 11) = re::internal::defaultRetain<re::RealityFileHeader>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = re::internal::defaultRelease<re::RealityFileHeader>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RealityFileHeader>;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::RealityFileHeader>;
  re::IntrospectionRegistry::add(this, v3);
  long long v25 = v27;
}

uint64_t re::internal::defaultConstruct<re::RealityFileHeader>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::RealityFileHeader>(a3);
}

uint64_t re::internal::defaultDestruct<re::RealityFileHeader>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::RealityFileHeader>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::introspect_RealityFileHeader(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RealityFileHeader", (uint64_t (*)(re::internal *))re::allocInfo_RealityFileHeader, (re::IntrospectionBase *(*)(void))re::initInfo_RealityFileHeader, (void (*)(re::IntrospectionBase *))&unk_26AF75428, this);
}

void *re::allocInfo_DeduplicationInformation(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF75430, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF75430))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF75BA8, "DeduplicationInformation");
    __cxa_guard_release(&qword_26AF75430);
  }
  return &unk_26AF75BA8;
}

void re::initInfo_DeduplicationInformation(re *this, re::IntrospectionBase *a2)
{
  v10[0] = 0x60185639ABC815FELL;
  v10[1] = "DeduplicationInformation";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v11;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF75440, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF75440);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      long long v7 = re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "originalAssetToDuplicates";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF75438 = v8;
      __cxa_guard_release(&qword_26AF75440);
    }
  }
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 1;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = &qword_26AF75438;
  *((void *)this + 9) = re::internal::defaultConstruct<re::DeduplicationInformation>;
  *((void *)this + 11) = 0;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::DeduplicationInformation>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::DeduplicationInformation>;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::DeduplicationInformation>;
  re::IntrospectionRegistry::add(this, v3);
  long long v9 = v11;
}

uint64_t *re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(int a1, const re::IntrospectionBase *a2)
{
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info);
    re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info = (uint64_t)&unk_26E6CB228;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::isInitialized) {
      return &re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v19);
    int v3 = re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v19);
    if (v3) {
      return &re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info;
    }
    long long v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
  }
  unint64_t v6 = re::IntrospectionInfo<re::DynamicString>::get(1, a2);
  uint64_t v8 = re::IntrospectionInfo<re::DynamicArray<re::DynamicString>>::get(1, v7);
  if (re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      long long v9 = re::introspectionSharedMutex((re *)v8);
      std::__shared_mutex_base::unlock(v9);
    }
  }
  else
  {
    uint64_t v11 = (uint64_t)v8;
    re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::isInitialized = 1;
    int v12 = *((_DWORD *)v8 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info, 0);
    qword_268773218 = 0x3000000007;
    dword_268773220 = v12;
    word_268773224 = 0;
    *(void *)&xmmword_268773228 = 0;
    *((void *)&xmmword_268773228 + 1) = 0xFFFFFFFFLL;
    qword_268773238 = (uint64_t)v6;
    unk_268773240 = 0;
    qword_268773248 = v11;
    unk_268773250 = 0;
    re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info = (uint64_t)&unk_26E6CB228;
    re::IntrospectionRegistry::add(v13, v14);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info, (const re::IntrospectionBase *)&v19);
    if (BYTE8(v19)) {
      uint64_t v15 = v20;
    }
    else {
      uint64_t v15 = (char *)&v19 + 9;
    }
    if (void)v19 && (BYTE8(v19)) {
      (*(void (**)(void))(*(void *)v19 + 40))();
    }
    long long v16 = v6[2];
    long long v18 = *(_OWORD *)(v11 + 32);
    long long v19 = v16;
    xmmword_268773228 = v17;
    re::StringID::destroyString((re::StringID *)v21);
    if ((a1 & 1) == 0) {
      goto LABEL_9;
    }
  }
  return &re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(BOOL)::info;
}

double re::internal::defaultConstruct<re::DeduplicationInformation>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(a3 + 36) = 0x7FFFFFFFLL;
  return result;
}

double re::internal::defaultDestruct<re::DeduplicationInformation>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a3);
}

double re::internal::defaultConstructV2<re::DeduplicationInformation>(uint64_t a1)
{
  *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(a1 + 36) = 0x7FFFFFFFLL;
  return result;
}

uint64_t re::introspect_DeduplicationInformation(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DeduplicationInformation", (uint64_t (*)(re::internal *))re::allocInfo_DeduplicationInformation, (re::IntrospectionBase *(*)(void))re::initInfo_DeduplicationInformation, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::DeduplicationInformation>, this);
}

re::RealityFile *re::RealityFile::RealityFile(re::RealityFile *this, re *a2)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)this = &unk_26E6CABC8;
  re::filePathWithURL(a2, (re::RealityFile *)((char *)this + 24));
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  re::DynamicString::setCapacity((void *)this + 7, 0);
  *((void *)this + 11) = 0;
  *((_DWORD *)this + 24) = 1;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  unint64_t v5 = *((void *)this + 4);
  if (v5) {
    unint64_t v6 = v5 >> 1;
  }
  else {
    unint64_t v6 = v5 >> 1;
  }
  if (!v6)
  {
    re::DynamicString::format((re::DynamicString *)"Failed to create a file path from URL %s.", (re::DynamicString *)&v8, a2);
    re::DynamicString::operator=((re::RealityFile *)((char *)this + 56), (re::DynamicString *)&v8);
    if (v8)
    {
      if (v9) {
        (*(void (**)(void))(*(void *)v8 + 40))();
      }
    }
  }
  return this;
}

re::RealityFile *re::RealityFile::RealityFile(re::RealityFile *this, id *a2)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)this = &unk_26E6CABC8;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  unint64_t v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)this + 3, 0);
  *(_OWORD *)((char *)this + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  re::DynamicString::setCapacity((void *)this + 7, 0);
  *((void *)this + 11) = *a2;
  *((_DWORD *)this + 24) = 2;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  return this;
}

void re::RealityFile::~RealityFile(re::RealityFile *this)
{
  *(void *)this = &unk_26E6CABC8;
  uint64_t v2 = *((void *)this + 16);
  if (v2)
  {

    *((void *)this + 16) = 0;
  }
  uint64_t v3 = *((void *)this + 15);
  if (v3)
  {

    *((void *)this + 15) = 0;
  }
  uint64_t v4 = *((void *)this + 14);
  if (v4)
  {

    *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  }
  uint64_t v5 = *((void *)this + 13);
  if (v5)
  {

    *((void *)this + 13) = 0;
  }

  re::DynamicString::deinit((re::RealityFile *)((char *)this + 56));
  re::DynamicString::deinit((re::RealityFile *)((char *)this + 24));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::RealityFile::~RealityFile(this);
  JUMPOUT(0x237DBCBD0);
}

void re::RealityFile::makeByOpeningFileAtURL(re::RealityFile *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = this;
  if (this)
  {
    re::make::shared::object<re::RealityFile,char const*&>((re *)&v14, &v13);
    re::RealityFile::init(v13, v4, (uint64_t)&v9);
    if ((_BYTE)v9)
    {
      uint64_t v5 = v13;
      if (v13) {
        unint64_t v6 = (char *)v13 + 8;
      }
      *(unsigned char *)a2 = 1;
      *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v5;
    }
    else
    {
      id v8 = v10;
      *(unsigned char *)a2 = 0;
      *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v8;
    }
    if (v13) {
  }
    }
  else
  {
    id v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    re::DynamicString::setCapacity(&v9, 0);
    long long v7 = v13;
    uint64_t v13 = 0;
    *(unsigned char *)a2 = 0;
    *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7;

    if (v9 && (v10 & 1) != 0) {
      (*(void (**)(void))(*v9 + 40))();
    }
  }
}

uint64_t re::RealityFile::init@<X0>(re::RealityFile *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v7 = (unint64_t)this;
  uint64_t v231 = *MEMORY[0x263EF8340];
  int v9 = *((_DWORD *)this + 24);
  if (v9 == 1)
  {
    unint64_t v11 = *((void *)this + 4);
    unint64_t v12 = v11 >> 1;
    if ((v11 & 1) == 0) {
      unint64_t v12 = v11 >> 1;
    }
    if (!v12)
    {
      if (*((unsigned char *)this + 64)) {
        uint64_t v14 = (const char *)*((void *)this + 9);
      }
      else {
        uint64_t v14 = (char *)this + 65;
      }
      unint64_t v6 = (unint64_t)values[0];
      values[0] = 0;
      v205[0] = 0;
      unint64_t v206 = v6;

      if (keys[0] && ((uint64_t)keys[1] & 1) != 0) {
        (*(void (**)(void))(*(void *)keys[0] + 40))();
      }
      goto LABEL_32;
    }
    if (v11) {
      uint64_t v13 = (re::RealityArchive *)*((void *)this + 5);
    }
    else {
      uint64_t v13 = (re::RealityFile *)((char *)this + 33);
    }
    id v10 = (uint64_t *)(v7 + 120);
    re::RealityArchive::makeByOpeningFileAtPath(v13, *(const char **)(v7 + 120), (uint64_t)keys);
  }
  else
  {
    if (v9 != 2) {
      goto LABEL_375;
    }
    id v10 = (uint64_t *)((char *)this + 120);
    re::RealityArchive::makeByReadingBuffer((id *)this + 11, *((const re::Data **)this + 15), (uint64_t)keys);
  }
  if (LOBYTE(keys[0]))
  {
    if (!*(void *)(v7 + 128)) {
      re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v7 + 128), (uint64_t)keys[1]);
    }
    if (!*v10) {
      re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v10, *((void *)keys[1] + 4));
    }
    unint64_t v6 = (unint64_t)keys[1];
    keys[1] = 0;
    int v15 = 1;
    v205[0] = 1;
    unint64_t v206 = v6;
  }
  else
  {
    unint64_t v6 = (unint64_t)values[0];
    values[0] = 0;
    v205[0] = 0;
    unint64_t v206 = v6;

    int v15 = 0;
  }
  long long v16 = re::Result<re::SharedPtr<re::RealityArchive>,re::DynamicString>::~Result((re::DynamicString *)keys);
  if (!v15)
  {
LABEL_32:
    id v25 = (id)v6;
    *(unsigned char *)a3 = 0;
    *(void *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v25;
    return re::Result<re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::WrappedError>::~Result((uint64_t)v205);
  }
  unint64_t v4 = (unint64_t)&v217;
  uint64_t v217 = 0;
  int valuePtr = 0;
  memset(v211, 0, sizeof(v211));
  re::DynamicString::setCapacity(v211, 0);
  re::RealityArchive::newDataByLoadingEntryWithName((re::RealityArchive *)v6, "header.json", (uint64_t)v224);
  if (v224[0])
  {
    unint64_t v5 = *(void *)&v224[8];
    unint64_t v3 = (unint64_t)&qword_268772000;
    goto LABEL_23;
  }
  long long v19 = keys[0];
  keys[0] = 0;

  int v20 = 0;
  while (1)
  {
    if (!v224[0] && *(void *)&v224[8] && (v224[16] & 1) != 0) {
      (*(void (**)(void))(**(void **)&v224[8] + 40))();
    }
    if (*(void *)&v211[0] && (BYTE8(v211[0]) & 1) != 0) {
      (*(void (**)(void))(**(void **)&v211[0] + 40))();
    }
    if (v217) {

    }
    if (!v20)
    {
      uint64_t v58 = v19;
      *(unsigned char *)a3 = 0;
      *(void *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v58;

      return re::Result<re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::WrappedError>::~Result((uint64_t)v205);
    }
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v7 + 104), (uint64_t)v19);
    re::RealityArchive::newDataByLoadingEntryWithName((re::RealityArchive *)v6, "assetMap.json", (uint64_t)&v213);
    if (!(_BYTE)v213)
    {
      uint64_t v59 = (char *)keys[0];
      keys[0] = 0;

      int v60 = 0;
      goto LABEL_341;
    }
    CFDataRef v55 = (const __CFData *)cf;
    {
      if (v54)
      {
        re::introspect<re::AssetMap>(void)::info = (_UNKNOWN *)re::internal::getOrCreateInfo((re::internal *)"AssetMap", (uint64_t (*)(re::internal *))re::allocInfo_AssetMap, (re::IntrospectionBase *(*)(void))re::initInfo_AssetMap, (void (*)(re::IntrospectionBase *))&unk_26AF753E8, 0);
      }
    }
    *(_OWORD *)(v4 + 96) = *((_OWORD *)re::introspect<re::AssetMap>(void)::info + 2);
    if (!*(void *)v223)
    {
      long long v63 = *(_OWORD *)(v4 + 192);
      LOBYTE(v211[0]) = 0;
      *(_OWORD *)((char *)v211 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v63;
      *((void **)&v211[1] + 1) = keys[2];
      long long v212 = keys[3];
      CFRelease(cf);
LABEL_243:
      uint64_t v59 = (char *)keys[0];
      keys[0] = 0;

      int v60 = 0;
      goto LABEL_335;
    }
    long long v201 = (re::RealityArchive *)v6;
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)v209);
    re::TypeRegistry::typeInfo(*(re **)v223, (re **)v223, keys);
    unint64_t v6 = (unint64_t)&keys[1];
    uint64_t v56 = (_anonymous_namespace_ *)re::TypeInfo::TypeInfo((uint64_t)v224, (uint64_t)&keys[1]);
    unint64_t v3 = LOBYTE(keys[0]);
    if (LOBYTE(keys[0]))
    {
      uint64_t v57 = keys[1];
      LOBYTE(values[0]) = 1;
      LOBYTE(v211[0]) = 1;
      *((void **)&v211[0] + 1) = keys[1];
      unint64_t v5 = (unint64_t)&v217;
    }
    else
    {
      unint64_t v64 = v19;
      uint64_t v65 = *((void *)&v228 + 1);
      unint64_t v66 = keys[3];
      unint64_t v4 = v228;
      LOBYTE(values[0]) = 0;
      unint64_t v5 = (unint64_t)&v217;
      *(_OWORD *)&values[1] = *(_OWORD *)&keys[1];
      uint64_t v222 = v229;
      values[3] = keys[3];
      long long v221 = v228;
      re::DynamicString::DynamicString((re::DynamicString *)keys, (const re::DynamicString *)&values[3]);
      LOBYTE(v211[0]) = 0;
      uint64_t v57 = keys[0];
      *((void **)&v211[0] + 1) = keys[0];
      long long v212 = keys[3];
      v211[1] = *(_OWORD *)&keys[1];
      if (v66 && (v4 & 1) != 0) {
        (*(void (**)(void *, uint64_t))(*(void *)v66 + 40))(v66, v65);
      }
      long long v19 = v64;
    }
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)v209);
    CFRelease(cf);
    if (!v3) {
      goto LABEL_243;
    }
    long long v197 = v19;
    unint64_t v203 = v7;
    uint64_t v204 = a3;
    LODWORD(v221) = 0;
    memset(values, 0, sizeof(values));
    *(void *)((char *)&v221 + 4) = 0x7FFFFFFFLL;
    *(void *)long long v209 = 0;
    if (v57[25])
    {
      unint64_t v3 = 0;
      unint64_t v6 = (unint64_t)(v57 + 34);
      unint64_t v4 = 0x7FFFFFFFLL;
      a3 = 48;
      do
      {
        uint64_t v68 = *(void *)(v57[27] + 8 * v3);
        unsigned int v69 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(void *)v68 + 40))(v68);
        unint64_t v70 = re::Hash<re::DynamicString>::operator()((uint64_t)v224, (uint64_t)keys);
        unint64_t v7 = v70;
        if (LODWORD(values[3]))
        {
          unint64_t v71 = v70 % LODWORD(values[3]);
          uint64_t v72 = *((unsigned int *)values[1] + v71);
          if (v72 != 0x7FFFFFFF)
          {
            uint64_t v73 = values[2];
            while (!re::DynamicString::operator==((uint64_t)&v73[12 * v72 + 4], (uint64_t)keys))
            {
              uint64_t v72 = v73[12 * v72 + 2] & 0x7FFFFFFF;
              if (v72 == 0x7FFFFFFF) {
                goto LABEL_124;
              }
            }
            goto LABEL_125;
          }
        }
        else
        {
          LODWORD(v71) = 0;
        }
LABEL_124:
        re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove((uint64_t)values, v71, v7, (uint64_t)keys, keys);
        ++DWORD2(v221);
LABEL_125:
        if (keys[0] && ((uint64_t)keys[1] & 1) != 0) {
          (*(void (**)(void))(*(void *)keys[0] + 40))();
        }
        unint64_t v5 = v57[25];
        if (v5 <= v3)
        {
          *(void *)long long v223 = 0;
          long long v229 = 0u;
          long long v230 = 0u;
          long long v228 = 0u;
          memset(keys, 0, sizeof(keys));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v224 = 136315906;
          *(void *)&v224[4] = "operator[]";
          *(_WORD *)&v224[12] = 1024;
          *(_DWORD *)&v224[14] = 789;
          *(_WORD *)&v224[18] = 2048;
          *(void *)&v224[20] = v3;
          __int16 v225 = 2048;
          *(void *)uint64_t v226 = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_370:
          *(void *)long long v223 = 0;
          long long v229 = 0u;
          long long v230 = 0u;
          long long v228 = 0u;
          memset(keys, 0, sizeof(keys));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v224 = 136315906;
          *(void *)&v224[4] = "operator[]";
          *(_WORD *)&v224[12] = 1024;
          *(_DWORD *)&v224[14] = 789;
          *(_WORD *)&v224[18] = 2048;
          *(void *)&v224[20] = v3;
          __int16 v225 = 2048;
          *(void *)uint64_t v226 = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_371;
        }
        uint64_t v74 = *(void *)(v57[27] + 8 * v3);
        keys[0] = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v74 + 40))(v74);
        re::HashTable<char const*,unsigned long,re::CaseInsensitiveStringHash,re::CaseInsensitiveStringEqualTo,true,false>::add<unsigned long &>((uint64_t)(v57 + 28), (char **)keys, v209);
        unint64_t v5 = v57[25];
        if (v5 <= v3) {
          goto LABEL_370;
        }
        uint64_t v75 = *(void *)(v57[27] + 8 * v3);
        keys[0] = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v75 + 32))(v75);
        re::HashTable<char const*,unsigned long,re::CaseInsensitiveStringHash,re::CaseInsensitiveStringEqualTo,true,false>::add<unsigned long &>((uint64_t)(v57 + 34), (char **)keys, v209);
        *(void *)long long v209 = ++v3;
      }
      while (v3 < v57[25]);
    }
    uint64_t v76 = v57[5];
    if (v76)
    {
      unint64_t v6 = v57[7];
      unint64_t v3 = v6 + 200 * v76;
      do
      {
        uint64_t v77 = (re *)re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add((uint64_t)values, (re::DynamicString *)(v6 + 24));
        uint64_t v78 = *(void *)(v6 + 176);
        if (v78)
        {
          unint64_t v4 = 40 * v78;
          unint64_t v5 = *(void *)(v6 + 192) + 8;
          do
          {
            uint64_t v77 = (re *)re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add((uint64_t)values, (re::DynamicString *)v5);
            v5 += 40;
            v4 -= 40;
          }
          while (v4);
        }
        uint64_t v79 = re::globalAllocators(v77);
        unint64_t v80 = (re::SceneDescriptor *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v79[2] + 32))(v79[2], 200, 8);
        keys[0] = re::SceneDescriptor::SceneDescriptor(v80, (const re::SceneDescriptor *)v6);
        re::DynamicArray<re::SharedPtr<re::internal::AssetReference>>::add((_anonymous_namespace_ *)(v57 + 23), keys);
        if (keys[0]) {

        }
        uint64_t v81 = *(void *)(v57[27] + 8 * v57[25] - 8);
        keys[0] = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v81 + 40))(v81);
        *(void *)long long v224 = v57[25] - 1;
        re::HashTable<char const*,unsigned long,re::CaseInsensitiveStringHash,re::CaseInsensitiveStringEqualTo,true,false>::add((uint64_t)(v57 + 28), (char **)keys, v224);
        uint64_t v82 = *(void *)(v57[27] + 8 * v57[25] - 8);
        keys[0] = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v82 + 32))(v82);
        *(void *)long long v224 = v57[25] - 1;
        uint64_t v67 = re::HashTable<char const*,unsigned long,re::CaseInsensitiveStringHash,re::CaseInsensitiveStringEqualTo,true,false>::add((uint64_t)(v57 + 34), (char **)keys, v224);
        v6 += 200;
      }
      while (v6 != v3);
    }
    uint64_t v83 = v57[10];
    if (v83) {
      break;
    }
LABEL_155:
    uint64_t v90 = (_anonymous_namespace_ *)re::RealityArchive::entryNames(v201, (uint64_t)keys);
    *(void *)&v226[2] = 0;
    memset(v224, 0, sizeof(v224));
    if (keys[2])
    {
      unint64_t v3 = 32 * (uint64_t)keys[2];
      unint64_t v4 = v228 + 16;
      unint64_t v6 = 1702064993;
      do
      {
        unint64_t v91 = *(void *)(v4 - 8);
        unint64_t v92 = v91 >> 1;
        if ((v91 & 1) == 0) {
          unint64_t v92 = v91 >> 1;
        }
        if (v92 >= 7)
        {
          uint64_t v93 = (v91 & 1) != 0 ? *(_DWORD **)v4 : (_DWORD *)(v4 - 7);
          BOOL v94 = *v93 == 1702064993 && *(_DWORD *)((char *)v93 + 3) == 796095589;
          BOOL v95 = !v94;
          unint64_t v5 = v92 - 7;
          if (v92 != 7 && !v95)
          {
            uint64_t v97 = (char *)v93 + 7;
            re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)v224, (re::DynamicString *)v223);
            uint64_t v90 = *(_anonymous_namespace_ **)v223;
            if (*(void *)v223)
            {
              if (v223[8]) {
                uint64_t v90 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)v223 + 40))();
              }
            }
          }
        }
        v4 += 32;
        v3 -= 32;
      }
      while (v3);
    }
    uint64_t v98 = re::DynamicArray<re::DynamicString>::deinit((uint64_t)keys);
    if (*(void *)&v224[16])
    {
      a3 = *(void *)&v226[2];
      unint64_t v6 = (unint64_t)(v57 + 28);
      unint64_t v3 = 32 * *(void *)&v224[16];
      do
      {
        uint64_t v98 = re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::contains((uint64_t)values, a3);
        if ((v98 & 1) == 0)
        {
          if (*(unsigned char *)(a3 + 8)) {
            unint64_t v5 = *(void *)(a3 + 16);
          }
          else {
            unint64_t v5 = a3 + 9;
          }
          uint64_t v99 = re::globalAllocators((re *)v98);
          uint64_t v100 = (re::AssetDescriptor *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v99[2] + 32))(v99[2], 88, 8);
          keys[0] = re::AssetDescriptor::AssetDescriptor(v100, (const char *)v5, 0);
          re::DynamicArray<re::SharedPtr<re::internal::AssetReference>>::add((_anonymous_namespace_ *)(v57 + 23), keys);
          if (keys[0]) {

          }
          uint64_t v101 = *(void *)(v57[27] + 8 * v57[25] - 8);
          keys[0] = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v101 + 40))(v101);
          *(void *)long long v223 = v57[25] - 1;
          re::HashTable<char const*,unsigned long,re::CaseInsensitiveStringHash,re::CaseInsensitiveStringEqualTo,true,false>::add((uint64_t)(v57 + 28), (char **)keys, v223);
          uint64_t v102 = *(void *)(v57[27] + 8 * v57[25] - 8);
          keys[0] = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v102 + 32))(v102);
          *(void *)long long v223 = v57[25] - 1;
          re::HashTable<char const*,unsigned long,re::CaseInsensitiveStringHash,re::CaseInsensitiveStringEqualTo,true,false>::add((uint64_t)(v57 + 34), (char **)keys, v223);
          uint64_t v98 = re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add((uint64_t)values, (re::DynamicString *)a3);
        }
        a3 += 32;
        v3 -= 32;
      }
      while (v3);
    }
    uint64_t v103 = v57[10];
    if (v103)
    {
      int v104 = (void *)v57[12];
      a3 = (uint64_t)&v104[21 * v103];
      __int16 v105 = v57 + 40;
      do
      {
        if (!v104[2]) {
          goto LABEL_363;
        }
        unint64_t v6 = v104[4];
        *(void *)&long long v228 = 0;
        memset(keys, 0, 28);
        uint64_t v106 = v104[7];
        if (v106)
        {
          __int16 v107 = (unint64_t *)v104[9];
          unint64_t v4 = 8 * v106;
          while (1)
          {
            re::AssetMap::assetDescriptorFromAssetsIndex((re::AssetMap *)v223, (re::AssetMap *)v57, *v107);
            if (!v223[0]) {
              break;
            }
            uint64_t v109 = keys[2];
            if (keys[2] >= keys[1])
            {
              long long v110 = (char *)keys[2] + 1;
              if (keys[1] < (char *)keys[2] + 1)
              {
                if (keys[0])
                {
                  unint64_t v111 = 2 * (uint64_t)keys[1];
                  if (!keys[1]) {
                    unint64_t v111 = 8;
                  }
                  if (v111 <= (unint64_t)v110) {
                    long long v112 = (char *)keys[2] + 1;
                  }
                  else {
                    long long v112 = (char *)v111;
                  }
                  re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(keys, (unint64_t)v112);
                }
                else
                {
                  re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(keys, (unint64_t)v110);
                  ++LODWORD(keys[3]);
                }
              }
              uint64_t v109 = keys[2];
            }
            uint64_t v113 = *(void *)&v223[8];
            *(void *)(v228 + 8 * (void)v109) = *(void *)&v223[8];
            if (v113)
            {
              id v114 = (id)(v113 + 8);
              uint64_t v109 = keys[2];
            }
            keys[2] = (char *)v109 + 1;
            ++LODWORD(keys[3]);
            re::Result<re::SharedPtr<re::RealityArchive>,re::DynamicString>::~Result((re::DynamicString *)v223);
            ++v107;
            v4 -= 8;
            if (!v4) {
              goto LABEL_208;
            }
          }
          re::DynamicString::DynamicString((re::DynamicString *)&v217, (const re::DynamicString *)&v223[8]);
          v209[0] = 0;
          *(void *)&v209[8] = v217;
          int v210 = v219;
          *(_OWORD *)&v209[16] = v218;
          re::Result<re::SharedPtr<re::RealityArchive>,re::DynamicString>::~Result((re::DynamicString *)v223);
          re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)keys);
          goto LABEL_245;
        }
LABEL_208:
        unint64_t v115 = re::Hash<re::DynamicString>::operator()((uint64_t)v223, v6);
        unint64_t v116 = v115;
        if (*v105)
        {
          unint64_t v5 = v115 % *((unsigned int *)v57 + 86);
          unint64_t v3 = *(unsigned int *)(v57[41] + 4 * v5);
          if (v3 != 0x7FFFFFFF)
          {
            unint64_t v4 = v57[42];
            while (!re::DynamicString::operator==(v4 + 88 * v3 + 16, v6))
            {
              unint64_t v3 = *(_DWORD *)(v4 + 88 * v3 + 8) & 0x7FFFFFFF;
              if (v3 == 0x7FFFFFFF) {
                goto LABEL_215;
              }
            }
            goto LABEL_235;
          }
        }
        else
        {
          unint64_t v5 = 0;
        }
LABEL_215:
        unint64_t v3 = *((unsigned int *)v57 + 89);
        if (v3 == 0x7FFFFFFF)
        {
          unint64_t v3 = *((unsigned int *)v57 + 88);
          int v117 = v3;
          if (v3 == *((_DWORD *)v57 + 86))
          {
            re::HashTable<re::DynamicString,re::DynamicArray<re::SharedPtr<re::AssetDescriptorBase const>>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity((uint64_t)v105, 2 * *((_DWORD *)v57 + 87));
            unint64_t v5 = v116 % *((unsigned int *)v57 + 86);
            int v117 = *((_DWORD *)v57 + 88);
          }
          *((_DWORD *)v57 + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v117 + 1;
          uint64_t v118 = v57[42];
          int v119 = *(_DWORD *)(v118 + 88 * v3 + 8);
        }
        else
        {
          uint64_t v118 = v57[42];
          int v119 = *(_DWORD *)(v118 + 88 * v3 + 8);
          *((_DWORD *)v57 + 89) = v119 & 0x7FFFFFFF;
        }
        *(_DWORD *)(v118 + 88 * v3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v119 | 0x80000000;
        uint64_t v120 = v57[42] + 88 * v3;
        *(_DWORD *)(v120 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(v120 + 8) & 0x80000000 | *(_DWORD *)(v57[41] + 4 * v5);
        *(void *)(v57[42] + 88 * v3) = v116;
        re::DynamicString::DynamicString((re::DynamicString *)(v57[42] + 88 * v3 + 16), (const re::DynamicString *)v6);
        uint64_t v121 = v57[42];
        uint64_t v122 = v121 + 88 * v3;
        *(void *)(v122 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
        uint64_t v123 = v122 + 48;
        *(void *)(v123 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
        uint64_t v124 = (uint64_t **)(v123 + 32);
        *(void *)(v123 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
        *(void *)(v123 + 16) = 0;
        *(_DWORD *)(v123 + 24) = 0;
        if (keys[0])
        {
          uint64_t v199 = a3;
          uint64_t v125 = v121 + 88 * v3;
          int v126 = keys[2];
          *(void **)uint64_t v123 = keys[0];
          re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)v123, (unint64_t)v126);
          uint64_t v127 = *(void **)(v125 + 64);
          unint64_t v4 = v125 + 64;
          ++*(_DWORD *)(v4 + 8);
          unint64_t v6 = (unint64_t)keys[2];
          if (keys[2] >= v127)
          {
            re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)v123, (unint64_t)keys[2]);
            std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SharedPtr<re::AssetDescriptorBase const> *,re::SharedPtr<re::AssetDescriptorBase const> *,re::SharedPtr<re::AssetDescriptorBase const> *,0>((uint64_t *)v228, (uint64_t *)(v228 + 8 * *(void *)v4), *v124);
            uint64_t v130 = *(void *)v4;
            if (*(void *)v4 != v6)
            {
              uint64_t v131 = (uint64_t *)(v228 + 8 * v130);
              uint64_t v132 = &(*v124)[v130];
              uint64_t v133 = 8 * v6 - 8 * v130;
              do
              {
                uint64_t v134 = *v131;
                uint64_t *v132 = *v131;
                if (v134) {
                  id v135 = (id)(v134 + 8);
                }
                ++v131;
                ++v132;
                v133 -= 8;
              }
              while (v133);
            }
          }
          else
          {
            std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SharedPtr<re::AssetDescriptorBase const> *,re::SharedPtr<re::AssetDescriptorBase const> *,re::SharedPtr<re::AssetDescriptorBase const> *,0>((uint64_t *)v228, (uint64_t *)(v228 + 8 * (uint64_t)keys[2]), *v124);
            if (v6 != *(void *)v4)
            {
              uint64_t v128 = (uint64_t)&(*v124)[v6];
              uint64_t v129 = 8 * *(void *)v4 - 8 * v6;
              do
              {
                if (*(void *)v128)
                {

                  *(void *)uint64_t v128 = 0;
                }
                v128 += 8;
                v129 -= 8;
              }
              while (v129);
            }
          }
          *(void *)unint64_t v4 = v6;
          a3 = v199;
        }
        *(_DWORD *)(v57[41] + 4 * v5) = v3;
        ++*((_DWORD *)v57 + 87);
        ++*((_DWORD *)v57 + 90);
        __int16 v105 = v57 + 40;
LABEL_235:
        uint64_t v98 = re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)keys);
        v104 += 21;
      }
      while (v104 != (void *)a3);
    }
    unint64_t v7 = v57[15];
    if (v7)
    {
      if (v7 >= 0x555555555555556) {
        goto LABEL_372;
      }
      if (!v138)
      {
LABEL_373:
        re::internal::assertLog((re::internal *)4, v139, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
        _os_crash();
        __break(1u);
        re::internal::assertLog((re::internal *)6, v196, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element std::string::size_type size = %zu, count = %zu", "!overflow", "init", 324, 24, v7);
        _os_crash();
        __break(1u);
        goto LABEL_374;
      }
      a3 = v138;
      unint64_t v140 = v7 - 1;
      if (v7 == 1)
      {
        id v142 = (_DWORD *)(v138 + 36);
        uint64_t v141 = v138;
      }
      else
      {
        uint64_t v141 = v138;
        do
        {
          *(_OWORD *)(v141 + 16) = 0uLL;
          *(_OWORD *)(v141 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0uLL;
          *(_OWORD *)uint64_t v141 = 0uLL;
          *(_DWORD *)(v141 + 36) = 0x7FFFFFFF;
          v141 += 48;
          --v140;
        }
        while (v140);
        id v142 = (_DWORD *)(v141 + 36);
      }
      *(_OWORD *)(v141 + 16) = 0u;
      *(_OWORD *)(v141 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
      *(_OWORD *)uint64_t v141 = 0u;
      unint64_t v3 = 0x7FFFFFFFLL;
      _DWORD *v142 = 0x7FFFFFFF;
      if (v7 <= 1) {
        unint64_t v4 = 1;
      }
      else {
        unint64_t v4 = v7;
      }
      uint64_t v143 = v138;
      do
      {
        long long v228 = 0u;
        memset(keys, 0, sizeof(keys));
        DWORD1(v22re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0x7FFFFFFF;
        if ((void **)v143 != keys)
        {
          if (*(void *)v143)
          {
            re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(v143);
          }
          else
          {
            *(void *)uint64_t v143 = 0;
            keys[0] = 0;
            id v144 = *(void **)(v143 + 8);
            *(void **)(v143 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = keys[1];
            keys[1] = v144;
            uint64_t v145 = *(void **)(v143 + 16);
            *(void **)(v143 + 16) = keys[2];
            keys[2] = v145;
            LODWORD(v145) = *(_DWORD *)(v143 + 24);
            *(_DWORD *)(v143 + 24) = keys[3];
            LODWORD(keys[3]) = v145;
            LODWORD(v145) = *(_DWORD *)(v143 + 28);
            *(_DWORD *)(v143 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = HIDWORD(keys[3]);
            HIDWORD(keys[3]) = v145;
            LODWORD(v145) = *(_DWORD *)(v143 + 32);
            *(_DWORD *)(v143 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v228;
            LODWORD(v22re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v145;
            LODWORD(v145) = *(_DWORD *)(v143 + 36);
            *(_DWORD *)(v143 + 36) = DWORD1(v228);
            DWORD1(v22re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v145;
          }
        }
        re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)keys);
        v143 += 48;
        --v4;
      }
      while (v4);
    }
    else
    {
      a3 = 0;
    }
    uint64_t v146 = v57[21];
    if (!v146) {
      goto LABEL_271;
    }
    unint64_t v3 = v57[22];
    unint64_t v147 = v3 + 32 * v146;
    if (v7 <= 1) {
      uint64_t v148 = 1;
    }
    else {
      uint64_t v148 = v7;
    }
    unint64_t v149 = v7;
    do
    {
      if (!v149) {
        goto LABEL_270;
      }
      uint64_t v150 = 0;
      unint64_t v4 = 0;
      uint64_t v151 = a3;
      do
      {
        unint64_t v6 = *(void *)(v3 + 16);
        if (v6 <= v4)
        {
          *(void *)long long v209 = 0;
          long long v229 = 0u;
          long long v230 = 0u;
          long long v228 = 0u;
          memset(keys, 0, sizeof(keys));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v223 = 136315906;
          *(void *)&v223[4] = "operator[]";
          *(_WORD *)&v223[12] = 1024;
          *(_DWORD *)&v223[14] = 476;
          *(_WORD *)&v223[18] = 2048;
          *(void *)&v223[20] = v4;
          *(_WORD *)&v223[28] = 2048;
          *(void *)&v223[30] = v6;
          _os_log_send_and_compose_impl();
          uint64_t v98 = _os_crash_msg();
          __break(1u);
LABEL_363:
          v209[0] = 0;
          *(_OWORD *)&v209[8] = *(_OWORD *)keys;
          *(void **)&v209[24] = keys[2];
          int v210 = keys[3];
LABEL_245:
          unint64_t v7 = v203;
          long long v19 = v197;
          goto LABEL_325;
        }
        uint64_t v136 = (_anonymous_namespace_ *)re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add(v151, (re::DynamicString *)(*(void *)(v3 + 24) + v150));
        ++v4;
        v150 += 32;
        v151 += 48;
      }
      while (v148 != v4);
      unint64_t v149 = v7;
LABEL_270:
      v3 += 32;
    }
    while (v3 != v147);
LABEL_271:
    v57[53] = v7;
    unsigned int v202 = (re::RealityArchive *)v7;
    if (!v7)
    {
LABEL_296:
      uint64_t v168 = v57[21];
      unint64_t v7 = v203;
      if (v168)
      {
        unsigned int v169 = (unint64_t *)v57[22];
        long long v198 = (re::DynamicString *)&v169[4 * v168];
        int v200 = v57 + 46;
        do
        {
          re::AssetMap::assetDescriptorFromAssetsIndex((re::AssetMap *)keys, (re::AssetMap *)v57, *v169);
          if (!LOBYTE(keys[0]))
          {
            re::DynamicString::DynamicString((re::DynamicString *)v223, (const re::DynamicString *)&keys[1]);
            v209[0] = 0;
            *(void *)&v209[8] = *(void *)v223;
            int v210 = *(void **)&v223[24];
            *(_OWORD *)&v209[16] = *(_OWORD *)&v223[8];
            re::Result<re::SharedPtr<re::RealityArchive>,re::DynamicString>::~Result((re::DynamicString *)keys);
            goto LABEL_321;
          }
          *(void **)long long v223 = keys[1];
          if (keys[1]) {
            unint64_t v170 = (char *)keys[1] + 8;
          }
          re::FixedArray<re::DynamicString>::FixedArray((re::DynamicString *)&v223[8], (uint64_t)(v169 + 1));
          unint64_t v171 = v169[2];
          *(void *)long long v209 = v169[3];
          *(void *)&v209[8] = v171;
          unint64_t v172 = re::Hash<re::Slice<re::DynamicString>>::operator()((uint64_t)&v217, (uint64_t *)v209);
          unint64_t v173 = v172;
          unint64_t v174 = 0x94D049BB133111EBLL
               * ((0xBF58476D1CE4E5B9 * (v172 ^ (v172 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v172 ^ (v172 >> 30))) >> 27));
          unint64_t v175 = v174 ^ (v174 >> 31);
          if (*v200)
          {
            unint64_t v176 = v175 % *((unsigned int *)v57 + 98);
            uint64_t v177 = *(unsigned int *)(v57[47] + 4 * v176);
            if (v177 != 0x7FFFFFFF)
            {
              uint64_t v178 = v57[48];
              while (*(void *)(v178 + 56 * v177 + 16) != v172)
              {
                LODWORD(v177) = *(_DWORD *)(v178 + 56 * v177 + 8) & 0x7FFFFFFF;
                if (v177 == 0x7FFFFFFF) {
                  goto LABEL_308;
                }
              }
              goto LABEL_316;
            }
          }
          else
          {
            unint64_t v176 = 0;
          }
LABEL_308:
          uint64_t v179 = *((unsigned int *)v57 + 101);
          if (v179 == 0x7FFFFFFF)
          {
            uint64_t v179 = *((unsigned int *)v57 + 100);
            int v180 = v179;
            if (v179 == *((_DWORD *)v57 + 98))
            {
              re::HashTable<unsigned long,re::AssetMap::ConfigurationEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity((uint64_t)v200, 2 * *((_DWORD *)v57 + 99));
              unint64_t v176 = v175 % *((unsigned int *)v57 + 98);
              int v180 = *((_DWORD *)v57 + 100);
            }
            *((_DWORD *)v57 + 100) = v180 + 1;
            uint64_t v181 = v57[48];
            int v182 = *(_DWORD *)(v181 + 56 * v179 + 8);
          }
          else
          {
            uint64_t v181 = v57[48];
            int v182 = *(_DWORD *)(v181 + 56 * v179 + 8);
            *((_DWORD *)v57 + 101) = v182 & 0x7FFFFFFF;
          }
          *(_DWORD *)(v181 + 56 * v179 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v182 | 0x80000000;
          *(_DWORD *)(v57[48] + 56 * v179 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(v57[48] + 56 * v179 + 8) & 0x80000000 | *(_DWORD *)(v57[47] + 4 * v176);
          *(void *)(v57[48] + 56 * v179) = v175;
          *(void *)(v57[48] + 56 * v179 + 16) = v173;
          uint64_t v183 = v57[48];
          uint64_t v184 = *(void *)v223;
          *(void *)(v183 + 56 * v179 + 24) = *(void *)v223;
          if (v184) {
            id v185 = (id)(v184 + 8);
          }
          re::FixedArray<re::DynamicString>::FixedArray((re::DynamicString *)(v183 + 56 * v179 + 32), (uint64_t)&v223[8]);
          *(_DWORD *)(v57[47] + 4 * v176) = v179;
          ++*((_DWORD *)v57 + 99);
          ++*((_DWORD *)v57 + 102);
LABEL_316:
          re::FixedArray<re::DynamicString>::deinit(&v223[8]);
          if (*(void *)v223) {

          }
          re::Result<re::SharedPtr<re::RealityArchive>,re::DynamicString>::~Result((re::DynamicString *)keys);
          v169 += 4;
          unint64_t v7 = v203;
        }
        while (v169 != (unint64_t *)v198);
      }
      v209[0] = 1;
LABEL_321:
      long long v19 = v197;
      if (v202)
      {
        uint64_t v186 = 0;
        do
        {
          double v187 = re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(a3 + v186));
          v186 += 48;
        }
        while (48 * (void)v202 != v186);
      }
LABEL_325:
      re::DynamicArray<re::DynamicString>::deinit((uint64_t)v224);
      a3 = v204;
      goto LABEL_326;
    }
    unint64_t v5 = 24 * v7;
    v57[54] = v152;
    if (v152)
    {
      int v154 = v152;
      if (v7 != 1)
      {
        size_t v155 = v5 - 24;
        bzero(v152, v155);
        int v154 = (void *)((char *)v154 + v155);
      }
      unint64_t v6 = 0;
      void *v154 = 0;
      v154[1] = 0;
      v154[2] = 0;
      while (1)
      {
        unint64_t v5 = v57[53];
        if (v5 <= v6) {
          break;
        }
        uint64_t v156 = (void *)(v57[54] + 24 * v6);
        unint64_t v7 = a3 + 48 * v6;
        unint64_t v157 = *(unsigned int *)(v7 + 28);
        uint64_t v158 = (_OWORD *)*(unsigned int *)(v7 + 32);
        if (v158)
        {
          uint64_t v24 = 0;
          BOOL v159 = (int *)(*(void *)(v7 + 16) + 8);
          while (1)
          {
            int v160 = *v159;
            v159 += 12;
            if (v160 < 0) {
              break;
            }
            uint64_t v24 = (_OWORD *)((char *)v24 + 1);
            if (v158 == v24)
            {
              uint64_t v24 = (_OWORD *)*(unsigned int *)(v7 + 32);
              break;
            }
          }
        }
        else
        {
          uint64_t v24 = 0;
        }
        if (v158 != v24)
        {
          unint64_t v161 = 0;
          unint64_t v162 = v24;
          while (1)
          {
            unint64_t v163 = v57[53];
            if (v163 <= v6) {
              break;
            }
            uint64_t v164 = v57[54];
            unint64_t v163 = *(void *)(v164 + 24 * v6 + 8);
            if (v163 <= v161) {
              goto LABEL_365;
            }
            uint64_t v152 = re::DynamicString::operator=((re::DynamicString *)(*(void *)(v164 + 24 * v6 + 16) + 32 * v161), (re::DynamicString *)(*(void *)(v7 + 16) + 48 * v162 + 16));
            unsigned int v165 = *(_DWORD *)(v7 + 32);
            if (v165 <= (int)v24 + 1) {
              unint64_t v166 = (v24 + 1);
            }
            else {
              unint64_t v166 = v165;
            }
            while (1)
            {
              unint64_t v162 = (v24 + 1);
              if (v166 - 1 == v24) {
                break;
              }
              LODWORD(v24) = v24 + 1;
              unsigned int v167 = (_OWORD *)v162;
              if ((*(_DWORD *)(*(void *)(v7 + 16) + 48 * v162 + 8) & 0x80000000) != 0) {
                goto LABEL_294;
              }
            }
            unsigned int v167 = (_OWORD *)v166;
LABEL_294:
            uint64_t v24 = v167;
            ++v161;
            if (v158 == v167) {
              goto LABEL_295;
            }
          }
          *(void *)long long v209 = 0;
          long long v229 = 0u;
          long long v230 = 0u;
          long long v228 = 0u;
          memset(keys, 0, sizeof(keys));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v223 = 136315906;
          *(void *)&v223[4] = "operator[]";
          *(_WORD *)&v223[12] = 1024;
          *(_DWORD *)&v223[14] = 468;
          *(_WORD *)&v223[18] = 2048;
          *(void *)&v223[20] = v6;
          *(_WORD *)&v223[28] = 2048;
          *(void *)&v223[30] = v163;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_365:
          *(void *)long long v209 = 0;
          unint64_t v4 = (unint64_t)&v217;
          long long v229 = 0u;
          long long v230 = 0u;
          long long v228 = 0u;
          memset(keys, 0, sizeof(keys));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v223 = 136315906;
          *(void *)&v223[4] = "operator[]";
          *(_WORD *)&v223[12] = 1024;
          *(_DWORD *)&v223[14] = 468;
          *(_WORD *)&v223[18] = 2048;
          *(void *)&v223[20] = v161;
          *(_WORD *)&v223[28] = 2048;
          *(void *)&v223[30] = v163;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_366;
        }
LABEL_295:
        if ((re::RealityArchive *)++v6 == v202) {
          goto LABEL_296;
        }
      }
LABEL_371:
      *(void *)long long v209 = 0;
      unint64_t v4 = (unint64_t)&v217;
      long long v229 = 0u;
      long long v230 = 0u;
      long long v228 = 0u;
      memset(keys, 0, sizeof(keys));
      unint64_t v3 = &_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)long long v223 = 136315906;
      *(void *)&v223[4] = "operator[]";
      *(_WORD *)&v223[12] = 1024;
      *(_DWORD *)&v223[14] = 468;
      *(_WORD *)&v223[18] = 2048;
      *(void *)&v223[20] = v6;
      *(_WORD *)&v223[28] = 2048;
      *(void *)&v223[30] = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_372:
      re::internal::assertLog((re::internal *)6, v137, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element std::string::size_type size = %zu, count = %zu", "!overflow", "init", 324, 48, v7);
      _os_crash();
      __break(1u);
      goto LABEL_373;
    }
LABEL_374:
    re::internal::assertLog((re::internal *)4, v153, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
LABEL_375:
    if (!v9)
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) The RealityFile does not have a valid file URL or file pointer.", "!\"Unreachable code\"", "parseArchive", 448);
      _os_crash();
      __break(1u);
    }
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "parseArchive", 485);
    _os_crash();
    __break(1u);
LABEL_378:
    if (v17)
    {
      *(void *)(v3 + 363re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = re::internal::getOrCreateInfo((re::internal *)"RealityFileHeader", (uint64_t (*)(re::internal *))re::allocInfo_RealityFileHeader, (re::IntrospectionBase *(*)(void))re::initInfo_RealityFileHeader, (void (*)(re::IntrospectionBase *))&unk_26AF75428, 0);
    }
LABEL_23:
    *(_OWORD *)long long v209 = *(_OWORD *)(*(void *)(v3 + 3632) + 32);
    if (!*(void *)v209)
    {
      long long v21 = *(_OWORD *)(v4 + 192);
      uint64_t v22 = keys[2];
      uint64_t v23 = keys[3];
      v223[0] = 0;
      uint64_t v24 = &v223[8];
      *(_OWORD *)(v4 + 104) = v21;
      *(void *)&v223[24] = v22;
      *(void *)&v223[32] = v23;
LABEL_49:
      uint64_t v30 = re::DynamicString::operator=((re::DynamicString *)v211, (re::DynamicString *)&v223[8]);
      uint64_t v36 = 2;
      goto LABEL_51;
    }
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v208);
    re::TypeRegistry::typeInfo(*(re **)v209, (re **)v209, keys);
    long long v18 = (_anonymous_namespace_ *)re::TypeInfo::TypeInfo((uint64_t)&v213, (uint64_t)&keys[1]);
    if (LOBYTE(keys[0]))
    {
      LOBYTE(values[0]) = 1;
      v223[0] = 1;
      *(void **)&v223[8] = keys[1];
    }
    else
    {
      uint64_t v27 = *((void *)&v228 + 1);
      uint64_t v26 = v229;
      uint64_t v29 = keys[3];
      uint64_t v28 = v228;
      LOBYTE(values[0]) = 0;
      *(_OWORD *)(v4 + 40) = *(_OWORD *)&keys[1];
      *((void *)&v221 + 1) = v27;
      uint64_t v222 = v26;
      values[3] = v29;
      *(void *)&long long v221 = v28;
      re::DynamicString::DynamicString((re::DynamicString *)keys, (const re::DynamicString *)&values[3]);
      v223[0] = 0;
      *(void **)&v223[8] = keys[0];
      *(void **)&v223[32] = keys[3];
      *(_OWORD *)(v4 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *(_OWORD *)(v4 + 200);
      if (v29 && (v28 & 1) != 0) {
        (*(void (**)(void *, uint64_t))(*(void *)v29 + 40))(v29, v27);
      }
    }
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v208);
    uint64_t v24 = &v223[8];
    if (!v223[0]) {
      goto LABEL_49;
    }
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(&v217, *(uint64_t *)&v223[8]);
    long long v19 = (_DWORD *)v217;
    unint64_t v31 = *(void *)(v217 + 32);
    if (v31) {
      unint64_t v32 = v31 >> 1;
    }
    else {
      unint64_t v32 = v31 >> 1;
    }
    if (!v32
      || ((unint64_t v33 = *(void *)(v217 + 64), (v33 & 1) != 0) ? (v34 = v33 >> 1) : (v34 = v33 >> 1),
          !v34 || !*(_DWORD *)(v217 + 88) || (int v35 = *(_DWORD *)(v217 + 96), v35 < 1)))
    {
      uint64_t v36 = 3;
      goto LABEL_51;
    }
    if (v35 < 0xE)
    {
      if (*(_DWORD *)(v217 + 100))
      {
        int valuePtr = *(_DWORD *)(v217 + 100);
        uint64_t v36 = 21;
        goto LABEL_51;
      }
      CFRelease(*(CFTypeRef *)&v224[8]);
      int v193 = v19[38];
      if (v193 == 3)
      {
LABEL_366:
        uint64_t v194 = "macOS";
      }
      else
      {
        if (v193 != 4)
        {
          BOOL v195 = v19 + 2;
          int v20 = 1;
          goto LABEL_78;
        }
        uint64_t v194 = "visionOS";
      }
      re::DynamicString::format((re::DynamicString *)"Cannot load reality file using OS '%s' because the reality file may only be opened on platform '%s'.", (re::DynamicString *)keys, "iOS", v194);
      uint64_t v62 = 15;
      goto LABEL_106;
    }
    int valuePtr = *(_DWORD *)(v217 + 96);
    uint64_t v36 = 8;
LABEL_51:
    CFDataRef v37 = *(const __CFData **)&v224[8];
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF75450, memory_order_acquire) & 1) == 0)
    {
      uint64_t v30 = (_anonymous_namespace_ *)__cxa_guard_acquire(&qword_26AF75450);
      if (v30)
      {
        qword_26AF75448 = re::internal::getOrCreateInfo((re::internal *)"PrereleaseHeader", (uint64_t (*)(re::internal *))re::allocInfo_PrereleaseHeader, (re::IntrospectionBase *(*)(void))re::initInfo_PrereleaseHeader, (void (*)(re::IntrospectionBase *))&unk_26AF75370, 0);
        __cxa_guard_release(&qword_26AF75450);
      }
    }
    *(_OWORD *)long long v209 = *(_OWORD *)(qword_26AF75448 + 32);
    if (!*(void *)v209)
    {
      char v45 = (char)keys[1];
      unint64_t v46 = keys[2];
      uint64_t v47 = keys[0];
      if (!keys[0]) {
        goto LABEL_74;
      }
      goto LABEL_72;
    }
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v208);
    re::TypeRegistry::typeInfo(*(re **)v209, (re **)v209, keys);
    uint64_t v38 = (_anonymous_namespace_ *)re::TypeInfo::TypeInfo((uint64_t)&v213, (uint64_t)&keys[1]);
    if (LOBYTE(keys[0]))
    {
      uint64_t v39 = keys[1];
      re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v208);
      if (v39) {
        StringID v40 = v39 + 1;
      }
      unint64_t v41 = v39[4];
      if (v41) {
        unint64_t v42 = v41 >> 1;
      }
      else {
        unint64_t v42 = v41 >> 1;
      }
      if (v42)
      {
        unint64_t v43 = v39[17];
        if ((v43 & 1) != 0 ? v43 >> 1 : v43 >> 1)
        {
          int valuePtr = 0;
          uint64_t v36 = 8;
        }
      }

      goto LABEL_74;
    }
    unint64_t v48 = v6;
    uint64_t v49 = *((void *)&v228 + 1);
    uint64_t v51 = keys[3];
    char v50 = v228;
    LOBYTE(values[0]) = 0;
    *(_OWORD *)&values[1] = *(_OWORD *)&keys[1];
    uint64_t v222 = v229;
    values[3] = keys[3];
    long long v221 = v228;
    re::DynamicString::DynamicString((re::DynamicString *)keys, (const re::DynamicString *)&values[3]);
    char v45 = (char)keys[1];
    unint64_t v46 = keys[2];
    uint64_t v47 = keys[0];
    if (v51 && (v50 & 1) != 0) {
      (*(void (**)(void *, uint64_t))(*(void *)v51 + 40))(v51, v49);
    }
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v208);
    unint64_t v4 = (unint64_t)&v217;
    unint64_t v6 = v48;
    uint64_t v24 = &v223[8];
    if (v47)
    {
LABEL_72:
      if (v45) {
        (*(void (**)(void *, void *))(*(void *)v47 + 40))(v47, v46);
      }
    }
LABEL_74:
    CFRelease(*(CFTypeRef *)&v224[8]);
    if (v36 == 21 || v36 == 8)
    {
      keys[0] = @"RERealityFileUnsupportedVersionKey";
      values[0] = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      CFDictionaryRef v53 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 1, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      CFRelease(values[0]);
      re::WrappedError::make((re::WrappedError *)@"RERealityFileErrorDomain", (const __CFString *)v36, (uint64_t)v53, &v213);
      long long v19 = v213;
      long long v213 = 0;

      goto LABEL_77;
    }
    if (BYTE8(v211[0])) {
      unint64_t v61 = *(const char **)&v211[1];
    }
    else {
      unint64_t v61 = (const char *)((unint64_t)v211 | 9);
    }
    uint64_t v62 = v36;
LABEL_106:
    long long v19 = values[0];
    values[0] = 0;

    if (keys[0] && ((uint64_t)keys[1] & 1) != 0) {
      (*(void (**)(void))(*(void *)keys[0] + 40))();
    }
LABEL_77:
    int v20 = 0;
LABEL_78:
    if (v223[0])
    {
      if (*(void *)&v223[8])
      {

        *(void *)&v223[8] = 0;
      }
    }
    else if (*(void *)&v223[8])
    {
      if (v223[16]) {
        (*(void (**)(void))(**(void **)&v223[8] + 40))();
      }
      *uint64_t v24 = 0u;
      v24[1] = 0u;
    }
  }
  unint64_t v6 = (unint64_t)(v57 + 28);
  unint64_t v3 = v57[12] + 104;
  unint64_t v4 = 168 * v83;
  while (*(void *)(v3 - 88))
  {
    uint64_t v84 = *(void *)(v3 - 72);
    uint64_t v67 = re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::contains((uint64_t)values, v84);
    if ((v67 & 1) == 0)
    {
      if (*(unsigned char *)(v84 + 8)) {
        unint64_t v85 = *(const char **)(v84 + 16);
      }
      else {
        unint64_t v85 = (const char *)(v84 + 9);
      }
      if (*(unsigned char *)(v3 - 24))
      {
        if (*(unsigned char *)(v3 - 8)) {
          unint64_t v5 = *(void *)v3;
        }
        else {
          unint64_t v5 = v3 - 7;
        }
      }
      else
      {
        unint64_t v5 = 0;
      }
      long long v86 = re::globalAllocators((re *)v67);
      long long v87 = (re::AssetDescriptor *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v86[2] + 32))(v86[2], 88, 8);
      keys[0] = re::AssetDescriptor::AssetDescriptor(v87, v85, (const char *)v5);
      re::DynamicArray<re::SharedPtr<re::internal::AssetReference>>::add((_anonymous_namespace_ *)(v57 + 23), keys);
      if (keys[0]) {

      }
      uint64_t v88 = *(void *)(v57[27] + 8 * v57[25] - 8);
      keys[0] = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v88 + 40))(v88);
      *(void *)long long v224 = v57[25] - 1;
      re::HashTable<char const*,unsigned long,re::CaseInsensitiveStringHash,re::CaseInsensitiveStringEqualTo,true,false>::add((uint64_t)(v57 + 28), (char **)keys, v224);
      uint64_t v89 = *(void *)(v57[27] + 8 * v57[25] - 8);
      keys[0] = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v89 + 32))(v89);
      *(void *)long long v224 = v57[25] - 1;
      re::HashTable<char const*,unsigned long,re::CaseInsensitiveStringHash,re::CaseInsensitiveStringEqualTo,true,false>::add((uint64_t)(v57 + 34), (char **)keys, v224);
      uint64_t v67 = re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add((uint64_t)values, (re::DynamicString *)v84);
    }
    v3 += 168;
    v4 -= 168;
    if (!v4) {
      goto LABEL_155;
    }
  }
  v209[0] = 0;
  *(_OWORD *)&v209[8] = *(_OWORD *)keys;
  *(void **)&v209[24] = keys[2];
  int v210 = keys[3];
  unint64_t v7 = v203;
  a3 = v204;
LABEL_326:
  re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)values);
  if (v209[0])
  {
    uint64_t v59 = (char *)*((void *)&v211[0] + 1);
    if (*((void *)&v211[0] + 1))
    {
      id v188 = (id)(*((void *)&v211[0] + 1) + 8);
      int v60 = 1;
      goto LABEL_330;
    }
    int v60 = 1;
  }
  else
  {
    uint64_t v59 = (char *)keys[0];
    keys[0] = 0;

    int v60 = 0;
LABEL_330:
    if (!v209[0] && *(void *)&v209[8] && (v209[16] & 1) != 0) {
      (*(void (**)(void, void))(**(void **)&v209[8] + 40))(*(void *)&v209[8], *(void *)&v209[24]);
    }
  }
LABEL_335:
  if (LOBYTE(v211[0]))
  {
    if (*((void *)&v211[0] + 1)) {
  }
    }
  else if (*((void *)&v211[0] + 1) && (v211[1] & 1) != 0)
  {
    (*(void (**)(void, void))(**((void **)&v211[0] + 1) + 40))(*((void *)&v211[0] + 1), *((void *)&v211[1] + 1));
  }
LABEL_341:
  if (!(_BYTE)v213 && cf && (v215 & 1) != 0) {
    (*(void (**)(CFTypeRef, uint64_t))(*(void *)cf + 40))(cf, v216);
  }
  if (v60)
  {
    long long v189 = *(char **)(v7 + 112);
    if (v189 != v59)
    {
      if (v59)
      {
        long long v190 = v59 + 8;
        long long v189 = *(char **)(v7 + 112);
      }
      if (v189) {

      }
      *(void *)(v7 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v59;
    }
    *(unsigned char *)a3 = 1;
    if (v59) {

    }
    if (v19) {
LABEL_352:
    }
  }
  else
  {
    unsigned int v192 = v59;
    *(unsigned char *)a3 = 0;
    *(void *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v192;

    if (v19) {
      goto LABEL_352;
    }
  }
  return re::Result<re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::WrappedError>::~Result((uint64_t)v205);
}

void re::RealityFile::makeByReadingBuffer(re::RealityFile *this@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)this)
  {
    re::make::shared::object<re::RealityFile,re::Data const&>(this, &v11);
    re::RealityFile::init(v11, v4, (uint64_t)&v9);
    if ((_BYTE)v9)
    {
      unint64_t v5 = v11;
      if (v11) {
        unint64_t v6 = (char *)v11 + 8;
      }
      *(unsigned char *)a2 = 1;
      *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v5;
    }
    else
    {
      id v8 = v10;
      *(unsigned char *)a2 = 0;
      *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v8;
    }
    if (v11) {
  }
    }
  else
  {
    unint64_t v7 = v11;
    unint64_t v11 = 0;
    *(unsigned char *)a2 = 0;
    *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7;

    if (v9 && (v10 & 1) != 0) {
      (*(void (**)(void))(*(void *)v9 + 40))();
    }
  }
}

void re::RealityFile::verifyRealityFileIntegrityAtURL(re::RealityFile *this@<X0>, unsigned char *a2@<X8>)
{
  if (this)
  {
    re::RealityArchive::verifyRealityArchiveAtFilePath(this, (uint64_t)&v9);
    if ((_BYTE)v9)
    {
      char v4 = (char)v10;
      *a2 = 1;
      a2[8] = v4;
      return;
    }
    uint64_t v8 = v13;
    uint64_t v13 = 0;
    *a2 = 0;
    *((void *)a2 + 1) = v8;

    if (!(_BYTE)v9)
    {
      unint64_t v6 = v10;
      if (v10)
      {
        if (v11)
        {
          uint64_t v7 = v12;
          goto LABEL_7;
        }
      }
    }
  }
  else
  {
    id v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    re::DynamicString::setCapacity(&v9, 0);
    uint64_t v5 = v13;
    uint64_t v13 = 0;
    *a2 = 0;
    *((void *)a2 + 1) = v5;

    unint64_t v6 = v9;
    if (v9 && (v10 & 1) != 0)
    {
      uint64_t v7 = v11;
LABEL_7:
      (*(void (**)(uint64_t *, uint64_t))(*v6 + 40))(v6, v7);
    }
  }
}

re::DynamicString *re::RealityFile::makeArchiveReader@<X0>(re::RealityFile *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (re::RealityArchive *)*((void *)this + 16);
  if (v3)
  {
    re::RealityArchive::copy(v3, (uint64_t)&v8);
    if ((_BYTE)v8)
    {
      uint64_t v4 = v9;
      uint64_t v9 = 0;
      char v5 = 1;
    }
    else
    {
      uint64_t v4 = v10;
      uint64_t v10 = 0;

      char v5 = 0;
    }
    *(unsigned char *)a2 = v5;
    *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v4;
    return re::Result<re::SharedPtr<re::RealityArchive>,re::DynamicString>::~Result((re::DynamicString *)&v8);
  }
  else
  {
    uint64_t v6 = v10;
    uint64_t v10 = 0;
    *(unsigned char *)a2 = 0;
    *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v6;

    double result = (re::DynamicString *)v8;
    if (v8 && (v9 & 1) != 0) {
      return (re::DynamicString *)(*(uint64_t (**)(void))(*(void *)v8 + 40))();
    }
  }
  return result;
}

uint64_t re::RealityFile::newDataByLoading@<X0>(re::RealityFile *this@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  re::RealityFile::makeArchiveReader(this, (uint64_t)v13);
  if (v13[0])
  {
    re::RealityArchive::newDataByLoadingEntryWithName((re::RealityArchive *)v14, a2, (uint64_t)v10);
    if (v10[0])
    {
      uint64_t v5 = v11;
      *(unsigned char *)a3 = 1;
      *(void *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v5;
    }
    else
    {
      uint64_t v7 = v9;
      uint64_t v9 = 0;
      *(unsigned char *)a3 = 0;
      *(void *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7;

      if (!v10[0] && v11 && (v12 & 1) != 0) {
        (*(void (**)(void))(*(void *)v11 + 40))();
      }
    }
  }
  else
  {
    id v6 = v14;
    *(unsigned char *)a3 = 0;
    *(void *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v6;
  }
  return re::Result<re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::WrappedError>::~Result((uint64_t)v13);
}

uint64_t re::RealityFile::newDataByLoading@<X0>(re::RealityFile *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a2)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
    re::DynamicString::format((re::DynamicString *)"%s%s", (re::DynamicString *)&v9, "assets/", v5);
    if (v10) {
      id v6 = *(char **)&v11[7];
    }
    else {
      id v6 = v11;
    }
    re::RealityFile::newDataByLoading(a1, v6, a3);
  }
  else
  {
    uint64_t v7 = v12;
    uint64_t v12 = 0;
    *(unsigned char *)a3 = 0;
    *(void *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7;
  }
  uint64_t result = v9;
  if (v9)
  {
    if (v10) {
      return (*(uint64_t (**)(void))(*(void *)v9 + 40))();
    }
  }
  return result;
}

uint64_t re::RealityFile::getInputStream@<X0>(re::RealityFile *this@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  re::RealityFile::makeArchiveReader(this, (uint64_t)v22);
  id v6 = v23;
  if (v22[0])
  {
    unint64_t v20 = 0;
    unint64_t v21 = 0;
    if (re::RealityArchive::uncompressedEntryRange(v23, a2, &v21, &v20))
    {
      if (*((unsigned char *)this + 32)) {
        uint64_t v7 = (const char *)*((void *)this + 5);
      }
      else {
        uint64_t v7 = (char *)this + 33;
      }
      re::FileSeekableInputStream::FileSeekableInputStream((re::FileSeekableInputStream *)v14, v7, v21, v20);
      re::FileSeekableInputStream::FileSeekableInputStream((uint64_t)v16, (uint64_t)v14);
      int v17 = 0;
      LOBYTE(v18[0]) = 0;
      int v19 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<re::FileSeekableInputStream,re::CFDataSeekableInputStream>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<re::FileSeekableInputStream,re::CFDataSeekableInputStream>,(std::__variant_detail::_Trait)1>>(v18, (uint64_t)v16);
      *(unsigned char *)a3 = 1;
      *(unsigned char *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(_DWORD *)(a3 + 224) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<re::FileSeekableInputStream,re::CFDataSeekableInputStream>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<re::FileSeekableInputStream,re::CFDataSeekableInputStream>,(std::__variant_detail::_Trait)1>>((unsigned int *)(a3 + 8), (uint64_t)v18);
      if (v19 != -1) {
        off_26E6CAD10[v19]((int)v11, (re::FileSeekableInputStream *)v18);
      }
      int v19 = -1;
      if (v17 != -1) {
        off_26E6CAD10[v17]((int)v11, (re::FileSeekableInputStream *)v16);
      }
      int v17 = -1;
      re::FileSeekableInputStream::~FileSeekableInputStream((re::FileSeekableInputStream *)v14);
    }
    else
    {
      re::RealityArchive::newDataByLoadingEntryWithName(v6, a2, (uint64_t)v11);
      if (v11[0])
      {
        re::CFDataSeekableInputStream::CFDataSeekableInputStream((re::CFDataSeekableInputStream *)v14, (CFDataRef)cf, 1, 0);
        CFRelease(cf);
        re::CFDataSeekableInputStream::CFDataSeekableInputStream((uint64_t)v16, (uint64_t)v14);
        int v17 = 1;
        LOBYTE(v18[0]) = 0;
        int v19 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<re::FileSeekableInputStream,re::CFDataSeekableInputStream>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<re::FileSeekableInputStream,re::CFDataSeekableInputStream>,(std::__variant_detail::_Trait)1>>(v18, (uint64_t)v16);
        *(unsigned char *)a3 = 1;
        *(unsigned char *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
        *(_DWORD *)(a3 + 224) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<re::FileSeekableInputStream,re::CFDataSeekableInputStream>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<re::FileSeekableInputStream,re::CFDataSeekableInputStream>,(std::__variant_detail::_Trait)1>>((unsigned int *)(a3 + 8), (uint64_t)v18);
        if (v19 != -1) {
          off_26E6CAD10[v19]((int)&v24, (re::FileSeekableInputStream *)v18);
        }
        int v19 = -1;
        if (v17 != -1) {
          off_26E6CAD10[v17]((int)&v24, (re::FileSeekableInputStream *)v16);
        }
        v14[0] = &unk_26E7145A8;
        re::CFDataSeekableInputStream::postDetachCleanup((re::CFDataSeekableInputStream *)v14);
        v14[0] = &unk_26E7144B8;
        re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)&v15);
      }
      else
      {
        uint64_t v9 = *(void *)v18;
        *(void *)long long v18 = 0;
        *(unsigned char *)a3 = 0;
        *(void *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v9;
      }
      if (!v11[0] && cf && (v13 & 1) != 0) {
        (*(void (**)(void))(*(void *)cf + 40))();
      }
    }
  }
  else
  {
    uint64_t v8 = v23;
    *(unsigned char *)a3 = 0;
    *(void *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v8;
  }
  return re::Result<re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::WrappedError>::~Result((uint64_t)v22);
}

uint64_t re::RealityFile::getInputStream@<X0>(re::RealityFile *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a2)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
    re::DynamicString::format((re::DynamicString *)"%s%s", (re::DynamicString *)&v9, "assets/", v5);
    if (v10) {
      id v6 = *(char **)&v11[7];
    }
    else {
      id v6 = v11;
    }
    re::RealityFile::getInputStream(a1, v6, a3);
  }
  else
  {
    uint64_t v7 = v12;
    uint64_t v12 = 0;
    *(unsigned char *)a3 = 0;
    *(void *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7;
  }
  uint64_t result = v9;
  if (v9)
  {
    if (v10) {
      return (*(uint64_t (**)(void))(*(void *)v9 + 40))();
    }
  }
  return result;
}

uint64_t re::RealityFile::findAssetDescriptorWithEntryName(re::RealityFile *this, char *a2)
{
  uint64_t v2 = (re::AssetMap *)*((void *)this + 14);
  if (!v2) {
    return 0;
  }
  re::AssetMap::assetDescriptorWithFileName(v2, a2, &v5);
  uint64_t v3 = v5;
  if (v5) {

  }
  return v3;
}

unint64_t *re::AssetMap::assetDescriptorWithFileName@<X0>(re::AssetMap *this@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  v9[0] = a2;
  uint64_t result = (unint64_t *)re::HashTable<char const*,unsigned long,re::CaseInsensitiveStringHash,re::CaseInsensitiveStringEqualTo,true,false>::tryGet((uint64_t)this + 224, v9);
  if (result)
  {
    unint64_t v6 = *result;
    unint64_t v7 = *((void *)this + 25);
    if (v7 <= *result)
    {
      v9[1] = 0;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v18 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v10 = 136315906;
      uint64_t v11 = "operator[]";
      __int16 v12 = 1024;
      int v13 = 797;
      __int16 v14 = 2048;
      unint64_t v15 = v6;
      __int16 v16 = 2048;
      unint64_t v17 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v8 = *(void *)(*((void *)this + 27) + 8 * v6);
    *a3 = v8;
    if (v8)
    {
      return (unint64_t *)(id)(v8 + 8);
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t re::RealityFile::findAssetDescriptorWithAssetName(re::RealityFile *this, char *a2)
{
  uint64_t v2 = (re::AssetMap *)*((void *)this + 14);
  if (!v2 || !*a2) {
    return 0;
  }
  re::AssetMap::assetDescriptorWithAssetName(v2, a2, &v5);
  uint64_t v3 = v5;
  if (v5) {

  }
  return v3;
}

unint64_t *re::AssetMap::assetDescriptorWithAssetName@<X0>(re::AssetMap *this@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  v9[0] = a2;
  uint64_t result = (unint64_t *)re::HashTable<char const*,unsigned long,re::CaseInsensitiveStringHash,re::CaseInsensitiveStringEqualTo,true,false>::tryGet((uint64_t)this + 272, v9);
  if (result)
  {
    unint64_t v6 = *result;
    unint64_t v7 = *((void *)this + 25);
    if (v7 <= *result)
    {
      v9[1] = 0;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v18 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v10 = 136315906;
      uint64_t v11 = "operator[]";
      __int16 v12 = 1024;
      int v13 = 797;
      __int16 v14 = 2048;
      unint64_t v15 = v6;
      __int16 v16 = 2048;
      unint64_t v17 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v8 = *(void *)(*((void *)this + 27) + 8 * v6);
    *a3 = v8;
    if (v8)
    {
      return (unint64_t *)(id)(v8 + 8);
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

re::SceneDescriptor *re::SceneDescriptor::SceneDescriptor(re::SceneDescriptor *this, const re::SceneDescriptor *a2)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)this = &unk_26E6CABF8;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)this + 3, 0);
  *(_OWORD *)((char *)this + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  unint64_t v6 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)this + 7, 0);
  *((unsigned char *)this + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  re::DynamicString::setCapacity((void *)this + 16, 0);
  *((void *)this + 24) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((_DWORD *)this + 46) = 0;
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0;
  re::DynamicString::operator=((re::SceneDescriptor *)((char *)this + 24), (const re::SceneDescriptor *)((char *)a2 + 24));
  re::DynamicString::operator=((re::SceneDescriptor *)((char *)this + 56), (const re::SceneDescriptor *)((char *)a2 + 56));
  re::Optional<re::DynamicString>::operator=((unsigned char *)this + 88, (unsigned __int8 *)a2 + 88);
  re::DynamicArray<re::SceneCompatibilityVariant>::operator=((uint64_t)this + 160, (uint64_t *)a2 + 20);
  return this;
}

unsigned char *re::Optional<re::DynamicString>::operator=(unsigned char *a1, unsigned __int8 *a2)
{
  int v3 = *a1;
  int v4 = *a2;
  if (*a1) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (!v5)
  {
    unint64_t v6 = (re::DynamicString *)(a1 + 8);
    if (v3) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      re::DynamicString::deinit(v6);
      *a1 = 0;
    }
    else
    {
      if (v3) {
        BOOL v8 = 1;
      }
      else {
        BOOL v8 = v4 == 0;
      }
      if (v8)
      {
        re::DynamicString::operator=(v6, (re::DynamicString *)(a2 + 8));
      }
      else
      {
        *a1 = 1;
        re::DynamicString::DynamicString(v6, (const re::DynamicString *)(a2 + 8));
      }
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::SceneCompatibilityVariant>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::SceneCompatibilityVariant>::copy(a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::SceneCompatibilityVariant>::clear(a1);
      }
    }
    else if (v4)
    {
      unint64_t v5 = a2[2];
      *(void *)a1 = v4;
      re::DynamicArray<re::SceneCompatibilityVariant>::setCapacity((void *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::SceneCompatibilityVariant>::copy(a1, (uint64_t)a2);
    }
  }
  return a1;
}

BOOL re::SceneDescriptor::operator==(uint64_t a1, uint64_t a2)
{
  if (!re::DynamicString::operator==(a1 + 24, a2 + 24) || !re::DynamicString::operator==(a1 + 56, a2 + 56)) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 88) || !*(unsigned char *)(a2 + 88))
  {
    if (!(*(unsigned __int8 *)(a2 + 88) | *(unsigned __int8 *)(a1 + 88))) {
      goto LABEL_6;
    }
    return 0;
  }
  if (!re::DynamicString::operator==(a1 + 96, a2 + 96)) {
    return 0;
  }
LABEL_6:
  return re::DynamicArray<re::SceneCompatibilityVariant>::operator==(a1 + 160, a2 + 160);
}

BOOL re::DynamicArray<re::SceneCompatibilityVariant>::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2) {
      return 1;
    }
    int v3 = *(_DWORD **)(a1 + 32);
    uint64_t v4 = &v3[10 * v2];
    unint64_t v5 = *(_DWORD **)(a2 + 32);
    while (*v3 == *v5)
    {
      unint64_t v6 = v3 + 2;
      BOOL v7 = v5 + 2;
      BOOL result = re::DynamicString::operator==((uint64_t)(v3 + 2), (uint64_t)(v5 + 2));
      if (!result) {
        return result;
      }
      int v3 = v6 + 8;
      unint64_t v5 = v7 + 8;
      if (v6 + 8 == v4) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t re::SceneDescriptor::getName(re::SceneDescriptor *this)
{
  if (*((unsigned char *)this + 64)) {
    return *((void *)this + 9);
  }
  else {
    return (uint64_t)this + 65;
  }
}

uint64_t re::SceneDescriptor::getFileName(re::SceneDescriptor *this)
{
  if (*((unsigned char *)this + 32)) {
    uint64_t result = *((void *)this + 5);
  }
  else {
    uint64_t result = (uint64_t)this + 33;
  }
  uint64_t v3 = *((void *)this + 22);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(*((void *)this + 24) + 24);
    uint64_t v5 = 40 * v3;
    int v6 = -1;
    do
    {
      int v7 = *((_DWORD *)v4 - 6);
      if (v7 <= 13 && v7 >= v6)
      {
        if (*(unsigned char *)(v4 - 1)) {
          uint64_t result = *v4;
        }
        else {
          uint64_t result = (uint64_t)v4 - 7;
        }
        int v6 = *((_DWORD *)v4 - 6);
      }
      v4 += 5;
      v5 -= 40;
    }
    while (v5);
  }
  return result;
}

re::AssetDescriptor *re::AssetDescriptor::AssetDescriptor(re::AssetDescriptor *this, const char *a2, const char *a3)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)this = &unk_26E6CAC38;
  if (!a3) {
    a3 = "";
  }
  return this;
}

uint64_t re::AssetDescriptor::getName(re::AssetDescriptor *this)
{
  if (*((unsigned char *)this + 64)) {
    return *((void *)this + 9);
  }
  else {
    return (uint64_t)this + 65;
  }
}

uint64_t re::AssetDescriptor::getFileName(re::AssetDescriptor *this)
{
  if (*((unsigned char *)this + 32)) {
    return *((void *)this + 5);
  }
  else {
    return (uint64_t)this + 33;
  }
}

void re::AssetMap::~AssetMap(re::AssetMap *this)
{
  *(void *)this = &unk_26E6CAC78;
  uint64_t v2 = (char *)this + 24;
  re::FixedArray<re::FixedArray<re::DynamicString>>::deinit((void *)this + 52);
  re::HashTable<unsigned long,re::AssetMap::ConfigurationEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)this + 46);
  re::HashTable<re::DynamicString,re::DynamicArray<re::SharedPtr<re::AssetDescriptorBase const>>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 40);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 34);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 28);
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)this + 184);
  re::FixedArray<re::RealityFileConfigurationEntryDescriptor>::deinit((void *)this + 20);
  re::FixedArray<re::DynamicString>::deinit((void *)this + 17);
  re::FixedArray<re::DynamicString>::deinit((void *)this + 14);
  re::DynamicArray<re::AssetMapAssetDescriptor>::deinit((uint64_t)this + 64);
  re::DynamicArray<re::SceneDescriptor>::deinit((uint64_t)v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::AssetMap::~AssetMap(this);
  JUMPOUT(0x237DBCBD0);
}

void re::HashTable<char const*,unsigned long,re::CaseInsensitiveStringHash,re::CaseInsensitiveStringEqualTo,true,false>::add<unsigned long &>(uint64_t a1, char **a2, void *a3)
{
  unint64_t v6 = re::CaseInsensitiveStringHash::operator()((int)&v18, *a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    uint64_t v13 = *(unsigned int *)(a1 + 36);
    if (v13 == 0x7FFFFFFF)
    {
      uint64_t v13 = *(unsigned int *)(a1 + 32);
      int v14 = v13;
      if (v13 == *(_DWORD *)(a1 + 24))
      {
        re::HashTable<char const*,unsigned long,re::CaseInsensitiveStringHash,re::CaseInsensitiveStringEqualTo,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
        LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7 % *(unsigned int *)(a1 + 24);
        int v14 = *(_DWORD *)(a1 + 32);
      }
      *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v14 + 1;
      uint64_t v15 = *(void *)(a1 + 16);
      int v16 = *(_DWORD *)(v15 + 32 * v13 + 8);
    }
    else
    {
      uint64_t v15 = *(void *)(a1 + 16);
      int v16 = *(_DWORD *)(v15 + 32 * v13 + 8);
      *(_DWORD *)(a1 + 36) = v16 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v15 + 32 * v13 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v16 | 0x80000000;
    *(_DWORD *)(*(void *)(a1 + 16) + 32 * v13 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v13 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v8);
    *(void *)(*(void *)(a1 + 16) + 32 * v13) = v7;
    *(void *)(*(void *)(a1 + 16) + 32 * v13 + 16) = *a2;
    uint64_t v17 = *(void *)(a1 + 8);
    *(void *)(*(void *)(a1 + 16) + 32 * v13 + 24) = *a3;
    *(_DWORD *)(v17 + 4 * vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v13;
    ++*(_DWORD *)(a1 + 28);
    ++*(_DWORD *)(a1 + 40);
    return;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *a2;
  while (1)
  {
    uint64_t v12 = v10 + 32 * v9;
    if (!strcasecmp(*(const char **)(v12 + 16), v11)) {
      break;
    }
    uint64_t v9 = *(_DWORD *)(v12 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
}

uint64_t re::HashTable<char const*,unsigned long,re::CaseInsensitiveStringHash,re::CaseInsensitiveStringEqualTo,true,false>::add(uint64_t a1, char **a2, void *a3)
{
  unint64_t v6 = re::CaseInsensitiveStringHash::operator()((int)&v14, *a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    uint64_t result = re::HashTable<char const*,unsigned long,re::CaseInsensitiveStringHash,re::CaseInsensitiveStringEqualTo,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return result;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *a2;
  while (1)
  {
    uint64_t v12 = v10 + 32 * v9;
    uint64_t result = strcasecmp(*(const char **)(v12 + 16), v11);
    if (!result) {
      return result;
    }
    uint64_t v9 = *(_DWORD *)(v12 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
}

BOOL re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::contains(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v9, a2);
  unint64_t v5 = *(unsigned int *)(a1 + 24);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % v5));
  if (v6 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  do
  {
    BOOL result = re::DynamicString::operator==(v8 + 48 * v6 + 16, a2);
    if (result) {
      break;
    }
    uint64_t v6 = *(_DWORD *)(v8 + 48 * v6 + 8) & 0x7FFFFFFF;
  }
  while (v6 != 0x7FFFFFFF);
  return result;
}

void re::AssetMap::assetDescriptorFromAssetsIndex(re::AssetMap *this, re::AssetMap *a2, unint64_t a3)
{
  unint64_t v4 = *((void *)a2 + 10);
  if (v4 <= a3)
  {
    re::DynamicString::format((re::DynamicString *)"Index %lu is not in bounds of the assetMap assets array, which has size %zu.", (re::DynamicString *)&v15, a3, v4);
  }
  else
  {
    uint64_t v5 = *((void *)a2 + 12) + 168 * a3;
    if (*(void *)(v5 + 16))
    {
      uint64_t v6 = *(void *)(v5 + 32);
      if (*(unsigned char *)(v6 + 8)) {
        unint64_t v7 = *(char **)(v6 + 16);
      }
      else {
        unint64_t v7 = (char *)(v6 + 9);
      }
      re::AssetMap::assetDescriptorWithFileName(a2, v7, &v14);
      uint64_t v11 = v14;
      if (v14)
      {
        id v12 = (id)(v14 + 8);
        *(unsigned char *)this = 1;
        *((void *)this + 1) = v11;

        return;
      }
      if (*(unsigned char *)(v6 + 8)) {
        uint64_t v13 = *(void *)(v6 + 16);
      }
      else {
        uint64_t v13 = v6 + 9;
      }
      re::DynamicString::format((re::DynamicString *)"No entry for fileName %s", (re::DynamicString *)&v15, v13);
    }
    else
    {
    }
  }
  long long v8 = v15;
  uint64_t v9 = v16;
  uint64_t v10 = v17;
  *(unsigned char *)this = 0;
  *(_OWORD *)((char *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v8;
  *((void *)this + 3) = v9;
  *((void *)this + 4) = v10;
}

unint64_t re::Hash<re::Slice<re::DynamicString>>::operator()(uint64_t a1, uint64_t *a2)
{
  if (!a2[1]) {
    return 0;
  }
  unint64_t v3 = re::Hash<re::DynamicString>::operator()((uint64_t)&v7, *a2);
  if ((unint64_t)a2[1] >= 2)
  {
    unint64_t v4 = 1;
    uint64_t v5 = 32;
    do
    {
      v3 ^= (v3 << 6)
          + (v3 >> 2)
          - 0x61C8864680B583E9
          + re::Hash<re::DynamicString>::operator()((uint64_t)&v7, *a2 + v5);
      ++v4;
      v5 += 32;
    }
    while (v4 < a2[1]);
  }
  return v3;
}

uint64_t re::HashTable<char const*,unsigned long,re::CaseInsensitiveStringHash,re::CaseInsensitiveStringEqualTo,true,false>::tryGet(uint64_t a1, char **a2)
{
  unint64_t v4 = re::CaseInsensitiveStringHash::operator()((int)&v10, *a2);
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if (v5 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  char v7 = *a2;
  while (1)
  {
    uint64_t v8 = v6 + 32 * v5;
    if (!strcasecmp(*(const char **)(v8 + 16), v7)) {
      break;
    }
    uint64_t v5 = *(_DWORD *)(v8 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v8 + 24;
}

uint64_t re::AssetMap::assetDependenciesWithFileName(re::AssetMap *this, const char *a2)
{
  unint64_t v3 = (char *)this + 320;
  uint64_t v4 = re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)v3, (uint64_t)&v6);
  if (v6 && (v7 & 1) != 0) {
    (*(void (**)(void))(*(void *)v6 + 40))();
  }
  return v4;
}

uint64_t re::AssetMap::metadataForFileName(re::AssetMap *this, const re::DynamicString *a2)
{
  uint64_t v2 = *((void *)this + 10);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 12) + 120;
  uint64_t v5 = 168 * v2;
  while (1)
  {
    if (!*(void *)(v4 - 104))
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (re::DynamicString::operator==(*(void *)(v4 - 88), (uint64_t)a2)) {
      break;
    }
    v4 += 168;
    v5 -= 168;
    if (!v5) {
      return 0;
    }
  }
  return v4;
}

void *re::AssetMap::assetDescriptorFromConfigurationNames@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4 == result[15]
    && (uint64_t v5 = result,
        v7[0] = *(void *)(a2 + 16),
        v7[1] = v4,
        v7[0] = re::Hash<re::Slice<re::DynamicString>>::operator()((uint64_t)&v8, v7),
        (BOOL result = (void *)re::HashTable<unsigned long,re::AssetMap::ConfigurationEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet((uint64_t)(v5 + 46), v7)) != 0))
  {
    uint64_t v6 = *result;
    *a3 = *result;
    if (v6) {
      return (id)(v6 + 8);
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t re::HashTable<unsigned long,re::AssetMap::ConfigurationEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *a2;
  unint64_t v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(void *)(v6 + 56 * v4 + 16) != v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 56 * v4 + 8) & 0x7FFFFFFF;
      if (v4 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v6 + 56 * v4 + 16) == v2) {
        return v6 + 56 * v4 + 24;
      }
    }
    return 0;
  }
  return v6 + 56 * v4 + 24;
}

void re::SceneDescriptor::~SceneDescriptor(re::SceneDescriptor *this)
{
  *(void *)this = &unk_26E6CABF8;
  re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 160);
  re::DynamicString::deinit((re::SceneDescriptor *)((char *)this + 128));
  if (*((unsigned char *)this + 88)) {
    re::DynamicString::deinit((re::SceneDescriptor *)((char *)this + 96));
  }
  re::DynamicString::deinit((re::SceneDescriptor *)((char *)this + 56));
  re::DynamicString::deinit((re::SceneDescriptor *)((char *)this + 24));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6CABF8;
  re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)this + 160);
  re::DynamicString::deinit((re::SceneDescriptor *)((char *)this + 128));
  if (*((unsigned char *)this + 88)) {
    re::DynamicString::deinit((re::SceneDescriptor *)((char *)this + 96));
  }
  re::DynamicString::deinit((re::SceneDescriptor *)((char *)this + 56));
  re::DynamicString::deinit((re::SceneDescriptor *)((char *)this + 24));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void re::AssetDescriptor::~AssetDescriptor(re::AssetDescriptor *this)
{
  *(void *)this = &unk_26E6CAC38;
  uint64_t v2 = (re::AssetDescriptor *)((char *)this + 24);
  re::DynamicString::deinit((re::AssetDescriptor *)((char *)this + 56));
  re::DynamicString::deinit(v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6CAC38;
  uint64_t v2 = (re::AssetDescriptor *)((char *)this + 24);
  re::DynamicString::deinit((re::AssetDescriptor *)((char *)this + 56));
  re::DynamicString::deinit(v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2re23FileSeekableInputStreamENS8_25CFDataSeekableInputStreamEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, re::FileSeekableInputStream *this)
{
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2re23FileSeekableInputStreamENS8_25CFDataSeekableInputStreamEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, re::CFDataSeekableInputStream *this)
{
  *(void *)this = &unk_26E7145A8;
  re::CFDataSeekableInputStream::postDetachCleanup(this);
  *(void *)this = &unk_26E7144B8;
  return re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)this + 32);
}

void re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_199, 4 * v2);
    }
    unint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      unint64_t v4 = 0;
      uint64_t v5 = 8;
      do
      {
        uint64_t v6 = *(void *)(a1 + 16);
        int v7 = *(_DWORD *)(v6 + v5);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v5) = v7 & 0x7FFFFFFF;
          re::DynamicString::deinit((re::DynamicString *)(v6 + v5 + 8));
          unint64_t v3 = *(unsigned int *)(a1 + 32);
        }
        ++v4;
        v5 += 48;
      }
      while (v4 < v3);
    }
    *(_DWORD *)(a1 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    int v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

uint64_t re::make::shared::unsafelyInplace<re::PrereleaseHeader>(uint64_t a1)
{
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(a1 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 12re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  uint64_t v2 = (void *)(a1 + 128);
  *(_OWORD *)(a1 + 96) = 0u;
  unint64_t v3 = (void *)(a1 + 96);
  *(_OWORD *)(a1 + 64) = 0u;
  unint64_t v4 = (void *)(a1 + 64);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)a1 = &unk_26E6CAD30;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v6 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)(a1 + 24), 0);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)unint64_t v4 = 0u;
  int v7 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v4, 0);
  *(_OWORD *)(a1 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)unint64_t v3 = 0u;
  int v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v3, 0);
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)uint64_t v2 = 0u;
  re::DynamicString::setCapacity(v2, 0);
  return a1;
}

void re::PrereleaseHeader::~PrereleaseHeader(re::PrereleaseHeader *this)
{
  *(void *)this = &unk_26E6CAD30;
  uint64_t v2 = (re::PrereleaseHeader *)((char *)this + 96);
  re::DynamicString::deinit((re::PrereleaseHeader *)((char *)this + 128));
  re::DynamicString::deinit(v2);
  re::DynamicString::deinit((re::PrereleaseHeader *)((char *)this + 64));
  re::DynamicString::deinit((re::PrereleaseHeader *)((char *)this + 24));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  re::DynamicString *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6CAD30;
  uint64_t v2 = (re::PrereleaseHeader *)((char *)this + 96);
  re::DynamicString::deinit((re::PrereleaseHeader *)((char *)this + 128));
  re::DynamicString::deinit(v2);
  re::DynamicString::deinit((re::PrereleaseHeader *)((char *)this + 64));
  re::DynamicString::deinit((re::PrereleaseHeader *)((char *)this + 24));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

id re::internal::defaultRetain<re::PrereleaseHeader>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::PrereleaseHeader>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void re::TypeBuilderHelper::registerOptional<re::DynamicString>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  int v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    uint64_t v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    long long v11 = *a3;
    re::TypeBuilder::beginOptionalType((uint64_t)v12, a2, 0x28uLL, 8uLL, &v11);
    re::TypeBuilder::setOptionalAccessors((uint64_t)v12, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

re::IntrospectionOptionalBase *re::IntrospectionOptionalBase::IntrospectionOptionalBase(re::IntrospectionOptionalBase *this)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)((char *)v2 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  v2[2] = 0;
  v2[4] = 0;
  void v2[5] = 0xFFFFFFFFLL;
  *uint64_t v2 = &unk_26E6CB2D8;
  *((void *)this + 7) = 0;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(v2 + 6));
  return this;
}

void *re::IntrospectionOptional<re::DynamicString>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::DynamicString>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::IntrospectionOptionalBase::childInfoCount(re::IntrospectionOptionalBase *this)
{
  return 1;
}

uint64_t re::IntrospectionOptionalBase::childInfo(re::IntrospectionOptionalBase *this, uint64_t a2)
{
  if (!a2) {
    return *((void *)this + 6);
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Index out of range.", "index == 0", "childInfo", 1366);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

void re::IntrospectionOptional<re::DynamicString>::construct(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::DynamicString>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

unsigned __int8 *re::IntrospectionOptional<re::DynamicString>::setHasValue(_anonymous_namespace_ *a1, unsigned __int8 *a2, int a3)
{
  if (a3)
  {
    long long v6 = 0uLL;
    uint64_t v7 = 0;
    re::DynamicString::setCapacity(&v5, 0);
    LOBYTE(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 1;
    uint64_t v9 = v5;
    uint64_t v11 = v7;
    long long v10 = v6;
  }
  else
  {
    LOBYTE(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  }
  uint64_t result = re::Optional<re::DynamicString>::operator=(a2, &v8);
  if ((_BYTE)v8)
  {
    uint64_t result = (unsigned __int8 *)v9;
    if (v9)
    {
      if (v10) {
        return (unsigned __int8 *)(*(uint64_t (**)(void))(*v9 + 40))();
      }
    }
  }
  return result;
}

uint64_t re::IntrospectionOptional<re::DynamicString>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

{
  return a2 + 8;
}

void re::IntrospectionOptionalBase::~IntrospectionOptionalBase(re::IntrospectionOptionalBase *this)
{
  *(void *)this = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)this + 48);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)this + 48);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionOptionalBase::hasValue(re::IntrospectionOptionalBase *this, uint64_t a2)
{
}

void re::IntrospectionOptionalBase::setHasValue(re::IntrospectionOptionalBase *this, uint64_t a2)
{
}

void re::IntrospectionOptionalBase::value(re::IntrospectionOptionalBase *this, uint64_t a2)
{
}

{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "value", 1361);
  _os_crash();
  __break(1u);
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  int v2 = *a1;
  uint64_t result = a1 + 8;
  if (!v2) {
    return 0;
  }
  return result;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(unsigned __int8 *a1, const re::DynamicString *a2)
{
  if (a2)
  {
    LOBYTE(v4) = 1;
    re::DynamicString::DynamicString((re::DynamicString *)&v5, a2);
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  uint64_t result = re::Optional<re::DynamicString>::operator=(a1, &v4);
  if ((_BYTE)v4)
  {
    uint64_t result = v5;
    if (v5)
    {
      if (v6) {
        return (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)v5 + 40))();
      }
    }
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::SceneCompatibilityVariant>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::SceneCompatibilityVariant>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::SceneCompatibilityVariant>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::SceneCompatibilityVariant>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::SceneCompatibilityVariant>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::SceneCompatibilityVariant>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::SceneCompatibilityVariant>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::SceneCompatibilityVariant>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::SceneCompatibilityVariant>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::SceneCompatibilityVariant>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::SceneCompatibilityVariant>::resize((_anonymous_namespace_ *)a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::SceneCompatibilityVariant>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::SceneCompatibilityVariant>::addElement(re::Allocator **a1, re *a2, int a3, _anonymous_namespace_ *a4)
{
  uint64_t v14 = 0;
  uint64_t v11 = 0;
  long long v13 = 0u;
  re::DynamicString::setCapacity(&v12, 0);
  double v8 = re::DynamicArray<re::SceneCompatibilityVariant>::add(a4, (uint64_t)&v11);
  if (v12 && (v13 & 1) != 0) {
    (*(void (**)(double))(*v12 + 40))(v8);
  }
  uint64_t v9 = (re::IntrospectionBase *)(*((void *)a4 + 4) + 40 * *((void *)a4 + 2) - 40);
  re::introspectionInitElement(a2, a3, a1[6], v9);
  return v9;
}

uint64_t re::IntrospectionDynamicArray<re::SceneCompatibilityVariant>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::SceneCompatibilityVariant>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 40 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 40 * a3;
}

void re::DynamicArray<re::SceneCompatibilityVariant>::resize(_anonymous_namespace_ *a1, unint64_t a2)
{
  unint64_t v3 = a1;
  unint64_t v4 = *((void *)a1 + 2);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 40 * a2 + 8;
    unint64_t v9 = a2;
    do
    {
      re::DynamicString::deinit((re::DynamicString *)(*((void *)v3 + 4) + v8));
      ++v9;
      v8 += 40;
    }
    while (v9 < *((void *)v3 + 2));
  }
  else
  {
    if (*((void *)a1 + 1) < a2)
    {
      a1 = (_anonymous_namespace_ *)re::DynamicArray<re::SceneCompatibilityVariant>::setCapacity(a1, a2);
      unint64_t v4 = *((void *)v3 + 2);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 40 * v4;
      do
      {
        uint64_t v7 = *((void *)v3 + 4) + v6;
        *(_DWORD *)uint64_t v7 = 0;
        *(_OWORD *)(v7 + 24) = 0u;
        *(_OWORD *)(v7 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
        v7 += 8;
        a1 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)v7, 0);
        v6 += 40;
        --v5;
      }
      while (v5);
    }
  }
  *((void *)v3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = a2;
  ++*((_DWORD *)v3 + 6);
}

void *re::TypeBuilderHelper::registerDynamicArray<re::SceneCompatibilityVariant>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::SceneCompatibilityVariant>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SceneCompatibilityVariant>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::SceneCompatibilityVariant>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::SceneCompatibilityVariant>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::SceneCompatibilityVariant>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::SceneCompatibilityVariant>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::SceneCompatibilityVariant>::resize((_anonymous_namespace_ *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      unint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 40 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 40;
        v11 -= 40;
      }
      while (v11);
    }
  }
}

void re::DynamicArray<re::SceneCompatibilityVariant>::clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2)
  {
    uint64_t v3 = 40 * v2;
    unint64_t v4 = (re::DynamicString *)(*(void *)(a1 + 32) + 8);
    do
    {
      re::DynamicString::deinit(v4);
      unint64_t v4 = (re::DynamicString *)((char *)v4 + 40);
      v3 -= 40;
    }
    while (v3);
  }
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SceneCompatibilityVariant>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 40 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SceneCompatibilityVariant>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SceneCompatibilityVariant>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 40 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SceneCompatibilityVariant>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

id re::internal::defaultRetain<re::SceneDescriptor>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::SceneDescriptor>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void re::TypeBuilderHelper::registerDynamicArray<re::DynamicString>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  uint64_t v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    uint64_t v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    long long v11 = *a3;
    re::TypeBuilder::beginListType((uint64_t)v12, a2, 1, 0x28uLL, 8uLL, &v11);
    re::TypeBuilder::setConstructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
    re::TypeBuilder::setDestructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
    re::TypeBuilder::setListUsesContiguousStorage((uint64_t)v12, 1);
    re::TypeBuilder::setListAccessors((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIndexer((uint64_t)v12, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIterator((uint64_t)v12, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

void *re::IntrospectionDynamicArray<re::DynamicString>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::DynamicString>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::DynamicString>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::DynamicString>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::DynamicString>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::DynamicString>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::DynamicString>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::DynamicString>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::DynamicString>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::DynamicString>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::DynamicString>::resize((_anonymous_namespace_ *)a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::DynamicString>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::DynamicString>::addElement(re::Allocator **a1, re *a2, int a3, _anonymous_namespace_ *a4)
{
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  re::DynamicString::setCapacity(&v11, 0);
  double v8 = re::DynamicArray<re::DynamicString>::add(a4, &v11);
  if (v11 && (v12 & 1) != 0) {
    (*(void (**)(double))(*v11 + 40))(v8);
  }
  uint64_t v9 = (re::IntrospectionBase *)(*((void *)a4 + 4) + 32 * *((void *)a4 + 2) - 32);
  re::introspectionInitElement(a2, a3, a1[6], v9);
  return v9;
}

uint64_t re::IntrospectionDynamicArray<re::DynamicString>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::DynamicString>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 32 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 32 * a3;
}

void re::DynamicArray<re::DynamicString>::resize(_anonymous_namespace_ *a1, unint64_t a2)
{
  int v3 = a1;
  unint64_t v4 = *((void *)a1 + 2);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 32 * a2;
    unint64_t v9 = a2;
    do
    {
      re::DynamicString::deinit((re::DynamicString *)(*((void *)v3 + 4) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *((void *)v3 + 2));
  }
  else
  {
    if (*((void *)a1 + 1) < a2)
    {
      a1 = (_anonymous_namespace_ *)re::DynamicArray<re::DynamicString>::setCapacity(a1, a2);
      unint64_t v4 = *((void *)v3 + 2);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 32 * v4;
      do
      {
        uint64_t v7 = *((void *)v3 + 4) + v6;
        *(_OWORD *)uint64_t v7 = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        a1 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)v7, 0);
        v6 += 32;
        --v5;
      }
      while (v5);
    }
  }
  *((void *)v3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = a2;
  ++*((_DWORD *)v3 + 6);
}

void *re::TypeBuilderHelper::registerDynamicArray<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::DynamicString>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  re::TypeBuilderHelper::registerDynamicArray<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::operator()((uint64_t)&v4, a1, a2, a3, a4);
}

void re::TypeBuilderHelper::registerDynamicArray<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, re::Allocator *a4, unint64_t a5)
{
  if (*(re::Allocator **)a2 == a4)
  {
    re::DynamicArray<re::DynamicString>::clear(a2);
  }
  else
  {
    re::DynamicArray<re::DynamicString>::deinit(a2);
    *(void *)a2 = a4;
    re::DynamicArray<re::DynamicString>::setCapacity((void *)a2, a5);
    ++*(_DWORD *)(a2 + 24);
  }
  re::DynamicArray<re::DynamicString>::resize((_anonymous_namespace_ *)a2, a5);
  {
    re::TypeRegistry::typeInfo(*(void **)a3, *(void *)(*(void *)(a3 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    uint64_t v10 = *(void *)(a2 + 16);
    if (v10)
    {
      long long v11 = *(char **)(a2 + 32);
      uint64_t v12 = 32 * v10;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a4, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a4, 0);
        v11 += 32;
        v12 -= 32;
      }
      while (v12);
    }
  }
}

void re::DynamicArray<re::DynamicString>::clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2)
  {
    int v3 = *(re::DynamicString **)(a1 + 32);
    uint64_t v4 = 32 * v2;
    do
    {
      re::DynamicString::deinit(v3);
      int v3 = (re::DynamicString *)((char *)v3 + 32);
      v4 -= 32;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 32 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 32 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re *a1@<X0>, uint64_t *a2@<X1>, re **a3@<X2>, long long *a4@<X3>, re **a5@<X8>)
{
  uint64_t v10 = (uint64_t)a1 + 200;
  long long v11 = (re **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v11)
  {
    uint64_t v12 = *v11;
    *a5 = a1;
    a5[1] = v12;
    return;
  }
  uint64_t v22 = 0x449AD97C4B77BED4;
  uint64_t v23 = "_CompareFunc";
  uint64_t v13 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v10, &v22);
  if (v13)
  {
    uint64_t v14 = *v13;
    re::StringID::destroyString((re::StringID *)&v22);
    if (a1)
    {
      uint64_t v15 = (uint64_t)a1;
      goto LABEL_9;
    }
  }
  else
  {
    re::StringID::destroyString((re::StringID *)&v22);
  }
  *(void *)&v27.var0 = 0x449AD97C4B77BED4;
  v27.var1 = "_CompareFunc";
  re::TypeRegistry::declareType((uint64_t)a1, 8, &v27, 1u, 0, &v22);
  uint64_t v15 = v22;
  uint64_t v14 = (uint64_t)v23;
  re::StringID::destroyString((re::StringID *)&v27);
LABEL_9:
  re::TypeRegistry::typeInfo(a1, a3, &v22);
  re::TypeInfo::TypeInfo((uint64_t)&v27, (uint64_t)&v23);
  if (!v15
    || (uint64_t v16 = *v28,
        uint64_t v22 = v14,
        uint64_t v23 = v16,
        int v24 = -1,
        (uint64_t v17 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v27.var0 + 768, &v22)) == 0)|| !*(void *)v17)
  {
    long long v26 = *(_OWORD *)a3;
    v25[0] = v15;
    v25[1] = v14;
    uint64_t v17 = (_anonymous_namespace_ *)re::TypeRegistry::addAttribute((uint64_t)a1, &v26, -1, (uint64_t)v25, (uint64_t)re::internal::less<re::StringID>, 0);
  }
  long long v18 = *(_OWORD *)a3;
  long long v20 = *a4;
  long long v21 = v18;
  re::TypeBuilder::beginDictionaryType((uint64_t)&v22, a2, 1, 0x30uLL, 8uLL, &v21, &v20);
  re::TypeBuilder::setConstructor((uint64_t)&v22, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
  re::TypeBuilder::setDestructor((uint64_t)&v22, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
  re::TypeBuilder::setDictionaryAccessors((uint64_t)&v22, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
  re::TypeBuilder::setDictionaryIterator((uint64_t)&v22, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
  re::TypeBuilder::commitTo((re::TypeBuilder *)&v22, a1, a5);
  re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v22, v19);
}

void *re::IntrospectionHashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  re::DynamicString::setCapacity(&v12, 0);
  uint64_t v10 = (re::IntrospectionBase *)re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, (re::DynamicString *)&v12);
  if (v12 && (v13 & 1) != 0) {
    (*(void (**)(void))(*v12 + 40))();
  }
  re::introspectionInitElement(a2, a3, a1[8], v10);
  return v10;
}

uint64_t re::IntrospectionHashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = *(int **)(a2 + 16);
    while (1)
    {
      int v8 = *v7;
      v7 += 14;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 56 * v10 + 8, *(void *)(a2 + 16) + 56 * v10 + 24);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 56 * v10) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, StringID *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, (re::DynamicString *)Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 56 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        uint64_t v6 = *(int **)(v2 + 16);
        while (1)
        {
          int v7 = *v6;
          v6 += 14;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 56 * *(unsigned int *)(a1 + 32) + 8;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 56 * *(unsigned int *)(a1 + 32) + 24;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void re::TypeBuilderHelper::registerFixedArray<re::DynamicString>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  uint64_t v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    unsigned int v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    long long v11 = *a3;
    re::TypeBuilder::beginListType((uint64_t)v12, a2, 1, 0x18uLL, 8uLL, &v11);
    re::TypeBuilder::setConstructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
    re::TypeBuilder::setDestructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
    re::TypeBuilder::setListUsesContiguousStorage((uint64_t)v12, 1);
    re::TypeBuilder::setListAccessors((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerFixedArray<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIndexer((uint64_t)v12, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerFixedArray<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIterator((uint64_t)v12, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerFixedArray<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerFixedArray<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

void *re::IntrospectionFixedArray<re::DynamicString>::~IntrospectionFixedArray(void *a1)
{
  *a1 = &unk_26E6C0380;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionFixedArray<re::DynamicString>::~IntrospectionFixedArray(void *a1)
{
  *a1 = &unk_26E6C0380;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionFixedArray<re::DynamicString>::construct(uint64_t a1, void *a2)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void *re::IntrospectionFixedArray<re::DynamicString>::destroy(uint64_t a1, void *a2)
{
  return re::FixedArray<re::DynamicString>::deinit(a2);
}

void *re::IntrospectionFixedArray<re::DynamicString>::init(uint64_t a1, void *a2, re *a3, int a4, unint64_t a5)
{
  uint64_t result = re::FixedArray<re::DynamicString>::init<>(a2, (uint64_t)a3, a5);
  if (a5)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      if (a2[1] <= v12)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t result = re::introspectionInitElement(a3, a4, *(re::Allocator **)(a1 + 48), (re::IntrospectionBase *)(a2[2] + v11));
      ++v12;
      v11 += 32;
    }
    while (a5 != v12);
  }
  return result;
}

void *re::IntrospectionFixedArray<re::DynamicString>::deinit(uint64_t a1, void *a2)
{
  return re::FixedArray<re::DynamicString>::deinit(a2);
}

uint64_t re::IntrospectionFixedArray<re::DynamicString>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

BOOL re::IntrospectionFixedArray<re::DynamicString>::isInitialized(uint64_t a1, void *a2)
{
  return *a2 != 0;
}

uint64_t re::IntrospectionFixedArray<re::DynamicString>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 16) + 32 * a3;
}

{
  if (*(void *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 16) + 32 * a3;
}

void *re::TypeBuilderHelper::registerFixedArray<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(void *result, uint64_t a2, uint64_t a3)
{
  result[1] = 0;
  result[2] = 0;
  void *result = a3;
  return result;
}

void *re::TypeBuilderHelper::registerFixedArray<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(void *a1)
{
  re::FixedArray<re::DynamicString>::deinit(a1);
  return re::FixedArray<re::DynamicString>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void re::TypeBuilderHelper::registerFixedArray<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(void *a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  re::FixedArray<re::DynamicString>::deinit(a1);
  uint64_t v8 = (_anonymous_namespace_ *)re::FixedArray<re::DynamicString>::init<>(a1, (uint64_t)a3, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = a1[1];
    if (v9)
    {
      uint64_t v10 = (char *)a1[2];
      uint64_t v11 = 32 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 32;
        v11 -= 32;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 8) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 16) + 32 * a2;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1)
{
  int v1 = a1[2];
  uint64_t v2 = *(void *)a1;
  unint64_t v3 = *(void *)(*(void *)a1 + 8);
  if (v1 < (int)v3) {
    a1[2] = ++v1;
  }
  if (v3 <= v1) {
    return 0;
  }
  else {
    return *(void *)(v2 + 16) + 32 * v1;
  }
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::DynamicString>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::SceneDescriptor>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::SceneDescriptor>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::SceneDescriptor>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::SceneDescriptor>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::SceneDescriptor>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::SceneDescriptor>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::SceneDescriptor>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::SceneDescriptor>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void *re::IntrospectionDynamicArray<re::SceneDescriptor>::resize(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = result;
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    uint64_t result = re::DynamicArray<re::SceneDescriptor>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      return re::DynamicArray<re::SceneDescriptor>::resize((void *)a4, a5);
    }
  }
  else
  {
    uint64_t result = re::DynamicArray<re::SceneDescriptor>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::SceneDescriptor>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4)
{
  uint64_t v17 = 0;
  memset(v16, 0, sizeof(v16));
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  memset(v11, 0, sizeof(v11));
  re::SceneDescriptor::SceneDescriptor((re::SceneDescriptor *)v11);
  unint64_t v8 = *(void *)(a4 + 16);
  if (v8 >= *(void *)(a4 + 8))
  {
    re::DynamicArray<re::SceneDescriptor>::growCapacity((void *)a4, v8 + 1);
    unint64_t v8 = *(void *)(a4 + 16);
  }
  re::SceneDescriptor::SceneDescriptor((re::SceneDescriptor *)(*(void *)(a4 + 32) + 200 * v8), (const re::SceneDescriptor *)v11);
  ++*(void *)(a4 + 16);
  ++*(_DWORD *)(a4 + 24);
  *(void *)&v11[0] = &unk_26E6CABF8;
  re::DynamicArray<re::SceneCompatibilityVariant>::deinit((uint64_t)v16);
  if ((void)v14)
  {
    if (BYTE8(v14)) {
      (*(void (**)(void))(*(void *)v14 + 40))();
    }
    long long v14 = 0u;
    long long v15 = 0u;
  }
  if (BYTE8(v11[5]) && (void)v12)
  {
    if (BYTE8(v12)) {
      (*(void (**)(void))(*(void *)v12 + 40))();
    }
    long long v12 = 0u;
    long long v13 = 0u;
  }
  if (*((void *)&v11[3] + 1))
  {
    if (v11[4]) {
      (*(void (**)(void))(**((void **)&v11[3] + 1) + 40))();
    }
    memset((char *)&v11[3] + 8, 0, 32);
  }
  if (*((void *)&v11[1] + 1))
  {
    if (v11[2]) {
      (*(void (**)(void))(**((void **)&v11[1] + 1) + 40))();
    }
    memset((char *)&v11[1] + 8, 0, 32);
  }
  *(void *)&v11[0] = &unk_26E6DECE0;
  objc_destructInstance((char *)v11 + 8);
  uint64_t v9 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 200 * *(void *)(a4 + 16) - 200);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v9);
  return v9;
}

uint64_t re::IntrospectionDynamicArray<re::SceneDescriptor>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::SceneDescriptor>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 200 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 200 * a3;
}

uint64_t re::DynamicArray<re::SceneDescriptor>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    unint64_t v3 = *(void (****)(void))(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 200 * v4;
        uint64_t v6 = *(void (****)(void))(a1 + 32);
        int v7 = v6;
        do
        {
          unint64_t v8 = *v7;
          v7 += 25;
          (*v8)(v3);
          v6 += 25;
          unint64_t v3 = v7;
          v5 -= 200;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        unint64_t v3 = *(void (****)(void))(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void *re::DynamicArray<re::SceneDescriptor>::resize(void *result, unint64_t a2)
{
  unint64_t v3 = result;
  unint64_t v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
    uint64_t v8 = 200 * a2;
    unint64_t v9 = a2;
    do
    {
      uint64_t result = (void *)(**(uint64_t (***)(uint64_t))(v3[4] + v8))(v3[4] + v8);
      ++v9;
      v8 += 200;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      uint64_t result = re::DynamicArray<re::SceneDescriptor>::setCapacity(result, a2);
      unint64_t v4 = v3[2];
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 200 * v4;
      do
      {
        uint64_t v7 = v3[4] + v6;
        *(void *)(v7 + 19re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
        *(_OWORD *)(v7 + 160) = 0u;
        *(_OWORD *)(v7 + 176) = 0u;
        *(_OWORD *)(v7 + 12re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
        *(_OWORD *)(v7 + 144) = 0u;
        *(_OWORD *)(v7 + 96) = 0u;
        *(_OWORD *)(v7 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        *(_OWORD *)(v7 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
        *(_OWORD *)(v7 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
        *(_OWORD *)uint64_t v7 = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        uint64_t result = re::SceneDescriptor::SceneDescriptor((re::SceneDescriptor *)v7);
        v6 += 200;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::SceneDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::SceneDescriptor>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SceneDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::SceneDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v8)
    {
      unint64_t v9 = *(void (****)(void))(a1 + 32);
      uint64_t v10 = 200 * v8;
      uint64_t v11 = v9;
      long long v12 = *(void (****)(void))(a1 + 32);
      do
      {
        long long v13 = *v12;
        v12 += 25;
        (*v13)(v11);
        v9 += 25;
        uint64_t v11 = v12;
        v10 -= 200;
      }
      while (v10);
    }
  }
  else
  {
    re::DynamicArray<re::SceneDescriptor>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::SceneDescriptor>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  long long v14 = (_anonymous_namespace_ *)re::DynamicArray<re::SceneDescriptor>::resize((void *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v19);
    re::TypeInfo::TypeInfo((uint64_t)v18, (uint64_t)&v20);
    uint64_t v15 = *(void *)(a1 + 16);
    if (v15)
    {
      uint64_t v16 = *(char **)(a1 + 32);
      uint64_t v17 = 200 * v15;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v18, v16, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v18, (void **)v16, a3, 0);
        v16 += 200;
        v17 -= 200;
      }
      while (v17);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SceneDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 200 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SceneDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SceneDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 200 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SceneDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::AssetMapAssetDescriptor>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::AssetMapAssetDescriptor>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::AssetMapAssetDescriptor>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::AssetMapAssetDescriptor>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::AssetMapAssetDescriptor>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::AssetMapAssetDescriptor>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::AssetMapAssetDescriptor>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::AssetMapAssetDescriptor>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void *re::IntrospectionDynamicArray<re::AssetMapAssetDescriptor>::resize(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v9 = result;
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    uint64_t result = re::DynamicArray<re::AssetMapAssetDescriptor>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      return re::DynamicArray<re::AssetMapAssetDescriptor>::resize((void *)a4, a5);
    }
  }
  else
  {
    uint64_t result = re::DynamicArray<re::AssetMapAssetDescriptor>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::AssetMapAssetDescriptor>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  long long v8 = 0uLL;
  long long v27 = 0u;
  long long v26 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  unint64_t v9 = *((void *)this + 2);
  if (v9 >= *((void *)this + 1))
  {
    re::DynamicArray<re::AssetMapAssetDescriptor>::growCapacity(this, v9 + 1);
    long long v8 = 0uLL;
    unint64_t v9 = *((void *)this + 2);
  }
  uint64_t v10 = *((void *)this + 4) + 168 * v9;
  *(_OWORD *)uint64_t v10 = v8;
  long long v17 = v8;
  *(void *)(v10 + 16) = 0;
  uint64_t v18 = 0;
  *(void *)(v10 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)&v19 + 1) = 0;
  LODWORD(v19) = 1;
  *(_DWORD *)(v10 + 24) = 1;
  *(void *)(v10 + 40) = 0;
  *(_OWORD *)(v10 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v8;
  *(_DWORD *)(v10 + 64) = 0;
  long long v20 = v8;
  uint64_t v11 = *(void *)(v10 + 56);
  *(void *)(v10 + 56) = 0;
  *(void *)&long long v21 = v11;
  *(void *)(v10 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)&long long v22 = 0;
  DWORD2(v21) = 1;
  ++*(_DWORD *)(v10 + 64);
  *(unsigned char *)(v10 + 80) = 0;
  *(_OWORD *)(v10 + 136) = v8;
  *(_DWORD *)(v10 + 15re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(_DWORD *)(v10 + 160) = 0;
  *(void *)(v10 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0;
  *(void *)(v10 + 12re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)&long long v25 = 0;
  uint64_t v12 = *(void *)(v10 + 128);
  *(void *)(v10 + 12re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *((void *)&v25 + 1) = v12;
  uint64_t v13 = *(void *)(v10 + 136);
  *(void *)(v10 + 136) = 0;
  *(void *)&long long v26 = v13;
  LODWORD(v13) = *(_DWORD *)(v10 + 144);
  *(_DWORD *)(v10 + 144) = 0;
  DWORD2(v26) = v13;
  LODWORD(v13) = *(_DWORD *)(v10 + 148);
  *(_DWORD *)(v10 + 14re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  HIDWORD(v26) = v13;
  LODWORD(v13) = *(_DWORD *)(v10 + 152);
  *(_DWORD *)(v10 + 15re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  LODWORD(v27) = v13;
  *(_DWORD *)(v10 + 156) = 0x7FFFFFFF;
  DWORD1(v27) = 0x7FFFFFFF;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  v14.n128_f64[0] = re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v25);
  if (BYTE8(v22) && (void)v23)
  {
    if (BYTE8(v23)) {
      (*(void (**)(double))(*(void *)v23 + 40))(v14.n128_f64[0]);
    }
    __n128 v14 = 0uLL;
    long long v23 = 0u;
    long long v24 = 0u;
  }
  if ((void)v20)
  {
    if ((void)v22) {
      (*(void (**)(__n128))(*(void *)v20 + 40))(v14);
    }
    *(void *)&long long v22 = 0;
    *(void *)&long long v21 = 0;
    long long v20 = 0uLL;
    ++DWORD2(v21);
  }
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)&v17);
  uint64_t v15 = (re::IntrospectionBase *)(*((void *)this + 4) + 168 * *((void *)this + 2) - 168);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v15);
  return v15;
}

uint64_t re::IntrospectionDynamicArray<re::AssetMapAssetDescriptor>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::AssetMapAssetDescriptor>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 168 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 168 * a3;
}

uint64_t re::DynamicArray<re::AssetMapAssetDescriptor>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 168 * v4;
        uint64_t v6 = (uint64_t *)(v3 + 120);
        do
        {
          re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v6);
          if (*((unsigned char *)v6 - 40)) {
            re::DynamicString::deinit((re::DynamicString *)(v6 - 4));
          }
          re::DynamicArray<unsigned long>::deinit((uint64_t)(v6 - 10));
          re::DynamicArray<re::DynamicString>::deinit((uint64_t)(v6 - 15));
          v6 += 21;
          v5 -= 168;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void *re::DynamicArray<re::AssetMapAssetDescriptor>::resize(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
    uint64_t v8 = 168 * a2;
    unint64_t v9 = a2;
    do
    {
      uint64_t v10 = v3[4] + v8;
      re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v10 + 120));
      if (*(unsigned char *)(v10 + 80)) {
        re::DynamicString::deinit((re::DynamicString *)(v10 + 88));
      }
      re::DynamicArray<unsigned long>::deinit(v10 + 40);
      uint64_t result = (void *)re::DynamicArray<re::DynamicString>::deinit(v10);
      ++v9;
      v8 += 168;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      uint64_t result = re::DynamicArray<re::AssetMapAssetDescriptor>::setCapacity(result, a2);
      unint64_t v4 = v3[2];
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 168 * v4;
      do
      {
        uint64_t v7 = v3[4] + v6;
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        *(void *)(v7 + 16) = 0;
        *(void *)(v7 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
        *(unsigned char *)(v7 + 80) = 0;
        *(_OWORD *)(v7 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0uLL;
        *(_OWORD *)(v7 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0uLL;
        *(_DWORD *)(v7 + 64) = 0;
        *(_OWORD *)(v7 + 15re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0uLL;
        *(_OWORD *)(v7 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0uLL;
        *(_OWORD *)(v7 + 136) = 0uLL;
        v6 += 168;
        *(_DWORD *)(v7 + 156) = 0x7FFFFFFF;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::AssetMapAssetDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::AssetMapAssetDescriptor>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AssetMapAssetDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::AssetMapAssetDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v8)
    {
      uint64_t v9 = 168 * v8;
      uint64_t v10 = (uint64_t *)(*(void *)(a1 + 32) + 120);
      do
      {
        re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v10);
        if (*((unsigned char *)v10 - 40)) {
          re::DynamicString::deinit((re::DynamicString *)(v10 - 4));
        }
        re::DynamicArray<unsigned long>::deinit((uint64_t)(v10 - 10));
        re::DynamicArray<re::DynamicString>::deinit((uint64_t)(v10 - 15));
        v10 += 21;
        v9 -= 168;
      }
      while (v9);
    }
  }
  else
  {
    re::DynamicArray<re::AssetMapAssetDescriptor>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::AssetMapAssetDescriptor>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  uint64_t v11 = (_anonymous_namespace_ *)re::DynamicArray<re::AssetMapAssetDescriptor>::resize((void *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = *(char **)(a1 + 32);
      uint64_t v14 = 168 * v12;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 168;
        v14 -= 168;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AssetMapAssetDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 168 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AssetMapAssetDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AssetMapAssetDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 168 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AssetMapAssetDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionFixedArray<re::RealityFileConfigurationEntryDescriptor>::~IntrospectionFixedArray(void *a1)
{
  *a1 = &unk_26E6C0380;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionFixedArray<re::RealityFileConfigurationEntryDescriptor>::~IntrospectionFixedArray(void *a1)
{
  *a1 = &unk_26E6C0380;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionFixedArray<re::RealityFileConfigurationEntryDescriptor>::construct(uint64_t a1, void *a2)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void *re::IntrospectionFixedArray<re::RealityFileConfigurationEntryDescriptor>::destroy(uint64_t a1, void *a2)
{
  return re::FixedArray<re::RealityFileConfigurationEntryDescriptor>::deinit(a2);
}

void re::IntrospectionFixedArray<re::RealityFileConfigurationEntryDescriptor>::init(uint64_t a1, uint64_t *a2, re *a3, int a4, unint64_t a5)
{
  re::FixedArray<re::RealityFileConfigurationEntryDescriptor>::init<>(a2, (uint64_t)a3, a5);
  if (a5)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      if (a2[1] <= v11)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      re::introspectionInitElement(a3, a4, *(re::Allocator **)(a1 + 48), (re::IntrospectionBase *)(a2[2] + v10));
      ++v11;
      v10 += 32;
    }
    while (a5 != v11);
  }
}

void *re::IntrospectionFixedArray<re::RealityFileConfigurationEntryDescriptor>::deinit(uint64_t a1, void *a2)
{
  return re::FixedArray<re::RealityFileConfigurationEntryDescriptor>::deinit(a2);
}

uint64_t re::IntrospectionFixedArray<re::RealityFileConfigurationEntryDescriptor>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

BOOL re::IntrospectionFixedArray<re::RealityFileConfigurationEntryDescriptor>::isInitialized(uint64_t a1, void *a2)
{
  return *a2 != 0;
}

uint64_t re::IntrospectionFixedArray<re::RealityFileConfigurationEntryDescriptor>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 16) + 32 * a3;
}

{
  if (*(void *)(a2 + 8) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 16) + 32 * a3;
}

void *re::FixedArray<re::RealityFileConfigurationEntryDescriptor>::deinit(void *result)
{
  if (*result)
  {
    int v1 = result;
    int v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      uint64_t v4 = 32 * v2;
      unint64_t v5 = (void *)(result[2] + 8);
      do
      {
        re::FixedArray<re::DynamicString>::deinit(v5);
        v5 += 4;
        v4 -= 32;
      }
      while (v4);
      uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v1 + 40))(*v1, v1[2]);
      void *v3 = 0;
      v3[1] = 0;
    }
    void *v1 = 0;
  }
  return result;
}

void *re::TypeBuilderHelper::registerFixedArray<re::RealityFileConfigurationEntryDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(void *result, uint64_t a2, uint64_t a3)
{
  result[1] = 0;
  result[2] = 0;
  void *result = a3;
  return result;
}

void *re::TypeBuilderHelper::registerFixedArray<re::RealityFileConfigurationEntryDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(void *a1)
{
  re::FixedArray<re::RealityFileConfigurationEntryDescriptor>::deinit(a1);
  return re::FixedArray<re::RealityFileConfigurationEntryDescriptor>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::RealityFileConfigurationEntryDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void re::TypeBuilderHelper::registerFixedArray<re::RealityFileConfigurationEntryDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t *a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  re::FixedArray<re::RealityFileConfigurationEntryDescriptor>::deinit(a1);
  re::FixedArray<re::RealityFileConfigurationEntryDescriptor>::init<>(a1, (uint64_t)a3, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = a1[1];
    if (v9)
    {
      uint64_t v10 = (char *)a1[2];
      uint64_t v11 = 32 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 32;
        v11 -= 32;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::RealityFileConfigurationEntryDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 8) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 16) + 32 * a2;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::RealityFileConfigurationEntryDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::RealityFileConfigurationEntryDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1)
{
  int v1 = a1[2];
  uint64_t v2 = *(void *)a1;
  unint64_t v3 = *(void *)(*(void *)a1 + 8);
  if (v1 < (int)v3) {
    a1[2] = ++v1;
  }
  if (v3 <= v1) {
    return 0;
  }
  else {
    return *(void *)(v2 + 16) + 32 * v1;
  }
}

uint64_t re::TypeBuilderHelper::registerFixedArray<re::RealityFileConfigurationEntryDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

double re::make::shared::unsafelyInplace<re::AssetMap>(uint64_t a1)
{
  *(void *)(a1 + 43re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 36re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 35re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_OWORD *)(a1 + 27re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(a1 + 28re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 19re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(a1 + 20re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 12re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(a1 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  uint64_t v2 = a1 + 368;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v3 = a1 + 320;
  uint64_t v4 = a1 + 272;
  *(_OWORD *)(a1 + 224) = 0u;
  uint64_t v5 = a1 + 224;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_26E6CAC78;
  *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_DWORD *)(a1 + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(_OWORD *)(a1 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(a1 + 12re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 19re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_DWORD *)(a1 + 20re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 23re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(a1 + 244) = 0u;
  *(void *)(v5 + 36) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 27re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(a1 + 28re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_DWORD *)(a1 + 304) = 0;
  *(void *)(v4 + 36) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_DWORD *)(a1 + 35re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(v3 + 36) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 36re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_DWORD *)(a1 + 400) = 0;
  *(void *)(v2 + 36) = 0x7FFFFFFFLL;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 43re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(a1 + 416) = 0;
  return result;
}

id re::internal::defaultRetain<re::AssetMap>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::AssetMap>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

uint64_t re::make::shared::unsafelyInplace<re::RealityFileHeader>(uint64_t a1)
{
  *(_OWORD *)(a1 + 12re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(a1 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)a1 = &unk_26E6CA258;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v3 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)(a1 + 24), 0);
  *(_OWORD *)(a1 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  re::DynamicString::setCapacity((void *)(a1 + 56), 0);
  *(_DWORD *)(a1 + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 2;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(void *)(a1 + 140) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 15re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  return a1;
}

id re::internal::defaultRetain<re::RealityFileHeader>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::RealityFileHeader>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re *a1@<X0>, uint64_t *a2@<X1>, re **a3@<X2>, long long *a4@<X3>, re **a5@<X8>)
{
  uint64_t v10 = (uint64_t)a1 + 200;
  uint64_t v11 = (re **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v11)
  {
    uint64_t v12 = *v11;
    *a5 = a1;
    a5[1] = v12;
    return;
  }
  uint64_t v22 = 0x449AD97C4B77BED4;
  long long v23 = "_CompareFunc";
  uint64_t v13 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v10, &v22);
  if (v13)
  {
    uint64_t v14 = *v13;
    re::StringID::destroyString((re::StringID *)&v22);
    if (a1)
    {
      uint64_t v15 = (uint64_t)a1;
      goto LABEL_9;
    }
  }
  else
  {
    re::StringID::destroyString((re::StringID *)&v22);
  }
  *(void *)&v27.var0 = 0x449AD97C4B77BED4;
  v27.var1 = "_CompareFunc";
  re::TypeRegistry::declareType((uint64_t)a1, 8, &v27, 1u, 0, &v22);
  uint64_t v15 = v22;
  uint64_t v14 = (uint64_t)v23;
  re::StringID::destroyString((re::StringID *)&v27);
LABEL_9:
  re::TypeRegistry::typeInfo(a1, a3, &v22);
  re::TypeInfo::TypeInfo((uint64_t)&v27, (uint64_t)&v23);
  if (!v15
    || (uint64_t v16 = *v28,
        uint64_t v22 = v14,
        long long v23 = v16,
        int v24 = -1,
        (uint64_t v17 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v27.var0 + 768, &v22)) == 0)|| !*(void *)v17)
  {
    long long v26 = *(_OWORD *)a3;
    v25[0] = v15;
    v25[1] = v14;
    uint64_t v17 = (_anonymous_namespace_ *)re::TypeRegistry::addAttribute((uint64_t)a1, &v26, -1, (uint64_t)v25, (uint64_t)re::internal::less<re::DynamicString>, 0);
  }
  long long v18 = *(_OWORD *)a3;
  long long v20 = *a4;
  long long v21 = v18;
  re::TypeBuilder::beginDictionaryType((uint64_t)&v22, a2, 1, 0x30uLL, 8uLL, &v21, &v20);
  re::TypeBuilder::setConstructor((uint64_t)&v22, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
  re::TypeBuilder::setDestructor((uint64_t)&v22, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
  re::TypeBuilder::setDictionaryAccessors((uint64_t)&v22, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
  re::TypeBuilder::setDictionaryIterator((uint64_t)&v22, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
  re::TypeBuilder::commitTo((re::TypeBuilder *)&v22, a1, a5);
  re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v22, v19);
}

void *re::IntrospectionHashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, re::DynamicString *a5)
{
  uint64_t v12 = 0;
  memset(v10, 0, sizeof(v10));
  int v11 = 0;
  uint64_t v8 = (re::IntrospectionBase *)re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a4, a5, (uint64_t)v10);
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = (int *)(*(void *)(a2 + 16) + 8);
    while (1)
    {
      int v8 = *v7;
      v7 += 22;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 88 * v10 + 16, *(void *)(a2 + 16) + 88 * v10 + 48);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 88 * v10 + 8) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroyKey(int a1, re::DynamicString *this)
{
  return re::DynamicString::deinit(this);
}

void re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_199, 4 * v2);
    }
    if (*(_DWORD *)(a1 + 32))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(*(void *)(a1 + 16) + v3);
        ++v4;
        v3 += 88;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    int v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

uint64_t re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(uint64_t a1, re::DynamicString *a2, uint64_t a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 88 * v11;
    return v12 + 48;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 88 * v9 + 16, (uint64_t)a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 88 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v10 + 88 * v9 + 48, a3);
  ++*(_DWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 16) + 88 * v9;
  return v12 + 48;
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
  return re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
    re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, re::DynamicString *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a1, a4, (uint64_t)Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 88 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        unint64_t v6 = (int *)(*(void *)(v2 + 16) + 8);
        while (1)
        {
          int v7 = *v6;
          v6 += 22;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 88 * *(unsigned int *)(a1 + 32) + 16;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 88 * *(unsigned int *)(a1 + 32) + 48;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

re::RealityFile *re::make::shared::object<re::RealityFile,char const*&>@<X0>(re *a1@<X0>, re::RealityFile **a2@<X8>)
{
  int v4 = re::globalAllocators(a1);
  uint64_t v5 = (re::RealityFile *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 136, 8);
  uint64_t result = re::RealityFile::RealityFile(v5, *(re **)a1);
  *a2 = result;
  return result;
}

re::RealityFile *re::make::shared::object<re::RealityFile,re::Data const&>@<X0>(re *a1@<X0>, re::RealityFile **a2@<X8>)
{
  int v4 = re::globalAllocators(a1);
  uint64_t v5 = (re::RealityFile *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 136, 8);
  uint64_t result = re::RealityFile::RealityFile(v5, (id *)a1);
  *a2 = result;
  return result;
}

re::DynamicString *re::Result<re::SharedPtr<re::RealityArchive>,re::DynamicString>::~Result(re::DynamicString *this)
{
  uint64_t v2 = (char *)this + 8;
  if (*(unsigned char *)this)
  {
    if (*(void *)v2)
    {

      *(void *)uint64_t v2 = 0;
    }
  }
  else
  {
    re::DynamicString::deinit((re::DynamicString *)((char *)this + 8));
  }
  return this;
}

unsigned int *std::__variant_detail::__ctor<std::__variant_detail::__traits<re::FileSeekableInputStream,re::CFDataSeekableInputStream>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<re::FileSeekableInputStream,re::CFDataSeekableInputStream>,(std::__variant_detail::_Trait)1>>(unsigned int *result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result[54];
  if (v4 != -1) {
    uint64_t result = (unsigned int *)off_26E6CAD10[v4]((int)&v7, (re::FileSeekableInputStream *)result);
  }
  v3[54] = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 216);
  if (v5 != -1)
  {
    uint64_t result = (unsigned int *)((uint64_t (*)(char *, unsigned int *, uint64_t))off_26E6CB2B8[v5])(&v6, v3, a2);
    v3[54] = v5;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2re23FileSeekableInputStreamENS8_25CFDataSeekableInputStreamEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::FileSeekableInputStream::FileSeekableInputStream(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2re23FileSeekableInputStreamENS8_25CFDataSeekableInputStreamEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::CFDataSeekableInputStream::CFDataSeekableInputStream(a2, a3);
}

double re::HashTable<re::DynamicString,re::DynamicArray<re::SharedPtr<re::AssetDescriptorBase const>>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::DynamicArray<re::SharedPtr<re::AssetDescriptorBase const>>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 88;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicArray<re::SharedPtr<re::AssetDescriptorBase const>>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 8);
  if (v1 < 0)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v1 & 0x7FFFFFFF;
    re::DynamicString::deinit((re::DynamicString *)(result + 16));
    return re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(v2 + 48);
  }
  return result;
}

double re::HashTable<unsigned long,re::AssetMap::ConfigurationEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<unsigned long,re::AssetMap::ConfigurationEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 56;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<unsigned long,re::AssetMap::ConfigurationEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::EntryWithHash::free(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 0)
  {
    *(_DWORD *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v1 & 0x7FFFFFFF;
    re::FixedArray<re::DynamicString>::deinit((void *)(a1 + 32));
    uint64_t v3 = *(void *)(a1 + 24);
    if (v3)
    {

      *(void *)(a1 + 24) = 0;
    }
  }
}

void *re::FixedArray<re::FixedArray<re::DynamicString>>::deinit(void *result)
{
  if (*result)
  {
    int v1 = result;
    uint64_t v3 = result + 1;
    uint64_t v2 = result[1];
    if (v2)
    {
      unint64_t v4 = (void *)result[2];
      uint64_t v5 = 24 * v2;
      do
      {
        re::FixedArray<re::DynamicString>::deinit(v4);
        v4 += 3;
        v5 -= 24;
      }
      while (v5);
      double result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v1 + 40))(*v1, v1[2]);
      void *v3 = 0;
      v3[1] = 0;
    }
    void *v1 = 0;
  }
  return result;
}

unint64_t re::CaseInsensitiveStringHash::operator()(int a1, char *__s)
{
  size_t v3 = strlen(__s);
  if (v3 >= 8)
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
    uint64_t v6 = 8;
    do
    {
      uint64_t v7 = 0;
      unint64_t v8 = *(void *)&__s[v4];
      uint64_t v4 = v6;
      unint64_t __dst = v8;
      do
      {
        *((unsigned char *)&__dst + v7) = __tolower(*((char *)&__dst + v7));
        ++v7;
      }
      while (v7 != 8);
      unint64_t v9 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (__dst ^ (__dst >> 30))) ^ ((0xBF58476D1CE4E5B9 * (__dst ^ (__dst >> 30))) >> 27));
      uint64_t v5 = (v5 - 0x61C8864680B583E9 + ((v9 ^ (v9 >> 31)) << 6) + ((v9 ^ (v9 >> 31)) >> 2)) ^ v9 ^ (v9 >> 31);
      uint64_t v6 = v4 + 8;
    }
    while (v4 + 8 <= v3);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  size_t v10 = v3 - v4;
  if (v10)
  {
    unint64_t __dst = 0;
    memcpy(&__dst, &__s[v4], v10);
    for (uint64_t i = 0; i != v10; ++i)
      *((unsigned char *)&__dst + i) = __tolower(*((char *)&__dst + i));
    unint64_t v12 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (__dst ^ (__dst >> 30))) ^ ((0xBF58476D1CE4E5B9 * (__dst ^ (__dst >> 30))) >> 27));
    return (v5 - 0x61C8864680B583E9 + ((v12 ^ (v12 >> 31)) << 6) + ((v12 ^ (v12 >> 31)) >> 2)) ^ v12 ^ (v12 >> 31);
  }
  return v5;
}

void re::HashTable<char const*,unsigned long,re::CaseInsensitiveStringHash,re::CaseInsensitiveStringEqualTo,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v14, 0, 36);
      *(void *)&v14[36] = 0x7FFFFFFFLL;
      re::HashTable<char const*,unsigned long,re::CaseInsensitiveStringHash,re::CaseInsensitiveStringEqualTo,true,false>::init((uint64_t)v14, v4, a2);
      long long v5 = *(_OWORD *)v14;
      *(_OWORD *)char v14 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v14[16];
      uint64_t v7 = *(void *)(a1 + 16);
      *(void *)&v14[16] = v7;
      *(void *)(a1 + 16) = v6;
      long long v9 = *(_OWORD *)&v14[24];
      *(_OWORD *)&uint8_t v14[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v14[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        unint64_t v12 = (void *)(v7 + 16);
        do
        {
          if ((*(_DWORD *)(v12 - 1) & 0x80000000) != 0) {
            re::HashTable<char const*,unsigned long,re::CaseInsensitiveStringHash,re::CaseInsensitiveStringEqualTo,true,false>::addAsMove(a1, *(v12 - 2) % (unint64_t)*(unsigned int *)(a1 + 24), *(v12 - 2), v12, v12 + 1);
          }
          ++v11;
          v12 += 4;
        }
        while (v11 < v10);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v14);
    }
  }
  else
  {
    if (a2) {
      signed int v13 = a2;
    }
    else {
      signed int v13 = 3;
    }
  }
}

uint64_t re::HashTable<char const*,unsigned long,re::CaseInsensitiveStringHash,re::CaseInsensitiveStringEqualTo,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<char const*,unsigned long,re::CaseInsensitiveStringHash,re::CaseInsensitiveStringEqualTo,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 32 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 16) = *a4;
  uint64_t v13 = *(void *)(a1 + 8);
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v13 + 4 * are::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<char const*,unsigned long,re::CaseInsensitiveStringHash,re::CaseInsensitiveStringEqualTo,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    char v14 = v12;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_199, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SharedPtr<re::AssetDescriptorBase const> *,re::SharedPtr<re::AssetDescriptorBase const> *,re::SharedPtr<re::AssetDescriptorBase const> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  if (a1 != a2)
  {
    long long v5 = a1;
    do
    {
      uint64_t v6 = *v5;
      uint64_t v7 = *a3;
      if (*a3 != *v5)
      {
        if (v6)
        {
          id v8 = (id)(v6 + 8);
          uint64_t v7 = *a3;
        }
        if (v7) {

        }
        *a3 = v6;
      }
      ++v5;
      ++a3;
    }
    while (v5 != a2);
  }
}

void re::HashTable<re::DynamicString,re::DynamicArray<re::SharedPtr<re::AssetDescriptorBase const>>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v27, 0, 36);
      *(void *)&v27[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::DynamicArray<re::SharedPtr<re::AssetDescriptorBase const>>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v27, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v27;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v27[8];
      *(_OWORD *)StringID v27 = v5;
      *(void *)&v27[16] = v6;
      *(_OWORD *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7;
      long long v9 = *(_OWORD *)&v27[24];
      *(_OWORD *)&v27[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v27[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        char v14 = (void *)(v6 + 80);
        do
        {
          if ((*(_DWORD *)(v14 - 9) & 0x80000000) != 0)
          {
            unint64_t v15 = *(v14 - 10);
            unint64_t v16 = *(unsigned int *)(a1 + 24);
            unint64_t v17 = v15 % v16;
            unsigned int v18 = *(_DWORD *)(a1 + 36);
            if (v18 == 0x7FFFFFFF)
            {
              unsigned int v18 = *(_DWORD *)(a1 + 32);
              unsigned int v19 = v18;
              if (v18 == v16)
              {
                re::HashTable<re::DynamicString,re::DynamicArray<re::SharedPtr<re::AssetDescriptorBase const>>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * v12));
                unint64_t v17 = v15 % *(unsigned int *)(a1 + 24);
                unsigned int v19 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v19 + 1;
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 88 * v18 + 8);
            }
            else
            {
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 88 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 88 * v18 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v21 | 0x80000000;
            uint64_t v22 = *(void *)(a1 + 16) + 88 * v18;
            *(_DWORD *)(v22 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(v22 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(void *)(*(void *)(a1 + 16) + 88 * v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v15;
            re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + 88 * v18 + 16), (const re::DynamicString *)(v14 - 8));
            uint64_t v23 = *(void *)(a1 + 16) + 88 * v18;
            *(void *)(v23 + 80) = 0;
            *(_DWORD *)(v23 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
            *(void *)(v23 + 56) = 0;
            *(void *)(v23 + 64) = 0;
            *(void *)(v23 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
            *(void *)(v23 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(v14 - 4);
            *(v14 - 4) = 0;
            *(void *)(v23 + 56) = *(v14 - 3);
            *(v14 - 3) = 0;
            uint64_t v24 = *(void *)(v23 + 64);
            *(void *)(v23 + 64) = *(v14 - 2);
            *(v14 - re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v24;
            uint64_t v25 = *(void *)(v23 + 80);
            *(void *)(v23 + 80) = *v14;
            *char v14 = v25;
            ++*((_DWORD *)v14 - 2);
            ++*(_DWORD *)(v23 + 72);
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            int v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
          }
          ++v11;
          v14 += 11;
        }
        while (v11 < v10);
      }
      re::HashTable<re::DynamicString,re::DynamicArray<re::SharedPtr<re::AssetDescriptorBase const>>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v27);
    }
  }
  else
  {
    if (a2) {
      signed int v26 = a2;
    }
    else {
      signed int v26 = 3;
    }
  }
}

void re::HashTable<re::DynamicString,re::DynamicArray<re::SharedPtr<re::AssetDescriptorBase const>>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 88 * v10, 16);
  if (v12)
  {
    char v14 = v12;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_199, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<unsigned long,re::AssetMap::ConfigurationEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v25, 0, 36);
      *(void *)&v25[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long,re::AssetMap::ConfigurationEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init((uint64_t)v25, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v25;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v25[8];
      *(_OWORD *)uint64_t v25 = v5;
      *(void *)&v25[16] = v6;
      *(_OWORD *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7;
      long long v9 = *(_OWORD *)&v25[24];
      *(_OWORD *)&unsigned char v25[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v25[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        char v14 = (void *)(v6 + 24);
        do
        {
          if ((*(_DWORD *)(v14 - 2) & 0x80000000) != 0)
          {
            unint64_t v15 = *(v14 - 3);
            unint64_t v16 = *(unsigned int *)(a1 + 24);
            unint64_t v17 = v15 % v16;
            uint64_t v18 = *(unsigned int *)(a1 + 36);
            if (v18 == 0x7FFFFFFF)
            {
              uint64_t v18 = *(unsigned int *)(a1 + 32);
              int v19 = v18;
              if (v18 == v16)
              {
                re::HashTable<unsigned long,re::AssetMap::ConfigurationEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, (2 * v12));
                unint64_t v17 = v15 % *(unsigned int *)(a1 + 24);
                int v19 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v19 + 1;
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 56 * v18 + 8);
            }
            else
            {
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 56 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 56 * v18 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 56 * v18 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 56 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(void *)(*(void *)(a1 + 16) + 56 * v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v15;
            *(void *)(*(void *)(a1 + 16) + 56 * v18 + 16) = *(v14 - 1);
            uint64_t v22 = (void *)(*(void *)(a1 + 16) + 56 * v18);
            v22[3] = *v14;
            *char v14 = 0;
            void v22[4] = 0;
            v22[5] = 0;
            v22[6] = 0;
            void v22[4] = v14[1];
            v14[1] = 0;
            v22[5] = v14[2];
            void v14[2] = 0;
            uint64_t v23 = v22[6];
            v22[6] = v14[3];
            v14[3] = v23;
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            int v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
          }
          v14 += 7;
          ++v11;
        }
        while (v11 < v10);
      }
      re::HashTable<unsigned long,re::AssetMap::ConfigurationEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)v25);
    }
  }
  else
  {
    if (a2) {
      signed int v24 = a2;
    }
    else {
      signed int v24 = 3;
    }
  }
}

void re::HashTable<unsigned long,re::AssetMap::ConfigurationEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 56 * v10, 16);
  if (v12)
  {
    char v14 = v12;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_199, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void *re::allocInfo_NetworkAssetLoadDescriptorParameters(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_45, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_45))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF75C38, "NetworkAssetLoadDescriptorParameters");
    __cxa_guard_release(&_MergedGlobals_45);
  }
  return &unk_26AF75C38;
}

void re::initInfo_NetworkAssetLoadDescriptorParameters(re *this, re::IntrospectionBase *a2)
{
  v10[0] = 0xA7193B92A74838C2;
  v10[1] = "NetworkAssetLoadDescriptorParameters";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v11;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF75C30, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF75C30);
    if (v4)
    {
      long long v5 = re::introspectionAllocator(v4);
      long long v7 = re::introspect_uint64_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "networkAssetId";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF75C28 = v8;
      __cxa_guard_release(&qword_26AF75C30);
    }
  }
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 1;
  *((_DWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 1;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = &qword_26AF75C28;
  *((void *)this + 9) = re::internal::defaultConstruct<re::NetworkAssetLoadDescriptorParameters>;
  *((void *)this + 11) = 0;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::NetworkAssetLoadDescriptorParameters>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::NetworkAssetLoadDescriptorParameters>;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::NetworkAssetLoadDescriptorParameters>;
  re::IntrospectionRegistry::add(this, v3);
  long long v9 = v11;
}

uint64_t re::introspect_NetworkAssetLoadDescriptorParameters(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"NetworkAssetLoadDescriptorParameters", (uint64_t (*)(re::internal *))re::allocInfo_NetworkAssetLoadDescriptorParameters, (re::IntrospectionBase *(*)(void))re::initInfo_NetworkAssetLoadDescriptorParameters, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::NetworkAssetLoadDescriptorParameters>, this);
}

re::DynamicString *re::NetworkAssetLoadDescriptor::init(uint64_t a1, const re::IntrospectionBase *a2, re::DynamicString *a3)
{
  v8[0] = (const re::IntrospectionBase *)"NetworkAsset";
  v8[1] = (const re::IntrospectionBase *)12;
  unint64_t v6 = (char **)re::DynamicString::operator=((re::DynamicString *)a1, (uint64_t)v8);
  v8[0] = a2;
  re::AssetLoadDescriptor::setIntrospectableData(v6, (const re::IntrospectionBase *)re::NetworkAssetProvider::s_loadDescriptorParametersIntrospect, v8, 0);
  return re::DynamicString::operator=((re::DynamicString *)(a1 + 112), a3);
}

_anonymous_namespace_ *re::NetworkAssetProvider::NetworkAssetProvider(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)a1 = &unk_26E6CB358;
  *((void *)a1 + 5) = 0;
  uint64_t v8 = &qword_268772000;
  {
    uint64_t v8 = &qword_268772000;
    if (v10)
    {
      re::introspect<re::NetworkAssetLoadDescriptorParameters>(void)::info = re::internal::getOrCreateInfo((re::internal *)"NetworkAssetLoadDescriptorParameters", (uint64_t (*)(re::internal *))re::allocInfo_NetworkAssetLoadDescriptorParameters, (re::IntrospectionBase *(*)(void))re::initInfo_NetworkAssetLoadDescriptorParameters, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::NetworkAssetLoadDescriptorParameters>, 0);
      uint64_t v8 = &qword_268772000;
    }
  }
  re::NetworkAssetProvider::s_loadDescriptorParametersIntrospect = v8[460];
  *((void *)a1 + 4) = a4;
  *((void *)a1 + 5) = a2;
  *((void *)a1 + 3) = a3;
  return a1;
}

void re::NetworkAssetProvider::~NetworkAssetProvider(re::NetworkAssetProvider *this)
{
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void re::NetworkAssetProvider::load(uint64_t a1, uint64_t a2)
{
}

uint64_t re::NetworkAssetProvider::resolveChild@<X0>(re::NetworkAssetProvider *this@<X0>, const re::AssetLoadDescriptor *a2@<X1>, const char *a3@<X2>, const char *a4@<X3>, uint64_t a5@<X8>)
{
  if (*((unsigned char *)a2 + 8)) {
    int v10 = (const char *)*((void *)a2 + 2);
  }
  else {
    int v10 = (char *)a2 + 9;
  }
  if (strcmp(v10, "NetworkAsset"))
  {
    uint64_t result = re::DynamicString::format((re::DynamicString *)"Cannot resolve with a parent AssetLoadDescriptor of scheme %s. Expected scheme %s.", (re::DynamicString *)&v36, v10, "NetworkAsset");
LABEL_6:
    long long v12 = v36;
    long long v13 = v37;
    *(unsigned char *)a5 = 0;
    *(_OWORD *)(a5 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    *(_OWORD *)(a5 + 24) = v13;
    return result;
  }
  re::AssetLoadDescriptor::getIntrospectableData<re::NetworkAssetLoadDescriptorParameters>(a2, &v46, 0);
  char v14 = v46;
  (*(void (**)(long long *__return_ptr))(**((void **)this + 5) + 96))(&v36);
  if (!(_BYTE)v36)
  {
    uint64_t result = re::DynamicString::format((re::DynamicString *)"Could not find AssetId for dependency with relative path %s from parent asset with AssetId %lu.", (re::DynamicString *)&v36, a3, v14);
    goto LABEL_6;
  }
  unint64_t v15 = (_anonymous_namespace_ *)(*(void *(**)(long long *__return_ptr))(**((void **)this + 5) + 96))(&v36);
  if (!(_BYTE)v36)
  {
    if (*((unsigned char *)a2 + 8)) {
      uint64_t v20 = (char *)*((void *)a2 + 2);
    }
    else {
      uint64_t v20 = (char *)a2 + 9;
    }
    uint64_t result = re::DynamicString::format((re::DynamicString *)"Dependent asset %s not found for Parent { scheme: %s, AssetId %llu. }", (re::DynamicString *)&v36, a3, v20, v14);
    goto LABEL_6;
  }
  unint64_t v16 = (const re::IntrospectionBase *)*((void *)&v36 + 1);
  long long v36 = 0u;
  long long v37 = 0u;
  unint64_t v17 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v36, 0);
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  int v41 = 0;
  uint64_t v40 = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  int v44 = 0;
  memset(v45, 0, 40);
  uint64_t v18 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v45[1], 0);
  re::NetworkAssetLoadDescriptor::init((uint64_t)&v36, v16, (re::DynamicString *)v35);
  if (*(void *)&v35[0])
  {
    if (BYTE8(v35[0])) {
      (*(void (**)(void))(**(void **)&v35[0] + 40))();
    }
    memset(v35, 0, sizeof(v35));
  }
  re::AssetLoadDescriptor::AssetLoadDescriptor((re::AssetLoadDescriptor *)&v21, (const re::AssetLoadDescriptor *)&v36);
  v19.n128_f64[0] = re::Optional<re::AssetLoadDescriptor>::Optional(a5, (uint64_t)&v21);
  if ((void)v33)
  {
    if (BYTE8(v33)) {
      (*(void (**)(double))(*(void *)v33 + 40))(v19.n128_f64[0]);
    }
    __n128 v19 = 0uLL;
    long long v33 = 0u;
    long long v34 = 0u;
  }
  if (v28)
  {
    if (v32) {
      (*(void (**)(__n128))(*(void *)v28 + 40))(v19);
    }
    uint64_t v32 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v28 = 0;
    ++v31;
  }
  if (v23)
  {
    if (v27) {
      (*(void (**)(__n128))(*(void *)v23 + 40))(v19);
    }
    uint64_t v27 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v23 = 0;
    ++v26;
  }
  if (v21 && (v22 & 1) != 0) {
    (*(void (**)(__n128))(*(void *)v21 + 40))(v19);
  }
  if (v45[1])
  {
    if (v45[2]) {
      (*(void (**)(__n128))(*(void *)v45[1] + 40))(v19);
    }
    __n128 v19 = 0uLL;
    memset(&v45[1], 0, 32);
  }
  if (*((void *)&v42 + 1))
  {
    if (v45[0]) {
      (*(void (**)(__n128))(**((void **)&v42 + 1) + 40))(v19);
    }
    v45[0] = 0;
    long long v43 = 0uLL;
    *((void *)&v42 + 1) = 0;
    ++v44;
  }
  if (v38)
  {
    if ((void)v42) {
      (*(void (**)(__n128))(*(void *)v38 + 40))(v19);
    }
    *(void *)&long long v42 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v38 = 0;
    ++v41;
  }
  uint64_t result = v36;
  if ((void)v36)
  {
    if (BYTE8(v36)) {
      return (*(uint64_t (**)(__n128))(*(void *)v36 + 40))(v19);
    }
  }
  return result;
}

uint64_t re::NetworkAssetProvider::getDescription(re::NetworkAssetProvider *this, const re::AssetLoadDescriptor *a2, re::DynamicString *a3)
{
  re::AssetLoadDescriptor::getIntrospectableData<re::NetworkAssetLoadDescriptorParameters>(a2, &v7, 0);
  re::DynamicString::format((re::DynamicString *)"%llu", (re::DynamicString *)&v5, v7);
  re::DynamicString::operator=(a3, (re::DynamicString *)&v5);
  uint64_t result = v5;
  if (v5)
  {
    if (v6) {
      return (*(uint64_t (**)(void))(*(void *)v5 + 40))();
    }
  }
  return result;
}

const char *re::NetworkAssetProvider::schemeName(re::NetworkAssetProvider *this)
{
  return "NetworkAsset";
}

uint64_t re::AssetType::generateCompiledExtension(re::AssetType *this)
{
  size_t v2 = strlen(*(const char **)this);
  re::DynamicString::append((re::DynamicString *)&v12, *(const char **)this, v2);
  size_t v3 = v14;
  uint64_t v4 = v13 & 1;
  if (v13) {
    uint64_t v5 = (char *)&v14[v13 >> 1];
  }
  else {
    uint64_t v5 = (char *)&v13 + (v13 >> 1) + 1;
  }
  if (v13) {
    char v6 = (char *)v14;
  }
  else {
    char v6 = (char *)&v13 + 1;
  }
  if (v6 != v5)
  {
    do
    {
      *char v6 = __tolower(*v6);
      ++v6;
    }
    while (v6 != v5);
    size_t v3 = v14;
    uint64_t v4 = v13 & 1;
  }
  if (v4) {
    long long v7 = v3;
  }
  else {
    long long v7 = (char *)&v13 + 1;
  }
  size_t v8 = strlen(v7);
  long long v9 = (char *)malloc_type_malloc(v8 + 1, 0xC8E4EC82uLL);
  if (v13) {
    int v10 = v14;
  }
  else {
    int v10 = (char *)&v13 + 1;
  }
  *((void *)this + 1) = strcpy(v9, v10);
  uint64_t result = v12;
  if (v12)
  {
    if (v13) {
      return (*(uint64_t (**)(void))(*(void *)v12 + 40))();
    }
  }
  return result;
}

void re::internal::AssetTypeRegistry::deinit(re::internal::AssetTypeRegistry *this)
{
  re::HashTable<re::AssetType const*,std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::clear((uint64_t)this);
  re::HashTable<char const*,re::AssetType const*,re::CaseInsensitiveStringHash,re::CaseInsensitiveStringEqualTo,true,false>::clear((uint64_t)this + 48);
  uint64_t v2 = *((void *)this + 14);
  if (v2)
  {
    size_t v3 = (uint64_t **)*((void *)this + 16);
    uint64_t v4 = 8 * v2;
    do
    {
      uint64_t v5 = *v3++;
      re::internal::destroyPersistent<re::internal::AssetTypeRegistry::OwnedAssetType>((re *)"deinit", 26, v5);
      v4 -= 8;
    }
    while (v4);
  }
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  ++*((_DWORD *)this + 30);
}

void re::HashTable<re::AssetType const*,std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_3, 4 * v2);
    }
    unint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = *(void *)(a1 + 16) + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7 & 0x7FFFFFFF;
          std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)(v6 + 24));
          unint64_t v3 = *(unsigned int *)(a1 + 32);
        }
        v4 += 64;
      }
    }
    *(_DWORD *)(a1 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    int v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

void re::HashTable<char const*,re::AssetType const*,re::CaseInsensitiveStringHash,re::CaseInsensitiveStringEqualTo,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_13, 4 * v2);
    }
    uint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 32 * v3;
      do
      {
        uint64_t v6 = *(void *)(a1 + 16) + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0) {
          *(_DWORD *)(v6 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7 & 0x7FFFFFFF;
        }
        v4 += 32;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    int v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

re *re::internal::destroyPersistent<re::internal::AssetTypeRegistry::OwnedAssetType>(re *result, uint64_t a2, uint64_t *a3)
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    re::internal::destroyPersistent<re::AssetType>((re *)"~OwnedAssetType", 119, a3[4]);
    v5.n128_f64[0] = re::DynamicString::deinit((re::DynamicString *)a3);
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t *, __n128))(*(void *)v4 + 40);
    return (re *)v6(v4, a3, v5);
  }
  return result;
}

void re::internal::AssetTypeRegistry::~AssetTypeRegistry(re::internal::AssetTypeRegistry *this)
{
}

uint64_t re::internal::AssetTypeRegistry::registerAssetType(uint64_t a1, char **a2, uint64_t *a3)
{
  uint64_t v6 = a2;
  re::HashTable<re::AssetType const*,std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::add(a1, (uint64_t *)&v6, a3);
  __n128 v5 = *v6;
  return re::HashTable<char const*,re::AssetType const*,re::CaseInsensitiveStringHash,re::CaseInsensitiveStringEqualTo,true,false>::add<re::AssetType const*&>(a1 + 48, &v5, &v6);
}

unint64_t re::HashTable<re::AssetType const*,std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::add(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<re::AssetType const*,std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    unint64_t v12 = *(void *)(a1 + 16) + ((unint64_t)v13 << 6);
    return v12 + 24;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + (v10 << 6) + 16) != v6)
  {
    uint64_t v10 = *(_DWORD *)(v11 + (v10 << 6) + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  unint64_t v12 = v11 + (v10 << 6);
  return v12 + 24;
}

uint64_t re::HashTable<char const*,re::AssetType const*,re::CaseInsensitiveStringHash,re::CaseInsensitiveStringEqualTo,true,false>::add<re::AssetType const*&>(uint64_t a1, char **a2, void *a3)
{
  unint64_t v6 = re::CaseInsensitiveStringHash::operator()((int)&v15, *a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<char const*,re::AssetType const*,re::CaseInsensitiveStringHash,re::CaseInsensitiveStringEqualTo,true,false>::addEmplace<re::AssetType const*&>(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return *(void *)(a1 + 16) + 32 * v13 + 24;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *a2;
  while (1)
  {
    uint64_t v12 = v10 + 32 * v9;
    if (!strcasecmp(*(const char **)(v12 + 16), v11)) {
      return v12 + 24;
    }
    uint64_t v9 = *(_DWORD *)(v12 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
}

void re::internal::AssetTypeRegistry::registerOwnedAssetType(char *a1@<X1>, uint64_t a2@<X0>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = a2;
  uint8_t v37[4] = *MEMORY[0x263EF8340];
  uint64_t v8 = *(unsigned int *)(a2 + 32);
  if (v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = (int *)(*(void *)(a2 + 16) + 8);
    while (1)
    {
      int v11 = *v10;
      v10 += 16;
      if (v11 < 0) {
        break;
      }
      if (v8 == ++v9)
      {
        LODWORD(v9) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  if (v8 == v9)
  {
LABEL_18:
    unint64_t v16 = re::globalAllocators((re *)a2);
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16[2] + 32))(v16[2], 40, 8);
    __n128 v19 = re::globalAllocators(v18);
    uint64_t v20 = (re::AssetType *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v19[2] + 32))(v19[2], 24, 8);
    uint64_t v21 = v20;
    if (*(unsigned char *)(v17 + 8)) {
      uint64_t v22 = *(void *)(v17 + 16);
    }
    else {
      uint64_t v22 = v17 + 9;
    }
    *(void *)uint64_t v20 = v22;
    *((void *)v20 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    CompiledExtension = (_anonymous_namespace_ *)re::AssetType::generateCompiledExtension(v20);
    *(void *)(v17 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v21;
    unint64_t v24 = *(void *)(v6 + 104);
    unint64_t v25 = *(void *)(v6 + 112);
    if (v25 >= v24)
    {
      unint64_t v26 = v25 + 1;
      if (v24 < v25 + 1)
      {
        if (*(void *)(v6 + 96))
        {
          uint64_t v27 = 2 * v24;
          BOOL v28 = v24 == 0;
          unint64_t v29 = 8;
          if (!v28) {
            unint64_t v29 = v27;
          }
          if (v29 <= v26) {
            unint64_t v30 = v26;
          }
          else {
            unint64_t v30 = v29;
          }
          re::DynamicArray<float *>::setCapacity((void *)(v6 + 96), v30);
        }
        else
        {
          re::DynamicArray<float *>::setCapacity((void *)(v6 + 96), v26);
          ++*(_DWORD *)(v6 + 120);
        }
      }
      unint64_t v25 = *(void *)(v6 + 112);
    }
    *(void *)(*(void *)(v6 + 128) + 8 * v25) = v17;
    *(void *)(v6 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v25 + 1;
    ++*(_DWORD *)(v6 + 120);
    uint64_t v32 = *(char ***)(v17 + 32);
    uint64_t v33 = *a3;
    *a3 = 0;
    uint64_t v36 = v33;
    std::__function::__value_func<void ()(re::AssetLoader *)>::__value_func[abi:nn180100]((uint64_t)v37, (uint64_t)(a3 + 1));
    re::internal::AssetTypeRegistry::registerAssetType(v6, v32, &v36);
    std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100](&v36);
    uint64_t v34 = *(void *)(v17 + 32);
    *(unsigned char *)a4 = 1;
    *(void *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v34;
  }
  else
  {
    uint64_t v12 = v9;
    uint64_t v13 = *(void *)(a2 + 16);
    while (1)
    {
      a2 = strcasecmp(a1, **(const char ***)(v13 + (v12 << 6) + 16));
      if (!a2) {
        break;
      }
      if (v8 <= (int)v9 + 1) {
        int v14 = v9 + 1;
      }
      else {
        int v14 = v8;
      }
      while (1)
      {
        uint64_t v12 = (v9 + 1);
        if (v14 - 1 == v9) {
          break;
        }
        LODWORD(v9) = v9 + 1;
        int v15 = v12;
        if ((*(_DWORD *)(v13 + (v12 << 6) + 8) & 0x80000000) != 0) {
          goto LABEL_17;
        }
      }
      int v15 = v14;
LABEL_17:
      LODWORD(v9) = v15;
      if (v8 == v15) {
        goto LABEL_18;
      }
    }
    re::WrappedError::make((re::WrappedError *)@"REAssetTypeRegistrationErrorDomain", (const __CFString *)5, 0, &v35);
    uint64_t v31 = v35;
    uint64_t v35 = 0;
    *(unsigned char *)a4 = 0;
    *(void *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v31;
  }
}

uint64_t re::internal::AssetTypeRegistry::assetLoaderWithAssetType(uint64_t a1, unint64_t a2)
{
  LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x7FFFFFFF;
  if (*(void *)a1)
  {
    unint64_t v3 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((v3 ^ (v3 >> 31)) % *(unsigned int *)(a1 + 24)));
    if (v4 != 0x7FFFFFFF)
    {
      uint64_t v5 = *(void *)(a1 + 16);
      if (*(void *)(v5 + (v4 << 6) + 16) == a2)
      {
        LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v4;
      }
      else
      {
        uint64_t v2 = v4;
        while (1)
        {
          uint64_t v2 = *(_DWORD *)(v5 + (v2 << 6) + 8) & 0x7FFFFFFF;
          if (v2 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v5 + (v2 << 6) + 16) == a2) {
            return *(void *)(*(void *)(a1 + 16) + ((unint64_t)v2 << 6) + 24);
          }
        }
        LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x7FFFFFFF;
      }
    }
  }
  return *(void *)(*(void *)(a1 + 16) + ((unint64_t)v2 << 6) + 24);
}

uint64_t re::internal::AssetTypeRegistry::assetTypeWithExtension(re::internal::AssetTypeRegistry *this, const char *a2)
{
  uint64_t v4 = *((unsigned int *)this + 8);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (int *)(*((void *)this + 2) + 8);
    while (1)
    {
      int v7 = *v6;
      v6 += 16;
      if (v7 < 0) {
        break;
      }
      if (v4 == ++v5)
      {
        LODWORD(v5) = *((_DWORD *)this + 8);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if (v4 == v5) {
    return 0;
  }
  uint64_t v8 = v5;
  while (1)
  {
    uint64_t v9 = *((void *)this + 2) + (v8 << 6);
    if ((*(unsigned int (**)(void, const char *))(**(void **)(v9 + 24) + 96))(*(void *)(v9 + 24), a2))
    {
      return *(void *)(v9 + 16);
    }
    if (*((_DWORD *)this + 8) <= (v5 + 1)) {
      int v10 = v5 + 1;
    }
    else {
      int v10 = *((_DWORD *)this + 8);
    }
    while (1)
    {
      uint64_t v8 = (v5 + 1);
      if (v10 - 1 == v5) {
        break;
      }
      LODWORD(v5) = v5 + 1;
      int v11 = v8;
      if ((*(_DWORD *)(*((void *)this + 2) + (v8 << 6) + 8) & 0x80000000) != 0) {
        goto LABEL_17;
      }
    }
    int v11 = v10;
LABEL_17:
    LODWORD(v5) = v11;
    if (v4 == v11) {
      return 0;
    }
  }
}

uint64_t re::internal::AssetTypeRegistry::assetTypeWithName(re::internal::AssetTypeRegistry *this, char *a2)
{
  __s = a2;
  unint64_t v3 = (void *)((char *)this + 48);
  if (!re::HashTable<char const*,re::AssetType const*,re::CaseInsensitiveStringHash,re::CaseInsensitiveStringEqualTo,true,false>::containsKey((uint64_t)this + 48, &__s))return 0; {
  unint64_t v4 = re::CaseInsensitiveStringHash::operator()((int)&v13, __s);
  }
  uint64_t v5 = 0x7FFFFFFFLL;
  if (*v3)
  {
    uint64_t v6 = *(unsigned int *)(*((void *)this + 7) + 4 * (v4 % *((unsigned int *)this + 18)));
    if (v6 != 0x7FFFFFFF)
    {
      uint64_t v7 = *((void *)this + 8);
      uint64_t v8 = __s;
      do
      {
        uint64_t v9 = v7 + 32 * v6;
        int v10 = strcasecmp(*(const char **)(v9 + 16), v8);
        uint64_t v5 = v6;
        if (!v10) {
          break;
        }
        uint64_t v6 = *(_DWORD *)(v9 + 8) & 0x7FFFFFFF;
        uint64_t v5 = 0x7FFFFFFFLL;
      }
      while (v6 != 0x7FFFFFFF);
    }
  }
  return *(void *)(*((void *)this + 8) + 32 * v5 + 24);
}

BOOL re::HashTable<char const*,re::AssetType const*,re::CaseInsensitiveStringHash,re::CaseInsensitiveStringEqualTo,true,false>::containsKey(uint64_t a1, char **a2)
{
  unint64_t v4 = re::CaseInsensitiveStringHash::operator()((int)&v12, *a2);
  uint64_t v5 = 0x7FFFFFFFLL;
  if (*(void *)a1)
  {
    uint64_t v6 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
    if (v6 != 0x7FFFFFFF)
    {
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v8 = *a2;
      do
      {
        uint64_t v9 = v7 + 32 * v6;
        int v10 = strcasecmp(*(const char **)(v9 + 16), v8);
        uint64_t v5 = v6;
        if (!v10) {
          break;
        }
        uint64_t v6 = *(_DWORD *)(v9 + 8) & 0x7FFFFFFF;
        uint64_t v5 = 0x7FFFFFFFLL;
      }
      while (v6 != 0x7FFFFFFF);
    }
  }
  return v5 != 0x7FFFFFFF;
}

uint64_t re::internal::AssetTypeRegistry::assetTypeWithCompiledExtension(re::internal::AssetTypeRegistry *this, const char *__s2)
{
  uint64_t v3 = *((unsigned int *)this + 8);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (int *)(*((void *)this + 2) + 8);
    while (1)
    {
      int v6 = *v5;
      v5 += 16;
      if (v6 < 0) {
        break;
      }
      if (v3 == ++v4)
      {
        LODWORD(v4) = *((_DWORD *)this + 8);
        break;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if (v3 == v4) {
    return 0;
  }
  uint64_t v7 = v4;
  uint64_t v8 = *((void *)this + 2);
  while (1)
  {
    uint64_t v9 = *(void *)(v8 + (v7 << 6) + 16);
    if (!strcmp(*(const char **)(v9 + 8), __s2)) {
      return v9;
    }
    if (v3 <= (int)v4 + 1) {
      int v10 = v4 + 1;
    }
    else {
      int v10 = v3;
    }
    while (1)
    {
      uint64_t v7 = (v4 + 1);
      if (v10 - 1 == v4) {
        break;
      }
      LODWORD(v4) = v4 + 1;
      int v11 = v7;
      if ((*(_DWORD *)(v8 + (v7 << 6) + 8) & 0x80000000) != 0) {
        goto LABEL_17;
      }
    }
    int v11 = v10;
LABEL_17:
    LODWORD(v4) = v11;
    if (v3 == v11) {
      return 0;
    }
  }
}

re *re::internal::destroyPersistent<re::AssetType>(re *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    free(*(void **)(a3 + 8));
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

double re::HashTable<re::AssetType const*,std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7 & 0x7FFFFFFF;
          std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>::~unique_ptr[abi:nn180100]((uint64_t *)(v6 + 24));
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 64;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<re::AssetType const*,std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      int v12 = *(_DWORD *)(a1 + 28);
      signed int v13 = 2 * v12;
      uint64_t v14 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v13) {
          BOOL v15 = v10 == v13;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v30, 0, 36);
          *(void *)&v30[36] = 0x7FFFFFFFLL;
          re::HashTable<re::AssetType const*,std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::init((uint64_t)v30, v14, v13);
          long long v16 = *(_OWORD *)v30;
          *(_OWORD *)unint64_t v30 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          uint64_t v17 = *(void *)&v30[16];
          uint64_t v18 = *(void *)(a1 + 16);
          *(void *)&v30[16] = v18;
          *(void *)(a1 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = v17;
          long long v20 = *(_OWORD *)&v30[24];
          *(_OWORD *)&v30[24] = *(_OWORD *)(a1 + 24);
          unsigned int v19 = *(_DWORD *)&v30[32];
          *(_OWORD *)(a1 + 24) = v20;
          unint64_t v21 = v19;
          if (v19)
          {
            unint64_t v22 = 0;
            uint64_t v23 = v18 + 16;
            do
            {
              if ((*(_DWORD *)(v23 - 8) & 0x80000000) != 0) {
                re::HashTable<re::AssetType const*,std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addAsMove(a1, *(void *)(v23 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v23 - 16), v23, v23 + 8);
              }
              ++v22;
              v23 += 64;
            }
            while (v22 < v21);
          }
          re::HashTable<re::AssetType const*,std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v30);
        }
      }
      else
      {
        if (v13) {
          signed int v26 = 2 * v12;
        }
        else {
          signed int v26 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v11 + 1;
    uint64_t v24 = *(void *)(a1 + 16);
    int v25 = *(_DWORD *)(v24 + (v10 << 6) + 8);
  }
  else
  {
    uint64_t v24 = *(void *)(a1 + 16);
    int v25 = *(_DWORD *)(v24 + (v10 << 6) + 8);
    *(_DWORD *)(a1 + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = v25 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v24 + (v10 << 6) + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v25 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + (v10 << 6) + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + (v10 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + (v10 << 6)) = a3;
  *(void *)(*(void *)(a1 + 16) + (v10 << 6) + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = *a4;
  uint64_t v27 = *(void *)(a1 + 16) + (v10 << 6);
  uint64_t v28 = *a5;
  *a5 = 0;
  *(void *)(v27 + 24) = v28;
  std::__function::__value_func<void ()(re::AssetLoader *)>::__value_func[abi:nn180100](v27 + 32, (uint64_t)(a5 + 1));
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * are::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::AssetType const*,std::unique_ptr<re::AssetLoader,std::function<void ()(re::AssetLoader*)>>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + (v10 << 6), 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_13, 4 * v10);
    }
    *(void *)(a1 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<char const*,re::AssetType const*,re::CaseInsensitiveStringHash,re::CaseInsensitiveStringEqualTo,true,false>::addEmplace<re::AssetType const*&>(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<char const*,re::AssetType const*,re::CaseInsensitiveStringHash,re::CaseInsensitiveStringEqualTo,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 32 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = *a4;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * are::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<char const*,re::AssetType const*,re::CaseInsensitiveStringHash,re::CaseInsensitiveStringEqualTo,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v23, 0, 36);
      *(void *)&v23[36] = 0x7FFFFFFFLL;
      re::HashTable<char const*,re::AssetType const*,re::CaseInsensitiveStringHash,re::CaseInsensitiveStringEqualTo,true,false>::init((uint64_t)v23, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v23;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v23[8];
      *(_OWORD *)uint64_t v23 = v5;
      *(void *)&v23[16] = v6;
      *(_OWORD *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7;
      long long v9 = *(_OWORD *)&v23[24];
      *(_OWORD *)&unsigned char v23[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v23[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        uint64_t v14 = (void *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v14 - 1) & 0x80000000) != 0)
          {
            unint64_t v15 = *(v14 - 2);
            unint64_t v16 = *(unsigned int *)(a1 + 24);
            unint64_t v17 = v15 % v16;
            uint64_t v18 = *(unsigned int *)(a1 + 36);
            if (v18 == 0x7FFFFFFF)
            {
              uint64_t v18 = *(unsigned int *)(a1 + 32);
              int v19 = v18;
              if (v18 == v16)
              {
                re::HashTable<char const*,re::AssetType const*,re::CaseInsensitiveStringHash,re::CaseInsensitiveStringEqualTo,true,false>::setCapacity(a1, (2 * v12));
                unint64_t v17 = v15 % *(unsigned int *)(a1 + 24);
                int v19 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v19 + 1;
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 32 * v18 + 8);
            }
            else
            {
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 32 * v18 + 8);
              *(_DWORD *)(a1 + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 32 * v18 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 32 * v18 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(void *)(*(void *)(a1 + 16) + 32 * v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v15;
            *(void *)(*(void *)(a1 + 16) + 32 * v18 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = *v14;
            *(void *)(*(void *)(a1 + 16) + 32 * v18 + 24) = v14[1];
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            int v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
          }
          ++v11;
          v14 += 4;
        }
        while (v11 < v10);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v23);
    }
  }
  else
  {
    if (a2) {
      signed int v22 = a2;
    }
    else {
      signed int v22 = 3;
    }
  }
}

void re::HashTable<char const*,re::AssetType const*,re::CaseInsensitiveStringHash,re::CaseInsensitiveStringEqualTo,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_13, 4 * v10);
    }
    *(void *)(a1 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::internal::SharedAssetPointer::makeSharedAssetPointer(re::internal::SharedAssetPointer *this@<X0>, _anonymous_namespace_ **a2@<X8>)
{
  long long v5 = re::globalAllocators(this);
  unint64_t v6 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 32, 8);
  ArcSharedObject::ArcSharedObject(v6, 0);
  *((void *)v6 + 3) = this;
  *(void *)unint64_t v6 = &unk_26E6CB3F8;
  *a2 = v6;
}

re *re::internal::SharedAssetPointer::dispose(re *this)
{
  if (this)
  {
    int v1 = this;
    uint64_t v2 = re::globalAllocators(this)[2];
    (**(void (***)(re *))v1)(v1);
    unint64_t v3 = *(uint64_t (**)(uint64_t, re *))(*(void *)v2 + 40);
    return (re *)v3(v2, v1);
  }
  return this;
}

uint64_t re::internal::AssetEntry::makeAssetEntry@<X0>(_anonymous_namespace_ *a1@<X0>, uint64_t *a2@<X8>)
{
  int v2 = (int)a1;
  uint64_t result = re::internal::AssetEntry::AssetEntry(v4, 1, v2);
  *a2 = result;
  return result;
}

void anonymous namespace'::assetEntryAllocator(_anonymous_namespace_ *this)
{
  {
    byte_26879E328 = 0;
    unk_26879E320 = "AssetEntry allocator";
  }
}

void re::internal::AssetEntry::makeAssetEntry(re::internal::AssetEntry *this@<X0>, void *a2@<X1>, const re::AssetType *a3@<X2>, uint64_t *a4@<X8>)
{
  char v4 = (char)a3;
  uint64_t v9 = re::internal::AssetEntry::AssetEntry(v8, 1, 0);
  *a4 = v9;
  __uint64_t v10 = v9 + 704;
  re::internal::SharedAssetPointer::makeSharedAssetPointer(this, &v11);
  re::internal::AssetEntry::LoadState::setAssetPointer(v10, (uint64_t *)&v11);
  if (v11) {

  }
  *(void *)(v8 + 264) = a2;
  *(unsigned char *)(v8 + 25re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v4;
}

void re::internal::AssetEntry::LoadState::setAssetPointer(__uint64_t a1, uint64_t *a2)
{
  char v4 = *(os_unfair_lock_s **)(a1 + 24);
  os_unfair_lock_lock(v4);
  re::internal::AssetEntry::LoadState::setAssetPointer_locked(a1, a2);
  os_unfair_lock_unlock(v4);
}

uint64_t re::internal::AssetEntry::AssetEntry(uint64_t a1, char a2, int a3)
{
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_26E6CB428;
  *(unsigned char *)(a1 + 25re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(unsigned char *)(a1 + 257) = a2;
  *(void *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 31re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(unsigned char *)(a1 + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0;
  *(unsigned char *)(a1 + 33re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(unsigned char *)(a1 + 35re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(_DWORD *)(a1 + 384) = 0;
  *(_OWORD *)(a1 + 25re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(a1 + 274) = 0u;
  *(_OWORD *)(a1 + 284) = 0u;
  re::internal::AssetEntry::State::State((re::internal::AssetEntry::State *)(a1 + 392));
  *(_DWORD *)(a1 + 4re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = a3;
  *(unsigned char *)(a1 + 640) = 0;
  *(_DWORD *)(a1 + 704) = 0;
  *(void *)(a1 + 7re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0;
  *(void *)(a1 + 71re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(_OWORD *)(a1 + 64re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 67re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(void *)(a1 + 72re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = a1 + 384;
  *(unsigned char *)(a1 + 73re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(unsigned char *)(a1 + 744) = 0;
  *(unsigned char *)(a1 + 75re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(unsigned char *)(a1 + 760) = 0;
  *(unsigned char *)(a1 + 76re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(unsigned char *)(a1 + 77re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  objc_initWeak((id *)(a1 + 832), 0);
  *(_DWORD *)(a1 + 840) = 0;
  *(unsigned char *)(a1 + 84re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a1 + 664) = atomic_fetch_add(&re::internal::AssetEntry::AssetEntry(BOOL,re::AssetNetworkSharingMode)::uniqueHashID, 1uLL);
  return a1;
}

void re::internal::AssetEntry::~AssetEntry(re::internal::AssetEntry *this)
{
  *(void *)this = &unk_26E6CB428;
  objc_destroyWeak((id *)this + 104);
  *((void *)this + 104) = 0;
  uint64_t v3 = *((void *)this + 90);
  if (v3)
  {

    *((void *)this + 90) = 0;
  }
  uint64_t v4 = *((void *)this + 89);
  if (v4)
  {

    *((void *)this + 89) = 0;
  }
  if (*((unsigned char *)this + 592)) {
    v2.n128_f64[0] = re::DynamicString::deinit((re::internal::AssetEntry *)((char *)this + 600));
  }
  uint64_t v5 = *((void *)this + 65);
  if (v5)
  {
    int v6 = *((_DWORD *)this + 134);
    if ((v6 & 1) == 0)
    {
      (*(void (**)(uint64_t, void, __n128))(*(void *)v5 + 40))(v5, *((void *)this + 69), v2);
      int v6 = *((_DWORD *)this + 134);
    }
    *((void *)this + 65) = 0;
    *((void *)this + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
    *((_DWORD *)this + 134) = (v6 | 1) + 2;
  }
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 59);
  re::HashTable<re::DynamicString,re::Optional<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 53);
  long long v7 = (atomic_uint *)*((void *)this + 49);
  if (v7)
  {
    re::details::release<re::ResourceRequest>(v7);
    *((void *)this + 49) = 0;
  }
  re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::deinit((uint64_t)this + 272);
  re::DynamicString::deinit((re::internal::AssetEntry *)((char *)this + 224));
  re::DynamicString::deinit((re::internal::AssetEntry *)((char *)this + 192));
  re::DynamicString::deinit((re::internal::AssetEntry *)((char *)this + 160));
  re::DynamicString::deinit((re::internal::AssetEntry *)((char *)this + 128));
  re::DynamicString::deinit((re::internal::AssetEntry *)((char *)this + 72));
  re::DynamicString::deinit((re::internal::AssetEntry *)((char *)this + 40));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::internal::AssetEntry::~AssetEntry(this);
  JUMPOUT(0x237DBCBC0);
}

__uint64_t re::internal::AssetEntry::LoadState::unloadAssetPointer_locked(__uint64_t this, re::AssetLoader *a2)
{
  uint64_t v2 = *(void *)(this + 8);
  if (!v2 || !*(void *)(v2 + 24)) {
    return this;
  }
  __uint64_t v4 = this;
  int v5 = [(id)(v2 + 8) retainCount];
  uint64_t v6 = *(void *)(v4 + 8);
  if (v5 == 1)
  {
    (*(void (**)(re::AssetLoader *, void))(*(void *)a2 + 16))(a2, *(void *)(v6 + 24));
    uint64_t v6 = *(void *)(v4 + 8);
    *(void *)(v6 + 24) = 0;
LABEL_7:

    *(void *)(v4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    goto LABEL_8;
  }
  if (v6) {
    goto LABEL_7;
  }
LABEL_8:
  return re::internal::AssetEntry::LoadState::refreshLoadState_locked(v4);
}

uint64_t re::internal::AssetEntry::assetPointer(re::internal::AssetEntry *this)
{
  uint64_t v1 = *((void *)this + 89);
  if (v1)
  {
    uint64_t v2 = (void *)(v1 + 8);
    id v3 = (id)(v1 + 8);
    uint64_t v1 = *(void *)(v1 + 24);
  }
  return v1;
}

uint64_t re::internal::AssetEntry::LoadState::clearAndReturnAssetPointer_locked(re::internal::AssetEntry::LoadState *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1)
  {
    id v3 = (re *)[(id)(v1 + 8) retainCount];
    if ((int)v3 < 2)
    {
      uint64_t v6 = *((void *)this + 1);
      uint64_t v5 = *(void *)(v6 + 24);
      *(void *)(v6 + 24) = 0;

      *((void *)this + 1) = 0;
      re::internal::AssetEntry::LoadState::refreshLoadState_locked((__uint64_t)this);
      return v5;
    }
    __uint64_t v4 = *re::assetsLogObjects(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "clearAndReturnAssetPointer() not supported for Assets that share AssetPointer", v8, 2u);
    }
  }
  return 0;
}

uint64_t re::internal::AssetEntry::hasAssetPointer(re::internal::AssetEntry *this)
{
  uint64_t v1 = *((void *)this + 89);
  if (v1)
  {
    uint64_t v2 = (void *)(v1 + 8);
    id v3 = (id)(v1 + 8);
    uint64_t v1 = *(void *)(v1 + 24) != 0;
  }
  return v1;
}

uint64_t re::internal::AssetEntry::hasLoadingAssetPointer(re::internal::AssetEntry *this)
{
  uint64_t v1 = *((void *)this + 90);
  if (v1)
  {
    uint64_t v2 = (void *)(v1 + 8);
    id v3 = (id)(v1 + 8);
    uint64_t v1 = *(void *)(v1 + 24) != 0;
  }
  return v1;
}

uint64_t re::internal::AssetEntry::ownerPeerID@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = atomic_load((unint64_t *)(this + 672));
  if (v3)
  {
    *(unsigned char *)a2 = 1;
    *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v3;
  }
  else if (*(_DWORD *)(this + 120) == 4)
  {
    if (*(void *)(this + 48)) {
      __uint64_t v4 = *(const char **)(this + 56);
    }
    else {
      __uint64_t v4 = (const char *)(this + 49);
    }
    uint64_t v6 = 0;
    this = sscanf(v4, "%llu", &v6);
    if (this == 1)
    {
      *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v6;
      char v5 = 1;
    }
    else
    {
      char v5 = 0;
    }
    *(unsigned char *)a2 = v5;
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  return this;
}

uint64_t re::internal::AssetEntry::fromPeerID@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = atomic_load((unint64_t *)(this + 680));
  if (v3)
  {
    *(unsigned char *)a2 = 1;
    *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v3;
  }
  else if (*(_DWORD *)(this + 120) == 4)
  {
    if (*(void *)(this + 48)) {
      __uint64_t v4 = *(const char **)(this + 56);
    }
    else {
      __uint64_t v4 = (const char *)(this + 49);
    }
    uint64_t v6 = 0;
    this = sscanf(v4, "%llu", &v6);
    if (this == 1)
    {
      *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v6;
      char v5 = 1;
    }
    else
    {
      char v5 = 0;
    }
    *(unsigned char *)a2 = v5;
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  return this;
}

void re::internal::AssetEntry::setOwnerPeerID(atomic_ullong *this, unint64_t a2)
{
  uint64_t v2 = 0;
  atomic_compare_exchange_strong(this + 84, (unint64_t *)&v2, a2);
  if (v2)
  {
    unint64_t v3 = *re::assetsLogObjects((re *)this);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__uint64_t v4 = 0;
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "m_ownerPeerID was assigned a new value after it was already set.", v4, 2u);
    }
  }
}

void re::internal::AssetEntry::setFromPeerID(atomic_ullong *this, unint64_t a2)
{
  uint64_t v2 = 0;
  atomic_compare_exchange_strong(this + 85, (unint64_t *)&v2, a2);
  if (v2)
  {
    unint64_t v3 = *re::assetsLogObjects((re *)this);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__uint64_t v4 = 0;
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "m_fromPeerID was assigned a new value after it was already set.", v4, 2u);
    }
  }
}

void re::internal::AssetEntry::setResourceClientLoadState(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unsigned __int8 *a5)
{
  __uint64_t v10 = (os_unfair_lock_s *)(a1 + 384);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 384));
  if (*(unsigned char *)(a1 + 536)) {
    uint64_t v11 = a1 + 544;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 552);
  }
  uint64_t v12 = *(void *)(a1 + 528);
  if (v12)
  {
    uint64_t v13 = (_DWORD *)(v11 + 28);
    uint64_t v14 = 32 * v12;
    while (*(void *)(v13 - 7) != a2)
    {
      v13 += 8;
      v14 -= 32;
      if (!v14) {
        goto LABEL_8;
      }
    }
    *(v13 - 5) = a3;
    *(void *)(v13 - 3) = a4;
    int v15 = *a5;
    if (*((unsigned char *)v13 - 4)) {
      BOOL v16 = 0;
    }
    else {
      BOOL v16 = v15 == 0;
    }
    if (!v16)
    {
      if (*((unsigned char *)v13 - 4)) {
        BOOL v17 = v15 == 0;
      }
      else {
        BOOL v17 = 0;
      }
      if (v17)
      {
        *((unsigned char *)v13 - 4) = 0;
      }
      else
      {
        if (!*((unsigned char *)v13 - 4) && *a5) {
          *((unsigned char *)v13 - 4) = 1;
        }
        *uint64_t v13 = *((_DWORD *)a5 + 1);
      }
    }
  }
  else
  {
LABEL_8:
    *(void *)&long long v18 = a2;
    DWORD2(v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = a3;
    uint64_t v19 = a4;
    if (*a5) {
      int v21 = *((_DWORD *)a5 + 1);
    }
    re::DynamicOverflowArray<re::internal::AssetEntry::State::ResourceSharingClientLoadState,1ul>::add(a1 + 520, &v18);
  }
  os_unfair_lock_unlock(v10);
}

uint64_t re::DynamicOverflowArray<re::internal::AssetEntry::State::ResourceSharingClientLoadState,1ul>::add(uint64_t a1, long long *a2)
{
  uint64_t result = re::DynamicOverflowArray<re::internal::AssetEntry::State::ResourceSharingClientLoadState,1ul>::ensureCapacity(a1);
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v5 = a1 + 24;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 32);
  }
  uint64_t v6 = v5 + 32 * *(void *)(a1 + 8);
  long long v7 = *a2;
  *(void *)(v6 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v6 = v7;
  int v8 = *((unsigned __int8 *)a2 + 24);
  *(unsigned char *)(v6 + 24) = v8;
  if (v8) {
    *(_DWORD *)(v6 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *((_DWORD *)a2 + 7);
  }
  ++*(void *)(a1 + 8);
  *(_DWORD *)(a1 + 16) += 2;
  return result;
}

void anonymous namespace'::assetManagerDetachLock(_anonymous_namespace_ *this)
{
  {
  }
}

void re::internal::AssetEntry::addToAssetManager_assetTablesLocked(re::internal::AssetEntry *this, re::AssetManager *a2, const re::AssetPath *a3, char a4)
{
  *((unsigned char *)this + 257) = a4;
  *((void *)this + 3) = a2;
  *((void *)this + 33) = *((void *)a3 + 9);
  re::ExistingAssetInformation::setupFromPath((re::internal::AssetEntry *)((char *)this + 32), a3);
  re::AssetManager::getDescription_assetTablesLocked(*((re::AssetManager **)this + 3), this, 0, (uint64_t)&v8);
  if (v9) {
    uint64_t v6 = *(const char **)&v10[7];
  }
  else {
    uint64_t v6 = v10;
  }
  re::ExistingAssetInformation::CachedLogName::setDescription((re::internal::AssetEntry *)((char *)this + 160), v6);
  if (v8 && (v9 & 1) != 0) {
    (*(void (**)(void))(*(void *)v8 + 40))();
  }
  if (*((void *)a2 + 143))
  {
    uint64_t v7 = *((void *)this + 14);
    if ((unint64_t)(v7 + 1) >= 2) {
      re::NetworkActionQueue::queueSyncActionShareLoadState((re::AssetManager *)((char *)a2 + 704), v7);
    }
  }
}

void re::internal::AssetEntry::removeFromAssetManager(os_unfair_lock_s *this)
{
  os_unfair_lock_lock(this + 96);
  atomic_load(&this[176]._os_unfair_lock_opaque);
  *(void *)&this[6]._uint32_t os_unfair_lock_opaque = 0;
  re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::clear((uint64_t)&this[68]);
  os_unfair_lock_unlock(this + 96);
}

void re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  if (v2)
  {
    unint64_t v3 = *(id **)(a1 + 32);
    uint64_t v4 = 8 * v2;
    do
    {
      objc_destroyWeak(v3);
      *v3++ = 0;
      v4 -= 8;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

void re::internal::AssetEntry::cancelResourceRequest_stateLocked(re::internal::AssetEntry *this)
{
  if (*((void *)this + 49))
  {
    (*(void (**)(void))(**(void **)(*((void *)this + 3) + 1064) + 80))(*(void *)(*((void *)this + 3) + 1064));
    uint64_t v2 = (atomic_uint *)*((void *)this + 49);
    if (v2)
    {
      re::details::release<re::ResourceRequest>(v2);
      *((void *)this + 49) = 0;
    }
  }
}

void re::internal::AssetEntry::addExplicitParentDependency(re::internal::AssetEntry *this, re::internal::AssetEntry *a2)
{
  uint64_t v2 = (re::internal::AssetEntry *)((char *)this + 272);
  if (a2) {
    unint64_t v3 = (char *)a2 + 8;
  }
  else {
    unint64_t v3 = 0;
  }
  objc_initWeak(&location, v3);
  re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::add(v2, &location);
  objc_destroyWeak(&location);
}

uint64_t re::internal::AssetEntry::getMetadataString@<X0>(os_unfair_lock_s *a1@<X0>, const char *a2@<X1>, int a3@<W2>, unsigned char *a4@<X8>)
{
  uint64_t v8 = a1 + 96;
  if (a3) {
    os_unfair_lock_lock(a1 + 96);
  }
  char v9 = (unsigned __int8 *)re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)&a1[106], (uint64_t)&v15);
  if (!v9)
  {
    uint64_t v12 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)&a1[118], (uint64_t)&v15);
    int v13 = 1;
    if (!v12) {
      goto LABEL_10;
    }
    uint64_t v11 = (const re::DynamicString *)v12;
    *a4 = 1;
    goto LABEL_8;
  }
  int v10 = *v9;
  *a4 = v10;
  if (v10)
  {
    uint64_t v11 = (const re::DynamicString *)(v9 + 8);
LABEL_8:
    re::DynamicString::DynamicString((re::DynamicString *)(a4 + 8), v11);
  }
  int v13 = 0;
LABEL_10:
  if (a3) {
    os_unfair_lock_unlock(v8);
  }
  uint64_t result = v15;
  if (v15 && (v16 & 1) != 0) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)v15 + 40))();
  }
  if (v13) {
    *a4 = 0;
  }
  return result;
}

uint64_t *re::internal::AssetEntry::setOrClearMetadata_stateLocked(re::internal::AssetEntry *this, const re::StringID *a2, const char *a3)
{
  uint64_t v6 = (const char *)*((void *)a2 + 1);
  uint64_t v7 = (_anonymous_namespace_ *)strlen(v6);
  unint64_t v46 = v6;
  uint64_t v47 = v7;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  if (v7) {
    size_t v8 = (size_t)v7 + 1;
  }
  else {
    size_t v8 = 0;
  }
  uint64_t v51 = 0;
  re::DynamicString::setCapacity(&v50, v8);
  re::DynamicString::operator=((re::DynamicString *)&v50, (uint64_t)&v46);
  unint64_t v9 = strcmp(*((const char **)a2 + 1), "__RuntimeAssetSize");
  if (v9
    || (unint64_t v9 = re::Hash<re::DynamicString>::operator()((uint64_t)&v46, (uint64_t)&v50), !*((void *)this + 53))
    || (uint64_t v16 = *(unsigned int *)(*((void *)this + 54) + 4 * (v9 % *((unsigned int *)this + 112))),
        v16 == 0x7FFFFFFF))
  {
LABEL_5:
    int v10 = (void *)((char *)this + 424);
    if (a3)
    {
      unint64_t v11 = re::Hash<re::DynamicString>::operator()((uint64_t)&v54, (uint64_t)&v50);
      unint64_t v12 = v11;
      if (*v10)
      {
        unint64_t v13 = v11 % *((unsigned int *)this + 112);
        uint64_t v14 = *(unsigned int *)(*((void *)this + 54) + 4 * v13);
        if (v14 != 0x7FFFFFFF)
        {
          uint64_t v15 = *((void *)this + 55);
          while (!re::DynamicString::operator==(v15 + 88 * v14 + 16, (uint64_t)&v50))
          {
            uint64_t v14 = *(_DWORD *)(v15 + 88 * v14 + 8) & 0x7FFFFFFF;
            if (v14 == 0x7FFFFFFF) {
              goto LABEL_25;
            }
          }
          if (*(unsigned char *)(v15 + 88 * v14 + 48))
          {
            re::DynamicString::deinit((re::DynamicString *)(v15 + 88 * v14 + 56));
            uint64_t v15 = *((void *)this + 55);
          }
          uint64_t v34 = v15 + 88 * v14;
          *(unsigned char *)(v34 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 1;
          *(_OWORD *)(v34 + 5re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
          *(_OWORD *)(v34 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
          *(void *)(v34 + 5re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = v46;
          unint64_t v46 = 0;
          uint64_t v35 = *(void *)(v34 + 72);
          *(void *)(v34 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v48;
          uint64_t v48 = v35;
          *(void *)(v34 + 80) = v49;
          uint64_t v49 = 0;
          uint64_t v36 = *(_anonymous_namespace_ **)(v34 + 64);
          *(void *)(v34 + 64) = v47;
          uint64_t v47 = v36;
LABEL_31:
          ++*((_DWORD *)this + 116);
          uint64_t v31 = v46;
          if (v46 && (v47 & 1) != 0)
          {
            uint64_t v32 = v48;
LABEL_40:
            (*(void (**)(const char *, uint64_t))(*(void *)v31 + 40))(v31, v32);
            goto LABEL_41;
          }
          goto LABEL_41;
        }
      }
      else
      {
        LODWORD(v13) = 0;
      }
LABEL_25:
      unsigned int v23 = *((_DWORD *)this + 115);
      if (v23 == 0x7FFFFFFF)
      {
        unsigned int v23 = *((_DWORD *)this + 114);
        unsigned int v24 = v23;
        if (v23 == *((_DWORD *)this + 112))
        {
          re::HashTable<re::DynamicString,re::Optional<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity((uint64_t)this + 424, 2 * *((_DWORD *)this + 113));
          LODWORD(v13) = v12 % *((unsigned int *)this + 112);
          unsigned int v24 = *((_DWORD *)this + 114);
        }
        *((_DWORD *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = v24 + 1;
        uint64_t v25 = *((void *)this + 55);
        int v26 = *(_DWORD *)(v25 + 88 * v23 + 8);
      }
      else
      {
        uint64_t v25 = *((void *)this + 55);
        int v26 = *(_DWORD *)(v25 + 88 * v23 + 8);
        *((_DWORD *)this + 115) = v26 & 0x7FFFFFFF;
      }
      *(_DWORD *)(v25 + 88 * v23 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v26 | 0x80000000;
      uint64_t v27 = 88 * v23;
      *(_DWORD *)(*((void *)this + 55) + v27 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*((void *)this + 55) + v27 + 8) & 0x80000000 | *(_DWORD *)(*((void *)this + 54) + 4 * v13);
      *(void *)(*((void *)this + 55) + v27) = v12;
      re::DynamicString::DynamicString((re::DynamicString *)(*((void *)this + 55) + v27 + 16), (const re::DynamicString *)&v50);
      uint64_t v28 = *((void *)this + 55) + 88 * v23;
      *(unsigned char *)(v28 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 1;
      *(_OWORD *)(v28 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
      *(_OWORD *)(v28 + 5re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
      *(void *)(v28 + 5re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = v46;
      unint64_t v46 = 0;
      uint64_t v29 = *(void *)(v28 + 72);
      *(void *)(v28 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v48;
      uint64_t v48 = v29;
      *(void *)(v28 + 80) = v49;
      uint64_t v49 = 0;
      unint64_t v30 = *(_anonymous_namespace_ **)(v28 + 64);
      *(void *)(v28 + 64) = v47;
      uint64_t v47 = v30;
      *(_DWORD *)(*((void *)this + 54) + 4 * v13) = v23;
      ++*((_DWORD *)this + 113);
      goto LABEL_31;
    }
    LOBYTE(v4re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
    unint64_t v18 = re::Hash<re::DynamicString>::operator()((uint64_t)&v54, (uint64_t)&v50);
    unint64_t v19 = v18;
    if (*v10)
    {
      unint64_t v20 = v18 % *((unsigned int *)this + 112);
      uint64_t v21 = *(unsigned int *)(*((void *)this + 54) + 4 * v20);
      if (v21 != 0x7FFFFFFF)
      {
        uint64_t v22 = *((void *)this + 55);
        while (!re::DynamicString::operator==(v22 + 88 * v21 + 16, (uint64_t)&v50))
        {
          uint64_t v21 = *(_DWORD *)(v22 + 88 * v21 + 8) & 0x7FFFFFFF;
          if (v21 == 0x7FFFFFFF) {
            goto LABEL_35;
          }
        }
        re::Optional<re::DynamicString>::operator=((unsigned __int8 *)(v22 + 88 * v21 + 48), &v46);
LABEL_36:
        ++*((_DWORD *)this + 116);
        if ((_BYTE)v46)
        {
          uint64_t v31 = (const char *)v47;
          if (v47)
          {
            if (v48)
            {
              uint64_t v32 = v49;
              goto LABEL_40;
            }
          }
        }
LABEL_41:
        if (re::StringID::operator==(a2, re::internal::AssetEntry::kDebugNameMetadataKeyID)) {
          re::ExistingAssetInformation::CachedLogName::setDebugMetadata((re::internal::AssetEntry *)((char *)this + 160), a3);
        }
        goto LABEL_43;
      }
    }
    else
    {
      LODWORD(vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0;
    }
LABEL_35:
    re::HashTable<re::DynamicString,re::Optional<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove((uint64_t)this + 424, v20, v19, (re::DynamicString *)&v50, &v46);
    goto LABEL_36;
  }
  uint64_t v17 = *((void *)this + 55);
  while (1)
  {
    unint64_t v9 = re::DynamicString::operator==(v17 + 88 * v16 + 16, (uint64_t)&v50);
    if (v9) {
      break;
    }
    uint64_t v16 = *(_DWORD *)(v17 + 88 * v16 + 8) & 0x7FFFFFFF;
    if (v16 == 0x7FFFFFFF) {
      goto LABEL_5;
    }
  }
  if (a3)
  {
    long long v37 = *re::assetsLogObjects((re *)v9);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v4re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      _os_log_impl(&dword_233120000, v37, OS_LOG_TYPE_DEFAULT, "Can't override runtime asset size if it was automatically set during load.", (uint8_t *)&v46, 2u);
    }
  }
  else
  {
    unint64_t v38 = re::Hash<re::DynamicString>::operator()((uint64_t)&v46, (uint64_t)&v50);
    if (*((void *)this + 53))
    {
      unint64_t v39 = v38 % *((unsigned int *)this + 112);
      uint64_t v40 = *((void *)this + 54);
      uint64_t v41 = *(unsigned int *)(v40 + 4 * v39);
      if (v41 != 0x7FFFFFFF)
      {
        uint64_t v42 = *((void *)this + 55);
        if (re::DynamicString::operator==(v42 + 88 * v41 + 16, (uint64_t)&v50))
        {
          *(_DWORD *)(v40 + 4 * v39) = *(_DWORD *)(v42 + 88 * v41 + 8) & 0x7FFFFFFF;
LABEL_61:
          re::HashTable<re::DynamicString,re::Optional<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(*((void *)this + 55) + 88 * v41);
          uint64_t v45 = *((void *)this + 55) + 88 * v41;
          *(_DWORD *)(v45 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(v45 + 8) & 0x80000000 | *((_DWORD *)this + 115);
          *((_DWORD *)this + 115) = v41;
          --*((_DWORD *)this + 113);
          ++*((_DWORD *)this + 116);
        }
        else
        {
          while (1)
          {
            unsigned int v43 = v41;
            int v44 = *(_DWORD *)(v42 + 88 * v41 + 8);
            uint64_t v41 = v44 & 0x7FFFFFFF;
            if ((v44 & 0x7FFFFFFF) == 0x7FFFFFFF) {
              break;
            }
            if (re::DynamicString::operator==(v42 + 88 * v41 + 16, (uint64_t)&v50))
            {
              *(_DWORD *)(v42 + 88 * v43 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(v42 + 88 * v43 + 8) & 0x80000000 | *(_DWORD *)(v42 + 88 * v41 + 8) & 0x7FFFFFFF;
              goto LABEL_61;
            }
          }
        }
      }
    }
  }
LABEL_43:
  uint64_t result = v50;
  if (v50)
  {
    if (v51) {
      return (uint64_t *)(*(uint64_t (**)(void))(*v50 + 40))();
    }
  }
  return result;
}

double re::internal::AssetEntry::updateMetadata(re::internal::AssetEntry *this, char a2)
{
  if (*(void *)(*((void *)this + 3) + 1144))
  {
    uint64_t v3 = *((void *)this + 14);
    if ((unint64_t)(v3 + 1) >= 2)
    {
      unsigned int v26 = 0;
      long long v24 = 0u;
      long long v25 = 0u;
      uint64_t v27 = 0x7FFFFFFFLL;
      if ((a2 & 1) == 0) {
        os_unfair_lock_lock((os_unfair_lock_t)this + 96);
      }
      re::HashTable<re::StringID,re::Optional<re::DynamicString>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=((uint64_t)&v24, (uint64_t *)&v20);
      re::HashTable<re::StringID,re::Optional<re::DynamicString>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v20);
      unsigned int v6 = v26;
      if (v26)
      {
        uint64_t v7 = 0;
        size_t v8 = (int *)v25;
        while (1)
        {
          int v9 = *v8;
          v8 += 16;
          if (v9 < 0) {
            break;
          }
          if (v26 == ++v7)
          {
            LODWORD(v7) = v26;
            break;
          }
        }
      }
      else
      {
        LODWORD(v7) = 0;
      }
      if (v26 != v7)
      {
        uint64_t v10 = v7;
        uint64_t v11 = v25;
        do
        {
          uint64_t v12 = v11 + (v10 << 6);
          uint64_t v21 = 0;
          uint64_t v22 = 0;
          uint64_t v23 = 0;
          unint64_t v13 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v20, 0);
          if (*(unsigned char *)(v12 + 24)) {
            unint64_t v13 = re::DynamicString::operator=((re::DynamicString *)&v20, (re::DynamicString *)(v12 + 32));
          }
          uint64_t v14 = *(const char **)(v12 + 16);
          re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicString&>((uint64_t)this + 472, (re::DynamicString *)&v18, (const re::DynamicString *)&v20);
          if (v18 && (v19 & 1) != 0) {
            (*(void (**)(void))(*(void *)v18 + 40))();
          }
          uint64_t v5 = (_anonymous_namespace_ *)v20;
          if (v20 && (v21 & 1) != 0) {
            uint64_t v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*v20 + 40))();
          }
          uint64_t v11 = v25;
          if (v26 <= (int)v7 + 1) {
            unsigned int v15 = v7 + 1;
          }
          else {
            unsigned int v15 = v26;
          }
          while (1)
          {
            uint64_t v10 = (v7 + 1);
            if (v15 - 1 == v7) {
              break;
            }
            LODWORD(v7) = v7 + 1;
            unsigned int v16 = v10;
            if ((*(_DWORD *)(v25 + (v10 << 6)) & 0x80000000) != 0) {
              goto LABEL_28;
            }
          }
          unsigned int v16 = v15;
LABEL_28:
          LODWORD(v7) = v16;
        }
        while (v6 != v16);
      }
      if ((a2 & 1) == 0) {
        os_unfair_lock_unlock((os_unfair_lock_t)this + 96);
      }
      re::NetworkActionQueue::queueSyncActionShareMetadata((re::NetworkActionQueue *)(*((void *)this + 3) + 704), v3);
      return re::HashTable<re::StringID,re::Optional<re::DynamicString>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v24);
    }
  }
  return result;
}

void anonymous namespace'::convertOut(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(void *)(a2 + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0x7FFFFFFFLL;
  uint64_t v4 = *(unsigned int *)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = 0;
    unsigned int v6 = (int *)(*(void *)(a1 + 16) + 8);
    while (1)
    {
      int v7 = *v6;
      v6 += 22;
      if (v7 < 0) {
        break;
      }
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(a1 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if (v4 != v5)
  {
    uint64_t v8 = v5;
    uint64_t v9 = *(void *)(a1 + 16);
    do
    {
      uint64_t v10 = v9 + 88 * v8;
      uint64_t v11 = (unsigned __int8 *)(v10 + 48);
      re::StringID::StringID((re::StringID *)&v14, (const re::DynamicString *)(v10 + 16));
      re::HashTable<re::StringID,re::Optional<re::DynamicString>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<re::Optional<re::DynamicString>&>(a2, &v14, v11);
      re::StringID::destroyString((re::StringID *)&v14);
      uint64_t v9 = *(void *)(a1 + 16);
      if (*(_DWORD *)(a1 + 32) <= (v5 + 1)) {
        int v12 = v5 + 1;
      }
      else {
        int v12 = *(_DWORD *)(a1 + 32);
      }
      int v13 = v5;
      while (1)
      {
        uint64_t v8 = (v13 + 1);
        if (v12 - 1 == v13) {
          break;
        }
        ++v13;
        LODWORD(v5) = v8;
        if ((*(_DWORD *)(v9 + 88 * v8 + 8) & 0x80000000) != 0) {
          goto LABEL_17;
        }
      }
      LODWORD(v5) = v12;
LABEL_17:
      ;
    }
    while (v4 != v5);
  }
}

uint64_t re::HashTable<re::StringID,re::Optional<re::DynamicString>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    if (!*(void *)a1 || *(void *)a1 == *a2)
    {
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)a1, a2);
    }
    else if (*a2)
    {
      re::HashTable<re::StringID,re::Optional<re::DynamicString>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(a1, (uint64_t)a2);
      ++*(_DWORD *)(a1 + 40);
    }
    else
    {
      re::HashTable<re::StringID,re::Optional<re::DynamicString>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1);
    }
  }
  return a1;
}

double re::internal::AssetEntry::copyMetadataToNetworkAssetService(re::internal::AssetEntry *this)
{
  re::AssetManager::assertOnEngineQueue(*((re::AssetManager **)this + 3));
  int v6 = 0;
  memset(v5, 0, sizeof(v5));
  uint64_t v7 = 0x7FFFFFFFLL;
  os_unfair_lock_lock((os_unfair_lock_t)this + 96);
  re::HashTable<re::StringID,re::Optional<re::DynamicString>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=((uint64_t)v5, v4);
  re::HashTable<re::StringID,re::Optional<re::DynamicString>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v4);
  os_unfair_lock_unlock((os_unfair_lock_t)this + 96);
  if (*((void *)this + 14) == -1) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = *((void *)this + 14);
  }
  (*(void (**)(void, uint64_t, _OWORD *))(**(void **)(*((void *)this + 3) + 1144) + 48))(*(void *)(*((void *)this + 3) + 1144), v2, v5);
  return re::HashTable<re::StringID,re::Optional<re::DynamicString>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v5);
}

void re::internal::AssetEntry::setMetadata(uint64_t a1, uint64_t a2)
{
  re::AssetManager::assertOnEngineQueue(*(re::AssetManager **)(a1 + 24));
  if (*(void *)(*(void *)(a1 + 24) + 1144) && (unint64_t)(*(void *)(a1 + 112) + 1) >= 2)
  {
    uint64_t v4 = (os_unfair_lock_s *)(a1 + 384);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 384));
    uint64_t v5 = a1 + 472;
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(v5);
    uint64_t v7 = *(unsigned int *)(a2 + 32);
    if (v7)
    {
      uint64_t v8 = 0;
      uint64_t v9 = *(int **)(a2 + 16);
      while (1)
      {
        int v10 = *v9;
        v9 += 14;
        if (v10 < 0) {
          break;
        }
        if (v7 == ++v8)
        {
          LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(a2 + 32);
          break;
        }
      }
    }
    else
    {
      LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    }
    if (v7 != v8)
    {
      uint64_t v11 = v8;
      uint64_t v12 = *(void *)(a2 + 16);
      do
      {
        int v13 = (void *)(v12 + 56 * v11);
        StringID v14 = (const char *)v13[2];
        unint64_t v16 = v13[4];
        uint64_t v17 = (char *)v13[5];
        if ((v16 & 1) == 0) {
          uint64_t v17 = (char *)v13 + 33;
        }
        unint64_t v18 = v16 >> 1;
        unint64_t v19 = v16 >> 1;
        if (v13[4]) {
          unint64_t v20 = v18;
        }
        else {
          unint64_t v20 = v19;
        }
        v24[0] = v17;
        v24[1] = v20;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        if (v20) {
          size_t v21 = v20 + 1;
        }
        else {
          size_t v21 = 0;
        }
        re::DynamicString::setCapacity(&v25, v21);
        re::DynamicString::operator=((re::DynamicString *)&v25, (uint64_t)v24);
        re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add(v5, (re::DynamicString *)&v29, &v25);
        if (v25 && (v26 & 1) != 0) {
          (*(void (**)(void))(*v25 + 40))();
        }
        int v6 = v29;
        if (v29 && (v30 & 1) != 0) {
          int v6 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v29 + 40))();
        }
        uint64_t v12 = *(void *)(a2 + 16);
        if (*(_DWORD *)(a2 + 32) <= (v8 + 1)) {
          int v22 = v8 + 1;
        }
        else {
          int v22 = *(_DWORD *)(a2 + 32);
        }
        while (1)
        {
          uint64_t v11 = (v8 + 1);
          if (v22 - 1 == v8) {
            break;
          }
          LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v8 + 1;
          int v23 = v11;
          if ((*(_DWORD *)(v12 + 56 * v11) & 0x80000000) != 0) {
            goto LABEL_32;
          }
        }
        int v23 = v22;
LABEL_32:
        LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v23;
      }
      while (v7 != v23);
    }
    os_unfair_lock_unlock(v4);
  }
}

uint64_t re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add(uint64_t a1, re::DynamicString *a2, void *a3)
{
  unint64_t v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 80 * v11;
    return v12 + 48;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 80 * v9 + 16, (uint64_t)a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 80 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v10 + 80 * v9;
  return v12 + 48;
}

void re::internal::AssetEntry::updateMutatedRuntimeAssetSize(os_unfair_lock_s *this)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(void *)&this[6]._os_unfair_lock_opaque)
  {
    v9.__r_.__value_.__r.__words[0] = 0;
    v9.__r_.__value_.__l.__size_ = (std::string::size_type)"";
    os_unfair_lock_lock(this + 96);
    re::internal::AssetEntry::setOrClearMetadata_stateLocked((re::internal::AssetEntry *)this, (const re::StringID *)&v9, 0);
    os_unfair_lock_unlock(this + 96);
    re::StringID::destroyString((re::StringID *)&v9);
    if (LOBYTE(this[80]._os_unfair_lock_opaque)) {
      LOBYTE(this[80]._os_unfair_lock_opaque) = 0;
    }
    uint64_t v2 = *(re::AssetManager **)&this[6]._os_unfair_lock_opaque;
    if (*((unsigned char *)v2 + 1360))
    {
      os_unfair_lock_lock(this + 96);
      int v3 = re::AssetManager::assetByteSize_entryLocked(v2, (re::internal::AssetEntry *)this);
      os_unfair_lock_unlock(this + 96);
      uint64_t v4 = std::to_string(&v9, v3);
      v8[0] = 0;
      v8[1] = "";
      if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v5 = &v9;
      }
      else {
        uint64_t v5 = (std::string *)v9.__r_.__value_.__r.__words[0];
      }
      os_unfair_lock_lock(this + 96);
      re::internal::AssetEntry::setOrClearMetadata_stateLocked((re::internal::AssetEntry *)this, (const re::StringID *)v8, (const char *)v5);
      os_unfair_lock_unlock(this + 96);
      re::StringID::destroyString((re::StringID *)v8);
      re::internal::AssetEntry::updateMetadata((re::internal::AssetEntry *)this, 0);
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v9.__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    unint64_t v6 = *re::assetsLogObjects((re *)this);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      if (this[42]._os_unfair_lock_opaque) {
        unint64_t v7 = *(char **)&this[44]._os_unfair_lock_opaque;
      }
      else {
        unint64_t v7 = (char *)&this[42]._os_unfair_lock_opaque + 1;
      }
      LODWORD(v9.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v9.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Updating mutated asset size failed. Asset isn't in an asset manager '%s'.", (uint8_t *)&v9, 0xCu);
    }
  }
}

void re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(re::internal::AssetEntry *this)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v2 = (re::AssetManager *)*((void *)this + 3);
  if (v2)
  {
    if (*((unsigned char *)this + 336)) {
      *((unsigned char *)this + 33re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
    }
    if (*((unsigned char *)this + 352)) {
      *((unsigned char *)this + 35re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    }
    if (*((unsigned char *)v2 + 1377))
    {
      os_unfair_lock_lock((os_unfair_lock_t)this + 96);
      re::AssetManager::assetNonSharedDataByteSize_entryStateLocked(v2, this);
      os_unfair_lock_unlock((os_unfair_lock_t)this + 96);
    }
  }
  else
  {
    int v3 = *re::assetsLogObjects(this);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      if (*((unsigned char *)this + 168)) {
        uint64_t v4 = (char *)*((void *)this + 22);
      }
      else {
        uint64_t v4 = (char *)this + 169;
      }
      int v5 = 136315138;
      unint64_t v6 = v4;
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Updating mutated asset size failed. Asset isn't in an asset manager '%s'.", (uint8_t *)&v5, 0xCu);
    }
  }
}

re::internal::AssetEntry::State *re::internal::AssetEntry::State::State(re::internal::AssetEntry::State *this)
{
  *((_DWORD *)this + 7) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)this = 0;
  *((_WORD *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(void *)((char *)this + 6re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *((_OWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *(void *)((char *)this + 11re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0x7FFFFFFFLL;
  *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *((void *)this + 17) = 0;
  *((_DWORD *)this + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 1;
  *((void *)this + 19) = 0;
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0;
  *((unsigned char *)this + 184) = 0;
  *((unsigned char *)this + 18re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *((unsigned char *)this + 200) = 0;
  return this;
}

void re::internal::AssetEntry::LoadState::setAssetPointer_locked(__uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *(void *)(a1 + 8);
  int v3 = (uint64_t *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5) {
    int v6 = *(void *)(v4 + 24) != 0;
  }
  else {
    int v6 = 0;
  }
  uint64_t v7 = *a2;
  int v8 = *(void *)(v7 + 24) != 0;
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v3, v7);
  if (v6 != v8)
  {
    re::internal::AssetEntry::LoadState::refreshLoadState_locked(a1);
  }
}

__uint64_t re::internal::AssetEntry::LoadState::refreshLoadState_locked(__uint64_t this)
{
  __uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 24);
  if (*(unsigned char *)(v2 + 192))
  {
    unsigned int v3 = 1;
LABEL_5:
    atomic_store(v3, (unsigned int *)this);
    return this;
  }
  if (*(unsigned char *)(v2 + 208))
  {
    unsigned int v3 = 3;
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(this + 8);
  if (v4 && *(void *)(v4 + 24) && !*(void *)(this + 16))
  {
    atomic_store(2u, (unsigned int *)this);
    this = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
    *(void *)(v1 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = this;
    *(unsigned char *)(v1 + 5re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 1;
  }
  else
  {
    atomic_store(0, (unsigned int *)this);
  }
  return this;
}

void re::internal::AssetEntry::LoadState::clearAndResetAssetPointer_locked(re::internal::AssetEntry::LoadState *this)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = *(void *)(v2 + 24);
  *(void *)(v2 + 24) = 0;

  *((void *)this + 1) = 0;
  if (v3)
  {
    re::internal::AssetEntry::LoadState::refreshLoadState_locked((__uint64_t)this);
  }
}

void re::internal::AssetEntry::LoadState::resetAssetPointer_locked(re::internal::AssetEntry::LoadState *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1)
  {
    uint64_t v3 = *(void *)(v1 + 24);

    *((void *)this + 1) = 0;
    if (v3)
    {
      re::internal::AssetEntry::LoadState::refreshLoadState_locked((__uint64_t)this);
    }
  }
}

void re::internal::AssetEntry::LoadState::setLoadingAssetPointer_locked(__uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v5 = (uint64_t *)(a1 + 16);
  uint64_t v6 = v7;
  if (v7) {
    BOOL v8 = *(void *)(v6 + 24) != 0;
  }
  else {
    BOOL v8 = 0;
  }
  uint64_t v9 = *a2;
  uint64_t v10 = *(void *)(v9 + 24);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v5, v9);
  if (v8 != (v10 != 0)) {
    refreshed = (re *)re::internal::AssetEntry::LoadState::refreshLoadState_locked(a1);
  }
  if (v10) {
    BOOL v12 = v8;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    int v13 = *re::assetsLogObjects(refreshed);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      int v14 = 134217984;
      uint64_t v15 = a3;
      _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "setLoadingAssetPointer_locked is being called on AssetEntry %llu while it already has a loading asset pointer. This could cause a crash, or cause the AssetEntry to end up with the wrong data loaded. This might be caused by high-frequency mutations of an asset.", (uint8_t *)&v14, 0xCu);
    }
  }
}

void re::internal::AssetEntry::LoadState::clearAndResetLoadingAssetPointer_locked(re::internal::AssetEntry::LoadState *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(void *)(v2 + 24);
  *(void *)(v2 + 24) = 0;

  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  if (v3)
  {
    re::internal::AssetEntry::LoadState::refreshLoadState_locked((__uint64_t)this);
  }
}

void re::internal::AssetEntry::LoadState::resetLoadingAssetPointer_locked(re::internal::AssetEntry::LoadState *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1)
  {
    uint64_t v3 = *(void *)(v1 + 24);

    *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    if (v3)
    {
      re::internal::AssetEntry::LoadState::refreshLoadState_locked((__uint64_t)this);
    }
  }
}

__uint64_t re::internal::AssetEntry::LoadState::clearLoadFailure_locked(re::internal::AssetEntry::LoadState *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (*(unsigned char *)(v2 + 196)) {
    *(unsigned char *)(v2 + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 96) = 0;
  }
  LOBYTE(v4) = 0;
  re::Optional<re::DynamicString>::operator=((unsigned __int8 *)(v2 + 208), &v4);
  if (_BYTE)v4 && v5 && (v6) {
    (*(void (**)(void))(*(void *)v5 + 40))();
  }
  return re::internal::AssetEntry::LoadState::refreshLoadState_locked((__uint64_t)this);
}

__uint64_t re::internal::AssetEntry::LoadState::setLoadFailure_locked(__uint64_t a1, int a2, re::DynamicString *a3)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!*(unsigned char *)(v4 + 196)) {
    *(unsigned char *)(v4 + 1re::DynamicArray<unsigned long>::deinit((uint64_t)this + 96) = 1;
  }
  *(_DWORD *)(v4 + 200) = a2;
  LOBYTE(vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 1;
  re::DynamicString::DynamicString((re::DynamicString *)&v7, a3);
  re::Optional<re::DynamicString>::operator=((unsigned __int8 *)(*(void *)(a1 + 24) + 208), &v6);
  if (_BYTE)v6 && v7 && (v8) {
    (*(void (**)(void))(*(void *)v7 + 40))();
  }
  return re::internal::AssetEntry::LoadState::refreshLoadState_locked(a1);
}

void re::internal::AssetEntry::setIsLoading_locked(re::internal::AssetEntry *this, int a2)
{
  if (re::internal::AssetEntry::LoadState::setIsLoading_locked((re::internal::AssetEntry *)((char *)this + 704), a2))
  {
    uint64_t v3 = *((void *)this + 3);
    if (v3)
    {
      unsigned int v4 = atomic_load((unsigned int *)this + 176);
      unsigned int v5 = v4;
      re::AssetManager::entryLoadStateChanged(v3, (uint64_t)this, (int *)&v5);
    }
  }
}

BOOL re::internal::AssetEntry::LoadState::setIsLoading_locked(re::internal::AssetEntry::LoadState *this, int a2)
{
  uint64_t v3 = *((void *)this + 3);
  int v4 = *(unsigned __int8 *)(v3 + 192);
  if (v4 != a2)
  {
    *(unsigned char *)(v3 + 19re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = a2;
    if (a2 && !*((unsigned char *)this + 40))
    {
      *((void *)this + 4) = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
      *((unsigned char *)this + 40) = 1;
    }
    re::internal::AssetEntry::LoadState::refreshLoadState_locked((__uint64_t)this);
  }
  return v4 != a2;
}

void re::internal::AssetEntry::makeAssetReference(re::internal::AssetEntry *this@<X0>, re::internal::AssetReference **a2@<X8>)
{
  int v4 = (id *)((char *)this + 832);
  id WeakRetained = (char *)objc_loadWeakRetained((id *)this + 104);
  uint64_t v6 = (re::internal::AssetReference *)(WeakRetained - 8);
  if (!WeakRetained) {
    uint64_t v6 = 0;
  }
  *a2 = v6;
  if (!WeakRetained)
  {
    os_unfair_lock_lock((os_unfair_lock_t)this + 210);
    uint64_t v7 = (char *)objc_loadWeakRetained(v4);
    char v8 = (re::internal::AssetReference *)(v7 - 8);
    if (!v7) {
      char v8 = 0;
    }
    *a2 = v8;
    if (!v7)
    {
      uint64_t v9 = (re::internal::AssetReference *)re::internal::AssetEntry::AssetReferenceStorage::allocate((re::internal::AssetEntry *)((char *)this + 848));
      uint64_t v10 = re::internal::AssetReference::AssetReference(v9, this);
      *a2 = v10;
      if (v10) {
        unsigned int v11 = (char *)v10 + 8;
      }
      else {
        unsigned int v11 = 0;
      }
      objc_storeWeak(v4, v11);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)this + 210);
  }
}

uint64_t re::internal::AssetEntry::AssetReferenceStorage::allocate(re::internal::AssetEntry::AssetReferenceStorage *this)
{
  if (*(unsigned char *)this)
  {
    uint64_t v1 = *(uint64_t (**)(void))(*(void *)re::globalAllocators(this)[2] + 32);
    return v1();
  }
  else
  {
    *(unsigned char *)this = 1;
    return (uint64_t)this + 8;
  }
}

void re::internal::AssetReference::dispose(re::internal::AssetReference *this)
{
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  (**(void (***)(re::internal::AssetReference *))this)(this);
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 840));
  if ((re::internal::AssetReference *)(v2 + 856) == this)
  {
    *(unsigned char *)(v2 + 84re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  }
  else
  {
    int v4 = re::globalAllocators(v3);
    (*(void (**)(uint64_t, re::internal::AssetReference *))(*(void *)v4[2] + 40))(v4[2], this);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 840));
  uint64_t v6 = *(os_unfair_lock_s **)(v2 + 24);
  if (v6) {
    re::AssetManager::enqueueUnreferencedUnloadRequest(v6, (re::internal::AssetEntry *)v2);
  }
}

void re::internal::AssetReference::~AssetReference(re::internal::AssetReference *this)
{
  *(void *)this = &unk_26E6CB458;
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {

    *((void *)this + 3) = 0;
  }
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6CB458;
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {

    *((void *)this + 3) = 0;
  }
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void re::internal::SharedAssetPointer::~SharedAssetPointer(re::internal::SharedAssetPointer *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

unint64_t re::HashTable<re::StringID,re::Optional<re::DynamicString>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<re::Optional<re::DynamicString>&>(uint64_t a1, StringID *a2, unsigned __int8 *a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    uint64_t v12 = *(unsigned int *)(a1 + 36);
    if (v12 == 0x7FFFFFFF)
    {
      uint64_t v12 = *(unsigned int *)(a1 + 32);
      int v13 = v12;
      if (v12 == *(_DWORD *)(a1 + 24))
      {
        re::HashTable<re::StringID,re::Optional<re::DynamicString>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
        LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7 % *(unsigned int *)(a1 + 24);
        int v13 = *(_DWORD *)(a1 + 32);
      }
      *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v13 + 1;
      uint64_t v14 = *(void *)(a1 + 16);
      int v15 = *(_DWORD *)(v14 + (v12 << 6));
    }
    else
    {
      uint64_t v14 = *(void *)(a1 + 16);
      int v15 = *(_DWORD *)(v14 + (v12 << 6));
      *(_DWORD *)(a1 + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = v15 & 0x7FFFFFFF;
    }
    uint64_t v16 = v12 << 6;
    *(_DWORD *)(v14 + v1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = v15 | 0x80000000;
    *(_DWORD *)(*(void *)(a1 + 16) + v1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = *(_DWORD *)(*(void *)(a1 + 16) + (v12 << 6)) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v8);
    re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + (v12 << 6) + 8), a2);
    uint64_t v17 = *(void *)(a1 + 16) + (v12 << 6);
    int v18 = *a3;
    *(unsigned char *)(v17 + 24) = v18;
    if (v18) {
      re::DynamicString::DynamicString((re::DynamicString *)(v17 + 32), (const re::DynamicString *)(a3 + 8));
    }
    *(_DWORD *)(*(void *)(a1 + 8) + 4 * vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    ++*(_DWORD *)(a1 + 28);
    ++*(_DWORD *)(a1 + 40);
    return *(void *)(a1 + 16) + ((unint64_t)v12 << 6) + 24;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v11 = v10 + (v9 << 6);
    if (re::StringID::operator==((void *)(v11 + 8), a2)) {
      return v11 + 24;
    }
    uint64_t v9 = *(_DWORD *)(v10 + (v9 << 6)) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
}

void re::HashTable<re::StringID,re::Optional<re::DynamicString>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v29, 0, 36);
      *(void *)&v29[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::Optional<re::DynamicString>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v29, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v29;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v29[8];
      *(_OWORD *)uint64_t v29 = v5;
      *(void *)&v29[16] = v6;
      *(_OWORD *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7;
      long long v9 = *(_OWORD *)&v29[24];
      *(_OWORD *)&unsigned char v29[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v29[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        uint64_t v14 = (void *)(v6 + 32);
        do
        {
          if ((*(_DWORD *)(v14 - 4) & 0x80000000) != 0)
          {
            unint64_t v15 = 0xBF58476D1CE4E5B9 * ((*(v14 - 3) >> 31) ^ (*(v14 - 3) >> 1));
            unint64_t v16 = (0x94D049BB133111EBLL * (v15 ^ (v15 >> 27))) ^ ((0x94D049BB133111EBLL * (v15 ^ (v15 >> 27))) >> 31);
            unint64_t v17 = *(unsigned int *)(a1 + 24);
            unint64_t v18 = v16 % v17;
            uint64_t v19 = *(unsigned int *)(a1 + 36);
            if (v19 == 0x7FFFFFFF)
            {
              uint64_t v19 = *(unsigned int *)(a1 + 32);
              int v20 = v19;
              if (v19 == v17)
              {
                re::HashTable<re::StringID,re::Optional<re::DynamicString>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, (2 * v12));
                unint64_t v18 = v16 % *(unsigned int *)(a1 + 24);
                int v20 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v20 + 1;
              uint64_t v21 = *(void *)(a1 + 16);
              int v22 = *(_DWORD *)(v21 + (v19 << 6));
            }
            else
            {
              uint64_t v21 = *(void *)(a1 + 16);
              int v22 = *(_DWORD *)(v21 + (v19 << 6));
              *(_DWORD *)(a1 + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = v22 & 0x7FFFFFFF;
            }
            uint64_t v23 = v19 << 6;
            *(_DWORD *)(v21 + v23) = v22 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + v23) = *(_DWORD *)(*(void *)(a1 + 16) + (v19 << 6)) & 0x80000000 | *(_DWORD *)(v13 + 4 * v18);
            re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + (v19 << 6) + 8), (const StringID *)(v14 - 3));
            uint64_t v24 = *(void *)(a1 + 16) + (v19 << 6);
            int v25 = *((unsigned __int8 *)v14 - 8);
            *(unsigned char *)(v24 + 24) = v25;
            if (v25)
            {
              *(_OWORD *)(v24 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
              *(_OWORD *)(v24 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
              *(void *)(v24 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *v14;
              *uint64_t v14 = 0;
              uint64_t v26 = *(void *)(v24 + 48);
              *(void *)(v24 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v14[2];
              void v14[2] = v26;
              *(void *)(v24 + 5re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = v14[3];
              v14[3] = 0;
              uint64_t v27 = *(void *)(v24 + 40);
              *(void *)(v24 + 40) = v14[1];
              v14[1] = v27;
            }
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v19;
            int v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
          }
          ++v11;
          v14 += 8;
        }
        while (v11 < v10);
      }
      re::HashTable<re::StringID,re::Optional<re::DynamicString>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v29);
    }
  }
  else
  {
    if (a2) {
      signed int v28 = a2;
    }
    else {
      signed int v28 = 3;
    }
  }
}

void re::HashTable<re::StringID,re::Optional<re::DynamicString>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    long long v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    unsigned int v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + (v10 << 6), 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_27, 4 * v10);
    }
    *(void *)(a1 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

re::internal::AssetReference *re::internal::AssetReference::AssetReference(re::internal::AssetReference *this, re::internal::AssetEntry *a2)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *((void *)this + 3) = a2;
  *(void *)this = &unk_26E6CB458;
  if (a2) {
    unint64_t v4 = (char *)a2 + 8;
  }
  return this;
}

double re::HashTable<re::StringID,re::Optional<re::DynamicString>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::Optional<re::DynamicString>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(a1[2] + v3);
        ++v4;
        v3 += 64;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::StringID,re::Optional<re::DynamicString>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(uint64_t a1)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0)
  {
    *(_DWORD *)a1 &= ~0x80000000;
    re::StringID::destroyString((re::StringID *)(a1 + 8));
    if (*(unsigned char *)(a1 + 24))
    {
      return re::DynamicString::deinit((re::DynamicString *)(a1 + 32));
    }
  }
  return result;
}

double re::HashTable<re::DynamicString,re::Optional<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::Optional<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 88;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::DynamicString,re::Optional<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 0)
  {
    *(_DWORD *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v1 & 0x7FFFFFFF;
    double result = re::DynamicString::deinit((re::DynamicString *)(a1 + 16));
    if (*(unsigned char *)(a1 + 48))
    {
      return re::DynamicString::deinit((re::DynamicString *)(a1 + 56));
    }
  }
  return result;
}

uint64_t re::DynamicOverflowArray<re::internal::AssetEntry::State::ResourceSharingClientLoadState,1ul>::ensureCapacity(uint64_t result)
{
  uint64_t v1 = result;
  if (*(void *)result)
  {
    unint64_t v2 = *(void *)(result + 8);
    if (*(unsigned char *)(result + 16)) {
      unint64_t v3 = 1;
    }
    else {
      unint64_t v3 = *(void *)(result + 24);
    }
    if (v2 >= v3)
    {
      return re::DynamicOverflowArray<re::internal::AssetEntry::State::ResourceSharingClientLoadState,1ul>::growCapacity(result, v2 + 1);
    }
  }
  else
  {
    unint64_t v4 = *(void *)(v1 + 8) + 1;
    double result = re::DynamicOverflowArray<re::internal::AssetEntry::State::ResourceSharingClientLoadState,1ul>::setCapacity((uint64_t *)v1, v4);
    *(_DWORD *)(v1 + 16) += 2;
  }
  return result;
}

uint64_t re::DynamicOverflowArray<re::internal::AssetEntry::State::ResourceSharingClientLoadState,1ul>::growCapacity(uint64_t result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  if (!*(void *)result)
  {
    double result = re::DynamicOverflowArray<re::internal::AssetEntry::State::ResourceSharingClientLoadState,1ul>::setCapacity((uint64_t *)v3, v2);
    *(_DWORD *)(v3 + 16) += 2;
    return result;
  }
  if (*(unsigned char *)(result + 16))
  {
    if (a2 <= 1) {
      return result;
    }
    unint64_t v5 = 2;
  }
  else
  {
    unint64_t v4 = *(void *)(result + 24);
    if (v4 >= a2) {
      return result;
    }
    unint64_t v5 = 2 * v4;
  }
  if (v5 > a2) {
    a2 = v5;
  }
  return re::DynamicOverflowArray<re::internal::AssetEntry::State::ResourceSharingClientLoadState,1ul>::setCapacity((uint64_t *)result, a2);
}

uint64_t re::DynamicOverflowArray<re::internal::AssetEntry::State::ResourceSharingClientLoadState,1ul>::setCapacity(uint64_t *a1, unint64_t a2)
{
  uint64_t result = *a1;
  if (a2 && !result)
  {
    uint64_t result = re::DynamicOverflowArray<re::internal::AssetEntry::State::ResourceSharingClientLoadState,1ul>::setCapacity(a1, a2);
    int v6 = *((_DWORD *)a1 + 4) + 2;
LABEL_4:
    *((_DWORD *)a1 + 4) = v6;
    return result;
  }
  int v7 = *((_DWORD *)a1 + 4);
  if (v7) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = a1[3];
  }
  if (v8 != a2)
  {
    unint64_t v9 = a1[1];
    if (v9 <= a2 && (a2 > 1 || (v7 & 1) == 0))
    {
      if (a2 < 2)
      {
        if (v7) {
          uint64_t v14 = a1 + 3;
        }
        else {
          uint64_t v14 = (void *)a1[4];
        }
        if (v9)
        {
          long long v15 = *(_OWORD *)v14;
          a1[5] = v14[2];
          *(_OWORD *)(a1 + 3) = v15;
          int v16 = *((unsigned __int8 *)v14 + 24);
          *((unsigned char *)a1 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v16;
          if (v16) {
            *((_DWORD *)a1 + 13) = *((_DWORD *)v14 + 7);
          }
        }
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
        int v6 = *((_DWORD *)a1 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 59)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 32, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        uint64_t v2 = 32 * a2;
        uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)result + 32))(result, 32 * a2, 8);
        if (result)
        {
          uint64_t v11 = result;
          int v12 = *((_DWORD *)a1 + 4);
          if (v12) {
            uint64_t v13 = a1 + 3;
          }
          else {
            uint64_t v13 = (void *)a1[4];
          }
          uint64_t v17 = a1[1];
          if (v17)
          {
            unint64_t v18 = &v13[4 * v17];
            uint64_t v19 = result;
            do
            {
              long long v20 = *(_OWORD *)v13;
              *(void *)(v19 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = v13[2];
              *(_OWORD *)uint64_t v19 = v20;
              int v21 = *((unsigned __int8 *)v13 + 24);
              *(unsigned char *)(v19 + 24) = v21;
              if (v21) {
                *(_DWORD *)(v19 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *((_DWORD *)v13 + 7);
              }
              v13 += 4;
              v19 += 32;
            }
            while (v13 != v18);
            int v12 = *((_DWORD *)a1 + 4);
          }
          if ((v12 & 1) == 0)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a1 + 40))(*a1, a1[4]);
            int v12 = *((_DWORD *)a1 + 4);
          }
          *((_DWORD *)a1 + 4) = v12 & 0xFFFFFFFE;
          a1[3] = a2;
          a1[4] = v11;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(void *)(*a1 + 8));
      uint64_t result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

void re::HashTable<re::DynamicString,re::Optional<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::Optional<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)uint64_t v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::DynamicString,re::Optional<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), (re::DynamicString *)(*(void *)&v13[16] + v10 + 16), (void *)(*(void *)&v13[16] + v10 + 48));
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 88;
        }
        while (v11 < v9);
      }
      re::HashTable<re::DynamicString,re::Optional<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

re::DynamicString *re::HashTable<re::DynamicString,re::Optional<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, void *a5)
{
  unsigned int v9 = *(_DWORD *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    unsigned int v9 = *(_DWORD *)(a1 + 32);
    unsigned int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::Optional<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      unsigned int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 88 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 88 * v9 + 8);
    *(_DWORD *)(a1 + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = v12 & 0x7FFFFFFF;
  }
  uint64_t v13 = 88 * v9;
  *(_DWORD *)(v11 + v13 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12 | 0x80000000;
  uint64_t v14 = a2;
  *(_DWORD *)(*(void *)(a1 + 16) + v13 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(*(void *)(a1 + 16) + v13 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + v13) = a3;
  uint64_t result = re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 16) + v13 + 16), a4);
  uint64_t v16 = *(void *)(a1 + 16);
  int v17 = *(unsigned __int8 *)a5;
  *(unsigned char *)(v16 + 88 * v9 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v17;
  if (v17)
  {
    uint64_t v18 = v16 + 88 * v9;
    *(_OWORD *)(v18 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
    *(_OWORD *)(v18 + 5re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
    *(void *)(v18 + 80) = a5[4];
    uint64_t v19 = a5[2];
    *(void *)(v18 + 5re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = a5[1];
    a5[1] = 0;
    uint64_t v20 = a5[3];
    a5[4] = 0;
    uint64_t v22 = *(void *)(v18 + 64);
    uint64_t v21 = *(void *)(v18 + 72);
    *(void *)(v18 + 64) = v19;
    *(void *)(v18 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v20;
    a5[2] = v22;
    a5[3] = v21;
  }
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = v9;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

void re::HashTable<re::DynamicString,re::Optional<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  long long v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unsigned int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    long long v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      long long v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 88 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_27, 4 * v10);
    }
    *(void *)(a1 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<re::StringID,re::Optional<re::DynamicString>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_27, 4 * v2);
    }
    if (*(_DWORD *)(a1 + 32))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::Optional<re::DynamicString>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(*(void *)(a1 + 16) + v3);
        ++v4;
        v3 += 64;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    int v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

void re::HashTable<re::StringID,re::Optional<re::DynamicString>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::StringID,re::Optional<re::DynamicString>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashTable<re::StringID,re::Optional<re::DynamicString>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      if ((*(_DWORD *)(v8 + v6) & 0x80000000) != 0)
      {
        unint64_t v9 = 0xBF58476D1CE4E5B9 * ((*(void *)(v8 + v6 + 8) >> 31) ^ (*(void *)(v8 + v6 + 8) >> 1));
        unint64_t v10 = (0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31);
        re::HashTable<re::StringID,re::Optional<re::DynamicString>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v10 % *(unsigned int *)(a1 + 24), v10, (StringID *)(v8 + v6 + 8), (unsigned __int8 *)(v8 + v6 + 24));
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 64;
    }
  }
}

uint64_t re::HashTable<re::StringID,re::Optional<re::DynamicString>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, unsigned __int8 *a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::Optional<re::DynamicString>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v9 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + (v8 << 6));
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + (v8 << 6));
    *(_DWORD *)(a1 + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = v12 & 0x7FFFFFFF;
  }
  uint64_t v13 = v8 << 6;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  uint64_t v14 = a2;
  *(_DWORD *)(*(void *)(a1 + 16) + v13) = *(_DWORD *)(*(void *)(a1 + 16) + (v8 << 6)) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + (v8 << 6) + 8), a4);
  uint64_t v15 = *(void *)(a1 + 16) + (v8 << 6);
  int v16 = *a5;
  *(unsigned char *)(v15 + 24) = v16;
  if (v16) {
    re::DynamicString::DynamicString((re::DynamicString *)(v15 + 32), (const re::DynamicString *)(a5 + 8));
  }
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::NetworkActionQueue::queueSyncAction(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    unsigned int v4 = (os_unfair_lock_s *)(a1 + 64);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
    unint64_t v5 = *(void *)(a1 + 88);
    if (v5 >= *(void *)(a1 + 80))
    {
      re::DynamicArray<re::NetworkActionQueue::Action>::growCapacity((void *)(a1 + 72), v5 + 1);
      unint64_t v5 = *(void *)(a1 + 88);
    }
    uint64_t v6 = *(void *)(a1 + 104) + 168 * v5;
    *(unsigned char *)uint64_t v6 = 0;
    *(_DWORD *)(v6 + 144) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<re::AssetNetworkSharingMode,re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::AssetLoadDescriptor,re::DynamicString>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<re::AssetNetworkSharingMode,re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::AssetLoadDescriptor,re::DynamicString>,(std::__variant_detail::_Trait)1> const&>(v6, a2);
    uint64_t v7 = *(void *)(a2 + 152);
    *(_DWORD *)(v6 + 160) = *(_DWORD *)(a2 + 160);
    *(void *)(v6 + 15re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v7;
    ++*(void *)(a1 + 88);
    ++*(_DWORD *)(a1 + 96);
    os_unfair_lock_unlock(v4);
  }
  else
  {
    uint64_t v8 = *re::assetsLogObjects((re *)a1);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v9 = 0;
      _os_log_impl(&dword_233120000, v8, OS_LOG_TYPE_DEFAULT, "Attempt to queue a network action when the queue is disabled.", v9, 2u);
    }
  }
}

void re::NetworkActionQueue::queueSyncActionShareAsset(uint64_t a1, uint64_t a2, int a3)
{
  v3[0] = a3;
  int v4 = 0;
  uint64_t v5 = a2;
  int v6 = 0;
  re::NetworkActionQueue::queueSyncAction(a1, (uint64_t)v3);
  if (v4 != -1) {
    ((void (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re23AssetNetworkSharingModeENS6_9HashTableINS6_13DynamicStringEyNS6_4HashIS9_EENS6_7EqualToIS9_EELb1ELb0EEENS6_19AssetLoadDescriptorES9_EEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v4])(&v7, v3);
  }
}

void re::NetworkActionQueue::queueSyncActionShareDependencies(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)v5, a3);
  int v6 = 1;
  uint64_t v7 = a2;
  int v8 = 1;
  re::NetworkActionQueue::queueSyncAction(a1, (uint64_t)v5);
  if (v6 != -1) {
    ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re23AssetNetworkSharingModeENS6_9HashTableINS6_13DynamicStringEyNS6_4HashIS9_EENS6_7EqualToIS9_EELb1ELb0EEENS6_19AssetLoadDescriptorES9_EEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v6])(&v9, v5);
  }
}

void re::NetworkActionQueue::queueSyncActionShareLoadState(re::NetworkActionQueue *this, uint64_t a2)
{
  v2[0] = 0;
  int v3 = 0;
  uint64_t v4 = a2;
  int v5 = 2;
  re::NetworkActionQueue::queueSyncAction((uint64_t)this, (uint64_t)v2);
  if (v3 != -1) {
    ((void (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re23AssetNetworkSharingModeENS6_9HashTableINS6_13DynamicStringEyNS6_4HashIS9_EENS6_7EqualToIS9_EELb1ELb0EEENS6_19AssetLoadDescriptorES9_EEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v3])(&v6, v2);
  }
}

void re::NetworkActionQueue::queueSyncActionShareMetadata(re::NetworkActionQueue *this, uint64_t a2)
{
  v2[0] = 0;
  int v3 = 0;
  uint64_t v4 = a2;
  int v5 = 3;
  re::NetworkActionQueue::queueSyncAction((uint64_t)this, (uint64_t)v2);
  if (v3 != -1) {
    ((void (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re23AssetNetworkSharingModeENS6_9HashTableINS6_13DynamicStringEyNS6_4HashIS9_EENS6_7EqualToIS9_EELb1ELb0EEENS6_19AssetLoadDescriptorES9_EEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v3])(&v6, v2);
  }
}

void re::NetworkActionQueue::queueSyncActionRestrictAssetShareMode(uint64_t a1, uint64_t a2, int a3)
{
  v3[0] = a3;
  int v4 = 0;
  uint64_t v5 = a2;
  int v6 = 4;
  re::NetworkActionQueue::queueSyncAction(a1, (uint64_t)v3);
  if (v4 != -1) {
    ((void (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re23AssetNetworkSharingModeENS6_9HashTableINS6_13DynamicStringEyNS6_4HashIS9_EENS6_7EqualToIS9_EELb1ELb0EEENS6_19AssetLoadDescriptorES9_EEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v4])(&v7, v3);
  }
}

void re::NetworkActionQueue::queueSyncActionNetworkLoad(re::NetworkActionQueue *this, uint64_t a2, const re::DynamicString *a3)
{
  re::DynamicString::DynamicString((re::DynamicString *)v5, a3);
  int v6 = 3;
  uint64_t v7 = a2;
  int v8 = 5;
  re::NetworkActionQueue::queueSyncAction((uint64_t)this, (uint64_t)v5);
  if (v6 != -1) {
    ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re23AssetNetworkSharingModeENS6_9HashTableINS6_13DynamicStringEyNS6_4HashIS9_EENS6_7EqualToIS9_EELb1ELb0EEENS6_19AssetLoadDescriptorES9_EEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v6])(&v9, v5);
  }
}

void re::NetworkActionQueue::queueSyncActionPeerLoad(uint64_t a1, uint64_t a2, const re::AssetLoadDescriptor *a3)
{
  re::AssetLoadDescriptor::AssetLoadDescriptor((re::AssetLoadDescriptor *)v5, a3);
  int v6 = 2;
  uint64_t v7 = a2;
  int v8 = 6;
  re::NetworkActionQueue::queueSyncAction(a1, (uint64_t)v5);
  if (v6 != -1) {
    ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re23AssetNetworkSharingModeENS6_9HashTableINS6_13DynamicStringEyNS6_4HashIS9_EENS6_7EqualToIS9_EELb1ELb0EEENS6_19AssetLoadDescriptorES9_EEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v6])(&v9, v5);
  }
}

void re::NetworkActionQueue::queueSyncActionPreloadOnLocalPeer(re::NetworkActionQueue *this, uint64_t a2)
{
  v2[0] = 0;
  int v3 = 0;
  uint64_t v4 = a2;
  int v5 = 7;
  re::NetworkActionQueue::queueSyncAction((uint64_t)this, (uint64_t)v2);
  if (v3 != -1) {
    ((void (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re23AssetNetworkSharingModeENS6_9HashTableINS6_13DynamicStringEyNS6_4HashIS9_EENS6_7EqualToIS9_EELb1ELb0EEENS6_19AssetLoadDescriptorES9_EEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v3])(&v6, v2);
  }
}

void re::NetworkActionQueue::readActions(re::NetworkActionQueue *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a2 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(void *)a2 = 0;
  uint64_t v4 = (os_unfair_lock_s *)((char *)this + 64);
  *(_DWORD *)(a2 + 24) = 0;
  os_unfair_lock_lock((os_unfair_lock_t)this + 16);
  re::DynamicArray<re::NetworkActionQueue::Action>::operator=(a2, (uint64_t *)this + 9);
  os_unfair_lock_unlock(v4);
}

void re::NetworkActionQueue::removeActions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  char v6 = (os_unfair_lock_s *)(a1 + 64);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  uint64_t v21 = 0;
  long long v19 = 0uLL;
  uint64_t v18 = 0;
  int v20 = 0;
  unint64_t v7 = *(void *)(a1 + 88);
  if (v7) {
    re::DynamicArray<re::NetworkActionQueue::Action>::setCapacity(&v18, v7);
  }
  unint64_t v8 = *(void *)(a2 + 8);
  if (v8)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      unint64_t v11 = *(void *)(a3 + 8);
      if (v11 <= v10) {
        break;
      }
      if (!*(unsigned char *)(*(void *)(a3 + 16) + v10) && !*(unsigned char *)(*(void *)(a2 + 16) + v10))
      {
        unint64_t v11 = *(void *)(a1 + 88);
        if (v11 <= v10) {
          goto LABEL_34;
        }
        re::DynamicArray<re::NetworkActionQueue::Action>::add((_anonymous_namespace_ *)&v18, *(void *)(a1 + 104) + v9);
        unint64_t v8 = *(void *)(a2 + 8);
      }
      ++v10;
      v9 += 168;
      if (v8 <= v10)
      {
        unint64_t v12 = (int)v8;
        goto LABEL_13;
      }
    }
    uint64_t v22 = 0;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v31 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v23 = 136315906;
    uint64_t v24 = "operator[]";
    __int16 v25 = 1024;
    int v26 = 476;
    __int16 v27 = 2048;
    unint64_t v28 = v10;
    __int16 v29 = 2048;
    unint64_t v30 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_32;
  }
  unint64_t v12 = 0;
LABEL_13:
  if (*(void *)(a1 + 88) > v12)
  {
    uint64_t v13 = 168 * (int)v12;
    do
    {
      re::DynamicArray<re::NetworkActionQueue::Action>::add((_anonymous_namespace_ *)&v18, *(void *)(a1 + 104) + v13);
      ++v12;
      v13 += 168;
    }
    while (*(void *)(a1 + 88) > v12);
    unint64_t v8 = *(void *)(a2 + 8);
  }
  if (v8)
  {
    uint64_t v14 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      unint64_t v11 = *(void *)(a3 + 8);
      if (v11 <= v10) {
        break;
      }
      if (*(unsigned char *)(*(void *)(a3 + 16) + v10) && !*(unsigned char *)(*(void *)(a2 + 16) + v10))
      {
        unint64_t v11 = *(void *)(a1 + 88);
        if (v11 <= v10) {
          goto LABEL_33;
        }
        re::DynamicArray<re::NetworkActionQueue::Action>::add((_anonymous_namespace_ *)&v18, *(void *)(a1 + 104) + v14);
        unint64_t v8 = *(void *)(a2 + 8);
      }
      ++v10;
      v14 += 168;
      if (v8 <= v10) {
        goto LABEL_25;
      }
    }
LABEL_32:
    uint64_t v22 = 0;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v31 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v23 = 136315906;
    uint64_t v24 = "operator[]";
    __int16 v25 = 1024;
    int v26 = 476;
    __int16 v27 = 2048;
    unint64_t v28 = v10;
    __int16 v29 = 2048;
    unint64_t v30 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_33:
    uint64_t v22 = 0;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v31 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v23 = 136315906;
    uint64_t v24 = "operator[]";
    __int16 v25 = 1024;
    int v26 = 789;
    __int16 v27 = 2048;
    unint64_t v28 = v10;
    __int16 v29 = 2048;
    unint64_t v30 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_34:
    uint64_t v22 = 0;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v31 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v23 = 136315906;
    uint64_t v24 = "operator[]";
    __int16 v25 = 1024;
    int v26 = 789;
    __int16 v27 = 2048;
    unint64_t v28 = v10;
    __int16 v29 = 2048;
    unint64_t v30 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_35:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
    _os_crash();
    __break(1u);
  }
LABEL_25:
  if ((uint64_t *)(a1 + 72) != &v18)
  {
    uint64_t v15 = *(void *)(a1 + 72);
    if (v15 && v18 && v15 != v18) {
      goto LABEL_35;
    }
    *(void *)(a1 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v18;
    uint64_t v18 = v15;
    long long v16 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(a1 + 80) = v19;
    long long v19 = v16;
    uint64_t v17 = *(void *)(a1 + 104);
    *(void *)(a1 + 104) = v21;
    uint64_t v21 = v17;
    ++v20;
    ++*(_DWORD *)(a1 + 96);
  }
  re::DynamicArray<re::NetworkActionQueue::Action>::deinit((uint64_t)&v18);
  os_unfair_lock_unlock(v6);
}

void re::NetworkActionQueue::removeLoadActions(os_unfair_lock_s *this, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v4 = this + 16;
  os_unfair_lock_lock(this + 16);
  unint64_t v5 = *(void *)&this[22]._os_unfair_lock_opaque;
  if ((int)v5 >= 1)
  {
    uint64_t v6 = *(void *)&this[22]._os_unfair_lock_opaque + 1;
    while (1)
    {
      unint64_t v7 = (v6 - 2);
      if (v5 <= v7)
      {
        memset(v19, 0, sizeof(v19));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v8 = *(void *)&this[26]._os_unfair_lock_opaque;
      uint64_t v9 = v8 + 168 * v7;
      uint64_t v11 = *(void *)(v9 + 152);
      uint64_t v10 = v9 + 152;
      if (v11 != a2 || (*(_DWORD *)(v8 + 168 * v7 + 160) - 5) > 1) {
        goto LABEL_16;
      }
      if (v5 - 1 > v7) {
        break;
      }
LABEL_13:
      uint64_t v17 = v8 + 168 * v5;
      uint64_t v18 = *(unsigned int *)(v17 - 24);
      if (v18 != -1)
      {
        ((void (*)(_OWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re23AssetNetworkSharingModeENS6_9HashTableINS6_13DynamicStringEyNS6_4HashIS9_EENS6_7EqualToIS9_EELb1ELb0EEENS6_19AssetLoadDescriptorES9_EEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v18])(v19, v17 - 168);
        unint64_t v5 = *(void *)&this[22]._os_unfair_lock_opaque;
      }
      *(_DWORD *)(v17 - 24) = -1;
      *(void *)&this[22]._uint32_t os_unfair_lock_opaque = --v5;
      ++this[24]._os_unfair_lock_opaque;
LABEL_16:
      if ((unint64_t)--v6 <= 1) {
        goto LABEL_17;
      }
    }
    uint64_t v12 = v8 + 168 * v5;
    uint64_t v13 = v8 + 168 * v7;
    uint64_t v14 = *(unsigned int *)(v13 + 144);
    uint64_t v15 = *(unsigned int *)(v12 - 24);
    if (v14 == -1)
    {
      if (v15 == -1) {
        goto LABEL_12;
      }
    }
    else if (v15 == -1)
    {
      ((void (*)(_OWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re23AssetNetworkSharingModeENS6_9HashTableINS6_13DynamicStringEyNS6_4HashIS9_EENS6_7EqualToIS9_EELb1ELb0EEENS6_19AssetLoadDescriptorES9_EEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v14])(v19, v13);
      *(_DWORD *)(v13 + 144) = -1;
LABEL_12:
      uint64_t v16 = *(void *)(v12 - 16);
      *(_DWORD *)(v10 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(v12 - 8);
      *(void *)uint64_t v10 = v16;
      unint64_t v5 = *(void *)&this[22]._os_unfair_lock_opaque;
      uint64_t v8 = *(void *)&this[26]._os_unfair_lock_opaque;
      goto LABEL_13;
    }
    *(void *)&v19[0] = v13;
    ((void (*)(_OWORD *, uint64_t, uint64_t))off_26E6CB540[v15])(v19, v13, v12 - 168);
    goto LABEL_12;
  }
LABEL_17:
  os_unfair_lock_unlock(v4);
}

BOOL re::NetworkActionQueue::hasLoadActions(os_unfair_lock_s *this)
{
  uint64_t v2 = this + 16;
  os_unfair_lock_lock(this + 16);
  uint64_t v3 = *(void *)&this[22]._os_unfair_lock_opaque;
  if (v3)
  {
    uint64_t v4 = 168 * v3 - 168;
    unint64_t v5 = (int *)(*(void *)&this[26]._os_unfair_lock_opaque + 160);
    do
    {
      int v6 = *v5;
      v5 += 42;
      BOOL v7 = (v6 - 5) < 2;
      BOOL v8 = (v6 - 5) < 2 || v4 == 0;
      v4 -= 168;
    }
    while (!v8);
  }
  else
  {
    BOOL v7 = 0;
  }
  os_unfair_lock_unlock(v2);
  return v7;
}

uint64_t re::DynamicArray<re::NetworkActionQueue::Action>::clear(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 16);
  *(void *)(result + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  if (v2)
  {
    uint64_t v3 = *(void *)(result + 32);
    uint64_t v4 = 168 * v2;
    do
    {
      uint64_t v5 = *(unsigned int *)(v3 + 144);
      if (v5 != -1) {
        uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re23AssetNetworkSharingModeENS6_9HashTableINS6_13DynamicStringEyNS6_4HashIS9_EENS6_7EqualToIS9_EELb1ELb0EEENS6_19AssetLoadDescriptorES9_EEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v5])(&v6, v3);
      }
      *(_DWORD *)(v3 + 144) = -1;
      v3 += 168;
      v4 -= 168;
    }
    while (v4);
  }
  ++*(_DWORD *)(v1 + 24);
  return result;
}

void *re::DynamicArray<re::NetworkActionQueue::Action>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::NetworkActionQueue::Action>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::NetworkActionQueue::Action>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::NetworkActionQueue::Action>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::NetworkActionQueue::Action>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xA8uLL))
        {
          uint64_t v2 = 168 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 168 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_18;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element std::string::size_type size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 168, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_18:
        unsigned char v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 168 * v9;
        uint64_t v11 = (uint64_t)v7;
        do
        {
          *(unsigned char *)uint64_t v11 = 0;
          *(_DWORD *)(v11 + 144) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<re::AssetNetworkSharingMode,re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::AssetLoadDescriptor,re::DynamicString>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<re::AssetNetworkSharingMode,re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::AssetLoadDescriptor,re::DynamicString>,(std::__variant_detail::_Trait)1>>(v11, v8);
          uint64_t v12 = *(void *)(v8 + 152);
          *(_DWORD *)(v11 + 160) = *(_DWORD *)(v8 + 160);
          *(void *)(v11 + 15re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v12;
          uint64_t v13 = *(unsigned int *)(v8 + 144);
          if (v13 != -1) {
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re23AssetNetworkSharingModeENS6_9HashTableINS6_13DynamicStringEyNS6_4HashIS9_EENS6_7EqualToIS9_EELb1ELb0EEENS6_19AssetLoadDescriptorES9_EEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v13])(&v14, v8);
          }
          *(_DWORD *)(v8 + 144) = -1;
          v8 += 168;
          v11 += 168;
          v10 -= 168;
        }
        while (v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<re::AssetNetworkSharingMode,re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::AssetLoadDescriptor,re::DynamicString>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<re::AssetNetworkSharingMode,re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::AssetLoadDescriptor,re::DynamicString>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 144);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re23AssetNetworkSharingModeENS6_9HashTableINS6_13DynamicStringEyNS6_4HashIS9_EENS6_7EqualToIS9_EELb1ELb0EEENS6_19AssetLoadDescriptorES9_EEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 144) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 144);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26E6CB4E0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 144) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2re23AssetNetworkSharingModeENS8_9HashTableINS8_13DynamicStringEyNS8_4HashISB_EENS8_7EqualToISB_EELb1ELb0EEENS8_19AssetLoadDescriptorESB_EEEE19__generic_constructB8nn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJS9_SG_SH_SB_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2re23AssetNetworkSharingModeENS8_9HashTableINS8_13DynamicStringEyNS8_4HashISB_EENS8_7EqualToISB_EELb1ELb0EEENS8_19AssetLoadDescriptorESB_EEEE19__generic_constructB8nn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJS9_SG_SH_SB_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(_DWORD *)(a2 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(void *)(a2 + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0x7FFFFFFFLL;
  return re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)a2, a3);
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2re23AssetNetworkSharingModeENS8_9HashTableINS8_13DynamicStringEyNS8_4HashISB_EENS8_7EqualToISB_EELb1ELb0EEENS8_19AssetLoadDescriptorESB_EEEE19__generic_constructB8nn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJS9_SG_SH_SB_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__alt<2ul,re::AssetLoadDescriptor>::__alt[abi:nn180100]<re::AssetLoadDescriptor>(a2, a3);
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2re23AssetNetworkSharingModeENS8_9HashTableINS8_13DynamicStringEyNS8_4HashISB_EENS8_7EqualToISB_EELb1ELb0EEENS8_19AssetLoadDescriptorESB_EEEE19__generic_constructB8nn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJS9_SG_SH_SB_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, void *a3)
{
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(void *)(a2 + 24) = a3[3];
  uint64_t v4 = a3[1];
  *(void *)a2 = *a3;
  *a3 = 0;
  uint64_t v5 = a3[2];
  a3[3] = 0;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v4;
  *(void *)(a2 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = v5;
  a3[1] = v7;
  a3[2] = v6;
  return result;
}

double std::__variant_detail::__alt<2ul,re::AssetLoadDescriptor>::__alt[abi:nn180100]<re::AssetLoadDescriptor>(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)a2 = 0;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 24) = 0;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v3;
  *(void *)(a1 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = v4;
  *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v6;
  *(void *)(a2 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = v5;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 5re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  *(void *)(a2 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v8 = *(void *)(a1 + 48);
  *(void *)(a1 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(void *)(a2 + 48);
  *(void *)(a2 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v8;
  uint64_t v9 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = v9;
  ++*(_DWORD *)(a2 + 56);
  ++*(_DWORD *)(a1 + 56);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a1 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(_DWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 96) = 0;
  uint64_t v10 = *(void *)(a2 + 80);
  *(void *)(a1 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v10;
  *(void *)(a2 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(a2 + 80) = 0;
  uint64_t v11 = *(void *)(a1 + 88);
  *(void *)(a1 + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(void *)(a2 + 88);
  *(void *)(a2 + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v11;
  uint64_t v12 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = v12;
  ++*(_DWORD *)(a2 + 96);
  ++*(_DWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(a1 + 12re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(void *)(a1 + 13re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = *(void *)(a2 + 136);
  uint64_t v13 = *(void *)(a2 + 120);
  *(void *)(a1 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *(void *)(a2 + 112);
  *(void *)(a2 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  uint64_t v14 = *(void *)(a2 + 128);
  *(void *)(a2 + 13re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  uint64_t v16 = *(void *)(a1 + 120);
  uint64_t v15 = *(void *)(a1 + 128);
  *(void *)(a1 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = v13;
  *(void *)(a1 + 12re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v14;
  *(void *)(a2 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = v16;
  *(void *)(a2 + 12re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v15;
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<re::AssetNetworkSharingMode,re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::AssetLoadDescriptor,re::DynamicString>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<re::AssetNetworkSharingMode,re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::AssetLoadDescriptor,re::DynamicString>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 144);
  if (v4 != -1) {
    double result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re23AssetNetworkSharingModeENS6_9HashTableINS6_13DynamicStringEyNS6_4HashIS9_EENS6_7EqualToIS9_EELb1ELb0EEENS6_19AssetLoadDescriptorES9_EEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 144) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 144);
  if (v5 != -1)
  {
    double result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26E6CB500[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 144) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2re23AssetNetworkSharingModeENS8_9HashTableINS8_13DynamicStringEyNS8_4HashISB_EENS8_7EqualToISB_EELb1ELb0EEENS8_19AssetLoadDescriptorESB_EEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJS9_SG_SH_SB_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2re23AssetNetworkSharingModeENS8_9HashTableINS8_13DynamicStringEyNS8_4HashISB_EENS8_7EqualToISB_EELb1ELb0EEENS8_19AssetLoadDescriptorESB_EEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJS9_SG_SH_SB_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(a2, a3);
}

re::AssetLoadDescriptor *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2re23AssetNetworkSharingModeENS8_9HashTableINS8_13DynamicStringEyNS8_4HashISB_EENS8_7EqualToISB_EELb1ELb0EEENS8_19AssetLoadDescriptorESB_EEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJS9_SG_SH_SB_EEERKSZ_EEEDcSR_DpT0_(int a1, re::AssetLoadDescriptor *this, re::AssetLoadDescriptor *a3)
{
  return re::AssetLoadDescriptor::AssetLoadDescriptor(this, a3);
}

re::DynamicString *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2re23AssetNetworkSharingModeENS8_9HashTableINS8_13DynamicStringEyNS8_4HashISB_EENS8_7EqualToISB_EELb1ELb0EEENS8_19AssetLoadDescriptorESB_EEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJS9_SG_SH_SB_EEERKSZ_EEEDcSR_DpT0_(int a1, re::DynamicString *this, re::DynamicString *a3)
{
  return re::DynamicString::DynamicString(this, a3);
}

uint64_t re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(void *)(a1 + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0x7FFFFFFFLL;
  uint64_t v4 = *(void *)a2;
  if (v4)
  {
    if (*(_DWORD *)(a2 + 28) <= 3u) {
      signed int v5 = 3;
    }
    else {
      signed int v5 = *(_DWORD *)(a2 + 28);
    }
    re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init(a1, v4, v5);
    re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
  }
  return a1;
}

uint64_t re::DynamicArray<re::NetworkActionQueue::Action>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::NetworkActionQueue::Action>::copy((void *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::NetworkActionQueue::Action>::clear(a1);
      }
    }
    else if (v4)
    {
      unint64_t v5 = a2[2];
      *(void *)a1 = v4;
      re::DynamicArray<re::NetworkActionQueue::Action>::setCapacity((void *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::NetworkActionQueue::Action>::copy((void *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::NetworkActionQueue::Action>::copy(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::NetworkActionQueue::Action>::setCapacity(a1, *(void *)(a2 + 16));
    uint64_t result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::NetworkActionQueue::Action *,re::NetworkActionQueue::Action *,re::NetworkActionQueue::Action *,0>(*(void *)(a2 + 32), *(void *)(a2 + 32) + 168 * a1[2], a1[4]);
    uint64_t v10 = a1[2];
    if (v10 != v4)
    {
      uint64_t v11 = *(void *)(a2 + 32);
      uint64_t v12 = v11 + 168 * v4;
      uint64_t v13 = 168 * v10;
      uint64_t v14 = v11 + v13;
      uint64_t v15 = a1[4] + v13;
      do
      {
        *(unsigned char *)uint64_t v15 = 0;
        *(_DWORD *)(v15 + 144) = -1;
        uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<re::AssetNetworkSharingMode,re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::AssetLoadDescriptor,re::DynamicString>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<re::AssetNetworkSharingMode,re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::AssetLoadDescriptor,re::DynamicString>,(std::__variant_detail::_Trait)1> const&>(v15, v14);
        uint64_t v16 = *(void *)(v14 + 152);
        *(_DWORD *)(v15 + 160) = *(_DWORD *)(v14 + 160);
        *(void *)(v15 + 15re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v16;
        v14 += 168;
        v15 += 168;
      }
      while (v14 != v12);
    }
  }
  else
  {
    uint64_t result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::NetworkActionQueue::Action *,re::NetworkActionQueue::Action *,re::NetworkActionQueue::Action *,0>(*(void *)(a2 + 32), *(void *)(a2 + 32) + 168 * v4, a1[4]);
    uint64_t v6 = a1[2];
    if (v4 != v6)
    {
      uint64_t v7 = a1[4] + 168 * v4;
      uint64_t v8 = -168 * v4 + 168 * v6;
      do
      {
        uint64_t v9 = *(unsigned int *)(v7 + 144);
        if (v9 != -1) {
          uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re23AssetNetworkSharingModeENS6_9HashTableINS6_13DynamicStringEyNS6_4HashIS9_EENS6_7EqualToIS9_EELb1ELb0EEENS6_19AssetLoadDescriptorES9_EEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v9])(&v17, v7);
        }
        *(_DWORD *)(v7 + 144) = -1;
        v7 += 168;
        v8 -= 168;
      }
      while (v8);
    }
  }
  a1[2] = v4;
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::NetworkActionQueue::Action *,re::NetworkActionQueue::Action *,re::NetworkActionQueue::Action *,0>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v13 = v3;
    uint64_t v14 = v4;
    for (uint64_t i = result; i != a2; i += 168)
    {
      uint64_t v8 = *(unsigned int *)(a3 + 144);
      uint64_t v9 = *(unsigned int *)(i + 144);
      if (v8 == -1)
      {
        if (v9 != -1)
        {
LABEL_7:
          uint64_t v11 = a3;
          uint64_t result = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_26E6CB520[v9])(&v11, a3, i);
        }
      }
      else
      {
        if (v9 != -1) {
          goto LABEL_7;
        }
        uint64_t result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re23AssetNetworkSharingModeENS6_9HashTableINS6_13DynamicStringEyNS6_4HashIS9_EENS6_7EqualToIS9_EELb1ELb0EEENS6_19AssetLoadDescriptorES9_EEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v8])(&v12, a3);
        *(_DWORD *)(a3 + 144) = -1;
      }
      uint64_t v10 = *(void *)(i + 152);
      *(_DWORD *)(a3 + 160) = *(_DWORD *)(i + 160);
      *(void *)(a3 + 15re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v10;
      a3 += 168;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2re23AssetNetworkSharingModeENS8_9HashTableINS8_13DynamicStringEyNS8_4HashISB_EENS8_7EqualToISB_EELb1ELb0EEENS8_19AssetLoadDescriptorESB_EEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSM_1EJS9_SG_SH_SB_EEERKSY_EEEDcSQ_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v4 = *(_DWORD **)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 144);
  if (v5 != -1)
  {
    if (!v5)
    {
      *a2 = *a3;
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re23AssetNetworkSharingModeENS6_9HashTableINS6_13DynamicStringEyNS6_4HashIS9_EENS6_7EqualToIS9_EELb1ELb0EEENS6_19AssetLoadDescriptorES9_EEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v5])(&v6, v4);
  }
  _DWORD *v4 = *a3;
  v4[36] = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2re23AssetNetworkSharingModeENS8_9HashTableINS8_13DynamicStringEyNS8_4HashISB_EENS8_7EqualToISB_EELb1ELb0EEENS8_19AssetLoadDescriptorESB_EEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSM_1EJS9_SG_SH_SB_EEERKSY_EEEDcSQ_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 144);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 1)
  {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re23AssetNetworkSharingModeENS6_9HashTableINS6_13DynamicStringEyNS6_4HashIS9_EENS6_7EqualToIS9_EELb1ELb0EEENS6_19AssetLoadDescriptorES9_EEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v5])(&v7, v4);
LABEL_7:
    *(_DWORD *)(v4 + 144) = -1;
    uint64_t result = re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(v4, a3);
    *(_DWORD *)(v4 + 144) = 1;
    return result;
  }
  return re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a2, a3);
}

re::DynamicString *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2re23AssetNetworkSharingModeENS8_9HashTableINS8_13DynamicStringEyNS8_4HashISB_EENS8_7EqualToISB_EELb1ELb0EEENS8_19AssetLoadDescriptorESB_EEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSM_1EJS9_SG_SH_SB_EEERKSY_EEEDcSQ_DpT0_(re::AssetLoadDescriptor **a1, re::DynamicString *this, re::AssetLoadDescriptor *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *((unsigned int *)*a1 + 36);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 2)
  {
    ((void (*)(char *, re::AssetLoadDescriptor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re23AssetNetworkSharingModeENS6_9HashTableINS6_13DynamicStringEyNS6_4HashIS9_EENS6_7EqualToIS9_EELb1ELb0EEENS6_19AssetLoadDescriptorES9_EEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v5])(&v8, v4);
LABEL_7:
    *((_DWORD *)v4 + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = -1;
    uint64_t result = re::AssetLoadDescriptor::AssetLoadDescriptor(v4, a3);
    *((_DWORD *)v4 + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 2;
    return result;
  }
  re::DynamicString::operator=(this, a3);
  re::DynamicArray<BOOL>::operator=((uint64_t)this + 32, (uint64_t *)a3 + 4);
  re::DynamicArray<BOOL>::operator=((uint64_t)this + 72, (uint64_t *)a3 + 9);
  return re::DynamicString::operator=((re::DynamicString *)((char *)this + 112), (re::AssetLoadDescriptor *)((char *)a3 + 112));
}

re::DynamicString *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2re23AssetNetworkSharingModeENS8_9HashTableINS8_13DynamicStringEyNS8_4HashISB_EENS8_7EqualToISB_EELb1ELb0EEENS8_19AssetLoadDescriptorESB_EEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSM_1EJS9_SG_SH_SB_EEERKSY_EEEDcSQ_DpT0_(re::DynamicString **a1, re::DynamicString *this, re::DynamicString *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *((unsigned int *)*a1 + 36);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 3)
  {
    ((void (*)(char *, re::DynamicString *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re23AssetNetworkSharingModeENS6_9HashTableINS6_13DynamicStringEyNS6_4HashIS9_EENS6_7EqualToIS9_EELb1ELb0EEENS6_19AssetLoadDescriptorES9_EEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v5])(&v7, v4);
LABEL_7:
    *((_DWORD *)v4 + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = -1;
    uint64_t result = re::DynamicString::DynamicString(v4, a3);
    *((_DWORD *)v4 + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 3;
    return result;
  }
  return re::DynamicString::operator=(this, a3);
}

uint64_t re::DynamicArray<re::NetworkActionQueue::Action>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::NetworkActionQueue::Action>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 168 * v4;
  *(unsigned char *)uint64_t v5 = 0;
  *(_DWORD *)(v5 + 144) = -1;
  uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<re::AssetNetworkSharingMode,re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::AssetLoadDescriptor,re::DynamicString>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<re::AssetNetworkSharingMode,re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::AssetLoadDescriptor,re::DynamicString>,(std::__variant_detail::_Trait)1>>(v5, a2);
  uint64_t v7 = *(void *)(a2 + 152);
  *(_DWORD *)(v5 + 160) = *(_DWORD *)(a2 + 160);
  *(void *)(v5 + 15re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v7;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2re23AssetNetworkSharingModeENS8_9HashTableINS8_13DynamicStringEyNS8_4HashISB_EENS8_7EqualToISB_EELb1ELb0EEENS8_19AssetLoadDescriptorESB_EEEE16__generic_assignB8nn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJS9_SG_SH_SB_EEEOSW_EEEDcSO_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  unint64_t v4 = *(_DWORD **)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 144);
  if (v5 != -1)
  {
    if (!v5)
    {
      *a2 = *a3;
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re23AssetNetworkSharingModeENS6_9HashTableINS6_13DynamicStringEyNS6_4HashIS9_EENS6_7EqualToIS9_EELb1ELb0EEENS6_19AssetLoadDescriptorES9_EEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v5])(&v6, v4);
  }
  _DWORD *v4 = *a3;
  v4[36] = 0;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2re23AssetNetworkSharingModeENS8_9HashTableINS8_13DynamicStringEyNS8_4HashISB_EENS8_7EqualToISB_EELb1ELb0EEENS8_19AssetLoadDescriptorESB_EEEE16__generic_assignB8nn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJS9_SG_SH_SB_EEEOSW_EEEDcSO_DpT0_(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 144);
  if (v5 == -1) {
    goto LABEL_9;
  }
  if (v5 != 1)
  {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re23AssetNetworkSharingModeENS6_9HashTableINS6_13DynamicStringEyNS6_4HashIS9_EENS6_7EqualToIS9_EELb1ELb0EEENS6_19AssetLoadDescriptorES9_EEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v5])(&v7, v4);
LABEL_9:
    *(_DWORD *)(v4 + 144) = -1;
    *(_OWORD *)uint64_t v4 = 0u;
    *(_OWORD *)(v4 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
    *(_DWORD *)(v4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    *(void *)(v4 + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0x7FFFFFFFLL;
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v4, a3);
    *(_DWORD *)(v4 + 144) = 1;
    return;
  }
  if ((uint64_t *)a2 != a3)
  {
    if (!*(void *)a2 || *(void *)a2 == *a3)
    {
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)a2, a3);
    }
    else if (*a3)
    {
      re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a2, (uint64_t)a3);
      ++*(_DWORD *)(a2 + 40);
    }
    else
    {
      re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a2);
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2re23AssetNetworkSharingModeENS8_9HashTableINS8_13DynamicStringEyNS8_4HashISB_EENS8_7EqualToISB_EELb1ELb0EEENS8_19AssetLoadDescriptorESB_EEEE16__generic_assignB8nn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJS9_SG_SH_SB_EEEOSW_EEEDcSO_DpT0_(uint64_t *a1, re::DynamicString *this, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 144);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 2)
  {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re23AssetNetworkSharingModeENS6_9HashTableINS6_13DynamicStringEyNS6_4HashIS9_EENS6_7EqualToIS9_EELb1ELb0EEENS6_19AssetLoadDescriptorES9_EEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v5])(&v7, v4);
LABEL_7:
    *(_DWORD *)(v4 + 144) = -1;
    std::__variant_detail::__alt<2ul,re::AssetLoadDescriptor>::__alt[abi:nn180100]<re::AssetLoadDescriptor>(v4, a3);
    *(_DWORD *)(v4 + 144) = 2;
    return;
  }
  re::DynamicString::operator=(this, (re::DynamicString *)a3);
  re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)this + 32, a3 + 32);
  re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)this + 72, a3 + 72);
  re::DynamicString::operator=((re::DynamicString *)((char *)this + 112), (re::DynamicString *)(a3 + 112));
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2re23AssetNetworkSharingModeENS8_9HashTableINS8_13DynamicStringEyNS8_4HashISB_EENS8_7EqualToISB_EELb1ELb0EEENS8_19AssetLoadDescriptorESB_EEEE16__generic_assignB8nn180100INS0_17__move_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSM_1EJS9_SG_SH_SB_EEEOSW_EEEDcSO_DpT0_(uint64_t *a1, re::DynamicString *this, re::DynamicString *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 144);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 3)
  {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re23AssetNetworkSharingModeENS6_9HashTableINS6_13DynamicStringEyNS6_4HashIS9_EENS6_7EqualToIS9_EELb1ELb0EEENS6_19AssetLoadDescriptorES9_EEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v5])(&v11, v4);
LABEL_7:
    double result = 0.0;
    *(_OWORD *)uint64_t v4 = 0u;
    *(_OWORD *)(v4 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
    *(void *)(v4 + 24) = *((void *)a3 + 3);
    uint64_t v7 = *((void *)a3 + 1);
    *(void *)uint64_t v4 = *(void *)a3;
    *(void *)a3 = 0;
    uint64_t v8 = *((void *)a3 + 2);
    *((void *)a3 + 3) = 0;
    uint64_t v10 = *(void *)(v4 + 8);
    uint64_t v9 = *(void *)(v4 + 16);
    *(void *)(v4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7;
    *(void *)(v4 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = v8;
    *((void *)a3 + 1) = v10;
    *((void *)a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v9;
    *(_DWORD *)(v4 + 144) = 3;
    return result;
  }
  re::DynamicString::operator=(this, a3);
  return result;
}

void *re::allocInfo_AssetLoadDescriptor(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_46, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_46))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF75CD8, "AssetLoadDescriptor");
    __cxa_guard_release(&_MergedGlobals_46);
  }
  return &unk_26AF75CD8;
}

void re::initInfo_AssetLoadDescriptor(re *this, re::IntrospectionBase *a2)
{
  v18[0] = 0xBD52FE729D2D4FCALL;
  v18[1] = "AssetLoadDescriptor";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v19;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF75CB8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF75CB8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::IntrospectionInfo<re::DynamicString>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "scheme";
      *(void *)(v8 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v8 + 5re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF75CC0 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      char v11 = re::IntrospectionInfo<re::DynamicArray<unsigned char>>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "data";
      *(void *)(v12 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x2000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v12 + 5re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF75CC8 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::IntrospectionInfo<re::DynamicString>::get(1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "assetType";
      *(void *)(v16 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x7000000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v16 + 5re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF75CD0 = v16;
      __cxa_guard_release(&qword_26AF75CB8);
    }
  }
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x9000000008;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 3;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = &qword_26AF75CC0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::AssetLoadDescriptor>;
  *((void *)this + 11) = 0;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::AssetLoadDescriptor>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::AssetLoadDescriptor>;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::AssetLoadDescriptor>;
  re::IntrospectionRegistry::add(this, v3);
  long long v17 = v19;
}

uint64_t *re::IntrospectionInfo<re::DynamicArray<unsigned char>>::get(int a1, const re::IntrospectionBase *a2)
{
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&re::IntrospectionInfo<re::DynamicArray<unsigned char>>::get(BOOL)::info);
    re::IntrospectionInfo<re::DynamicArray<unsigned char>>::get(BOOL)::info = (uint64_t)&unk_26E6CB570;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::DynamicArray<unsigned char>>::get(BOOL)::isInitialized) {
      return &re::IntrospectionInfo<re::DynamicArray<unsigned char>>::get(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    int v3 = re::IntrospectionInfo<re::DynamicArray<unsigned char>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    if (v3) {
      return &re::IntrospectionInfo<re::DynamicArray<unsigned char>>::get(BOOL)::info;
    }
    uint64_t v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
  }
  char v6 = (re *)re::introspect_uint8_t((re *)1, a2);
  if (re::IntrospectionInfo<re::DynamicArray<unsigned char>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      uint64_t v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
    }
  }
  else
  {
    uint64_t v9 = (uint64_t)v6;
    re::IntrospectionInfo<re::DynamicArray<unsigned char>>::get(BOOL)::isInitialized = 1;
    int v10 = *((_DWORD *)v6 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::DynamicArray<unsigned char>>::get(BOOL)::info, 0);
    qword_268773278 = 0x2800000003;
    dword_268773280 = v10;
    word_268773284 = 0;
    *(void *)&xmmword_268773288 = 0;
    *((void *)&xmmword_268773288 + 1) = 0xFFFFFFFFLL;
    qword_268773298 = v9;
    unk_2687732A0 = 0;
    re::IntrospectionInfo<re::DynamicArray<unsigned char>>::get(BOOL)::info = (uint64_t)&unk_26E6CB570;
    re::IntrospectionRegistry::add(v11, v12);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::DynamicArray<unsigned char>>::get(BOOL)::info, (const re::IntrospectionBase *)&v15);
    if (BYTE8(v15)) {
      uint64_t v13 = v16;
    }
    else {
      uint64_t v13 = (char *)&v15 + 9;
    }
    if (void)v15 && (BYTE8(v15)) {
      (*(void (**)(void))(*(void *)v15 + 40))();
    }
    long long v15 = *(_OWORD *)(v9 + 32);
    xmmword_268773288 = v14;
    re::StringID::destroyString((re::StringID *)v17);
    if ((a1 & 1) == 0) {
      goto LABEL_9;
    }
  }
  return &re::IntrospectionInfo<re::DynamicArray<unsigned char>>::get(BOOL)::info;
}

void *re::internal::defaultConstruct<re::AssetLoadDescriptor>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  uint64_t v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)a3, 0);
  *(void *)(a3 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(a3 + 40) = 0;
  *(_DWORD *)(a3 + 5re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a3 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 96) = 0;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(void *)(a3 + 13re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  return re::DynamicString::setCapacity((void *)(a3 + 112), 0);
}

double re::internal::defaultDestruct<re::AssetLoadDescriptor>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString::deinit((re::DynamicString *)(a3 + 112));
  re::DynamicArray<unsigned long>::deinit(a3 + 72);
  re::DynamicArray<unsigned long>::deinit(a3 + 32);
  return re::DynamicString::deinit((re::DynamicString *)a3);
}

void *re::internal::defaultConstructV2<re::AssetLoadDescriptor>(uint64_t a1)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  uint64_t v2 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)a1, 0);
  *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 5re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 96) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(void *)(a1 + 13re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  return re::DynamicString::setCapacity((void *)(a1 + 112), 0);
}

double re::internal::defaultDestructV2<re::AssetLoadDescriptor>(uint64_t a1)
{
  re::DynamicString::deinit((re::DynamicString *)(a1 + 112));
  re::DynamicArray<unsigned long>::deinit(a1 + 72);
  re::DynamicArray<unsigned long>::deinit(a1 + 32);
  return re::DynamicString::deinit((re::DynamicString *)a1);
}

uint64_t re::introspect_AssetLoadDescriptor(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AssetLoadDescriptor", (uint64_t (*)(re::internal *))re::allocInfo_AssetLoadDescriptor, (re::IntrospectionBase *(*)(void))re::initInfo_AssetLoadDescriptor, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::AssetLoadDescriptor>, this);
}

uint64_t re::AssetLoadDescriptor::setIntrospectableData(char **this, const re::IntrospectionBase *a2, const re::IntrospectionBase **a3, re::Allocator *a4)
{
  uint64_t v4 = (uint64_t *)a4;
  if (!a4)
  {
  }
  size_t v14 = 0;
  __srCC_SHA256_CTX c = 0;
  re::serializeBinaryToBuffer(a2, a3, 0, (uint64_t)v4, (uint64_t)v4, (uint64_t *)&__src, (uint64_t *)&v14);
  size_t v8 = v14;
  this[6] = 0;
  ++*((_DWORD *)this + 14);
  re::DynamicArray<BOOL>::resize((uint64_t)(this + 4), v8 + 22);
  strcpy(this[8], "Z9T4");
  this[8][5] = 0;
  uint64_t v9 = this[8];
  *(void *)(v9 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(v9 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = v8;
  int v10 = this[8] + 22;
  char v11 = __src;
  memcpy(v10, __src, v8);
  uint64_t v12 = *(uint64_t (**)(uint64_t *, void *))(*v4 + 40);
  return v12(v4, v11);
}

uint64_t re::AssetLoadDescriptor::getIntrospectableData(re::AssetLoadDescriptor *this, re **a2, re::DynamicString **a3, re::Allocator *a4)
{
  uint64_t v4 = (uint64_t *)a4;
  if (!a4)
  {
  }
  uint64_t v8 = *((void *)this + 8);
  if (*(_DWORD *)v8 == 877934938)
  {
    if (*(unsigned char *)(v8 + 4))
    {
      uint64_t v9 = *re::assetsLogObjects(this);
      uint64_t v10 = 0;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        char v11 = "Failed getIntrospectableData: Incoming Asset Load Descriptor newer than current version";
LABEL_9:
        _os_log_impl(&dword_233120000, v9, OS_LOG_TYPE_DEFAULT, v11, buf, 2u);
        return 0;
      }
      return v10;
    }
    if (*(unsigned char *)(v8 + 5))
    {
      if (*(unsigned char *)(v8 + 5) == 1)
      {
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        uint64_t v13 = *(uint64_t **)(v8 + 14);
        *(void *)long long buf = &unk_26E7144B8;
        LOBYTE(v30) = 0;
        uint64_t v31 = v8 + 22;
        long long v32 = v13;
        size_t v14 = re::FixedArrayInputStream::FixedArrayInputStream((re::FixedArrayInputStream *)v33, (const char *)(v8 + 22), (int)v13, -1);
        *(void *)long long buf = &unk_26E7144B8;
        re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)v33);
        return 1;
      }
      uint64_t v9 = *re::assetsLogObjects(this);
      uint64_t v10 = 0;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
        return v10;
      }
      *(_WORD *)long long buf = 0;
      char v11 = "Failed getIntrospectableData: unsupported serialization method for AssetLoadDescriptor";
      goto LABEL_9;
    }
    uint64_t v16 = *(void *)(v8 + 6);
    if (!v16)
    {
      unint64_t v24 = re::DynamicArray<unsigned char>::slice((uint64_t)this + 32, 0x16uLL, *((void *)this + 6) - 22);
      *(void *)long long buf = &unk_26E7150B0;
      unint64_t v30 = (const char *)v24;
      uint64_t v31 = v25;
      long long v32 = 0;
    }
    unint64_t v17 = re::DynamicArray<unsigned char>::slice((uint64_t)this + 32, 0x16uLL, *(void *)(v8 + 6));
    uint64_t v19 = v18;
    LOBYTE(v31) = 0;
    *(void *)long long buf = &unk_26E6DEB60;
    unint64_t v30 = "schema";
    long long v32 = v4;
    memset(v33, 0, sizeof(v33));
    int v34 = 0;
    uint64_t v35 = 0x7FFFFFFFLL;
    re::HashSetBase<void *,void *,re::internal::ValueAsKey<void *>,re::Hash<void *>,re::EqualTo<void *>,true,false>::init((uint64_t)v33, (uint64_t)v4, 3);
    uint64_t v36 = &unk_26E7150B0;
    unint64_t v37 = v17;
    uint64_t v38 = v19;
    uint64_t v39 = 0;
    if ((_BYTE)v26)
    {
      unint64_t v20 = v16 + 22;
      uint64_t v21 = v27;
      unint64_t v22 = re::DynamicArray<unsigned char>::slice((uint64_t)this + 32, v20, *((void *)this + 6) - v20);
      uint64_t v36 = &unk_26E7150B0;
      unint64_t v37 = v22;
      uint64_t v38 = v23;
      uint64_t v39 = 0;
      if ((_BYTE)v26)
      {
LABEL_25:
        re::AutoFreeAllocator::~AutoFreeAllocator((re::AutoFreeAllocator *)buf);
        return v10;
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    if (v27 && (v28 & 1) != 0) {
      (*(void (**)(void))(*(void *)v27 + 40))();
    }
    goto LABEL_25;
  }
  uint64_t v9 = *re::assetsLogObjects(this);
  uint64_t v10 = 0;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    char v11 = "Failed getIntrospectableData: Incoming Asset Load Descriptor does not have the proper tag";
    goto LABEL_9;
  }
  return v10;
}

unint64_t re::DynamicArray<unsigned char>::slice(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 + 1 <= a2)
  {
    uint64_t v6 = 0;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v7) = 136315906;
    *(void *)((char *)&v7 + 4) = "slice";
    WORD6(v7) = 1024;
    HIWORD(v7) = 1119;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_6;
  }
  if (__CFADD__(a2, a3))
  {
LABEL_6:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::slice(size_t,size_t). index, %zu, count = %zu, array std::string::size_type size = %zu", "!overflow", "slice", 1125, a2, a3, v4, v6, v7);
    _os_crash();
    __break(1u);
LABEL_7:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Invalid count. index = %zu, count = %zu, array std::string::size_type size = %zu", "endIndexExclusive <= m_size", "slice", 1129, a2, a3, v4);
    _os_crash();
    __break(1u);
  }
  if (a2 + a3 > v4) {
    goto LABEL_7;
  }
  return *(void *)(a1 + 32) + a2;
}

void re::TypeBuilderHelper::registerDynamicArray<unsigned char>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  uint64_t v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    uint64_t v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    long long v11 = *a3;
    re::TypeBuilder::beginListType((uint64_t)v12, a2, 1, 0x28uLL, 8uLL, &v11);
    re::TypeBuilder::setConstructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
    re::TypeBuilder::setDestructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
    re::TypeBuilder::setListUsesContiguousStorage((uint64_t)v12, 1);
    re::TypeBuilder::setListAccessors((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIndexer((uint64_t)v12, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIterator((uint64_t)v12, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

void *re::IntrospectionDynamicArray<unsigned char>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<unsigned char>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<unsigned char>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a2 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<unsigned char>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<unsigned long>::deinit(a2);
}

void *re::IntrospectionDynamicArray<unsigned char>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<unsigned long>::deinit(a2);
  *(void *)a2 = a3;
  double result = re::DynamicArray<BOOL>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<unsigned char>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<BOOL>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<BOOL>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<BOOL>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<unsigned char>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  char v10 = 0;
  re::DynamicArray<unsigned char>::add(this, &v10);
  uint64_t v8 = (re::IntrospectionBase *)(*((void *)this + 2) + *((void *)this + 4) - 1);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<unsigned char>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

unint64_t re::IntrospectionDynamicArray<unsigned char>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + a3;
}

void *re::DynamicArray<unsigned char>::add(void *this, unsigned char *a2)
{
  int v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<BOOL>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  *(unsigned char *)(v3[4] + v4) = *a2;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

void *re::TypeBuilderHelper::registerDynamicArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a1 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  double result = re::DynamicArray<BOOL>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    *(void *)(a1 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  }
  else
  {
    re::DynamicArray<unsigned long>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<BOOL>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<BOOL>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v12);
    re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)&v13);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      char v10 = *(void ***)(a1 + 32);
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v11, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v11, v10, a3, 0);
        char v10 = (void **)((char *)v10 + 1);
        --v9;
      }
      while (v9);
    }
  }
}

unint64_t re::TypeBuilderHelper::registerDynamicArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<unsigned char>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::allocInfo_PeerAssetLoadDescriptorParameters(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_47, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_47))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF75D70, "PeerAssetLoadDescriptorParameters");
    __cxa_guard_release(&_MergedGlobals_47);
  }
  return &unk_26AF75D70;
}

void re::initInfo_PeerAssetLoadDescriptorParameters(re *this, re::IntrospectionBase *a2)
{
  v14[0] = 0xEB1ACE70333D9ADALL;
  v14[1] = "PeerAssetLoadDescriptorParameters";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF75D58, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF75D58);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      long long v7 = re::introspect_uint64_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "fromPeerId";
      *(void *)(v8 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v8 + 5re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF75D60 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      long long v11 = re::IntrospectionInfo<re::DynamicString>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "assetPathOnPeer";
      *(void *)(v12 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v12 + 5re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF75D68 = v12;
      __cxa_guard_release(&qword_26AF75D58);
    }
  }
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x2800000008;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 2;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = &qword_26AF75D60;
  *((void *)this + 9) = re::internal::defaultConstruct<re::PeerAssetLoadDescriptorParameters>;
  *((void *)this + 11) = 0;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::PeerAssetLoadDescriptorParameters>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::PeerAssetLoadDescriptorParameters>;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::PeerAssetLoadDescriptorParameters>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

void *re::internal::defaultConstruct<re::PeerAssetLoadDescriptorParameters>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  int v3 = (void *)(a3 + 8);
  *(_OWORD *)(a3 + 24) = 0u;
  return re::DynamicString::setCapacity(v3, 0);
}

double re::internal::defaultDestruct<re::PeerAssetLoadDescriptorParameters>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicString::deinit((re::DynamicString *)(a3 + 8));
}

void *re::internal::defaultConstructV2<re::PeerAssetLoadDescriptorParameters>(uint64_t a1)
{
  *(_OWORD *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  uint64_t v1 = (void *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  return re::DynamicString::setCapacity(v1, 0);
}

double re::internal::defaultDestructV2<re::PeerAssetLoadDescriptorParameters>(uint64_t a1)
{
  return re::DynamicString::deinit((re::DynamicString *)(a1 + 8));
}

uint64_t re::introspect_PeerAssetLoadDescriptorParameters(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PeerAssetLoadDescriptorParameters", (uint64_t (*)(re::internal *))re::allocInfo_PeerAssetLoadDescriptorParameters, (re::IntrospectionBase *(*)(void))re::initInfo_PeerAssetLoadDescriptorParameters, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::PeerAssetLoadDescriptorParameters>, this);
}

re::PeerAssetProvider *re::PeerAssetProvider::PeerAssetProvider(re::PeerAssetProvider *this)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)this = &unk_26E6CB608;
  uint64_t v2 = &qword_268772000;
  {
    uint64_t v2 = &qword_268772000;
    if (v4)
    {
      re::introspect<re::PeerAssetLoadDescriptorParameters>(void)::info = re::internal::getOrCreateInfo((re::internal *)"PeerAssetLoadDescriptorParameters", (uint64_t (*)(re::internal *))re::allocInfo_PeerAssetLoadDescriptorParameters, (re::IntrospectionBase *(*)(void))re::initInfo_PeerAssetLoadDescriptorParameters, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::PeerAssetLoadDescriptorParameters>, 0);
      uint64_t v2 = &qword_268772000;
    }
  }
  re::PeerAssetProvider::s_loadDescriptorParametersIntrospect = v2[462];
  return this;
}

uint64_t re::PeerAssetProvider::makeDescriptor@<X0>(re::PeerAssetProvider *this@<X0>, const re::DynamicString *a2@<X2>, re::DynamicString *a3@<X1>, uint64_t a4@<X8>)
{
  *(void *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a4 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a4 + 24) = 0;
  uint64_t v9 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)a4, 0);
  *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(a4 + 40) = 0;
  *(_DWORD *)(a4 + 5re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a4 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_DWORD *)(a4 + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 96) = 0;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(void *)(a4 + 13re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  re::DynamicString::setCapacity((void *)(a4 + 112), 0);
  uint64_t v18 = (re::PeerAssetProvider *)"PeerAsset";
  uint64_t v19 = 9;
  re::DynamicString::operator=((re::DynamicString *)a4, (uint64_t)&v18);
  size_t v10 = strlen((const char *)a2);
  uint64_t v18 = a2;
  uint64_t v19 = v10;
  long long v11 = re::DynamicString::operator=((re::DynamicString *)(a4 + 112), (uint64_t)&v18);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  re::DynamicString::setCapacity(&v19, 0);
  re::DynamicString::operator=((re::DynamicString *)&v19, a3);
  uint64_t v18 = this;
  uint64_t v16 = this;
  re::DynamicString::DynamicString((re::DynamicString *)v17, (const re::DynamicString *)&v19);
  re::AssetLoadDescriptor::setIntrospectableData((char **)a4, (const re::IntrospectionBase *)re::PeerAssetProvider::s_loadDescriptorParametersIntrospect, &v16, 0);
  if (v17[0])
  {
    if (v17[1]) {
      (*(void (**)(void))(*(void *)v17[0] + 40))(v17[0]);
    }
    memset(v17, 0, sizeof(v17));
  }
  uint64_t result = v19;
  if (v19)
  {
    if (v20) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v19 + 40))(v19, v21, v12, v13, v14);
    }
  }
  return result;
}

__n128 re::PeerAssetProvider::load@<Q0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = v6;
  uint64_t v4 = v7;
  uint64_t v5 = v8;
  *(unsigned char *)a2 = 0;
  *(__n128 *)(a2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = result;
  *(void *)(a2 + 24) = v4;
  *(void *)(a2 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v5;
  return result;
}

uint64_t re::PeerAssetProvider::resolveChild@<X0>(const re::AssetLoadDescriptor *a1@<X1>, re::AssetProvider *a2@<X2>, const re::DynamicString *a3@<X3>, uint64_t a4@<X8>)
{
  if (*((unsigned char *)a1 + 8)) {
    uint64_t v9 = (const char *)*((void *)a1 + 2);
  }
  else {
    uint64_t v9 = (char *)a1 + 9;
  }
  size_t v10 = (_anonymous_namespace_ *)strcmp(v9, "PeerAsset");
  if (v10)
  {
    uint64_t result = re::DynamicString::format((re::DynamicString *)"Scheme %s does not match scheme %s.", (re::DynamicString *)v30, v9, "PeerAsset");
    long long v12 = *(_OWORD *)v30;
    long long v13 = *(_OWORD *)&v30[16];
    *(unsigned char *)a4 = 0;
    *(_OWORD *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    *(_OWORD *)(a4 + 24) = v13;
  }
  else
  {
    uint64_t v42 = 0;
    unsigned int v43 = 0;
    uint64_t v44 = 0;
    re::DynamicString::setCapacity(&v41, 0);
    uint64_t v14 = re::AssetLoadDescriptor::getIntrospectableData<re::PeerAssetLoadDescriptorParameters>(a1, &v40, 0);
    if (v14)
    {
      if (v42) {
        long long v15 = v43;
      }
      else {
        long long v15 = (re::PathBuffer *)((char *)&v42 + 1);
      }
      re::AssetProvider::resolveChildPath(a2, v15, (re::DynamicString *)&v38);
      re::PeerAssetProvider::makeDescriptor(v40, a3, (re::DynamicString *)&v38, (uint64_t)&v20);
      uint64_t v16 = v20;
      uint64_t v20 = 0;
      *(void *)unint64_t v30 = v16;
      *(_OWORD *)&v30[24] = v22;
      long long v22 = 0u;
      *(_OWORD *)&unsigned char v30[8] = v21;
      long long v21 = 0u;
      long long v31 = v23;
      long long v23 = 0u;
      ++v24;
      int v32 = 1;
      long long v33 = v25;
      long long v34 = v26;
      long long v25 = 0u;
      long long v26 = 0u;
      ++v27;
      int v35 = 1;
      *(_OWORD *)uint64_t v36 = *(_OWORD *)v28;
      memset(v28, 0, sizeof(v28));
      long long v37 = v29;
      *(void *)&v36[16] = *(void *)&v28[16];
      long long v29 = 0uLL;
      v17.n128_f64[0] = re::Optional<re::AssetLoadDescriptor>::Optional(a4, (uint64_t)v30);
      if (*(void *)&v36[8])
      {
        if (v36[16]) {
          (*(void (**)(double))(**(void **)&v36[8] + 40))(v17.n128_f64[0]);
        }
        __n128 v17 = 0uLL;
        *(_OWORD *)&char v36[8] = 0u;
        long long v37 = 0u;
      }
      if (*((void *)&v33 + 1))
      {
        if (*(void *)v36) {
          (*(void (**)(__n128))(**((void **)&v33 + 1) + 40))(v17);
        }
        *(void *)uint64_t v36 = 0;
        long long v34 = 0uLL;
        *((void *)&v33 + 1) = 0;
        ++v35;
      }
      if (*(void *)&v30[32])
      {
        if ((void)v33) {
          (*(void (**)(__n128))(**(void **)&v30[32] + 40))(v17);
        }
        *(void *)&long long v33 = 0;
        long long v31 = 0uLL;
        *(void *)&v30[32] = 0;
        ++v32;
      }
      if (*(void *)v30)
      {
        if (v30[8]) {
          (*(void (**)(__n128))(**(void **)v30 + 40))(v17);
        }
        __n128 v17 = 0uLL;
        memset(v30, 0, 32);
      }
      if (*(void *)&v28[8])
      {
        if (v28[16]) {
          (*(void (**)(__n128))(**(void **)&v28[8] + 40))(v17);
        }
        __n128 v17 = 0uLL;
        *(_OWORD *)&char v28[8] = 0u;
        long long v29 = 0u;
      }
      if (*((void *)&v25 + 1))
      {
        if (*(void *)v28) {
          (*(void (**)(__n128))(**((void **)&v25 + 1) + 40))(v17);
        }
        *(void *)uint64_t v28 = 0;
        long long v26 = 0uLL;
        *((void *)&v25 + 1) = 0;
        ++v27;
      }
      if (*((void *)&v22 + 1))
      {
        if ((void)v25) {
          (*(void (**)(__n128))(**((void **)&v22 + 1) + 40))(v17);
        }
        *(void *)&long long v25 = 0;
        long long v23 = 0uLL;
        *((void *)&v22 + 1) = 0;
        ++v24;
      }
      if (v20 && (v21 & 1) != 0) {
        (*(void (**)(__n128))(*(void *)v20 + 40))(v17);
      }
      if (v38 && (v39 & 1) != 0) {
        (*(void (**)(__n128))(*(void *)v38 + 40))(v17);
      }
    }
    else
    {
      __n128 v17 = *(__n128 *)v30;
      uint64_t v18 = *(void *)&v30[16];
      uint64_t v19 = *(void *)&v30[24];
      *(unsigned char *)a4 = 0;
      *(__n128 *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v17;
      *(void *)(a4 + 24) = v18;
      *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v19;
    }
    uint64_t result = (uint64_t)v41;
    if (v41)
    {
      if (v42) {
        return (*(uint64_t (**)(__n128))(*v41 + 40))(v17);
      }
    }
  }
  return result;
}

uint64_t *re::PeerAssetProvider::getDescription(re::PeerAssetProvider *this, const re::AssetLoadDescriptor *a2, re::DynamicString *a3)
{
  uint64_t v11 = 0;
  long long v12 = 0;
  uint64_t v13 = 0;
  re::DynamicString::setCapacity(&v10, 0);
  if (re::AssetLoadDescriptor::getIntrospectableData<re::PeerAssetLoadDescriptorParameters>(a2, &v9, 0))
  {
    if (v11) {
      uint64_t v5 = v12;
    }
    else {
      uint64_t v5 = (char *)&v11 + 1;
    }
    re::DynamicString::format((re::DynamicString *)"peer:%llu / %s", (re::DynamicString *)&v7, v9, v5);
    re::DynamicString::operator=(a3, (re::DynamicString *)&v7);
    if (v7 && (v8 & 1) != 0) {
      (*(void (**)(void))(*(void *)v7 + 40))();
    }
  }
  else
  {
    uint64_t v7 = "mangled";
    uint64_t v8 = 7;
    re::DynamicString::operator=(a3, (uint64_t)&v7);
  }
  uint64_t result = v10;
  if (v10)
  {
    if (v11) {
      return (uint64_t *)(*(uint64_t (**)(void))(*v10 + 40))();
    }
  }
  return result;
}

uint64_t re::PeerAssetProvider::getAssetPathForRelease@<X0>(_anonymous_namespace_ *a1@<X0>, char *a2@<X1>, const re::internal::AssetTypeRegistry *a3@<X2>, os_unfair_lock_s *a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  re::DynamicString::setCapacity(&v54, 0);
  uint64_t v11 = re::AssetLoadDescriptor::getIntrospectableData<re::PeerAssetLoadDescriptorParameters>((re::AssetLoadDescriptor *)a2, &v53, 0);
  if (v11)
  {
    *(_DWORD *)uint64_t v48 = 0;
    *(_OWORD *)&v48[8] = 0u;
    long long v49 = 0u;
    long long v12 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v48[8], 0);
    long long v51 = 0u;
    long long v50 = 0u;
    re::DynamicString::setCapacity(&v50, 0);
    uint64_t v52 = 0;
    if (v55) {
      uint64_t v13 = v56;
    }
    else {
      uint64_t v13 = (char *)&v55 + 1;
    }
    double v15 = re::AssetPath::parse((re::AssetPath *)v48, v13, 0, a3, a4, v45);
    if (!v45[0])
    {
      uint64_t v14 = (_anonymous_namespace_ *)v46;
      if ((void)v46)
      {
        if (BYTE8(v46)) {
          uint64_t v14 = (_anonymous_namespace_ *)(*(uint64_t (**)(double))(*(void *)v46 + 40))(v15);
        }
        long long v46 = 0u;
        long long v47 = 0u;
      }
    }
    if (a5 > 9 || *(_DWORD *)v48 == 3)
    {
      long long v22 = (_anonymous_namespace_ *)re::DynamicString::format((re::DynamicString *)"%llu", (re::DynamicString *)&v42, v53);
      LODWORD(v35) = 0;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      uint64_t v36 = 0;
      long long v23 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)&v35 + 1, 0);
      *((void *)&v39 + 1) = 0;
      long long v40 = 0uLL;
      re::DynamicString::setCapacity(&v39, 0);
      uint64_t v41 = 0;
      if (*((void *)a2 + 15)) {
        int v24 = (char *)*((void *)a2 + 16);
      }
      else {
        int v24 = a2 + 121;
      }
      uint64_t v25 = re::internal::AssetTypeRegistry::assetTypeWithName(a3, v24);
      if (v43) {
        long long v26 = *(char **)&v44[7];
      }
      else {
        long long v26 = v44;
      }
      if (BYTE8(v50)) {
        int v27 = (const char *)v51;
      }
      else {
        int v27 = (char *)&v50 + 9;
      }
      re::AssetPath::initPeerAssetPath((uint64_t)&v35, v26, v27, v25);
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      long long v32 = *((unint64_t *)&v35 + 1);
      re::DynamicString::setCapacity(&v32, 0);
      re::AssetPath::fullAssetPath((re::DynamicString *)&v35, (re::DynamicString *)&v32);
      long long v28 = v32;
      uint64_t v29 = v33;
      uint64_t v30 = v34;
      *(unsigned char *)a6 = 1;
      *(_OWORD *)(a6 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v28;
      *(void *)(a6 + 24) = v29;
      *(void *)(a6 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v30;
      if ((void)v39)
      {
        if (BYTE8(v39)) {
          (*(void (**)(void))(*(void *)v39 + 40))();
        }
        long long v39 = 0u;
        long long v40 = 0u;
      }
      if (*((void *)&v35 + 1) && (v36 & 1) != 0) {
        (*(void (**)(void))(**((void **)&v35 + 1) + 40))();
      }
      if (v42 && (v43 & 1) != 0) {
        (*(void (**)(void))(*(void *)v42 + 40))();
      }
    }
    else
    {
      long long v16 = v35;
      uint64_t v17 = v36;
      uint64_t v18 = v37;
      *(unsigned char *)a6 = 0;
      *(_OWORD *)(a6 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v16;
      *(void *)(a6 + 24) = v17;
      *(void *)(a6 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v18;
    }
    if ((void)v50)
    {
      if (BYTE8(v50)) {
        (*(void (**)(void))(*(void *)v50 + 40))();
      }
      long long v50 = 0u;
      long long v51 = 0u;
    }
    if (*(void *)&v48[8] && (v48[16] & 1) != 0) {
      (*(void (**)(void))(**(void **)&v48[8] + 40))();
    }
  }
  else
  {
    *(void *)&v48[8] = 0;
    *(void *)&v48[16] = 0;
    *(void *)&long long v49 = 0;
    re::DynamicString::setCapacity(v48, 0);
    long long v19 = *(_OWORD *)v48;
    uint64_t v20 = *(void *)&v48[16];
    uint64_t v21 = v49;
    *(unsigned char *)a6 = 0;
    *(_OWORD *)(a6 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v19;
    *(void *)(a6 + 24) = v20;
    *(void *)(a6 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v21;
  }
  uint64_t result = (uint64_t)v54;
  if (v54)
  {
    if (v55) {
      return (*(uint64_t (**)(void))(*v54 + 40))();
    }
  }
  return result;
}

uint64_t *re::PeerAssetProvider::makeDescriptorFromAssetPath@<X0>(re::PeerAssetProvider *this@<X0>, const re::AssetPath *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((void *)a2 + 2)) {
    uint64_t v5 = (const char *)*((void *)a2 + 3);
  }
  else {
    uint64_t v5 = (char *)a2 + 17;
  }
  __n128 v6 = (const re::DynamicString *)**((void **)a2 + 9);
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v7 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v24, 0);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  int v31 = 0;
  uint64_t v30 = 0;
  long long v32 = 0u;
  long long v33 = 0u;
  int v34 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  uint64_t v37 = 0;
  re::DynamicString::setCapacity((void *)&v35 + 1, 0);
  uint64_t v8 = (re::PeerAssetProvider *)strtoull_l(v5, 0, 10, 0);
  if (v8)
  {
    re::PeerAssetProvider::makeDescriptor(v8, v6, (const re::AssetPath *)((char *)a2 + 40), (uint64_t)&v12);
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v9 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v12, 0);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    int v19 = 0;
    uint64_t v18 = 0;
    long long v20 = 0u;
    long long v21 = 0u;
    int v22 = 0;
    memset(v23, 0, sizeof(v23));
    re::DynamicString::setCapacity(&v23[8], 0);
  }
  if (*((void *)&v35 + 1) && (v36 & 1) != 0) {
    (*(void (**)(void))(**((void **)&v35 + 1) + 40))();
  }
  if (*((void *)&v32 + 1) && (void)v35) {
    (*(void (**)(void))(**((void **)&v32 + 1) + 40))();
  }
  if (v28 && (void)v32) {
    (*(void (**)(void))(*(void *)v28 + 40))();
  }
  if (v24 && (v25 & 1) != 0) {
    (*(void (**)(void))(*v24 + 40))();
  }
  v10.n128_f64[0] = re::Optional<re::AssetLoadDescriptor>::Optional(a3, (uint64_t)&v12);
  if (*(void *)&v23[8])
  {
    if (v23[16]) {
      (*(void (**)(double))(**(void **)&v23[8] + 40))(v10.n128_f64[0]);
    }
    __n128 v10 = 0uLL;
    memset(&v23[8], 0, 32);
  }
  if (*((void *)&v20 + 1))
  {
    if (*(void *)v23) {
      (*(void (**)(__n128))(**((void **)&v20 + 1) + 40))(v10);
    }
    *(void *)long long v23 = 0;
    long long v21 = 0uLL;
    *((void *)&v20 + 1) = 0;
    ++v22;
  }
  if (v16)
  {
    if ((void)v20) {
      (*(void (**)(__n128))(*(void *)v16 + 40))(v10);
    }
    *(void *)&long long v20 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v16 = 0;
    ++v19;
  }
  uint64_t result = v12;
  if (v12)
  {
    if (v13) {
      return (uint64_t *)(*(uint64_t (**)(__n128))(*v12 + 40))(v10);
    }
  }
  return result;
}

void re::PeerAssetProvider::~PeerAssetProvider(re::PeerAssetProvider *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

const char *re::PeerAssetProvider::schemeName(re::PeerAssetProvider *this)
{
  return "PeerAsset";
}

void re::AssetErrorCategoryImpl::~AssetErrorCategoryImpl(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x237DBCBD0);
}

const char *re::AssetErrorCategoryImpl::name(re::AssetErrorCategoryImpl *this)
{
  return "REAssets error";
}

void *re::AssetErrorCategoryImpl::message@<X0>(int a1@<W1>, void *a2@<X8>)
{
  uint64_t v4 = "Unknown REAssets error";
  if (a1 == 200) {
    uint64_t v4 = "Invalid asset path";
  }
  if (a1 == 100) {
    uint64_t v5 = "Unexpected error";
  }
  else {
    uint64_t v5 = (char *)v4;
  }
  return std::string::basic_string[abi:nn180100]<0>(a2, v5);
}

void re::RawAssetProvider::load(re::RawAssetProvider *this@<X0>, const re::AssetLoadDescriptor *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __n128 v10 = (re::internal::AssetTypeRegistry *)*((void *)this + 23);
  if (*((unsigned char *)a2 + 120)) {
    uint64_t v11 = (char *)*((void *)a2 + 16);
  }
  else {
    uint64_t v11 = (char *)a2 + 121;
  }
  unint64_t v12 = re::internal::AssetTypeRegistry::assetTypeWithName(v10, v11);
  if (!v12)
  {
    if (*((unsigned char *)a2 + 120)) {
      int v22 = (char *)*((void *)a2 + 16);
    }
    else {
      int v22 = (char *)a2 + 121;
    }
    if (*((unsigned char *)a2 + 8)) {
      uint64_t v28 = (char *)*((void *)a2 + 2);
    }
    else {
      uint64_t v28 = (char *)a2 + 9;
    }
    re::DynamicString::format((re::DynamicString *)"Invalid AssetType: %s, specified for AssetDescriptor scheme: %s", (re::DynamicString *)&v51, v22, v28);
    goto LABEL_25;
  }
  uint64_t v13 = (void *)v12;
  if (*((void *)this + 12))
  {
    uint64_t v14 = (re::AssetLoader *)re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*((void *)this + 23), v12);
    uint64_t v15 = (re::internal::AssetEntry *)(*(uint64_t (**)(re::AssetLoader *))(*(void *)v14 + 120))(v14);
    re::internal::AssetEntry::makeAssetEntry(v15, v13, (const re::AssetType *)1, (uint64_t *)&v49);
    uint64_t v16 = (os_unfair_lock_s *)v49;
    re::internal::AssetEntry::makeAssetReference(v49, &v56);
    uint64_t v17 = v56;
    *(void *)&long long v51 = a2;
    uint64_t v45 = a3;
    v48[0] = (uint64_t)v56;
    uint64_t v18 = (*(uint64_t (**)(void, long long *, uint64_t *, uint64_t *))(**((void **)this + 12) + 16))(*((void *)this + 12), &v51, &v45, v48);
    if (v18)
    {
      int v19 = (void *)v18;
      os_unfair_lock_lock(v16 + 96);
      re::internal::AssetEntry::LoadState::unloadAssetPointer_locked((__uint64_t)&v16[176], v14);
      os_unfair_lock_unlock(v16 + 96);
      id v20 = [v19 description];
      long long v21 = (_anonymous_namespace_ *)[v20 UTF8String];

      re::DynamicString::DynamicString((re::DynamicString *)&v45, (const re::DynamicString *)&v51);
      *(unsigned char *)a4 = 0;
      *(void *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v45;
      *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v47;
      *(_OWORD *)(a4 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = v46;
      if (void)v51 && (BYTE8(v51)) {
        (*(void (**)(void))(*(void *)v51 + 40))();
      }

      if (!v17) {
        goto LABEL_12;
      }
    }
    else
    {
      re::DynamicString::DynamicString((re::DynamicString *)&v51, (const re::AssetLoadDescriptor *)((char *)a2 + 112));
      os_unfair_lock_lock(v16 + 96);
      uint64_t v32 = re::internal::AssetEntry::LoadState::clearAndReturnAssetPointer_locked((re::internal::AssetEntry::LoadState *)&v16[176]);
      os_unfair_lock_unlock(v16 + 96);
      *(void *)&long long v54 = v32;
      BYTE8(v54) = 0;
      long long v33 = v51;
      uint64_t v34 = v52;
      uint64_t v35 = v53;
      *(unsigned char *)(a4 + 5re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_OWORD *)(a4 + 40) = v54;
      *(unsigned char *)a4 = 1;
      *(_OWORD *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v33;
      *(void *)(a4 + 24) = v34;
      *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v35;
      if (!v17)
      {
LABEL_12:
        if (v16) {

        }
        return;
      }
    }

    goto LABEL_12;
  }
  uint64_t v23 = *((void *)this + 7);
  if (!v23)
  {
LABEL_25:
    long long v29 = v51;
    uint64_t v30 = v52;
    uint64_t v31 = v53;
    *(unsigned char *)a4 = 0;
    *(_OWORD *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v29;
    *(void *)(a4 + 24) = v30;
    *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v31;
    return;
  }
  *(void *)&long long v51 = a2;
  uint64_t v45 = a3;
  (*(void (**)(re::internal::AssetEntry **__return_ptr))(*(void *)v23 + 16))(&v49);
  if ((_BYTE)v49)
  {
    uint64_t v56 = (re::internal::AssetReference *)v50;

    uint64_t v24 = *((void *)this + 23);
    v48[1] = 0;
    v48[2] = 0;
    v48[0] = v24;
    v43[0] = 1;
    uint64_t v44 = a3;
    re::AssetUtilities::loadCompiledAssetFromData((id *)&v56, v48, (const char **)v13, 0, 0, (uint64_t)v43, (uint64_t)&v45);
    if ((_BYTE)v45)
    {
      re::DynamicString::DynamicString((re::DynamicString *)&v51, (const re::AssetLoadDescriptor *)((char *)a2 + 112));
      *(void *)&long long v54 = v46;
      BYTE8(v54) = 0;
      char v55 = 0;
      uint64_t v25 = v52;
      uint64_t v26 = v53;
      long long v27 = v51;
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      long long v51 = 0uLL;
      *(unsigned char *)(a4 + 5re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_OWORD *)(a4 + 40) = v54;
      *(unsigned char *)a4 = 1;
      *(void *)(a4 + 24) = v25;
      *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v26;
      *(_OWORD *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v27;
    }
    else
    {
      if (BYTE8(v46)) {
        long long v39 = v47;
      }
      else {
        long long v39 = (char *)&v46 + 9;
      }
      re::DynamicString::format((re::DynamicString *)"Error loading compiled asset '%llu': %s", (re::DynamicString *)&v51, a3, v39);
      long long v40 = v51;
      uint64_t v41 = v52;
      uint64_t v42 = v53;
      *(unsigned char *)a4 = 0;
      *(_OWORD *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v40;
      *(void *)(a4 + 24) = v41;
      *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v42;
    }
    if (!(_BYTE)v45 && (void)v46 && (BYTE8(v46) & 1) != 0) {
      (*(void (**)(void))(*(void *)v46 + 40))();
    }
  }
  else
  {
    id v36 = v50;
    id v37 = [v50 description];
    uint64_t v38 = (_anonymous_namespace_ *)[v37 UTF8String];

    re::DynamicString::DynamicString((re::DynamicString *)&v45, (const re::DynamicString *)&v51);
    *(unsigned char *)a4 = 0;
    *(void *)(a4 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v45;
    *(void *)(a4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v47;
    *(_OWORD *)(a4 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = v46;
    if (void)v51 && (BYTE8(v51)) {
      (*(void (**)(void))(*(void *)v51 + 40))();
    }
  }
}

re::DynamicString *re::RawAssetProvider::resolveChild@<X0>(re::RawAssetProvider *this@<X0>, const re::AssetLoadDescriptor *a2@<X1>, const char *a3@<X2>, const char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = *((void *)this + 17);
  if (!v6)
  {
    long long v12 = v45;
    uint64_t v13 = v46;
    uint64_t v14 = v47;
    *(unsigned char *)a5 = 0;
    *(_OWORD *)(a5 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    *(void *)(a5 + 24) = v13;
    *(void *)(a5 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v14;
    return result;
  }
  uint64_t v35 = a2;
  *(void *)long long v21 = a3;
  void v50[4] = a4;
  (*(void (**)(long long *__return_ptr))(*(void *)v6 + 16))(&v45);
  if (!(_BYTE)v45)
  {
    uint64_t v15 = (void *)*((void *)&v45 + 1);
    id v16 = [*((id *)&v45 + 1) description];
    uint64_t v17 = (_anonymous_namespace_ *)[v16 UTF8String];

    re::DynamicString::DynamicString((re::DynamicString *)v21, (const re::DynamicString *)&v35);
    *(unsigned char *)a5 = 0;
    *(void *)(a5 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = *(void *)v21;
    *(void *)(a5 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v22;
    *(_OWORD *)(a5 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = *(_OWORD *)&v21[8];
    if (v35 && (v36 & 1) != 0) {
      (*(void (**)(void))(*(void *)v35 + 40))();
    }

    return (re::DynamicString *)re::Optional<re::AssetLoadDescriptor>::~Optional(&v45);
  }
  re::DynamicString::DynamicString((re::DynamicString *)&v35, (const re::DynamicString *)((char *)&v45 + 8));
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)v37, v48);
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)v41, v49);
  uint64_t v7 = re::DynamicString::DynamicString((re::DynamicString *)v44, (const re::DynamicString *)v50);
  if (v36) {
    unint64_t v8 = v36 >> 1;
  }
  else {
    unint64_t v8 = v36 >> 1;
  }
  if (v8)
  {
    if (v38)
    {
      if (v44[1]) {
        uint64_t v9 = v44[1] >> 1;
      }
      else {
        uint64_t v9 = LOBYTE(v44[1]) >> 1;
      }
      if (v9)
      {
        re::AssetLoadDescriptor::AssetLoadDescriptor((re::AssetLoadDescriptor *)v21, (const re::AssetLoadDescriptor *)&v35);
        v10.n128_f64[0] = re::Optional<re::AssetLoadDescriptor>::Optional(a5, (uint64_t)v21);
        if ((void)v33)
        {
          if (BYTE8(v33)) {
            (*(void (**)(double))(*(void *)v33 + 40))(v10.n128_f64[0]);
          }
          __n128 v10 = 0uLL;
          long long v33 = 0u;
          long long v34 = 0u;
        }
        if (v28)
        {
          if (v32) {
            (*(void (**)(__n128))(*(void *)v28 + 40))(v10);
          }
          uint64_t v32 = 0;
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          uint64_t v28 = 0;
          ++v31;
        }
        if (v23)
        {
          if (v27) {
            (*(void (**)(__n128))(*(void *)v23 + 40))(v10);
          }
          uint64_t v27 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0;
          uint64_t v23 = 0;
          ++v26;
        }
        if (*(void *)v21 && (v21[8] & 1) != 0) {
          (*(void (**)(__n128))(**(void **)v21 + 40))(v10);
        }
        goto LABEL_36;
      }
      uint64_t v18 = "The child AssetDescriptor's assetType was not set via CoreRE API.";
    }
    else
    {
      uint64_t v18 = "The child AssetDescriptor's data was not set via CoreRE API.";
    }
  }
  else
  {
    uint64_t v18 = "The child AssetDescriptor's scheme name was not set via CoreRE API.";
  }
  __n128 v10 = *(__n128 *)v21;
  uint64_t v19 = *(void *)&v21[16];
  uint64_t v20 = v22;
  *(unsigned char *)a5 = 0;
  *(__n128 *)(a5 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v10;
  *(void *)(a5 + 24) = v19;
  *(void *)(a5 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v20;
LABEL_36:
  if (v44[0])
  {
    if (v44[1]) {
      (*(void (**)(__n128))(*(void *)v44[0] + 40))(v10);
    }
    __n128 v10 = 0uLL;
    memset(v44, 0, sizeof(v44));
  }
  if (v41[0])
  {
    if (v43) {
      (*(void (**)(__n128))(*(void *)v41[0] + 40))(v10);
    }
    uint64_t v43 = 0;
    memset(v41, 0, sizeof(v41));
    ++v42;
  }
  if (v37[0])
  {
    if (v40) {
      (*(void (**)(__n128))(*(void *)v37[0] + 40))(v10);
    }
    uint64_t v40 = 0;
    v37[1] = 0;
    uint64_t v38 = 0;
    v37[0] = 0;
    ++v39;
  }
  if (v35)
  {
    if (v36) {
      (*(void (**)(__n128))(*(void *)v35 + 40))(v10);
    }
  }
  return (re::DynamicString *)re::Optional<re::AssetLoadDescriptor>::~Optional(&v45);
}

void re::RawAssetProvider::~RawAssetProvider(re::RawAssetProvider *this)
{
  *(void *)this = &unk_26E6CB708;
  uint64_t v2 = (char *)this + 24;
  re::DynamicString::deinit((re::RawAssetProvider *)((char *)this + 144));
  re::FunctionBase<24ul,re::Result<re::AssetLoadDescriptor,__CFError *> ()(re::AssetLoadDescriptor const*,char const*,char const*)>::destroyCallable((uint64_t)this + 104);
  re::FunctionBase<24ul,__CFError * ()(re::AssetLoadDescriptor const*,unsigned long long,re::internal::AssetReference *)>::destroyCallable((uint64_t)this + 64);
  re::FunctionBase<24ul,re::Result<__CFData const*,__CFError *> ()(re::AssetLoadDescriptor const*,unsigned long long)>::destroyCallable((uint64_t)v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6CB708;
  uint64_t v2 = (char *)this + 24;
  re::DynamicString::deinit((re::RawAssetProvider *)((char *)this + 144));
  re::FunctionBase<24ul,re::Result<re::AssetLoadDescriptor,__CFError *> ()(re::AssetLoadDescriptor const*,char const*,char const*)>::destroyCallable((uint64_t)this + 104);
  re::FunctionBase<24ul,__CFError * ()(re::AssetLoadDescriptor const*,unsigned long long,re::internal::AssetReference *)>::destroyCallable((uint64_t)this + 64);
  re::FunctionBase<24ul,re::Result<__CFData const*,__CFError *> ()(re::AssetLoadDescriptor const*,unsigned long long)>::destroyCallable((uint64_t)v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::RawAssetProvider::schemeName(re::RawAssetProvider *this)
{
  if (*((unsigned char *)this + 152)) {
    return *((void *)this + 20);
  }
  else {
    return (uint64_t)this + 153;
  }
}

re::DynamicString *re::RawAssetProvider::getDescription(re::RawAssetProvider *this, const re::AssetLoadDescriptor *a2, re::DynamicString *a3)
{
  v4[0] = "custom";
  v4[1] = 6;
  return re::DynamicString::operator=(a3, (uint64_t)v4);
}

uint64_t (***re::FunctionBase<24ul,re::Result<re::AssetLoadDescriptor,__CFError *> ()(re::AssetLoadDescriptor const*,char const*,char const*)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  }
  return result;
}

uint64_t (***re::FunctionBase<24ul,__CFError * ()(re::AssetLoadDescriptor const*,unsigned long long,re::internal::AssetReference *)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  }
  return result;
}

uint64_t (***re::FunctionBase<24ul,re::Result<__CFData const*,__CFError *> ()(re::AssetLoadDescriptor const*,unsigned long long)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  }
  return result;
}

void re::introspect_AssetNetworkMessageType(re *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF75DF0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF75DF0);
    if (v24)
    {
      uint64_t v25 = re::introspectionAllocator(v24);
      int v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)int v26 = 1;
      *((void *)v26 + 1) = 100;
      *((void *)v26 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = "Request";
      qword_26AF75E10 = (uint64_t)v26;
      uint64_t v27 = re::introspectionAllocator(v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 101;
      *(void *)(v28 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = "Response";
      qword_26AF75E18 = v28;
      __cxa_guard_release(&qword_26AF75DF0);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF75DF8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF75DF8))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF75E48, "AssetNetworkMessageType", 4, 4, 1, 1);
    qword_26AF75E48 = (uint64_t)&unk_26E715E00;
    qword_26AF75E88 = (uint64_t)&re::introspect_AssetNetworkMessageType(BOOL)::enumTable;
    dword_26AF75E58 = 9;
    __cxa_guard_release(&qword_26AF75DF8);
  }
  if ((_MergedGlobals_48 & 1) == 0)
  {
    _MergedGlobals_48 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF75E48, a2);
    uint64_t v30 = 0x721F4BEB80401F86;
    int v31 = "AssetNetworkMessageType";
    v34[0] = 208862;
    v34[1] = "int";
    uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v34);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v34);
      uint64_t v4 = (unsigned int *)qword_26AF75E88;
      v33[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v34, &v30, 1, 1, (uint64_t)v33);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  long long v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v32.var0 = 2 * v10;
            v32.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v34, v14, &v32);
            re::StringID::destroyString((re::StringID *)&v32);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              uint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v32.var0 = 2 * v18;
              v32.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v34, v22, &v32);
              re::StringID::destroyString((re::StringID *)&v32);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v34, v23);
      xmmword_26AF75E68 = (__int128)v32;
      re::StringID::destroyString((re::StringID *)&v30);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v34);
      re::internal::assertLog((re::internal *)5, v29, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "AssetNetworkMessageType", v30, v31);
      _os_crash();
      __break(1u);
    }
  }
}

void *re::allocInfo_AssetSimpleMessage(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF75E00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF75E00))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF75E90, "AssetSimpleMessage");
    __cxa_guard_release(&qword_26AF75E00);
  }
  return &unk_26AF75E90;
}

void re::initInfo_AssetSimpleMessage(re *this, re::IntrospectionBase *a2)
{
  v25[0] = 0x1F5266FA5945820ALL;
  v25[1] = "AssetSimpleMessage";
  re::StringID::destroyString((re::StringID *)v25);
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v26;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF75E08, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF75E08);
    if (v4)
    {
      uint64_t v5 = (re *)re::introspectionAllocator(v4);
      re::introspect_AssetNetworkMessageType(v5, v6);
      uint64_t v7 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "messageType";
      *(void *)(v7 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = &qword_26AF75E48;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(void *)(v7 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v7 + 5re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF75E20 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::IntrospectionInfo<re::DynamicString>::get(1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "assetPath";
      *(void *)(v11 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x800000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v11 + 5re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF75E28 = v11;
      long long v12 = re::introspectionAllocator((re *)v11);
      uint64_t v14 = re::introspect_uint32_t((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "assetSize";
      *(void *)(v15 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x2800000003;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v15 + 5re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF75E30 = v15;
      uint64_t v16 = re::introspectionAllocator((re *)v15);
      uint64_t v18 = re::introspect_uint32_t((re *)1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "currentFragment";
      *(void *)(v19 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x2C00000004;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v19 + 5re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF75E38 = v19;
      uint64_t v20 = re::introspectionAllocator((re *)v19);
      uint64_t v22 = re::introspect_uint32_t((re *)1, v21);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = "numFragments";
      *(void *)(v23 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = v22;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x3000000005;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(void *)(v23 + 5re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF75E40 = v23;
      __cxa_guard_release(&qword_26AF75E08);
    }
  }
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0x3800000008;
  *((_DWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 0;
  *((_DWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = 5;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = &qword_26AF75E20;
  *((void *)this + 9) = re::internal::defaultConstruct<re::AssetSimpleMessage>;
  *((void *)this + 11) = 0;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::AssetSimpleMessage>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::AssetSimpleMessage>;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = re::internal::defaultDestructV2<re::AssetSimpleMessage>;
  re::IntrospectionRegistry::add(this, v3);
  long long v24 = v26;
}

void *re::internal::defaultConstruct<re::AssetSimpleMessage>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a3 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  uint64_t v3 = (void *)(a3 + 8);
  *(_OWORD *)(a3 + 24) = 0u;
  return re::DynamicString::setCapacity(v3, 0);
}

double re::internal::defaultDestruct<re::AssetSimpleMessage>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicString::deinit((re::DynamicString *)(a3 + 8));
}

void *re::internal::defaultConstructV2<re::AssetSimpleMessage>(uint64_t a1)
{
  *(_OWORD *)(a1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  uint64_t v1 = (void *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  return re::DynamicString::setCapacity(v1, 0);
}

double re::internal::defaultDestructV2<re::AssetSimpleMessage>(uint64_t a1)
{
  return re::DynamicString::deinit((re::DynamicString *)(a1 + 8));
}

uint64_t re::introspect_AssetSimpleMessage(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AssetSimpleMessage", (uint64_t (*)(re::internal *))re::allocInfo_AssetSimpleMessage, (re::IntrospectionBase *(*)(void))re::initInfo_AssetSimpleMessage, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::AssetSimpleMessage>, this);
}

uint64_t re::AssetSimpleMessage::maxBytesPerPacket(re::AssetSimpleMessage *this)
{
  uint64_t v1 = &re::introspect_StateTransitionInterruptionType(BOOL)::info;
  {
    uint64_t v1 = (void *)&re::introspect_StateTransitionInterruptionType(BOOL)::info;
    if (v3)
    {
      re::Defaults::uintValue((re::Defaults *)"networkAssetMaxBytesPerPacket", v4, (uint64_t)v6);
      uint64_t v5 = v7;
      if (!v6[0]) {
        uint64_t v5 = 0xFFFFLL;
      }
      re::AssetSimpleMessage::maxBytesPerPacket(void)::value = v5;
      uint64_t v1 = (void *)&re::introspect_StateTransitionInterruptionType(BOOL)::info;
    }
  }
  return v1[106];
}

uint64_t re::SerializerV2<re::EncoderOPACK<re::SeekableInputStream>>::SerializerV2(uint64_t a1, const StringID *a2)
{
  *(void *)a1 = &unk_26E6CBC00;
  re::StringID::StringID((re::StringID *)(a1 + 8), a2);
  re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::Encoder(a1 + 24, 13);
  *(void *)(a1 + 25re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0x7FFFFFFF00000000;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 20re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a1 + 19re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(_DWORD *)(a1 + 21re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  *(void *)a1 = &unk_26E6CBB98;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 28re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(a1 + 27re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(_DWORD *)(a1 + 2re::DynamicArray<unsigned long>::deinit((uint64_t)this + 96) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_OWORD *)(a1 + 33re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(void *)(a1 + 34re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0x7FFFFFFFLL;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 36re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(_DWORD *)(a1 + 384) = 0;
  *(void *)(a1 + 37re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(_OWORD *)(a1 + 4re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0u;
  *(_OWORD *)(a1 + 39re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
  *(_OWORD *)(a1 + 40re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0u;
  *(void *)(a1 + 43re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0x7FFFFFFFLL;
  return a1;
}

void re::serializeAssetBinary(uint64_t a1@<X0>, uint64_t a2@<X1>, re **a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X8>)
{
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v63);
  if (v61[0])
  {
    re::StreamWriterCopyingOutputStream::StreamWriterCopyingOutputStream((uint64_t)&v53, a1);
    uint64_t v22 = 0x7F36B44A9D0F5EC6;
    *(void *)&long long v23 = "AssetBinarySerializer";
    re::SerializerV1<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>::SerializerV1((uint64_t)&v30, (const StringID *)&v22);
    re::StringID::destroyString((re::StringID *)&v22);
    uint64_t v30 = &unk_26E6CB7A8;
    v36[12] = a4;
    re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>::open((uint64_t)&v30, (uint64_t)&v53, a5, a6);
    if (!v34) {
      (*((void (**)(void **, const char *, uint64_t, uint64_t, unsigned char *, unsigned char *, void))v30 + 9))(&v30, "asset", 1, a2, v62, v62, 0);
    }
    (*((void (**)(void **))v30 + 7))(&v30);
    re::Encoder<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::close((_anonymous_namespace_ *)&v33);
    if (v34)
    {
      LOBYTE(v2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 1;
      long long v23 = v35;
      re::DynamicString::DynamicString((re::DynamicString *)&v24, (const re::DynamicString *)v36);
      if (v25) {
        uint64_t v14 = *(unsigned char **)&v26[7];
      }
      else {
        uint64_t v14 = v26;
      }
      re::DynamicString::format((re::DynamicString *)"Asset serialization failed. Details: %s", (re::DynamicString *)&v27, v14);
      long long v15 = v27;
      uint64_t v16 = v28;
      uint64_t v17 = v29;
      *(unsigned char *)a7 = 0;
      *(_OWORD *)(a7 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v15;
      *(void *)(a7 + 24) = v16;
      *(void *)(a7 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v17;
      if (_BYTE)v22 && v24 && (v25) {
        (*(void (**)(void))(*(void *)v24 + 40))();
      }
    }
    else
    {
      *(unsigned char *)a7 = 1;
    }
    uint64_t v30 = &unk_26E6C8C28;
    if (v48)
    {
      if (v52) {
        (*(void (**)(void))(*(void *)v48 + 40))();
      }
      uint64_t v52 = 0;
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      uint64_t v48 = 0;
      ++v51;
    }
    if (v43)
    {
      if (v47) {
        (*(void (**)(void))(*(void *)v43 + 40))();
      }
      uint64_t v47 = 0;
      uint64_t v44 = 0;
      uint64_t v45 = 0;
      uint64_t v43 = 0;
      ++v46;
    }
    if (v38)
    {
      if (v42) {
        (*(void (**)(void))(*(void *)v38 + 40))();
      }
      uint64_t v42 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      uint64_t v38 = 0;
      ++v41;
    }
    re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v37);
    re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>::~Serializer((uint64_t)&v30);
    re::StreamWriterCopyingOutputStream::Flush((re::StreamWriterCopyingOutputStream *)&v53);
    if (v56)
    {
      if (v60) {
        (*(void (**)(void))(*(void *)v56 + 40))();
      }
      uint64_t v60 = 0;
      uint64_t v57 = 0;
      uint64_t v58 = 0;
      uint64_t v56 = 0;
      ++v59;
    }
    re::DynamicArrayBufferedOutputStream::~DynamicArrayBufferedOutputStream((re::DynamicArrayBufferedOutputStream *)&v53);
  }
  else
  {
    re::getPrettyTypeName((re *)a3, (const re::IntrospectionBase *)&v30);
    if (v31) {
      uint64_t v18 = *(unsigned char **)&v32[7];
    }
    else {
      uint64_t v18 = v32;
    }
    re::DynamicString::format((re::DynamicString *)"Asset serialization failed. Type info \"%s\" not found.", (re::DynamicString *)&v53, v18);
    long long v19 = v53;
    uint64_t v20 = v54;
    uint64_t v21 = v55;
    *(unsigned char *)a7 = 0;
    *(_OWORD *)(a7 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v19;
    *(void *)(a7 + 24) = v20;
    *(void *)(a7 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v21;
    if (v30 && (v31 & 1) != 0) {
      (*(void (**)(void))(*(void *)v30 + 40))();
    }
  }
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v63);
}

void re::deserializeAssetBinary(uint64_t a1@<X0>, uint64_t a2@<X1>, re **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, re::Allocator *a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v90 = *MEMORY[0x263EF8340];
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v47);
  if (v45[0])
  {
    long long v86 = 0;
    uint64_t v88 = 0;
    v43[0] = 1;
    re::TypeInfo::TypeInfo((uint64_t)v44, (uint64_t)v46);
    if (!a4) {
      goto LABEL_23;
    }
    TypeRegistry = re::createTypeRegistry(a4, a7, a7);
    *(void *)&v89[0] = &unk_26E6CBE08;
    *((void *)&v89[0] + 1) = a7;
    *((void *)&v89[1] + 1) = v89;
    int v51 = (long long *)((char *)&v48 + 8);
    *(void *)&long long v48 = TypeRegistry;
    *((void *)&v48 + 1) = &unk_26E6CBE08;
    uint64_t v49 = a7;
    std::__function::__value_func<void ()(re::TypeRegistry *)>::~__value_func[abi:nn180100](v89);
    uint64_t v16 = (uint64_t **)v48;
    *(void *)&long long v48 = 0;
    uint64_t v17 = v86;
    long long v86 = v16;
    if (v17) {
      std::function<void ()(re::TypeRegistry *)>::operator()((uint64_t)v88, (uint64_t)v17);
    }
    uint64_t v18 = v88;
    uint64_t v88 = 0;
    if (v18 == v87)
    {
      (*(void (**)(void *))(v87[0] + 32))(v87);
    }
    else if (v18)
    {
      (*(void (**)(void *))(*v18 + 40))(v18);
    }
    if (v51)
    {
      if (v51 == (long long *)((char *)&v48 + 8))
      {
        uint64_t v88 = v87;
        (*(void (**)(char *, void *))(*((void *)&v48 + 1) + 24))((char *)&v48 + 8, v87);
      }
      else
      {
        uint64_t v88 = v51;
        int v51 = 0;
      }
    }
    else
    {
      uint64_t v88 = 0;
    }
    uint64_t v22 = std::unique_ptr<re::TypeRegistry,std::function<void ()(re::TypeRegistry*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v48);
    long long v23 = (re::TypeRegistry *)v86;
    if (v86)
    {
      uint64_t v24 = re::TypeInfo::name((re::TypeInfo *)v46);
      re::TypeRegistry::typeInfo(v23, (const re::StringID *)v24, &v48);
      re::Optional<re::TypeInfo>::operator=(v43, (unsigned __int8 *)&v48);
      if (v43[0])
      {
LABEL_23:
        *(void *)&v89[0] = 0x81C6E49267FF3CC8;
        *((void *)&v89[0] + 1) = "AssetBinaryDeserializer";
        *(void *)&long long v48 = &unk_26E6CBB30;
        re::StringID::StringID((re::StringID *)((char *)&v48 + 8), (const StringID *)v89);
        uint64_t v60 = 0;
        memset(v58, 0, sizeof(v58));
        int v59 = 0;
        uint64_t v50 = 0;
        int v51 = 0;
        int v52 = 0;
        long long v53 = 0;
        uint64_t v54 = 0;
        v55[0] = 0;
        int v61 = 13;
        uint64_t v63 = 1024;
        char v62 = 0;
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF75F10, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_26AF75F10))
        {
          re::Defaults::intValue((re::Defaults *)"maxSerializationDepth", v37, (uint64_t)&v40);
          if ((_BYTE)v40) {
            uint64_t v38 = SDWORD1(v40);
          }
          else {
            uint64_t v38 = 0;
          }
          _MergedGlobals_49 = v38;
          __cxa_guard_release(&qword_26AF75F10);
        }
        if (_MergedGlobals_49) {
          uint64_t v63 = _MergedGlobals_49;
        }
        long long v67 = 0u;
        long long v68 = 0u;
        uint64_t v64 = 0;
        uint64_t v65 = 0;
        int v69 = 0;
        int v66 = 0;
        uint64_t v70 = 0x7FFFFFFFLL;
        *(void *)&long long v48 = &unk_26E6CBAC8;
        __int16 v71 = 1;
        uint64_t v74 = 0x7FFFFFFFLL;
        long long v80 = 0u;
        long long v79 = 0u;
        memset(v72, 0, sizeof(v72));
        int v73 = 0;
        uint64_t v76 = 0;
        uint64_t v77 = 0;
        uint64_t v75 = 0;
        int v78 = 0;
        uint64_t v85 = 0;
        int v81 = 0;
        int v84 = 0;
        long long v82 = 0u;
        long long v83 = 0u;
        re::StringID::destroyString((re::StringID *)v89);
        *(void *)&long long v48 = &unk_26E6CB810;
        uint64_t v64 = a5;
        uint64_t v26 = v65;
        if (*(_DWORD *)(v65 + 24) != v66)
        {
          re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::deinit(&v48);
          char v25 = (_anonymous_namespace_ *)re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::init(&v48, v26);
        }
        uint64_t v50 = a1;
        int v51 = 0;
        int v52 = 0;
        if (!a6)
        {
        }
        long long v53 = a6;
        if (!a7)
        {
        }
        uint64_t v54 = a7;
        LOBYTE(v89[0]) = 0;
        re::Optional<re::DetailedError>::operator=((uint64_t)v55, (unsigned __int8 *)v89);
        if (LOBYTE(v89[0]) && *((void *)&v89[1] + 1) && (v89[2] & 1) != 0) {
          (*(void (**)(void))(**((void **)&v89[1] + 1) + 40))();
        }
        v58[0] = v53;
        re::DynamicArray<re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::State>::setCapacity(v58, 0x40uLL);
        ++v59;
        LOBYTE(v89[0]) = 0;
        memset((char *)v89 + 4, 0, 44);
        __n128 v27 = re::DynamicArray<re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::State>::add((_anonymous_namespace_ *)v58, (uint64_t)v89);
        (*(void (**)(long long *, __n128))(v48 + 48))(&v48, v27);
        if (!v55[0]) {
          (*(void (**)(long long *, const char *, uint64_t, uint64_t, unsigned char *, unsigned char *, void))(v48 + 72))(&v48, "asset", 1, a2, v46, v44, 0);
        }
        (*(void (**)(long long *))(v48 + 56))(&v48);
        re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::close((uint64_t)&v50);
        if (v55[0])
        {
          uint64_t v28 = re::TypeInfo::name((re::TypeInfo *)v46)[1];
          LOBYTE(v89[0]) = v55[0];
          if (v55[0])
          {
            *(_OWORD *)((char *)v89 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v56;
            re::DynamicString::DynamicString((re::DynamicString *)((char *)&v89[1] + 8), (const re::DynamicString *)&v57);
            if (v89[2]) {
              uint64_t v29 = (char *)*((void *)&v89[2] + 1);
            }
            else {
              uint64_t v29 = (char *)&v89[2] + 1;
            }
          }
          else
          {
            uint64_t v29 = (char *)&v89[2] + 1;
          }
          re::DynamicString::format((re::DynamicString *)"Asset deserialization failed. Asset type \"%s\". Details: %s", (re::DynamicString *)&v40, v28, v29);
          long long v34 = v40;
          uint64_t v35 = v41;
          uint64_t v36 = v42;
          *(unsigned char *)a8 = 0;
          *(_OWORD *)(a8 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v34;
          *(void *)(a8 + 24) = v35;
          *(void *)(a8 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v36;
          if (LOBYTE(v89[0]) && *((void *)&v89[1] + 1) && (v89[2] & 1) != 0) {
            (*(void (**)(void))(**((void **)&v89[1] + 1) + 40))();
          }
        }
        else
        {
          *(unsigned char *)a8 = 1;
        }
        *(void *)&long long v48 = &unk_26E6CBAC8;
        if (*((void *)&v82 + 1))
        {
          if (v85) {
            (*(void (**)(void))(**((void **)&v82 + 1) + 40))();
          }
          uint64_t v85 = 0;
          long long v83 = 0uLL;
          *((void *)&v82 + 1) = 0;
          ++v84;
        }
        if (*((void *)&v79 + 1))
        {
          if ((void)v82) {
            (*(void (**)(void))(**((void **)&v79 + 1) + 40))();
          }
          *(void *)&long long v82 = 0;
          long long v80 = 0uLL;
          *((void *)&v79 + 1) = 0;
          ++v81;
        }
        if (v75)
        {
          if ((void)v79) {
            (*(void (**)(void))(*(void *)v75 + 40))();
          }
          *(void *)&long long v79 = 0;
          uint64_t v76 = 0;
          uint64_t v77 = 0;
          uint64_t v75 = 0;
          ++v78;
        }
        re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v72);
        re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::~Serializer((uint64_t)&v48);
        goto LABEL_65;
      }
      uint64_t v30 = re::TypeInfo::name((re::TypeInfo *)v46);
      re::DynamicString::format((re::DynamicString *)"Asset deserialization failed. Type \"%s\" not found in persisted schema.", (re::DynamicString *)&v48, v30[1]);
    }
    else
    {
    }
    long long v31 = v48;
    StringID v32 = v49;
    uint64_t v33 = v50;
    *(unsigned char *)a8 = 0;
    *(_OWORD *)(a8 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v31;
    *(void *)(a8 + 24) = v32;
    *(void *)(a8 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v33;
LABEL_65:
    std::unique_ptr<re::TypeRegistry,std::function<void ()(re::TypeRegistry*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v86);
    goto LABEL_66;
  }
  re::getPrettyTypeName((re *)a3, (const re::IntrospectionBase *)&v48);
  if (BYTE8(v48)) {
    long long v19 = (char *)v49;
  }
  else {
    long long v19 = (char *)&v48 + 9;
  }
  re::DynamicString::format((re::DynamicString *)"Asset serialization failed. Type info \"%s\" not found.", (re::DynamicString *)v89, v19);
  long long v20 = v89[0];
  long long v21 = v89[1];
  *(unsigned char *)a8 = 0;
  *(_OWORD *)(a8 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v20;
  *(_OWORD *)(a8 + 24) = v21;
  if (void)v48 && (BYTE8(v48)) {
    (*(void (**)(void))(*(void *)v48 + 40))();
  }
LABEL_66:
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v47);
}

void re::serializeAssetOPACK(uint64_t a1@<X0>, uint64_t a2@<X1>, re **a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X8>)
{
  v61[6] = *MEMORY[0x263EF8340];
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v42);
  if (v40[0])
  {
    re::StreamWriterCopyingOutputStream::StreamWriterCopyingOutputStream((uint64_t)&v32, a1);
    uint64_t v24 = 0x3D2ADDFABE78EB94;
    *(void *)&long long v25 = "AssetOPACKSerializer";
    re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SerializerV2((uint64_t)&v43, (const StringID *)&v24);
    re::StringID::destroyString((re::StringID *)&v24);
    uint64_t v43 = &unk_26E6CB878;
    v49[14] = a4;
    re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::open((uint64_t)&v43, (uint64_t)&v32, a5, a6);
    if (!v47) {
      (*((void (**)(void **, const char *, uint64_t, uint64_t, unsigned char *, unsigned char *, void))v43 + 9))(&v43, "asset", 1, a2, v41, v41, 0);
    }
    (*((void (**)(void **))v43 + 7))(&v43);
    re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::close((_anonymous_namespace_ *)&v46);
    if (v47)
    {
      LOBYTE(v24) = 1;
      long long v25 = v48;
      re::DynamicString::DynamicString((re::DynamicString *)&v26, (const re::DynamicString *)v49);
      if (v27) {
        uint64_t v14 = *(unsigned char **)&v28[7];
      }
      else {
        uint64_t v14 = v28;
      }
      re::DynamicString::format((re::DynamicString *)"Asset serialization failed. Details: %s", (re::DynamicString *)&v29, v14);
      long long v15 = v29;
      uint64_t v16 = v30;
      uint64_t v17 = v31;
      *(unsigned char *)a7 = 0;
      *(_OWORD *)(a7 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v15;
      *(void *)(a7 + 24) = v16;
      *(void *)(a7 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v17;
      if (_BYTE)v24 && v26 && (v27) {
        (*(void (**)(void))(*(void *)v26 + 40))();
      }
    }
    else
    {
      *(unsigned char *)a7 = 1;
    }
    uint64_t v43 = &unk_26E6C8CF8;
    double v22 = re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit(v61);
    if (v56)
    {
      if (v60) {
        (*(void (**)(double))(*(void *)v56 + 40))(v22);
      }
      uint64_t v60 = 0;
      uint64_t v57 = 0;
      uint64_t v58 = 0;
      uint64_t v56 = 0;
      ++v59;
    }
    double v23 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v55);
    if (v50)
    {
      if (v54) {
        (*(void (**)(double))(*(void *)v50 + 40))(v23);
      }
      uint64_t v54 = 0;
      uint64_t v51 = 0;
      uint64_t v52 = 0;
      uint64_t v50 = 0;
      ++v53;
    }
    re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::~Serializer((uint64_t)&v43);
    re::StreamWriterCopyingOutputStream::Flush((re::StreamWriterCopyingOutputStream *)&v32);
    if (v35)
    {
      if (v39) {
        (*(void (**)(void))(*(void *)v35 + 40))();
      }
      uint64_t v39 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v35 = 0;
      ++v38;
    }
    re::DynamicArrayBufferedOutputStream::~DynamicArrayBufferedOutputStream((re::DynamicArrayBufferedOutputStream *)&v32);
  }
  else
  {
    re::getPrettyTypeName((re *)a3, (const re::IntrospectionBase *)&v43);
    if (v44) {
      uint64_t v18 = *(unsigned char **)&v45[7];
    }
    else {
      uint64_t v18 = v45;
    }
    re::DynamicString::format((re::DynamicString *)"Asset serialization failed. Type info \"%s\" not found.", (re::DynamicString *)&v32, v18);
    long long v19 = v32;
    uint64_t v20 = v33;
    uint64_t v21 = v34;
    *(unsigned char *)a7 = 0;
    *(_OWORD *)(a7 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v19;
    *(void *)(a7 + 24) = v20;
    *(void *)(a7 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v21;
    if (v43 && (v44 & 1) != 0) {
      (*(void (**)(void))(*(void *)v43 + 40))();
    }
  }
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v42);
}

void re::deserializeAssetOPACK(uint64_t a1@<X0>, uint64_t a2@<X1>, re **a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X8>)
{
  v56[5] = *MEMORY[0x263EF8340];
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v36);
  if (v34[0])
  {
    v56[0] = 0;
    void v56[4] = 0;
    char v32 = 1;
    re::TypeInfo::TypeInfo((uint64_t)v33, (uint64_t)v35);
    *(void *)long long v25 = 0x935762BFD538CE16;
    *(void *)&v25[8] = "AssetOPACKDeserializer";
    re::SerializerV2<re::EncoderOPACK<re::SeekableInputStream>>::SerializerV2((uint64_t)&v37, (const StringID *)v25);
    re::StringID::destroyString((re::StringID *)v25);
    uint64_t v37 = &unk_26E6CB8E0;
    v43[14] = a4;
    re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::open((uint64_t)&v37, a1, a5, a6);
    if (!v41) {
      (*((void (**)(void **, const char *, uint64_t, uint64_t, unsigned char *, unsigned char *, void))v37 + 9))(&v37, "asset", 1, a2, v35, v33, 0);
    }
    (*((void (**)(void **))v37 + 7))(&v37);
    re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::close((_anonymous_namespace_ *)&v40);
    if (v41)
    {
      uint64_t v14 = re::TypeInfo::name((re::TypeInfo *)v35)[1];
      v25[0] = v41;
      if (v41)
      {
        *(_OWORD *)&v25[8] = v42;
        re::DynamicString::DynamicString((re::DynamicString *)&v26, (const re::DynamicString *)v43);
        if (v27) {
          long long v15 = *(unsigned char **)&v28[7];
        }
        else {
          long long v15 = v28;
        }
      }
      else
      {
        long long v15 = v28;
      }
      re::DynamicString::format((re::DynamicString *)"Asset deserialization failed. Asset type \"%s\". Details: %s", (re::DynamicString *)&v29, v14, v15);
      long long v20 = v29;
      uint64_t v21 = v30;
      uint64_t v22 = v31;
      *(unsigned char *)a7 = 0;
      *(_OWORD *)(a7 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v20;
      *(void *)(a7 + 24) = v21;
      *(void *)(a7 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v22;
      if (v25[0] && v26 && (v27 & 1) != 0) {
        (*(void (**)(void))(*(void *)v26 + 40))();
      }
    }
    else
    {
      *(unsigned char *)a7 = 1;
    }
    uint64_t v37 = &unk_26E6CBB98;
    double v23 = re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit(v55);
    if (v50)
    {
      if (v54) {
        (*(void (**)(double))(*(void *)v50 + 40))(v23);
      }
      uint64_t v54 = 0;
      uint64_t v51 = 0;
      uint64_t v52 = 0;
      uint64_t v50 = 0;
      ++v53;
    }
    double v24 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v49);
    if (v44)
    {
      if (v48) {
        (*(void (**)(double))(*(void *)v44 + 40))(v24);
      }
      uint64_t v48 = 0;
      uint64_t v45 = 0;
      uint64_t v46 = 0;
      uint64_t v44 = 0;
      ++v47;
    }
    re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::~Serializer((uint64_t)&v37);
    std::unique_ptr<re::TypeRegistry,std::function<void ()(re::TypeRegistry*)>>::~unique_ptr[abi:nn180100](v56);
  }
  else
  {
    re::getPrettyTypeName((re *)a3, (const re::IntrospectionBase *)&v37);
    if (v38) {
      uint64_t v16 = *(unsigned char **)&v39[7];
    }
    else {
      uint64_t v16 = v39;
    }
    re::DynamicString::format((re::DynamicString *)"Asset serialization failed. Type info \"%s\" not found.", (re::DynamicString *)v25, v16);
    long long v17 = *(_OWORD *)v25;
    uint64_t v18 = *(void *)&v25[16];
    uint64_t v19 = v26;
    *(unsigned char *)a7 = 0;
    *(_OWORD *)(a7 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v17;
    *(void *)(a7 + 24) = v18;
    *(void *)(a7 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v19;
    if (v37 && (v38 & 1) != 0) {
      (*(void (**)(void))(*(void *)v37 + 40))();
    }
  }
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v36);
}

void re::serializeAssetJSON(uint64_t a1@<X0>, uint64_t a2@<X1>, re **a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X8>)
{
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v86);
  if (v84[0])
  {
    re::StreamWriterCopyingOutputStream::StreamWriterCopyingOutputStream((uint64_t)&v76, a1);
    *(void *)&v87[0].var0 = 0x8EBD744EB006D4;
    v87[0].var1 = "AssetJSONSerializer";
    uint64_t v33 = (void (**)(void **))&unk_26E6CBCD0;
    re::StringID::StringID((re::StringID *)&v34, v87);
    uint64_t v46 = 0;
    memset(v44, 0, sizeof(v44));
    int v45 = 0;
    char v36 = 0;
    uint64_t v37 = 0;
    int v38 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    v41[0] = 0;
    int v47 = 13;
    uint64_t v49 = 1024;
    char v48 = 0;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF75F20, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF75F20))
    {
      re::Defaults::intValue((re::Defaults *)"maxSerializationDepth", v28, (uint64_t)&v30);
      if ((_BYTE)v30) {
        uint64_t v29 = SDWORD1(v30);
      }
      else {
        uint64_t v29 = 0;
      }
      qword_26AF75F18 = v29;
      __cxa_guard_release(&qword_26AF75F20);
    }
    if (qword_26AF75F18) {
      uint64_t v49 = qword_26AF75F18;
    }
    uint8_t v52[4] = 0;
    __int16 v53 = 0;
    long long v50 = 0u;
    long long v51 = 0u;
    memset(v52, 0, 28);
    long long v57 = 0u;
    long long v58 = 0u;
    int v59 = 0;
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    int v56 = 0;
    uint64_t v60 = 0x7FFFFFFFLL;
    uint64_t v33 = (void (**)(void **))&unk_26E6CBC68;
    __int16 v61 = 1;
    uint64_t v64 = 0x7FFFFFFFLL;
    long long v70 = 0u;
    long long v69 = 0u;
    memset(v62, 0, sizeof(v62));
    int v63 = 0;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    int v68 = 0;
    uint64_t v67 = 0;
    uint64_t v75 = 0;
    int v71 = 0;
    int v74 = 0;
    long long v73 = 0u;
    long long v72 = 0u;
    re::StringID::destroyString((re::StringID *)v87);
    uint64_t v33 = (void (**)(void **))&unk_26E6CB948;
    uint64_t v54 = a4;
    uint64_t v15 = v55;
    if (*(_DWORD *)(v55 + 24) != v56)
    {
      re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::deinit(&v33);
      uint64_t v14 = (_anonymous_namespace_ *)re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::init(&v33, v15);
    }
    char v36 = &v76;
    uint64_t v37 = 0;
    int v38 = 0;
    if (!a5)
    {
    }
    uint64_t v39 = a5;
    if (!a6)
    {
    }
    uint64_t v40 = a6;
    *(unsigned char *)&v87[0].var0 = 0;
    re::Optional<re::DetailedError>::operator=((uint64_t)v41, (unsigned __int8 *)v87);
    if (*(unsigned char *)&v87[0].var0 && v87[1].var1 && (*(unsigned char *)&v87[2].var0 & 1) != 0) {
      (*(void (**)(void))(*(void *)v87[1].var1 + 40))();
    }
    v44[0] = v39;
    re::DynamicArray<re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::State>::setCapacity(v44, 0x40uLL);
    ++v45;
    *(unsigned char *)&v87[0].var0 = 0;
    memset(&v87[0].var0 + 1, 0, 44);
    re::DynamicArray<re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::State>::add((_anonymous_namespace_ *)v44, (uint64_t)v87);
    if (!re::internal::RapidJSONAllocator::InstanceData::instance(void)::s_instance)
    {
    }
    v52[0] = v40;
    re::DynamicArray<char>::setCapacity(v52, 0);
    ++LODWORD(v52[3]);
    uint64_t v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v39 + 32))(v39, 64, 8);
    *(_OWORD *)uint64_t v17 = 0u;
    *(_OWORD *)(v17 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
    *(_OWORD *)(v17 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0u;
    *(void *)(v17 + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 512;
    *(_DWORD *)(v17 + 5re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 324;
    *(unsigned char *)(v17 + 60) = 0;
    *((void *)&v50 + 1) = v17;
    uint64_t v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v39 + 32))(v39, 48, 8);
    *(_OWORD *)uint64_t v18 = 0u;
    *(_OWORD *)(v18 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
    *(void *)(v18 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
    *(void *)(v18 + 40) = 256;
    *(void *)&long long v50 = v18;
    uint64_t v19 = *((void *)&v50 + 1);
    **((void **)&v50 + 1) = v18;
    *(unsigned char *)(v19 + 60) = 0;
    *(void *)(v19 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *(void *)(v19 + 24);
    v33[6]((void **)&v33);
    if (!v41[0]) {
      ((void (*)(void (***)(void **), const char *, uint64_t, uint64_t, unsigned char *, unsigned char *, void))v33[9])(&v33, "asset", 1, a2, v85, v85, 0);
    }
    v33[7]((void **)&v33);
    re::Encoder<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,re::DynamicArrayBufferedOutputStream>::close((_anonymous_namespace_ *)&v36);
    if (v41[0])
    {
      *(unsigned char *)&v87[0].var0 = 1;
      *(_OWORD *)&v87[0].var1 = v42;
      re::DynamicString::DynamicString((re::DynamicString *)&v87[1].var1, (const re::DynamicString *)&v43);
      if (*(unsigned char *)&v87[2].var0) {
        var1 = v87[2].var1;
      }
      else {
        var1 = (char *)&v87[2].var0 + 1;
      }
      re::DynamicString::format((re::DynamicString *)"Asset serialization failed. Details: %s", (re::DynamicString *)&v30, var1);
      long long v21 = v30;
      uint64_t v22 = v31;
      uint64_t v23 = v32;
      *(unsigned char *)a7 = 0;
      *(_OWORD *)(a7 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v21;
      *(void *)(a7 + 24) = v22;
      *(void *)(a7 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v23;
      if (*(unsigned char *)&v87[0].var0 && v87[1].var1 && (*(unsigned char *)&v87[2].var0 & 1) != 0) {
        (*(void (**)(void))(*(void *)v87[1].var1 + 40))();
      }
    }
    else
    {
      *(unsigned char *)a7 = 1;
    }
    uint64_t v33 = (void (**)(void **))&unk_26E6CBC68;
    if (*((void *)&v72 + 1))
    {
      if (v75) {
        (*(void (**)(void))(**((void **)&v72 + 1) + 40))();
      }
      uint64_t v75 = 0;
      long long v73 = 0uLL;
      *((void *)&v72 + 1) = 0;
      ++v74;
    }
    if (*((void *)&v69 + 1))
    {
      if ((void)v72) {
        (*(void (**)(void))(**((void **)&v69 + 1) + 40))();
      }
      *(void *)&long long v72 = 0;
      long long v70 = 0uLL;
      *((void *)&v69 + 1) = 0;
      ++v71;
    }
    if (v65)
    {
      if ((void)v69) {
        (*(void (**)(void))(*(void *)v65 + 40))();
      }
      *(void *)&long long v69 = 0;
      uint64_t v66 = 0;
      uint64_t v67 = 0;
      uint64_t v65 = 0;
      ++v68;
    }
    re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v62);
    re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)&v33);
    re::StreamWriterCopyingOutputStream::Flush((re::StreamWriterCopyingOutputStream *)&v76);
    if (v79)
    {
      if (v83) {
        (*(void (**)(void))(*(void *)v79 + 40))();
      }
      uint64_t v83 = 0;
      uint64_t v80 = 0;
      uint64_t v81 = 0;
      uint64_t v79 = 0;
      ++v82;
    }
    re::DynamicArrayBufferedOutputStream::~DynamicArrayBufferedOutputStream((re::DynamicArrayBufferedOutputStream *)&v76);
  }
  else
  {
    re::getPrettyTypeName((re *)a3, (const re::IntrospectionBase *)&v33);
    if (v34) {
      double v24 = *(unsigned char **)&v35[7];
    }
    else {
      double v24 = v35;
    }
    re::DynamicString::format((re::DynamicString *)"Asset serialization failed. Type info \"%s\" not found.", (re::DynamicString *)&v76, v24);
    long long v25 = v76;
    uint64_t v26 = v77;
    uint64_t v27 = v78;
    *(unsigned char *)a7 = 0;
    *(_OWORD *)(a7 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v25;
    *(void *)(a7 + 24) = v26;
    *(void *)(a7 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v27;
    if (v33 && (v34 & 1) != 0) {
      (*((void (**)(void))*v33 + 5))();
    }
  }
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v86);
}

void re::AssetBinarySerializer::~AssetBinarySerializer(re::AssetBinarySerializer *this)
{
  *(void *)this = &unk_26E6C8C28;
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 392);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 352);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 312);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 33);
  re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>::~Serializer((uint64_t)this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6C8C28;
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 392);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 352);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 312);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 33);
  re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>::~Serializer((uint64_t)this);
  JUMPOUT(0x237DBCBD0);
}

void re::AssetBinaryDeserializer::~AssetBinaryDeserializer(re::AssetBinaryDeserializer *this)
{
  *(void *)this = &unk_26E6CBAC8;
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 392);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 352);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 312);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 33);
  re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::~Serializer((uint64_t)this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6CBAC8;
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 392);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 352);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 312);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 33);
  re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::~Serializer((uint64_t)this);
  JUMPOUT(0x237DBCBD0);
}

void *re::SerializerV1<re::EncoderBinary<re::SeekableInputStream>>::trackObject(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v4 = *a3;
  return re::internal::SharedObjectGraph::beginObject((void *)(a1 + 256), a2, &v4);
}

uint64_t re::SerializerV1<re::EncoderBinary<re::SeekableInputStream>>::untrackObject(uint64_t result)
{
  if (*(unsigned char *)(result + 256))
  {
    --*(void *)(result + 408);
    ++*(_DWORD *)(result + 416);
  }
  return result;
}

void re::SerializerV1<re::EncoderBinary<re::SeekableInputStream>>::doOpen(uint64_t a1)
{
  *(unsigned char *)(a1 + 257) = 1;
  re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::clear(a1 + 264);
  *(void *)(a1 + 32re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  ++*(_DWORD *)(a1 + 336);
  *(void *)(a1 + 36re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  ++*(_DWORD *)(a1 + 376);
  *(void *)(a1 + 40re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  ++*(_DWORD *)(a1 + 416);
}

void re::SerializerV1<re::EncoderBinary<re::SeekableInputStream>>::doClose(uint64_t a1)
{
  *(void *)(a1 + 32re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  ++*(_DWORD *)(a1 + 336);
  *(void *)(a1 + 36re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  ++*(_DWORD *)(a1 + 376);
  *(void *)(a1 + 40re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  ++*(_DWORD *)(a1 + 416);
}

void re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::doRegisterSerializeFuncs(uint64_t a1)
{
  uint64_t v11 = 6059476;
  long long v12 = "BOOL";
  re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeBool<re::EncoderBinary<re::SeekableInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 6104748;
  long long v12 = "char";
  re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeChar<re::EncoderBinary<re::SeekableInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x172E117BCLL;
  long long v12 = "int8_t";
  re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI8<re::EncoderBinary<re::SeekableInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2CE93A4A92;
  long long v12 = "int16_t";
  re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI16<re::EncoderBinary<re::SeekableInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2CE93BFE06;
  long long v12 = "int32_t";
  re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI32<re::EncoderBinary<re::SeekableInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2CE93EC744;
  long long v12 = "int64_t";
  re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI64<re::EncoderBinary<re::SeekableInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 6655224;
  long long v12 = "long";
  re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI64<re::EncoderBinary<re::SeekableInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x31CD534126;
  long long v12 = "uint8_t";
  re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU8<re::EncoderBinary<re::SeekableInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x607DD0D4E68;
  long long v12 = "uint16_t";
  re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU16<re::EncoderBinary<re::SeekableInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x607DD0F01DCLL;
  long long v12 = "uint32_t";
  re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU32<re::EncoderBinary<re::SeekableInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x607DD11CB1ALL;
  long long v12 = "uint64_t";
  re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU64<re::EncoderBinary<re::SeekableInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x1947BDF6CLL;
  long long v12 = "size_t";
  re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU64<re::EncoderBinary<re::SeekableInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 195052728;
  long long v12 = "float";
  re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeFloat<re::EncoderBinary<re::SeekableInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x161EEF7A2;
  long long v12 = "double";
  re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeDouble<re::EncoderBinary<re::SeekableInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 189247272;
  long long v12 = "char*";
  re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeCString<re::EncoderBinary<re::SeekableInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2686EB529B3EE220;
  long long v12 = "DynamicString";
  re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeDynamicString<re::EncoderBinary<re::SeekableInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x458DDB01A18;
  long long v12 = "StringID";
  re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeStringID<re::EncoderBinary<re::SeekableInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v2 = *(void *)(a1 + 192);
  uint64_t v11 = 0x258C98EAAF29A10ALL;
  long long v12 = "CallbackSerializerAttribute";
  int v3 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v2 + 200, &v11);
  if (v3)
  {
    uint64_t v4 = *v3;
    re::StringID::destroyString((re::StringID *)&v11);
    if (v2)
    {
      uint64_t v5 = *(void *)(a1 + 192);
      v10[0] = v2;
      v10[1] = v4;
      re::TypeRegistry::attributesByAttributeType(v5, (uint64_t)v10, (uint64_t)&v11);
      if (v13)
      {
        uint64_t v6 = 48 * v13;
        unsigned int v7 = (long long *)(v14 + 16);
        do
        {
          long long v8 = *v7;
          v7 += 3;
          long long v9 = v8;
          re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::registerSerializeFunc(a1, (uint64_t)&v9, (uint64_t)re::serializeIntrospectionCallbackSerializer<re::EncoderBinary<re::SeekableInputStream>>);
          v6 -= 48;
        }
        while (v6);
      }
      if (v11)
      {
        if (v14) {
          (*(void (**)(void))(*(void *)v11 + 40))();
        }
      }
    }
  }
  else
  {
    re::StringID::destroyString((re::StringID *)&v11);
  }
}

uint64_t re::SerializerV1<re::EncoderBinary<re::SeekableInputStream>>::doSerialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, re::TypeInfo *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (unsigned char *)(a1 + 256);
  uint64_t v15 = *(void *)(a1 + 408);
  if (!v15)
  {
    if (a7) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = a4;
    }
    uint64_t v17 = **((void **)a5 + 2);
    *(void *)&long long v26 = *(void *)a5;
    *((void *)&v26 + 1) = v17;
    re::internal::SharedObjectGraph::beginObject((void *)(a1 + 256), v16, &v26);
  }
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, re::TypeInfo *))(*(void *)a1 + 80))(a1, a5);
  if (v18)
  {
    uint64_t result = v18(a1, a2, a3, a4, a5, a6, a7);
    if (!v15)
    {
      if (*v14)
      {
        --*(void *)(a1 + 408);
        ++*(_DWORD *)(a1 + 416);
      }
    }
  }
  else
  {
    long long v20 = re::TypeInfo::name(a5);
    re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v21, v22, v23, v24, v25, v20[1]);
    return 0;
  }
  return result;
}

void *re::SerializerV1<re::EncoderBinary<re::SeekableInputStream>>::doResolveSerializeFunc(uint64_t a1, re::TypeInfo *this)
{
  uint64_t v4 = re::TypeInfo::name(this);
  if ((unint64_t)*v4 >> 1 != 94623636
    || (uint64_t v6 = (char *)v4[1],
        unsigned int v7 = re::SerializerV1<re::EncoderBinary<re::SeekableInputStream>>::serializeCString,
        v6 != "char*")
    && (v8 = strcmp(v6, "char*"), unsigned int v7 = re::SerializerV1<re::EncoderBinary<re::SeekableInputStream>>::serializeCString,
                                  v8))
  {
    if (*((unsigned char *)this + 12) != 9)
    {
LABEL_9:
      unsigned int v7 = re::serializeType<re::EncoderBinary<re::SeekableInputStream>>;
      if (*(void *)this == *(void *)(a1 + 192))
      {
        uint64_t v10 = re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::tryGet(a1 + 208, **((void **)this + 2) | 0xFFFFFFFF00000000);
        unsigned int v7 = re::serializeType<re::EncoderBinary<re::SeekableInputStream>>;
        if (v10) {
          return *(void **)v10;
        }
      }
      return v7;
    }
    unsigned int v9 = *(unsigned __int8 *)(*((void *)this + 2) + 80);
    unsigned int v7 = re::SerializerV1<re::EncoderBinary<re::SeekableInputStream>>::serializePointer;
    if (v9 >= 2)
    {
      if (v9 != 2)
      {
        re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Invalid PointerSharing type.", "!\"Unreachable code\"", "doResolveSerializeFunc", 84);
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) External references are not supported by the SerializerV1.", "!\"Unreachable code\"", "doResolveSerializeFunc", 82);
      _os_crash();
      __break(1u);
      goto LABEL_9;
    }
  }
  return v7;
}

void re::AssetOPACKSerializer::~AssetOPACKSerializer(re::AssetOPACKSerializer *this)
{
  *(void *)this = &unk_26E6C8CF8;
  re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 50);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 360);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 39);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 272);
  re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::~Serializer((uint64_t)this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6C8CF8;
  re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 50);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 360);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 39);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 272);
  re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::~Serializer((uint64_t)this);
  JUMPOUT(0x237DBCBD0);
}

void re::AssetOPACKDeserializer::~AssetOPACKDeserializer(re::AssetOPACKDeserializer *this)
{
  *(void *)this = &unk_26E6CBB98;
  re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 50);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 360);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 39);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 272);
  re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::~Serializer((uint64_t)this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6CBB98;
  re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 50);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 360);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 39);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 272);
  re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::~Serializer((uint64_t)this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::SerializerV2<re::EncoderOPACK<re::SeekableInputStream>>::doOpen(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  *(void *)(a1 + 28re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  ++*(_DWORD *)(a1 + 296);
  re::HashTable<void *,unsigned int,re::Hash<void *>,re::EqualTo<void *>,true,false>::clear(a1 + 312);
  *(void *)(a1 + 37re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  ++*(_DWORD *)(a1 + 384);
  re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::clear(a1 + 400);
  uint64_t result = re::EncoderOPACK<re::SeekableInputStream>::beginObject(a1 + 24, "container", 0, 0);
  if ((result & 1) == 0 && !*(unsigned char *)(a1 + 64))
  {
    return re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::setError(a1, "container", "Failed to open container.", v11, v12, v13, v14, v15, a9);
  }
  return result;
}

void re::SerializerV2<re::EncoderOPACK<re::SeekableInputStream>>::doClose(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  re::SerializerV2<re::EncoderOPACK<re::SeekableInputStream>>::deserializeSharedObjects(a1, a2, a3, a4, a5, a6, a7, a8, v9);
  re::EncoderOPACK<re::SeekableInputStream>::endObject(a1 + 24);
  *(void *)(a1 + 28re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  ++*(_DWORD *)(a1 + 296);
  re::HashTable<void *,unsigned int,re::Hash<void *>,re::EqualTo<void *>,true,false>::clear(a1 + 312);
  *(void *)(a1 + 37re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  ++*(_DWORD *)(a1 + 384);
  re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::clear(a1 + 400);
}

void re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::doRegisterSerializeFuncs(uint64_t a1)
{
  uint64_t v11 = 6059476;
  uint64_t v12 = "BOOL";
  re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeBool<re::EncoderOPACK<re::SeekableInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 6104748;
  uint64_t v12 = "char";
  re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeChar<re::EncoderOPACK<re::SeekableInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x172E117BCLL;
  uint64_t v12 = "int8_t";
  re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI8<re::EncoderOPACK<re::SeekableInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2CE93A4A92;
  uint64_t v12 = "int16_t";
  re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI16<re::EncoderOPACK<re::SeekableInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2CE93BFE06;
  uint64_t v12 = "int32_t";
  re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI32<re::EncoderOPACK<re::SeekableInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2CE93EC744;
  uint64_t v12 = "int64_t";
  re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI64<re::EncoderOPACK<re::SeekableInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 6655224;
  uint64_t v12 = "long";
  re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI64<re::EncoderOPACK<re::SeekableInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x31CD534126;
  uint64_t v12 = "uint8_t";
  re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU8<re::EncoderOPACK<re::SeekableInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x607DD0D4E68;
  uint64_t v12 = "uint16_t";
  re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU16<re::EncoderOPACK<re::SeekableInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x607DD0F01DCLL;
  uint64_t v12 = "uint32_t";
  re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU32<re::EncoderOPACK<re::SeekableInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x607DD11CB1ALL;
  uint64_t v12 = "uint64_t";
  re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU64<re::EncoderOPACK<re::SeekableInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x1947BDF6CLL;
  uint64_t v12 = "size_t";
  re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU64<re::EncoderOPACK<re::SeekableInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 195052728;
  uint64_t v12 = "float";
  re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeFloat<re::EncoderOPACK<re::SeekableInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x161EEF7A2;
  uint64_t v12 = "double";
  re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeDouble<re::EncoderOPACK<re::SeekableInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 189247272;
  uint64_t v12 = "char*";
  re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeCString<re::EncoderOPACK<re::SeekableInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2686EB529B3EE220;
  uint64_t v12 = "DynamicString";
  re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeDynamicString<re::EncoderOPACK<re::SeekableInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x458DDB01A18;
  uint64_t v12 = "StringID";
  re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeStringID<re::EncoderOPACK<re::SeekableInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v2 = *(void *)(a1 + 208);
  uint64_t v11 = 0x258C98EAAF29A10ALL;
  uint64_t v12 = "CallbackSerializerAttribute";
  int v3 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v2 + 200, &v11);
  if (v3)
  {
    uint64_t v4 = *v3;
    re::StringID::destroyString((re::StringID *)&v11);
    if (v2)
    {
      uint64_t v5 = *(void *)(a1 + 208);
      v10[0] = v2;
      v10[1] = v4;
      re::TypeRegistry::attributesByAttributeType(v5, (uint64_t)v10, (uint64_t)&v11);
      if (v13)
      {
        uint64_t v6 = a1 + 224;
        unsigned int v7 = (uint64_t *)(v14 + 24);
        uint64_t v8 = 48 * v13;
        do
        {
          uint64_t v9 = *v7;
          v7 += 6;
          uint64_t v16 = re::serializeIntrospectionCallbackSerializer<re::EncoderOPACK<re::SeekableInputStream>>;
          unint64_t v15 = v9 | 0xFFFFFFFF00000000;
          re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::addOrReplace<BOOL (*&)(re::Serializer<re::EncoderOPACK<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)>(v6, &v15, &v16);
          v8 -= 48;
        }
        while (v8);
      }
      if (v11)
      {
        if (v14) {
          (*(void (**)(void))(*(void *)v11 + 40))();
        }
      }
    }
  }
  else
  {
    re::StringID::destroyString((re::StringID *)&v11);
  }
}

uint64_t re::SerializerV2<re::EncoderOPACK<re::SeekableInputStream>>::doSerialize(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, re::TypeInfo *a5, uint64_t a6, uint64_t a7)
{
  if (!a1[107] && a1[34] == 2)
  {
    int v25 = 0;
    uint64_t v22 = a4;
    re::TypeInfo::TypeInfo((uint64_t)&v23, (uint64_t)a5);
    re::TypeInfo::TypeInfo((uint64_t)v24, a6);
    unsigned char v24[16] = 0;
    re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::SeekableInputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addNew((uint64_t)(a1 + 100), &v25, (uint64_t)&v22);
    a3 = 10;
  }
  uint64_t v14 = (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))(*(uint64_t (**)(_DWORD *, re::TypeInfo *))(*(void *)a1 + 80))(a1, a5);
  if (v14) {
    return v14(a1, a2, a3, a4, a5, a6, a7);
  }
  uint64_t v16 = re::TypeInfo::name(a5);
  re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::setError((uint64_t)a1, 0, "Failed to resolve serialize function for type \"%s\"", v17, v18, v19, v20, v21, v16[1]);
  return 0;
}

uint64_t (*re::SerializerV2<re::EncoderOPACK<re::SeekableInputStream>>::doResolveSerializeFunc(uint64_t a1, uint64_t a2))(unsigned char *a1, const char *a2, const re::TypeInfo *a3, void *a4, re::TypeInfo *this, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v2 = re::SerializerV2<re::EncoderOPACK<re::SeekableInputStream>>::serializePointer;
  if (*(unsigned char *)(a2 + 12) != 9)
  {
    if (*(void *)a2 == *(void *)(a1 + 208))
    {
      LODWORD(v5) = **(void **)(a2 + 16);
      HIDWORD(v5) = -1;
      uint64_t v3 = re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::tryGet(a1 + 224, &v5);
      uint64_t v2 = re::serializeType<re::EncoderOPACK<re::SeekableInputStream>>;
      if (v3) {
        return *(uint64_t (**)(unsigned char *, const char *, const re::TypeInfo *, void *, re::TypeInfo *, uint64_t, uint64_t, uint64_t))v3;
      }
    }
    else
    {
      return re::serializeType<re::EncoderOPACK<re::SeekableInputStream>>;
    }
  }
  return (uint64_t (*)(unsigned char *, const char *, const re::TypeInfo *, void *, re::TypeInfo *, uint64_t, uint64_t, uint64_t))v2;
}

void re::AssetJSONSerializer::~AssetJSONSerializer(re::AssetJSONSerializer *this)
{
  *(void *)this = &unk_26E6CBC68;
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 472);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 432);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 392);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 43);
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6CBC68;
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 472);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 432);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 392);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 43);
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::~Serializer((uint64_t)this);
  JUMPOUT(0x237DBCBD0);
}

void *re::SerializerV1<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::trackObject(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v4 = *a3;
  return re::internal::SharedObjectGraph::beginObject((void *)(a1 + 336), a2, &v4);
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::untrackObject(uint64_t result)
{
  if (*(unsigned char *)(result + 336))
  {
    --*(void *)(result + 488);
    ++*(_DWORD *)(result + 496);
  }
  return result;
}

void re::SerializerV1<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doOpen(uint64_t a1)
{
  *(unsigned char *)(a1 + 337) = 0;
  re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::clear(a1 + 344);
  *(void *)(a1 + 40re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  ++*(_DWORD *)(a1 + 416);
  *(void *)(a1 + 44re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  ++*(_DWORD *)(a1 + 456);
  *(void *)(a1 + 48re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  ++*(_DWORD *)(a1 + 496);
}

void re::SerializerV1<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doClose(uint64_t a1)
{
  *(void *)(a1 + 40re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  ++*(_DWORD *)(a1 + 416);
  *(void *)(a1 + 44re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  ++*(_DWORD *)(a1 + 456);
  *(void *)(a1 + 48re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  ++*(_DWORD *)(a1 + 496);
}

void re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doRegisterSerializeFuncs(uint64_t a1)
{
  uint64_t v11 = 6059476;
  uint64_t v12 = "BOOL";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeBool<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 6104748;
  uint64_t v12 = "char";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeChar<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x172E117BCLL;
  uint64_t v12 = "int8_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI8<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2CE93A4A92;
  uint64_t v12 = "int16_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI16<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2CE93BFE06;
  uint64_t v12 = "int32_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI32<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2CE93EC744;
  uint64_t v12 = "int64_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI64<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 6655224;
  uint64_t v12 = "long";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI64<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x31CD534126;
  uint64_t v12 = "uint8_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU8<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x607DD0D4E68;
  uint64_t v12 = "uint16_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU16<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x607DD0F01DCLL;
  uint64_t v12 = "uint32_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU32<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x607DD11CB1ALL;
  uint64_t v12 = "uint64_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU64<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x1947BDF6CLL;
  uint64_t v12 = "size_t";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU64<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 195052728;
  uint64_t v12 = "float";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeFloat<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x161EEF7A2;
  uint64_t v12 = "double";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeDouble<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 189247272;
  uint64_t v12 = "char*";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeCString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2686EB529B3EE220;
  uint64_t v12 = "DynamicString";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x458DDB01A18;
  uint64_t v12 = "StringID";
  re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v2 = *(void *)(a1 + 272);
  uint64_t v11 = 0x258C98EAAF29A10ALL;
  uint64_t v12 = "CallbackSerializerAttribute";
  uint64_t v3 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v2 + 200, &v11);
  if (v3)
  {
    uint64_t v4 = *v3;
    re::StringID::destroyString((re::StringID *)&v11);
    if (v2)
    {
      uint64_t v5 = *(void *)(a1 + 272);
      v10[0] = v2;
      v10[1] = v4;
      re::TypeRegistry::attributesByAttributeType(v5, (uint64_t)v10, (uint64_t)&v11);
      if (v13)
      {
        uint64_t v6 = 48 * v13;
        unsigned int v7 = (long long *)(v14 + 16);
        do
        {
          long long v8 = *v7;
          v7 += 3;
          long long v9 = v8;
          re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, (uint64_t)&v9, (uint64_t)re::serializeIntrospectionCallbackSerializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
          v6 -= 48;
        }
        while (v6);
      }
      if (v11)
      {
        if (v14) {
          (*(void (**)(void))(*(void *)v11 + 40))();
        }
      }
    }
  }
  else
  {
    re::StringID::destroyString((re::StringID *)&v11);
  }
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doSerialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, re::TypeInfo *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (unsigned char *)(a1 + 336);
  uint64_t v15 = *(void *)(a1 + 488);
  if (!v15)
  {
    if (a7) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = a4;
    }
    uint64_t v17 = **((void **)a5 + 2);
    *(void *)&long long v26 = *(void *)a5;
    *((void *)&v26 + 1) = v17;
    re::internal::SharedObjectGraph::beginObject((void *)(a1 + 336), v16, &v26);
  }
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, re::TypeInfo *))(*(void *)a1 + 80))(a1, a5);
  if (v18)
  {
    uint64_t result = v18(a1, a2, a3, a4, a5, a6, a7);
    if (!v15)
    {
      if (*v14)
      {
        --*(void *)(a1 + 488);
        ++*(_DWORD *)(a1 + 496);
      }
    }
  }
  else
  {
    uint64_t v20 = re::TypeInfo::name(a5);
    re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v21, v22, v23, v24, v25, v20[1]);
    return 0;
  }
  return result;
}

void *re::SerializerV1<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doResolveSerializeFunc(uint64_t a1, re::TypeInfo *this)
{
  uint64_t v4 = re::TypeInfo::name(this);
  if ((unint64_t)*v4 >> 1 != 94623636
    || (uint64_t v6 = (char *)v4[1],
        unsigned int v7 = re::SerializerV1<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializeCString,
        v6 != "char*")
    && (int v8 = strcmp(v6, "char*"),
        unsigned int v7 = re::SerializerV1<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializeCString,
        v8))
  {
    if (*((unsigned char *)this + 12) != 9)
    {
LABEL_9:
      unsigned int v7 = re::serializeType<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
      if (*(void *)this == *(void *)(a1 + 272))
      {
        uint64_t v10 = re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::tryGet(a1 + 288, **((void **)this + 2) | 0xFFFFFFFF00000000);
        unsigned int v7 = re::serializeType<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
        if (v10) {
          return *(void **)v10;
        }
      }
      return v7;
    }
    unsigned int v9 = *(unsigned __int8 *)(*((void *)this + 2) + 80);
    unsigned int v7 = re::SerializerV1<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializePointer;
    if (v9 >= 2)
    {
      if (v9 != 2)
      {
        re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Invalid PointerSharing type.", "!\"Unreachable code\"", "doResolveSerializeFunc", 84);
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) External references are not supported by the SerializerV1.", "!\"Unreachable code\"", "doResolveSerializeFunc", 82);
      _os_crash();
      __break(1u);
      goto LABEL_9;
    }
  }
  return v7;
}

void *re::SerializerV1<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::trackObject(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v4 = *a3;
  return re::internal::SharedObjectGraph::beginObject((void *)(a1 + 336), a2, &v4);
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::untrackObject(uint64_t result)
{
  if (*(unsigned char *)(result + 336))
  {
    --*(void *)(result + 488);
    ++*(_DWORD *)(result + 496);
  }
  return result;
}

void re::SerializerV1<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doOpen(uint64_t a1)
{
  *(unsigned char *)(a1 + 337) = 1;
  re::HashTable<void const*,unsigned int,re::Hash<void const*>,re::EqualTo<void const*>,true,false>::clear(a1 + 344);
  *(void *)(a1 + 40re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  ++*(_DWORD *)(a1 + 416);
  *(void *)(a1 + 44re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  ++*(_DWORD *)(a1 + 456);
  *(void *)(a1 + 48re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  ++*(_DWORD *)(a1 + 496);
}

void re::SerializerV1<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doClose(uint64_t a1)
{
  *(void *)(a1 + 40re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  ++*(_DWORD *)(a1 + 416);
  *(void *)(a1 + 44re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  ++*(_DWORD *)(a1 + 456);
  *(void *)(a1 + 48re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  ++*(_DWORD *)(a1 + 496);
}

void re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doRegisterSerializeFuncs(uint64_t a1)
{
  uint64_t v11 = 6059476;
  uint64_t v12 = "BOOL";
  re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeBool<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 6104748;
  uint64_t v12 = "char";
  re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeChar<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x172E117BCLL;
  uint64_t v12 = "int8_t";
  re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI8<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2CE93A4A92;
  uint64_t v12 = "int16_t";
  re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI16<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2CE93BFE06;
  uint64_t v12 = "int32_t";
  re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI32<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2CE93EC744;
  uint64_t v12 = "int64_t";
  re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI64<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 6655224;
  uint64_t v12 = "long";
  re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI64<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x31CD534126;
  uint64_t v12 = "uint8_t";
  re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU8<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x607DD0D4E68;
  uint64_t v12 = "uint16_t";
  re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU16<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x607DD0F01DCLL;
  uint64_t v12 = "uint32_t";
  re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU32<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x607DD11CB1ALL;
  uint64_t v12 = "uint64_t";
  re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU64<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x1947BDF6CLL;
  uint64_t v12 = "size_t";
  re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU64<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 195052728;
  uint64_t v12 = "float";
  re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeFloat<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x161EEF7A2;
  uint64_t v12 = "double";
  re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeDouble<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 189247272;
  uint64_t v12 = "char*";
  re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeCString<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x2686EB529B3EE220;
  uint64_t v12 = "DynamicString";
  re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeDynamicString<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v11 = 0x458DDB01A18;
  uint64_t v12 = "StringID";
  re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeStringID<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>);
  re::StringID::destroyString((re::StringID *)&v11);
  uint64_t v2 = *(void *)(a1 + 272);
  uint64_t v11 = 0x258C98EAAF29A10ALL;
  uint64_t v12 = "CallbackSerializerAttribute";
  uint64_t v3 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v2 + 200, &v11);
  if (v3)
  {
    uint64_t v4 = *v3;
    re::StringID::destroyString((re::StringID *)&v11);
    if (v2)
    {
      uint64_t v5 = *(void *)(a1 + 272);
      v10[0] = v2;
      v10[1] = v4;
      re::TypeRegistry::attributesByAttributeType(v5, (uint64_t)v10, (uint64_t)&v11);
      if (v13)
      {
        uint64_t v6 = a1 + 288;
        unsigned int v7 = (uint64_t *)(v14 + 24);
        uint64_t v8 = 48 * v13;
        do
        {
          uint64_t v9 = *v7;
          v7 += 6;
          uint64_t v16 = re::serializeIntrospectionCallbackSerializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
          unint64_t v15 = v9 | 0xFFFFFFFF00000000;
          re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::addOrReplace<BOOL (*&)(re::Serializer<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)>(v6, &v15, &v16);
          v8 -= 48;
        }
        while (v8);
      }
      if (v11)
      {
        if (v14) {
          (*(void (**)(void))(*(void *)v11 + 40))();
        }
      }
    }
  }
  else
  {
    re::StringID::destroyString((re::StringID *)&v11);
  }
}

uint64_t re::SerializerV1<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doSerialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, re::TypeInfo *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (unsigned char *)(a1 + 336);
  uint64_t v15 = *(void *)(a1 + 488);
  if (!v15)
  {
    if (a7) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = a4;
    }
    uint64_t v17 = **((void **)a5 + 2);
    *(void *)&long long v26 = *(void *)a5;
    *((void *)&v26 + 1) = v17;
    re::internal::SharedObjectGraph::beginObject((void *)(a1 + 336), v16, &v26);
  }
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, re::TypeInfo *))(*(void *)a1 + 80))(a1, a5);
  if (v18)
  {
    uint64_t result = v18(a1, a2, a3, a4, a5, a6, a7);
    if (!v15)
    {
      if (*v14)
      {
        --*(void *)(a1 + 488);
        ++*(_DWORD *)(a1 + 496);
      }
    }
  }
  else
  {
    uint64_t v20 = re::TypeInfo::name(a5);
    re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v21, v22, v23, v24, v25, v20[1]);
    return 0;
  }
  return result;
}

uint64_t (*re::SerializerV1<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::doResolveSerializeFunc(uint64_t a1, re::TypeInfo *this))(re::Allocator **a1, char *a2, const re::TypeInfo *a3, void *a4, re::TypeInfo *this, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v4 = re::TypeInfo::name(this);
  if ((unint64_t)*v4 >> 1 == 94623636)
  {
    uint64_t v6 = (char *)v4[1];
    unsigned int v7 = re::SerializerV1<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializeCString;
    if (v6 == "char*") {
      return (uint64_t (*)(re::Allocator **, char *, const re::TypeInfo *, void *, re::TypeInfo *, uint64_t, uint64_t, uint64_t))v7;
    }
    int v8 = strcmp(v6, "char*");
    unsigned int v7 = re::SerializerV1<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializeCString;
    if (!v8) {
      return (uint64_t (*)(re::Allocator **, char *, const re::TypeInfo *, void *, re::TypeInfo *, uint64_t, uint64_t, uint64_t))v7;
    }
  }
  if (*((unsigned char *)this + 12) != 9) {
    goto LABEL_9;
  }
  unsigned int v9 = *(unsigned __int8 *)(*((void *)this + 2) + 80);
  unsigned int v7 = re::SerializerV1<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>::serializePointer;
  if (v9 >= 2)
  {
    if (v9 != 2)
    {
      re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Invalid PointerSharing type.", "!\"Unreachable code\"", "doResolveSerializeFunc", 84);
      uint64_t result = (uint64_t (*)(re::Allocator **, char *, const re::TypeInfo *, void *, re::TypeInfo *, uint64_t, uint64_t, uint64_t))_os_crash();
      __break(1u);
      return result;
    }
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) External references are not supported by the SerializerV1.", "!\"Unreachable code\"", "doResolveSerializeFunc", 82);
    _os_crash();
    __break(1u);
LABEL_9:
    if (*(void *)this == *(void *)(a1 + 272))
    {
      LODWORD(v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = **((void **)this + 2);
      HIDWORD(v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = -1;
      uint64_t v10 = re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::tryGet(a1 + 288, &v12);
      unsigned int v7 = re::serializeType<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
      if (v10) {
        return *(uint64_t (**)(re::Allocator **, char *, const re::TypeInfo *, void *, re::TypeInfo *, uint64_t, uint64_t, uint64_t))v10;
      }
    }
    else
    {
      return re::serializeType<re::EncoderRapidJSON<re::SeekableInputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>;
    }
  }
  return (uint64_t (*)(re::Allocator **, char *, const re::TypeInfo *, void *, re::TypeInfo *, uint64_t, uint64_t, uint64_t))v7;
}

uint64_t re::SerializerV1<re::EncoderBinary<re::SeekableInputStream>>::~SerializerV1(void *a1)
{
  *a1 = &unk_26E6CBAC8;
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 49));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 44));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 39));
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1 + 33);
  return re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::~Serializer((uint64_t)a1);
}

void re::SerializerV1<re::EncoderBinary<re::SeekableInputStream>>::~SerializerV1(void *a1)
{
  *a1 = &unk_26E6CBAC8;
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 49));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 44));
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 39));
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1 + 33);
  re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::~Serializer((uint64_t)a1);
  JUMPOUT(0x237DBCBD0);
}

void re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::~Serializer(uint64_t a1)
{
  re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::~Serializer(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::doSerialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, re::TypeInfo *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, re::TypeInfo *))(*(void *)a1 + 80))(a1, a5);
  if (v14)
  {
    return v14(a1, a2, a3, a4, a5, a6, a7);
  }
  else
  {
    uint64_t v16 = re::TypeInfo::name(a5);
    re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v17, v18, v19, v20, v21, v16[1]);
    return 0;
  }
}

uint64_t (*re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::doResolveSerializeFunc(uint64_t a1, uint64_t a2))(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t *a4, re::TypeInfo *this, const re::TypeInfo *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v2 = re::serializeType<re::EncoderBinary<re::SeekableInputStream>>;
  if (*(void *)a2 == *(void *)(a1 + 192))
  {
    uint64_t v3 = re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::tryGet(a1 + 208, **(void **)(a2 + 16) | 0xFFFFFFFF00000000);
    uint64_t v2 = re::serializeType<re::EncoderBinary<re::SeekableInputStream>>;
    if (v3) {
      return *(uint64_t (**)(uint64_t, const char *, const re::TypeInfo *, uint64_t *, re::TypeInfo *, const re::TypeInfo *, uint64_t, uint64_t))v3;
    }
  }
  return v2;
}

uint64_t re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::~Serializer(uint64_t a1)
{
  *(void *)a1 = &unk_26E6CBB30;
  re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::deinit((void *)a1);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(a1 + 208));
  re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::close(a1 + 24);
  re::DynamicArray<unsigned long>::deinit(a1 + 120);
  if (*(unsigned char *)(a1 + 64)) {
    re::DynamicString::deinit((re::DynamicString *)(a1 + 88));
  }
  re::StringID::destroyString((re::StringID *)(a1 + 8));
  return a1;
}

void re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::deinit(void *a1)
{
  if (a1[24])
  {
    (*(void (**)(void *))(*a1 + 40))(a1);
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)(a1 + 26));
    a1[24] = 0;
  }
}

uint64_t re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::close(uint64_t result)
{
  if (*(void *)result)
  {
    uint64_t v1 = result;
    if (!*(unsigned char *)(result + 40))
    {
      char v9 = 69;
      re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned char>(result, "End-of-file", 0, &v9, (uint64_t)"uint8", 0);
      if (v9 != 69)
      {
        re::DynamicString::format((re::DynamicString *)"Failed to read end-of-file marker.", (re::DynamicString *)&v2);
        *(void *)&long long v5 = 400;
        *((void *)&v5 + 1) = re::FoundationErrorCategory(void)::instance;
        uint64_t v6 = v2;
        uint64_t v8 = v4;
        long long v7 = v3;
        re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(v1, &v5);
        if (v6)
        {
          if (v7) {
            (*(void (**)(void))(*(void *)v6 + 40))();
          }
        }
      }
      if (!*(unsigned char *)(v1 + 40)) {
        re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::popState((_anonymous_namespace_ *)v1, 0);
      }
    }
    uint64_t result = re::DynamicArray<unsigned long>::deinit(v1 + 96);
    if (*(int *)(v1 + 16) >= 1)
    {
      uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 24))();
      *(void *)(v1 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
      *(_DWORD *)(v1 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
    }
    *(void *)uint64_t v1 = 0;
    *(void *)(v1 + 24) = 0;
    *(void *)(v1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  }
  return result;
}

_anonymous_namespace_ *re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::popState(_anonymous_namespace_ *result, int a2)
{
  uint64_t v3 = (uint64_t)result;
  uint64_t v4 = *((void *)result + 14);
  if (!v4)
  {
    re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(v3, (uint64_t)&v6);
    uint64_t result = v6;
    if (v6 && (v7 & 1) != 0) {
      uint64_t result = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v6 + 40))();
    }
    uint64_t v4 = *(void *)(v3 + 112);
  }
  uint64_t v5 = v4 - 1;
  if (*(unsigned __int8 *)(*(void *)(v3 + 128) + 48 * v5) != a2)
  {
    re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(v3, (uint64_t)&v6);
    uint64_t result = v6;
    if (v6 && (v7 & 1) != 0) {
      uint64_t result = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v6 + 40))();
    }
    uint64_t v5 = *(void *)(v3 + 112) - 1;
  }
  *(void *)(v3 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v5;
  ++*(_DWORD *)(v3 + 120);
  return result;
}

uint64_t re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned char>(uint64_t a1, const char *a2, uint64_t a3, char *a4, uint64_t a5, char a6)
{
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  if (a6) {
    a4 = 0;
  }
  if ((re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((void *)a1, a4, 1uLL) & 1) == 0)
  {
    re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, a5);
    return 0;
  }
  if ((a6 & 2) == 0)
  {
    uint64_t v11 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
    ++*(void *)(v11 - 16);
  }
  return 1;
}

uint64_t re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::setErrorWithType(_anonymous_namespace_ *a1, const char *a2, uint64_t a3)
{
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels(a1, a2, (re::DynamicString *)&v7);
  if (v8) {
    uint64_t v5 = *(unsigned char **)&v9[7];
  }
  else {
    uint64_t v5 = v9;
  }
  re::DynamicString::format((re::DynamicString *)"Failed to %s \"%s\". Reason: Error %s type %s.", (re::DynamicString *)v10, "deserialize", v5, "reading", a3);
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError((uint64_t)a1, (uint64_t)v10);
  if (*(void *)&v10[0])
  {
    if (BYTE8(v10[0])) {
      (*(void (**)(void))(**(void **)&v10[0] + 40))();
    }
    memset(v10, 0, sizeof(v10));
  }
  uint64_t result = v7;
  if (v7)
  {
    if (v8) {
      return (*(uint64_t (**)(void))(*(void *)v7 + 40))();
    }
  }
  return result;
}

uint64_t re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::setError(uint64_t a1, const char *a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  re::DynamicString::setCapacity(&v23, 0);
  uint64_t v22 = &a9;
  re::DynamicString::vassignf((re::DynamicString *)&v23, a3, &a9);
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels((_anonymous_namespace_ *)(a1 + 24), a2, (re::DynamicString *)&v15);
  if (v16) {
    uint64_t v12 = *(unsigned char **)&v17[7];
  }
  else {
    uint64_t v12 = v17;
  }
  if (v24) {
    uint64_t v13 = v25;
  }
  else {
    uint64_t v13 = (char *)&v24 + 1;
  }
  re::DynamicString::format((re::DynamicString *)"Failed to %s \"%s\". Reason: %s", (re::DynamicString *)&v18, "deserialize", v12, v13);
  *(void *)&v21[0] = 400;
  *((void *)&v21[0] + 1) = re::FoundationErrorCategory(void)::instance;
  *(void *)&v21[1] = v18;
  *((void *)&v21[2] + 1) = v20;
  *(long long *)((char *)&v21[1] + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v19;
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(a1 + 24, v21);
  if (*(void *)&v21[1])
  {
    if (BYTE8(v21[1])) {
      (*(void (**)(void))(**(void **)&v21[1] + 40))();
    }
    memset(&v21[1], 0, 32);
  }
  if (v15 && (v16 & 1) != 0) {
    (*(void (**)(void))(*(void *)v15 + 40))();
  }
  uint64_t result = (uint64_t)v23;
  if (v23)
  {
    if (v24) {
      return (*(uint64_t (**)(void))(*v23 + 40))();
    }
  }
  return result;
}

uint64_t re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::tryGet(uint64_t a1, unint64_t a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (a2 % *(unsigned int *)(a1 + 24)));
  if (v2 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (*(void *)(v4 + 24 * v2 + 4) != a2)
  {
    while (1)
    {
      LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = *(_DWORD *)(v4 + 24 * v2) & 0x7FFFFFFF;
      if (v2 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v4 + 24 * v2 + 4) == a2) {
        return v4 + 24 * v2 + 16;
      }
    }
    return 0;
  }
  return v4 + 24 * v2 + 16;
}

uint64_t re::serializeType<re::EncoderBinary<re::SeekableInputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t *a4, re::TypeInfo *this, const re::TypeInfo *a6, uint64_t a7, uint64_t a8)
{
  if (this == a6) {
    goto LABEL_18;
  }
  if (*(void *)this == *(void *)a6)
  {
    uint64_t v15 = **((void **)this + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_18;
      }
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, a3))
  {
    goto LABEL_18;
  }
  if (*((unsigned __int8 *)this + 12) != *((unsigned __int8 *)a6 + 12)) {
    goto LABEL_213;
  }
  uint64_t v19 = re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)this + 96, **((void **)this + 2));
  if (v19) {
    int v20 = *(_DWORD *)(v19 + 16);
  }
  else {
    int v20 = -1;
  }
  uint64_t v21 = re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)a6 + 96, **((void **)a6 + 2));
  if (v21) {
    int v22 = *(_DWORD *)(v21 + 16);
  }
  else {
    int v22 = -1;
  }
  if (v20 != v22)
  {
    uint64_t v26 = re::TypeInfo::name(this);
    uint64_t v27 = re::TypeInfo::name(a6);
    if (re::StringID::operator==(v26, v27))
    {
      uint64_t v28 = re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)a6 + 96, **((void **)a6 + 2));
      if (v28) {
        int v29 = *(_DWORD *)(v28 + 16);
      }
      else {
        int v29 = -1;
      }
      re::TypeInfo::atVersion(this, v29, (unsigned __int8 *)&v159);
      if ((_BYTE)v159)
      {
        if (a7) {
          Instance = 0;
        }
        else {
          Instance = re::TypeInfo::createInstance((re::TypeInfo *)v160, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 184));
        }
        if (!*(unsigned char *)(a1 + 64))
        {
          (*(void (**)(uint64_t, const char *, const re::TypeInfo *, void **, unsigned char *, const re::TypeInfo *, uint64_t))(*(void *)a1 + 72))(a1, a2, a3, Instance, v160, a6, a7);
          if (!*(unsigned char *)(a1 + 64))
          {
            if (a7) {
              return 1;
            }
            re::TypeInfo::TypeInfo((uint64_t)v155, (uint64_t)v160);
            re::internal::upgradeObject(Instance, v155, a4, (uint64_t **)this, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 184), &v156);
            if ((_BYTE)v156) {
              return 1;
            }
            if (v158) {
              LOBYTE(v153) = BYTE8(v158);
            }
            else {
              uint64_t v153 = (char *)&v158 + 1;
            }
            re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::setError(a1, a2, "%s", v120, v121, v122, v123, v124, (char)v153);
            if (!(_BYTE)v156 && *((void *)&v157 + 1) && (v158 & 1) != 0) {
              (*(void (**)(void))(**((void **)&v157 + 1) + 40))();
            }
            return 0;
          }
        }
        if (!Instance) {
          return 0;
        }
        uint64_t v98 = *(re::Allocator **)(a1 + 48);
        __int16 v105 = *(void **)(a1 + 184);
        uint64_t v106 = (unint64_t *)v160;
        __int16 v107 = Instance;
LABEL_165:
        re::TypeInfo::releaseInstance((re::TypeInfo *)v106, v107, v98, v105);
        return 0;
      }
      uint64_t v50 = re::TypeInfo::name(a6)[1];
      re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)a6 + 96, **((void **)a6 + 2));
      LOBYTE(v154) = v50;
      long long v30 = "Unknown serialized type \"%s\" version %u. No matching runtime type found.";
    }
    else
    {
      uint64_t v47 = re::TypeInfo::name(a6)[1];
      re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)a6 + 96, **((void **)a6 + 2));
      re::TypeInfo::name(this);
      re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)this + 96, **((void **)this + 2));
      LOBYTE(v154) = v47;
      long long v30 = "Type name changed: Serialized type \"%s\" version %u, runtime type \"%s\" version %u.";
    }
LABEL_196:
    uint64_t v113 = a1;
    id v114 = a2;
LABEL_197:
    re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::setError(v113, v114, v30, (uint64_t)a4, (uint64_t)this, (uint64_t)a6, a7, a8, v154);
    return 0;
  }
LABEL_18:
  switch(*((unsigned char *)this + 12))
  {
    case 1:
      if (this == a6) {
        goto LABEL_22;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v51 = **((void **)this + 2);
        uint64_t v52 = **((void **)a6 + 2);
        if ((unsigned __int16)v51 == (unsigned __int16)v52)
        {
          BOOL v18 = WORD1(v51) == WORD1(v52);
          uint64_t v53 = (v52 ^ v51) & 0xFFFFFF00000000;
          if (v18 && v53 == 0) {
            goto LABEL_22;
          }
        }
LABEL_213:
        re::internal::setTypeMismatchError<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, this, a6);
        return 0;
      }
      if (!re::areSameTranslatedVersion(this, a6, a3)) {
        goto LABEL_213;
      }
LABEL_22:
      uint64_t v23 = re::TypeInfo::name(this);
      unint64_t v24 = (unint64_t)*v23 >> 1;
      if (v24 > 0xCA3DEFB5)
      {
        if ((unint64_t)*v23 >> 1 > 0x18E6A9A092)
        {
          if ((unint64_t)*v23 >> 1 <= 0x303EE8780EDLL)
          {
            if (v24 == 0x18E6A9A093)
            {
              return re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned char>(a1 + 24, a2, (uint64_t)a3, (char *)a4, (uint64_t)"uint8", a7);
            }
            else
            {
              if (v24 != 0x303EE86A734) {
                goto LABEL_265;
              }
              return re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned short>(a1 + 24, a2, (char *)a4, a7);
            }
          }
          if (v24 == 0x303EE8780EELL)
          {
            uint64_t v128 = a1 + 24;
            uint64_t v129 = "uint32";
            uint64_t v130 = a2;
            uint64_t v131 = (uint64_t)a3;
            uint64_t v132 = (char *)a4;
            char v133 = a7;
            return re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned int>(v128, v130, v131, v132, (uint64_t)v129, v133);
          }
          if (v24 != 0x303EE88E58DLL) {
            goto LABEL_265;
          }
        }
        else
        {
          if ((unint64_t)*v23 >> 1 > 0x16749DFF02)
          {
            if (v24 == 0x16749DFF03)
            {
LABEL_234:
              return re::EncoderBinary<re::SeekableInputStream>::serializeValue<int>(a1 + 24, a2, (char *)a4, a7);
            }
            uint64_t v119 = 0x16749F63A2;
LABEL_220:
            if (v24 == v119)
            {
              return re::EncoderBinary<re::SeekableInputStream>::serializeValue<long long>(a1 + 24, a2, (char *)a4, a7);
            }
LABEL_265:
            uint64_t v154 = re::TypeInfo::name(this)[1];
            long long v30 = "Unsupported basic type \"%s\".";
            goto LABEL_196;
          }
          if (v24 != 3393056694)
          {
            uint64_t v48 = 0x16749D2549;
LABEL_186:
            if (v24 != v48) {
              goto LABEL_265;
            }
            return re::EncoderBinary<re::SeekableInputStream>::serializeValue<short>(a1 + 24, a2, (char *)a4, a7);
          }
        }
        return re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned long long>(a1 + 24, a2, (char *)a4, a7);
      }
      if ((unint64_t)*v23 >> 1 > 0x5D0225B)
      {
        if ((unint64_t)*v23 >> 1 > 0xB0F77BD0)
        {
          if (v24 == 2969009105)
          {
            return re::EncoderBinary<re::SeekableInputStream>::serializeValue<double>(a1 + 24, a2, (uint64_t)a3, (char *)a4, (uint64_t)"double", a7);
          }
          else
          {
            if (v24 != 3111160798) {
              goto LABEL_265;
            }
            return re::EncoderBinary<re::SeekableInputStream>::serializeValue<signed char>(a1 + 24, a2, (char *)a4, a7);
          }
        }
        if (v24 != 97526364)
        {
          uint64_t v48 = 109413500;
          goto LABEL_186;
        }
        uint64_t v128 = a1 + 24;
        uint64_t v129 = "float";
        uint64_t v130 = a2;
        uint64_t v131 = (uint64_t)a3;
        uint64_t v132 = (char *)a4;
        char v133 = a7;
        return re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned int>(v128, v130, v131, v132, (uint64_t)v129, v133);
      }
      if ((unint64_t)*v23 >> 1 <= 0x2E9355)
      {
        if (v24 != 104431)
        {
          if (v24 == 3029738)
          {
            return re::EncoderBinary<re::SeekableInputStream>::serializeValue<BOOL>(a1 + 24, a2, (char *)a4, a7);
          }
          goto LABEL_265;
        }
        goto LABEL_234;
      }
      if (v24 != 3052374)
      {
        uint64_t v119 = 3327612;
        goto LABEL_220;
      }
      return re::EncoderBinary<re::SeekableInputStream>::serializeValue<char>(a1 + 24, a2, (char *)a4, a7);
    case 2:
      return re::serializeEnum<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, a3, a4, (uint64_t)this, (uint64_t)a6, a7);
    case 3:
      if (this == a6) {
        goto LABEL_100;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v55 = **((void **)this + 2);
        uint64_t v56 = **((void **)a6 + 2);
        if ((unsigned __int16)v55 == (unsigned __int16)v56
          && WORD1(v55) == WORD1(v56)
          && ((v56 ^ v55) & 0xFFFFFF00000000) == 0)
        {
          goto LABEL_100;
        }
        int v31 = 3;
      }
      else
      {
        if (re::areSameTranslatedVersion(this, a6, a3)) {
          goto LABEL_100;
        }
        int v31 = *((unsigned __int8 *)this + 12);
      }
      if (v31 != *((unsigned __int8 *)a6 + 12)) {
        goto LABEL_213;
      }
LABEL_100:
      if (a7)
      {
        LOBYTE(Tag) = 0;
        re::EncoderBinary<re::SeekableInputStream>::beginOptional(a1 + 24, a2, (char *)&Tag);
        if ((_BYTE)Tag)
        {
          long long v57 = *(re::internal **)(a1 + 192);
          re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v156);
          re::TypeInfo::TypeInfo((uint64_t)&v159, (uint64_t)&v156 + 8);
          re::internal::translateType(v57, (const re::TypeRegistry *)&v159, (uint64_t)&v156);
          if (!*(unsigned char *)(a1 + 64)) {
            (*(void (**)(uint64_t, const char *, void, void, long long *, long long *, uint64_t))(*(void *)a1 + 72))(a1, a2, 0, 0, &v156, &v156, 1);
          }
        }
        long long v58 = (_anonymous_namespace_ *)(a1 + 24);
      }
      else
      {
        re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), &v156);
        re::TypeInfo::TypeInfo((uint64_t)&v159, (uint64_t)&v156 + 8);
        re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v156);
        re::TypeInfo::TypeInfo((uint64_t)&Tag, (uint64_t)&v156 + 8);
        re::TypeInfo::TypeInfo((uint64_t)&v156, (uint64_t)this);
        v169[0] = (*(uint64_t (**)(uint64_t *))(v157 + 80))(a4) != 0;
        double v59 = re::EncoderBinary<re::SeekableInputStream>::beginOptional(a1 + 24, a2, v169);
        if (v169[0])
        {
          uint64_t v60 = re::TypeInfo::createInstance((re::TypeInfo *)&v159, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 184));
          (*(void (**)(uint64_t *, void **))(v157 + 88))(a4, v60);
          re::TypeInfo::releaseInstance((re::TypeInfo *)&v159, v60, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 184));
        }
        else
        {
          (*(void (**)(uint64_t *, void, double))(v157 + 88))(a4, 0, v59);
        }
        if (v169[0])
        {
          uint64_t v115 = (*(uint64_t (**)(uint64_t *))(v157 + 80))(a4);
          if (!*(unsigned char *)(a1 + 64)) {
            (*(void (**)(uint64_t, const char *, void, uint64_t, unint64_t *, const re::TypeInfo **, void))(*(void *)a1 + 72))(a1, a2, 0, v115, &v159, &Tag, 0);
          }
        }
        long long v58 = (_anonymous_namespace_ *)(a1 + 24);
      }
      re::EncoderBinary<re::SeekableInputStream>::endOptional(v58);
      return *(unsigned char *)(a1 + 64) == 0;
    case 4:
      if (this == a6) {
        goto LABEL_44;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v61 = **((void **)this + 2);
        uint64_t v62 = **((void **)a6 + 2);
        if ((unsigned __int16)v61 == (unsigned __int16)v62)
        {
          BOOL v18 = WORD1(v61) == WORD1(v62);
          uint64_t v63 = (v62 ^ v61) & 0xFFFFFF00000000;
          if (v18 && v63 == 0)
          {
LABEL_44:
            char v32 = 1;
            if (a7) {
              goto LABEL_45;
            }
LABEL_116:
            re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), &v156);
            re::TypeInfo::TypeInfo((uint64_t)&Tag, (uint64_t)&v156 + 8);
            re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v156);
            re::TypeInfo::TypeInfo((uint64_t)v169, (uint64_t)&v156 + 8);
            re::TypeInfo::TypeInfo((uint64_t)v167, (uint64_t)this);
            uint64_t v68 = (*(uint64_t (**)(uint64_t, const re::TypeInfo **))(*(void *)a1 + 80))(a1, &Tag);
            if (!v68) {
              goto LABEL_174;
            }
            long long v69 = (void (*)(uint64_t, void, void, uint64_t, const re::TypeInfo **, char *, void))v68;
            uint64_t v70 = re::ArrayAccessor::size((re::ArrayAccessor *)v167, (char *)a4);
            unint64_t v164 = v70;
            int v71 = *(_DWORD *)(*((void *)this + 2) + 84) & 0xFFFFFF;
            if (v71) {
              int v72 = 8;
            }
            else {
              int v72 = 4;
            }
            uint64_t result = re::EncoderBinary<re::SeekableInputStream>::beginArray(a1 + 24, a2, (uint64_t)a3, (char *)&v164, v72);
            if (!result) {
              return result;
            }
            long long v73 = (const re::TypeInfo *)v164;
            if (v70 != v164)
            {
              if ((*(_DWORD *)(v168 + 84) & 0xFFFFFF) == 0)
              {
                LOBYTE(v154) = v70;
                long long v30 = "Invalid array size. Expected size = %zu, actual size = %zu";
                goto LABEL_176;
              }
              re::TypeRegistry::typeInfo(v167[0], *(void *)(v168 + 72), &v156);
              re::TypeInfo::TypeInfo((uint64_t)&v159, (uint64_t)&v156 + 8);
              unsigned int v74 = *(_DWORD *)(v162 + 8);
              if (!is_mul_ok(v74, (unint64_t)v73)) {
                goto LABEL_173;
              }
              re::ArrayAccessor::reset((re::ArrayAccessor *)v167, (void **)a4, *(re::Allocator **)(a1 + 48), v73);
              uint64_t v70 = v164;
            }
            if (v71) {
              BOOL v146 = v70 == 0;
            }
            else {
              BOOL v146 = 1;
            }
            char v147 = v146;
            if (!v146)
            {
              uint64_t v148 = *a4;
              v163[0] = 0;
              v163[1] = 0xFFFFFFFFLL;
              (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 16))(a1, v148, v163);
              uint64_t v70 = v164;
            }
            if (v171 == 1) {
              char v149 = v32;
            }
            else {
              char v149 = 0;
            }
            if (v149)
            {
              if (v70)
              {
                uint64_t v150 = (char *)re::ArrayAccessor::elementAt((re::ArrayAccessor *)v167, (char *)a4, 0);
                re::EncoderBinary<re::SeekableInputStream>::serializeArray(a1 + 24, v150, *(unsigned int *)(v172 + 8), v164, 0);
              }
            }
            else if (v70)
            {
              unint64_t v151 = 0;
              do
              {
                uint64_t v152 = re::ArrayAccessor::elementAt((re::ArrayAccessor *)v167, (char *)a4, v151);
                v69(a1, 0, 0, v152, &Tag, v169, 0);
                ++v151;
              }
              while (v151 < v164);
            }
            if ((v147 & 1) == 0) {
              (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
            }
            uint64_t v127 = (_anonymous_namespace_ *)(a1 + 24);
LABEL_311:
            re::EncoderBinary<re::SeekableInputStream>::endArray(v127);
            return *(unsigned char *)(a1 + 64) == 0;
          }
        }
      }
      else if (re::areSameTranslatedVersion(this, a6, a3))
      {
        goto LABEL_44;
      }
      if (*((unsigned char *)a6 + 12) != 4) {
        goto LABEL_213;
      }
      uint64_t v65 = *((void *)this + 2);
      uint64_t v66 = (void *)*((void *)a6 + 2);
      int v67 = *((_DWORD *)v66 + 21) & 0xFFFFFF;
      if ((*(_DWORD *)(v65 + 84) & 0xFFFFFF) != 0)
      {
        if (!v67) {
          goto LABEL_213;
        }
      }
      else if (v67 || *(_DWORD *)(v65 + 88) != *((_DWORD *)v66 + 22))
      {
        goto LABEL_213;
      }
      char v32 = 0;
      if (a7)
      {
LABEL_45:
        uint64_t v33 = *(re::internal **)(a1 + 192);
        re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v156);
        re::TypeInfo::TypeInfo((uint64_t)&Tag, (uint64_t)&v156 + 8);
        re::internal::translateType(v33, (const re::TypeRegistry *)&Tag, (uint64_t)&v159);
        uint64_t v34 = (*(uint64_t (**)(uint64_t, unint64_t *))(*(void *)a1 + 80))(a1, &v159);
        if (!v34) {
          goto LABEL_152;
        }
        uint64_t v35 = (void (*)(uint64_t, void, void, void, unint64_t *, unint64_t *, uint64_t))v34;
        char v36 = (void *)*((void *)a6 + 2);
        int v37 = *((_DWORD *)v36 + 21) & 0xFFFFFF;
        if (v37)
        {
          uint64_t v38 = 0;
          int v39 = 8;
        }
        else
        {
          uint64_t v38 = *((int *)v36 + 22);
          int v39 = 4;
        }
        *(void *)&long long v156 = v38;
        uint64_t v44 = (_anonymous_namespace_ *)(a1 + 24);
        uint64_t result = re::EncoderBinary<re::SeekableInputStream>::beginArray(a1 + 24, a2, (uint64_t)a3, (char *)&v156, v39);
        if (result)
        {
          uint64_t v116 = v156;
          if (v37) {
            BOOL v117 = (void)v156 == 0;
          }
          else {
            BOOL v117 = 1;
          }
          char v118 = v117;
          if (!v117)
          {
            v165[0] = 0;
            v165[1] = 0xFFFFFFFFLL;
            (*(void (**)(uint64_t, void, uint64_t *))(*(void *)a1 + 16))(a1, 0, v165);
            uint64_t v116 = v156;
          }
          if (v161 == 1)
          {
            if (v116) {
              re::EncoderBinary<re::SeekableInputStream>::serializeArray(a1 + 24, 0, *(unsigned int *)(v162 + 8), v116, 1);
            }
          }
          else if (v116)
          {
            unint64_t v126 = 0;
            do
            {
              v35(a1, 0, 0, 0, &v159, &v159, 1);
              ++v126;
            }
            while (v126 < (unint64_t)v156);
          }
          if ((v118 & 1) == 0) {
            (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
          }
          goto LABEL_249;
        }
        return result;
      }
      goto LABEL_116;
    case 5:
      if (this == a6) {
        goto LABEL_51;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v75 = **((void **)this + 2);
        uint64_t v76 = **((void **)a6 + 2);
        if ((unsigned __int16)v75 == (unsigned __int16)v76
          && WORD1(v75) == WORD1(v76)
          && ((v76 ^ v75) & 0xFFFFFF00000000) == 0)
        {
LABEL_51:
          char v40 = 1;
          if (a7)
          {
LABEL_52:
            char v41 = *(re::internal **)(a1 + 192);
            re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v156);
            re::TypeInfo::TypeInfo((uint64_t)&Tag, (uint64_t)&v156 + 8);
            re::internal::translateType(v41, (const re::TypeRegistry *)&Tag, (uint64_t)&v159);
            uint64_t v42 = (*(uint64_t (**)(uint64_t, unint64_t *))(*(void *)a1 + 80))(a1, &v159);
            if (!v42) {
              goto LABEL_152;
            }
            uint64_t v43 = (void (*)(uint64_t, void, void, void, unint64_t *, unint64_t *, uint64_t))v42;
            *(void *)&long long v156 = 0;
            uint64_t v44 = (_anonymous_namespace_ *)(a1 + 24);
            BOOL v45 = re::EncoderBinary<re::SeekableInputStream>::beginArray(a1 + 24, a2, (uint64_t)a3, (char *)&v156, 0);
            uint64_t result = 0;
            if (!v45) {
              return result;
            }
            if (v161 == 1)
            {
              if ((void)v156) {
                re::EncoderBinary<re::SeekableInputStream>::serializeArray(a1 + 24, 0, *(unsigned int *)(v162 + 8), v156, 1);
              }
            }
            else if ((void)v156)
            {
              unint64_t v125 = 0;
              do
              {
                v43(a1, 0, 0, 0, &v159, &v159, 1);
                ++v125;
              }
              while (v125 < (unint64_t)v156);
            }
LABEL_249:
            uint64_t v127 = v44;
            goto LABEL_311;
          }
LABEL_169:
          re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), &v156);
          re::TypeInfo::TypeInfo((uint64_t)&Tag, (uint64_t)&v156 + 8);
          re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v156);
          re::TypeInfo::TypeInfo((uint64_t)v169, (uint64_t)&v156 + 8);
          re::TypeInfo::TypeInfo((uint64_t)v167, (uint64_t)this);
          uint64_t v108 = (*(uint64_t (**)(uint64_t, const re::TypeInfo **))(*(void *)a1 + 80))(a1, &Tag);
          if (!v108) {
            goto LABEL_174;
          }
          uint64_t v109 = (void (*)(uint64_t, void, void, uint64_t, const re::TypeInfo **, char *, void))v108;
          uint64_t v110 = (*(uint64_t (**)(uint64_t *))(v168 + 80))(a4);
          v165[0] = v110;
          BOOL v111 = re::EncoderBinary<re::SeekableInputStream>::beginArray(a1 + 24, a2, (uint64_t)a3, (char *)v165, 0);
          uint64_t result = 0;
          if (!v111) {
            return result;
          }
          unint64_t v112 = v165[0];
          if (v110 != v165[0])
          {
            re::TypeRegistry::typeInfo(v167[0], *(void *)(v168 + 72), &v156);
            re::TypeInfo::TypeInfo((uint64_t)&v159, (uint64_t)&v156 + 8);
            unsigned int v74 = *(_DWORD *)(v162 + 8);
            if (!is_mul_ok(v74, v112))
            {
LABEL_173:
              LOBYTE(v154) = v74;
              long long v30 = "Size overflow during deserialization. Element size = %zu, count = %zu";
              goto LABEL_176;
            }
            uint64_t v134 = *(void *)(a1 + 48);
            id v135 = *(void (**)(uint64_t *, long long *, uint64_t, unint64_t))(v168 + 88);
            re::TypeInfo::TypeInfo((uint64_t)&v156, (uint64_t)v167);
            v135(a4, &v156, v134, v112);
          }
          uint64_t v136 = *(uint64_t (**)(uint64_t *, void))(v168 + 96);
          if (v136)
          {
            if (*((unsigned char *)this + 12) == 5) {
              char v137 = v40;
            }
            else {
              char v137 = 0;
            }
            if (v137)
            {
              uint64_t v138 = v165[0];
              if ((*(unsigned char *)(*((void *)this + 2) + 48) & 8) != 0 && v171 == 1)
              {
                if (v165[0])
                {
                  uint64_t v139 = (char *)v136(a4, 0);
                  re::EncoderBinary<re::SeekableInputStream>::serializeArray(a1 + 24, v139, *(unsigned int *)(v172 + 8), v165[0], 0);
                }
                goto LABEL_287;
              }
            }
            else
            {
              uint64_t v138 = v165[0];
            }
            if (v138)
            {
              unint64_t v144 = 0;
              do
              {
                uint64_t v145 = (*(uint64_t (**)(uint64_t *, unint64_t))(v168 + 96))(a4, v144);
                v109(a1, 0, 0, v145, &Tag, v169, 0);
                ++v144;
              }
              while (v144 < v165[0]);
            }
            goto LABEL_287;
          }
          unint64_t v140 = *(uint64_t (**)(uint64_t *, void))(v168 + 104);
          if (!v140 || !*(void *)(v168 + 112) || !*(void *)(v168 + 120))
          {
            re::TypeInfo::TypeInfo((uint64_t)&v156, (uint64_t)v167);
            uint64_t v154 = re::TypeInfo::name((re::TypeInfo *)&v156)[1];
            long long v30 = "List type \"%s\" does not provide an indexer or iterator.";
            goto LABEL_196;
          }
          uint64_t v141 = v140(a4, *(void *)(a1 + 56));
          uint64_t v142 = (*(uint64_t (**)(void))(v168 + 112))();
          if (v142)
          {
            uint64_t v143 = v142;
            do
            {
              v109(a1, 0, 0, v143, &Tag, v169, 0);
              uint64_t v143 = (*(uint64_t (**)(uint64_t))(v168 + 112))(v141);
            }
            while (v143);
          }
          (*(void (**)(uint64_t, void))(v168 + 120))(v141, *(void *)(a1 + 56));
LABEL_287:
          uint64_t v127 = (_anonymous_namespace_ *)(a1 + 24);
          goto LABEL_311;
        }
        int v77 = 5;
      }
      else
      {
        if (re::areSameTranslatedVersion(this, a6, a3)) {
          goto LABEL_51;
        }
        int v77 = *((unsigned __int8 *)this + 12);
      }
      if (v77 != *((unsigned __int8 *)a6 + 12)) {
        goto LABEL_213;
      }
      char v40 = 0;
      if (a7) {
        goto LABEL_52;
      }
      goto LABEL_169;
    case 6:
      if (this == a6) {
        goto LABEL_134;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v78 = **((void **)this + 2);
        uint64_t v79 = **((void **)a6 + 2);
        if ((unsigned __int16)v78 == (unsigned __int16)v79
          && WORD1(v78) == WORD1(v79)
          && ((v79 ^ v78) & 0xFFFFFF00000000) == 0)
        {
          goto LABEL_134;
        }
        int v46 = 6;
      }
      else
      {
        if (re::areSameTranslatedVersion(this, a6, a3)) {
          goto LABEL_134;
        }
        int v46 = *((unsigned __int8 *)this + 12);
      }
      if (v46 != *((unsigned __int8 *)a6 + 12)) {
        goto LABEL_213;
      }
LABEL_134:
      if (a7)
      {
        uint64_t v80 = *(re::internal **)(a1 + 192);
        re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v156);
        re::TypeInfo::TypeInfo((uint64_t)&Tag, (uint64_t)&v156 + 8);
        re::internal::translateType(v80, (const re::TypeRegistry *)&Tag, (uint64_t)&v159);
        uint64_t v81 = *(re::internal **)(a1 + 192);
        re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v156);
        re::TypeInfo::TypeInfo((uint64_t)v169, (uint64_t)&v156 + 8);
        re::internal::translateType(v81, (const re::TypeRegistry *)v169, (uint64_t)&Tag);
        uint64_t v82 = (*(uint64_t (**)(uint64_t, unint64_t *))(*(void *)a1 + 80))(a1, &v159);
        if (v82)
        {
          uint64_t v83 = (void (*)(uint64_t, const char *, void, void, unint64_t *, unint64_t *, uint64_t, double))v82;
          uint64_t v84 = (*(uint64_t (**)(uint64_t, const re::TypeInfo **))(*(void *)a1 + 80))(a1, &Tag);
          if (v84)
          {
            uint64_t v85 = (void (*)(uint64_t, const char *, void, void, const re::TypeInfo **, const re::TypeInfo **, uint64_t))v84;
            *(void *)&long long v156 = 0;
            char v86 = (_anonymous_namespace_ *)(a1 + 24);
            uint64_t result = re::EncoderBinary<re::SeekableInputStream>::beginDictionary(a1 + 24, a2, (char *)&v156);
            if (!result) {
              return result;
            }
            if ((void)v156)
            {
              unint64_t v87 = 0;
              do
              {
                double v88 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginDictionaryEntry(a1 + 24, 1);
                v83(a1, "key", 0, 0, &v159, &v159, 1, v88);
                v85(a1, "value", 0, 0, &Tag, &Tag, 1);
                re::EncoderBinary<re::SeekableInputStream>::endDictionaryEntry((_anonymous_namespace_ *)(a1 + 24));
                ++v87;
              }
              while (v87 < (unint64_t)v156);
            }
            goto LABEL_151;
          }
          goto LABEL_174;
        }
LABEL_152:
        uint64_t v100 = &v159;
        goto LABEL_175;
      }
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 72), &v156);
      re::TypeInfo::TypeInfo((uint64_t)&v159, (uint64_t)&v156 + 8);
      re::TypeRegistry::typeInfo(*(void **)this, *(void *)(*((void *)this + 2) + 80), &v156);
      re::TypeInfo::TypeInfo((uint64_t)&Tag, (uint64_t)&v156 + 8);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v156);
      re::TypeInfo::TypeInfo((uint64_t)v169, (uint64_t)&v156 + 8);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v156);
      re::TypeInfo::TypeInfo((uint64_t)v167, (uint64_t)&v156 + 8);
      re::TypeInfo::TypeInfo((uint64_t)v165, (uint64_t)this);
      uint64_t v89 = (*(uint64_t (**)(uint64_t, unint64_t *))(*(void *)a1 + 80))(a1, &v159);
      if (!v89) {
        goto LABEL_152;
      }
      uint64_t v90 = (void (*)(uint64_t, const char *, void, void **, unint64_t *, char *, void, double))v89;
      uint64_t v91 = (*(uint64_t (**)(uint64_t, const re::TypeInfo **))(*(void *)a1 + 80))(a1, &Tag);
      if (!v91)
      {
LABEL_174:
        uint64_t v100 = (unint64_t *)&Tag;
LABEL_175:
        uint64_t v154 = re::TypeInfo::name((re::TypeInfo *)v100)[1];
        long long v30 = "Failed to resolve serialize function for type \"%s\"";
LABEL_176:
        uint64_t v113 = a1;
        id v114 = 0;
        goto LABEL_197;
      }
      unint64_t v92 = (void (*)(uint64_t, const char *, void, uint64_t, const re::TypeInfo **, void **, void))v91;
      v163[0] = (*(uint64_t (**)(uint64_t *))(v166 + 88))(a4);
      char v86 = (_anonymous_namespace_ *)(a1 + 24);
      uint64_t result = re::EncoderBinary<re::SeekableInputStream>::beginDictionary(a1 + 24, a2, (char *)v163);
      if (!result) {
        return result;
      }
      uint64_t v93 = *(void *)(a1 + 48);
      BOOL v94 = *(void (**)(uint64_t *, long long *, uint64_t))(v166 + 96);
      re::TypeInfo::TypeInfo((uint64_t)&v156, (uint64_t)v165);
      v94(a4, &v156, v93);
      if (!v163[0]) {
        goto LABEL_151;
      }
      BOOL v95 = re::TypeInfo::createInstance((re::TypeInfo *)&v159, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 184));
      if (!v163[0])
      {
LABEL_150:
        re::TypeInfo::releaseInstance((re::TypeInfo *)&v159, v95, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 184));
LABEL_151:
        re::EncoderBinary<re::SeekableInputStream>::endDictionary(v86);
        return *(unsigned char *)(a1 + 64) == 0;
      }
      uint64_t v96 = 0;
      while (1)
      {
        double v97 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginDictionaryEntry(a1 + 24, 0);
        v90(a1, "key", 0, v95, &v159, v169, 0, v97);
        uint64_t v98 = *(re::Allocator **)(a1 + 48);
        if (*(unsigned char *)(a1 + 64)) {
          break;
        }
        uint64_t v99 = (*(uint64_t (**)(uint64_t *, uint64_t *, re::Allocator *, void **))(v166 + 104))(a4, v165, v98, v95);
        v92(a1, "value", 0, v99, &Tag, v167, 0);
        re::EncoderBinary<re::SeekableInputStream>::endDictionaryEntry((_anonymous_namespace_ *)(a1 + 24));
        if ((unint64_t)++v96 >= v163[0]) {
          goto LABEL_150;
        }
      }
      __int16 v105 = *(void **)(a1 + 184);
      uint64_t v106 = &v159;
      __int16 v107 = v95;
      break;
    case 7:
      if (this == a6) {
        goto LABEL_64;
      }
      if (*(void *)this == *(void *)a6)
      {
        uint64_t v101 = **((void **)this + 2);
        uint64_t v102 = **((void **)a6 + 2);
        if ((unsigned __int16)v101 != (unsigned __int16)v102) {
          goto LABEL_213;
        }
        BOOL v18 = WORD1(v101) == WORD1(v102);
        uint64_t v103 = (v102 ^ v101) & 0xFFFFFF00000000;
        if (!v18 || v103 != 0) {
          goto LABEL_213;
        }
      }
      else if (!re::areSameTranslatedVersion(this, a6, a3))
      {
        goto LABEL_213;
      }
LABEL_64:
      if (a7)
      {
        if (*(unsigned char *)(a1 + 64)) {
          return 0;
        }
        LOBYTE(v15re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 1;
        DWORD1(v15re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 16;
        *((void *)&v156 + 1) = a2;
        long long v157 = 0u;
        long long v158 = 0u;
        re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((void *)(a1 + 24), &v156);
        unint64_t v159 = 0;
        re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned long long>(a1 + 24, "tag", (char *)&v159, 0);
        if (v159 < *(unsigned int *)(*((void *)a6 + 2) + 88))
        {
          re::TypeInfo::unionMember(a6, v159, (uint64_t)&v156);
          if (!*(unsigned char *)(a1 + 64)) {
            (*(void (**)(uint64_t, const char *, void, void, long long *, long long *, uint64_t))(*(void *)a1 + 72))(a1, "value", 0, 0, &v156, &v156, 1);
          }
        }
      }
      else
      {
        if (*(unsigned char *)(a1 + 64)) {
          return 0;
        }
        LOBYTE(v15re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 1;
        DWORD1(v15re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 16;
        *((void *)&v156 + 1) = a2;
        long long v157 = 0u;
        long long v158 = 0u;
        re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((void *)(a1 + 24), &v156);
        re::TypeInfo::TypeInfo((uint64_t)&v156, (uint64_t)this);
        Tag = (const re::TypeInfo *)re::UnionAccessor::readTag((re::UnionAccessor *)&v156, (char *)a4);
        re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned long long>(a1 + 24, "tag", (char *)&Tag, 0);
        re::UnionAccessor::reset((re::UnionAccessor *)&v156, (char *)a4, Tag, *(re::Allocator **)(a1 + 48));
        if ((unint64_t)Tag < *(unsigned int *)(*((void *)this + 2) + 88))
        {
          re::TypeInfo::unionMember(this, (uint64_t)Tag, (uint64_t)&v159);
          if (!*(unsigned char *)(a1 + 64)) {
            (*(void (**)(uint64_t, const char *, void, uint64_t *, unint64_t *, unint64_t *, void))(*(void *)a1 + 72))(a1, "value", 0, a4, &v159, &v159, 0);
          }
        }
      }
      re::EncoderBinary<re::SeekableInputStream>::endObject((_anonymous_namespace_ *)(a1 + 24));
      return *(unsigned char *)(a1 + 64) == 0;
    case 8:
      return re::serializeObject<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, (uint64_t)a3, (uint64_t)a4, this, (uint64_t)a6, a7);
    case 9:
      uint64_t v154 = re::TypeInfo::name(this)[1];
      long long v30 = "Pointer type (\"%s\") needs to be handled explicitly by the serializer.";
      goto LABEL_196;
    default:
      LOBYTE(v154) = *((unsigned char *)this + 12);
      long long v30 = "Invalid type category. Value = %d";
      goto LABEL_196;
  }
  goto LABEL_165;
}

uint64_t re::internal::setTypeMismatchError<re::EncoderBinary<re::SeekableInputStream>>(uint64_t a1, const char *a2, re::TypeInfo *this, re::TypeInfo *a4)
{
  uint64_t v7 = re::TypeInfo::name(this)[1];
  re::TypeInfo::name(a4);
  return re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::setError(a1, a2, "Type mismatch. Runtime type \"%s\" and serialized type \"%s\" are different.", v8, v9, v10, v11, v12, v7);
}

uint64_t re::serializeEnum<re::EncoderBinary<re::SeekableInputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, void *a4, uint64_t a5, uint64_t a6, int a7)
{
  if (a5 != a6)
  {
    if (*(void *)a5 == *(void *)a6)
    {
      uint64_t v14 = **(void **)(a5 + 16);
      uint64_t v15 = **(void **)(a6 + 16);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_12;
        }
      }
    }
    else if (re::areSameTranslatedVersion((re *)a5, (const re::TypeInfo *)a6, a3))
    {
      goto LABEL_12;
    }
    if (*(unsigned __int8 *)(a5 + 12) != *(unsigned __int8 *)(a6 + 12)
      || (BOOL v18 = re::TypeInfo::name((re::TypeInfo *)a5),
          uint64_t v19 = re::TypeInfo::name((re::TypeInfo *)a6),
          !re::StringID::operator==(v18, v19)))
    {
      re::internal::setTypeMismatchError<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, (re::TypeInfo *)a5, (re::TypeInfo *)a6);
      return 0;
    }
  }
LABEL_12:
  return re::internal::serializeEnumAsBinary<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, a3, a4, (re::internal *)a5, (re::internal *)a6, a7);
}

uint64_t re::serializeObject<re::EncoderBinary<re::SeekableInputStream>>(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, re::TypeInfo *this, uint64_t a6, uint64_t a7)
{
  if (a7)
  {
    if (*(unsigned char *)(*((void *)this + 2) + 49))
    {
      BOOL v17 = *(re::TypeRegistry **)(a1 + 192);
      v34[0] = 0x2686EB529B3EE220;
      v34[1] = "DynamicString";
      re::TypeRegistry::typeInfo(v17, (const re::StringID *)v34, v36);
      re::TypeInfo::TypeInfo((uint64_t)v35, (uint64_t)v36 + 8);
      re::StringID::destroyString((re::StringID *)v34);
      BOOL v18 = (re *)v35;
      uint64_t v19 = (const re::TypeInfo *)v35;
      uint64_t v20 = a1;
      uint64_t v21 = a2;
      int v22 = (const re::TypeInfo *)a3;
    }
    else
    {
      uint64_t v14 = re::TypeInfo::name(this);
      if ((*v14 & 0xFFFFFFFFFFFFFFFELL) != 0x2686EB529B3EE220) {
        goto LABEL_6;
      }
      uint64_t v15 = (const char *)v14[1];
      if (v15 != "DynamicString")
      {
        if (strcmp(v15, "DynamicString")) {
          goto LABEL_6;
        }
      }
      uint64_t v20 = a1;
      uint64_t v21 = a2;
      int v22 = (const re::TypeInfo *)a3;
      BOOL v18 = this;
      uint64_t v19 = this;
    }
    re::serializeDynamicString<re::EncoderBinary<re::SeekableInputStream>>(v20, v21, v22, 0, v18, v19, 1);
    return *(unsigned char *)(a1 + 64) == 0;
  }
LABEL_6:
  if ((*(unsigned char *)(*((void *)this + 2) + 48) & 4) == 0)
  {
    if (*(unsigned char *)(a1 + 64)) {
      return 0;
    }
    LOBYTE(v36[0]) = 1;
    DWORD1(v36[0]) = 0;
    *((void *)&v36[0] + 1) = a2;
    memset(&v36[1], 0, 32);
    re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((void *)(a1 + 24), v36);
    if (this == (re::TypeInfo *)a6) {
      goto LABEL_16;
    }
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v24 = **((void **)this + 2);
      uint64_t v25 = **(void **)(a6 + 16);
      if ((unsigned __int16)v24 == (unsigned __int16)v25)
      {
        BOOL v27 = WORD1(v24) == WORD1(v25);
        uint64_t v26 = (v25 ^ v24) & 0xFFFFFF00000000;
        BOOL v27 = v27 && v26 == 0;
        if (v27) {
          goto LABEL_16;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, (const re::TypeInfo *)a6, v23))
    {
LABEL_16:
      re::internal::serializeMembersWithoutVersioning<re::EncoderBinary<re::SeekableInputStream>>((unsigned char *)a1, a4, (uint64_t *)this, a7);
LABEL_27:
      re::EncoderBinary<re::SeekableInputStream>::endObject((_anonymous_namespace_ *)(a1 + 24));
      return *(unsigned char *)(a1 + 64) == 0;
    }
    if (*((unsigned __int8 *)this + 12) == *(unsigned __int8 *)(a6 + 12))
    {
      re::internal::serializeMembersWithVersioning<re::EncoderBinary<re::SeekableInputStream>>(a1, a4, (uint64_t *)this, (uint64_t *)a6, a7);
    }
    else
    {
      uint64_t v28 = re::TypeInfo::name(this)[1];
      re::TypeInfo::name((re::TypeInfo *)a6);
      re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::setError(a1, 0, "Type categories of types \"%s\" (runtime) and \"%s\" (stream) don't match.", v29, v30, v31, v32, v33, v28);
    }
    goto LABEL_27;
  }
  return re::internal::serializeObjectWithOneMember<re::EncoderBinary<re::SeekableInputStream>>((unsigned char *)a1, a2, a3, a4, (uint64_t *)this, (uint64_t *)a6, a7);
}

uint64_t re::EncoderBinary<re::SeekableInputStream>::serializeValue<BOOL>(uint64_t a1, const char *a2, char *a3, char a4)
{
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  if (a4) {
    a3 = 0;
  }
  if ((re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((void *)a1, a3, 1uLL) & 1) == 0)
  {
    re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, (uint64_t)"BOOL");
    return 0;
  }
  if ((a4 & 2) == 0)
  {
    uint64_t v8 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
    ++*(void *)(v8 - 16);
  }
  return 1;
}

uint64_t re::EncoderBinary<re::SeekableInputStream>::serializeValue<char>(uint64_t a1, const char *a2, char *a3, char a4)
{
  if (!*(unsigned char *)(a1 + 40))
  {
    if (a4) {
      a3 = 0;
    }
    if (re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((void *)a1, a3, 1uLL))
    {
      uint64_t v7 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
      ++*(void *)(v7 - 16);
      return 1;
    }
    re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, (uint64_t)"char");
  }
  return 0;
}

uint64_t re::EncoderBinary<re::SeekableInputStream>::serializeValue<signed char>(uint64_t a1, const char *a2, char *a3, char a4)
{
  if (!*(unsigned char *)(a1 + 40))
  {
    if (a4) {
      a3 = 0;
    }
    if (re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((void *)a1, a3, 1uLL))
    {
      uint64_t v7 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
      ++*(void *)(v7 - 16);
      return 1;
    }
    re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, (uint64_t)"int8");
  }
  return 0;
}

uint64_t re::EncoderBinary<re::SeekableInputStream>::serializeValue<short>(uint64_t a1, const char *a2, char *a3, char a4)
{
  if (!*(unsigned char *)(a1 + 40))
  {
    if (a4) {
      a3 = 0;
    }
    if (re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((void *)a1, a3, 2uLL))
    {
      uint64_t v7 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
      ++*(void *)(v7 - 16);
      return 1;
    }
    re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, (uint64_t)"int16");
  }
  return 0;
}

uint64_t re::EncoderBinary<re::SeekableInputStream>::serializeValue<int>(uint64_t a1, const char *a2, char *a3, char a4)
{
  if (!*(unsigned char *)(a1 + 40))
  {
    if (a4) {
      a3 = 0;
    }
    if (re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((void *)a1, a3, 4uLL))
    {
      uint64_t v7 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
      ++*(void *)(v7 - 16);
      return 1;
    }
    re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, (uint64_t)"int32");
  }
  return 0;
}

uint64_t re::EncoderBinary<re::SeekableInputStream>::serializeValue<long long>(uint64_t a1, const char *a2, char *a3, char a4)
{
  if (!*(unsigned char *)(a1 + 40))
  {
    if (a4) {
      a3 = 0;
    }
    if (re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((void *)a1, a3, 8uLL))
    {
      uint64_t v7 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
      ++*(void *)(v7 - 16);
      return 1;
    }
    re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, (uint64_t)"int64");
  }
  return 0;
}

uint64_t re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned short>(uint64_t a1, const char *a2, char *a3, char a4)
{
  if (!*(unsigned char *)(a1 + 40))
  {
    if (a4) {
      a3 = 0;
    }
    if (re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((void *)a1, a3, 2uLL))
    {
      uint64_t v7 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
      ++*(void *)(v7 - 16);
      return 1;
    }
    re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, (uint64_t)"uint16");
  }
  return 0;
}

uint64_t re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned int>(uint64_t a1, const char *a2, uint64_t a3, char *a4, uint64_t a5, char a6)
{
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  if (a6) {
    a4 = 0;
  }
  if ((re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((void *)a1, a4, 4uLL) & 1) == 0)
  {
    re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, a5);
    return 0;
  }
  if ((a6 & 2) == 0)
  {
    uint64_t v11 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
    ++*(void *)(v11 - 16);
  }
  return 1;
}

uint64_t re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned long long>(uint64_t a1, const char *a2, char *a3, char a4)
{
  if (!*(unsigned char *)(a1 + 40))
  {
    if (a4) {
      a3 = 0;
    }
    if (re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((void *)a1, a3, 8uLL))
    {
      uint64_t v7 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
      ++*(void *)(v7 - 16);
      return 1;
    }
    re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, (uint64_t)"uint64");
  }
  return 0;
}

uint64_t re::EncoderBinary<re::SeekableInputStream>::serializeValue<double>(uint64_t a1, const char *a2, uint64_t a3, char *a4, uint64_t a5, char a6)
{
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  if (a6) {
    a4 = 0;
  }
  if ((re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((void *)a1, a4, 8uLL) & 1) == 0)
  {
    re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, a5);
    return 0;
  }
  if ((a6 & 2) == 0)
  {
    uint64_t v11 = *(void *)(a1 + 128) + 48 * *(void *)(a1 + 112);
    ++*(void *)(v11 - 16);
  }
  return 1;
}

uint64_t re::internal::serializeEnumAsBinary<re::EncoderBinary<re::SeekableInputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, void *a4, re::internal *a5, re::internal *a6, int a7)
{
  if (a7)
  {
    uint64_t v11 = *(re::internal **)(a1 + 192);
    re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &__src);
    re::TypeInfo::TypeInfo((uint64_t)v56, (uint64_t)v58);
    re::internal::translateType(v11, (const re::TypeRegistry *)v56, (uint64_t)&__src);
    if (!*(unsigned char *)(a1 + 64)) {
      return (*(uint64_t (**)(uint64_t, const char *, const re::TypeInfo *, void, uint64_t *, uint64_t *, uint64_t))(*(void *)a1 + 72))(a1, a2, a3, 0, &__src, &__src, 1);
    }
    return 0;
  }
  uint64_t v15 = *(void **)a5;
  if (a5 == a6) {
    goto LABEL_8;
  }
  if (v15 == *(void **)a6)
  {
    uint64_t v16 = **((void **)a5 + 2);
    BOOL v17 = (uint64_t *)*((void *)a6 + 2);
    uint64_t v18 = *v17;
    if ((unsigned __int16)v16 == (unsigned __int16)*v17)
    {
      BOOL v20 = WORD1(v16) == WORD1(v18);
      uint64_t v19 = (v18 ^ v16) & 0xFFFFFF00000000;
      BOOL v20 = v20 && v19 == 0;
      if (v20) {
        goto LABEL_8;
      }
    }
LABEL_21:
    uint64_t v23 = *(re::internal **)(a1 + 192);
    re::TypeRegistry::typeInfo(v15, v17[9], &__src);
    re::TypeInfo::TypeInfo((uint64_t)v56, (uint64_t)v58);
    re::internal::translateType(v23, (const re::TypeRegistry *)v56, (uint64_t)&__src);
    if (*(_DWORD *)(v58[1] + 8) < 9u)
    {
      uint64_t v55 = 0;
      if (!*(unsigned char *)(a1 + 64)
        && (*(unsigned int (**)(uint64_t, const char *, const re::TypeInfo *, uint64_t *, uint64_t *, uint64_t *, void))(*(void *)a1 + 72))(a1, a2, a3, &v55, &__src, &__src, 0))
      {
        unsigned int EnumConstantIndex = re::internal::getEnumConstantIndex(a6, (const re::TypeInfo *)&v55, v29);
        if ((EnumConstantIndex & 0x80000000) != 0)
        {
          char v41 = v55;
          re::TypeInfo::name(a6);
          re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::setError(a1, a2, "Value %zu is not a valid enum constant of \"%s\".", v42, v43, v44, v45, v46, v41);
        }
        else
        {
          unsigned int v31 = EnumConstantIndex;
          uint64_t v32 = *(re::internal::TypeTranslationTable **)(*(void *)a6 + 856);
          if (v32)
          {
            uint64_t v33 = (const void *)re::internal::TypeTranslationTable::translateSerializedEnum(v32, a6, v31, a5);
            if (v33)
            {
              memcpy(a4, v33, *(unsigned int *)(*((void *)a5 + 2) + 8));
              int v34 = 0;
              return v34 == 0;
            }
          }
          v56[0] = re::TypeInfo::enumConstants(a6);
          v56[1] = v47;
          uint64_t v48 = *(void *)(re::Slice<re::EnumConstant>::operator[](v56, v31) + 16);
          re::TypeInfo::name(a5);
          re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::setError(a1, a2, "Serialized enum constant \"%s\" does not exist in runtime type \"%s\".", v49, v50, v51, v52, v53, v48);
        }
      }
    }
    else
    {
      uint64_t v54 = re::TypeInfo::name((re::TypeInfo *)&__src)[1];
      re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::setError(a1, a2, "Enum type \"%s\" has invalid size: %zu bytes.", v24, v25, v26, v27, v28, v54);
    }
    int v34 = 1;
    return v34 == 0;
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
  {
    uint64_t v15 = *(void **)a6;
    BOOL v17 = (uint64_t *)*((void *)a6 + 2);
    goto LABEL_21;
  }
  uint64_t v15 = *(void **)a5;
LABEL_8:
  re::TypeRegistry::typeInfo(v15, *(void *)(*((void *)a5 + 2) + 72), &__src);
  re::TypeInfo::TypeInfo((uint64_t)v56, (uint64_t)v58);
  __srCC_SHA256_CTX c = 0;
  if (*(unsigned char *)(a1 + 64)) {
    return 0;
  }
  int v22 = (*(uint64_t (**)(uint64_t, const char *, const re::TypeInfo *, uint64_t *, void *, void *, void))(*(void *)a1 + 72))(a1, a2, a3, &__src, v56, v56, 0);
  uint64_t result = 0;
  if (v22)
  {
    if ((re::internal::getEnumConstantIndex(a5, (const re::TypeInfo *)&__src, v21) & 0x80000000) != 0)
    {
      char v35 = __src;
      re::TypeInfo::name(a5);
      re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::setError(a1, a2, "Value %zu is not a valid enum constant of \"%s\".", v36, v37, v38, v39, v40, v35);
      return 0;
    }
    memcpy(a4, &__src, *(unsigned int *)(*((void *)a5 + 2) + 8));
    return 1;
  }
  return result;
}

double re::EncoderBinary<re::SeekableInputStream>::beginOptional(uint64_t a1, const char *a2, char *a3)
{
  if (!*(unsigned char *)(a1 + 40))
  {
    re::EncoderBinary<re::SeekableInputStream>::serializeValue<BOOL>(a1, a2, a3, 2);
    uint64_t v6 = *a3;
    LOBYTE(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 3;
    DWORD1(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
    *((void *)&v8 + 1) = a2;
    uint64_t v9 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v10 = v6;
    return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((void *)a1, &v8);
  }
  return result;
}

_anonymous_namespace_ *re::EncoderBinary<re::SeekableInputStream>::endOptional(_anonymous_namespace_ *result)
{
  if (!*((unsigned char *)result + 40))
  {
    uint64_t v1 = (uint64_t)result;
    if (*(void *)(*((void *)result + 16) + 48 * *((void *)result + 14) - 16) == *(void *)(*((void *)result + 16) + 48 * *((void *)result + 14) - 24))
    {
      double result = re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::popState(result, 3);
      uint64_t v2 = *(void *)(v1 + 128) + 48 * *(void *)(v1 + 112);
      ++*(void *)(v2 - 16);
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels(result, 0, (re::DynamicString *)&v5);
      if (v6) {
        uint64_t v3 = *(unsigned char **)&v7[7];
      }
      else {
        uint64_t v3 = v7;
      }
      if (*(uint64_t *)(*(void *)(v1 + 128) + 48 * *(void *)(v1 + 112) - 24) <= 0) {
        uint64_t v4 = "Optional should not have a value.";
      }
      else {
        uint64_t v4 = "Optional requires a value.";
      }
      re::DynamicString::format((re::DynamicString *)"Failed to serialize optional type \"%s\". %s", (re::DynamicString *)v8, v3, v4);
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(v1, (uint64_t)v8);
      if (*(void *)&v8[0])
      {
        if (BYTE8(v8[0])) {
          (*(void (**)(void))(**(void **)&v8[0] + 40))();
        }
        memset(v8, 0, sizeof(v8));
      }
      double result = v5;
      if (v5)
      {
        if (v6) {
          return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v5 + 40))();
        }
      }
    }
  }
  return result;
}

BOOL re::EncoderBinary<re::SeekableInputStream>::beginArray(uint64_t a1, const char *a2, uint64_t a3, char *a4, int a5)
{
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  if ((a5 & 4) == 0) {
    re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned int>(a1, a2, 0, a4, (uint64_t)"uint32", 2);
  }
  if ((a5 & 8) != 0)
  {
    if (*(void *)a4) {
      char v10 = 73;
    }
    else {
      char v10 = 78;
    }
    char v17 = v10;
    re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned char>(a1, a2, 0, &v17, (uint64_t)"uint8", 2);
  }
  uint64_t v11 = *(void *)a4;
  LOBYTE(v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 5;
  DWORD1(v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = a5;
  *((void *)&v12 + 1) = a2;
  uint64_t v13 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v14 = v11;
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((void *)a1, &v12);
  return *(unsigned char *)(a1 + 40) == 0;
}

uint64_t re::EncoderBinary<re::SeekableInputStream>::serializeArray(uint64_t result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  if (!*(unsigned char *)(result + 40))
  {
    char v6 = (_anonymous_namespace_ *)result;
    size_t v7 = a4 * a3;
    if (a5) {
      a2 = 0;
    }
    double result = re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((void *)result, a2, v7);
    if (result)
    {
      uint64_t v8 = *((void *)v6 + 16) + 48 * *((void *)v6 + 14);
      *(void *)(v8 - 16) += a4;
    }
    else
    {
      return re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::setErrorWithType(v6, 0, (uint64_t)"Array");
    }
  }
  return result;
}

_anonymous_namespace_ *re::EncoderBinary<re::SeekableInputStream>::endArray(_anonymous_namespace_ *result)
{
  if (!*((unsigned char *)result + 40))
  {
    uint64_t v1 = (uint64_t)result;
    if (*(void *)(*((void *)result + 16) + 48 * *((void *)result + 14) - 16) == *(void *)(*((void *)result + 16) + 48 * *((void *)result + 14) - 24))
    {
      double result = re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::popState(result, 5);
      uint64_t v2 = *(void *)(v1 + 128) + 48 * *(void *)(v1 + 112);
      ++*(void *)(v2 - 16);
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels(result, 0, (re::DynamicString *)&v5);
      if (v6) {
        uint64_t v3 = *(unsigned char **)&v7[7];
      }
      else {
        uint64_t v3 = v7;
      }
      uint64_t v4 = *(void *)(v1 + 128) + 48 * *(void *)(v1 + 112);
      re::DynamicString::format((re::DynamicString *)"Failed to deserialize array \"%s\". Expected number of elements: %lld. Actual number of elements: %lld.", (re::DynamicString *)v8, v3, *(void *)(v4 - 24), *(void *)(v4 - 16));
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(v1, (uint64_t)v8);
      if (*(void *)&v8[0])
      {
        if (BYTE8(v8[0])) {
          (*(void (**)(void))(**(void **)&v8[0] + 40))();
        }
        memset(v8, 0, sizeof(v8));
      }
      double result = v5;
      if (v5)
      {
        if (v6) {
          return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v5 + 40))();
        }
      }
    }
  }
  return result;
}

BOOL re::EncoderBinary<re::SeekableInputStream>::beginDictionary(uint64_t a1, const char *a2, char *a3)
{
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned int>(a1, a2, 0, a3, (uint64_t)"uint32", 2);
  uint64_t v7 = *(void *)a3;
  LOBYTE(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 6;
  DWORD1(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *((void *)&v8 + 1) = a2;
  uint64_t v9 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = v7;
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((void *)a1, &v8);
  return *(unsigned char *)(a1 + 40) == 0;
}

_anonymous_namespace_ *re::EncoderBinary<re::SeekableInputStream>::endDictionaryEntry(_anonymous_namespace_ *result)
{
  if (!*((unsigned char *)result + 40))
  {
    uint64_t v1 = (uint64_t)result;
    if (*(void *)(*((void *)result + 16) + 48 * *((void *)result + 14) - 16) == 2)
    {
      double result = re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::popState(result, 7);
      uint64_t v2 = *(void *)(v1 + 128) + 48 * *(void *)(v1 + 112);
      ++*(void *)(v2 - 16);
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels(result, 0, (re::DynamicString *)&v4);
      if (v5) {
        uint64_t v3 = *(unsigned char **)&v6[7];
      }
      else {
        uint64_t v3 = v6;
      }
      re::DynamicString::format((re::DynamicString *)"Failed to deserialize dictionary entry \"%s\". Expected 2 objects (key+value). Actual number of objects: %lld.", (re::DynamicString *)v7, v3, *(void *)(*(void *)(v1 + 128) + 48 * *(void *)(v1 + 112) - 16));
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(v1, (uint64_t)v7);
      if (*(void *)&v7[0])
      {
        if (BYTE8(v7[0])) {
          (*(void (**)(void))(**(void **)&v7[0] + 40))();
        }
        memset(v7, 0, sizeof(v7));
      }
      double result = v4;
      if (v4)
      {
        if (v5) {
          return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v4 + 40))();
        }
      }
    }
  }
  return result;
}

_anonymous_namespace_ *re::EncoderBinary<re::SeekableInputStream>::endDictionary(_anonymous_namespace_ *result)
{
  if (!*((unsigned char *)result + 40))
  {
    uint64_t v1 = (uint64_t)result;
    if (*(void *)(*((void *)result + 16) + 48 * *((void *)result + 14) - 16) == *(void *)(*((void *)result + 16) + 48 * *((void *)result + 14) - 24))
    {
      double result = re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::popState(result, 6);
      uint64_t v2 = *(void *)(v1 + 128) + 48 * *(void *)(v1 + 112);
      ++*(void *)(v2 - 16);
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels(result, 0, (re::DynamicString *)&v5);
      if (v6) {
        uint64_t v3 = *(unsigned char **)&v7[7];
      }
      else {
        uint64_t v3 = v7;
      }
      uint64_t v4 = *(void *)(v1 + 128) + 48 * *(void *)(v1 + 112);
      re::DynamicString::format((re::DynamicString *)"Failed to deserialize dictionary \"%s\". Expected number of entries: %lld. Actual number of entries: %lld.", (re::DynamicString *)v8, v3, *(void *)(v4 - 24), *(void *)(v4 - 16));
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(v1, (uint64_t)v8);
      if (*(void *)&v8[0])
      {
        if (BYTE8(v8[0])) {
          (*(void (**)(void))(**(void **)&v8[0] + 40))();
        }
        memset(v8, 0, sizeof(v8));
      }
      double result = v5;
      if (v5)
      {
        if (v6) {
          return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v5 + 40))();
        }
      }
    }
  }
  return result;
}

_anonymous_namespace_ *re::EncoderBinary<re::SeekableInputStream>::endObject(_anonymous_namespace_ *result)
{
  if (!*((unsigned char *)result + 40))
  {
    uint64_t v1 = result;
    double result = re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::popState(result, 1);
    uint64_t v2 = *((void *)v1 + 16) + 48 * *((void *)v1 + 14);
    ++*(void *)(v2 - 16);
  }
  return result;
}

BOOL re::serializeDynamicString<re::EncoderBinary<re::SeekableInputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, void *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  if (a5 == a6) {
    goto LABEL_14;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v14 = **((void **)a5 + 2);
    uint64_t v15 = **((void **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      BOOL v17 = WORD1(v14) == WORD1(v15);
      uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      BOOL v17 = v17 && v16 == 0;
      if (v17) {
        goto LABEL_14;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_14;
  }
  uint64_t v18 = re::TypeInfo::name(a6);
  if ((unint64_t)*v18 >> 1 != 0x22C6ED80D0CLL
    || (uint64_t v19 = (char *)v18[1], v19 != "StringID") && strcmp(v19, "StringID"))
  {
    re::internal::setTypeMismatchError<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_14:
  if (a7)
  {
    unint64_t v35 = 0;
    BOOL v20 = re::EncoderBinary<re::SeekableInputStream>::beginString(a1 + 24, (uint64_t)a2, (uint64_t)a3, (char *)&v35, 0);
    BOOL result = 0;
    if (!v20) {
      return result;
    }
    if (v35) {
      re::EncoderBinary<re::SeekableInputStream>::serializeString(a1 + 24, 0, 1);
    }
    int v22 = (_anonymous_namespace_ *)(a1 + 24);
    goto LABEL_34;
  }
  unint64_t v23 = a4[1];
  if (v23) {
    unint64_t v24 = v23 >> 1;
  }
  else {
    unint64_t v24 = v23 >> 1;
  }
  unint64_t v35 = v24;
  BOOL v25 = re::EncoderBinary<re::SeekableInputStream>::beginString(a1 + 24, (uint64_t)a2, (uint64_t)a3, (char *)&v35, 0);
  BOOL result = 0;
  if (v25)
  {
    unint64_t v26 = v35;
    if (v26 <= (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 64))())
    {
      if (!*a4)
      {
        size_t v33 = v35 + 1;
        *a4 = *(void *)(a1 + 48);
        re::DynamicString::setCapacity(a4, v33);
      }
      re::DynamicString::resize(a4, v35, 0);
      if (v35)
      {
        if (a4[1]) {
          int v34 = (char *)a4[2];
        }
        else {
          int v34 = (char *)a4 + 9;
        }
        re::EncoderBinary<re::SeekableInputStream>::serializeString(a1 + 24, v34, 0);
      }
      int v22 = (_anonymous_namespace_ *)(a1 + 24);
LABEL_34:
      re::EncoderBinary<re::SeekableInputStream>::endString(v22);
      return *(unsigned char *)(a1 + 64) == 0;
    }
    char v27 = v35;
    (*(void (**)(void))(**(void **)(a1 + 24) + 64))(*(void *)(a1 + 24));
    re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::setError(a1, a2, "String size greater than stream size during deserialization. String CFIndex length = %zu, Stream CFIndex length = %zu", v28, v29, v30, v31, v32, v27);
    return 0;
  }
  return result;
}

uint64_t re::internal::serializeObjectWithOneMember<re::EncoderBinary<re::SeekableInputStream>>(unsigned char *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v14 = (uint64_t *)re::TypeMemberCollection::TypeMemberCollection((uint64_t)v29, *a5, a5[2]);
  re::TypeMemberCollection::operator[](v14, 0, (uint64_t)&v27);
  uint64_t v15 = a4 + *(unsigned int *)(v28 + 24);
  re::TypeRegistry::typeInfo(v27, *(void *)v28, v29);
  re::TypeInfo::TypeInfo((uint64_t)v26, (uint64_t)v30);
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*a5 == *a6)
  {
    uint64_t v18 = *(void *)a5[2];
    uint64_t v19 = a6[2];
    uint64_t v20 = *(void *)v19;
    if ((unsigned __int16)v18 != (unsigned __int16)*(void *)v19) {
      goto LABEL_14;
    }
    BOOL v22 = WORD1(v18) == WORD1(v20);
    uint64_t v21 = (v20 ^ v18) & 0xFFFFFF00000000;
    BOOL v22 = v22 && v21 == 0;
    if (!v22) {
      goto LABEL_14;
    }
LABEL_4:
    if (!a1[64]) {
      return (*(uint64_t (**)(unsigned char *, const char *, uint64_t, uint64_t, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, a3, v15, v26, v26, a7);
    }
    return 0;
  }
  if (re::areSameTranslatedVersion((re *)a5, (const re::TypeInfo *)a6, v16)) {
    goto LABEL_4;
  }
  uint64_t v19 = a6[2];
LABEL_14:
  if (*(_DWORD *)(v19 + 88) != 1)
  {
    re::internal::setTypeMismatchError<re::EncoderBinary<re::SeekableInputStream>>((uint64_t)a1, a2, (re::TypeInfo *)a5, (re::TypeInfo *)a6);
    return 0;
  }
  re::TypeMemberCollection::TypeMemberCollection((uint64_t)v23, *a6, v19);
  re::TypeMemberCollection::operator[](v23, 0, (uint64_t)v24);
  re::TypeRegistry::typeInfo(v24[0], *v24[2], v29);
  re::TypeInfo::TypeInfo((uint64_t)v25, (uint64_t)v30);
  if (a1[64]) {
    return 0;
  }
  return (*(uint64_t (**)(unsigned char *, const char *, uint64_t, uint64_t, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, a3, v15, v26, v25, a7);
}

BOOL re::EncoderBinary<re::SeekableInputStream>::beginString(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, int a5)
{
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  re::EncoderBinary<re::SeekableInputStream>::serializeValue<unsigned int>(a1, "length", 0, a4, (uint64_t)"uint32", 2);
  uint64_t v10 = *(void *)a4;
  LOBYTE(v11) = 8;
  DWORD1(v11) = a5;
  *((void *)&v11 + 1) = a2;
  uint64_t v12 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v13 = v10;
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((void *)a1, &v11);
  return *(unsigned char *)(a1 + 40) == 0;
}

uint64_t re::EncoderBinary<re::SeekableInputStream>::serializeString(uint64_t result, char *a2, char a3)
{
  if (!*(unsigned char *)(result + 40))
  {
    uint64_t v4 = (_anonymous_namespace_ *)result;
    uint64_t v5 = *(void *)(result + 128) + 48 * *(void *)(result + 112);
    uint64_t v6 = *(void *)(v5 - 24);
    if (a3) {
      a2 = 0;
    }
    BOOL result = re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((void *)result, a2, *(void *)(v5 - 24));
    if (result)
    {
      if ((a3 & 2) == 0)
      {
        uint64_t v7 = *((void *)v4 + 16) + 48 * *((void *)v4 + 14);
        *(void *)(v7 - 16) += v6;
      }
    }
    else
    {
      return re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::setErrorWithType(v4, 0, (uint64_t)"string");
    }
  }
  return result;
}

_anonymous_namespace_ *re::EncoderBinary<re::SeekableInputStream>::endString(_anonymous_namespace_ *result)
{
  if (!*((unsigned char *)result + 40))
  {
    uint64_t v1 = (uint64_t)result;
    if (*(void *)(*((void *)result + 16) + 48 * *((void *)result + 14) - 16) == *(void *)(*((void *)result + 16) + 48 * *((void *)result + 14) - 24))
    {
      BOOL result = re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::popState(result, 8);
      uint64_t v2 = *(void *)(v1 + 128) + 48 * *(void *)(v1 + 112);
      ++*(void *)(v2 - 16);
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels(result, 0, (re::DynamicString *)&v5);
      if (v6) {
        uint64_t v3 = *(unsigned char **)&v7[7];
      }
      else {
        uint64_t v3 = v7;
      }
      uint64_t v4 = *(void *)(v1 + 128) + 48 * *(void *)(v1 + 112);
      re::DynamicString::format((re::DynamicString *)"Failed to serialize string \"%s\". Expected number of characters: %lld. Actual number of characters: %lld.", (re::DynamicString *)&v8, v3, *(void *)(v4 - 24), *(void *)(v4 - 16));
      *(void *)&v11[0] = 400;
      *((void *)&v11[0] + 1) = re::FoundationErrorCategory(void)::instance;
      *(void *)&v11[1] = v8;
      *((void *)&v11[2] + 1) = v10;
      *(long long *)((char *)&v11[1] + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v9;
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(v1, v11);
      if (*(void *)&v11[1])
      {
        if (BYTE8(v11[1])) {
          (*(void (**)(void))(**(void **)&v11[1] + 40))();
        }
        memset(&v11[1], 0, 32);
      }
      BOOL result = v5;
      if (v5)
      {
        if (v6) {
          return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v5 + 40))();
        }
      }
    }
  }
  return result;
}

uint64_t re::internal::serializeMembersWithoutVersioning<re::EncoderBinary<re::SeekableInputStream>>(unsigned char *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  re::TypeRegistry::typeInfo((void *)*a3, *(void *)(a3[2] + 72), v21);
  if (v21[0])
  {
    re::TypeInfo::TypeInfo((uint64_t)v18, (uint64_t)&v22);
    if (*(_DWORD *)(v19 + 88) || (re::TypeRegistry::typeInfo(v18[0], *(void *)(v19 + 72), v23), v23[0])) {
      re::internal::serializeMembersWithoutVersioning<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, v18, a4);
    }
  }
  uint64_t result = re::TypeMemberCollection::TypeMemberCollection((uint64_t)v18, *a3, a3[2]);
  if (v20)
  {
    for (unint64_t i = 0; i < v20; ++i)
    {
      if (a1[64]) {
        break;
      }
      uint64_t result = (uint64_t)re::TypeMemberCollection::operator[]((uint64_t *)v18, i, (uint64_t)&v16);
      if (*(unsigned char *)(v17 + 28))
      {
        uint64_t v10 = *(void *)(v17 + 16);
        if (strlen((const char *)v10) >= 3 && *(unsigned char *)v10 == 109) {
          v10 += 2 * (*(unsigned char *)(v10 + 1) == 95);
        }
        uint64_t v11 = *(unsigned int *)(v17 + 32);
        uint64_t v12 = a2 + *(unsigned int *)(v17 + 24);
        re::TypeRegistry::typeInfo(v16, *(void *)v17, v23);
        re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v24);
        if (a1[64]
          || (uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, v10, v11, v12, v15, v15, a4), (result & 1) == 0))
        {
          uint64_t result = re::TypeInfo::renamedObjectMembers((re::TypeInfo *)a3);
          if (v13)
          {
            uint64_t v14 = (_DWORD *)(result + 16);
            while (i != *v14)
            {
              v14 += 6;
              if (!--v13) {
                goto LABEL_21;
              }
            }
            if (!a1[64]) {
              uint64_t result = (*(uint64_t (**)(unsigned char *, void, uint64_t, uint64_t, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, *((void *)v14 - 1), v11, v12, v15, v15, a4);
            }
          }
        }
      }
LABEL_21:
      ;
    }
  }
  return result;
}

uint64_t re::internal::serializeMembersWithVersioning<re::EncoderBinary<re::SeekableInputStream>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  re::TypeRegistry::typeInfo((void *)*a3, *(void *)(a3[2] + 72), v52);
  re::TypeRegistry::typeInfo((void *)*a4, *(void *)(a4[2] + 72), v48);
  if (v48[0])
  {
    if (!v52[0])
    {
      uint64_t v11 = re::TypeInfo::name((re::TypeInfo *)&v49)[1];
      re::TypeInfo::name((re::TypeInfo *)a3);
      return re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::setError(a1, 0, "Base class \"%s\" removed from type \"%s\".", v12, v13, v14, v15, v16, v11);
    }
    if (v53 == v49)
    {
      uint64_t v18 = *v55;
      uint64_t v19 = *v51;
      if ((unsigned __int16)*v55 == (unsigned __int16)*v51)
      {
        BOOL v21 = WORD1(v18) == WORD1(v19);
        uint64_t v20 = (v19 ^ v18) & 0xFFFFFF00000000;
        BOOL v21 = v21 && v20 == 0;
        if (v21) {
          goto LABEL_5;
        }
      }
    }
    else if (re::areSameTranslatedVersion((re *)&v53, (const re::TypeInfo *)&v49, v10))
    {
LABEL_5:
      re::internal::serializeMembersWithoutVersioning<re::EncoderBinary<re::SeekableInputStream>>((unsigned char *)a1, a2, &v53, a5);
      goto LABEL_15;
    }
    if (v54 == v50)
    {
      re::internal::serializeMembersWithVersioning<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, &v53, &v49, a5);
    }
    else
    {
      uint64_t v22 = re::TypeInfo::name((re::TypeInfo *)&v53)[1];
      re::TypeInfo::name((re::TypeInfo *)&v49);
      re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::setError(a1, 0, "Type categories of types \"%s\" (runtime) and \"%s\" (stream) don't match.", v23, v24, v25, v26, v27, v22);
    }
  }
LABEL_15:
  re::TypeMemberCollection::TypeMemberCollection((uint64_t)v47, *a3, a3[2]);
  uint64_t result = re::TypeMemberCollection::TypeMemberCollection((uint64_t)v45, *a4, a4[2]);
  if (v46)
  {
    for (unint64_t i = 0; i < v46; ++i)
    {
      if (*(unsigned char *)(a1 + 64)) {
        break;
      }
      uint64_t result = (uint64_t)re::TypeMemberCollection::operator[](v45, i, (uint64_t)v43);
      if (*(unsigned char *)(v44 + 28))
      {
        uint64_t v29 = *(void *)(v44 + 16);
        if (strlen((const char *)v29) >= 3 && *(unsigned char *)v29 == 109) {
          v29 += 2 * (*(unsigned char *)(v29 + 1) == 95);
        }
        uint64_t v30 = *(unsigned int *)(v44 + 32);
        uint64_t v31 = *(re **)(*a4 + 856);
        if (!v31
          || (uint64_t v31 = (re *)re::internal::TypeTranslationTable::translateMember(v31, (const re::TypeMemberInfo *)v43),
              v31 == -1))
        {
          unint64_t v35 = *re::foundationSerializationLogObjects(v31);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
          {
            uint64_t v36 = re::TypeInfo::name((re::TypeInfo *)a4)[1];
            *(_DWORD *)long long buf = 136315394;
            uint64_t v57 = v36;
            __int16 v58 = 2080;
            uint64_t v59 = v29;
            _os_log_impl(&dword_233120000, v35, OS_LOG_TYPE_INFO, "Skipping unknown member \"%s.%s\".", buf, 0x16u);
          }
          uint64_t v37 = *(re::internal **)(a1 + 192);
          re::TypeRegistry::typeInfo(v43[0], *(void *)v44, buf);
          re::TypeInfo::TypeInfo((uint64_t)v41, (uint64_t)&v57 + 4);
          uint64_t result = re::internal::translateType(v37, (const re::TypeRegistry *)v41, (uint64_t)buf);
          if (!*(unsigned char *)(a1 + 64)) {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint8_t *, uint8_t *, uint64_t))(*(void *)a1 + 72))(a1, v29, v30, 0, buf, buf, 1);
          }
        }
        else
        {
          re::TypeMemberCollection::operator[](v47, (int)v31, (uint64_t)v41);
          uint64_t v32 = a2 + *(unsigned int *)(v42 + 24);
          re::TypeRegistry::typeInfo(v41[0], *(void *)v42, buf);
          re::TypeInfo::TypeInfo((uint64_t)v40, (uint64_t)&v57 + 4);
          re::TypeRegistry::typeInfo(v43[0], *(void *)v44, buf);
          re::TypeInfo::TypeInfo((uint64_t)v39, (uint64_t)&v57 + 4);
          if (*(unsigned char *)(a1 + 64)
            || (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, v29, v30, v32, v40, v39, a5), (result & 1) == 0))
          {
            uint64_t result = re::TypeInfo::renamedObjectMembers((re::TypeInfo *)a4);
            if (v33)
            {
              int v34 = (_DWORD *)(result + 16);
              while (i != *v34)
              {
                v34 += 6;
                if (!--v33) {
                  goto LABEL_35;
                }
              }
              uint64_t v38 = *((void *)v34 - 1);
              re::TypeRegistry::typeInfo(v41[0], *(void *)v42, buf);
              re::TypeInfo::TypeInfo((uint64_t)v40, (uint64_t)&v57 + 4);
              re::TypeRegistry::typeInfo(v43[0], *(void *)v44, buf);
              uint64_t result = re::TypeInfo::TypeInfo((uint64_t)v39, (uint64_t)&v57 + 4);
              if (!*(unsigned char *)(a1 + 64)) {
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, v38, v30, v32, v40, v39, a5);
              }
            }
          }
        }
      }
LABEL_35:
      ;
    }
  }
  return result;
}

uint64_t re::SerializerV2<re::EncoderOPACK<re::SeekableInputStream>>::~SerializerV2(void *a1)
{
  *a1 = &unk_26E6CBB98;
  re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit(a1 + 50);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 45));
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1 + 39);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 34));
  return re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::~Serializer((uint64_t)a1);
}

void re::SerializerV2<re::EncoderOPACK<re::SeekableInputStream>>::~SerializerV2(void *a1)
{
  *a1 = &unk_26E6CBB98;
  re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit(a1 + 50);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 45));
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1 + 39);
  re::DynamicArray<unsigned long>::deinit((uint64_t)(a1 + 34));
  re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::~Serializer((uint64_t)a1);
  JUMPOUT(0x237DBCBD0);
}

void re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::~Serializer(uint64_t a1)
{
  re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::~Serializer(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::doSerialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, re::TypeInfo *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, re::TypeInfo *))(*(void *)a1 + 80))(a1, a5);
  if (v14)
  {
    return v14(a1, a2, a3, a4, a5, a6, a7);
  }
  else
  {
    uint64_t v16 = re::TypeInfo::name(a5);
    re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v17, v18, v19, v20, v21, v16[1]);
    return 0;
  }
}

uint64_t (*re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::doResolveSerializeFunc(uint64_t a1, uint64_t a2))(unsigned char *a1, const char *a2, const re::TypeInfo *a3, void *a4, re::TypeInfo *this, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(void *)a2 == *(void *)(a1 + 208)
    && (LODWORD(v4) = **(void **)(a2 + 16),
        HIDWORD(v4) = -1,
        (uint64_t v3 = re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::tryGet(a1 + 224, &v4)) != 0))
  {
    return *(uint64_t (**)(unsigned char *, const char *, const re::TypeInfo *, void *, re::TypeInfo *, uint64_t, uint64_t, uint64_t))v3;
  }
  else
  {
    return re::serializeType<re::EncoderOPACK<re::SeekableInputStream>>;
  }
}

uint64_t re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::Encoder(uint64_t result, int a2)
{
  *(void *)(result + 12re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(void *)(result + 104) = 0;
  *(void *)(result + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(void *)(result + re::DynamicArray<unsigned long>::deinit((uint64_t)this + 96) = 0;
  *(_DWORD *)(result + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 20) = 0;
  *(void *)uint64_t result = 0;
  *(void *)(result + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = 0;
  *(_DWORD *)(result + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0;
  *(unsigned char *)(result + 40) = 0;
  *(_DWORD *)(result + 13re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = a2;
  *(unsigned char *)(result + 140) = 0;
  *(void *)(result + 15re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 1024;
  uint64_t v2 = &off_268773000;
  {
    uint64_t v8 = result;
    uint64_t v2 = &off_268773000;
    int v6 = v4;
    uint64_t result = v8;
    if (v6)
    {
      re::Defaults::intValue((re::Defaults *)"maxSerializationDepth", v5, (uint64_t)v9);
      uint64_t v7 = v10;
      if (!v9[0]) {
        uint64_t v7 = 0;
      }
      re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::Encoder(int)::s_maxSerializationDepth = v7;
      uint64_t v2 = &off_268773000;
      uint64_t result = v8;
    }
  }
  uint64_t v3 = v2[89];
  if (v3) {
    *(void *)(result + 15re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = v3;
  }
  return result;
}

uint64_t re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::~Serializer(uint64_t a1)
{
  *(void *)a1 = &unk_26E6CBC00;
  uint64_t v2 = (re::StringID *)(a1 + 8);
  re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::deinit((void *)a1);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(a1 + 224));
  re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::~Encoder((unsigned char *)(a1 + 24));
  re::StringID::destroyString(v2);
  return a1;
}

void re::Serializer<re::EncoderOPACK<re::SeekableInputStream>>::deinit(void *a1)
{
  if (a1[26])
  {
    (*(void (**)(void *))(*a1 + 40))(a1);
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)(a1 + 28));
    a1[26] = 0;
  }
}

unsigned char *re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::~Encoder(unsigned char *a1)
{
  if (a1[40]) {
    re::DynamicString::deinit((re::DynamicString *)(a1 + 64));
  }
  return a1;
}

_anonymous_namespace_ *re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::close(_anonymous_namespace_ *result)
{
  if (*(void *)result)
  {
    uint64_t v1 = result;
    if (!*((unsigned char *)result + 40)) {
      re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::popState(result, 0);
    }
    uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<unsigned long>::deinit((uint64_t)v1 + 96);
    if (*((int *)v1 + 4) >= 1)
    {
      uint64_t result = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(void **)v1 + 24))();
      *((void *)v1 + 1) = 0;
      *((_DWORD *)v1 + 4) = 0;
    }
    *(void *)uint64_t v1 = 0;
    *((void *)v1 + 3) = 0;
    *((void *)v1 + 4) = 0;
  }
  return result;
}

uint64_t re::serializeType<re::EncoderOPACK<re::SeekableInputStream>>(unsigned char *a1, const char *a2, const re::TypeInfo *a3, void *a4, re::TypeInfo *this, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (this == (re::TypeInfo *)a6) {
    goto LABEL_19;
  }
  if (*(void *)this != *(void *)a6)
  {
    if (re::areSameTranslatedVersion(this, (const re::TypeInfo *)a6, a3)) {
      goto LABEL_19;
    }
LABEL_10:
    if (*((unsigned __int8 *)this + 12) == *(unsigned __int8 *)(a6 + 12))
    {
      uint64_t v19 = re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)this + 96, **((void **)this + 2));
      if (v19) {
        int v20 = *(_DWORD *)(v19 + 16);
      }
      else {
        int v20 = -1;
      }
      uint64_t v21 = re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)a6 + 96, **(void **)(a6 + 16));
      if (v21) {
        int v22 = *(_DWORD *)(v21 + 16);
      }
      else {
        int v22 = -1;
      }
      if (v20 == v22) {
        goto LABEL_19;
      }
      uint64_t v24 = re::TypeInfo::name(this);
      uint64_t v25 = re::TypeInfo::name((re::TypeInfo *)a6);
      if (re::StringID::operator==(v24, v25))
      {
        uint64_t v26 = re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)a6 + 96, **(void **)(a6 + 16));
        if (v26) {
          int v27 = *(_DWORD *)(v26 + 16);
        }
        else {
          int v27 = -1;
        }
        re::TypeInfo::atVersion(this, v27, v58);
        if (v58[0])
        {
          if (a7) {
            Instance = 0;
          }
          else {
            Instance = re::TypeInfo::createInstance((re::TypeInfo *)v59, *((re::Allocator **)a1 + 6), *((void **)a1 + 25));
          }
          if (a1[64]
            || ((*(void (**)(unsigned char *, const char *, const re::TypeInfo *, void **, unsigned char *, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, a2, a3, Instance, v59, a6, a7), a1[64]))
          {
            if (Instance) {
              re::TypeInfo::releaseInstance((re::TypeInfo *)v59, Instance, *((re::Allocator **)a1 + 6), *((void **)a1 + 25));
            }
          }
          else
          {
            if (a7) {
              return 1;
            }
            re::TypeInfo::TypeInfo((uint64_t)v53, (uint64_t)v59);
            re::internal::upgradeObject(Instance, v53, a4, (uint64_t **)this, *((re::Allocator **)a1 + 6), *((void **)a1 + 25), v54);
            if (v54[0]) {
              return 1;
            }
            if (v56) {
              LOBYTE(v51) = v57[7];
            }
            else {
              uint64_t v51 = v57;
            }
            re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::setError((uint64_t)a1, a2, "%s", v46, v47, v48, v49, v50, (char)v51);
            if (!v54[0] && v55 && (v56 & 1) != 0) {
              (*(void (**)(void))(*(void *)v55 + 40))();
            }
          }
        }
        else
        {
          uint64_t v35 = re::TypeInfo::name((re::TypeInfo *)a6)[1];
          re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)a6 + 96, **(void **)(a6 + 16));
          re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::setError((uint64_t)a1, a2, "Unknown serialized type \"%s\" version %u. No matching runtime type found.", v41, v42, v43, v44, v45, v35);
        }
      }
      else
      {
        uint64_t v33 = re::TypeInfo::name((re::TypeInfo *)a6)[1];
        re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)a6 + 96, **(void **)(a6 + 16));
        re::TypeInfo::name(this);
        re::DataArray<re::TextureAtlasTile>::tryGet(*(void *)this + 96, **((void **)this + 2));
        re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::setError((uint64_t)a1, a2, "Type name changed: Serialized type \"%s\" version %u, runtime type \"%s\" version %u.", v36, v37, v38, v39, v40, v33);
      }
    }
    else
    {
      re::internal::setTypeMismatchError<re::EncoderBinary<re::SeekableInputStream>>((uint64_t)a1, a2, this, (re::TypeInfo *)a6);
    }
    return 0;
  }
  uint64_t v15 = **((void **)this + 2);
  uint64_t v16 = **(void **)(a6 + 16);
  if ((unsigned __int16)v15 != (unsigned __int16)v16) {
    goto LABEL_10;
  }
  BOOL v18 = WORD1(v15) == WORD1(v16);
  uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
  BOOL v18 = v18 && v17 == 0;
  if (!v18) {
    goto LABEL_10;
  }
LABEL_19:
  switch(*((unsigned char *)this + 12))
  {
    case 1:
      uint64_t result = re::serializeBasic<re::EncoderOPACK<re::SeekableInputStream>>((uint64_t)a1, a2, a3, (char *)a4, this, (const re::TypeInfo *)a6, a7);
      break;
    case 2:
      uint64_t result = re::serializeEnum<re::EncoderOPACK<re::SeekableInputStream>>((uint64_t)a1, a2, a3, a4, (uint64_t)this, a6, a7);
      break;
    case 3:
      uint64_t result = re::serializeOptional<re::EncoderOPACK<re::SeekableInputStream>>((uint64_t)a1, a2, a3, (uint64_t)a4, this, (const re::TypeInfo *)a6, a7);
      break;
    case 4:
      uint64_t result = re::serializeArray<re::EncoderOPACK<re::SeekableInputStream>>(a1, a2, a3, (char *)a4, this, (const re::TypeInfo *)a6, a7);
      break;
    case 5:
      uint64_t result = re::serializeList<re::EncoderOPACK<re::SeekableInputStream>>((uint64_t)a1, a2, a3, (uint64_t)a4, this, (const re::TypeInfo *)a6, a7);
      break;
    case 6:
      uint64_t result = re::serializeDictionary<re::EncoderOPACK<re::SeekableInputStream>>((uint64_t)a1, a2, a3, (uint64_t)a4, this, (const re::TypeInfo *)a6, a7);
      break;
    case 7:
      uint64_t result = re::serializeUnion<re::EncoderOPACK<re::SeekableInputStream>>((uint64_t)a1, a2, a3, (char *)a4, this, (re::TypeInfo *)a6, a7);
      break;
    case 8:
      uint64_t result = re::serializeObject<re::EncoderOPACK<re::SeekableInputStream>>((uint64_t)a1, a2, (uint64_t)a3, (uint64_t)a4, this, a6, a7);
      break;
    case 9:
      uint64_t v52 = re::TypeInfo::name(this)[1];
      re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::setError((uint64_t)a1, a2, "Pointer type (\"%s\") needs to be handled explicitly by the serializer.", v28, v29, v30, v31, v32, v52);
      return 0;
    default:
      re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::setError((uint64_t)a1, a2, "Invalid type category. Value = %d", (uint64_t)a4, (uint64_t)this, a6, a7, a8, *((unsigned char *)this + 12));
      return 0;
  }
  return result;
}

uint64_t re::serializeBasic<re::EncoderOPACK<re::SeekableInputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re::TypeInfo *this, const re::TypeInfo *a6, char a7)
{
  int v10 = (int)a3;
  if (this != a6)
  {
    if (*(void *)this != *(void *)a6)
    {
      if (re::areSameTranslatedVersion(this, a6, a3)) {
        goto LABEL_4;
      }
LABEL_21:
      re::internal::setTypeMismatchError<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, this, a6);
      return 0;
    }
    uint64_t v18 = **((void **)this + 2);
    uint64_t v19 = **((void **)a6 + 2);
    if ((unsigned __int16)v18 != (unsigned __int16)v19) {
      goto LABEL_21;
    }
    BOOL v21 = WORD1(v18) == WORD1(v19);
    uint64_t v20 = (v19 ^ v18) & 0xFFFFFF00000000;
    BOOL v21 = v21 && v20 == 0;
    if (!v21) {
      goto LABEL_21;
    }
  }
LABEL_4:
  uint64_t v14 = re::TypeInfo::name(this);
  unint64_t v15 = (unint64_t)*v14 >> 1;
  if (v15 > 0xCA3DEFB5)
  {
    if ((unint64_t)*v14 >> 1 > 0x18E6A9A092)
    {
      if ((unint64_t)*v14 >> 1 <= 0x303EE8780EDLL)
      {
        if (v15 == 0x18E6A9A093)
        {
          return re::EncoderOPACK<re::SeekableInputStream>::serializeUnsignedInteger<unsigned char>(a1 + 24, a2, v10, a4, a7);
        }
        else
        {
          if (v15 != 0x303EE86A734) {
            goto LABEL_69;
          }
          return re::EncoderOPACK<re::SeekableInputStream>::serializeUnsignedInteger<unsigned short>(a1 + 24, a2, v10, (__int16 *)a4, a7);
        }
      }
      if (v15 == 0x303EE8780EELL)
      {
        return re::EncoderOPACK<re::SeekableInputStream>::serializeUnsignedInteger<unsigned int>(a1 + 24, a2, v10, (int *)a4, a7);
      }
      if (v15 != 0x303EE88E58DLL) {
        goto LABEL_69;
      }
    }
    else
    {
      if ((unint64_t)*v14 >> 1 > 0x16749DFF02)
      {
        if (v15 == 0x16749DFF03)
        {
LABEL_54:
          return re::EncoderOPACK<re::SeekableInputStream>::serializeSignedInteger<int>(a1 + 24, a2, v10, (int *)a4, a7);
        }
        uint64_t v22 = 0x16749F63A2;
LABEL_40:
        if (v15 == v22)
        {
          return re::EncoderOPACK<re::SeekableInputStream>::serializeSignedInteger<long long>(a1 + 24, a2, v10, a4, a7);
        }
LABEL_69:
        uint64_t v23 = re::TypeInfo::name(this);
        re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::setError(a1, a2, "Unsupported basic type \"%s\".", v24, v25, v26, v27, v28, v23[1]);
        return 0;
      }
      if (v15 != 3393056694)
      {
        uint64_t v17 = 0x16749D2549;
LABEL_26:
        if (v15 != v17) {
          goto LABEL_69;
        }
        return re::EncoderOPACK<re::SeekableInputStream>::serializeSignedInteger<short>(a1 + 24, a2, v10, (__int16 *)a4, a7);
      }
    }
    return re::EncoderOPACK<re::SeekableInputStream>::serializeUnsignedInteger<unsigned long long>(a1 + 24, a2, v10, a4, a7);
  }
  if ((unint64_t)*v14 >> 1 <= 0x5D0225B)
  {
    if ((unint64_t)*v14 >> 1 <= 0x2E9355)
    {
      if (v15 != 104431)
      {
        if (v15 == 3029738)
        {
          return re::EncoderOPACK<re::SeekableInputStream>::serializeBool(a1 + 24, a2, v10, a4, a7);
        }
        goto LABEL_69;
      }
      goto LABEL_54;
    }
    if (v15 != 3052374)
    {
      uint64_t v22 = 3327612;
      goto LABEL_40;
    }
    goto LABEL_46;
  }
  if ((unint64_t)*v14 >> 1 <= 0xB0F77BD0)
  {
    if (v15 == 97526364)
    {
      return re::EncoderOPACK<re::SeekableInputStream>::serializeFloat(a1 + 24, a2, v10, a4, a7);
    }
    uint64_t v17 = 109413500;
    goto LABEL_26;
  }
  if (v15 != 2969009105)
  {
    if (v15 != 3111160798) {
      goto LABEL_69;
    }
LABEL_46:
    return re::EncoderOPACK<re::SeekableInputStream>::serializeSignedInteger<signed char>(a1 + 24, a2, v10, a4, a7);
  }
  return re::EncoderOPACK<re::SeekableInputStream>::serializeDouble(a1 + 24, a2, v10, a4, a7);
}

uint64_t re::serializeEnum<re::EncoderOPACK<re::SeekableInputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, void *a4, uint64_t a5, uint64_t a6, int a7)
{
  if (a5 != a6)
  {
    if (*(void *)a5 == *(void *)a6)
    {
      uint64_t v14 = **(void **)(a5 + 16);
      uint64_t v15 = **(void **)(a6 + 16);
      if ((unsigned __int16)v14 == (unsigned __int16)v15)
      {
        BOOL v17 = WORD1(v14) == WORD1(v15);
        uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
        BOOL v17 = v17 && v16 == 0;
        if (v17) {
          goto LABEL_12;
        }
      }
    }
    else if (re::areSameTranslatedVersion((re *)a5, (const re::TypeInfo *)a6, a3))
    {
      goto LABEL_12;
    }
    if (*(unsigned __int8 *)(a5 + 12) != *(unsigned __int8 *)(a6 + 12)
      || (uint64_t v18 = re::TypeInfo::name((re::TypeInfo *)a5),
          uint64_t v19 = re::TypeInfo::name((re::TypeInfo *)a6),
          !re::StringID::operator==(v18, v19)))
    {
      re::internal::setTypeMismatchError<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, (re::TypeInfo *)a5, (re::TypeInfo *)a6);
      return 0;
    }
  }
LABEL_12:
  return re::internal::serializeEnumAsBinary<re::EncoderOPACK<re::SeekableInputStream>>(a1, a2, a3, a4, (re::internal *)a5, (re::internal *)a6, a7);
}

BOOL re::serializeOptional<re::EncoderOPACK<re::SeekableInputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, const re::TypeInfo *a6, int a7)
{
  int v11 = (int)a3;
  if (a5 == a6) {
    goto LABEL_11;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v14 = **((void **)a5 + 2);
    uint64_t v15 = **((void **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      BOOL v17 = WORD1(v14) == WORD1(v15);
      uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      BOOL v17 = v17 && v16 == 0;
      if (v17) {
        goto LABEL_11;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_11;
  }
  if (*((unsigned __int8 *)a5 + 12) != *((unsigned __int8 *)a6 + 12))
  {
    re::internal::setTypeMismatchError<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_11:
  if (a7)
  {
    v25[0] = 0;
    re::EncoderOPACK<re::SeekableInputStream>::beginOptional(a1 + 24, a2, v11, v25, 0);
    if (v25[0])
    {
      uint64_t v18 = *(re::internal **)(a1 + 208);
      re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), v27);
      re::TypeInfo::TypeInfo((uint64_t)v26, (uint64_t)&v28);
      re::internal::translateType(v18, (const re::TypeRegistry *)v26, (uint64_t)v27);
      if (!*(unsigned char *)(a1 + 64)) {
        (*(void (**)(uint64_t, const char *, void, void, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, a2, 0, 0, v27, v27, 1);
      }
    }
    uint64_t v19 = (_anonymous_namespace_ *)(a1 + 24);
  }
  else
  {
    re::TypeRegistry::typeInfo(*(void **)a5, *(void *)(*((void *)a5 + 2) + 72), v27);
    re::TypeInfo::TypeInfo((uint64_t)v26, (uint64_t)&v28);
    re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), v27);
    re::TypeInfo::TypeInfo((uint64_t)v25, (uint64_t)&v28);
    re::TypeInfo::TypeInfo((uint64_t)v27, (uint64_t)a5);
    BOOL v24 = (*(uint64_t (**)(uint64_t))(v29 + 80))(a4) != 0;
    double v20 = re::EncoderOPACK<re::SeekableInputStream>::beginOptional(a1 + 24, a2, v11, &v24, 0);
    if (v24)
    {
      Instance = re::TypeInfo::createInstance((re::TypeInfo *)v26, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 200));
      (*(void (**)(uint64_t, void **))(v29 + 88))(a4, Instance);
      re::TypeInfo::releaseInstance((re::TypeInfo *)v26, Instance, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 200));
    }
    else
    {
      (*(void (**)(uint64_t, void, double))(v29 + 88))(a4, 0, v20);
    }
    if (v24)
    {
      uint64_t v23 = (*(uint64_t (**)(uint64_t))(v29 + 80))(a4);
      if (!*(unsigned char *)(a1 + 64)) {
        (*(void (**)(uint64_t, const char *, void, uint64_t, unsigned char *, unsigned char *, void))(*(void *)a1 + 72))(a1, a2, 0, v23, v26, v25, 0);
      }
    }
    uint64_t v19 = (_anonymous_namespace_ *)(a1 + 24);
  }
  re::EncoderOPACK<re::SeekableInputStream>::endOptional(v19);
  return *(unsigned char *)(a1 + 64) == 0;
}

uint64_t re::serializeArray<re::EncoderOPACK<re::SeekableInputStream>>(unsigned char *a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  int v11 = (int)a3;
  if (a5 == a6) {
    goto LABEL_13;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v14 = **((void **)a5 + 2);
    uint64_t v15 = **((void **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      BOOL v17 = WORD1(v14) == WORD1(v15);
      uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      BOOL v17 = v17 && v16 == 0;
      if (v17) {
        goto LABEL_13;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((unsigned char *)a6 + 12) != 4) {
    goto LABEL_71;
  }
  uint64_t v18 = (void *)*((void *)a5 + 2);
  uint64_t v19 = (void *)*((void *)a6 + 2);
  int v20 = *((_DWORD *)v19 + 21) & 0xFFFFFF;
  if ((*((_DWORD *)v18 + 21) & 0xFFFFFF) != 0)
  {
    if (v20) {
      goto LABEL_13;
    }
LABEL_71:
    re::internal::setTypeMismatchError<re::EncoderBinary<re::SeekableInputStream>>((uint64_t)a1, a2, a5, a6);
    return 0;
  }
  if (v20 || *((_DWORD *)v18 + 22) != *((_DWORD *)v19 + 22)) {
    goto LABEL_71;
  }
LABEL_13:
  if (a7)
  {
    BOOL v21 = (re::internal *)*((void *)a1 + 26);
    re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v72);
    re::TypeInfo::TypeInfo((uint64_t)v68, (uint64_t)v73);
    re::internal::translateType(v21, (const re::TypeRegistry *)v68, (uint64_t)v69);
    uint64_t v22 = (*(uint64_t (**)(unsigned char *, unsigned char *))(*(void *)a1 + 80))(a1, v69);
    if (v22)
    {
      uint64_t v23 = (void (*)(unsigned char *, void, void, void, unsigned char *, unsigned char *, uint64_t))v22;
      BOOL v24 = (void *)*((void *)a6 + 2);
      int v25 = *((_DWORD *)v24 + 21) & 0xFFFFFF;
      if (v25) {
        unint64_t v26 = 0;
      }
      else {
        unint64_t v26 = *((int *)v24 + 22);
      }
      unint64_t v72 = v26;
      if (v70 == 1)
      {
        v68[0] = v26 * *(unsigned int *)(v71 + 8);
        int v58 = re::EncoderOPACK<re::SeekableInputStream>::beginBLOB((uint64_t)(a1 + 24), a2, v11, v68, 0);
        uint64_t result = 0;
        if (!v58) {
          return result;
        }
        if (v68[0]) {
          re::EncoderOPACK<re::SeekableInputStream>::serializeBLOB((uint64_t)(a1 + 24), 0, 1);
        }
        uint64_t v39 = (_anonymous_namespace_ *)(a1 + 24);
        goto LABEL_49;
      }
      if (v25) {
        int v59 = 8;
      }
      else {
        int v59 = 4;
      }
      uint64_t v48 = (_anonymous_namespace_ *)(a1 + 24);
      uint64_t result = re::EncoderOPACK<re::SeekableInputStream>::beginArray((uint64_t)(a1 + 24), a2, v11, (char *)&v72, v59);
      if (result)
      {
        unint64_t v60 = v72;
        if (v25) {
          BOOL v61 = v72 == 0;
        }
        else {
          BOOL v61 = 1;
        }
        char v62 = v61;
        if (!v61)
        {
          v67[0] = 0;
          v67[1] = 0xFFFFFFFFLL;
          (*(void (**)(unsigned char *, void, void *))(*(void *)a1 + 16))(a1, 0, v67);
          unint64_t v60 = v72;
        }
        if (v60)
        {
          unint64_t v63 = 0;
          do
          {
            v23(a1, 0, 0, 0, v69, v69, 1);
            ++v63;
          }
          while (v63 < v72);
        }
        if (v62) {
          goto LABEL_67;
        }
        goto LABEL_66;
      }
      return result;
    }
    goto LABEL_24;
  }
  re::TypeRegistry::typeInfo(*(void **)a5, *(void *)(*((void *)a5 + 2) + 72), &v72);
  re::TypeInfo::TypeInfo((uint64_t)v69, (uint64_t)v73);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v72);
  re::TypeInfo::TypeInfo((uint64_t)v68, (uint64_t)v73);
  re::TypeInfo::TypeInfo((uint64_t)&v72, (uint64_t)a5);
  uint64_t v27 = (*(uint64_t (**)(unsigned char *, unsigned char *))(*(void *)a1 + 80))(a1, v69);
  if (!v27)
  {
LABEL_24:
    uint64_t v40 = re::TypeInfo::name((re::TypeInfo *)v69);
    re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::setError((uint64_t)a1, 0, "Failed to resolve serialize function for type \"%s\"", v41, v42, v43, v44, v45, v40[1]);
    return 0;
  }
  uint64_t v28 = (void (*)(unsigned char *, void, void, uint64_t, unsigned char *, uint64_t *, void))v27;
  uint64_t v29 = re::ArrayAccessor::size((re::ArrayAccessor *)&v72, a4);
  uint64_t v30 = v29;
  uint64_t v66 = (const re::TypeInfo *)v29;
  if (v70 == 1)
  {
    unint64_t v65 = v29 * *(unsigned int *)(v71 + 8);
    int v34 = re::EncoderOPACK<re::SeekableInputStream>::beginBLOB((uint64_t)(a1 + 24), a2, v11, (uint64_t *)&v65, 0);
    uint64_t result = 0;
    if (v34)
    {
      unint64_t v36 = v65;
      unint64_t v37 = *(unsigned int *)(v71 + 8);
      if (result)
      {
        if (v36 >= v37)
        {
          uint64_t v38 = (char *)re::ArrayAccessor::elementAt((re::ArrayAccessor *)&v72, a4, 0);
          re::EncoderOPACK<re::SeekableInputStream>::serializeBLOB((uint64_t)(a1 + 24), v38, 0);
        }
        uint64_t v39 = (_anonymous_namespace_ *)(a1 + 24);
LABEL_49:
        re::EncoderOPACK<re::SeekableInputStream>::endBLOB(v39);
        return a1[64] == 0;
      }
    }
  }
  else
  {
    int v46 = *(_DWORD *)(*((void *)a5 + 2) + 84) & 0xFFFFFF;
    if (v46) {
      int v47 = 8;
    }
    else {
      int v47 = 4;
    }
    uint64_t v48 = (_anonymous_namespace_ *)(a1 + 24);
    uint64_t result = re::EncoderOPACK<re::SeekableInputStream>::beginArray((uint64_t)(a1 + 24), a2, v11, (char *)&v66, v47);
    if (result)
    {
      if (result)
      {
        uint64_t v52 = v66;
        if (v46) {
          BOOL v53 = v66 == 0;
        }
        else {
          BOOL v53 = 1;
        }
        char v54 = v53;
        if (!v53)
        {
          uint64_t v55 = *(void *)a4;
          v64[0] = 0;
          v64[1] = 0xFFFFFFFFLL;
          (*(void (**)(unsigned char *, uint64_t, void *))(*(void *)a1 + 16))(a1, v55, v64);
          uint64_t v52 = v66;
        }
        if (v52)
        {
          unint64_t v56 = 0;
          do
          {
            uint64_t v57 = re::ArrayAccessor::elementAt((re::ArrayAccessor *)&v72, a4, v56);
            v28(a1, 0, 0, v57, v69, v68, 0);
            ++v56;
          }
          while (v56 < (unint64_t)v66);
        }
        if (v54) {
          goto LABEL_67;
        }
LABEL_66:
        (*(void (**)(unsigned char *))(*(void *)a1 + 24))(a1);
LABEL_67:
        re::EncoderOPACK<re::SeekableInputStream>::endArray(v48);
        return a1[64] == 0;
      }
    }
  }
  return result;
}

uint64_t re::serializeList<re::EncoderOPACK<re::SeekableInputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, const re::TypeInfo *a6, int a7)
{
  int v11 = (int)a3;
  if (a5 == a6) {
    goto LABEL_11;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v14 = **((void **)a5 + 2);
    uint64_t v15 = **((void **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      BOOL v17 = WORD1(v14) == WORD1(v15);
      uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      BOOL v17 = v17 && v16 == 0;
      if (v17) {
        goto LABEL_11;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_11;
  }
  if (*((unsigned __int8 *)a5 + 12) != *((unsigned __int8 *)a6 + 12))
  {
    re::internal::setTypeMismatchError<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_11:
  if (a7)
  {
    uint64_t v18 = *(re::internal **)(a1 + 208);
    re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v65);
    re::TypeInfo::TypeInfo((uint64_t)v61, (uint64_t)&v66);
    re::internal::translateType(v18, (const re::TypeRegistry *)v61, (uint64_t)v62);
    uint64_t v19 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v62);
    if (v19)
    {
      unint64_t v65 = 0;
      if (v63 == 1)
      {
        v61[0] = 0;
        int v20 = re::EncoderOPACK<re::SeekableInputStream>::beginBLOB(a1 + 24, a2, v11, v61, 0);
        uint64_t result = 0;
        if (!v20) {
          return result;
        }
        if (v61[0]) {
          re::EncoderOPACK<re::SeekableInputStream>::serializeBLOB(a1 + 24, 0, 1);
        }
        uint64_t v22 = (_anonymous_namespace_ *)(a1 + 24);
LABEL_18:
        re::EncoderOPACK<re::SeekableInputStream>::endBLOB(v22);
        return *(unsigned char *)(a1 + 64) == 0;
      }
      uint64_t v45 = (void (*)(uint64_t, void, void, void, unsigned char *, unsigned char *, uint64_t))v19;
      int v46 = re::EncoderOPACK<re::SeekableInputStream>::beginArray(a1 + 24, a2, v11, (char *)&v65, 0);
      uint64_t result = 0;
      if (!v46) {
        return result;
      }
      if (v65)
      {
        for (unint64_t i = 0; i < v65; ++i)
          v45(a1, 0, 0, 0, v62, v62, 1);
      }
      uint64_t v44 = (_anonymous_namespace_ *)(a1 + 24);
LABEL_45:
      re::EncoderOPACK<re::SeekableInputStream>::endArray(v44);
      return *(unsigned char *)(a1 + 64) == 0;
    }
    goto LABEL_29;
  }
  re::TypeRegistry::typeInfo(*(void **)a5, *(void *)(*((void *)a5 + 2) + 72), &v65);
  re::TypeInfo::TypeInfo((uint64_t)v62, (uint64_t)&v66);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v65);
  re::TypeInfo::TypeInfo((uint64_t)v61, (uint64_t)&v66);
  re::TypeInfo::TypeInfo((uint64_t)&v65, (uint64_t)a5);
  uint64_t v23 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v62);
  if (!v23)
  {
LABEL_29:
    uint64_t v57 = re::TypeInfo::name((re::TypeInfo *)v62)[1];
    re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v36, v37, v38, v39, v40, v57);
    return 0;
  }
  BOOL v24 = (void (*)(uint64_t, void, void, uint64_t, unsigned char *, uint64_t *, void))v23;
  uint64_t v25 = (*(uint64_t (**)(uint64_t))(v67 + 80))(a4);
  uint64_t v26 = v25;
  unint64_t v60 = v25;
  if (*((unsigned char *)a5 + 12) == 5 && (*(unsigned char *)(*((void *)a5 + 2) + 48) & 8) != 0 && v63 == 1)
  {
    v59[0] = v25 * *(unsigned int *)(v64 + 8);
    int v31 = re::EncoderOPACK<re::SeekableInputStream>::beginBLOB(a1 + 24, a2, v11, v59, 0);
    uint64_t result = 0;
    if (!v31) {
      return result;
    }
    unint64_t v32 = v59[0];
    unint64_t v33 = *(unsigned int *)(v64 + 8);
    uint64_t v34 = v59[0] / v33;
    if (v59[0] / v33 * v33 == v59[0])
    {
      if (!result) {
        return result;
      }
      if (v32 >= v33)
      {
        uint64_t v35 = (char *)(*(uint64_t (**)(uint64_t, void))(v67 + 96))(a4, 0);
        re::EncoderOPACK<re::SeekableInputStream>::serializeBLOB(a1 + 24, v35, 0);
      }
      uint64_t v22 = (_anonymous_namespace_ *)(a1 + 24);
      goto LABEL_18;
    }
    re::Encoder<re::EncoderOPACK<re::SeekableInputStream>,re::SeekableInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), a2, "BLOB size mismatch: BLOB is %zu bytes, but list only accomodates %zu bytes (%zu elements * %zu bytes/element)", v27, v34, v28, v29, v30, v59[0]);
    return 0;
  }
  int v41 = re::EncoderOPACK<re::SeekableInputStream>::beginArray(a1 + 24, a2, v11, (char *)&v60, 0);
  uint64_t result = 0;
  if (v41)
  {
    if (result)
    {
      if (*(void *)(v67 + 96))
      {
        if (v60)
        {
          for (unint64_t j = 0; j < v60; ++j)
          {
            uint64_t v43 = (*(uint64_t (**)(uint64_t, unint64_t))(v67 + 96))(a4, j);
            v24(a1, 0, 0, v43, v62, v61, 0);
          }
        }
      }
      else
      {
        uint64_t v48 = *(uint64_t (**)(uint64_t, void))(v67 + 104);
        if (!v48 || !*(void *)(v67 + 112) || !*(void *)(v67 + 120))
        {
          re::TypeInfo::TypeInfo((uint64_t)v59, (uint64_t)&v65);
          uint64_t v58 = re::TypeInfo::name((re::TypeInfo *)v59)[1];
          re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::setError(a1, a2, "List type \"%s\" does not provide an indexer or iterator.", v52, v53, v54, v55, v56, v58);
          return 0;
        }
        uint64_t v49 = v48(a4, *(void *)(a1 + 56));
        uint64_t v50 = (*(uint64_t (**)(void))(v67 + 112))();
        if (v50)
        {
          uint64_t v51 = v50;
          do
          {
            v24(a1, 0, 0, v51, v62, v61, 0);
            uint64_t v51 = (*(uint64_t (**)(uint64_t))(v67 + 112))(v49);
          }
          while (v51);
        }
        (*(void (**)(uint64_t, void))(v67 + 120))(v49, *(void *)(a1 + 56));
      }
      uint64_t v44 = (_anonymous_namespace_ *)(a1 + 24);
      goto LABEL_45;
    }
  }
  return result;
}

BOOL re::serializeDictionary<re::EncoderOPACK<re::SeekableInputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, const re::TypeInfo *a6, int a7)
{
  int v11 = (int)a3;
  if (a5 == a6) {
    goto LABEL_11;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v14 = **((void **)a5 + 2);
    uint64_t v15 = **((void **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      BOOL v17 = WORD1(v14) == WORD1(v15);
      uint64_t v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      BOOL v17 = v17 && v16 == 0;
      if (v17) {
        goto LABEL_11;
      }
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_11;
  }
  if (*((unsigned __int8 *)a5 + 12) != *((unsigned __int8 *)a6 + 12))
  {
    re::internal::setTypeMismatchError<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_11:
  if (!a7)
  {
    re::TypeRegistry::typeInfo(*(void **)a5, *(void *)(*((void *)a5 + 2) + 72), &v55);
    re::TypeInfo::TypeInfo((uint64_t)v54, (uint64_t)v56);
    re::TypeRegistry::typeInfo(*(void **)a5, *(void *)(*((void *)a5 + 2) + 80), &v55);
    re::TypeInfo::TypeInfo((uint64_t)v53, (uint64_t)v56);
    re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v55);
    re::TypeInfo::TypeInfo((uint64_t)v52, (uint64_t)v56);
    re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v55);
    re::TypeInfo::TypeInfo((uint64_t)v51, (uint64_t)v56);
    re::TypeInfo::TypeInfo((uint64_t)v49, (uint64_t)a5);
    uint64_t v29 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v54);
    if (v29)
    {
      uint64_t v30 = (void (*)(uint64_t, const char *, void, void **, unsigned char *, unsigned char *, void, double))v29;
      uint64_t v31 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v53);
      if (v31)
      {
        unint64_t v32 = (void (*)(uint64_t, const char *, void, uint64_t, unsigned char *, unsigned char *, void))v31;
        unint64_t v48 = (*(uint64_t (**)(uint64_t))(v50 + 88))(a4);
        BOOL v24 = (_anonymous_namespace_ *)(a1 + 24);
        int v33 = re::EncoderOPACK<re::SeekableInputStream>::beginDictionary(a1 + 24, a2, v11, (char *)&v48, 0);
        BOOL result = 0;
        if (!v33) {
          return result;
        }
        uint64_t v34 = *(void *)(a1 + 48);
        uint64_t v35 = *(void (**)(uint64_t, unint64_t *, uint64_t))(v50 + 96);
        re::TypeInfo::TypeInfo((uint64_t)&v55, (uint64_t)v49);
        v35(a4, &v55, v34);
        if (v48)
        {
          Instance = re::TypeInfo::createInstance((re::TypeInfo *)v54, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 200));
          if (v48)
          {
            uint64_t v37 = 0;
            while (1)
            {
              double v38 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginDictionaryEntry(a1 + 24, 0);
              v30(a1, "key", 0, Instance, v54, v52, 0, v38);
              uint64_t v39 = *(re::Allocator **)(a1 + 48);
              if (*(unsigned char *)(a1 + 64)) {
                break;
              }
              uint64_t v40 = (*(uint64_t (**)(uint64_t, unsigned char *, re::Allocator *, void **))(v50 + 104))(a4, v49, v39, Instance);
              v32(a1, "value", 0, v40, v53, v51, 0);
              re::EncoderOPACK<re::SeekableInputStream>::endDictionaryEntry((_anonymous_namespace_ *)(a1 + 24));
              if (++v37 >= v48) {
                goto LABEL_27;
              }
            }
            re::TypeInfo::releaseInstance((re::TypeInfo *)v54, Instance, v39, *(void **)(a1 + 200));
            return 0;
          }
LABEL_27:
          re::TypeInfo::releaseInstance((re::TypeInfo *)v54, Instance, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 200));
        }
LABEL_28:
        re::EncoderOPACK<re::SeekableInputStream>::endDictionary(v24);
        return *(unsigned char *)(a1 + 64) == 0;
      }
      goto LABEL_31;
    }
LABEL_29:
    int v41 = (re::TypeInfo *)v54;
LABEL_32:
    uint64_t v42 = re::TypeInfo::name(v41);
    re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v43, v44, v45, v46, v47, v42[1]);
    return 0;
  }
  uint64_t v18 = *(re::internal **)(a1 + 208);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 72), &v55);
  re::TypeInfo::TypeInfo((uint64_t)v53, (uint64_t)v56);
  re::internal::translateType(v18, (const re::TypeRegistry *)v53, (uint64_t)v54);
  uint64_t v19 = *(re::internal **)(a1 + 208);
  re::TypeRegistry::typeInfo(*(void **)a6, *(void *)(*((void *)a6 + 2) + 80), &v55);
  re::TypeInfo::TypeInfo((uint64_t)v52, (uint64_t)v56);
  re::internal::translateType(v19, (const re::TypeRegistry *)v52, (uint64_t)v53);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v54);
  if (!v20) {
    goto LABEL_29;
  }
  BOOL v21 = (void (*)(uint64_t, const char *, void, void, unsigned char *, unsigned char *, uint64_t, double))v20;
  uint64_t v22 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 80))(a1, v53);
  if (!v22)
  {
LABEL_31:
    int v41 = (re::TypeInfo *)v53;
    goto LABEL_32;
  }
  uint64_t v23 = (void (*)(uint64_t, const char *, void, void, unsigned char *, unsigned char *, uint64_t))v22;
  unint64_t v55 = 0;
  BOOL v24 = (_anonymous_namespace_ *)(a1 + 24);
  int v25 = re::EncoderOPACK<re::SeekableInputStream>::beginDictionary(a1 + 24, a2, v11, (char *)&v55, 0);
  BOOL result = 0;
  if (v25)
  {
    if (v55)
    {
      for (unint64_t i = 0; i < v55; ++i)
      {
        double v28 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginDictionaryEntry(a1 + 24, 1);
        v21(a1, "key", 0, 0, v54, v54, 1, v28);
        v23(a1, "value", 0, 0, v53, v53, 1);
        re::EncoderOPACK<re::SeekableInputStream>::endDictionaryEntry((_anonymous_namespace_ *)(a1 + 24));
      }
    }
    goto LABEL_28;
  }
  return result;
}

uint64_t re::serializeUnion<re::EncoderOPACK<re::SeekableInputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re::TypeInfo *a5, re::TypeInfo *a6, int a7)
{
  int v11 = (int)a3;
  if (a5 == a6) {
    goto LABEL_4;
  }
  if (*(void *)a5 == *(void *)a6)
  {
    uint64_t v15 = **((void **)a5 + 2);
    uint64_t v16 = **((void **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      BOOL v18 = WORD1(v15) == WORD1(v16);
      uint64_t v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      BOOL v18 = v18 && v17 == 0;
      if (v18) {
        goto LABEL_4;
      }
    }
LABEL_19:
    re::internal::setTypeMismatchError<re::EncoderBinary<re::SeekableInputStream>>(a1, a2, a5, a6);
    return 0;
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3)) {
    goto LABEL_19;
  }
LABEL_4:
  uint64_t result = re::EncoderOPACK<re::SeekableInputStream>::beginObject(a1 + 24, a2, v11, 16);
  if (a7)
  {
    if (!result) {
      return result;
    }
    v19[0] = 0;
    re::EncoderOPACK<re::SeekableInputStream>::serializeUnsignedInteger<unsigned long long>(a1 + 24, "tag", 0, (char *)v19, 0);
    if (v19[0] < *(unsigned int *)(*((void *)a6 + 2) + 88))
    {
      re::TypeInfo::unionMember(a6, v19[0], (uint64_t)v21);
      if (!*(unsigned char *)(a1 + 64)) {
        (*(void (**)(uint64_t, const char *, void, void, unsigned char *, unsigned char *, uint64_t))(*(void *)a1 + 72))(a1, "value", 0, 0, v21, v21, 1);
      }
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    re::TypeInfo::TypeInfo((uint64_t)v21, (uint64_t)a5);
    unint64_t Tag = re::UnionAccessor::readTag((re::UnionAccessor *)v21, a4);
    re::EncoderOPACK<re::SeekableInputStream>::serializeUnsignedInteger<unsigned long long>(a1 + 24, "tag", 0, (char *)&Tag, 0);
    re::UnionAccessor::reset((re::UnionAccessor *)v21, a4, (const re::TypeInfo *)Tag, *(re::Allocator **)(a1 + 48));
    if (Tag < *(unsigned int *)(*((void *)a5 + 2) + 88))
    {
      re::TypeInfo::unionMember(a5, Tag, (uint64_t)v19);
      if (!*(unsigned char *)(a1 + 64)) {
        (*(void (**)(uint64_t, const char *, void, char *, unint64_t *, unint64_t *, void))(*(void *)a1 + 72))(a1, "value", 0, a4, v19, v19, 0);
      }
    }
  }
  re::EncoderOPACK<re::SeekableInputStream>::endObject(a1 + 24);
  return *(unsigned char *)(a1 + 64) == 0;
}

uint64_t re::serializeObject<re::EncoderOPACK<re::SeekableInputStream>>(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, re::TypeInfo *this, uint64_t a6, uint64_t a7)
{
  if (a7)
  {
    if (*(unsigned char *)(*((void *)this + 2) + 49))
    {
      uint64_t v19 = *(re::TypeRegistry **)(a1 + 208);
      v35[0] = 0x2686EB529B3EE220;
      v35[1] = "DynamicString";
      re::TypeRegistry::typeInfo(v19, (const re::StringID *)v35, v36);
      re::TypeInfo::TypeInfo((uint64_t)v38, (uint64_t)&v37);
      re::StringID::destroyString((re::StringID *)v35);
      uint64_t v20 = (re *)v38;
      BOOL v21 = (const re::TypeInfo *)v38;
      uint64_t v22 = a1;
      uint64_t v23 = a2;
      BOOL v24 = (const re::TypeInfo *)a3;
    }
    else
    {
      uint64_t v14 = re::TypeInfo::name(this);
      if ((unint64_t)*v14 >> 1 != 0x134375A94D9F7110) {
        goto LABEL_6;
      }
      uint64_t v15 = (const char *)v14[1];
      if (v15 != "DynamicString")
      {
        if (strcmp(v15, "DynamicString")) {
          goto LABEL_6;
        }
      }
      uint64_t v22 = a1;
      uint64_t v23 = a2;
      BOOL v24 = (const re::TypeInfo *)a3;
      uint64_t v20 = this;
      BOOL v21 = this;
    }
    re::serializeDynamicString<re::EncoderOPACK<re::SeekableInputStream>>(v22, v23, v24, 0, v20, v21, 1);
    return *(unsigned char *)(a1 + 64) == 0;
  }
LABEL_6:
  if ((*(unsigned char *)(*((void *)this + 2) + 48) & 4) == 0)
  {
    int v17 = re::EncoderOPACK<re::SeekableInputStream>::beginObject(a1 + 24, a2, a3, 0);
    uint64_t result = 0;
    if (!v17) {
      return result;
    }
    if (this == (re::TypeInfo *)a6) {
      goto LABEL_11;
    }
    if (*(void *)this == *(void *)a6)
    {
      uint64_t v25 = **((void **)this + 2);
      uint64_t v26 = **(void **)(a6 + 16);
      if ((unsigned __int16)v25 == (unsigned __int16)v26)
      {
        BOOL v28 = WORD1(v25) == WORD1(v26);
        uint64_t v27 = (v26 ^ v25) & 0xFFFFFF00000000;
        BOOL v28 = v28 && v27 == 0;
        if (v28) {
          goto LABEL_11;
        }
      }
    }
    else if (re::areSameTranslatedVersion(this, (const re::TypeInfo *)a6, v16))
    {
LABEL_11:
      re::internal::serializeMembersWithoutVersioning<re::EncoderOPACK<re::SeekableInputStream>>((unsigned char *)a1, a4, (uint64_t *)this, a7);
LABEL_26:
      re::EncoderOPACK<re::SeekableInputStream>::endObject(a1 + 24);
      return *(unsigned char *)(a1 + 64) == 0;
    }
    if (*((unsigned __int8 *)this + 12) == *(unsigned __int8 *)(a6 + 12))
    {
      re::internal::serializeMembersWithVersioning<re::EncoderOPACK<re::SeekableInputStream>>(a1, a4, (uint64_t *)this, (uint64_t *)a6, a7);
    }
    else
    {
      uint64_t v29 = re::TypeInfo::name(this)[1];
      re::TypeInfo::name((re::TypeInfo *)a6);
      re::Serializer<re::EncoderBinary<re::SeekableInputStream>>::setError(a1, 0, "Type categories of types \"%s\" (runtime) and \"%s\" (stream) don't match.", v30, v31, v32, v33, v34, v29);
    }
    goto LABEL_26;
  }
  return re::internal::serializeObjectWithOneMember<re::EncoderOPACK<re::SeekableInputStream>>((unsigned char *)a1, a2, a3, a4, (uint64_t *)this, (uint64_t *)a6, a7);
}

uint64_t re::EncoderOPACK<re::SeekableInputStream>::serializeBool(uint64_t a1, const char *a2, int a3, unsigned char *a4, char a5)
{
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  uint64_t v18 = 0;
  uint64_t result = re::EncoderOPACK<re::SeekableInputStream>::advance(a1, a2, a3, &v18, 0);
  if (result)
  {
    unsigned __int8 __dst = 0;
    if (*(unsigned char *)(a1 + 40))
    {
LABEL_5:
      for (uint64_t i = v18; i; --i)
        re::EncoderOPACK<re::SeekableInputStream>::skipObject(a1);
      uint64_t result = 1;
      if ((a5 & 2) == 0)
      {
        uint64_t v11 = *(void *)(a1 + 128);
        uint64_t v12 = *(void *)(a1 + 112) - 1;
        if (*(unsigned char *)(v11 + 48 * v12) != 2) {
          ++*(void *)(v11 + 48 * v12 + 32);
        }
      }
      return result;
    }
    uint64_t v13 = *(void *)(a1 + 168);
    if (v13)
    {
      uint64_t v14 = v13 - 1;
      int v15 = *(unsigned __int8 *)(a1 + v14 + 160);
      unsigned __int8 __dst = *(unsigned char *)(a1 + v14 + 160);
      *(void *)(a1 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v14;
    }
    else
    {
      if ((re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((void *)a1, (char *)&__dst, 1uLL) & 1) == 0)
      {
        re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, (uint64_t)"Boolean");
        goto LABEL_5;
      }
      int v15 = __dst;
    }
    if (v15 == 2)
    {
      if ((a5 & 1) == 0) {
        *a4 = 0;
      }
    }
    else
    {
      if (v15 != 1)
      {
        uint64_t v16 = re::OPACK::toString(v15);
        re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::setErrorUnexpectedTag((_anonymous_namespace_ *)a1, (uint64_t)"Boolean", (uint64_t)v16);
        return 0;
      }
      if ((a5 & 1) == 0) {
        *a4 = 1;
      }
    }
    goto LABEL_5;
  }
  return result;
}

uint64_t re::EncoderOPACK<re::SeekableInputStream>::serializeFloat(uint64_t a1, const char *a2, int a3, char *a4, char a5)
{
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  uint64_t v25 = 0;
  uint64_t result = re::EncoderOPACK<re::SeekableInputStream>::advance(a1, a2, a3, &v25, 0);
  if (result)
  {
    unsigned __int8 __dst = 0;
    if (*(unsigned char *)(a1 + 40)) {
      goto LABEL_5;
    }
    uint64_t v13 = *(void *)(a1 + 168);
    if (v13)
    {
      uint64_t v14 = v13 - 1;
      int v15 = *(unsigned __int8 *)(a1 + v14 + 160);
      unsigned __int8 __dst = *(unsigned char *)(a1 + v14 + 160);
      *(void *)(a1 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v14;
    }
    else
    {
      if (!re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((void *)a1, (char *)&__dst, 1uLL))goto LABEL_31; {
      int v15 = __dst;
      }
    }
    if (v15 != 53)
    {
      uint64_t v22 = re::OPACK::toString(v15);
      re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::setErrorUnexpectedTag((_anonymous_namespace_ *)a1, (uint64_t)"Float", (uint64_t)v22);
      return 0;
    }
    if (*(unsigned char *)(a1 + 40)) {
      goto LABEL_5;
    }
    unint64_t v16 = *(void *)(a1 + 168);
    if (v16)
    {
      uint64_t v17 = 4;
      if (v16 < 4) {
        uint64_t v17 = *(void *)(a1 + 168);
      }
      int64_t v18 = v16 - v17;
      if ((uint64_t)(v16 - 1) >= (uint64_t)(v16 - v17))
      {
        uint64_t v19 = *(void *)(a1 + 168);
        do
        {
          *a4++ = *(unsigned char *)(a1 + 159 + v19);
          int64_t v20 = v19 - 2;
          --v19;
        }
        while (v20 >= v18);
      }
      *(void *)(a1 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v18;
      if (v16 > 3) {
        goto LABEL_5;
      }
      size_t v21 = 4 - v17;
    }
    else
    {
      size_t v21 = 4;
    }
    if (a5) {
      uint64_t v23 = 0;
    }
    else {
      uint64_t v23 = a4;
    }
    if (re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((void *)a1, v23, v21))
    {
LABEL_5:
      for (uint64_t i = v25; i; --i)
        re::EncoderOPACK<re::SeekableInputStream>::skipObject(a1);
      uint64_t result = 1;
      if ((a5 & 2) == 0)
      {
        uint64_t v11 = *(void *)(a1 + 128);
        uint64_t v12 = *(void *)(a1 + 112) - 1;
        if (*(unsigned char *)(v11 + 48 * v12) != 2) {
          ++*(void *)(v11 + 48 * v12 + 32);
        }
      }
      return result;
    }
LABEL_31:
    re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, (uint64_t)"Float");
    goto LABEL_5;
  }
  return result;
}

uint64_t re::EncoderOPACK<re::SeekableInputStream>::serializeDouble(uint64_t a1, const char *a2, int a3, char *a4, char a5)
{
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  uint64_t v25 = 0;
  uint64_t result = re::EncoderOPACK<re::SeekableInputStream>::advance(a1, a2, a3, &v25, 0);
  if (result)
  {
    unsigned __int8 __dst = 0;
    if (*(unsigned char *)(a1 + 40)) {
      goto LABEL_5;
    }
    uint64_t v13 = *(void *)(a1 + 168);
    if (v13)
    {
      uint64_t v14 = v13 - 1;
      int v15 = *(unsigned __int8 *)(a1 + v14 + 160);
      unsigned __int8 __dst = *(unsigned char *)(a1 + v14 + 160);
      *(void *)(a1 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v14;
    }
    else
    {
      if (!re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((void *)a1, (char *)&__dst, 1uLL))goto LABEL_31; {
      int v15 = __dst;
      }
    }
    if (v15 != 54)
    {
      uint64_t v22 = re::OPACK::toString(v15);
      re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::setErrorUnexpectedTag((_anonymous_namespace_ *)a1, (uint64_t)"Double", (uint64_t)v22);
      return 0;
    }
    if (*(unsigned char *)(a1 + 40)) {
      goto LABEL_5;
    }
    unint64_t v16 = *(void *)(a1 + 168);
    if (v16)
    {
      uint64_t v17 = 8;
      if (v16 < 8) {
        uint64_t v17 = *(void *)(a1 + 168);
      }
      int64_t v18 = v16 - v17;
      if ((uint64_t)(v16 - 1) >= (uint64_t)(v16 - v17))
      {
        uint64_t v19 = *(void *)(a1 + 168);
        do
        {
          *a4++ = *(unsigned char *)(a1 + 159 + v19);
          int64_t v20 = v19 - 2;
          --v19;
        }
        while (v20 >= v18);
      }
      *(void *)(a1 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v18;
      if (v16 > 7) {
        goto LABEL_5;
      }
      size_t v21 = 8 - v17;
    }
    else
    {
      size_t v21 = 8;
    }
    if (a5) {
      uint64_t v23 = 0;
    }
    else {
      uint64_t v23 = a4;
    }
    if (re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((void *)a1, v23, v21))
    {
LABEL_5:
      for (uint64_t i = v25; i; --i)
        re::EncoderOPACK<re::SeekableInputStream>::skipObject(a1);
      uint64_t result = 1;
      if ((a5 & 2) == 0)
      {
        uint64_t v11 = *(void *)(a1 + 128);
        uint64_t v12 = *(void *)(a1 + 112) - 1;
        if (*(unsigned char *)(v11 + 48 * v12) != 2) {
          ++*(void *)(v11 + 48 * v12 + 32);
        }
      }
      return result;
    }
LABEL_31:
    re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, (uint64_t)"Double");
    goto LABEL_5;
  }
  return result;
}

uint64_t re::EncoderOPACK<re::SeekableInputStream>::advance(uint64_t a1, const char *a2, int a3, void *a4, _DWORD *a5)
{
  int v9 = *(unsigned __int8 *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 48);
  if (v9 == 2)
  {
    if (!re::EncoderOPACK<re::SeekableInputStream>::advance_KeyedContainer(a1, a2, a3)) {
      return 0;
    }
  }
  else if (v9 == 1 && !re::EncoderOPACK<re::SeekableInputStream>::advance_UnkeyedContainer(a1, a2))
  {
    return 0;
  }
  return re::EncoderOPACK<re::SeekableInputStream>::evaluateConditional(a1, a2, a5, a4);
}

uint64_t re::EncoderOPACK<re::SeekableInputStream>::readTag(uint64_t a1, const char *a2, char *__dst, uint64_t a4)
{
  if (!*(unsigned char *)(a1 + 40))
  {
    uint64_t v6 = *(void *)(a1 + 168);
    if (v6)
    {
      uint64_t v7 = v6 - 1;
      void *__dst = *(unsigned char *)(a1 + v7 + 160);
      *(void *)(a1 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7;
      return 1;
    }
    uint64_t v4 = 1;
    if (re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((void *)a1, __dst, 1uLL))return v4; {
    re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, a4);
    }
  }
  return 0;
}

BOOL re::EncoderOPACK<re::SeekableInputStream>::advance_UnkeyedContainer(uint64_t a1, const char *a2)
{
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 168);
  if (v4)
  {
    unint64_t v5 = v4 - 1;
    int v6 = *(unsigned __int8 *)(a1 + v4 - 1 + 160);
    *(void *)(a1 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v5;
  }
  else
  {
    unsigned __int8 __dst = 0;
    if (!re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((void *)a1, (char *)&__dst, 1uLL))
    {
      re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, (uint64_t)"Array element or terminator");
      return 0;
    }
    int v6 = __dst;
    unint64_t v5 = *(void *)(a1 + 168);
  }
  if (v5 <= 7)
  {
    *(void *)(a1 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v5 + 1;
    *(unsigned char *)(a1 + v5 + 160) = v6;
  }
  return v6 != 3;
}

uint64_t re::EncoderOPACK<re::SeekableInputStream>::advance_KeyedContainer(uint64_t a1, const char *a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 128);
  uint64_t v4 = *(void *)(a1 + 112) - 1;
  if ((*(unsigned char *)(v3 + 48 * v4 + 4) & 0x40) != 0) {
    return 1;
  }
  int v6 = *(_DWORD *)(v3 + 48 * v4 + 32);
  int v36 = v6;
  if (v6 == a3)
  {
LABEL_3:
    *(void *)(v3 + 48 * v4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2) = 0xFFFFFFFF80000000;
    return 1;
  }
  uint64_t v10 = a1 + 159;
  while (1)
  {
    if (v6 > a3)
    {
      uint64_t result = 0;
      *(void *)(*(void *)(a1 + 128) + 48 * *(void *)(a1 + 112) - 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 6) = v6;
      return result;
    }
    if ((v6 & 0x80000000) == 0) {
      re::EncoderOPACK<re::SeekableInputStream>::skipObject(a1);
    }
    unsigned __int8 __dst = 0;
    if (*(unsigned char *)(a1 + 40)) {
      return 0;
    }
    uint64_t v11 = *(void *)(a1 + 168);
    if (v11)
    {
      uint64_t v12 = v11 - 1;
      int v13 = *(unsigned __int8 *)(a1 + v11 - 1 + 160);
      unsigned __int8 __dst = v13;
      *(void *)(a1 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v12;
    }
    else
    {
      if ((re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((void *)a1, (char *)&__dst, 1uLL) & 1) == 0)
      {
        uint64_t v32 = "Integer (numeric tag)";
        goto LABEL_64;
      }
      int v13 = __dst;
    }
    if (v13 == 3) {
      break;
    }
    if ((v13 - 7) <= 0x28)
    {
      LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = v13 - 8;
      goto LABEL_53;
    }
    if (v13 != 50)
    {
      if (v13 != 49)
      {
        if (v13 != 48)
        {
          unint64_t v31 = *(void *)(a1 + 168);
          if (v31 <= 7)
          {
            *(void *)(a1 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v31 + 1;
            *(unsigned char *)(a1 + v31 + 160) = v13;
          }
          return 0;
        }
        char v34 = 0;
        if (*(unsigned char *)(a1 + 40)) {
          return 0;
        }
        uint64_t v14 = *(void *)(a1 + 168);
        if (v14)
        {
          uint64_t v15 = v14 - 1;
          LOBYTE(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = *(unsigned char *)(a1 + v14 - 1 + 160);
          *(void *)(a1 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v15;
        }
        else
        {
          if (!re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((void *)a1, &v34, 1uLL))
          {
            uint64_t v32 = "8-Bit Signed Integer";
            goto LABEL_64;
          }
          LOBYTE(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = v34;
        }
        LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = (char)v14;
        goto LABEL_53;
      }
      __int16 v33 = 0;
      if (*(unsigned char *)(a1 + 40)) {
        return 0;
      }
      unint64_t v23 = *(void *)(a1 + 168);
      if (!v23)
      {
        uint64_t v26 = (char *)&v33;
        size_t v29 = 2;
        goto LABEL_51;
      }
      if (v23 >= 2) {
        uint64_t v24 = 2;
      }
      else {
        uint64_t v24 = *(void *)(a1 + 168);
      }
      int64_t v25 = v23 - v24;
      uint64_t v26 = (char *)&v33;
      if ((uint64_t)(v23 - 1) >= (uint64_t)(v23 - v24))
      {
        uint64_t v27 = *(void *)(a1 + 168);
        do
        {
          *v26++ = *(unsigned char *)(v10 + v27);
          int64_t v28 = v27 - 2;
          --v27;
        }
        while (v28 >= v25);
      }
      *(void *)(a1 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v25;
      if (v23 <= 1)
      {
        size_t v29 = 2 - v24;
LABEL_51:
        if ((re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((void *)a1, v26, v29) & 1) == 0)
        {
          uint64_t v32 = "16-Bit Signed Integer";
          goto LABEL_64;
        }
      }
      LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 14) = v33;
LABEL_53:
      int v36 = v14;
      goto LABEL_54;
    }
    if (*(unsigned char *)(a1 + 40)) {
      return 0;
    }
    unint64_t v16 = *(void *)(a1 + 168);
    if (v16)
    {
      if (v16 >= 4) {
        uint64_t v17 = 4;
      }
      else {
        uint64_t v17 = *(void *)(a1 + 168);
      }
      int64_t v18 = v16 - v17;
      uint64_t v19 = (char *)&v36;
      if ((uint64_t)(v16 - 1) >= (uint64_t)(v16 - v17))
      {
        uint64_t v20 = *(void *)(a1 + 168);
        do
        {
          *v19++ = *(unsigned char *)(v10 + v20);
          int64_t v21 = v20 - 2;
          --v20;
        }
        while (v21 >= v18);
      }
      *(void *)(a1 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v18;
      if (v16 > 3) {
        goto LABEL_54;
      }
      size_t v22 = 4 - v17;
    }
    else
    {
      uint64_t v19 = (char *)&v36;
      size_t v22 = 4;
    }
    if ((re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((void *)a1, v19, v22) & 1) == 0)
    {
      uint64_t v32 = "32-Bit Signed Integer";
LABEL_64:
      re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, (uint64_t)v32);
      return 0;
    }
LABEL_54:
    int v6 = v36;
    if (v36 == a3)
    {
      uint64_t v3 = *(void *)(a1 + 128);
      uint64_t v4 = *(void *)(a1 + 112) - 1;
      goto LABEL_3;
    }
  }
  unint64_t v30 = *(void *)(a1 + 168);
  if (v30 <= 7)
  {
    *(void *)(a1 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v30 + 1;
    *(unsigned char *)(a1 + v30 + 160) = 3;
  }
  return 0;
}

uint64_t re::EncoderOPACK<re::SeekableInputStream>::evaluateConditional(uint64_t a1, const char *a2, _DWORD *a3, void *a4)
{
  if (*(unsigned char *)(a1 + 40)) {
    return 0;
  }
  unsigned __int8 __dst = 0;
  uint64_t v9 = *(void *)(a1 + 168);
  if (v9)
  {
    uint64_t v10 = v9 - 1;
    unsigned int v11 = *(unsigned __int8 *)(a1 + v9 - 1 + 160);
    unsigned __int8 __dst = v11;
    *(void *)(a1 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v10;
  }
  else
  {
    if (!re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((void *)a1, (char *)&__dst, 1uLL))
    {
LABEL_55:
      size_t v29 = "Array";
      goto LABEL_56;
    }
    unsigned int v11 = __dst;
  }
  uint64_t v12 = v11;
  unint64_t v13 = v11 - 209;
  if ((v11 + 33) < 0xF3u || v11 == 209)
  {
    unint64_t v15 = *(void *)(a1 + 168);
    if (v15 <= 7)
    {
      *(void *)(a1 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v15 + 1;
      *(unsigned char *)(a1 + v15 + 160) = v11;
    }
    return 1;
  }
  uint64_t v4 = 0;
  unsigned __int8 v56 = 0;
  if (*(unsigned char *)(a1 + 40)) {
    return v4;
  }
  uint64_t v17 = *(void *)(a1 + 168);
  if (v17)
  {
    uint64_t v18 = v17 - 1;
    int v19 = *(unsigned __int8 *)(a1 + v17 - 1 + 160);
    unsigned __int8 v56 = v19;
    *(void *)(a1 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v18;
    goto LABEL_21;
  }
  if (re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((void *)a1, (char *)&v56, 1uLL))
  {
    int v19 = v56;
LABEL_21:
    if (v19 != 69)
    {
      unint64_t v26 = *(void *)(a1 + 168);
      if (v26 <= 7)
      {
        *(void *)(a1 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v26 + 1;
        *(unsigned char *)(a1 + v26 + 160) = v19;
LABEL_35:
        unint64_t v27 = *(void *)(a1 + 168);
        if (v27 <= 7)
        {
          unsigned __int8 v28 = __dst;
          *(void *)(a1 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v27 + 1;
          *(unsigned char *)(a1 + v27 + 160) = v28;
        }
      }
      return 1;
    }
    __int16 v55 = 0;
    int v54 = 0;
    if (*(unsigned char *)(a1 + 40))
    {
LABEL_23:
      if (v54 == 1852793664 && v55 == 100)
      {
        uint64_t v34 = 0;
        uint64_t v35 = v12 - 210;
        unsigned int v36 = 1;
        while (!*(unsigned char *)(a1 + 40))
        {
          uint64_t v37 = *(void *)(a1 + 168);
          if (v37)
          {
            uint64_t v38 = v37 - 1;
            unsigned __int8 v39 = *(unsigned char *)(a1 + v37 - 1 + 160);
            unsigned __int8 __dst = v39;
            *(void *)(a1 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v38;
          }
          else
          {
            if (!re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((void *)a1, (char *)&__dst, 1uLL))goto LABEL_55; {
            unsigned __int8 v39 = __dst;
            }
          }
          if ((v39 + 46) >= 0xDu)
          {
            re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels((_anonymous_namespace_ *)a1, a2, (re::DynamicString *)&v48);
            if (v49) {
              uint64_t v45 = v51;
            }
            else {
              uint64_t v45 = v50;
            }
            re::DynamicString::format((re::DynamicString *)"Failed to read version conditional \"%s\". Invalid condition.", (re::DynamicString *)&v52, v45);
            re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(a1, (uint64_t)&v52);
            if ((void)v52)
            {
              if (BYTE8(v52)) {
                (*(void (**)(void))(*(void *)v52 + 40))();
              }
              long long v52 = 0u;
              long long v53 = 0u;
            }
            if (v48 && (v49 & 1) != 0) {
              (*(void (**)(void))(*(void *)v48 + 40))();
            }
            return 0;
          }
          int v47 = 0;
          uint64_t v4 = re::EncoderOPACK<re::SeekableInputStream>::readIntegerAs<int>((_anonymous_namespace_ *)a1, a2, &v47);
          if ((v4 & 1) == 0)
          {
            re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels((_anonymous_namespace_ *)a1, a2, (re::DynamicString *)&v48);
            if (v49) {
              uint64_t v46 = v51;
            }
            else {
              uint64_t v46 = v50;
            }
            re::DynamicString::format((re::DynamicString *)"Failed to read version conditional \"%s\". Failed to read version.", (re::DynamicString *)&v52, v46);
            re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(a1, (uint64_t)&v52);
            if ((void)v52)
            {
              if (BYTE8(v52)) {
                (*(void (**)(void))(*(void *)v52 + 40))();
              }
              long long v52 = 0u;
              long long v53 = 0u;
            }
            if (v48 && (v49 & 1) != 0) {
              (*(void (**)(void))(*(void *)v48 + 40))();
            }
            return v4;
          }
          if (*(_DWORD *)(a1 + 136) <= v47 || v35 == v34)
          {
            if (a3) {
              *a3 = v47;
            }
            *a4 = v13 + ~v34;
            return v4;
          }
          re::EncoderOPACK<re::SeekableInputStream>::skipObject(a1);
          uint64_t v34 = v36;
          if (v13 <= v36++)
          {
            re::internal::assertLog((re::internal *)4, v40, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "evaluateConditional", 2285);
            _os_crash();
            __break(1u);
            goto LABEL_55;
          }
        }
        return 0;
      }
      unint64_t v21 = *(void *)(a1 + 168);
      if (v21 + 4 <= 7)
      {
        for (uint64_t i = 4; i != -1; --i)
        {
          char v23 = *((unsigned char *)&v54 + i);
          uint64_t v24 = *(void *)(a1 + 168);
          *(void *)(a1 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v24 + 1;
          *(unsigned char *)(a1 + v24 + 160) = v23;
        }
        unint64_t v21 = *(void *)(a1 + 168);
      }
      if (v21 <= 7)
      {
        unsigned __int8 v25 = v56;
        *(void *)(a1 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v21 + 1;
        *(unsigned char *)(a1 + v21 + 160) = v25;
        goto LABEL_35;
      }
      return 1;
    }
    unint64_t v30 = *(void *)(a1 + 168);
    if (v30)
    {
      uint64_t v31 = 5;
      if (v30 < 5) {
        uint64_t v31 = *(void *)(a1 + 168);
      }
      int64_t v32 = v30 - v31;
      if ((uint64_t)(v30 - 1) >= (uint64_t)(v30 - v31))
      {
        __int16 v33 = (char *)&v54;
        uint64_t v43 = *(void *)(a1 + 168);
        do
        {
          *v33++ = *(unsigned char *)(a1 + 159 + v43);
          int64_t v44 = v43 - 2;
          --v43;
        }
        while (v44 >= v32);
      }
      else
      {
        __int16 v33 = (char *)&v54;
      }
      *(void *)(a1 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v32;
      if (v30 > 4) {
        goto LABEL_23;
      }
      size_t v42 = 5 - v31;
    }
    else
    {
      __int16 v33 = (char *)&v54;
      size_t v42 = 5;
    }
    if ((re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((void *)a1, v33, v42) & 1) == 0)re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, (uint64_t)"Small String"); {
    goto LABEL_23;
    }
  }
  size_t v29 = "Small String";
LABEL_56:
  re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, (uint64_t)v29);
  return 0;
}

uint64_t re::EncoderOPACK<re::SeekableInputStream>::skipObject(uint64_t result)
{
  if (*(unsigned char *)(result + 40)) {
    return result;
  }
  uint64_t v1 = result;
  unsigned __int8 __dst = 0;
  uint64_t v2 = *(void *)(result + 168);
  if (v2)
  {
    uint64_t v3 = v2 - 1;
    int v4 = *(unsigned __int8 *)(result + v3 + 160);
    unsigned __int8 __dst = v4;
    *(void *)(v1 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v3;
  }
  else
  {
    if (!re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((void *)result, (char *)&__dst, 1uLL))
    {
      uint64_t v12 = "Member";
      unint64_t v13 = (_anonymous_namespace_ *)v1;
      return re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::setErrorWithType(v13, "unknown", (uint64_t)v12);
    }
    int v4 = __dst;
  }
  uint64_t result = (uint64_t)re::OPACK::toString(v4);
  uint64_t v5 = result;
  unsigned __int8 v6 = __dst;
  if (__dst > 0x2Fu)
  {
    switch(__dst)
    {
      case '0':
LABEL_20:
        if (*(unsigned char *)(v1 + 40)) {
          return result;
        }
        uint64_t v10 = (void *)v1;
        size_t v11 = 1;
        goto LABEL_73;
      case '1':
LABEL_30:
        if (*(unsigned char *)(v1 + 40)) {
          return result;
        }
        unint64_t v15 = *(void *)(v1 + 168);
        if (!v15)
        {
          size_t v11 = 2;
          goto LABEL_72;
        }
        uint64_t v8 = 2;
        if (v15 >= 2) {
          uint64_t v9 = 2;
        }
        else {
          uint64_t v9 = *(void *)(v1 + 168);
        }
        *(void *)(v1 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v15 - v9;
        if (v15 != 1) {
          return result;
        }
        goto LABEL_48;
      case '2':
      case '5':
LABEL_23:
        if (*(unsigned char *)(v1 + 40)) {
          return result;
        }
        unint64_t v14 = *(void *)(v1 + 168);
        if (!v14)
        {
          size_t v11 = 4;
          goto LABEL_72;
        }
        uint64_t v8 = 4;
        if (v14 >= 4) {
          uint64_t v9 = 4;
        }
        else {
          uint64_t v9 = *(void *)(v1 + 168);
        }
        *(void *)(v1 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v14 - v9;
        if (v14 > 3) {
          return result;
        }
        goto LABEL_48;
      case '3':
      case '6':
        goto LABEL_12;
      case '4':
        goto LABEL_37;
      default:
        switch(__dst)
        {
          case 0xC1u:
            goto LABEL_20;
          case 0xC2u:
            goto LABEL_30;
          case 0xC3u:
            if (*(unsigned char *)(v1 + 40)) {
              return result;
            }
            unint64_t v18 = *(void *)(v1 + 168);
            if (!v18)
            {
              size_t v11 = 3;
              goto LABEL_72;
            }
            uint64_t v19 = 3;
            if (v18 < 3) {
              uint64_t v19 = *(void *)(v1 + 168);
            }
            *(void *)(v1 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v18 - v19;
            size_t v11 = v19 ^ 3;
            if (v19 == 3) {
              return result;
            }
            goto LABEL_72;
          case 0xC4u:
            goto LABEL_23;
          default:
            goto LABEL_37;
        }
    }
  }
  if (__dst - 1 >= 4)
  {
    if (__dst == 5)
    {
      if (*(unsigned char *)(v1 + 40)) {
        return result;
      }
      unint64_t v17 = *(void *)(v1 + 168);
      if (!v17)
      {
        size_t v11 = 16;
        goto LABEL_72;
      }
      uint64_t v8 = 16;
      if (v17 >= 0x10) {
        uint64_t v9 = 16;
      }
      else {
        uint64_t v9 = *(void *)(v1 + 168);
      }
      *(void *)(v1 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v17 - v9;
      if (v17 > 0xF) {
        return result;
      }
    }
    else
    {
      if (__dst != 6)
      {
LABEL_37:
        if (__dst - 7 < 0x29) {
          return result;
        }
        if (__dst - 64 > 0x24)
        {
          if (__dst - 112 > 0x24)
          {
            if ((__dst + 96) >= 0x21u)
            {
              if ((__dst + 48) > 0xEu)
              {
                if (__dst == 223)
                {
                  uint64_t result = re::EncoderOPACK<re::SeekableInputStream>::readTag(v1, "unknown", (char *)&__dst, (uint64_t)"Array value/terminator");
                  if (result)
                  {
                    do
                    {
                      unsigned __int8 v23 = __dst;
                      if (__dst == 3) {
                        break;
                      }
                      unint64_t v24 = *(void *)(v1 + 168);
                      if (v24 <= 7)
                      {
                        *(void *)(v1 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v24 + 1;
                        *(unsigned char *)(v1 + v24 + 160) = v23;
                      }
                      re::EncoderOPACK<re::SeekableInputStream>::skipObject(v1);
                      uint64_t result = re::EncoderOPACK<re::SeekableInputStream>::readTag(v1, "unknown", (char *)&__dst, (uint64_t)"Array value/terminator");
                    }
                    while ((result & 1) != 0);
                  }
                }
                else if ((__dst + 32) > 0xEu)
                {
                  if (__dst == 239)
                  {
                    for (uint64_t result = re::EncoderOPACK<re::SeekableInputStream>::readTag(v1, "unknown", (char *)&__dst, (uint64_t)"Dictionary key/value/terminator");
                          result;
                          uint64_t result = re::EncoderOPACK<re::SeekableInputStream>::readTag(v1, "unknown", (char *)&__dst, (uint64_t)"Dictionary key/value/terminator"))
                    {
                      unsigned __int8 v28 = __dst;
                      if (__dst == 3) {
                        break;
                      }
                      unint64_t v29 = *(void *)(v1 + 168);
                      if (v29 <= 7)
                      {
                        *(void *)(v1 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v29 + 1;
                        *(unsigned char *)(v1 + v29 + 160) = v28;
                      }
                      uint64_t v30 = -2;
                      do
                      {
                        re::EncoderOPACK<re::SeekableInputStream>::skipObject(v1);
                        BOOL v27 = __CFADD__(v30++, 1);
                      }
                      while (!v27);
                    }
                  }
                  else
                  {
                    re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels((_anonymous_namespace_ *)v1, 0, (re::DynamicString *)&v32);
                    if (v33) {
                      uint64_t v31 = *(unsigned char **)&v34[7];
                    }
                    else {
                      uint64_t v31 = v34;
                    }
                    re::DynamicString::format((re::DynamicString *)"Failed to deserialize \"%s\". Found unsupported tag while skipping over data.", (re::DynamicString *)&v35, v31);
                    __n[0] = 400;
                    __n[1] = (size_t)re::FoundationErrorCategory(void)::instance;
                    __n[2] = v35;
                    __n[5] = v37;
                    *(_OWORD *)&__n[3] = v36;
                    re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(v1, (long long *)__n);
                    if (__n[2])
                    {
                      if (__n[3]) {
                        (*(void (**)(void))(*(void *)__n[2] + 40))();
                      }
                      memset(&__n[2], 0, 32);
                    }
                    uint64_t result = v32;
                    if (v32 && (v33 & 1) != 0) {
                      return (*(uint64_t (**)(void))(*(void *)v32 + 40))();
                    }
                  }
                }
                else
                {
                  unint64_t v25 = *(void *)(v1 + 168);
                  if (v25 <= 7)
                  {
                    *(void *)(v1 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v25 + 1;
                    *(unsigned char *)(v1 + v25 + 160) = v6;
                  }
                  __n[0] = 0;
                  uint64_t result = re::EncoderOPACK<re::SeekableInputStream>::readDictionaryTag(v1, "unknown", (char *)__n);
                  if (2 * __n[0])
                  {
                    size_t v26 = -2 * __n[0];
                    do
                    {
                      uint64_t result = re::EncoderOPACK<re::SeekableInputStream>::skipObject(v1);
                      BOOL v27 = __CFADD__(v26++, 1);
                    }
                    while (!v27);
                  }
                }
              }
              else
              {
                unint64_t v21 = *(void *)(v1 + 168);
                if (v21 <= 7)
                {
                  *(void *)(v1 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v21 + 1;
                  *(unsigned char *)(v1 + v21 + 160) = v6;
                }
                __n[0] = 0;
                uint64_t result = re::EncoderOPACK<re::SeekableInputStream>::readArrayTag(v1, "unknown", (char *)__n);
                for (i = __n[0]; i; uint64_t result = re::EncoderOPACK<re::SeekableInputStream>::skipObject(v1))
                  --i;
              }
            }
            return result;
          }
          unint64_t v20 = *(void *)(v1 + 168);
          if (v20 <= 7)
          {
            *(void *)(v1 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v20 + 1;
            *(unsigned char *)(v1 + v20 + 160) = v6;
          }
          __n[0] = 0;
          re::EncoderOPACK<re::SeekableInputStream>::readDataTag(v1, "unknown", (uint64_t *)__n);
        }
        else
        {
          unint64_t v16 = *(void *)(v1 + 168);
          if (v16 <= 7)
          {
            *(void *)(v1 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v16 + 1;
            *(unsigned char *)(v1 + v16 + 160) = v6;
          }
          __n[0] = 0;
          re::EncoderOPACK<re::SeekableInputStream>::readStringTag(v1, "unknown", (uint64_t *)__n);
        }
        return re::EncoderOPACK<re::SeekableInputStream>::readRaw(v1, "unknown", 0, __n[0], v5, 1);
      }
LABEL_12:
      if (*(unsigned char *)(v1 + 40)) {
        return result;
      }
      unint64_t v7 = *(void *)(v1 + 168);
      if (!v7)
      {
        size_t v11 = 8;
        goto LABEL_72;
      }
      uint64_t v8 = 8;
      if (v7 >= 8) {
        uint64_t v9 = 8;
      }
      else {
        uint64_t v9 = *(void *)(v1 + 168);
      }
      *(void *)(v1 + 16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 8) = v7 - v9;
      if (v7 > 7) {
        return result;
      }
    }
LABEL_48:
    size_t v11 = v8 - v9;
LABEL_72:
    uint64_t v10 = (void *)v1;
LABEL_73:
    uint64_t result = re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>(v10, 0, v11);
    if ((result & 1) == 0)
    {
      unint64_t v13 = (_anonymous_namespace_ *)v1;
      uint64_t v12 = (const char *)v5;
      return re::Encoder<re::EncoderBinary<re::SeekableInputStream>,re::SeekableInputStream>::setErrorWithType(v13, "unknown", (uint64_t)v12);
    }
  }
  return result;
}