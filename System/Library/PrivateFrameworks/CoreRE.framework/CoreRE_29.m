BOOL physx::Cm::ConeLimitHelper::getLimit(float *a1, float *a2, float *a3, float *a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  int v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;

  v5 = a2[2];
  v4 = a2[3];
  v6 = a2[1];
  v7 = 1.8447e19;
  if (v5 >= 0.0) {
    v8 = 1.8447e19;
  }
  else {
    v8 = -1.8447e19;
  }
  if (v6 < 0.0) {
    v7 = -1.8447e19;
  }
  if (v4 == -1.0) {
    v9 = v8;
  }
  else {
    v9 = v5 / (float)(v4 + 1.0);
  }
  if (v4 == -1.0) {
    v10 = v7;
  }
  else {
    v10 = v6 / (float)(v4 + 1.0);
  }
  v11 = fabsf(v9);
  v12 = a1[2];
  v13 = fabsf(v10);
  v14 = *a1;
  v15 = a1[1];
  v16 = (float)((float)((float)(v11 + v12) / (float)(1.0 - (float)(v11 * v12))) / *a1)
      * (float)((float)((float)(v11 + v12) / (float)(1.0 - (float)(v11 * v12))) / *a1);
  v17 = (float)((float)(v13 + v12) / (float)(1.0 - (float)(v13 * v12))) / v15;
  v18 = v16 + (float)(v17 * v17);
  if (v18 > 1.0)
  {
    v19 = *a2;
    v20 = v4 + v4;
    v21 = (float)((float)(v4 * (float)(v4 + v4)) + -1.0) + (float)(v19 * (float)(v19 + v19));
    v22 = (float)((float)(v19 + v19) * v6) + (float)(v5 * v20);
    v23 = (float)((float)(v19 + v19) * v5) - (float)(v6 * v20);
    if (v14 >= v15)
    {
      if (v13 < 0.000001)
      {
        if (v9 <= 0.0) {
          v25 = -v14;
        }
        else {
          v25 = *a1;
        }
        v24 = 0.0;
        goto LABEL_31;
      }
    }
    else if (v11 < 0.000001)
    {
      if (v10 >= 0.0) {
        v24 = -v15;
      }
      else {
        v24 = a1[1];
      }
      v25 = 0.0;
LABEL_31:
      v41 = v25 / (float)(v14 * v14);
      v42 = (float)-v24 / (float)(v15 * v15);
      v43 = (float)(v24 * v24) + (float)(v25 * v25);
      v44 = 1.0 / (float)(v43 + 1.0);
      v45 = (float)((float)(1.0 - v43) + (float)(1.0 - v43)) * (float)(v44 * v44);
      v46 = v25 + v25;
      v47 = v24 + v24;
      v48 = (float)(v25 + v25) * v45;
      v49 = (float)(v24 + v24) * v45;
      v50 = (float)((float)(1.0 - v43) * v45) + -1.0;
      v51 = (float)(0.0 - (float)(v24 * v42)) + (float)(v25 * v41);
      v52 = v44 * (float)((float)(v44 * v44) * (float)((float)(3.0 - v43) * (float)(v51 * -4.0)));
      v53 = (float)((float)(1.0 - v43) * v52) - (float)((float)(v51 + v51) * v45);
      v54 = (float)((float)(v41 + v41) * v45) + (float)(v46 * v52);
      v55 = (float)(v47 * v52) - (float)((float)(v42 + v42) * v45);
      v56 = (float)(v48 * v55) - (float)(v49 * v54);
      v57 = (float)(v49 * v53) - (float)(v50 * v55);
      v58 = (float)(v50 * v54) - (float)(v48 * v53);
      v59 = 1.0 / sqrtf((float)((float)(v54 * v54) + (float)(v53 * v53)) + (float)(v55 * v55));
      v60 = v56 * v59;
      v61 = v57 * v59;
      v62 = v58 * v59;
      *a3 = v60;
      a3[1] = v61;
      a3[2] = v62;
      *a4 = (float)((float)(v22 * (float)((float)(v49 * v60) - (float)(v50 * v62)))
                  + (float)((float)((float)(v48 * v62) - (float)(v49 * v61)) * v21))
          + (float)((float)((float)(v50 * v61) - (float)(v48 * v60)) * v23);
      return v18 > 1.0;
    }
    v26 = -v10;
    v27 = v14 * v14;
    v28 = v15 * v15;
    v29 = v11 * v14;
    v30 = v13 * v15;
    v31 = v29 - (float)(v14 * v14);
    if (v31 <= (float)(v30 - (float)(v15 * v15))) {
      v31 = v30 - (float)(v15 * v15);
    }
    v32 = 20;
    while (1)
    {
      v33 = 1.0 / (float)(v27 + v31);
      v34 = 1.0 / (float)(v28 + v31);
      v35 = (float)(v29 * v33) * (float)(v29 * v33);
      v36 = (float)(v30 * v34) * (float)(v30 * v34);
      v37 = (float)(v35 + v36) + -1.0;
      if (v37 < 0.0001) {
        break;
      }
      v31 = v31
          + (float)(v37
                  / (float)((float)((float)((float)(v33 * v35) + 0.0) + (float)(v36 * v34))
                          + (float)((float)((float)(v33 * v35) + 0.0) + (float)(v36 * v34))));
      if (!--v32)
      {
        v38 = (float)(v9 * v27) * v33;
        v39 = (float)(v28 * v26) * v34;
        v40 = 1.0
            / sqrtf((float)((float)(v38 / v14) * (float)(v38 / v14)) + (float)((float)(v39 / v15) * (float)(v39 / v15)));
        v25 = v38 * v40;
        v24 = v39 * v40;
        goto LABEL_31;
      }
    }
    v25 = (float)(v9 * v27) * v33;
    v24 = (float)(v28 * v26) * v34;
    goto LABEL_31;
  }
  return v18 > 1.0;
}

uint64_t physx::Dy::ArticulationV::addBody(uint64_t this)
{
  uint64_t v1 = this;
  memset(v4, 0, sizeof(v4));
  uint64_t v2 = *(unsigned int *)(this + 152);
  if ((*(_DWORD *)(this + 156) & 0x7FFFFFFFu) <= v2)
  {
    this = physx::shdfnd::Array<physx::Cm::SpatialVector,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVector>>::growAndPushBack(this + 144, v4);
  }
  else
  {
    v3 = (_OWORD *)(*(void *)(this + 144) + 32 * v2);
    _OWORD *v3 = 0uLL;
    v3[1] = 0uLL;
    *(_DWORD *)(this + 152) = v2 + 1;
  }
  *(unsigned char *)(v1 + 160) = 1;
  return this;
}

uint64_t physx::Dy::ArticulationV::removeBody(uint64_t this)
{
  *(unsigned char *)(this + 160) = 1;
  return this;
}

uint64_t physx::Dy::ArticulationV::getDofs(physx::Dy::ArticulationV *this)
{
  return 0;
}

uint64_t physx::Dy::ArticulationV::getDof(physx::Dy::ArticulationV *this)
{
  return 0;
}

uint64_t physx::Dy::ArticulationV::applyCache()
{
  return 0;
}

uint64_t physx::Dy::ArticulationV::getLambda()
{
  return 0;
}

uint64_t physx::Dy::ArticulationV::storeStaticConstraint()
{
  return 0;
}

uint64_t physx::Dy::ArticulationV::willStoreStaticConstraint(physx::Dy::ArticulationV *this)
{
  return 0;
}

void physx::Dy::Articulation::onUpdateSolverDesc(void **this)
{
  bzero(this[25], (48 * *((_DWORD *)this + 52)));
  uint64_t v2 = this[23];
  size_t v3 = (48 * *((_DWORD *)this + 52));
  bzero(v2, v3);
}

uint64_t physx::Dy::Articulation::getCurrentTransform(physx::Dy::Articulation *this, unsigned int a2)
{
  return *((void *)this + 29) + 28 * a2;
}

uint64_t physx::Dy::Articulation::getDeltaQ(physx::Dy::Articulation *this, unsigned int a2)
{
  return *((void *)this + 31) + 16 * a2;
}

uint64_t physx::shdfnd::Array<physx::Cm::SpatialVector,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVector>>::growAndPushBack(uint64_t a1, _OWORD *a2)
{
  int v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5) {
    uint64_t v6 = physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVector>::allocate(a1, 32 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  v8 = (_OWORD *)(v6 + 32 * v7);
  v9 = *(_OWORD **)a1;
  if (v7)
  {
    v10 = *(_OWORD **)a1;
    v11 = (_OWORD *)v6;
    do
    {
      _OWORD *v11 = *v10;
      v11[1] = v10[1];
      v11 += 2;
      v10 += 2;
    }
    while (v11 < v8);
  }
  _OWORD *v8 = *a2;
  v8[1] = a2[1];
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v9)
  {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    uint64_t v7 = *(unsigned int *)(a1 + 8);
  }
  *(void *)a1 = v6;
  *(_DWORD *)(a1 + 8) = v7 + 1;
  *(_DWORD *)(a1 + 12) = v5;
  return v6 + 32 * v7;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVector>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVector>::getName() [T = physx::Cm::SpatialVector]";
  }
  else {
    v8 = "<allocation names disabled>";
  }
  v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    result = physx::shdfnd::ReflectionAllocator<char>::allocate(result, a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    int v4 = (unsigned char *)result;
  }
  else
  {
    int v4 = 0;
  }
  uint64_t v5 = *(unsigned int *)(v3 + 8);
  uint64_t v6 = *(char **)v3;
  if (v5)
  {
    uint64_t v7 = v4;
    do
    {
      char v8 = *v6++;
      *v7++ = v8;
      --v5;
    }
    while (v5);
    uint64_t v6 = *(char **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6) {
    result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<char>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    char v8 = "static const char *physx::shdfnd::ReflectionAllocator<char>::getName() [T = char]";
  }
  else {
    char v8 = "<allocation names disabled>";
  }
  v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::Array<physx::shdfnd::aos::Mat33V,physx::shdfnd::ReflectionAllocator<physx::shdfnd::aos::Mat33V>>::recreate(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = 48 * a2;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance, a2))
  {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::aos::Mat33V>::getName() [T = physx::shdfnd::aos::Mat33V]";
  }
  else
  {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v8 = result;
  unsigned int v9 = *(_DWORD *)(a1 + 8);
  v10 = *(long long **)a1;
  if (v9)
  {
    unint64_t v11 = result + 48 * v9;
    v12 = (_OWORD *)result;
    do
    {
      long long v13 = *v10;
      long long v14 = v10[2];
      v12[1] = v10[1];
      v12[2] = v14;
      _OWORD *v12 = v13;
      v12 += 3;
      v10 += 3;
    }
    while ((unint64_t)v12 < v11);
    v10 = *(long long **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + 12) = v2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxTransform,physx::shdfnd::ReflectionAllocator<physx::PxTransform>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::PxTransform>::allocate(result, 28 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v4 = result;
  }
  else
  {
    uint64_t v4 = 0;
  }
  unsigned int v5 = *(_DWORD *)(v3 + 8);
  uint64_t v6 = *(void *)v3;
  if (v5)
  {
    unint64_t v7 = v4 + 28 * v5;
    uint64_t v8 = *(void *)v3;
    unint64_t v9 = v4;
    do
    {
      *(_OWORD *)unint64_t v9 = *(_OWORD *)v8;
      *(void *)(v9 + 16) = *(void *)(v8 + 16);
      *(_DWORD *)(v9 + 24) = *(_DWORD *)(v8 + 24);
      v9 += 28;
      v8 += 28;
    }
    while (v9 < v7);
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::PxTransform>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxTransform>::getName() [T = physx::PxTransform]";
  }
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::Array<physx::PxQuat,physx::shdfnd::ReflectionAllocator<physx::PxQuat>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::PxQuat>::allocate(result, 16 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v4 = (_OWORD *)result;
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(unsigned int *)(v3 + 8);
  uint64_t v6 = *(long long **)v3;
  if (v5)
  {
    unint64_t v7 = (unint64_t)&v4[v5];
    uint64_t v8 = *(long long **)v3;
    unint64_t v9 = v4;
    do
    {
      long long v10 = *v8++;
      *v9++ = v10;
    }
    while ((unint64_t)v9 < v7);
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::PxQuat>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxQuat>::getName() [T = physx::PxQuat]";
  }
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::Array<physx::Cm::SpatialVectorV,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorV>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = 32 * a2;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorV>::getName() [T = physx::Cm::SpatialVectorV]";
  }
  else {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v8 = result;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  long long v10 = *(_OWORD **)a1;
  if (v9)
  {
    unint64_t v11 = result + 32 * v9;
    v12 = (_OWORD *)result;
    do
    {
      _OWORD *v12 = *v10;
      v12[1] = v10[1];
      v12 += 2;
      v10 += 2;
    }
    while ((unint64_t)v12 < v11);
    long long v10 = *(_OWORD **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

void physx::Dy::PxvRegisterArticulationsReducedCoordinate(physx::Dy *this)
{
  physx::Dy::ArticulationPImpl::sComputeUnconstrainedVelocities = (uint64_t)physx::Dy::FeatherstoneArticulation::computeUnconstrainedVelocities;
  physx::Dy::ArticulationPImpl::sUpdateBodies = (uint64_t)physx::Dy::FeatherstoneArticulation::updateBodies;
  physx::Dy::ArticulationPImpl::sUpdateBodiesTGS[0] = (uint64_t)physx::Dy::FeatherstoneArticulation::updateBodiesTGS;
  physx::Dy::ArticulationPImpl::sSaveVelocity[0] = (uint64_t)physx::Dy::FeatherstoneArticulation::saveVelocity;
  physx::Dy::ArticulationPImpl::sSaveVelocityTGS = (uint64_t)physx::Dy::FeatherstoneArticulation::saveVelocityTGS;
  physx::Dy::ArticulationPImpl::sUpdateDeltaMotion[0] = (uint64_t)physx::Dy::FeatherstoneArticulation::recordDeltaMotion;
  physx::Dy::ArticulationPImpl::sDeltaMotionToMotionVel = (uint64_t)physx::Dy::FeatherstoneArticulation::deltaMotionToMotionVelocity;
  physx::Dy::ArticulationPImpl::sComputeUnconstrainedVelocitiesTGS = (uint64_t)physx::Dy::FeatherstoneArticulation::computeUnconstrainedVelocitiesTGS;
  physx::Dy::ArticulationPImpl::sSetupInternalConstraintsTGS = (uint64_t)physx::Dy::FeatherstoneArticulation::setupSolverConstraintsTGS;
  physx::Dy::SolverCoreRegisterArticulationFns(this);
  physx::Dy::SolverCoreRegisterArticulationFnsCoulomb(v1);
}

uint64_t physx::Dy::FeatherstoneArticulation::computeUnconstrainedVelocities(uint64_t *a1, float a2, uint64_t a3, uint64_t a4, _DWORD *a5, float32x2_t *a6, uint64_t a7, float *a8, float32x2_t *a9)
{
  uint64_t v11 = *a1;
  uint64_t v12 = *a1 + 176;
  *(float *)(v11 + 648) = a2;
  physx::Dy::FeatherstoneArticulation::computeUnconstrainedVelocitiesInternal(v11, a6, a8, a9);
  uint64_t v13 = **(unsigned char **)(v11 + 664) & 1;
  long long v14 = *(uint64_t **)(v11 + 608);
  uint64_t v15 = *(unsigned int *)(v11 + 616);
  *a5 = 0;
  v16.n128_u32[0] = *(_DWORD *)(v11 + 648);
  v17.i32[0] = 1.0;
  v18.i32[0] = v16.n128_u32[0];
  physx::Dy::FeatherstoneArticulation::setupInternalConstraints(v11, v14, v15, v13, v12, (uint64_t)a8, 0, v16, v18, 1.0 / v16.n128_f32[0], v17, v19, v20, v21, v22);
  return 0;
}

void physx::Dy::FeatherstoneArticulation::updateBodies(float32x2_t ***a1, __n128 a2, float32x4_t a3, double a4)
{
}

void physx::Dy::FeatherstoneArticulation::updateBodiesTGS(float32x2_t ***a1, __n128 a2, float32x4_t a3, double a4)
{
}

uint64_t physx::Dy::FeatherstoneArticulation::saveVelocity(uint64_t *a1, float32x2_t *a2, double a3, double a4, double a5)
{
  uint64_t v6 = *a1;
  if (*(unsigned char *)(*a1 + 685)) {
    physx::Dy::PxcFsFlushVelocity(*a1, a2, a3, a4, a5);
  }
  memcpy(*(void **)(v6 + 304), *(const void **)(v6 + 320), (32 * *(_DWORD *)(v6 + 616)));
  uint64_t result = (uint64_t)memcpy(*(void **)(v6 + 288), *(const void **)(v6 + 240), (4 * *(_DWORD *)(v6 + 652)));
  uint64_t v8 = *a1;
  unint64_t v9 = *(unsigned int *)(v8 + 880);
  if (v9)
  {
    for (unint64_t i = 0; i < v9; ++i)
    {
      uint64_t v11 = *(void *)(v8 + 872);
      uint64_t v12 = *(unsigned __int8 **)(v11 + 48 * i + 32);
      int v13 = *v12;
      if (v13 == 3)
      {
        uint64_t result = physx::Dy::concludeContact(v11 + 48 * i);
        unint64_t v9 = *(unsigned int *)(v8 + 880);
      }
      else
      {
        int v14 = v12[1];
        if (v12[1])
        {
          if (v13 == 4) {
            uint64_t v15 = 160;
          }
          else {
            uint64_t v15 = 96;
          }
          __n128 v16 = v12 + 76;
          do
          {
            *(v16 - 4) = *v16;
            __n128 v16 = (_DWORD *)((char *)v16 + v15);
            --v14;
          }
          while (v14);
        }
      }
    }
  }
  return result;
}

uint64_t physx::Dy::FeatherstoneArticulation::recordDeltaMotion(uint64_t *a1, float32x2_t *a2, double a3, double _D1, double a5, float a6, float a7, float a8)
{
  float v8 = *(float *)&a3;
  uint64_t v9 = *a1;
  uint64_t v10 = *(unsigned int *)(*a1 + 616);
  float v252 = *(float *)&a3;
  uint64_t v245 = v10;
  if (*(unsigned char *)(*a1 + 685))
  {
    physx::Dy::PxcFsFlushVelocity(v9, a2, a3, _D1, a5);
    uint64_t v10 = v245;
    float v8 = v252;
  }
  uint64_t v11 = *(void *)(v9 + 432);
  uint64_t v12 = *(float32x2_t **)(v9 + 320);
  uint64_t result = *(void *)(v9 + 256);
  uint64_t v14 = *(void *)(v9 + 224);
  uint64_t v15 = *(void *)(v9 + 240);
  float v16 = *(float *)(v9 + 728) + v8;
  *(float *)(v9 + 728) = v16;
  *(float *)(v9 + 648) = v8;
  v240 = (void *)v9;
  uint64_t v241 = v14;
  v243 = v12;
  uint64_t v244 = v11;
  uint64_t v242 = result;
  if ((**(unsigned char **)(v9 + 664) & 1) == 0)
  {
    float32x4_t v17 = *(float32x2_t **)(v9 + 696);
    float v19 = v17->f32[0];
    float v18 = v17->f32[1];
    float v20 = v17[1].f32[0];
    float v21 = v17[1].f32[1];
    float32x2_t v22 = vadd_f32(v17[2], vmul_n_f32(v12[2], v8));
    float v23 = v17[3].f32[0] + (float)(v12[3].f32[0] * v8);
    float v24 = v12->f32[0] * v8;
    float v25 = v12->f32[1] * v8;
    float v26 = v12[1].f32[0] * v8;
    float v27 = (float)((float)(v25 * v25) + (float)(v24 * v24)) + (float)(v26 * v26);
    if (v27 >= 1.0e-24)
    {
      float v32 = sqrtf(v27);
      float v33 = v24 * (float)(1.0 / v32);
      float v34 = v25 * (float)(1.0 / v32);
      float v249 = v26 * (float)(1.0 / v32);
      __float2 v35 = __sincosf_stret(v32 * 0.5);
      float cosval = v35.__cosval;
      uint64_t v14 = v241;
      uint64_t result = v242;
      uint64_t v12 = v243;
      uint64_t v11 = v244;
      uint64_t v10 = v245;
      float v8 = v252;
      float v29 = v35.__sinval * v33;
      float v30 = v35.__sinval * v34;
      float v31 = v35.__sinval * v249;
    }
    else
    {
      float cosval = 1.0;
      float v29 = 0.0;
      float v30 = 0.0;
      float v31 = 0.0;
    }
    float32_t v36 = (float)((float)((float)(v21 * v29) + (float)(cosval * v19)) + (float)(v30 * v20)) - (float)(v18 * v31);
    a8 = (float)((float)((float)(v21 * v30) + (float)(cosval * v18)) + (float)(v31 * v19)) - (float)(v20 * v29);
    float32_t v37 = (float)((float)((float)(v21 * v31) + (float)(cosval * v20)) + (float)(v29 * v18)) - (float)(v19 * v30);
    float32_t v38 = (float)((float)((float)(cosval * v21) - (float)(v29 * v19)) - (float)(v30 * v18)) - (float)(v31 * v20);
    v17->f32[0] = v36;
    v17->f32[1] = a8;
    v17[1].f32[0] = v37;
    v17[1].f32[1] = v38;
    v17[2] = v22;
    v17[3].f32[0] = v23;
    uint64_t v9 = (uint64_t)v240;
    v39 = (float *)v240[56];
    float v40 = v39[1];
    float v41 = v39[2];
    float v42 = v39[3];
    float v43 = (float)((float)((float)(v36 * v42) - (float)(v38 * *v39)) - (float)(a8 * v41)) + (float)(v40 * v37);
    float v44 = (float)((float)((float)(a8 * v42) - (float)(v38 * v40)) - (float)(v37 * *v39)) + (float)(v41 * v36);
    float v45 = (float)((float)((float)(v37 * v42) - (float)(v38 * v41)) - (float)(v36 * v40)) + (float)(*v39 * a8);
    a7 = v36 * *v39;
    float v46 = (float)((float)(a7 + (float)(v38 * v42)) + (float)(a8 * v40)) + (float)(v37 * v41);
    if (v46 < 0.0)
    {
      float v43 = -v43;
      float v44 = -v44;
      float v45 = -v45;
      float v46 = -v46;
    }
    v47 = (float *)v240[89];
    float *v47 = v43;
    v47[1] = v44;
    v47[2] = v45;
    v47[3] = v46;
    *(float *)&_D1 = v12[3].f32[0] * v8;
    float32x2_t v48 = vadd_f32(vmul_n_f32(*v12, v8), *(float32x2_t *)v11);
    a6 = *(float *)(v11 + 8);
    *(float *)(v11 + 8) = (float)(v12[1].f32[0] * v8) + a6;
    float32x2_t v49 = vmul_n_f32(v12[2], v8);
    *(float32x2_t *)uint64_t v11 = v48;
    a5 = *(double *)(v11 + 16);
    *(float32x2_t *)(v11 + 16) = vadd_f32(v49, *(float32x2_t *)&a5);
    float v16 = *(float *)&_D1 + *(float *)(v11 + 24);
    *(float *)(v11 + 24) = v16;
  }
  if (v10 >= 2)
  {
    uint64_t v50 = *(void *)(v9 + 696);
    uint64_t v51 = 1;
    uint64_t v52 = 84;
    float v53 = -0.5;
    do
    {
      uint64_t v54 = *(void *)(v9 + 632);
      uint64_t v55 = *(void *)(v9 + 608) + 40 * v51;
      unsigned int v58 = *(_DWORD *)(v55 + 32);
      v56 = (unsigned int *)(v55 + 32);
      unsigned int v57 = v58;
      v59 = (float *)(v50 + 28 * v58);
      uint64_t v60 = *((void *)v56 - 1);
      uint64_t v61 = v54 + 80 * v51;
      uint64_t v62 = *(void *)(v9 + 512);
      v63 = (float *)(v62 + 76 * v51);
      uint64_t v64 = *(unsigned int *)(v61 + 72);
      _Q21 = *(float32x4_t *)(*(void *)(v9 + 592) + 16 * v51);
      v66 = (float *)(v14 + 4 * v64);
      v67 = (float *)(v15 + 4 * v64);
      v68 = (float *)(result + 4 * v64);
      float v69 = *(float *)(v60 + 44);
      float v70 = *(float *)(v60 + 48);
      float v71 = *(float *)(v60 + 52);
      float v72 = *(float *)(v60 + 16);
      float v73 = *(float *)(v60 + 20);
      float v74 = *(float *)(v60 + 24);
      switch(*(unsigned char *)(v60 + 270))
      {
        case 0:
          float v75 = *v68 + (float)((float)(*v66 + *v67) * v8);
          uint64_t v76 = *(unsigned __int8 *)(v60 + 252);
          if (*(unsigned char *)(v60 + v76 + 258) == 1)
          {
            uint64_t v77 = v60 + 8 * v76;
            float v78 = *(float *)(v77 + 56);
            if (v75 >= v78) {
              float v78 = *v68 + (float)((float)(*v66 + *v67) * v8);
            }
            if (v78 > *(float *)(v77 + 60)) {
              float v75 = *(float *)(v77 + 60);
            }
            else {
              float v75 = v78;
            }
          }
          float *v68 = v75;
          float *v66 = *v67 + *v66;
          float *v67 = 0.0;
          _S4 = v72 + v72;
          _S6 = v74 + v74;
          LODWORD(_D1) = _Q21.i32[3];
          __asm { FMLA            S7, S1, V21.S[3] }
          float v16 = _Q21.f32[1];
          LODWORD(a5) = _Q21.i32[2];
          __asm
          {
            FMLA            S16, S6, V21.S[2]
            FMLA            S17, S6, V21.S[1]
            FMLA            S18, S4, V21.S[2]
            FMLA            S18, S16, V21.S[1]
            FMLA            S4, S16, V21.S[2]
          }
          float v91 = vmlas_n_f32(vmuls_lane_f32(_S17, _Q21, 3) + (float)((float)(v72 + v72) * _S7), _S16, _Q21.f32[0]) - v69;
          float v92 = _S4 - v71;
          v93 = (float *)(v62 + 76 * v51);
          float v94 = v75 * v93[4];
          float v95 = v75 * v93[5];
          a6 = v91 + (float)(v75 * v93[3]);
          a7 = (float)(_S18 - v70) + v94;
          a8 = v92 + v95;
          break;
        case 1:
          float v96 = *v68 + (float)((float)(*v66 + *v67) * v8);
          uint64_t v250 = *(void *)(v9 + 632);
          long long v246 = *(_OWORD *)(*(void *)(v9 + 592) + 16 * v51);
          uint64_t v97 = v52;
          if (*(unsigned char *)(v60 + 329))
          {
            uint64_t v98 = v60 + 8 * *(unsigned __int8 *)(v60 + 252);
            if (v96 < *(float *)(v98 + 56)) {
              float v96 = *(float *)(v98 + 56);
            }
            if (v96 > *(float *)(v98 + 60)) {
              float v96 = *(float *)(v98 + 60);
            }
          }
          float *v68 = v96;
          float *v66 = *v67 + *v66;
          float *v67 = 0.0;
          __float2 v100 = __sincosf_stret(v96 * v53);
          _S1 = v100.__cosval;
          _S2 = v100.__sinval * *v63;
          _S3 = v100.__sinval * v63[1];
          _S0 = v100.__sinval * v63[2];
          if (v100.__cosval < 0.0)
          {
            _S2 = -_S2;
            _S3 = -_S3;
            _S0 = -_S0;
            _S1 = -v100.__cosval;
          }
          _Q16 = v246;
          __asm
          {
            FMLA            S4, S3, V16.S[2]
            FMLS            S4, S0, V16.S[1]
            FMLA            S5, S1, V16.S[1]
            FMLS            S5, S2, V16.S[2]
            FMLA            S6, S1, V16.S[2]
            FMLA            S6, S2, V16.S[1]
            FMLS            S6, S3, V16.S[0]
            FMLA            S7, S1, V16.S[3]
            FMLS            S7, S3, V16.S[1]
            FMLS            S7, S0, V16.S[2]
          }
          float v115 = sqrtf((float)((float)((float)(_S5 * _S5) + (float)(_S4 * _S4)) + (float)(_S6 * _S6)) + (float)(_S7 * _S7));
          _Q21.f32[0] = _S4 / v115;
          float v16 = _S5 / v115;
          *(float *)&a5 = _S6 / v115;
          *(float *)&_D1 = _S7 / v115;
          float v116 = v53 + (float)(*(float *)&_D1 * *(float *)&_D1);
          float v117 = (float)((float)((float)(v73 + v73) * v16) + (float)(_Q21.f32[0] * (float)(v72 + v72)))
               + (float)(*(float *)&a5 * (float)(v74 + v74));
          a6 = (float)((float)((float)(*(float *)&_D1
                                     * (float)((float)(v16 * (float)(v74 + v74))
                                             - (float)(*(float *)&a5 * (float)(v73 + v73))))
                             + (float)((float)(v72 + v72) * v116))
                     + (float)(_Q21.f32[0] * v117))
             - v69;
          a7 = (float)((float)((float)(*(float *)&_D1
                                     * (float)((float)(*(float *)&a5 * (float)(v72 + v72))
                                             - (float)(_Q21.f32[0] * (float)(v74 + v74))))
                             + (float)((float)(v73 + v73) * v116))
                     + (float)(v16 * v117))
             - v70;
          a8 = (float)((float)((float)(*(float *)&_D1
                                     * (float)((float)(_Q21.f32[0] * (float)(v73 + v73))
                                             - (float)(v16 * (float)(v72 + v72))))
                             + (float)((float)(v74 + v74) * v116))
                     + (float)(*(float *)&a5 * v117))
             - v71;
          float v8 = v252;
          uint64_t v11 = v244;
          uint64_t v10 = v245;
          uint64_t result = v242;
          uint64_t v12 = v243;
          uint64_t v14 = v241;
          uint64_t v52 = v97;
          uint64_t v54 = v250;
          break;
        case 2:
          uint64_t v118 = *(unsigned __int8 *)(v61 + 76);
          uint64_t v251 = v54;
          if (v118 > 2)
          {
            uint64_t v147 = v240[40];
            v148 = (float *)(v147 + 32 * v51);
            float v149 = v148[2];
            float v150 = *v148 * v8;
            float v151 = v148[1] * v8;
            float v152 = v149 * v8;
            float v153 = (float)((float)(v151 * v151) + (float)(v150 * v150)) + (float)(v152 * v152);
            uint64_t v239 = v240[66];
            float v236 = v148[1];
            float v238 = *v148;
            uint64_t v154 = v52;
            if (v153 >= 1.0e-24)
            {
              float v159 = sqrtf(v153);
              float v233 = v150 * (float)(1.0 / v159);
              float v234 = v151 * (float)(1.0 / v159);
              float v160 = v152 * (float)(1.0 / v159);
              float32x4_t v248 = _Q21;
              __float2 v161 = __sincosf_stret(v159 * 0.5);
              float v155 = v161.__cosval;
              _Q21 = v248;
              float v156 = v161.__sinval * v233;
              float v157 = v161.__sinval * v234;
              float v158 = v161.__sinval * v160;
              float v53 = -0.5;
            }
            else
            {
              float v155 = 1.0;
              float v156 = 0.0;
              float v157 = 0.0;
              float v158 = 0.0;
            }
            v162 = (float *)(v50 + 28 * v51);
            float v164 = v162[2];
            float v163 = v162[3];
            float v165 = v162[1];
            float v166 = (float)((float)((float)(v156 * v163) + (float)(v155 * *v162)) + (float)(v157 * v164))
                 - (float)(v165 * v158);
            float v167 = (float)((float)((float)(v157 * v163) + (float)(v155 * v165)) + (float)(v158 * *v162))
                 - (float)(v164 * v156);
            float v168 = (float)((float)((float)(v158 * v163) + (float)(v155 * v164)) + (float)(v156 * v165))
                 - (float)(*v162 * v157);
            float v169 = (float)((float)(v155 * v163) - (float)(v156 * *v162)) - (float)(v157 * v165);
            float32x4_t v255 = _Q21;
            v254[0] = v166;
            v254[1] = v167;
            v254[2] = v168;
            v254[3] = v169 - (float)(v158 * v164);
            long long v253 = *(_OWORD *)v59;
            physx::Dy::computeSphericalJointPositions(v256, v255.f32, v254, (float *)&v253, (uint64_t)v68, (uint64_t)v63);
            uint64_t v170 = 0;
            _Q21.f32[0] = v256[0];
            float v16 = v256[1];
            *(float *)&a5 = v256[2];
            *(float *)&_D1 = v256[3];
            v171 = (float *)(v147 + 32 * *v56);
            float v172 = v238 - *v171;
            float v173 = v236 - v171[1];
            float v174 = v149 - v171[2];
            uint64_t v52 = v154;
            v175 = (float *)(v239 + v154);
            do
            {
              float v176 = (float)(v173 * *(v175 - 1)) + (float)(*(v175 - 2) * v172);
              float v177 = *v175;
              v175 += 6;
              v66[v170++] = v176 + (float)(v177 * v174);
            }
            while (v170 != 3);
            float v8 = v252;
            uint64_t v9 = (uint64_t)v240;
            uint64_t v14 = v241;
            uint64_t v11 = v244;
            uint64_t v10 = v245;
            uint64_t result = v242;
            uint64_t v12 = v243;
            uint64_t v54 = v251;
          }
          else
          {
            float v235 = *(float *)(v60 + 44);
            float v237 = *(float *)(v60 + 48);
            float32x4_t v247 = _Q21;
            if (*(unsigned char *)(v61 + 76))
            {
              uint64_t v119 = v52;
              v120 = (float *)(v62 + v52);
              float v121 = 0.0;
              _S10 = 1.0;
              float v123 = 0.0;
              float v124 = 0.0;
              do
              {
                float v125 = *v66 + *v67;
                *v66++ = v125;
                float *v68 = *v68 + (float)(v125 * v8);
                *v67++ = 0.0;
                float v126 = *v68++;
                __float2 v127 = __sincosf_stret(v126 * -0.5);
                float v8 = v252;
                float v128 = *(v120 - 2) * v127.__sinval;
                float v129 = v127.__sinval * *(v120 - 1);
                float v130 = *v120;
                v120 += 6;
                float v131 = v127.__sinval * v130;
                float v132 = -v128;
                if (v127.__cosval < 0.0) {
                  float v129 = -v129;
                }
                else {
                  float v132 = v128;
                }
                if (v127.__cosval < 0.0) {
                  float v133 = -v131;
                }
                else {
                  float v133 = v131;
                }
                if (v127.__cosval < 0.0) {
                  float v134 = -v127.__cosval;
                }
                else {
                  float v134 = v127.__cosval;
                }
                _S0 = (float)((float)((float)(v124 * v134) + (float)(_S10 * v132)) + (float)(v123 * v133))
                    - (float)(v129 * v121);
                _S1 = (float)((float)((float)(v123 * v134) + (float)(_S10 * v129)) + (float)(v121 * v132))
                    - (float)(v133 * v124);
                _S2 = (float)((float)((float)(v121 * v134) + (float)(_S10 * v133)) + (float)(v124 * v129))
                    - (float)(v132 * v123);
                _S10 = (float)((float)((float)(_S10 * v134) - (float)(v124 * v132)) - (float)(v123 * v129))
                     - (float)(v121 * v133);
                float v121 = _S2;
                float v123 = _S1;
                float v124 = _S0;
                --v118;
              }
              while (v118);
            }
            else
            {
              uint64_t v119 = v52;
              _S10 = 1.0;
              _S0 = 0.0;
              _S1 = 0.0;
              _S2 = 0.0;
            }
            _Q7 = v247;
            __asm
            {
              FMLA            S3, S1, V7.S[2]
              FMLS            S3, S2, V7.S[1]
              FMLA            S4, S10, V7.S[1]
              FMLS            S4, S0, V7.S[2]
              FMLA            S5, S10, V7.S[2]
              FMLA            S5, S0, V7.S[1]
              FMLS            S5, S1, V7.S[0]
              FMLA            S6, S10, V7.S[3]
              FMLS            S6, S1, V7.S[1]
              FMLS            S6, S2, V7.S[2]
            }
            float v189 = sqrtf((float)((float)((float)(_S4 * _S4) + (float)(_S3 * _S3)) + (float)(_S5 * _S5)) + (float)(_S6 * _S6));
            _Q21.f32[0] = _S3 / v189;
            float v16 = _S4 / v189;
            *(float *)&a5 = _S5 / v189;
            *(float *)&_D1 = _S6 / v189;
            uint64_t v9 = (uint64_t)v240;
            uint64_t v14 = v241;
            uint64_t v11 = v244;
            uint64_t v10 = v245;
            uint64_t result = v242;
            uint64_t v12 = v243;
            uint64_t v52 = v119;
            float v53 = -0.5;
            uint64_t v54 = v251;
            float v70 = v237;
            float v69 = v235;
          }
          float v190 = v53 + (float)(*(float *)&_D1 * *(float *)&_D1);
          float v191 = (float)((float)((float)(v73 + v73) * v16) + (float)(_Q21.f32[0] * (float)(v72 + v72)))
               + (float)(*(float *)&a5 * (float)(v74 + v74));
          float v143 = (float)((float)(*(float *)&_D1
                               * (float)((float)(v16 * (float)(v74 + v74)) - (float)(*(float *)&a5 * (float)(v73 + v73))))
                       + (float)((float)(v72 + v72) * v190))
               + (float)(_Q21.f32[0] * v191);
          _S17 = (float)((float)((float)((float)(*(float *)&a5 * (float)(v72 + v72))
                                       - (float)(_Q21.f32[0] * (float)(v74 + v74)))
                               * *(float *)&_D1)
                       + (float)((float)(v73 + v73) * v190))
               + (float)(v16 * v191);
          _S5 = (float)((float)((float)((float)(_Q21.f32[0] * (float)(v73 + v73)) - (float)(v16 * (float)(v72 + v72)))
                              * *(float *)&_D1)
                      + (float)((float)(v74 + v74) * v190))
              + (float)(*(float *)&a5 * v191);
          goto LABEL_52;
        case 3:
          _S3 = v72 + v72;
          _S5 = v74 + v74;
          LODWORD(_D1) = HIDWORD(*(_OWORD *)(*(void *)(v9 + 592) + 16 * v51));
          __asm { FMLA            S6, S1, V21.S[3] }
          LODWORD(v16) = HIDWORD(*(void *)(*(void *)(v9 + 592) + 16 * v51));
          LODWORD(a5) = *(void *)(*(void *)(v9 + 592) + 16 * v51 + 8);
          __asm
          {
            FMLA            S7, S5, V21.S[2]
            FMLA            S16, S5, V21.S[1]
          }
          float v143 = vmlas_n_f32(vmuls_lane_f32(_S16, _Q21, 3) + (float)((float)(v72 + v72) * _S6), _S7, _Q21.f32[0]);
          __asm
          {
            FMLA            S17, S3, V21.S[2]
            FMLA            S17, S7, V21.S[1]
            FMLA            S5, S7, V21.S[2]
          }
LABEL_52:
          a6 = v143 - v69;
          a7 = _S17 - v70;
          a8 = _S5 - v71;
          break;
        default:
          break;
      }
      float v192 = v59[1];
      float v194 = v59[2];
      float v193 = v59[3];
      float v195 = (float)((float)((float)(*(float *)&_D1 * *v59) - (float)(v193 * _Q21.f32[0]))
                   - (float)(v192 * *(float *)&a5))
           + (float)(v16 * v194);
      float v196 = (float)((float)((float)(*(float *)&_D1 * v192) - (float)(v193 * v16)) - (float)(v194 * _Q21.f32[0]))
           + (float)(*(float *)&a5 * *v59);
      float v197 = (float)((float)((float)(*(float *)&_D1 * v194) - (float)(v193 * *(float *)&a5)) - (float)(*v59 * v16))
           + (float)(_Q21.f32[0] * v192);
      float v198 = (float)((float)((float)(_Q21.f32[0] * *v59) + (float)(v193 * *(float *)&_D1)) + (float)(v192 * v16))
           + (float)(v194 * *(float *)&a5);
      float v199 = sqrtf((float)((float)((float)(v196 * v196) + (float)(v195 * v195)) + (float)(v197 * v197))+ (float)(v198 * v198));
      float v16 = v195 / v199;
      *(float *)&_D1 = v196 / v199;
      *(float *)&a5 = v197 / v199;
      float v200 = v198 / v199;
      v201 = (float *)(v50 + 28 * v57);
      float v202 = v201[4];
      float v203 = v201[5];
      float v204 = v201[6];
      uint64_t v205 = *(void *)(v9 + 448);
      v206 = (float *)(v205 + 28 * v51);
      float v207 = v206[1];
      float v208 = v206[2];
      float v209 = v206[3];
      float v210 = (float)((float)((float)(v16 * v209) - (float)(v200 * *v206)) - (float)(*(float *)&_D1 * v208))
           + (float)(v207 * *(float *)&a5);
      float v211 = (float)((float)((float)(*(float *)&_D1 * v209) - (float)(v200 * v207)) - (float)(*(float *)&a5 * *v206))
           + (float)(v208 * v16);
      float v212 = (float)((float)((float)(*(float *)&a5 * v209) - (float)(v200 * v208)) - (float)(v16 * v207))
           + (float)(*v206 * *(float *)&_D1);
      float v213 = (float)((float)((float)(*v206 * v16) + (float)(v200 * v209)) + (float)(*(float *)&_D1 * v207))
           + (float)(*(float *)&a5 * v208);
      if (v213 < 0.0)
      {
        float v210 = -v210;
        float v211 = -v211;
        float v212 = -v212;
        float v213 = -v213;
      }
      v214 = (float *)(*(void *)(v9 + 712) + 16 * v51);
      float *v214 = v210;
      v214[1] = v211;
      v214[2] = v212;
      v214[3] = v213;
      int v215 = *(unsigned __int8 *)(v54 + 80 * v51 + 76);
      if (*(unsigned char *)(v54 + 80 * v51 + 76))
      {
        unsigned int v216 = *(_DWORD *)(v54 + 80 * v51 + 72);
        do
        {
          *(_DWORD *)(v15 + 4 * v216++) = 0;
          --v215;
        }
        while (v215);
      }
      float v217 = a6 + a6;
      float v218 = a7 + a7;
      float v219 = a8 + a8;
      float v220 = v53 + (float)(v200 * v200);
      float v221 = (float)((float)(v218 * *(float *)&_D1) + (float)(v16 * v217)) + (float)(*(float *)&a5 * v219);
      float v222 = (float)((float)(v200 * (float)((float)(*(float *)&_D1 * v219) - (float)(*(float *)&a5 * v218)))
                   + (float)(v217 * v220))
           + (float)(v16 * v221);
      float v223 = (float)((float)(v200 * (float)((float)(*(float *)&a5 * v217) - (float)(v16 * v219))) + (float)(v218 * v220))
           + (float)(*(float *)&_D1 * v221);
      float v224 = (float)((float)(v200 * (float)((float)(v16 * v218) - (float)(*(float *)&_D1 * v217))) + (float)(v219 * v220))
           + (float)(*(float *)&a5 * v221);
      a7 = v202 + v222;
      a8 = v203 + v223;
      a6 = v204 + v224;
      v225 = (float *)(v205 + 28 * v51);
      float32_t v226 = (float)(v202 + v222) - v225[4];
      float32_t v227 = (float)(v203 + v223) - v225[5];
      float32_t v228 = a6 - v225[6];
      v229 = &v12[4 * v51];
      float v230 = v229[1].f32[0] * v8;
      v231 = (float32x2_t *)(v11 + 32 * v51);
      float32x2_t *v231 = vadd_f32(vmul_n_f32(*v229, v8), *v231);
      v231[1].f32[0] = v230 + v231[1].f32[0];
      v231[2].f32[0] = v226;
      v231[2].f32[1] = v227;
      v231[3].f32[0] = v228;
      uint64_t v50 = *(void *)(v9 + 696);
      uint64_t v232 = v50 + 28 * v51;
      *(float *)uint64_t v232 = v16;
      *(_DWORD *)(v232 + 4) = LODWORD(_D1);
      *(_DWORD *)(v232 + 8) = LODWORD(a5);
      *(float *)(v232 + 12) = v200;
      *(float *)(v232 + 16) = a7;
      *(float *)(v232 + 20) = a8;
      *(float *)(v232 + 24) = a6;
      ++v51;
      v52 += 76;
    }
    while (v51 != v10);
  }
  return result;
}

void *physx::Dy::FeatherstoneArticulation::deltaMotionToMotionVelocity(void *result, float a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = *(unsigned int *)(*result + 616);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(v2 + 432);
    uint64_t v6 = 32 * v3;
    do
    {
      uint64_t v7 = *(void *)(v2 + 320) + v4;
      *(float *)&unsigned int v8 = *(float *)(v5 + v4 + 8) * a2;
      float v9 = *(float *)(v5 + v4 + 24);
      *(float32x2_t *)&long long v10 = vmul_n_f32(*(float32x2_t *)(v5 + v4), a2);
      *(float *)(v7 + 8) = *(float *)&v8;
      *(_DWORD *)(v7 + 12) = 0;
      float32x2_t v11 = *(float32x2_t *)(v5 + v4 + 16);
      *(void *)uint64_t v7 = v10;
      *((void *)&v10 + 1) = v8;
      *(float *)&unsigned int v12 = v9 * a2;
      *(float32x2_t *)&long long v13 = vmul_n_f32(v11, a2);
      *(void *)(v7 + 16) = v13;
      *((void *)&v13 + 1) = v12;
      *(float *)(v7 + 24) = *(float *)&v12;
      *(_DWORD *)(v7 + 28) = 0;
      uint64_t v14 = (_OWORD *)(result[2] + v4);
      *uint64_t v14 = v10;
      v14[1] = v13;
      v4 += 32;
    }
    while (v6 != v4);
  }
  return result;
}

void physx::Dy::FeatherstoneArticulation::computeUnconstrainedVelocitiesTGS(uint64_t *a1, float32x2_t *a2, float a3, uint64_t a4, float *a5, float32x2_t *a6)
{
  uint64_t v6 = *a1;
  *(float *)(v6 + 648) = a3;
  physx::Dy::FeatherstoneArticulation::computeUnconstrainedVelocitiesInternal(v6, a2, a5, a6);
}

uint64_t physx::Dy::FeatherstoneArticulation::setupSolverConstraintsTGS(uint64_t *a1, __n128 a2, float32x4_t a3, float32_t a4, float32x4_t a5, double a6, double a7, float32x4_t a8, float32x4_t a9, uint64_t a10, uint64_t a11, _DWORD *a12, uint64_t a13, uint64_t a14)
{
  LODWORD(a6) = a3.i32[0];
  *a12 = 0;
  a5.i32[0] = *(_DWORD *)"333?";
  a3.f32[0] = a4;
  physx::Dy::FeatherstoneArticulation::setupInternalConstraints(*a1, *(uint64_t **)(*a1 + 608), *(unsigned int *)(*a1 + 616), **(unsigned char **)(*a1 + 664) & 1, *a1 + 176, a14, 1, a2, a3, *(float *)&a6, a5, a6, a7, a8, a9);
  return 0;
}

uint64_t physx::shdfnd::Array<physx::Dy::SpatialSubspaceMatrix,physx::shdfnd::ReflectionAllocator<physx::Dy::SpatialSubspaceMatrix>>::resize(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = a2;
  uint64_t v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2) {
    uint64_t result = physx::shdfnd::Array<physx::Dy::SpatialSubspaceMatrix,physx::shdfnd::ReflectionAllocator<physx::Dy::SpatialSubspaceMatrix>>::recreate((uint64_t *)result, a2);
  }
  unsigned int v6 = *(_DWORD *)(v5 + 8);
  if (v6 < v4)
  {
    unint64_t v7 = *(void *)v5 + 76 * v4;
    unint64_t v8 = *(void *)v5 + 76 * v6;
    do
    {
      for (uint64_t i = 0; i != 72; i += 24)
      {
        long long v10 = (void *)(v8 + i);
        void *v10 = *(void *)(a3 + i);
        v10[1] = *(void *)(a3 + i + 8);
        v10[2] = *(void *)(a3 + i + 16);
      }
      *(_DWORD *)(v8 + 72) = *(_DWORD *)(a3 + 72);
      v8 += 76;
    }
    while (v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = v4;
  return result;
}

void physx::Dy::ArticulationData::resizeJointData(physx::Dy::ArticulationData *this, unsigned int a2)
{
  if ((*((_DWORD *)this + 11) & 0x7FFFFFFFu) < a2) {
    physx::shdfnd::Array<float,physx::shdfnd::ReflectionAllocator<float>>::recreate((uint64_t)this + 32, a2);
  }
  *((_DWORD *)this + 10) = a2;
  if ((*((_DWORD *)this + 15) & 0x7FFFFFFFu) < a2) {
    physx::shdfnd::Array<float,physx::shdfnd::ReflectionAllocator<float>>::recreate((uint64_t)this + 48, a2);
  }
  *((_DWORD *)this + 14) = a2;
  if ((*((_DWORD *)this + 19) & 0x7FFFFFFFu) < a2) {
    physx::shdfnd::Array<float,physx::shdfnd::ReflectionAllocator<float>>::recreate((uint64_t)this + 64, a2);
  }
  *((_DWORD *)this + 18) = a2;
  if ((*((_DWORD *)this + 23) & 0x7FFFFFFFu) < a2) {
    physx::shdfnd::Array<float,physx::shdfnd::ReflectionAllocator<float>>::recreate((uint64_t)this + 80, a2);
  }
  *((_DWORD *)this + 22) = a2;
  if ((*((_DWORD *)this + 27) & 0x7FFFFFFFu) < a2) {
    physx::shdfnd::Array<float,physx::shdfnd::ReflectionAllocator<float>>::recreate((uint64_t)this + 96, a2);
  }
  *((_DWORD *)this + 26) = a2;
  if ((*((_DWORD *)this + 31) & 0x7FFFFFFFu) < a2) {
    physx::shdfnd::Array<float,physx::shdfnd::ReflectionAllocator<float>>::recreate((uint64_t)this + 112, a2);
  }
  *((_DWORD *)this + 30) = a2;
  size_t v4 = 4 * a2;
  bzero(*((void **)this + 4), v4);
  bzero(*((void **)this + 6), v4);
  bzero(*((void **)this + 8), v4);
  bzero(*((void **)this + 14), v4);
  bzero(*((void **)this + 10), v4);
  uint64_t v5 = (void *)*((void *)this + 12);
  bzero(v5, v4);
}

void physx::Dy::FeatherstoneArticulation::~FeatherstoneArticulation(physx::Dy::FeatherstoneArticulation *this)
{
  *(void *)this = &unk_26E724328;
  int v2 = *((_DWORD *)this + 221);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0 && *((void *)this + 109) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v4 = *((_DWORD *)this + 215);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0 && *((void *)this + 106) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 78))
  {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((void *)this + 78) = 0;
  }
  if (*((void *)this + 79))
  {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((void *)this + 79) = 0;
  }
  if (*((void *)this + 80))
  {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((void *)this + 80) = 0;
  }
  int v6 = *((_DWORD *)this + 181);
  if ((v6 & 0x80000000) == 0 && (v6 & 0x7FFFFFFF) != 0 && *((void *)this + 89)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v7 = *((_DWORD *)this + 177);
  if ((v7 & 0x80000000) == 0 && (v7 & 0x7FFFFFFF) != 0 && *((void *)this + 87)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v8 = *((_DWORD *)this + 151);
  if ((v8 & 0x80000000) == 0 && (v8 & 0x7FFFFFFF) != 0 && *((void *)this + 74)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v9 = *((_DWORD *)this + 147);
  if ((v9 & 0x80000000) == 0 && (v9 & 0x7FFFFFFF) != 0 && *((void *)this + 72)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v10 = *((_DWORD *)this + 143);
  if ((v10 & 0x80000000) == 0 && (v10 & 0x7FFFFFFF) != 0 && *((void *)this + 70)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v11 = *((_DWORD *)this + 139);
  if ((v11 & 0x80000000) == 0 && (v11 & 0x7FFFFFFF) != 0 && *((void *)this + 68)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v12 = *((_DWORD *)this + 135);
  if ((v12 & 0x80000000) == 0 && (v12 & 0x7FFFFFFF) != 0 && *((void *)this + 66)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v13 = *((_DWORD *)this + 131);
  if ((v13 & 0x80000000) == 0 && (v13 & 0x7FFFFFFF) != 0 && *((void *)this + 64)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v14 = *((_DWORD *)this + 127);
  if ((v14 & 0x80000000) == 0 && (v14 & 0x7FFFFFFF) != 0 && *((void *)this + 62)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v15 = *((_DWORD *)this + 123);
  if ((v15 & 0x80000000) == 0 && (v15 & 0x7FFFFFFF) != 0 && *((void *)this + 60)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v16 = *((_DWORD *)this + 119);
  if ((v16 & 0x80000000) == 0 && (v16 & 0x7FFFFFFF) != 0 && *((void *)this + 58)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v17 = *((_DWORD *)this + 115);
  if ((v17 & 0x80000000) == 0 && (v17 & 0x7FFFFFFF) != 0 && *((void *)this + 56)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v18 = *((_DWORD *)this + 111);
  if ((v18 & 0x80000000) == 0 && (v18 & 0x7FFFFFFF) != 0 && *((void *)this + 54)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v19 = *((_DWORD *)this + 107);
  if ((v19 & 0x80000000) == 0 && (v19 & 0x7FFFFFFF) != 0 && *((void *)this + 52)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v20 = *((_DWORD *)this + 103);
  if ((v20 & 0x80000000) == 0 && (v20 & 0x7FFFFFFF) != 0 && *((void *)this + 50)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v21 = *((_DWORD *)this + 99);
  if ((v21 & 0x80000000) == 0 && (v21 & 0x7FFFFFFF) != 0 && *((void *)this + 48)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v22 = *((_DWORD *)this + 95);
  if ((v22 & 0x80000000) == 0 && (v22 & 0x7FFFFFFF) != 0 && *((void *)this + 46)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v23 = *((_DWORD *)this + 91);
  if ((v23 & 0x80000000) == 0 && (v23 & 0x7FFFFFFF) != 0 && *((void *)this + 44)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v24 = *((_DWORD *)this + 87);
  if ((v24 & 0x80000000) == 0 && (v24 & 0x7FFFFFFF) != 0 && *((void *)this + 42)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v25 = *((_DWORD *)this + 83);
  if ((v25 & 0x80000000) == 0 && (v25 & 0x7FFFFFFF) != 0 && *((void *)this + 40)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v26 = *((_DWORD *)this + 79);
  if ((v26 & 0x80000000) == 0 && (v26 & 0x7FFFFFFF) != 0 && *((void *)this + 38)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v27 = *((_DWORD *)this + 75);
  if ((v27 & 0x80000000) == 0 && (v27 & 0x7FFFFFFF) != 0 && *((void *)this + 36)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v28 = *((_DWORD *)this + 71);
  if ((v28 & 0x80000000) == 0 && (v28 & 0x7FFFFFFF) != 0 && *((void *)this + 34)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v29 = *((_DWORD *)this + 67);
  if ((v29 & 0x80000000) == 0 && (v29 & 0x7FFFFFFF) != 0 && *((void *)this + 32)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v30 = *((_DWORD *)this + 63);
  if ((v30 & 0x80000000) == 0 && (v30 & 0x7FFFFFFF) != 0 && *((void *)this + 30)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v31 = *((_DWORD *)this + 59);
  if ((v31 & 0x80000000) == 0 && (v31 & 0x7FFFFFFF) != 0 && *((void *)this + 28)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v32 = *((_DWORD *)this + 55);
  if ((v32 & 0x80000000) == 0 && (v32 & 0x7FFFFFFF) != 0 && *((void *)this + 26)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  physx::Dy::ArticulationV::~ArticulationV(this);
}

{
  uint64_t vars8;

  physx::Dy::FeatherstoneArticulation::~FeatherstoneArticulation(this);
  JUMPOUT(0x237DBCBC0);
}

void physx::Dy::FeatherstoneArticulation::computeDofs(physx::Dy::FeatherstoneArticulation *this)
{
  uint64_t v2 = *((unsigned int *)this + 154);
  if (v2 < 2)
  {
    int v4 = 0;
    unsigned int v3 = 0;
  }
  else
  {
    unsigned int v3 = 0;
    int v4 = 0;
    uint64_t v5 = 1;
    uint64_t v6 = 80;
    do
    {
      uint64_t v7 = 0;
      uint64_t v8 = *((void *)this + 79);
      uint64_t v9 = *(void *)(*((void *)this + 76) + 40 * v5 + 24);
      uint64_t v10 = v8 + 80 * v5;
      *(_WORD *)(v10 + 76) = 0;
      int v11 = (unsigned __int8 *)(v10 + 76);
      v11[3] = 0;
      int v12 = v11 + 3;
      uint64_t v13 = v9 + 258;
      do
      {
        if (*(unsigned char *)(v13 + v7))
        {
          uint64_t v14 = *v11;
          *(_DWORD *)(v8 + v6 + 24 * v14 + 4 * v7) = 1065353216;
          if (*(unsigned char *)(v13 + v7) == 1) {
            ++v11[1];
          }
          unsigned __int8 *v11 = v14 + 1;
          *(unsigned char *)(v9 + v14 + 252) = v7;
        }
        ++v7;
      }
      while (v7 != 6);
      unsigned __int8 *v12 = 0;
      int v15 = *v11;
      unsigned __int8 v16 = 0;
      if (*(unsigned char *)(v9 + 270) == 2 && v15 == 2)
      {
        for (uint64_t i = 0; i != 3; ++i)
        {
          if (!*(unsigned char *)(v9 + 258 + i))
          {
            uint64_t v19 = *v11;
            *(_DWORD *)(v8 + v6 + 24 * v19 + 4 * i) = 1065353216;
            unsigned __int8 *v11 = v19 + 1;
            *(unsigned char *)(v9 + v19 + 252) = i;
            unsigned __int8 v16 = *v12 + 1;
            unsigned __int8 *v12 = v16;
          }
        }
        int v15 = *v11;
      }
      *(unsigned char *)(v9 + 269) &= ~1u;
      *(_DWORD *)(v8 + 80 * v5 + 72) = v3;
      v3 += v15;
      v4 += v16;
      ++v5;
      v6 += 80;
    }
    while (v5 != v2);
  }
  if (v3 != *((_DWORD *)this + 163)) {
    physx::Dy::ArticulationData::resizeJointData((physx::Dy::FeatherstoneArticulation *)((char *)this + 176), v3);
  }
  *((_DWORD *)this + 163) = v3;
  *((_DWORD *)this + 164) = v4;
}

BOOL physx::Dy::FeatherstoneArticulation::resize(physx::Dy::FeatherstoneArticulation *this, uint64_t a2)
{
  int v2 = *((unsigned __int8 *)this + 160);
  if (*((unsigned char *)this + 160))
  {
    if (*((unsigned __int8 *)this + 140) == a2)
    {
      *((unsigned char *)this + 160) = 0;
    }
    else
    {
      *((void *)this + 9) = *((void *)this + 18);
      *((void *)this + 6) = this;
      *((unsigned char *)this + 160) = 0;
      __int16 v5 = 288 * ((a2 + 3) & 0xFFFC);
      LOBYTE(v10[0]) = 0;
      physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::resize((uint64_t)this + 848, 288 * ((a2 + 3) & 0xFFFFFFFC), v10);
      *((void *)this + 16) = *((void *)this + 106);
      *((_WORD *)this + 71) = v5;
      if ((*((_DWORD *)this + 83) & 0x7FFFFFFFu) < a2) {
        physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate((uint64_t)this + 320, a2);
      }
      *((_DWORD *)this + 82) = a2;
      if ((*((_DWORD *)this + 87) & 0x7FFFFFFFu) < a2) {
        physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate((uint64_t)this + 336, a2);
      }
      *((_DWORD *)this + 86) = a2;
      if ((*((_DWORD *)this + 91) & 0x7FFFFFFFu) < a2) {
        physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate((uint64_t)this + 352, a2);
      }
      *((_DWORD *)this + 90) = a2;
      if ((*((_DWORD *)this + 95) & 0x7FFFFFFFu) < a2) {
        physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate((uint64_t)this + 368, a2);
      }
      *((_DWORD *)this + 94) = a2;
      if ((*((_DWORD *)this + 143) & 0x7FFFFFFFu) < a2) {
        physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)this + 560, a2);
      }
      *((_DWORD *)this + 142) = a2;
      if ((*((_DWORD *)this + 147) & 0x7FFFFFFFu) < a2) {
        physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)this + 576, a2);
      }
      *((_DWORD *)this + 146) = a2;
      if ((*((_DWORD *)this + 111) & 0x7FFFFFFFu) < a2) {
        physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate((uint64_t)this + 432, a2);
      }
      *((_DWORD *)this + 110) = a2;
      if ((*((_DWORD *)this + 115) & 0x7FFFFFFFu) < a2) {
        physx::shdfnd::Array<physx::PxTransform,physx::shdfnd::ReflectionAllocator<physx::PxTransform>>::recreate((uint64_t)this + 448, a2);
      }
      *((_DWORD *)this + 114) = a2;
      if ((*((_DWORD *)this + 119) & 0x7FFFFFFFu) < a2) {
        physx::shdfnd::Array<physx::Dy::SpatialImpulseResponseMatrix,physx::shdfnd::ReflectionAllocator<physx::Dy::SpatialImpulseResponseMatrix>>::recreate((uint64_t *)this + 58, a2);
      }
      *((_DWORD *)this + 118) = a2;
      if ((*((_DWORD *)this + 123) & 0x7FFFFFFFu) < a2) {
        physx::shdfnd::Array<physx::Dy::SpatialMatrix,physx::shdfnd::ReflectionAllocator<physx::Dy::SpatialMatrix>>::recreate((uint64_t *)this + 60, a2);
      }
      *((_DWORD *)this + 122) = a2;
      if ((*((_DWORD *)this + 127) & 0x7FFFFFFFu) < a2) {
        physx::shdfnd::Array<physx::Dy::InvStIs,physx::shdfnd::ReflectionAllocator<physx::Dy::InvStIs>>::recreate((uint64_t *)this + 62, a2);
      }
      *((_DWORD *)this + 126) = a2;
      memset(v10, 0, 76);
      physx::shdfnd::Array<physx::Dy::SpatialSubspaceMatrix,physx::shdfnd::ReflectionAllocator<physx::Dy::SpatialSubspaceMatrix>>::resize((uint64_t)this + 512, a2, (uint64_t)v10);
      if ((*((_DWORD *)this + 135) & 0x7FFFFFFFu) < a2) {
        physx::shdfnd::Array<physx::Dy::SpatialSubspaceMatrix,physx::shdfnd::ReflectionAllocator<physx::Dy::SpatialSubspaceMatrix>>::recreate((uint64_t *)this + 66, a2);
      }
      *((_DWORD *)this + 134) = a2;
      if ((*((_DWORD *)this + 139) & 0x7FFFFFFFu) < a2) {
        physx::shdfnd::Array<physx::Dy::IsInvD,physx::shdfnd::ReflectionAllocator<physx::Dy::IsInvD>>::recreate((uint64_t *)this + 68, a2);
      }
      *((_DWORD *)this + 138) = a2;
      if ((*((_DWORD *)this + 177) & 0x7FFFFFFFu) < a2) {
        physx::shdfnd::Array<physx::PxTransform,physx::shdfnd::ReflectionAllocator<physx::PxTransform>>::recreate((uint64_t)this + 696, a2);
      }
      *((_DWORD *)this + 176) = a2;
      if ((*((_DWORD *)this + 181) & 0x7FFFFFFFu) < a2) {
        physx::shdfnd::Array<physx::PxQuat,physx::shdfnd::ReflectionAllocator<physx::PxQuat>>::recreate((uint64_t)this + 712, a2);
      }
      *((_DWORD *)this + 180) = a2;
      if ((*((_DWORD *)this + 79) & 0x7FFFFFFFu) < a2) {
        physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate((uint64_t)this + 304, a2);
      }
      *((_DWORD *)this + 78) = a2;
      if ((*((_DWORD *)this + 99) & 0x7FFFFFFFu) < a2) {
        physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate((uint64_t)this + 384, a2);
      }
      *((_DWORD *)this + 98) = a2;
      physx::shdfnd::Array<physx::PxQuat,physx::shdfnd::ReflectionAllocator<physx::PxQuat>>::resize((uint64_t)this + 592, a2, v10);
      if (*((void *)this + 78))
      {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        *((void *)this + 78) = 0;
      }
      if (*((void *)this + 79))
      {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        *((void *)this + 79) = 0;
      }
      if (*((void *)this + 80))
      {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        *((void *)this + 80) = 0;
      }
      uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, 160 * a2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyFeatherstoneArticulation.cpp", 172);
      *(_DWORD *)(v6 + 144) = 0;
      *((void *)this + 78) = v6;
      uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, 80 * a2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyFeatherstoneArticulation.cpp", 173);
      *(_DWORD *)(v7 + 72) = -1;
      *(unsigned char *)(v7 + 78) = 0;
      *((void *)this + 79) = v7;
      uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 96 * a2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyFeatherstoneArticulation.cpp", 174);
      v8[1] = 0;
      v8[2] = 0;
      void *v8 = 0;
      *((void *)this + 80) = v8;
      bzero(*((void **)this + 40), (32 * a2));
      bzero(*((void **)this + 42), (32 * a2));
      bzero(*((void **)this + 44), (32 * a2));
      bzero(*((void **)this + 46), (32 * a2));
      bzero(*((void **)this + 54), (32 * a2));
      bzero(*((void **)this + 56), (28 * a2));
      bzero(*((void **)this + 78), (160 * a2));
      bzero(*((void **)this + 79), (80 * a2));
      bzero(*((void **)this + 80), (96 * a2));
    }
  }
  return v2 != 0;
}

void physx::Dy::FeatherstoneArticulation::getDataSizes(physx::Dy::FeatherstoneArticulation *this, unsigned int a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
}

void physx::Dy::FeatherstoneArticulation::onUpdateSolverDesc(physx::Dy::FeatherstoneArticulation *this)
{
  *((void *)this + 76) = *((void *)this + 7);
  *((_DWORD *)this + 154) = *((unsigned __int8 *)this + 140);
  uint64_t v1 = *((void *)this + 14);
  if (v1) {
    uint64_t v2 = v1 + 32;
  }
  else {
    uint64_t v2 = *((void *)this + 15);
  }
  *((void *)this + 83) = v2;
  *((void *)this + 84) = *((void *)this + 9);
  *((_DWORD *)this + 170) = *((unsigned __int16 *)this + 69);
  *((void *)this + 86) = this;
  physx::Dy::FeatherstoneArticulation::computeDofs(this);
}

uint64_t physx::Dy::FeatherstoneArticulation::getDofs(physx::Dy::FeatherstoneArticulation *this)
{
  uint64_t result = *((unsigned int *)this + 163);
  if (result == -1)
  {
    physx::Dy::FeatherstoneArticulation::computeDofs(this);
    return *((unsigned int *)this + 163);
  }
  return result;
}

uint64_t physx::Dy::FeatherstoneArticulation::getDof(physx::Dy::FeatherstoneArticulation *this, unsigned int a2)
{
  return *(unsigned __int8 *)(*((void *)this + 79) + 80 * a2 + 76);
}

BOOL physx::Dy::FeatherstoneArticulation::applyCache(void *a1, uint64_t a2, char *a3)
{
  unsigned int v3 = (void *)a1[28];
  int v4 = (void *)a1[26];
  __int16 v5 = (void *)a1[32];
  uint64_t v6 = (void *)a1[34];
  char v8 = *a3;
  return physx::Dy::FeatherstoneArticulation::applyCacheToDest((physx::Dy::FeatherstoneArticulation *)a1, (physx::Dy::ArticulationData *)(a1 + 22), a2, v3, v4, v5, v6, &v8);
}

float physx::Dy::FeatherstoneArticulation::copyInternalStateToCache(float32x2_t *a1, uint64_t a2, char *a3, float result)
{
  char v7 = *a3;
  if (*a3)
  {
    memcpy(*(void **)(a2 + 24), *(const void **)&a1[28], (4 * a1[81].i32[1]));
    char v7 = *a3;
    if ((*a3 & 2) == 0)
    {
LABEL_3:
      if ((v7 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*a3 & 2) == 0)
  {
    goto LABEL_3;
  }
  memcpy(*(void **)(a2 + 32), *(const void **)&a1[26], (4 * a1[81].i32[1]));
  char v7 = *a3;
  if ((*a3 & 4) == 0)
  {
LABEL_4:
    if ((v7 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  memcpy(*(void **)(a2 + 40), *(const void **)&a1[32], (4 * a1[81].i32[1]));
  char v7 = *a3;
  if ((*a3 & 8) == 0)
  {
LABEL_5:
    if ((v7 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_11;
  }
LABEL_10:
  memcpy(*(void **)(a2 + 48), *(const void **)&a1[34], (4 * a1[81].i32[1]));
  char v7 = *a3;
  if ((*a3 & 0x10) == 0) {
    goto LABEL_14;
  }
LABEL_11:
  uint64_t v8 = a1[77].u32[0];
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 56) + 16;
    uint64_t v10 = *(void *)&a1[40] + 16;
    do
    {
      *(void *)(v9 - 16) = *(void *)v10;
      *(_DWORD *)(v9 - 8) = *(_DWORD *)(v10 + 8);
      *(void *)uint64_t v9 = *(void *)(v10 - 16);
      uint64_t result = *(float *)(v10 - 8);
      *(float *)(v9 + 8) = result;
      v9 += 32;
      v10 += 32;
      --v8;
    }
    while (v8);
  }
LABEL_14:
  if ((v7 & 0x20) != 0)
  {
    uint64_t v11 = a1[77].u32[0];
    uint64_t result = a1[81].f32[0];
    if (result > 0.0)
    {
      float32x2_t v12 = a1[79];
      uint64_t v13 = (float32x2_t *)a1[42];
      float32x2_t v14 = a1[30];
      uint64_t result = 1.0 / result;
      if (**(unsigned char **)&a1[83])
      {
        v13[1].i32[1] = 0;
        v13[3].i32[1] = 0;
        float32x2_t v16 = 0;
        float v17 = 0.0;
        float v19 = 0.0;
        float32x2_t v18 = 0;
      }
      else
      {
        int v15 = (float32x2_t *)a1[40];
        float32x2_t v16 = vmul_n_f32(vsub_f32(*v15, a1[22]), result);
        float v17 = result * (float)(v15[1].f32[0] - a1[23].f32[0]);
        float32x2_t v18 = vmul_n_f32(vsub_f32(v15[2], a1[24]), result);
        float v19 = result * (float)(v15[3].f32[0] - a1[25].f32[0]);
      }
      *uint64_t v13 = v16;
      v13[1].f32[0] = v17;
      v13[2] = v18;
      v13[3].f32[0] = v19;
      if (v11 >= 2)
      {
        uint64_t v20 = 1;
        uint64_t v21 = 96;
        do
        {
          uint64_t v22 = *(void *)&v12 + 80 * v20;
          uint64_t v23 = *(unsigned __int8 *)(v22 + 76);
          if (*(unsigned char *)(v22 + 76))
          {
            int v24 = (float *)(*(void *)&v14 + 4 * *(unsigned int *)(v22 + 72));
            int v25 = &v13[4 * v20];
            float32x2_t v26 = v25[2];
            float v27 = v25[3].f32[0];
            float32x2_t v28 = *v25;
            float v29 = v25[1].f32[0];
            int v30 = (float *)(*(void *)&a1[66] + v21);
            do
            {
              float v31 = *v24++;
              float v32 = (float)(result * v31) * *(v30 - 3);
              float32x2_t v28 = vadd_f32(v28, vmul_n_f32(*(float32x2_t *)(v30 - 5), result * v31));
              *int v25 = v28;
              float v29 = v29 + v32;
              v25[1].f32[0] = v29;
              float v33 = (float)(result * v31) * *v30;
              float32x2_t v26 = vadd_f32(v26, vmul_n_f32(*(float32x2_t *)(v30 - 2), result * v31));
              v25[2] = v26;
              float v27 = v27 + v33;
              v25[3].f32[0] = v27;
              v30 += 6;
              --v23;
            }
            while (v23);
          }
          ++v20;
          v21 += 76;
        }
        while (v20 != v11);
      }
    }
    if (v11)
    {
      uint64_t v34 = *(void *)(a2 + 64) + 16;
      uint64_t v35 = *(void *)&a1[42] + 16;
      do
      {
        *(void *)(v34 - 16) = *(void *)v35;
        *(_DWORD *)(v34 - 8) = *(_DWORD *)(v35 + 8);
        *(void *)uint64_t v34 = *(void *)(v35 - 16);
        uint64_t result = *(float *)(v35 - 8);
        *(float *)(v34 + 8) = result;
        v34 += 32;
        v35 += 32;
        --v11;
      }
      while (v11);
    }
  }
  if ((*a3 & 0x40) != 0)
  {
    float32x2_t v36 = a1[40];
    float32_t v37 = *(float **)(*(void *)&a1[76] + 16);
    float v38 = v37[12] * -2.0;
    float v39 = v37[13] * -2.0;
    float v40 = v37[14] * -2.0;
    float v42 = v37[10];
    float v41 = v37[11];
    float v43 = (float)(v41 * v41) + -0.5;
    float v44 = v37[8];
    float v45 = v37[9];
    float v46 = (float)((float)(v39 * v45) + (float)(v44 * v38)) + (float)(v42 * v40);
    float v47 = (float)((float)(v38 * v43) - (float)((float)((float)(v45 * v40) - (float)(v42 * v39)) * v41))
        + (float)(v44 * v46);
    float v48 = (float)((float)(v39 * v43) - (float)((float)((float)(v42 * v38) - (float)(v44 * v40)) * v41))
        + (float)(v45 * v46);
    float v49 = (float)((float)(v40 * v43) - (float)((float)((float)(v44 * v39) - (float)(v45 * v38)) * v41))
        + (float)(v42 * v46);
    float v50 = v48 + v48;
    float v51 = v49 + v49;
    float v53 = v37[2];
    float v52 = v37[3];
    float v54 = (float)(v52 * v52) + -0.5;
    float v55 = v37[1];
    float v56 = (float)((float)(v55 * v50) + (float)(*v37 * (float)(v47 + v47))) + (float)(v53 * v51);
    float v57 = (float)((float)(v52 * (float)((float)(v55 * v51) - (float)(v53 * v50))) + (float)((float)(v47 + v47) * v54))
        + (float)(*v37 * v56);
    float v58 = (float)((float)(v52 * (float)((float)(v53 * (float)(v47 + v47)) - (float)(*v37 * v51))) + (float)(v50 * v54))
        + (float)(v55 * v56);
    float v59 = (float)((float)(v52 * (float)((float)(*v37 * v50) - (float)(v55 * (float)(v47 + v47)))) + (float)(v51 * v54))
        + (float)(v53 * v56);
    float v60 = v37[4] + v57;
    float v61 = v37[5] + v58;
    float v62 = v37[6] + v59;
    float v63 = (float)((float)((float)(v41 * *v37) - (float)(v52 * v44)) - (float)(v55 * v42)) + (float)(v45 * v53);
    float v64 = (float)((float)((float)(v41 * v55) - (float)(v52 * v45)) - (float)(v53 * v44)) + (float)(v42 * *v37);
    float v65 = (float)((float)((float)(v41 * v53) - (float)(v52 * v42)) - (float)(*v37 * v45)) + (float)(v44 * v55);
    float v66 = v44 * *v37;
    uint64_t v67 = *(void *)(a2 + 72);
    *(float *)uint64_t v67 = v63;
    *(float *)(v67 + 4) = v64;
    *(float *)(v67 + 8) = v65;
    *(float *)(v67 + 12) = (float)((float)(v66 + (float)(v52 * v41)) + (float)(v55 * v45)) + (float)(v53 * v42);
    *(float *)(v67 + 16) = v60;
    *(float *)(v67 + 20) = v61;
    *(float *)(v67 + 24) = v62;
    *(void *)(v67 + 28) = *(void *)(*(void *)&v36 + 16);
    *(_DWORD *)(v67 + 36) = *(_DWORD *)(*(void *)&v36 + 24);
    *(void *)(v67 + 40) = **(void **)&v36;
    *(_DWORD *)(v67 + 48) = *(_DWORD *)(*(void *)&v36 + 8);
    float32x2_t v68 = a1[42];
    *(void *)(v67 + 52) = *(void *)(*(void *)&v68 + 16);
    *(_DWORD *)(v67 + 60) = *(_DWORD *)(*(void *)&v68 + 24);
    *(void *)(v67 + 64) = **(void **)&v68;
    uint64_t result = *(float *)(*(void *)&v68 + 8);
    *(float *)(v67 + 72) = result;
  }
  return result;
}

int8x16_t physx::Dy::FeatherstoneArticulation::translateInertia(uint64_t a1, uint64_t a2)
{
  float32x4_t v2 = *(float32x4_t *)a1;
  v2.i32[3] = 0;
  float32x4_t v3 = *(float32x4_t *)(a1 + 12);
  *(int8x8_t *)v4.f32 = vext_s8(*(int8x8_t *)a1, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v3.f32, 1), 4uLL);
  v5.i32[0] = v3.i32[3];
  unsigned __int32 v6 = vdup_laneq_s32((int32x4_t)v3, 3).u32[0];
  v7.i64[0] = vextq_s8((int8x16_t)v3, (int8x16_t)v3, 8uLL).u64[0];
  *(int8x8_t *)v8.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)a1, 0), *(int8x8_t *)v3.f32, 4uLL);
  v3.i32[3] = 0;
  v5.i32[1] = *(_DWORD *)(a1 + 28);
  v5.i64[1] = *(unsigned int *)(a1 + 32);
  v8.i64[1] = v6;
  v4.i64[1] = vdup_lane_s32(*(int32x2_t *)v5.i8, 1).u32[0];
  *(int8x8_t *)v9.f32 = vext_s8((int8x8_t)vdup_laneq_s32(*(int32x4_t *)a1, 2), *(int8x8_t *)v7.f32, 4uLL);
  v9.i64[1] = vdup_laneq_s32(v5, 2).u32[0];
  float32x4_t v10 = *(float32x4_t *)(a2 + 12);
  v7.i32[0] = v10.i32[3];
  v7.i32[1] = *(_DWORD *)(a2 + 28);
  float32x4_t v11 = vmulq_lane_f32(v3, *(float32x2_t *)v7.f32, 1);
  v7.i64[1] = *(unsigned int *)(a2 + 32);
  float32x4_t v12 = *(float32x4_t *)(a2 + 36);
  float32x4_t v13 = vmulq_n_f32(v2, v12.f32[0]);
  float32x4_t v14 = vmulq_lane_f32(v3, *(float32x2_t *)v12.f32, 1);
  float32x4_t v15 = vmulq_laneq_f32((float32x4_t)v5, v12, 2);
  float32x4_t v16 = vmulq_n_f32(v12, v8.f32[0]);
  v12.i32[3] = 0;
  float32x4_t v17 = *(float32x4_t *)(a2 + 48);
  v18.i32[0] = v17.i32[3];
  float32x4_t v19 = vmulq_n_f32(v2, v17.f32[0]);
  float32x4_t v20 = vmulq_lane_f32(v3, *(float32x2_t *)v17.f32, 1);
  float32x4_t v21 = vmulq_laneq_f32((float32x4_t)v5, v17, 2);
  float32x4_t v22 = vmulq_laneq_f32(v2, v17, 3);
  float32x4_t v23 = vmulq_lane_f32(v17, *(float32x2_t *)v8.f32, 1);
  v17.i32[3] = 0;
  v18.i32[1] = *(_DWORD *)(a2 + 64);
  float32x4_t v24 = vmulq_lane_f32(v3, *(float32x2_t *)v18.f32, 1);
  v18.i64[1] = *(unsigned int *)(a2 + 68);
  float32x4_t v25 = *(float32x4_t *)(a2 + 72);
  v25.i32[3] = 0;
  float32x4_t v26 = *(float32x4_t *)(a2 + 84);
  v27.i32[0] = v26.i32[3];
  v26.i32[3] = 0;
  v27.i32[1] = *(_DWORD *)(a2 + 100);
  v27.i64[1] = *(unsigned int *)(a2 + 104);
  float32x4_t v28 = vmulq_n_f32(v2, COERCE_FLOAT(*(_OWORD *)a2));
  v28.i32[3] = 0;
  float32x4_t v29 = vmulq_lane_f32(v3, *(float32x2_t *)a2, 1);
  v29.i32[3] = 0;
  float32x4_t v30 = vmulq_laneq_f32((float32x4_t)v5, *(float32x4_t *)a2, 2);
  v30.i32[3] = 0;
  float32x4_t v31 = vaddq_f32(v28, v29);
  float32x4_t v32 = vmulq_n_f32(v2, v10.f32[0]);
  v32.i32[3] = 0;
  float32x4_t v33 = vmulq_lane_f32(v3, *(float32x2_t *)v10.f32, 1);
  v33.i32[3] = 0;
  float32x4_t v34 = vaddq_f32(v32, v33);
  float32x4_t v35 = vmulq_laneq_f32((float32x4_t)v5, v10, 2);
  v35.i32[3] = 0;
  float32x4_t v36 = vmulq_laneq_f32(v2, v10, 3);
  v36.i32[3] = 0;
  v11.i32[3] = 0;
  float32x4_t v37 = vaddq_f32(v36, v11);
  float32x4_t v38 = vmulq_laneq_f32((float32x4_t)v5, v7, 2);
  v38.i32[3] = 0;
  float32x4_t v39 = vaddq_f32(vaddq_f32(v37, v38), v27);
  v13.i32[3] = 0;
  v14.i32[3] = 0;
  v15.i32[3] = 0;
  v19.i32[3] = 0;
  v20.i32[3] = 0;
  float32x4_t v40 = vaddq_f32(v15, vaddq_f32(v13, v14));
  v21.i32[3] = 0;
  v22.i32[3] = 0;
  float32x4_t v41 = vaddq_f32(v21, vaddq_f32(v19, v20));
  v24.i32[3] = 0;
  float32x4_t v42 = vmulq_laneq_f32((float32x4_t)v5, v18, 2);
  v42.i32[3] = 0;
  *(int8x8_t *)v19.f32 = vext_s8((int8x8_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)a2, 0), *(int8x8_t *)v10.f32, 4uLL);
  v19.i64[1] = vdupq_laneq_s32((int32x4_t)v10, 3).u32[0];
  *(int8x8_t *)v38.f32 = vext_s8(*(int8x8_t *)a2, (int8x8_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v10.f32, 1), 4uLL);
  v38.i64[1] = vdupq_lane_s32(*(int32x2_t *)v7.f32, 1).u32[0];
  *(int8x8_t *)v27.f32 = vext_s8((int8x8_t)*(_OWORD *)&vdupq_laneq_s32(*(int32x4_t *)a2, 2), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL), 4uLL);
  v27.i64[1] = vdupq_laneq_s32((int32x4_t)v7, 2).u32[0];
  float32x4_t v43 = vaddq_f32(v40, v19);
  float32x4_t v44 = vaddq_f32(v41, v38);
  float32x4_t v45 = vaddq_f32(vaddq_f32(vaddq_f32(v22, v24), v42), v27);
  float32x4_t v46 = vmulq_n_f32(v43, v8.f32[0]);
  v46.i32[3] = 0;
  float32x4_t v47 = vmulq_lane_f32(v44, *(float32x2_t *)v8.f32, 1);
  v47.i32[3] = 0;
  float32x4_t v48 = vmulq_laneq_f32(v45, v8, 2);
  v48.i32[3] = 0;
  float32x4_t v49 = vaddq_f32(v46, v47);
  float32x4_t v50 = vmulq_n_f32(v43, v4.f32[0]);
  v50.i32[3] = 0;
  float32x4_t v51 = vmulq_lane_f32(v44, *(float32x2_t *)v4.f32, 1);
  v51.i32[3] = 0;
  float32x4_t v52 = vaddq_f32(v49, v48);
  float32x4_t v53 = vmulq_laneq_f32(v45, v4, 2);
  v53.i32[3] = 0;
  float32x4_t v54 = vmulq_n_f32(v43, v9.f32[0]);
  v54.i32[3] = 0;
  float32x4_t v55 = vmulq_lane_f32(v44, *(float32x2_t *)v9.f32, 1);
  v55.i32[3] = 0;
  float32x4_t v56 = vmulq_laneq_f32(v45, v9, 2);
  v56.i32[3] = 0;
  float32x4_t v57 = vaddq_f32(vaddq_f32(vaddq_f32(v30, v31), v25), v52);
  float32x4_t v58 = vaddq_f32(vaddq_f32(vaddq_f32(v35, v34), v26), vaddq_f32(vaddq_f32(v50, v51), v53));
  float32x4_t v59 = vaddq_f32(v39, vaddq_f32(vaddq_f32(v54, v55), v56));
  float32x4_t v60 = vaddq_f32(*(float32x4_t *)a2, vaddq_f32(vaddq_f32(v16, v23), vmulq_laneq_f32(v18, v8, 2)));
  int8x16_t v61 = (int8x16_t)vaddq_f32(v10, vaddq_f32(vaddq_f32(vmulq_n_f32(v12, v4.f32[0]), vmulq_lane_f32(v17, *(float32x2_t *)v4.f32, 1)), vmulq_laneq_f32(v18, v4, 2)));
  float32x4_t v62 = vaddq_f32(v7, vaddq_f32(vaddq_f32(vmulq_n_f32(v12, v9.f32[0]), vmulq_lane_f32(v17, *(float32x2_t *)v9.f32, 1)), vmulq_laneq_f32(v18, v9, 2)));
  v60.i32[3] = v61.i32[0];
  float32x4_t v63 = (float32x4_t)vextq_s8(vextq_s8(v61, v61, 0xCuLL), (int8x16_t)v62, 8uLL);
  *(_DWORD *)(a2 + 32) = v62.i32[2];
  *(int8x8_t *)v62.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v57.f32, 0), *(int8x8_t *)v58.f32, 4uLL);
  v62.i64[1] = v59.i64[0];
  *(float32x4_t *)a2 = v60;
  *(float32x4_t *)(a2 + 16) = v63;
  *(int8x8_t *)v63.f32 = vext_s8(*(int8x8_t *)v57.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v58.f32, 1), 4uLL);
  *(int32x2_t *)&v63.u32[2] = vdup_lane_s32(*(int32x2_t *)v59.f32, 1);
  *(int8x8_t *)v60.f32 = vext_s8((int8x8_t)vdup_laneq_s32((int32x4_t)v57, 2), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL), 4uLL);
  v60.i64[1] = vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL).u64[0];
  v10.i64[0] = 0x3F0000003F000000;
  v10.i64[1] = 0x3F0000003F000000;
  float32x4_t v64 = vmulq_f32(vaddq_f32(v57, v62), v10);
  int8x16_t v65 = (int8x16_t)vmulq_f32(vaddq_f32(v58, v63), v10);
  int8x16_t v66 = (int8x16_t)vmulq_f32(vaddq_f32(v59, v60), v10);
  v64.i32[3] = v65.i32[0];
  *(float32x4_t *)(a2 + 72) = v64;
  int8x16_t result = vextq_s8(vextq_s8(v65, v65, 0xCuLL), v66, 8uLL);
  *(int8x16_t *)(a2 + 88) = result;
  *(_DWORD *)(a2 + 104) = v66.i32[2];
  return result;
}

float32_t physx::Dy::FeatherstoneArticulation::getImpulseResponse(uint64_t a1, unsigned int a2, double a3, double a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8, float32x4_t a9, float32x4_t a10, uint64_t a11, float32x4_t *a12, uint64_t a13)
{
  physx::Dy::SpatialImpulseResponseMatrix::getResponse(&v15, *(void *)(a1 + 464) + 192 * a2, *a12, a12[1], a5, a6, a7, a8, a9, a10);
  *(void *)a13 = v16;
  *(_DWORD *)(a13 + 8) = v17;
  *(void *)(a13 + 16) = v15.i64[0];
  float32_t result = v15.f32[2];
  *(_DWORD *)(a13 + 24) = v15.i32[2];
  return result;
}

float32x4_t physx::Dy::SpatialImpulseResponseMatrix::getResponse(float32x4_t *a1, uint64_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8, float32x4_t a9, float32x4_t a10)
{
  a5.i64[0] = *(void *)a2;
  a5.i32[2] = *(_DWORD *)(a2 + 8);
  a6.i64[0] = *(void *)(a2 + 16);
  a6.i32[2] = *(_DWORD *)(a2 + 24);
  a7.i64[0] = *(void *)(a2 + 32);
  a7.i32[2] = *(_DWORD *)(a2 + 40);
  a8.i64[0] = *(void *)(a2 + 48);
  a8.i32[2] = *(_DWORD *)(a2 + 56);
  a9.i64[0] = *(void *)(a2 + 64);
  a9.i32[2] = *(_DWORD *)(a2 + 72);
  a10.i64[0] = *(void *)(a2 + 80);
  a10.i32[2] = *(_DWORD *)(a2 + 88);
  v10.i64[0] = *(void *)(a2 + 96);
  v10.i32[2] = *(_DWORD *)(a2 + 104);
  v11.i64[0] = *(void *)(a2 + 112);
  v11.i32[2] = *(_DWORD *)(a2 + 120);
  v12.i64[0] = *(void *)(a2 + 128);
  v12.i32[2] = *(_DWORD *)(a2 + 136);
  v13.i64[0] = *(void *)(a2 + 144);
  v13.i32[2] = *(_DWORD *)(a2 + 152);
  v14.i64[0] = *(void *)(a2 + 160);
  v14.i32[2] = *(_DWORD *)(a2 + 168);
  v15.i64[0] = *(void *)(a2 + 176);
  v15.i32[2] = *(_DWORD *)(a2 + 184);
  float32x4_t v16 = vmulq_n_f32(a5, a3.f32[0]);
  v16.i32[3] = 0;
  float32x4_t v17 = vmulq_n_f32(a6, a3.f32[0]);
  v17.i32[3] = 0;
  float32x4_t v18 = vmulq_lane_f32(a7, *(float32x2_t *)a3.f32, 1);
  v18.i32[3] = 0;
  float32x4_t v19 = vmulq_lane_f32(a8, *(float32x2_t *)a3.f32, 1);
  v19.i32[3] = 0;
  float32x4_t v20 = vaddq_f32(v16, v18);
  float32x4_t v21 = vmulq_laneq_f32(a9, a3, 2);
  v21.i32[3] = 0;
  float32x4_t v22 = vmulq_laneq_f32(a10, a3, 2);
  v22.i32[3] = 0;
  float32x4_t v23 = vaddq_f32(v20, v21);
  float32x4_t v24 = vmulq_n_f32(v10, a4.f32[0]);
  v24.i32[3] = 0;
  float32x4_t v25 = vaddq_f32(vaddq_f32(v17, v19), v22);
  float32x4_t v26 = vmulq_n_f32(v11, a4.f32[0]);
  v26.i32[3] = 0;
  float32x4_t v27 = vaddq_f32(v23, v24);
  float32x4_t v28 = vaddq_f32(v25, v26);
  float32x4_t v29 = vmulq_lane_f32(v12, *(float32x2_t *)a4.f32, 1);
  v29.i32[3] = 0;
  float32x4_t v30 = vmulq_lane_f32(v13, *(float32x2_t *)a4.f32, 1);
  v30.i32[3] = 0;
  float32x4_t v31 = vaddq_f32(v27, v29);
  float32x4_t v32 = vmulq_laneq_f32(v14, a4, 2);
  v32.i32[3] = 0;
  float32x4_t v33 = vmulq_laneq_f32(v15, a4, 2);
  v33.i32[3] = 0;
  float32x4_t result = vaddq_f32(vaddq_f32(v28, v30), v33);
  *a1 = vaddq_f32(v31, v32);
  a1[1] = result;
  return result;
}

float32x4_t physx::Dy::FeatherstoneArticulation::getImpulseResponse(uint64_t a1, unsigned int a2, double a3, double a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8, float32x4_t a9, float32x4_t a10, uint64_t a11, float32x2_t *a12, float32x4_t *a13)
{
  uint64_t v19 = *(void *)(a1 + 464) + 192 * a2;
  float32x4_t v20 = *(float32x4_t *)a12[2].f32;
  a5.i64[0] = *(void *)v19;
  a5.i32[2] = *(_DWORD *)(v19 + 8);
  a6.i64[0] = *(void *)(v19 + 16);
  a6.i32[2] = *(_DWORD *)(v19 + 24);
  a7.i64[0] = *(void *)(v19 + 32);
  a7.i32[2] = *(_DWORD *)(v19 + 40);
  a8.i64[0] = *(void *)(v19 + 48);
  a8.i32[2] = *(_DWORD *)(v19 + 56);
  a9.i64[0] = *(void *)(v19 + 64);
  a9.i32[2] = *(_DWORD *)(v19 + 72);
  a10.i64[0] = *(void *)(v19 + 80);
  a10.i32[2] = *(_DWORD *)(v19 + 88);
  v13.i64[0] = *(void *)(v19 + 96);
  v13.i32[2] = *(_DWORD *)(v19 + 104);
  v14.i64[0] = *(void *)(v19 + 112);
  v14.i32[2] = *(_DWORD *)(v19 + 120);
  v15.i64[0] = *(void *)(v19 + 128);
  v15.i32[2] = *(_DWORD *)(v19 + 136);
  v16.i64[0] = *(void *)(v19 + 144);
  v16.i32[2] = *(_DWORD *)(v19 + 152);
  v17.i64[0] = *(void *)(v19 + 160);
  v17.i32[2] = *(_DWORD *)(v19 + 168);
  v18.i64[0] = *(void *)(v19 + 176);
  v18.i32[2] = *(_DWORD *)(v19 + 184);
  float32x4_t v21 = vmulq_n_f32(a5, COERCE_FLOAT(*(_OWORD *)a12->f32));
  v21.i32[3] = 0;
  float32x4_t v22 = vmulq_n_f32(a6, COERCE_FLOAT(*(_OWORD *)a12->f32));
  v22.i32[3] = 0;
  float32x4_t v23 = vmulq_lane_f32(a7, *a12, 1);
  v23.i32[3] = 0;
  float32x4_t v24 = vmulq_lane_f32(a8, *a12, 1);
  v24.i32[3] = 0;
  float32x4_t v25 = vaddq_f32(v21, v23);
  float32x4_t v26 = vmulq_laneq_f32(a9, *(float32x4_t *)a12->f32, 2);
  v26.i32[3] = 0;
  float32x4_t v27 = vmulq_laneq_f32(a10, *(float32x4_t *)a12->f32, 2);
  v27.i32[3] = 0;
  float32x4_t v28 = vaddq_f32(v25, v26);
  float32x4_t v29 = vmulq_n_f32(v13, v20.f32[0]);
  v29.i32[3] = 0;
  float32x4_t v30 = vaddq_f32(vaddq_f32(v22, v24), v27);
  float32x4_t v31 = vmulq_n_f32(v14, v20.f32[0]);
  v31.i32[3] = 0;
  float32x4_t v32 = vaddq_f32(v28, v29);
  float32x4_t v33 = vaddq_f32(v30, v31);
  float32x4_t v34 = vmulq_lane_f32(v15, *(float32x2_t *)v20.f32, 1);
  v34.i32[3] = 0;
  float32x4_t v35 = vmulq_lane_f32(v16, *(float32x2_t *)v20.f32, 1);
  v35.i32[3] = 0;
  float32x4_t v36 = vaddq_f32(v32, v34);
  float32x4_t v37 = vmulq_laneq_f32(v17, v20, 2);
  v37.i32[3] = 0;
  float32x4_t v38 = vmulq_laneq_f32(v18, v20, 2);
  v38.i32[3] = 0;
  float32x4_t result = vaddq_f32(vaddq_f32(v33, v35), v38);
  *a13 = result;
  a13[1] = vaddq_f32(v36, v37);
  return result;
}

float physx::Dy::FeatherstoneArticulation::getLinkVelocity@<S0>(physx::Dy::FeatherstoneArticulation *this@<X0>, unsigned int a2@<W1>, _OWORD *a3@<X8>)
{
  uint64_t v3 = *((void *)this + 40) + 32 * a2;
  *(void *)&long long v4 = *(void *)(v3 + 16);
  *((void *)&v4 + 1) = *(unsigned int *)(v3 + 24);
  *(void *)&long long v5 = *(void *)v3;
  *((void *)&v5 + 1) = *(unsigned int *)(v3 + 8);
  *a3 = v4;
  a3[1] = v5;
  return *(float *)&v4;
}

float physx::Dy::FeatherstoneArticulation::getLinkMotionVector@<S0>(physx::Dy::FeatherstoneArticulation *this@<X0>, unsigned int a2@<W1>, _OWORD *a3@<X8>)
{
  uint64_t v3 = *((void *)this + 54) + 32 * a2;
  *(void *)&long long v4 = *(void *)(v3 + 16);
  *((void *)&v4 + 1) = *(unsigned int *)(v3 + 24);
  *(void *)&long long v5 = *(void *)v3;
  *((void *)&v5 + 1) = *(unsigned int *)(v3 + 8);
  *a3 = v4;
  a3[1] = v5;
  return *(float *)&v4;
}

float physx::Dy::FeatherstoneArticulation::getMotionVelocity@<S0>(physx::Dy::FeatherstoneArticulation *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *((void *)this + 40) + 32 * a2;
  *(void *)a3 = *(void *)(v3 + 16);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(a3 + 12) = 0;
  *(void *)(a3 + 16) = *(void *)v3;
  float result = *(float *)(v3 + 8);
  *(float *)(a3 + 24) = result;
  *(_DWORD *)(a3 + 28) = 0;
  return result;
}

uint64_t physx::Dy::FeatherstoneArticulation::getMotionAcceleration@<X0>(uint64_t this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(this + 608);
  float v4 = 1.0 / *(float *)(this + 648);
  if (a2)
  {
    uint64_t v5 = *(void *)(this + 632);
    unsigned __int32 v6 = *(float **)(v3 + 40 * a2 + 16);
    if (*(unsigned char *)(v5 + 80 * a2 + 76))
    {
      unsigned int v7 = *(unsigned __int8 *)(v5 + 80 * a2 + 76) - 1;
      float v8 = v4 * *(float *)(*(void *)(this + 240) + 4 * *(unsigned int *)(v5 + 80 * a2 + 72) + 4 * v7);
      uint64_t v9 = *(void *)(this + 336) + 32 * a2;
      float32x4_t v10 = (float32x4_t *)(*(void *)(this + 512) + 76 * a2 + 24 * v7);
      v11.i64[0] = *(void *)v9;
      float v12 = v8 * v10[1].f32[0];
      float v13 = v8 * v10[1].f32[1];
      v11.i32[2] = *(_DWORD *)(v9 + 8);
      v11.i32[3] = *(_DWORD *)(v9 + 16);
      float32x4_t v14 = vaddq_f32(vmulq_n_f32(*v10, v8), v11);
      v11.f32[0] = v12 + *(float *)(v9 + 20);
      float v15 = v13 + *(float *)(v9 + 24);
      _Q3 = vaddq_f32(v14, v14);
      float v17 = v11.f32[0] + v11.f32[0];
      float v18 = v15 + v15;
    }
    else
    {
      _Q3 = (float32x4_t)vdupq_n_s32(0x7FC00000u);
      float v17 = NAN;
      float v18 = NAN;
    }
    _S17 = v6[2];
    float v46 = v6[3];
    _S18 = (float)(v46 * v46) + -0.5;
    _S19 = *v6;
    _S7 = v6[1];
    __asm
    {
      FMLA            S2, S17, V3.S[2]
      FMLA            S0, S7, V3.S[2]
    }
    float v19 = vmlas_n_f32(v46 * _S0, _S18, _Q3.f32[0]) + (float)(*v6 * _S2);
    __asm { FMLA            S1, S18, V3.S[1] }
    float v20 = _S1 + (float)(_S7 * _S2);
    float v57 = -_S7;
    __asm
    {
      FMLA            S6, S19, V3.S[1]
      FMLA            S6, S18, V3.S[2]
    }
    float v21 = _S6 + (float)(_S17 * _S2);
    __asm { FMLA            S6, S19, V3.S[3] }
    float v44 = _S6 + (float)(_S17 * v18);
    __asm { FMLA            S6, S18, V3.S[3] }
    float v22 = _S6 + (float)(*v6 * v44);
    __asm { FMLA            S22, S17, V3.S[3] }
    float v23 = (float)((float)(v46 * _S22) + (float)(v17 * _S18)) + (float)(_S7 * v44);
    float v45 = (float)(v46 * (float)(vmuls_lane_f32(v57, _Q3, 3) + (float)(*v6 * v17))) + (float)(v18 * _S18);
    goto LABEL_8;
  }
  float v19 = 0.0;
  float v20 = 0.0;
  float v21 = 0.0;
  float v22 = 0.0;
  float v23 = 0.0;
  float v24 = 0.0;
  if ((**(unsigned char **)(this + 664) & 1) == 0)
  {
    float32x4_t v25 = *(float **)(v3 + 16);
    float32x4_t v26 = *(float **)(this + 320);
    float v27 = v4 * (float)(*v26 - *(float *)(this + 176));
    float v28 = v4 * (float)(v26[1] - *(float *)(this + 180));
    float v29 = v4 * (float)(v26[2] - *(float *)(this + 184));
    float v30 = v4 * (float)(v26[4] - *(float *)(this + 192));
    float v31 = v4 * (float)(v26[5] - *(float *)(this + 196));
    float v32 = v4 * (float)(v26[6] - *(float *)(this + 200));
    float v33 = v27 + v27;
    float v34 = v28 + v28;
    float v35 = v29 + v29;
    _S17 = v25[2];
    float v36 = v25[3];
    float v38 = (float)(v36 * v36) + -0.5;
    float v39 = v25[1];
    float v40 = (float)((float)((float)(v28 + v28) * v39) + (float)(*v25 * (float)(v27 + v27))) + (float)(_S17 * v35);
    float v19 = (float)((float)(v36 * (float)((float)(v39 * v35) - (float)(_S17 * (float)(v28 + v28))))
                + (float)((float)(v27 + v27) * v38))
        + (float)(*v25 * v40);
    float v20 = (float)((float)(v36 * (float)((float)(_S17 * v33) - (float)(*v25 * v35))) + (float)((float)(v28 + v28) * v38))
        + (float)(v39 * v40);
    float v21 = (float)((float)(v36 * (float)((float)(*v25 * v34) - (float)(v39 * v33))) + (float)(v35 * v38))
        + (float)(_S17 * v40);
    float v41 = v30 + v30;
    float v42 = v31 + v31;
    float v43 = v32 + v32;
    float v44 = (float)((float)(v42 * v39) + (float)(*v25 * v41)) + (float)(_S17 * v43);
    float v22 = (float)((float)(v36 * (float)((float)(v39 * v43) - (float)(_S17 * v42))) + (float)(v41 * v38))
        + (float)(*v25 * v44);
    float v23 = (float)((float)(v36 * (float)((float)(_S17 * v41) - (float)(*v25 * v43))) + (float)(v42 * v38))
        + (float)(v39 * v44);
    float v45 = (float)(v36 * (float)((float)(*v25 * v42) - (float)(v39 * v41))) + (float)(v43 * v38);
LABEL_8:
    float v24 = v45 + (float)(_S17 * v44);
  }
  *(float *)a3 = v22;
  *(float *)(a3 + 4) = v23;
  *(float *)(a3 + 8) = v24;
  *(_DWORD *)(a3 + 12) = 0;
  *(float *)(a3 + 16) = v19;
  *(float *)(a3 + 20) = v20;
  *(float *)(a3 + 24) = v21;
  *(_DWORD *)(a3 + 28) = 0;
  return this;
}

unint64_t physx::Dy::FeatherstoneArticulation::fillIndexedManager(unint64_t this, unsigned int a2, unint64_t *a3, unsigned __int8 *a4)
{
  if (*(unsigned char *)(*(void *)(*(void *)(this + 608) + 40 * a2 + 16) + 159))
  {
    *a4 = 3;
  }
  else
  {
    *a4 = 2;
    *a3 = a2 | this;
  }
  return this;
}

float physx::Dy::FeatherstoneArticulation::getLinkMaxPenBias(physx::Dy::FeatherstoneArticulation *this, unsigned int a2)
{
  return *(float *)(*((void *)this + 78) + 160 * a2 + 144);
}

void physx::Dy::PxcFsFlushVelocity(uint64_t a1, float32x2_t *a2, double a3, double a4, double _D2)
{
  unsigned __int32 v6 = *(float32x2_t **)(a1 + 320);
  unsigned int v7 = *(float **)(a1 + 368);
  uint64_t v8 = *(void *)(a1 + 608);
  uint64_t v9 = *(void *)(a1 + 632);
  uint64_t v10 = *(void *)(a1 + 624);
  uint64_t v11 = *(void *)(a1 + 240);
  float32x4_t v50 = v7;
  if (**(unsigned char **)(a1 + 664))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[3].i32[0] = 0;
    a2[2] = 0;
  }
  else
  {
    float v12 = *v7;
    float v13 = v7[1];
    float v14 = -v13;
    float v15 = v7[2];
    *(float *)&_D2 = v7[4];
    float v16 = v7[5];
    float v17 = -v16;
    *(float *)&a3 = v7[6];
    v18.i32[0] = *(_DWORD *)(a1 + 740);
    float v19 = *(float *)(a1 + 752);
    float v20 = *(float *)(a1 + 764);
    float32_t v21 = (float)((float)((float)-(float)(v13 * v19) - (float)(*v7 * v18.f32[0])) - (float)(v15 * v20))
        + (float)((float)((float)-(float)(v16 * *(float *)(a1 + 788)) - (float)(*(float *)&_D2 * *(float *)(a1 + 776)))
                - (float)(*(float *)&a3 * *(float *)(a1 + 800)));
    float32x2_t v22 = *(float32x2_t *)(a1 + 732);
    float32x2_t v23 = *(float32x2_t *)(a1 + 744);
    _D22 = *(float32x2_t *)(a1 + 756);
    float32x2_t v25 = vadd_f32(vsub_f32(vsub_f32(vmul_n_f32(v23, -v13), vmul_n_f32(v22, *v7)), vmul_n_f32(_D22, v15)), vsub_f32(vsub_f32(vmul_n_f32(*(float32x2_t *)(a1 + 780), v17), vmul_n_f32(*(float32x2_t *)(a1 + 768), *(float *)&_D2)), vmul_n_f32(*(float32x2_t *)(a1 + 792), *(float *)&a3)));
    __asm { FMLS            S23, S2, V22.S[0] }
    float32_t v31 = (float)(_S23 - (float)(v20 * *(float *)&a3))
        + (float)((float)((float)-(float)(v13 * *(float *)(a1 + 824)) - (float)(*v7 * *(float *)(a1 + 812)))
                - (float)(v15 * *(float *)(a1 + 836)));
    a2[1].f32[0] = v21;
    a2[1].i32[1] = 0;
    v18.f32[1] = v19;
    float32x2_t v32 = vadd_f32(vmls_lane_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip2_s32((int32x2_t)v22, (int32x2_t)v23), v17), (float32x2_t)vzip1_s32((int32x2_t)v22, (int32x2_t)v23), *(float32x2_t *)&_D2, 0), v18, *(float32x2_t *)&a3, 0), vsub_f32(vsub_f32(vmul_n_f32(*(float32x2_t *)(a1 + 816), v14), vmul_n_f32(*(float32x2_t *)(a1 + 804), v12)), vmul_n_f32(*(float32x2_t *)(a1 + 828), v15)));
    *a2 = v25;
    a2[2] = v32;
    a2[3].f32[0] = v31;
    *unsigned __int32 v6 = vadd_f32(v25, *v6);
    v6[1].f32[0] = v21 + v6[1].f32[0];
    v6[2] = vadd_f32(a2[2], v6[2]);
    v6[3].f32[0] = a2[3].f32[0] + v6[3].f32[0];
  }
  a2[3].i32[1] = 0;
  uint64_t v49 = *(unsigned int *)(a1 + 616);
  if (v49 >= 2)
  {
    unint64_t v33 = 0;
    uint64_t v34 = v10 + 280;
    float v35 = (unsigned int *)(v9 + 152);
    float v36 = (unsigned int *)(v8 + 72);
    uint64_t v37 = 112;
    uint64_t v38 = 36;
    uint64_t v39 = 76;
    do
    {
      unsigned int v40 = *v35;
      v35 += 20;
      uint64_t v41 = v11 + 4 * v40;
      unsigned int v42 = *v36;
      v36 += 10;
      physx::Dy::FeatherstoneArticulation::propagateVelocityW(v34, (float *)(*(void *)(a1 + 480) + v37), (float *)(*(void *)(a1 + 496) + v38), *(void *)(a1 + 528) + v39, &v50[v33 / 4 + 8], v41, &a2[4 * v42], &v52);
      float v43 = &a2[v33 / 8 + 4];
      float v44 = v53;
      v43[1].f32[0] = v53;
      v43[1].i32[1] = 0;
      float v45 = v55;
      v43[3].f32[0] = v55;
      v43[3].i32[1] = 0;
      float v46 = &v6[v33 / 8];
      float32x2_t v47 = v52;
      *float v43 = v52;
      v46[5].f32[0] = v44 + v6[v33 / 8 + 5].f32[0];
      float32x2_t v48 = v54;
      v43[2] = v54;
      v46[4] = vadd_f32(v47, v6[v33 / 8 + 4]);
      v46[6] = vadd_f32(v48, v6[v33 / 8 + 6]);
      v48.i32[0] = v6[v33 / 8 + 7].i32[0];
      v33 += 32;
      v34 += 160;
      v46[7].f32[0] = v45 + v48.f32[0];
      v37 += 112;
      v38 += 36;
      v39 += 76;
    }
    while (32 * v49 - 32 != v33);
  }
  bzero(v50, (32 * v49));
}

float32_t physx::Dy::FeatherstoneArticulation::propagateVelocityW@<S0>(uint64_t a1@<X0>, float *a2@<X1>, float *a3@<X2>, uint64_t a4@<X3>, float *a5@<X4>, uint64_t a6@<X5>, float32x2_t *a7@<X6>, float32x2_t *a8@<X8>)
{
  v61[3] = *MEMORY[0x263EF8340];
  uint64_t v8 = *(unsigned int *)(a4 + 72);
  _S2 = *(_DWORD *)a1;
  float v10 = a7[1].f32[0];
  _D1 = *a7;
  v12.i32[1] = HIDWORD(*(void *)(a1 + 4));
  v12.i32[0] = *(_DWORD *)a1;
  v13.i32[1] = HIDWORD(*(unint64_t *)a7);
  v13.f32[0] = v10;
  float32x2_t v14 = (float32x2_t)vrev64_s32((int32x2_t)vmul_f32(v12, v13));
  float32x2_t v15 = (float32x2_t)vdup_lane_s32((int32x2_t)*a7, 0);
  v15.f32[0] = v10;
  __asm { FMLS            S3, S2, V1.S[1] }
  float32x2_t v21 = vadd_f32(vmls_f32(v14, v15, *(float32x2_t *)(a1 + 4)), a7[2]);
  float v22 = _S3 + a7[3].f32[0];
  if (v8)
  {
    float v23 = a2[1];
    float v24 = a2[2];
    float v25 = a2[3];
    float v26 = vmuls_lane_f32(v25, _D1, 1);
    float v28 = a2[4];
    float v27 = a2[5];
    float v29 = a2[6];
    float v30 = a2[7];
    float v31 = a2[8];
    float v32 = (float)((float)((float)(v23 * _D1.f32[0]) + vmuls_lane_f32(v28, _D1, 1)) + (float)(v10 * v30))
        + (float)((float)((float)(a2[10] * v21.f32[0]) + vmuls_lane_f32(a2[13], v21, 1)) + (float)(v22 * a2[16]));
    float v33 = (float)((float)((float)(v24 * _D1.f32[0]) + vmuls_lane_f32(v27, _D1, 1)) + (float)(v10 * v31))
        + (float)((float)((float)(a2[11] * v21.f32[0]) + vmuls_lane_f32(a2[14], v21, 1)) + (float)(v22 * a2[17]));
    float v34 = vmlas_n_f32(vmuls_lane_f32(v23, v21, 1), *a2, v21.f32[0]) + (float)(v24 * v22);
    float v35 = vmlas_n_f32(vmuls_lane_f32(v28, v21, 1), v25, v21.f32[0]);
    float v36 = v34 + (float)((float)((float)(a2[18] * _D1.f32[0]) + vmuls_lane_f32(a2[21], _D1, 1)) + (float)(v10 * a2[24]));
    float v37 = (float)(v35 + (float)(v27 * v22))
        + (float)((float)((float)(a2[19] * _D1.f32[0]) + vmuls_lane_f32(a2[22], _D1, 1)) + (float)(v10 * a2[25]));
    float v38 = (float)((float)((float)((float)(*a2 * _D1.f32[0]) + v26) + (float)(v10 * v29))
                + (float)((float)((float)(a2[9] * v21.f32[0]) + vmuls_lane_f32(a2[12], v21, 1)) + (float)(v22 * a2[15])))
        + *a5;
    float v39 = v32 + a5[1];
    float v40 = v33 + a5[2];
    float v41 = v36 + a5[4];
    float v42 = v37 + a5[5];
    float v43 = (float)((float)(vmlas_n_f32(vmuls_lane_f32(v30, v21, 1), v29, v21.f32[0]) + (float)(v31 * v22))
                + (float)((float)((float)(a2[20] * _D1.f32[0]) + vmuls_lane_f32(a2[23], _D1, 1)) + (float)(v10 * a2[26])))
        + a5[6];
    float v44 = (float *)(a4 + 12);
    float v45 = (float *)v61;
    uint64_t v46 = *(unsigned int *)(a4 + 72);
    do
    {
      *v45++ = -(float)((float)((float)((float)(v39 * v44[1]) + (float)(*v44 * v38)) + (float)(v44[2] * v40))
                      + (float)((float)((float)(v42 * *(v44 - 2)) + (float)(*(v44 - 3) * v41))
                              + (float)(*(v44 - 1) * v43)));
      v44 += 6;
      --v46;
    }
    while (v46);
    uint64_t v47 = 0;
    float32x2_t v48 = 0;
    float v49 = 0.0;
    float v50 = 0.0;
    float32x2_t v51 = 0;
    do
    {
      float32x2_t v52 = (float *)v61;
      float32_t v53 = a3;
      uint64_t v54 = v8;
      float v55 = 0.0;
      do
      {
        float v56 = *v53;
        v53 += 3;
        float v57 = v56;
        float v58 = *v52++;
        float v55 = v55 + (float)(v57 * v58);
        --v54;
      }
      while (v54);
      *(float *)(a6 + 4 * v47) = v55 + *(float *)(a6 + 4 * v47);
      uint64_t v59 = a4 + 24 * v47;
      float32x2_t v48 = vadd_f32(v48, vmul_n_f32(*(float32x2_t *)v59, v55));
      float v50 = v50 + (float)(v55 * *(float *)(v59 + 8));
      float32x2_t v51 = vadd_f32(v51, vmul_n_f32(*(float32x2_t *)(v59 + 12), v55));
      float v49 = v49 + (float)(v55 * *(float *)(v59 + 20));
      ++v47;
      ++a3;
    }
    while (v47 != v8);
  }
  else
  {
    float32x2_t v48 = 0;
    float v50 = 0.0;
    float v49 = 0.0;
    float32x2_t v51 = 0;
  }
  float32_t result = v10 + v50;
  *a8 = vadd_f32(_D1, v48);
  a8[1].f32[0] = result;
  a8[1].i32[1] = 0;
  a8[2] = vadd_f32(v21, v51);
  a8[3].f32[0] = v22 + v49;
  a8[3].i32[1] = 0;
  return result;
}

float physx::Dy::FeatherstoneArticulation::pxcFsGetVelocity@<S0>(physx::Dy::FeatherstoneArticulation *this@<X0>, unsigned int a2@<W1>, _OWORD *a3@<X8>)
{
  uint64_t v3 = (float *)*((void *)this + 46);
  char v4 = **((unsigned char **)this + 83);
  uint64_t v5 = *((void *)this + 76);
  int8x16_t v6 = 0uLL;
  long long v50 = 0u;
  long long v51 = 0u;
  float v7 = 0.0;
  float v8 = 0.0;
  if ((v4 & 1) == 0)
  {
    float v9 = v3[1];
    float v10 = v3[2];
    float v12 = v3[4];
    float v11 = v3[5];
    _S17 = v3[6];
    _D4 = *(int32x2_t *)((char *)this + 736);
    _D20 = *(int32x2_t *)((char *)this + 748);
    _D5 = *(int32x2_t *)((char *)this + 760);
    int32x2_t v17 = (int32x2_t)vsub_f32(vsub_f32(vmul_n_f32(*(float32x2_t *)((char *)this + 784), -v11), vmul_n_f32(*(float32x2_t *)((char *)this + 772), v12)), vmul_n_f32(*(float32x2_t *)((char *)this + 796), _S17));
    float v8 = (float)((float)((float)-(float)(v9 * *((float *)this + 186)) - (float)(*v3 * *((float *)this + 183)))
               - (float)(v10 * *((float *)this + 189)))
       + (float)((float)((float)-(float)(v11 * *((float *)this + 195)) - (float)(v12 * *((float *)this + 192)))
               - (float)(_S17 * *((float *)this + 198)));
    __asm
    {
      FMLS            S18, S17, V4.S[1]
      FMLS            S19, S17, V20.S[1]
      FMLS            S7, S17, V5.S[1]
    }
    *(int32x2_t *)v25.f32 = vrev64_s32(*(int32x2_t *)((char *)this + 816));
    *(int32x2_t *)&v25.u32[2] = vrev64_s32(_D20);
    *(int32x2_t *)v26.f32 = vrev64_s32(*(int32x2_t *)((char *)this + 804));
    *(int32x2_t *)&v26.u32[2] = vrev64_s32(_D4);
    *(int32x2_t *)v27.f32 = vrev64_s32(*(int32x2_t *)((char *)this + 828));
    *(int32x2_t *)&v27.u32[2] = vrev64_s32(_D5);
    _Q19.i32[1] = _S18;
    *(int32x2_t *)&_Q19.u32[2] = vrev64_s32(v17);
    int8x16_t v6 = (int8x16_t)vaddq_f32(_Q19, vsubq_f32(vsubq_f32(vmulq_n_f32(v25, -v9), vmulq_n_f32(v26, *v3)), vmulq_n_f32(v27, v10)));
    float v7 = _S7
       + (float)((float)((float)-(float)(v9 * *((float *)this + 206)) - (float)(*v3 * *((float *)this + 203)))
               - (float)(v10 * *((float *)this + 209)));
    *(float *)&long long v50 = v8;
    *(int32x2_t *)((char *)&v50 + 4) = vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL));
    *(int32x2_t *)&long long v51 = vrev64_s32(*(int32x2_t *)v6.i8);
    *((float *)&v51 + 2) = v7;
  }
  uint64_t v28 = a2;
  uint64_t v29 = *(void *)(v5 + 40 * a2 + 8);
  uint64_t v30 = v29 - 1;
  if (v29 != 1)
  {
    uint64_t v43 = a2;
    float v44 = this;
    float v45 = a3;
    uint64_t v31 = *((void *)this + 78);
    uint64_t v32 = *((void *)this + 60);
    uint64_t v33 = *((void *)this + 62);
    uint64_t v34 = *((void *)this + 66);
    do
    {
      unsigned int v35 = __clz(__rbit32(v30));
      LODWORD(v36) = __clz(__rbit32(HIDWORD(v30))) + 32;
      if (v30) {
        uint64_t v36 = v35;
      }
      else {
        uint64_t v36 = v36;
      }
      physx::Dy::FeatherstoneArticulation::propagateVelocityTestImpulseW(&v46, v31 + 160 * v36 + 120, (float *)(v32 + 112 * v36), (float *)(v33 + 36 * v36), v34 + 76 * v36, &v3[8 * v36], (float32x2_t *)&v50);
      float v8 = v46.f32[0];
      *(float32x2_t *)&long long v50 = v46;
      *((void *)&v50 + 1) = v47;
      *(int32x2_t *)&long long v51 = v48;
      float v7 = v49;
      *((void *)&v51 + 1) = LODWORD(v49);
      v30 &= v30 - 1;
    }
    while (v30);
    *(int32x2_t *)v6.i8 = vrev64_s32(v48);
    v6.i64[1] = __PAIR64__(v46.u32[1], v47);
    this = v44;
    a3 = v45;
    uint64_t v28 = v43;
  }
  float v37 = (float32x2_t *)(*((void *)this + 40) + 32 * v28);
  int8x16_t v38 = vextq_s8(v6, v6, 8uLL);
  *(float *)v38.i32 = v8;
  *(float32x2_t *)&long long v41 = vadd_f32(*(float32x2_t *)v38.i8, *v37);
  *(float *)&unsigned int v39 = *(float *)&v6.i32[2] + v37[1].f32[0];
  *(float32x2_t *)&long long v40 = vadd_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v6.i8), v37[2]);
  *((void *)&v40 + 1) = COERCE_UNSIGNED_INT(v7 + v37[3].f32[0]);
  *((void *)&v41 + 1) = v39;
  *a3 = v40;
  a3[1] = v41;
  return *(float *)&v41;
}

float32_t physx::Dy::FeatherstoneArticulation::propagateVelocityTestImpulseW(float32x2_t *a1, uint64_t a2, float *a3, float *a4, uint64_t a5, float *a6, float32x2_t *a7)
{
  v60[3] = *MEMORY[0x263EF8340];
  uint64_t v7 = *(unsigned int *)(a5 + 72);
  _S2 = *(_DWORD *)a2;
  float v9 = a7[1].f32[0];
  _D1 = *a7;
  v11.i32[1] = HIDWORD(*(void *)(a2 + 4));
  v11.i32[0] = *(_DWORD *)a2;
  v12.i32[1] = HIDWORD(*(unint64_t *)a7);
  v12.f32[0] = v9;
  float32x2_t v13 = (float32x2_t)vrev64_s32((int32x2_t)vmul_f32(v11, v12));
  float32x2_t v14 = (float32x2_t)vdup_lane_s32((int32x2_t)*a7, 0);
  v14.f32[0] = v9;
  __asm { FMLS            S3, S2, V1.S[1] }
  float32x2_t v20 = vadd_f32(vmls_f32(v13, v14, *(float32x2_t *)(a2 + 4)), a7[2]);
  float v21 = _S3 + a7[3].f32[0];
  if (v7)
  {
    float v22 = a3[1];
    float v23 = a3[2];
    float v24 = a3[3];
    float v25 = vmuls_lane_f32(v24, _D1, 1);
    float v27 = a3[4];
    float v26 = a3[5];
    float v28 = a3[6];
    float v29 = a3[7];
    float v30 = a3[8];
    float v31 = (float)((float)((float)(v22 * _D1.f32[0]) + vmuls_lane_f32(v27, _D1, 1)) + (float)(v9 * v29))
        + (float)((float)((float)(a3[10] * v20.f32[0]) + vmuls_lane_f32(a3[13], v20, 1)) + (float)(v21 * a3[16]));
    float v32 = (float)((float)((float)(v23 * _D1.f32[0]) + vmuls_lane_f32(v26, _D1, 1)) + (float)(v9 * v30))
        + (float)((float)((float)(a3[11] * v20.f32[0]) + vmuls_lane_f32(a3[14], v20, 1)) + (float)(v21 * a3[17]));
    float v33 = vmlas_n_f32(vmuls_lane_f32(v22, v20, 1), *a3, v20.f32[0]) + (float)(v23 * v21);
    float v34 = vmlas_n_f32(vmuls_lane_f32(v27, v20, 1), v24, v20.f32[0]);
    float v35 = v33 + (float)((float)((float)(a3[18] * _D1.f32[0]) + vmuls_lane_f32(a3[21], _D1, 1)) + (float)(v9 * a3[24]));
    float v36 = (float)(v34 + (float)(v26 * v21))
        + (float)((float)((float)(a3[19] * _D1.f32[0]) + vmuls_lane_f32(a3[22], _D1, 1)) + (float)(v9 * a3[25]));
    float v37 = (float)((float)((float)((float)(*a3 * _D1.f32[0]) + v25) + (float)(v9 * v28))
                + (float)((float)((float)(a3[9] * v20.f32[0]) + vmuls_lane_f32(a3[12], v20, 1)) + (float)(v21 * a3[15])))
        + *a6;
    float v38 = v31 + a6[1];
    float v39 = v32 + a6[2];
    float v40 = v35 + a6[4];
    float v41 = v36 + a6[5];
    float v42 = (float)((float)(vmlas_n_f32(vmuls_lane_f32(v29, v20, 1), v28, v20.f32[0]) + (float)(v30 * v21))
                + (float)((float)((float)(a3[20] * _D1.f32[0]) + vmuls_lane_f32(a3[23], _D1, 1)) + (float)(v9 * a3[26])))
        + a6[6];
    uint64_t v43 = (float *)(a5 + 12);
    float v44 = (float *)v60;
    uint64_t v45 = *(unsigned int *)(a5 + 72);
    do
    {
      *v44++ = -(float)((float)((float)((float)(v38 * v43[1]) + (float)(*v43 * v37)) + (float)(v43[2] * v39))
                      + (float)((float)((float)(v41 * *(v43 - 2)) + (float)(*(v43 - 3) * v40))
                              + (float)(*(v43 - 1) * v42)));
      v43 += 6;
      --v45;
    }
    while (v45);
    uint64_t v46 = 0;
    float32x2_t v47 = 0;
    float v48 = 0.0;
    float v49 = 0.0;
    float32x2_t v50 = 0;
    do
    {
      long long v51 = (float *)v60;
      float32x2_t v52 = a4;
      uint64_t v53 = v7;
      float v54 = 0.0;
      do
      {
        float v55 = *v52;
        v52 += 3;
        float v56 = v55;
        float v57 = *v51++;
        float v54 = v54 + (float)(v56 * v57);
        --v53;
      }
      while (v53);
      uint64_t v58 = a5 + 24 * v46;
      float32x2_t v47 = vadd_f32(v47, vmul_n_f32(*(float32x2_t *)v58, v54));
      float v49 = v49 + (float)(v54 * *(float *)(v58 + 8));
      float32x2_t v50 = vadd_f32(v50, vmul_n_f32(*(float32x2_t *)(v58 + 12), v54));
      float v48 = v48 + (float)(v54 * *(float *)(v58 + 20));
      ++v46;
      ++a4;
    }
    while (v46 != v7);
  }
  else
  {
    float32x2_t v47 = 0;
    float v49 = 0.0;
    float v48 = 0.0;
    float32x2_t v50 = 0;
  }
  float32_t result = v9 + v49;
  *a1 = vadd_f32(_D1, v47);
  a1[1].f32[0] = result;
  a1[1].i32[1] = 0;
  a1[2] = vadd_f32(v20, v50);
  a1[3].f32[0] = v21 + v48;
  a1[3].i32[1] = 0;
  return result;
}

__n128 physx::Dy::FeatherstoneArticulation::pxcFsGetVelocities(uint64_t a1, unsigned int a2, unsigned int a3, _OWORD *a4, _OWORD *a5)
{
  uint64_t v5 = *(float **)(a1 + 368);
  char v6 = **(unsigned char **)(a1 + 664);
  uint64_t v7 = *(void *)(a1 + 608);
  int8x16_t v8 = 0uLL;
  long long v94 = 0u;
  long long v95 = 0u;
  float v9 = 0.0;
  float v10 = 0.0;
  if ((v6 & 1) == 0)
  {
    float v11 = v5[1];
    float v12 = v5[2];
    float v13 = v5[4];
    float v14 = v5[5];
    _S17 = v5[6];
    _D3 = *(int32x2_t *)(a1 + 736);
    _D20 = *(int32x2_t *)(a1 + 748);
    _D4 = *(int32x2_t *)(a1 + 760);
    int32x2_t v19 = (int32x2_t)vsub_f32(vsub_f32(vmul_n_f32(*(float32x2_t *)(a1 + 784), -v14), vmul_n_f32(*(float32x2_t *)(a1 + 772), v13)), vmul_n_f32(*(float32x2_t *)(a1 + 796), _S17));
    float v10 = (float)((float)((float)-(float)(v11 * *(float *)(a1 + 744)) - (float)(*v5 * *(float *)(a1 + 732)))
                - (float)(v12 * *(float *)(a1 + 756)))
        + (float)((float)((float)-(float)(v14 * *(float *)(a1 + 780)) - (float)(v13 * *(float *)(a1 + 768)))
                - (float)(_S17 * *(float *)(a1 + 792)));
    __asm
    {
      FMLS            S18, S17, V3.S[1]
      FMLS            S19, S17, V20.S[1]
      FMLS            S6, S17, V4.S[1]
    }
    *(int32x2_t *)v27.f32 = vrev64_s32(*(int32x2_t *)(a1 + 816));
    *(int32x2_t *)&v27.u32[2] = vrev64_s32(_D20);
    *(int32x2_t *)v28.f32 = vrev64_s32(*(int32x2_t *)(a1 + 804));
    *(int32x2_t *)&v28.u32[2] = vrev64_s32(_D3);
    *(int32x2_t *)v29.f32 = vrev64_s32(*(int32x2_t *)(a1 + 828));
    *(int32x2_t *)&v29.u32[2] = vrev64_s32(_D4);
    _Q19.i32[1] = _S18;
    *(int32x2_t *)&_Q19.u32[2] = vrev64_s32(v19);
    int8x16_t v8 = (int8x16_t)vaddq_f32(_Q19, vsubq_f32(vsubq_f32(vmulq_n_f32(v27, -v11), vmulq_n_f32(v28, *v5)), vmulq_n_f32(v29, v12)));
    float v9 = _S6
       + (float)((float)((float)-(float)(v11 * *(float *)(a1 + 824)) - (float)(*v5 * *(float *)(a1 + 812)))
               - (float)(v12 * *(float *)(a1 + 836)));
    *(float *)&long long v94 = v10;
    *(int32x2_t *)((char *)&v94 + 4) = vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL));
    *(int32x2_t *)&long long v95 = vrev64_s32(*(int32x2_t *)v8.i8);
    *((float *)&v95 + 2) = v9;
  }
  uint64_t v30 = *(void *)(v7 + 40 * a2 + 8);
  uint64_t v31 = *(void *)(v7 + 40 * a3 + 8);
  uint64_t v32 = v31 & v30;
  uint64_t v33 = v31 & v30 ^ v30;
  uint64_t v34 = (v31 & v30) - 1;
  if ((v31 & v30) != 1)
  {
    uint64_t v74 = v31 & v30;
    uint64_t v76 = *(void *)(v7 + 40 * a3 + 8);
    unsigned int v78 = a2;
    unsigned int v80 = a3;
    uint64_t v35 = *(void *)(a1 + 624);
    uint64_t v36 = *(void *)(a1 + 480);
    uint64_t v37 = *(void *)(a1 + 496);
    uint64_t v38 = *(void *)(a1 + 528);
    do
    {
      unsigned int v39 = __clz(__rbit32(v34));
      LODWORD(v40) = __clz(__rbit32(HIDWORD(v34))) + 32;
      if (v34) {
        uint64_t v40 = v39;
      }
      else {
        uint64_t v40 = v40;
      }
      physx::Dy::FeatherstoneArticulation::propagateVelocityTestImpulseW((float32x2_t *)v89, v35 + 160 * v40 + 120, (float *)(v36 + 112 * v40), (float *)(v37 + 36 * v40), v38 + 76 * v40, &v5[8 * v40], (float32x2_t *)&v94);
      float v10 = *(float *)v89;
      *(void *)&long long v94 = *(void *)v89;
      *((void *)&v94 + 1) = *(unsigned int *)&v89[8];
      *(int32x2_t *)&long long v95 = v91;
      float v9 = v92;
      *((void *)&v95 + 1) = LODWORD(v92);
      v34 &= v34 - 1;
    }
    while (v34);
    *(int32x2_t *)v8.i8 = vrev64_s32(v91);
    v8.i64[1] = __PAIR64__(*(unsigned int *)&v89[4], *(unsigned int *)&v89[8]);
    a3 = v80;
    a2 = v78;
    uint64_t v32 = v74;
    uint64_t v31 = v76;
  }
  uint64_t v75 = a2;
  uint64_t v77 = a3;
  uint64_t v41 = v32 ^ v31;
  *(float *)v89 = v10;
  float v42 = *(float *)&v8.i32[3];
  *(int32x2_t *)&v89[4] = vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL));
  float v43 = *(float *)&v8.i32[2];
  int v90 = 0;
  float v44 = *(float *)&v8.i32[1];
  int32x2_t v91 = vrev64_s32(*(int32x2_t *)v8.i8);
  float v45 = v9;
  float v79 = *(float *)v8.i32;
  float v81 = v10;
  float v46 = *(float *)v8.i32;
  float v92 = v9;
  int v93 = 0;
  float v47 = *(float *)&v8.i32[1];
  uint64_t v73 = v8.i64[1];
  float v48 = v10;
  if (v33)
  {
    uint64_t v49 = *(void *)(a1 + 624);
    uint64_t v50 = *(void *)(a1 + 480);
    uint64_t v51 = *(void *)(a1 + 496);
    uint64_t v52 = *(void *)(a1 + 528);
    do
    {
      unsigned int v53 = __clz(__rbit32(v33));
      LODWORD(v54) = __clz(__rbit32(HIDWORD(v33))) + 32;
      if (v33) {
        uint64_t v54 = v53;
      }
      else {
        uint64_t v54 = v54;
      }
      physx::Dy::FeatherstoneArticulation::propagateVelocityTestImpulseW(&v85, v49 + 160 * v54 + 120, (float *)(v50 + 112 * v54), (float *)(v51 + 36 * v54), v52 + 76 * v54, &v5[8 * v54], (float32x2_t *)&v94);
      float v42 = v85.f32[1];
      float v48 = v85.f32[0];
      *(float32x2_t *)&long long v94 = v85;
      float v43 = v86;
      float v46 = *(float *)&v87.i32[1];
      float v47 = *(float *)v87.i32;
      *((void *)&v94 + 1) = LODWORD(v86);
      float v45 = v88;
      *(int32x2_t *)&long long v95 = v87;
      *((void *)&v95 + 1) = LODWORD(v88);
      v33 &= v33 - 1;
    }
    while (v33);
  }
  float v56 = v79;
  float v55 = v81;
  float v57 = *((float *)&v73 + 1);
  float v58 = *(float *)&v73;
  if (v41)
  {
    uint64_t v59 = *(void *)(a1 + 624);
    uint64_t v60 = *(void *)(a1 + 480);
    uint64_t v61 = *(void *)(a1 + 496);
    uint64_t v62 = *(void *)(a1 + 528);
    do
    {
      unsigned int v63 = __clz(__rbit32(v41));
      LODWORD(v64) = __clz(__rbit32(HIDWORD(v41))) + 32;
      if (v41) {
        uint64_t v64 = v63;
      }
      else {
        uint64_t v64 = v64;
      }
      physx::Dy::FeatherstoneArticulation::propagateVelocityTestImpulseW(&v85, v59 + 160 * v64 + 120, (float *)(v60 + 112 * v64), (float *)(v61 + 36 * v64), v62 + 76 * v64, &v5[8 * v64], (float32x2_t *)v89);
      float v57 = v85.f32[1];
      float v55 = v85.f32[0];
      *(float32x2_t *)v89 = v85;
      float v58 = v86;
      float v56 = *(float *)&v87.i32[1];
      float v44 = *(float *)v87.i32;
      *(float *)&v89[8] = v86;
      int v90 = 0;
      float v9 = v88;
      int32x2_t v91 = v87;
      float v92 = v88;
      int v93 = 0;
      v41 &= v41 - 1;
    }
    while (v41);
  }
  int8x16_t v65 = (float *)(*(void *)(a1 + 320) + 32 * v75);
  HIDWORD(v66) = 0;
  *(float *)&long long v66 = v47 + v65[4];
  *((float *)&v66 + 1) = v46 + v65[5];
  *((float *)&v66 + 2) = v45 + v65[6];
  HIDWORD(v67) = 0;
  *(float *)&long long v67 = v48 + *v65;
  HIDWORD(v71) = 0;
  *((float *)&v67 + 1) = v42 + v65[1];
  *((float *)&v67 + 2) = v43 + v65[2];
  *a4 = v66;
  a4[1] = v67;
  float32x2_t v68 = (float *)(*(void *)(a1 + 320) + 32 * v77);
  float v69 = v55 + *v68;
  HIDWORD(v70) = 0;
  *(float *)&long long v70 = v44 + v68[4];
  *((float *)&v70 + 1) = v56 + v68[5];
  *((float *)&v70 + 2) = v9 + v68[6];
  *(float *)&long long v71 = v69;
  *((float *)&v71 + 1) = v57 + v68[1];
  *((float *)&v71 + 2) = v58 + v68[2];
  *a5 = v70;
  a5[1] = v71;
  result.n128_u64[0] = v71;
  result.n128_u32[2] = DWORD2(v71);
  return result;
}

uint64_t physx::Dy::FeatherstoneArticulation::pxcFsGetVelocityTGS(physx::Dy::FeatherstoneArticulation *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 232))();
}

float32_t physx::Dy::FeatherstoneArticulation::pxcFsApplyImpulse(uint64_t a1, unsigned int a2, __n128 a3, __n128 a4)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 368);
  uint64_t v7 = *(void *)(a1 + 624);
  *(unsigned char *)(a1 + 685) = 1;
  float32x2_t v20 = vneg_f32((float32x2_t)a3.n128_u64[0]);
  float v21 = -a3.n128_f32[2];
  int v22 = 0;
  float32x2_t v23 = vneg_f32((float32x2_t)a4.n128_u64[0]);
  float v24 = -a4.n128_f32[2];
  int v25 = 0;
  int8x16_t v8 = (float32x2_t *)(v6 + 32 * a2);
  float32x2_t *v8 = vsub_f32(*v8, (float32x2_t)a3.n128_u64[0]);
  v8[1].f32[0] = v8[1].f32[0] - a3.n128_f32[2];
  v8[2] = vsub_f32(v8[2], (float32x2_t)a4.n128_u64[0]);
  float32_t result = v8[3].f32[0] - a4.n128_f32[2];
  v8[3].f32[0] = result;
  if (a2)
  {
    uint64_t v10 = *(void *)(a1 + 544);
    uint64_t v11 = *(void *)(a1 + 528);
    do
    {
      physx::Dy::FeatherstoneArticulation::propagateImpulseW(v10 + 96 * v4, (float32x2_t *)(v7 + 160 * v4 + 120), v11 + 76 * v4, (uint64_t)&v20, (uint64_t)&v16);
      float v12 = v17;
      float v21 = v17;
      int v22 = 0;
      float v13 = v19;
      float v24 = v19;
      int v25 = 0;
      float32x2_t v20 = v16;
      float32x2_t v14 = v18;
      float32x2_t v23 = v18;
      uint64_t v4 = *(unsigned int *)(v5 + 40 * v4 + 32);
      float32x2_t v15 = (float32x2_t *)(v6 + 32 * v4);
      *float32x2_t v15 = vadd_f32(v16, *v15);
      v15[1].f32[0] = v12 + v15[1].f32[0];
      v15[2] = vadd_f32(v14, v15[2]);
      float32_t result = v13 + v15[3].f32[0];
      v15[3].f32[0] = result;
    }
    while (v4);
  }
  return result;
}

float32x2_t physx::Dy::FeatherstoneArticulation::propagateImpulseW@<D0>(uint64_t a1@<X0>, float32x2_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5 = *(unsigned int *)(a3 + 72);
  float v6 = *(float *)(a4 + 8);
  float v7 = *(float *)(a4 + 16);
  float32x2_t v8 = *(float32x2_t *)a4;
  float32x2_t v9 = *(float32x2_t *)(a4 + 20);
  if (v5)
  {
    uint64_t v10 = (float *)(a3 + 12);
    uint64_t v11 = a1 + 16;
    float32x2_t v12 = 0;
    float v13 = 0.0;
    float v14 = 0.0;
    float32x2_t v15 = 0;
    do
    {
      float v16 = (float)((float)((float)(v8.f32[1] * v10[1]) + (float)(*v10 * v8.f32[0])) + (float)(v10[2] * v6))
          + (float)((float)((float)(v9.f32[0] * *(v10 - 2)) + (float)(*(v10 - 3) * v7)) + (float)(*(v10 - 1) * v9.f32[1]));
      float32x2_t v15 = vadd_f32(v15, vmul_n_f32(*(float32x2_t *)(v11 - 16), v16));
      float v14 = v14 + (float)(v16 * *(float *)(v11 - 8));
      float v13 = v13 + (float)(v16 * *(float *)v11);
      float32x2_t v12 = vadd_f32(v12, vmul_n_f32(*(float32x2_t *)(v11 + 4), v16));
      v10 += 6;
      v11 += 32;
      --v5;
    }
    while (v5);
  }
  else
  {
    float32x2_t v12 = 0;
    float v14 = 0.0;
    float v13 = 0.0;
    float32x2_t v15 = 0;
  }
  float32x2_t v17 = vsub_f32(v8, v15);
  _S0 = v6 - v14;
  float v19 = v7 - v13;
  float32x2_t v20 = vsub_f32(v9, v12);
  v12.i32[0] = a2[1].i32[0];
  *(float32x2_t *)a5 = v17;
  *(float *)(a5 + 8) = _S0;
  *(_DWORD *)(a5 + 12) = 0;
  _D6 = *a2;
  __asm { FMLA            S5, S0, V6.S[1] }
  float32x2_t v27 = (float32x2_t)vdup_lane_s32((int32x2_t)v17, 0);
  v27.f32[0] = _S0;
  float32x2_t v28 = vmla_f32(vmul_f32(v27, vneg_f32(*a2)), v17, (float32x2_t)vzip1_s32((int32x2_t)v12, (int32x2_t)*a2));
  *(float *)(a5 + 16) = v19 + _S5;
  float32x2_t result = vadd_f32(v20, v28);
  *(float32x2_t *)(a5 + 20) = result;
  *(_DWORD *)(a5 + 28) = 0;
  return result;
}

float32_t physx::Dy::FeatherstoneArticulation::pxcFsApplyImpulses(uint64_t a1, float32x2_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 608);
  int v4 = *(_DWORD *)(a1 + 616);
  uint64_t v5 = *(float32x2_t **)(a1 + 368);
  *(unsigned char *)(a1 + 685) = 1;
  uint64_t v6 = (v4 - 1);
  if (v6)
  {
    uint64_t v7 = v6 - 1;
    float32x2_t v8 = &v5[4 * v6 + 2];
    float32x2_t v9 = &a2[4 * v6];
    uint64_t v10 = *(void *)(a1 + 544) + 96 * v6;
    uint64_t v11 = (float32x2_t *)(*(void *)(a1 + 624) + 160 * v6 + 120);
    uint64_t v12 = *(void *)(a1 + 528) + 76 * v6;
    float v13 = (unsigned int *)(v3 + 40 * v6 + 32);
    do
    {
      physx::Dy::FeatherstoneArticulation::propagateImpulseW(v10, v11, v12, (uint64_t)v9, (uint64_t)&v17);
      unsigned int v14 = *v13;
      v13 -= 10;
      float32x2_t v15 = &a2[4 * v14];
      *float32x2_t v15 = vadd_f32(v17, *v15);
      v15[1].f32[0] = v18 + v15[1].f32[0];
      v15[2] = vadd_f32(v19, v15[2]);
      v15[3].f32[0] = v20 + v15[3].f32[0];
      v8[-2] = vadd_f32(*v9, v8[-2]);
      v8[-1].f32[0] = v9[1].f32[0] + v8[-1].f32[0];
      float32x2_t *v8 = vadd_f32(v9[2], *v8);
      v8[1].f32[0] = v9[3].f32[0] + v8[1].f32[0];
      LODWORD(v15) = v7--;
      v8 -= 4;
      v9 -= 4;
      v10 -= 96;
      v11 -= 20;
      v12 -= 76;
    }
    while (v15);
  }
  *uint64_t v5 = vadd_f32(*a2, *v5);
  v5[1].f32[0] = a2[1].f32[0] + v5[1].f32[0];
  v5[2] = vadd_f32(a2[2], v5[2]);
  float32_t result = a2[3].f32[0] + v5[3].f32[0];
  v5[3].f32[0] = result;
  return result;
}

void physx::Dy::FeatherstoneArticulation::pxcFsApplyImpulses(uint64_t a1, unsigned int a2, float32x2_t *a3, float32x2_t *a4, unsigned int a5, float32x2_t *a6, float32x2_t *a7)
{
  LODWORD(v7) = a2;
  uint64_t v8 = *(void *)(a1 + 624);
  *(unsigned char *)(a1 + 685) = 1;
  uint64_t v9 = *(void *)(a1 + 368);
  uint64_t v10 = *(void *)(a1 + 56);
  float32x2_t v11 = *a4;
  float v12 = a4[1].f32[0];
  float32x2_t v13 = *a3;
  float v14 = a3[1].f32[0];
  float v15 = a7[1].f32[0];
  float v16 = a6[1].f32[0];
  uint64_t v17 = a2;
  unint64_t v18 = *(void *)(v10 + 40 * a5 + 8) & *(void *)(v10 + 40 * a2 + 8);
  unint64_t v19 = HIDWORD(v18);
  unsigned int v20 = 31 - __clz(v18);
  unsigned int v21 = __clz(v19) ^ 0x3F;
  if (v19) {
    LODWORD(v22) = v21;
  }
  else {
    LODWORD(v22) = v20;
  }
  float v23 = -v14;
  float v24 = -v12;
  float32x2_t v25 = vneg_f32(v13);
  float32x2_t v78 = v25;
  float v79 = -v14;
  int v80 = 0;
  float32x2_t v26 = vneg_f32(v11);
  float32x2_t v81 = v26;
  float v82 = -v12;
  int v83 = 0;
  float v27 = -v16;
  float v28 = -v15;
  int v74 = 0;
  int v77 = 0;
  float32x4_t v29 = (float32x2_t *)(v9 + 32 * a5);
  float32x2_t v30 = *a6;
  v31.f32[0] = -COERCE_FLOAT(*a6);
  float v32 = -COERCE_FLOAT(HIDWORD(*(unint64_t *)a6));
  v72.f32[0] = v31.f32[0];
  v72.f32[1] = v32;
  float v73 = -v16;
  float32x2_t v33 = vsub_f32(*v29, v30);
  float32_t v34 = v29[1].f32[0] - v16;
  float32x2_t v35 = *a7;
  v36.f32[0] = -COERCE_FLOAT(*a7);
  float v37 = -COERCE_FLOAT(HIDWORD(*(unint64_t *)a7));
  v75.f32[0] = v36.f32[0];
  v75.f32[1] = v37;
  float v76 = -v15;
  *float32x4_t v29 = v33;
  v29[1].f32[0] = v34;
  v29[2] = vsub_f32(v29[2], v35);
  v29[3].f32[0] = v29[3].f32[0] - v15;
  uint64_t v61 = a1;
  if (v22 != a5)
  {
    LODWORD(v38) = a5;
    uint64_t v54 = a2;
    float32x2_t v55 = v11;
    float v56 = v12;
    float32x2_t v57 = v26;
    float32x2_t v59 = v25;
    uint64_t v39 = *(void *)(a1 + 544);
    uint64_t v40 = *(void *)(a1 + 528);
    do
    {
      physx::Dy::FeatherstoneArticulation::propagateImpulseW(v39 + 96 * v38, (float32x2_t *)(v8 + 160 * v38 + 120), v40 + 76 * v38, (uint64_t)&v72, (uint64_t)&v66);
      float v27 = v67;
      float v73 = v67;
      int v74 = 0;
      float v28 = v70;
      float v76 = v70;
      int v77 = 0;
      float32x2_t v31 = v66;
      float32x2_t v72 = v66;
      float32x2_t v36 = v69;
      float32x2_t v75 = v69;
      uint64_t v38 = *(unsigned int *)(v10 + 40 * v38 + 32);
      uint64_t v41 = (float32x2_t *)(v9 + 32 * v38);
      *uint64_t v41 = vadd_f32(v66, *v41);
      v41[1].f32[0] = v27 + v41[1].f32[0];
      v41[2] = vadd_f32(v36, v41[2]);
      v41[3].f32[0] = v28 + v41[3].f32[0];
    }
    while (v38 != v22);
    float v32 = v31.f32[1];
    float v37 = v36.f32[1];
    a1 = v61;
    float32x2_t v26 = v57;
    float32x2_t v25 = v59;
    float v12 = v56;
    float32x2_t v11 = v55;
    uint64_t v17 = v54;
  }
  float v42 = (float32x2_t *)(v9 + 32 * v17);
  *float v42 = vsub_f32(*v42, v13);
  v42[1].f32[0] = v42[1].f32[0] - v14;
  v42[2] = vsub_f32(v42[2], v11);
  v42[3].f32[0] = v42[3].f32[0] - v12;
  if (v22 == v7)
  {
    float v43 = v25.f32[1];
    float v44 = v26.f32[1];
  }
  else
  {
    __int32 v58 = v36.i32[0];
    __int32 v60 = v31.i32[0];
    uint64_t v45 = *(void *)(a1 + 544);
    uint64_t v46 = *(void *)(a1 + 528);
    do
    {
      physx::Dy::FeatherstoneArticulation::propagateImpulseW(v45 + 96 * v7, (float32x2_t *)(v8 + 160 * v7 + 120), v46 + 76 * v7, (uint64_t)&v78, (uint64_t)&v66);
      float v23 = v67;
      float v79 = v67;
      int v80 = 0;
      float v24 = v70;
      float v82 = v70;
      int v83 = 0;
      float32x2_t v25 = v66;
      float32x2_t v78 = v66;
      float32x2_t v26 = v69;
      float32x2_t v81 = v69;
      uint64_t v7 = *(unsigned int *)(v10 + 40 * v7 + 32);
      float v47 = (float32x2_t *)(v9 + 32 * v7);
      float32x2_t *v47 = vadd_f32(v66, *v47);
      v47[1].f32[0] = v23 + v47[1].f32[0];
      v47[2] = vadd_f32(v26, v47[2]);
      v47[3].f32[0] = v24 + v47[3].f32[0];
    }
    while (v7 != v22);
    float v43 = v25.f32[1];
    float v44 = v26.f32[1];
    a1 = v61;
    v36.i32[0] = v58;
    v31.i32[0] = v60;
  }
  v66.f32[0] = v31.f32[0] + v25.f32[0];
  v66.f32[1] = v32 + v43;
  float v67 = v27 + v23;
  int v68 = 0;
  v69.f32[0] = v36.f32[0] + v26.f32[0];
  v69.f32[1] = v37 + v44;
  float v70 = v28 + v24;
  int v71 = 0;
  if (v22)
  {
    uint64_t v48 = *(void *)(a1 + 544);
    uint64_t v49 = *(void *)(a1 + 528);
    do
    {
      physx::Dy::FeatherstoneArticulation::propagateImpulseW(v48 + 96 * v22, (float32x2_t *)(v8 + 160 * v22 + 120), v49 + 76 * v22, (uint64_t)&v66, (uint64_t)&v62);
      float v50 = v63;
      float v67 = v63;
      int v68 = 0;
      float v51 = v65;
      float v70 = v65;
      int v71 = 0;
      float32x2_t v66 = v62;
      float32x2_t v52 = v64;
      float32x2_t v69 = v64;
      uint64_t v22 = *(unsigned int *)(v10 + 40 * v22 + 32);
      unsigned int v53 = (float32x2_t *)(v9 + 32 * v22);
      *unsigned int v53 = vadd_f32(v62, *v53);
      v53[1].f32[0] = v50 + v53[1].f32[0];
      v53[2] = vadd_f32(v52, v53[2]);
      v53[3].f32[0] = v51 + v53[3].f32[0];
    }
    while (v22);
  }
}

void physx::Dy::computeSphericalJointPositions(float *a1, float *a2, float *a3, float *a4, uint64_t a5, uint64_t a6)
{
  float v8 = a3[1];
  float v9 = a3[2];
  float v10 = a3[3];
  float v12 = a4[2];
  float v11 = a4[3];
  float v13 = a4[1];
  float v14 = (float)((float)((float)(v10 * *a4) - (float)(*a3 * v11)) - (float)(v8 * v12)) + (float)(v13 * v9);
  float v15 = (float)((float)((float)(v10 * v13) - (float)(v8 * v11)) - (float)(v9 * *a4)) + (float)(v12 * *a3);
  float v16 = (float)((float)((float)(v10 * v12) - (float)(v9 * v11)) - (float)(*a3 * v13)) + (float)(*a4 * v8);
  float v17 = (float)((float)((float)(*a3 * *a4) + (float)(v10 * v11)) + (float)(v8 * v13)) + (float)(v9 * v12);
  float v18 = sqrtf((float)((float)((float)(v15 * v15) + (float)(v14 * v14)) + (float)(v16 * v16)) + (float)(v17 * v17));
  float v19 = v14 / v18;
  float v20 = v15 / v18;
  float v21 = v16 / v18;
  float v22 = v17 / v18;
  *a1 = v14 / v18;
  a1[1] = v15 / v18;
  a1[2] = v16 / v18;
  a1[3] = v22;
  float v23 = a2[1];
  float v24 = a2[2];
  float v25 = a2[3];
  float v26 = (float)((float)((float)(v25 * v19) - (float)(v22 * *a2)) - (float)(v20 * v24)) + (float)(v23 * v21);
  float v27 = (float)((float)((float)(v25 * v20) - (float)(v22 * v23)) - (float)(v21 * *a2)) + (float)(v24 * v19);
  float v28 = (float)((float)((float)(v25 * v21) - (float)(v22 * v24)) - (float)(v19 * v23)) + (float)(*a2 * v20);
  float v29 = (float)((float)(v27 * v27) + (float)(v26 * v26)) + (float)(v28 * v28);
  if (v29 >= 1.0e-16)
  {
    float v34 = (float)((float)((float)(*a2 * v19) + (float)(v22 * v25)) + (float)(v20 * v23)) + (float)(v21 * v24);
    float v35 = 1.0 / sqrtf(v29);
    float v30 = v26 * v35;
    float v33 = v27 * v35;
    float v32 = v28 * v35;
    if (fabsf(v34) >= 0.00000001)
    {
      float v36 = atan2f(v29 * v35, v34);
      float v31 = v36 + v36;
    }
    else
    {
      float v31 = 3.1416;
    }
  }
  else
  {
    float v30 = 1.0;
    float v31 = 0.0;
    float v32 = 0.0;
    float v33 = 0.0;
  }
  uint64_t v37 = 0;
  float v38 = v31 * v30;
  float v39 = v31 * v33;
  uint64_t v40 = (float *)(a6 + 8);
  float v41 = v31 * v32;
  do
  {
    float v42 = (float)(v39 * *(v40 - 1)) + (float)(*(v40 - 2) * v38);
    float v43 = *v40;
    v40 += 6;
    *(float *)(a5 + v37) = -(float)(v42 + (float)(v43 * v41));
    v37 += 4;
  }
  while (v37 != 12);
}

uint64_t physx::Dy::FeatherstoneArticulation::getCurrentTransform(physx::Dy::FeatherstoneArticulation *this, unsigned int a2)
{
  return *((void *)this + 87) + 28 * a2;
}

uint64_t physx::Dy::FeatherstoneArticulation::getDeltaQ(physx::Dy::FeatherstoneArticulation *this, unsigned int a2)
{
  return *((void *)this + 89) + 16 * a2;
}

float32_t physx::Dy::FeatherstoneArticulation::getDeltaVWithDeltaJV@<S0>(char a1@<W0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double _D2@<D2>)
{
  float32x2_t v11 = 0;
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  if ((a1 & 1) == 0)
  {
    float v12 = *(float *)a4;
    float v13 = *(float *)(a4 + 4);
    float v14 = -v13;
    float v15 = *(float *)(a4 + 8);
    LODWORD(_D2) = *(_DWORD *)(a4 + 16);
    float v16 = *(float *)(a4 + 20);
    float v17 = -v16;
    v11.i32[0] = *(_DWORD *)(a4 + 24);
    v18.i32[0] = *(_DWORD *)(a3 + 564);
    float v19 = *(float *)(a3 + 576);
    float v20 = *(float *)(a3 + 588);
    float v21 = (float)((float)((float)-(float)(v13 * v19) - (float)(*(float *)a4 * v18.f32[0])) - (float)(v15 * v20))
        + (float)((float)((float)-(float)(v16 * *(float *)(a3 + 612)) - (float)(*(float *)&_D2 * *(float *)(a3 + 600)))
                - (float)(v11.f32[0] * *(float *)(a3 + 624)));
    float32x2_t v22 = *(float32x2_t *)(a3 + 556);
    float32x2_t v23 = *(float32x2_t *)(a3 + 568);
    _D22 = *(float32x2_t *)(a3 + 580);
    float32x2_t v25 = vadd_f32(vsub_f32(vsub_f32(vmul_n_f32(v23, -v13), vmul_n_f32(v22, *(float *)a4)), vmul_n_f32(_D22, v15)), vsub_f32(vsub_f32(vmul_n_f32(*(float32x2_t *)(a3 + 604), v17), vmul_n_f32(*(float32x2_t *)(a3 + 592), *(float *)&_D2)), vmul_n_f32(*(float32x2_t *)(a3 + 616), v11.f32[0])));
    __asm { FMLS            S23, S2, V22.S[0] }
    float v31 = (float)(_S23 - (float)(v20 * v11.f32[0]))
        + (float)((float)((float)-(float)(v13 * *(float *)(a3 + 648)) - (float)(*(float *)a4 * *(float *)(a3 + 636)))
                - (float)(v15 * *(float *)(a3 + 660)));
    *(float32x2_t *)a6 = v25;
    *(float *)(a6 + 8) = v21;
    v18.f32[1] = v19;
    float32x2_t v11 = vadd_f32(vmls_lane_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip2_s32((int32x2_t)v22, (int32x2_t)v23), v17), (float32x2_t)vzip1_s32((int32x2_t)v22, (int32x2_t)v23), *(float32x2_t *)&_D2, 0), v18, v11, 0), vsub_f32(vsub_f32(vmul_n_f32(*(float32x2_t *)(a3 + 640), v14), vmul_n_f32(*(float32x2_t *)(a3 + 628), v12)), vmul_n_f32(*(float32x2_t *)(a3 + 652), v15)));
    *(float32x2_t *)(a6 + 16) = v11;
    *(float *)(a6 + 24) = v31;
  }
  uint64_t v32 = *(void *)(*(void *)(a3 + 432) + 40 * a2 + 8);
  uint64_t v33 = v32 - 1;
  if (v32 != 1)
  {
    do
    {
      unsigned int v34 = __clz(__rbit32(v33));
      LODWORD(v35) = __clz(__rbit32(HIDWORD(v33))) + 32;
      if (v33) {
        uint64_t v35 = v34;
      }
      else {
        uint64_t v35 = v35;
      }
      physx::Dy::FeatherstoneArticulation::propagateVelocityW(*(void *)(a3 + 448) + 160 * v35 + 120, (float *)(*(void *)(a3 + 304) + 112 * v35), (float *)(*(void *)(a3 + 320) + 36 * v35), *(void *)(a3 + 352) + 76 * v35, (float *)(a4 + 32 * v35), a5 + 4 * *(unsigned int *)(*(void *)(a3 + 456) + 80 * v35 + 72), (float32x2_t *)a6, &v37);
      *(float32x2_t *)a6 = v37;
      *(_DWORD *)(a6 + 8) = v38;
      *(_DWORD *)(a6 + 12) = 0;
      *(void *)(a6 + 16) = v39;
      v11.i32[0] = v40;
      *(_DWORD *)(a6 + 24) = v40;
      *(_DWORD *)(a6 + 28) = 0;
      v33 &= v33 - 1;
    }
    while (v33);
  }
  return v11.f32[0];
}

float32_t physx::Dy::FeatherstoneArticulation::getZ(unsigned int a1, void *a2, uint64_t a3, float32x2_t *a4)
{
  uint64_t v4 = a1;
  uint64_t v5 = a2[54];
  float32_t v6 = -a4[3].f32[0];
  uint64_t v7 = (float32x2_t *)(a3 + 32 * a1);
  float32x2_t v8 = vneg_f32(*a4);
  v7[1].f32[0] = -a4[1].f32[0];
  v7[1].i32[1] = 0;
  float32x2_t v9 = vneg_f32(a4[2]);
  *uint64_t v7 = v8;
  v7[2] = v9;
  v7[3].f32[0] = v6;
  v7[3].i32[1] = 0;
  if (a1)
  {
    uint64_t v11 = a2[46];
    uint64_t v12 = a2[56];
    uint64_t v13 = a2[44];
    do
    {
      physx::Dy::FeatherstoneArticulation::propagateImpulseW(v11 + 96 * v4, (float32x2_t *)(v12 + 160 * v4 + 120), v13 + 76 * v4, a3 + 32 * v4, (uint64_t)&v16);
      uint64_t v4 = *(unsigned int *)(v5 + 40 * v4 + 32);
      uint64_t v14 = a3 + 32 * v4;
      *(void *)uint64_t v14 = v16;
      *(_DWORD *)(v14 + 8) = v17;
      *(_DWORD *)(v14 + 12) = 0;
      *(void *)(v14 + 16) = v18;
      v9.i32[0] = v19;
      *(_DWORD *)(v14 + 24) = v19;
      *(_DWORD *)(v14 + 28) = 0;
    }
    while (v4);
  }
  return v9.f32[0];
}

void physx::Dy::FeatherstoneArticulation::getImpulseSelfResponse(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, float *a5, float32x2_t *a6, uint64_t a7, uint64_t a8, __n128 a9, __n128 a10, float32x4_t a11, float32x4_t a12, double a13, double a14, float32x4_t a15, float32x4_t a16)
{
}

void physx::Dy::FeatherstoneArticulation::getImpulseSelfResponse(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, float *a5, uint64_t a6, unsigned int a7, float32x2_t *a8, __n128 a9, __n128 a10, float32x4_t a11, float32x4_t a12, double a13, double a14, float32x4_t a15, float32x4_t a16, uint64_t a17)
{
  uint64_t v138 = *MEMORY[0x263EF8340];
  uint64_t v20 = a7;
  if (*(_DWORD *)(a1 + 40 * a7 + 32) == (unint64_t)a4)
  {
    long long v22 = *(_OWORD *)a8->f32;
    long long v21 = *(_OWORD *)a8[2].f32;
    long long v106 = *(_OWORD *)a5;
    float32x4_t v108 = *(float32x4_t *)(a5 + 4);
    float32x2_t v132 = vneg_f32(*a8);
    float v133 = -*((float *)&v22 + 2);
    int v134 = 0;
    float32x2_t v135 = vneg_f32(*(float32x2_t *)&v21);
    float v136 = -*((float *)&v21 + 2);
    int v137 = 0;
    float32x2_t v23 = (float32x2_t *)(a3[56] + 160 * a7 + 120);
    uint64_t v24 = a3[44] + 76 * a7;
    physx::Dy::FeatherstoneArticulation::propagateImpulseW(a3[46] + 96 * a7, v23, v24, (uint64_t)&v132, (uint64_t)&v126);
    float32x4_t v25 = v108;
    *(float32x2_t *)v26.f32 = vsub_f32(*(float32x2_t *)&v106, v126);
    v27.f32[0] = *((float *)&v106 + 2) - v127;
    *(float32x2_t *)v28.f32 = vsub_f32(*(float32x2_t *)v108.f32, v129);
    v29.f32[0] = v130;
    v25.f32[0] = v108.f32[2] - v130;
    v26.f32[2] = *((float *)&v106 + 2) - v127;
    v26.i32[3] = 0;
    v28.f32[2] = v108.f32[2] - v130;
    v28.i32[3] = 0;
    physx::Dy::SpatialImpulseResponseMatrix::getResponse(&v124, a3[36] + 192 * a4, v26, v28, v27, v25, v29, v30, v31, v32);
    physx::Dy::FeatherstoneArticulation::propagateVelocityTestImpulseW((float32x2_t *)&v122, (uint64_t)v23, (float *)(a3[38] + 112 * v20), (float *)(a3[40] + 36 * v20), v24, (float *)&v132, (float32x2_t *)&v124);
    float32x4_t v34 = v124;
    long long v33 = v125;
    HIDWORD(v33) = 0;
    v34.i32[3] = 0;
    *(_OWORD *)a6 = v33;
    *(float32x4_t *)(a6 + 16) = v34;
    float32x4_t v36 = v122;
    long long v35 = v123;
    HIDWORD(v35) = 0;
    v36.i32[3] = 0;
    *(_OWORD *)a17 = v35;
    *(float32x4_t *)(a17 + 16) = v36;
  }
  else
  {
    uint64_t v38 = a4;
    unint64_t v39 = a7;
    if (a4 != (unint64_t)a7)
    {
      unint64_t v40 = a4;
      unint64_t v39 = a7;
      do
      {
        if (v40 >= v39) {
          unint64_t v40 = *(unsigned int *)(a1 + 40 * v40 + 32);
        }
        else {
          unint64_t v39 = *(unsigned int *)(a1 + 40 * v39 + 32);
        }
      }
      while (v40 != v39);
    }
    *(float *)&__int32 v41 = -a5[1];
    float v42 = -a5[2];
    float v43 = -a5[6];
    v126.f32[0] = -*a5;
    a11.f32[0] = v126.f32[0];
    v126.i32[1] = v41;
    float v127 = v42;
    int v128 = 0;
    float v130 = v43;
    int v131 = 0;
    *(float *)&__int32 v45 = -a8->f32[1];
    float v46 = -a8[1].f32[0];
    float v47 = -a8[3].f32[0];
    v124.f32[0] = -a8->f32[0];
    float v44 = v124.f32[0];
    v124.i32[1] = v45;
    v124.i64[1] = LODWORD(v46);
    *((void *)&v125 + 1) = LODWORD(v47);
    uint64_t v48 = a2 + 32 * a4;
    *(float *)(v48 + 8) = v42;
    *(_DWORD *)(v48 + 12) = 0;
    *(float *)(v48 + 24) = v43;
    *(_DWORD *)(v48 + 28) = 0;
    uint64_t v49 = a2 + 32 * a7;
    *(float *)(v49 + 8) = v46;
    *(_DWORD *)(v49 + 12) = 0;
    a10.n128_u64[0] = (unint64_t)vneg_f32(a8[2]);
    *(void *)&long long v125 = a10.n128_u64[0];
    a9.n128_u64[0] = (unint64_t)vneg_f32(*(float32x2_t *)(a5 + 4));
    float32x2_t v129 = (float32x2_t)a9.n128_u64[0];
    *(_DWORD *)uint64_t v48 = a11.i32[0];
    *(_DWORD *)(v48 + 4) = v41;
    *(void *)(v48 + 16) = a9.n128_u64[0];
    *(float *)uint64_t v49 = v44;
    *(_DWORD *)(v49 + 4) = v45;
    __n128 v99 = a10;
    *(void *)(v49 + 16) = a10.n128_u64[0];
    *(float *)(v49 + 24) = v47;
    *(_DWORD *)(v49 + 28) = 0;
    if (v39 == a4)
    {
      unsigned int v50 = 0;
      float v51 = a9.n128_f32[1];
    }
    else
    {
      int v52 = 0;
      uint64_t v53 = a3[46];
      uint64_t v54 = a3[56];
      uint64_t v55 = a3[44];
      do
      {
        uint64_t v56 = a2;
        a9.n128_u64[0] = (unint64_t)physx::Dy::FeatherstoneArticulation::propagateImpulseW(v53 + 96 * v38, (float32x2_t *)(v54 + 160 * v38 + 120), v55 + 76 * v38, (uint64_t)&v126, (uint64_t)&v122);
        a2 = v56;
        __int32 v41 = v122.i32[1];
        a11.i32[0] = v122.i32[0];
        float32x2_t v126 = *(float32x2_t *)v122.f32;
        float v42 = v122.f32[2];
        float v51 = *((float *)&v123 + 1);
        a9.n128_u32[0] = v123;
        float v127 = v122.f32[2];
        int v128 = 0;
        float v43 = *((float *)&v123 + 2);
        float32x2_t v129 = (float32x2_t)v123;
        float v130 = *((float *)&v123 + 2);
        int v131 = 0;
        v132.i32[v52] = v38;
        uint64_t v57 = *(unsigned int *)(a1 + 40 * v38 + 32);
        uint64_t v58 = v56 + 32 * v57;
        *(void *)uint64_t v58 = __PAIR64__(v41, a11.u32[0]);
        *(float *)(v58 + 8) = v42;
        *(_DWORD *)(v58 + 12) = 0;
        *(void *)(v58 + 16) = __PAIR64__(LODWORD(v51), a9.n128_u32[0]);
        *(float *)(v58 + 24) = v43;
        *(_DWORD *)(v58 + 28) = 0;
        unsigned int v50 = ++v52;
        uint64_t v38 = v57;
      }
      while (v57 != v39);
    }
    __n128 v101 = a9;
    float v103 = a11.f32[0];
    uint64_t v109 = a2;
    if (v39 == v20)
    {
      float32x4_t v59 = (float32x4_t)v99;
      float v60 = v99.n128_f32[1];
      unsigned int v61 = v50;
    }
    else
    {
      uint64_t v62 = a3[46];
      uint64_t v63 = a3[56];
      uint64_t v64 = a3[44];
      unsigned int v65 = v50;
      do
      {
        physx::Dy::FeatherstoneArticulation::propagateImpulseW(v62 + 96 * v20, (float32x2_t *)(v63 + 160 * v20 + 120), v64 + 76 * v20, (uint64_t)&v124, (uint64_t)&v122);
        __int32 v45 = v122.i32[1];
        float v44 = v122.f32[0];
        v124.i64[0] = v122.i64[0];
        float v46 = v122.f32[2];
        float v60 = *((float *)&v123 + 1);
        v59.i32[0] = v123;
        v124.i64[1] = v122.u32[2];
        float v47 = *((float *)&v123 + 2);
        *(void *)&long long v125 = v123;
        *((void *)&v125 + 1) = DWORD2(v123);
        v132.i32[v65] = v20;
        uint64_t v66 = *(unsigned int *)(a1 + 40 * v20 + 32);
        uint64_t v67 = v109 + 32 * v66;
        *(void *)uint64_t v67 = __PAIR64__(v45, LODWORD(v44));
        *(float *)(v67 + 8) = v46;
        *(_DWORD *)(v67 + 12) = 0;
        *(void *)(v67 + 16) = __PAIR64__(LODWORD(v60), v59.u32[0]);
        *(float *)(v67 + 24) = v47;
        *(_DWORD *)(v67 + 28) = 0;
        unsigned int v61 = ++v65;
        uint64_t v20 = v66;
      }
      while (v66 != v39);
    }
    float32x4_t v68 = (float32x4_t)v101;
    a15.f32[0] = -(float)(v103 + v44);
    a11.f32[0] = -(float)(*(float *)&v41 + *(float *)&v45);
    a12.f32[0] = -(float)(v42 + v46);
    v59.f32[0] = -(float)(v101.n128_f32[0] + v59.f32[0]);
    a16.f32[0] = -(float)(v51 + v60);
    v68.f32[0] = -(float)(v43 + v47);
    v69.i32[3] = 0;
    v70.i32[3] = 0;
    v70.f32[0] = a15.f32[0];
    v70.f32[1] = a11.f32[0];
    v70.f32[2] = a12.f32[0];
    v69.i64[0] = __PAIR64__(a16.u32[0], v59.u32[0]);
    v69.f32[2] = v68.f32[0];
    physx::Dy::SpatialImpulseResponseMatrix::getResponse(&v122, a3[36] + 192 * v39, v70, v69, a11, a12, v59, v68, a15, a16);
    __int32 v72 = v122.i32[1];
    __int32 v71 = v122.i32[0];
    float32x4_t v120 = v122;
    __int32 v97 = v122.i32[3];
    __int32 v73 = v122.i32[2];
    unsigned int v75 = DWORD1(v123);
    unsigned int v74 = v123;
    long long v121 = v123;
    __int32 v76 = v122.i32[2];
    __int32 v77 = v122.i32[1];
    unsigned int v78 = DWORD2(v123);
    __int32 v79 = v122.i32[0];
    unsigned int v80 = DWORD2(v123);
    int v81 = DWORD1(v123);
    int v82 = v123;
    int v96 = HIDWORD(v123);
    if (v61 > v50)
    {
      uint64_t v83 = a3[56];
      uint64_t v84 = a3[38];
      uint64_t v85 = a3[40];
      float v86 = (unsigned int *)&v132 + v61 - 1;
      uint64_t v87 = a3[44];
      do
      {
        unsigned int v88 = *v86--;
        physx::Dy::FeatherstoneArticulation::propagateVelocityTestImpulseW(&v114, v83 + 160 * v88 + 120, (float *)(v84 + 112 * v88), (float *)(v85 + 36 * v88), v87 + 76 * v88, (float *)(v109 + 32 * v88), (float32x2_t *)&v120);
        __int32 v77 = v114.i32[1];
        __int32 v79 = v114.i32[0];
        *(float32x2_t *)v120.f32 = v114;
        __int32 v76 = v115;
        int v81 = HIDWORD(v117);
        int v82 = v117;
        v120.i64[1] = v115;
        unsigned int v80 = v118;
        *(void *)&long long v121 = v117;
        *((void *)&v121 + 1) = v118;
        --v61;
      }
      while (v50 < v61);
    }
    unsigned int v98 = v80;
    __int32 v100 = v79;
    __int32 v102 = v77;
    __int32 v104 = v76;
    float32x2_t v114 = (float32x2_t)__PAIR64__(v72, v71);
    unsigned __int32 v115 = v73;
    __int32 v116 = v97;
    unint64_t v117 = __PAIR64__(v75, v74);
    unsigned int v118 = v78;
    int v119 = v96;
    if (v50)
    {
      uint64_t v89 = a3[56];
      uint64_t v90 = a3[38];
      uint64_t v91 = a3[40];
      unsigned int v92 = v50 - 1;
      uint64_t v93 = a3[44];
      do
      {
        uint64_t v94 = v92;
        uint64_t v95 = v132.u32[v92];
        physx::Dy::FeatherstoneArticulation::propagateVelocityTestImpulseW(&v110, v89 + 160 * v95 + 120, (float *)(v90 + 112 * v95), (float *)(v91 + 36 * v95), v93 + 76 * v95, (float *)(v109 + 32 * v95), &v114);
        __int32 v72 = v110.i32[1];
        __int32 v71 = v110.i32[0];
        float32x2_t v114 = v110;
        __int32 v73 = v111;
        unsigned int v75 = HIDWORD(v112);
        unsigned int v74 = v112;
        unsigned __int32 v115 = v111;
        __int32 v116 = 0;
        unsigned int v78 = v113;
        unint64_t v117 = v112;
        unsigned int v118 = v113;
        --v92;
        int v119 = 0;
      }
      while (v94);
    }
    *(_DWORD *)a6 = v74;
    *(_DWORD *)(a6 + 4) = v75;
    *(_DWORD *)(a6 + 8) = v78;
    *(_DWORD *)(a6 + 16) = v71;
    *(_DWORD *)(a6 + 20) = v72;
    *(_DWORD *)(a6 + 24) = v73;
    *(_DWORD *)a17 = v82;
    *(_DWORD *)(a17 + 4) = v81;
    *(_DWORD *)(a17 + 8) = v98;
    *(_DWORD *)(a17 + 16) = v100;
    *(_DWORD *)(a17 + 20) = v102;
    *(_DWORD *)(a17 + 24) = v104;
  }
}

uint64_t physx::Dy::FeatherstoneArticulation::storeStaticConstraint(uint64_t a1, long long *a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 880);
  if ((*(_DWORD *)(a1 + 884) & 0x7FFFFFFFu) <= v2)
  {
    physx::shdfnd::Array<physx::PxSolverConstraintDesc,physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>::growAndPushBack(a1 + 872, a2);
  }
  else
  {
    uint64_t v3 = (long long *)(*(void *)(a1 + 872) + 48 * v2);
    long long v4 = *a2;
    long long v5 = a2[2];
    v3[1] = a2[1];
    v3[2] = v5;
    long long *v3 = v4;
    ++*(_DWORD *)(a1 + 880);
  }
  return 1;
}

unint64_t physx::Dy::FeatherstoneArticulation::prepareStaticConstraintsTGS(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, void), uint64_t a4, uint64_t a5, uint64_t (**a6)(void, void), uint64_t a7, float a8, float a9, float a10, float a11, float a12, float a13, float a14, float a15)
{
  v136[0] = (uint64_t (**)(void, void))&unk_26E724CB8;
  v136[1] = a6;
  v136[2] = a3 + 1484;
  v136[3] = a3 + 1478;
  v136[4] = a3 + 1526;
  long long v133 = xmmword_23435FBB0;
  uint64_t v134 = 0;
  int v135 = 0;
  unint64_t result = physx::shdfnd::sort<physx::PxSolverConstraintDesc,physx::Dy::ArticulationStaticConstraintSortPredicate,physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>(*(void *)(a1 + 872), *(_DWORD *)(a1 + 880));
  if (*(_DWORD *)(a1 + 880))
  {
    unsigned int v25 = 0;
    __asm { FMOV            V8.2S, #1.0 }
    uint64_t v103 = a5;
    do
    {
      uint64_t v30 = *(void *)(a1 + 872);
      float32x4_t v31 = (long long *)(v30 + 48 * v25);
      int v32 = *((unsigned __int16 *)v31 + 8);
      int v33 = *((unsigned __int16 *)v31 + 9);
      if (v32 == 0xFFFF) {
        uint64_t v34 = *((unsigned __int16 *)v31 + 9);
      }
      else {
        uint64_t v34 = *((unsigned __int16 *)v31 + 8);
      }
      uint64_t v35 = v30 + 48 * v25;
      if (*((_WORD *)v31 + 15) == 1)
      {
        uint64_t v38 = *(void *)(v35 + 32);
        float32x4_t v36 = (void *)(v35 + 32);
        uint64_t v37 = v38;
        uint64_t v39 = *(void *)(a2 + 32)
            + 32
            * (*(_DWORD *)(a2 + 4 * (*(_DWORD *)(v38 + 108) & 7)) + (*(_DWORD *)(v38 + 108) >> 3));
        uint64_t v40 = *((unsigned int *)v36 - 3);
        uint64_t v41 = *((unsigned int *)v36 - 2);
        if (v32 == 0xFFFF) {
          unsigned int v42 = *((_DWORD *)v36 - 3);
        }
        else {
          unsigned int v42 = 0;
        }
        if (v33 == 0xFFFF) {
          unsigned int v43 = *((_DWORD *)v36 - 2);
        }
        else {
          unsigned int v43 = 0;
        }
        uint64_t v45 = *(void *)(v37 + 32);
        uint64_t v44 = *(void *)(v37 + 40);
        uint64_t v46 = *(void *)(v37 + 24);
        int v47 = *(_DWORD *)(v45 + 16);
        uint64_t v48 = *(void *)(v39 + 16);
        *(void *)&long long v49 = *(void *)(v45 + 20);
        long long v50 = *v31;
        long long v118 = *(_OWORD *)v45;
        *(_DWORD *)int v119 = v47;
        *((void *)&v49 + 1) = *(void *)v44;
        *(_OWORD *)&v119[4] = v49;
        long long v120 = *(_OWORD *)(v44 + 8);
        int v121 = *(_DWORD *)(v44 + 24);
        uint64_t v124 = v46;
        uint64_t v130 = v48;
        uint64_t v112 = v30 + 48 * v25;
        long long v113 = v50;
        uint64_t v114 = a5 + (v40 << 6);
        uint64_t v115 = a5 + (v41 << 6);
        uint64_t v116 = a4 + 48 * v42;
        uint64_t v117 = a4 + 48 * v43;
        __int16 v51 = *(_WORD *)(v37 + 80);
        BYTE2(v126) = HIBYTE(v51) & 1;
        BYTE1(v126) = (v51 & 4) != 0;
        int v52 = 8;
        if ((v51 & 8) != 0) {
          int v53 = 8;
        }
        else {
          int v53 = 1;
        }
        int v122 = v53;
        if ((v51 & 0x10) == 0)
        {
          if ((v51 & 0x400) != 0)
          {
            int v52 = 4;
          }
          else if ((v51 & 0x40) != 0)
          {
            int v52 = 1;
          }
          else
          {
            int v52 = 2;
          }
        }
        int v123 = v52;
        float v86 = (float *)(*(void *)(v37 + 32) + 128);
        uint64_t v87 = a4 + 48 * v42 + 12;
        if ((v51 & 8) == 0) {
          float v86 = (float *)v87;
        }
        float v88 = *v86;
        uint64_t v89 = a4 + 48 * v43 + 12;
        if ((v51 & 0x10) != 0) {
          uint64_t v90 = (float *)(*(void *)(v37 + 40) + 128);
        }
        else {
          uint64_t v90 = (float *)v89;
        }
        v91.i32[0] = *(unsigned __int8 *)(v37 + 84);
        v91.i32[1] = *(unsigned __int8 *)(v37 + 85);
        float v92 = *v90;
        int8x8_t v93 = (int8x8_t)vceqz_s32(v91);
        v137.val[0] = (float32x2_t)vbic_s8(_D8, v93);
        v137.val[1] = v137.val[0];
        vst2_f32(v111, v137);
        LODWORD(v127) = *(_DWORD *)(v37 + 92);
        uint64_t v128 = *(void *)(v37 + 72);
        char v129 = *(unsigned char *)(v37 + 82);
        HIDWORD(v127) = 2139095039;
        if (v88 >= v92) {
          float v88 = v92;
        }
        float v131 = v88;
        uint64_t v132 = *(void *)(v37 + 112);
        *(float *)v93.i32 = a11;
        *(float *)&long long v50 = a13;
        unint64_t result = physx::Dy::createFinalizeSolverContactsStep((uint64_t)v111, (uint64_t *)v39, (uint64_t)a3, (uint64_t)v136, a10, *(double *)&v93, *(double *)&v50, a14, a12);
        uint64_t v94 = v30 + 48 * v25;
        *(_WORD *)(v94 + 28) = *(unsigned __int8 *)(v39 + 24);
        *(void *)(v94 + 40) = *(void *)(v39 + 16);
        *(void *)(v37 + 72) = v128;
        *(unsigned char *)(v37 + 82) = v129;
        if (*v36)
        {
          uint64_t v95 = *(void *)(a1 + 560);
          int v96 = *(_DWORD *)(v95 + 4 * v34);
          if (!v96)
          {
            *(_DWORD *)(*(void *)(a1 + 576) + 4 * v34) = v25;
            int v96 = *(_DWORD *)(v95 + 4 * v34);
          }
          *(_DWORD *)(v95 + 4 * v34) = v96 + 1;
          a5 = v103;
          goto LABEL_63;
        }
        unint64_t v97 = v25 + 1;
        LODWORD(v80) = *(_DWORD *)(a1 + 880);
        a5 = v103;
        if (v97 < v80)
        {
          unsigned int v98 = (_OWORD *)(*(void *)(a1 + 872) + 48 * v25);
          uint64_t v99 = 48 * (v25 + 1);
          do
          {
            __int32 v100 = (long long *)(*(void *)(a1 + 872) + v99);
            long long v101 = *v100;
            long long v102 = v100[2];
            v98[1] = v100[1];
            v98[2] = v102;
            *unsigned int v98 = v101;
            v98 += 3;
            ++v97;
            unint64_t v80 = *(unsigned int *)(a1 + 880);
            v99 += 48;
          }
          while (v97 < v80);
        }
      }
      else
      {
        uint64_t v56 = *(uint64_t **)(v35 + 32);
        uint64_t v55 = (void *)(v35 + 32);
        uint64_t v54 = v56;
        uint64_t v57 = v56[5];
        if (v57) {
          uint64_t v58 = *(long long **)(v57 + 40);
        }
        else {
          uint64_t v58 = &v133;
        }
        uint64_t v59 = v54[6];
        if (v59) {
          float v60 = *(long long **)(v59 + 40);
        }
        else {
          float v60 = &v133;
        }
        uint64_t v61 = v54[4];
        int v62 = *((unsigned __int16 *)v54 + 4);
        uint64_t v63 = v30 + 48 * v25;
        _ZF = v32 == 0xFFFF;
        uint64_t v65 = *(unsigned int *)(v63 + 20);
        uint64_t v66 = *(unsigned int *)(v63 + 24);
        if (_ZF) {
          unsigned int v67 = v65;
        }
        else {
          unsigned int v67 = 0;
        }
        uint64_t v68 = a4 + 48 * v67;
        if (_ZF) {
          int v69 = 1;
        }
        else {
          int v69 = 8;
        }
        BOOL v70 = v33 == 0xFFFF;
        if (v33 == 0xFFFF) {
          unsigned int v71 = v66;
        }
        else {
          unsigned int v71 = 0;
        }
        v109[1] = v54[2];
        v109[2] = v61;
        int v110 = v62;
        v109[0] = v54;
        int v72 = *((_DWORD *)v58 + 6);
        long long v73 = *v31;
        uint64_t v112 = v30 + 48 * v25;
        uint64_t v74 = *((void *)v58 + 2);
        long long v118 = *v58;
        *(void *)int v119 = v74;
        *(_DWORD *)&v119[8] = v72;
        *(void *)&v119[12] = *(void *)v60;
        long long v120 = *(long long *)((char *)v60 + 8);
        int v121 = *((_DWORD *)v60 + 6);
        long long v113 = v73;
        uint64_t v114 = a5 + (v65 << 6);
        uint64_t v115 = a5 + (v66 << 6);
        uint64_t v116 = v68;
        uint64_t v117 = a4 + 48 * v71;
        uint64_t v125 = *v54;
        uint64_t v127 = a7 + 32 * *((unsigned int *)v54 + 18);
        __int16 v75 = *((_WORD *)v54 + 5);
        LOBYTE(v128) = HIBYTE(v75) & 1;
        BYTE1(v128) = (v75 & 0x80) != 0;
        BYTE2(v128) = (v75 & 0x20) != 0;
        BYTE3(v128) = (v75 & 0x200) != 0;
        int v126 = *((_DWORD *)v54 + 19);
        if (v70) {
          int v76 = 1;
        }
        else {
          int v76 = 8;
        }
        int v122 = v69;
        int v123 = v76;
        unint64_t result = physx::Dy::SetupSolverConstraintStep((uint64_t)v109, (uint64_t)v111, v136, a8, a9, a10, a11, a15);
        if (*v55)
        {
          uint64_t v77 = *(void *)(a1 + 560);
          int v78 = *(_DWORD *)(v77 + 4 * v34);
          if (!v78)
          {
            *(_DWORD *)(*(void *)(a1 + 576) + 4 * v34) = v25;
            int v78 = *(_DWORD *)(v77 + 4 * v34);
          }
          *(_DWORD *)(v77 + 4 * v34) = v78 + 1;
          goto LABEL_63;
        }
        unint64_t v79 = v25 + 1;
        LODWORD(v80) = *(_DWORD *)(a1 + 880);
        if (v79 < v80)
        {
          int v81 = (_OWORD *)(*(void *)(a1 + 872) + 48 * v25);
          uint64_t v82 = 48 * (v25 + 1);
          do
          {
            uint64_t v83 = (long long *)(*(void *)(a1 + 872) + v82);
            long long v84 = *v83;
            long long v85 = v83[2];
            v81[1] = v83[1];
            v81[2] = v85;
            *int v81 = v84;
            v81 += 3;
            ++v79;
            unint64_t v80 = *(unsigned int *)(a1 + 880);
            v82 += 48;
          }
          while (v79 < v80);
        }
      }
      *(_DWORD *)(a1 + 880) = v80 - 1;
      --v25;
LABEL_63:
      ++v25;
    }
    while (v25 < *(_DWORD *)(a1 + 880));
  }
  return result;
}

uint64_t physx::Dy::FeatherstoneArticulation::prepareStaticConstraints(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(void, void), uint64_t a6, float a7, float a8, float a9, float a10, float a11, float a12, float a13)
{
  uint64_t v131 = *MEMORY[0x263EF8340];
  v108[0] = (uint64_t (**)(void, void))&unk_26E724CB8;
  v108[1] = a5;
  v108[2] = (uint64_t (**)(void, void))(a3 + 11872);
  v108[3] = (uint64_t (**)(void, void))(a3 + 11824);
  v108[4] = (uint64_t (**)(void, void))(a3 + 12208);
  long long v105 = xmmword_23435FBB0;
  uint64_t v106 = 0;
  int v107 = 0;
  uint64_t v102 = *(void *)(a3 + 12160);
  uint64_t result = physx::shdfnd::sort<physx::PxSolverConstraintDesc,physx::Dy::ArticulationStaticConstraintSortPredicate,physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>(*(void *)(a1 + 872), *(_DWORD *)(a1 + 880));
  if (*(_DWORD *)(a1 + 880))
  {
    unsigned int v28 = 0;
    __asm { FMOV            V15.2S, #1.0 }
    uint64_t v98 = a4;
    do
    {
      uint64_t v34 = *(void *)(a1 + 872);
      uint64_t v35 = (long long *)(v34 + 48 * v28);
      int v36 = *((unsigned __int16 *)v35 + 8);
      int v37 = *((unsigned __int16 *)v35 + 9);
      if (v36 == 0xFFFF) {
        uint64_t v38 = *((unsigned __int16 *)v35 + 9);
      }
      else {
        uint64_t v38 = *((unsigned __int16 *)v35 + 8);
      }
      if (*((_WORD *)v35 + 15) == 1)
      {
        uint64_t v39 = v34 + 48 * v28;
        uint64_t v42 = *(void *)(v39 + 32);
        uint64_t v40 = (void *)(v39 + 32);
        uint64_t v41 = v42;
        unsigned int v43 = *(_DWORD *)(v42 + 108);
        uint64_t v44 = *(void *)(a2 + 32);
        int v45 = *(_DWORD *)(a2 + 4 * (v43 & 7));
        unsigned int v46 = *((_DWORD *)v40 - 3);
        if (v36 != 0xFFFF) {
          unsigned int v46 = 0;
        }
        uint64_t v47 = a4 + 112 * v46;
        if (v37 == 0xFFFF) {
          unsigned int v48 = *((_DWORD *)v40 - 2);
        }
        else {
          unsigned int v48 = 0;
        }
        uint64_t v112 = v47;
        uint64_t v113 = a4 + 112 * v48;
        uint64_t v50 = *(void *)(v41 + 32);
        long long v49 = *(long long **)(v41 + 40);
        char v51 = *(unsigned char *)(v50 + 28);
        if (v49)
        {
          v51 |= *((unsigned char *)v49 + 28);
          int v52 = *(long long **)(v41 + 40);
        }
        else
        {
          int v52 = &v105;
        }
        uint64_t v59 = v45 + (v43 >> 3);
        float v60 = (uint64_t *)(v44 + 32 * v59);
        long long v114 = *(_OWORD *)v50;
        uint64_t v115 = *(void *)(v50 + 16);
        int v116 = *(_DWORD *)(v50 + 24);
        LODWORD(v117) = *(_DWORD *)v52;
        if (!v49) {
          long long v49 = &v105;
        }
        HIDWORD(v117) = *((_DWORD *)v49 + 1);
        int v118 = *((_DWORD *)v49 + 2);
        uint64_t v119 = *(void *)((char *)v49 + 12);
        int v120 = *((_DWORD *)v49 + 5);
        int v121 = *((_DWORD *)v49 + 6);
        uint64_t v124 = *(void *)(v41 + 24);
        uint64_t v61 = v60 + 2;
        uint64_t v130 = v60[2];
        uint64_t v110 = v34 + 48 * v28;
        *(void *)&long long v111 = *(void *)v35;
        *((void *)&v111 + 1) = *(void *)(v110 + 8);
        __int16 v62 = *(_WORD *)(v41 + 80);
        BYTE2(v126) = HIBYTE(v62) & 1;
        BYTE1(v126) = (v62 & 4) != 0;
        int v63 = 8;
        if ((v62 & 8) != 0) {
          int v64 = 8;
        }
        else {
          int v64 = 1;
        }
        int v122 = v64;
        if ((v62 & 0x10) == 0)
        {
          if ((v62 & 0x400) != 0)
          {
            int v63 = 4;
          }
          else if ((v62 & 0x40) != 0)
          {
            int v63 = 1;
          }
          else
          {
            int v63 = 2;
          }
        }
        int v123 = v63;
        v86.i32[0] = *(unsigned __int8 *)(v41 + 84);
        v86.i32[1] = *(unsigned __int8 *)(v41 + 85);
        double v89 = COERCE_DOUBLE(vbic_s8(_D15, (int8x8_t)vceqz_s32(v86)));
        double v87 = v89;
        float v88 = &v109;
        vst2_f32(v88->f32, *(float32x2x2_t *)&v89);
        LODWORD(v127) = *(_DWORD *)(v41 + 92);
        uint64_t v128 = *(void *)(v41 + 72);
        char v129 = *(unsigned char *)(v41 + 82);
        LODWORD(v89) = 2139095039;
        if ((v51 & 0x20) != 0) {
          *(float *)&double v89 = a13;
        }
        HIDWORD(v127) = LODWORD(v89);
        *(float *)&double v89 = a8;
        *(float *)&double v87 = a10;
        *(float *)&long long v23 = a11;
        *(float *)&double v24 = a12;
        uint64_t result = physx::Dy::createFinalizeSolverContacts(&v109, v60, a3, (uint64_t)v108, v102, v89, v87, *(double *)&v23, a9, v24, v25, v26, v27);
        uint64_t v90 = v34 + 48 * v28;
        *(_WORD *)(v90 + 28) = *(unsigned __int8 *)(v44 + 32 * v59 + 24);
        *(void *)(v90 + 40) = *v61;
        *(void *)(v41 + 72) = v128;
        *(unsigned char *)(v41 + 82) = v129;
        if (*v40)
        {
          uint64_t v91 = *(void *)(a1 + 560);
          int v92 = *(_DWORD *)(v91 + 4 * v38);
          a4 = v98;
          if (!v92)
          {
            *(_DWORD *)(*(void *)(a1 + 576) + 4 * v38) = v28;
            int v92 = *(_DWORD *)(v91 + 4 * v38);
          }
          *(_DWORD *)(v91 + 4 * v38) = v92 + 1;
          goto LABEL_55;
        }
        unint64_t v93 = v28 + 1;
        LODWORD(v81) = *(_DWORD *)(a1 + 880);
        a4 = v98;
        if (v93 < v81)
        {
          uint64_t v94 = (_OWORD *)(*(void *)(a1 + 872) + 48 * v28);
          uint64_t v95 = 48 * (v28 + 1);
          do
          {
            int v96 = (long long *)(*(void *)(a1 + 872) + v95);
            long long v97 = *v96;
            long long v23 = v96[2];
            v94[1] = v96[1];
            v94[2] = v23;
            *uint64_t v94 = v97;
            v94 += 3;
            ++v93;
            unint64_t v81 = *(unsigned int *)(a1 + 880);
            v95 += 48;
          }
          while (v93 < v81);
        }
      }
      else
      {
        uint64_t v53 = v34 + 48 * v28;
        uint64_t v56 = *(uint64_t **)(v53 + 32);
        uint64_t v55 = (void *)(v53 + 32);
        uint64_t v54 = v56;
        uint64_t v57 = v56[5];
        if (v57) {
          uint64_t v58 = *(long long **)(v57 + 40);
        }
        else {
          uint64_t v58 = &v105;
        }
        uint64_t v65 = v54[6];
        if (v65) {
          uint64_t v66 = *(long long **)(v65 + 40);
        }
        else {
          uint64_t v66 = &v105;
        }
        uint64_t v67 = v54[4];
        int v68 = *((unsigned __int16 *)v54 + 4);
        uint64_t v69 = v34 + 48 * v28;
        _ZF = v36 == 0xFFFF;
        unsigned int v70 = *(_DWORD *)(v69 + 20);
        unsigned int v71 = *(_DWORD *)(v69 + 24);
        if (!_ZF) {
          unsigned int v70 = 0;
        }
        uint64_t v72 = a4 + 112 * v70;
        if (v37 == 0xFFFF) {
          unsigned int v73 = v71;
        }
        else {
          unsigned int v73 = 0;
        }
        v103[1] = v54[2];
        v103[2] = v67;
        int v104 = v68;
        v103[0] = v54;
        int v74 = *((_DWORD *)v58 + 6);
        long long v75 = *v35;
        uint64_t v110 = v34 + 48 * v28;
        uint64_t v76 = *((void *)v58 + 2);
        long long v114 = *v58;
        uint64_t v115 = v76;
        int v116 = v74;
        uint64_t v117 = *(void *)v66;
        int v118 = *((_DWORD *)v66 + 2);
        uint64_t v119 = *(void *)((char *)v66 + 12);
        int v120 = *((_DWORD *)v66 + 5);
        int v121 = *((_DWORD *)v66 + 6);
        uint64_t v112 = v72;
        uint64_t v113 = a4 + 112 * v73;
        long long v111 = v75;
        uint64_t v125 = *v54;
        uint64_t v127 = a6 + 32 * *((unsigned int *)v54 + 18);
        __int16 v77 = *((_WORD *)v54 + 5);
        LOBYTE(v128) = HIBYTE(v77) & 1;
        BYTE1(v128) = (v77 & 0x80) != 0;
        BYTE2(v128) = (v77 & 0x20) != 0;
        BYTE3(v128) = (v77 & 0x200) != 0;
        int v126 = *((_DWORD *)v54 + 19);
        uint64_t result = physx::Dy::SetupSolverConstraint((uint64_t)v103, (uint64_t)&v109, v108, v102, a7, a8);
        if (*v55)
        {
          uint64_t v78 = *(void *)(a1 + 560);
          int v79 = *(_DWORD *)(v78 + 4 * v38);
          if (!v79)
          {
            *(_DWORD *)(*(void *)(a1 + 576) + 4 * v38) = v28;
            int v79 = *(_DWORD *)(v78 + 4 * v38);
          }
          *(_DWORD *)(v78 + 4 * v38) = v79 + 1;
          goto LABEL_55;
        }
        unint64_t v80 = v28 + 1;
        LODWORD(v81) = *(_DWORD *)(a1 + 880);
        if (v80 < v81)
        {
          uint64_t v82 = (_OWORD *)(*(void *)(a1 + 872) + 48 * v28);
          uint64_t v83 = 48 * (v28 + 1);
          do
          {
            long long v84 = (long long *)(*(void *)(a1 + 872) + v83);
            long long v85 = *v84;
            long long v23 = v84[2];
            v82[1] = v84[1];
            v82[2] = v23;
            *uint64_t v82 = v85;
            v82 += 3;
            ++v80;
            unint64_t v81 = *(unsigned int *)(a1 + 880);
            v83 += 48;
          }
          while (v80 < v81);
        }
      }
      *(_DWORD *)(a1 + 880) = v81 - 1;
      --v28;
LABEL_55:
      ++v28;
    }
    while (v28 < *(_DWORD *)(a1 + 880));
  }
  return result;
}

uint64_t physx::Dy::createFinalizeSolverContacts(float32x4_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, float a9, double a10, double a11, double a12, double a13)
{
  uint64_t v14 = a1[3].i64[0];
  float v15 = *(float *)(a1[2].i64[1] + 76);
  uint64_t v16 = a3 + 16;
  *(_DWORD *)(a3 + 4112) = 0;
  float v17 = *(float *)(v14 + 76);
  if (v15 < v17) {
    float v17 = v15;
  }
  uint64_t v18 = *a2;
  __asm { FMOV            V5.4S, #1.0 }
  if (!*a2)
  {
    LOBYTE(v28) = 0;
LABEL_40:
    unsigned __int32 v29 = 0;
    goto LABEL_41;
  }
  char v24 = *(unsigned char *)(v18 + 43);
  if ((v24 & 2) != 0) {
    uint64_t v25 = 64;
  }
  else {
    uint64_t v25 = 16;
  }
  if ((*(unsigned char *)(v18 + 43) & 4) != 0)
  {
    LOBYTE(v28) = 0;
    LOBYTE(v18) = 0;
    goto LABEL_40;
  }
  int v26 = *((unsigned __int8 *)a2 + 25);
  int v27 = v24;
  _Q5 = *(float32x4_t *)v18;
  unsigned int v28 = (v24 >> 5) & 1;
  unsigned __int32 v29 = 0;
  if (*((unsigned char *)a2 + 25))
  {
    int v30 = 0;
    unsigned int v31 = 0;
    int v32 = 0;
    _X15 = a2[1];
    if ((v27 & 2) != 0) {
      char v34 = 6;
    }
    else {
      char v34 = 4;
    }
    if (v27 < 0)
    {
      uint64_t v25 = 32;
      char v34 = 5;
    }
    unsigned int v35 = v27 & 0xFFFFFF82;
    while (1)
    {
      if (v30)
      {
        unsigned int v36 = *(unsigned __int8 *)(v18 + 41);
        _CF = v36 >= v31;
        unsigned int v38 = v36 - v31;
        BOOL v37 = v38 != 0 && _CF;
        LODWORD(v39) = v38 << v34;
        if (v37) {
          uint64_t v39 = v39;
        }
        else {
          uint64_t v39 = 0;
        }
        _X15 += v39;
        v18 += 48;
      }
      unsigned int v31 = *(unsigned __int8 *)(v18 + 41);
      if (*(unsigned char *)(v18 + 41)) {
        break;
      }
LABEL_36:
      if (++v30 == v26) {
        goto LABEL_37;
      }
    }
    int v40 = *(unsigned __int8 *)(v18 + 41);
    while (1)
    {
      if (v32) {
        uint64_t v41 = v25;
      }
      else {
        uint64_t v41 = 0;
      }
      _X15 += v41;
      __asm { PRFM            #0, [X15,#0x80] }
      _X19 = (_OWORD *)(v16 + ((unint64_t)v29 << 6));
      __asm { PRFM            #0, [X19,#0x80] }
      *(float *)&a13 = v17;
      if (v28)
      {
        if (!v35)
        {
          LODWORD(a13) = 2139095039;
LABEL_31:
          *(void *)&long long v45 = *(void *)(v18 + 16);
          unint64_t v46 = v16 + ((unint64_t)v29 << 6);
          DWORD2(v45) = *(_DWORD *)(v18 + 24);
          HIDWORD(v45) = *(_DWORD *)(_X15 + 12);
          *_X19 = v45;
          *(void *)(v46 + 16) = *(void *)_X15;
          LODWORD(v45) = *(_DWORD *)(_X15 + 8);
          *(unsigned char *)(v46 + 48) = *(unsigned char *)(v18 + 42);
          *(_DWORD *)(v46 + 24) = v45;
          *(_DWORD *)(v46 + 28) = LODWORD(a13);
          *(_DWORD *)(v46 + 44) = *(_DWORD *)(v18 + 36);
          *(int32x2_t *)(v46 + 56) = vrev64_s32(*(int32x2_t *)(v18 + 28));
          if (v35)
          {
            a13 = *(double *)(_X15 + 16);
            int v47 = *(_DWORD *)(_X15 + 24);
          }
          else
          {
            a13 = 0.0;
            int v47 = 0;
          }
          *(double *)(v46 + 32) = a13;
          *(_DWORD *)(v46 + 40) = v47;
          ++v29;
          goto LABEL_35;
        }
        LODWORD(a13) = *(_DWORD *)(_X15 + 28);
      }
      if (*(float *)&a13 != 0.0) {
        goto LABEL_31;
      }
LABEL_35:
      int v32 = 1;
      if (!--v40) {
        goto LABEL_36;
      }
    }
  }
LABEL_37:
  LODWORD(v18) = (v27 >> 4) & 1;
LABEL_41:
  *(_DWORD *)(a3 + 4112) = v29;
  a1[8].i64[1] = v16;
  a1[9].i32[0] = v29;
  if (a1[9].i8[5]) {
    char v48 = 1;
  }
  else {
    char v48 = v18;
  }
  a1[9].i8[5] = v48;
  a1[9].i8[4] = v28;
  float32x4_t v49 = *a1;
  float32x4_t v50 = vmulq_f32(_Q5, *a1);
  *a1 = v50;
  return physx::Dy::createFinalizeSolverContacts((uint64_t)a1, a3 + 4128, a4, a5, a6, a7, a8, a9, a10, v50.f32[0], v49.f32[0], *(float *)&a13);
}

uint64_t physx::Dy::SetupSolverConstraint(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, void), uint64_t a4, float a5, float a6)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *(_WORD *)(*(void *)(a2 + 16) + 30) = 0;
  float32_t v6 = *(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t, void, uint64_t, uint64_t, void, unsigned char *, unsigned char *))(a1 + 8);
  if (!v6) {
    return 0;
  }
  bzero(v26, 0x3C0uLL);
  for (uint64_t i = 0; i != 960; i += 80)
  {
    uint64_t v14 = &v26[i];
    *((_DWORD *)v14 + 11) = -8388609;
    *((_DWORD *)v14 + 15) = 2139095039;
  }
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)a2 = _Q0;
  uint64_t v24 = 0;
  int v25 = 0;
  int v20 = v6(v26, &v24, 12, a2, *(void *)(a1 + 16), a2 + 56, a2 + 84, *(unsigned __int8 *)(a2 + 163), v23, v22);
  *(void *)(a2 + 128) = v26;
  *(_DWORD *)(a2 + 136) = v20;
  *(void *)(a2 + 164) = v24;
  *(_DWORD *)(a2 + 172) = v25;
  return physx::Dy::ConstraintHelper::setupSolverConstraint(a2, a3, a4, a5, a6);
}

uint64_t *physx::Dy::FeatherstoneArticulation::setupInternalConstraintsRecursive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, __n128 _Q0, float32x4_t _Q1, float a11, float32x4_t a12, double a13, double _D5, float32x4_t _Q6, float32x4_t a16)
{
  uint64_t v16 = a7;
  uint64_t v19 = a4;
  uint64_t v20 = a3;
  float v21 = *(float *)&_D5;
  float v22 = *(float *)&a13;
  float v23 = a12.f32[0];
  float v24 = a11;
  float v25 = _Q1.f32[0];
  float v26 = _Q0.n128_f32[0];
  uint64_t v29 = 0;
  char v30 = 0;
  uint64_t v284 = *MEMORY[0x263EF8340];
  unsigned int v31 = a8;
  uint64_t v32 = *(void *)(a5 + 456);
  uint64_t v247 = *(void *)(a5 + 464);
  uint64_t v33 = v32 + 80 * a8;
  char v36 = *(unsigned char *)(v33 + 79);
  char v34 = (unsigned char *)(v33 + 79);
  char v35 = v36;
  uint64_t v37 = a2 + 40 * a8;
  v264 = (unsigned int *)(v37 + 32);
  unsigned int v38 = *(float **)(v37 + 24);
  float v39 = v38[62];
  do
  {
    if (v38[v29 + 28] > 0.0 && (v38[v29 + 26] > 0.0 || v38[v29 + 27] > 0.0)) {
      ++v30;
    }
    v29 += 4;
  }
  while (v29 != 24);
  char v40 = 0;
  uint64_t result = (uint64_t *)(a2 + 40 * a8);
  char v42 = *(unsigned char *)(v32 + 80 * a8 + 76);
  if (v39 <= 0.0) {
    char v42 = 0;
  }
  char v266 = v42;
  if ((v30 + 2 * *(v34 - 2) + v42) != -v35)
  {
    float v223 = v34;
    uint64_t v224 = a2 + 40 * a8;
    uint64_t v225 = *(void *)(a5 + 456);
    uint64_t v226 = a1;
    unsigned int v227 = a3;
    unsigned int v228 = a4;
    uint64_t v43 = 0;
    unsigned int v44 = 0;
    int v268 = 0;
    uint64_t v231 = *(void *)(a5 + 80) + 4 * *(unsigned int *)(v34 - 7);
    uint64_t v232 = v247 + 96 * a8;
    long long v45 = (float *)(*(void *)(a5 + 208) + 32 * a8);
    float v46 = (float)(v39 * v26)
        * (float)(sqrtf((float)((float)(v45[1] * v45[1]) + (float)(*v45 * *v45)) + (float)(v45[2] * v45[2]))
                + sqrtf((float)((float)(v45[5] * v45[5]) + (float)(v45[4] * v45[4])) + (float)(v45[6] * v45[6])));
    uint64_t v47 = a2 + 40 * *(unsigned int *)(v37 + 32);
    char v48 = *(float **)(v47 + 16);
    uint64_t v246 = v47 + 16;
    float v49 = v38[4] + v38[4];
    float v50 = v38[5] + v38[5];
    float v51 = v38[7];
    float v52 = v48[1];
    float v53 = v48[2];
    float v54 = v48[3];
    float v241 = v38[6] + v38[6];
    float v218 = v54 * (float)((float)(v53 * v49) - (float)(*v48 * v241));
    float v220 = v54 * (float)((float)(v52 * v241) - (float)(v53 * v50));
    float v256 = v49;
    float v254 = v50;
    float v217 = v54 * (float)((float)(*v48 * v50) - (float)(v52 * v49));
    float v56 = v38[2];
    float v55 = v38[3];
    float v57 = v38[1];
    float v58 = (float)((float)((float)(*v48 * v55) + (float)(v54 * *v38)) + (float)(v52 * v56)) - (float)(v57 * v53);
    float v59 = (float)((float)(v52 * v55) + (float)(v54 * v57)) + (float)(v53 * *v38);
    float v60 = -v56;
    float v61 = v59 - (float)(v56 * *v48);
    float v62 = (float)((float)(v53 * v55) + (float)(v54 * v56)) + (float)(*v48 * v57);
    float v239 = v54;
    float v249 = v53;
    float v63 = (float)((float)((float)(v54 * v55) - (float)(*v48 * *v38)) - (float)(v52 * v57)) - (float)(v53 * v56);
    int v64 = *(float **)(v224 + 16);
    uint64_t v245 = v224 + 16;
    float v65 = v38[10];
    float v66 = v38[11] + v38[11];
    float v67 = v64[1];
    float v68 = v64[2];
    float v69 = v64[3];
    float v71 = v38[8];
    float v70 = v38[9];
    float v72 = (float)((float)((float)(*v64 * v65) + (float)(v69 * v51)) + (float)(v67 * v70)) - (float)(v71 * v68);
    float v73 = (float)((float)(v67 * v65) + (float)(v69 * v71)) + (float)(v68 * v51);
    float v74 = (float)((float)((float)(v68 * v65) + (float)(v69 * v70)) + (float)(*v64 * v71)) - (float)(v51 * v67);
    float v75 = (float)((float)(v69 * v65) - (float)(*v64 * v51)) - (float)(v67 * v71);
    float v76 = v38[12] + v38[12];
    a16.f32[0] = v38[13] + v38[13];
    *(float *)&a13 = v73 - (float)(v70 * *v64);
    float v77 = v75 - (float)(v68 * v70);
    _Q6.f32[0] = v69 * (float)((float)(v67 * a16.f32[0]) - (float)(v68 * v76));
    float v243 = *v48;
    float v195 = -(float)(v59 + (float)(v60 * *v48));
    float v215 = v69;
    float v216 = a16.f32[0];
    float v235 = v68;
    float v237 = v67;
    float v211 = v69 * (float)((float)(v68 * v66) - (float)(*v64 * a16.f32[0]));
    float v212 = _Q6.f32[0];
    float v252 = v52;
    float v213 = -(float)(v62 + (float)((float)-*v38 * v52));
    float v214 = v76;
    float v222 = v66;
    float v233 = *v64;
    BOOL v78 = v39 <= 0.0;
    *(float *)&_D5 = (float)(v63 * v72) - (float)(v58 * v77);
    float v201 = v61;
    float v202 = v62 - (float)(*v38 * v52);
    float v209 = (float)(v63 * *(float *)&a13) - (float)(v61 * v77);
    float v210 = v69 * (float)((float)(*v64 * v76) - (float)(v67 * v66));
    float v196 = v77;
    float v197 = v63;
    float v199 = v58;
    float v200 = v74;
    float v198 = *(float *)&a13;
    float v193 = (float)((float)(v63 * v74) - (float)(v202 * v77)) - (float)(v58 * *(float *)&a13);
    float v194 = *(float *)&_D5;
    _Q0.n128_u64[0] = 0;
    if (v78) {
      float v46 = 0.0;
    }
    unsigned int v229 = a7;
    if (!a7) {
      _Q0.n128_f32[0] = 1.0;
    }
    unsigned __int32 v250 = _Q0.n128_u32[0];
    float v251 = v46;
    int v79 = (char *)v38 + 258;
    unint64_t v80 = v38 + 29;
    unint64_t v81 = v38 + 14;
    float v203 = v48[4];
    float v204 = v48[5];
    float v205 = v48[6];
    float v206 = v64[4];
    float v207 = v64[5];
    float v208 = v64[6];
    while (!v79[v43])
    {
LABEL_48:
      ++v43;
      v80 += 4;
      v81 += 2;
      if (v43 == 3)
      {
        float v230 = v21;
        uint64_t v110 = 0;
        float v111 = (float)(v239 * v239) + -0.5;
        float v112 = v220 + (float)(v256 * v111);
        float v113 = v218 + (float)(v254 * v111);
        float v114 = (float)(v215 * v215) + -0.5;
        float v115 = v212 + (float)(v222 * v114);
        float v116 = v211 + (float)(v214 * v114);
        float v219 = v209 + (float)(v213 * v72);
        float v221 = v72;
        float v117 = (float)((float)(v254 * v252) + (float)(v243 * v256)) + (float)(v249 * v241);
        float v244 = v203 + (float)(v112 + (float)(v243 * v117));
        float v240 = v205 + (float)((float)(v217 + (float)(v241 * v111)) + (float)(v249 * v117));
        float v242 = v204 + (float)(v113 + (float)(v252 * v117));
        float v118 = (float)((float)(v214 * v237) + (float)(v233 * v222)) + (float)(v235 * v216);
        float v119 = (float)(v210 + (float)(v216 * v114)) + (float)(v235 * v118);
        float v236 = v207 + (float)(v116 + (float)(v237 * v118));
        float v238 = v206 + (float)(v115 + (float)(v233 * v118));
        float v234 = v208 + v119;
        int v120 = (char *)v38 + 261;
        int v121 = v38 + 38;
        int v122 = v38 + 20;
        float v123 = 1.0;
        float v24 = a11;
        while (!v120[v110])
        {
LABEL_91:
          ++v110;
          v121 += 4;
          v122 += 2;
          if (v110 == 3)
          {
            float v21 = v230;
            if (*v223)
            {
              float v166 = (float)(v199 * v196) + (float)(v197 * v221);
              float v167 = (float)(v201 * v196) + (float)(v197 * v198);
              float v168 = (float)(v202 * v196) + (float)(v197 * v200);
              float v169 = (float)((float)(v201 * v198) + (float)(v199 * v221)) + (float)(v202 * v200);
              float v170 = (float)(v197 * v196) - v169;
              float v171 = (float)(v201 * v221) + (float)(v199 * v198);
              float v172 = (float)(v202 * v221) + (float)(v199 * v200);
              float v173 = (float)((float)((float)(v199 * v221) + (float)(v199 * v221)) + v170) * 0.5;
              *(float *)v278 = v173;
              *(float *)&v278[4] = (float)(v168 + v171) * 0.5;
              float v174 = (float)(v201 * v200) + (float)(v202 * v198);
              float v175 = (float)(v171 - v168) * 0.5;
              *(float *)&a13 = (float)((float)((float)(v201 * v198) + (float)(v201 * v198)) + v170) * 0.5;
              *(float *)&v278[8] = (float)(v172 - v167) * 0.5;
              float v279 = v175;
              v280.f32[0] = *(float *)&a13;
              v280.f32[1] = (float)(v166 + v174) * 0.5;
              float v176 = (float)((float)(v202 * v200) + (float)(v202 * v200)) + v170;
              float v177 = (float)(v172 + v167) * 0.5;
              a16.f32[0] = (float)(v174 - v166) * 0.5;
              *(float *)&_D5 = v176 * 0.5;
              float v281 = v177;
              unsigned __int32 v282 = a16.i32[0];
              float v283 = v176 * 0.5;
              _Q6.f32[0] = (float)(v197 * v196) + v169;
              if (_Q6.f32[0] == 0.0)
              {
                _Q6.i64[0] = 0x3400000034000000;
                *(float *)&a13 = *(float *)&a13 + 0.00000011921;
                *(float *)v278 = v173 + 0.00000011921;
                v280.i32[0] = LODWORD(a13);
                float v283 = *(float *)&_D5 + 0.00000011921;
              }
              uint64_t v178 = 0;
              v277[0] = -(float)((float)(v194 + (float)(v195 * v200)) + (float)(v198 * v202));
              v277[1] = -(float)(v219 + (float)(v200 * v199));
              v277[2] = -(float)(v193 + (float)(v221 * v201));
              float v179 = v24 * v23;
              v180 = (unsigned __int32 *)&v278[8];
              do
              {
                if (!*((unsigned char *)v38 + v178 + 258))
                {
                  _Q1.i64[0] = *((void *)v180 - 1);
                  float32x2_t v267 = *(float32x2_t *)_Q1.f32;
                  a12.i32[0] = *v180;
                  float v262 = a12.f32[0];
                  float v181 = v277[v178];
                  unsigned int v182 = *v264;
                  v183.n128_u64[0] = _Q1.i64[0];
                  v183.n128_u64[1] = *v180;
                  v184.n128_u64[0] = vnegq_f32(_Q1).u64[0];
                  float32x4_t v270 = 0u;
                  __n128 v271 = v183;
                  v183.n128_f32[0] = -a12.f32[0];
                  v184.n128_f32[2] = -a12.f32[0];
                  v184.n128_u32[3] = 0;
                  v269[0] = 0u;
                  v269[1] = v184;
                  physx::Dy::FeatherstoneArticulation::getImpulseSelfResponse(a2, a6, (void *)a5, v182, v270.f32, (uint64_t)v274, a8, (float32x2_t *)v269, v183, v184, (float32x4_t)0, a12, a13, _D5, _Q6, a16, (uint64_t)&v272);
                  float32x2_t v185 = v275;
                  *(float *)&a13 = v276;
                  uint64_t v186 = v273.i64[0];
                  LODWORD(_D5) = v273.i32[2];
                  a16.f32[0] = (float)(vmlas_n_f32(vmuls_lane_f32(v275.f32[1], v267, 1), v275.f32[0], v267.f32[0])
                                     + (float)(v276 * v262))
                             - (float)(vmlas_n_f32(vmuls_lane_f32(v273.f32[1], v267, 1), v273.f32[0], v267.f32[0])
                                     + (float)(v273.f32[2] * v262));
                  _Q6.i64[0] = 0;
                  if (a16.f32[0] > 0.00001) {
                    _Q6.f32[0] = 1.0 / (float)(a16.f32[0] + v22);
                  }
                  unsigned int v187 = *(_DWORD *)(a5 + 248);
                  *(_DWORD *)(a5 + 248) = v187 + 1;
                  uint64_t v188 = *(void *)(a5 + 240) + 80 * v187;
                  *(float32x2_t *)(v188 + 48) = v267;
                  *(float32x2_t *)uint64_t v188 = v185;
                  *(_DWORD *)(v188 + 8) = LODWORD(a13);
                  *(void *)(v188 + 12) = *(void *)v274;
                  *(_DWORD *)(v188 + 20) = *(_DWORD *)&v274[8];
                  *(void *)(v188 + 24) = v186;
                  *(_DWORD *)(v188 + 32) = LODWORD(_D5);
                  *(void *)(v188 + 36) = v272.i64[0];
                  *(_DWORD *)(v188 + 44) = v272.i32[2];
                  *(float *)(v188 + 56) = v262;
                  *(_DWORD *)(v188 + 60) = _Q6.i32[0];
                  *(float *)(v188 + 64) = v181;
                  *(float *)(v188 + 68) = v179;
                  unsigned int v31 = a8;
                }
                ++v178;
                v180 += 3;
              }
              while (v178 != 3);
              uint64_t v19 = v228;
              uint64_t v16 = v229;
              uint64_t v20 = v227;
              float v24 = a11;
            }
            else
            {
              uint64_t v19 = v228;
              uint64_t v16 = v229;
              uint64_t v20 = v227;
            }
            uint64_t v32 = v225;
            a1 = v226;
            char v40 = v268;
            uint64_t result = (uint64_t *)v224;
            goto LABEL_109;
          }
        }
        if (v121[2] <= 0.0)
        {
          BOOL v124 = 0;
        }
        else
        {
          if (*v121 > 0.0)
          {
            BOOL v124 = 1;
            goto LABEL_67;
          }
          BOOL v124 = v121[1] > 0.0;
        }
        if (v120[v110] != 1 && v266 == 0 && !v124) {
          goto LABEL_90;
        }
LABEL_67:
        uint64_t v127 = *(void *)(a5 + 352) + 76 * v31 + 24 * v44;
        _Q6.i64[0] = *(void *)(v127 + 12);
        LODWORD(_D5) = *(_DWORD *)(v127 + 20);
        _Q0.n128_f32[0] = v244 - *(float *)(*(void *)v246 + 16);
        float v128 = v240 - *(float *)(*(void *)v246 + 24);
        float v259 = vmlas_n_f32(-(float)(_Q0.n128_f32[0] * *(float *)&_D5), v128, _Q6.f32[0]);
        float v261 = vmuls_lane_f32(-v128, *(float32x2_t *)_Q6.f32, 1)
             + (float)((float)(v242 - *(float *)(*(void *)v246 + 20)) * *(float *)&_D5);
        __asm { FMLA            S1, S0, V6.S[1] }
        unsigned __int32 v132 = _Q1.i32[0];
        float v257 = _Q1.f32[0];
        _Q0.n128_f32[0] = v238 - *(float *)(*(void *)v245 + 16);
        _Q1.f32[0] = v236 - *(float *)(*(void *)v245 + 20);
        float v133 = v234 - *(float *)(*(void *)v245 + 24);
        float v134 = vmuls_lane_f32(-v133, *(float32x2_t *)_Q6.f32, 1);
        float v135 = v134 + (float)(_Q1.f32[0] * *(float *)&_D5);
        float v136 = -(float)(_Q0.n128_f32[0] * *(float *)&_D5);
        *(float *)&_D5 = -(float)((float)(v133 * _Q6.f32[0]) - (float)(_Q0.n128_f32[0] * *(float *)&_D5));
        float v137 = vmlas_n_f32(v136, v133, _Q6.f32[0]);
        v138.i64[0] = _Q6.i64[0];
        float32x4_t v253 = _Q6;
        float v255 = *(float *)(v127 + 20);
        v138.i64[1] = LODWORD(v255);
        *(float *)&a13 = -(float)((float)((float)-_Q1.f32[0] * _Q6.f32[0]) + (float)(_Q0.n128_f32[0] * _Q6.f32[1]));
        v139.i64[0] = __PAIR64__(LODWORD(v259), LODWORD(v261));
        unsigned int v140 = *v264;
        v139.i64[1] = v132;
        _Q1.f32[0] = -(float)(v134 + (float)(_Q1.f32[0] * v255));
        v141.i64[0] = vnegq_f32(v253).u64[0];
        v141.f32[2] = -v255;
        v141.i32[3] = 0;
        v142.i64[0] = __PAIR64__(LODWORD(_D5), _Q1.u32[0]);
        float32x4_t v272 = v138;
        float32x4_t v273 = v139;
        v142.i64[1] = LODWORD(a13);
        __asm { FMLA            S15, S0, V19.S[1] }
        float32x4_t v270 = v141;
        __n128 v271 = (__n128)v142;
        physx::Dy::FeatherstoneArticulation::getImpulseSelfResponse(a2, a6, (void *)a5, v140, v272.f32, (uint64_t)v278, a8, (float32x2_t *)&v270, _Q0, (__n128)_Q1, v138, v141, a13, _D5, v139, v142, (uint64_t)v274);
        _S19 = v255;
        LODWORD(a13) = *(_DWORD *)v278;
        *(void *)&_Q2 = *(void *)&v278[4];
        __asm { FMLA            S0, S19, V2.S[1] }
        *(float32x2_t *)a12.f32 = v280;
        float v146 = v281;
        _Q6.i32[0] = *(_DWORD *)v274;
        _D5 = *(double *)&v274[4];
        __asm { FMLA            S1, S19, V5.S[1] }
        float32x2_t v147 = v275;
        a16.f32[0] = v276;
        _Q0.n128_f32[0] = (float)(_Q0.n128_f32[0]
                                + (float)(vmlas_n_f32(vmuls_lane_f32(v259, v280, 1), v261, v280.f32[0])
                                        + (float)(v281 * v257)))
                        - (float)(_Q1.f32[0]
                                + (float)(vmlas_n_f32(vmuls_lane_f32(v137, v275, 1), v135, v275.f32[0])
                                        + (float)(v276 * _S15)));
        _Q1.i64[0] = 0;
        if (_Q0.n128_f32[0] > 0.00001) {
          _Q1.f32[0] = v123 / (float)(_Q0.n128_f32[0] + v22);
        }
        unsigned int v148 = *(_DWORD *)(a5 + 232);
        *(_DWORD *)(a5 + 232) = v148 + 1;
        uint64_t v149 = *(void *)(a5 + 224);
        uint64_t v150 = v149 + 176 * v148;
        *(_DWORD *)(v150 + 96) = _Q1.i32[0];
        *(_DWORD *)(v150 + 100) = _Q0.n128_u32[0];
        *(void *)uint64_t v150 = v253.i64[0];
        *(float *)(v150 + 8) = v255;
        *(float *)(v150 + 12) = v261;
        *(float *)(v150 + 16) = v259;
        *(float *)(v150 + 20) = v257;
        *(void *)(v150 + 24) = v253.i64[0];
        a12.i64[1] = __PAIR64__(LODWORD(a13), LODWORD(v146));
        *(float *)(v150 + 32) = v255;
        *(float *)(v150 + 36) = v135;
        *((float32x2_t *)&_Q2 + 1) = v147;
        *(float *)(v150 + 40) = v137;
        *(float *)(v150 + 44) = _S15;
        a16.i32[1] = _Q6.i32[0];
        *(double *)&a16.i64[1] = _D5;
        *(float32x4_t *)(v150 + 48) = a12;
        *(_OWORD *)(v150 + 64) = _Q2;
        *(float32x4_t *)(v150 + 80) = a16;
        *(float *)(v150 + 120) = v23;
        *(unsigned char *)(v150 + 168) = 1;
        *(void *)(v150 + 112) = 0;
        *(_DWORD *)(v150 + 160) = 0;
        *(float *)(v150 + 156) = v251;
        *(_DWORD *)(v150 + 164) = v250;
        if (v120[v110] == 1) {
          uint64_t v151 = *(void *)v122;
        }
        else {
          uint64_t v151 = 0x7F7FFFFFFF7FFFFFLL;
        }
        float v24 = a11;
        unsigned int v31 = a8;
        *(void *)(v149 + 176 * v148 + 104) = v151;
        if (!v124)
        {
          uint64_t v158 = v149 + 176 * v148;
          _Q0.n128_u32[1] = 0;
          _Q0.n128_u64[1] = 0;
          *(_OWORD *)(v158 + 140) = 0u;
          *(_OWORD *)(v158 + 124) = 0u;
          goto LABEL_89;
        }
        float v152 = *(float *)(v247 + 96 * a8 + 4 * v44 + 12);
        if (v120[v110] == 1)
        {
          float v153 = *v122;
          if (*v122 <= v152) {
            float v153 = *(float *)(v247 + 96 * a8 + 4 * v44 + 12);
          }
          if (v122[1] >= v153) {
            float v152 = v153;
          }
          else {
            float v152 = v122[1];
          }
        }
        float v154 = -*(float *)(v232 + 4 * v44);
        float v155 = *(float *)(v231 + 4 * v44);
        int v156 = *((_DWORD *)v121 + 3);
        if (v156 == 2)
        {
          float v157 = 0.0;
          _Q1.i32[0] = 1761892689;
LABEL_84:
          float v159 = (float)(v157 + (float)(v25 * _Q1.f32[0])) * v25;
          float v160 = (float)((float)((float)(v152 - v155) * _Q1.f32[0]) + (float)(v157 * v154)) * v25;
          float v161 = (float)(v157 + (float)(v26 * _Q1.f32[0])) * v26;
        }
        else
        {
          if (v156 == 3)
          {
            _Q1.i64[0] = 0;
            float v157 = 1.0e25;
            goto LABEL_84;
          }
          float v164 = v121[1];
          float v159 = (float)(v164 + (float)(v25 * *v121)) * v25;
          float v160 = (float)((float)((float)(v152 - v155) * *v121) + (float)(v164 * v154)) * v25;
          float v161 = (float)(v164 + (float)(v26 * *v121)) * v26;
          if (v156 == 1)
          {
            *(float *)&_D5 = 1.0 / (float)(v159 + 1.0);
            a16.f32[0] = 1.0 / (float)(v161 + 1.0);
            uint64_t v165 = v149 + 176 * v148;
            *(float *)(v165 + 124) = _Q1.f32[0] * (float)(v160 * *(float *)&_D5);
            *(float *)(v165 + 136) = _Q1.f32[0] * (float)-(float)(*(float *)&_D5 * v159);
            _Q1.f32[0] = _Q1.f32[0] * (float)(v161 * a16.f32[0]);
            goto LABEL_88;
          }
          _D5 = 0.0;
          a16.i64[0] = 0;
          _Q1.i64[0] = 0;
          if (v156)
          {
LABEL_88:
            float v123 = 1.0;
            uint64_t v163 = v149 + 176 * v148;
            *(_DWORD *)(v163 + 128) = 0;
            *(float *)(v163 + 132) = v155;
            *(float *)(v163 + 144) = 1.0 - *(float *)&_D5;
            *(float *)(v163 + 148) = v121[2] * v230;
            *(_DWORD *)(v163 + 152) = 0;
            *(float *)(v163 + 140) = (float)((float)(1.0 - a16.f32[0]) * (float)(_Q0.n128_f32[0] * _Q1.f32[0])) * v23;
LABEL_89:
            v268 |= 1 << v44;
LABEL_90:
            ++v44;
            goto LABEL_91;
          }
        }
        _D5 = 0.0;
        a16.i64[0] = 0;
        if (_Q0.n128_f32[0] > 0.0)
        {
          *(float *)&_D5 = 1.0 / (float)((float)(v159 * _Q0.n128_f32[0]) + 1.0);
          a16.f32[0] = 1.0 / (float)((float)(v161 * _Q0.n128_f32[0]) + 1.0);
        }
        uint64_t v162 = v149 + 176 * v148;
        *(float *)(v162 + 124) = v160 * *(float *)&_D5;
        *(float *)(v162 + 136) = -(float)(*(float *)&_D5 * v159);
        _Q1.f32[0] = v161 * a16.f32[0];
        goto LABEL_88;
      }
    }
    float v82 = *v80;
    if (v79[v43] != 1 && v266 == 0 && LODWORD(v82) == 4)
    {
LABEL_47:
      ++v44;
      goto LABEL_48;
    }
    uint64_t v85 = *(void *)(a5 + 352) + 76 * v31 + 24 * v44;
    _Q1.i64[0] = *(void *)v85;
    a12.i32[0] = *(_DWORD *)(v85 + 8);
    float v258 = a12.f32[0];
    float32x2_t v260 = *(float32x2_t *)v85;
    unsigned int v86 = *v264;
    v87.n128_u64[0] = *(void *)v85;
    v87.n128_u64[1] = a12.u32[0];
    v88.n128_u64[0] = vnegq_f32(_Q1).u64[0];
    float32x4_t v272 = 0u;
    float32x4_t v273 = (float32x4_t)v87;
    v87.n128_f32[0] = -a12.f32[0];
    v88.n128_f32[2] = -a12.f32[0];
    v88.n128_u32[3] = 0;
    float32x4_t v270 = 0u;
    __n128 v271 = v88;
    physx::Dy::FeatherstoneArticulation::getImpulseSelfResponse(a2, a6, (void *)a5, v86, v272.f32, (uint64_t)v278, a8, (float32x2_t *)&v270, v87, v88, (float32x4_t)0, a12, a13, _D5, _Q6, a16, (uint64_t)v274);
    __int32 v89 = v280.i32[1];
    LODWORD(_D5) = v280.i32[0];
    _Q6.f32[0] = v281;
    float32x2_t v90 = v275;
    a16.f32[0] = v276;
    _Q0.n128_f32[0] = (float)(vmlas_n_f32(vmuls_lane_f32(v280.f32[1], v260, 1), v280.f32[0], v260.f32[0])
                            + (float)(v281 * v258))
                    - (float)(vmlas_n_f32(vmuls_lane_f32(v275.f32[1], v260, 1), v275.f32[0], v260.f32[0])
                            + (float)(v276 * v258));
    _Q1.i64[0] = 0;
    if (_Q0.n128_f32[0] > 0.00001) {
      _Q1.f32[0] = 1.0 / (float)(_Q0.n128_f32[0] + v22);
    }
    unsigned int v91 = *(_DWORD *)(a5 + 232);
    *(_DWORD *)(a5 + 232) = v91 + 1;
    uint64_t v92 = *(void *)(a5 + 224);
    uint64_t v93 = v92 + 176 * v91;
    *(_DWORD *)(v93 + 100) = _Q0.n128_u32[0];
    *(void *)uint64_t v93 = 0;
    *(_DWORD *)(v93 + 8) = 0;
    *(float32x2_t *)(v93 + 12) = v260;
    *(float *)(v93 + 20) = v258;
    *(void *)(v93 + 24) = 0;
    *(_DWORD *)(v93 + 32) = 0;
    *(float32x2_t *)(v93 + 36) = v260;
    *(float *)(v93 + 44) = v258;
    *(_DWORD *)(v93 + 48) = LODWORD(_D5);
    *(_DWORD *)(v93 + 52) = v89;
    *(_DWORD *)(v93 + 56) = _Q6.i32[0];
    HIDWORD(a13) = *(_DWORD *)&v278[4];
    *(void *)(v93 + 60) = *(void *)v278;
    LODWORD(a13) = *(_DWORD *)&v278[8];
    *(_DWORD *)(v93 + 68) = *(_DWORD *)&v278[8];
    *(float32x2_t *)(v93 + 72) = v90;
    *(_DWORD *)(v93 + 80) = a16.i32[0];
    *(void *)(v93 + 84) = *(void *)v274;
    *(_DWORD *)(v93 + 92) = *(_DWORD *)&v274[8];
    *(_DWORD *)(v93 + 96) = _Q1.i32[0];
    *(float *)(v93 + 120) = v23;
    *(unsigned char *)(v93 + 168) = 0;
    if (v79[v43] == 1) {
      uint64_t v94 = *(void *)v81;
    }
    else {
      uint64_t v94 = 0x7F7FFFFFFF7FFFFFLL;
    }
    unsigned int v31 = a8;
    uint64_t v95 = v92 + 176 * v91;
    *(void *)(v95 + 104) = v94;
    *(void *)(v95 + 112) = 0;
    *(_DWORD *)(v95 + 160) = 0;
    *(float *)(v95 + 156) = v251;
    *(_DWORD *)(v95 + 164) = v250;
    if (LODWORD(v82) == 4)
    {
      uint64_t v102 = v92 + 176 * v91;
      _Q0.n128_u32[1] = 0;
      _Q0.n128_u64[1] = 0;
      *(_OWORD *)(v102 + 140) = 0u;
      *(_OWORD *)(v102 + 124) = 0u;
LABEL_46:
      v268 |= 1 << v44;
      goto LABEL_47;
    }
    float v96 = *(float *)(v247 + 96 * a8 + 4 * v44 + 12);
    if (v79[v43] == 1)
    {
      float v97 = *v81;
      if (*v81 <= v96) {
        float v97 = *(float *)(v247 + 96 * a8 + 4 * v44 + 12);
      }
      if (v81[1] >= v97) {
        float v96 = v97;
      }
      else {
        float v96 = v81[1];
      }
    }
    float v98 = *(float *)(v232 + 4 * v44);
    float v99 = *(float *)(v231 + 4 * v44);
    int v100 = *(_DWORD *)v80;
    if (*(_DWORD *)v80 == 2)
    {
      float v101 = 0.0;
      _Q1.i32[0] = 1761892689;
    }
    else
    {
      if (v100 != 3)
      {
        float v107 = *(v80 - 3);
        float v108 = *(v80 - 2);
        float v103 = (float)(v108 + (float)(v25 * v107)) * v25;
        _Q6.f32[0] = (float)((float)((float)(v96 - v99) * v107) + (float)(v108 * v98)) * v25;
        float v104 = (float)(v108 + (float)(v26 * v107)) * v26;
        if (v100 == 1)
        {
          *(float *)&_D5 = 1.0 / (float)(v103 + 1.0);
          a16.f32[0] = 1.0 / (float)(v104 + 1.0);
          _Q6.f32[0] = _Q1.f32[0] * (float)(_Q6.f32[0] * *(float *)&_D5);
          uint64_t v109 = v92 + 176 * v91;
          *(_DWORD *)(v109 + 124) = _Q6.i32[0];
          *(float *)(v109 + 136) = _Q1.f32[0] * (float)-(float)(*(float *)&_D5 * v103);
          _Q1.f32[0] = _Q1.f32[0] * (float)(v104 * a16.f32[0]);
        }
        else
        {
          _D5 = 0.0;
          a16.i64[0] = 0;
          _Q1.i64[0] = 0;
          if (!v100) {
            goto LABEL_42;
          }
        }
LABEL_45:
        *(float *)&a13 = 1.0 - a16.f32[0];
        uint64_t v106 = v92 + 176 * v91;
        *(_DWORD *)(v106 + 128) = 0;
        *(float *)(v106 + 132) = v99;
        *(float *)(v106 + 144) = 1.0 - *(float *)&_D5;
        *(float *)(v106 + 148) = *(v80 - 1) * v21;
        *(_DWORD *)(v106 + 152) = 0;
        *(float *)(v106 + 140) = (float)((float)(1.0 - a16.f32[0]) * (float)(_Q0.n128_f32[0] * _Q1.f32[0])) * v23;
        goto LABEL_46;
      }
      _Q1.i64[0] = 0;
      float v101 = 1.0e25;
    }
    float v103 = (float)(v101 + (float)(v25 * _Q1.f32[0])) * v25;
    _Q6.f32[0] = (float)((float)((float)(v96 - v99) * _Q1.f32[0]) + (float)(v101 * v98)) * v25;
    float v104 = (float)(v101 + (float)(v26 * _Q1.f32[0])) * v26;
LABEL_42:
    _D5 = 0.0;
    a16.i64[0] = 0;
    if (_Q0.n128_f32[0] > 0.0)
    {
      *(float *)&_D5 = 1.0 / (float)((float)(v103 * _Q0.n128_f32[0]) + 1.0);
      a16.f32[0] = 1.0 / (float)((float)(v104 * _Q0.n128_f32[0]) + 1.0);
    }
    uint64_t v105 = v92 + 176 * v91;
    *(float *)(v105 + 124) = _Q6.f32[0] * *(float *)&_D5;
    *(float *)(v105 + 136) = -(float)(*(float *)&_D5 * v103);
    _Q1.f32[0] = v104 * a16.f32[0];
    goto LABEL_45;
  }
LABEL_109:
  *(unsigned char *)(v32 + 80 * v31 + 78) = v40;
  for (uint64_t i = *result; i; i &= i - 1)
  {
    unsigned int v190 = __clz(__rbit32(i));
    unsigned int v191 = __clz(__rbit32(HIDWORD(i))) + 32;
    if (i) {
      uint64_t v192 = v190;
    }
    else {
      uint64_t v192 = v191;
    }
    uint64_t result = (uint64_t *)physx::Dy::FeatherstoneArticulation::setupInternalConstraintsRecursive(a1, a2, v20, v19, a5, a6, v16, v192, v26, v25, v24, v23, v22, v21);
  }
  return result;
}

uint64_t physx::Dy::FeatherstoneArticulation::setupInternalConstraints(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8, float32x4_t a9, float a10, float32x4_t a11, double a12, double a13, float32x4_t a14, float32x4_t a15)
{
  unsigned __int32 v20 = a11.i32[0];
  float v22 = a9.f32[0];
  unsigned __int32 v23 = a8.n128_u32[0];
  uint64_t v25 = result;
  *(_DWORD *)(a5 + 232) = 0;
  unsigned int v26 = *(_DWORD *)(a5 + 476);
  if ((*(_DWORD *)(a5 + 236) & 0x7FFFFFFFu) < v26) {
    uint64_t result = physx::shdfnd::Array<physx::Dy::ArticulationInternalConstraint,physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationInternalConstraint>>::recreate(a5 + 224, v26);
  }
  *(_DWORD *)(a5 + 248) = 0;
  unsigned int v27 = *(_DWORD *)(a5 + 480);
  if ((*(_DWORD *)(a5 + 252) & 0x7FFFFFFFu) < v27) {
    uint64_t result = physx::shdfnd::Array<physx::Dy::ArticulationInternalLockedAxis,physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationInternalLockedAxis>>::recreate(a5 + 240, v27);
  }
  if ((**(unsigned char **)(a5 + 488) & 2) != 0) {
    float v28 = v22;
  }
  else {
    float v28 = 1.0;
  }
  for (uint64_t i = *a2; i; i &= i - 1)
  {
    unsigned int v30 = __clz(__rbit32(i));
    unsigned int v31 = __clz(__rbit32(HIDWORD(i))) + 32;
    if (i) {
      unsigned int v32 = v30;
    }
    else {
      unsigned int v32 = v31;
    }
    a8.n128_u32[0] = v23;
    a9.f32[0] = v22;
    a11.i32[0] = v20;
    LODWORD(a12) = 953267991;
    *(float *)&a13 = v28;
    uint64_t result = (uint64_t)physx::Dy::FeatherstoneArticulation::setupInternalConstraintsRecursive(v25, (uint64_t)a2, a3, a4, a5, a6, a7, v32, a8, a9, a10, a11, a12, a13, a14, a15);
  }
  return result;
}

void physx::Dy::FeatherstoneArticulation::teleportLinks(physx::Dy::FeatherstoneArticulation *this, physx::Dy::ArticulationData *a2)
{
  physx::Dy::FeatherstoneArticulation::jcalc(this, a2, 1);
  uint64_t v7 = *((unsigned int *)this + 154);
  if (v7 >= 2)
  {
    uint64_t v8 = *((void *)this + 76);
    uint64_t v9 = *((void *)this + 79);
    uint64_t v10 = *((void *)a2 + 10);
    uint64_t v11 = *((void *)this + 74);
    uint64_t v140 = *((void *)a2 + 42);
    uint64_t v12 = (float *)(v140 + 84);
    uint64_t v13 = 1;
    float v14 = -0.5;
    uint64_t v133 = v10;
    uint64_t v134 = v9;
    uint64_t v132 = v11;
    while (1)
    {
      uint64_t v15 = v8 + 40 * v13;
      uint64_t v16 = *(float **)(v8 + 40 * *(unsigned int *)(v15 + 32) + 16);
      float v18 = *v16;
      float v17 = v16[1];
      float v20 = v16[2];
      float v19 = v16[3];
      float v22 = v16[4];
      float v21 = v16[5];
      float v23 = v16[6];
      uint64_t v24 = *(void *)(v15 + 24);
      int v25 = *(unsigned __int8 *)(v24 + 270);
      unsigned int v26 = (float *)(v10 + 4 * *(unsigned int *)(v9 + 80 * v13 + 72));
      float v28 = *(float *)(v24 + 44);
      float v27 = *(float *)(v24 + 48);
      float v29 = *(float *)(v24 + 52);
      float v31 = *(float *)(v24 + 16);
      float v30 = *(float *)(v24 + 20);
      float v32 = *(float *)(v24 + 24);
      uint64_t v33 = (float *)(v11 + 16 * v13);
      float v35 = *v33;
      float v34 = v33[1];
      float v36 = v33[2];
      float v37 = v33[3];
      switch(v25)
      {
        case 0:
          float v38 = v31 + v31;
          float v39 = v30 + v30;
          float v40 = v32 + v32;
          float v41 = v14 + (float)(v37 * v37);
          float v42 = (float)((float)((float)(v30 + v30) * v34) + (float)(v35 * (float)(v31 + v31)))
              + (float)(v36 * (float)(v32 + v32));
          float v43 = -v36;
          float v44 = (float)((float)(v37 * (float)((float)(v34 * v40) - (float)(v36 * (float)(v30 + v30))))
                      + (float)((float)(v31 + v31) * v41))
              + (float)(v35 * v42);
          float v45 = -v35;
          float v46 = (float)((float)((float)((float)(v36 * (float)(v31 + v31)) - (float)(v35 * v40)) * v37)
                      + (float)(v39 * v41))
              + (float)(v34 * v42);
          float v47 = -v34;
          char v48 = (float *)(v140 + 76 * v13);
          float v49 = (float)((float)((float)((float)((float)(v35 * v39) - (float)(v34 * v38)) * v37) + (float)(v40 * v41))
                      + (float)(v36 * v42))
              - v29;
          float v4 = (float)(v44 - v28) + (float)(*v26 * v48[3]);
          float v5 = (float)(v46 - v27) + (float)(*v26 * v48[4]);
          float v6 = v49 + (float)(*v26 * v48[5]);
          goto LABEL_24;
        case 1:
          float v50 = (float *)(v140 + 76 * v13);
          float v155 = v16[2];
          float v157 = v16[1];
          float v151 = v29;
          float v153 = *v16;
          float v147 = v28;
          float v149 = v27;
          float v143 = v30;
          float v145 = v32;
          float v141 = v31;
          __float2 v52 = __sincosf_stret(*v26 * v14);
          float cosval = v52.__cosval;
          float v14 = -0.5;
          float v18 = v153;
          float v20 = v155;
          float v17 = v157;
          float v53 = *v50 * v52.__sinval;
          float v54 = v52.__sinval * v50[1];
          float v55 = v52.__sinval * v50[2];
          if (v52.__cosval < 0.0)
          {
            float v53 = -v53;
            float v54 = -v54;
            float v55 = -v55;
            float cosval = -v52.__cosval;
          }
          float v56 = (float)((float)((float)(v37 * v53) + (float)(cosval * v35)) + (float)(v54 * v36)) - (float)(v34 * v55);
          float v57 = (float)((float)((float)(v37 * v54) + (float)(cosval * v34)) + (float)(v55 * v35)) - (float)(v36 * v53);
          float v58 = (float)((float)((float)(v37 * v55) + (float)(cosval * v36)) + (float)(v53 * v34)) - (float)(v35 * v54);
          float v59 = (float)((float)((float)(cosval * v37) - (float)(v53 * v35)) - (float)(v54 * v34)) - (float)(v55 * v36);
          float v60 = sqrtf((float)((float)((float)(v57 * v57) + (float)(v56 * v56)) + (float)(v58 * v58)) + (float)(v59 * v59));
          float v35 = v56 / v60;
          float v34 = v57 / v60;
          float v36 = v58 / v60;
          float v37 = v59 / v60;
          float v61 = (float)(v37 * v37) + -0.5;
          float v62 = (float)((float)((float)(v143 + v143) * (float)(v57 / v60))
                      + (float)((float)(v56 / v60) * (float)(v141 + v141)))
              + (float)(v36 * (float)(v145 + v145));
          float v43 = -v36;
          float v63 = (float)((float)((float)(v59 / v60)
                              * (float)((float)((float)(v57 / v60) * (float)(v145 + v145))
                                      - (float)(v36 * (float)(v143 + v143))))
                      + (float)((float)(v141 + v141) * v61))
              + (float)((float)(v56 / v60) * v62);
          float v45 = -(float)(v56 / v60);
          float v64 = (float)((float)((float)(v59 / v60)
                              * (float)((float)(v36 * (float)(v141 + v141)) - (float)(v35 * (float)(v145 + v145))))
                      + (float)((float)(v143 + v143) * v61))
              + (float)((float)(v57 / v60) * v62);
          float v47 = -(float)(v57 / v60);
          float v65 = (float)((float)((float)(v59 / v60)
                              * (float)((float)(v35 * (float)(v143 + v143)) - (float)(v34 * (float)(v141 + v141))))
                      + (float)((float)(v145 + v145) * v61))
              + (float)(v36 * v62);
          float v4 = v63 - v147;
          float v5 = v64 - v149;
          float v6 = v65 - v151;
          goto LABEL_24;
        case 2:
          uint64_t v66 = *(unsigned __int8 *)(v9 + 80 * v13 + 76);
          float v138 = v16[4];
          float v139 = v34;
          float v136 = v16[6];
          float v137 = v16[5];
          float v156 = v16[2];
          float v158 = v16[1];
          float v152 = v29;
          float v154 = *v16;
          float v135 = v16[3];
          float v148 = v28;
          float v150 = v27;
          float v144 = v30;
          float v146 = v32;
          float v142 = v31;
          if (v66 >= 3)
          {
            float v90 = 0.0;
            unsigned int v91 = v12;
            float v92 = 0.0;
            float v93 = 0.0;
            do
            {
              float v94 = *v26++;
              float v95 = v94;
              float v96 = *(v91 - 2);
              float v97 = *(v91 - 1);
              float v98 = *v91;
              v91 += 6;
              float v93 = v93 - (float)(v95 * v96);
              float v92 = v92 - (float)(v95 * v97);
              float v90 = v90 - (float)(v95 * v98);
              --v66;
            }
            while (v66);
            float v99 = (float)((float)(v92 * v92) + (float)(v93 * v93)) + (float)(v90 * v90);
            if (v99 >= 1.0e-24)
            {
              float v104 = sqrtf(v99);
              float v105 = v93 * (float)(1.0 / v104);
              float v106 = v92 * (float)(1.0 / v104);
              float v107 = v90 * (float)(1.0 / v104);
              __float2 v108 = __sincosf_stret(v104 * 0.5);
              float v100 = v108.__cosval;
              float v101 = v108.__sinval * v105;
              float v102 = v108.__sinval * v106;
              float v103 = v108.__sinval * v107;
            }
            else
            {
              float v100 = 1.0;
              float v101 = 0.0;
              float v102 = 0.0;
              float v103 = 0.0;
            }
            float v109 = sqrtf((float)((float)((float)(v102 * v102) + (float)(v101 * v101)) + (float)(v103 * v103))+ (float)(v100 * v100));
            float v79 = v101 / v109;
            float v80 = v102 / v109;
            float v81 = v103 / v109;
            float v69 = v100 / v109;
          }
          else
          {
            if (*(unsigned char *)(v9 + 80 * v13 + 76))
            {
              unsigned int v67 = v66 - 1;
              float v68 = 0.0;
              float v69 = 1.0;
              float v70 = 0.0;
              float v71 = 0.0;
              float v72 = -0.5;
              do
              {
                uint64_t v73 = v67;
                float v74 = (float *)(v140 + 76 * v13 + 24 * v67);
                __float2 v75 = __sincosf_stret(v26[v67] * -0.5);
                float v76 = *v74 * v75.__sinval;
                float v77 = v75.__sinval * v74[1];
                float v78 = v75.__sinval * v74[2];
                float v79 = (float)((float)((float)(v71 * v75.__cosval) + (float)(v69 * v76)) + (float)(v70 * v78))
                    - (float)(v77 * v68);
                float v80 = (float)((float)((float)(v70 * v75.__cosval) + (float)(v69 * v77)) + (float)(v68 * v76))
                    - (float)(v78 * v71);
                float v81 = (float)((float)((float)(v68 * v75.__cosval) + (float)(v69 * v78)) + (float)(v71 * v77))
                    - (float)(v76 * v70);
                float v69 = (float)((float)((float)(v69 * v75.__cosval) - (float)(v71 * v76)) - (float)(v70 * v77))
                    - (float)(v68 * v78);
                --v67;
                float v68 = v81;
                float v70 = v80;
                float v71 = v79;
              }
              while (v73);
              goto LABEL_23;
            }
            float v69 = 1.0;
            float v79 = 0.0;
            float v80 = 0.0;
            float v81 = 0.0;
          }
          float v72 = -0.5;
LABEL_23:
          float v110 = (float)((float)((float)(v37 * v79) + (float)(v69 * v35)) + (float)(v80 * v36)) - (float)(v139 * v81);
          float v111 = (float)((float)((float)(v37 * v80) + (float)(v69 * v139)) + (float)(v81 * v35)) - (float)(v36 * v79);
          float v112 = (float)((float)((float)(v37 * v81) + (float)(v69 * v36)) + (float)(v79 * v139)) - (float)(v35 * v80);
          float v113 = (float)((float)((float)(v69 * v37) - (float)(v79 * v35)) - (float)(v80 * v139)) - (float)(v81 * v36);
          float v114 = sqrtf((float)((float)((float)(v111 * v111) + (float)(v110 * v110)) + (float)(v112 * v112))+ (float)(v113 * v113));
          float v35 = v110 / v114;
          float v34 = v111 / v114;
          float v36 = v112 / v114;
          float v37 = v113 / v114;
          float v115 = v72 + (float)(v37 * v37);
          float v116 = (float)((float)((float)(v144 + v144) * (float)(v111 / v114))
                       + (float)((float)(v110 / v114) * (float)(v142 + v142)))
               + (float)((float)(v112 / v114) * (float)(v146 + v146));
          float v43 = -(float)(v112 / v114);
          float v117 = (float)((float)((float)(v113 / v114)
                               * (float)((float)((float)(v111 / v114) * (float)(v146 + v146))
                                       - (float)((float)(v112 / v114) * (float)(v144 + v144))))
                       + (float)((float)(v142 + v142) * v115))
               + (float)((float)(v110 / v114) * v116);
          float v45 = -(float)(v110 / v114);
          float v118 = (float)((float)((float)(v113 / v114)
                               * (float)((float)((float)(v112 / v114) * (float)(v142 + v142))
                                       - (float)((float)(v110 / v114) * (float)(v146 + v146))))
                       + (float)((float)(v144 + v144) * v115))
               + (float)(v34 * v116);
          float v47 = -v34;
          float v119 = (float)((float)((float)(v113 / v114)
                               * (float)((float)((float)(v110 / v114) * (float)(v144 + v144))
                                       - (float)(v34 * (float)(v142 + v142))))
                       + (float)((float)(v146 + v146) * v115))
               + (float)(v36 * v116);
          float v4 = v117 - v148;
          float v5 = v118 - v150;
          float v18 = v154;
          float v6 = v119 - v152;
          uint64_t v10 = v133;
          uint64_t v9 = v134;
          uint64_t v11 = v132;
          float v14 = -0.5;
          float v21 = v137;
          float v22 = v138;
          float v19 = v135;
          float v23 = v136;
          float v20 = v156;
          float v17 = v158;
LABEL_24:
          int v120 = *(float **)(v8 + 40 * v13 + 16);
          float v121 = (float)((float)((float)(v18 * v37) + (float)(v19 * v45)) + (float)(v17 * v43)) + (float)(v34 * v20);
          float v122 = (float)((float)((float)(v17 * v37) + (float)(v19 * v47)) + (float)(v20 * v45)) + (float)(v36 * v18);
          float v123 = (float)((float)((float)(v20 * v37) + (float)(v19 * v43)) + (float)(v18 * v47)) + (float)(v35 * v17);
          float v124 = (float)((float)((float)(v18 * v35) + (float)(v19 * v37)) + (float)(v17 * v34)) + (float)(v20 * v36);
          float v125 = sqrtf((float)((float)((float)(v122 * v122) + (float)(v121 * v121)) + (float)(v123 * v123))+ (float)(v124 * v124));
          float v126 = v121 / v125;
          float v127 = v122 / v125;
          float v128 = v123 / v125;
          float v129 = v124 / v125;
          float *v120 = v126;
          v120[1] = v127;
          v120[2] = v128;
          v120[3] = v129;
          float v130 = v14 + (float)(v129 * v129);
          float v131 = (float)((float)((float)(v5 + v5) * v127) + (float)(v126 * (float)(v4 + v4)))
               + (float)(v128 * (float)(v6 + v6));
          v120[4] = v22
                  + (float)((float)((float)(v129
                                          * (float)((float)(v127 * (float)(v6 + v6)) - (float)(v128 * (float)(v5 + v5))))
                                  + (float)((float)(v4 + v4) * v130))
                          + (float)(v126 * v131));
          v120[5] = v21
                  + (float)((float)((float)(v129
                                          * (float)((float)(v128 * (float)(v4 + v4)) - (float)(v126 * (float)(v6 + v6))))
                                  + (float)((float)(v5 + v5) * v130))
                          + (float)(v127 * v131));
          v120[6] = v23
                  + (float)((float)((float)(v129
                                          * (float)((float)(v126 * (float)(v5 + v5)) - (float)(v127 * (float)(v4 + v4))))
                                  + (float)((float)(v6 + v6) * v130))
                          + (float)(v128 * v131));
          ++v13;
          v12 += 19;
          if (v13 == v7) {
            return;
          }
          break;
        case 3:
          float v82 = v31 + v31;
          float v83 = v30 + v30;
          float v84 = v32 + v32;
          float v85 = v14 + (float)(v37 * v37);
          float v86 = (float)((float)((float)(v30 + v30) * v34) + (float)(v35 * (float)(v31 + v31)))
              + (float)(v36 * (float)(v32 + v32));
          float v43 = -v36;
          float v87 = (float)((float)(v37 * (float)((float)(v34 * v84) - (float)(v36 * (float)(v30 + v30))))
                      + (float)((float)(v31 + v31) * v85))
              + (float)(v35 * v86);
          float v45 = -v35;
          float v88 = (float)((float)((float)((float)(v36 * (float)(v31 + v31)) - (float)(v35 * v84)) * v37)
                      + (float)(v83 * v85))
              + (float)(v34 * v86);
          float v47 = -v34;
          float v89 = (float)((float)((float)((float)(v35 * v83) - (float)(v34 * v82)) * v37) + (float)(v84 * v85))
              + (float)(v36 * v86);
          float v4 = v87 - v28;
          float v5 = v88 - v27;
          float v6 = v89 - v29;
          goto LABEL_24;
        default:
          float v45 = -v35;
          float v47 = -v34;
          float v43 = -v36;
          goto LABEL_24;
      }
    }
  }
}

void physx::Dy::FeatherstoneArticulation::jcalc(physx::Dy::FeatherstoneArticulation *this, physx::Dy::ArticulationData *a2, int a3)
{
  if (*((unsigned char *)this + 161)) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = a3 == 0;
  }
  if (!v3)
  {
    uint64_t v5 = *((unsigned int *)a2 + 110);
    if (v5 >= 2)
    {
      char v6 = 0;
      unsigned __int8 v7 = 0;
      uint64_t v8 = *((void *)a2 + 57);
      uint64_t v9 = *((void *)a2 + 58);
      uint64_t v10 = v8 + 80;
      uint64_t v11 = (float *)(v8 + 88);
      uint64_t v12 = *((void *)a2 + 54);
      uint64_t v13 = 96;
      uint64_t v14 = 1;
      while (1)
      {
        uint64_t v15 = *(void *)(v12 + 40 * v14 + 24);
        char v16 = *(unsigned char *)(v15 + 269);
        if ((v16 & 1) != 0 || a3)
        {
          uint64_t v17 = 0;
          uint64_t v18 = v8 + 80 * v14;
          *(_WORD *)(v18 + 76) = 0;
          float v19 = (unsigned __int8 *)(v18 + 76);
          v19[3] = 0;
          float v20 = v19 + 3;
          uint64_t v21 = v15 + 258;
          do
          {
            if (*(unsigned char *)(v21 + v17))
            {
              uint64_t v22 = *v19;
              *(_DWORD *)(v10 + 24 * v22 + 4 * v17) = 1065353216;
              if (*(unsigned char *)(v21 + v17) == 1) {
                ++v19[1];
              }
              *float v19 = v22 + 1;
              *(unsigned char *)(v15 + v22 + 252) = v17;
            }
            ++v17;
          }
          while (v17 != 6);
          *float v20 = 0;
          if (*(unsigned char *)(v15 + 270) == 2 && *v19 == 2)
          {
            for (uint64_t i = 0; i != 3; ++i)
            {
              if (!*(unsigned char *)(v15 + 258 + i))
              {
                uint64_t v24 = *v19;
                *(_DWORD *)(v10 + 24 * v24 + 4 * i) = 1065353216;
                *float v19 = v24 + 1;
                *(unsigned char *)(v15 + v24 + 252) = i;
                ++*v20;
              }
            }
          }
          char v16 = *(unsigned char *)(v15 + 269) & 0xFE;
          *(unsigned char *)(v15 + 269) = v16;
        }
        uint64_t v25 = *((void *)a2 + 42);
        if ((v16 & 2) != 0 || a3)
        {
          float v26 = *(float *)(v15 + 4);
          float v27 = *(float *)(v15 + 8);
          float v28 = *(float *)(v15 + 12);
          float v29 = *(float *)(v15 + 28);
          float v30 = *(float *)(v15 + 32);
          float v32 = *(float *)(v15 + 36);
          float v31 = *(float *)(v15 + 40);
          float v33 = (float)((float)((float)(v28 * v29) - (float)(v31 * *(float *)v15)) - (float)(v30 * v27))
              + (float)(v26 * v32);
          float v34 = (float)((float)((float)(v28 * v30) - (float)(v31 * v26)) - (float)(v32 * *(float *)v15))
              + (float)(v27 * v29);
          float v35 = (float)((float)((float)(v28 * v32) - (float)(v31 * v27)) - (float)(v29 * v26))
              + (float)(*(float *)v15 * v30);
          float v36 = (float)((float)((float)(*(float *)v15 * v29) + (float)(v31 * v28)) + (float)(v30 * v26))
              + (float)(v32 * v27);
          float v37 = sqrtf((float)((float)((float)(v34 * v34) + (float)(v33 * v33)) + (float)(v35 * v35)) + (float)(v36 * v36));
          float v38 = (float *)(*((void *)this + 74) + 16 * v14);
          *float v38 = v33 / v37;
          v38[1] = v34 / v37;
          v38[2] = v35 / v37;
          v38[3] = v36 / v37;
          float v39 = (float *)(v8 + 80 * v14);
          uint64_t v40 = v25 + 76 * v14;
          float v41 = *(float *)(v15 + 44);
          float v42 = *(float *)(v15 + 48);
          float v43 = -v41;
          float v44 = -v42;
          float v45 = *(float *)(v15 + 52);
          float v46 = -v45;
          switch(*(unsigned char *)(v15 + 270))
          {
            case 0:
              float v47 = v39[3] + v39[3];
              float v48 = v39[4] + v39[4];
              float v49 = v39[5] + v39[5];
              float v51 = *(float *)(v15 + 36);
              float v50 = *(float *)(v15 + 40);
              float v52 = (float)(v50 * v50) + -0.5;
              float v53 = *(float *)(v15 + 28);
              float v54 = *(float *)(v15 + 32);
              float v55 = (float)((float)(v48 * v54) + (float)(v53 * v47)) + (float)(v51 * v49);
              float v56 = (float)((float)(v50 * (float)((float)(v54 * v49) - (float)(v51 * v48))) + (float)(v47 * v52))
                  + (float)(v53 * v55);
              float v57 = (float)((float)(v50 * (float)((float)(v51 * v47) - (float)(v53 * v49))) + (float)(v48 * v52))
                  + (float)(v54 * v55);
              float v58 = (float)((float)(v50 * (float)((float)(v53 * v48) - (float)(v54 * v47))) + (float)(v49 * v52))
                  + (float)(v51 * v55);
              float v59 = (float)((float)(v57 * v57) + (float)(v56 * v56)) + (float)(v58 * v58);
              float v60 = 0.0;
              float v61 = 0.0;
              float v62 = 0.0;
              if (v59 > 0.0)
              {
                float v63 = 1.0 / sqrtf(v59);
                float v60 = v56 * v63;
                float v61 = v57 * v63;
                float v62 = v58 * v63;
              }
              *(_DWORD *)(v25 + 76 * v14 + 72) = 1;
              *(void *)uint64_t v40 = 0;
              *(_DWORD *)(v40 + 8) = 0;
              *(float *)(v40 + 12) = v60;
              *(float *)(v40 + 16) = v61;
              *(float *)(v40 + 20) = v62;
              break;
            case 1:
              float v64 = *v39 + *v39;
              float v65 = v39[1] + v39[1];
              float v66 = v39[2] + v39[2];
              float v68 = *(float *)(v15 + 36);
              float v67 = *(float *)(v15 + 40);
              float v69 = (float)(v67 * v67) + -0.5;
              float v70 = *(float *)(v15 + 28);
              float v71 = *(float *)(v15 + 32);
              float v72 = (float)((float)(v65 * v71) + (float)(v70 * v64)) + (float)(v68 * v66);
              float v73 = (float)((float)(v67 * (float)((float)(v71 * v66) - (float)(v68 * v65))) + (float)(v64 * v69))
                  + (float)(v70 * v72);
              float v74 = (float)((float)(v67 * (float)((float)(v68 * v64) - (float)(v70 * v66))) + (float)(v65 * v69))
                  + (float)(v71 * v72);
              float v75 = (float)((float)(v67 * (float)((float)(v70 * v65) - (float)(v71 * v64))) + (float)(v66 * v69))
                  + (float)(v68 * v72);
              float v76 = (float)((float)(v74 * v74) + (float)(v73 * v73)) + (float)(v75 * v75);
              float v77 = 0.0;
              float v78 = 0.0;
              float v79 = 0.0;
              if (v76 > 0.0)
              {
                float v80 = 1.0 / sqrtf(v76);
                float v77 = v73 * v80;
                float v78 = v74 * v80;
                float v79 = v75 * v80;
              }
              *(_DWORD *)(v25 + 76 * v14 + 72) = 1;
              *(float *)uint64_t v40 = v77;
              *(float *)(v40 + 4) = v78;
              *(float *)(v40 + 8) = v79;
              *(float *)(v40 + 12) = (float)(v42 * v79) + (float)(v78 * v46);
              *(float *)(v40 + 16) = (float)(v45 * v77) + (float)(v79 * v43);
              *(float *)(v40 + 20) = (float)(v41 * v78) + (float)(v77 * v44);
              break;
            case 2:
              uint64_t v81 = *(unsigned __int8 *)(v8 + 80 * v14 + 76);
              *(_DWORD *)(v25 + 76 * v14 + 72) = v81;
              if (v81)
              {
                float v83 = *(float *)(v15 + 36);
                float v82 = *(float *)(v15 + 40);
                float v84 = (float)(v82 * v82) + -0.5;
                float v85 = *(float *)(v15 + 28);
                float v86 = *(float *)(v15 + 32);
                float v87 = (float *)(v25 + v13);
                float v88 = v11;
                do
                {
                  float v89 = *(v88 - 2) + *(v88 - 2);
                  float v90 = *(v88 - 1) + *(v88 - 1);
                  float v91 = *v88 + *v88;
                  float v92 = (float)((float)(v86 * v90) + (float)(v85 * v89)) + (float)(v83 * v91);
                  float v93 = (float)((float)(v82 * (float)((float)(v90 * (float)-v83) + (float)(v86 * v91)))
                              + (float)(v89 * v84))
                      + (float)(v85 * v92);
                  float v94 = (float)((float)(v82 * (float)((float)(v91 * (float)-v85) + (float)(v83 * v89)))
                              + (float)(v90 * v84))
                      + (float)(v86 * v92);
                  float v95 = (float)((float)(v82 * (float)((float)(v89 * (float)-v86) + (float)(v85 * v90)))
                              + (float)(v91 * v84))
                      + (float)(v83 * v92);
                  float v96 = (float)((float)(v94 * v94) + (float)(v93 * v93)) + (float)(v95 * v95);
                  float v97 = 0.0;
                  float v98 = 0.0;
                  float v99 = 0.0;
                  if (v96 > 0.0)
                  {
                    float v100 = 1.0 / sqrtf(v96);
                    float v97 = v93 * v100;
                    float v98 = v94 * v100;
                    float v99 = v95 * v100;
                  }
                  *(v87 - 5) = v97;
                  *(v87 - 4) = v98;
                  *(v87 - 3) = v99;
                  *(v87 - 2) = (float)(v42 * v99) + (float)(v98 * v46);
                  *(v87 - 1) = (float)(v45 * v97) + (float)(v99 * v43);
                  *float v87 = (float)(v41 * v98) + (float)(v97 * v44);
                  v88 += 6;
                  v87 += 6;
                  --v81;
                }
                while (v81);
              }
              break;
            case 3:
              *(_DWORD *)(v25 + 76 * v14 + 72) = 0;
              break;
            default:
              break;
          }
          v16 &= ~2u;
          *(unsigned char *)(v15 + 269) = v16;
          if ((v16 & 8) != 0)
          {
LABEL_42:
            uint64_t v101 = 0;
            unsigned int v102 = 0;
            uint64_t v103 = v15 + 258;
            do
            {
              if (*(unsigned char *)(v103 + v101)) {
                *(_DWORD *)(v9 + 96 * v14 + 4 * v102++) = *(_DWORD *)(v103 + 4 * v101 - 34);
              }
              ++v101;
            }
            while (v101 != 6);
            v16 &= ~8u;
            *(unsigned char *)(v15 + 269) = v16;
            if ((v16 & 4) == 0) {
              goto LABEL_52;
            }
LABEL_47:
            uint64_t v104 = 0;
            unsigned int v105 = 0;
            uint64_t v106 = v15 + 258;
            do
            {
              if (*(unsigned char *)(v106 + v104)) {
                *(_DWORD *)(v9 + 96 * v14 + 4 * v105++ + 12) = *(_DWORD *)(v106 + 4 * v104 - 58);
              }
              ++v104;
            }
            while (v104 != 6);
            *(unsigned char *)(v15 + 269) = v16 & 0xFB;
            goto LABEL_52;
          }
        }
        else if ((v16 & 8) != 0)
        {
          goto LABEL_42;
        }
        if ((v16 & 4) != 0) {
          goto LABEL_47;
        }
LABEL_52:
        v6 |= *(unsigned char *)(v15 + 270) == 2;
        int v107 = v7;
        uint64_t v108 = v8 + 80 * v14;
        *(unsigned char *)(v15 + 268) = v7;
        v7 += *(unsigned char *)(v108 + 76);
        ++v14;
        *(_DWORD *)(v108 + 72) = v107;
        v10 += 80;
        v11 += 20;
        v13 += 76;
        if (v14 == v5)
        {
          unsigned int v109 = v7;
          goto LABEL_55;
        }
      }
    }
    unsigned int v109 = 0;
    char v6 = 0;
LABEL_55:
    if (*((_DWORD *)this + 163) != v109)
    {
      physx::Dy::ArticulationData::resizeJointData((physx::Dy::FeatherstoneArticulation *)((char *)this + 176), v109);
      *((_DWORD *)this + 163) = v109;
    }
    *((unsigned char *)this + 864) = v6 & 1;
    *((unsigned char *)this + 161) = 0;
  }
}

void physx::Dy::FeatherstoneArticulation::computeLinkVelocities(physx::Dy::FeatherstoneArticulation *this, physx::Dy::ArticulationData *a2)
{
  physx::Dy::FeatherstoneArticulation::jcalc(this, a2, 1);
  uint64_t v4 = *((unsigned int *)a2 + 110);
  if (v4 >= 2)
  {
    uint64_t v5 = *((void *)a2 + 54);
    uint64_t v6 = *((void *)a2 + 6);
    uint64_t v7 = *((void *)a2 + 57);
    uint64_t v8 = *((void *)a2 + 42) + 92;
    for (uint64_t i = 1; i != v4; ++i)
    {
      uint64_t v10 = v5 + 40 * i;
      uint64_t v11 = *(float **)(v10 + 16);
      uint64_t v12 = *(float **)(v5 + 40 * *(unsigned int *)(v10 + 32) + 16);
      float v13 = v12[20];
      float v14 = v12[21];
      float v15 = v12[22];
      float v16 = v11[4] - v12[4];
      float v17 = v11[5] - v12[5];
      float v18 = v11[6] - v12[6];
      float v19 = (float)(v14 * v18) - (float)(v17 * v15);
      float v20 = (float)(v15 * v16) - (float)(v18 * v13);
      float v21 = (float)(v13 * v17) - (float)(v16 * v14);
      float v22 = v12[16] + v19;
      float v23 = v12[17] + v20;
      float v24 = v12[18] + v21;
      if (v6)
      {
        uint64_t v25 = v7 + 80 * i;
        uint64_t v26 = *(unsigned __int8 *)(v25 + 76);
        if (*(unsigned char *)(v25 + 76))
        {
          float v27 = (float *)(v6 + 4 * *(unsigned int *)(v25 + 72));
          float32x2_t v28 = 0;
          float32x4_t v29 = 0uLL;
          float v30 = (float32x4_t *)v8;
          do
          {
            float v31 = *v27++;
            v3.f32[0] = v31;
            float32x2_t v32 = (float32x2_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 0).u64[0];
            float32x4_t v3 = vmulq_n_f32(v30[-1], v31);
            float32x2_t v33 = *(float32x2_t *)v30->f32;
            float v30 = (float32x4_t *)((char *)v30 + 24);
            float32x4_t v29 = vaddq_f32(v29, v3);
            float32x2_t v28 = vadd_f32(v28, vmul_f32(v32, v33));
            --v26;
          }
          while (v26);
          v3.i32[0] = v28.i32[1];
        }
        else
        {
          float32x4_t v29 = 0uLL;
          v28.i32[0] = 0;
          v3.i64[0] = 0;
        }
        float v34 = v11[1];
        float v35 = v11[2];
        float v36 = v11[3];
        float v37 = (float)(v36 * v36) + -0.5;
        float v38 = (float)((float)(v34 * (float)(v29.f32[1] + v29.f32[1])) + (float)(*v11 * (float)(v29.f32[0] + v29.f32[0])))
            + (float)(v35 * (float)(v29.f32[2] + v29.f32[2]));
        float v13 = v13
            + (float)((float)((float)(v36
                                    * (float)((float)(v34 * (float)(v29.f32[2] + v29.f32[2]))
                                            - (float)(v35 * (float)(v29.f32[1] + v29.f32[1]))))
                            + (float)((float)(v29.f32[0] + v29.f32[0]) * v37))
                    + (float)(*v11 * v38));
        float v14 = v14
            + (float)((float)((float)(v36
                                    * (float)((float)(v35 * (float)(v29.f32[0] + v29.f32[0]))
                                            - (float)(*v11 * (float)(v29.f32[2] + v29.f32[2]))))
                            + (float)((float)(v29.f32[1] + v29.f32[1]) * v37))
                    + (float)(v34 * v38));
        float v15 = v15
            + (float)((float)((float)(v36
                                    * (float)((float)(*v11 * (float)(v29.f32[1] + v29.f32[1]))
                                            - (float)(v34 * (float)(v29.f32[0] + v29.f32[0]))))
                            + (float)((float)(v29.f32[2] + v29.f32[2]) * v37))
                    + (float)(v35 * v38));
        float v39 = v28.f32[0] + v28.f32[0];
        float v40 = v3.f32[0] + v3.f32[0];
        float v41 = (float)((float)(v34 * v39) + (float)(*v11 * (float)(v29.f32[3] + v29.f32[3]))) + (float)(v35 * v40);
        float v22 = v22
            + (float)((float)((float)(v36 * (float)((float)(v34 * v40) - (float)(v35 * v39)))
                            + (float)((float)(v29.f32[3] + v29.f32[3]) * v37))
                    + (float)(*v11 * v41));
        float v23 = v23
            + (float)((float)((float)(v36
                                    * (float)((float)(v35 * (float)(v29.f32[3] + v29.f32[3])) - (float)(*v11 * v40)))
                            + (float)(v39 * v37))
                    + (float)(v34 * v41));
        float v24 = v24
            + (float)((float)((float)(v36
                                    * (float)((float)(*v11 * v39) - (float)(v34 * (float)(v29.f32[3] + v29.f32[3]))))
                            + (float)(v40 * v37))
                    + (float)(v35 * v41));
      }
      v11[16] = v22;
      v11[17] = v23;
      v11[18] = v24;
      v11[20] = v13;
      v11[21] = v14;
      v8 += 76;
      v11[22] = v15;
    }
  }
}

float physx::Dy::FeatherstoneArticulation::computeSpatialInertia(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 440);
  if (v2)
  {
    float32x4_t v3 = (float **)(*(void *)(a2 + 432) + 16);
    uint64_t v4 = *(void *)(a2 + 304) + 52;
    float result = 1.0;
    do
    {
      uint64_t v7 = *v3;
      v3 += 5;
      uint64_t v6 = v7;
      float v9 = v7[30];
      float v8 = v7[31];
      float v10 = 1.0 / v8;
      BOOL v11 = v8 == 0.0;
      float v12 = v7[28];
      float v13 = v7[29];
      if (v11) {
        float v10 = 0.0;
      }
      float v14 = 1.0 / v12;
      float v15 = 1.0 / v13;
      float v16 = *v6;
      float v17 = v6[1];
      BOOL v11 = v12 == 0.0;
      float v19 = v6[2];
      float v18 = v6[3];
      float v20 = v16 + v16;
      float v21 = v17 + v17;
      float v22 = v19 + v19;
      float v23 = v16 * (float)(v16 + v16);
      float v24 = 1.0 / v9;
      float v25 = v17 * (float)(v17 + v17);
      float v26 = v19 * (float)(v19 + v19);
      float v27 = v20 * v17;
      float v28 = v20 * v19;
      float v29 = v20 * v18;
      if (v11) {
        float v14 = 0.0;
      }
      float v30 = v21 * v19;
      float v31 = v21 * v18;
      float v32 = v22 * v18;
      float v33 = (float)(1.0 - v25) - v26;
      BOOL v11 = v13 == 0.0;
      float v34 = v27 + v32;
      float v35 = v28 - v31;
      float v36 = v27 - v32;
      float v37 = 1.0 - v23;
      float v38 = v37 - v26;
      if (v11) {
        float v15 = 0.0;
      }
      float v39 = v30 + v29;
      float v40 = v28 + v31;
      float v41 = v30 - v29;
      *(_DWORD *)(v4 - 20) = 0;
      *(_OWORD *)(v4 - 36) = 0uLL;
      float v42 = v37 - v25;
      *(_OWORD *)(v4 - 52) = 0uLL;
      *(float *)(v4 - 16) = v10;
      *(void *)(v4 - 12) = 0;
      *(_DWORD *)(v4 - 4) = 0;
      *(float *)uint64_t v4 = v10;
      BOOL v11 = v9 == 0.0;
      *(void *)(v4 + 4) = 0;
      *(_DWORD *)(v4 + 12) = 0;
      float v43 = v14 * v33;
      float v44 = v14 * v34;
      float v45 = v14 * v35;
      if (v11) {
        float v24 = 0.0;
      }
      float v46 = v15 * v36;
      *(float *)(v4 + 16) = v10;
      *(float *)(v4 + 20) = (float)((float)(v36 * (float)(v15 * v36)) + (float)(v43 * v33))
                          + (float)((float)(v24 * v40) * v40);
      float v47 = (float)((float)(v38 * (float)(v15 * v36)) + (float)(v43 * v34)) + (float)((float)(v24 * v40) * v41);
      float v48 = (float)((float)(v39 * v46) + (float)(v43 * v35)) + (float)((float)(v24 * v40) * v42);
      *(float *)(v4 + 32) = v47;
      *(float *)(v4 + 36) = (float)((float)(v38 * (float)(v15 * v38)) + (float)(v44 * v34))
                          + (float)((float)(v24 * v41) * v41);
      *(float *)(v4 + 24) = v47;
      *(float *)(v4 + 28) = v48;
      float v49 = (float)((float)(v39 * (float)(v15 * v38)) + (float)(v44 * v35)) + (float)((float)(v24 * v41) * v42);
      *(float *)(v4 + 40) = v49;
      *(float *)(v4 + 44) = v48;
      *(float *)(v4 + 48) = v49;
      *(float *)(v4 + 52) = (float)((float)(v39 * (float)(v15 * v39)) + (float)(v45 * v35))
                          + (float)((float)(v24 * v42) * v42);
      v4 += 112;
      --v2;
    }
    while (v2);
  }
  return result;
}

void physx::Dy::FeatherstoneArticulation::computeZ(double a1, double a2, double a3, double a4, double a5, double a6, int8x8_t a7, uint64_t a8, uint64_t a9, float32x2_t *a10, void *a11)
{
  float v11 = *(float *)(a9 + 472);
  float v12 = 1.0 / v11;
  BOOL v13 = v11 < 0.000001;
  float v14 = 3.4028e38;
  if (!v13) {
    float v14 = v12;
  }
  uint64_t v15 = *(unsigned int *)(a9 + 440);
  if (v15)
  {
    uint64_t v16 = 0;
    uint64_t v17 = a11[3];
    uint64_t v18 = a11[4];
    uint64_t v19 = 32 * v15;
    float v20 = (uint64_t *)(*(void *)(a9 + 432) + 16);
    uint64_t v21 = *(void *)(a9 + 304) + 72;
    uint64_t v22 = *a11 + 8;
    do
    {
      float v23 = *(float *)(v22 + v16 - 4);
      v25.i32[0] = *(_DWORD *)(v22 + v16);
      float v24 = sqrtf((float)((float)(v23 * v23) + (float)(*(float *)(v22 + v16 - 8) * *(float *)(v22 + v16 - 8)))+ (float)(v25.f32[0] * v25.f32[0]));
      v25.i32[1] = *(_DWORD *)(v22 + v16 - 8);
      if (v24 > 0.0)
      {
        float v23 = v23 * (float)(1.0 / v24);
        float32x2_t v25 = vmul_n_f32(v25, 1.0 / v24);
      }
      a7.i32[0] = 0;
      uint64_t v26 = *v20;
      if (v24 >= v14) {
        float v24 = v14;
      }
      float v27 = v24 * v23;
      float32x2_t v28 = vmul_n_f32(v25, v24);
      v25.i32[0] = *(unsigned __int8 *)(v26 + 157);
      float32x2_t v29 = (float32x2_t)vand_s8((int8x8_t)vneg_f32(*a10), vdup_lane_s8(vceq_s8((int8x8_t)v25, a7), 0));
      if (*(unsigned char *)(v26 + 157)) {
        float v30 = 0.0;
      }
      else {
        float v30 = -a10[1].f32[0];
      }
      float v31 = 1.0 / *(float *)(v26 + 124);
      float32x2_t v32 = vmul_n_f32(v29, v31);
      float v33 = v30 * v31;
      uint64_t v34 = v17 + v16;
      *(float32x2_t *)uint64_t v34 = v32;
      *(float *)(v34 + 8) = v30 * v31;
      float32_t v35 = (float)(vmuls_lane_f32(*(float *)(v21 + 8), v28, 1) + (float)(v27 * *(float *)(v21 + 20)))
          + (float)(*(float *)(v21 + 32) * v28.f32[0]);
      v36.i32[0] = vdup_lane_s32((int32x2_t)v28, 1).u32[0];
      v36.f32[1] = v27;
      float32x2_t v37 = vneg_f32(v36);
      float32x2_t v38 = vadd_f32(vadd_f32(vmul_lane_f32(*(float32x2_t *)v21, v28, 1), vmul_lane_f32(*(float32x2_t *)(v21 + 12), v36, 1)), vmul_n_f32(*(float32x2_t *)(v21 + 24), v28.f32[0]));
      float v39 = vmuls_lane_f32(-v28.f32[0], v38, 1) + (float)(v27 * v35);
      float32x2_t v40 = (float32x2_t)vdup_lane_s32((int32x2_t)v38, 0);
      v40.f32[0] = v35;
      a7 = (int8x8_t)vmla_f32(vmul_f32(v40, v37), v38, v28);
      *(float *)(v34 + 16) = v39;
      *(double *)(v34 + 20) = *(double *)&a7;
      if (v18)
      {
        float v41 = *(float *)(v18 + v16 + 8);
        float v42 = *(float *)(v18 + v16 + 16);
        float v43 = *(float *)(v18 + v16 + 20);
        float v44 = *(float *)(v18 + v16 + 24);
        *(float32x2_t *)(v17 + v16) = vsub_f32(v32, vmul_n_f32(*(float32x2_t *)(v18 + v16), v31));
        *(float *)(v34 + 8) = v33 - (float)(v31 * v41);
        *(float *)(v34 + 16) = v39
                             + (float)((float)((float)-(float)(v43 * *(float *)(v21 + 12)) - (float)(v42 * *(float *)v21))
                                     - (float)(v44 * *(float *)(v21 + 24)));
        *(float32x2_t *)(v34 + 20) = vadd_f32((float32x2_t)a7, vsub_f32(vsub_f32(vmul_n_f32(*(float32x2_t *)(v21 + 16), -v43), vmul_n_f32(*(float32x2_t *)(v21 + 4), v42)), vmul_n_f32(*(float32x2_t *)(v21 + 28), v44)));
      }
      v16 += 32;
      v20 += 5;
      v21 += 112;
    }
    while (v19 != v16);
  }
}

uint64_t physx::Dy::FeatherstoneArticulation::computeC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = a3[6];
  uint64_t v4 = (_OWORD *)a3[2];
  uint64_t v5 = *(unsigned int *)(a2 + 440);
  *uint64_t v4 = 0u;
  v4[1] = 0u;
  if (v5 >= 2)
  {
    uint64_t v6 = *(void *)(a2 + 432);
    uint64_t v7 = *(void *)(a2 + 448);
    uint64_t v8 = *(void *)(a2 + 456);
    uint64_t v9 = *(void *)(a2 + 352) + 84;
    uint64_t v10 = *a3;
    uint64_t v11 = 1;
    uint64_t result = 40;
    do
    {
      uint64_t v13 = v8 + 80 * v11;
      float v14 = (float *)(v10 + 32 * *(unsigned int *)(v6 + 40 * v11 + 32));
      _S3 = *v14;
      _S5 = v14[1];
      _S4 = v14[2];
      uint64_t v18 = (float *)(v7 + 160 * v11);
      float v20 = v18[31];
      float v19 = v18[32];
      float v21 = v18[30];
      float v22 = (float)(_S5 * v19) - (float)(_S4 * v20);
      float v23 = (float)(_S4 * v21) - (float)(_S3 * v19);
      float v24 = (float)(_S3 * v20) - (float)(_S5 * v21);
      float v25 = (float)(_S5 * v24) - (float)(_S4 * v23);
      float v26 = (float)(_S4 * v22) - (float)(_S3 * v24);
      float v27 = (float)(_S3 * v23) - (float)(_S5 * v22);
      uint64_t v28 = *(unsigned __int8 *)(v13 + 76);
      if (*(unsigned char *)(v13 + 76))
      {
        float32x2_t v29 = (float *)(v3 + 4 * *(unsigned int *)(v13 + 72));
        _Q6 = 0uLL;
        _S7 = 0.0;
        float32x2_t v32 = (_OWORD *)v9;
        _S16 = 0.0;
        do
        {
          float v34 = *v29++;
          float v35 = v34;
          _S16 = _S16 + (float)(v34 * *((float *)v32 - 2));
          _S7 = _S7 + (float)(v34 * *((float *)v32 - 1));
          float32x4_t v36 = *(float32x4_t *)v32;
          float32x2_t v32 = (_OWORD *)((char *)v32 + 24);
          _Q6 = vaddq_f32(_Q6, vmulq_n_f32(v36, v35));
          --v28;
        }
        while (v28);
        float v37 = vmlas_n_f32(_S7 * (float)-_S4, _S5, _Q6.f32[0]);
        float v38 = (float)((float)-_S3 * _Q6.f32[0]) + (float)(_S4 * _S16);
        float v39 = (float)(_S16 * (float)-_S5) + (float)(_S3 * _S7);
        __asm
        {
          FMLA            S22, S5, V6.S[3]
          FMLA            S5, S4, V6.S[1]
          FMLA            S4, S3, V6.S[2]
          FMLA            S18, S7, V6.S[3]
          FMLA            S7, S16, V6.S[2]
        }
        float v25 = v25 + (float)(_S18 + (float)(_S22 + _S22));
        float v26 = v26 + (float)(vmlas_n_f32(vmuls_lane_f32(-_S16, _Q6, 3), _Q6.f32[1], _Q6.f32[0]) + (float)(_S5 + _S5));
        float v27 = v27 + (float)(_S7 + (float)(_S4 + _S4));
      }
      else
      {
        float v37 = 0.0;
        float v38 = 0.0;
        float v39 = 0.0;
      }
      float v49 = (float *)&v4[2 * v11];
      *float v49 = v37;
      v49[1] = v38;
      v49[2] = v39;
      v49[3] = 0.0;
      v49[4] = v25;
      v49[5] = v26;
      v49[6] = v27;
      ++v11;
      v9 += 76;
      v49[7] = 0.0;
    }
    while (v11 != v5);
  }
  return result;
}

uint64_t physx::Dy::FeatherstoneArticulation::computeRelativeTransformC2P(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 440);
  if (v2 >= 2)
  {
    uint64_t v3 = *(void *)(a2 + 432);
    uint64_t v4 = *(void *)(a2 + 336);
    uint64_t v5 = *(void *)(a2 + 352);
    uint64_t v6 = *(void *)(a2 + 448);
    uint64_t v7 = (float *)(v4 + 96);
    uint64_t v8 = (float *)(v5 + 96);
    uint64_t v9 = *(void *)(a2 + 456) + 100;
    uint64_t v10 = *(void *)(a2 + 464) + 140;
    uint64_t v11 = 1;
    uint64_t result = 40;
    do
    {
      uint64_t v13 = v3 + 40 * v11;
      float v14 = *(float32x2_t **)(v13 + 16);
      uint64_t v15 = *(float32x2_t **)(v3 + 40 * *(unsigned int *)(v13 + 32) + 16);
      float v16 = v14[2].f32[0] - v15[2].f32[0];
      float v17 = v14[2].f32[1] - v15[2].f32[1];
      float v18 = v14[3].f32[0] - v15[3].f32[0];
      float v19 = v16 + v16;
      float v20 = v17 + v17;
      float v21 = v18 + v18;
      float v23 = v14[1].f32[0];
      float v22 = v14[1].f32[1];
      float v24 = (float)(v22 * v22) + -0.5;
      float v25 = v14->f32[0];
      float v26 = v14->f32[1];
      float v27 = (float)((float)(v20 * v26) + (float)(v14->f32[0] * v19)) + (float)(v23 * v21);
      float32_t v28 = (float)((float)(v19 * v24) - (float)((float)((float)(v26 * v21) - (float)(v23 * v20)) * v22))
          + (float)(v14->f32[0] * v27);
      float32_t v29 = (float)((float)(v20 * v24) - (float)((float)((float)(v23 * v19) - (float)(v14->f32[0] * v21)) * v22))
          + (float)(v26 * v27);
      float32_t v30 = (float)((float)(v21 * v24) - (float)((float)((float)(v14->f32[0] * v20) - (float)(v26 * v19)) * v22))
          + (float)(v23 * v27);
      float v31 = (float32x2_t *)(v6 + 160 * v11);
      v31[13].f32[1] = v28;
      v31[14].f32[0] = v29;
      v31[14].f32[1] = v30;
      float32_t v32 = v14[3].f32[0] - v15[3].f32[0];
      v31[15] = vsub_f32(v14[2], v15[2]);
      v31[16].f32[0] = v32;
      uint64_t v33 = *(unsigned int *)(v4 + 76 * v11 + 72);
      *(_DWORD *)(v5 + 76 * v11 + 72) = v33;
      if (v33)
      {
        float v34 = -v23;
        float v35 = -v25;
        float v36 = -v26;
        float v37 = (float *)v10;
        float v38 = (float *)v9;
        float v39 = v8;
        float32x2_t v40 = v7;
        do
        {
          float v41 = *(v40 - 5) + *(v40 - 5);
          float v42 = *(v40 - 4) + *(v40 - 4);
          float v43 = *(v40 - 3) + *(v40 - 3);
          float v44 = (float)((float)(v26 * v42) + (float)(v25 * v41)) + (float)(v23 * v43);
          float v45 = (float)(v22 * (float)((float)(v42 * v34) + (float)(v26 * v43))) + (float)(v41 * v24);
          float v46 = (float)(v22 * (float)((float)(v43 * v35) + (float)(v23 * v41))) + (float)(v42 * v24);
          float v47 = (float)(v22 * (float)((float)(v41 * v36) + (float)(v25 * v42))) + (float)(v43 * v24);
          float v48 = v45 + (float)(v25 * v44);
          float v49 = *(v40 - 2) + *(v40 - 2);
          float v50 = *(v40 - 1) + *(v40 - 1);
          float v51 = *v40 + *v40;
          float v52 = (float)((float)(v26 * v50) + (float)(v25 * v49)) + (float)(v23 * v51);
          *(v39 - 5) = v48;
          *(v39 - 4) = v46 + (float)(v26 * v44);
          *(v39 - 3) = v47 + (float)(v23 * v44);
          *(v39 - 2) = (float)((float)(v22 * (float)((float)(v50 * v34) + (float)(v26 * v51))) + (float)(v49 * v24))
                     + (float)(v25 * v52);
          *(v39 - 1) = (float)((float)(v22 * (float)((float)(v51 * v35) + (float)(v23 * v49))) + (float)(v50 * v24))
                     + (float)(v26 * v52);
          float *v39 = (float)((float)(v22 * (float)((float)(v49 * v36) + (float)(v25 * v50))) + (float)(v51 * v24))
               + (float)(v23 * v52);
          float v53 = *(v38 - 5) + *(v38 - 5);
          float v54 = *(v38 - 4) + *(v38 - 4);
          float v55 = *(v38 - 3) + *(v38 - 3);
          float v56 = (float)((float)(v26 * v54) + (float)(v25 * v53)) + (float)(v23 * v55);
          float v57 = (float)(v22 * (float)((float)(v54 * v34) + (float)(v26 * v55))) + (float)(v53 * v24);
          float v58 = (float)(v22 * (float)((float)(v55 * v35) + (float)(v23 * v53))) + (float)(v54 * v24);
          float v59 = (float)(v22 * (float)((float)(v53 * v36) + (float)(v25 * v54))) + (float)(v55 * v24);
          float v60 = v57 + (float)(v25 * v56);
          float v61 = *(v38 - 2) + *(v38 - 2);
          float v62 = *(v38 - 1) + *(v38 - 1);
          float v63 = *v38 + *v38;
          float v64 = (float)((float)(v26 * v62) + (float)(v25 * v61)) + (float)(v23 * v63);
          *(v37 - 5) = v60;
          *(v37 - 4) = v58 + (float)(v26 * v56);
          v40 += 6;
          *(v37 - 3) = v59 + (float)(v23 * v56);
          *(v37 - 2) = (float)((float)(v22 * (float)((float)(v62 * v34) + (float)(v26 * v63))) + (float)(v61 * v24))
                     + (float)(v25 * v64);
          *(v37 - 1) = (float)((float)(v22 * (float)((float)(v63 * v35) + (float)(v23 * v61))) + (float)(v62 * v24))
                     + (float)(v26 * v64);
          *float v37 = (float)((float)(v22 * (float)((float)(v61 * v36) + (float)(v25 * v62))) + (float)(v63 * v24))
               + (float)(v23 * v64);
          v39 += 6;
          v38 += 6;
          v37 += 6;
          --v33;
        }
        while (v33);
      }
      ++v11;
      v7 += 19;
      v8 += 19;
      v9 += 80;
      v10 += 96;
    }
    while (v11 != v2);
  }
  return result;
}

float physx::Dy::FeatherstoneArticulation::computeRelativeTransformC2B(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 440);
  if (v2 >= 2)
  {
    uint64_t v3 = *(void *)(a2 + 432);
    uint64_t v4 = *(float32x2_t **)(v3 + 16);
    uint64_t v5 = v2 - 1;
    uint64_t v6 = (float *)(*(void *)(a2 + 448) + 264);
    uint64_t v7 = (float32x2_t **)(v3 + 56);
    do
    {
      uint64_t v8 = *v7;
      v7 += 5;
      float result = v8[3].f32[0] - v4[3].f32[0];
      *((float32x2_t *)v6 - 1) = vsub_f32(v8[2], v4[2]);
      *uint64_t v6 = result;
      v6 += 40;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t physx::Dy::FeatherstoneArticulation::getDenseJacobian(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 104))(a1);
  uint64_t v8 = *(unsigned int *)(a1 + 616);
  uint64_t v9 = *(void *)(a1 + 608);
  uint64_t v10 = *(void *)(a1 + 624);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  unsigned int v12 = 0;
  int v13 = *(_DWORD *)(a1 + 616);
  char v14 = **(unsigned char **)(a1 + 664);
  if (v14) {
    int v15 = 0;
  }
  else {
    int v15 = 6;
  }
  *a4 = v15 + result;
  int v83 = v15 - 6;
  int v84 = v15;
  *a3 = v15 - 6 + 6 * v13;
  char v85 = v14;
  if ((v14 & 1) == 0)
  {
    uint64_t v16 = *(void *)(a2 + 8);
    *(_DWORD *)uint64_t v16 = 1065353216;
    *(void *)(v16 + 12) = 0;
    *(void *)(v16 + 4) = 0;
    *(_DWORD *)(v16 + 20) = 0;
    uint64_t v17 = *a4;
    *(_DWORD *)(v16 + 4 * v17) = 0;
    *(_DWORD *)(v16 + 4 * (v17 + 1)) = 1065353216;
    *(_DWORD *)(v16 + 4 * (v17 + 2)) = 0;
    *(_DWORD *)(v16 + 4 * (v17 + 3)) = 0;
    *(_DWORD *)(v16 + 4 * (v17 + 4)) = 0;
    *(_DWORD *)(v16 + 4 * (v17 + 5)) = 0;
    *(void *)(v16 + 4 * (2 * v17)) = 0;
    *(void *)(v16 + 4 * (2 * v17 + 2)) = 1065353216;
    *(void *)(v16 + 4 * (2 * v17 + 4)) = 0;
    *(_DWORD *)(v16 + 4 * (3 * v17)) = 0;
    *(_DWORD *)(v16 + 4 * (3 * v17 + 1)) = 0;
    *(_DWORD *)(v16 + 4 * (3 * v17 + 2)) = 0;
    *(_DWORD *)(v16 + 4 * (3 * v17 + 3)) = 1065353216;
    *(_DWORD *)(v16 + 4 * (3 * v17 + 4)) = 0;
    *(_DWORD *)(v16 + 4 * (3 * v17 + 5)) = 0;
    float v18 = (void *)(v16 + 4 * (4 * v17));
    *float v18 = 0;
    v18[1] = 0;
    *(void *)(v16 + 4 * (4 * v17 + 4)) = 1065353216;
    LODWORD(v17) = 5 * v17;
    *(_DWORD *)(v16 + 4 * v17) = 0;
    *(_DWORD *)(v16 + 4 * (v17 + 1)) = 0;
    *(_DWORD *)(v16 + 4 * (v17 + 2)) = 0;
    *(_DWORD *)(v16 + 4 * (v17 + 3)) = 0;
    *(_DWORD *)(v16 + 4 * (v17 + 4)) = 0;
    unsigned int v19 = v17 + 5;
    unsigned int v12 = 6;
    *(_DWORD *)(v16 + 4 * v19) = 1065353216;
  }
  if (v8 >= 2)
  {
    uint64_t v20 = *(void *)(a1 + 632);
    uint64_t v21 = *(void *)(a2 + 8);
    uint64_t v22 = *a4;
    int v23 = v22 * (v12 + 5);
    uint64_t v24 = (6 * v22);
    int v25 = v22 * (v12 + 4);
    uint64_t result = v22 * (v12 + 3);
    int v26 = v22 * (v12 + 2);
    int v27 = v12 * v22;
    int v28 = v22 + v12 * v22;
    uint64_t v29 = 1;
    uint64_t v30 = 96;
    uint64_t v81 = v8;
    uint64_t v82 = v9;
    uint64_t v80 = v20;
    do
    {
      uint64_t v31 = v9 + 40 * v29;
      uint64_t v32 = *(void *)(v31 + 16);
      *(_DWORD *)(v10 + 160 * v29 + 144) = *(_DWORD *)(v32 + 76);
      unsigned int v33 = *(_DWORD *)(v31 + 32);
      if ((v85 & 1) == 0 || v33)
      {
        uint64_t v34 = *(_DWORD *)(v20 + 80 * v33 + 72) + v84 + *(unsigned __int8 *)(v20 + 80 * v33 + 76);
        int v35 = v83 + 6 * v33;
        int v36 = (v35 + 3) * v22;
        int v37 = (v35 + 4) * v22;
        int v38 = (v35 + 5) * v22;
        float v39 = (float *)(v10 + 160 * v29);
        float32x2_t v40 = v39 + 30;
        float v41 = v39 + 32;
        float v42 = v39 + 31;
        int v43 = v35 * v22;
        int v44 = (v35 | 1) * v22;
        int v45 = (v35 + 2) * v22;
        unint64_t v46 = v34 + 1;
        for (uint64_t i = -1; i != v34; ++i)
        {
          float v48 = *(float *)(v21 + 4 * (v37 + i + 1));
          float v49 = *(float *)(v21 + 4 * (v38 + i + 1));
          float v50 = *v42;
          float v51 = *(float *)(v21 + 4 * (v36 + i + 1));
          float v52 = *v40;
          float v53 = (float)(v49 * *v40) - (float)(v51 * *v41);
          *(float *)(v21 + 4 * (v27 + i + 1)) = *(float *)(v21 + 4 * (v43 + i + 1))
                                                              + (float)((float)(v48 * *v41) - (float)(v49 * *v42));
          *(float *)(v21 + 4 * (v28 + i + 1)) = v53
                                                              + *(float *)(v21 + 4 * (v44 + i + 1));
          *(float *)(v21 + 4 * (v26 + i + 1)) = (float)((float)(v51 * v50) - (float)(v48 * v52))
                                                              + *(float *)(v21 + 4 * (v45 + i + 1));
          *(float *)(v21 + 4 * (result + i + 1)) = v51;
          *(float *)(v21 + 4 * (v25 + i + 1)) = v48;
          *(float *)(v21 + 4 * (v23 + i + 1)) = v49;
        }
        uint64_t v8 = v81;
        uint64_t v9 = v82;
        uint64_t v20 = v80;
        if ((int)v34 + 1 < v12)
        {
          do
          {
            *(_DWORD *)(v21 + 4 * (v27 + v46)) = 0;
            *(_DWORD *)(v21 + 4 * (v28 + v46)) = 0;
            *(_DWORD *)(v21 + 4 * (v26 + v46)) = 0;
            *(_DWORD *)(v21 + 4 * (result + v46)) = 0;
            *(_DWORD *)(v21 + 4 * (v25 + v46)) = 0;
            *(_DWORD *)(v21 + 4 * (v23 + v46++)) = 0;
          }
          while (v46 < v12);
        }
      }
      uint64_t v54 = v20 + 80 * v29;
      uint64_t v55 = *(unsigned __int8 *)(v54 + 76);
      if (*(unsigned char *)(v54 + 76))
      {
        uint64_t v56 = 0;
        float v57 = (float *)(*(void *)(a1 + 512) + v30);
        do
        {
          float v58 = *(v57 - 5) + *(v57 - 5);
          float v59 = *(v57 - 4) + *(v57 - 4);
          float v61 = *(float *)(v32 + 8);
          float v60 = *(float *)(v32 + 12);
          float v62 = *(v57 - 3) + *(v57 - 3);
          float v63 = (float)(v60 * v60) + -0.5;
          float v64 = *(float *)(v32 + 4);
          float v65 = (float)((float)(v59 * v64) + (float)(*(float *)v32 * v58)) + (float)(v61 * v62);
          float v66 = (float)(v60 * (float)((float)(v64 * v62) - (float)(v61 * v59))) + (float)(v58 * v63);
          float v67 = v60 * (float)((float)(v61 * v58) - (float)(*(float *)v32 * v62));
          float v68 = v60 * (float)((float)(*(float *)v32 * v59) - (float)(v64 * v58));
          float v69 = v67 + (float)(v59 * v63);
          float v70 = *(v57 - 2) + *(v57 - 2);
          float v71 = *(v57 - 1) + *(v57 - 1);
          float v72 = *v57 + *v57;
          float v73 = v68 + (float)(v62 * v63);
          float v74 = (float)((float)(v64 * v71) + (float)(*(float *)v32 * v70)) + (float)(v61 * v72);
          float v75 = v66 + (float)(*(float *)v32 * v65);
          float v76 = (float)((float)(v60 * (float)((float)(v64 * v72) - (float)(v61 * v71))) + (float)(v70 * v63))
              + (float)(*(float *)v32 * v74);
          float v77 = (float)(v60 * (float)((float)(v61 * v70) - (float)(*(float *)v32 * v72))) + (float)(v71 * v63);
          float v78 = v60 * (float)((float)(*(float *)v32 * v71) - (float)(v64 * v70));
          *(float *)(v21 + 4 * (v12 + v27 + v56)) = v76;
          *(float *)(v21 + 4 * (v12 + v28 + v56)) = v77 + (float)(v64 * v74);
          *(float *)(v21 + 4 * (v12 + v26 + v56)) = (float)(v78 + (float)(v72 * v63))
                                                                  + (float)(v61 * v74);
          *(float *)(v21 + 4 * (v12 + result + v56)) = v75;
          *(float *)(v21 + 4 * (v12 + v25 + v56)) = v69 + (float)(v64 * v65);
          *(float *)(v21 + 4 * (v12 + v23 + v56++)) = v73 + (float)(v61 * v65);
          v57 += 6;
        }
        while (v55 != v56);
        v12 += v56;
      }
      if (v12 < v22)
      {
        uint64_t v79 = v12;
        do
        {
          *(_DWORD *)(v21 + 4 * (v27 + v79)) = 0;
          *(_DWORD *)(v21 + 4 * (v28 + v79)) = 0;
          *(_DWORD *)(v21 + 4 * (v26 + v79)) = 0;
          *(_DWORD *)(v21 + 4 * (result + v79)) = 0;
          *(_DWORD *)(v21 + 4 * (v25 + v79)) = 0;
          *(_DWORD *)(v21 + 4 * (v23 + v79++)) = 0;
        }
        while (v22 != v79);
      }
      ++v29;
      v23 += v24;
      v25 += v24;
      result += v24;
      v26 += v24;
      v28 += v24;
      v27 += v24;
      v30 += 76;
    }
    while (v29 != v8);
  }
  return result;
}

uint64_t physx::Dy::FeatherstoneArticulation::computeLinkVelocities(uint64_t a1, uint64_t a2, int **a3)
{
  uint64_t v3 = *(void *)(a2 + 432);
  uint64_t v4 = *(void *)(a2 + 448);
  uint64_t v5 = *(unsigned int *)(a2 + 440);
  char v6 = **(unsigned char **)(a2 + 488);
  uint64_t v7 = *a3;
  uint64_t v8 = a3[1];
  uint64_t v9 = a3[6];
  uint64_t v10 = *(void *)(v3 + 16);
  *(_DWORD *)(v4 + 144) = *(_DWORD *)(v10 + 76);
  if (v6)
  {
    *(_OWORD *)uint64_t v7 = 0u;
    *((_OWORD *)v7 + 1) = 0u;
    *(_OWORD *)uint64_t v8 = 0u;
    *((_OWORD *)v8 + 1) = 0u;
    int v11 = *v7;
    int v12 = v7[1];
    int v13 = v7[2];
  }
  else
  {
    int v11 = *(_DWORD *)(v10 + 80);
    int v12 = *(_DWORD *)(v10 + 84);
    int v13 = *(_DWORD *)(v10 + 88);
    int v14 = *(_DWORD *)(v10 + 72);
    v7[2] = v13;
    v7[3] = 0;
    uint64_t v15 = *(void *)(v10 + 64);
    *uint64_t v7 = v11;
    v7[1] = v12;
    *((void *)v7 + 2) = v15;
    v7[6] = v14;
    v7[7] = 0;
  }
  *(_DWORD *)a2 = v11;
  *(_DWORD *)(a2 + 4) = v12;
  *(_DWORD *)(a2 + 8) = v13;
  *(_DWORD *)(a2 + 12) = 0;
  *(void *)(a2 + 16) = *((void *)v7 + 2);
  *(_DWORD *)(a2 + 24) = v7[6];
  *(_DWORD *)(a2 + 28) = 0;
  if (v5 >= 2)
  {
    uint64_t v16 = *(void *)(a2 + 352) + 96;
    uint64_t v17 = *(void *)(a2 + 456);
    uint64_t v18 = 1;
    uint64_t result = 80;
    do
    {
      uint64_t v20 = v3 + 40 * v18;
      uint64_t v21 = v4 + 160 * v18;
      *(_DWORD *)(v21 + 144) = *(_DWORD *)(*(void *)(v20 + 16) + 76);
      _S2 = *(_DWORD *)(v21 + 120);
      int v23 = (float32x2_t *)&v7[8 * *(unsigned int *)(v20 + 32)];
      float v24 = v23[1].f32[0];
      _D1 = *v23;
      v26.i32[1] = HIDWORD(*(void *)(v21 + 124));
      v26.i32[0] = _S2;
      v27.i32[1] = HIDWORD(*(unint64_t *)v23);
      v27.f32[0] = v24;
      float32x2_t v28 = (float32x2_t)vrev64_s32((int32x2_t)vmul_f32(v26, v27));
      float32x2_t v29 = (float32x2_t)vdup_lane_s32((int32x2_t)*v23, 0);
      v29.f32[0] = v24;
      __asm { FMLS            S3, S2, V1.S[1] }
      float32x2_t v35 = vadd_f32(v23[2], vmls_f32(v28, v29, *(float32x2_t *)(v21 + 124)));
      float v36 = _S3 + v23[3].f32[0];
      if (v9)
      {
        uint64_t v37 = v17 + 80 * v18;
        uint64_t v38 = *(unsigned __int8 *)(v37 + 76);
        if (*(unsigned char *)(v37 + 76))
        {
          float v39 = (float *)&v9[*(unsigned int *)(v37 + 72)];
          float32x2_t v40 = 0;
          float v41 = 0.0;
          float v42 = (float *)v16;
          float v43 = 0.0;
          float32x2_t v44 = 0;
          do
          {
            float v45 = *v39++;
            float v46 = v45;
            float32x2_t v47 = vmul_n_f32(*(float32x2_t *)(v42 - 5), v45);
            float v48 = v45 * *(v42 - 3);
            float32x2_t v49 = vmul_n_f32(*(float32x2_t *)(v42 - 2), v45);
            float v50 = *v42;
            v42 += 6;
            float32x2_t v40 = vadd_f32(v40, v47);
            float v41 = v41 + v48;
            float32x2_t v44 = vadd_f32(v44, v49);
            float v43 = v43 + (float)(v46 * v50);
            --v38;
          }
          while (v38);
        }
        else
        {
          float32x2_t v40 = 0;
          float v43 = 0.0;
          float v41 = 0.0;
          float32x2_t v44 = 0;
        }
        _D1 = vadd_f32(_D1, v40);
        float v24 = v24 + v41;
        float32x2_t v35 = vadd_f32(v35, v44);
        float v36 = v36 + v43;
      }
      float v51 = (float32x2_t *)&v7[8 * v18];
      *float v51 = _D1;
      v51[1].f32[0] = v24;
      v51[1].i32[1] = 0;
      v51[2] = v35;
      v51[3].f32[0] = v36;
      v51[3].i32[1] = 0;
      ++v18;
      v16 += 76;
    }
    while (v18 != v5);
  }
  return result;
}

float32_t physx::Dy::solveStaticConstraint(uint64_t a1, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4, int8x16_t *a5, int a6, int8x16_t a7, __n128 a8, int8x16_t a9, double a10, double a11, double a12, int16x8_t a13)
{
  int8x16_t v18 = *(int8x16_t *)a2->f32;
  int8x16_t v17 = *(int8x16_t *)a2[2].f32;
  v17.i64[1] = a2[3].u32[0];
  v18.i64[1] = a2[1].u32[0];
  int16x8_t v19 = 0uLL;
  float32x4_t v45 = 0u;
  float32x4_t v46 = 0u;
  float32x4_t v44 = 0u;
  __n128 v43 = 0u;
  if (a6)
  {
    v19.i16[0] = *(_WORD *)(a1 + 16);
    a13.i32[0] = -1;
    int8x16_t v20 = (int8x16_t)vdupq_lane_s16((int16x4_t)*(_OWORD *)&vceqq_s16(v19, a13), 0);
    int8x16_t v22 = *a5;
    int8x16_t v21 = a5[1];
    v21.i64[1] = a5[1].u32[2];
    v22.i64[1] = a5->u32[2];
    int8x16_t v23 = vbslq_s8(v20, (int8x16_t)xmmword_23435FBB0, a7);
    int8x16_t v24 = vbslq_s8(v20, a7, (int8x16_t)xmmword_23435FBB0);
    int8x16_t v48 = vbicq_s8(v18, v20);
    int8x16_t v49 = vandq_s8(v17, v20);
    int8x16_t v47 = vandq_s8(v18, v20);
    int8x16_t v39 = vandq_s8(v22, v20);
    int8x16_t v40 = vandq_s8(v21, v20);
    int32x4_t v37 = (int32x4_t)v24;
    int32x4_t v38 = (int32x4_t)v23;
    int8x16_t v41 = vbicq_s8(v22, v20);
    int8x16_t v42 = vbicq_s8(v21, v20);
    int8x16_t v50 = vbicq_s8(v17, v20);
    if (**(unsigned char **)(a1 + 32) == 3)
    {
      v24.i32[0] = a9.i32[0];
      physx::Dy::solveExtContactStep((char *)a1, (float32x4_t *)&v50, (float32x4_t *)&v49, (float32x4_t *)&v48, (float32x4_t *)&v47, (float32x4_t *)&v42, (float32x4_t *)&v40, (float32x4_t *)&v41, *(int32x2_t *)v24.i8, (int32x2_t)a8.n128_u64[0], (float32x4_t *)&v39, &v46, &v45, &v44, (float32x4_t *)&v43, 1);
    }
    else
    {
      v24.i32[0] = a8.n128_u32[0];
      physx::Dy::solveExt1D(a1, (float32x4_t *)&v50, (float32x4_t *)&v49, (float32x4_t *)&v48, (float32x4_t *)&v47, (float32x4_t *)&v42, (float32x4_t *)&v40, (float32x4_t *)&v41, *(int32x2_t *)v24.i8, (float32x4_t *)&v39, &v38, &v37, &v46, &v45, &v44, &v43);
    }
  }
  else
  {
    if (*(__int16 *)(a1 + 16) == -1)
    {
      int16x8_t v19 = (int16x8_t)v17;
      int8x16_t v25 = v18;
      int8x16_t v18 = 0uLL;
      int8x16_t v17 = 0uLL;
    }
    else
    {
      int8x16_t v25 = 0uLL;
    }
    int8x16_t v48 = v18;
    int8x16_t v49 = (int8x16_t)v19;
    int8x16_t v47 = v25;
    int8x16_t v50 = v17;
    if (**(unsigned char **)(a1 + 32) == 3) {
      physx::Dy::solveExtContact(a1, (float32x4_t *)&v50, (float32x4_t *)&v49, (float32x4_t *)&v48, (float32x4_t *)&v47, &v46, &v45, &v44, *(double *)v25.i64, a8, a9, v17, (float32x4_t *)&v43, 1);
    }
    else {
      physx::Dy::solveExt1D(a1, (float32x4_t *)&v50, (float32x4_t *)&v49, (float32x4_t *)&v48, (float32x4_t *)&v47, &v46, &v45, &v44, (float32x4_t *)&v43);
    }
  }
  float32x2_t v26 = &v46;
  if (*(unsigned __int16 *)(a1 + 16) == 0xFFFF) {
    float32x2_t v26 = &v45;
  }
  float32x4_t v27 = *v26;
  float32x2_t v28 = (__n128 *)&v44;
  if (*(unsigned __int16 *)(a1 + 16) == 0xFFFF) {
    float32x2_t v28 = &v43;
  }
  __n128 v29 = *v28;
  uint64_t v30 = &v48;
  if (*(unsigned __int16 *)(a1 + 16) == 0xFFFF) {
    uint64_t v30 = &v47;
  }
  int8x16_t v31 = *v30;
  uint64_t v32 = &v50;
  if (*(unsigned __int16 *)(a1 + 16) == 0xFFFF) {
    uint64_t v32 = &v49;
  }
  int8x16_t v33 = *v32;
  float v34 = *(float *)&v31.i32[2] - a2[1].f32[0];
  *a4 = vadd_f32(vsub_f32(*(float32x2_t *)v31.i8, *a2), *a4);
  a4[1].f32[0] = v34 + a4[1].f32[0];
  float v35 = *(float *)&v33.i32[2] - a2[3].f32[0];
  a4[2] = vadd_f32(vsub_f32(*(float32x2_t *)v33.i8, a2[2]), a4[2]);
  a4[3].f32[0] = v35 + a4[3].f32[0];
  a2[1].i32[0] = v31.i32[2];
  *a2 = *(float32x2_t *)v31.i8;
  a2[2] = *(float32x2_t *)v33.i8;
  a2[3].i32[0] = v33.i32[2];
  *a3 = vsub_f32(*a3, *(float32x2_t *)v27.f32);
  a3[1].f32[0] = a3[1].f32[0] - v27.f32[2];
  a3[2] = vsub_f32(a3[2], (float32x2_t)v29.n128_u64[0]);
  float32_t result = a3[3].f32[0] - v29.n128_f32[2];
  a3[3].f32[0] = result;
  return result;
}

uint64_t physx::Dy::FeatherstoneArticulation::writebackInternalConstraints(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 880))
  {
    uint64_t v3 = this;
    unint64_t v4 = 0;
    uint64_t v5 = 32;
    do
    {
      char v6 = (unsigned __int8 **)(*(void *)(v3 + 872) + v5);
      uint64_t v8 = *v6;
      uint64_t v7 = (uint64_t)(v6 - 4);
      int v9 = *v8;
      if (a2)
      {
        if (v9 == 3) {
          this = physx::Dy::writeBackContact(v7);
        }
        else {
          this = physx::Dy::writeBack1D(v7);
        }
      }
      else if (v9 == 3)
      {
        this = physx::Dy::writeBackContact(v7, (uint64_t)v11, (uint64_t)v10, (uint64_t)v10);
      }
      else
      {
        this = physx::Dy::writeBack1D(v7);
      }
      ++v4;
      v5 += 48;
    }
    while (v4 < *(unsigned int *)(v3 + 880));
  }
  return this;
}

float32x2_t physx::Dy::FeatherstoneArticulation::solveInternalConstraintRecursive(float32x2_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float32x2_t *a7, _DWORD *a8, float a9, float a10, float a11, unsigned int *a12)
{
  uint64_t v17 = a6;
  uint64_t v18 = a2[76] + 40 * a6;
  uint64_t v19 = a2[78];
  uint64_t v20 = a2[79];
  unsigned int v21 = *(_DWORD *)(v18 + 32);
  long long v258 = 0u;
  long long v259 = 0u;
  uint64_t v22 = a2[40];
  int8x16_t v23 = (float32x2_t *)(v22 + 32 * v21);
  float32x2_t v24 = *a7;
  float32x2_t v25 = *v23;
  float v26 = a7[1].f32[0];
  float v27 = v23[1].f32[0];
  float32x2_t v28 = a7[2];
  float32x2_t v29 = v23[2];
  float v30 = a7[3].f32[0];
  float v31 = v23[3].f32[0];
  uint64_t v212 = v19 + 160 * a6 + 120;
  physx::Dy::FeatherstoneArticulation::propagateVelocityTestImpulseW((float32x2_t *)&v254, v212, (float *)(a2[60] + 112 * a6), (float *)(a2[62] + 36 * a6), a2[66] + 76 * a6, (float *)(a2[46] + 32 * a6), a7);
  uint64_t v33 = v22 + 32 * v17;
  float v34 = *((float *)&v254 + 1);
  LODWORD(v35) = v254;
  float v36 = *(float *)(v33 + 4) + *((float *)&v254 + 1);
  LODWORD(v45) = *(_DWORD *)(v33 + 8);
  float v37 = *(float *)(v33 + 20);
  float v39 = v256.f32[1];
  float v38 = v256.f32[0];
  *(float *)&long long v43 = *(float *)(v33 + 16) + v256.f32[0];
  float v40 = *(float *)(v33 + 24);
  float v41 = *(float *)v33 + *(float *)&v254;
  *(float *)&unint64_t v247 = v41;
  *((float *)&v247 + 1) = v36;
  int v249 = 0;
  float v42 = *(float *)&v43;
  float v250 = *(float *)&v43;
  float v251 = v37 + v256.f32[1];
  int v253 = 0;
  unint64_t v243 = v254;
  *(void *)&long long v43 = v255;
  float v44 = *(float *)&v45 + *(float *)&v255;
  float v248 = *(float *)&v45 + *(float *)&v255;
  uint64_t v244 = v255;
  float32x2_t v245 = v256;
  *(void *)&long long v45 = v257;
  float v46 = v40 + *(float *)&v257;
  float v252 = v46;
  uint64_t v246 = v257;
  uint64_t v47 = v20 + 80 * a6;
  unsigned int v48 = *(unsigned __int8 *)(v47 + 78);
  int v49 = *(unsigned __int8 *)(v47 + 79);
  float v211 = a8;
  if (!(v48 | v49))
  {
    float32x2_t v220 = 0;
    float v217 = 0.0;
    float v225 = 0.0;
    float32x2_t v227 = 0;
    float v50 = a11;
    goto LABEL_70;
  }
  *(float *)&long long v32 = v26 + v27;
  float32x2_t v51 = vadd_f32(v24, v25);
  uint64_t v52 = v20 + 80 * v17;
  uint64_t v53 = *(unsigned __int8 *)(v52 + 76);
  float32x2_t v215 = (float32x2_t)v258;
  float v216 = *((float *)&v258 + 2);
  float v54 = *((float *)&v259 + 2);
  float v219 = *(float *)(*(void *)(v18 + 24) + 264);
  float v218 = -v219;
  if (*(unsigned char *)(v52 + 76))
  {
    uint64_t v55 = 0;
    uint64_t v56 = a2[32] + 4 * *(unsigned int *)(v52 + 72);
    float32x2_t v232 = vadd_f32(v28, v29);
    *((float *)&v32 + 1) = v30 + v31;
    long long v234 = v32;
    uint64_t v57 = *a8;
    float32x2_t v220 = 0;
    float v58 = 0.0;
    float v217 = 0.0;
    float32x2_t v59 = 0;
    float v50 = a11;
    float v60 = v37 + v256.f32[1];
    float v61 = v36;
    float v62 = v41;
    float v63 = v42;
    float v64 = v44;
    float32x2_t v65 = (float32x2_t)v259;
    long long v66 = v45;
    while (((v48 >> v55) & 1) == 0)
    {
      uint64_t v67 = v57;
LABEL_54:
      ++v55;
      uint64_t v57 = v67;
      if (v53 == v55)
      {
        v245.f32[1] = v39;
        LODWORD(v246) = v66;
        float v151 = *(float *)&v234;
        goto LABEL_57;
      }
    }
    float v224 = v54;
    uint64_t v67 = (v57 + 1);
    *a8 = v67;
    uint64_t v68 = a2[50];
    uint64_t v69 = v68 + 176 * v57;
    float v70 = *(float *)(v56 + 4 * v55);
    float v71 = *(float *)(v69 + 132);
    float v228 = v38;
    long long v226 = v43;
    float32x2_t v223 = v65;
    float v222 = v39;
    long long v221 = v66;
    if (*(unsigned char *)(v69 + 168)) {
      goto LABEL_7;
    }
    if (v70 <= 6.2832)
    {
      if (v70 >= -6.2832)
      {
LABEL_7:
        float v72 = v46;
        float v73 = v35;
        float v74 = v34;
        float32x2_t v75 = v59;
        float v76 = v58;
        goto LABEL_14;
      }
      float v72 = v46;
      float v73 = v35;
      float v74 = v34;
      float32x2_t v75 = v59;
      float v76 = v58;
      float v77 = 12.566;
    }
    else
    {
      float v72 = v46;
      float v73 = v35;
      float v74 = v34;
      float32x2_t v75 = v59;
      float v76 = v58;
      float v77 = -12.566;
    }
    float v70 = v70 + v77;
    float v71 = v71 + v77;
LABEL_14:
    uint64_t v78 = v68 + 176 * v57;
    float v80 = *(float *)(v78 + 152);
    uint64_t v79 = (float *)(v78 + 152);
    float v81 = v80;
    _S18 = *(v79 - 14);
    float v83 = *(v79 - 13);
    float v84 = *(v79 - 7);
    float v85 = *(v79 - 6);
    float v86 = v71 + (float)((float)(v84 * v83) * v50);
    float32x2_t v87 = *(float32x2_t *)(v79 - 29);
    float v88 = v61;
    float v89 = v62;
    float v90 = vmlas_n_f32(vmuls_lane_f32(v61, v87, 1), v62, v87.f32[0]);
    float v91 = *(v79 - 27);
    float v92 = v64;
    float32_t v93 = v90 + (float)(v91 * v64);
    float32x2_t v94 = *(float32x2_t *)(v79 - 32);
    float v95 = v60;
    float v96 = v63;
    float v97 = vmlas_n_f32(vmuls_lane_f32(v60, v94, 1), v63, v94.f32[0]);
    float v98 = *(v79 - 30);
    float32_t v99 = v97 + (float)(v98 * v72);
    float32x2_t v100 = *(float32x2_t *)(v69 + 12);
    float v101 = *(float *)(v69 + 20);
    float32x2_t v102 = *(float32x2_t *)v69;
    float v103 = *(float *)(v69 + 8);
    float32x2_t v104 = vmla_f32(vmla_f32(vmul_f32((float32x2_t)vzip2_s32((int32x2_t)v51, (int32x2_t)v232), (float32x2_t)vzip2_s32((int32x2_t)v100, *(int32x2_t *)v69)), (float32x2_t)vzip1_s32((int32x2_t)v51, (int32x2_t)v232), (float32x2_t)vzip1_s32((int32x2_t)v100, *(int32x2_t *)v69)), *(float32x2_t *)&v234, (float32x2_t)__PAIR64__(LODWORD(v103), LODWORD(v101)));
    float32x2_t v105 = (float32x2_t)vdup_lane_s32((int32x2_t)v104, 0);
    v105.f32[0] = v93;
    v104.f32[0] = v99;
    float32x2_t v106 = vadd_f32(v105, v104);
    LODWORD(_S1) = vsub_f32(v106, (float32x2_t)vdup_lane_s32((int32x2_t)v106, 1)).u32[0];
    float v108 = v79[2];
    float v109 = v79[1];
    float v110 = v108 * v79[3];
    __asm { FMLS            S27, S18, V1.S[0] }
    if (_S27 < (float)-v109) {
      _S27 = -v109;
    }
    float v116 = v86 - v70;
    if (v109 >= _S27) {
      float v109 = _S27;
    }
    float v117 = v109 - v110;
    v79[2] = v108 + (float)(v109 - v110);
    float v118 = _S1 + (float)((float)(v109 - v110) * v83);
    float v119 = *(v79 - 1);
    float v120 = (float)(v84 + (float)((float)(*(v79 - 4) * v118) + (float)(*(v79 - 2) * v81))) + (float)(v116 * v85);
    if (v120 < (float)-v119) {
      float v120 = -v119;
    }
    if (v119 >= v120) {
      float v121 = v120;
    }
    else {
      float v121 = *(v79 - 1);
    }
    float v122 = v121 - v81;
    float v123 = v118 + (float)(v122 * v83);
    if ((a4 & 1) == 0)
    {
      float v128 = v70 + (float)(v123 * a9);
      float v129 = *(float *)(v68 + 176 * v57 + 108);
      if (v70 > v129 || v128 > v129)
      {
        float v125 = (float *)(v68 + 176 * v57);
        float v138 = v125[29];
        float v137 = v125[30];
        if (v70 <= v129) {
          float v137 = 1.0;
        }
        float v139 = v123 + (float)((float)((float)(v129 - v128) * a10) * v137);
        if (v139 < v218) {
          float v139 = -v219;
        }
        if (v219 < v139) {
          float v139 = v219;
        }
        float v140 = fminf(v138 + (float)((float)(v139 - v123) * _S18), 0.0);
        float v124 = v140 - v138;
        float v136 = v138 + (float)(v140 - v138);
        goto LABEL_50;
      }
      float v130 = *(float *)(v68 + 176 * v57 + 104);
      if (v70 < v130 || v128 < v130)
      {
        float v125 = (float *)(v68 + 176 * v57);
        float v131 = v125[30];
        if (v70 >= v130) {
          float v131 = 1.0;
        }
        float v132 = v123 + (float)((float)((float)(v130 - v128) * a10) * v131);
        if (v132 < v218) {
          float v132 = -v219;
        }
        if (v219 < v132) {
          float v132 = v219;
        }
        float v133 = v125[28];
        float v134 = fmaxf(v133 + (float)((float)(v132 - v123) * _S18), 0.0);
        float v124 = v134 - v133;
        float v127 = v133 + (float)(v134 - v133);
        goto LABEL_39;
      }
    }
    float v124 = -(float)(v123 * _S18);
    float v125 = (float *)(v68 + 176 * v57);
    if (v123 > 0.0)
    {
      float v126 = v125[28];
      if (v124 <= (float)-v126) {
        float v124 = -v126;
      }
      float v127 = v126 + v124;
LABEL_39:
      v125[28] = v127;
      goto LABEL_51;
    }
    float v135 = v125[29];
    if (v124 >= (float)-v135) {
      float v124 = -v135;
    }
    float v136 = v135 + v124;
LABEL_50:
    v125[29] = v136;
LABEL_51:
    float v50 = a11;
    float32x2_t v59 = v75;
    float v34 = v74;
    float v54 = v224;
    float32x2_t v65 = v223;
    float v141 = (float)(v117 + v122) + v124;
    if (v141 == 0.0)
    {
      float v58 = v76;
      float v35 = v73;
      float v38 = v228;
      float v60 = v95;
      float v61 = v88;
      float v62 = v89;
      float v63 = v96;
      long long v43 = v226;
      float v64 = v92;
      float v46 = v72;
      float v39 = v222;
      long long v66 = v221;
    }
    else
    {
      *uint64_t v79 = v121;
      float32x2_t v220 = vadd_f32(v220, vmul_n_f32(v102, v141));
      float32x2_t v59 = vadd_f32(v59, vmul_n_f32(v100, v141));
      float v58 = v76 + (float)(v101 * v141);
      float32x2_t v215 = vsub_f32(v215, vmul_n_f32(v94, v141));
      float v216 = v216 - (float)(v98 * v141);
      float v217 = v217 + (float)(v103 * v141);
      float32x2_t v65 = vsub_f32(v223, vmul_n_f32(v87, v141));
      float v54 = v224 - (float)(v91 * v141);
      uint64_t v142 = v68 + 176 * v57;
      v143.i32[0] = *(_DWORD *)(v142 + 56);
      float v144 = -(float)(v141 * *(float *)(v142 + 72));
      float v145 = -(float)(v141 * *(float *)(v142 + 76));
      float v146 = -(float)(v141 * *(float *)(v142 + 80));
      float v147 = -(float)(v141 * *(float *)(v142 + 84));
      float32x2_t v51 = vsub_f32(v51, vmul_n_f32(*(float32x2_t *)(v142 + 48), v141));
      float32x2_t v232 = vsub_f32(v232, vmul_n_f32(*(float32x2_t *)(v142 + 60), v141));
      float v148 = -(float)(v141 * *(float *)(v142 + 88));
      float v149 = -(float)(v141 * *(float *)(v142 + 92));
      v143.i32[1] = *(_DWORD *)(v142 + 68);
      *((void *)&v150 + 1) = *((void *)&v234 + 1);
      *(float32x2_t *)&long long v150 = vsub_f32(*(float32x2_t *)&v234, vmul_n_f32(v143, v141));
      long long v234 = v150;
      float v62 = v89 + v144;
      float v35 = v73 + v144;
      float v61 = v88 + v145;
      float v34 = v34 + v145;
      float v64 = v92 + v146;
      long long v43 = v226;
      *(float *)&long long v43 = *(float *)&v226 + v146;
      float v63 = v96 + v147;
      float v38 = v228 + v147;
      float v60 = v95 + v148;
      float v39 = v222 + v148;
      float v46 = v72 + v149;
      long long v66 = v221;
      *(float *)&long long v66 = *(float *)&v221 + v149;
    }
    goto LABEL_54;
  }
  float32x2_t v220 = 0;
  float v217 = 0.0;
  float v58 = 0.0;
  float32x2_t v59 = 0;
  float v50 = a11;
  float v60 = v37 + v256.f32[1];
  float v61 = v36;
  float v62 = v41;
  float v63 = v42;
  float v64 = v44;
  float32x2_t v65 = (float32x2_t)v259;
  LODWORD(v66) = v257;
  float v151 = *(float *)&v32;
LABEL_57:
  *(float32x2_t *)&long long v258 = v215;
  *((float *)&v258 + 2) = v216;
  if ((int)v53 - v49 < v53)
  {
    uint64_t v152 = a2[52];
    unsigned int v153 = *a12;
    do
    {
      unsigned int v154 = v153 + 1;
      *a12 = v153 + 1;
      unsigned int v155 = v153;
      float v156 = (float32x2_t *)(v152 + 80 * v153);
      float32x2_t v157 = v156[6];
      float v158 = v156[7].f32[0];
      float v159 = (float)(vmlas_n_f32(vmuls_lane_f32(v61, v157, 1), v62, v157.f32[0]) + (float)(v158 * v64))
           - (float)(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v51, v157).i32[1]), v51.f32[0], v157.f32[0])
                   + (float)(v158 * v151));
      float v160 = -v159;
      if ((a4 & 1) == 0)
      {
        uint64_t v161 = a2[54];
        uint64_t v162 = (float *)(v161 + 32 * *(unsigned int *)(v18 + 32));
        float v160 = (float)((float)(*(float *)(v152 + 80 * v155 + 64)
                             - (float)((float)((float)((float)(v157.f32[1] * *(float *)(v161 + 32 * v17 + 4))
                                                     + (float)(v157.f32[0] * *(float *)(v161 + 32 * v17)))
                                             + (float)(v158 * *(float *)(v161 + 32 * v17 + 8)))
                                     - (float)((float)((float)(v157.f32[1] * v162[1]) + (float)(v157.f32[0] * *v162))
                                             + (float)(v158 * v162[2]))))
                     * *(float *)(v152 + 80 * v155 + 68))
             - v159;
      }
      float v163 = v159 + v160;
      if ((float)(v159 + v160) < v218) {
        float v163 = -v219;
      }
      if (v219 < v163) {
        float v163 = v219;
      }
      float v164 = *(float *)(v152 + 80 * v155 + 60) * (float)(v163 - v159);
      if (v164 != 0.0)
      {
        float32x2_t v165 = vmul_n_f32(v157, v164);
        float32x2_t v59 = vadd_f32(v59, v165);
        float v58 = v58 + (float)(v158 * v164);
        float32x2_t v65 = vsub_f32(v65, v165);
        float v54 = v54 - (float)(v158 * v164);
        float v166 = (float *)(v152 + 80 * v155);
        float32x2_t v51 = vsub_f32(v51, vmul_n_f32(*v156, v164));
        float v151 = v151 - (float)(v164 * v156[1].f32[0]);
        float v62 = v62 - (float)(v164 * v166[6]);
        float v61 = v61 - (float)(v164 * v166[7]);
        float v64 = v64 - (float)(v164 * v166[8]);
        float v63 = v63 - (float)(v164 * v166[9]);
        float v60 = v60 - (float)(v164 * v166[10]);
        float v46 = v46 - (float)(v164 * v166[11]);
        float v35 = v35 - (float)(v164 * v166[6]);
        float v34 = v34 - (float)(v164 * v166[7]);
        *(float *)&long long v43 = *(float *)&v43 - (float)(v164 * v166[8]);
        float v38 = v38 - (float)(v164 * v166[9]);
        float v39 = v39 - (float)(v164 * v166[10]);
        *(float *)&long long v66 = *(float *)&v66 - (float)(v164 * v166[11]);
      }
      unsigned int v153 = v154;
      --v49;
    }
    while (v49);
    v245.f32[1] = v39;
    LODWORD(v246) = v66;
  }
  float32x2_t v227 = v59;
  float v225 = v58;
  unint64_t v247 = __PAIR64__(LODWORD(v61), LODWORD(v62));
  *(float32x2_t *)&long long v259 = v65;
  *((float *)&v259 + 2) = v54;
  float v248 = v64;
  float v250 = v63;
  float v251 = v60;
  float v252 = v46;
  unint64_t v243 = __PAIR64__(LODWORD(v34), LODWORD(v35));
  LODWORD(v244) = v43;
  v245.f32[0] = v38;
LABEL_70:
  int v167 = *(_DWORD *)(a2[70] + 4 * v17);
  uint64_t v168 = a2[54];
  uint64_t v169 = (*(uint64_t (**)(void *, uint64_t))(*a2 + 336))(a2, a6);
  if (v167)
  {
    float v176 = (int8x16_t *)v169;
    unsigned int v177 = *(_DWORD *)(a2[72] + 4 * v17);
    v170.n128_u32[1] = 0;
    if (a4) {
      float v178 = 0.0;
    }
    else {
      float v178 = -3.4028e38;
    }
    do
    {
      unsigned int v179 = v177 + 1;
      v170.n128_f32[0] = v50;
      *(float *)v171.i32 = v178;
      physx::Dy::solveStaticConstraint(a2[109] + 48 * v177, (float32x2_t *)&v247, (float32x2_t *)&v258, (float32x2_t *)&v243, (int8x16_t *)(v168 + 32 * v17), a5, *v176, v170, v171, v172, v173, v174, v175);
      unsigned int v177 = v179;
      --v167;
    }
    while (v167);
  }
  uint64_t v180 = *(void *)v18;
  float v182 = *((float *)&v258 + 1);
  LODWORD(v181) = v258;
  float v183 = *((float *)&v258 + 2);
  float v185 = *((float *)&v259 + 1);
  LODWORD(v184) = v259;
  float v186 = *((float *)&v259 + 2);
  if (*(void *)v18)
  {
    float32x2_t v235 = (float32x2_t)v243;
    float v233 = *(float *)&v244;
    float32x2_t v187 = v245;
    float v188 = *(float *)&v246;
    uint64_t v190 = a3;
    float v189 = a1;
    while (1)
    {
      unsigned int v191 = __clz(__rbit32(v180));
      unsigned int v192 = __clz(__rbit32(HIDWORD(v180))) + 32;
      uint64_t v193 = v180 ? v191 : v192;
      physx::Dy::FeatherstoneArticulation::solveInternalConstraintRecursive(&v239, a2, a3, a4, a5, v193, &v243, v211, a9, a10, a11, a12);
      *(float32x2_t *)v200.f32 = v239;
      float v181 = v181 + v239.f32[0];
      float v182 = v182 + v239.f32[1];
      float v183 = v183 + v240;
      *(float32x2_t *)v201.f32 = v241;
      float v184 = v184 + v241.f32[0];
      float v185 = v185 + v241.f32[1];
      float v186 = v186 + v242;
      v180 &= v180 - 1;
      if (!v180) {
        break;
      }
      v195.f32[0] = -v240;
      v202.i64[0] = vnegq_f32(v200).u64[0];
      v202.f32[2] = -v240;
      v202.i32[3] = 0;
      v194.f32[0] = -v242;
      v203.i64[0] = vnegq_f32(v201).u64[0];
      v203.f32[2] = -v242;
      v203.i32[3] = 0;
      physx::Dy::SpatialImpulseResponseMatrix::getResponse(&v236, a2[58] + 192 * v17, v202, v203, v194, v195, v196, v197, v198, v199);
      float32x2_t v235 = vadd_f32(v235, *(float32x2_t *)v236.f32);
      unint64_t v243 = (unint64_t)v235;
      float v233 = v233 + v236.f32[2];
      *(float *)&uint64_t v244 = v233;
      float32x2_t v187 = vadd_f32(v187, v237);
      float32x2_t v245 = v187;
      float v188 = v188 + v238;
      *(float *)&uint64_t v246 = v188;
    }
    *(void *)&long long v258 = __PAIR64__(LODWORD(v182), LODWORD(v181));
    *((float *)&v258 + 2) = v183;
    *(void *)&long long v259 = __PAIR64__(LODWORD(v185), LODWORD(v184));
    *((float *)&v259 + 2) = v186;
    float32x2_t v220 = vadd_f32(v220, 0);
    float v204 = v217 + 0.0;
    float32x2_t v227 = vadd_f32(v227, 0);
    float v205 = v225 + 0.0;
    float v206 = (float32x2_t *)v212;
  }
  else
  {
    uint64_t v190 = a3;
    float v189 = a1;
    float v206 = (float32x2_t *)v212;
    float v204 = v217;
    float v205 = v225;
  }
  uint64_t v207 = v190 + 32 * v17;
  *(float *)uint64_t v207 = v181;
  *(float *)(v207 + 4) = v182;
  *(float *)(v207 + 8) = v183;
  *(_DWORD *)(v207 + 12) = 0;
  *(float *)(v207 + 16) = v184;
  *(float *)(v207 + 20) = v185;
  *(float *)(v207 + 24) = v186;
  *(_DWORD *)(v207 + 28) = 0;
  physx::Dy::FeatherstoneArticulation::propagateImpulseW(a2[68] + 96 * v17, v206, a2[66] + 76 * v17, (uint64_t)&v258, (uint64_t)&v239);
  float32_t v208 = v204 + v240;
  float32_t v209 = v205 + v242;
  *float v189 = vadd_f32(v220, v239);
  v189[1].f32[0] = v208;
  v189[1].i32[1] = 0;
  float32x2_t result = vadd_f32(v227, v241);
  v189[2] = result;
  v189[3].f32[0] = v209;
  v189[3].i32[1] = 0;
  return result;
}

void physx::Dy::FeatherstoneArticulation::solveInternalConstraints(uint64_t a1, uint64_t a2, float a3, float a4, float a5, double _D3, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = a8;
  uint64_t v15 = *(unsigned int *)(a1 + 616);
  if (*(_DWORD *)(a1 + 408) || *(_DWORD *)(a1 + 424) || *(_DWORD *)(a1 + 880))
  {
    uint64_t v16 = (float32x2_t *)(a1 + 732);
    char v17 = **(unsigned char **)(a1 + 664);
    uint64_t v18 = *(int **)(a1 + 560);
    uint64_t v19 = *(unsigned int **)(a1 + 576);
    uint64_t v20 = *(void **)(a1 + 608);
    unsigned int v21 = *(float32x2_t **)(a1 + 320);
    uint64_t v22 = *(float32x2_t **)(a1 + 368);
    float v23 = 0.0;
    if (a8) {
      float v24 = 0.0;
    }
    else {
      float v24 = -3.4028e38;
    }
    long long v110 = 0u;
    long long v111 = 0u;
    float32x2_t v25 = 0;
    float v26 = 0.0;
    float v27 = 0.0;
    float32x2_t v28 = 0;
    float32x2_t v29 = 0;
    char v99 = v17;
    if ((v17 & 1) == 0)
    {
      float v30 = v22->f32[1];
      float v31 = -v30;
      float v32 = v22[1].f32[0];
      LODWORD(_D3) = v22[2].i32[0];
      float v33 = v22[2].f32[1];
      float v34 = -v33;
      v29.i32[0] = v22[3].i32[0];
      v35.i32[0] = *(_DWORD *)(a1 + 740);
      float v36 = *(float *)(a1 + 764);
      float v37 = (float)((float)-(float)(v33 * *(float *)(a1 + 788)) - (float)(*(float *)&_D3 * *(float *)(a1 + 776)))
          - (float)(v29.f32[0] * *(float *)(a1 + 800));
      float32x2_t v38 = *(float32x2_t *)(a1 + 744);
      _D24 = *(float32x2_t *)(a1 + 756);
      float32x2_t v28 = vadd_f32(vsub_f32(vsub_f32(vmul_n_f32(v38, -v30), vmul_n_f32(*v16, v22->f32[0])), vmul_n_f32(_D24, v32)), vsub_f32(vsub_f32(vmul_n_f32(*(float32x2_t *)(a1 + 780), -v33), vmul_n_f32(*(float32x2_t *)(a1 + 768), *(float *)&_D3)), vmul_n_f32(*(float32x2_t *)(a1 + 792), v29.f32[0])));
      float v27 = (float)((float)((float)-(float)(v30 * *(float *)(a1 + 752)) - (float)(v22->f32[0] * v35.f32[0]))
                  - (float)(v32 * v36))
          + v37;
      float v40 = (float)((float)-(float)(v30 * *(float *)(a1 + 824)) - (float)(v22->f32[0] * *(float *)(a1 + 812)))
          - (float)(v32 * *(float *)(a1 + 836));
      __asm { FMLS            S21, S3, V24.S[0] }
      float v46 = _S21 - (float)(v36 * v29.f32[0]);
      v35.i32[1] = *(_DWORD *)(a1 + 752);
      float32x2_t v29 = vadd_f32(vmls_lane_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip2_s32((int32x2_t)*v16, (int32x2_t)v38), v34), (float32x2_t)vzip1_s32((int32x2_t)*v16, (int32x2_t)v38), *(float32x2_t *)&_D3, 0), v35, v29, 0), vsub_f32(vsub_f32(vmul_n_f32(*(float32x2_t *)(a1 + 816), v31), vmul_n_f32(*(float32x2_t *)(a1 + 804), v22->f32[0])), vmul_n_f32(*(float32x2_t *)(a1 + 828), v32)));
      *(float32x2_t *)&long long v110 = v28;
      *((float *)&v110 + 2) = v27;
      float v26 = v46 + v40;
      *(float32x2_t *)&long long v111 = v29;
      *((float *)&v111 + 2) = v46 + v40;
    }
    float v47 = v27 + v21[1].f32[0];
    float v48 = v26 + v21[3].f32[0];
    float32x2_t v112 = vadd_f32(v28, *v21);
    float v113 = v47;
    int v114 = 0;
    float32x2_t v115 = vadd_f32(v29, v21[2]);
    float v116 = v48;
    int v117 = 0;
    long long v108 = 0uLL;
    long long v109 = 0uLL;
    int v49 = *v18;
    float v50 = 0.0;
    float32x2_t v51 = 0;
    if (*v18)
    {
      float v97 = v20;
      float v98 = v22;
      unsigned int v100 = a8;
      uint64_t v52 = *(int8x16_t **)(a1 + 432);
      uint64_t v53 = v19;
      float v54 = (int8x16_t *)(*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 336))(a1, 0);
      unsigned int v61 = *v53;
      do
      {
        unsigned int v62 = v61 + 1;
        v55.n128_f32[0] = a5;
        *(float *)v56.i32 = v24;
        physx::Dy::solveStaticConstraint(*(void *)(a1 + 872) + 48 * v61, &v112, (float32x2_t *)&v108, (float32x2_t *)&v110, v52, a9, *v54, v55, v56, v57, v58, v59, v60);
        unsigned int v61 = v62;
        --v49;
      }
      while (v49);
      float32x2_t v25 = (float32x2_t)v108;
      float v50 = *((float *)&v108 + 2);
      float32x2_t v51 = (float32x2_t)v109;
      float v23 = *((float *)&v109 + 2);
      uint64_t v11 = v100;
      uint64_t v20 = v97;
      uint64_t v22 = v98;
    }
    uint64_t v107 = 0;
    uint64_t v63 = *v20;
    if (*v20)
    {
      float v64 = *((float *)&v111 + 2);
      float v65 = *(float *)&v110;
      *(int32x2_t *)v66.f32 = vrev64_s32(*(int32x2_t *)&v111);
      *(int32x2_t *)&v66.u32[2] = vrev64_s32(*(int32x2_t *)((char *)&v110 + 4));
      float32x4_t v101 = v66;
      do
      {
        unsigned int v67 = __clz(__rbit32(v63));
        unsigned int v68 = __clz(__rbit32(HIDWORD(v63))) + 32;
        if (v63) {
          uint64_t v69 = v67;
        }
        else {
          uint64_t v69 = v68;
        }
        v63 &= v63 - 1;
        physx::Dy::FeatherstoneArticulation::solveInternalConstraintRecursive(&v103, (void *)a1, a2, v11, a9, v69, (float32x2_t *)&v110, (_DWORD *)&v107 + 1, a3, a4, a5, (unsigned int *)&v107);
        _S1 = v105.i32[0];
        _S0 = v106;
        if ((v99 & 1) == 0 && v63)
        {
          _S18 = *(float *)(a1 + 732);
          _D5 = *(int32x2_t *)(a1 + 736);
          _S19 = *(float *)(a1 + 744);
          _D20 = *(int32x2_t *)(a1 + 748);
          _S22 = *(float *)(a1 + 756);
          _D6 = *(int32x2_t *)(a1 + 760);
          int32x2_t v78 = *(int32x2_t *)(a1 + 804);
          int32x2_t v79 = (int32x2_t)vsub_f32(vsub_f32(vmul_n_f32(*(float32x2_t *)(a1 + 784), -v105.f32[1]), vmul_n_f32(*(float32x2_t *)(a1 + 772), v105.f32[0])), vmul_n_f32(*(float32x2_t *)(a1 + 796), v106));
          float v80 = (float)((float)((float)-(float)(v103.f32[1] * _S19) - (float)(_S18 * v103.f32[0])) - (float)(v104 * _S22))
              + (float)((float)((float)-(float)(v105.f32[1] * *(float *)(a1 + 780))
                              - (float)(*(float *)(a1 + 768) * v105.f32[0]))
                      - (float)(v106 * *(float *)(a1 + 792)));
          int32x2_t v81 = *(int32x2_t *)(a1 + 816);
          int32x2_t v82 = *(int32x2_t *)(a1 + 828);
          __asm
          {
            FMLS            S26, S18, V1.S[0]
            FMLS            S26, S0, V5.S[1]
            FMLS            S18, S19, V1.S[0]
            FMLS            S18, S0, V20.S[1]
            FMLS            S17, S22, V1.S[0]
            FMLS            S17, S0, V6.S[1]
          }
          float v89 = _S17
              + (float)((float)((float)-(float)(v103.f32[1] * *(float *)(a1 + 824))
                              - (float)(*(float *)(a1 + 812) * v103.f32[0]))
                      - (float)(v104 * *(float *)(a1 + 836)));
          float v65 = v65 + v80;
          *(float *)&long long v110 = v65;
          *(int32x2_t *)v90.f32 = vrev64_s32(v81);
          *(int32x2_t *)&v90.u32[2] = vrev64_s32(_D20);
          *(int32x2_t *)v91.f32 = vrev64_s32(v78);
          *(int32x2_t *)&v91.u32[2] = vrev64_s32(_D5);
          int32x2_t v92 = vrev64_s32(_D6);
          *(int32x2_t *)v93.f32 = vrev64_s32(v82);
          *(int32x2_t *)&v93.u32[2] = v92;
          _Q18.i32[1] = _S26;
          *(int32x2_t *)&_Q18.u32[2] = vrev64_s32(v79);
          int8x16_t v94 = (int8x16_t)vaddq_f32(v101, vaddq_f32(_Q18, vsubq_f32(vsubq_f32(vmulq_n_f32(v90, -v103.f32[1]), vmulq_n_f32(v91, v103.f32[0])), vmulq_n_f32(v93, v104))));
          *(int32x2_t *)((char *)&v110 + 4) = vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v94, v94, 8uLL));
          float32x4_t v101 = (float32x4_t)v94;
          *(int32x2_t *)&long long v111 = vrev64_s32(*(int32x2_t *)v94.i8);
          float v64 = v64 + v89;
          *((float *)&v111 + 2) = v64;
        }
        float32x2_t v25 = vadd_f32(v25, v103);
        float v50 = v50 + v104;
        float32x2_t v51 = vadd_f32(v51, v105);
        float v23 = v23 + v106;
      }
      while (v63);
    }
    *(float32x2_t *)a2 = v25;
    *(float *)(a2 + 8) = v50;
    *(float32x2_t *)(a2 + 16) = v51;
    *(float *)(a2 + 24) = v23;
    if (v15)
    {
      float v95 = v22 + 2;
      float v96 = (float32x2_t *)(a2 + 16);
      do
      {
        v95[-2] = vadd_f32(v96[-2], v95[-2]);
        v95[-1].f32[0] = v96[-1].f32[0] + v95[-1].f32[0];
        *float v95 = vadd_f32(*v96, *v95);
        v95[1].f32[0] = v96[1].f32[0] + v95[1].f32[0];
        v95 += 4;
        v96 += 4;
        --v15;
      }
      while (v15);
    }
    *(unsigned char *)(a1 + 685) = 1;
  }
}

void physx::Dy::FeatherstoneArticulation::teleportRootLink(physx::Dy::FeatherstoneArticulation *this)
{
  physx::Dy::FeatherstoneArticulation::jcalc(this, (physx::Dy::FeatherstoneArticulation *)((char *)this + 176), 0);
  unsigned int v5 = *((_DWORD *)this + 154);
  if (v5 >= 2)
  {
    uint64_t v6 = *((void *)this + 76);
    uint64_t v128 = *((void *)this + 32);
    uint64_t v7 = 76;
    uint64_t v8 = 76 * v5;
    int v9 = (unsigned int *)(v6 + 72);
    uint64_t v10 = (float *)(*((void *)this + 40) + 40);
    uint64_t v11 = (unsigned int *)(*((void *)this + 79) + 152);
    int v12 = (float *)(*((void *)this + 74) + 28);
    float v13 = -0.5;
    do
    {
      int v14 = *(float **)(v6 + 40 * *v9 + 16);
      float v16 = *v14;
      float v15 = v14[1];
      float v17 = v14[2];
      float v18 = v14[3];
      float v19 = v14[4];
      float v20 = v14[5];
      float v21 = v14[6];
      float v23 = (float *)*((void *)v9 - 2);
      uint64_t v22 = *((void *)v9 - 1);
      unsigned int v25 = *v11;
      v11 += 20;
      uint64_t v24 = v25;
      float v27 = *(float *)(v22 + 44);
      float v26 = *(float *)(v22 + 48);
      float v28 = *(float *)(v22 + 52);
      float v30 = *(float *)(v22 + 16);
      float v29 = *(float *)(v22 + 20);
      float v31 = *(float *)(v22 + 24);
      float v33 = *(v12 - 3);
      float v32 = *(v12 - 2);
      float v34 = *(v12 - 1);
      float v35 = *v12;
      switch(*(unsigned char *)(v22 + 270))
      {
        case 0:
          float v36 = v30 + v30;
          float v37 = v29 + v29;
          float v38 = v31 + v31;
          float v39 = v13 + (float)(v35 * v35);
          float v40 = (float)((float)((float)(v29 + v29) * v32) + (float)(v33 * (float)(v30 + v30)))
              + (float)(v34 * (float)(v31 + v31));
          float v41 = -v34;
          float v42 = (float)((float)(v35 * (float)((float)(v32 * v38) - (float)(v34 * (float)(v29 + v29))))
                      + (float)((float)(v30 + v30) * v39))
              + (float)(v33 * v40);
          float v43 = -v33;
          float v44 = (float)((float)((float)((float)(v34 * (float)(v30 + v30)) - (float)(v33 * v38)) * v35)
                      + (float)(v37 * v39))
              + (float)(v32 * v40);
          float v45 = -v32;
          float v46 = (float)((float)((float)((float)(v33 * v37) - (float)(v32 * v36)) * v35) + (float)(v38 * v39))
              + (float)(v34 * v40);
          float v47 = (float *)(*((void *)this + 64) + v7);
          float v48 = v42 - v27;
          float v49 = v44 - v26;
          float v50 = v46 - v28;
          float v51 = *(float *)(v128 + 4 * v24);
          float v52 = v51 * v47[4];
          float v53 = v51 * v47[5];
          float v2 = v48 + (float)(v51 * v47[3]);
          float v3 = v49 + v52;
          float v4 = v50 + v53;
          break;
        case 1:
          float v54 = (float *)(*((void *)this + 64) + v7);
          float v55 = v19;
          float v143 = v16;
          float v145 = v20;
          float v139 = *(float *)(v22 + 52);
          float v141 = v15;
          float v135 = *(float *)(v22 + 44);
          float v137 = *(float *)(v22 + 48);
          float v131 = *(float *)(v22 + 20);
          float v133 = *(float *)(v22 + 24);
          float v129 = *(float *)(v22 + 16);
          __float2 v57 = __sincosf_stret(*(float *)(v128 + 4 * v24) * v13);
          float cosval = v57.__cosval;
          float v15 = v141;
          float v16 = v143;
          float v20 = v145;
          float v19 = v55;
          float v13 = -0.5;
          float v58 = *v54 * v57.__sinval;
          float v59 = v57.__sinval * v54[1];
          float v60 = v57.__sinval * v54[2];
          if (v57.__cosval < 0.0)
          {
            float v58 = -v58;
            float v59 = -v59;
            float v60 = -v60;
            float cosval = -v57.__cosval;
          }
          float v61 = (float)((float)((float)(v35 * v58) + (float)(cosval * v33)) + (float)(v59 * v34)) - (float)(v32 * v60);
          float v62 = (float)((float)((float)(v35 * v59) + (float)(cosval * v32)) + (float)(v60 * v33)) - (float)(v34 * v58);
          float v63 = (float)((float)((float)(v35 * v60) + (float)(cosval * v34)) + (float)(v58 * v32)) - (float)(v33 * v59);
          float v64 = (float)((float)((float)(cosval * v35) - (float)(v58 * v33)) - (float)(v59 * v32)) - (float)(v60 * v34);
          float v65 = sqrtf((float)((float)((float)(v62 * v62) + (float)(v61 * v61)) + (float)(v63 * v63)) + (float)(v64 * v64));
          float v33 = v61 / v65;
          float v32 = v62 / v65;
          float v34 = v63 / v65;
          float v35 = v64 / v65;
          float v66 = (float)(v35 * v35) + -0.5;
          float v67 = (float)((float)((float)(v131 + v131) * (float)(v62 / v65))
                      + (float)((float)(v61 / v65) * (float)(v129 + v129)))
              + (float)(v34 * (float)(v133 + v133));
          float v41 = -v34;
          float v68 = (float)((float)((float)(v64 / v65)
                              * (float)((float)((float)(v62 / v65) * (float)(v133 + v133))
                                      - (float)(v34 * (float)(v131 + v131))))
                      + (float)((float)(v129 + v129) * v66))
              + (float)((float)(v61 / v65) * v67);
          float v43 = -(float)(v61 / v65);
          float v69 = (float)((float)((float)(v64 / v65)
                              * (float)((float)(v34 * (float)(v129 + v129)) - (float)(v33 * (float)(v133 + v133))))
                      + (float)((float)(v131 + v131) * v66))
              + (float)((float)(v62 / v65) * v67);
          float v45 = -(float)(v62 / v65);
          float v70 = (float)((float)((float)(v64 / v65)
                              * (float)((float)(v33 * (float)(v131 + v131)) - (float)(v32 * (float)(v129 + v129))))
                      + (float)((float)(v133 + v133) * v66))
              + (float)(v34 * v67);
          float v2 = v68 - v135;
          float v3 = v69 - v137;
          float v4 = v70 - v139;
          break;
        case 2:
          float v72 = *v23;
          float v71 = v23[1];
          float v74 = v23[2];
          float v73 = v23[3];
          float v75 = *(v10 - 2);
          float v76 = *(v10 - 1);
          float v77 = *v10;
          float v78 = (float)((float)(v76 * v76) + (float)(v75 * v75)) + (float)(v77 * v77);
          if (v78 >= 1.0e-24)
          {
            float v91 = sqrtf(v78);
            float v122 = v76 * (float)(1.0 / v91);
            float v123 = v75 * (float)(1.0 / v91);
            float v121 = v77 * (float)(1.0 / v91);
            float v124 = v23[3];
            float v125 = *v23;
            float v92 = v19;
            float v144 = v16;
            float v146 = v20;
            float v140 = *(float *)(v22 + 52);
            float v142 = v15;
            float v136 = *(float *)(v22 + 44);
            float v138 = *(float *)(v22 + 48);
            float v132 = *(float *)(v22 + 20);
            float v134 = *(float *)(v22 + 24);
            float v130 = *(float *)(v22 + 16);
            float v126 = v23[2];
            float v127 = v23[1];
            __float2 v93 = __sincosf_stret(v91 * 0.5);
            float v79 = v93.__cosval;
            float v72 = v125;
            float v74 = v126;
            float v71 = v127;
            float v30 = v130;
            float v29 = v132;
            float v31 = v134;
            float v27 = v136;
            float v26 = v138;
            float v28 = v140;
            float v15 = v142;
            float v16 = v144;
            float v20 = v146;
            float v19 = v92;
            float v73 = v124;
            float v13 = -0.5;
            float v80 = v93.__sinval * v123;
            float v81 = v93.__sinval * v122;
            float v82 = v93.__sinval * v121;
          }
          else
          {
            float v79 = 1.0;
            float v80 = 0.0;
            float v81 = 0.0;
            float v82 = 0.0;
          }
          float v94 = (float)((float)((float)(v73 * v80) + (float)(v79 * v72)) + (float)(v81 * v74)) - (float)(v71 * v82);
          float v95 = (float)((float)((float)(v73 * v81) + (float)(v79 * v71)) + (float)(v82 * v72)) - (float)(v74 * v80);
          float v96 = (float)((float)((float)(v73 * v82) + (float)(v79 * v74)) + (float)(v80 * v71)) - (float)(v72 * v81);
          float v97 = (float)((float)((float)(v79 * v73) - (float)(v80 * v72)) - (float)(v81 * v71)) - (float)(v82 * v74);
          float v98 = (float)((float)((float)(v97 * v33) - (float)(v94 * v35)) - (float)(v95 * v34)) + (float)(v32 * v96);
          float v99 = (float)((float)((float)(v97 * v32) - (float)(v95 * v35)) - (float)(v96 * v33)) + (float)(v34 * v94);
          float v100 = (float)((float)((float)(v97 * v34) - (float)(v96 * v35)) - (float)(v94 * v32)) + (float)(v33 * v95);
          float v101 = (float)((float)((float)(v33 * v94) + (float)(v97 * v35)) + (float)(v95 * v32)) + (float)(v96 * v34);
          float v102 = (float)((float)((float)(v18 * v98) + (float)(v101 * v16)) + (float)(v99 * v17)) - (float)(v15 * v100);
          float v103 = (float)((float)((float)(v18 * v99) + (float)(v101 * v15)) + (float)(v100 * v16)) - (float)(v17 * v98);
          float v104 = (float)((float)((float)(v18 * v100) + (float)(v101 * v17)) + (float)(v98 * v15)) - (float)(v16 * v99);
          float v105 = (float)((float)((float)(v101 * v18) - (float)(v98 * v16)) - (float)(v99 * v15)) - (float)(v100 * v17);
          float v106 = sqrtf((float)((float)((float)(v103 * v103) + (float)(v102 * v102)) + (float)(v104 * v104))+ (float)(v105 * v105));
          float v33 = v102 / v106;
          float v32 = v103 / v106;
          float v34 = v104 / v106;
          float v35 = v105 / v106;
          float v107 = v30 + v30;
          float v108 = v29 + v29;
          float v85 = v31 + v31;
          float v86 = v13 + (float)(v35 * v35);
          float v87 = (float)((float)((float)(v29 + v29) * v32) + (float)(v33 * (float)(v30 + v30)))
              + (float)(v34 * (float)(v31 + v31));
          float v41 = -v34;
          float v88 = (float)((float)(v35 * (float)((float)(v32 * v85) - (float)(v34 * (float)(v29 + v29))))
                      + (float)((float)(v30 + v30) * v86))
              + (float)(v33 * v87);
          float v43 = -v33;
          float v89 = (float)((float)(v35 * (float)((float)(v34 * (float)(v30 + v30)) - (float)(v33 * v85)))
                      + (float)(v108 * v86))
              + (float)(v32 * v87);
          float v45 = -v32;
          float v90 = v35 * (float)((float)(v33 * v108) - (float)(v32 * v107));
          goto LABEL_14;
        case 3:
          float v83 = v30 + v30;
          float v84 = v29 + v29;
          float v85 = v31 + v31;
          float v86 = v13 + (float)(v35 * v35);
          float v87 = (float)((float)((float)(v29 + v29) * v32) + (float)(v33 * (float)(v30 + v30)))
              + (float)(v34 * (float)(v31 + v31));
          float v41 = -v34;
          float v88 = (float)((float)(v35 * (float)((float)(v32 * v85) - (float)(v34 * (float)(v29 + v29))))
                      + (float)((float)(v30 + v30) * v86))
              + (float)(v33 * v87);
          float v43 = -v33;
          float v89 = (float)((float)((float)((float)(v34 * (float)(v30 + v30)) - (float)(v33 * v85)) * v35)
                      + (float)(v84 * v86))
              + (float)(v32 * v87);
          float v45 = -v32;
          float v90 = (float)((float)(v33 * v84) - (float)(v32 * v83)) * v35;
LABEL_14:
          float v109 = (float)(v90 + (float)(v85 * v86)) + (float)(v34 * v87);
          float v2 = v88 - v27;
          float v3 = v89 - v26;
          float v4 = v109 - v28;
          break;
        default:
          float v43 = -v33;
          float v45 = -v32;
          float v41 = -v34;
          break;
      }
      float v110 = (float)((float)((float)(v16 * v35) + (float)(v18 * v43)) + (float)(v15 * v41)) + (float)(v32 * v17);
      float v111 = (float)((float)((float)(v15 * v35) + (float)(v18 * v45)) + (float)(v17 * v43)) + (float)(v34 * v16);
      float v112 = (float)((float)((float)(v17 * v35) + (float)(v18 * v41)) + (float)(v16 * v45)) + (float)(v33 * v15);
      float v113 = (float)((float)((float)(v16 * v33) + (float)(v18 * v35)) + (float)(v15 * v32)) + (float)(v17 * v34);
      float v114 = sqrtf((float)((float)((float)(v111 * v111) + (float)(v110 * v110)) + (float)(v112 * v112))+ (float)(v113 * v113));
      float v115 = v110 / v114;
      float v116 = v111 / v114;
      float v117 = v112 / v114;
      float v118 = v113 / v114;
      *float v23 = v115;
      v23[1] = v116;
      v23[2] = v117;
      v23[3] = v118;
      float v119 = v13 + (float)(v118 * v118);
      float v120 = (float)((float)((float)(v3 + v3) * v116) + (float)(v115 * (float)(v2 + v2)))
           + (float)(v117 * (float)(v4 + v4));
      v7 += 76;
      v23[4] = v19
             + (float)((float)((float)(v118
                                     * (float)((float)(v116 * (float)(v4 + v4)) - (float)(v117 * (float)(v3 + v3))))
                             + (float)((float)(v2 + v2) * v119))
                     + (float)(v115 * v120));
      v23[5] = v20
             + (float)((float)((float)(v118
                                     * (float)((float)(v117 * (float)(v2 + v2)) - (float)(v115 * (float)(v4 + v4))))
                             + (float)((float)(v3 + v3) * v119))
                     + (float)(v116 * v120));
      v23[6] = v21
             + (float)((float)((float)(v118
                                     * (float)((float)(v115 * (float)(v3 + v3)) - (float)(v116 * (float)(v2 + v2))))
                             + (float)((float)(v4 + v4) * v119))
                     + (float)(v117 * v120));
      v9 += 10;
      v10 += 8;
      v12 += 4;
    }
    while (v8 != v7);
  }
}

void physx::Dy::FeatherstoneArticulation::computeArticulatedSpatialInertia(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, int32x4_t a9)
{
  uint64_t v10 = a2;
  *(void *)&v311[36] = *MEMORY[0x263EF8340];
  int v11 = *(_DWORD *)(a2 + 440);
  uint64_t v12 = (v11 - 1);
  if (v11 != 1)
  {
    uint64_t v13 = a1;
    uint64_t v14 = *(void *)(a2 + 448);
    uint64_t v282 = *(void *)(a2 + 456);
    uint64_t v15 = v14 + 160 * v12 + 16;
    uint64_t v16 = *(void *)(a2 + 432);
    uint64_t v17 = 76 * v12 + 12;
    uint64_t v18 = 36 * (v11 - 1);
    uint64_t v285 = (96 * (v11 - 1)) | 0x10;
    long long v19 = 0uLL;
    uint64_t v283 = v14;
    uint64_t v281 = v16;
    do
    {
      uint64_t v20 = v282 + 80 * v12;
      unsigned int v23 = *(unsigned __int8 *)(v20 + 76);
      float v21 = (unsigned __int8 *)(v20 + 76);
      uint64_t v22 = v23;
      if (v23)
      {
        uint64_t v24 = *(void *)(v13 + 480) + 112 * v12;
        unsigned int v25 = (float *)(*(void *)(v13 + 528) + v17);
        uint64_t v26 = v15;
        do
        {
          v27.i32[0] = *(_DWORD *)(v24 + 8);
          float v28 = *(v25 - 3);
          float v29 = *(v25 - 2);
          float v30 = *(float *)(v24 + 20);
          float v31 = *(v25 - 1);
          float v32 = *v25;
          float v33 = *(float *)(v24 + 32);
          float v34 = v25[1];
          float v35 = v25[2];
          float v36 = (float)((float)((float)(v28 * v27.f32[0]) + (float)(v29 * v30)) + (float)(v31 * v33))
              + (float)((float)((float)(*v25 * *(float *)(v24 + 44)) + (float)(v34 * *(float *)(v24 + 56)))
                      + (float)(v35 * *(float *)(v24 + 68)));
          int32x2_t v37 = *(int32x2_t *)v24;
          float32x2_t v38 = *(float32x2_t *)(v24 + 12);
          float32x2_t v39 = *(float32x2_t *)(v24 + 24);
          float32x2_t v40 = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v24, v28), vmul_n_f32(v38, v29)), vmul_n_f32(v39, v31)), vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v24 + 36), *v25), vmul_n_f32(*(float32x2_t *)(v24 + 48), v34)), vmul_n_f32(*(float32x2_t *)(v24 + 60), v35)));
          float v41 = (float)(vmlas_n_f32(vmuls_lane_f32(v34, v39, 1), *v25, v39.f32[0]) + (float)(v33 * v35))
              + (float)((float)((float)(v28 * *(float *)(v24 + 80)) + (float)(v29 * *(float *)(v24 + 92)))
                      + (float)(v31 * *(float *)(v24 + 104)));
          *(float *)(v26 - 8) = v36;
          float32x2_t v42 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v24 + 72), v28), vmul_n_f32(*(float32x2_t *)(v24 + 84), v29)), vmul_n_f32(*(float32x2_t *)(v24 + 96), v31));
          v27.f32[1] = v30;
          *(float32x2_t *)(v26 - 16) = v40;
          a3 = COERCE_DOUBLE(vadd_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32((float32x2_t)vzip2_s32(v37, (int32x2_t)v38), v34), (float32x2_t)vzip1_s32(v37, (int32x2_t)v38), v32), v27, v35), v42));
          *(double *)uint64_t v26 = a3;
          *(float *)(v26 + 8) = v41;
          v26 += 32;
          v25 += 6;
          --v22;
        }
        while (v22);
        unsigned int v43 = *v21;
      }
      else
      {
        unsigned int v43 = 0;
      }
      uint64_t v44 = v14 + 160 * v12;
      unsigned int v45 = *(unsigned __int8 *)(*(void *)(v16 + 40 * v12 + 24) + 270);
      uint64_t v46 = *(void *)(v10 + 304);
      uint64_t v47 = *(void *)(v10 + 320);
      uint64_t v48 = *(void *)(v10 + 368);
      uint64_t v49 = v48 + 96 * v12;
      uint64_t v50 = *(void *)(v10 + 352);
      uint64_t v284 = (float32x2_t *)v15;
      if (v45 >= 2)
      {
        if (v45 == 2)
        {
          float v74 = 0.0;
          float v75 = 1.0;
          float v76 = 1.0;
          float v77 = 0.0;
          long long v288 = xmmword_23435FD50;
          long long v289 = xmmword_23435FD50;
          float v78 = 0.0;
          *(float *)&int v290 = 1.0;
          float v79 = 0.0;
          float v80 = 0.0;
          float v81 = 0.0;
          float v82 = 0.0;
          float v83 = 1.0;
          float v84 = 1.0;
          if (v43)
          {
            uint64_t v85 = 0;
            float v86 = (float *)(v50 + v17);
            float v87 = &v288;
            do
            {
              float v88 = (float *)(v44 + 32 * v85);
              float v89 = *v88;
              float v90 = v88[1];
              float v91 = v88[2];
              float v92 = v88[4];
              float v93 = v88[5];
              float v94 = v88[6];
              float v95 = v86;
              float v96 = (float *)v87;
              uint64_t v97 = v43;
              do
              {
                *v96++ = (float)((float)((float)(v90 * v95[1]) + (float)(*v95 * v89)) + (float)(v95[2] * v91))
                       + (float)((float)((float)(v93 * *(v95 - 2)) + (float)(*(v95 - 3) * v92))
                               + (float)(*(v95 - 1) * v94));
                v95 += 6;
                --v97;
              }
              while (v97);
              ++v85;
              float v87 = (long long *)((char *)v87 + 12);
            }
            while (v85 != v43);
            float v83 = *(float *)&v290;
            float v82 = *((float *)&v289 + 1);
            float v84 = *(float *)&v289;
            float v81 = *((float *)&v289 + 3);
            float v80 = *((float *)&v289 + 2);
            float v79 = *((float *)&v288 + 3);
            float v78 = *((float *)&v288 + 2);
            float v77 = *((float *)&v288 + 1);
            float v76 = *(float *)&v288;
          }
          float v98 = (float)(v84 * v83) - (float)(v82 * v81);
          float v99 = (float)(v82 * v80) - (float)(v79 * v83);
          float v100 = (float)(v79 * v81) - (float)(v84 * v80);
          float v101 = (float)((float)(v77 * v99) + (float)(v98 * v76)) + (float)(v100 * v78);
          float v102 = 0.0;
          float v103 = 1.0;
          float v104 = 0.0;
          float v105 = 1.0;
          if (v101 != 0.0)
          {
            float v75 = v98 * (float)(1.0 / v101);
            float v74 = v99 * (float)(1.0 / v101);
            float v102 = v100 * (float)(1.0 / v101);
            float v103 = (float)((float)(v83 * v76) - (float)(v80 * v78)) * (float)(1.0 / v101);
            float v104 = (float)((float)(v80 * v77) - (float)(v81 * v76)) * (float)(1.0 / v101);
            float v105 = (float)((float)(v76 * v84) - (float)(v77 * v79)) * (float)(1.0 / v101);
          }
          *(float *)__src = v75;
          *(float *)&__src[1] = v74;
          *(float *)&__src[2] = v102;
          *(float *)&__src[3] = v74;
          *(float *)&__src[4] = v103;
          *(float *)&__src[5] = v104;
          *(float *)&__src[6] = v102;
          *(float *)&__src[7] = v104;
          *(float *)&__src[8] = v105;
          if (v43)
          {
            uint64_t v278 = v48;
            uint64_t v279 = v46;
            uint64_t v280 = v17;
            uint64_t v106 = v43;
            float v107 = (char *)(v47 + v18);
            float v108 = __src;
            uint64_t v109 = v43;
            do
            {
              memcpy(v107, v108, 4 * v43);
              v108 += 3;
              v107 += 12;
              --v109;
            }
            while (v109);
            uint64_t v110 = 0;
            uint64_t v13 = a1;
            uint64_t v10 = a2;
            long long v19 = 0uLL;
            uint64_t v48 = v278;
            uint64_t v46 = v279;
            do
            {
              float32x2_t v111 = 0;
              float v112 = 0.0;
              uint64_t v113 = v47;
              float v114 = v284;
              uint64_t v115 = v43;
              float v116 = 0.0;
              float32x2_t v117 = 0;
              do
              {
                float v118 = *(float *)(v113 + v18);
                float32x2_t v111 = vadd_f32(v111, vmul_n_f32(v114[-2], v118));
                float v116 = v116 + (float)(v118 * v114[-1].f32[0]);
                float32x2_t v117 = vadd_f32(v117, vmul_n_f32(*v114, v118));
                float v112 = v112 + (float)(v118 * v114[1].f32[0]);
                v114 += 4;
                v113 += 4;
                --v115;
              }
              while (v115);
              float v119 = (float32x2_t *)(v49 + 32 * v110);
              *float v119 = v111;
              v119[1].f32[0] = v116;
              v119[1].i32[1] = 0;
              v119[2] = v117;
              v119[3].f32[0] = v112;
              v119[3].i32[1] = 0;
              ++v110;
              v47 += 12;
            }
            while (v110 != v43);
            float v120 = v311;
            float v121 = v284;
            uint64_t v122 = v43;
            do
            {
              __int32 v123 = v121->i32[1];
              *(v120 - 9) = v121->i32[0];
              *(v120 - 6) = v123;
              *(v120 - 3) = v121[1].i32[0];
              __int32 v124 = v121[-2].i32[1];
              _DWORD *v120 = v121[-2].i32[0];
              v120[3] = v124;
              __int32 v125 = v121[-1].i32[0];
              v121 += 4;
              v120[6] = v125;
              ++v120;
              --v122;
            }
            while (v122);
            uint64_t v14 = v283;
            uint64_t v17 = v280;
            uint64_t v16 = v281;
          }
          else
          {
            uint64_t v106 = 0;
            uint64_t v14 = v283;
            uint64_t v16 = v281;
          }
          uint64_t v126 = 0;
          float v127 = (float32x2_t *)(v48 + v285);
          uint64_t v128 = (float *)&v310;
          do
          {
            float v129 = &v292[32 * v126 - 4];
            *((_OWORD *)v129 + 1) = v19;
            *(_OWORD *)float v129 = v19;
            if (v43)
            {
              float32x2_t v130 = 0;
              float v131 = 0.0;
              float v132 = v128;
              float v133 = v127;
              uint64_t v134 = v106;
              float v135 = 0.0;
              float32x2_t v136 = 0;
              do
              {
                float v137 = *v132++;
                float32x2_t v130 = vadd_f32(v130, vmul_n_f32(v133[-2], v137));
                float v135 = v135 + (float)(v137 * v133[-1].f32[0]);
                float32x2_t v136 = vadd_f32(v136, vmul_n_f32(*v133, v137));
                float v131 = v131 + (float)(v137 * v133[1].f32[0]);
                v133 += 4;
                --v134;
              }
              while (v134);
              *(float32x2_t *)float v129 = v130;
              *((float *)v129 + 2) = v135;
              *((float32x2_t *)v129 + 2) = v136;
              *((float *)v129 + 6) = v131;
            }
            ++v126;
            v128 += 3;
          }
          while (v126 != 6);
          uint64_t v51 = v17;
          v62.i64[0] = *(void *)v292;
          float v63 = v297;
          v67.i64[0] = v301;
          v61.i32[0] = v291;
          v72.i64[0] = v294;
          float v64 = v300;
          v73.i32[0] = v299;
          float v65 = v302;
          v69.i64[0] = __PAIR64__(v306, v305);
          *(void *)&long long v138 = v307;
          v71.i64[0] = v308;
          *(_DWORD *)v286 = v291;
          v62.i64[1] = v296;
          *(float32x4_t *)&v286[4] = v62;
          *(float *)&v286[20] = v297;
          *(float *)&v286[24] = v300;
          v67.i64[1] = v304;
          *(float32x4_t *)&v286[28] = v67;
          *(_DWORD *)&v286[44] = v305;
          *(_DWORD *)&v286[48] = v306;
          v69.i64[1] = v307;
          *((void *)&v138 + 1) = v308;
          *(_OWORD *)&v286[52] = v138;
          *(_DWORD *)&v286[68] = v309;
          *(_DWORD *)&v286[72] = v293;
          v72.i64[1] = v298;
          *(float32x4_t *)&v286[76] = v72;
          *(void *)&v286[100] = v303;
          v71.i64[1] = __PAIR64__(v293, v309);
          goto LABEL_42;
        }
        uint64_t v51 = v17;
        *(_OWORD *)&v286[92] = v19;
        float32x4_t v62 = 0uLL;
        float v65 = 0.0;
        v73.i32[0] = 0;
        *(_OWORD *)&v286[64] = v19;
        *(_OWORD *)&v286[80] = v19;
        float v64 = 0.0;
        float v63 = 0.0;
        v61.i32[0] = 0;
        *(_OWORD *)&v286[32] = v19;
        *(_OWORD *)&v286[48] = v19;
        float32x4_t v67 = 0uLL;
        float32x4_t v69 = 0uLL;
        float32x4_t v71 = 0uLL;
        float32x4_t v72 = 0uLL;
        *(_OWORD *)v286 = v19;
        *(_OWORD *)&v286[16] = v19;
      }
      else
      {
        uint64_t v51 = v17;
        float v52 = (float *)(v50 + 76 * v12);
        float v53 = (float)((float)((float)(v52[4] * *(float *)(v44 + 4)) + (float)(v52[3] * *(float *)v44))
                    + (float)(v52[5] * *(float *)(v44 + 8)))
            + (float)((float)((float)(v52[1] * *(float *)(v44 + 20)) + (float)(*v52 * *(float *)(v44 + 16)))
                    + (float)(v52[2] * *(float *)(v44 + 24)));
        if (v53 <= 0.00001) {
          *(float *)&a3 = 0.0;
        }
        else {
          *(float *)&a3 = 1.0 / v53;
        }
        *(_DWORD *)(v47 + 36 * v12) = LODWORD(a3);
        v54.i64[0] = *(void *)v44;
        v54.i32[2] = *(_DWORD *)(v44 + 8);
        v54.i32[3] = *(_DWORD *)(v44 + 16);
        float32x4_t v55 = vmulq_n_f32(v54, *(float *)&a3);
        *(_DWORD *)uint64_t v49 = v55.i32[0];
        *(_DWORD *)(v49 + 12) = 0;
        *(_DWORD *)(v49 + 16) = v55.i32[3];
        float32x2_t v56 = vmul_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&a3, 0), *(float32x2_t *)(v44 + 20));
        int32x4_t v57 = (int32x4_t)vextq_s8((int8x16_t)v55, (int8x16_t)v55, 4uLL);
        *(void *)(v49 + 4) = v57.i64[0];
        *(float32x2_t *)(v49 + 20) = v56;
        *(_DWORD *)(v49 + 28) = 0;
        v9.i64[0] = *(void *)(v44 + 16);
        float32x4_t v58 = (float32x4_t)vzip1q_s32(v9, v9);
        a9.i32[0] = *(_DWORD *)(v44 + 24);
        v57.i64[0] = *(void *)v44;
        float32x4_t v59 = (float32x4_t)vzip1q_s32(v57, vdupq_lane_s32(*(int32x2_t *)v44, 1));
        float32x4_t v60 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v55, (int8x16_t)v55, 0xCuLL), (int8x16_t)v55, 8uLL);
        v60.i32[3] = v60.i32[0];
        float32x4_t v61 = vmulq_f32(v55, v58);
        float32x4_t v62 = vmulq_f32(v60, v58);
        float v63 = v61.f32[2];
        float v64 = *(float *)a9.i32 * v55.f32[0];
        float v65 = vmuls_lane_f32(*(float *)a9.i32, v55, 3);
        float32x2_t v66 = vmul_n_f32(v56, *(float *)a9.i32);
        a9.i32[1] = v59.i32[0];
        float32x4_t v67 = vmulq_f32(v60, (float32x4_t)vzip1q_s32(a9, a9));
        float32x4_t v68 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v55, (int32x4_t)v55), (int8x16_t)v55, 0xCuLL);
        v68.i32[3] = v68.i32[0];
        float32x4_t v69 = vmulq_f32(v68, v59);
        *(int32x2_t *)v68.f32 = vdup_lane_s32(*(int32x2_t *)v9.i8, 0);
        v68.i32[0] = *(_DWORD *)(v44 + 8);
        float32x4_t v70 = (float32x4_t)vzip1q_s32((int32x4_t)v68, (int32x4_t)v68);
        v70.i32[2] = *(_DWORD *)(v44 + 8);
        float32x4_t v71 = vmulq_f32(v55, v70);
        float32x4_t v73 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 3);
        *(float32x2_t *)v70.f32 = v56;
        v70.i64[1] = __PAIR64__(v56.u32[0], vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL).u32[0]);
        float32x4_t v72 = vmulq_f32(v70, v58);
        v73.f32[0] = vmuls_lane_f32(v56.f32[1], *(float32x2_t *)v9.i8, 1);
        *(float32x2_t *)&v286[100] = v66;
      }
      uint64_t v14 = v283;
      uint64_t v16 = v281;
LABEL_42:
      uint64_t v139 = v46 + 112 * v12;
      float v140 = *(float *)(v139 + 24);
      float v141 = *(float *)(v139 + 20) - v63;
      *(float *)v286 = *(float *)v139 - v61.f32[0];
      *(float32x4_t *)&v286[4] = vsubq_f32(*(float32x4_t *)(v139 + 4), v62);
      *(float *)&v286[20] = v141;
      *(float *)&v286[24] = v140 - v64;
      *(float32x4_t *)&v286[28] = vsubq_f32(*(float32x4_t *)(v139 + 28), v67);
      *(float32x4_t *)&v286[44] = vsubq_f32(*(float32x4_t *)(v139 + 44), v69);
      *(float32x4_t *)&v286[60] = vsubq_f32(*(float32x4_t *)(v139 + 60), v71);
      *(float32x4_t *)&v286[76] = vsubq_f32(*(float32x4_t *)(v139 + 76), v72);
      v73.f32[1] = v65;
      v73.i64[1] = *(void *)&v286[100];
      *(float32x4_t *)&v286[92] = vsubq_f32(*(float32x4_t *)(v139 + 92), v73);
      uint64_t v142 = v14 + 160 * v12;
      float v143 = *(float *)(v142 + 120);
      __int32 v291 = 0;
      float32x2_t v144 = *(float32x2_t *)(v142 + 124);
      *(_DWORD *)v292 = v144.i32[1];
      *(float32x2_t *)&v292[4] = vneg_f32(v144);
      unsigned int v293 = 0;
      unint64_t v294 = __PAIR64__(v144.u32[0], LODWORD(v143));
      float v295 = -v143;
      LODWORD(v296) = 0;
      physx::Dy::FeatherstoneArticulation::translateInertia((uint64_t)&v291, (uint64_t)v286);
      float v145 = (float32x2_t *)(*(void *)(v10 + 304) + 112 * *(unsigned int *)(v16 + 40 * v12 + 32));
      float32x2_t v146 = vadd_f32(*(float32x2_t *)&v286[8], v145[1]);
      *float v145 = vadd_f32(*(float32x2_t *)v286, *v145);
      v145[1] = v146;
      float32x2_t v147 = vadd_f32(*(float32x2_t *)&v286[24], v145[3]);
      v145[2] = vadd_f32(*(float32x2_t *)&v286[16], v145[2]);
      v145[3] = v147;
      float32x2_t v148 = vadd_f32(*(float32x2_t *)&v286[40], v145[5]);
      v145[4] = vadd_f32(*(float32x2_t *)&v286[32], v145[4]);
      v145[5] = v148;
      float32x2_t v149 = vadd_f32(*(float32x2_t *)&v286[56], v145[7]);
      v145[6] = vadd_f32(*(float32x2_t *)&v286[48], v145[6]);
      v145[7] = v149;
      float32x2_t v150 = vadd_f32(*(float32x2_t *)&v286[72], v145[9]);
      v145[8] = vadd_f32(*(float32x2_t *)&v286[64], v145[8]);
      v145[9] = v150;
      float32x2_t v151 = vadd_f32(*(float32x2_t *)&v286[88], v145[11]);
      v145[10] = vadd_f32(*(float32x2_t *)&v286[80], v145[10]);
      v145[11] = v151;
      a3 = COERCE_DOUBLE(vadd_f32(*(float32x2_t *)&v286[96], v145[12]));
      *(double *)&v145[12] = a3;
      uint64_t v15 = (uint64_t)&v284[-20];
      v145[13].f32[0] = *(float *)&v286[104] + v145[13].f32[0];
      uint64_t v17 = v51 - 76;
      v18 -= 36;
      v285 -= 96;
      --v12;
      long long v19 = 0uLL;
    }
    while (v12);
  }
  uint64_t v152 = *(void *)(v10 + 304);
  float32x4_t v153 = *(float32x4_t *)(v152 + 72);
  float32x4_t v154 = *(float32x4_t *)(v152 + 84);
  v155.i32[3] = 0;
  v155.i32[0] = v154.i32[3];
  *(uint64_t *)((char *)v155.i64 + 4) = *(unsigned int *)(v152 + 100);
  int32x2_t v156 = vdup_lane_s32(*(int32x2_t *)v155.f32, 1);
  float32x4_t v157 = v155;
  v157.i32[2] = *(_DWORD *)(v152 + 104);
  v164.i64[1] = 0;
  float32x4_t v158 = *(float32x4_t *)(v152 + 36);
  float32x4_t v159 = *(float32x4_t *)(v152 + 48);
  v160.i32[3] = 0;
  v160.i32[0] = v159.i32[3];
  *(uint64_t *)((char *)v160.i64 + 4) = *(unsigned int *)(v152 + 64);
  int32x2_t v161 = vdup_lane_s32(*(int32x2_t *)v160.f32, 1);
  float32x4_t v162 = v160;
  v162.i32[2] = *(_DWORD *)(v152 + 68);
  int8x16_t v163 = *(int8x16_t *)(v152 + 12);
  v164.i32[0] = v163.i32[3];
  int32x4_t v165 = *(int32x4_t *)v152;
  __int32 v166 = *(_DWORD *)(v152 + 28);
  __int32 v167 = *(_DWORD *)(v152 + 32);
  int8x8_t v168 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v153.f32, 0), *(int8x8_t *)v154.f32, 4uLL);
  *(int32x2_t *)&v179.u32[2] = vdup_laneq_s32((int32x4_t)v154, 3);
  *(int8x8_t *)v169.f32 = vext_s8(*(int8x8_t *)v153.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v154.f32, 1), 4uLL);
  *(int32x2_t *)&v169.u32[2] = v156;
  *(int8x8_t *)v170.f32 = vext_s8((int8x8_t)vdup_laneq_s32((int32x4_t)v153, 2), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v154, (int8x16_t)v154, 8uLL), 4uLL);
  v170.i64[1] = vextq_s8((int8x16_t)v157, (int8x16_t)v157, 8uLL).u64[0];
  float32x4_t v171 = vaddq_f32(v154, v169);
  float32x4_t v172 = vaddq_f32(v157, v170);
  v169.i64[0] = 0x3F0000003F000000;
  v169.i64[1] = 0x3F0000003F000000;
  float32x4_t v173 = vmulq_f32(vaddq_f32(v153, v179), v169);
  float32x4_t v174 = v173;
  v174.i32[3] = 0;
  float32x4_t v175 = vmulq_f32(v171, v169);
  int8x16_t v176 = (int8x16_t)v175;
  v176.i32[3] = 0;
  float32x4_t v177 = vmulq_f32(v172, v169);
  int8x16_t v178 = (int8x16_t)v177;
  v178.i32[3] = 0;
  *(int8x8_t *)v179.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v158.f32, 0), *(int8x8_t *)v159.f32, 4uLL);
  *(int8x8_t *)v180.f32 = vext_s8(*(int8x8_t *)v158.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v159.f32, 1), 4uLL);
  *(int32x2_t *)&v180.u32[2] = v161;
  *(int8x8_t *)v181.f32 = vext_s8((int8x8_t)vdup_laneq_s32((int32x4_t)v158, 2), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v159, (int8x16_t)v159, 8uLL), 4uLL);
  v181.i64[1] = vextq_s8((int8x16_t)v162, (int8x16_t)v162, 8uLL).u64[0];
  float32x4_t v182 = vaddq_f32(v159, v180);
  float32x4_t v183 = vaddq_f32(v162, v181);
  v181.i64[0] = vextq_s8(v176, v176, 8uLL).u64[0];
  float32x2_t v184 = (float32x2_t)vextq_s8(v178, v178, 8uLL).u64[0];
  float32x2_t v185 = (float32x2_t)vext_s8(*(int8x8_t *)v177.f32, (int8x8_t)v184, 4uLL);
  float32x2_t v186 = (float32x2_t)vext_s8(*(int8x8_t *)v175.f32, *(int8x8_t *)v181.f32, 4uLL);
  int32x2_t v187 = (int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v181.f32, *(float32x2_t *)v177.f32), *(float32x2_t *)v175.f32, v184);
  int32x2_t v188 = (int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v175.f32, v185), v186, *(float32x2_t *)v177.f32);
  *(int8x8_t *)v190.f32 = vext_s8((int8x8_t)v188, (int8x8_t)v187, 4uLL);
  v188.i32[1] = 0;
  float32x4_t v189 = vmulq_f32(v182, v169);
  v190.i64[1] = v188.u32[0];
  float32x2_t v191 = (float32x2_t)vextq_s8((int8x16_t)v174, (int8x16_t)v174, 8uLL).u64[0];
  float32x2_t v192 = (float32x2_t)vext_s8(*(int8x8_t *)v173.f32, (int8x8_t)v191, 4uLL);
  int8x8_t v193 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v177.f32, v192), v185, *(float32x2_t *)v173.f32);
  float32x4_t v194 = vmulq_f32(v174, v190);
  v194.i64[0] = vpaddq_f32(v194, v194).u64[0];
  float32x2_t v195 = vpadd_f32(*(float32x2_t *)v194.f32, *(float32x2_t *)v194.f32);
  float32x2_t v196 = vrecpe_f32(v195);
  int v197 = 4;
  do
  {
    float32x2_t v196 = vmul_f32(v196, vrecps_f32(v195, v196));
    --v197;
  }
  while (v197);
  v164.i32[1] = v166;
  *(int32x2_t *)&v179.u32[2] = vdup_laneq_s32((int32x4_t)v159, 3);
  v198.i64[0] = 0x3F0000003F000000;
  v198.i64[1] = 0x3F0000003F000000;
  float32x4_t v202 = vmulq_f32(vaddq_f32(v158, v179), v198);
  float32x4_t v199 = (float32x4_t)v165;
  v199.i32[3] = 0;
  float32x4_t v200 = v164;
  v200.i32[2] = v167;
  float32x4_t v201 = (float32x4_t)v163;
  v201.i32[3] = 0;
  v202.i32[3] = 0;
  v189.i32[3] = 0;
  float32x4_t v203 = vmulq_f32(v183, v198);
  v203.i32[3] = 0;
  if (v195.f32[0] == 0.0)
  {
    float32x4_t v208 = (float32x4_t)xmmword_23435FD80;
    float32x4_t v207 = (float32x4_t)xmmword_23435FD60;
    float32x4_t v204 = (float32x4_t)xmmword_23435FD50;
  }
  else
  {
    float32x4_t v204 = vmulq_n_f32(v190, v196.f32[0]);
    v204.i32[3] = 0;
    *(int8x8_t *)v205.f32 = vext_s8((int8x8_t)vdup_lane_s32(v187, 0), (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v173.f32, v184), *(float32x2_t *)v177.f32, v191), 4uLL);
    *(int8x8_t *)&v205.u32[2] = v193;
    float32x2_t v206 = vmls_f32(vmul_f32(*(float32x2_t *)v173.f32, v186), v192, *(float32x2_t *)v175.f32);
    float32x4_t v207 = vmulq_n_f32(v205, v196.f32[0]);
    v207.i32[3] = 0;
    *(int8x8_t *)v205.f32 = vext_s8((int8x8_t)vdup_lane_s32(v188, 0), v193, 4uLL);
    *(float32x2_t *)&v205.u32[2] = v206;
    float32x4_t v208 = vmulq_n_f32(v205, v196.f32[0]);
    v208.i32[3] = 0;
  }
  float32x4_t v209 = vnegq_f32(v199);
  v209.i32[3] = 0;
  float32x4_t v210 = vnegq_f32(v201);
  v210.i32[3] = 0;
  float32x4_t v211 = vnegq_f32(v200);
  v211.i32[3] = 0;
  float32x4_t v212 = vmulq_n_f32(v209, v204.f32[0]);
  v212.i32[3] = 0;
  float32x4_t v213 = vmulq_lane_f32(v210, *(float32x2_t *)v204.f32, 1);
  v213.i32[3] = 0;
  float32x4_t v214 = vmulq_laneq_f32(v211, v204, 2);
  v214.i32[3] = 0;
  float32x4_t v215 = vaddq_f32(v212, v213);
  float32x4_t v216 = vmulq_n_f32(v209, v207.f32[0]);
  v216.i32[3] = 0;
  float32x4_t v217 = vmulq_lane_f32(v210, *(float32x2_t *)v207.f32, 1);
  v217.i32[3] = 0;
  float32x4_t v218 = vaddq_f32(v214, v215);
  float32x4_t v219 = vmulq_laneq_f32(v211, v207, 2);
  v219.i32[3] = 0;
  float32x4_t v220 = vaddq_f32(v219, vaddq_f32(v216, v217));
  float32x4_t v221 = vmulq_n_f32(v209, v208.f32[0]);
  v221.i32[3] = 0;
  float32x4_t v222 = vmulq_lane_f32(v210, *(float32x2_t *)v208.f32, 1);
  v222.i32[3] = 0;
  float32x4_t v223 = vmulq_laneq_f32(v211, v208, 2);
  v223.i32[3] = 0;
  float32x4_t v224 = vaddq_f32(v223, vaddq_f32(v221, v222));
  *(int8x8_t *)v222.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v165.i8, 0), *(int8x8_t *)v163.i8, 4uLL);
  v222.i64[1] = vdup_laneq_s32((int32x4_t)v163, 3).u32[0];
  *(int8x8_t *)v223.f32 = vext_s8(*(int8x8_t *)v165.i8, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v163.i8, 1), 4uLL);
  v223.i64[1] = vdup_lane_s32(*(int32x2_t *)v164.f32, 1).u32[0];
  *(int8x8_t *)v225.f32 = vext_s8((int8x8_t)vdup_laneq_s32(v165, 2), (int8x8_t)*(_OWORD *)&vextq_s8(v163, v163, 8uLL), 4uLL);
  v225.i64[1] = vdup_laneq_s32((int32x4_t)v200, 2).u32[0];
  float32x4_t v226 = vmulq_n_f32(v218, v222.f32[0]);
  v226.i32[3] = 0;
  float32x4_t v227 = vmulq_lane_f32(v220, *(float32x2_t *)v222.f32, 1);
  v227.i32[3] = 0;
  float32x4_t v228 = vmulq_laneq_f32(v224, v222, 2);
  v228.i32[3] = 0;
  float32x4_t v229 = vaddq_f32(vaddq_f32(v226, v227), v228);
  float32x4_t v230 = vmulq_n_f32(v218, v223.f32[0]);
  v230.i32[3] = 0;
  float32x4_t v231 = vmulq_lane_f32(v220, *(float32x2_t *)v223.f32, 1);
  v231.i32[3] = 0;
  float32x4_t v232 = vmulq_laneq_f32(v224, v223, 2);
  v232.i32[3] = 0;
  float32x4_t v233 = vaddq_f32(v230, v231);
  float32x4_t v234 = vmulq_n_f32(v218, v225.f32[0]);
  v234.i32[3] = 0;
  float32x4_t v235 = vmulq_lane_f32(v220, *(float32x2_t *)v225.f32, 1);
  v235.i32[3] = 0;
  float32x4_t v236 = vmulq_laneq_f32(v224, v225, 2);
  v236.i32[3] = 0;
  float32x4_t v237 = vaddq_f32(vaddq_f32(v234, v235), v236);
  float32x4_t v238 = vaddq_f32(v202, v229);
  int8x16_t v239 = (int8x16_t)vaddq_f32(v189, vaddq_f32(v233, v232));
  int8x16_t v240 = (int8x16_t)vaddq_f32(v203, v237);
  float32x2_t v241 = (float32x2_t)vextq_s8(v240, v240, 8uLL).u64[0];
  v235.i64[0] = vextq_s8(v240, v240, 4uLL).u64[0];
  float32x2_t v242 = (float32x2_t)vextq_s8(v239, v239, 4uLL).u64[0];
  int32x2_t v243 = (int32x2_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v239, v239, 8uLL), *(float32x2_t *)v240.i8), *(float32x2_t *)v239.i8, v241);
  int32x2_t v244 = (int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v239.i8, *(float32x2_t *)v235.f32), v242, *(float32x2_t *)v240.i8);
  *(int8x8_t *)v245.f32 = vext_s8((int8x8_t)v244, (int8x8_t)v243, 4uLL);
  v244.i32[1] = 0;
  v245.i64[1] = v244.u32[0];
  float32x2_t v246 = (float32x2_t)vextq_s8((int8x16_t)v238, (int8x16_t)v238, 4uLL).u64[0];
  int8x8_t v247 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v240.i8, v246), *(float32x2_t *)v235.f32, *(float32x2_t *)v238.f32);
  float32x4_t v248 = vmulq_f32(v238, v245);
  v248.i64[0] = vpaddq_f32(v248, v248).u64[0];
  float32x2_t v249 = vpadd_f32(*(float32x2_t *)v248.f32, *(float32x2_t *)v248.f32);
  float32x2_t v250 = vrecpe_f32(v249);
  int v251 = 4;
  do
  {
    float32x2_t v250 = vmul_f32(v250, vrecps_f32(v249, v250));
    --v251;
  }
  while (v251);
  if (v249.f32[0] == 0.0)
  {
    float32x4_t v259 = (float32x4_t)xmmword_23435FD80;
    float32x4_t v258 = (float32x4_t)xmmword_23435FD60;
    float32x4_t v255 = (float32x4_t)xmmword_23435FD50;
  }
  else
  {
    float32x2_t v252 = (float32x2_t)vextq_s8((int8x16_t)v238, (int8x16_t)v238, 8uLL).u64[0];
    float32x2_t v253 = vmul_f32(*(float32x2_t *)v238.f32, v242);
    float32x2_t v254 = vmul_f32(v241, *(float32x2_t *)v238.f32);
    float32x4_t v255 = vmulq_n_f32(v245, v250.f32[0]);
    v255.i32[3] = 0;
    *(int8x8_t *)v256.f32 = vext_s8((int8x8_t)vdup_lane_s32(v243, 0), (int8x8_t)vmls_f32(v254, *(float32x2_t *)v240.i8, v252), 4uLL);
    *(int8x8_t *)&v256.u32[2] = v247;
    float32x2_t v257 = vmls_f32(v253, v246, *(float32x2_t *)v239.i8);
    float32x4_t v258 = vmulq_n_f32(v256, v250.f32[0]);
    v258.i32[3] = 0;
    *(int8x8_t *)v256.f32 = vext_s8((int8x8_t)vdup_lane_s32(v244, 0), v247, 4uLL);
    *(float32x2_t *)&v256.u32[2] = v257;
    float32x4_t v259 = vmulq_n_f32(v256, v250.f32[0]);
    v259.i32[3] = 0;
  }
  int8x8_t v260 = (int8x8_t)vdupq_laneq_s32((int32x4_t)v218, 2).u64[0];
  float32x4_t v261 = vaddq_f32(vaddq_f32(vmulq_n_f32(v255, v218.f32[0]), vmulq_lane_f32(v258, *(float32x2_t *)v218.f32, 1)), vmulq_laneq_f32(v259, v218, 2));
  int8x8_t v262 = (int8x8_t)vdupq_lane_s32(*(int32x2_t *)v220.f32, 1).u64[0];
  int8x8_t v263 = (int8x8_t)vextq_s8((int8x16_t)v220, (int8x16_t)v220, 8uLL).u64[0];
  float32x4_t v264 = vaddq_f32(vaddq_f32(vmulq_n_f32(v255, v220.f32[0]), vmulq_lane_f32(v258, *(float32x2_t *)v220.f32, 1)), vmulq_laneq_f32(v259, v220, 2));
  unsigned __int32 v265 = vdupq_lane_s32(*(int32x2_t *)v224.f32, 0).u32[0];
  unsigned __int32 v266 = vdupq_lane_s32(*(int32x2_t *)v224.f32, 1).u32[0];
  unsigned __int32 v267 = vdupq_laneq_s32((int32x4_t)v224, 2).u32[0];
  float32x4_t v268 = vaddq_f32(vaddq_f32(vmulq_n_f32(v255, v224.f32[0]), vmulq_lane_f32(v258, *(float32x2_t *)v224.f32, 1)), vmulq_laneq_f32(v259, v224, 2));
  *(int8x8_t *)v269.f32 = vext_s8((int8x8_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v218.f32, 0), *(int8x8_t *)v220.f32, 4uLL);
  v269.i64[1] = v265;
  *(int8x8_t *)v270.f32 = vext_s8(*(int8x8_t *)v218.f32, v262, 4uLL);
  v270.i64[1] = v266;
  *(int8x8_t *)v271.f32 = vext_s8(v260, v263, 4uLL);
  v271.i64[1] = v267;
  float32x4_t v272 = vaddq_f32(vmulq_laneq_f32(v271, v261, 2), vaddq_f32(vmulq_n_f32(v269, v261.f32[0]), vmulq_lane_f32(v270, *(float32x2_t *)v261.f32, 1)));
  float32x4_t v273 = vaddq_f32(v207, vaddq_f32(vmulq_laneq_f32(v271, v264, 2), vaddq_f32(vmulq_n_f32(v269, v264.f32[0]), vmulq_lane_f32(v270, *(float32x2_t *)v264.f32, 1))));
  int8x16_t v274 = (int8x16_t)vaddq_f32(v208, vaddq_f32(vmulq_laneq_f32(v271, v268, 2), vaddq_f32(vmulq_n_f32(v269, v268.f32[0]), vmulq_lane_f32(v270, *(float32x2_t *)v268.f32, 1))));
  *(int32x2_t *)(v10 + 556) = vzip1_s32(*(int32x2_t *)v261.f32, *(int32x2_t *)v264.f32);
  *(int8x8_t *)v270.f32 = vext_s8(*(int8x8_t *)v268.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v261, (int8x16_t)v261, 8uLL), 4uLL);
  int8x16_t v275 = (int8x16_t)vuzp1q_s32((int32x4_t)v268, (int32x4_t)v268);
  v268.i32[1] = v261.i32[1];
  *(void *)(v10 + 564) = v268.i64[0];
  *(_DWORD *)(v10 + 572) = v264.i32[1];
  *(void *)(v10 + 576) = v270.i64[0];
  *(_DWORD *)(v10 + 584) = v264.i32[2];
  *(int8x16_t *)(v10 + 588) = vextq_s8(v275, (int8x16_t)vaddq_f32(v204, v272), 0xCuLL);
  v273.i32[3] = v274.i32[0];
  *(float32x4_t *)(v10 + 604) = v273;
  *(int8x16_t *)(v10 + 620) = vextq_s8(vextq_s8(v274, v274, 0xCuLL), (int8x16_t)v255, 8uLL);
  *(int8x16_t *)(v10 + 636) = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v255, (int32x4_t)v255), (int8x16_t)v258, 0xCuLL);
  *(void *)(v10 + 652) = v259.i64[0];
  *(_DWORD *)(v10 + 660) = v259.i32[2];
}

float32_t physx::Dy::FeatherstoneArticulation::computeArticulatedSpatialZ(float32_t result, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = (*(_DWORD *)(a3 + 440) - 1);
  if (*(_DWORD *)(a3 + 440) != 1)
  {
    uint64_t v5 = *(void *)(a3 + 432);
    uint64_t v6 = *(void *)(a3 + 448);
    uint64_t v7 = *(void *)(a3 + 456);
    uint64_t v8 = a4[2];
    uint64_t v9 = a4[3];
    uint64_t v10 = a4[8];
    uint64_t v11 = *(void *)(a3 + 368) + 96 * v4 + 16;
    uint64_t v12 = *(void *)(a3 + 352) + 76 * v4 + 12;
    uint64_t v13 = *(void *)(a3 + 304);
    uint64_t v14 = v6 + 160 * v4 + 132;
    do
    {
      uint64_t v15 = v13 + 112 * v4;
      uint64_t v16 = (float *)(v8 + 32 * v4);
      v17.i32[0] = *(_DWORD *)(v15 + 8);
      float v19 = *v16;
      float v18 = v16[1];
      float v20 = v16[2];
      float v21 = *(float *)(v15 + 32);
      float v22 = v16[4];
      float v23 = v16[5];
      float v24 = v16[6];
      float v25 = (float)((float)((float)(*v16 * v17.f32[0]) + (float)(v18 * *(float *)(v15 + 20))) + (float)(v20 * v21))
          + (float)((float)((float)(v22 * *(float *)(v15 + 44)) + (float)(v23 * *(float *)(v15 + 56)))
                  + (float)(v24 * *(float *)(v15 + 68)));
      float v26 = (float)((float)(*v16 * *(float *)(v15 + 80)) + (float)(v18 * *(float *)(v15 + 92)))
          + (float)(v20 * *(float *)(v15 + 104));
      float32x2_t v27 = (float32x2_t *)(v9 + 32 * v4);
      float32x2_t v28 = *(float32x2_t *)(v15 + 12);
      float32x2_t v29 = *(float32x2_t *)(v15 + 24);
      float v30 = (float)(vmlas_n_f32(vmuls_lane_f32(v23, v29, 1), v22, v29.f32[0]) + (float)(v21 * v24)) + v26;
      float32x2_t v31 = vadd_f32(vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v15, v19), vmul_n_f32(v28, v18)), vmul_n_f32(v29, v20)), vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v15 + 36), v22), vmul_n_f32(*(float32x2_t *)(v15 + 48), v23)), vmul_n_f32(*(float32x2_t *)(v15 + 60), v24))), *v27);
      float v32 = v25 + v27[1].f32[0];
      v17.i32[1] = *(_DWORD *)(v15 + 20);
      float32x2_t v33 = vadd_f32(vadd_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32((float32x2_t)vzip2_s32(*(int32x2_t *)v15, (int32x2_t)v28), v23), (float32x2_t)vzip1_s32(*(int32x2_t *)v15, (int32x2_t)v28), v22), v17, v24), vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v15 + 72), v19), vmul_n_f32(*(float32x2_t *)(v15 + 84), v18)), vmul_n_f32(*(float32x2_t *)(v15 + 96), v20))), v27[2]);
      float v34 = v30 + v27[3].f32[0];
      uint64_t v35 = v7 + 80 * v4;
      uint64_t v36 = *(unsigned __int8 *)(v35 + 76);
      if (*(unsigned char *)(v35 + 76))
      {
        int32x2_t v37 = (float *)(v10 + 4 * *(unsigned int *)(v35 + 72));
        float32x2_t v38 = 0;
        float v39 = 0.0;
        float32x2_t v40 = (float *)v14;
        float v41 = (float *)v12;
        float32x2_t v42 = (float32x2_t *)v11;
        float v43 = 0.0;
        float32x2_t v44 = 0;
        do
        {
          float v45 = *v37++;
          float v46 = v45
              - (float)((float)((float)((float)(v31.f32[1] * v41[1]) + (float)(*v41 * v31.f32[0]))
                              + (float)(v41[2] * v32))
                      + (float)((float)((float)(v33.f32[1] * *(v41 - 2)) + (float)(*(v41 - 3) * v33.f32[0]))
                              + (float)(*(v41 - 1) * v34)));
          *v40++ = v46;
          float32x2_t v38 = vadd_f32(v38, vmul_n_f32(v42[-2], v46));
          float v43 = v43 + (float)(v46 * v42[-1].f32[0]);
          float32x2_t v44 = vadd_f32(v44, vmul_n_f32(*v42, v46));
          float v39 = v39 + (float)(v46 * v42[1].f32[0]);
          v42 += 4;
          v41 += 6;
          --v36;
        }
        while (v36);
      }
      else
      {
        float32x2_t v38 = 0;
        float v43 = 0.0;
        float v39 = 0.0;
        float32x2_t v44 = 0;
      }
      _D1 = vadd_f32(v31, v38);
      float32_t v48 = v32 + v43;
      float32x2_t v49 = vadd_f32(v33, v44);
      float v50 = v34 + v39;
      uint64_t v51 = v6 + 160 * v4;
      _S4 = *(_DWORD *)(v51 + 120);
      float v53 = (float32x2_t *)(v9 + 32 * *(unsigned int *)(v5 + 40 * v4 + 32));
      float32x2_t v54 = vadd_f32(_D1, *v53);
      float32_t v55 = v48 + v53[1].f32[0];
      v56.i32[1] = HIDWORD(*(void *)(v51 + 124));
      v56.i32[0] = _S4;
      __asm { FMLA            S17, S4, V1.S[1] }
      float32x2_t v62 = (float32x2_t)vdup_lane_s32((int32x2_t)_D1, 0);
      _D1.f32[0] = v48;
      v62.f32[0] = v48;
      float32x2_t v63 = vadd_f32(v49, vmla_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_f32(_D1, vneg_f32(v56))), v62, *(float32x2_t *)(v51 + 124)));
      *float v53 = v54;
      v53[1].f32[0] = v55;
      v53[2] = vadd_f32(v63, v53[2]);
      float32x2_t result = (float)(v50 + _S17) + v53[3].f32[0];
      v53[3].f32[0] = result;
      v11 -= 96;
      v12 -= 76;
      v14 -= 160;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t physx::Dy::FeatherstoneArticulation::computeJointAccelerationW(uint64_t result, uint64_t a2, unsigned __int8 a3, float *a4, uint64_t a5, unsigned int a6)
{
  v26[3] = *MEMORY[0x263EF8340];
  if (a3)
  {
    float v6 = *a4;
    float v7 = a4[1];
    float v8 = a4[2];
    uint64_t v9 = (float *)(a2 + 132);
    float v10 = a4[4];
    float v11 = a4[5];
    uint64_t v12 = (float *)(a2 + 16);
    uint64_t v13 = (float *)v26;
    uint64_t v14 = a3;
    float v15 = a4[6];
    do
    {
      float v16 = *v9++;
      *v13++ = v16
             - (float)((float)((float)((float)(v7 * v12[1]) + (float)(*v12 * v6)) + (float)(v12[2] * v8))
                     + (float)((float)((float)(v11 * *(v12 - 3)) + (float)(*(v12 - 4) * v10)) + (float)(*(v12 - 2) * v15)));
      v12 += 8;
      --v14;
    }
    while (v14);
    uint64_t v17 = 0;
    uint64_t v18 = *(void *)(result + 496) + 36 * a6;
    do
    {
      *(_DWORD *)(a5 + 4 * v17) = 0;
      float v19 = 0.0;
      float v20 = (float *)v26;
      float v21 = (float *)v18;
      uint64_t v22 = a3;
      do
      {
        float v23 = *v21;
        v21 += 3;
        float v24 = v23;
        float v25 = *v20++;
        float v19 = v19 + (float)(v24 * v25);
        *(float *)(a5 + 4 * v17) = v19;
        --v22;
      }
      while (v22);
      ++v17;
      v18 += 4;
    }
    while (v17 != a3);
  }
  return result;
}

uint64_t physx::Dy::FeatherstoneArticulation::computeLinkAcceleration(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(unsigned int *)(a2 + 440);
  float v5 = *(float *)(a2 + 472);
  float v6 = *(float32x2_t **)a3;
  float v7 = *(float32x2_t **)(a3 + 8);
  uint64_t v73 = *(void *)(a3 + 16);
  uint64_t v74 = result;
  if ((**(unsigned char **)(a2 + 488) & 1) == 0)
  {
    float v8 = *(float **)(a3 + 24);
    v9.i32[0] = *(_DWORD *)(a2 + 564);
    float v10 = *(float *)(a2 + 576);
    float v11 = *(float *)(a2 + 588);
    float v12 = *v8;
    float v13 = v8[1];
    float v14 = v8[2];
    float v15 = v8[4];
    float v16 = v8[5];
    float v17 = v8[6];
    float v18 = (float)((float)((float)(v9.f32[0] * *v8) + (float)(v10 * v13)) + (float)(v11 * v14))
        + (float)((float)((float)(*(float *)(a2 + 600) * v15) + (float)(*(float *)(a2 + 612) * v16))
                + (float)(*(float *)(a2 + 624) * v17));
    float32x2_t v19 = *(float32x2_t *)(a2 + 556);
    float32x2_t v20 = *(float32x2_t *)(a2 + 568);
    float32x2_t v21 = *(float32x2_t *)(a2 + 580);
    float32x2_t v22 = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(v19, *v8), vmul_n_f32(v20, v13)), vmul_n_f32(v21, v14)), vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(a2 + 592), v15), vmul_n_f32(*(float32x2_t *)(a2 + 604), v16)), vmul_n_f32(*(float32x2_t *)(a2 + 616), v17)));
    float v23 = (float)((float)((float)(*(float *)(a2 + 636) * *v8) + (float)(*(float *)(a2 + 648) * v13))
                + (float)(*(float *)(a2 + 660) * v14))
        + (float)(vmlas_n_f32(vmuls_lane_f32(v16, v21, 1), v15, v21.f32[0]) + (float)(v11 * v17));
    v7[1].f32[0] = -v18;
    v7[1].i32[1] = 0;
    v9.f32[1] = v10;
    float32x2_t v24 = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(a2 + 628), v12), vmul_n_f32(*(float32x2_t *)(a2 + 640), v13)), vmul_n_f32(*(float32x2_t *)(a2 + 652), v14)), vmla_n_f32(vmla_n_f32(vmul_n_f32((float32x2_t)vzip2_s32((int32x2_t)v19, (int32x2_t)v20), v16), (float32x2_t)vzip1_s32((int32x2_t)v19, (int32x2_t)v20), v15), v9, v17));
    *float v7 = vneg_f32(v22);
    v7[2] = vneg_f32(v24);
    v7[3].f32[0] = -v23;
    v7[3].i32[1] = 0;
    *float v6 = vsub_f32(*v6, vmul_n_f32(v22, v5));
    v6[1].f32[0] = v6[1].f32[0] - (float)(v5 * v18);
    v6[2] = vsub_f32(v6[2], vmul_n_f32(v24, v5));
    v6[3].f32[0] = v6[3].f32[0] - (float)(v5 * v23);
  }
  if (v4 >= 2)
  {
    uint64_t v25 = 1;
    uint64_t v26 = *(void *)(a3 + 56);
    uint64_t v71 = *(void *)(a3 + 48);
    uint64_t v27 = 96;
    float v72 = v5;
    do
    {
      uint64_t v28 = *(void *)(a2 + 456);
      uint64_t v29 = *(void *)(a2 + 448) + 160 * v25;
      uint64_t v30 = *(void *)(a2 + 432) + 40 * v25;
      _S0 = *(_DWORD *)(v29 + 120);
      float v32 = &v7[4 * *(unsigned int *)(v30 + 32)];
      _D4 = (int32x2_t)*v32;
      v34.i32[1] = HIDWORD(*(void *)(v29 + 124));
      v34.i32[0] = _S0;
      v35.i32[1] = HIDWORD(*(unint64_t *)v32);
      v35.i32[0] = v32[1].i32[0];
      uint64_t v36 = *(void *)(v30 + 24);
      int32x2_t v37 = (int32x2_t)vmul_f32(v34, v35);
      float32x2_t v38 = (float32x2_t)vdup_lane_s32((int32x2_t)*v32, 0);
      v38.i32[0] = v32[1].i32[0];
      __asm { FMLS            S1, S0, V4.S[1] }
      float32x2_t v44 = vadd_f32(v32[2], vmls_f32((float32x2_t)vrev64_s32(v37), v38, *(float32x2_t *)(v29 + 124)));
      float v45 = _S1 + v32[3].f32[0];
      float32_t v75 = v38.f32[0];
      int32x2_t v76 = (int32x2_t)*v32;
      int32x2_t v77 = (int32x2_t)*v32;
      __int32 v78 = v38.i32[0];
      int v79 = 0;
      float32x2_t v80 = v44;
      float v81 = v45;
      int v82 = 0;
      uint64_t v46 = v28 + 80 * v25;
      uint64_t v47 = (float *)(v26 + 4 * *(unsigned int *)(v46 + 72));
      float32x2_t result = physx::Dy::FeatherstoneArticulation::computeJointAccelerationW(v74, v29, *(unsigned char *)(v46 + 76), (float *)&v77, (uint64_t)v47, v25);
      uint64_t v48 = *(unsigned __int8 *)(v46 + 76);
      if (*(unsigned char *)(v46 + 76))
      {
        float32x2_t v49 = (float *)(v71 + 4 * *(unsigned int *)(v46 + 72));
        float v50 = (float *)(*(void *)(a2 + 352) + v27);
        float32x2_t v51 = 0;
        float v52 = 0.0;
        float v53 = 0.0;
        float32x2_t v54 = 0;
        float v55 = v72;
        float v57 = v75;
        float32x2_t v56 = (float32x2_t)v76;
        do
        {
          float v58 = *v49 + (float)(*v47 * v72);
          float v59 = *(float *)(v36 + 264);
          if (fabsf(v58) > v59)
          {
            if (v58 >= 0.0) {
              float v58 = *(float *)(v36 + 264);
            }
            else {
              float v58 = -v59;
            }
            float *v47 = (float)(v58 - *v49) / v72;
          }
          *v49++ = v58;
          float v60 = *v47++;
          float v61 = v60;
          float32x2_t v51 = vadd_f32(v51, vmul_n_f32(*(float32x2_t *)(v50 - 5), v60));
          float v53 = v53 + (float)(v60 * *(v50 - 3));
          float32x2_t v62 = vmul_n_f32(*(float32x2_t *)(v50 - 2), v60);
          float v63 = *v50;
          v50 += 6;
          float32x2_t v54 = vadd_f32(v54, v62);
          float v52 = v52 + (float)(v61 * v63);
          --v48;
        }
        while (v48);
      }
      else
      {
        float32x2_t v51 = 0;
        float v53 = 0.0;
        float v52 = 0.0;
        float32x2_t v54 = 0;
        float v55 = v72;
        float v57 = v75;
        float32x2_t v56 = (float32x2_t)v76;
      }
      float v64 = (float32x2_t *)(v73 + 32 * v25);
      float32_t v65 = v53 + (float)(v57 + v64[1].f32[0]);
      float32_t v66 = v52 + (float)(v45 + v64[3].f32[0]);
      float32x4_t v67 = &v7[4 * v25];
      float32x2_t v68 = vadd_f32(v51, vadd_f32(v56, *v64));
      v67[1].f32[0] = v65;
      v67[1].i32[1] = 0;
      float32x2_t v69 = vadd_f32(v54, vadd_f32(v44, v64[2]));
      float32x2_t *v67 = v68;
      v67[2] = v69;
      v67[3].f32[0] = v66;
      v67[3].i32[1] = 0;
      float32x4_t v70 = &v6[4 * v25];
      *float32x4_t v70 = vadd_f32(vmul_n_f32(v68, v55), *v70);
      v70[1].f32[0] = (float)(v55 * v65) + v70[1].f32[0];
      v70[2] = vadd_f32(vmul_n_f32(v69, v55), v70[2]);
      v70[3].f32[0] = (float)(v55 * v66) + v70[3].f32[0];
      ++v25;
      v27 += 76;
    }
    while (v25 != v4);
  }
  return result;
}

void physx::Dy::FeatherstoneArticulation::computeUnconstrainedVelocitiesInternal(uint64_t a1, float32x2_t *a2, float *a3, float32x2_t *a4)
{
  uint64_t v6 = a1;
  *(_DWORD *)(a1 + 880) = 0;
  float v7 = (physx::Dy::ArticulationData *)(a1 + 176);
  bzero(*(void **)(a1 + 560), (4 * *(_DWORD *)(a1 + 568)));
  size_t v8 = (32 * *(_DWORD *)(v6 + 616));
  bzero(*(void **)(v6 + 432), v8);
  bzero(*(void **)(v6 + 240), (4 * *(_DWORD *)(v6 + 652)));
  *(unsigned char *)(v6 + 685) = 0;
  physx::Dy::FeatherstoneArticulation::jcalc((physx::Dy::FeatherstoneArticulation *)v6, v7, 0);
  long long v256 = 0u;
  long long v257 = 0u;
  long long v258 = 0u;
  float32x2_t v9 = *(int **)(v6 + 336);
  v253[0] = *(int **)(v6 + 320);
  v253[1] = v9;
  float v10 = *(_OWORD **)(v6 + 368);
  v253[2] = *(int **)(v6 + 352);
  float32x2_t v254 = v10;
  uint64_t v11 = *(void *)(v6 + 208);
  *((void *)&v256 + 1) = *(void *)(v6 + 224);
  *(void *)&long long v257 = v11;
  uint64_t v12 = *(void *)(v6 + 256);
  *((void *)&v257 + 1) = *(void *)(v6 + 272);
  *(void *)&long long v258 = v12;
  uint64_t v255 = *(void *)(v6 + 672);
  uint64_t v14 = physx::Dy::FeatherstoneArticulation::computeRelativeTransformC2P(v13, (uint64_t)v7);
  uint64_t v15 = physx::Dy::FeatherstoneArticulation::computeLinkVelocities(v14, (uint64_t)v7, v253);
  *(float *)&double v16 = physx::Dy::FeatherstoneArticulation::computeSpatialInertia(v15, (uint64_t)v7);
  physx::Dy::FeatherstoneArticulation::computeZ(v16, v18, v19, v20, v21, v22, v23, v17, (uint64_t)v7, a2, v253);
  unsigned int v31 = *(_DWORD *)(v6 + 616);
  if (v31 >= 2) {
    memcpy(*(void **)(v6 + 384), *(const void **)(v6 + 368), 32 * v31);
  }
  float v32 = (float32x2_t *)(v6 + 732);
  physx::Dy::FeatherstoneArticulation::computeArticulatedSpatialInertia(v6, (uint64_t)v7, v24, v25, v26, v27, v28, v29, v30);
  uint64_t v249 = *(unsigned int *)(v6 + 616);
  float32x2_t v33 = *(_OWORD **)(v6 + 464);
  uint64_t v247 = *(void *)(v6 + 608);
  float32x4_t v248 = v33;
  uint64_t v241 = (uint64_t)v7;
  size_t v242 = v8;
  int8x16_t v240 = a3;
  if (**(unsigned char **)(v6 + 664))
  {
    v33[10] = 0u;
    v33[11] = 0u;
    v33[8] = 0u;
    v33[9] = 0u;
    v33[6] = 0u;
    v33[7] = 0u;
    v33[4] = 0u;
    v33[5] = 0u;
    v33[2] = 0u;
    v33[3] = 0u;
    *float32x2_t v33 = 0u;
    v33[1] = 0u;
  }
  else
  {
    uint64_t v34 = 0;
    unint64_t v35 = 0;
    uint64_t v36 = (float32x2_t *)(v33 + 1);
    do
    {
      int32x2_t v37 = (char *)&v278[-1] + v34;
      if (v35 >= 3) {
        int32x2_t v37 = (char *)v278 + 4 * (v35 - 3);
      }
      long long v277 = 0uLL;
      v278[0] = 0uLL;
      *(_DWORD *)int32x2_t v37 = 1065353216;
      v38.i32[0] = *(_DWORD *)(v6 + 740);
      uint64_t v39 = v277;
      float v40 = *(float *)(v6 + 752);
      float v41 = *(float *)(v6 + 764);
      float v42 = *((float *)&v277 + 2);
      uint64_t v43 = *(void *)&v278[0];
      float v44 = *((float *)v278 + 2);
      float32_t v45 = (float)((float)((float)(*(float *)&v277 * v38.f32[0]) + (float)(*((float *)&v277 + 1) * v40))
                  + (float)(*((float *)&v277 + 2) * v41))
          + (float)((float)((float)(*(float *)v278 * *(float *)(v6 + 776))
                          + (float)(*((float *)v278 + 1) * *(float *)(v6 + 788)))
                  + (float)(*((float *)v278 + 2) * *(float *)(v6 + 800)));
      int32x2_t v46 = (int32x2_t)*v32;
      float32x2_t v47 = *(float32x2_t *)(v6 + 744);
      float32x2_t v48 = *(float32x2_t *)(v6 + 756);
      float32x2_t v49 = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*v32, *(float *)&v277), vmul_n_f32(v47, *((float *)&v277 + 1))), vmul_n_f32(v48, *((float *)&v277 + 2))), vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v6 + 768), *(float *)v278), vmul_n_f32(*(float32x2_t *)(v6 + 780), *((float *)v278 + 1))), vmul_n_f32(*(float32x2_t *)(v6 + 792), *((float *)v278 + 2))));
      float32_t v50 = (float)(vmlas_n_f32(vmuls_lane_f32(*((float *)v278 + 1), v48, 1), *(float *)v278, v48.f32[0])
                  + (float)(v41 * *((float *)v278 + 2)))
          + (float)((float)((float)(*(float *)&v277 * *(float *)(v6 + 812))
                          + (float)(*((float *)&v277 + 1) * *(float *)(v6 + 824)))
                  + (float)(*((float *)&v277 + 2) * *(float *)(v6 + 836)));
      v36[-1].f32[0] = v45;
      v36[-1].i32[1] = 0;
      v38.f32[1] = v40;
      float32x2_t v51 = vadd_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32((float32x2_t)vzip2_s32(v46, (int32x2_t)v47), *((float *)&v43 + 1)), (float32x2_t)vzip1_s32(v46, (int32x2_t)v47), *(float *)&v43), v38, v44), vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v6 + 804), *(float *)&v39), vmul_n_f32(*(float32x2_t *)(v6 + 816), *((float *)&v39 + 1))), vmul_n_f32(*(float32x2_t *)(v6 + 828), v42)));
      v36[-2] = v49;
      *uint64_t v36 = v51;
      v36[1].f32[0] = v50;
      v36[1].i32[1] = 0;
      ++v35;
      v36 += 4;
      v34 += 4;
    }
    while (v35 != 6);
  }
  int8x16_t v239 = (float32x2_t *)(v6 + 732);
  if (v249 >= 2)
  {
    uint64_t v52 = *(void *)(v6 + 528);
    float v53 = (float *)v248 + 55;
    uint64_t v251 = 1;
    uint64_t v244 = *(void *)(v6 + 544);
    uint64_t v245 = *(void *)(v6 + 624);
    long long v54 = 0uLL;
    uint64_t v246 = v6;
    do
    {
      uint64_t v55 = 0;
      unint64_t v56 = 0;
      uint64_t v57 = v52;
      float v58 = (float32x2_t *)(v245 + 160 * v251);
      float32x2_t v275 = v58[15];
      __int32 v276 = v58[16].i32[0];
      float v59 = (float *)(*(void *)(v6 + 480) + 112 * v251);
      float v60 = (float *)(*(void *)(v6 + 496) + 36 * v251);
      uint64_t v52 = *(void *)(v6 + 528);
      float32x2_t v250 = v53;
      do
      {
        float v61 = (char *)&v278[-1] + v55;
        if (v56 >= 3) {
          float v61 = (char *)v278 + 4 * (v56 - 3);
        }
        long long v277 = v54;
        v278[0] = v54;
        *(_DWORD *)float v61 = 1065353216;
        float32x2_t v269 = vneg_f32(*(float32x2_t *)&v277);
        float v270 = -*((float *)&v277 + 2);
        int v271 = 0;
        float32x2_t v272 = vneg_f32(*(float32x2_t *)&v278[0]);
        float v273 = -*((float *)v278 + 2);
        int v274 = 0;
        physx::Dy::FeatherstoneArticulation::propagateImpulseW(v244 + 96 * v251, &v275, v57 + 76 * v251, (uint64_t)&v269, (uint64_t)v268);
        physx::Dy::SpatialImpulseResponseMatrix::getResponse(&v259, (uint64_t)&v248[12 * *(unsigned int *)(v247 + 40 * v251 + 32)], v268[0], v268[1], v62, v63, v64, v65, v66, v67);
        float32x2_t v262 = vneg_f32(*(float32x2_t *)v259.f32);
        float v263 = -v259.f32[2];
        int v264 = 0;
        float32x2_t v265 = vneg_f32(v260);
        float v266 = -v261;
        int v267 = 0;
        physx::Dy::FeatherstoneArticulation::propagateVelocityTestImpulseW((float32x2_t *)&v259, (uint64_t)&v275, v59, v60, v52 + 76 * v251, (float *)&v269, &v262);
        long long v54 = 0uLL;
        *(void *)(v53 - 7) = v259.i64[0];
        *(v53 - 5) = v259.f32[2];
        *(v53 - 4) = 0.0;
        *(float32x2_t *)(v53 - 3) = v260;
        *(v53 - 1) = v261;
        *float v53 = 0.0;
        v53 += 8;
        ++v56;
        v55 += 4;
        uint64_t v57 = v52;
      }
      while (v55 != 24);
      float v53 = v250 + 48;
      ++v251;
      uint64_t v6 = v246;
    }
    while (v251 != v249);
  }
  float32x2_t v68 = v253[0];
  float32x2_t v69 = v254;
  bzero(v240, (32 * *(_DWORD *)(v6 + 616)));
  uint64_t v72 = *(unsigned int *)(v6 + 616);
  if (v72)
  {
    uint64_t v73 = 0;
    char v74 = 0;
    float v75 = *(float *)(v6 + 648);
    uint64_t v76 = *(void *)(v6 + 608);
    _D2.i32[1] = 0;
    do
    {
      while (1)
      {
        __int32 v78 = *(float **)(v76 + 40 * v73 + 16);
        float v79 = v78[31];
        if (v79 == 0.0) {
          float v80 = 0.0;
        }
        else {
          float v80 = 1.0 / v79;
        }
        float v81 = 1.0 / v78[28];
        float v82 = 1.0 / v78[29];
        float v83 = (float32x2_t *)&v240[8 * v73];
        float v84 = (float32x2_t *)&v68[8 * v73];
        float v86 = v84->f32[0];
        float v85 = v84->f32[1];
        float v87 = v84[1].f32[0];
        float32x2_t v88 = v84[2];
        float v89 = v84[3].f32[0];
        float v91 = v78[26];
        float v90 = v78[27];
        float v92 = 1.0 / v78[30];
        if (v91 > 0.0 || v90 > 0.0)
        {
          float v93 = fminf(v75 * v91, 1.0);
          float v94 = fminf(v75 * v90, 1.0);
          float v95 = (float32x2_t *)&v69[2 * v73];
          float v96 = (float)(v80 * (float)(v89 * v93)) - (float)(v93 * (float)(v75 * v95[1].f32[0]));
          *float v83 = vadd_f32(*v83, vsub_f32(vmul_n_f32(vmul_n_f32(v88, v93), v80), vmul_n_f32(vmul_n_f32(*v95, v75), v93)));
          v83[1].f32[0] = v96 + v83[1].f32[0];
          float v98 = v78[2];
          float v97 = v78[3];
          float v99 = (float)(v97 * v97) + -0.5;
          float v100 = v78[1];
          float v101 = (float)((float)((float)(v85 + v85) * v100) + (float)(*v78 * (float)(v86 + v86)))
               + (float)(v98 * (float)(v87 + v87));
          float v102 = v81
               * (float)(v94
                       * (float)((float)((float)((float)(v86 + v86) * v99)
                                       - (float)((float)((float)(v100 * (float)(v87 + v87))
                                                       - (float)(v98 * (float)(v85 + v85)))
                                               * v97))
                               + (float)(*v78 * v101)));
          float v103 = v82
               * (float)(v94
                       * (float)((float)((float)((float)(v85 + v85) * v99)
                                       - (float)((float)((float)(v98 * (float)(v86 + v86))
                                                       - (float)(*v78 * (float)(v87 + v87)))
                                               * v97))
                               + (float)(v100 * v101)));
          float v104 = v92
               * (float)(v94
                       * (float)((float)((float)((float)(v87 + v87) * v99)
                                       - (float)((float)((float)(*v78 * (float)(v85 + v85))
                                                       - (float)(v100 * (float)(v86 + v86)))
                                               * v97))
                               + (float)(v98 * v101)));
          float v105 = v102 + v102;
          float v106 = v103 + v103;
          float v107 = v104 + v104;
          float v108 = (float)((float)(v100 * v106) + (float)(*v78 * v105)) + (float)(v98 * v107);
          float v109 = (float)((float)(v97 * (float)((float)(v100 * v107) - (float)(v98 * v106))) + (float)(v105 * v99))
               + (float)(*v78 * v108);
          float v110 = (float)((float)(v97 * (float)((float)(v98 * v105) - (float)(*v78 * v107))) + (float)(v106 * v99))
               + (float)(v100 * v108);
          float v111 = (float)((float)(v97 * (float)((float)(*v78 * v106) - (float)(v100 * v105))) + (float)(v107 * v99))
               + (float)(v98 * v108);
          float v112 = v94 * (float)(v75 * v95[2].f32[0]);
          float v113 = v110 - (float)(v94 * (float)(v75 * v95[2].f32[1]));
          float v114 = v111 - (float)(v94 * (float)(v75 * v95[3].f32[0]));
          float32_t v115 = v83[2].f32[0] + (float)(v109 - v112);
          float32_t v116 = v83[2].f32[1] + v113;
          v83[2].f32[0] = v115;
          v83[2].f32[1] = v116;
          v83[3].f32[0] = v83[3].f32[0] + v114;
          char v74 = 1;
        }
        float v118 = v78[24];
        float v117 = v78[25];
        float v119 = (float)((float)(v85 * v85) + (float)(v86 * v86)) + (float)(v87 * v87);
        float v120 = vmlas_n_f32(COERCE_FLOAT(vmul_f32(v88, v88).i32[1]), v88.f32[0], v88.f32[0]) + (float)(v89 * v89);
        if (v119 <= v118 && v120 <= v117) {
          break;
        }
        if (v119 > v118)
        {
          float v121 = 1.0 - (float)(sqrtf(v118) / sqrtf(v119));
          float v122 = v86 + v86;
          float v123 = v85 + v85;
          float v124 = v87 + v87;
          float v126 = v78[2];
          float v125 = v78[3];
          float v127 = (float)(v125 * v125) + -0.5;
          float v128 = v78[1];
          float v129 = (float)((float)(v123 * v128) + (float)(*v78 * v122)) + (float)(v126 * v124);
          float v130 = (float)((float)(v122 * v127) - (float)((float)((float)(v128 * v124) - (float)(v126 * v123)) * v125))
               + (float)(*v78 * v129);
          float v131 = (float)((float)(v123 * v127) - (float)((float)((float)(v126 * v122) - (float)(*v78 * v124)) * v125))
               + (float)(v128 * v129);
          float v132 = v121
               * (float)(v92
                       * (float)((float)((float)(v124 * v127)
                                       - (float)((float)((float)(*v78 * v123) - (float)(v128 * v122)) * v125))
                               + (float)(v126 * v129)));
          float v133 = (float)(v121 * (float)(v81 * v130)) + (float)(v121 * (float)(v81 * v130));
          float v134 = (float)(v121 * (float)(v82 * v131)) + (float)(v121 * (float)(v82 * v131));
          float v135 = v132 + v132;
          float v136 = (float)((float)(v128 * v134) + (float)(*v78 * v133)) + (float)(v126 * v135);
          float v137 = (float)((float)(v125 * (float)((float)(v128 * v135) - (float)(v126 * v134))) + (float)(v133 * v127))
               + (float)(*v78 * v136);
          float v138 = (float)((float)(v125 * (float)((float)(v126 * v133) - (float)(*v78 * v135))) + (float)(v134 * v127))
               + (float)(v128 * v136);
          float v139 = (float)((float)(v125 * (float)((float)(*v78 * v134) - (float)(v128 * v133))) + (float)(v135 * v127))
               + (float)(v126 * v136);
          float v140 = &v240[8 * v73];
          float v141 = v140[5] + v138;
          v140[4] = v140[4] + v137;
          v140[5] = v141;
          v140[6] = v140[6] + v139;
          char v74 = 1;
        }
        if (v120 <= v117) {
          break;
        }
        float v142 = 1.0 - (float)(sqrtf(v117) / sqrtf(v120));
        *float v83 = vadd_f32(vmul_n_f32(vmul_n_f32(v88, v80), v142), *v83);
        v83[1].f32[0] = (float)((float)(v80 * v89) * v142) + v83[1].f32[0];
        ++v73;
        char v74 = 1;
        if (v73 == v72) {
          goto LABEL_34;
        }
      }
      ++v73;
    }
    while (v73 != v72);
    if ((v74 & 1) == 0) {
      goto LABEL_49;
    }
LABEL_34:
    float v143 = (float32x2_t *)v6;
    uint64_t v144 = (v72 - 1);
    if (v144)
    {
      uint64_t v145 = v144 - 1;
      float32x2_t v146 = (int *)(v76 + 40 * v144 + 32);
      uint64_t v147 = (uint64_t)&v240[8 * v144];
      uint64_t v148 = *(void *)(v6 + 528) + 76 * v144;
      float32x2_t v149 = (float32x2_t *)(*(void *)(v6 + 624) + 160 * v144 + 120);
      uint64_t v150 = *(void *)(v6 + 544) + 96 * v144;
      do
      {
        physx::Dy::FeatherstoneArticulation::propagateImpulseW(v150, v149, v148, v147, (uint64_t)&v277);
        int v151 = *v146;
        v146 -= 10;
        uint64_t v152 = (float32x2_t *)&v240[8 * v151];
        *uint64_t v152 = vadd_f32(*(float32x2_t *)&v277, *v152);
        v152[1].f32[0] = *((float *)&v277 + 2) + v152[1].f32[0];
        float32x2_t v71 = vadd_f32(*(float32x2_t *)&v278[0], v152[2]);
        v152[2] = v71;
        v152[3].f32[0] = *((float *)v278 + 2) + v152[3].f32[0];
        LODWORD(v152) = v145--;
        v147 -= 32;
        v148 -= 76;
        v149 -= 20;
        v150 -= 96;
      }
      while (v152);
    }
    uint64_t v6 = (uint64_t)v143;
    float32x4_t v153 = (float32x2_t *)v143[40];
    float32x2_t v154 = v143[79];
    float32x2_t v155 = v143[30];
    if (**(unsigned char **)&v143[83])
    {
      int8x16_t v176 = a4;
      *a4 = 0;
      a4[1] = 0;
      a4[3].i32[0] = 0;
      a4[2] = 0;
    }
    else
    {
      float v156 = *v240;
      float v157 = v240[1];
      float v158 = -v157;
      float v159 = v240[2];
      _D2.f32[0] = v240[4];
      float v160 = v240[5];
      float v161 = -v160;
      v71.f32[0] = v240[6];
      v162.i32[0] = v143[92].i32[1];
      float v163 = v143[94].f32[0];
      float v164 = v143[95].f32[1];
      float32_t v165 = (float)((float)((float)-(float)(v157 * v163) - (float)(*v240 * v162.f32[0])) - (float)(v159 * v164))
           + (float)((float)((float)-(float)(v160 * v143[98].f32[1]) - (float)(_D2.f32[0] * v143[97].f32[0]))
                   - (float)(v71.f32[0] * v143[100].f32[0]));
      int32x2_t v166 = (int32x2_t)*v239;
      float32x2_t v167 = v143[93];
      _D22 = v239[3];
      float32x2_t v169 = vadd_f32(vsub_f32(vsub_f32(vmul_n_f32(v167, -v157), vmul_n_f32(*v239, *v240)), vmul_n_f32(_D22, v159)), vsub_f32(vsub_f32(vmul_n_f32(v239[6], v161), vmul_n_f32(v143[96], _D2.f32[0])), vmul_n_f32(v143[99], v71.f32[0])));
      __asm { FMLS            S23, S2, V22.S[0] }
      float32_t v175 = (float)(_S23 - (float)(v164 * v71.f32[0]))
           + (float)((float)((float)-(float)(v157 * v143[103].f32[0]) - (float)(*v240 * v143[101].f32[1]))
                   - (float)(v159 * v143[104].f32[1]));
      int8x16_t v176 = a4;
      a4[1].f32[0] = v165;
      a4[1].i32[1] = 0;
      v162.f32[1] = v163;
      float32x2_t v177 = vadd_f32(vmls_lane_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip2_s32(v166, (int32x2_t)v167), v161), (float32x2_t)vzip1_s32(v166, (int32x2_t)v167), _D2, 0), v162, v71, 0), vsub_f32(vsub_f32(vmul_n_f32(v143[102], v158), vmul_n_f32(v239[9], v156)), vmul_n_f32(v239[12], v159)));
      *a4 = v169;
      a4[2] = v177;
      a4[3].f32[0] = v175;
      *float32x4_t v153 = vadd_f32(v169, *v153);
      v153[1].f32[0] = v165 + v153[1].f32[0];
      v153[2] = vadd_f32(a4[2], v153[2]);
      v153[3].f32[0] = a4[3].f32[0] + v153[3].f32[0];
    }
    v176[3].i32[1] = 0;
    uint64_t v178 = v143[77].u32[0];
    if (v178 >= 2)
    {
      unint64_t v179 = 0;
      uint64_t v252 = 32 * v178 - 32;
      float32x4_t v180 = (unsigned int *)(*(void *)&v154 + 152);
      float32x4_t v181 = (unsigned int *)(v76 + 72);
      float32x4_t v182 = a4;
      float32x4_t v183 = v143;
      uint64_t v184 = 280;
      uint64_t v185 = 112;
      uint64_t v186 = 36;
      uint64_t v187 = 76;
      do
      {
        unsigned int v188 = *v180;
        v180 += 20;
        uint64_t v189 = *(void *)&v155 + 4 * v188;
        unsigned int v190 = *v181;
        v181 += 10;
        physx::Dy::FeatherstoneArticulation::propagateVelocityW(*(void *)&v183[78] + v184, (float *)(*(void *)&v183[60] + v185), (float *)(*(void *)&v183[62] + v186), *(void *)&v183[66] + v187, &v240[v179 / 4 + 8], v189, &v182[4 * v190], (float32x2_t *)&v277);
        float32x2_t v191 = &a4[v179 / 8 + 4];
        float v192 = *((float *)&v277 + 2);
        v191[1].i32[0] = DWORD2(v277);
        v191[1].i32[1] = 0;
        float v193 = *((float *)v278 + 2);
        v191[3].i32[0] = DWORD2(v278[0]);
        v191[3].i32[1] = 0;
        float32x4_t v194 = &v153[v179 / 8];
        float32x2_t v195 = (float32x2_t)v277;
        *float32x2_t v191 = (float32x2_t)v277;
        v194[5].f32[0] = v192 + v153[v179 / 8 + 5].f32[0];
        float32x2_t v196 = *(float32x2_t *)&v278[0];
        v191[2] = *(float32x2_t *)&v278[0];
        v194[4] = vadd_f32(v195, v153[v179 / 8 + 4]);
        v194[6] = vadd_f32(v196, v153[v179 / 8 + 6]);
        v196.i32[0] = v153[v179 / 8 + 7].i32[0];
        v179 += 32;
        v184 += 160;
        v194[7].f32[0] = v193 + v196.f32[0];
        float32x4_t v182 = a4;
        v185 += 112;
        v186 += 36;
        v187 += 76;
      }
      while (v252 != v179);
      uint64_t v197 = v183[77].u32[0];
      uint64_t v6 = (uint64_t)v183;
      if (v197 >= 2)
      {
        float32x2_t v198 = v183[30];
        float32x2_t v199 = v183[28];
        uint64_t v200 = 1;
        float32x2_t v201 = v183[79];
        do
        {
          uint64_t v202 = *(unsigned __int8 *)(*(void *)&v201 + 80 * v200 + 76);
          if (*(unsigned char *)(*(void *)&v201 + 80 * v200 + 76))
          {
            unsigned int v203 = *(_DWORD *)(*(void *)&v201 + 80 * v200 + 72);
            do
            {
              *(float *)(*(void *)&v199 + 4 * v203) = *(float *)(*(void *)&v198 + 4 * v203)
                                                        + *(float *)(*(void *)&v199 + 4 * v203);
              *(_DWORD *)(*(void *)&v198 + 4 * v203++) = 0;
              --v202;
            }
            while (v202);
          }
          ++v200;
        }
        while (v200 != v197);
      }
    }
  }
LABEL_49:
  uint64_t v204 = physx::Dy::FeatherstoneArticulation::computeC(v70, v241, (uint64_t *)v253);
  physx::Dy::FeatherstoneArticulation::computeArticulatedSpatialZ(v205, v204, v241, v253);
  physx::Dy::FeatherstoneArticulation::computeLinkAcceleration(v6, v241, (uint64_t)v253);
  if (*(_DWORD *)(v6 + 616) >= 2u)
  {
    float32x2_t v254 = *(_OWORD **)(v6 + 384);
    physx::Dy::FeatherstoneArticulation::computeZAForceInv(v6, v241, (uint64_t)v253);
    float32x2_t v206 = v254;
    uint64_t v207 = (*(_DWORD *)(v6 + 616) - 1);
    if (v207 >= 2)
    {
      uint64_t v208 = v207 - 1;
      float32x4_t v209 = (unsigned int *)(*(void *)(v6 + 608) + 40 * v207 + 32);
      uint64_t v210 = (uint64_t)&v254[2 * v207 + 1];
      float32x4_t v211 = (float32x2_t *)(*(void *)(v6 + 624) + 160 * v207 + 124);
      do
      {
        float v212 = *(float *)(v210 - 8);
        _S1 = v211[-1].u32[1];
        float v214 = *(float *)(v210 + 8);
        unsigned int v215 = *v209;
        v209 -= 10;
        float32x4_t v216 = (float32x2_t *)&v206[2 * v215];
        _D3 = *(float32x2_t *)(v210 - 16);
        float32x2_t v218 = *v211;
        v211 -= 20;
        float32x2_t v219 = v218;
        float32x2_t v220 = (float32x2_t)__PAIR64__(v218.u32[1], _S1);
        float32x2_t v221 = vadd_f32(_D3, *v216);
        float32_t v222 = v212 + v216[1].f32[0];
        float32x2_t v223 = *(float32x2_t *)v210;
        v210 -= 32;
        float32x2_t v224 = (float32x2_t)vdup_lane_s32((int32x2_t)_D3, 0);
        __asm { FMLA            S16, S1, V3.S[1] }
        _D3.f32[0] = v212;
        v224.f32[0] = v212;
        float v226 = _S16 + v214;
        *float32x4_t v216 = v221;
        v216[1].f32[0] = v222;
        float v227 = v216[3].f32[0];
        v216[2] = vadd_f32(vadd_f32(vmla_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_f32(_D3, vneg_f32(v220))), v224, v219), v223), v216[2]);
        v216[3].f32[0] = v226 + v227;
      }
      while ((unint64_t)(v208-- & 0xFFFFFFFE));
    }
    _OWORD *v206 = 0u;
    v206[1] = 0u;
  }
  *(unsigned char *)(v6 + 684) = 1;
  bzero(*(void **)(v6 + 368), v242);
  *(unsigned char *)(v6 + 16) = 0;
  *(void *)(v6 + 8) = 0;
  uint64_t v229 = *(unsigned int *)(v6 + 616);
  if (v229)
  {
    uint64_t v230 = 0;
    uint64_t v231 = *(void *)(v6 + 696);
    uint64_t v232 = *(void *)(v6 + 448);
    float32x4_t v233 = *(_OWORD **)(v6 + 712);
    uint64_t v234 = 28 * v229;
    float32x4_t v235 = (uint64_t *)(*(void *)(v6 + 608) + 16);
    do
    {
      uint64_t v236 = *v235;
      v235 += 5;
      uint64_t v237 = v231 + v230;
      *(_OWORD *)uint64_t v237 = *(_OWORD *)v236;
      *(void *)(v237 + 16) = *(void *)(v236 + 16);
      *(_DWORD *)(v237 + 24) = *(_DWORD *)(v236 + 24);
      uint64_t v238 = v232 + v230;
      *(_OWORD *)uint64_t v238 = *(_OWORD *)v236;
      *(void *)(v238 + 16) = *(void *)(v236 + 16);
      *(_DWORD *)(v238 + 24) = *(_DWORD *)(v236 + 24);
      *v233++ = xmmword_23435FBB0;
      v230 += 28;
    }
    while (v234 != v230);
  }
}

void physx::Dy::FeatherstoneArticulation::updateBodies(float32x2_t **this, physx::Dy::FeatherstoneArticulation *a2, __n128 a3, float32x4_t a4, double a5)
{
  float v5 = (physx::Dy::FeatherstoneArticulation *)this;
  uint64_t v282 = *MEMORY[0x263EF8340];
  uint64_t v6 = this[76];
  uint64_t v7 = *((unsigned int *)this + 154);
  size_t v8 = this[40];
  float32x2_t v9 = this[84];
  unint64_t v277 = a3.n128_u64[0];
  *((_DWORD *)this + 162) = a3.n128_u32[0];
  float v10 = this[56];
  if (*((unsigned char *)this + 864)) {
    _ZF = v7 == 0;
  }
  else {
    _ZF = 1;
  }
  if (!_ZF)
  {
    uint64_t v12 = v10 + 3;
    uint64_t v13 = (uint64_t *)&v6[2];
    uint64_t v14 = v7;
    do
    {
      uint64_t v15 = *v13;
      v13 += 5;
      *(_OWORD *)v12[-3].f32 = *(_OWORD *)v15;
      a3.n128_u64[0] = *(void *)(v15 + 16);
      v12[-1] = (float32x2_t)a3.n128_u64[0];
      a3.n128_u32[0] = *(_DWORD *)(v15 + 24);
      v12->i32[0] = a3.n128_u32[0];
      uint64_t v12 = (float32x2_t *)((char *)v12 + 28);
      --v14;
    }
    while (v14);
  }
  if (a2)
  {
    uint64_t v247 = v10;
    uint64_t v245 = v8;
    if (this[83]->i8[0])
    {
      uint64_t v246 = this[38];
    }
    else
    {
      double v16 = (float32x2_t *)v6[2];
      uint64_t v17 = this[38];
      float v18 = v17[3].f32[0];
      float32x2_t v19 = v17[2];
      float32x2_t v20 = v16[2];
      float v21 = v16[3].f32[0];
      float v22 = v17->f32[0] * *(float *)&v277;
      float v23 = v17->f32[1] * *(float *)&v277;
      uint64_t v246 = v17;
      float v24 = v17[1].f32[0] * *(float *)&v277;
      float v25 = (float)((float)(v23 * v23) + (float)(v22 * v22)) + (float)(v24 * v24);
      if (v25 >= 1.0e-24)
      {
        float v52 = sqrtf(v25);
        float v53 = v22 * (float)(1.0 / v52);
        float v54 = v23 * (float)(1.0 / v52);
        float v55 = v24 * (float)(1.0 / v52);
        __float2 v56 = __sincosf_stret(v52 * 0.5);
        a4.f32[0] = v56.__cosval;
        *(float *)&a5 = v56.__sinval * v53;
        float v26 = v56.__sinval * v54;
        float v27 = v56.__sinval * v55;
      }
      else
      {
        a4.i32[0] = 1.0;
        a5 = 0.0;
        float v26 = 0.0;
        float v27 = 0.0;
      }
      float v58 = v16[1].f32[0];
      float v57 = v16[1].f32[1];
      float v59 = v16->f32[1];
      float v60 = (float)((float)((float)(v26 * v57) + (float)(a4.f32[0] * v59)) + (float)(v27 * v16->f32[0]))
          - (float)(v58 * *(float *)&a5);
      float v61 = (float)((float)((float)(v27 * v57) + (float)(a4.f32[0] * v58)) + (float)(*(float *)&a5 * v59))
          - (float)(v16->f32[0] * v26);
      float v62 = (float)((float)((float)(*(float *)&a5 * v57) + (float)(a4.f32[0] * v16->f32[0])) + (float)(v26 * v58))
          - (float)(v59 * v27);
      float v63 = (float)((float)((float)(a4.f32[0] * v57) - (float)(*(float *)&a5 * v16->f32[0])) - (float)(v26 * v59))
          - (float)(v27 * v58);
      a4.f32[0] = sqrtf((float)((float)((float)(v60 * v60) + (float)(v62 * v62)) + (float)(v61 * v61)) + (float)(v63 * v63));
      *(float *)&a5 = (float)(v18 * *(float *)&v277) + v21;
      v16->f32[0] = v62 / a4.f32[0];
      v16->f32[1] = v60 / a4.f32[0];
      v16[1].f32[0] = v61 / a4.f32[0];
      v16[1].f32[1] = v63 / a4.f32[0];
      a3.n128_u64[0] = (unint64_t)vadd_f32(vmul_n_f32(v19, *(float *)&v277), v20);
      v16[2] = (float32x2_t)a3.n128_u64[0];
      v16[3].i32[0] = LODWORD(a5);
    }
    if (v7 < 2) {
      goto LABEL_86;
    }
    uint64_t v64 = *((void *)v5 + 36);
    uint64_t v65 = 1;
    uint64_t v66 = 84;
    float v67 = -0.5;
    float32x2_t v272 = v6;
    uint64_t v273 = *((void *)v5 + 79);
    uint64_t v270 = *((void *)v5 + 74);
    uint64_t v271 = *((void *)v5 + 32);
    float32x2_t v68 = (float *)&unk_23441F000;
    uint64_t v269 = *((void *)v5 + 28);
    uint64_t v250 = v64;
    while (1)
    {
      float32x2_t v69 = &v6[5 * v65];
      uint64_t v70 = (float *)v6[5 * v69[4].u32[0] + 2];
      float v71 = *v70;
      float v72 = v70[1];
      float v74 = v70[2];
      float v73 = v70[3];
      float v76 = v70[4];
      float v75 = v70[5];
      float v77 = v70[6];
      float32x2_t v79 = v69[2];
      float32x2_t v78 = v69[3];
      uint64_t v80 = *(unsigned int *)(v273 + 80 * v65 + 72);
      uint64_t v6 = (float32x2_t *)(v269 + 4 * v80);
      float v81 = (float *)(v64 + 4 * v80);
      float v82 = (float *)(v271 + 4 * v80);
      float v84 = *(float *)(*(void *)&v78 + 44);
      float v83 = *(float *)(*(void *)&v78 + 48);
      float v85 = *(float *)(*(void *)&v78 + 52);
      float v87 = *(float *)(*(void *)&v78 + 16);
      float v86 = *(float *)(*(void *)&v78 + 20);
      float v88 = *(float *)(*(void *)&v78 + 24);
      float v89 = (float *)(v270 + 16 * v65);
      float v90 = *v89;
      float v91 = v89[1];
      float v92 = v89[2];
      float v93 = v89[3];
      switch(*(unsigned char *)(*(void *)&v78 + 270))
      {
        case 0:
          a4.i32[1] = HIDWORD(v277);
          a4.f32[0] = *v82 + (float)((float)(v6->f32[0] + *v81) * *(float *)&v277);
          *float v82 = a4.f32[0];
          uint64_t v94 = *(unsigned __int8 *)(*(void *)&v78 + 252);
          if (*(unsigned char *)(*(void *)&v78 + v94 + 258) == 1)
          {
            uint64_t v95 = *(void *)&v78 + 8 * v94;
            float v96 = *(float *)(v95 + 56);
            uint64_t v6 = v272;
            if (a4.f32[0] < v96)
            {
              *float v82 = v96;
              a4.f32[0] = v96;
            }
            float v97 = v73;
            float v98 = v71;
            float v99 = *(float *)(v95 + 60);
            if (a4.f32[0] > v99)
            {
              *float v82 = v99;
              a4.f32[0] = v99;
            }
          }
          else
          {
            float v97 = v73;
            float v98 = v71;
            uint64_t v6 = v272;
          }
          float v133 = v86 + v86;
          float v134 = v88 + v88;
          float v135 = v67 + (float)(v93 * v93);
          float v136 = (float)((float)(v133 * v91) + (float)(v90 * (float)(v87 + v87))) + (float)(v92 * (float)(v88 + v88));
          a3.n128_f32[0] = -v92;
          float v137 = (float)((float)(v93 * (float)((float)(v91 * (float)(v88 + v88)) - (float)(v92 * v133)))
                       + (float)((float)(v87 + v87) * v135))
               + (float)(v90 * v136);
          float v100 = -v90;
          float v138 = (float)((float)((float)((float)(v92 * (float)(v87 + v87)) - (float)(v90 * v134)) * v93)
                       + (float)(v133 * v135))
               + (float)(v91 * v136);
          float v101 = -v91;
          float v139 = (float)((float)((float)((float)(v90 * v133) - (float)(v91 * (float)(v87 + v87))) * v93)
                       + (float)(v134 * v135))
               + (float)(v92 * v136);
          float v140 = (float *)(*((void *)v5 + 64) + 76 * v65);
          float v141 = v137 - v84;
          float v142 = v139 - v85;
          float v143 = a4.f32[0] * v140[4];
          float v144 = a4.f32[0] * v140[5];
          a4.f32[0] = v141 + (float)(a4.f32[0] * v140[3]);
          *(float *)&a5 = (float)(v138 - v83) + v143;
          float v86 = v142 + v144;
          float v71 = v98;
          float v73 = v97;
          goto LABEL_85;
        case 1:
          float v263 = *(float *)(*(void *)&v78 + 44);
          float v265 = *(float *)(*(void *)&v78 + 48);
          float v267 = *(float *)(*(void *)&v78 + 52);
          float v102 = *v82 + (float)((float)(v6->f32[0] + *v81) * *(float *)&v277);
          float v256 = v74;
          float v257 = v72;
          float v254 = v73;
          float v255 = v71;
          float v259 = *(float *)(*(void *)&v78 + 20);
          float v261 = *(float *)(*(void *)&v78 + 24);
          if (v102 <= 6.2832)
          {
            uint64_t v6 = v272;
            if (v102 < -6.2832) {
              float v102 = v102 + 12.566;
            }
          }
          else
          {
            float v102 = v102 + v68[949];
            uint64_t v6 = v272;
          }
          if (v102 < v68[949]) {
            float v102 = v68[949];
          }
          if (v102 > 12.566) {
            float v102 = 12.566;
          }
          *float v82 = v102;
          uint64_t v145 = (float *)(*((void *)v5 + 64) + 76 * v65);
          __float2 v146 = __sincosf_stret(v102 * v67);
          a4.f32[0] = v146.__cosval;
          float v67 = -0.5;
          float32x2_t v68 = (float *)&unk_23441F000;
          *(float *)&a5 = *v145 * v146.__sinval;
          float v147 = v145[1] * v146.__sinval;
          a3.n128_f32[0] = v145[2] * v146.__sinval;
          if (v146.__cosval < 0.0)
          {
            *(float *)&a5 = -*(float *)&a5;
            float v147 = -v147;
            a3.n128_f32[0] = -a3.n128_f32[0];
            a4.f32[0] = -v146.__cosval;
          }
          float v148 = (float)((float)((float)(v93 * *(float *)&a5) + (float)(a4.f32[0] * v90)) + (float)(v147 * v92))
               - (float)(v91 * a3.n128_f32[0]);
          float v149 = (float)((float)((float)(v93 * v147) + (float)(a4.f32[0] * v91)) + (float)(a3.n128_f32[0] * v90))
               - (float)(v92 * *(float *)&a5);
          float v150 = (float)((float)((float)(v93 * a3.n128_f32[0]) + (float)(a4.f32[0] * v92)) + (float)(*(float *)&a5 * v91))
               - (float)(v90 * v147);
          float v151 = (float)((float)((float)(a4.f32[0] * v93) - (float)(*(float *)&a5 * v90)) - (float)(v147 * v91))
               - (float)(a3.n128_f32[0] * v92);
          float v152 = sqrtf((float)((float)((float)(v149 * v149) + (float)(v148 * v148)) + (float)(v150 * v150))+ (float)(v151 * v151));
          float v90 = v148 / v152;
          float v91 = v149 / v152;
          float v92 = v150 / v152;
          float v93 = v151 / v152;
          float v153 = (float)(v93 * v93) + -0.5;
          float v154 = (float)((float)((float)(v259 + v259) * (float)(v149 / v152))
                       + (float)((float)(v148 / v152) * (float)(v87 + v87)))
               + (float)(v92 * (float)(v261 + v261));
          a3.n128_f32[0] = -v92;
          float v155 = (float)((float)(v93
                               * (float)((float)((float)(v149 / v152) * (float)(v261 + v261))
                                       - (float)(v92 * (float)(v259 + v259))))
                       + (float)((float)(v87 + v87) * v153))
               + (float)((float)(v148 / v152) * v154);
          float v100 = -(float)(v148 / v152);
          float v156 = (float)((float)(v93 * (float)((float)(v92 * (float)(v87 + v87)) - (float)(v90 * (float)(v261 + v261))))
                       + (float)((float)(v259 + v259) * v153))
               + (float)((float)(v149 / v152) * v154);
          float v101 = -(float)(v149 / v152);
          a4.f32[0] = v155 - v263;
          *(float *)&a5 = v156 - v265;
          float v86 = (float)((float)((float)(v93
                                      * (float)((float)(v90 * (float)(v259 + v259)) - (float)(v91 * (float)(v87 + v87))))
                              + (float)((float)(v261 + v261) * v153))
                      + (float)(v92 * v154))
              - v267;
          uint64_t v64 = v250;
          goto LABEL_84;
        case 2:
          uint64_t v103 = *(unsigned __int8 *)(v273 + 80 * v65 + 76);
          float v252 = v77;
          float v253 = v75;
          float v266 = *(float *)(*(void *)&v78 + 48);
          float v268 = *(float *)(*(void *)&v78 + 52);
          float v262 = *(float *)(*(void *)&v78 + 24);
          float v264 = *(float *)(*(void *)&v78 + 44);
          float v260 = *(float *)(*(void *)&v78 + 20);
          float v251 = *(float *)(*(void *)&v78 + 16);
          if (v103 > 2)
          {
            float v157 = (float *)v247 + 7 * v65;
            float v159 = *v157;
            float v158 = v157[1];
            float v160 = v157[2];
            float v161 = v157[3];
            float32x2_t v162 = (float *)&v246[4 * v65];
            float v163 = *v162 * *(float *)&v277;
            float v164 = v162[1] * *(float *)&v277;
            float v165 = v162[2] * *(float *)&v277;
            float v166 = (float)((float)(v164 * v164) + (float)(v163 * v163)) + (float)(v165 * v165);
            float v5 = (physx::Dy::FeatherstoneArticulation *)this;
            if (v166 >= 1.0e-24)
            {
              float v171 = sqrtf(v166);
              float v249 = v76;
              float v275 = v164 * (float)(1.0 / v171);
              float v276 = v163 * (float)(1.0 / v171);
              float v274 = v165 * (float)(1.0 / v171);
              float v172 = v72;
              float v173 = v74;
              float v174 = v71;
              float v175 = v73;
              __float2 v176 = __sincosf_stret(v171 * 0.5);
              float cosval = v176.__cosval;
              float v73 = v175;
              float v71 = v174;
              float v74 = v173;
              float v72 = v172;
              float v168 = v176.__sinval * v276;
              float v169 = v176.__sinval * v275;
              float v76 = v249;
              float v170 = v176.__sinval * v274;
            }
            else
            {
              float cosval = 1.0;
              float v168 = 0.0;
              float v169 = 0.0;
              float v170 = 0.0;
            }
            uint64_t v6 = v272;
            long long v281 = *(_OWORD *)this[74][2 * v65].f32;
            *(float *)&long long v279 = (float)((float)((float)(v161 * v168) + (float)(cosval * v159)) + (float)(v169 * v160))
                            - (float)(v158 * v170);
            *((float *)&v279 + 1) = (float)((float)((float)(v161 * v169) + (float)(cosval * v158)) + (float)(v170 * v159))
                                  - (float)(v160 * v168);
            *((float *)&v279 + 2) = (float)((float)((float)(v161 * v170) + (float)(cosval * v160)) + (float)(v168 * v158))
                                  - (float)(v159 * v169);
            *((float *)&v279 + 3) = (float)((float)((float)(cosval * v161) - (float)(v168 * v159)) - (float)(v169 * v158))
                                  - (float)(v170 * v160);
            v278[0] = v71;
            v278[1] = v72;
            _OWORD v278[2] = v74;
            v278[3] = v73;
            float v177 = v72;
            float v178 = v74;
            float v179 = v71;
            float v180 = v73;
            physx::Dy::computeSphericalJointPositions((float *)v280, (float *)&v281, (float *)&v279, v278, (uint64_t)v82, (uint64_t)this[64] + 76 * v65);
            float v71 = v179;
            float v74 = v178;
            float v72 = v177;
            float v91 = *((float *)v280 + 1);
            float v90 = *(float *)v280;
            float v93 = *((float *)v280 + 3);
            float v92 = *((float *)v280 + 2);
            float v181 = (float)(*((float *)v280 + 3) * *((float *)v280 + 3)) + -0.5;
            float v182 = (float)((float)((float)(v260 + v260) * *((float *)v280 + 1))
                         + (float)(*(float *)v280 * (float)(v251 + v251)))
                 + (float)(*((float *)v280 + 2) * (float)(v262 + v262));
            a3.n128_f32[0] = -*((float *)v280 + 2);
            float v100 = -*(float *)v280;
            float v101 = -*((float *)v280 + 1);
            a4.f32[0] = (float)((float)((float)(*((float *)v280 + 3)
                                              * (float)((float)(*((float *)v280 + 1) * (float)(v262 + v262))
                                                      - (float)(*((float *)v280 + 2) * (float)(v260 + v260))))
                                      + (float)((float)(v251 + v251) * v181))
                              + (float)(*(float *)v280 * v182))
                      - v264;
            float v73 = v180;
            float v67 = -0.5;
            *(float *)&a5 = (float)((float)((float)((float)((float)(*((float *)v280 + 2) * (float)(v251 + v251))
                                                          - (float)(*(float *)v280 * (float)(v262 + v262)))
                                                  * *((float *)v280 + 3))
                                          + (float)((float)(v260 + v260) * v181))
                                  + (float)(*((float *)v280 + 1) * v182))
                          - v266;
            float v86 = (float)((float)((float)((float)((float)(*(float *)v280 * (float)(v260 + v260))
                                                - (float)(*((float *)v280 + 1) * (float)(v251 + v251)))
                                        * *((float *)v280 + 3))
                                + (float)((float)(v262 + v262) * v181))
                        + (float)(*((float *)v280 + 2) * v182))
                - v268;
            float32x2_t v68 = (float *)&unk_23441F000;
            float v77 = v252;
            float v75 = v253;
            goto LABEL_85;
          }
          float v254 = v73;
          float v255 = v71;
          float v248 = v76;
          float v256 = v74;
          float v257 = v72;
          if (!*(unsigned char *)(v273 + 80 * v65 + 76))
          {
            float v106 = 1.0;
            float v122 = 0.0;
            float v123 = 0.0;
            float v124 = 0.0;
            goto LABEL_83;
          }
          float v104 = (float *)((char *)this[64] + v66);
          float v105 = 0.0;
          float v106 = 1.0;
          float v107 = 0.0;
          float v108 = 0.0;
          break;
        case 3:
          float v125 = v86 + v86;
          float v126 = v88 + v88;
          float v127 = v67 + (float)(v93 * v93);
          float v128 = (float)((float)(v125 * v91) + (float)(v90 * (float)(v87 + v87))) + (float)(v92 * (float)(v88 + v88));
          a3.n128_f32[0] = -v92;
          float v129 = v73;
          float v130 = (float)((float)(v93 * (float)((float)(v91 * (float)(v88 + v88)) - (float)(v92 * v125)))
                       + (float)((float)(v87 + v87) * v127))
               + (float)(v90 * v128);
          float v100 = -v90;
          float v131 = (float)((float)((float)((float)(v92 * (float)(v87 + v87)) - (float)(v90 * v126)) * v93)
                       + (float)(v125 * v127))
               + (float)(v91 * v128);
          float v101 = -v91;
          float v132 = (float)((float)((float)((float)(v90 * v125) - (float)(v91 * (float)(v87 + v87))) * v93)
                       + (float)(v126 * v127))
               + (float)(v92 * v128);
          a4.f32[0] = v130 - v84;
          float v73 = v129;
          *(float *)&a5 = v131 - v83;
          float v86 = v132 - v85;
          uint64_t v6 = v272;
          goto LABEL_85;
        default:
          float v100 = -v90;
          float v101 = -v91;
          a3.n128_f32[0] = -v92;
          goto LABEL_85;
      }
      do
      {
        float v109 = *v82 + (float)((float)(v6->f32[0] + *v81) * *(float *)&v277);
        if (v109 <= 6.2832)
        {
          if (v109 >= -6.2832) {
            goto LABEL_58;
          }
          float v110 = 12.566;
        }
        else
        {
          float v110 = v68[949];
        }
        float v109 = v109 + v110;
LABEL_58:
        if (v109 < v68[949]) {
          float v109 = v68[949];
        }
        if (v109 > 12.566) {
          float v109 = 12.566;
        }
        *v82++ = v109;
        __float2 v111 = __sincosf_stret(v109 * -0.5);
        a4.f32[0] = v111.__cosval;
        float32x2_t v68 = (float *)&unk_23441F000;
        *(float *)&a5 = *(v104 - 2) * v111.__sinval;
        float v112 = *(v104 - 1) * v111.__sinval;
        float v113 = *v104;
        v104 += 6;
        a3.n128_f32[0] = v113 * v111.__sinval;
        if (v111.__cosval < 0.0)
        {
          *(float *)&a5 = -*(float *)&a5;
          float v112 = -v112;
          a3.n128_f32[0] = -a3.n128_f32[0];
          a4.f32[0] = -v111.__cosval;
        }
        float v114 = (float)((float)((float)(v93 * *(float *)&a5) + (float)(a4.f32[0] * v90)) + (float)(v112 * v92))
             + (float)((float)-v91 * a3.n128_f32[0]);
        float v115 = (float)((float)((float)(v93 * v112) + (float)(a4.f32[0] * v91)) + (float)(a3.n128_f32[0] * v90))
             + (float)((float)-v92 * *(float *)&a5);
        float v116 = (float)((float)((float)(v93 * a3.n128_f32[0]) + (float)(a4.f32[0] * v92)) + (float)(*(float *)&a5 * v91))
             + (float)((float)-v90 * v112);
        float v117 = (float)((float)((float)(a4.f32[0] * v93) - (float)(*(float *)&a5 * v90)) - (float)(v112 * v91))
             - (float)(a3.n128_f32[0] * v92);
        float v118 = sqrtf((float)((float)((float)(v115 * v115) + (float)(v114 * v114)) + (float)(v116 * v116))+ (float)(v117 * v117));
        float v119 = v114 / v118;
        float v120 = v116 / v118;
        float v121 = v117 / v118;
        float v122 = (float)((float)((float)(v108 * v121) + (float)(v106 * v119)) + (float)(v107 * (float)(v116 / v118)))
             - (float)((float)(v115 / v118) * v105);
        float v123 = (float)((float)((float)(v107 * v121) + (float)(v106 * (float)(v115 / v118))) + (float)(v105 * v119))
             - (float)(v120 * v108);
        float v124 = (float)((float)((float)(v105 * v121) + (float)(v106 * v120)) + (float)(v108 * (float)(v115 / v118)))
             - (float)(v119 * v107);
        uint64_t v6 = (float32x2_t *)((char *)v6 + 4);
        ++v81;
        float v106 = (float)((float)((float)(v106 * v121) - (float)(v108 * v119)) - (float)(v107 * (float)(v115 / v118)))
             - (float)(v105 * v120);
        float v105 = v124;
        float v107 = v123;
        float v108 = v122;
        --v103;
      }
      while (v103);
LABEL_83:
      float v67 = -0.5;
      float v183 = (float)(v106 * v106) + -0.5;
      float v184 = (float)((float)((float)(v260 + v260) * v123) + (float)(v122 * (float)(v251 + v251)))
           + (float)(v124 * (float)(v262 + v262));
      a3.n128_f32[0] = -v124;
      float v100 = -v122;
      float v101 = -v123;
      a4.f32[0] = (float)((float)((float)(v106
                                        * (float)((float)(v123 * (float)(v262 + v262))
                                                - (float)(v124 * (float)(v260 + v260))))
                                + (float)((float)(v251 + v251) * v183))
                        + (float)(v122 * v184))
                - v264;
      *(float *)&a5 = (float)((float)((float)((float)((float)(v124 * (float)(v251 + v251))
                                                    - (float)(v122 * (float)(v262 + v262)))
                                            * v106)
                                    + (float)((float)(v260 + v260) * v183))
                            + (float)(v123 * v184))
                    - v266;
      float v86 = (float)((float)((float)((float)((float)(v122 * (float)(v260 + v260)) - (float)(v123 * (float)(v251 + v251)))
                                  * v106)
                          + (float)((float)(v262 + v262) * v183))
                  + (float)(v124 * v184))
          - v268;
      float v90 = v122;
      float v91 = v123;
      float v92 = v124;
      float v93 = v106;
      uint64_t v6 = v272;
      float v5 = (physx::Dy::FeatherstoneArticulation *)this;
      uint64_t v64 = v250;
      float v76 = v248;
      float v77 = v252;
      float v75 = v253;
LABEL_84:
      float v74 = v256;
      float v72 = v257;
      float v73 = v254;
      float v71 = v255;
LABEL_85:
      float v185 = (float)((float)((float)(v71 * v93) + (float)(v73 * v100)) + (float)(v72 * a3.n128_f32[0]))
           + (float)(v91 * v74);
      float v186 = (float)((float)((float)(v72 * v93) + (float)(v73 * v101)) + (float)(v74 * v100)) + (float)(v92 * v71);
      float v187 = (float)((float)((float)(v74 * v93) + (float)(v73 * a3.n128_f32[0])) + (float)(v71 * v101))
           + (float)(v90 * v72);
      float v188 = (float)((float)((float)(v71 * v90) + (float)(v73 * v93)) + (float)(v72 * v91)) + (float)(v74 * v92);
      float v189 = sqrtf((float)((float)((float)(v186 * v186) + (float)(v185 * v185)) + (float)(v187 * v187))+ (float)(v188 * v188));
      float v190 = v185 / v189;
      float v191 = v186 / v189;
      float v192 = v187 / v189;
      float v193 = v188 / v189;
      **(float **)v79.f32 = v190;
      *(float *)(*(void *)&v79 + 4) = v191;
      *(float *)(*(void *)&v79 + 8) = v192;
      *(float *)(*(void *)&v79 + 12) = v193;
      float v194 = v67 + (float)(v193 * v193);
      float v195 = (float)((float)((float)(*(float *)&a5 + *(float *)&a5) * v191)
                   + (float)(v190 * (float)(a4.f32[0] + a4.f32[0])))
           + (float)(v192 * (float)(v86 + v86));
      float v196 = (float)((float)(v193
                           * (float)((float)(v191 * (float)(v86 + v86))
                                   - (float)(v192 * (float)(*(float *)&a5 + *(float *)&a5))))
                   + (float)((float)(a4.f32[0] + a4.f32[0]) * v194))
           + (float)(v190 * v195);
      float v197 = (float)((float)(v193
                           * (float)((float)(v192 * (float)(a4.f32[0] + a4.f32[0])) - (float)(v190 * (float)(v86 + v86))))
                   + (float)((float)(*(float *)&a5 + *(float *)&a5) * v194))
           + (float)(v191 * v195);
      a3.n128_f32[0] = v77
                     + (float)((float)((float)(v193
                                             * (float)((float)(v190 * (float)(*(float *)&a5 + *(float *)&a5))
                                                     - (float)(v191 * (float)(a4.f32[0] + a4.f32[0]))))
                                     + (float)((float)(v86 + v86) * v194))
                             + (float)(v192 * v195));
      *(float *)(*(void *)&v79 + 16) = v76 + v196;
      *(float *)(*(void *)&v79 + 20) = v75 + v197;
      *(_DWORD *)(*(void *)&v79 + 24) = a3.n128_u32[0];
      ++v65;
      v66 += 76;
      if (v65 == v7)
      {
LABEL_86:
        size_t v8 = v245;
        goto LABEL_87;
      }
    }
  }
  if (v7)
  {
    double v28 = (__n128 **)&v6[2];
    double v29 = this[87] + 3;
    uint64_t v30 = v7;
    do
    {
      _Q0 = *(float32x4_t *)v29[-3].f32;
      _Q1 = vmulq_f32(_Q0, _Q0);
      LODWORD(a5) = v29->i32[0];
      _S3 = (int)v29[-2];
      __asm { FMLA            S1, S3, V0.S[2] }
      int32x2_t v37 = *v28;
      v28 += 5;
      _S3 = _Q0.i32[3];
      __asm { FMLA            S1, S3, V0.S[3] }
      _Q1.f32[0] = sqrtf(_Q1.f32[0]);
      a4 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0);
      unint64_t v39 = (unint64_t)v29[-1];
      a3 = (__n128)vdivq_f32(_Q0, a4);
      *int32x2_t v37 = a3;
      v37[1].n128_u64[0] = v39;
      v37[1].n128_u32[2] = LODWORD(a5);
      double v29 = (float32x2_t *)((char *)v29 + 28);
      --v30;
    }
    while (v30);
    if (v7 >= 2)
    {
      float v40 = this[32];
      float v41 = this[79];
      for (uint64_t i = 1; i != v7; ++i)
      {
        float32x2_t v43 = v6[5 * i + 3];
        float v44 = (unsigned __int32 *)v40 + v41[10 * i + 9].u32[0];
        int v45 = *(unsigned __int8 *)(*(void *)&v43 + 270);
        if (*(unsigned char *)(*(void *)&v43 + 270))
        {
          if (v45 == 1)
          {
            a3.n128_u32[0] = *v44;
            if (*(float *)v44 <= 6.2832)
            {
              if (a3.n128_f32[0] < -6.2832) {
                a3.n128_f32[0] = a3.n128_f32[0] + 12.566;
              }
            }
            else
            {
              a3.n128_f32[0] = a3.n128_f32[0] + -12.566;
            }
            if (a3.n128_f32[0] < -12.566) {
              a3.n128_f32[0] = -12.566;
            }
            if (a3.n128_f32[0] > 12.566) {
              a3.n128_f32[0] = 12.566;
            }
            *float v44 = a3.n128_u32[0];
          }
          else if (v45 == 2)
          {
            int32x2_t v46 = &v6[5 * i];
            unsigned int v47 = v46[4].u32[0];
            long long v48 = *(_OWORD *)this[74][2 * i].f32;
            long long v281 = *(_OWORD *)*(void *)&v46[2];
            long long v279 = *(_OWORD *)*(void *)&v6[5 * v47 + 2];
            v280[0] = v48;
            physx::Dy::computeSphericalJointPositions(v278, (float *)v280, (float *)&v281, (float *)&v279, (uint64_t)v44, (uint64_t)this[64] + 76 * i);
          }
        }
        else
        {
          uint64_t v49 = *(unsigned __int8 *)(*(void *)&v43 + 252);
          if (*(unsigned char *)(*(void *)&v43 + v49 + 258) == 1)
          {
            a3.n128_u32[0] = *v44;
            uint64_t v50 = *(void *)&v43 + 8 * v49;
            float v51 = *(float *)(v50 + 56);
            if (*(float *)v44 < v51)
            {
              *(float *)float v44 = v51;
              a3.n128_f32[0] = v51;
            }
            a4.i32[0] = *(_DWORD *)(v50 + 60);
            if (a3.n128_f32[0] > a4.f32[0]) {
              *float v44 = a4.i32[0];
            }
          }
        }
      }
    }
  }
  float v5 = (physx::Dy::FeatherstoneArticulation *)this;
LABEL_87:
  if (*((unsigned char *)v5 + 685))
  {
    physx::Dy::PxcFsFlushVelocity((uint64_t)v5, (float32x2_t *)v280, a3.n128_f64[0], *(double *)a4.i64, a5);
    uint64_t v198 = *((unsigned int *)v5 + 154);
    if (v198 >= 2)
    {
      uint64_t v199 = *((void *)v5 + 28);
      uint64_t v200 = *((void *)v5 + 26);
      uint64_t v201 = *((void *)v5 + 30);
      uint64_t v202 = *((void *)v5 + 76);
      uint64_t v203 = *((void *)v5 + 79);
      uint64_t v204 = 1;
      float v205 = 1.0 / *((float *)v5 + 162);
      do
      {
        uint64_t v206 = v202 + 40 * v204;
        uint64_t v207 = *(void *)(v206 + 24);
        uint64_t v208 = *(unsigned int *)(v203 + 80 * v204 + 72);
        uint64_t v209 = v199 + 4 * v208;
        uint64_t v210 = (float *)(v200 + 4 * v208);
        float32x4_t v211 = (float *)(v201 + 4 * v208);
        unsigned int v212 = *(unsigned __int8 *)(v207 + 270);
        if (v212 >= 2)
        {
          if (v212 == 2)
          {
            uint64_t v213 = *(unsigned __int8 *)(v203 + 80 * v204 + 76);
            if (v213 > 2)
            {
              uint64_t v215 = *(unsigned int *)(v206 + 32);
              float32x4_t v216 = *(float **)(v206 + 16);
              *(void *)&long long v281 = *(void *)v209;
              DWORD2(v281) = *(_DWORD *)(v209 + 8);
              float32x4_t v217 = (float *)&v8[4 * v204];
              float32x2_t v218 = (float *)&v8[4 * v215];
              float v219 = v217[1] - v218[1];
              float v220 = v217[2] - v218[2];
              float v221 = v216[1];
              float v223 = *(float *)(v207 + 36);
              float v222 = *(float *)(v207 + 40);
              float v224 = *(float *)(v207 + 28);
              float v225 = *(float *)(v207 + 32);
              float v227 = v216[2];
              float v226 = v216[3];
              float v228 = (float)((float)((float)(v222 * *v216) + (float)(v226 * v224)) + (float)(v221 * v223))
                   - (float)(v225 * v227);
              float v229 = (float)((float)((float)(v222 * v221) + (float)(v226 * v225)) + (float)(v227 * v224))
                   - (float)(v223 * *v216);
              float v230 = (float)((float)((float)(v222 * v227) + (float)(v226 * v223)) + (float)(*v216 * v225))
                   - (float)(v224 * v221);
              float v231 = (float)((float)((float)(v226 * v222) - (float)(*v216 * v224)) - (float)(v221 * v225))
                   - (float)(v227 * v223);
              float v232 = (float)(*v217 - *v218) + (float)(*v217 - *v218);
              float v233 = v219 + v219;
              float v234 = v220 + v220;
              float v235 = (float)(v231 * v231) + -0.5;
              float v236 = (float)((float)((float)(v219 + v219) * v229) + (float)(v228 * v232)) + (float)(v230 * v234);
              float v237 = (float)((float)(v232 * v235)
                           - (float)((float)((float)(v229 * v234) - (float)(v230 * (float)(v219 + v219))) * v231))
                   + (float)(v228 * v236);
              if (*(unsigned char *)(v207 + 258))
              {
                *(float *)uint64_t v209 = v237;
                uint64_t v238 = 1;
              }
              else
              {
                uint64_t v238 = 0;
              }
              float v239 = (float)((float)(v233 * v235) - (float)((float)((float)(v230 * v232) - (float)(v228 * v234)) * v231))
                   + (float)(v229 * v236);
              if (*(unsigned char *)(v207 + 259)) {
                *(float *)(v209 + 4 * v238++) = v239;
              }
              float v240 = (float)((float)(v234 * v235) - (float)((float)((float)(v228 * v233) - (float)(v229 * v232)) * v231))
                   + (float)(v230 * v236);
              if (*(unsigned char *)(v207 + 260)) {
                *(float *)(v209 + 4 * v238++) = v240;
              }
              if (!*(unsigned char *)(v207 + 258)) {
                *(float *)(v209 + 4 * v238++) = v237;
              }
              if (!*(unsigned char *)(v207 + 259)) {
                *(float *)(v209 + 4 * v238++) = v239;
              }
              if (!*(unsigned char *)(v207 + 260)) {
                *(float *)(v209 + 4 * v238) = v240;
              }
              for (uint64_t j = 0; j != 12; j += 4)
                *(float *)(v200 + j) = *(float *)(v200 + j)
                                     + (float)((float)(*(float *)((char *)&v281 + j) - *(float *)(v209 + j)) * v205);
            }
            else if (*(unsigned char *)(v203 + 80 * v204 + 76))
            {
              do
              {
                *(float *)uint64_t v209 = *v211 + *(float *)v209;
                v209 += 4;
                float v214 = *v211++;
                *uint64_t v210 = *v210 + (float)(v214 * v205);
                ++v210;
                --v213;
              }
              while (v213);
            }
          }
        }
        else
        {
          *(float *)uint64_t v209 = *v211 + *(float *)v209;
          *uint64_t v210 = *v210 + (float)(*v211 * v205);
        }
        ++v204;
      }
      while (v204 != v198);
    }
  }
  if (v7)
  {
    size_t v242 = v8 + 2;
    int32x2_t v243 = (uint64_t *)&v6[2];
    do
    {
      uint64_t v244 = (float32x2_t *)*v243;
      v243 += 5;
      v244[8] = *v242;
      v244[9].i32[0] = v242[1].i32[0];
      v244[10] = v242[-2];
      v244[11].i32[0] = v242[-1].i32[0];
      *(_OWORD *)v9->f32 = 0uLL;
      *(_OWORD *)v9[2].f32 = 0uLL;
      v9 += 4;
      v242 += 4;
      --v7;
    }
    while (v7);
  }
}

uint64_t physx::Dy::FeatherstoneArticulation::getJointAcceleration(uint64_t a1, float32x2_t *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (*(unsigned char *)(a1 + 684))
  {
    uint64_t v9 = physx::shdfnd::Foundation::mInstance;
    return physx::shdfnd::Foundation::error(v9, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyFeatherstoneForwardDynamic.cpp", 1569, "Articulation::getJointAcceleration() commonInit need to be called first to initialize data!", a6, a7, a8, a9);
  }
  else
  {
    uint64_t v14 = a1 + 176;
    uint64_t v15 = *(unsigned int *)(a1 + 616);
    double v16 = (pthread_mutex_t **)a3[13];
    uint64_t v256 = 0;
    long long v254 = 0u;
    long long v255 = 0u;
    long long v253 = 0u;
    uint64_t v240 = (uint64_t)v16;
    uint64_t v17 = (int *)physx::PxcScratchAllocator::alloc(v16, 240 * (int)v15, 0);
    float v18 = (int *)((char *)v17 + (32 * v15));
    v252[0] = v17;
    v252[1] = v18;
    float32x2_t v19 = (char *)v17 + (96 * v15);
    uint64_t v241 = (int *)((char *)v17 + (v15 << 6));
    v252[2] = v241;
    v252[3] = (int *)v19;
    unint64_t v239 = (unint64_t)v17;
    uint64_t v20 = a3[3];
    *((void *)&v253 + 1) = (char *)v17 + (v15 << 7);
    *(void *)&long long v254 = v20;
    *(void *)&long long v255 = a3[6];
    uint64_t v21 = physx::Dy::FeatherstoneArticulation::computeLinkVelocities((uint64_t)v17, v14, v252);
    *(float *)&double v22 = physx::Dy::FeatherstoneArticulation::computeSpatialInertia(v21, v14);
    physx::Dy::FeatherstoneArticulation::computeZ(v22, v24, v25, v26, v27, v28, v29, v23, v14, a2, v252);
    physx::Dy::FeatherstoneArticulation::computeArticulatedSpatialInertia(a1, v14, v30, v31, v32, v33, v34, v35, v36);
    uint64_t v38 = physx::Dy::FeatherstoneArticulation::computeC(v37, v14, (uint64_t *)v252);
    physx::Dy::FeatherstoneArticulation::computeArticulatedSpatialZ(v39, v38, v14, v252);
    float v40 = v18;
    if ((**(unsigned char **)(a1 + 664) & 1) == 0)
    {
      float v41 = *(float **)(a1 + 480);
      float v42 = *v41;
      float v43 = v41[1];
      float v45 = v41[6];
      float v44 = v41[7];
      float v46 = v41[2];
      float v47 = v41[3];
      float v49 = v41[4];
      float v48 = v41[5];
      float v51 = v41[25];
      float v50 = v41[26];
      float v53 = v41[22];
      float v52 = v41[23];
      float v54 = v41[24];
      float v56 = v41[20];
      float v55 = v41[21];
      float v57 = (float)(v55 * v51) - (float)(v53 * v54);
      float v59 = v41[18];
      float v58 = v41[19];
      float v60 = (float)((float)(v58 * (float)((float)(v52 * v54) - (float)(v55 * v50)))
                  + (float)(v59 * (float)((float)(v53 * v50) - (float)(v52 * v51))))
          + (float)(v56 * v57);
      float v242 = 0.0;
      float v61 = 1.0;
      float v244 = 1.0;
      float v62 = 0.0;
      float v63 = 0.0;
      float v64 = v41[8];
      float v65 = 0.0;
      float v66 = 1.0;
      float v67 = 0.0;
      float v68 = 0.0;
      float v69 = 0.0;
      float v70 = 1.0;
      if (v60 != 0.0)
      {
        float v71 = 1.0 / v60;
        float v61 = (float)((float)(v53 * v50) - (float)(v51 * v52)) * v71;
        float v62 = -(float)((float)((float)(v58 * v50) - (float)(v51 * v56)) * v71);
        float v63 = (float)((float)(v58 * v52) - (float)(v56 * v53)) * v71;
        float v65 = -(float)((float)((float)(v54 * (float)-v52) + (float)(v55 * v50)) * v71);
        float v66 = (float)((float)(v59 * v50) - (float)(v56 * v54)) * v71;
        float v67 = -(float)((float)((float)(v59 * v52) - (float)(v56 * v55)) * v71);
        float v68 = v57 * v71;
        float v69 = -(float)((float)((float)(v59 * v51) - (float)(v58 * v54)) * v71);
        float v70 = (float)((float)(v58 * (float)-v55) + (float)(v59 * v53)) * v71;
      }
      float v217 = v41[20];
      float v220 = v41[21];
      float v223 = v41[22];
      float v224 = v41[23];
      float v225 = v41[25];
      float v229 = (float)((float)-(float)(v47 * v66) - (float)(v42 * v62)) - (float)(v45 * v69);
      float v230 = (float)((float)-(float)(v47 * v65) - (float)(v42 * v61)) - (float)(v45 * v68);
      float v227 = (float)((float)-(float)(v49 * v65) - (float)(v43 * v61)) - (float)(v44 * v68);
      float v228 = (float)((float)-(float)(v47 * v67) - (float)(v42 * v63)) - (float)(v45 * v70);
      float v226 = (float)((float)-(float)(v49 * v66) - (float)(v43 * v62)) - (float)(v44 * v69);
      float v221 = (float)((float)-(float)(v49 * v67) - (float)(v43 * v63)) - (float)(v44 * v70);
      float v222 = (float)((float)-(float)(v48 * v65) - (float)(v46 * v61)) - (float)(v64 * v68);
      float v218 = (float)((float)-(float)(v48 * v67) - (float)(v46 * v63)) - (float)(v64 * v70);
      float v219 = (float)((float)-(float)(v48 * v66) - (float)(v46 * v62)) - (float)(v64 * v69);
      float v72 = v41[9];
      float v73 = v41[10];
      float v74 = v72 + (float)((float)((float)(v42 * v230) + (float)(v47 * v229)) + (float)(v45 * v228));
      float v75 = v73 + (float)((float)((float)(v43 * v230) + (float)(v49 * v229)) + (float)(v44 * v228));
      float v76 = v41[11];
      float v77 = v41[12];
      float v78 = v76 + (float)((float)((float)(v46 * v230) + (float)(v48 * v229)) + (float)(v64 * v228));
      float v79 = (float)((float)((float)(v42 * v227) + (float)(v47 * v226)) + (float)(v45 * v221)) + v77;
      float v80 = v41[13];
      float v81 = v41[14];
      float v82 = (float)((float)((float)(v43 * v227) + (float)(v49 * v226)) + (float)(v44 * v221)) + v80;
      float v83 = (float)((float)((float)(v46 * v227) + (float)(v48 * v226)) + (float)(v64 * v221)) + v81;
      float v85 = v41[15];
      float v84 = v41[16];
      float v86 = (float)((float)((float)(v42 * v222) + (float)(v47 * v219)) + (float)(v45 * v218)) + v85;
      float v87 = (float)((float)((float)(v43 * v222) + (float)(v49 * v219)) + (float)(v44 * v218)) + v84;
      float v88 = v41[17];
      float v89 = (float)((float)((float)(v46 * v222) + (float)(v48 * v219)) + (float)(v64 * v218)) + v88;
      float v90 = (float)(v79 * v87) - (float)(v82 * v86);
      float v91 = (float)((float)(v75 * (float)((float)(v83 * v86) - (float)(v79 * v89)))
                  + (float)(v74 * (float)((float)(v82 * v89) - (float)(v83 * v87))))
          + (float)(v78 * v90);
      float v92 = 0.0;
      float v238 = 0.0;
      float v237 = 1.0;
      float v235 = 0.0;
      float v236 = 0.0;
      float v234 = 0.0;
      float v233 = 1.0;
      if (v91 != 0.0)
      {
        float v93 = 1.0 / v91;
        float v244 = (float)((float)(v82 * v89) - (float)(v87 * v83)) * v93;
        float v242 = -(float)((float)((float)(v75 * v89) - (float)(v87 * v78)) * v93);
        float v92 = (float)((float)(v75 * v83) - (float)(v78 * v82)) * v93;
        float v238 = -(float)((float)((float)(v86 * (float)-v83) + (float)(v79 * v89)) * v93);
        float v236 = -(float)((float)((float)(v74 * v83) - (float)(v78 * v79)) * v93);
        float v237 = (float)((float)(v74 * v89) - (float)(v78 * v86)) * v93;
        float v234 = -(float)((float)((float)(v74 * v87) - (float)(v75 * v86)) * v93);
        float v235 = v90 * v93;
        float v233 = (float)((float)(v75 * (float)-v79) + (float)(v74 * v82)) * v93;
      }
      float v216 = v92;
      float v94 = -v43;
      float v95 = -v49;
      float v96 = -v44;
      float v97 = (float)(v77 * v84) - (float)(v80 * v85);
      float v98 = (float)((float)(v73 * (float)((float)(v81 * v85) - (float)(v77 * v88)))
                  + (float)(v72 * (float)((float)(v80 * v88) - (float)(v81 * v84))))
          + (float)(v76 * v97);
      float v231 = 0.0;
      float v232 = 1.0;
      float v99 = 1.0;
      float v100 = 0.0;
      float v101 = 0.0;
      float v102 = 0.0;
      float v103 = 1.0;
      float v104 = 0.0;
      float v105 = 0.0;
      float v106 = 0.0;
      float v107 = 1.0;
      if (v98 != 0.0)
      {
        float v108 = 1.0 / v98;
        float v99 = (float)((float)(v80 * v88) - (float)(v84 * v81)) * v108;
        float v100 = -(float)((float)((float)(v73 * v88) - (float)(v84 * v76)) * v108);
        float v101 = (float)((float)(v73 * v81) - (float)(v76 * v80)) * v108;
        float v102 = -(float)((float)((float)(v85 * (float)-v81) + (float)(v77 * v88)) * v108);
        float v103 = (float)((float)(v72 * v88) - (float)(v76 * v85)) * v108;
        float v104 = -(float)((float)((float)(v72 * v81) - (float)(v76 * v77)) * v108);
        float v105 = v97 * v108;
        float v106 = -(float)((float)((float)(v72 * v84) - (float)(v73 * v85)) * v108);
        float v107 = (float)((float)(v73 * (float)-v77) + (float)(v72 * v80)) * v108;
      }
      float v109 = (float)((float)(v102 * v94) - (float)(v42 * v99)) - (float)(v46 * v105);
      float v110 = (float)((float)(v103 * v94) - (float)(v42 * v100)) - (float)(v46 * v106);
      float v111 = (float)((float)(v104 * v94) - (float)(v42 * v101)) - (float)(v46 * v107);
      float v112 = (float)((float)(v102 * v95) - (float)(v47 * v99)) - (float)(v48 * v105);
      float v113 = (float)((float)(v103 * v95) - (float)(v47 * v100)) - (float)(v48 * v106);
      float v114 = (float)((float)(v104 * v95) - (float)(v47 * v101)) - (float)(v48 * v107);
      float v115 = (float)((float)(v102 * v96) - (float)(v45 * v99)) - (float)(v64 * v105);
      float v116 = (float)((float)(v103 * v96) - (float)(v45 * v100)) - (float)(v64 * v106);
      float v117 = (float)((float)(v104 * v96) - (float)(v45 * v101)) - (float)(v64 * v107);
      float v118 = (float)(v42 * v109) + (float)(v43 * v110);
      float v119 = (float)(v47 * v109) + (float)(v49 * v110);
      float v120 = (float)(v45 * v109) + (float)(v44 * v110);
      float v121 = v118 + (float)(v46 * v111);
      float v122 = v119 + (float)(v48 * v111);
      float v123 = v120 + (float)(v64 * v111);
      float v124 = (float)(v47 * v112) + (float)(v49 * v113);
      float v125 = (float)(v45 * v112) + (float)(v44 * v113);
      float v126 = (float)((float)(v42 * v112) + (float)(v43 * v113)) + (float)(v46 * v114);
      float v127 = v124 + (float)(v48 * v114);
      float v128 = v125 + (float)(v64 * v114);
      float v129 = v47 * v115;
      float v130 = v49 * v116;
      float v131 = (float)(v42 * v115) + (float)(v43 * v116);
      float v132 = (float)(v45 * v115) + (float)(v44 * v116);
      float v133 = v131 + (float)(v46 * v117);
      float v134 = (float)(v129 + v130) + (float)(v48 * v117);
      float v135 = v132 + (float)(v64 * v117);
      float v136 = v41[18] + v121;
      float v137 = v41[19] + v122;
      float v138 = v217 + v123;
      float v139 = v220 + v126;
      float v140 = v223 + v127;
      float v141 = v224 + v128;
      float v142 = v41[24] + v133;
      float v143 = v225 + v134;
      float v144 = v41[26] + v135;
      float v145 = (float)((float)(v220 + v126) * (float)(v225 + v134)) - (float)((float)(v223 + v127) * v142);
      float v146 = (float)((float)(v137 * (float)((float)((float)(v224 + v128) * v142) - (float)((float)(v220 + v126) * v144)))
                   + (float)(v136
                           * (float)((float)((float)(v223 + v127) * v144)
                                   - (float)((float)(v224 + v128) * (float)(v225 + v134)))))
           + (float)((float)(v217 + v123) * v145);
      float v147 = 0.0;
      float v148 = 0.0;
      float v149 = 1.0;
      float v150 = 0.0;
      float v151 = 0.0;
      float v152 = 0.0;
      float v153 = 1.0;
      if (v146 != 0.0)
      {
        float v154 = 1.0 / v146;
        float v232 = (float)((float)(v140 * v144) - (float)(v143 * v141)) * v154;
        float v231 = -(float)((float)((float)(v137 * v144) - (float)(v143 * v138)) * v154);
        float v147 = (float)((float)(v137 * v141) - (float)(v138 * v140)) * v154;
        float v148 = -(float)((float)((float)(v142 * (float)-v141) + (float)(v139 * v144)) * v154);
        float v149 = (float)((float)(v136 * v144) - (float)(v138 * v142)) * v154;
        float v150 = -(float)((float)((float)(v136 * v141) - (float)(v138 * v139)) * v154);
        float v151 = v145 * v154;
        float v152 = -(float)((float)((float)(v136 * v143) - (float)(v137 * v142)) * v154);
        float v153 = (float)((float)(v137 * (float)-v139) + (float)(v136 * v140)) * v154;
      }
      float v155 = (float)((float)(v228 * v235) + (float)(v221 * v234)) + (float)(v218 * v233);
      float v156 = (float)((float)(v229 * v235) + (float)(v226 * v234)) + (float)(v219 * v233);
      float v157 = (float)((float)(v230 * v235) + (float)(v227 * v234)) + (float)(v222 * v233);
      float v158 = (float)((float)(v228 * v238) + (float)(v221 * v237)) + (float)(v218 * v236);
      float v159 = (float)((float)(v229 * v238) + (float)(v226 * v237)) + (float)(v219 * v236);
      float v160 = (float)((float)(v230 * v238) + (float)(v227 * v237)) + (float)(v222 * v236);
      float v161 = (float)((float)(v228 * v244) + (float)(v221 * v242)) + (float)(v218 * v216);
      float v162 = (float)((float)(v229 * v244) + (float)(v226 * v242)) + (float)(v219 * v216);
      float v163 = (float)((float)(v230 * v244) + (float)(v227 * v242)) + (float)(v222 * v216);
      float v164 = *((float *)v19 + 1);
      float v165 = *((float *)v19 + 2);
      float v166 = (float)((float)(v162 * *(float *)v19) + (float)(v159 * v164)) + (float)(v156 * v165);
      float v167 = (float)((float)(v161 * *(float *)v19) + (float)(v158 * v164)) + (float)(v155 * v165);
      float v169 = *((float *)v19 + 4);
      float v168 = *((float *)v19 + 5);
      float v170 = (float)(v147 * v169) + (float)(v150 * v168);
      float v171 = *((float *)v19 + 6);
      float v172 = (float)((float)(v156 * v168) + (float)(v157 * v169)) + (float)(v155 * v171);
      float v173 = (float)((float)(v232 * v169) + (float)(v148 * v168)) + (float)(v151 * v171);
      float v174 = v166 + (float)((float)((float)(v231 * v169) + (float)(v149 * v168)) + (float)(v152 * v171));
      float v175 = (float)(v216 * *(float *)v19) + (float)(v236 * v164);
      float v176 = (float)((float)(v242 * *(float *)v19) + (float)(v237 * v164)) + (float)(v234 * v165);
      float v177 = (float)((float)((float)(v244 * *(float *)v19) + (float)(v238 * v164)) + (float)(v235 * v165))
           + (float)((float)((float)(v162 * v168) + (float)(v163 * v169)) + (float)(v161 * v171));
      *(float *)float v18 = -(float)((float)((float)((float)(v163 * *(float *)v19) + (float)(v160 * v164))
                                     + (float)(v157 * v165))
                             + v173);
      *((float *)v18 + 1) = -v174;
      *((float *)v18 + 2) = -(float)(v167 + (float)(v170 + (float)(v153 * v171)));
      *((float *)v18 + 4) = -v177;
      *((float *)v18 + 5) = -(float)(v176
                                   + (float)((float)((float)(v159 * v168) + (float)(v160 * v169)) + (float)(v158 * v171)));
      *((float *)v18 + 6) = -(float)((float)(v175 + (float)(v233 * v165)) + v172);
      v18[3] = 0;
      v18[7] = 0;
    }
    if (v15 >= 2)
    {
      uint64_t v178 = 1;
      uint64_t v179 = a3[4];
      uint64_t v180 = 96;
      do
      {
        uint64_t v181 = *(void *)(a1 + 624) + 160 * v178;
        _S0 = *(_DWORD *)(v181 + 120);
        float v183 = v40;
        float v184 = &v40[8 * *(unsigned int *)(*(void *)(a1 + 608) + 40 * v178 + 32)];
        _D4 = *(int32x2_t *)v184;
        v186.i32[1] = HIDWORD(*(void *)(v181 + 124));
        v186.i32[0] = _S0;
        v187.i32[1] = HIDWORD(*(void *)v184);
        v187.i32[0] = v184[2];
        float32x2_t v188 = (float32x2_t)vrev64_s32((int32x2_t)vmul_f32(v186, v187));
        float32x2_t v189 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v184, 0);
        v189.i32[0] = v184[2];
        __asm { FMLS            S1, S0, V4.S[1] }
        float32x2_t v195 = vadd_f32(*(float32x2_t *)(v184 + 4), vmls_f32(v188, v189, *(float32x2_t *)(v181 + 124)));
        float v196 = _S1 + *((float *)v184 + 6);
        float v243 = v189.f32[0];
        int32x2_t v245 = *(int32x2_t *)v184;
        int32x2_t v246 = *(int32x2_t *)v184;
        __int32 v247 = v189.i32[0];
        int v248 = 0;
        float32x2_t v249 = v195;
        float v250 = v196;
        int v251 = 0;
        uint64_t v197 = *(void *)(a1 + 632) + 80 * v178;
        uint64_t v198 = (float *)(v179 + 4 * *(unsigned int *)(v197 + 72));
        physx::Dy::FeatherstoneArticulation::computeJointAccelerationW(a1, v181, *(unsigned char *)(v197 + 76), (float *)&v246, (uint64_t)v198, v178);
        uint64_t v199 = *(unsigned __int8 *)(v197 + 76);
        if (*(unsigned char *)(v197 + 76))
        {
          uint64_t v200 = (float *)(*(void *)(a1 + 528) + v180);
          float32x2_t v201 = 0;
          float v202 = 0.0;
          float v203 = 0.0;
          float32x2_t v204 = 0;
          float v40 = v183;
          float v206 = v243;
          float32x2_t v205 = (float32x2_t)v245;
          do
          {
            float v207 = *v198++;
            float v208 = v207;
            float32x2_t v201 = vadd_f32(v201, vmul_n_f32(*(float32x2_t *)(v200 - 5), v207));
            float v203 = v203 + (float)(v207 * *(v200 - 3));
            float32x2_t v209 = vmul_n_f32(*(float32x2_t *)(v200 - 2), v207);
            float v210 = *v200;
            v200 += 6;
            float32x2_t v204 = vadd_f32(v204, v209);
            float v202 = v202 + (float)(v208 * v210);
            --v199;
          }
          while (v199);
        }
        else
        {
          float32x2_t v201 = 0;
          float v203 = 0.0;
          float v202 = 0.0;
          float32x2_t v204 = 0;
          float v40 = v183;
          float v206 = v243;
          float32x2_t v205 = (float32x2_t)v245;
        }
        float32x4_t v211 = (float32x2_t *)&v241[8 * v178];
        float32_t v212 = v202 + (float)(v196 + v211[3].f32[0]);
        uint64_t v213 = (float32x2_t *)&v40[8 * v178];
        float32x2_t v214 = vadd_f32(v201, vadd_f32(v205, *v211));
        v213[1].f32[0] = v203 + (float)(v206 + v211[1].f32[0]);
        v213[1].i32[1] = 0;
        float32x2_t v215 = vadd_f32(v204, vadd_f32(v195, v211[2]));
        *uint64_t v213 = v214;
        v213[2] = v215;
        v213[3].f32[0] = v212;
        v213[3].i32[1] = 0;
        ++v178;
        v180 += 76;
      }
      while (v178 != v15);
    }
    return physx::PxcScratchAllocator::free(v240, v239);
  }
}

uint64_t physx::Dy::partitionContactConstraints(uint64_t *a1)
{
  uint64_t v329 = *MEMORY[0x263EF8340];
  unint64_t v2 = *((unsigned int *)a1 + 2);
  uint64_t v3 = *((unsigned int *)a1 + 6);
  int v4 = *((_DWORD *)a1 + 10);
  v319 = (void *)a1[4];
  float v5 = (void *)a1[6];
  uint64_t v6 = (void *)a1[7];
  uint64_t v7 = a1[10];
  *(_DWORD *)(v7 + 8) = 0;
  unint64_t v8 = *((unsigned int *)a1 + 3);
  if (v2)
  {
    unsigned int v9 = 0;
    uint64_t v10 = *a1;
    int v11 = v2;
    do
    {
      uint64_t v12 = v10 + v9;
      *(_DWORD *)(v12 + 28) = 0;
      *(_DWORD *)(v12 + 12) = 0;
      v9 += v8;
      --v11;
    }
    while (v11);
  }
  int v321 = v4;
  v325 = v5;
  v320 = a1;
  if (!v3)
  {
    uint64_t v16 = *a1;
    unsigned int v17 = v8 * v2;
    *(_DWORD *)(v7 + 8) = 32;
    float v18 = *(_OWORD **)v7;
    v18[6] = 0u;
    v18[7] = 0u;
    v18[4] = 0u;
    v18[5] = 0u;
    v18[2] = 0u;
    v18[3] = 0u;
    *float v18 = 0u;
    v18[1] = 0u;
    if (v4)
    {
      unsigned int v19 = 0;
      unsigned int v20 = v321 - 1;
      _X12 = v319;
      do
      {
        unsigned int v22 = v20;
        if (v20 >= 4uLL) {
          unsigned int v22 = 4;
        }
        uint64_t v23 = &_X12[6 * v22];
        _X14 = v23[4];
        __asm { PRFM            #0, [X14] }
        _X14 = *v23;
        _X13 = v23[1];
        __asm
        {
          PRFM            #0, [X14]
          PRFM            #0, [X13]
          PRFM            #0, [X12,#0x180]
        }
        uint64_t v35 = *_X12;
        uint64_t v36 = _X12[1];
        unint64_t v37 = (*_X12 - v16) / v8;
        unint64_t v38 = (v36 - v16) / v8;
        if (v37 >= v2 || v38 >= v2)
        {
          if (v37 < v2) {
            ++*(_WORD *)(v35 + 14);
          }
          if (v38 < v2) {
            ++*(_WORD *)(_X12[1] + 14);
          }
        }
        else
        {
          int v39 = *(_DWORD *)(v35 + 28);
          int v40 = *(_DWORD *)(v36 + 28);
          if ((v40 | v39) == 0xFFFFFFFF)
          {
            float v46 = &v6[6 * v19++];
            long long v47 = *(_OWORD *)_X12;
            long long v48 = *((_OWORD *)_X12 + 2);
            v46[1] = *((_OWORD *)_X12 + 1);
            v46[2] = v48;
            *float v46 = v47;
          }
          else
          {
            unsigned int v41 = __clz(__rbit32(~(v40 | v39)));
            int v42 = (1 << v41) | v40;
            ++*(_DWORD *)(*(void *)v7 + 4 * v41);
            *(_DWORD *)(*_X12 + 28) = (1 << v41) | v39;
            unsigned int v43 = *(unsigned __int16 *)(*_X12 + 12);
            if (v43 <= v41 + 1) {
              LOWORD(v43) = v41 + 1;
            }
            *(_WORD *)(*_X12 + 12) = v43;
            *(_DWORD *)(_X12[1] + 28) = v42;
            uint64_t v44 = _X12[1];
            unsigned int v45 = *(unsigned __int16 *)(v44 + 12);
            if (v45 <= v41 + 1) {
              LOWORD(v45) = v41 + 1;
            }
            *(_WORD *)(v44 + 12) = v45;
          }
        }
        _X12 += 6;
        --v20;
      }
      while (v20 != -1);
      if (v19)
      {
        unsigned int v49 = 0;
        do
        {
          if (v17)
          {
            for (unsigned int i = 0; i < v17; i += v8)
              *(_DWORD *)(v16 + 28 + i) = 0;
          }
          v49 += 32;
          unsigned int v51 = *(_DWORD *)(v7 + 8) + 32;
          LODWORD(v326) = 0;
          physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize(v7, v51, &v326);
          float v52 = (_OWORD *)(*(void *)v7 + 4 * v49);
          v52[6] = 0u;
          v52[7] = 0u;
          v52[4] = 0u;
          v52[5] = 0u;
          v52[2] = 0u;
          v52[3] = 0u;
          *float v52 = 0u;
          v52[1] = 0u;
          if (v19 <= 1) {
            uint64_t v53 = 1;
          }
          else {
            uint64_t v53 = v19;
          }
          float v54 = v6;
          unsigned int v19 = 0;
          float v5 = v325;
          do
          {
            uint64_t v55 = v54[1];
            int v56 = *(_DWORD *)(*v54 + 28);
            int v57 = *(_DWORD *)(v55 + 28);
            if ((v57 | v56) == 0xFFFFFFFF)
            {
              float v68 = &v6[6 * v19++];
              long long v69 = *(_OWORD *)v54;
              long long v70 = *((_OWORD *)v54 + 2);
              v68[1] = *((_OWORD *)v54 + 1);
              v68[2] = v70;
              _OWORD *v68 = v69;
            }
            else
            {
              unint64_t v58 = (v55 - v16) / v8;
              unsigned int v59 = __clz(__rbit32(~(v57 | v56)));
              if ((*v54 - v16) / v8 >= v2) {
                int v60 = 0;
              }
              else {
                int v60 = 1 << v59;
              }
              int v61 = v60 | v56;
              if (v58 >= v2) {
                int v62 = 0;
              }
              else {
                int v62 = 1 << v59;
              }
              int v63 = v62 | v57;
              ++*(_DWORD *)(*(void *)v7 + 4 * (v59 | v49));
              unsigned __int16 v64 = (v59 | v49) + 1;
              *(_DWORD *)(*v54 + 28) = v61;
              unsigned int v65 = *(unsigned __int16 *)(*v54 + 12);
              if (v65 <= v64) {
                LOWORD(v65) = v64;
              }
              *(_WORD *)(*v54 + 12) = v65;
              *(_DWORD *)(v54[1] + 28) = v63;
              uint64_t v66 = v54[1];
              unsigned int v67 = *(unsigned __int16 *)(v66 + 12);
              if (v67 <= v64) {
                LOWORD(v67) = v64;
              }
              *(_WORD *)(v66 + 12) = v67;
            }
            v54 += 6;
            --v53;
          }
          while (v53);
        }
        while (v19);
      }
    }
    if (v17)
    {
      for (unsigned int j = 0; j < v17; j += v8)
      {
        uint64_t v72 = v16 + j;
        *(_DWORD *)(v72 + 28) = 0;
        LODWORD(v73) = *(unsigned __int16 *)(v72 + 14);
        unsigned int v74 = v73 + *(unsigned __int16 *)(v72 + 12);
        if (v74 > *(_DWORD *)(v7 + 8))
        {
          LODWORD(v326) = 0;
          physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize(v7, v74, &v326);
          float v5 = v325;
          LODWORD(v73) = *(unsigned __int16 *)(v72 + 14);
        }
        if (v73)
        {
          uint64_t v73 = v73;
          float v75 = (_DWORD *)(*(void *)v7 + 4 * *(unsigned __int16 *)(v72 + 12));
          do
          {
            ++*v75++;
            --v73;
          }
          while (v73);
        }
      }
    }
    if (*(_DWORD *)(v7 + 8))
    {
      unint64_t v76 = 0;
      int v77 = 0;
      float v78 = *(_OWORD **)v7;
      do
      {
        int v79 = *((_DWORD *)v78 + v76);
        *((_DWORD *)v78 + v76) = v77;
        v77 += v79;
        ++v76;
      }
      while (v76 < *(unsigned int *)(v7 + 8));
    }
    float v80 = v320;
    int v81 = v321;
    if (v2)
    {
      unsigned int v82 = 0;
      uint64_t v83 = *v320;
      _X10 = *v320 + 256;
      unint64_t v85 = v2;
      do
      {
        __asm { PRFM            #0, [X10] }
        uint64_t v87 = v83 + v82;
        *(_DWORD *)(v87 + 28) = 0;
        *(_WORD *)(v87 + 14) = 0;
        v82 += v8;
        ++_X10;
        --v85;
      }
      while (v85);
    }
    _X2 = v319;
    if (!v81) {
      goto LABEL_103;
    }
    int v89 = 0;
    unsigned int v90 = 0;
    unsigned int v91 = v81 - 1;
    while (1)
    {
      unsigned int v92 = v91;
      if (v91 >= 4uLL) {
        unsigned int v92 = 4;
      }
      float v93 = &_X2[6 * v92];
      _X16 = v93[4];
      __asm { PRFM            #0, [X16] }
      _X16 = *v93;
      _X15 = v93[1];
      __asm
      {
        PRFM            #0, [X16]
        PRFM            #0, [X15]
        PRFM            #0, [X2,#0x180]
      }
      uint64_t v101 = *_X2;
      uint64_t v102 = _X2[1];
      unint64_t v103 = (*_X2 - v16) / v8;
      unint64_t v104 = (v102 - v16) / v8;
      if (v103 >= v2 || v104 >= v2)
      {
        if (v103 >= v2 && v104 >= v2) {
          goto LABEL_83;
        }
        if (v103 >= v2) {
          uint64_t v101 = _X2[1];
        }
        uint64_t v113 = *(unsigned __int16 *)(v101 + 12);
        uint64_t v114 = *(unsigned __int16 *)(v101 + 14);
        *(_WORD *)(v101 + 14) = v114 + 1;
        uint64_t v115 = v114 + v113;
        unsigned int v112 = *(_DWORD *)(*(void *)v7 + 4 * v115);
        *(_DWORD *)(*(void *)v7 + 4 * v115) = v112 + 1;
      }
      else
      {
        int v105 = *(_DWORD *)(v101 + 28);
        int v106 = *(_DWORD *)(v102 + 28);
        if ((v106 | v105) == 0xFFFFFFFF)
        {
          unsigned int v112 = v90++;
          float v116 = v6;
          goto LABEL_82;
        }
        unsigned int v107 = __clz(__rbit32(~(v106 | v105)));
        int v108 = (1 << v107) | v106;
        *(_DWORD *)(v101 + 28) = (1 << v107) | v105;
        unsigned int v109 = *(unsigned __int16 *)(*_X2 + 12);
        if (v109 <= v107 + 1) {
          LOWORD(v109) = v107 + 1;
        }
        *(_WORD *)(*_X2 + 12) = v109;
        *(_DWORD *)(_X2[1] + 28) = v108;
        uint64_t v110 = _X2[1];
        unsigned int v111 = *(unsigned __int16 *)(v110 + 12);
        if (v111 <= v107 + 1) {
          LOWORD(v111) = v107 + 1;
        }
        *(_WORD *)(v110 + 12) = v111;
        unsigned int v112 = *(_DWORD *)(*(void *)v7 + 4 * v107);
        *(_DWORD *)(*(void *)v7 + 4 * v107) = v112 + 1;
      }
      float v116 = v5;
LABEL_82:
      float v117 = &v116[6 * v112];
      long long v118 = *(_OWORD *)_X2;
      long long v119 = *((_OWORD *)_X2 + 2);
      v117[1] = *((_OWORD *)_X2 + 1);
      v117[2] = v119;
      *float v117 = v118;
LABEL_83:
      _X2 += 6;
      --v89;
      --v91;
      if (-v81 == v89)
      {
        if (v90)
        {
          int v120 = 0;
          do
          {
            if (v17)
            {
              for (unsigned int k = 0; k < v17; k += v8)
                *(_DWORD *)(v16 + 28 + k) = 0;
            }
            unint64_t v122 = 0;
            v120 += 32;
            if (v90 <= 1) {
              unsigned int v90 = 1;
            }
            uint64_t v123 = 48 * v90;
            unsigned int v90 = 0;
            do
            {
              float v124 = &v6[v122 / 8];
              uint64_t v126 = v6[v122 / 8];
              uint64_t v125 = v6[v122 / 8 + 1];
              int v127 = *(_DWORD *)(v126 + 28);
              int v128 = *(_DWORD *)(v125 + 28);
              if ((v128 | v127) == 0xFFFFFFFF)
              {
                unsigned int v134 = v90++;
                float v135 = v6;
              }
              else
              {
                unint64_t v129 = (v125 - v16) / v8;
                unsigned int v130 = __clz(__rbit32(~(v128 | v127)));
                if ((v126 - v16) / v8 >= v2) {
                  int v131 = 0;
                }
                else {
                  int v131 = 1 << v130;
                }
                int v132 = v131 | v127;
                if (v129 >= v2) {
                  int v133 = 0;
                }
                else {
                  int v133 = 1 << v130;
                }
                *(_DWORD *)(v126 + 28) = v132;
                *(_DWORD *)(v124[1] + 28) = v133 | v128;
                unsigned int v134 = *(_DWORD *)(*(void *)v7 + 4 * (v130 | v120));
                *(_DWORD *)(*(void *)v7 + 4 * (v130 | v120)) = v134 + 1;
                float v135 = v5;
              }
              float v136 = &v135[6 * v134];
              long long v137 = *(_OWORD *)v124;
              long long v138 = *((_OWORD *)v124 + 2);
              v136[1] = *((_OWORD *)v124 + 1);
              v136[2] = v138;
              *float v136 = v137;
              v122 += 48;
            }
            while (v123 != v122);
          }
          while (v90);
        }
LABEL_103:
        int v139 = 0;
        goto LABEL_302;
      }
    }
  }
  uint64_t v13 = (uint64_t *)a1[2];
  uint64_t v14 = (8 * v3);
  BOOL v327 = v14 > 0x400;
  if (v14 < 0x401)
  {
    MEMORY[0x270FA5388](a1);
    uint64_t v15 = (uint64_t *)((char *)&v318 - ((v14 + 15) & 0x1FFFFFFF0));
    bzero(v15, (8 * v3));
  }
  else
  {
    uint64_t v15 = physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)&v328, (8 * v3), "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyConstraintPartition.cpp", 844);
  }
  uint64_t v318 = (8 * v3);
  uint64_t v140 = 0;
  v326 = v15;
  do
  {
    uint64_t v141 = *v13;
    v13 += 12;
    v15[v140++] = v141;
    *(void *)(v141 + 8) = 0;
  }
  while (v3 != v140);
  v322 = v15;
  uint64_t v324 = v3;
  uint64_t v142 = *a1;
  unsigned int v143 = v8 * v2;
  *(_DWORD *)(v7 + 8) = 32;
  float v144 = *(_OWORD **)v7;
  v144[6] = 0u;
  v144[7] = 0u;
  v144[4] = 0u;
  v144[5] = 0u;
  v144[2] = 0u;
  v144[3] = 0u;
  *float v144 = 0u;
  v144[1] = 0u;
  float v145 = v325;
  unsigned int v323 = v8 * v2;
  if (v4)
  {
    unsigned int v146 = 0;
    unsigned int v147 = v321 - 1;
    _X27 = (int **)v319;
    while (1)
    {
      unsigned int v149 = v147;
      if (v147 >= 4uLL) {
        unsigned int v149 = 4;
      }
      float v150 = (uint64_t *)&_X27[6 * v149];
      _X9 = v150[4];
      __asm { PRFM            #0, [X9] }
      _X9 = *v150;
      _X8 = v150[1];
      __asm
      {
        PRFM            #0, [X9]
        PRFM            #0, [X8]
        PRFM            #0, [X27,#0x180]
      }
      int v158 = *((unsigned __int16 *)_X27 + 8);
      float v159 = *_X27;
      if (v158 != 0xFFFF) {
        break;
      }
      if (((unint64_t)v159 - v142) / v8 < v2)
      {
        float v160 = v159 + 7;
        goto LABEL_115;
      }
      float v159 = _X27[1];
      if (*((__int16 *)_X27 + 9) != -1) {
        goto LABEL_139;
      }
      if (((unint64_t)v159 - v142) / v8 < v2) {
        goto LABEL_142;
      }
LABEL_143:
      _X27 += 6;
      if (--v147 == -1)
      {
        if (!v146) {
          goto LABEL_192;
        }
        unsigned int v181 = 0;
        while (1)
        {
          if (v143)
          {
            for (unsigned int m = 0; m < v143; m += v8)
              *(_DWORD *)(v142 + 28 + m) = 0;
          }
          float v183 = v322;
          uint64_t v184 = v324;
          do
          {
            uint64_t v185 = *v183++;
            *(_DWORD *)(v185 + 12) = 0;
            --v184;
          }
          while (v184);
          v181 += 32;
          unsigned int v186 = *(_DWORD *)(v7 + 8) + 32;
          int v328 = 0;
          physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize(v7, v186, &v328);
          float32x2_t v187 = (_OWORD *)(*(void *)v7 + 4 * v181);
          v187[6] = 0u;
          v187[7] = 0u;
          v187[4] = 0u;
          v187[5] = 0u;
          v187[2] = 0u;
          v187[3] = 0u;
          *float32x2_t v187 = 0u;
          v187[1] = 0u;
          if (v146 <= 1) {
            uint64_t v188 = 1;
          }
          else {
            uint64_t v188 = v146;
          }
          float32x2_t v189 = v6;
          unsigned int v146 = 0;
          float v145 = v325;
          unsigned int v143 = v323;
          do
          {
            int v190 = *((unsigned __int16 *)v189 + 8);
            uint64_t v191 = *v189;
            if (v190 != 0xFFFF)
            {
              float v192 = (int *)(v191 + 12);
LABEL_159:
              int v193 = 0;
              int v194 = *v192;
              goto LABEL_160;
            }
            if ((v191 - v142) / v8 < v2)
            {
              float v192 = (int *)(v191 + 28);
              goto LABEL_159;
            }
            int v194 = 0;
            int v193 = 1;
LABEL_160:
            int v195 = *((unsigned __int16 *)v189 + 9);
            uint64_t v196 = v189[1];
            if (v195 != 0xFFFF)
            {
              uint64_t v197 = (int *)(v196 + 12);
LABEL_164:
              int v198 = 0;
              int v199 = *v197;
              goto LABEL_165;
            }
            if ((v196 - v142) / v8 < v2)
            {
              uint64_t v197 = (int *)(v196 + 28);
              goto LABEL_164;
            }
            int v199 = 0;
            int v198 = 1;
LABEL_165:
            if ((v199 | v194) == 0xFFFFFFFF)
            {
              float v207 = &v6[6 * v146++];
              long long v208 = *(_OWORD *)v189;
              long long v209 = *((_OWORD *)v189 + 2);
              v207[1] = *((_OWORD *)v189 + 1);
              v207[2] = v209;
              *float v207 = v208;
            }
            else
            {
              unsigned int v200 = __clz(__rbit32(~(v199 | v194)));
              if (v193) {
                int v201 = 0;
              }
              else {
                int v201 = 1 << v200;
              }
              int v202 = v201 | v194;
              if (v198) {
                int v203 = 0;
              }
              else {
                int v203 = 1 << v200;
              }
              ++*(_DWORD *)(*(void *)v7 + 4 * (v200 | v181));
              unsigned __int16 v204 = (v200 | v181) + 1;
              uint64_t v205 = *v189;
              if (v190 == 0xFFFF)
              {
                *(_DWORD *)(v205 + 28) = v202;
                unsigned int v210 = *(unsigned __int16 *)(*v189 + 12);
                if (v210 <= v204) {
                  LOWORD(v210) = (v200 | v181) + 1;
                }
                *(_WORD *)(*v189 + 12) = v210;
              }
              else
              {
                *(_DWORD *)(v205 + 12) = v202;
                unsigned int v206 = *(unsigned __int16 *)(v205 + 10);
                if (v206 <= v204) {
                  LOWORD(v206) = (v200 | v181) + 1;
                }
                *(_WORD *)(v205 + 10) = v206;
              }
              int v211 = v203 | v199;
              uint64_t v212 = v189[1];
              if (v195 == 0xFFFF)
              {
                *(_DWORD *)(v212 + 28) = v211;
                uint64_t v214 = v189[1];
                unsigned int v215 = *(unsigned __int16 *)(v214 + 12);
                if (v215 <= v204) {
                  LOWORD(v215) = (v200 | v181) + 1;
                }
                *(_WORD *)(v214 + 12) = v215;
              }
              else
              {
                *(_DWORD *)(v212 + 12) = v211;
                unsigned int v213 = *(unsigned __int16 *)(v212 + 10);
                if (v213 <= v204) {
                  LOWORD(v213) = (v200 | v181) + 1;
                }
                *(_WORD *)(v212 + 10) = v213;
              }
            }
            v189 += 6;
            --v188;
          }
          while (v188);
          if (!v146) {
            goto LABEL_192;
          }
        }
      }
    }
    float v160 = v159 + 3;
LABEL_115:
    int v161 = *v160;
    int v162 = *((unsigned __int16 *)_X27 + 9);
    float v163 = _X27[1];
    if (v162 != 0xFFFF)
    {
      float v164 = v163 + 3;
      goto LABEL_119;
    }
    if (((unint64_t)v163 - v142) / v8 < v2)
    {
      float v164 = v163 + 7;
LABEL_119:
      int v165 = *v164;
      if ((v165 | v161) == 0xFFFFFFFF)
      {
        float v172 = &v6[6 * v146++];
        long long v173 = *(_OWORD *)_X27;
        long long v174 = *((_OWORD *)_X27 + 2);
        v172[1] = *((_OWORD *)_X27 + 1);
        v172[2] = v174;
        *float v172 = v173;
      }
      else
      {
        unsigned int v166 = __clz(__rbit32(~(v165 | v161)));
        int v167 = 1 << v166;
        int v168 = (1 << v166) | v161;
        ++*(_DWORD *)(*(void *)v7 + 4 * v166);
        unsigned int v169 = v166 + 1;
        float v170 = *_X27;
        if (v158 == 0xFFFF)
        {
          v170[7] = v168;
          unsigned int v175 = *((unsigned __int16 *)*_X27 + 6);
          if (v175 <= v169) {
            LOWORD(v175) = v169;
          }
          *((_WORD *)*_X27 + 6) = v175;
        }
        else
        {
          v170[3] = v168;
          unsigned int v171 = *((unsigned __int16 *)v170 + 5);
          if (v171 <= v169) {
            LOWORD(v171) = v169;
          }
          *((_WORD *)v170 + 5) = v171;
        }
        int v176 = v167 | v165;
        float v177 = _X27[1];
        if (v162 == 0xFFFF)
        {
          v177[7] = v176;
          uint64_t v179 = _X27[1];
          unsigned int v180 = *((unsigned __int16 *)v179 + 6);
          if (v180 <= v169) {
            LOWORD(v180) = v169;
          }
          *((_WORD *)v179 + 6) = v180;
        }
        else
        {
          v177[3] = v176;
          unsigned int v178 = *((unsigned __int16 *)v177 + 5);
          if (v178 <= v169) {
            LOWORD(v178) = v169;
          }
          *((_WORD *)v177 + 5) = v178;
        }
      }
      goto LABEL_143;
    }
    if (v158 != 0xFFFF)
    {
LABEL_139:
      if (((*(uint64_t (**)(int *))(*(void *)v159 + 352))(v159) & 1) == 0) {
        ++*((_WORD *)v159 + 4);
      }
      float v145 = v325;
      unsigned int v143 = v323;
      goto LABEL_143;
    }
LABEL_142:
    ++*((_WORD *)v159 + 7);
    goto LABEL_143;
  }
LABEL_192:
  float v216 = v322;
  if (v143)
  {
    unsigned int v217 = 0;
    do
    {
      uint64_t v218 = v142 + v217;
      *(_DWORD *)(v218 + 28) = 0;
      LODWORD(v219) = *(unsigned __int16 *)(v218 + 14);
      unsigned int v220 = v219 + *(unsigned __int16 *)(v218 + 12);
      if (v220 > *(_DWORD *)(v7 + 8))
      {
        int v328 = 0;
        physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize(v7, v220, &v328);
        float v145 = v325;
        LODWORD(v219) = *(unsigned __int16 *)(v218 + 14);
      }
      unsigned int v221 = v323;
      if (v219)
      {
        uint64_t v219 = v219;
        float v222 = (_DWORD *)(*(void *)v7 + 4 * *(unsigned __int16 *)(v218 + 12));
        do
        {
          ++*v222++;
          --v219;
        }
        while (v219);
      }
      v217 += v8;
    }
    while (v217 < v221);
  }
  uint64_t v223 = 0;
  do
  {
    uint64_t v224 = v216[v223];
    *(_DWORD *)(v224 + 12) = 0;
    LODWORD(v225) = *(unsigned __int16 *)(v224 + 8);
    unsigned int v226 = v225 + *(unsigned __int16 *)(v224 + 10);
    if (v226 > *(_DWORD *)(v7 + 8))
    {
      int v328 = 0;
      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize(v7, v226, &v328);
      float v145 = v325;
      LODWORD(v225) = *(unsigned __int16 *)(v224 + 8);
    }
    if (v225)
    {
      uint64_t v225 = v225;
      float v227 = (_DWORD *)(*(void *)v7 + 4 * *(unsigned __int16 *)(v224 + 10));
      do
      {
        ++*v227++;
        --v225;
      }
      while (v225);
    }
    ++v223;
    uint64_t v228 = v324;
  }
  while (v223 != v324);
  float v229 = v320;
  if (*(_DWORD *)(v7 + 8))
  {
    unint64_t v230 = 0;
    int v231 = 0;
    float v232 = *(_OWORD **)v7;
    do
    {
      int v233 = *((_DWORD *)v232 + v230);
      *((_DWORD *)v232 + v230) = v231;
      v231 += v233;
      ++v230;
    }
    while (v230 < *(unsigned int *)(v7 + 8));
  }
  int v234 = v321;
  _X21 = v319;
  if (v2)
  {
    unsigned int v236 = 0;
    uint64_t v237 = *v229;
    int v238 = v2;
    do
    {
      uint64_t v239 = v237 + v236;
      *(_DWORD *)(v239 + 28) = 0;
      *(_WORD *)(v239 + 14) = 0;
      v236 += v8;
      --v238;
    }
    while (v238);
  }
  uint64_t v240 = 0;
  uint64_t v241 = v322;
  do
  {
    uint64_t v242 = v241[v240];
    *(_DWORD *)(v242 + 12) = 0;
    *(_WORD *)(v242 + 8) = 0;
    ++v240;
  }
  while (v228 != v240);
  unsigned int v243 = v323;
  if (!v234)
  {
    int v139 = 0;
    goto LABEL_299;
  }
  unsigned int v244 = 0;
  int v139 = 0;
  unsigned int v245 = v234 - 1;
  do
  {
    unsigned int v246 = v245;
    if (v245 >= 4uLL) {
      unsigned int v246 = 4;
    }
    __int32 v247 = &_X21[6 * v246];
    _X9 = v247[4];
    __asm { PRFM            #0, [X9] }
    _X9 = *v247;
    _X8 = v247[1];
    __asm
    {
      PRFM            #0, [X9]
      PRFM            #0, [X8]
      PRFM            #0, [X21,#0x180]
    }
    int v255 = *((unsigned __int16 *)_X21 + 8);
    uint64_t v256 = *_X21;
    if (v255 != 0xFFFF)
    {
      float v257 = (int *)(v256 + 12);
      goto LABEL_223;
    }
    if ((v256 - v142) / v8 < v2)
    {
      float v257 = (int *)(v256 + 28);
LABEL_223:
      int v258 = *v257;
      int v259 = *((unsigned __int16 *)_X21 + 9);
      uint64_t v260 = _X21[1];
      if (v259 != 0xFFFF)
      {
        float v261 = (int *)(v260 + 12);
        goto LABEL_227;
      }
      if ((v260 - v142) / v8 < v2)
      {
        float v261 = (int *)(v260 + 28);
LABEL_227:
        int v262 = *v261;
        int v263 = *v261 | v258;
        if (v263 == -1)
        {
          float v268 = &v6[6 * v244++];
        }
        else
        {
          unsigned int v264 = __clz(__rbit32(~v263));
          int v265 = (1 << v264) | v258;
          unsigned int v266 = v264 + 1;
          if (v255 == 0xFFFF)
          {
            *(_DWORD *)(v256 + 28) = v265;
            unsigned int v269 = *(unsigned __int16 *)(*_X21 + 12);
            if (v269 <= v266) {
              LOWORD(v269) = v264 + 1;
            }
            *(_WORD *)(*_X21 + 12) = v269;
          }
          else
          {
            *(_DWORD *)(v256 + 12) = v265;
            unsigned int v267 = *(unsigned __int16 *)(v256 + 10);
            if (v267 <= v266) {
              LOWORD(v267) = v264 + 1;
            }
            *(_WORD *)(v256 + 10) = v267;
          }
          int v270 = (1 << v264) | v262;
          uint64_t v271 = _X21[1];
          if (v259 == 0xFFFF)
          {
            *(_DWORD *)(v271 + 28) = v270;
            uint64_t v273 = _X21[1];
            unsigned int v274 = *(unsigned __int16 *)(v273 + 12);
            if (v274 <= v266) {
              LOWORD(v274) = v264 + 1;
            }
            *(_WORD *)(v273 + 12) = v274;
          }
          else
          {
            *(_DWORD *)(v271 + 12) = v270;
            unsigned int v272 = *(unsigned __int16 *)(v271 + 10);
            if (v272 <= v266) {
              LOWORD(v272) = v264 + 1;
            }
            *(_WORD *)(v271 + 10) = v272;
          }
          unsigned int v275 = *(_DWORD *)(*(void *)v7 + 4 * v264);
          *(_DWORD *)(*(void *)v7 + 4 * v264) = v275 + 1;
          float v268 = &v145[6 * v275];
        }
        goto LABEL_253;
      }
      if (v255 != 0xFFFF)
      {
LABEL_248:
        char v276 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)v256 + 344))(v256, _X21, 1);
        unsigned int v243 = v323;
        float v145 = v325;
        if (v276)
        {
LABEL_249:
          ++v139;
          goto LABEL_254;
        }
        uint64_t v277 = *(unsigned __int16 *)(v256 + 10);
        unsigned int v278 = *(unsigned __int16 *)(v256 + 8);
        *(_WORD *)(v256 + 8) = v278 + 1;
        goto LABEL_252;
      }
      goto LABEL_251;
    }
    uint64_t v256 = _X21[1];
    if (*((__int16 *)_X21 + 9) != -1) {
      goto LABEL_248;
    }
    if ((v256 - v142) / v8 >= v2) {
      goto LABEL_249;
    }
LABEL_251:
    uint64_t v277 = *(unsigned __int16 *)(v256 + 12);
    unsigned int v278 = *(unsigned __int16 *)(v256 + 14);
    *(_WORD *)(v256 + 14) = v278 + 1;
LABEL_252:
    uint64_t v279 = v277 + v278;
    unsigned int v280 = *(_DWORD *)(*(void *)v7 + 4 * v279);
    *(_DWORD *)(*(void *)v7 + 4 * v279) = v280 + 1;
    float v268 = &v145[6 * v280];
LABEL_253:
    long long v281 = *(_OWORD *)_X21;
    long long v282 = *((_OWORD *)_X21 + 2);
    v268[1] = *((_OWORD *)_X21 + 1);
    float32x4_t v268[2] = v282;
    *float v268 = v281;
LABEL_254:
    _X21 += 6;
    --v245;
  }
  while (v245 != -1);
  if (!v244)
  {
    int v234 = v321;
    goto LABEL_299;
  }
  int v283 = 0;
  int v234 = v321;
  while (2)
  {
    if (v243)
    {
      for (unsigned int n = 0; n < v243; n += v8)
        *(_DWORD *)(v142 + 28 + n) = 0;
    }
    uint64_t v285 = v322;
    uint64_t v286 = v324;
    do
    {
      uint64_t v287 = *v285++;
      *(_DWORD *)(v287 + 12) = 0;
      --v286;
    }
    while (v286);
    unint64_t v288 = 0;
    v283 += 32;
    if (v244 <= 1) {
      unsigned int v289 = 1;
    }
    else {
      unsigned int v289 = v244;
    }
    uint64_t v290 = 48 * v289;
    unsigned int v244 = 0;
    while (2)
    {
      __int32 v291 = (long long *)&v6[v288 / 8];
      int v292 = LOWORD(v6[v288 / 8 + 2]);
      uint64_t v293 = v6[v288 / 8];
      if (v292 != 0xFFFF)
      {
        unint64_t v294 = (int *)(v293 + 12);
        goto LABEL_270;
      }
      if ((v293 - v142) / v8 >= v2)
      {
        int v296 = 0;
        int v295 = 1;
      }
      else
      {
        unint64_t v294 = (int *)(v293 + 28);
LABEL_270:
        int v295 = 0;
        int v296 = *v294;
      }
      int v297 = WORD1(v6[v288 / 8 + 2]);
      uint64_t v298 = v6[v288 / 8 + 1];
      if (v297 != 0xFFFF)
      {
        __int32 v299 = (int *)(v298 + 12);
        goto LABEL_275;
      }
      if ((v298 - v142) / v8 >= v2)
      {
        int v301 = 0;
        int v300 = 1;
      }
      else
      {
        __int32 v299 = (int *)(v298 + 28);
LABEL_275:
        int v300 = 0;
        int v301 = *v299;
      }
      if ((v301 | v296) == 0xFFFFFFFF)
      {
        unsigned int v309 = v244++;
        char v310 = v6;
      }
      else
      {
        unsigned int v302 = __clz(__rbit32(~(v301 | v296)));
        if (v295) {
          int v303 = 0;
        }
        else {
          int v303 = 1 << v302;
        }
        int v304 = v303 | v296;
        if (v300) {
          int v305 = 0;
        }
        else {
          int v305 = 1 << v302;
        }
        int v306 = v305 | v301;
        if (v292 == 0xFFFF) {
          uint64_t v307 = 28;
        }
        else {
          uint64_t v307 = 12;
        }
        *(_DWORD *)(v293 + v307) = v304;
        if (v297 == 0xFFFF) {
          uint64_t v308 = 28;
        }
        else {
          uint64_t v308 = 12;
        }
        *(_DWORD *)(v6[v288 / 8 + 1] + v308) = v306;
        unsigned int v309 = *(_DWORD *)(*(void *)v7 + 4 * (v302 + v283));
        *(_DWORD *)(*(void *)v7 + 4 * (v302 + v283)) = v309 + 1;
        char v310 = v145;
      }
      v311 = &v310[6 * v309];
      long long v312 = *v291;
      long long v313 = v291[2];
      v311[1] = v291[1];
      v311[2] = v313;
      _OWORD *v311 = v312;
      v288 += 48;
      if (v290 != v288) {
        continue;
      }
      break;
    }
    unsigned int v243 = v323;
    if (v244) {
      continue;
    }
    break;
  }
LABEL_299:
  int v81 = v234 - v139;
  if (v318 >= 0x401) {
    physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v326, v322);
  }
  float v80 = v320;
LABEL_302:
  v80[16] = v81;
  v80[17] = 0;
  v80[18] = v139;
  uint64_t v314 = *(unsigned int *)(v7 + 8);
  if (!v314) {
    return 0;
  }
  uint64_t result = 0;
  int v316 = 0;
  while (1)
  {
    int v317 = *(_DWORD *)(*(void *)v7 + 4 * result);
    if (v317 == v316) {
      break;
    }
    ++result;
    int v316 = v317;
    if (v314 == result) {
      return *(unsigned int *)(v7 + 8);
    }
  }
  return result;
}

void physx::Dy::preprocessRows(float **a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, float a10, double a11, double a12, float32x4_t a13, double a14, double a15, float32x4_t a16, char a17, char a18, char a19)
{
  v97[100] = *MEMORY[0x263EF8340];
  if (a5)
  {
    uint64_t v23 = 0;
    uint64_t v24 = a5;
    do
    {
      if (v23)
      {
        unsigned int v25 = *(unsigned __int16 *)(a2 + 80 * v23 + 78);
        uint64_t v26 = v23;
        while (1)
        {
          uint64_t v27 = (v26 - 1);
          double v28 = a1[v27];
          if (v25 >= *((unsigned __int16 *)v28 + 39)) {
            break;
          }
          a1[v26--] = v28;
          if (!v27) {
            goto LABEL_7;
          }
        }
      }
      else
      {
LABEL_7:
        LODWORD(v26) = 0;
      }
      a1[v26] = (float *)(a2 + 80 * v23++);
    }
    while (v23 != a5);
    int8x8_t v29 = (_WORD *)(a2 + 76);
    do
    {
      int v30 = 0;
      if ((*v29 & 8) != 0) {
        int v30 = *((_DWORD *)v29 - 16);
      }
      *((_DWORD *)v29 - 1) = v30;
      v29 += 40;
      --v24;
    }
    while (v24);
  }
  if (a5)
  {
    float32x4_t v31 = *(float32x4_t *)a6;
    float32x4_t v32 = *(float32x4_t *)(a6 + 12);
    a13.i64[0] = *(void *)(a6 + 24);
    a13.i32[2] = *(_DWORD *)(a6 + 32);
    float32x4_t v33 = *(float32x4_t *)a7;
    float32x4_t v34 = *(float32x4_t *)(a7 + 12);
    uint64_t v35 = a5;
    a16.i64[0] = *(void *)(a7 + 24);
    uint64_t v36 = a1;
    unint64_t v37 = a3;
    unint64_t v38 = a4;
    a16.i32[2] = *(_DWORD *)(a7 + 32);
    do
    {
      int v39 = *v36++;
      float32x4_t v40 = vmulq_n_f32(v31, v39[4]);
      v40.i32[3] = 0;
      float32x4_t v41 = vmulq_n_f32(v32, v39[5]);
      v41.i32[3] = 0;
      float32x4_t v42 = vmulq_n_f32(a13, v39[6]);
      v42.i32[3] = 0;
      float32x4_t v43 = vaddq_f32(vaddq_f32(v40, v41), v42);
      float32x4_t v44 = vmulq_n_f32(v33, v39[12]);
      v44.i32[3] = 0;
      float32x4_t v19 = vmulq_n_f32(v34, v39[13]);
      v19.i32[3] = 0;
      float32x4_t v20 = vmulq_n_f32(a16, v39[14]);
      v20.i32[3] = 0;
      *v37++ = v43;
      *v38++ = vaddq_f32(vaddq_f32(v44, v19), v20);
      --v35;
    }
    while (v35);
  }
  if ((a17 & 1) == 0)
  {
    v19.f32[0] = *(float *)a8 * a9;
    v20.i32[0] = *(_DWORD *)(a8 + 12);
    *(float *)v21.i32 = *(float *)(a8 + 8) * a10;
    v97[0] = vdup_lane_s32(*(int32x2_t *)v19.f32, 0);
    v97[1] = vdup_lane_s32(v21, 0);
    int32x2_t v45 = *(int32x2_t *)(a8 + 4);
    v97[2] = vdup_lane_s32(v45, 0);
    v97[3] = vdup_lane_s32(*(int32x2_t *)v20.f32, 0);
    if (a5)
    {
      unsigned int v46 = 0;
      unsigned int v93 = a5;
      unint64_t v47 = a5;
      __int32 v91 = v20.i32[0];
      __int32 v92 = v19.i32[0];
      __int32 v89 = v45.i32[0];
      __int32 v90 = v21.i32[0];
      unint64_t v88 = a5;
      do
      {
        unsigned int v48 = v46;
        uint64_t v49 = v46;
        float v50 = (float32x4_t **)&a1[v46];
        int v51 = HIBYTE((*v50)[4].u16[7]);
        if (a5 <= v46 + 1) {
          ++v46;
        }
        else {
          unsigned int v46 = a5;
        }
        unsigned int v52 = v46 - 1;
        uint64_t v53 = 1;
        while (v49 + v53 < v47)
        {
          int v54 = v50[v53++][4].u8[15];
          if (v54 != v51)
          {
            int v55 = v49 + v53;
            unsigned int v52 = v55 - 2;
            unsigned int v46 = v55 - 1;
            break;
          }
        }
        if (v51 == 1)
        {
          if (a18)
          {
            if (v48 <= v52)
            {
              float v86 = v50;
              while ((*v86)[4].i8[14] != 2)
              {
                ++v48;
                ++v86;
                if (v52 + 1 == v48)
                {
                  unsigned int v48 = v52 + 1;
                  break;
                }
              }
            }
            else
            {
              unsigned int v48 = v49;
            }
            unsigned int v94 = v46;
            if (v48 + 2 == v52)
            {
              uint64_t v87 = v49;
              uint64_t v49 = v87;
            }
            a5 = v93;
            v20.i32[0] = v91;
            v19.i32[0] = v92;
            v45.i32[0] = v89;
            v21.i32[0] = v90;
            unsigned int v46 = v94;
            unint64_t v47 = v88;
          }
        }
        else if (v51 == 4 || v51 == 8 && a19)
        {
          unsigned int v56 = v48;
          if (v48 <= v52)
          {
            int v57 = v50;
            unsigned int v56 = v48;
            while (!(*v57)[4].i8[14])
            {
              ++v56;
              ++v57;
              if (v52 + 1 == v56)
              {
                unsigned int v56 = v52 + 1;
                break;
              }
            }
          }
          if (v46 != v48)
          {
            unint64_t v58 = 0;
            f32 = (_OWORD *)a3[v49].f32;
            unint64_t v60 = v56 - v48;
            int v61 = &a4[v49];
            do
            {
              if (v58 >= v60) {
                unint64_t v62 = v60;
              }
              else {
                unint64_t v62 = v58;
              }
              if (v60 >= v58) {
                int v63 = v58;
              }
              else {
                int v63 = v60;
              }
              unsigned __int16 v64 = v50[v58];
              float32x4_t v65 = *v64;
              float32x4_t v66 = v64[1];
              float32x4_t v67 = v64[2];
              float32x4_t v68 = v64[3];
              v67.i32[3] = 0;
              v68.i32[3] = 0;
              float32x4_t v69 = (float32x4_t)f32[v58];
              float32x4_t v70 = v61[v58];
              if (v63)
              {
                unint64_t v71 = 0;
                uint64_t v72 = 16 * v62;
                do
                {
                  float32x4_t v73 = vaddq_f32(vmlaq_f32(vmulq_f32(v65, *(float32x4_t *)&v97[v71 / 8 + 40]), *(float32x4_t *)&v97[v71 / 8 + 88], v67), vmlaq_f32(vmulq_f32(v69, *(float32x4_t *)&v97[v71 / 8 + 28]), *(float32x4_t *)&v97[v71 / 8 + 76], v70));
                  v73.i64[0] = vpaddq_f32(v73, v73).u64[0];
                  *(float32x2_t *)v73.f32 = vpadd_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v73.f32);
                  float32x4_t v65 = vmlsq_lane_f32(v65, *(float32x4_t *)&v97[v71 / 8 + 16], *(float32x2_t *)v73.f32, 0);
                  float32x4_t v66 = vmlsq_lane_f32(v66, *(float32x4_t *)&v97[v71 / 8 + 4], *(float32x2_t *)v73.f32, 0);
                  float32x4_t v67 = vmlsq_lane_f32(v67, *(float32x4_t *)&v97[v71 / 8 + 64], *(float32x2_t *)v73.f32, 0);
                  v67.i64[1] = vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL).u32[0];
                  float32x4_t v68 = vmlsq_lane_f32(v68, *(float32x4_t *)&v97[v71 / 8 + 52], *(float32x2_t *)v73.f32, 0);
                  v68.i64[1] = vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL).u32[0];
                  float32x4_t v69 = vmlsq_lane_f32(v69, (float32x4_t)f32[v71 / 0x10], *(float32x2_t *)v73.f32, 0);
                  float32x4_t v70 = vmlsq_lane_f32(v70, v61[v71 / 0x10], *(float32x2_t *)v73.f32, 0);
                  v71 += 16;
                }
                while (v72 != v71);
              }
              *unsigned __int16 v64 = v65;
              v50[v58][1] = v66;
              unsigned int v74 = v50[v58];
              v74[2].i64[0] = v67.i64[0];
              v74[2].i32[2] = v67.i32[2];
              v74[3].i32[2] = v68.i32[2];
              v74[3].i64[0] = v68.i64[0];
              f32[v58] = v69;
              v61[v58] = v70;
              if (v58 < v60)
              {
                *(float32x4_t *)&v97[2 * v58 + 16] = v65;
                *(float32x4_t *)&v97[2 * v58 + 4] = v66;
                *(float32x4_t *)&v97[2 * v58 + 64] = v67;
                *(float32x4_t *)&v97[2 * v58 + 52] = v68;
                v65.i32[3] = 0;
                float32x4_t v75 = vmulq_n_f32(v65, v19.f32[0]);
                v75.i32[3] = 0;
                float32x4_t v76 = vmulq_n_f32(v67, *(float *)v21.i32);
                v76.i32[3] = 0;
                float32x4_t v77 = vmulq_n_f32(v69, *(float *)v45.i32);
                float32x4_t v78 = vmulq_n_f32(v70, v20.f32[0]);
                float32x4_t v79 = vaddq_f32(vmlaq_f32(vmulq_f32(v70, v78), v69, v77), vmlaq_f32(vmulq_f32(v67, v76), v75, v65));
                v79.i64[0] = vpaddq_f32(v79, v79).u64[0];
                float32x2_t v80 = vpadd_f32(*(float32x2_t *)v79.f32, *(float32x2_t *)v79.f32);
                float32x2_t v81 = vrecpe_f32(v80);
                int v82 = 4;
                do
                {
                  float32x2_t v81 = vmul_f32(v81, vrecps_f32(v80, v81));
                  --v82;
                }
                while (v82);
                LODWORD(v83) = vand_s8((int8x8_t)vdup_lane_s32(vcgtz_f32(v80), 0), (int8x8_t)v81).u32[0];
                v75.i32[3] = 0;
                *(float32x4_t *)&v97[2 * v58 + 40] = vmulq_n_f32(v75, v83);
                v77.i32[3] = 0;
                *(float32x4_t *)&v97[2 * v58 + 28] = vmulq_n_f32(v77, v83);
                float32x4_t v84 = vmulq_n_f32(v76, v83);
                v84.i32[3] = 0;
                *(float32x4_t *)&v97[2 * v58 + 88] = v84;
                float32x4_t v85 = vmulq_n_f32(v78, v83);
                v85.i32[3] = 0;
                *(float32x4_t *)&v97[2 * v58 + 76] = v85;
              }
              ++v58;
            }
            while (v58 != v46 - v48);
          }
        }
      }
      while (v46 < a5);
    }
  }
}

float32x4_t physx::Dy::anonymous namespace'::diagonalize(float32x4_t **a1, float32x4_t *a2, float32x4_t *a3, void *a4)
{
  int v4 = *a1;
  float v5 = a1[1];
  v6.i64[0] = (*a1)->i64[0];
  v6.i64[1] = (*a1)->u32[2];
  uint64_t v7 = a4[1];
  float32x4_t v8 = vmulq_n_f32(v6, COERCE_FLOAT(*a4));
  v8.i32[3] = 0;
  v9.i64[0] = (*a1)[2].i64[0];
  v9.i64[1] = (*a1)[2].u32[2];
  float32x4_t v10 = vmulq_n_f32(v9, *(float *)&v7);
  v10.i32[3] = 0;
  float32x4_t v12 = *a2;
  float32x4_t v11 = a2[1];
  v12.i32[3] = 0;
  uint64_t v14 = a4[2];
  uint64_t v13 = a4[3];
  float32x4_t v15 = vmlaq_n_f32(vmulq_f32(v6, v8), vmulq_f32(v12, v12), *(float *)&v14);
  v15.i64[1] = vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u32[0];
  float32x4_t v16 = *a3;
  float32x4_t v17 = a3[1];
  v16.i32[3] = 0;
  float32x4_t v18 = vmlaq_n_f32(vmulq_f32(v9, v10), vmlaq_f32(v15, v16, v16), *(float *)&v13);
  *(float32x2_t *)v15.f32 = vpadd_f32(*(float32x2_t *)v18.f32, (float32x2_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u32[0]);
  LODWORD(v164) = vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32).u32[0];
  v19.i64[0] = v5->i64[0];
  v19.i64[1] = v5->u32[2];
  v18.i64[0] = v5[2].i64[0];
  v18.i64[1] = v5[2].u32[2];
  v11.i32[3] = 0;
  float32x4_t v20 = vmlaq_n_f32(vmulq_f32(v8, v19), vmulq_f32(v12, v11), *(float *)&v14);
  v20.i64[1] = vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u32[0];
  v17.i32[3] = 0;
  float32x4_t v21 = vmlaq_n_f32(vmulq_f32(v10, v18), vmlaq_f32(v20, v17, v16), *(float *)&v13);
  float32x2_t v22 = vpadd_f32(*(float32x2_t *)v21.f32, (float32x2_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u32[0]);
  uint64_t v23 = a1[2];
  v21.i64[0] = v23->i64[0];
  v21.i64[1] = v23->u32[2];
  float32x4_t v24 = vmulq_f32(v8, v21);
  v8.i64[0] = v23[2].i64[0];
  v8.i64[1] = v23[2].u32[2];
  float32x4_t v25 = a2[2];
  float32x4_t v26 = a3[2];
  v25.i32[3] = 0;
  float32x4_t v27 = vmlaq_n_f32(v24, vmulq_f32(v12, v25), *(float *)&v14);
  v27.i64[1] = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u32[0];
  v26.i32[3] = 0;
  int8x16_t v28 = (int8x16_t)vmlaq_n_f32(vmulq_f32(v10, v8), vmlaq_f32(v27, v26, v16), *(float *)&v13);
  LODWORD(v29) = vpadd_f32(v22, v22).u32[0];
  *(float32x2_t *)v16.f32 = vpadd_f32(*(float32x2_t *)v28.i8, (float32x2_t)vextq_s8(v28, v28, 8uLL).u32[0]);
  LODWORD(v30) = vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32).u32[0];
  float32x4_t v31 = vmulq_n_f32(v19, COERCE_FLOAT(*a4));
  v31.i32[3] = 0;
  float32x4_t v32 = vmulq_n_f32(v18, *(float *)&v7);
  v32.i32[3] = 0;
  float32x4_t v33 = vmlaq_n_f32(vmulq_f32(v19, v31), vmulq_f32(v11, v11), *(float *)&v14);
  v33.i64[1] = vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u32[0];
  int8x16_t v34 = (int8x16_t)vmlaq_n_f32(vmulq_f32(v18, v32), vmlaq_f32(v33, v17, v17), *(float *)&v13);
  *(float32x2_t *)v34.i8 = vpadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)vextq_s8(v34, v34, 8uLL).u32[0]);
  LODWORD(v35) = vpadd_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8).u32[0];
  float32x4_t v36 = vmlaq_n_f32(vmulq_f32(v31, v21), vmulq_f32(v11, v25), *(float *)&v14);
  v36.i64[1] = vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u32[0];
  int8x16_t v37 = (int8x16_t)vmlaq_n_f32(vmulq_f32(v32, v8), vmlaq_f32(v36, v26, v17), *(float *)&v13);
  float32x4_t v38 = vmulq_n_f32(v21, COERCE_FLOAT(*a4));
  v38.i32[3] = 0;
  *(float32x2_t *)v17.f32 = vpadd_f32(*(float32x2_t *)v37.i8, (float32x2_t)vextq_s8(v37, v37, 8uLL).u32[0]);
  float32x4_t v39 = vmulq_n_f32(v8, *(float *)&v7);
  v39.i32[3] = 0;
  float32x4_t v40 = vmlaq_n_f32(vmulq_f32(v21, v38), vmulq_f32(v25, v25), *(float *)&v14);
  v40.i64[1] = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u32[0];
  int8x16_t v41 = (int8x16_t)vmlaq_n_f32(vmulq_f32(v8, v39), vmlaq_f32(v40, v26, v26), *(float *)&v13);
  LODWORD(v42) = vpadd_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32).u32[0];
  float32x2_t v43 = vpadd_f32(*(float32x2_t *)v41.i8, (float32x2_t)vextq_s8(v41, v41, 8uLL).u32[0]);
  LODWORD(v44) = vpadd_f32(v43, v43).u32[0];
  float v45 = 0.0;
  int v46 = 5;
  float v47 = 1.0;
  float v48 = 0.0;
  float v49 = 0.0;
  do
  {
    float v50 = v48 * (float)(v48 + v48);
    float v51 = v45 * (float)(v45 + v45);
    float v52 = v48 * (float)(v49 + v49);
    float v53 = v45 * (float)(v49 + v49);
    float v54 = v47 * (float)(v49 + v49);
    float v55 = v45 * (float)(v48 + v48);
    float v56 = v47 * (float)(v48 + v48);
    float v57 = v47 * (float)(v45 + v45);
    float v58 = (float)(1.0 - v50) - v51;
    float v59 = v57 + v52;
    float v60 = v53 - v56;
    float v61 = v52 - v57;
    float v62 = 1.0 - (float)(v49 * (float)(v49 + v49));
    float v63 = v62 - v51;
    float v64 = v55 + v54;
    float v65 = v56 + v53;
    float v66 = v55 - v54;
    float v67 = v62 - v50;
    float v68 = (float)(v30 * v60) + (float)((float)(v164 * v58) + (float)(v29 * v59));
    float v69 = (float)(v30 * v64) + (float)((float)(v164 * v61) + (float)(v29 * v63));
    float v70 = (float)((float)(v164 * v65) + (float)(v29 * v66)) + (float)(v30 * v67);
    float v71 = (float)(v42 * v60) + (float)((float)(v29 * v58) + (float)(v35 * v59));
    float v72 = (float)(v42 * v64) + (float)((float)(v29 * v61) + (float)(v35 * v63));
    float v73 = (float)((float)(v29 * v65) + (float)(v35 * v66)) + (float)(v42 * v67);
    float v74 = (float)(v44 * v60) + (float)((float)(v30 * v58) + (float)(v42 * v59));
    float v75 = (float)(v44 * v64) + (float)((float)(v30 * v61) + (float)(v42 * v63));
    float v76 = (float)((float)(v30 * v65) + (float)(v42 * v66)) + (float)(v44 * v67);
    float v77 = (float)(v60 * v74) + (float)((float)(v58 * v68) + (float)(v59 * v71));
    float v78 = (float)(v60 * v75) + (float)((float)(v58 * v69) + (float)(v59 * v72));
    float v79 = (float)(v60 * v76) + (float)((float)(v58 * v70) + (float)(v59 * v73));
    float v80 = fabsf((float)(v64 * v76) + (float)((float)(v61 * v70) + (float)(v63 * v73)));
    float v81 = fabsf(v79);
    float v82 = fabsf(v78);
    if (v81 > v82) {
      LODWORD(v83) = 1;
    }
    else {
      LODWORD(v83) = 2;
    }
    BOOL v84 = v80 <= v82 || v80 <= v81;
    *(float *)unsigned int v166 = v77;
    *(float *)&v166[1] = v78;
    *(float *)&v166[2] = v79;
    *(float *)&v166[3] = (float)(v64 * v74) + (float)((float)(v61 * v68) + (float)(v63 * v71));
    *(float *)&v166[4] = (float)(v64 * v75) + (float)((float)(v61 * v69) + (float)(v63 * v72));
    *(float *)&v166[5] = (float)(v64 * v76) + (float)((float)(v61 * v70) + (float)(v63 * v73));
    *(float *)&v166[6] = (float)(v67 * v74) + (float)((float)(v65 * v68) + (float)(v66 * v71));
    *(float *)&v166[7] = (float)(v67 * v75) + (float)((float)(v65 * v69) + (float)(v66 * v72));
    *(float *)&v166[8] = (float)(v67 * v76) + (float)((float)(v65 * v70) + (float)(v66 * v73));
    if (v84) {
      uint64_t v83 = v83;
    }
    else {
      uint64_t v83 = 0;
    }
    float v86 = &v166[3 * (((_BYTE)v83 + (v83 >> 1) + 1) & 3)];
    float v87 = *(float *)&v86[((_BYTE)v83
                        + (v83 >> 1)
                        + 1
                        + (((v83 + (v83 >> 1) + 1) & 3) >> 1)
                        + 1) & 3];
    if (v87 == 0.0) {
      break;
    }
    float v88 = *(float *)&v86[((_BYTE)v83 + (v83 >> 1) + 1) & 3];
    uint64_t v85 = ((_BYTE)v83
         + (v83 >> 1)
         + 1
         + (((v83 + (v83 >> 1) + 1) & 3) >> 1)
         + 1) & 3;
    float v89 = *(float *)&v166[3 * v85 + v85];
    float v90 = v87 + v87;
    if (vabds_f32(v88, v89) > (float)(fabsf(v90) * 2000000.0)) {
      break;
    }
    float v91 = (float)(v88 - v89) / v90;
    float v92 = fabsf(v91);
    if (v92 <= 1000.0)
    {
      float v93 = sqrtf((float)(v91 * v91) + 1.0);
      float v94 = 1.0 / sqrtf((float)((float)(1.0 / (float)(v92 + v93)) * (float)(1.0 / (float)(v92 + v93))) + 1.0);
      float v95 = sqrtf((float)(1.0 - v94) * 0.5);
      if (v91 < 0.0) {
        float v95 = -v95;
      }
      *(void *)&long long v165 = 0;
      DWORD2(v165) = 0;
      HIDWORD(v165) = sqrtf((float)(v94 + 1.0) * 0.5);
      *(float *)&v166[v83 - 1] = v95;
    }
    else
    {
      long long v165 = xmmword_23435FBB0;
      *(float *)((unint64_t)&v165 | (4 * v83)) = 1.0 / (float)(v91 * 4.0);
    }
    float v96 = (float)((float)((float)(v49 * *((float *)&v165 + 3)) + (float)(v47 * *(float *)&v165))
                + (float)(v48 * *((float *)&v165 + 2)))
        - (float)(*((float *)&v165 + 1) * v45);
    float v97 = (float)((float)((float)(v48 * *((float *)&v165 + 3)) + (float)(v47 * *((float *)&v165 + 1)))
                + (float)(v45 * *(float *)&v165))
        - (float)(*((float *)&v165 + 2) * v49);
    float v98 = (float)((float)((float)(v45 * *((float *)&v165 + 3)) + (float)(v47 * *((float *)&v165 + 2)))
                + (float)(v49 * *((float *)&v165 + 1)))
        - (float)(*(float *)&v165 * v48);
    float v99 = (float)((float)((float)(v47 * *((float *)&v165 + 3)) - (float)(v49 * *(float *)&v165))
                - (float)(v48 * *((float *)&v165 + 1)))
        - (float)(v45 * *((float *)&v165 + 2));
    float v100 = sqrtf((float)((float)((float)(v97 * v97) + (float)(v96 * v96)) + (float)(v98 * v98)) + (float)(v99 * v99));
    float v49 = v96 / v100;
    float v48 = v97 / v100;
    float v45 = v98 / v100;
    float v47 = v99 / v100;
    --v46;
  }
  while (v46);
  float v101 = (float)-v49 - v49;
  float v102 = (float)-v48 - v48;
  float v103 = (float)-v45 - v45;
  float v104 = -(float)(v48 * v102);
  float v105 = -(float)(v45 * v103);
  float v106 = -(float)(v48 * v101);
  float v107 = -(float)(v45 * v101);
  float v108 = -(float)(v47 * v101);
  float v109 = -(float)(v45 * v102);
  float v110 = -(float)(v47 * v102);
  float v111 = (float)(1.0 - v104) - v105;
  float v112 = v106 - (float)(v47 * v103);
  float v113 = v107 - v110;
  float v114 = v106 - (float)-(float)(v47 * v103);
  float v115 = (float)(v49 * v101) + 1.0;
  float v116 = v115 - v105;
  float v117 = v109 - (float)(v47 * v101);
  float v118 = v110 + v107;
  float v119 = v109 - v108;
  float v120 = v115 - v104;
  float32x4_t v121 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*v23, v107 - v110), *v5, v112), *v4, v111);
  float32x4_t v122 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*v23, v117), *v5, v115 - v105), *v4, v114);
  float32x4_t v123 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*v23, v120), *v5, v119), *v4, v110 + v107);
  *int v4 = v121;
  *float v5 = v122;
  *uint64_t v23 = v123;
  float v124 = (uint64_t *)*a1;
  uint64_t v125 = a1[1];
  uint64_t v126 = a1[2];
  v127.i64[0] = (*a1)[2].i64[0];
  int v128 = &(*a1)[2].i32[2];
  v127.i64[1] = *v128;
  v129.i64[0] = v125[2].i64[0];
  v129.i64[1] = v125[2].u32[2];
  v123.i64[0] = v126[2].i64[0];
  v123.i64[1] = v126[2].u32[2];
  float32x4_t v130 = vmulq_n_f32(v123, v113);
  v130.i32[3] = 0;
  float32x4_t v131 = vmlaq_n_f32(v130, v129, v112);
  v131.i64[1] = vextq_s8((int8x16_t)v131, (int8x16_t)v131, 8uLL).u32[0];
  float32x4_t v132 = vmlaq_n_f32(v131, v127, v111);
  float32x4_t v133 = vmulq_n_f32(v123, v117);
  v133.i32[3] = 0;
  float32x4_t v134 = vmlaq_n_f32(v133, v129, v116);
  v134.i64[1] = vextq_s8((int8x16_t)v134, (int8x16_t)v134, 8uLL).u32[0];
  float32x4_t v135 = vmlaq_n_f32(v134, v127, v114);
  float32x4_t v136 = vmulq_n_f32(v123, v120);
  v136.i32[3] = 0;
  float32x4_t v137 = vmlaq_n_f32(v136, v129, v119);
  v137.i64[1] = vextq_s8((int8x16_t)v137, (int8x16_t)v137, 8uLL).u32[0];
  float32x4_t v138 = vmlaq_n_f32(v137, v127, v118);
  v124[4] = v132.i64[0];
  *int v128 = v132.i32[2];
  v125[2].i64[0] = v135.i64[0];
  v125[2].i32[2] = v135.i32[2];
  v126[2].i64[0] = v138.i64[0];
  v126[2].i32[2] = v138.i32[2];
  float32x4_t v139 = *((float32x4_t *)v124 + 1);
  float32x4_t v140 = v125[1];
  float32x4_t v141 = v126[1];
  *((float32x4_t *)v124 + 1) = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v141, v113), v140, v112), v139, v111);
  v125[1] = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v141, v117), v140, v116), v139, v114);
  v126[1] = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v141, v120), v140, v119), v139, v118);
  uint64_t v142 = a1[1];
  unsigned int v143 = a1[2];
  v139.i64[0] = (*a1)[3].i64[0];
  float v144 = &(*a1)[3].i32[2];
  v139.i64[1] = *v144;
  v140.i64[0] = v142[3].i64[0];
  v140.i64[1] = v142[3].u32[2];
  v141.i64[0] = v143[3].i64[0];
  v141.i64[1] = v143[3].u32[2];
  float32x4_t v145 = vmulq_n_f32(v141, v113);
  v145.i32[3] = 0;
  float32x4_t v146 = vmlaq_n_f32(v145, v140, v112);
  v146.i64[1] = vextq_s8((int8x16_t)v146, (int8x16_t)v146, 8uLL).u32[0];
  float32x4_t v147 = vmlaq_n_f32(v146, v139, v111);
  float32x4_t v148 = vmulq_n_f32(v141, v117);
  v148.i32[3] = 0;
  float32x4_t v149 = vmlaq_n_f32(v148, v140, v116);
  v149.i64[1] = vextq_s8((int8x16_t)v149, (int8x16_t)v149, 8uLL).u32[0];
  float32x4_t v150 = vmlaq_n_f32(v149, v139, v114);
  float32x4_t v151 = vmulq_n_f32(v141, v120);
  v151.i32[3] = 0;
  float32x4_t v152 = vmlaq_n_f32(v151, v140, v119);
  v152.i64[1] = vextq_s8((int8x16_t)v152, (int8x16_t)v152, 8uLL).u32[0];
  float32x4_t v153 = vmlaq_n_f32(v152, v139, v118);
  (*a1)[3].i64[0] = v147.i64[0];
  *float v144 = v147.i32[2];
  v142[3].i64[0] = v150.i64[0];
  v142[3].i32[2] = v150.i32[2];
  v143[3].i64[0] = v153.i64[0];
  v143[3].i32[2] = v153.i32[2];
  float32x4_t v154 = a2[1];
  float32x4_t v155 = a2[2];
  float32x4_t v156 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v155, v113), v154, v112), *a2, v111);
  float32x4_t v157 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v155, v117), v154, v116), *a2, v114);
  float32x4_t v158 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v155, v120), v154, v119), *a2, v118);
  *a2 = v156;
  a2[1] = v157;
  a2[2] = v158;
  float32x4_t v159 = a3[1];
  float32x4_t v160 = a3[2];
  float32x4_t v161 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v160, v113), v159, v112), *a3, v111);
  float32x4_t v162 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v160, v117), v159, v116), *a3, v114);
  float32x4_t result = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v160, v120), v159, v119), *a3, v118);
  *a3 = v161;
  a3[1] = v162;
  a3[2] = result;
  return result;
}

uint64_t physx::Dy::ConstraintHelper::setupSolverConstraint(uint64_t a1, uint64_t (***a2)(void, void), uint64_t a3, float a4, float a5)
{
  uint64_t v120 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(a1 + 136);
  uint64_t v6 = *(void *)(a1 + 16);
  if (v5)
  {
    if (*(__int16 *)(v6 + 16) == -1 && *(__int16 *)(v6 + 18) == -1)
    {
      int v10 = 0;
      unsigned int v9 = 96;
    }
    else
    {
      unsigned int v9 = 160;
      int v10 = 1;
    }
    int v11 = v9 * v5;
    float32x4_t v12 = (void *)(**a2)(a2, v9 * v5 + 64);
    if ((unint64_t)v12 + 1 < 2) {
      return 0;
    }
    size_t v14 = (v11 + 48);
    *(void *)(v6 + 32) = v12;
    *(_WORD *)(v6 + 30) = v14 >> 4;
    *(void *)(v6 + 40) = *(void *)(a1 + 152);
    *(_WORD *)(v6 + 28) = 8;
    bzero(v12, v14);
    uint64_t v19 = *(void *)(v6 + 32);
    unsigned int v20 = *(_DWORD *)(a1 + 136);
    if (v10) {
      char v21 = 4;
    }
    else {
      char v21 = 2;
    }
    *(unsigned char *)uint64_t v19 = v21;
    *(unsigned char *)(v19 + 1) = v20;
    *(unsigned char *)(v19 + 2) = 0;
    uint64_t v22 = *(void *)a1;
    *(void *)(v19 + 32) = *(void *)a1;
    float32x2_t v23 = *(float32x2_t *)(a1 + 8);
    *(float32x2_t *)(v19 + 40) = vneg_f32(v23);
    *(void *)(v19 + 16) = *(void *)(a1 + 164);
    *(_DWORD *)(v19 + 24) = *(_DWORD *)(a1 + 172);
    float32x2_t v24 = *(float32x2_t *)(a1 + 140);
    double v25 = COERCE_DOUBLE(vmul_n_f32(v24, a4));
    *(double *)(v19 + 4) = v25;
    LODWORD(v25) = 2139095039;
    BOOL v26 = v24.f32[0] != 3.4028e38;
    if (*(float *)(a1 + 144) != 3.4028e38) {
      BOOL v26 = 1;
    }
    *(unsigned char *)(v19 + 3) = v26;
    uint64_t v27 = *(void *)(a1 + 40);
    float v28 = *(float *)(v27 + 12);
    *(float *)(v19 + 12) = v28 * *(float *)&v22;
    uint64_t v29 = *(void *)(a1 + 48);
    float v30 = *(float *)(v29 + 12);
    *(float *)(v19 + 28) = v30 * v23.f32[0];
    memset(v117, 0, sizeof(v117));
    uint64_t v31 = v27 + 32;
    if (*(unsigned char *)(a1 + 160)) {
      char v32 = 1;
    }
    else {
      char v32 = v10;
    }
    physx::Dy::preprocessRows((float **)v117, *(void *)(a1 + 128), &v119, &v118, v20, v31, v29 + 32, a1, v28, v30, 0.0, v25, v15, v16, v17, v18, v32, *(unsigned char *)(a1 + 161), 1);
    if (*(_DWORD *)(a1 + 136))
    {
      uint64_t v98 = v6;
      unint64_t v33 = 0;
      float v34 = a4;
      float v35 = fminf(a4, 1.0);
      float v96 = v34 * v34;
      uint64_t v36 = v9;
      _X24 = (float32x2_t *)(v19 + 88);
      float32x4_t v38 = &v118.f32[2];
      float32x4_t v39 = &v119.f32[2];
      char v97 = v10;
      uint64_t v95 = v36;
      while (1)
      {
        __asm { PRFM            #0, [X24,#0x58] }
        uint64_t v44 = *((void *)v117 + v33);
        _ZF = !*(unsigned char *)(a1 + 162) || (*(_WORD *)(v44 + 76) & 0x20) == 0;
        float v46 = _ZF ? 1.0 : v35;
        float v47 = *(float *)(a1 + 148);
        if (v10)
        {
          float v48 = *(float *)(v44 + 44);
          float v49 = *(float *)(v44 + 60);
          _X24[-5] = *(float32x2_t *)v44;
          _X24[-4].i32[0] = *(_DWORD *)(v44 + 8);
          _X24[-3] = *(float32x2_t *)(v44 + 32);
          _X24[-2].i32[0] = *(_DWORD *)(v44 + 40);
          _X24[-1] = *(float32x2_t *)(v44 + 16);
          _X24->i32[0] = *(_DWORD *)(v44 + 24);
          _X24[1] = *(float32x2_t *)(v44 + 48);
          _X24[2].i32[0] = *(_DWORD *)(v44 + 56);
          _X24[5].f32[0] = v46 * v48;
          _X24[5].f32[1] = v46 * v49;
          _X24[6] = 0;
          uint64_t v50 = *(void *)(a1 + 32);
          uint64_t v51 = *(void *)(a1 + 40);
          uint64_t v52 = *(void *)(a1 + 48);
          v115[0] = *(void *)(a1 + 24);
          v115[1] = v51;
          unsigned __int16 v116 = *(_WORD *)(v98 + 16);
          unsigned __int16 v53 = *(_WORD *)(v98 + 18);
          v113[0] = v50;
          v113[1] = v52;
          unsigned __int16 v114 = v53;
          physx::Dy::createImpulseResponseVector(_X24 - 5, (float *)&_X24[-1], (uint64_t)v115, &v109);
          float v54 = -_X24[-2].f32[0];
          float32x2_t v103 = vneg_f32(_X24[-3]);
          float v104 = v54;
          float v55 = -_X24[2].f32[0];
          float32x2_t v101 = vneg_f32(_X24[1]);
          float v102 = v55;
          physx::Dy::createImpulseResponseVector(&v103, (float *)&v101, (uint64_t)v113, &v105);
          float ImpulseResponse = physx::Dy::getImpulseResponse(v115, &v109, _X24 + 7, v113, &v105, _X24 + 11, a3, *(float *)a1, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
          _X24[3] = *(float32x2_t *)(v44 + 16);
          _X24[4].i32[0] = *(_DWORD *)(v44 + 24);
          _X24[-5] = v109;
          _X24[-4].i32[0] = v110;
          _X24[-1] = v111;
          _X24->i32[0] = v112;
          float32_t v57 = -v106;
          _X24[-3] = vneg_f32(v105);
          _X24[-2].f32[0] = v57;
          float32_t v58 = -v108;
          _X24[1] = vneg_f32(v107);
          _X24[2].f32[0] = v58;
          int v59 = *(unsigned __int16 *)(v44 + 76);
          if ((v59 & 4) != 0 || (~v59 & 3) == 0 || v116 == 0xFFFF || (float v60 = 0.0, v61 = 0.0, v114 == 0xFFFF))
          {
            float v61 = physx::Dy::SolverExtBody::projectVelocity((uint64_t)v115, (float *)v44, (float *)(v44 + 16));
            float v62 = physx::Dy::SolverExtBody::projectVelocity((uint64_t)v113, (float *)(v44 + 32), (float *)(v44 + 48));
            float v60 = v61 - v62;
            if ((__int16)v116 != -1)
            {
              float v63 = -v62;
              if ((__int16)v114 == -1) {
                float v61 = v63;
              }
              else {
                float v61 = 0.0;
              }
            }
          }
          float v47 = fmaxf(v47, 0.00001);
          float v34 = a4;
          LOBYTE(v10) = v97;
          uint64_t v36 = v95;
        }
        else
        {
          float v64 = *(v39 - 2);
          float v65 = *(v39 - 1);
          float v66 = *v39;
          float v67 = *(v38 - 2);
          float v68 = *(v38 - 1);
          float v69 = *v38;
          float32_t v70 = v46 * *(float *)(v44 + 44);
          float32_t v71 = v46 * *(float *)(v44 + 60);
          float v72 = *(float *)v44;
          _X24[-5].i32[0] = *(_DWORD *)v44;
          float v73 = *(float *)(v44 + 4);
          _X24[-5].f32[1] = v73;
          float v74 = *(float *)(v44 + 8);
          _X24[-4].f32[0] = v74;
          float v75 = *(float *)(v44 + 32);
          _X24[-3].f32[0] = v75;
          float v76 = *(float *)(v44 + 36);
          _X24[-3].f32[1] = v76;
          float v77 = *(float *)(v44 + 40);
          _X24[-2].f32[0] = v77;
          _X24[-1].f32[0] = v64;
          _X24[-1].f32[1] = v65;
          _X24->f32[0] = v66;
          _X24[1].f32[0] = v67;
          _X24[1].f32[1] = v68;
          _X24[2].f32[0] = v69;
          _X24[5].f32[0] = v70;
          _X24[5].f32[1] = v71;
          _X24[6] = 0;
          _X24[3] = *(float32x2_t *)(v44 + 16);
          _X24[4].i32[0] = *(_DWORD *)(v44 + 24);
          float v78 = *(float **)(a1 + 40);
          float v79 = *(float **)(a1 + 48);
          float ImpulseResponse = (float)((float)((float)((float)((float)(v65 * v65) + (float)(v64 * v64)) + (float)(v66 * v66))
                                          * *(float *)(a1 + 4))
                                  + (float)((float)((float)((float)((float)(v73 * v73) + (float)(v72 * v72))
                                                          + (float)(v74 * v74))
                                                  * v78[3])
                                          * *(float *)a1))
                          + (float)((float)((float)((float)((float)(v68 * v68) + (float)(v67 * v67)) + (float)(v69 * v69))
                                          * *(float *)(a1 + 12))
                                  + (float)((float)((float)((float)((float)(v76 * v76) + (float)(v75 * v75))
                                                          + (float)(v77 * v77))
                                                  * v79[3])
                                          * *(float *)(a1 + 8)));
          float v60 = (float)((float)((float)((float)(v78[1] * *(float *)(v44 + 4)) + (float)(*v78 * *(float *)v44))
                              + (float)(v78[2] * *(float *)(v44 + 8)))
                      + (float)((float)((float)(v78[5] * *(float *)(v44 + 20)) + (float)(v78[4] * *(float *)(v44 + 16)))
                              + (float)(v78[6] * *(float *)(v44 + 24))))
              - (float)((float)((float)((float)(v79[1] * *(float *)(v44 + 36)) + (float)(*v79 * *(float *)(v44 + 32)))
                              + (float)(v79[2] * *(float *)(v44 + 40)))
                      + (float)((float)((float)(v79[5] * *(float *)(v44 + 52)) + (float)(v79[4] * *(float *)(v44 + 48)))
                              + (float)(v79[6] * *(float *)(v44 + 56))));
          float v61 = v60;
        }
        float v80 = ImpulseResponse <= v47 ? 0.0 : 1.0 / ImpulseResponse;
        float v81 = *(float *)(v44 + 12);
        __int16 v82 = *(_WORD *)(v44 + 76);
        if (v82) {
          break;
        }
        float v83 = -v80;
        _X24->f32[1] = -v80;
        _X24[2].i32[1] = 1065353216;
        if ((v82 & 4) != 0)
        {
          float v84 = -v60;
          if (*(float *)(v44 + 68) < v84)
          {
            float v85 = (float)(v80 * *(float *)(v44 + 64)) * v84;
LABEL_49:
            float v92 = v85;
            goto LABEL_50;
          }
        }
        float v92 = v80 * (float)(*(float *)(v44 + 28) - (float)(v81 * a5));
        _X24[-4].f32[1] = v92;
        float v85 = v80 * (float)(*(float *)(v44 + 28) - (float)(*(float *)(v44 + 72) * a5));
LABEL_50:
        float v93 = v61 * v83;
        _X24[-4].f32[1] = v92 + v93;
        _X24[-2].f32[1] = v85 + v93;
        if ((v82 & 0x10) != 0) {
          _X24[6].i32[1] |= 2u;
        }
        ++v33;
        _X24 = (float32x2_t *)((char *)_X24 + v36);
        v38 += 4;
        v39 += 4;
        if (v33 >= *(unsigned int *)(a1 + 136))
        {
          float v94 = _X24 - 5;
          goto LABEL_56;
        }
      }
      float v86 = *(float *)(v44 + 64);
      float v87 = *(float *)(v44 + 68);
      float v88 = (float)(v87 * v34) + (float)(v96 * v86);
      if ((v82 & 2) != 0)
      {
        float v91 = 1.0 / (float)(v88 + 1.0);
        float v89 = v80 * v91;
        float v90 = -(float)(v91 * v80);
      }
      else
      {
        float v89 = 0.0;
        if (ImpulseResponse != 0.0) {
          float v89 = 1.0 / (float)((float)(v88 * ImpulseResponse) + 1.0);
        }
        float v90 = -v89;
        float v91 = v89;
      }
      float v85 = (float)((float)((float)(v87 * *(float *)(v44 + 28)) - (float)(v86 * v81)) * v34) * v89;
      float v83 = v88 * v90;
      _X24->f32[1] = v88 * v90;
      _X24[2].f32[1] = 1.0 - v91;
      goto LABEL_49;
    }
    float v94 = (float32x2_t *)(v19 + 48);
LABEL_56:
    *float v94 = 0;
    return *(unsigned int *)(a1 + 136);
  }
  else
  {
    uint64_t result = 0;
    *(void *)(v6 + 36) = 0;
    *(void *)(v6 + 28) = 0;
    *(_DWORD *)(v6 + 44) = 0;
  }
  return result;
}

uint64_t physx::Dy::setupSolverConstraint4(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t (***a4)(void, void), float a5, float a6)
{
  uint64_t v9 = 0;
  int v10 = 0;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  uint64_t v40 = *MEMORY[0x263EF8340];
  *a3 = 0;
  __asm { FMOV            V0.4S, #1.0 }
  long long v36 = _Q0;
  while (1)
  {
    float32x4_t v18 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, void, unsigned char *, unsigned char *))(a1 + 32 * v9 + 8);
    if (!v18) {
      break;
    }
    int v19 = v10;
    unsigned int v20 = &v39[80 * v10 + 12];
    bzero(&v20[80 * v12], 0x3C0uLL);
    if (v12 <= 0xB)
    {
      uint64_t v21 = v12 + 1;
      uint64_t v22 = &v39[80 * v12 + 72 + 80 * v19];
      do
      {
        *(v22 - 4) = -8388609;
        *uint64_t v22 = 2139095039;
        v22 += 20;
      }
      while (v21++ != 12);
    }
    uint64_t v23 = a2 + 176 * v9;
    *(_OWORD *)uint64_t v23 = v36;
    *(_DWORD *)(v23 + 164) = 0;
    *(_DWORD *)(v23 + 168) = 0;
    *(_DWORD *)(v23 + 172) = 0;
    unsigned int v24 = v18(v20, v23 + 164, 12, v23, *(void *)(a1 + 32 * v9 + 16), v23 + 56, v23 + 84, *(unsigned __int8 *)(v23 + 163), v39, v38);
    if (!v24) {
      break;
    }
    if (v24 > v11) {
      unsigned int v11 = v24;
    }
    unsigned int v12 = 12 - v24;
    uint64_t v32 = a2 + 176 * v9;
    *(void *)(v32 + 128) = v20;
    *(_DWORD *)(v32 + 136) = v24;
    int v10 = v24 + v19;
    if (++v9 == 4)
    {
      *(float *)&double v25 = a5;
      return physx::Dy::setupSolverConstraint4(a2, a3, a4, v11, v25, a6, v26, v27, v28, v29, v30, v31);
    }
  }
  return 1;
}

uint64_t physx::Dy::setupSolverConstraint4(uint64_t a1, unsigned int *a2, uint64_t (***a3)(void, void), int a4, double a5, float a6, double a7, double a8, float32x4_t a9, double a10, double a11, float32x4_t a12)
{
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  unsigned int v16 = 0;
  uint64_t v213 = *MEMORY[0x263EF8340];
  unsigned int v200 = (int32x2_t *)(a1 + 340);
  int v202 = (int32x2_t *)(a1 + 692);
  memset(v212, 0, sizeof(v212));
  do
  {
    v208[v15 + 384] = v16;
    physx::Dy::preprocessRows((float **)v212 + v16, *(void *)(a1 + v14 + 128), (float32x4_t *)&v208[4 * v16 + 192], (float32x4_t *)&v208[4 * v16], *(_DWORD *)(a1 + v14 + 136), *(void *)(a1 + v14 + 40) + 32, *(void *)(a1 + v14 + 48) + 32, a1 + v14, *(float *)(*(void *)(a1 + v14 + 40) + 12), *(float *)(*(void *)(a1 + v14 + 48) + 12), a7, a8, a9, a10, a11, a12, *(_WORD *)(a1 + v14 + 160), HIBYTE(*(_WORD *)(a1 + v14 + 160)), 1);
    v16 += *(_DWORD *)(a1 + v14 + 136);
    ++v15;
    v14 += 176;
  }
  while (v15 != 4);
  uint64_t v17 = (**a3)(a3, (368 * a4 + 176));
  if ((unint64_t)(v17 + 1) > 1)
  {
    uint64_t v21 = 0;
    *a2 = v16;
    do
    {
      uint64_t v22 = *(void *)(a1 + v21 + 16);
      *(void *)(v22 + 32) = v17;
      *(_WORD *)(v22 + 30) = (368 * a4 + 160) >> 4;
      *(void *)(v22 + 40) = *(void *)(a1 + v21 + 152);
      v21 += 176;
    }
    while (v21 != 704);
    uint64_t v23 = *(int32x4_t **)(a1 + 568);
    unsigned int v24 = *(int32x4_t **)(a1 + 40);
    double v25 = *(int32x4_t **)(a1 + 48);
    v26.i32[0] = *(_DWORD *)a1;
    v35.i32[0] = *(_DWORD *)(a1 + 4);
    v26.i32[1] = *(_DWORD *)(a1 + 176);
    double v27 = *(int32x4_t **)(a1 + 216);
    float32x4_t v28 = *(int32x4_t **)(a1 + 224);
    v26.i32[2] = *(_DWORD *)(a1 + 352);
    v26.i32[3] = *(_DWORD *)(a1 + 528);
    double v29 = *(int32x4_t **)(a1 + 392);
    double v30 = *(int32x4_t **)(a1 + 400);
    v31.i32[0] = *(_DWORD *)(a1 + 8);
    v36.i32[0] = *(_DWORD *)(a1 + 12);
    v31.i32[1] = *(_DWORD *)(a1 + 184);
    v31.i32[2] = *(_DWORD *)(a1 + 360);
    v31.i32[3] = *(_DWORD *)(a1 + 536);
    uint64_t v32 = *(int32x4_t **)(a1 + 576);
    v33.i32[0] = v24->i32[3];
    v33.i32[1] = v27->i32[3];
    v33.i32[2] = v29->i32[3];
    v33.i32[3] = v23->i32[3];
    v34.i32[0] = v25->i32[3];
    v34.i32[1] = v28->i32[3];
    v34.i32[2] = v30->i32[3];
    v34.i32[3] = v32->i32[3];
    v35.i32[1] = *(_DWORD *)(a1 + 180);
    v35.i32[2] = *(_DWORD *)(a1 + 356);
    v35.i32[3] = *(_DWORD *)(a1 + 532);
    v36.i32[1] = *(_DWORD *)(a1 + 188);
    v36.i32[2] = *(_DWORD *)(a1 + 364);
    v36.i32[3] = *(_DWORD *)(a1 + 540);
    int32x4_t v37 = *v24;
    int32x4_t v38 = *v25;
    int32x4_t v198 = v25[1];
    int32x4_t v39 = *v27;
    int32x4_t v180 = v27[1];
    int32x4_t v182 = v24[1];
    int32x4_t v40 = *v28;
    int32x4_t v205 = v28[1];
    int32x4_t v41 = *v29;
    int32x4_t v42 = *v30;
    int32x4_t v176 = v30[1];
    int32x4_t v178 = v29[1];
    int32x4_t v44 = *v23;
    int32x4_t v43 = v23[1];
    int32x4_t v45 = *v32;
    int32x4_t v194 = v32[1];
    int32x2_t v46 = *(int32x2_t *)(a1 + 164);
    v214.val[0].i32[0] = *(_DWORD *)(a1 + 172);
    int32x2_t v47 = *v200;
    v214.val[1].i32[0] = *(_DWORD *)(a1 + 348);
    int32x2_t v48 = v200[22];
    int32x2_t v49 = *v202;
    v215.val[0] = (float32x2_t)vzip1_s32(v46, v48);
    v215.val[1] = (float32x2_t)vzip1_s32(*v200, *v202);
    float v50 = *(float *)(a1 + 316);
    float v51 = *(float *)(a1 + 492);
    v214.val[0].i32[1] = *(_DWORD *)(a1 + 524);
    v214.val[1].i32[1] = *(_DWORD *)(a1 + 700);
    uint64_t v52 = (float *)(v17 + 112);
    float v53 = *(float *)(a1 + 668);
    v62.i32[0] = *(_DWORD *)(a1 + 140);
    v54.i32[0] = *(_DWORD *)(a1 + 144);
    float v55 = *(float *)(a1 + 320);
    float v56 = *(float *)(a1 + 496);
    float v57 = *(float *)(a1 + 672);
    vst2_f32(v52, v215);
    float32_t v58 = (float *)(v17 + 144);
    vst2_f32(v58, v214);
    float32x4_t v59 = vmulq_f32(v26, v33);
    float32x4_t v60 = vmulq_f32(v31, v34);
    *(int32x2_t *)v26.f32 = vzip2_s32(v46, v48);
    v26.i64[1] = v26.i64[0];
    *(int32x2_t *)v31.f32 = vzip2_s32(v47, v49);
    v31.i64[1] = v31.i64[0];
    int32x4_t v61 = vzip2q_s32((int32x4_t)v26, (int32x4_t)v31);
    v62.f32[1] = v50;
    BOOL v63 = v62.f32[0] != 3.4028e38;
    if (v54.f32[0] != 3.4028e38) {
      BOOL v63 = 1;
    }
    v54.f32[1] = v55;
    BOOL v64 = v50 != 3.4028e38;
    v62.f32[2] = v51;
    v54.f32[2] = v56;
    if (v55 != 3.4028e38) {
      BOOL v64 = 1;
    }
    BOOL v65 = v51 != 3.4028e38;
    v62.f32[3] = v53;
    if (v56 != 3.4028e38) {
      BOOL v65 = 1;
    }
    v54.f32[3] = v57;
    *(int32x4_t *)(v17 + 128) = v61;
    float v66 = *(float *)&a5;
    *(float32x4_t *)(v17 + 16) = vmulq_n_f32(v62, *(float *)&a5);
    *(float32x4_t *)(v17 + 32) = vmulq_n_f32(v54, *(float *)&a5);
    *(unsigned char *)(v17 + 12) = v63;
    *(unsigned char *)(v17 + 13) = v64;
    *(unsigned char *)(v17 + 14) = v65;
    BOOL v67 = v57 != 3.4028e38 || v53 != 3.4028e38;
    *(unsigned char *)(v17 + 15) = v67;
    float32x4_t v191 = v60;
    *(float32x4_t *)(v17 + 48) = v59;
    *(float32x4_t *)(v17 + 64) = v60;
    float32x4_t v192 = v36;
    float32x4_t v193 = v35;
    *(float32x4_t *)(v17 + 80) = v35;
    *(float32x4_t *)(v17 + 96) = v36;
    *(_DWORD *)(v17 + 4) = a4;
    *(unsigned char *)uint64_t v17 = 9;
    int v68 = *(_DWORD *)(a1 + 136);
    *(unsigned char *)(v17 + 8) = v68;
    int v69 = *(_DWORD *)(a1 + 312);
    *(unsigned char *)(v17 + 9) = v69;
    int v70 = *(_DWORD *)(a1 + 488);
    *(unsigned char *)(v17 + 10) = v70;
    int v71 = *(_DWORD *)(a1 + 664);
    *(unsigned char *)(v17 + 11) = v71;
    if (a4)
    {
      unsigned int v72 = 0;
      unsigned int v73 = 0;
      int32x4_t v74 = vzip1q_s32(v37, v41);
      int32x4_t v75 = vzip1q_s32(v39, v44);
      float32x4_t v189 = (float32x4_t)vzip2q_s32(v74, v75);
      float32x4_t v190 = (float32x4_t)vzip1q_s32(v74, v75);
      int32x4_t v76 = vzip1q_s32(v38, v42);
      int32x4_t v77 = vzip1q_s32(v40, v45);
      float32x4_t v187 = (float32x4_t)vzip1q_s32(v76, v77);
      float32x4_t v188 = (float32x4_t)vzip1q_s32(vzip2q_s32(v37, v41), vzip2q_s32(v39, v44));
      float32x4_t v185 = (float32x4_t)vzip1q_s32(vzip2q_s32(v38, v42), vzip2q_s32(v40, v45));
      float32x4_t v186 = (float32x4_t)vzip2q_s32(v76, v77);
      int v184 = v68 - 1;
      int32x4_t v78 = vzip1q_s32(v182, v178);
      int32x4_t v79 = vzip2q_s32(v182, v178);
      int32x4_t v80 = vzip1q_s32(v180, v43);
      int32x4_t v81 = vzip2q_s32(v180, v43);
      float32x4_t v181 = (float32x4_t)vzip2q_s32(v78, v80);
      float32x4_t v183 = (float32x4_t)vzip1q_s32(v78, v80);
      float32x4_t v179 = (float32x4_t)vzip1q_s32(v79, v81);
      unsigned int v82 = v209;
      unsigned int v83 = v210;
      int32x4_t v84 = vzip1q_s32(v198, v176);
      int32x4_t v85 = vzip2q_s32(v198, v176);
      int32x4_t v86 = vzip1q_s32(v205, v194);
      int v175 = v70 + v210 - 1;
      int v177 = v69 + v209 - 1;
      unsigned int v87 = v211;
      float32x4_t v174 = (float32x4_t)vzip1q_s32(v84, v86);
      int v173 = v71 + v211 - 1;
      uint64_t v88 = v17 + 416;
      float32x4_t v171 = (float32x4_t)vzip1q_s32(v85, vzip2q_s32(v205, v194));
      float32x4_t v172 = (float32x4_t)vzip2q_s32(v84, v86);
      float32x2_t v195 = (float32x2_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0).u64[0];
      do
      {
        uint64_t v89 = *((void *)v212 + v72);
        if (v72 == v184) {
          unsigned int v90 = v72;
        }
        else {
          unsigned int v90 = v72 + 1;
        }
        if (v82 == v177) {
          unsigned int v91 = v82;
        }
        else {
          unsigned int v91 = v82 + 1;
        }
        if (v83 == v175) {
          unsigned int v92 = v83;
        }
        else {
          unsigned int v92 = v83 + 1;
        }
        if (v87 == v173) {
          unsigned int v93 = v87;
        }
        else {
          unsigned int v93 = v87 + 1;
        }
        __asm { FMOV            V0.4S, #1.0 }
        if ((*(_WORD *)(v89 + 76) & 0x20) != 0 && *(unsigned char *)(a1 + 162))
        {
          __asm { FMOV            V0.2S, #1.0 }
          _Q0 = (float32x4_t)vorrq_s8((int8x16_t)vmin_f32(v195, _D0).u32[0], (int8x16_t)xmmword_234371EE0);
        }
        uint64_t v100 = *((void *)v212 + v82);
        if ((*(_WORD *)(v100 + 76) & 0x20) != 0 && *(unsigned char *)(a1 + 338))
        {
          __asm { FMOV            V1.2S, #1.0 }
          _Q0.i32[1] = vmin_f32(v195, _D1).i32[1];
        }
        uint64_t v102 = *((void *)v212 + v83);
        if ((*(_WORD *)(v102 + 76) & 0x20) != 0 && *(unsigned char *)(a1 + 514))
        {
          __asm { FMOV            V1.2S, #1.0 }
          _Q0.i32[2] = vmin_f32(v195, _D1).u32[0];
        }
        uint64_t v104 = *((void *)v212 + v87);
        unsigned int v203 = v92;
        unsigned int v201 = v93;
        if ((*(_WORD *)(v104 + 76) & 0x20) != 0 && *(unsigned char *)(a1 + 690))
        {
          __asm { FMOV            V1.2S, #1.0 }
          _Q0.i32[3] = vmin_f32(v195, _D1).i32[1];
        }
        int32x4_t v106 = *(int32x4_t *)&v208[4 * v72 + 192];
        int32x4_t v107 = *(int32x4_t *)&v208[4 * v82 + 192];
        int32x4_t v108 = *(int32x4_t *)&v208[4 * v83 + 192];
        int32x4_t v109 = *(int32x4_t *)&v208[4 * v87 + 192];
        int32x4_t v110 = *(int32x4_t *)&v208[4 * v72];
        int32x4_t v111 = *(int32x4_t *)&v208[4 * v82];
        int32x4_t v112 = *(int32x4_t *)(v89 + 16);
        int32x4_t v113 = *(int32x4_t *)(v100 + 16);
        int32x4_t v114 = *(int32x4_t *)(v102 + 16);
        int32x4_t v115 = *(int32x4_t *)(v104 + 16);
        int32x4_t v116 = vzip1q_s32(*(int32x4_t *)v89, *(int32x4_t *)v102);
        int32x4_t v117 = vzip1q_s32(*(int32x4_t *)v100, *(int32x4_t *)v104);
        float32x4_t v118 = (float32x4_t)vzip1q_s32(v116, v117);
        float32x4_t v119 = (float32x4_t)vzip2q_s32(v116, v117);
        float32x4_t v120 = (float32x4_t)vzip1q_s32(vzip2q_s32(*(int32x4_t *)v89, *(int32x4_t *)v102), vzip2q_s32(*(int32x4_t *)v100, *(int32x4_t *)v104));
        float32x4_t v121 = (float32x4_t)vzip1q_s32(v112, v114);
        int32x4_t v122 = vzip2q_s32(v112, v114);
        int32x4_t v123 = vzip1q_s32(v113, v115);
        float32x4_t v124 = (float32x4_t)vzip2q_s32(v113, v115);
        float32x4_t v125 = (float32x4_t)vzip1q_s32((int32x4_t)v121, v123);
        float32x4_t v126 = (float32x4_t)vzip2q_s32((int32x4_t)v121, v123);
        v121.i32[0] = *(_DWORD *)(v89 + 60);
        v121.i32[1] = *(_DWORD *)(v100 + 60);
        v121.i32[2] = *(_DWORD *)(v102 + 60);
        v121.i32[3] = *(_DWORD *)(v104 + 60);
        float32x4_t v127 = (float32x4_t)vzip1q_s32(v122, (int32x4_t)v124);
        v124.i32[0] = *(_DWORD *)(v89 + 44);
        v124.i32[1] = *(_DWORD *)(v100 + 44);
        v124.i32[2] = *(_DWORD *)(v102 + 44);
        v124.i32[3] = *(_DWORD *)(v104 + 44);
        int32x4_t v128 = vzip1q_s32(v106, v108);
        int32x4_t v129 = vzip2q_s32(v106, v108);
        int32x4_t v130 = vzip1q_s32(v107, v109);
        int32x4_t v131 = vzip2q_s32(v107, v109);
        float32x4_t v132 = (float32x4_t)vzip1q_s32(v128, v130);
        float32x4_t v133 = (float32x4_t)vzip2q_s32(v128, v130);
        float32x4_t v134 = (float32x4_t)vzip1q_s32(v129, v131);
        *(float32x4_t *)(v88 - 256) = v118;
        *(float32x4_t *)(v88 - 240) = v119;
        *(float32x4_t *)(v88 - 224) = v120;
        *(float32x4_t *)(v88 - 208) = v132;
        *(float32x4_t *)(v88 - 192) = v133;
        *(float32x4_t *)(v88 - 176) = v134;
        *(float32x4_t *)(v88 - 160) = v125;
        *(float32x4_t *)(v88 - 144) = v126;
        *(float32x4_t *)(v88 - 128) = v127;
        *(float32x4_t *)(v88 - 48) = vmulq_f32(_Q0, v124);
        *(float32x4_t *)(v88 - 32) = vmulq_f32(_Q0, v121);
        float32x4_t v135 = vmlaq_f32(vmulq_f32(v193, vmlaq_f32(vmlaq_f32(vmulq_f32(v132, v132), v133, v133), v134, v134)), v59, vmlaq_f32(vmlaq_f32(vmulq_f32(v118, v118), v119, v119), v120, v120));
        *(_OWORD *)(v88 - 16) = 0u;
        *(_OWORD *)uint64_t v88 = 0u;
        int32x4_t v136 = *(int32x4_t *)(v89 + 32);
        int32x4_t v137 = *(int32x4_t *)(v89 + 48);
        int32x4_t v138 = *(int32x4_t *)(v100 + 32);
        int32x4_t v139 = *(int32x4_t *)(v100 + 48);
        int32x4_t v140 = *(int32x4_t *)(v102 + 32);
        int32x4_t v141 = *(int32x4_t *)(v102 + 48);
        int32x4_t v142 = *(int32x4_t *)(v104 + 32);
        int32x4_t v143 = *(int32x4_t *)(v104 + 48);
        int32x4_t v144 = vzip1q_s32(v136, v140);
        int32x4_t v145 = vzip2q_s32(v136, v140);
        int32x4_t v146 = vzip1q_s32(v138, v142);
        int32x4_t v147 = vzip2q_s32(v138, v142);
        float32x4_t v148 = (float32x4_t)vzip1q_s32(v144, v146);
        float32x4_t v149 = (float32x4_t)vzip2q_s32(v144, v146);
        int32x4_t v150 = *(int32x4_t *)&v208[4 * v83];
        float32x4_t v151 = (float32x4_t)vzip1q_s32(v145, v147);
        int32x4_t v152 = vzip1q_s32(v137, v141);
        int32x4_t v153 = vzip2q_s32(v137, v141);
        int32x4_t v154 = vzip1q_s32(v139, v143);
        int32x4_t v155 = vzip2q_s32(v139, v143);
        float32x4_t v156 = (float32x4_t)vzip1q_s32(v152, v154);
        float32x4_t v157 = (float32x4_t)vzip2q_s32(v152, v154);
        int32x4_t v158 = *(int32x4_t *)&v208[4 * v87];
        float32x4_t v159 = (float32x4_t)vzip1q_s32(v153, v155);
        int32x4_t v160 = vzip1q_s32(v110, v150);
        int32x4_t v161 = vzip2q_s32(v110, v150);
        int32x4_t v162 = vzip1q_s32(v111, v158);
        int32x4_t v163 = vzip2q_s32(v111, v158);
        float32x4_t v164 = (float32x4_t)vzip1q_s32(v160, v162);
        float32x4_t v165 = (float32x4_t)vzip2q_s32(v160, v162);
        float32x4_t v166 = (float32x4_t)vzip1q_s32(v161, v163);
        *(float32x4_t *)(v88 + 64) = v164;
        *(float32x4_t *)(v88 + 80) = v165;
        *(float32x4_t *)(v88 + 96) = v166;
        float32x4_t v206 = vaddq_f32(v135, vmlaq_f32(vmulq_f32(v192, vmlaq_f32(vmlaq_f32(vmulq_f32(v164, v164), v165, v165), v166, v166)), v191, vmlaq_f32(vmlaq_f32(vmulq_f32(v148, v148), v149, v149), v151, v151)));
        *(float32x4_t *)(v88 + 16) = v148;
        *(float32x4_t *)(v88 + 32) = v149;
        *(float32x4_t *)(v88 + 48) = v151;
        float32x4_t v199 = vsubq_f32(vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v190, v118), v189, v119), v188, v120), vmlaq_f32(vmlaq_f32(vmulq_f32(v183, v125), v181, v126), v179, v127)), vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v187, v148), v186, v149), v185, v151), vmlaq_f32(vmlaq_f32(vmulq_f32(v174, v156), v172, v157), v171, v159)));
        float32x4_t v167 = vmulq_f32(v199, *(float32x4_t *)(v88 - 80));
        float32x4_t v168 = vaddq_f32(*(float32x4_t *)(v88 - 112), v167);
        float32x4_t v169 = vaddq_f32(v167, *(float32x4_t *)(v88 - 96));
        *(float32x4_t *)(v88 - 112) = v168;
        *(float32x4_t *)(v88 - 96) = v169;
        if ((*(unsigned char *)(v89 + 76) & 0x10) != 0) {
          *(_DWORD *)v88 |= 2u;
        }
        unsigned int v83 = v203;
        if ((*(_WORD *)(v100 + 76) & 0x10) != 0) {
          *(_DWORD *)(v88 + 4) |= 2u;
        }
        float v66 = *(float *)&a5;
        if ((*(_WORD *)(v102 + 76) & 0x10) != 0) {
          *(_DWORD *)(v88 + 8) |= 2u;
        }
        if ((*(_WORD *)(v104 + 76) & 0x10) != 0) {
          *(_DWORD *)(v88 + 12) |= 2u;
        }
        ++v73;
        v88 += 368;
        unsigned int v72 = v90;
        unsigned int v87 = v201;
        unsigned int v82 = v91;
      }
      while (a4 != v73);
      float v170 = (void *)(v88 - 256);
    }
    else
    {
      float v170 = (void *)(v17 + 160);
    }
    *float v170 = 0;
    return 2;
  }
  else
  {
    for (uint64_t i = 0; i != 704; i += 176)
    {
      uint64_t v19 = *(void *)(a1 + i + 16);
      *(void *)(v19 + 32) = 0;
      *(_WORD *)(v19 + 30) = 0;
      *(void *)(v19 + 40) = *(void *)(a1 + i + 152);
    }
    return 0;
  }
}

float physx::Dy::anonymous namespace'::setConstants(float *a1, float *a2, float *a3, float *a4, uint64_t a5, float *a6, float *a7, int a8, float result, float a10, float a11, float a12)
{
  if (a8)
  {
    *a1 = 0.0;
    *a2 = 0.0;
    *a3 = 0.0;
    *a4 = 0.0;
  }
  else
  {
    __int16 v12 = *(_WORD *)(a5 + 76);
    if ((v12 & 4) != 0 || (float v13 = 0.0, (v12 & 3) == 3)) {
      float v13 = (float)((float)((float)((float)(a6[1] * *(float *)(a5 + 4)) + (float)(*a6 * *(float *)a5))
    }
                          + (float)(a6[2] * *(float *)(a5 + 8)))
                  + (float)((float)((float)(a6[5] * *(float *)(a5 + 20)) + (float)(a6[4] * *(float *)(a5 + 16)))
                          + (float)(a6[6] * *(float *)(a5 + 24))))
          - (float)((float)((float)((float)(a7[1] * *(float *)(a5 + 36)) + (float)(*a7 * *(float *)(a5 + 32)))
                          + (float)(a7[2] * *(float *)(a5 + 40)))
                  + (float)((float)((float)(a7[5] * *(float *)(a5 + 52)) + (float)(a7[4] * *(float *)(a5 + 48)))
                          + (float)(a7[6] * *(float *)(a5 + 56))));
    BOOL v14 = result > a10;
    float v15 = 0.0;
    if (v14) {
      float v15 = 1.0 / result;
    }
    float v16 = *(float *)(a5 + 12);
    if (v12)
    {
      float v17 = *(float *)(a5 + 64);
      float v18 = *(float *)(a5 + 68);
      float v19 = (float)(v18 * a11) + (float)((float)(a11 * a11) * v17);
      float v20 = (float)((float)(v18 * *(float *)(a5 + 28)) - (float)(v17 * v16)) * a11;
      if ((v12 & 2) != 0)
      {
        float v21 = 1.0 / (float)(v19 + 1.0);
        float v23 = v20 * (float)(v15 * v21);
        *a2 = v23;
        *a1 = v23;
        float v22 = -(float)(v21 * v15);
      }
      else
      {
        float v21 = 0.0;
        if (result != 0.0) {
          float v21 = 1.0 / (float)((float)(v19 * result) + 1.0);
        }
        *a2 = v20 * v21;
        *a1 = v20 * v21;
        float v22 = -v21;
      }
      *a3 = v19 * v22;
      uint64_t result = 1.0 - v21;
      *a4 = 1.0 - v21;
    }
    else
    {
      *a3 = -v15;
      *a4 = 1.0;
      if ((v12 & 4) != 0 && *(float *)(a5 + 68) < (float)-v13)
      {
        uint64_t result = (float)(v15 * *(float *)(a5 + 64)) * (float)-v13;
        *a1 = result;
      }
      else
      {
        *a1 = v15 * (float)(*(float *)(a5 + 28) - (float)(v16 * a12));
        uint64_t result = v15 * (float)(*(float *)(a5 + 28) - (float)(*(float *)(a5 + 72) * a12));
      }
      *a2 = result;
    }
  }
  return result;
}

uint64_t physx::Dy::createFinalizeSolverContactsCoulomb1D(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (***a4)(void, void), uint64_t a5, double a6, int32x2_t a7, int32x2_t a8, double a9, double a10, double a11, double a12, int32x2_t a13)
{
  a8.i32[0] = LODWORD(a10);
  return physx::Dy::createFinalizeSolverContactsCoulomb(a1, a2, a3, a4, 1, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t physx::Dy::createFinalizeSolverContactsCoulomb2D(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (***a4)(void, void), uint64_t a5, double a6, int32x2_t a7, int32x2_t a8, double a9, double a10, double a11, double a12, int32x2_t a13)
{
  a8.i32[0] = LODWORD(a10);
  return physx::Dy::createFinalizeSolverContactsCoulomb(a1, a2, a3, a4, 2, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t physx::Dy::createFinalizeSolverContacts(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, float a8, double a9, float a10, float a11, float a12)
{
  _X8 = *(void *)(a1 + 24);
  __asm { PRFM            #0, [X8] }
  _X8 = *(void *)(a1 + 32);
  __asm { PRFM            #0, [X8] }
  _X8 = *(void *)(a1 + 40);
  __asm { PRFM            #0, [X8] }
  _X8 = *(void *)(a1 + 48);
  __asm { PRFM            #0, [X8] }
  _X25 = a2 + 7684;
  *(void *)(a2 + 7684) = 0;
  char v321 = *(unsigned char *)(a1 + 150);
  int v27 = *(_DWORD *)(a1 + 112);
  int v26 = *(_DWORD *)(a1 + 116);
  BOOL v29 = v26 == 4 || v26 == 2;
  int v30 = *(unsigned __int8 *)(a1 + 149);
  uint64_t v31 = *(void *)(a1 + 16);
  *(_WORD *)(v31 + 30) = 0;
  unsigned int v32 = *(_DWORD *)(a1 + 144);
  if (!v32)
  {
    *(void *)(a1 + 160) = 0;
    *(unsigned char *)(a1 + 168) = 0;
    uint64_t result = 1;
    *(void *)(v31 + 32) = 0;
    return result;
  }
  float v34 = *(float *)&a7;
  BOOL v366 = v29;
  if (!v30)
  {
    physx::Dy::getFrictionPatches(a2, *(float **)(a1 + 160), *(unsigned __int8 *)(a1 + 168), (float *)(a1 + 56), (float *)(a1 + 84), a8, a6, a7, a8, *(float *)&a9, a10, a11, a12);
    unsigned int v32 = *(_DWORD *)(a1 + 144);
  }
  char v37 = v27 | v26;
  physx::Dy::createContactPatches(a2, *(void *)(a1 + 136), v32, 0.999);
  uint64_t v38 = a1 + 56;
  uint64_t v39 = a1 + 84;
  physx::Dy::correlatePatches(a2, *(void *)(a1 + 136), (float *)(a1 + 56), (float *)(a1 + 84), 0, 0, 0.999);
  physx::Dy::growPatches(a2, *(void *)(a1 + 136), (float *)(a1 + 56), (float *)(a1 + 84), 0, a8, *(float *)(a1 + 152) + v34);
  uint64_t v46 = *(unsigned int *)(a2 + 7688);
  char v364 = v37;
  if (!v46)
  {
    _X7 = 0;
    unsigned int v60 = 0;
    LOBYTE(v48) = 0;
    float v57 = 0;
    BOOL v61 = v366;
LABEL_51:
    *(void *)(a1 + 160) = _X7;
    long long v312 = v57;
    *(void *)(v31 + 32) = v57;
    *(unsigned char *)(a1 + 168) = v48;
    *(_WORD *)(v31 + 30) = v60 >> 4;
    uint64_t v69 = *(void *)(a1 + 176);
    *(void *)(v31 + 40) = v69;
    if (v69) {
      __int16 v70 = *(_WORD *)(a1 + 144);
    }
    else {
      __int16 v70 = 0;
    }
    *(_WORD *)(v31 + 28) = v70;
    if (_X7)
    {
      __asm
      {
        PRFM            #0, [X7]
        PRFM            #0, [X7,#0x80]
        PRFM            #0, [X7,#0x100]
      }
      unsigned int v74 = *(_DWORD *)(a2 + 7688);
      if (v74)
      {
        uint64_t v75 = 0;
        uint64_t v76 = 104 * v74;
        uint64_t v77 = 7296;
        _X11 = _X7;
        do
        {
          if (*(_DWORD *)(a2 + v77))
          {
            *(_DWORD *)_X11 = *(_DWORD *)(a2 + v75 + 2816);
            *(void *)(_X11 + 20) = *(void *)(a2 + v75 + 2836);
            *(void *)(_X11 + 32) = *(void *)(a2 + v75 + 2848);
            *(void *)(_X11 + 44) = *(void *)(a2 + v75 + 2860);
            *(void *)(_X11 + 56) = *(void *)(a2 + v75 + 2872);
            *(void *)(_X11 + 68) = *(void *)(a2 + v75 + 2884);
            *(_OWORD *)(_X11 + 80) = *(_OWORD *)(a2 + v75 + 2896);
            *(void *)(_X11 + 96) = *(void *)(a2 + v75 + 2912);
            *(_OWORD *)(_X11 + 4) = *(_OWORD *)(a2 + v75 + 2820);
            *(_DWORD *)(_X11 + 28) = *(_DWORD *)(a2 + v75 + 2844);
            *(_DWORD *)(_X11 + 40) = *(_DWORD *)(a2 + v75 + 2856);
            *(_DWORD *)(_X11 + 52) = *(_DWORD *)(a2 + v75 + 2868);
            *(_DWORD *)(_X11 + 64) = *(_DWORD *)(a2 + v75 + 2880);
            *(_DWORD *)(_X11 + 76) = *(_DWORD *)(a2 + v75 + 2892);
            __asm { PRFM            #0, [X11,#0x168] }
            _X11 += 104;
          }
          v75 += 104;
          v77 += 4;
        }
        while (v76 != v75);
      }
    }
    if (v312)
    {
      uint64_t v81 = *(void *)(a1 + 40);
      uint64_t v80 = *(void *)(a1 + 48);
      unsigned int v309 = v60;
      if ((v364 & 8) != 0)
      {
        __int16 v306 = *(_WORD *)(v31 + 16);
        uint64_t v307 = *(void *)(a1 + 32);
        v370[0] = *(void *)(a1 + 24);
        v370[1] = v81;
        __int16 v371 = v306;
        __int16 v308 = *(_WORD *)(v31 + 18);
        v368[0] = v307;
        v368[1] = v80;
        __int16 v369 = v308;
        v40.i32[0] = *(_DWORD *)a1;
        v41.i32[0] = *(_DWORD *)(a1 + 4);
        v42.i32[0] = *(_DWORD *)(a1 + 8);
        v43.i32[0] = *(_DWORD *)(a1 + 12);
        v44.i32[0] = *(_DWORD *)(a1 + 152);
        v45.i32[0] = *(_DWORD *)(a1 + 156);
        physx::Dy::setupFinalizeExtSolverContacts(*(void *)(a1 + 136), a2, v38, v39, v312, (uint64_t)v370, (uint64_t)v368, _X7, a5, *(int32x2_t *)&a6, v40, v41, v42, v43, v44, v45, a4);
      }
      else
      {
        uint64_t v311 = _X7;
        if (v61) {
          char v82 = 5;
        }
        else {
          char v82 = 1;
        }
        char v320 = v82;
        _X8 = a2 + 7556;
        __asm
        {
          PRFM            #0, [X8]
          PRFM            #0, [X25]
        }
        unint64_t v86 = *(unsigned int *)(a2 + 7688);
        if (v86)
        {
          uint64_t v87 = 0;
          unsigned int v88 = 0;
          uint64_t v89 = *(void *)(a1 + 136);
          uint64_t v319 = *(void *)(a1 + 128);
          float32x2_t v90 = *(float32x2_t *)a1;
          float32x2_t v91 = *(float32x2_t *)(a1 + 8);
          float32x4_t v92 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a9, 0);
          int v316 = HIDWORD(*(void *)a1);
          v92.i32[3] = 0;
          float v93 = *(float *)(a1 + 152);
          float v94 = *(float *)(a1 + 156);
          int32x2_t v95 = (int32x2_t)vmul_f32(*(float32x2_t *)a1, *(float32x2_t *)(v81 + 12));
          float32x2_t v96 = vmul_n_f32(vneg_f32((float32x2_t)vdup_lane_s32((int32x2_t)v91, 0)), COERCE_FLOAT(*(void *)(v80 + 12)));
          float32x2_t v97 = vmax_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)(v81 + 68), 0), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(v80 + 68), 0));
          int32x4_t v98 = *(int32x4_t *)(a1 + 56);
          float32x4_t v99 = *(float32x4_t *)(a1 + 72);
          v99.i64[1] = *(unsigned int *)(a1 + 80);
          float32x4_t v100 = *(float32x4_t *)(a1 + 100);
          v100.i64[1] = *(unsigned int *)(a1 + 108);
          float32x4_t v101 = *(float32x4_t *)v81;
          float32x4_t v103 = *(float32x4_t *)(v81 + 16);
          v101.i32[3] = 0;
          float32x4_t v102 = *(float32x4_t *)v80;
          float32x4_t v105 = *(float32x4_t *)(v80 + 16);
          v102.i32[3] = 0;
          float32x4_t v106 = *(float32x4_t *)(v81 + 32);
          v103.i32[3] = 0;
          float32x4_t v104 = *(float32x4_t *)(v80 + 32);
          v105.i32[3] = 0;
          v106.i32[3] = 0;
          int8x16_t v107 = *(int8x16_t *)(v81 + 44);
          __int32 v108 = v107.i32[3];
          v107.i32[3] = 0;
          int v109 = *(_DWORD *)(v81 + 60);
          v111.i64[1] = *(unsigned int *)(v81 + 64);
          float32x4_t v363 = v111;
          float32x4_t v365 = (float32x4_t)v107;
          v104.i32[3] = 0;
          float32x4_t v367 = v104;
          int8x16_t v110 = *(int8x16_t *)(v80 + 44);
          v107.i32[0] = v110.i32[3];
          v110.i32[3] = 0;
          v107.i32[1] = *(_DWORD *)(v80 + 60);
          v107.i64[1] = *(unsigned int *)(v80 + 64);
          float32x4_t v360 = (float32x4_t)v107;
          float32x4_t v361 = (float32x4_t)v110;
          *(int32x2_t *)v111.f32 = vdup_n_s32(0x3F4CCCCDu);
          v107.i64[0] = 0;
          v107.i32[2] = 0;
          v107.i32[3] = v96.i32[1];
          v110.i64[0] = 0;
          v110.i64[1] = v95.u32[0];
          int32x4_t v112 = *(int32x4_t *)(a1 + 84);
          int8x16_t v322 = vorrq_s8(v107, v110);
          int8x16_t v113 = (int8x16_t)v98;
          float32x4_t v331 = (float32x4_t)vdupq_laneq_s32(v98, 3);
          LODWORD(v329) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v331.f32, *(float32x2_t *)v331.f32).u32[0];
          int8x16_t v114 = (int8x16_t)v112;
          float32x4_t v327 = (float32x4_t)vdupq_laneq_s32(v112, 3);
          LODWORD(v330) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v327.f32, *(float32x2_t *)v327.f32).u32[0];
          _X21 = v312;
          float32x2_t v116 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0);
          v113.i32[3] = 0;
          v114.i32[3] = 0;
          __int32 v315 = v91.i32[1];
          float32x2_t v117 = vmul_n_f32(*(float32x2_t *)v111.f32, *(float *)&a5);
          float32x2_t v347 = v96;
          float v317 = -v96.f32[0];
          float32x4_t v313 = v102;
          float32x4_t v314 = v101;
          float32x4_t v310 = vsubq_f32(v101, v102);
          float32x4_t v332 = (float32x4_t)v113;
          float32x2_t v333 = *(float32x2_t *)v112.i8;
          float32x2_t v334 = *(float32x2_t *)v98.i8;
          float32x2_t v326 = (float32x2_t)vextq_s8(v113, v113, 8uLL).u64[0];
          float32x2_t v325 = (float32x2_t)vext_s8(*(int8x8_t *)v98.i8, (int8x8_t)v326, 4uLL);
          float32x4_t v328 = (float32x4_t)v114;
          float32x2_t v324 = (float32x2_t)vextq_s8(v114, v114, 8uLL).u64[0];
          float32x2_t v323 = (float32x2_t)vext_s8(*(int8x8_t *)v112.i8, (int8x8_t)v324, 4uLL);
          float32x2_t v345 = (float32x2_t)vdup_lane_s32(v95, 0);
          float32x2_t v346 = *(float32x2_t *)v111.f32;
          float32x2_t v118 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0);
          __int32 v318 = v95.i32[0];
          float32x2_t v352 = v91;
          float32x2_t v353 = *(float32x2_t *)a1;
          float32x4_t v343 = v99;
          float32x4_t v344 = v92;
          float32x4_t v342 = v100;
          float32x4_t v350 = v106;
          float32x4_t v351 = v103;
          float32x4_t v349 = v105;
          while (1)
          {
            uint64_t v119 = a2 + 4 * v87;
            int v120 = *(_DWORD *)(v119 + 7296);
            if (v120) {
              break;
            }
LABEL_101:
            if (++v87 >= v86) {
              goto LABEL_105;
            }
          }
          uint64_t v121 = *(unsigned __int16 *)(a2 + 44 * *(unsigned int *)(v119 + 7424));
          int32x4_t v122 = (unsigned int *)(v89 + (v121 << 6));
          int32x4_t v123 = (const float *)(v122 + 15);
          _X8 = (int32x2_t *)(_X21 + 80);
          __asm { PRFM            #0, [X21,#0xD0] }
          float32x2_t v126 = vld1_dup_f32(v123);
          __asm { PRFM            #0, [X21,#0x150] }
          *((void *)_X21 + 8) = v319;
          _X21[1] = v321;
          *((_DWORD *)_X21 + 3) = v95.i32[0];
          *((float *)_X21 + 12) = v317;
          unsigned int v128 = *v122;
          float32x4_t v129 = (float32x4_t)*v122;
          v129.i32[1] = v122[1];
          float32x4_t v130 = v129;
          v130.i32[2] = v122[2];
          *((float32x4_t *)_X21 + 2) = v130;
          unsigned int v131 = *(_DWORD *)(v119 + 7424);
          float32x4_t v354 = v130;
          float32x2_t v357 = *(float32x2_t *)v129.f32;
          int32x2_t v338 = (int32x2_t)v128;
          uint64_t v340 = v121;
          if (v131 == 0xFFFF)
          {
            float32x4_t v132 = (int32x2_t *)(_X21 + 80);
          }
          else
          {
            float32x4_t v133 = vmulq_f32(v130, v130);
            v133.i64[0] = vpaddq_f32(v133, v133).u64[0];
            float32x2_t v134 = vpadd_f32(*(float32x2_t *)v133.f32, *(float32x2_t *)v133.f32);
            float32x4_t v135 = vmlsq_f32(vmulq_f32(v314, v130), v313, v130);
            v135.i64[0] = vpaddq_f32(v135, v135).u64[0];
            float32x2_t v136 = vpadd_f32(*(float32x2_t *)v135.f32, *(float32x2_t *)v135.f32);
            float32x2_t v137 = vmul_n_f32(v134, *(float *)v95.i32);
            float32x2_t v138 = vmul_f32(v347, v134);
            float32x2_t v139 = (float32x2_t)vextq_s8((int8x16_t)v130, (int8x16_t)v130, 8uLL).u64[0];
            float32x2_t v140 = (float32x2_t)vext_s8(*(int8x8_t *)v129.f32, (int8x8_t)v139, 4uLL);
            float32x2_t v141 = vneg_f32(v139);
            float32x2_t v142 = vneg_f32(*(float32x2_t *)v129.f32);
            do
            {
              int32x4_t v143 = (unsigned __int16 *)(a2 + 44 * v131);
              uint64_t v144 = *((unsigned __int8 *)v143 + 5);
              if (*((unsigned char *)v143 + 5))
              {
                uint64_t v145 = 0;
                uint64_t v146 = v89 + ((unint64_t)*v143 << 6);
                do
                {
                  __asm { PRFM            #0, [X8,#0x100] }
                  uint64_t v148 = v146 + (v145 << 6);
                  v149.i64[0] = *(void *)(v148 + 16);
                  v149.i64[1] = *(unsigned int *)(v148 + 24);
                  v111.i32[0] = *(_DWORD *)(v148 + 12);
                  v150.i64[0] = *(void *)(v148 + 32);
                  v150.i64[1] = *(unsigned int *)(v148 + 40);
                  int8x16_t v151 = (int8x16_t)vsubq_f32(v149, v99);
                  int8x8_t v152 = (int8x8_t)vmla_f32(vmul_f32(v140, *(float32x2_t *)v151.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v151, v151, 4uLL), v142);
                  *(int8x8_t *)v153.i8 = vext_s8(v152, (int8x8_t)vmla_f32(vmul_f32(v357, (float32x2_t)*(_OWORD *)&vextq_s8(v151, v151, 8uLL)), *(float32x2_t *)v151.i8, v141), 4uLL);
                  float32x4_t v154 = vsubq_f32(v149, v100);
                  v153.i64[1] = v152.u32[0];
                  int8x8_t v155 = (int8x8_t)vmla_f32(vmul_f32(v140, *(float32x2_t *)v154.f32), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v154, (int8x16_t)v154, 4uLL), v142);
                  *(int8x8_t *)v154.f32 = vext_s8(v155, (int8x8_t)vmla_f32(vmul_f32(v357, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v154, (int8x16_t)v154, 8uLL)), *(float32x2_t *)v154.f32, v141), 4uLL);
                  float32x4_t v156 = vmulq_f32(v354, v150);
                  v154.i64[1] = v155.u32[0];
                  float32x4_t v157 = (float32x4_t)vbicq_s8(v153, (int8x16_t)vcgtq_f32(v92, vabsq_f32((float32x4_t)v153)));
                  float32x4_t v158 = (float32x4_t)vbicq_s8((int8x16_t)v154, (int8x16_t)vcgtq_f32(v92, vabsq_f32(v154)));
                  float32x4_t v159 = vmulq_n_f32(v106, v157.f32[0]);
                  v159.i32[3] = 0;
                  float32x4_t v160 = vmulq_lane_f32(v365, *(float32x2_t *)v157.f32, 1);
                  v160.i32[3] = 0;
                  float32x4_t v161 = vmulq_laneq_f32(v363, v157, 2);
                  v161.i32[3] = 0;
                  float32x4_t v162 = vaddq_f32(v161, vaddq_f32(v159, v160));
                  float32x4_t v163 = vmulq_n_f32(v367, v158.f32[0]);
                  v163.i32[3] = 0;
                  float32x4_t v164 = vmulq_lane_f32(v361, *(float32x2_t *)v158.f32, 1);
                  v164.i32[3] = 0;
                  float32x4_t v165 = vmulq_laneq_f32(v360, v158, 2);
                  v165.i32[3] = 0;
                  float32x4_t v166 = vaddq_f32(v165, vaddq_f32(v163, v164));
                  float32x4_t v167 = vmulq_f32(v162, v162);
                  v167.i64[0] = vpaddq_f32(v167, v167).u64[0];
                  float32x4_t v168 = vmulq_f32(v166, v166);
                  v168.i64[0] = vpaddq_f32(v168, v168).u64[0];
                  float32x2_t v169 = vadd_f32(vadd_f32(v137, vmul_lane_f32(vpadd_f32(*(float32x2_t *)v167.f32, *(float32x2_t *)v167.f32), v90, 1)), vsub_f32(vmul_lane_f32(vpadd_f32(*(float32x2_t *)v168.f32, *(float32x2_t *)v168.f32), v91, 1), v138));
                  int8x16_t v170 = (int8x16_t)vmulq_f32(v103, v157);
                  float32x2_t v171 = (float32x2_t)vextq_s8(v170, v170, 8uLL).u64[0];
                  float32x4_t v172 = vmulq_f32(v105, v158);
                  float32x2_t v173 = (float32x2_t)vpaddq_f32(v172, v172).u64[0];
                  float32x2_t v174 = vrecpe_f32(v169);
                  int v175 = 4;
                  do
                  {
                    float32x2_t v174 = vmul_f32(v174, vrecps_f32(v169, v174));
                    --v175;
                  }
                  while (v175);
                  float32x2_t v176 = vpadd_f32(*(float32x2_t *)v170.i8, v171);
                  float32x2_t v177 = (float32x2_t)vpaddq_f32(v156, v156).u64[0];
                  float32x4_t v132 = _X8 + 6;
                  float32x2_t v178 = vsub_f32(vadd_f32(v136, vpadd_f32(v176, v176)), vpadd_f32(v173, v173));
                  float32x2_t v179 = (float32x2_t)vand_s8((int8x8_t)vdup_lane_s32(vcgtz_f32(v169), 0), (int8x8_t)v174);
                  v111.f32[0] = v111.f32[0] - v93;
                  int8x8_t v180 = (int8x8_t)vmul_f32(vmax_f32(v97, vmul_n_f32(v117, v111.f32[0])), v179);
                  float32x2_t v181 = vneg_f32(v178);
                  int32x2_t v182 = (int32x2_t)vand_s8(vand_s8((int8x8_t)vcgt_f32(v116, v178), (int8x8_t)vcgtz_f32(v126)), (int8x8_t)vcgt_f32(v181, vmul_n_f32(v118, v111.f32[0])));
                  v111.i32[0] = v111.f32[0] <= v94;
                  float32x2_t v183 = (float32x2_t)vand_s8((int8x8_t)vdup_lane_s32(vcltz_s32(vshl_n_s32((int32x2_t)vmvn_s8(vand_s8((int8x8_t)v182, *(int8x8_t *)v111.f32)), 0x1FuLL)), 0), v180);
                  int8x8_t v184 = (int8x8_t)vdup_lane_s32(v182, 0);
                  float32x2_t v185 = vsub_f32(vadd_f32(vpadd_f32(v177, v177), (float32x2_t)vand_s8(v184, (int8x8_t)vmul_f32(v126, v181))), v178);
                  int32x2_t v186 = (int32x2_t)vmla_f32(vneg_f32(v183), v179, v185);
                  *(float32x2_t *)v111.f32 = vmla_f32((float32x2_t)vbic_s8((int8x8_t)vneg_f32(vmax_f32(v183, 0)), v184), v179, v185);
                  _X8[4] = vzip1_s32((int32x2_t)v179, v186);
                  _X8[5].i32[0] = v111.i32[0];
                  _X8[5].i32[1] = *(_DWORD *)(v146 + (v145 << 6) + 28);
                  *(float32x4_t *)_X8->i8 = v162;
                  *(float32x4_t *)_X8[2].i8 = v166;
                  ++v145;
                  _X8 += 6;
                }
                while (v145 != v144);
              }
              else
              {
                float32x4_t v132 = _X8;
              }
              unsigned int v131 = *(unsigned __int16 *)(a2 + 44 * v131 + 2);
              _X8 = v132;
            }
            while (v131 != 0xFFFF);
          }
          bzero(v132, (4 * v120));
          v188.i32[0] = 1.0;
          if ((v122[12] & 4) != 0 && *(_WORD *)(a2 + 104 * v87 + 2818) == 2) {
            *(float *)v188.i32 = 0.5;
          }
          float32x4_t v189 = (char *)v132 + 4 * ((v120 + 3) & 0xFFFFFFFC);
          uint64_t v190 = v89 + (v340 << 6);
          float v191 = *(float *)v188.i32 * *(float *)(v190 + 44);
          *(float *)v188.i32 = *(float *)v188.i32 * *(float *)(v190 + 56);
          *((void *)&v192 + 1) = v322.i64[1];
          *(float *)&long long v192 = v191;
          DWORD1(v192) = vdupq_lane_s32(v188, 0).i32[1];
          if (v122[12])
          {
            _X21[2] = v120;
          }
          else
          {
            uint64_t v193 = a2 + 104 * v87;
            int v194 = *(unsigned __int16 *)(v193 + 2818);
            _X21[2] = v120;
            if (v194)
            {
              float32x2_t v195 = (_WORD *)(v193 + 2818);
              _X21[3] = 2 * v194;
              *_X21 = v320;
              *((_OWORD *)_X21 + 1) = v192;
              *((_DWORD *)_X21 + 1) = v316;
              *((_DWORD *)_X21 + 2) = v315;
              *(int32x2_t *)v187.i8 = vdup_lane_s32((int32x2_t)v357, 1);
              *((_DWORD *)_X21 + 13) = 0;
              *(int8x8_t *)v196.i8 = vext_s8(0, (int8x8_t)vneg_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v354, 2)), 4uLL);
              v196.i64[1] = v187.u32[0];
              *(int8x8_t *)v187.i8 = vext_s8((int8x8_t)vneg_f32(*(float32x2_t *)v187.i8), (int8x8_t)v338, 4uLL);
              int8x16_t v197 = vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32((float32x2_t)vdup_n_s32(0x3F3504F3u), vabs_f32((float32x2_t)vdup_lane_s32(v338, 0))), 0), 0x1FuLL)), v196, v187);
              float32x4_t v198 = vmulq_f32(v310, v354);
              v198.i64[0] = vpaddq_f32(v198, v198).u64[0];
              float32x4_t v199 = vmulq_n_f32(v354, vpadd_f32(*(float32x2_t *)v198.f32, *(float32x2_t *)v198.f32).f32[0]);
              v199.i32[3] = 0;
              float32x4_t v200 = vsubq_f32(v310, v199);
              float32x4_t v201 = vmulq_f32(v200, v200);
              v201.i64[0] = vpaddq_f32(v201, v201).u64[0];
              float32x4_t v202 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v201.f32, *(float32x2_t *)v201.f32), (float32x2_t)vdup_n_s32(0x38D1B717u)), 0), (int8x16_t)v200, v197);
              float32x4_t v203 = vmulq_f32(v202, v202);
              v203.i64[0] = vpaddq_f32(v203, v203).u64[0];
              float32x2_t v204 = vpadd_f32(*(float32x2_t *)v203.f32, *(float32x2_t *)v203.f32);
              float32x2_t v205 = vrsqrte_f32(v204);
              int v206 = 4;
              float32x2_t v91 = v352;
              float32x2_t v90 = v353;
              float32x4_t v99 = v343;
              float32x4_t v92 = v344;
              float32x4_t v100 = v342;
              float32x4_t v106 = v350;
              float32x4_t v103 = v351;
              float32x4_t v105 = v349;
              do
              {
                float32x2_t v205 = vmul_f32(v205, vrsqrts_f32(vmul_f32(v205, v205), v204));
                --v206;
              }
              while (v206);
              __asm { FMOV            V4.2S, #1.0 }
              float32x2_t v208 = vmul_f32(v204, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v204), 0), _D4, (int8x8_t)v205));
              float32x2_t v209 = vrecpe_f32(v208);
              int v210 = 4;
              do
              {
                float32x2_t v209 = vmul_f32(v209, vrecps_f32(v208, v209));
                --v210;
              }
              while (v210);
              *((void *)_X21 + 7) = v311 + 104 * v88;
              if (*v195)
              {
                unint64_t v211 = 0;
                float32x2_t v212 = (float32x2_t)vextq_s8((int8x16_t)v354, (int8x16_t)v354, 8uLL).u64[0];
                float32x4_t v213 = vmulq_n_f32(v202, v209.f32[0]);
                float32x4_t v214 = v213;
                v214.i32[3] = 0;
                float32x2_t v215 = (float32x2_t)vextq_s8((int8x16_t)v214, (int8x16_t)v214, 8uLL).u64[0];
                float32x2_t v216 = (float32x2_t)vext_s8(*(int8x8_t *)v213.f32, (int8x8_t)v215, 4uLL);
                float32x2_t v355 = vneg_f32(v215);
                int8x8_t v217 = (int8x8_t)vmls_f32(vmul_f32(v212, *(float32x2_t *)v213.f32), v357, v215);
                float32x2_t v218 = vneg_f32(*(float32x2_t *)v213.f32);
                int8x8_t v219 = (int8x8_t)vmls_f32(vmul_f32(v357, v216), (float32x2_t)vext_s8((int8x8_t)v357, (int8x8_t)v212, 4uLL), *(float32x2_t *)v213.f32);
                float32x2_t v220 = (float32x2_t)vext_s8(v219, v217, 4uLL);
                *(float32x2_t *)v221.f32 = v220;
                v221.i64[1] = v219.u32[0];
                float32x4_t v222 = vmulq_f32(v314, v214);
                v222.i64[0] = vpaddq_f32(v222, v222).u64[0];
                float32x2_t v358 = vpadd_f32(*(float32x2_t *)v222.f32, *(float32x2_t *)v222.f32);
                float32x4_t v223 = vmulq_f32(v313, v214);
                v223.i64[0] = vpaddq_f32(v223, v223).u64[0];
                float32x2_t v341 = vpadd_f32(*(float32x2_t *)v223.f32, *(float32x2_t *)v223.f32);
                float32x4_t v224 = v214;
                v224.i32[3] = 0;
                float32x4_t v339 = v224;
                float32x2_t v225 = (float32x2_t)vext_s8((int8x8_t)v220, (int8x8_t)v219.u32[0], 4uLL);
                float32x2_t v226 = vneg_f32((float32x2_t)v219.u32[0]);
                float32x2_t v227 = vneg_f32(v220);
                float32x4_t v228 = vmulq_f32(v314, v221);
                v228.i64[0] = vpaddq_f32(v228, v228).u64[0];
                float32x2_t v337 = vpadd_f32(*(float32x2_t *)v228.f32, *(float32x2_t *)v228.f32);
                float32x4_t v229 = vmulq_f32(v313, v221);
                v229.i64[0] = vpaddq_f32(v229, v229).u64[0];
                float32x2_t v336 = vpadd_f32(*(float32x2_t *)v229.f32, *(float32x2_t *)v229.f32);
                float32x4_t v230 = v221;
                v230.i32[3] = 0;
                float32x4_t v335 = v230;
                _X12 = (float32x4_t *)((char *)v132 + 4 * ((v120 + 3) & 0xFFFFFFFC));
                do
                {
                  __asm
                  {
                    PRFM            #0, [X12,#0x100]
                    PRFM            #0, [X12,#0x180]
                  }
                  unsigned int v234 = *(unsigned __int16 *)(a2 + 4 * v87 + 2 * v211 + 7556);
                  if (v234 == 0xFFFF) {
                    unsigned int v234 = *(unsigned __int16 *)(a2 + 44 * *(unsigned int *)(v119 + 7424));
                  }
                  uint64_t v235 = a2 + 104 * v87 + 12 * v211;
                  v236.i64[0] = *(void *)(v235 + 2856);
                  v236.i64[1] = *(unsigned int *)(v235 + 2864);
                  v237.i64[0] = *(void *)(v235 + 2880);
                  v237.i64[1] = *(unsigned int *)(v235 + 2888);
                  float32x4_t v238 = vmulq_n_f32(v236, v329);
                  v238.i32[3] = 0;
                  float32x2_t v239 = (float32x2_t)vextq_s8((int8x16_t)v236, (int8x16_t)v236, 8uLL).u64[0];
                  int8x8_t v240 = (int8x8_t)vmls_f32(vmul_f32(v334, (float32x2_t)vext_s8(*(int8x8_t *)v236.f32, (int8x8_t)v239, 4uLL)), v325, *(float32x2_t *)v236.f32);
                  *(int8x8_t *)v241.f32 = vext_s8(v240, (int8x8_t)vmls_f32(vmul_f32(v326, *(float32x2_t *)v236.f32), v334, v239), 4uLL);
                  v241.i64[1] = v240.u32[0];
                  float32x4_t v242 = vmlaq_f32(v238, v331, v241);
                  v242.i64[1] = vextq_s8((int8x16_t)v242, (int8x16_t)v242, 8uLL).u32[0];
                  float32x4_t v243 = vmulq_f32(v332, v236);
                  v243.i64[0] = vpaddq_f32(v243, v243).u64[0];
                  float32x4_t v244 = vmlaq_n_f32(v242, v332, vpadd_f32(*(float32x2_t *)v243.f32, *(float32x2_t *)v243.f32).f32[0]);
                  float32x4_t v245 = vaddq_f32(v244, v244);
                  float32x4_t v246 = v245;
                  v246.i32[3] = 0;
                  float32x4_t v247 = vmulq_n_f32(v237, v330);
                  v247.i32[3] = 0;
                  v244.i64[0] = vextq_s8((int8x16_t)v237, (int8x16_t)v237, 8uLL).u64[0];
                  int8x8_t v248 = (int8x8_t)vmls_f32(vmul_f32(v333, (float32x2_t)vext_s8(*(int8x8_t *)v237.f32, *(int8x8_t *)v244.f32, 4uLL)), v323, *(float32x2_t *)v237.f32);
                  *(int8x8_t *)v249.f32 = vext_s8(v248, (int8x8_t)vmls_f32(vmul_f32(v324, *(float32x2_t *)v237.f32), v333, *(float32x2_t *)v244.f32), 4uLL);
                  v249.i64[1] = v248.u32[0];
                  float32x4_t v250 = vmlaq_f32(v247, v327, v249);
                  float32x4_t v189 = (char *)&_X12[8];
                  v250.i64[1] = vextq_s8((int8x16_t)v250, (int8x16_t)v250, 8uLL).u32[0];
                  float32x4_t v251 = vmulq_f32(v328, v237);
                  v251.i64[0] = vpaddq_f32(v251, v251).u64[0];
                  float32x4_t v252 = vmlaq_n_f32(v250, v328, vpadd_f32(*(float32x2_t *)v251.f32, *(float32x2_t *)v251.f32).f32[0]);
                  float32x4_t v253 = vaddq_f32(v252, v252);
                  float32x4_t v254 = v253;
                  v254.i32[3] = 0;
                  float32x4_t v255 = vaddq_f32(v99, v246);
                  float32x4_t v256 = vaddq_f32(v100, v254);
                  float32x4_t v257 = (float32x4_t)vbicq_s8((int8x16_t)vsubq_f32(v255, v256), (int8x16_t)vcgtq_f32(v92, vabdq_f32(v255, v256)));
                  uint64_t v258 = v89 + ((unint64_t)v234 << 6);
                  float32x2_t v259 = (float32x2_t)vextq_s8((int8x16_t)v246, (int8x16_t)v246, 8uLL).u64[0];
                  float32x2_t v260 = (float32x2_t)vext_s8(*(int8x8_t *)v245.f32, (int8x8_t)v259, 4uLL);
                  *(float32x2_t *)v255.f32 = vmla_f32(vmul_f32(v216, *(float32x2_t *)v245.f32), v260, v218);
                  *(int8x8_t *)v246.f32 = vext_s8(*(int8x8_t *)v255.f32, (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v213.f32, v259), *(float32x2_t *)v245.f32, v355), 4uLL);
                  v246.i64[1] = v255.u32[0];
                  v261.i64[0] = *(void *)(v258 + 32);
                  float32x2_t v262 = (float32x2_t)vextq_s8((int8x16_t)v254, (int8x16_t)v254, 8uLL).u64[0];
                  float32x2_t v263 = (float32x2_t)vext_s8(*(int8x8_t *)v253.f32, (int8x8_t)v262, 4uLL);
                  *(float32x2_t *)v255.f32 = vmla_f32(vmul_f32(v216, *(float32x2_t *)v253.f32), v263, v218);
                  *(int8x8_t *)v256.f32 = vext_s8(*(int8x8_t *)v255.f32, (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v213.f32, v262), *(float32x2_t *)v253.f32, v355), 4uLL);
                  v256.i64[1] = v255.u32[0];
                  unsigned int v264 = *(_DWORD *)(v258 + 40);
                  float32x4_t v265 = (float32x4_t)vbicq_s8((int8x16_t)v246, (int8x16_t)vcgtq_f32(v92, vabsq_f32(v246)));
                  float32x4_t v266 = vmulq_n_f32(v350, v265.f32[0]);
                  v266.i32[3] = 0;
                  float32x4_t v267 = vmulq_lane_f32(v365, *(float32x2_t *)v265.f32, 1);
                  v267.i32[3] = 0;
                  float32x4_t v268 = (float32x4_t)vbicq_s8((int8x16_t)v256, (int8x16_t)vcgtq_f32(v92, vabsq_f32(v256)));
                  float32x4_t v269 = vmulq_laneq_f32(v363, v265, 2);
                  v269.i32[3] = 0;
                  float32x4_t v270 = vaddq_f32(v269, vaddq_f32(v266, v267));
                  float32x4_t v271 = vmulq_n_f32(v367, v268.f32[0]);
                  v271.i32[3] = 0;
                  float32x4_t v272 = vmulq_lane_f32(v361, *(float32x2_t *)v268.f32, 1);
                  v272.i32[3] = 0;
                  float32x4_t v273 = vmulq_laneq_f32(v360, v268, 2);
                  v273.i32[3] = 0;
                  float32x4_t v274 = vaddq_f32(v273, vaddq_f32(v271, v272));
                  float32x4_t v275 = vmulq_f32(v270, v270);
                  v275.i64[0] = vpaddq_f32(v275, v275).u64[0];
                  float32x4_t v276 = vmulq_f32(v274, v274);
                  v276.i64[0] = vpaddq_f32(v276, v276).u64[0];
                  float32x2_t v277 = vadd_f32(vadd_f32(v345, vmul_lane_f32(vpadd_f32(*(float32x2_t *)v275.f32, *(float32x2_t *)v275.f32), v353, 1)), vsub_f32(vmul_lane_f32(vpadd_f32(*(float32x2_t *)v276.f32, *(float32x2_t *)v276.f32), v352, 1), v347));
                  float32x2_t v278 = vrecpe_f32(v277);
                  int v279 = 4;
                  do
                  {
                    float32x2_t v278 = vmul_f32(v278, vrecps_f32(v277, v278));
                    --v279;
                  }
                  while (v279);
                  v261.i64[1] = v264;
                  int8x8_t v280 = vand_s8((int8x8_t)vdup_lane_s32(vcgtz_f32(v277), 0), (int8x8_t)vmul_f32(v278, v346));
                  float32x4_t v281 = vmulq_f32(v351, v265);
                  v281.i64[0] = vpaddq_f32(v281, v281).u64[0];
                  float32x4_t v282 = vmulq_f32(v349, v268);
                  v282.i64[0] = vpaddq_f32(v282, v282).u64[0];
                  *(float32x2_t *)v281.f32 = vsub_f32(vadd_f32(v358, vpadd_f32(*(float32x2_t *)v281.f32, *(float32x2_t *)v281.f32)), vadd_f32(v341, vpadd_f32(*(float32x2_t *)v282.f32, *(float32x2_t *)v282.f32)));
                  float32x4_t v283 = vmulq_f32(v214, v261);
                  v283.i64[0] = vpaddq_f32(v283, v283).u64[0];
                  v281.i32[0] = vsub_f32(vpadd_f32(*(float32x2_t *)v283.f32, *(float32x2_t *)v283.f32), *(float32x2_t *)v281.f32).u32[0];
                  v270.i32[3] = v280.i32[1];
                  float32x4_t v284 = vmulq_f32(v214, v257);
                  v284.i64[0] = vpaddq_f32(v284, v284).u64[0];
                  v274.i32[3] = vmul_n_f32(vpadd_f32(*(float32x2_t *)&v284, *(float32x2_t *)&v284), *(float *)&a5).i32[1];
                  _X12[1] = v270;
                  _X12[2] = v274;
                  int8x8_t v285 = (int8x8_t)vmla_f32(vmul_f32(v225, *(float32x2_t *)v245.f32), v260, v227);
                  *(int8x8_t *)v284.f32 = vext_s8(v285, (int8x8_t)vmla_f32(vmul_f32(v220, v259), *(float32x2_t *)v245.f32, v226), 4uLL);
                  *_X12 = v339;
                  v284.i64[1] = v285.u32[0];
                  *(float32x2_t *)v283.f32 = vmla_f32(vmul_f32(v225, *(float32x2_t *)v253.f32), v263, v227);
                  *(int8x8_t *)v286.i8 = vext_s8(*(int8x8_t *)v283.f32, (int8x8_t)vmla_f32(vmul_f32(v220, v262), *(float32x2_t *)v253.f32, v226), 4uLL);
                  v286.i64[1] = v283.u32[0];
                  _X12[3].i32[0] = v281.i32[0];
                  float32x4_t v92 = v344;
                  float32x4_t v287 = (float32x4_t)vbicq_s8((int8x16_t)v284, (int8x16_t)vcgtq_f32(v344, vabsq_f32(v284)));
                  float32x4_t v106 = v350;
                  float32x4_t v288 = vmulq_n_f32(v350, v287.f32[0]);
                  v288.i32[3] = 0;
                  float32x4_t v289 = vmulq_lane_f32(v365, *(float32x2_t *)v287.f32, 1);
                  v289.i32[3] = 0;
                  float32x4_t v290 = (float32x4_t)vbicq_s8(v286, (int8x16_t)vcgtq_f32(v344, vabsq_f32((float32x4_t)v286)));
                  float32x4_t v291 = vmulq_laneq_f32(v363, v287, 2);
                  v291.i32[3] = 0;
                  float32x4_t v111 = vaddq_f32(v291, vaddq_f32(v288, v289));
                  float32x4_t v292 = vmulq_n_f32(v367, v290.f32[0]);
                  v292.i32[3] = 0;
                  float32x4_t v293 = vmulq_lane_f32(v361, *(float32x2_t *)v290.f32, 1);
                  v293.i32[3] = 0;
                  float32x4_t v294 = vmulq_laneq_f32(v360, v290, 2);
                  v294.i32[3] = 0;
                  float32x4_t v295 = vaddq_f32(v294, vaddq_f32(v292, v293));
                  float32x4_t v296 = vmulq_f32(v111, v111);
                  v296.i64[0] = vpaddq_f32(v296, v296).u64[0];
                  float32x2_t v91 = v352;
                  float32x2_t v90 = v353;
                  float32x4_t v297 = vmulq_f32(v295, v295);
                  v297.i64[0] = vpaddq_f32(v297, v297).u64[0];
                  float32x2_t v298 = vadd_f32(vadd_f32(v345, vmul_lane_f32(vpadd_f32(*(float32x2_t *)v296.f32, *(float32x2_t *)v296.f32), v353, 1)), vsub_f32(vmul_lane_f32(vpadd_f32(*(float32x2_t *)v297.f32, *(float32x2_t *)v297.f32), v352, 1), v347));
                  float32x2_t v299 = vrecpe_f32(v298);
                  int v300 = 4;
                  do
                  {
                    float32x2_t v299 = vmul_f32(v299, vrecps_f32(v298, v299));
                    --v300;
                  }
                  while (v300);
                  int8x8_t v301 = vand_s8((int8x8_t)vdup_lane_s32(vcgtz_f32(v298), 0), (int8x8_t)vmul_f32(v299, v346));
                  float32x4_t v302 = vmulq_f32(v221, v261);
                  v302.i64[0] = vpaddq_f32(v302, v302).u64[0];
                  float32x4_t v103 = v351;
                  float32x4_t v303 = vmulq_f32(v351, v287);
                  v303.i64[0] = vpaddq_f32(v303, v303).u64[0];
                  float32x4_t v304 = vmulq_f32(v349, v290);
                  float32x4_t v105 = v349;
                  v304.i64[0] = vpaddq_f32(v304, v304).u64[0];
                  v111.i32[3] = v301.i32[1];
                  _X12[4] = v335;
                  _X12[5] = v111;
                  float32x4_t v305 = vmulq_f32(v221, v257);
                  v305.i64[0] = vpaddq_f32(v305, v305).u64[0];
                  v111.i32[1] = HIDWORD(a5);
                  v295.i32[3] = vmul_n_f32(vpadd_f32(*(float32x2_t *)&v305, *(float32x2_t *)&v305), *(float *)&a5).i32[1];
                  _X12[6] = v295;
                  _X12[7].i32[0] = vsub_f32(vpadd_f32(*(float32x2_t *)v302.f32, *(float32x2_t *)v302.f32), vsub_f32(vadd_f32(v337, vpadd_f32(*(float32x2_t *)v303.f32, *(float32x2_t *)v303.f32)), vadd_f32(v336, vpadd_f32(*(float32x2_t *)v304.f32, *(float32x2_t *)v304.f32)))).u32[0];
                  ++v211;
                  _X12 += 8;
                  float32x4_t v100 = v342;
                  float32x4_t v99 = v343;
                }
                while (v211 < (unsigned __int16)*v195);
              }
              goto LABEL_100;
            }
          }
          _X21[3] = 0;
          *_X21 = v320;
          *((_OWORD *)_X21 + 1) = v192;
          *((_DWORD *)_X21 + 1) = v316;
          *((_DWORD *)_X21 + 2) = v315;
          *((_DWORD *)_X21 + 13) = 0;
          float32x2_t v91 = v352;
          float32x2_t v90 = v353;
          float32x4_t v99 = v343;
          float32x4_t v92 = v344;
          float32x4_t v100 = v342;
          float32x4_t v106 = v350;
          float32x4_t v103 = v351;
          float32x4_t v105 = v349;
LABEL_100:
          ++v88;
          unint64_t v86 = *(unsigned int *)(a2 + 7688);
          _X21 = v189;
          v95.i32[0] = v318;
          goto LABEL_101;
        }
      }
LABEL_105:
      *(_DWORD *)&v312[v309] = 0;
    }
    return 1;
  }
  int v47 = 0;
  int v48 = 0;
  if ((v37 & 8) != 0) {
    int v49 = 112;
  }
  else {
    int v49 = 48;
  }
  if ((v37 & 8) != 0) {
    char v50 = 8;
  }
  else {
    char v50 = 7;
  }
  float v51 = (unsigned __int16 *)(a2 + 2818);
  uint64_t v52 = (_DWORD *)(a2 + 7424);
  do
  {
    if (*v52 != 0xFFFF) {
      ++v48;
    }
    int v53 = *(v52 - 32);
    if (v53)
    {
      v47 += v53 * v49 + ((4 * v53 + 12) & 0xFFFFFFF0) + 80;
      if ((*((unsigned char *)v51 - 1) & 1) == 0) {
        v47 += *v51 << v50;
      }
    }
    ++v52;
    v51 += 52;
    --v46;
  }
  while (v46);
  uint64_t v359 = a4;
  unsigned int v54 = (104 * v48 + 15) & 0xFFFFFFF0;
  unsigned int v55 = (v47 + 15) & 0xFFFFFFF0;
  if (v55)
  {
    uint64_t v56 = (**(uint64_t (***)(uint64_t, void))a3)(a3, v55 + 16);
    if (v56 == -1) {
      float v57 = 0;
    }
    else {
      float v57 = (char *)v56;
    }
  }
  else
  {
    float v57 = 0;
  }
  unsigned int v62 = v55;
  if (v55) {
    BOOL v63 = v57 == 0;
  }
  else {
    BOOL v63 = 0;
  }
  int v64 = !v63;
  if (v54) {
    BOOL v65 = v64 == 0;
  }
  else {
    BOOL v65 = 1;
  }
  if (v65)
  {
    _X7 = 0;
  }
  else
  {
    float v66 = v57;
    uint64_t v67 = (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 8))(a3, (104 * v48 + 15) & 0xFFFFFFF0);
    float v57 = v66;
    uint64_t v38 = a1 + 56;
    if (v67 == -1) {
      _X7 = 0;
    }
    else {
      _X7 = v67;
    }
  }
  uint64_t result = 0;
  if ((v64 & 1) == 0)
  {
    *(void *)(a1 + 160) = 0;
    *(unsigned char *)(a1 + 168) = 0;
    *(void *)(v31 + 32) = 0;
    *(_WORD *)(v31 + 30) = 0;
    return result;
  }
  *(void *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  *(void *)(v31 + 32) = 0;
  *(_WORD *)(v31 + 30) = 0;
  if (v54) {
    BOOL v68 = _X7 == 0;
  }
  else {
    BOOL v68 = 0;
  }
  unsigned int v60 = v62;
  a4 = v359;
  BOOL v61 = v366;
  uint64_t v39 = a1 + 84;
  if (!v68) {
    goto LABEL_51;
  }
  return result;
}

uint64_t physx::Dy::getFrictionPatches(uint64_t a1, float *_X1, int a3, float *a4, float *a5, float a6, double a7, double a8, float a9, float a10, float a11, float a12, float a13)
{
  uint64_t v15 = 1;
  if (_X1 && a3)
  {
    char v16 = 0;
    float v17 = _X1 + 18;
    float v18 = _X1;
    do
    {
      __asm { PRFM            #0, [X1,#0x80] }
      int v24 = *(unsigned __int8 *)v18;
      v18 += 26;
      if (!v24)
      {
        uint64_t v25 = *((unsigned __int16 *)_X1 + 1);
        if (*((_WORD *)_X1 + 1))
        {
          if ((*((unsigned char *)_X1 + 1) & 2) == 0)
          {
            if ((v16 & 1) == 0)
            {
              float v26 = a4[1];
              float v27 = a4[2];
              float v28 = a4[3];
              float v29 = a5[4] - a4[4];
              float v30 = a5[5] - a4[5];
              float v31 = a5[6] - a4[6];
              float v32 = v29 + v29;
              float v33 = v30 + v30;
              float v34 = v31 + v31;
              float v35 = (float)(v28 * v28) + -0.5;
              float v36 = (float)((float)-(float)(v26 * (float)(v30 + v30)) - (float)(*a4 * (float)(v29 + v29)))
                  - (float)(v27 * v34);
              a9 = (float)((float)(v28 * (float)((float)(v27 * (float)(v30 + v30)) - (float)(v26 * v34)))
                         + (float)((float)(v29 + v29) * v35))
                 - (float)(*a4 * v36);
              a10 = (float)((float)(v28 * (float)((float)(*a4 * v34) - (float)(v27 * v32)))
                          + (float)((float)(v30 + v30) * v35))
                  - (float)(v26 * v36);
              a11 = (float)((float)(v28 * (float)((float)(v26 * v32) - (float)(*a4 * v33))) + (float)(v34 * v35))
                  - (float)(v27 * v36);
              float v38 = a5[2];
              float v37 = a5[3];
              float v39 = a5[1];
              a12 = (float)((float)((float)(v28 * *a5) - (float)(*a4 * v37)) - (float)(v26 * v38)) + (float)(v39 * v27);
              a13 = (float)((float)((float)(v28 * v39) - (float)(v26 * v37)) - (float)(v27 * *a5)) + (float)(v38 * *a4);
              float v13 = (float)((float)((float)(v28 * v38) - (float)(v27 * v37)) - (float)(*a4 * v39)) + (float)(*a5 * v26);
              float v14 = (float)((float)((float)(*a4 * *a5) + (float)(v28 * v37)) + (float)(v26 * v39)) + (float)(v27 * v38);
            }
            float v40 = _X1[6];
            float v41 = _X1[7] + _X1[7];
            float v42 = _X1[8] + _X1[8];
            float v43 = _X1[9] + _X1[9];
            float v44 = (float)(v14 * v14) + -0.5;
            float v45 = (float)(a13 * v42) + (float)(a12 * v41);
            float v46 = (float)(v14 * (float)((float)(a13 * v43) - (float)(v13 * v42))) + (float)(v41 * v44);
            float v47 = (float)(v14 * (float)((float)(v13 * v41) - (float)(a12 * v43))) + (float)(v42 * v44);
            float v48 = (float)(a12 * v42) - (float)(a13 * v41);
            float v49 = v45 + (float)(v13 * v43);
            float v50 = v46 + (float)(a12 * v49);
            float v51 = v47 + (float)(a13 * v49);
            float v52 = (float)((float)(v14 * v48) + (float)(v43 * v44)) + (float)(v13 * v49);
            float v54 = _X1[4];
            float v53 = _X1[5];
            if ((float)((float)((float)(v53 * v51) + (float)(v54 * v50)) + (float)(v40 * v52)) > 0.999)
            {
              unsigned int v55 = v17;
              while (1)
              {
                float v56 = *(v55 - 2) + *(v55 - 2);
                float v57 = *(v55 - 1) + *(v55 - 1);
                float v58 = *v55 + *v55;
                float v59 = (float)((float)(a13 * v57) + (float)(a12 * v56)) + (float)(v13 * v58);
                if (fabsf((float)((float)(v53* (float)(*(v55 - 7)- (float)(a10+ (float)((float)((float)(v14* (float)((float)(v58 * (float)-a12)+ (float)(v13 * v56)))+ (float)(v57 * v44))+ (float)(a13 * v59)))))+ (float)((float)(*(v55 - 8)- (float)(a9+ (float)((float)((float)(v14* (float)((float)(v57 * (float)-v13)+ (float)(a13 * v58)))+ (float)(v56 * v44))+ (float)(a12 * v59))))* v54))+ (float)((float)(*(v55 - 6)- (float)(a11+ (float)((float)((float)(v14
                                                                     * (float)((float)(v56 * (float)-a13)
                                                                             + (float)(a12 * v57)))
                                                             + (float)(v58 * v44))
                                                     + (float)(v13 * v59))))
                             * v40)) >= a6)
                  break;
                v55 += 3;
                if (!--v25)
                {
                  uint64_t v60 = *(unsigned int *)(a1 + 7688);
                  if (v60 != 32)
                  {
                    uint64_t v61 = a1 + 4 * v60;
                    *(_DWORD *)(v61 + 7556) = -1;
                    float v62 = v54 + v54;
                    float v63 = v53 + v53;
                    float v64 = v40 + v40;
                    float v66 = a4[2];
                    float v65 = a4[3];
                    float v67 = (float)(v65 * v65) + -0.5;
                    float v68 = a4[1];
                    float v69 = (float)((float)(v63 * v68) + (float)(*a4 * v62)) + (float)(v66 * v64);
                    float v70 = (float)((float)(v65 * (float)((float)(v68 * v64) - (float)(v66 * v63))) + (float)(v62 * v67))
                        + (float)(*a4 * v69);
                    float v71 = (float)((float)(v65 * (float)((float)(v66 * v62) - (float)(*a4 * v64))) + (float)(v63 * v67))
                        + (float)(v68 * v69);
                    float v72 = (float)((float)(v65 * (float)((float)(*a4 * v63) - (float)(v68 * v62))) + (float)(v64 * v67))
                        + (float)(v66 * v69);
                    unsigned int v73 = (float *)(a1 + 12 * v60);
                    v73[1536] = v70;
                    v73[1537] = v71;
                    v73[1538] = v72;
                    *(_DWORD *)(v61 + 7296) = 0;
                    uint64_t v74 = *(unsigned int *)(a1 + 7688);
                    uint64_t v75 = a1 + 24 * v74;
                    *(_OWORD *)(v75 + 6528) = xmmword_23441FAD0;
                    *(int32x2_t *)(v75 + 6544) = vdup_n_s32(0xFE7FFFFF);
                    *(_DWORD *)(a1 + 4 * v74 + 7424) = 0xFFFF;
                    LODWORD(v74) = *(_DWORD *)(a1 + 7688);
                    *(_DWORD *)(a1 + 7688) = v74 + 1;
                    uint64_t v76 = a1 + 104 * v74;
                    long long v78 = *((_OWORD *)_X1 + 4);
                    long long v77 = *((_OWORD *)_X1 + 5);
                    uint64_t v79 = *((void *)_X1 + 12);
                    *(_OWORD *)(v76 + 2864) = *((_OWORD *)_X1 + 3);
                    *(void *)(v76 + 2912) = v79;
                    *(_OWORD *)(v76 + 2896) = v77;
                    *(_OWORD *)(v76 + 2880) = v78;
                    long long v80 = *(_OWORD *)_X1;
                    long long v81 = *((_OWORD *)_X1 + 1);
                    *(_OWORD *)(v76 + 2848) = *((_OWORD *)_X1 + 2);
                    *(_OWORD *)(v76 + 2832) = v81;
                    *(_OWORD *)(v76 + 2816) = v80;
                    break;
                  }
                  return 0;
                }
              }
            }
            char v16 = 1;
          }
        }
      }
      v17 += 26;
      _X1 = v18;
      --a3;
    }
    while (a3);
    return 1;
  }
  return v15;
}

float32x2_t physx::Dy::setupExtSolverContact(uint64_t a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4, float32x2_t *a5, void *a6, float32x4_t *a7, float32x4_t *a8, int8x8_t *a9, float32x2_t *a10, float32x2_t *a11, float32x2_t *a12, float32x2_t *a13, float32x2_t *a14, float32x2_t *a15, uint64_t a16, uint64_t a17, float32x2_t *a18, uint64_t a19, float32x4_t *a20,float32x4_t *a21)
{
  int32x2_t v83 = *(int32x2_t *)(a16 + 12);
  v23.i32[0] = v83.i32[1];
  v23.i32[1] = *(_DWORD *)(a16 + 20);
  v23.i64[1] = *(unsigned int *)(a16 + 24);
  int8x16_t v24 = (int8x16_t)vsubq_f32(v23, *a7);
  int8x16_t v25 = (int8x16_t)vsubq_f32(v23, *a8);
  float32x4_t v26 = *(float32x4_t *)a9->i8;
  float32x2_t v27 = (float32x2_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
  float32x2_t v28 = (float32x2_t)vext_s8(*a9, (int8x8_t)v27, 4uLL);
  int8x8_t v29 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL), (float32x2_t)*a9), *(float32x2_t *)v24.i8, v27);
  float32x2_t v30 = vmls_f32(vmul_f32(*(float32x2_t *)v24.i8, v28), (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 4uLL), (float32x2_t)*a9);
  float v31 = v30.f32[0];
  *(int8x8_t *)v32.f32 = vext_s8((int8x8_t)v30, v29, 4uLL);
  v32.i64[1] = v30.u32[0];
  int8x8_t v33 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v25.i8, v28), (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 4uLL), (float32x2_t)*a9);
  *(int8x8_t *)v34.f32 = vext_s8(v33, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL), (float32x2_t)*a9), *(float32x2_t *)v25.i8, v27), 4uLL);
  v34.i64[1] = v33.u32[0];
  float32x4_t v82 = v32;
  float32x4_t v35 = v32;
  if (*(__int16 *)(a1 + 16) == -1)
  {
    uint64_t v36 = *(void *)(a1 + 8);
    float32x4_t v37 = *(float32x4_t *)(v36 + 44);
    float32x4_t v38 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 3);
    v38.i32[1] = *(_DWORD *)(v36 + 60);
    v38.i32[2] = *(_DWORD *)(v36 + 64);
    float32x4_t v39 = vmulq_lane_f32(*(float32x4_t *)(v36 + 32), v30, 1);
    v39.i32[3] = 0;
    float32x4_t v40 = vmulq_n_f32(v37, *(float *)v29.i32);
    v40.i32[3] = 0;
    float32x4_t v41 = vmulq_n_f32(v38, v31);
    v41.i32[3] = 0;
    float32x4_t v35 = vaddq_f32(vaddq_f32(v39, v40), v41);
  }
  float32x2_t v42 = *a12;
  float32x4_t v86 = *(float32x4_t *)a9->i8;
  float32x4_t v87 = v35;
  float32x4_t v43 = vnegq_f32(v26);
  v43.i32[3] = 0;
  float32x4_t v44 = vnegq_f32(v34);
  float32x4_t v81 = v34;
  if (*(__int16 *)(a2 + 16) == -1)
  {
    uint64_t v45 = *(void *)(a2 + 8);
    float32x4_t v46 = *(float32x4_t *)(v45 + 44);
    float32x4_t v47 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 3);
    v47.i32[1] = *(_DWORD *)(v45 + 60);
    v47.i32[2] = *(_DWORD *)(v45 + 64);
    float32x4_t v48 = vmulq_n_f32(*(float32x4_t *)(v45 + 32), v44.f32[0]);
    v48.i32[3] = 0;
    float32x4_t v49 = vmulq_lane_f32(v46, *(float32x2_t *)v44.f32, 1);
    v49.i32[3] = 0;
    float32x4_t v50 = vmulq_laneq_f32(v47, v44, 2);
    v50.i32[3] = 0;
    float32x4_t v44 = vaddq_f32(vaddq_f32(v48, v49), v50);
  }
  else
  {
    v44.i32[3] = 0;
  }
  float32x4_t v84 = v43;
  float32x4_t v85 = v44;
  float32x2_t ImpulseResponse = physx::Dy::getImpulseResponse((uint64_t *)a1, &v86, v89, a3, a5, (uint64_t *)a2, &v84, v88, *(double *)v43.i64, *(float32x2_t *)v44.f32, a4, a6, a19);
  float32x4_t v52 = vaddq_f32(vmulq_f32(*a20, *(float32x4_t *)a9->i8), vmulq_f32(v82, a20[1]));
  float32x4_t v53 = vaddq_f32(vmulq_f32(*(float32x4_t *)a9->i8, *a21), vmulq_f32(v81, a21[1]));
  int8x16_t v54 = (int8x16_t)vsubq_f32(v52, v53);
  float32x2_t v55 = (float32x2_t)vextq_s8(v54, v54, 8uLL).u64[0];
  float32x2_t v56 = vadd_f32(ImpulseResponse, (float32x2_t)vdup_n_s32(0x38D1B717u));
  float32x2_t v57 = vrecpe_f32(v56);
  int v58 = 4;
  do
  {
    float32x2_t v57 = vmul_f32(v57, vrecps_f32(v56, v57));
    --v58;
  }
  while (v58);
  float32x2_t v59 = vpadd_f32(*(float32x2_t *)v54.i8, v55);
  float32x2_t v60 = vsub_f32((float32x2_t)vdup_lane_s32(v83, 0), v42);
  float32x2_t v61 = vpadd_f32(v59, v59);
  int8x8_t v62 = (int8x8_t)vcgt_f32(*a15, v61);
  float32x2_t v63 = vneg_f32(v61);
  int32x2_t v64 = (int32x2_t)vand_s8((int8x8_t)vcgt_f32(v63, vmul_f32(v60, *a10)), vand_s8((int8x8_t)vcgtz_f32(*a14), v62));
  int8x8_t v65 = (int8x8_t)vdup_lane_s32(v64, 0);
  double v66 = COERCE_DOUBLE(vand_s8(v65, (int8x8_t)vmul_f32(*a14, v63)));
  if (*(__int16 *)(a1 + 16) == -1)
  {
    float32x2_t v69 = (float32x2_t)vpaddq_f32(v52, v52).u64[0];
    double v68 = COERCE_DOUBLE(vsub_f32(*(float32x2_t *)&v66, vpadd_f32(v69, v69)));
  }
  else
  {
    float32x2_t v67 = (float32x2_t)vpaddq_f32(v53, v53).u64[0];
    double v68 = COERCE_DOUBLE(vadd_f32(vpadd_f32(v67, v67), *(float32x2_t *)&v66));
    if (*(__int16 *)(a2 + 16) != -1) {
      double v68 = v66;
    }
  }
  int8x8_t v70 = (int8x8_t)vdup_lane_s32((int32x2_t)vmvn_s8(vand_s8((int8x8_t)v64, (int8x8_t)vcge_f32(*a18, v60))), 0);
  float32x2_t v71 = (float32x2_t)vand_s8((int8x8_t)vdup_lane_s32((int32x2_t)vmvn_s8((int8x8_t)vcgt_f32((float32x2_t)vdup_n_s32(0x3727C5ACu), ImpulseResponse)), 0), (int8x8_t)v57);
  int8x8_t v72 = (int8x8_t)vmul_f32(vmax_f32(*a13, vmul_f32(v60, *a11)), v71);
  float32x4_t v73 = *(float32x4_t *)(a16 + 32);
  v73.i64[1] = *(unsigned int *)(a16 + 40);
  float32x2_t v74 = (float32x2_t)vand_s8(v70, v72);
  float32x4_t v75 = vmulq_f32(*(float32x4_t *)a9->i8, v73);
  v75.i64[0] = vpaddq_f32(v75, v75).u64[0];
  *(float32x2_t *)v75.f32 = vadd_f32(*(float32x2_t *)&v68, vpadd_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v75.f32));
  float32x2_t v76 = vmla_f32(vneg_f32(v74), v71, *(float32x2_t *)v75.f32);
  *(int32x2_t *)(a17 + 32) = vzip1_s32((int32x2_t)v71, (int32x2_t)v76);
  *(_DWORD *)(a17 + 40) = vmla_f32((float32x2_t)vbic_s8((int8x8_t)vneg_f32(vmax_f32(v74, 0)), v65), v71, *(float32x2_t *)v75.f32).u32[0];
  *(_DWORD *)(a17 + 44) = *(_DWORD *)(a16 + 28);
  float32x4_t v77 = vnegq_f32(v85);
  v77.i32[3] = 0;
  float32x2_t result = vmax_f32(vmla_f32(v76, v71, v63), 0);
  *(float32x4_t *)a17 = v87;
  *(float32x4_t *)(a17 + 16) = v77;
  float32x4_t v79 = v89[1];
  *(float32x4_t *)(a17 + 48) = v89[0];
  *(float32x4_t *)(a17 + 64) = v79;
  float32x4_t v80 = v88[1];
  *(float32x4_t *)(a17 + 80) = v88[0];
  *(float32x4_t *)(a17 + 96) = v80;
  return result;
}

uint64_t physx::Dy::createFinalizeSolverContacts4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, float a5, double a6, double a7, float a8, double a9, double a10, double a11, double a12)
{
  for (uint64_t i = 2; i != 106; i += 26)
    *(_WORD *)(a3[i] + 30) = 0;
  unint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = a2 + 16;
  *(_DWORD *)(a2 + 4112) = 0;
  do
  {
    char v16 = (float32x4_t *)&a3[26 * v13];
    float v17 = (uint64_t *)v16[1].i64[0];
    v16[8].i64[1] = v15 + ((unint64_t)v14 << 6);
    _X3 = *v17;
    _X8 = v17[1];
    __asm
    {
      PRFM            #0, [X3]
      PRFM            #0, [X8]
    }
    float32x4_t v26 = *(uint64_t **)(a1 + 8 * v13);
    if (v14 + *((unsigned __int8 *)v26 + 24) > 0x40) {
      return 1;
    }
    _X3 = a3[26 * v13 + 20];
    __asm
    {
      PRFM            #0, [X3]
      PRFM            #0, [X3,#0x40]
      PRFM            #0, [X3,#0x80]
    }
    _X7 = *v26;
    if (v13 >= 3)
    {
      _X19 = v26[1];
    }
    else
    {
      __asm { PRFM            #0, [X7] }
      _X19 = v26[1];
      __asm { PRFM            #0, [X19] }
    }
    uint64_t v35 = v16[2].i64[1];
    float v36 = *(float *)(v16[3].i64[0] + 76);
    if (*(float *)(v35 + 76) < v36) {
      float v36 = *(float *)(v35 + 76);
    }
    if (!_X7
      || ((char v37 = *(unsigned char *)(_X7 + 43), (v37 & 2) != 0) ? (v38 = 64) : (v38 = 16),
          (*(unsigned char *)(_X7 + 43) & 4) != 0 || (int v39 = *((unsigned __int8 *)v26 + 25), !*((unsigned char *)v26 + 25))))
    {
      *(_DWORD *)(a2 + 4112) = v14;
      return 1;
    }
    int v40 = 0;
    unsigned int v41 = 0;
    int v42 = 0;
    float32x4_t v43 = *(float32x4_t *)_X7;
    if ((*(unsigned char *)(_X7 + 43) & 2) != 0) {
      char v44 = 6;
    }
    else {
      char v44 = 4;
    }
    if (v37 < 0) {
      uint64_t v45 = 32;
    }
    else {
      uint64_t v45 = v38;
    }
    unsigned int v46 = v37 & 0xFFFFFF82;
    if (v37 < 0) {
      char v47 = 5;
    }
    else {
      char v47 = v44;
    }
    uint64_t v48 = v14;
    do
    {
      if (v40)
      {
        unsigned int v49 = *(unsigned __int8 *)(_X7 + 41);
        BOOL v50 = v49 > v41;
        LODWORD(v51) = (v49 - v41) << v47;
        if (v50) {
          uint64_t v51 = v51;
        }
        else {
          uint64_t v51 = 0;
        }
        _X19 += v51;
        _X7 += 48;
      }
      unsigned int v41 = *(unsigned __int8 *)(_X7 + 41);
      if (*(unsigned char *)(_X7 + 41))
      {
        for (int j = *(unsigned __int8 *)(_X7 + 41); j; --j)
        {
          if (v42) {
            uint64_t v53 = v45;
          }
          else {
            uint64_t v53 = 0;
          }
          _X19 += v53;
          __asm { PRFM            #0, [X19,#0x80] }
          _X3 = (_OWORD *)(v15 + ((unint64_t)v48 << 6));
          __asm { PRFM            #0, [X3,#0x80] }
          *(float *)&a12 = v36;
          if ((v37 >> 5))
          {
            if (!v46)
            {
              LODWORD(a12) = 2139095039;
LABEL_42:
              *(void *)&long long v57 = *(void *)(_X7 + 16);
              uint64_t v58 = v15 + ((unint64_t)v48 << 6);
              DWORD2(v57) = *(_DWORD *)(_X7 + 24);
              HIDWORD(v57) = *(_DWORD *)(_X19 + 12);
              *_X3 = v57;
              *(void *)(v58 + 16) = *(void *)_X19;
              LODWORD(v57) = *(_DWORD *)(_X19 + 8);
              *(unsigned char *)(v58 + 48) = *(unsigned char *)(_X7 + 42);
              *(_DWORD *)(v58 + 24) = v57;
              *(_DWORD *)(v58 + 28) = LODWORD(a12);
              *(_DWORD *)(v58 + 44) = *(_DWORD *)(_X7 + 36);
              *(int32x2_t *)(v58 + 56) = vrev64_s32(*(int32x2_t *)(_X7 + 28));
              if (v46)
              {
                a12 = *(double *)(_X19 + 16);
                int v59 = *(_DWORD *)(_X19 + 24);
              }
              else
              {
                a12 = 0.0;
                int v59 = 0;
              }
              *(double *)(v58 + 32) = a12;
              *(_DWORD *)(v58 + 40) = v59;
              uint64_t v48 = (v48 + 1);
              goto LABEL_46;
            }
            LODWORD(a12) = *(_DWORD *)(_X19 + 28);
          }
          if (*(float *)&a12 != 0.0) {
            goto LABEL_42;
          }
LABEL_46:
          int v42 = 1;
        }
      }
      ++v40;
    }
    while (v40 != v39);
    *(_DWORD *)(a2 + 4112) = v48;
    if (v48 == v14) {
      return 1;
    }
    float32x2_t v60 = &a3[26 * v13];
    *((_DWORD *)v60 + 36) = v48 - v14;
    *((unsigned char *)v60 + 148) = (v37 & 0x20) != 0;
    *((unsigned char *)v60 + 149) = (*((unsigned __int8 *)v60 + 149) | v37 & 0x10) != 0;
    float32x4_t v61 = *v16;
    float32x4_t v62 = vmulq_f32(v43, *v16);
    *char v16 = v62;
    ++v13;
    uint64_t v14 = v48;
  }
  while (v13 != 4);
  return physx::Dy::createFinalizeSolverContacts4(a2 + 4128, a3, a4, a5, a6, a7, a8, a9, v62.f32[0], v61.f32[0], *(float *)&a12);
}

uint64_t physx::Dy::createFinalizeSolverContacts4Coulomb1D(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t (***a4)(void), double a5, int32x2_t a6, double a7, double a8, float a9)
{
  *(float *)&a7 = a9;
  return physx::Dy::createFinalizeSolverContacts4Coulomb(a1, a2, a3, a4, 1, a5, a6, *(int32x2_t *)&a7);
}

uint64_t physx::Dy::createFinalizeSolverContacts4Coulomb2D(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t (***a4)(void), double a5, int32x2_t a6, double a7, double a8, float a9)
{
  *(float *)&a7 = a9;
  return physx::Dy::createFinalizeSolverContacts4Coulomb(a1, a2, a3, a4, 2, a5, a6, *(int32x2_t *)&a7);
}

uint64_t physx::Dy::createFinalizeSolverContacts4(uint64_t a1, void *a2, uint64_t a3, float a4, double a5, double a6, float a7, double a8, float a9, float a10, float a11)
{
  float v12 = *(float *)&a6;
  int32x2_t v727 = *(int32x2_t *)&a5;
  unint64_t v13 = a2;
  LODWORD(v15) = 0;
  uint64_t v16 = 0;
  uint64_t v758 = *MEMORY[0x263EF8340];
  v729 = a2 + 85;
  v725 = a2 + 33;
  uint64_t v746 = a1 + 7684;
  *(void *)(a1 + 7684) = 0;
  uint64_t v17 = a1 + 7296;
  uint64_t v18 = a1 + 7424;
  do
  {
    float v19 = &v13[26 * v16];
    LODWORD(a5) = *((_DWORD *)v19 + 1);
    v755.i32[v16] = *(_DWORD *)v19;
    LODWORD(a6) = *((_DWORD *)v19 + 3);
    v754.i32[v16] = *((_DWORD *)v19 + 2);
    v753.i32[v16] = LODWORD(a5);
    v752.i32[v16] = LODWORD(a6);
    *((_DWORD *)v19 + 46) = v15;
    float v20 = (unsigned int *)(v19 + 23);
    if (!*((unsigned char *)v19 + 149))
    {
      int FrictionPatches = physx::Dy::getFrictionPatches(a1, (float *)v13[26 * v16 + 20], LOBYTE(v13[26 * v16 + 21]), (float *)v19 + 14, (float *)v19 + 21, a7, a5, a6, a7, *(float *)&a8, a9, a10, a11);
      unint64_t v13 = a2;
      if (!FrictionPatches) {
        return 1;
      }
    }
    float v22 = &v13[26 * v16];
    *((_DWORD *)v22 + 48) = *(_DWORD *)(a1 + 7684);
    float32x4_t v23 = (unsigned int *)(v22 + 24);
    int8x16_t v24 = (uint64_t *)(v23 - 14);
    if (!physx::Dy::createContactPatches(a1, *((void *)v23 - 7), *(v23 - 12), 0.999)) {
      return 1;
    }
    unsigned int v25 = *v23;
    WORD2(v13[26 * v16 + 24]) = *(_WORD *)(a1 + 7684) - *v23;
    float32x4_t v26 = (float *)(v19 + 7);
    float32x2_t v27 = (float *)v19 + 21;
    if (physx::Dy::correlatePatches(a1, *v24, v26, v27, v25, *v20, 0.999)) {
      return 1;
    }
    physx::Dy::growPatches(a1, *v24, v26, v27, *v20, a7, *(float *)&v13[26 * v16 + 19] + v12);
    LODWORD(v15) = *(_DWORD *)(a1 + 7688);
    unsigned int v28 = *v20;
    if (v15 <= *v20)
    {
      float v30 = a4;
      unint64_t v13 = a2;
    }
    else
    {
      unsigned int v29 = *(_DWORD *)(a1 + 7688);
      float v30 = a4;
      unint64_t v13 = a2;
      do
      {
        unsigned int v31 = v29 - 1;
        if (*(_DWORD *)(a1 + 4 * (v29 - 1) + 7424) == 0xFFFF)
        {
          if (v29 < v15)
          {
            unint64_t v32 = v29;
            do
            {
              uint64_t v33 = a1 + 4 * (v32 - 1);
              *(_DWORD *)(v33 + 7424) = *(_DWORD *)(v18 + 4 * v32);
              *(_DWORD *)(v33 + 7296) = *(_DWORD *)(v17 + 4 * v32++);
              unint64_t v15 = *(unsigned int *)(a1 + 7688);
            }
            while (v32 < v15);
            unsigned int v28 = *v20;
          }
          LODWORD(v15) = v15 - 1;
          *(_DWORD *)(a1 + 7688) = v15;
        }
        unsigned int v29 = v31;
      }
      while (v31 > v28);
    }
    HIDWORD(v13[26 * v16++ + 23]) = v15 - v28;
  }
  while (v16 != 4);
  uint64_t v34 = 0;
  memset(v751, 0, sizeof(v751));
  do
  {
    uint64_t v35 = &v13[26 * v34];
    uint64_t v36 = *((unsigned int *)v35 + 46);
    uint64_t v37 = (*((_DWORD *)v35 + 47) + v36);
    if (v36 >= v37)
    {
      v750[v34 + 4] = 0;
LABEL_31:
      *((void *)v751 + v34) = 0;
      goto LABEL_32;
    }
    int v38 = 0;
    uint64_t v39 = v37 - v36;
    int v40 = (int *)(a1 + 7424 + 4 * v36);
    do
    {
      int v41 = *v40++;
      if (v41 != 0xFFFF) {
        ++v38;
      }
      --v39;
    }
    while (v39);
    v750[v34 + 4] = v38;
    int v42 = 104 * v38 + 15;
    if ((v42 & 0xFFFFFFF0) == 0) {
      goto LABEL_31;
    }
    uint64_t v43 = (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 8))(a3, v42 & 0xFFFFFFF0);
    unint64_t v13 = a2;
    float v30 = a4;
    if (v43 == -1) {
      uint64_t v44 = 0;
    }
    else {
      uint64_t v44 = v43;
    }
    *((void *)v751 + v34) = v44;
    if (!v44) {
      return 0;
    }
LABEL_32:
    ++v34;
  }
  while (v34 != 4);
  uint64_t v45 = 0;
  LODWORD(v46) = 0;
  LOBYTE(v47) = 0;
  v48.i32[3] = 0;
  memset(v757, 0, sizeof(v757));
  memset(v756, 0, sizeof(v756));
  do
  {
    BOOL v47 = v47 || BYTE4(v13[26 * v45 + 18]) != 0;
    unsigned int v49 = HIDWORD(v13[26 * v45 + 23]);
    if (v49)
    {
      int v50 = 0;
      unsigned int v51 = v13[26 * v45 + 23];
      float32x4_t v52 = (int *)v756;
      uint64_t v53 = (unsigned int *)v757;
      uint64_t v54 = HIDWORD(v13[26 * v45 + 23]);
      do
      {
        uint64_t v55 = v51;
        BOOL v56 = (*(unsigned char *)(a1 + 104 * v51 + 2817) & 1) == 0 && *(_WORD *)(a1 + 104 * v51 + 2818) != 0;
        unsigned int v57 = *(_DWORD *)(a1 + 4 * v55 + 7296);
        if (v57)
        {
          unsigned int v58 = *v53;
          if (v57 > *v53) {
            unsigned int v58 = *(_DWORD *)(a1 + 4 * v55 + 7296);
          }
          *uint64_t v53 = v58;
          v50 += v57;
          if (v56)
          {
            int v59 = *(unsigned __int16 *)(a1 + 104 * v55 + 2818);
            int v60 = 2 * v59;
            if (2 * v59 <= *v52) {
              int v60 = *v52;
            }
            *float32x4_t v52 = v60;
            v50 += 2 * v59;
          }
        }
        ++v52;
        ++v53;
        unsigned int v51 = v55 + 1;
        --v54;
      }
      while (v54);
    }
    else
    {
      int v50 = 0;
    }
    if (v49 <= v46) {
      uint64_t v46 = v46;
    }
    else {
      uint64_t v46 = v49;
    }
    v750[v45++] = v50;
  }
  while (v45 != 4);
  int v61 = 0;
  if (v46)
  {
    float32x4_t v62 = v756;
    uint64_t v63 = v46;
    do
    {
      if (*v62++) {
        ++v61;
      }
      --v63;
    }
    while (v63);
    int v65 = 0;
    double v66 = (int *)v756;
    float32x2_t v67 = (int *)v757;
    uint64_t v68 = v46;
    do
    {
      int v69 = *v67++;
      v65 += v69;
      int v70 = *v66++;
      LODWORD(v63) = v70 + v63;
      --v68;
    }
    while (v68);
    v61 *= 144;
  }
  else
  {
    int v65 = 0;
    LODWORD(v63) = 0;
  }
  LOBYTE(v71) = 0;
  for (uint64_t i = 116; i != 948; i += 208)
    BOOL v71 = v71 || *(_DWORD *)((char *)v13 + i) == 1;
  int v73 = v63 + v65;
  if (v71) {
    int v74 = 144;
  }
  else {
    int v74 = 96;
  }
  if (v47) {
    int v75 = v65;
  }
  else {
    int v75 = 0;
  }
  unsigned int v76 = v61 + 208 * v46 + 16 * (v73 + v75) + v74 * v73;
  if (v76)
  {
    if (v76 + 16 > 0x4000) {
      return 1;
    }
    uint64_t v78 = (**(uint64_t (***)(uint64_t))a3)(a3);
    if ((unint64_t)(v78 + 1) < 2) {
      return 0;
    }
    float v30 = a4;
    unint64_t v13 = a2;
  }
  else
  {
    uint64_t v78 = 0;
  }
  for (uint64_t j = 0; j != 4; ++j)
  {
    _X17 = *((void *)v751 + j);
    float32x4_t v81 = &v13[26 * j];
    uint64_t v82 = v81[2];
    v81[20] = _X17;
    *((unsigned char *)v81 + 168) = v750[j + 4];
    if (_X17)
    {
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X17,#0x80]
        PRFM            #0, [X17,#0x100]
      }
      float32x2_t v90 = &v13[26 * j];
      unsigned int v93 = *((_DWORD *)v90 + 47);
      float32x4_t v92 = (unsigned int *)v90 + 47;
      unsigned int v91 = v93;
      if (v93)
      {
        unsigned int v94 = 0;
        do
        {
          unsigned int v95 = v94 + LODWORD(v13[26 * j + 23]);
          if (*(_DWORD *)(a1 + 4 * v95 + 7424) != 0xFFFF)
          {
            uint64_t v96 = a1 + 104 * v95;
            long long v97 = *(_OWORD *)(v96 + 2816);
            long long v98 = *(_OWORD *)(v96 + 2848);
            *(_OWORD *)(_X17 + 16) = *(_OWORD *)(v96 + 2832);
            *(_OWORD *)(_X17 + 32) = v98;
            *(_OWORD *)_X17 = v97;
            float32x4_t v48 = *(float32x4_t *)(v96 + 2864);
            long long v99 = *(_OWORD *)(v96 + 2880);
            long long v100 = *(_OWORD *)(v96 + 2896);
            *(void *)(_X17 + 96) = *(void *)(v96 + 2912);
            *(_OWORD *)(_X17 + 64) = v99;
            *(_OWORD *)(_X17 + 80) = v100;
            *(float32x4_t *)(_X17 + 48) = v48;
            _X17 += 104;
            unsigned int v91 = *v92;
          }
          ++v94;
        }
        while (v94 < v91);
      }
    }
    float32x4_t v101 = &v13[26 * j];
    *((_WORD *)v101 + 99) += v750[j];
    *(void *)(v82 + 32) = v78;
    *(_WORD *)(v82 + 30) = v76 >> 4;
    *(_WORD *)(v82 + 28) = *((_DWORD *)v101 + 36);
    *(void *)(v82 + 40) = v101[22];
  }
  unsigned int v585 = v76;
  BOOL v102 = *((unsigned char *)v13 + 148) || *((unsigned char *)v13 + 356) || *((unsigned char *)v13 + 564) || *((unsigned char *)v13 + 772) != 0;
  LOBYTE(v103) = 0;
  LOBYTE(v104) = 0;
  float32x4_t v749 = v753;
  v48.i32[2] = *((_DWORD *)v13 + 143);
  v48.i32[1] = *((_DWORD *)v13 + 91);
  v48.i32[0] = *((_DWORD *)v13 + 39);
  float32x4_t v105 = v48;
  v105.i32[3] = *((_DWORD *)v13 + 195);
  float32x4_t v600 = v105;
  int32x4_t v106 = vdupq_lane_s32(*(int32x2_t *)&a8, 0);
  float32x4_t v714 = v752;
  __int8 v598 = *((unsigned char *)v13 + 358);
  __int8 v599 = *((unsigned char *)v13 + 150);
  uint64_t v107 = 116;
  __int8 v596 = *((unsigned char *)v13 + 774);
  __int8 v597 = *((unsigned char *)v13 + 566);
  while (2)
  {
    if (v103)
    {
      BOOL v103 = 1;
      if (!v104) {
        goto LABEL_98;
      }
LABEL_100:
      BOOL v104 = 1;
    }
    else
    {
      BOOL v103 = *(_DWORD *)((char *)v13 + v107) == 1;
      if (v104) {
        goto LABEL_100;
      }
LABEL_98:
      BOOL v104 = *(_DWORD *)((char *)v13 + v107) == 4;
    }
    v107 += 208;
    if (v107 != 948) {
      continue;
    }
    break;
  }
  uint64_t v586 = v78;
  if (v103) {
    uint64_t v108 = 144;
  }
  else {
    uint64_t v108 = 96;
  }
  uint64_t v645 = v108;
  _X8 = a1 + 7556;
  __asm { PRFM            #0, [X8] }
  _X8 = v746;
  __asm { PRFM            #0, [X8] }
  unsigned int v113 = *((_DWORD *)v13 + 47);
  unsigned int v114 = *((_DWORD *)v13 + 99);
  unsigned int v115 = *((_DWORD *)v13 + 151);
  if (v115 <= *((_DWORD *)v13 + 203)) {
    unsigned int v115 = *((_DWORD *)v13 + 203);
  }
  if (v114 <= v115) {
    unsigned int v114 = v115;
  }
  if (v113 <= v114) {
    unsigned int v113 = v114;
  }
  unsigned int v595 = v113;
  if (v113)
  {
    uint64_t v602 = 0;
    uint64_t v603 = 0;
    uint64_t v637 = 0;
    unsigned int v636 = 0;
    unsigned int v601 = 0;
    uint64_t v701 = 0;
    uint64_t v700 = 0;
    uint64_t v702 = 0;
    unsigned int v116 = 0;
    unsigned int v699 = 0;
    uint64_t v118 = v13[5];
    uint64_t v117 = v13[6];
    uint64_t v120 = v13[31];
    uint64_t v119 = v13[32];
    v122.i32[0] = *(_DWORD *)(v118 + 64);
    v121.i32[0] = *(_DWORD *)(v118 + 68);
    v121.i32[1] = *(_DWORD *)(v120 + 68);
    uint64_t v124 = v13[57];
    uint64_t v123 = v13[58];
    v121.i32[2] = *(_DWORD *)(v124 + 68);
    uint64_t v125 = v13[83];
    v121.i32[3] = *(_DWORD *)(v125 + 68);
    v127.i32[0] = *(_DWORD *)(v117 + 64);
    v126.i32[0] = *(_DWORD *)(v117 + 68);
    v126.i32[1] = *(_DWORD *)(v119 + 68);
    v126.i32[2] = *(_DWORD *)(v123 + 68);
    uint64_t v128 = v13[84];
    v126.i32[3] = *(_DWORD *)(v128 + 68);
    float32x4_t v594 = vmaxq_f32(v121, v126);
    int32x4_t v129 = *(int32x4_t *)(v118 + 16);
    int32x4_t v130 = *(int32x4_t *)(v124 + 16);
    int32x4_t v131 = vzip1q_s32(*(int32x4_t *)v118, *(int32x4_t *)v124);
    int32x4_t v132 = *(int32x4_t *)(v120 + 16);
    int32x4_t v133 = *(int32x4_t *)(v125 + 16);
    int32x4_t v134 = vzip1q_s32(*(int32x4_t *)v120, *(int32x4_t *)v125);
    float32x4_t v135 = (float32x4_t)vzip1q_s32(v131, v134);
    float32x4_t v136 = (float32x4_t)vzip2q_s32(v131, v134);
    float32x4_t v137 = (float32x4_t)vzip1q_s32(vzip2q_s32(*(int32x4_t *)v118, *(int32x4_t *)v124), vzip2q_s32(*(int32x4_t *)v120, *(int32x4_t *)v125));
    int32x4_t v138 = *(int32x4_t *)(v117 + 16);
    int32x4_t v139 = *(int32x4_t *)(v123 + 16);
    int32x4_t v140 = vzip1q_s32(*(int32x4_t *)v117, *(int32x4_t *)v123);
    int32x4_t v141 = *(int32x4_t *)(v119 + 16);
    int32x4_t v142 = *(int32x4_t *)(v128 + 16);
    float32x4_t v733 = (float32x4_t)v106;
    int32x4_t v143 = vzip1q_s32(*(int32x4_t *)v119, *(int32x4_t *)v128);
    float32x4_t v144 = (float32x4_t)vzip1q_s32(v140, v143);
    float32x4_t v145 = (float32x4_t)vzip2q_s32(v140, v143);
    float32x4_t v146 = (float32x4_t)vzip1q_s32(vzip2q_s32(*(int32x4_t *)v117, *(int32x4_t *)v123), vzip2q_s32(*(int32x4_t *)v119, *(int32x4_t *)v128));
    int32x4_t v147 = vzip1q_s32(v129, v130);
    int32x4_t v148 = vzip2q_s32(v129, v130);
    int32x4_t v149 = vzip1q_s32(v132, v133);
    float32x4_t v745 = (float32x4_t)vzip1q_s32(v147, v149);
    float32x4_t v743 = (float32x4_t)vzip2q_s32(v147, v149);
    float32x4_t v742 = (float32x4_t)vzip1q_s32(v148, vzip2q_s32(v132, v133));
    float32x4_t v150 = (float32x4_t)vzip1q_s32(v138, v139);
    int32x4_t v151 = vzip2q_s32(v138, v139);
    int32x4_t v152 = vzip1q_s32(v141, v142);
    float32x4_t v732 = (float32x4_t)vzip1q_s32((int32x4_t)v150, v152);
    float32x4_t v724 = (float32x4_t)vzip2q_s32((int32x4_t)v150, v152);
    v121.i64[0] = vuzp2q_s32(vuzp2q_s32(*(int32x4_t *)v118, *(int32x4_t *)v120), *(int32x4_t *)v118).u64[0];
    v121.i64[1] = __PAIR64__(HIDWORD(*(_OWORD *)v125), HIDWORD(*(_OWORD *)v124));
    v150.i64[0] = vuzp2q_s32(vuzp2q_s32(*(int32x4_t *)v117, *(int32x4_t *)v119), *(int32x4_t *)v117).u64[0];
    v150.i64[1] = __PAIR64__(HIDWORD(*(_OWORD *)v128), HIDWORD(*(_OWORD *)v123));
    float32x4_t v731 = (float32x4_t)vzip1q_s32(v151, vzip2q_s32(v141, v142));
    float32x4_t v747 = vmulq_f32(v755, v121);
    float32x4_t v713 = vmulq_f32(v754, v150);
    int32x4_t v153 = *(int32x4_t *)(v118 + 32);
    int32x4_t v154 = *(int32x4_t *)(v118 + 44);
    int32x4_t v155 = *(int32x4_t *)(v120 + 32);
    int32x4_t v156 = *(int32x4_t *)(v120 + 44);
    int32x4_t v157 = *(int32x4_t *)(v124 + 32);
    int32x4_t v158 = *(int32x4_t *)(v124 + 44);
    int32x4_t v159 = vzip1q_s32(v153, v157);
    int32x4_t v160 = *(int32x4_t *)(v125 + 32);
    int32x4_t v161 = *(int32x4_t *)(v125 + 44);
    int32x4_t v162 = vzip2q_s32(v153, v157);
    int32x4_t v163 = vzip1q_s32(v155, v160);
    float32x4_t v741 = (float32x4_t)vzip1q_s32(v159, v163);
    float32x4_t v740 = (float32x4_t)vzip2q_s32(v159, v163);
    float32x4_t v739 = (float32x4_t)vzip1q_s32(v162, vzip2q_s32(v155, v160));
    int32x4_t v164 = vzip1q_s32(v154, v158);
    int32x4_t v165 = vzip2q_s32(v154, v158);
    int32x4_t v166 = vzip1q_s32(v156, v161);
    float32x4_t v738 = (float32x4_t)vzip1q_s32(v164, v166);
    float32x4_t v737 = (float32x4_t)vzip2q_s32(v164, v166);
    v164.i32[0] = vdupq_laneq_s32(v154, 3).u32[0];
    v164.i32[1] = v158.i32[3];
    v164.i32[2] = *(_DWORD *)(v118 + 60);
    v164.i32[3] = *(_DWORD *)(v124 + 60);
    v154.i32[0] = vdupq_laneq_s32(v156, 3).u32[0];
    v154.i32[1] = v161.i32[3];
    v154.i32[2] = *(_DWORD *)(v120 + 60);
    float32x4_t v736 = (float32x4_t)vzip1q_s32(v165, vzip2q_s32(v156, v161));
    v154.i32[3] = *(_DWORD *)(v125 + 60);
    float32x4_t v735 = (float32x4_t)vzip1q_s32(v164, v154);
    float32x4_t v734 = (float32x4_t)vzip2q_s32(v164, v154);
    int32x4_t v167 = *(int32x4_t *)(v117 + 32);
    int32x4_t v168 = *(int32x4_t *)(v123 + 32);
    int32x4_t v169 = vzip1q_s32(v167, v168);
    int32x4_t v170 = vzip2q_s32(v167, v168);
    int32x4_t v171 = *(int32x4_t *)(v119 + 32);
    int32x4_t v172 = *(int32x4_t *)(v128 + 32);
    int32x4_t v173 = vzip1q_s32(v171, v172);
    float32x4_t v710 = (float32x4_t)vzip1q_s32(v169, v173);
    float32x4_t v709 = (float32x4_t)vzip2q_s32(v169, v173);
    float32x4_t v708 = (float32x4_t)vzip1q_s32(v170, vzip2q_s32(v171, v172));
    int32x4_t v174 = *(int32x4_t *)(v117 + 44);
    int32x4_t v175 = *(int32x4_t *)(v123 + 44);
    int32x4_t v176 = vzip1q_s32(v174, v175);
    int32x4_t v177 = *(int32x4_t *)(v119 + 44);
    int32x4_t v178 = *(int32x4_t *)(v128 + 44);
    int32x4_t v179 = vzip1q_s32(v177, v178);
    float32x4_t v707 = (float32x4_t)vzip1q_s32(v176, v179);
    float32x4_t v706 = (float32x4_t)vzip2q_s32(v176, v179);
    int32x4_t v180 = vzip2q_s32(v174, v175);
    v174.i32[0] = vdupq_laneq_s32(v174, 3).u32[0];
    v174.i32[1] = v175.i32[3];
    float32x4_t v705 = (float32x4_t)vzip1q_s32(v180, vzip2q_s32(v177, v178));
    v175.i32[0] = vdupq_laneq_s32(v177, 3).u32[0];
    v175.i32[1] = v178.i32[3];
    v174.i32[2] = *(_DWORD *)(v117 + 60);
    v174.i32[3] = *(_DWORD *)(v123 + 60);
    v175.i32[2] = *(_DWORD *)(v119 + 60);
    v175.i32[3] = *(_DWORD *)(v128 + 60);
    int32x4_t v181 = vzip1q_s32(v174, v175);
    float32x4_t v704 = (float32x4_t)v181;
    int32x4_t v182 = vzip2q_s32(v174, v175);
    float32x4_t v703 = (float32x4_t)v182;
    v182.i64[0] = v13[9];
    v175.i64[0] = v13[61];
    int32x4_t v183 = vzip1q_s32(v182, v175);
    v175.i64[0] = v13[35];
    v181.i64[0] = v13[87];
    int32x4_t v184 = vzip1q_s32(v175, v181);
    int32x4_t v185 = vzip1q_s32(v183, v184);
    float32x4_t v723 = (float32x4_t)v185;
    int32x4_t v186 = vzip2q_s32(v183, v184);
    float32x4_t v722 = (float32x4_t)v186;
    v186.i64[0] = *(void *)((char *)v13 + 100);
    v184.i64[0] = *(void *)((char *)v725 + 252);
    int32x4_t v187 = vzip1q_s32(v186, v184);
    v184.i64[0] = *(void *)((char *)v725 + 44);
    v185.i64[0] = *(void *)((char *)v729 + 44);
    int32x4_t v188 = vzip1q_s32(v184, v185);
    float32x4_t v721 = (float32x4_t)vzip1q_s32(v187, v188);
    float32x4_t v720 = (float32x4_t)vzip2q_s32(v187, v188);
    BOOL v712 = v104;
    v187.i32[0] = *((_DWORD *)v13 + 38);
    v187.i32[1] = *((_DWORD *)v13 + 90);
    v187.i32[2] = *((_DWORD *)v13 + 142);
    v187.i32[3] = *((_DWORD *)v13 + 194);
    float32x4_t v644 = (float32x4_t)v187;
    float v643 = v30 * 0.8;
    int32x4_t v189 = *(int32x4_t *)(v13 + 7);
    float32x4_t v693 = (float32x4_t)vdupq_laneq_s32(v189, 3);
    LODWORD(v695) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v693.f32, *(float32x2_t *)v693.f32).u32[0];
    int32x4_t v190 = *(int32x4_t *)v725;
    float32x4_t v690 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)v725, 3);
    LODWORD(v692) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v690.f32, *(float32x2_t *)v690.f32).u32[0];
    int32x4_t v191 = *((int32x4_t *)v725 + 13);
    float32x4_t v687 = (float32x4_t)vdupq_laneq_s32(v191, 3);
    LODWORD(v689) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v687.f32, *(float32x2_t *)v687.f32).u32[0];
    int32x4_t v192 = *(int32x4_t *)v729;
    float32x4_t v685 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)v729, 3);
    LODWORD(v684) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v685.f32, *(float32x2_t *)v685.f32).u32[0];
    int32x4_t v193 = *(int32x4_t *)((char *)v13 + 84);
    float32x4_t v681 = (float32x4_t)vdupq_laneq_s32(v193, 3);
    LODWORD(v683) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v681.f32, *(float32x2_t *)v681.f32).u32[0];
    int32x4_t v194 = *(int32x4_t *)((char *)v725 + 28);
    float32x4_t v678 = (float32x4_t)vdupq_laneq_s32(v194, 3);
    LODWORD(v680) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v678.f32, *(float32x2_t *)v678.f32).u32[0];
    v122.i32[1] = *(_DWORD *)(v120 + 64);
    v122.i32[2] = *(_DWORD *)(v124 + 64);
    v122.i32[3] = *(_DWORD *)(v125 + 64);
    float32x4_t v642 = v122;
    v127.i32[1] = *(_DWORD *)(v119 + 64);
    v127.i32[2] = *(_DWORD *)(v123 + 64);
    v127.i32[3] = *(_DWORD *)(v128 + 64);
    float32x4_t v711 = v127;
    float32x4_t v593 = (float32x4_t)vdupq_lane_s32(v727, 0);
    int32x4_t v195 = *(int32x4_t *)((char *)v725 + 236);
    float32x4_t v675 = (float32x4_t)vdupq_laneq_s32(v195, 3);
    LODWORD(v677) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v675.f32, *(float32x2_t *)v675.f32).u32[0];
    v178.i32[0] = *((_DWORD *)v13 + 20);
    v178.i32[1] = *((_DWORD *)v13 + 72);
    v178.i32[2] = *((_DWORD *)v13 + 124);
    v178.i32[3] = *((_DWORD *)v13 + 176);
    float32x4_t v719 = (float32x4_t)v178;
    int32x4_t v196 = *(int32x4_t *)((char *)v729 + 28);
    float32x4_t v672 = (float32x4_t)vdupq_laneq_s32(v196, 3);
    LODWORD(v674) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v672.f32, *(float32x2_t *)v672.f32).u32[0];
    v178.i32[0] = *((_DWORD *)v13 + 27);
    v178.i32[1] = *((_DWORD *)v13 + 79);
    v178.i32[2] = *((_DWORD *)v13 + 131);
    v178.i32[3] = *((_DWORD *)v13 + 183);
    float32x4_t v718 = (float32x4_t)v178;
    int8x16_t v197 = (int8x16_t)v189;
    v197.i32[3] = 0;
    int8x16_t v198 = *(int8x16_t *)v725;
    v198.i32[3] = 0;
    int8x16_t v199 = (int8x16_t)v191;
    v199.i32[3] = 0;
    int8x16_t v200 = *(int8x16_t *)v729;
    v200.i32[3] = 0;
    int8x16_t v201 = (int8x16_t)v193;
    v201.i32[3] = 0;
    int8x16_t v202 = (int8x16_t)v194;
    v202.i32[3] = 0;
    int8x16_t v203 = (int8x16_t)v195;
    v203.i32[3] = 0;
    int8x16_t v204 = (int8x16_t)v196;
    v204.i32[3] = 0;
    if (v103) {
      char v205 = 7;
    }
    else {
      char v205 = 8;
    }
    char v592 = v205;
    uint64_t v591 = a1 + 7424;
    uint64_t v590 = a1 + 7556;
    int v206 = (float32x4_t *)v78;
    float32x4_t v730 = v135;
    float32x4_t v717 = v144;
    float32x4_t v728 = v136;
    float32x4_t v716 = v145;
    float32x4_t v588 = vsubq_f32(v136, v145);
    float32x4_t v589 = vsubq_f32(v135, v144);
    float32x4_t v726 = v137;
    float32x4_t v715 = v146;
    float32x4_t v587 = vsubq_f32(v137, v146);
    float32x4_t v670 = (float32x4_t)v198;
    float32x4_t v671 = (float32x4_t)v197;
    float32x2_t v694 = *(float32x2_t *)v189.i8;
    float32x2_t v662 = (float32x2_t)vextq_s8(v197, v197, 8uLL).u64[0];
    float32x2_t v661 = (float32x2_t)vext_s8(*(int8x8_t *)v189.i8, (int8x8_t)v662, 4uLL);
    float32x2_t v691 = *(float32x2_t *)v190.i8;
    float32x2_t v659 = (float32x2_t)vextq_s8(v198, v198, 8uLL).u64[0];
    float32x2_t v663 = (float32x2_t)vext_s8(*(int8x8_t *)v190.i8, (int8x8_t)v659, 4uLL);
    float32x4_t v668 = (float32x4_t)v200;
    float32x4_t v669 = (float32x4_t)v199;
    float32x2_t v688 = *(float32x2_t *)v191.i8;
    float32x2_t v658 = (float32x2_t)vextq_s8(v199, v199, 8uLL).u64[0];
    float32x2_t v660 = (float32x2_t)vext_s8(*(int8x8_t *)v191.i8, (int8x8_t)v658, 4uLL);
    int8x8_t v207 = (int8x8_t)vextq_s8(v200, v200, 8uLL).u64[0];
    float32x2_t v686 = *(float32x2_t *)v192.i8;
    float32x2_t v652 = (float32x2_t)vext_s8(*(int8x8_t *)v192.i8, v207, 4uLL);
    float32x4_t v666 = (float32x4_t)v202;
    float32x4_t v667 = (float32x4_t)v201;
    float32x2_t v682 = *(float32x2_t *)v193.i8;
    float32x2_t v656 = (float32x2_t)vextq_s8(v201, v201, 8uLL).u64[0];
    float32x2_t v657 = (float32x2_t)v207;
    float32x2_t v651 = (float32x2_t)vext_s8(*(int8x8_t *)v193.i8, (int8x8_t)v656, 4uLL);
    float32x2_t v679 = *(float32x2_t *)v194.i8;
    float32x2_t v655 = (float32x2_t)vextq_s8(v202, v202, 8uLL).u64[0];
    float32x2_t v650 = (float32x2_t)vext_s8(*(int8x8_t *)v194.i8, (int8x8_t)v655, 4uLL);
    float32x4_t v664 = (float32x4_t)v204;
    float32x4_t v665 = (float32x4_t)v203;
    float32x2_t v676 = *(float32x2_t *)v195.i8;
    float32x2_t v654 = (float32x2_t)vextq_s8(v203, v203, 8uLL).u64[0];
    float32x2_t v649 = (float32x2_t)vext_s8(*(int8x8_t *)v195.i8, (int8x8_t)v654, 4uLL);
    float32x2_t v673 = *(float32x2_t *)v196.i8;
    float32x2_t v653 = (float32x2_t)vextq_s8(v204, v204, 8uLL).u64[0];
    float32x2_t v648 = (float32x2_t)vext_s8(*(int8x8_t *)v196.i8, (int8x8_t)v653, 4uLL);
    BOOL v627 = v102;
    unsigned int v208 = 0;
    while (1)
    {
      unsigned int v209 = *((_DWORD *)v13 + 47);
      if (v208 < v209) {
        HIDWORD(v637) = *((_DWORD *)v13 + 46) + v208;
      }
      unsigned int v210 = *((_DWORD *)v13 + 99);
      if (v208 < v210) {
        LODWORD(v637) = *((_DWORD *)v13 + 98) + v208;
      }
      unsigned int v211 = *((_DWORD *)v13 + 151);
      if (v208 < v211) {
        unsigned int v636 = *((_DWORD *)v13 + 150) + v208;
      }
      unsigned int v212 = *((_DWORD *)v13 + 203);
      if (v208 < v212) {
        unsigned int v601 = *((_DWORD *)v13 + 202) + v208;
      }
      if (v208 < v209) {
        unsigned int v213 = *(_DWORD *)(a1 + 4 * HIDWORD(v637) + 7296);
      }
      else {
        unsigned int v213 = 0;
      }
      if (v208 < v210) {
        unsigned int v214 = *(_DWORD *)(a1 + 4 * v637 + 7296);
      }
      else {
        unsigned int v214 = 0;
      }
      if (v208 < v211) {
        unsigned int v215 = *(_DWORD *)(a1 + 4 * v636 + 7296);
      }
      else {
        unsigned int v215 = 0;
      }
      unsigned int v630 = *((_DWORD *)v13 + 203);
      BOOL v647 = v103;
      unsigned int v639 = v116;
      if (v208 < v212)
      {
        int v614 = 0;
        unsigned int v216 = *(_DWORD *)(a1 + 4 * v601 + 7296);
      }
      else
      {
        unsigned int v216 = 0;
        int v614 = 8;
      }
      __int8 v605 = v216;
      unsigned int v696 = *((_DWORD *)v13 + 151);
      BOOL v613 = v208 >= v211;
      unsigned int v634 = *((_DWORD *)v13 + 99);
      BOOL v612 = v208 >= v210;
      unsigned int v638 = v208;
      unsigned int v632 = *((_DWORD *)v13 + 47);
      uint64_t v217 = *(unsigned int *)(v591 + 4 * HIDWORD(v637));
      uint64_t v218 = *(unsigned int *)(v591 + 4 * v637);
      uint64_t v219 = *(unsigned int *)(v591 + 4 * v636);
      BOOL v611 = v208 >= v209;
      uint64_t v220 = *(unsigned int *)(v591 + 4 * v601);
      uint64_t v628 = v13[17];
      uint64_t v629 = *(unsigned __int16 *)(a1 + 44 * v217);
      uint64_t v616 = *(unsigned __int16 *)(a1 + 44 * v218);
      uint64_t v617 = v13[43];
      v625 = (int32x4_t *)(v617 + (v616 << 6));
      uint64_t v621 = v13[69];
      uint64_t v618 = *(unsigned __int16 *)(a1 + 44 * v219);
      v608 = (int32x4_t *)(v628 + (v629 << 6));
      v609 = (int32x4_t *)(v621 + (v618 << 6));
      uint64_t v623 = v13[95];
      uint64_t v619 = *(unsigned __int16 *)(a1 + 44 * v220);
      v607 = (int32x4_t *)(v623 + (v619 << 6));
      v221.i32[0] = v608[3].i32[3];
      v221.i32[1] = v625[3].i32[3];
      v221.i32[2] = v609[3].i32[3];
      v221.i32[3] = v607[3].i32[3];
      float32x4_t v698 = v221;
      float32x4_t v606 = vnegq_f32(v221);
      v206->i8[4] = v599;
      v206->i8[5] = v598;
      v206->i8[6] = v597;
      v206->i8[7] = v596;
      v206->i8[3] = v627;
      if (v215 <= v216) {
        unsigned int v222 = v216;
      }
      else {
        unsigned int v222 = v215;
      }
      if (v214 > v222) {
        unsigned int v222 = v214;
      }
      if (v213 <= v222) {
        unsigned int v223 = v222;
      }
      else {
        unsigned int v223 = v213;
      }
      uint64_t v615 = 16 * v223;
      v610 = v206 + 13;
      __int8 v224 = v213;
      __int8 v604 = v215;
      bzero(&v206[13], 16 * v223);
      unint64_t v13 = a2;
      v206->i8[1] = v223;
      v206->i8[8] = v224;
      v206->i8[9] = v214;
      v206->i8[10] = v604;
      v206->i8[11] = v605;
      v206[4] = v747;
      v206[5] = v713;
      v206[6] = v749;
      v206[7] = v714;
      v206[11].i64[0] = a2[16];
      v206[11].i64[1] = a2[42];
      v206[12].i64[0] = a2[68];
      v206[12].i64[1] = a2[94];
      v206[1] = v606;
      int32x4_t v225 = vzip1q_s32(*v608, *v609);
      int32x4_t v226 = vzip1q_s32(*v625, *v607);
      float32x4_t v227 = (float32x4_t)vzip1q_s32(v225, v226);
      float32x4_t v228 = (float32x4_t)vzip2q_s32(v225, v226);
      float32x4_t v229 = (float32x4_t)vzip1q_s32(vzip2q_s32(*v608, *v609), vzip2q_s32(*v625, *v607));
      v206[8] = v227;
      v206[9] = v228;
      v626 = v206;
      v206[10] = v229;
      uint64_t v230 = 0xFFFFLL;
      uint64_t v231 = 0xFFFFLL;
      if (v217 != 0xFFFF)
      {
        while (!*(unsigned char *)(a1 + 44 * v217 + 5))
        {
          uint64_t v217 = *(unsigned __int16 *)(a1 + 44 * v217 + 2);
          uint64_t v231 = 0xFFFFLL;
          if (v217 == 0xFFFF) {
            goto LABEL_149;
          }
        }
        uint64_t v231 = v217;
      }
LABEL_149:
      float32x4_t v232 = v733;
      float32x4_t v233 = v724;
      if (v218 != 0xFFFF)
      {
        while (!*(unsigned char *)(a1 + 44 * v218 + 5))
        {
          uint64_t v218 = *(unsigned __int16 *)(a1 + 44 * v218 + 2);
          uint64_t v230 = 0xFFFFLL;
          if (v218 == 0xFFFF) {
            goto LABEL_154;
          }
        }
        uint64_t v230 = v218;
      }
LABEL_154:
      uint64_t v234 = 0xFFFFLL;
      uint64_t v235 = 0xFFFFLL;
      if (v219 != 0xFFFF)
      {
        while (!*(unsigned char *)(a1 + 44 * v219 + 5))
        {
          uint64_t v219 = *(unsigned __int16 *)(a1 + 44 * v219 + 2);
          uint64_t v235 = 0xFFFFLL;
          if (v219 == 0xFFFF) {
            goto LABEL_159;
          }
        }
        uint64_t v235 = v219;
      }
LABEL_159:
      unsigned int v236 = v639;
      if (v220 != 0xFFFF)
      {
        while (!*(unsigned char *)(a1 + 44 * v220 + 5))
        {
          uint64_t v220 = *(unsigned __int16 *)(a1 + 44 * v220 + 2);
          uint64_t v234 = 0xFFFFLL;
          if (v220 == 0xFFFF) {
            goto LABEL_164;
          }
        }
        uint64_t v234 = v220;
      }
LABEL_164:
      if (v638 < v632)
      {
        unsigned int v236 = 0xFFFF;
        BOOL v238 = v627;
        if (v231 == 0xFFFF)
        {
          LODWORD(v701) = 0;
          unsigned int v237 = 1;
LABEL_172:
          uint64_t v231 = 0xFFFFLL;
        }
        else
        {
          unsigned int v237 = 1;
          uint64_t v239 = v231;
          while (v237 == *(unsigned __int8 *)(a1 + 44 * v239 + 5))
          {
            unsigned int v237 = 0;
            uint64_t v239 = *(unsigned __int16 *)(a1 + 44 * v239 + 2);
            if (v239 == 0xFFFF)
            {
              unsigned int v236 = v231;
              LODWORD(v701) = 0;
              goto LABEL_172;
            }
          }
          LODWORD(v701) = 0;
          unsigned int v236 = v231;
          uint64_t v231 = v239;
        }
      }
      else
      {
        unsigned int v237 = 0;
        BOOL v238 = v627;
      }
      if (v638 < v634)
      {
        LODWORD(v702) = 0xFFFF;
        if (v230 == 0xFFFF)
        {
          HIDWORD(v700) = 0;
          unsigned int v240 = 1;
LABEL_182:
          uint64_t v230 = 0xFFFFLL;
        }
        else
        {
          unsigned int v240 = 1;
          uint64_t v241 = v230;
          while (v240 == *(unsigned __int8 *)(a1 + 44 * v241 + 5))
          {
            unsigned int v240 = 0;
            uint64_t v241 = *(unsigned __int16 *)(a1 + 44 * v241 + 2);
            if (v241 == 0xFFFF)
            {
              LODWORD(v702) = v230;
              HIDWORD(v700) = 0;
              goto LABEL_182;
            }
          }
          HIDWORD(v700) = 0;
          LODWORD(v702) = v230;
          uint64_t v230 = v241;
        }
      }
      else
      {
        unsigned int v240 = 0;
      }
      if (v638 < v696)
      {
        HIDWORD(v702) = 0xFFFF;
        if (v235 == 0xFFFF)
        {
          LODWORD(v700) = 0;
          unsigned int v242 = 1;
LABEL_192:
          uint64_t v235 = 0xFFFFLL;
        }
        else
        {
          unsigned int v242 = 1;
          uint64_t v243 = v235;
          while (v242 == *(unsigned __int8 *)(a1 + 44 * v243 + 5))
          {
            unsigned int v242 = 0;
            uint64_t v243 = *(unsigned __int16 *)(a1 + 44 * v243 + 2);
            if (v243 == 0xFFFF)
            {
              HIDWORD(v702) = v235;
              LODWORD(v700) = 0;
              goto LABEL_192;
            }
          }
          LODWORD(v700) = 0;
          HIDWORD(v702) = v235;
          uint64_t v235 = v243;
        }
      }
      else
      {
        unsigned int v242 = 0;
      }
      if (v638 < v630)
      {
        HIDWORD(v701) = 0xFFFF;
        if (v234 == 0xFFFF)
        {
          unsigned int v699 = 0;
          unsigned int v244 = 1;
LABEL_202:
          uint64_t v234 = 0xFFFFLL;
        }
        else
        {
          unsigned int v244 = 1;
          uint64_t v245 = v234;
          while (v244 == *(unsigned __int8 *)(a1 + 44 * v245 + 5))
          {
            unsigned int v244 = 0;
            uint64_t v245 = *(unsigned __int16 *)(a1 + 44 * v245 + 2);
            if (v245 == 0xFFFF)
            {
              unsigned int v699 = 0;
              HIDWORD(v701) = v234;
              goto LABEL_202;
            }
          }
          unsigned int v699 = 0;
          HIDWORD(v701) = v234;
          uint64_t v234 = v245;
        }
      }
      else
      {
        unsigned int v244 = 0;
      }
      if (v638 < v632)
      {
        BOOL v247 = v231 != 0xFFFF && v237 < *(unsigned __int8 *)(a1 + 44 * v231 + 5);
        int v246 = !v247;
      }
      else
      {
        int v246 = 1;
      }
      int v248 = v638 >= v634 || v230 == 0xFFFF || v240 >= *(unsigned __int8 *)(a1 + 44 * v230 + 5)
           ? 2
           : 0;
      int v249 = v638 >= v696 || v235 == 0xFFFF || v242 >= *(unsigned __int8 *)(a1 + 44 * v235 + 5)
           ? 4
           : 0;
      int v250 = v638 >= v630 || v234 == 0xFFFF || v244 >= *(unsigned __int8 *)(a1 + 44 * v234 + 5)
           ? 8
           : 0;
      _X2 = &v610[v223];
      float32x4_t v252 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v730, v227), v728, v228), v726, v229), vmlaq_f32(vmlaq_f32(vmulq_f32(v717, v227), v716, v228), v715, v229));
      if ((v611 | (2 * v612) | (4 * v613) | v614) != 0xF) {
        break;
      }
      float32x4_t v253 = &v610[v223];
LABEL_282:
      unsigned int v640 = v236;
      uint64_t v349 = v615;
      if (!v238) {
        uint64_t v349 = 0;
      }
      unsigned int v350 = v638;
      if (v638 < v632)
      {
        uint64_t v353 = v628;
        uint64_t v352 = v629;
        if (*(unsigned char *)(v628 + (v629 << 6) + 48)) {
          unsigned __int32 v351 = 0;
        }
        else {
          unsigned __int32 v351 = *(unsigned __int16 *)(a1 + 2816 + 104 * HIDWORD(v637) + 2);
        }
        BOOL v103 = v647;
      }
      else
      {
        unsigned __int32 v351 = 0;
        BOOL v103 = v647;
        uint64_t v353 = v628;
        uint64_t v352 = v629;
      }
      uint64_t v354 = v617 + (v616 << 6);
      unsigned int v355 = *(unsigned __int8 *)(v354 + 48);
      if (v355) {
        unsigned __int32 v356 = 0;
      }
      else {
        unsigned __int32 v356 = *(unsigned __int16 *)(a1 + 2816 + 104 * v637 + 2);
      }
      if (v638 < v634) {
        unsigned __int32 v357 = v356;
      }
      else {
        unsigned __int32 v357 = 0;
      }
      uint64_t v358 = v621 + (v618 << 6);
      unsigned int v359 = *(unsigned __int8 *)(v358 + 48);
      if (v359) {
        unsigned __int32 v360 = 0;
      }
      else {
        unsigned __int32 v360 = *(unsigned __int16 *)(a1 + 2816 + 104 * v636 + 2);
      }
      if (v638 < v696) {
        unsigned __int32 v361 = v360;
      }
      else {
        unsigned __int32 v361 = 0;
      }
      uint64_t v362 = v623 + (v619 << 6);
      unsigned int v363 = *(unsigned __int8 *)(v362 + 48);
      if (v363) {
        unsigned __int32 v364 = 0;
      }
      else {
        unsigned __int32 v364 = *(unsigned __int16 *)(a1 + 2816 + 104 * v601 + 2);
      }
      if (v638 < v630) {
        unsigned __int32 v365 = v364;
      }
      else {
        unsigned __int32 v365 = 0;
      }
      if (v361 <= v365) {
        unsigned __int32 v366 = v365;
      }
      else {
        unsigned __int32 v366 = v361;
      }
      if (v357 > v366) {
        unsigned __int32 v366 = v357;
      }
      if (v351 <= v366) {
        unsigned __int32 v367 = v366;
      }
      else {
        unsigned __int32 v367 = v351;
      }
      uint64_t v368 = v353 + (v352 << 6);
      float v369 = 1.0;
      if (((*(_WORD *)(a1 + 2816 + 104 * HIDWORD(v637) + 2) == 2) & (*(unsigned __int8 *)(v368 + 48) >> 2)) != 0) {
        float v370 = 0.5;
      }
      else {
        float v370 = 1.0;
      }
      if (((*(_WORD *)(a1 + 2816 + 104 * v637 + 2) == 2) & (v355 >> 2)) != 0) {
        float v371 = 0.5;
      }
      else {
        float v371 = 1.0;
      }
      if (((*(_WORD *)(a1 + 2816 + 104 * v636 + 2) == 2) & (v359 >> 2)) != 0) {
        float v372 = 0.5;
      }
      else {
        float v372 = 1.0;
      }
      if (((*(_WORD *)(a1 + 2816 + 104 * v601 + 2) == 2) & (v363 >> 2)) != 0) {
        float v369 = 0.5;
      }
      v373.f32[0] = *(float *)(v368 + 44) * v370;
      v373.f32[1] = *(float *)(v354 + 44) * v371;
      v373.f32[2] = v372 * *(float *)(v358 + 44);
      v373.f32[3] = v369 * *(float *)(v362 + 44);
      v374.f32[0] = v370 * *(float *)(v368 + 56);
      v374.f32[1] = v371 * *(float *)(v354 + 56);
      v374.i64[1] = __PAIR64__(v369 * *(float *)(v362 + 56), v372 * *(float *)(v358 + 56));
      v626[2] = v373;
      v626[3] = v374;
      v626->i8[2] = 2 * v367;
      v626->i8[12] = 2 * v351;
      v375 = (float32x4_t *)((char *)v253 + v349);
      v626->i8[13] = 2 * v357;
      v626->i8[14] = 2 * v361;
      v626->i8[15] = 2 * v365;
      v626->i8[0] = v592;
      unsigned __int32 v697 = v367;
      if (v367)
      {
        int8x16_t v376 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x3F3504F3u), vabsq_f32(v227));
        float32x4_t v377 = vnegq_f32(v228);
        float32x4_t v378 = vnegq_f32(v229);
        int8x16_t v379 = vandq_s8(v376, (int8x16_t)v228);
        float32x4_t v380 = vnegq_f32(v227);
        float32x4_t v381 = vmlsq_f32(v589, v252, v227);
        float32x4_t v382 = vmlsq_f32(v588, v252, v228);
        float32x4_t v383 = vmlsq_f32(v587, v252, v229);
        int8x16_t v384 = (int8x16_t)vcgtq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v383, v383), v382, v382), v381, v381), (float32x4_t)vdupq_n_s32(0x38D1B717u));
        float32x4_t v385 = (float32x4_t)vorrq_s8(vandq_s8(v384, (int8x16_t)v381), vbicq_s8((int8x16_t)v377, vorrq_s8(v384, v376)));
        float32x4_t v386 = (float32x4_t)vbslq_s8(v384, (int8x16_t)v382, vbslq_s8(v376, (int8x16_t)v378, (int8x16_t)v227));
        float32x4_t v387 = (float32x4_t)vbslq_s8(v384, (int8x16_t)v383, v379);
        float32x4_t v388 = vmlaq_f32(vmlaq_f32(vmulq_f32(v385, v385), v386, v386), v387, v387);
        float32x4_t v389 = vrsqrteq_f32(v388);
        int v390 = 4;
        do
        {
          float32x4_t v389 = vmulq_f32(v389, vrsqrtsq_f32(vmulq_f32(v389, v389), v388));
          --v390;
        }
        while (v390);
        float32x4_t v391 = vmulq_f32(v389, v385);
        float32x4_t v392 = vmulq_f32(v389, v386);
        float32x4_t v393 = vmulq_f32(v389, v387);
        float32x4_t v631 = vmlaq_f32(vmulq_f32(v228, v393), v392, v378);
        float32x4_t v633 = v392;
        float32x4_t v622 = vmlaq_f32(vmulq_f32(v229, v391), v393, v380);
        float32x4_t v624 = v393;
        float32x4_t v620 = vmlaq_f32(vmulq_f32(v227, v392), v391, v377);
        float32x4_t v635 = v391;
        uint64_t v394 = a2[20] + 104 * HIDWORD(v603);
        uint64_t v395 = a2[46] + 104 * v603;
        uint64_t v396 = a2[72] + 104 * HIDWORD(v602);
        uint64_t v397 = a2[98] + 104 * v602;
        v375->i64[0] = 0;
        v375->i64[1] = 0;
        v375[1].i64[0] = v394;
        v375[1].i64[1] = v395;
        v375[2].i64[0] = v396;
        v375[2].i64[1] = v397;
        v375[3] = v391;
        v375[4] = v631;
        v375[5] = v392;
        v375[6] = v622;
        v375[7] = v393;
        v375[8] = v620;
        size_t v398 = v626->u8[2];
        _X26 = &v375[v398 + 9];
        bzero(&v375[9], v398 * 16);
        float32x4_t v402 = v620;
        float32x4_t v403 = v622;
        float32x4_t v405 = v631;
        float32x4_t v404 = v633;
        float32x4_t v406 = v624;
        float32x4_t v407 = v635;
        unint64_t v13 = a2;
        unsigned __int32 v408 = 0;
        unsigned __int32 v409 = 0;
        unsigned __int32 v410 = 0;
        unsigned __int32 v411 = 0;
        unsigned __int32 v412 = 0;
        __asm { FMOV            V0.4S, #1.0 }
        float v414 = a4;
        float32x4_t v415 = v642;
        while (1)
        {
          __asm
          {
            PRFM            #0, [X26,#0x180]
            PRFM            #0, [X26,#0x200]
            PRFM            #0, [X26,#0x280]
          }
          if (v408 < v351) {
            unsigned __int32 v412 = v408;
          }
          if (v408 < v357) {
            unsigned __int32 v411 = v408;
          }
          if (v408 < v361) {
            unsigned __int32 v410 = v408;
          }
          if (v408 < v365) {
            unsigned __int32 v409 = v408;
          }
          uint64_t v419 = a1 + 2816 + 104 * HIDWORD(v637) + 12 * v412;
          float32x2_t v420 = *(float32x2_t *)(v419 + 40);
          *(float32x2_t *)v421.f32 = v420;
          v421.i32[2] = *(_DWORD *)(v419 + 48);
          uint64_t v422 = a1 + 2816 + 104 * v637 + 12 * v411;
          float32x2_t v423 = *(float32x2_t *)(v422 + 40);
          *(float32x2_t *)v424.f32 = v423;
          v424.i32[2] = *(_DWORD *)(v422 + 48);
          uint64_t v425 = a1 + 2816 + 104 * v636 + 12 * v410;
          float32x2_t v426 = *(float32x2_t *)(v425 + 40);
          *(float32x2_t *)v427.f32 = v426;
          v427.i32[2] = *(_DWORD *)(v425 + 48);
          uint64_t v428 = a1 + 2816 + 104 * v601 + 12 * v409;
          float32x2_t v429 = *(float32x2_t *)(v428 + 40);
          *(float32x2_t *)v430.f32 = v429;
          v430.i32[2] = *(_DWORD *)(v428 + 48);
          float32x2_t v431 = *(float32x2_t *)(v419 + 64);
          *(float32x2_t *)v432.f32 = v431;
          v432.i32[2] = *(_DWORD *)(v419 + 72);
          float32x2_t v433 = *(float32x2_t *)(v422 + 64);
          *(float32x2_t *)v434.f32 = v433;
          v434.i32[2] = *(_DWORD *)(v422 + 72);
          float32x2_t v435 = *(float32x2_t *)(v425 + 64);
          *(float32x2_t *)v436.f32 = v435;
          v436.i32[2] = *(_DWORD *)(v425 + 72);
          float32x2_t v437 = *(float32x2_t *)(v428 + 64);
          *(float32x2_t *)v438.f32 = v437;
          v438.i32[2] = *(_DWORD *)(v428 + 72);
          uint64_t v439 = *(unsigned __int16 *)(v590 + 4 * HIDWORD(v637) + 2 * v412);
          uint64_t v440 = *(unsigned __int16 *)(v590 + 4 * v637 + 2 * v411);
          uint64_t v441 = *(unsigned __int16 *)(v590 + 4 * v636 + 2 * v410);
          uint64_t v442 = *(unsigned __int16 *)(v590 + 4 * v601 + 2 * v409);
          v443 = (int32x4_t *)(v628 + (v629 << 6) + 32);
          if (v439 != 0xFFFF) {
            v443 = (int32x4_t *)(a2[17] + (v439 << 6) + 32);
          }
          int32x4_t v444 = *v443;
          v445 = (int32x4_t *)(v628 + (v629 << 6) + 32);
          if (v440 != 0xFFFF) {
            v445 = (int32x4_t *)(a2[43] + (v440 << 6) + 32);
          }
          int32x4_t v446 = *v445;
          v447 = (int32x4_t *)(v628 + (v629 << 6) + 32);
          if (v441 != 0xFFFF) {
            v447 = (int32x4_t *)(a2[69] + (v441 << 6) + 32);
          }
          int32x4_t v448 = *v447;
          v449 = (int32x4_t *)(v628 + (v629 << 6) + 32);
          if (v442 != 0xFFFF) {
            v449 = (int32x4_t *)(a2[95] + (v442 << 6) + 32);
          }
          v400.i32[0] = v351;
          v401.i32[0] = v408;
          int8x16_t v450 = (int8x16_t)_Q0;
          v450.i32[0] = 0;
          int8x16_t v451 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_u32((uint32x4_t)v400, (uint32x4_t)v401), 0), (int8x16_t)_Q0, v450);
          int8x16_t v452 = v451;
          v452.i32[1] = 0;
          v450.i32[0] = v357;
          float32x4_t v453 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_u32((uint32x4_t)v450, (uint32x4_t)v401), 0);
          int8x16_t v454 = vbslq_s8((int8x16_t)v453, v451, v452);
          int8x16_t v455 = v454;
          v455.i32[2] = 0;
          v453.i32[0] = v361;
          int8x16_t v456 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_u32((uint32x4_t)v453, (uint32x4_t)v401), 0), v454, v455);
          v455.i32[0] = v365;
          v455.i64[0] = vcgtq_u32((uint32x4_t)v455, (uint32x4_t)v401).u64[0];
          v421.i32[3] = 0;
          float32x2_t v457 = (float32x2_t)vextq_s8((int8x16_t)v421, (int8x16_t)v421, 8uLL).u64[0];
          *(float32x2_t *)v453.f32 = vmls_f32(vmul_f32(v662, v420), v694, v457);
          int8x8_t v458 = (int8x8_t)vmls_f32(vmul_f32(v694, (float32x2_t)vext_s8((int8x8_t)v420, (int8x8_t)v457, 4uLL)), v661, v420);
          *(int8x8_t *)v453.f32 = vext_s8(v458, *(int8x8_t *)v453.f32, 4uLL);
          v453.i64[1] = v458.u32[0];
          float32x4_t v459 = vmulq_n_f32(v421, v695);
          v459.i32[3] = 0;
          float32x4_t v460 = vmlaq_f32(v459, v693, v453);
          v460.i64[1] = vextq_s8((int8x16_t)v460, (int8x16_t)v460, 8uLL).u32[0];
          float32x4_t v461 = (float32x4_t)v456;
          v461.i32[3] = 0;
          v424.i32[3] = 0;
          _Q0 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v455.i8, 0), v456, (int8x16_t)v461);
          v455.i64[0] = vextq_s8((int8x16_t)v424, (int8x16_t)v424, 8uLL).u64[0];
          *(float32x2_t *)v461.f32 = vmls_f32(vmul_f32(v659, v423), v691, *(float32x2_t *)v455.i8);
          *(float32x2_t *)v455.i8 = vmls_f32(vmul_f32(v691, (float32x2_t)vext_s8((int8x8_t)v423, *(int8x8_t *)v455.i8, 4uLL)), v663, v423);
          v427.i32[3] = 0;
          float32x4_t v462 = vmulq_f32(v671, v421);
          v462.i64[0] = vpaddq_f32(v462, v462).u64[0];
          LODWORD(v463) = vpadd_f32(*(float32x2_t *)v462.f32, *(float32x2_t *)v462.f32).u32[0];
          *(int8x8_t *)v461.f32 = vext_s8(*(int8x8_t *)v455.i8, *(int8x8_t *)v461.f32, 4uLL);
          v461.i64[1] = v455.u32[0];
          float32x4_t v464 = vmulq_n_f32(v424, v692);
          v464.i32[3] = 0;
          float32x4_t v465 = vmlaq_f32(v464, v690, v461);
          float32x4_t v466 = vmlaq_n_f32(v460, v671, v463);
          v465.i64[1] = vextq_s8((int8x16_t)v465, (int8x16_t)v465, 8uLL).u32[0];
          float32x4_t v467 = vmulq_f32(v670, v424);
          v467.i64[0] = vpaddq_f32(v467, v467).u64[0];
          float32x4_t v468 = vmlaq_n_f32(v465, v670, vpadd_f32(*(float32x2_t *)v467.f32, *(float32x2_t *)v467.f32).f32[0]);
          v467.i64[0] = vextq_s8((int8x16_t)v427, (int8x16_t)v427, 8uLL).u64[0];
          int8x8_t v469 = (int8x8_t)vmls_f32(vmul_f32(v658, v426), v688, *(float32x2_t *)v467.f32);
          *(float32x2_t *)v467.f32 = vmls_f32(vmul_f32(v688, (float32x2_t)vext_s8((int8x8_t)v426, *(int8x8_t *)v467.f32, 4uLL)), v660, v426);
          v430.i32[3] = 0;
          *(int8x8_t *)v470.f32 = vext_s8(*(int8x8_t *)v467.f32, v469, 4uLL);
          v470.i64[1] = v467.u32[0];
          float32x4_t v471 = vmulq_n_f32(v427, v689);
          v471.i32[3] = 0;
          float32x4_t v472 = vmlaq_f32(v471, v687, v470);
          v472.i64[1] = vextq_s8((int8x16_t)v472, (int8x16_t)v472, 8uLL).u32[0];
          float32x4_t v473 = vmulq_f32(v669, v427);
          v473.i64[0] = vpaddq_f32(v473, v473).u64[0];
          float32x4_t v474 = vmlaq_n_f32(v472, v669, vpadd_f32(*(float32x2_t *)v473.f32, *(float32x2_t *)v473.f32).f32[0]);
          v473.i64[0] = vextq_s8((int8x16_t)v430, (int8x16_t)v430, 8uLL).u64[0];
          *(float32x2_t *)v470.f32 = vmls_f32(vmul_f32(v657, v429), v686, *(float32x2_t *)v473.f32);
          *(float32x2_t *)v473.f32 = vmls_f32(vmul_f32(v686, (float32x2_t)vext_s8((int8x8_t)v429, *(int8x8_t *)v473.f32, 4uLL)), v652, v429);
          float32x4_t v407 = vmulq_f32(v407, _Q0);
          float32x4_t v404 = vmulq_f32(v404, _Q0);
          float32x4_t v406 = vmulq_f32(v406, _Q0);
          int32x4_t v475 = (int32x4_t)vaddq_f32(v466, v466);
          int32x4_t v476 = (int32x4_t)vaddq_f32(v468, v468);
          int32x4_t v477 = (int32x4_t)vaddq_f32(v474, v474);
          *(int8x8_t *)v470.f32 = vext_s8(*(int8x8_t *)v473.f32, *(int8x8_t *)v470.f32, 4uLL);
          v470.i64[1] = v473.u32[0];
          float32x4_t v478 = vmulq_n_f32(v430, v684);
          v478.i32[3] = 0;
          float32x4_t v479 = vmlaq_f32(v478, v685, v470);
          v479.i64[1] = vextq_s8((int8x16_t)v479, (int8x16_t)v479, 8uLL).u32[0];
          float32x4_t v480 = vmulq_f32(v668, v430);
          v480.i64[0] = vpaddq_f32(v480, v480).u64[0];
          float32x4_t v481 = vmlaq_n_f32(v479, v668, vpadd_f32(*(float32x2_t *)v480.f32, *(float32x2_t *)v480.f32).f32[0]);
          int32x4_t v482 = (int32x4_t)vaddq_f32(v481, v481);
          int32x4_t v483 = vzip1q_s32(v475, v477);
          int32x4_t v484 = vzip2q_s32(v475, v477);
          int32x4_t v485 = vzip1q_s32(v476, v482);
          int32x4_t v486 = vzip2q_s32(v476, v482);
          float32x4_t v487 = (float32x4_t)vzip1q_s32(v483, v485);
          float32x4_t v488 = (float32x4_t)vzip2q_s32(v483, v485);
          v432.i32[3] = 0;
          v434.i32[3] = 0;
          v436.i32[3] = 0;
          v438.i32[3] = 0;
          v483.i64[0] = vextq_s8((int8x16_t)v432, (int8x16_t)v432, 8uLL).u64[0];
          *(float32x2_t *)v476.i8 = vmls_f32(vmul_f32(v656, v431), v682, *(float32x2_t *)v483.i8);
          *(float32x2_t *)v483.i8 = vmls_f32(vmul_f32(v682, (float32x2_t)vext_s8((int8x8_t)v431, *(int8x8_t *)v483.i8, 4uLL)), v651, v431);
          float32x4_t v489 = vmulq_n_f32(v432, v683);
          v489.i32[3] = 0;
          *(int8x8_t *)v490.f32 = vext_s8(*(int8x8_t *)v483.i8, *(int8x8_t *)v476.i8, 4uLL);
          v490.i64[1] = v483.u32[0];
          float32x4_t v491 = vmlaq_f32(v489, v681, v490);
          float32x4_t v492 = (float32x4_t)vzip1q_s32(v484, v486);
          v491.i64[1] = vextq_s8((int8x16_t)v491, (int8x16_t)v491, 8uLL).u32[0];
          float32x4_t v493 = vmulq_f32(v667, v432);
          v493.i64[0] = vpaddq_f32(v493, v493).u64[0];
          float32x4_t v494 = vmlaq_n_f32(v491, v667, vpadd_f32(*(float32x2_t *)v493.f32, *(float32x2_t *)v493.f32).f32[0]);
          int32x4_t v495 = (int32x4_t)vaddq_f32(v494, v494);
          float32x4_t v496 = vmulq_n_f32(v434, v680);
          v496.i32[3] = 0;
          v484.i64[0] = vextq_s8((int8x16_t)v434, (int8x16_t)v434, 8uLL).u64[0];
          *(float32x2_t *)v486.i8 = vmls_f32(vmul_f32(v679, (float32x2_t)vext_s8((int8x8_t)v433, *(int8x8_t *)v484.i8, 4uLL)), v650, v433);
          *(int8x8_t *)v497.f32 = vext_s8(*(int8x8_t *)v486.i8, (int8x8_t)vmls_f32(vmul_f32(v655, v433), v679, *(float32x2_t *)v484.i8), 4uLL);
          v497.i64[1] = v486.u32[0];
          float32x4_t v498 = vmlaq_f32(v496, v678, v497);
          v498.i64[1] = vextq_s8((int8x16_t)v498, (int8x16_t)v498, 8uLL).u32[0];
          float32x4_t v499 = vmulq_f32(v666, v434);
          v499.i64[0] = vpaddq_f32(v499, v499).u64[0];
          float32x4_t v500 = vmlaq_n_f32(v498, v666, vpadd_f32(*(float32x2_t *)v499.f32, *(float32x2_t *)v499.f32).f32[0]);
          int32x4_t v501 = (int32x4_t)vaddq_f32(v500, v500);
          float32x4_t v502 = vmulq_n_f32(v436, v677);
          v502.i32[3] = 0;
          v500.i64[0] = vextq_s8((int8x16_t)v436, (int8x16_t)v436, 8uLL).u64[0];
          *(float32x2_t *)v484.i8 = vmls_f32(vmul_f32(v676, (float32x2_t)vext_s8((int8x8_t)v435, *(int8x8_t *)v500.f32, 4uLL)), v649, v435);
          *(int8x8_t *)v503.f32 = vext_s8(*(int8x8_t *)v484.i8, (int8x8_t)vmls_f32(vmul_f32(v654, v435), v676, *(float32x2_t *)v500.f32), 4uLL);
          v503.i64[1] = v484.u32[0];
          float32x4_t v504 = vmlaq_f32(v502, v675, v503);
          v504.i64[1] = vextq_s8((int8x16_t)v504, (int8x16_t)v504, 8uLL).u32[0];
          float32x4_t v505 = vmulq_f32(v665, v436);
          v505.i64[0] = vpaddq_f32(v505, v505).u64[0];
          float32x4_t v506 = vmlaq_n_f32(v504, v665, vpadd_f32(*(float32x2_t *)v505.f32, *(float32x2_t *)v505.f32).f32[0]);
          float32x4_t v507 = vmulq_n_f32(v438, v674);
          v507.i32[3] = 0;
          int32x4_t v508 = (int32x4_t)vaddq_f32(v506, v506);
          v506.i64[0] = vextq_s8((int8x16_t)v438, (int8x16_t)v438, 8uLL).u64[0];
          *(float32x2_t *)v500.f32 = vmls_f32(vmul_f32(v673, (float32x2_t)vext_s8((int8x8_t)v437, *(int8x8_t *)v506.f32, 4uLL)), v648, v437);
          *(int8x8_t *)v509.f32 = vext_s8(*(int8x8_t *)v500.f32, (int8x8_t)vmls_f32(vmul_f32(v653, v437), v673, *(float32x2_t *)v506.f32), 4uLL);
          v509.i64[1] = v500.u32[0];
          float32x4_t v510 = vmlaq_f32(v507, v672, v509);
          v510.i64[1] = vextq_s8((int8x16_t)v510, (int8x16_t)v510, 8uLL).u32[0];
          float32x4_t v511 = vmulq_f32(v664, v438);
          v511.i64[0] = vpaddq_f32(v511, v511).u64[0];
          float32x4_t v512 = vmlaq_n_f32(v510, v664, vpadd_f32(*(float32x2_t *)v511.f32, *(float32x2_t *)v511.f32).f32[0]);
          int32x4_t v513 = (int32x4_t)vaddq_f32(v512, v512);
          int32x4_t v514 = vzip1q_s32(v495, v508);
          int32x4_t v515 = vzip1q_s32(v501, v513);
          int32x4_t v516 = vzip2q_s32(v501, v513);
          float32x4_t v517 = (float32x4_t)vzip1q_s32(v514, v515);
          float32x4_t v518 = (float32x4_t)vzip2q_s32(v514, v515);
          float32x4_t v519 = (float32x4_t)vzip1q_s32(vzip2q_s32(v495, v508), v516);
          float32x4_t v520 = vmlsq_f32(vmulq_f32(v406, v488), v404, v492);
          float32x4_t v521 = vmlsq_f32(vmulq_f32(v407, v492), v406, v487);
          float32x4_t v522 = vmlsq_f32(vmulq_f32(v404, v487), v407, v488);
          float32x4_t v523 = (float32x4_t)vbicq_s8((int8x16_t)v520, (int8x16_t)vcgtq_f32(v733, vabsq_f32(v520)));
          float32x4_t v524 = (float32x4_t)vbicq_s8((int8x16_t)v521, (int8x16_t)vcgtq_f32(v733, vabsq_f32(v521)));
          float32x4_t v525 = (float32x4_t)vbicq_s8((int8x16_t)v522, (int8x16_t)vcgtq_f32(v733, vabsq_f32(v522)));
          float32x4_t v526 = vmlaq_f32(vmlaq_f32(vmulq_f32(v741, v523), v524, v740), v525, v739);
          float32x4_t v527 = vmlaq_f32(vmlaq_f32(vmulq_f32(v738, v523), v524, v737), v525, v736);
          float32x4_t v528 = vmlaq_f32(vmlaq_f32(vmulq_f32(v735, v523), v524, v734), v525, v415);
          float32x4_t v529 = vmlaq_f32(v747, v749, vmlaq_f32(vmlaq_f32(vmulq_f32(v526, v526), v527, v527), v528, v528));
          float32x4_t v530 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v730, v407), v728, v404), v726, v406), v745, v523), v743, v524), v742, v525);
          int32x4_t v531 = *v449;
          if (v103)
          {
            float32x4_t v532 = vmlsq_f32(vmulq_f32(v406, v518), v404, v519);
            float32x4_t v533 = vmlsq_f32(vmulq_f32(v407, v519), v406, v517);
            float32x4_t v534 = vmlsq_f32(vmulq_f32(v404, v517), v407, v518);
            float32x4_t v535 = (float32x4_t)vbicq_s8((int8x16_t)v532, (int8x16_t)vcgtq_f32(v733, vabsq_f32(v532)));
            float32x4_t v536 = (float32x4_t)vbicq_s8((int8x16_t)v533, (int8x16_t)vcgtq_f32(v733, vabsq_f32(v533)));
            float32x4_t v537 = (float32x4_t)vbicq_s8((int8x16_t)v534, (int8x16_t)vcgtq_f32(v733, vabsq_f32(v534)));
            float32x4_t v538 = vmlaq_f32(vmlaq_f32(vmulq_f32(v710, v535), v536, v709), v537, v708);
            float32x4_t v539 = vmlaq_f32(vmlaq_f32(vmulq_f32(v707, v535), v536, v706), v537, v705);
            float32x4_t v540 = vmlaq_f32(vmlaq_f32(vmulq_f32(v704, v535), v536, v703), v537, v711);
            float32x4_t v415 = v642;
            float32x4_t v529 = vaddq_f32(v529, vmlaq_f32(v713, v714, vmlaq_f32(vmlaq_f32(vmulq_f32(v538, v538), v539, v539), v540, v540)));
            float v414 = a4;
            _X26[6] = v538;
            _X26[7] = v539;
            _X26[8] = v540;
          }
          else
          {
            if (!v712) {
              goto LABEL_352;
            }
            float32x4_t v535 = vmlsq_f32(vmulq_f32(v406, v518), v404, v519);
            float32x4_t v536 = vmlsq_f32(vmulq_f32(v407, v519), v406, v517);
            float32x4_t v537 = vmlsq_f32(vmulq_f32(v404, v517), v407, v518);
          }
          float32x4_t v530 = vsubq_f32(v530, vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v717, v407), v716, v404), v715, v406), v732, v535), v724, v536), v731, v537));
LABEL_352:
          v541 = (float32x4_t *)((char *)_X26 + v645);
          v375 = (float32x4_t *)((char *)_X26 + v645 + v645);
          float32x4_t v405 = vmulq_f32(v405, _Q0);
          float32x4_t v403 = vmulq_f32(v403, _Q0);
          float32x4_t v402 = vmulq_f32(v402, _Q0);
          float32x4_t v542 = vsubq_f32(vaddq_f32(v723, v487), vaddq_f32(v721, v517));
          float32x4_t v543 = vsubq_f32(vaddq_f32(v722, v488), vaddq_f32(v720, v518));
          float32x4_t v544 = vsubq_f32(vaddq_f32(v719, v492), vaddq_f32(v718, v519));
          int32x4_t v545 = vzip1q_s32(v444, v448);
          int32x4_t v546 = vzip2q_s32(v444, v448);
          int32x4_t v547 = vzip1q_s32(v446, v531);
          int32x4_t v548 = vzip2q_s32(v446, v531);
          float32x4_t v549 = (float32x4_t)vzip1q_s32(v545, v547);
          float32x4_t v550 = (float32x4_t)vzip2q_s32(v545, v547);
          float32x4_t v551 = (float32x4_t)vzip1q_s32(v546, v548);
          float32x4_t v552 = vnegq_f32(v492);
          float32x4_t v553 = vnegq_f32(v487);
          float32x4_t v554 = vnegq_f32(v488);
          int v555 = 4;
          float32x4_t v556 = vrecpeq_f32(v529);
          do
          {
            float32x4_t v556 = vmulq_f32(v556, vrecpsq_f32(v556, v529));
            --v555;
          }
          while (v555);
          int8x16_t v557 = (int8x16_t)vcgtzq_f32(v529);
          float32x4_t v558 = (float32x4_t)vdupq_n_s32(0x3F4CCCCDu);
          float32x4_t v401 = (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v556, v558), v557);
          float32x4_t v559 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v407, v549), v550, v404), v551, v406), v530);
          *_X26 = v526;
          _X26[1] = v527;
          float32x4_t v560 = vmulq_f32(_Q0, v401);
          _X26[2] = v528;
          _X26[3] = vmulq_f32(vsubq_f32(vmulq_n_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v407, v542), v543, v404), v544, v406), v414), v559), v560);
          _X26[4] = v560;
          _X26[5] = vmulq_f32(v560, vnegq_f32(v559));
          float32x4_t v561 = vmlaq_f32(vmulq_f32(v402, v488), v403, v552);
          float32x4_t v562 = vmlaq_f32(vmulq_f32(v405, v492), v402, v553);
          float32x4_t v563 = vmlaq_f32(vmulq_f32(v403, v487), v405, v554);
          float32x4_t v400 = v733;
          float32x4_t v564 = (float32x4_t)vbicq_s8((int8x16_t)v561, (int8x16_t)vcgtq_f32(v733, vabsq_f32(v561)));
          float32x4_t v565 = (float32x4_t)vbicq_s8((int8x16_t)v562, (int8x16_t)vcgtq_f32(v733, vabsq_f32(v562)));
          float32x4_t v566 = (float32x4_t)vbicq_s8((int8x16_t)v563, (int8x16_t)vcgtq_f32(v733, vabsq_f32(v563)));
          float32x4_t v567 = vmlaq_f32(vmlaq_f32(vmulq_f32(v741, v564), v565, v740), v566, v739);
          float32x4_t v568 = vmlaq_f32(vmlaq_f32(vmulq_f32(v738, v564), v565, v737), v566, v736);
          float32x4_t v569 = vmlaq_f32(vmlaq_f32(vmulq_f32(v735, v564), v565, v734), v566, v415);
          float32x4_t v570 = vmlaq_f32(v747, v749, vmlaq_f32(vmlaq_f32(vmulq_f32(v567, v567), v568, v568), v569, v569));
          float32x4_t v571 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v730, v405), v728, v403), v726, v402), v745, v564), v743, v565), v742, v566);
          if (v103)
          {
            float32x4_t v572 = vmlsq_f32(vmulq_f32(v402, v518), v403, v519);
            float32x4_t v573 = vmlsq_f32(vmulq_f32(v405, v519), v402, v517);
            float32x4_t v574 = vmlsq_f32(vmulq_f32(v403, v517), v405, v518);
            float32x4_t v575 = (float32x4_t)vbicq_s8((int8x16_t)v572, (int8x16_t)vcgtq_f32(v733, vabsq_f32(v572)));
            float32x4_t v576 = (float32x4_t)vbicq_s8((int8x16_t)v573, (int8x16_t)vcgtq_f32(v733, vabsq_f32(v573)));
            float32x4_t v577 = (float32x4_t)vbicq_s8((int8x16_t)v574, (int8x16_t)vcgtq_f32(v733, vabsq_f32(v574)));
            float32x4_t v578 = vmlaq_f32(vmlaq_f32(vmulq_f32(v710, v575), v576, v709), v577, v708);
            float32x4_t v579 = vmlaq_f32(vmlaq_f32(vmulq_f32(v707, v575), v576, v706), v577, v705);
            float32x4_t v580 = vmlaq_f32(vmlaq_f32(vmulq_f32(v704, v575), v576, v703), v577, v711);
            float32x4_t v401 = v714;
            float32x4_t v400 = vmlaq_f32(v713, v714, vmlaq_f32(vmlaq_f32(vmulq_f32(v578, v578), v579, v579), v580, v580));
            float32x4_t v570 = vaddq_f32(v570, v400);
            v541[6] = v578;
            v541[7] = v579;
            v541[8] = v580;
            float32x4_t v571 = vsubq_f32(v571, vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v717, v405), v716, v403), v715, v402), v732, v575), v724, v576), v731, v577));
          }
          else if (v712)
          {
            float32x4_t v571 = vsubq_f32(v571, vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v717, v405), v716, v403), v715, v402), v732, vmlsq_f32(vmulq_f32(v402, v518), v403, v519)), v724, vmlsq_f32(vmulq_f32(v405, v519), v402, v517)), v731, vmlsq_f32(vmulq_f32(v403, v517), v405, v518)));
          }
          float32x4_t v581 = vrecpeq_f32(v570);
          int v582 = 4;
          do
          {
            float32x4_t v581 = vmulq_f32(v581, vrecpsq_f32(v581, v570));
            --v582;
          }
          while (v582);
          float32x4_t v583 = vmulq_f32(_Q0, (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v581, v558), (int8x16_t)vcgtzq_f32(v570)));
          float32x4_t v584 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v405, v549), v550, v403), v551, v402), v571);
          float32x4_t *v541 = v567;
          v541[1] = v568;
          v541[2] = v569;
          v541[3] = vmulq_f32(vsubq_f32(vmulq_n_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v405, v542), v543, v403), v544, v402), v414), v584), v583);
          v541[4] = v583;
          v541[5] = vmulq_f32(v583, vnegq_f32(v584));
          ++v408;
          _X26 = (float32x4_t *)((char *)_X26 + v645 + v645);
          if (v408 == v697)
          {
            LODWORD(v603) = v603 + 1;
            ++HIDWORD(v603);
            LODWORD(v602) = v602 + 1;
            ++HIDWORD(v602);
            unsigned int v350 = v638;
            break;
          }
        }
      }
      unsigned int v208 = v350 + 1;
      int v206 = v375;
      unsigned int v116 = v640;
      if (v208 == v595) {
        goto LABEL_363;
      }
    }
    unsigned int v254 = 0;
    uint64_t v255 = (uint64_t)_X2 + v223 * v645;
    uint64_t v256 = v248 | v246 | v249 | v250;
    while (2)
    {
      __asm
      {
        PRFM            #0, [X2,#0x180]
        PRFM            #0, [X2,#0x200]
        PRFM            #0, [X2,#0x280]
      }
      uint64_t v260 = a2[17];
      uint64_t v261 = v701 + *(unsigned __int16 *)(a1 + 44 * v236);
      uint64_t v262 = a2[43];
      uint64_t v263 = HIDWORD(v700) + *(unsigned __int16 *)(a1 + 44 * v702);
      uint64_t v264 = a2[69];
      uint64_t v265 = v700 + *(unsigned __int16 *)(a1 + 44 * HIDWORD(v702));
      uint64_t v266 = a2[95];
      uint64_t v267 = v699 + *(unsigned __int16 *)(a1 + 44 * HIDWORD(v701));
      float32x4_t v268 = (int32x4_t *)(v260 + (v261 << 6));
      float32x4_t v269 = (int32x4_t *)(v262 + (v263 << 6));
      float32x4_t v270 = (int32x4_t *)(v264 + (v265 << 6));
      float32x4_t v271 = (int32x4_t *)(v266 + (v267 << 6));
      int32x4_t v272 = v268[1];
      int32x4_t v273 = v268[2];
      int32x4_t v274 = v270[1];
      int32x4_t v275 = v270[2];
      int32x4_t v276 = vzip1q_s32(v272, v274);
      int32x4_t v277 = vzip2q_s32(v272, v274);
      int32x4_t v278 = v269[1];
      int32x4_t v279 = v269[2];
      int32x4_t v281 = v271[1];
      int32x4_t v280 = v271[2];
      int32x4_t v282 = vzip1q_s32(v278, v281);
      int32x4_t v283 = vzip2q_s32(v278, v281);
      float32x4_t v284 = (float32x4_t)vzip1q_s32(v276, v282);
      float32x4_t v285 = (float32x4_t)vzip2q_s32(v276, v282);
      float32x4_t v286 = (float32x4_t)vzip1q_s32(v277, v283);
      float32x4_t v287 = vsubq_f32(v284, v723);
      float32x4_t v288 = vsubq_f32(v285, v722);
      float32x4_t v289 = vsubq_f32(v286, v719);
      float32x4_t v290 = vmlsq_f32(vmulq_f32(v229, v288), v228, v289);
      float32x4_t v291 = vmlsq_f32(vmulq_f32(v227, v289), v229, v287);
      float32x4_t v292 = vmlsq_f32(vmulq_f32(v228, v287), v227, v288);
      float32x4_t v293 = (float32x4_t)vbicq_s8((int8x16_t)v290, (int8x16_t)vcgtq_f32(v232, vabsq_f32(v290)));
      float32x4_t v294 = (float32x4_t)vbicq_s8((int8x16_t)v291, (int8x16_t)vcgtq_f32(v232, vabsq_f32(v291)));
      float32x4_t v295 = (float32x4_t)vbicq_s8((int8x16_t)v292, (int8x16_t)vcgtq_f32(v232, vabsq_f32(v292)));
      float32x4_t v296 = vmlaq_f32(vmulq_f32(v741, v293), v294, v740);
      float32x4_t v297 = vmlaq_f32(vmulq_f32(v738, v293), v294, v737);
      float32x4_t v298 = vmlaq_f32(vmulq_f32(v735, v293), v294, v734);
      float32x4_t v299 = vmlaq_f32(vmulq_f32(v745, v293), v743, v294);
      v300.i32[0] = v268->i32[3];
      v300.i32[1] = v269->i32[3];
      v300.i32[2] = v270->i32[3];
      v300.i32[3] = v271->i32[3];
      float32x4_t v301 = vsubq_f32(v284, v721);
      float32x4_t v302 = vsubq_f32(v285, v720);
      float32x4_t v303 = vsubq_f32(v286, v718);
      float32x4_t v304 = vmlaq_f32(v296, v295, v739);
      float32x4_t v305 = vmlaq_f32(v297, v295, v736);
      float32x4_t v306 = vmlaq_f32(v298, v295, v642);
      float32x4_t v307 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v306, v306), v305, v305), v304, v304), v749, v747);
      float32x4_t v308 = vaddq_f32(v252, vmlaq_f32(v299, v742, v295));
      if (v647)
      {
        float32x4_t v309 = vmlsq_f32(vmulq_f32(v229, v302), v228, v303);
        float32x4_t v310 = vmlsq_f32(vmulq_f32(v227, v303), v229, v301);
        float32x4_t v311 = vmlsq_f32(vmulq_f32(v228, v301), v227, v302);
        float32x4_t v312 = (float32x4_t)vbicq_s8((int8x16_t)v309, (int8x16_t)vcgtq_f32(v232, vabsq_f32(v309)));
        float32x4_t v313 = (float32x4_t)vbicq_s8((int8x16_t)v310, (int8x16_t)vcgtq_f32(v232, vabsq_f32(v310)));
        float32x4_t v314 = (float32x4_t)vbicq_s8((int8x16_t)v311, (int8x16_t)vcgtq_f32(v232, vabsq_f32(v311)));
        float32x4_t v315 = vmlaq_f32(vmlaq_f32(vmulq_f32(v710, v312), v313, v709), v314, v708);
        float32x4_t v316 = vmlaq_f32(vmlaq_f32(vmulq_f32(v707, v312), v313, v706), v314, v705);
        float32x4_t v317 = vmlaq_f32(vmlaq_f32(vmulq_f32(v704, v312), v313, v703), v314, v711);
        float32x4_t v233 = v724;
        float32x4_t v232 = v733;
        float32x4_t v307 = vaddq_f32(v307, vmlaq_f32(v713, v714, vmlaq_f32(vmlaq_f32(vmulq_f32(v317, v317), v316, v316), v315, v315)));
        float32x4_t v308 = vsubq_f32(v308, vmlaq_f32(vmlaq_f32(vmulq_f32(v732, v312), v724, v313), v731, v314));
        _X2[6] = v315;
        _X2[7] = v316;
        _X2[8] = v317;
      }
      else if (v712)
      {
        float32x4_t v308 = vsubq_f32(v308, vmlaq_f32(vmlaq_f32(vmulq_f32(v732, vmlsq_f32(vmulq_f32(v229, v302), v228, v303)), v233, vmlsq_f32(vmulq_f32(v227, v303), v229, v301)), v731, vmlsq_f32(vmulq_f32(v228, v301), v227, v302)));
      }
      unsigned int v318 = v254 + 1;
      float32x4_t v253 = (float32x4_t *)((char *)_X2 + v645);
      int32x4_t v319 = vzip1q_s32(v273, v275);
      int32x4_t v320 = vzip2q_s32(v273, v275);
      int32x4_t v321 = vzip1q_s32(v279, v280);
      float32x4_t v322 = vmlaq_f32(vmlaq_f32(vmulq_f32(v229, (float32x4_t)vzip1q_s32(v320, vzip2q_s32(v279, v280))), v228, (float32x4_t)vzip2q_s32(v319, v321)), v227, (float32x4_t)vzip1q_s32(v319, v321));
      float32x4_t v323 = vrecpeq_f32(v307);
      int v324 = 4;
      do
      {
        float32x4_t v323 = vmulq_f32(v323, vrecpsq_f32(v323, v307));
        --v324;
      }
      while (v324);
      float32x4_t v325 = (float32x4_t)vandq_s8((int8x16_t)v323, (int8x16_t)vcgtzq_f32(v307));
      float32x4_t v326 = vsubq_f32(v300, v644);
      int8x16_t v327 = vandq_s8(vandq_s8((int8x16_t)vcgtq_f32(v593, v308), (int8x16_t)vcgtzq_f32(v698)), (int8x16_t)vcgtq_f32(vnegq_f32(v308), vmulq_n_f32(v326, a4)));
      float32x4_t v328 = (float32x4_t)vbicq_s8((int8x16_t)vmulq_f32(v325, vnegq_f32(vmaxq_f32(v594, vmulq_n_f32(v326, v643)))), vandq_s8(v327, (int8x16_t)vcgeq_f32(v600, v326)));
      float32x4_t v329 = vsubq_f32(v308, v322);
      *_X2 = v304;
      _X2[1] = v305;
      _X2[2] = v306;
      _X2[3] = v325;
      int8x16_t v330 = vbslq_s8(v327, (int8x16_t)v328, (int8x16_t)vmaxq_f32(v328, (float32x4_t)0));
      _X2[4] = (float32x4_t)v330;
      _X2[5] = vmlsq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)vmulq_f32(vmulq_f32(v308, v606), v325), v327), v328), v325, v329);
      if (v238)
      {
        v330.i32[0] = *(_DWORD *)(v260 + (v261 << 6) + 28);
        v305.i32[0] = *(_DWORD *)(v262 + (v263 << 6) + 28);
        v306.i32[0] = *(_DWORD *)(v264 + (v265 << 6) + 28);
        v329.i32[0] = *(_DWORD *)(v266 + (v267 << 6) + 28);
        *(int8x8_t *)&long long v331 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v330.i8, 0), *(int8x8_t *)v305.f32, 4uLL);
        *((int8x8_t *)&v331 + 1) = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v306.f32, 0), *(int8x8_t *)v329.f32, 4uLL);
        *(_OWORD *)(v255 + 16 * v254) = v331;
      }
      if (v256)
      {
        uint64_t v335 = v256;
        if ((v256 & 2) == 0) {
          goto LABEL_247;
        }
      }
      else
      {
        unsigned int v332 = v237 + 1;
        uint64_t v333 = 0xFFFFLL;
        if (v231 == 0xFFFF)
        {
          BOOL v334 = 0;
        }
        else
        {
          uint64_t v333 = v231;
          while (1)
          {
            unsigned int v336 = *(unsigned __int8 *)(a1 + 44 * v333 + 5);
            if (v332 != v336) {
              break;
            }
            unsigned int v332 = 0;
            uint64_t v333 = *(unsigned __int16 *)(a1 + 44 * v333 + 2);
            if (v333 == 0xFFFF)
            {
              unsigned int v332 = 0;
              BOOL v334 = 0;
              uint64_t v333 = 0xFFFFLL;
              goto LABEL_246;
            }
          }
          BOOL v334 = v332 < v336;
        }
LABEL_246:
        uint64_t v335 = v256 | !v334;
        unsigned int v236 = v231;
        LODWORD(v701) = v237;
        unsigned int v237 = v332;
        uint64_t v231 = v333;
        if ((v256 & 2) == 0)
        {
LABEL_247:
          unsigned int v337 = v240 + 1;
          uint64_t v338 = 0xFFFFLL;
          if (v230 == 0xFFFF)
          {
            int v339 = 2;
          }
          else
          {
            uint64_t v338 = v230;
            while (1)
            {
              unsigned int v340 = *(unsigned __int8 *)(a1 + 44 * v338 + 5);
              if (v337 != v340) {
                break;
              }
              unsigned int v337 = 0;
              uint64_t v338 = *(unsigned __int16 *)(a1 + 44 * v338 + 2);
              if (v338 == 0xFFFF)
              {
                int v339 = 2;
                uint64_t v338 = 0xFFFFLL;
                goto LABEL_256;
              }
            }
            if (v337 >= v340) {
              int v339 = 2;
            }
            else {
              int v339 = 0;
            }
          }
LABEL_256:
          uint64_t v335 = v339 | v335;
          LODWORD(v702) = v230;
          HIDWORD(v700) = v240;
          unsigned int v240 = v337;
          uint64_t v230 = v338;
        }
      }
      if ((v256 & 4) != 0)
      {
        if ((v256 & 8) != 0) {
          goto LABEL_280;
        }
LABEL_270:
        unsigned int v345 = v244 + 1;
        uint64_t v346 = 0xFFFFLL;
        if (v234 == 0xFFFF)
        {
          int v347 = 8;
        }
        else
        {
          uint64_t v346 = v234;
          while (1)
          {
            unsigned int v348 = *(unsigned __int8 *)(a1 + 44 * v346 + 5);
            if (v345 != v348) {
              break;
            }
            unsigned int v345 = 0;
            uint64_t v346 = *(unsigned __int16 *)(a1 + 44 * v346 + 2);
            if (v346 == 0xFFFF)
            {
              int v347 = 8;
              uint64_t v346 = 0xFFFFLL;
              goto LABEL_279;
            }
          }
          if (v345 >= v348) {
            int v347 = 8;
          }
          else {
            int v347 = 0;
          }
        }
LABEL_279:
        uint64_t v335 = v347 | v335;
        unsigned int v699 = v244;
        HIDWORD(v701) = v234;
        unsigned int v244 = v345;
        uint64_t v234 = v346;
      }
      else
      {
        unsigned int v341 = v242 + 1;
        uint64_t v342 = 0xFFFFLL;
        if (v235 == 0xFFFF)
        {
          int v343 = 4;
        }
        else
        {
          uint64_t v342 = v235;
          while (1)
          {
            unsigned int v344 = *(unsigned __int8 *)(a1 + 44 * v342 + 5);
            if (v341 != v344) {
              break;
            }
            unsigned int v341 = 0;
            uint64_t v342 = *(unsigned __int16 *)(a1 + 44 * v342 + 2);
            if (v342 == 0xFFFF)
            {
              int v343 = 4;
              uint64_t v342 = 0xFFFFLL;
              goto LABEL_269;
            }
          }
          if (v341 >= v344) {
            int v343 = 4;
          }
          else {
            int v343 = 0;
          }
        }
LABEL_269:
        uint64_t v335 = v343 | v335;
        HIDWORD(v702) = v235;
        LODWORD(v700) = v242;
        unsigned int v242 = v341;
        uint64_t v235 = v342;
        if ((v256 & 8) == 0) {
          goto LABEL_270;
        }
      }
LABEL_280:
      _X2 = v253;
      unsigned int v254 = v318;
      _ZF = v256 == 15;
      uint64_t v256 = v335;
      if (_ZF) {
        goto LABEL_282;
      }
      continue;
    }
  }
LABEL_363:
  *(_DWORD *)(v586 + v585) = 0;
  return 2;
}

uint64_t physx::Dy::createFinalizeSolverContacts4Coulomb(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t (***a4)(void), int a5, double a6, int32x2_t a7, int32x2_t a8)
{
  float32x4_t v8 = a2;
  uint64_t v9 = a1;
  uint64_t v558 = *MEMORY[0x263EF8340];
  float32x4_t v519 = (uint64_t *)(a3 + 181);
  float32x4_t v512 = (uint64_t *)(a3 + 77);
  for (uint64_t i = 4; i != 212; i += 52)
    *(_WORD *)(*(void *)&a3[i] + 30) = 0;
  unsigned int v11 = 0;
  int v12 = 0;
  uint64_t v13 = 0;
  unsigned int v14 = 0;
  unint64_t v15 = a2 + 4;
  a2[1028] = 0;
  uint64_t v16 = (uint64_t)(a2 + 1032);
  float32x4_t v528 = a2 + 2953;
  *(void *)(a2 + 2953) = 0;
  if (a5 == 1) {
    int v17 = 1;
  }
  else {
    int v17 = 2;
  }
  float32x4_t v478 = a3;
  uint64_t v18 = a3;
  do
  {
    float v19 = &a3[52 * v13];
    float v20 = (uint64_t *)*((void *)v19 + 2);
    uint64_t v21 = (uint64_t)&v15[16 * (unint64_t)v14];
    *((void *)v19 + 17) = v21;
    _X11 = *v20;
    _X10 = v20[1];
    __asm
    {
      PRFM            #0, [X11]
      PRFM            #0, [X10]
    }
    float v30 = *(uint64_t **)(v9 + 8 * v13);
    if (v14 + *((unsigned __int8 *)v30 + 24) > 0x40) {
      return 1;
    }
    float v31 = *(float *)(*((void *)v19 + 5) + 76);
    if (v31 >= *(float *)(*((void *)v19 + 6) + 76)) {
      float v31 = *(float *)(*((void *)v19 + 6) + 76);
    }
    uint64_t v32 = *v30;
    if (!*v30)
    {
      unsigned int v35 = v8[1028];
LABEL_72:
      v8[1028] = v35;
      return 1;
    }
    char v33 = *(unsigned char *)(v32 + 43);
    if ((v33 & 2) != 0) {
      uint64_t v34 = 64;
    }
    else {
      uint64_t v34 = 16;
    }
    unsigned int v35 = v8[1028];
    if ((*(unsigned char *)(v32 + 43) & 4) != 0) {
      goto LABEL_72;
    }
    float v37 = *(float *)v32;
    float v36 = *(float *)(v32 + 4);
    v540.i32[v13] = *(_DWORD *)v32;
    float v39 = *(float *)(v32 + 8);
    float v38 = *(float *)(v32 + 12);
    v539.f32[v13] = v39;
    int v40 = *((unsigned __int8 *)v30 + 25);
    _X14 = v30[1];
    *((float *)&v538 + v13) = v36;
    *((float *)&v537 + v13) = v38;
    if (!v40) {
      goto LABEL_72;
    }
    unsigned int v534 = v14;
    int v42 = 0;
    unsigned int v43 = 0;
    int v44 = 0;
    unsigned int v45 = (v33 >> 5) & 1;
    if ((v33 & 2) != 0) {
      char v46 = 6;
    }
    else {
      char v46 = 4;
    }
    BOOL v47 = v33 < 0;
    if (v33 < 0) {
      uint64_t v34 = 32;
    }
    unsigned int v48 = v33 & 0xFFFFFF82;
    if (v47) {
      char v46 = 5;
    }
    unsigned int v49 = v35;
    do
    {
      if (v42)
      {
        unsigned int v50 = *(unsigned __int8 *)(v32 + 41);
        _CF = v50 >= v43;
        unsigned int v51 = v50 - v43;
        BOOL v47 = v51 != 0 && _CF;
        LODWORD(v52) = v51 << v46;
        if (v47) {
          uint64_t v52 = v52;
        }
        else {
          uint64_t v52 = 0;
        }
        _X14 += v52;
        v32 += 48;
      }
      unsigned int v43 = *(unsigned __int8 *)(v32 + 41);
      if (*(unsigned char *)(v32 + 41))
      {
        for (int j = *(unsigned __int8 *)(v32 + 41); j; --j)
        {
          if (v44) {
            uint64_t v54 = v34;
          }
          else {
            uint64_t v54 = 0;
          }
          _X14 += v54;
          __asm { PRFM            #0, [X14,#0x80] }
          _X6 = &v15[16 * (unint64_t)v49];
          __asm { PRFM            #0, [X6,#0x80] }
          float v58 = v31;
          if (v45)
          {
            if (!v48)
            {
              float v58 = 3.4028e38;
LABEL_41:
              *(void *)&long long v59 = *(void *)(v32 + 16);
              int v60 = (int32x2_t *)&v15[16 * (unint64_t)v49];
              DWORD2(v59) = *(_DWORD *)(v32 + 24);
              HIDWORD(v59) = *(_DWORD *)(_X14 + 12);
              *_X6 = v59;
              v60[2] = *(int32x2_t *)_X14;
              v60[3].i32[0] = *(_DWORD *)(_X14 + 8);
              v60[6].i8[0] = *(unsigned char *)(v32 + 42);
              *(float *)&v60[3].i32[1] = v58;
              v60[5].i32[1] = *(_DWORD *)(v32 + 36);
              v60[7] = vrev64_s32(*(int32x2_t *)(v32 + 28));
              if (v48)
              {
                int32x2_t v61 = *(int32x2_t *)(_X14 + 16);
                int v62 = *(_DWORD *)(_X14 + 24);
              }
              else
              {
                int32x2_t v61 = 0;
                int v62 = 0;
              }
              void v60[4] = v61;
              v60[5].i32[0] = v62;
              ++v49;
              goto LABEL_45;
            }
            float v58 = *(float *)(_X14 + 28);
          }
          if (v58 != 0.0) {
            goto LABEL_41;
          }
LABEL_45:
          int v44 = 1;
        }
      }
      ++v42;
    }
    while (v42 != v40);
    v8[1028] = v49;
    unsigned int v63 = v49 - v35;
    if (v49 == v35) {
      return 1;
    }
    int32x2_t v64 = &v18[52 * v13];
    v64[46] = v12;
    int v65 = v64 + 46;
    *(v65 - 10) = v63;
    *((unsigned char *)v65 - 36) = v45;
    v65[2] = v11;
    physx::Dy::createContactPatches(v16, v21, v63, 0.999);
    if (physx::Dy::correlatePatches(v16, *((void *)v19 + 17), (float *)v19 + 14, (float *)v19 + 21, v65[2], *v65, 0.999))return 1; {
    float v70 = *((float *)v19 + 1);
    }
    v540.f32[v13] = v37 * *(float *)v19;
    float v71 = *((float *)v19 + 3);
    float32_t v72 = v39 * *((float *)v19 + 2);
    unsigned int v14 = v63 + v534;
    float32x4_t v8 = a2;
    unsigned int v11 = a2[2953];
    int v73 = &v18[52 * v13];
    *((_WORD *)v73 + 98) = v11 - v65[2];
    int v12 = a2[2954];
    int v74 = v12 - *v65;
    v539.f32[v13] = v72;
    *((float *)&v538 + v13) = v36 * v70;
    v73[47] = v74;
    *((float *)&v537 + v13++) = v38 * v71;
    a3 = v18;
    uint64_t v9 = a1;
  }
  while (v13 != 4);
  uint64_t v75 = 0;
  LODWORD(v76) = 0;
  v77.i32[1] = 0;
  float32x4_t v550 = 0u;
  float32x4_t v551 = 0u;
  char v78 = a5 != 1;
  long long v552 = 0u;
  long long v553 = 0u;
  long long v554 = 0u;
  long long v555 = 0u;
  long long v556 = 0u;
  long long v557 = 0u;
  float32x4_t v542 = 0u;
  float32x4_t v543 = 0u;
  long long v544 = 0u;
  long long v545 = 0u;
  long long v546 = 0u;
  long long v547 = 0u;
  long long v548 = 0u;
  long long v549 = 0u;
  do
  {
    unsigned int v79 = v18[52 * v75 + 47];
    if (v79)
    {
      int v80 = 0;
      int v81 = v18[52 * v75 + 46];
      uint64_t v82 = &v542;
      int32x2_t v83 = &v550;
      uint64_t v84 = v18[52 * v75 + 47];
      do
      {
        int v85 = v81;
        unsigned int v86 = a2[v81 + 2856];
        if (v86)
        {
          char v87 = BYTE1(a2[26 * v81 + 1736]);
          __int32 v88 = v83->i32[0];
          if (v86 > v83->i32[0]) {
            __int32 v88 = v86;
          }
          v83->i32[0] = v88;
          v80 += v86;
          if ((v87 & 1) == 0)
          {
            int v89 = v82->i32[0];
            if (v86 << v78 > v82->i32[0]) {
              int v89 = v86 << v78;
            }
            v82->i32[0] = v89;
            v80 += v86 << v78;
          }
        }
        uint64_t v82 = (float32x4_t *)((char *)v82 + 4);
        int32x2_t v83 = (float32x4_t *)((char *)v83 + 4);
        int v81 = v85 + 1;
        --v84;
      }
      while (v84);
    }
    else
    {
      int v80 = 0;
    }
    if (v79 <= v76) {
      uint64_t v76 = v76;
    }
    else {
      uint64_t v76 = v79;
    }
    v536[v75++] = v80;
  }
  while (v75 != 4);
  if (v76)
  {
    int v90 = 0;
    int v91 = 0;
    float32x4_t v92 = &v542;
    unsigned int v93 = &v550;
    uint64_t v94 = v76;
    do
    {
      __int32 v95 = v93->i32[0];
      unsigned int v93 = (float32x4_t *)((char *)v93 + 4);
      v91 += v95;
      __int32 v96 = v92->i32[0];
      float32x4_t v92 = (float32x4_t *)((char *)v92 + 4);
      v90 += v96;
      --v94;
    }
    while (v94);
  }
  else
  {
    int v91 = 0;
    int v90 = 0;
  }
  int v98 = v90 + v91;
  if (((v18[81] | v18[29]) | (v18[133] | v18[185]))) {
    int v99 = 192;
  }
  else {
    int v99 = 144;
  }
  unsigned int v100 = 272 * v76 + v99 * v98;
  if (!v100)
  {
    uint64_t v101 = 0;
    goto LABEL_84;
  }
  if (v100 + 16 > 0x4000) {
    return 1;
  }
  uint64_t v101 = (**a4)(a4);
  if ((unint64_t)(v101 + 1) < 2) {
    return 0;
  }
  a3 = v478;
LABEL_84:
  int v448 = a5 != 1;
  uint64_t v102 = 0;
  BOOL v103 = (_WORD *)a3 + 99;
  unsigned int v434 = v100;
  do
  {
    uint64_t v104 = *(void *)(v103 - 91);
    *(void *)(v104 + 32) = v101;
    *v103 += v536[v102];
    v103 += 104;
    *(_WORD *)(v104 + 30) = v100 >> 4;
    uint64_t v105 = *(void *)(a1 + 8 * v102);
    __int16 v106 = *(unsigned __int8 *)(v105 + 24);
    *(void *)(v104 + 40) = *(void *)(v105 + 16);
    *(_WORD *)(v104 + 28) = v106;
    ++v102;
  }
  while (v102 != 4);
  uint64_t v435 = v101;
  int v107 = a3[81] | a3[29] | a3[133] | a3[185];
  uint64_t v108 = 12;
  if ((v107 & 1) == 0) {
    uint64_t v108 = 9;
  }
  _X10 = a2 + 2921;
  __asm { PRFM            #0, [X10] }
  _X10 = v528;
  __asm { PRFM            #0, [X10] }
  unsigned int v113 = a3[47];
  unsigned int v114 = a3[99];
  unsigned int v115 = a3[151];
  if (v115 <= a3[203]) {
    unsigned int v115 = a3[203];
  }
  if (v114 <= v115) {
    unsigned int v114 = v115;
  }
  if (v113 <= v114) {
    unsigned int v113 = v114;
  }
  unsigned int v449 = v113;
  if (v113)
  {
    unsigned int v116 = 0;
    unsigned int v453 = 0;
    unsigned int v454 = 0;
    unsigned int v451 = 0;
    v117.i64[1] = v540.i64[1];
    v118.i64[1] = v539.i64[1];
    uint64_t v119 = *((void *)a3 + 31);
    uint64_t v120 = *((void *)a3 + 32);
    v77.i32[0] = *(_DWORD *)(v119 + 68);
    uint64_t v122 = *((void *)a3 + 57);
    uint64_t v121 = *((void *)a3 + 58);
    v67.i32[0] = *(_DWORD *)(v122 + 68);
    uint64_t v123 = *((void *)a3 + 83);
    v66.i32[0] = *(_DWORD *)(v123 + 68);
    uint64_t v125 = *((void *)a3 + 5);
    uint64_t v124 = *((void *)a3 + 6);
    v206.i32[0] = *(_DWORD *)(v125 + 64);
    v68.i32[0] = *(_DWORD *)(v125 + 68);
    int8x8_t v126 = (int8x8_t)vdup_lane_s32(v68, 0);
    int32x2_t v127 = vdup_lane_s32(v67, 0);
    *(int8x8_t *)v128.f32 = vext_s8(v126, v77, 4uLL);
    int8x8_t v129 = vext_s8((int8x8_t)v127, v66, 4uLL);
    *(int8x8_t *)&v128.u32[2] = v129;
    v129.i32[0] = *(_DWORD *)(v120 + 68);
    v127.i32[0] = *(_DWORD *)(v121 + 68);
    uint64_t v130 = *((void *)a3 + 84);
    v126.i32[0] = *(_DWORD *)(v130 + 68);
    v69.i32[0] = *(_DWORD *)(v124 + 68);
    *(int8x8_t *)v131.f32 = vext_s8((int8x8_t)vdup_lane_s32(v69, 0), v129, 4uLL);
    int32x2_t v132 = (int32x2_t)vext_s8((int8x8_t)vdup_lane_s32(v127, 0), v126, 4uLL);
    *(int32x2_t *)&v131.u32[2] = v132;
    float32x4_t v133 = vmaxq_f32(v128, v131);
    v128.i32[0] = a3[38];
    v131.i32[0] = a3[90];
    v132.i32[0] = a3[142];
    v126.i32[0] = a3[194];
    *(int8x8_t *)v131.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v128.f32, 0), *(int8x8_t *)v131.f32, 4uLL);
    *(int8x8_t *)&v131.u32[2] = vext_s8((int8x8_t)vdup_lane_s32(v132, 0), v126, 4uLL);
    float32x4_t v470 = v131;
    float32x4_t v471 = v133;
    int32x4_t v134 = *(int32x4_t *)(v125 + 16);
    int8x16_t v135 = *(int8x16_t *)v119;
    int32x4_t v136 = *(int32x4_t *)(v119 + 16);
    int32x4_t v137 = *(int32x4_t *)v122;
    int32x4_t v138 = *(int32x4_t *)(v122 + 16);
    int32x4_t v139 = *(int32x4_t *)v123;
    int32x4_t v140 = *(int32x4_t *)(v123 + 16);
    int32x4_t v141 = *(int32x4_t *)v124;
    int32x4_t v142 = *(int32x4_t *)(v124 + 16);
    int32x4_t v143 = *(int32x4_t *)(v120 + 16);
    int32x4_t v144 = *(int32x4_t *)(v121 + 16);
    int32x4_t v145 = *(int32x4_t *)(v130 + 16);
    int32x4_t v146 = vzip1q_s32(*(int32x4_t *)v125, *(int32x4_t *)v122);
    int32x4_t v147 = vzip1q_s32(*(int32x4_t *)v119, *(int32x4_t *)v123);
    int32x4_t v148 = vzip1q_s32(v146, v147);
    float32x4_t v149 = (float32x4_t)vzip2q_s32(v146, v147);
    float32x4_t v150 = (float32x4_t)vzip1q_s32(vzip2q_s32(*(int32x4_t *)v125, *(int32x4_t *)v122), vzip2q_s32(*(int32x4_t *)v119, *(int32x4_t *)v123));
    int32x4_t v151 = vzip1q_s32(*(int32x4_t *)v124, *(int32x4_t *)v121);
    int32x4_t v152 = vzip1q_s32(*(int32x4_t *)v120, *(int32x4_t *)v130);
    float32x4_t v153 = (float32x4_t)vzip1q_s32(v151, v152);
    float32x4_t v154 = (float32x4_t)vzip2q_s32(v151, v152);
    float32x4_t v155 = (float32x4_t)vzip1q_s32(vzip2q_s32(*(int32x4_t *)v124, *(int32x4_t *)v121), vzip2q_s32(*(int32x4_t *)v120, *(int32x4_t *)v130));
    float32x4_t v156 = (float32x4_t)v148;
    int32x4_t v157 = vzip1q_s32(v134, v138);
    int32x4_t v158 = vzip2q_s32(v134, v138);
    int32x4_t v159 = vzip1q_s32(v136, v140);
    int32x4_t v160 = vzip1q_s32(v157, v159);
    float32x4_t v535 = (float32x4_t)vzip2q_s32(v157, v159);
    float32x4_t v533 = (float32x4_t)vzip1q_s32(v158, vzip2q_s32(v136, v140));
    int32x4_t v161 = vzip1q_s32(v142, v144);
    int32x4_t v162 = vzip2q_s32(v142, v144);
    int32x4_t v163 = vzip1q_s32(v143, v145);
    int32x4_t v164 = vzip2q_s32(v143, v145);
    int32x4_t v165 = vzip1q_s32(v161, v163);
    int8x16_t v166 = (int8x16_t)vzip2q_s32(v161, v163);
    float32x4_t v507 = (float32x4_t)v166;
    float32x4_t v508 = (float32x4_t)v165;
    *(int32x2_t *)v166.i8 = vdup_laneq_s32(*(int32x4_t *)v119, 3);
    *(int32x2_t *)v135.i8 = vdup_laneq_s32(*(int32x4_t *)v123, 3);
    v128.i64[0] = vextq_s8(*(int8x16_t *)v125, v166, 0xCuLL).u64[0];
    v128.i64[1] = vextq_s8(*(int8x16_t *)v122, v135, 0xCuLL).u64[0];
    float32x4_t v167 = (float32x4_t)vzip1q_s32(v162, v164);
    float32x4_t v506 = v167;
    *(int32x2_t *)v167.f32 = vdup_laneq_s32(*(int32x4_t *)v120, 3);
    *(int32x2_t *)v135.i8 = vdup_laneq_s32(*(int32x4_t *)v130, 3);
    v167.i64[0] = vextq_s8(*(int8x16_t *)v124, (int8x16_t)v167, 0xCuLL).u64[0];
    int32x4_t v168 = (int32x4_t)vextq_s8(*(int8x16_t *)v121, v135, 0xCuLL);
    v167.i64[1] = v168.i64[0];
    float32x4_t v518 = vmulq_f32(v540, v128);
    int32x4_t v169 = (int32x4_t)vmulq_f32(v539, v167);
    float32x4_t v450 = (float32x4_t)v169;
    v169.i64[0] = *(void *)(v125 + 32);
    v117.i64[0] = *(void *)(v125 + 44);
    v118.i64[0] = *(void *)(v125 + 56);
    v167.i64[0] = *(void *)(v119 + 32);
    v168.i64[0] = *(void *)(v119 + 44);
    v162.i64[0] = *(void *)(v119 + 56);
    v137.i64[0] = *(void *)(v122 + 32);
    v163.i64[0] = *(void *)(v122 + 44);
    v139.i64[0] = *(void *)(v122 + 56);
    v164.i64[0] = *(void *)(v123 + 32);
    v141.i64[0] = *(void *)(v123 + 44);
    v165.i64[0] = *(void *)(v123 + 56);
    int32x4_t v170 = vzip1q_s32(v169, v137);
    v137.i64[0] = *(void *)(v124 + 32);
    int32x4_t v171 = vzip1q_s32((int32x4_t)v167, v164);
    float32x4_t v531 = (float32x4_t)vzip1q_s32(v170, v171);
    int32x4_t v172 = vzip2q_s32(v170, v171);
    float32x4_t v529 = (float32x4_t)v172;
    v172.i64[0] = *(void *)(v124 + 44);
    int32x4_t v173 = vzip1q_s32(v117, v163);
    v171.i64[0] = *(void *)(v124 + 56);
    int32x4_t v174 = vzip1q_s32(v168, v141);
    int32x4_t v175 = vzip1q_s32(v173, v174);
    int32x4_t v176 = vzip2q_s32(v173, v174);
    float32x4_t v525 = (float32x4_t)v176;
    float32x4_t v527 = (float32x4_t)v175;
    v176.i64[0] = *(void *)(v120 + 32);
    int32x4_t v177 = vzip1q_s32(v118, v139);
    v174.i64[0] = *(void *)(v120 + 44);
    int32x4_t v178 = vzip1q_s32(v162, v165);
    int32x4_t v179 = vzip1q_s32(v177, v178);
    int32x4_t v180 = vzip2q_s32(v177, v178);
    float32x4_t v523 = (float32x4_t)v180;
    float32x4_t v524 = (float32x4_t)v179;
    v180.i64[0] = *(void *)(v121 + 32);
    int32x4_t v181 = vzip1q_s32(v137, v180);
    v178.i64[0] = *(void *)(v130 + 32);
    int32x4_t v182 = vzip1q_s32(v176, v178);
    int32x4_t v183 = vzip1q_s32(v181, v182);
    int32x4_t v184 = vzip2q_s32(v181, v182);
    float32x4_t v504 = (float32x4_t)v184;
    float32x4_t v505 = (float32x4_t)v183;
    v184.i64[0] = *(void *)(v121 + 44);
    int32x4_t v185 = vzip1q_s32(v172, v184);
    v184.i64[0] = *(void *)(v130 + 44);
    int32x4_t v186 = vzip1q_s32(v174, v184);
    int32x4_t v187 = vzip1q_s32(v185, v186);
    int32x4_t v188 = vzip2q_s32(v185, v186);
    float32x4_t v502 = (float32x4_t)v188;
    float32x4_t v503 = (float32x4_t)v187;
    v188.i64[0] = *(void *)(v121 + 56);
    int32x4_t v189 = vzip1q_s32(v171, v188);
    v186.i64[0] = *(void *)(v120 + 56);
    v187.i64[0] = *(void *)(v130 + 56);
    int32x4_t v190 = vzip1q_s32(v186, v187);
    int32x4_t v191 = vzip1q_s32(v189, v190);
    int32x4_t v192 = vzip2q_s32(v189, v190);
    float32x4_t v500 = (float32x4_t)v192;
    float32x4_t v501 = (float32x4_t)v191;
    v192.i64[0] = *((void *)a3 + 9);
    v190.i64[0] = *((void *)a3 + 61);
    int32x4_t v193 = vzip1q_s32(v192, v190);
    v190.i64[0] = *((void *)a3 + 35);
    v191.i64[0] = *((void *)a3 + 87);
    int32x4_t v194 = vzip1q_s32(v190, v191);
    int32x4_t v195 = vzip1q_s32(v193, v194);
    int32x4_t v196 = vzip2q_s32(v193, v194);
    float32x4_t v468 = (float32x4_t)v196;
    float32x4_t v469 = (float32x4_t)v195;
    v196.i64[0] = *(void *)(a3 + 25);
    v194.i64[0] = v512[26];
    int32x4_t v197 = vzip1q_s32(v196, v194);
    v194.i64[0] = *v512;
    v195.i64[0] = *v519;
    int32x4_t v198 = vzip1q_s32(v194, v195);
    float32x4_t v466 = (float32x4_t)vzip2q_s32(v197, v198);
    float32x4_t v467 = (float32x4_t)vzip1q_s32(v197, v198);
    v197.i32[0] = a3[39];
    v197.i32[1] = a3[91];
    v197.i32[2] = a3[143];
    v197.i32[3] = a3[195];
    float32x4_t v465 = (float32x4_t)v197;
    float32x4_t v464 = (float32x4_t)vdupq_lane_s32(a8, 0);
    char v446 = *((unsigned char *)a3 + 358);
    char v447 = *((unsigned char *)a3 + 150);
    int8x16_t v199 = (__int32 *)(v120 + 40);
    int8x16_t v200 = (__int32 *)(v120 + 52);
    int8x16_t v201 = (__int32 *)(v120 + 64);
    int8x16_t v202 = (__int32 *)(v121 + 40);
    int8x16_t v203 = (__int32 *)(v121 + 52);
    int8x16_t v204 = (__int32 *)(v121 + 64);
    v197.i32[0] = *(_DWORD *)(v125 + 40);
    v197.i32[1] = *(_DWORD *)(v119 + 40);
    v197.i32[2] = *(_DWORD *)(v122 + 40);
    v197.i32[3] = *(_DWORD *)(v123 + 40);
    float32x4_t v522 = (float32x4_t)v197;
    v197.i32[0] = *(_DWORD *)(v125 + 52);
    v197.i32[1] = *(_DWORD *)(v119 + 52);
    v197.i32[2] = *(_DWORD *)(v122 + 52);
    v197.i32[3] = *(_DWORD *)(v123 + 52);
    float32x4_t v520 = (float32x4_t)v197;
    char v205 = v478;
    v206.i32[1] = *(_DWORD *)(v119 + 64);
    v206.i32[2] = *(_DWORD *)(v122 + 64);
    v206.i32[3] = *(_DWORD *)(v123 + 64);
    v197.i32[0] = *(_DWORD *)(v124 + 40);
    v197.i32[1] = *v199;
    v197.i32[2] = *v202;
    v197.i32[3] = *(_DWORD *)(v130 + 40);
    float32x4_t v499 = (float32x4_t)v197;
    if (v107) {
      uint64_t v207 = 176;
    }
    else {
      uint64_t v207 = 128;
    }
    uint64_t v463 = v207;
    v208.i32[2] = *v203;
    v208.i32[3] = *(_DWORD *)(v130 + 52);
    v208.i32[1] = *v200;
    v208.i32[0] = *(_DWORD *)(v124 + 52);
    float32x4_t v498 = v208;
    v209.i32[1] = *v201;
    v209.i32[2] = *v204;
    v209.i32[3] = *(_DWORD *)(v130 + 64);
    v209.i32[0] = *(_DWORD *)(v124 + 64);
    float32x4_t v509 = v209;
    float32x4_t v210 = (float32x4_t)v160;
    uint64_t v211 = v101 + (v207 * v91) + 176 * v449;
    if (v107) {
      char v212 = 7;
    }
    else {
      char v212 = 8;
    }
    char v444 = v212;
    char v445 = *((unsigned char *)v478 + 566);
    if (v107) {
      char v213 = 13;
    }
    else {
      char v213 = 14;
    }
    char v443 = v213;
    float32x4_t v462 = (float32x4_t)vdupq_lane_s32(a7, 0);
    v214.i32[0] = v478[20];
    v214.i32[1] = v478[72];
    v215.i32[1] = HIDWORD(a6);
    uint64_t v442 = a2 + 2888;
    v214.i32[2] = v478[124];
    char v441 = *((unsigned char *)v478 + 774);
    v214.i32[3] = v478[176];
    float32x4_t v461 = v214;
    v216.i32[0] = v478[27];
    v216.i32[1] = v478[79];
    unsigned int v217 = 0;
    v216.i32[2] = v478[131];
    v216.i32[3] = v478[183];
    float32x4_t v460 = v216;
    uint64_t v218 = v101;
    float32x4_t v496 = v154;
    float32x4_t v497 = v153;
    long long v439 = v538;
    float32x4_t v440 = vsubq_f32(v156, v153);
    float32x4_t v219 = vsubq_f32(v149, v154);
    float32x4_t v495 = v155;
    float32x4_t v437 = vsubq_f32(v150, v155);
    float32x4_t v438 = v219;
    long long v436 = v537;
    while (1)
    {
      unsigned int v220 = v205[47];
      if (v217 < v220) {
        unsigned int v116 = v205[46] + v217;
      }
      unsigned int v221 = v205[99];
      if (v217 < v221) {
        unsigned int v454 = v205[98] + v217;
      }
      unsigned int v222 = v205[151];
      if (v217 < v222) {
        unsigned int v453 = v205[150] + v217;
      }
      unsigned int v223 = v205[203];
      if (v217 < v223) {
        unsigned int v451 = v205[202] + v217;
      }
      uint64_t v516 = v218;
      if (v217 < v220) {
        unsigned int v224 = a2[v116 + 2856];
      }
      else {
        unsigned int v224 = 0;
      }
      if (v217 < v221) {
        unsigned int v225 = a2[v454 + 2856];
      }
      else {
        unsigned int v225 = 0;
      }
      if (v217 < v222) {
        unsigned int v226 = a2[v453 + 2856];
      }
      else {
        unsigned int v226 = 0;
      }
      unsigned int v513 = v205[151];
      unsigned int v510 = v205[99];
      unsigned int v491 = v205[47];
      unsigned int v455 = v217;
      unsigned int v489 = v205[203];
      if (v217 < v223)
      {
        int v487 = 0;
        unsigned int v227 = a2[v451 + 2856];
      }
      else
      {
        unsigned int v227 = 0;
        int v487 = 8;
      }
      unsigned int v493 = v224 << v448;
      unsigned int v228 = v225 << v448;
      unsigned int v229 = v226 << v448;
      unsigned int v230 = v227 << v448;
      if (v226 <= v227) {
        unsigned int v231 = v227;
      }
      else {
        unsigned int v231 = v226;
      }
      if (v225 > v231) {
        unsigned int v231 = v225;
      }
      if (v224 <= v231) {
        uint64_t v232 = v231;
      }
      else {
        uint64_t v232 = v224;
      }
      unsigned int v452 = v116;
      uint64_t v233 = v442[v116];
      uint64_t v234 = v442[v454];
      uint64_t v235 = v442[v453];
      unsigned int v236 = v442[v451];
      unsigned int v237 = (int32x4_t *)(*((void *)v205 + 17)
                         + ((unint64_t)*(unsigned __int16 *)(v16 + 44 * v233) << 6));
      BOOL v238 = (int32x4_t *)(*((void *)v205 + 43)
                         + ((unint64_t)*(unsigned __int16 *)(v16 + 44 * v234) << 6));
      uint64_t v239 = (int32x4_t *)(*((void *)v205 + 69)
                         + ((unint64_t)*(unsigned __int16 *)(v16 + 44 * v235) << 6));
      unsigned int v240 = (int32x4_t *)(*((void *)v205 + 95) + ((unint64_t)*(unsigned __int16 *)(v16 + 44 * v236) << 6));
      uint64_t v241 = (const float *)&v237[3].i32[3];
      int8x8_t v242 = (int8x8_t)vld1_dup_f32(v241);
      v215.i32[0] = v238[3].i32[3];
      uint64_t v243 = (const float *)&v239[3].i32[3];
      v219.i32[0] = v240[3].i32[3];
      int8x8_t v244 = (int8x8_t)vld1_dup_f32(v243);
      *(int8x8_t *)v245.f32 = vext_s8(v242, *(int8x8_t *)v215.f32, 4uLL);
      *(int8x8_t *)&v245.u32[2] = vext_s8(v244, *(int8x8_t *)v219.f32, 4uLL);
      int v246 = (const float *)&v237[2].i32[3];
      int8x8_t v247 = (int8x8_t)vld1_dup_f32(v246);
      v215.i32[0] = v238[2].i32[3];
      int v248 = (const float *)&v239[2].i32[3];
      v219.i32[0] = v240[2].i32[3];
      int8x8_t v249 = (int8x8_t)vld1_dup_f32(v248);
      *(_WORD *)(v516 + 2) = v211 - v516;
      *(unsigned char *)(v516 + 4) = v224;
      *(unsigned char *)(v516 + 5) = v225;
      *(unsigned char *)(v516 + 6) = v226;
      *(unsigned char *)(v516 + 7) = v227;
      *(unsigned char *)(v516 + 1) = v232;
      *(float32x4_t *)(v516 + 80) = v518;
      *(float32x4_t *)(v516 + 96) = v450;
      *(_OWORD *)(v516 + 112) = v439;
      *(_OWORD *)(v516 + 128) = v436;
      float32x4_t v477 = v245;
      *(float32x4_t *)(v516 + 16) = v245;
      *(unsigned char *)(v516 + 8) = v447;
      *(unsigned char *)(v516 + 9) = v446;
      *(unsigned char *)(v516 + 10) = v445;
      *(unsigned char *)(v516 + 11) = v441;
      *(unsigned char *)uint64_t v516 = v444;
      *(void *)(v516 + 144) = *((void *)v205 + 16);
      *(void *)(v516 + 152) = *((void *)v205 + 42);
      *(void *)(v516 + 160) = *((void *)v205 + 68);
      *(void *)(v516 + 168) = *((void *)v205 + 94);
      if (v229 <= v230) {
        unsigned int v250 = v227 << v448;
      }
      else {
        unsigned int v250 = v226 << v448;
      }
      if (v228 > v250) {
        unsigned int v250 = v225 << v448;
      }
      if (v493 > v250) {
        LOBYTE(v250) = v224 << v448;
      }
      *(unsigned char *)(v211 + 7) = v493;
      *(unsigned char *)(v211 + 8) = v228;
      *(unsigned char *)(v211 + 9) = v229;
      *(unsigned char *)(v211 + 10) = v230;
      *(unsigned char *)(v211 + 3) = v224;
      *(unsigned char *)(v211 + 4) = v225;
      *(unsigned char *)(v211 + 5) = v226;
      *(unsigned char *)(v211 + 6) = v227;
      *(unsigned char *)(v211 + 2) = v250;
      *(int8x8_t *)&long long v251 = vext_s8(v247, *(int8x8_t *)v215.f32, 4uLL);
      *((int8x8_t *)&v251 + 1) = vext_s8(v249, *(int8x8_t *)v219.f32, 4uLL);
      *(float32x4_t *)(v211 + 48) = v450;
      *(_OWORD *)(v211 + 64) = v439;
      *(_OWORD *)(v211 + 80) = v436;
      *(unsigned char *)(v211 + 1) = v232;
      *(unsigned char *)uint64_t v211 = v443;
      *(_OWORD *)(v211 + 16) = v251;
      *(float32x4_t *)(v211 + 32) = v518;
      *(_DWORD *)(v211 + 12) = v448;
      int32x4_t v252 = vzip1q_s32(*v237, *v239);
      int32x4_t v253 = vzip1q_s32(*v238, *v240);
      float32x4_t v254 = (float32x4_t)vzip1q_s32(v252, v253);
      float32x4_t v255 = (float32x4_t)vzip2q_s32(v252, v253);
      float32x4_t v256 = (float32x4_t)vzip1q_s32(vzip2q_s32(*v237, *v239), vzip2q_s32(*v238, *v240));
      *(float32x4_t *)(v516 + 32) = v254;
      *(float32x4_t *)(v516 + 48) = v255;
      *(float32x4_t *)(v516 + 64) = v256;
      float32x4_t v257 = vmlaq_f32(vmulq_f32(v254, v254), v255, v255);
      float32x4_t v258 = vmulq_f32(v497, v254);
      int8x16_t v259 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x3F3504F3u), vabsq_f32(v254));
      float32x4_t v260 = vnegq_f32(v255);
      float32x4_t v261 = vnegq_f32(v256);
      int8x16_t v262 = vbslq_s8(v259, (int8x16_t)v261, (int8x16_t)v254);
      int8x16_t v263 = vandq_s8(v259, (int8x16_t)v255);
      float32x4_t v264 = vmlaq_f32(vmlaq_f32(vmulq_f32(v440, v254), v438, v255), v437, v256);
      float32x4_t v265 = vnegq_f32(v254);
      float32x4_t v266 = vmlsq_f32(v440, v264, v254);
      float32x4_t v267 = vmlsq_f32(v438, v264, v255);
      float32x4_t v268 = vmlsq_f32(v437, v264, v256);
      int8x16_t v269 = (int8x16_t)vcgtq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v268, v268), v267, v267), v266, v266), (float32x4_t)vdupq_n_s32(0x3DCCCCCDu));
      float32x4_t v270 = (float32x4_t)vorrq_s8(vandq_s8(v269, (int8x16_t)v266), vbicq_s8((int8x16_t)v260, vorrq_s8(v269, v259)));
      float32x4_t v271 = (float32x4_t)vbslq_s8(v269, (int8x16_t)v267, v262);
      float32x4_t v272 = (float32x4_t)vbslq_s8(v269, (int8x16_t)v268, v263);
      float32x4_t v273 = vmlaq_f32(vmlaq_f32(vmulq_f32(v272, v272), v271, v271), v270, v270);
      float32x4_t v274 = vrsqrteq_f32(v273);
      int v275 = 4;
      do
      {
        float32x4_t v274 = vmulq_f32(v274, vrsqrtsq_f32(vmulq_f32(v274, v274), v273));
        --v275;
      }
      while (v275);
      float32x4_t v276 = vmulq_f32(v274, v270);
      float32x4_t v277 = vmulq_f32(v274, v271);
      float32x4_t v278 = vmulq_f32(v274, v272);
      float32x4_t v279 = vmlaq_f32(vmulq_f32(v255, v278), v277, v261);
      float32x4_t v215 = vmlaq_f32(vmulq_f32(v256, v276), v278, v265);
      float32x4_t v550 = v276;
      float32x4_t v551 = v279;
      float32x4_t v219 = vmlaq_f32(vmulq_f32(v254, v277), v276, v260);
      float32x4_t v542 = v277;
      float32x4_t v543 = v215;
      v541[0] = v278;
      v541[1] = v219;
      uint64_t v280 = 0xFFFFLL;
      for (uint64_t k = 0xFFFFLL; v233 != 0xFFFF; uint64_t k = 0xFFFFLL)
      {
        if (*(unsigned char *)(v16 + 44 * v233 + 5))
        {
          uint64_t k = v233;
          break;
        }
        uint64_t v233 = *(unsigned __int16 *)(v16 + 44 * v233 + 2);
      }
      while (v234 != 0xFFFF)
      {
        if (*(unsigned char *)(v16 + 44 * v234 + 5))
        {
          uint64_t v280 = v234;
          break;
        }
        uint64_t v234 = *(unsigned __int16 *)(v16 + 44 * v234 + 2);
        uint64_t v280 = 0xFFFFLL;
      }
      int v282 = 0xFFFF;
      uint64_t v283 = 0xFFFFLL;
      if (v235 == 0xFFFF) {
        goto LABEL_156;
      }
      do
      {
        if (*(unsigned char *)(v16 + 44 * v235 + 5))
        {
          uint64_t v283 = v235;
          break;
        }
        uint64_t v235 = *(unsigned __int16 *)(v16 + 44 * v235 + 2);
        uint64_t v283 = 0xFFFFLL;
      }
      while (v235 != 0xFFFF);
LABEL_156:
      while (v236 != 0xFFFF)
      {
        if (*(unsigned char *)(v16 + 44 * v236 + 5))
        {
          int v282 = v236;
          break;
        }
        unsigned int v236 = *(unsigned __int16 *)(v16 + 44 * v236 + 2);
        int v282 = 0xFFFF;
      }
      uint64_t v284 = 0xFFFFLL;
      int v485 = k;
      unsigned int v285 = 1;
      if (k == 0xFFFF)
      {
LABEL_164:
        uint64_t v286 = 0xFFFFLL;
      }
      else
      {
        uint64_t v286 = k;
        while (v285 == *(unsigned __int8 *)(v16 + 44 * v286 + 5))
        {
          unsigned int v285 = 0;
          uint64_t v286 = *(unsigned __int16 *)(v16 + 44 * v286 + 2);
          if (v286 == 0xFFFF) {
            goto LABEL_164;
          }
        }
      }
      unsigned int v287 = 1;
      if (v280 != 0xFFFF)
      {
        uint64_t v284 = v280;
        while (v287 == *(unsigned __int8 *)(v16 + 44 * v284 + 5))
        {
          unsigned int v287 = 0;
          uint64_t v284 = *(unsigned __int16 *)(v16 + 44 * v284 + 2);
          if (v284 == 0xFFFF)
          {
            uint64_t v284 = 0xFFFFLL;
            break;
          }
        }
      }
      unsigned int v288 = 0xFFFF;
      unsigned int v289 = 1;
      if (v283 == 0xFFFF)
      {
LABEL_174:
        uint64_t v290 = 0xFFFFLL;
      }
      else
      {
        uint64_t v290 = v283;
        while (v289 == *(unsigned __int8 *)(v16 + 44 * v290 + 5))
        {
          unsigned int v289 = 0;
          uint64_t v290 = *(unsigned __int16 *)(v16 + 44 * v290 + 2);
          if (v290 == 0xFFFF) {
            goto LABEL_174;
          }
        }
      }
      unsigned int v291 = 1;
      if (v282 != 0xFFFF)
      {
        unsigned int v288 = v282;
        while (v291 == *(unsigned __int8 *)(v16 + 44 * v288 + 5))
        {
          unsigned int v291 = 0;
          unsigned int v288 = *(unsigned __int16 *)(v16 + 44 * v288 + 2);
          if (v288 == 0xFFFF)
          {
            unsigned int v288 = 0xFFFF;
            break;
          }
        }
      }
      if (v455 < v491)
      {
        BOOL v294 = v286 != 0xFFFF && v285 < *(unsigned __int8 *)(v16 + 44 * v286 + 5);
        unsigned int v292 = v280;
        int v293 = !v294;
      }
      else
      {
        unsigned int v292 = v280;
        int v293 = 1;
      }
      int v295 = v455 >= v510 || v284 == 0xFFFF || v287 >= *(unsigned __int8 *)(v16 + 44 * v284 + 5)
           ? 2
           : 0;
      int v296 = v455 >= v222 || v290 == 0xFFFF || v289 >= *(unsigned __int8 *)(v16 + 44 * v290 + 5)
           ? 4
           : 0;
      unsigned int v494 = v289;
      if (v455 >= v489 || v288 == 0xFFFF || v291 >= *(unsigned __int8 *)(v16 + 44 * v288 + 5)) {
        int v297 = 8;
      }
      else {
        int v297 = 0;
      }
      _X23 = v516 + 176;
      v211 += 16 * v232 + 96;
      if (((v455 >= v491) | (2 * (v455 >= v510)) | (4 * (v455 >= v513)) | v487) != 0xF) {
        break;
      }
      uint64_t v218 = v516 + 176;
LABEL_260:
      unsigned int v217 = v455 + 1;
      char v205 = v478;
      unsigned int v116 = v452;
      if (v455 + 1 == v449) {
        goto LABEL_261;
      }
    }
    uint64_t v299 = v290;
    uint64_t v300 = v284;
    uint64_t v301 = v286;
    unsigned int v481 = v291;
    unsigned int v492 = v287;
    unsigned int v482 = v288;
    unsigned int v483 = v282;
    uint64_t v302 = 0;
    unsigned int v480 = 0;
    unsigned int v303 = 0;
    unsigned int v304 = 0;
    unsigned int v305 = 0;
    uint64_t v306 = v295 | v293 | v296 | v297;
    float32x4_t v474 = v255;
    float32x4_t v475 = v254;
    float32x4_t v307 = vmlaq_f32(v257, v256, v256);
    float32x4_t v472 = vmulq_f32(v518, v307);
    float32x4_t v473 = vmlaq_f32(vmlaq_f32(vmulq_f32(v156, v254), v149, v255), v150, v256);
    float32x4_t v457 = vmlaq_f32(vmlaq_f32(v258, v496, v255), v495, v256);
    float32x4_t v511 = vmulq_f32(v450, v307);
    float32x4_t v484 = v256;
    LODWORD(v308) = v485;
    while (2)
    {
      unsigned int v490 = v285;
      __asm
      {
        PRFM            #0, [X23,#0x180]
        PRFM            #0, [X23,#0x200]
        PRFM            #0, [X23,#0x280]
      }
      int v486 = v308;
      int v479 = v283;
      unint64_t v312 = *((void *)v478 + 17)
           + ((unint64_t)(v305 + *(unsigned __int16 *)(v16 + 44 * v308)) << 6);
      unint64_t v313 = *((void *)v478 + 43) + ((unint64_t)(v304 + *(unsigned __int16 *)(v16 + 44 * v292)) << 6);
      unint64_t v314 = *((void *)v478 + 69)
           + ((unint64_t)(v303 + *(unsigned __int16 *)(v16 + 44 * v283)) << 6);
      unint64_t v315 = *((void *)v478 + 95) + ((unint64_t)(v480 + *(unsigned __int16 *)(v16 + 44 * v483)) << 6);
      int8x16_t v317 = *(int8x16_t *)(v312 + 16);
      int32x4_t v316 = *(int32x4_t *)(v312 + 32);
      int8x16_t v319 = *(int8x16_t *)(v314 + 16);
      int32x4_t v318 = *(int32x4_t *)(v314 + 32);
      int32x4_t v320 = vzip1q_s32((int32x4_t)v317, (int32x4_t)v319);
      int8x16_t v321 = *(int8x16_t *)(v313 + 16);
      int32x4_t v322 = *(int32x4_t *)(v313 + 32);
      int32x4_t v323 = *(int32x4_t *)(v315 + 16);
      int32x4_t v324 = *(int32x4_t *)(v315 + 32);
      int32x4_t v325 = vzip1q_s32((int32x4_t)v321, v323);
      float32x4_t v326 = (float32x4_t)vzip1q_s32(v320, v325);
      float32x4_t v327 = (float32x4_t)vzip2q_s32(v320, v325);
      float32x4_t v328 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v317, (int32x4_t)v319), vzip2q_s32((int32x4_t)v321, v323));
      v335.i32[1] = v461.i32[1];
      float32x4_t v329 = (float32x4_t)vbicq_s8((int8x16_t)vsubq_f32(v326, v469), (int8x16_t)vcgtq_f32(v464, vabdq_f32(v326, v469)));
      float32x4_t v330 = (float32x4_t)vbicq_s8((int8x16_t)vsubq_f32(v327, v468), (int8x16_t)vcgtq_f32(v464, vabdq_f32(v327, v468)));
      float32x4_t v331 = (float32x4_t)vbicq_s8((int8x16_t)vsubq_f32(v328, v461), (int8x16_t)vcgtq_f32(v464, vabdq_f32(v328, v461)));
      float32x4_t v332 = (float32x4_t)vbicq_s8((int8x16_t)vsubq_f32(v326, v467), (int8x16_t)vcgtq_f32(v464, vabdq_f32(v326, v467)));
      float32x4_t v333 = (float32x4_t)vbicq_s8((int8x16_t)vsubq_f32(v327, v466), (int8x16_t)vcgtq_f32(v464, vabdq_f32(v327, v466)));
      float32x4_t v334 = (float32x4_t)vbicq_s8((int8x16_t)vsubq_f32(v328, v460), (int8x16_t)vcgtq_f32(v464, vabdq_f32(v328, v460)));
      v312 += 12;
      v335.i32[0] = *(_DWORD *)(v313 + 12);
      unsigned int v336 = (const float *)(v314 + 12);
      int8x8_t v337 = (int8x8_t)vld1_dup_f32((const float *)v312);
      int8x8_t v338 = (int8x8_t)vld1_dup_f32(v336);
      int8x8_t v488 = v338;
      v338.i32[0] = *(_DWORD *)(v315 + 12);
      float32x4_t v339 = vmlsq_f32(vmulq_f32(v256, v330), v474, v331);
      float32x4_t v340 = vmlsq_f32(vmulq_f32(v475, v331), v256, v329);
      float32x4_t v341 = vmlaq_f32(vmulq_f32(v531, v339), v340, v529);
      float32x4_t v342 = vmlaq_f32(vmulq_f32(v527, v339), v340, v525);
      float32x4_t v343 = vmlaq_f32(vmulq_f32(v524, v339), v340, v523);
      float32x4_t v344 = vmlaq_f32(vmulq_f32(v210, v339), v535, v340);
      float32x4_t v345 = vmlsq_f32(vmulq_f32(v474, v329), v475, v330);
      float32x4_t v346 = vmlaq_f32(v341, v345, v522);
      float32x4_t v347 = vmlaq_f32(v342, v345, v520);
      float32x4_t v348 = vmlaq_f32(v343, v345, v206);
      float32x4_t v349 = vmlaq_f32(v344, v533, v345);
      float32x4_t v350 = vaddq_f32(v472, vmlaq_f32(vmlaq_f32(vmulq_f32(v346, v346), v347, v347), v348, v348));
      float32x4_t v351 = vaddq_f32(v473, v349);
      float32x4_t v514 = v334;
      float32x4_t v517 = v333;
      if (v107)
      {
        float32x4_t v353 = vmlsq_f32(vmulq_f32(v256, v333), v474, v334);
        float32x4_t v354 = vmlsq_f32(vmulq_f32(v475, v334), v256, v332);
        float32x4_t v352 = v332;
        int8x8_t v458 = v337;
        int8x8_t v459 = v335;
        float32x4_t v355 = vmlsq_f32(vmulq_f32(v474, v332), v475, v333);
        float32x4_t v356 = vmlaq_f32(vmlaq_f32(vmulq_f32(v505, v353), v354, v504), v355, v499);
        float32x4_t v357 = vmlaq_f32(vmlaq_f32(vmulq_f32(v503, v353), v354, v502), v355, v498);
        float32x4_t v358 = vmlaq_f32(vmlaq_f32(vmulq_f32(v501, v353), v354, v500), v355, v509);
        float32x4_t v350 = vaddq_f32(v350, vaddq_f32(v511, vmlaq_f32(vmlaq_f32(vmulq_f32(v356, v356), v357, v357), v358, v358)));
        float32x4_t v351 = vsubq_f32(v351, vaddq_f32(v457, vmlaq_f32(vmlaq_f32(vmulq_f32(v508, v353), v507, v354), v506, v355)));
        *(float32x4_t *)(_X23 + 128) = v356;
        *(float32x4_t *)(_X23 + 144) = v357;
        float32x4_t v256 = v484;
        *(float32x4_t *)(_X23 + 160) = v358;
        int8x8_t v337 = v458;
        int8x8_t v335 = v459;
      }
      else
      {
        float32x4_t v352 = v332;
      }
      uint64_t v308 = v301;
      uint64_t v218 = _X23 + v463;
      int32x4_t v359 = vzip1q_s32(v316, v318);
      int8x16_t v360 = (int8x16_t)vzip2q_s32(v316, v318);
      int32x4_t v361 = vzip1q_s32(v322, v324);
      int32x4_t v362 = vzip2q_s32(v322, v324);
      float32x4_t v363 = (float32x4_t)vzip1q_s32(v359, v361);
      float32x4_t v364 = (float32x4_t)vzip2q_s32(v359, v361);
      float32x4_t v365 = (float32x4_t)vzip1q_s32((int32x4_t)v360, v362);
      *(int8x8_t *)v366.f32 = vext_s8(v337, v335, 4uLL);
      *(int8x8_t *)&v366.u32[2] = vext_s8(v488, v338, 4uLL);
      *(int32x2_t *)v360.i8 = vdup_laneq_s32((int32x4_t)v321, 3);
      *(int32x2_t *)v321.i8 = vdup_laneq_s32(v323, 3);
      *(void *)&long long v367 = vextq_s8(v317, v360, 0xCuLL).u64[0];
      *((void *)&v367 + 1) = vextq_s8(v319, v321, 0xCuLL).u64[0];
      float32x4_t v368 = vmlaq_f32(vmlaq_f32(vmulq_f32(v256, v365), v364, v474), v363, v475);
      float32x4_t v369 = vnegq_f32(v331);
      float32x4_t v370 = vnegq_f32(v329);
      float32x4_t v371 = vnegq_f32(v330);
      float32x4_t v372 = vrecpeq_f32(v350);
      int v373 = 4;
      unsigned int v374 = v285;
      do
      {
        float32x4_t v372 = vmulq_f32(v372, vrecpsq_f32(v372, v350));
        --v373;
      }
      while (v373);
      int v375 = 0;
      float32x4_t v376 = (float32x4_t)vandq_s8((int8x16_t)v372, (int8x16_t)vcgtzq_f32(v350));
      float32x4_t v377 = vsubq_f32(v366, v470);
      float32x4_t v378 = vnegq_f32(v351);
      int8x16_t v379 = vandq_s8(vandq_s8((int8x16_t)vcgtq_f32(v462, v351), (int8x16_t)vcgtzq_f32(v477)), (int8x16_t)vcgtq_f32(v378, vmulq_n_f32(v377, *(float *)&a6)));
      *(float32x4_t *)_X23 = v346;
      *(float32x4_t *)(_X23 + 16) = v347;
      *(float32x4_t *)(_X23 + 32) = v348;
      *(void *)(_X23 + 48) = 0;
      *(void *)(_X23 + 56) = 0;
      *(float32x4_t *)(_X23 + 64) = v376;
      *(float32x4_t *)(_X23 + 80) = vsubq_f32(vaddq_f32(v368, (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v477, v378), v379)), v351);
      *(int8x16_t *)(_X23 + 96) = vbicq_s8((int8x16_t)vmulq_f32(v376, vmaxq_f32(v471, vmulq_n_f32(v377, *(float *)&a6 * 0.8))), vandq_s8(v379, (int8x16_t)vcgeq_f32(v465, v377)));
      *(_OWORD *)(_X23 + 112) = v367;
      float32x4_t v380 = v517;
      float32x4_t v381 = vnegq_f32(v514);
      float32x4_t v382 = vnegq_f32(v352);
      float32x4_t v219 = vnegq_f32(v517);
      float32x4_t v383 = (float32x4_t *)v211;
      int v384 = v299;
      do
      {
        float32x4_t v385 = *(&v550 + v302);
        float32x4_t v386 = *(&v542 + v302);
        float32x4_t v387 = (float32x4_t)v541[v302];
        float32x4_t v388 = vmlaq_f32(vmulq_f32(v330, v387), v386, v369);
        float32x4_t v389 = vmlaq_f32(vmulq_f32(v331, v385), v387, v370);
        float32x4_t v390 = vmlaq_f32(vmulq_f32(v531, v388), v389, v529);
        float32x4_t v391 = vmlaq_f32(vmulq_f32(v527, v388), v389, v525);
        float32x4_t v392 = vmlaq_f32(vmulq_f32(v524, v388), v389, v523);
        float32x4_t v393 = vmlaq_f32(vmulq_f32(v210, v388), v535, v389);
        float32x4_t v394 = vmlaq_f32(vmulq_f32(v329, v386), v385, v371);
        float32x4_t v395 = vmlaq_f32(v390, v394, v522);
        float32x4_t v396 = vmlaq_f32(v391, v394, v520);
        float32x4_t v397 = vmlaq_f32(v392, v394, v206);
        float32x4_t v398 = vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v150, v387), v149, v386), v156, v385), vmlaq_f32(v393, v533, v394));
        v215.i32[1] = v518.i32[1];
        float32x4_t v399 = vaddq_f32(v518, vmlaq_f32(vmlaq_f32(vmulq_f32(v395, v395), v396, v396), v397, v397));
        if (v107)
        {
          float32x4_t v400 = vmlaq_f32(vmulq_f32(v380, v387), v386, v381);
          float32x4_t v401 = vmlaq_f32(vmulq_f32(v514, v385), v387, v382);
          float32x4_t v215 = v150;
          float32x4_t v402 = v149;
          float32x4_t v403 = v156;
          float32x4_t v404 = v210;
          float32x4_t v405 = v206;
          float32x4_t v406 = vmlaq_f32(vmulq_f32(v505, v400), v401, v504);
          float32x4_t v407 = vmlaq_f32(vmulq_f32(v503, v400), v401, v502);
          float32x4_t v408 = vmlaq_f32(vmulq_f32(v501, v400), v401, v500);
          float32x4_t v409 = vmlaq_f32(vmulq_f32(v508, v400), v507, v401);
          float32x4_t v410 = vmlaq_f32(vmulq_f32(v352, v386), v385, v219);
          float32x4_t v411 = vmlaq_f32(v406, v410, v499);
          float32x4_t v412 = vmlaq_f32(v407, v410, v498);
          float32x4_t v413 = vmlaq_f32(v408, v410, v509);
          float32x4_t v398 = vsubq_f32(v398, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v495, v387), v496, v386), v497, v385), vmlaq_f32(v409, v506, v410)));
          float32x4_t v380 = v517;
          float32x4_t v399 = vaddq_f32(v399, vaddq_f32(v511, vmlaq_f32(vmlaq_f32(vmulq_f32(v411, v411), v412, v412), v413, v413)));
          v383[9] = v411;
          v383[10] = v412;
          float32x4_t v156 = v403;
          float32x4_t v149 = v402;
          float32x4_t v150 = v215;
          v383[11] = v413;
          float32x4_t v206 = v405;
          float32x4_t v210 = v404;
        }
        uint64_t v211 = (uint64_t)&v383[v108];
        uint64_t v302 = 1 - v302;
        float32x4_t v414 = vrecpeq_f32(v399);
        int v415 = 4;
        do
        {
          float32x4_t v414 = vmulq_f32(v414, vrecpsq_f32(v414, v399));
          --v415;
        }
        while (v415);
        v383[6].i64[0] = 0;
        v383[6].i64[1] = 0;
        v383[4] = v396;
        v383[5] = v397;
        v383[7] = vnegq_f32((float32x4_t)vandq_s8((int8x16_t)v414, (int8x16_t)vcgtzq_f32(v399)));
        v383[8] = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v363, v385), v386, v364), v387, v365), v398);
        *float32x4_t v383 = v385;
        v383[1] = v386;
        v383[2] = v387;
        v383[3] = v395;
        ++v375;
        float32x4_t v383 = (float32x4_t *)((char *)v383 + v108 * 16);
      }
      while (v375 != v17);
      if (v306)
      {
        uint64_t v416 = v308;
        unsigned int v490 = v305;
        LODWORD(v308) = v486;
        uint64_t v418 = v306;
        float32x4_t v256 = v484;
        if ((v306 & 2) == 0) {
          goto LABEL_228;
        }
      }
      else
      {
        unsigned int v374 = v285 + 1;
        uint64_t v416 = 0xFFFFLL;
        float32x4_t v256 = v484;
        if (v308 == 0xFFFF)
        {
          BOOL v417 = 0;
        }
        else
        {
          uint64_t v416 = v308;
          while (1)
          {
            unsigned int v424 = *(unsigned __int8 *)(v16 + 44 * v416 + 5);
            if (v374 != v424) {
              break;
            }
            unsigned int v374 = 0;
            uint64_t v416 = *(unsigned __int16 *)(v16 + 44 * v416 + 2);
            if (v416 == 0xFFFF)
            {
              unsigned int v374 = 0;
              BOOL v417 = 0;
              uint64_t v416 = 0xFFFFLL;
              goto LABEL_227;
            }
          }
          BOOL v417 = v374 < v424;
        }
LABEL_227:
        uint64_t v418 = v306 | !v417;
        if ((v306 & 2) == 0)
        {
LABEL_228:
          unsigned int v419 = v492 + 1;
          uint64_t v420 = 0xFFFFLL;
          if (v300 == 0xFFFF)
          {
            int v425 = 2;
          }
          else
          {
            uint64_t v420 = v300;
            while (1)
            {
              unsigned int v426 = *(unsigned __int8 *)(v16 + 44 * v420 + 5);
              if (v419 != v426) {
                break;
              }
              unsigned int v419 = 0;
              uint64_t v420 = *(unsigned __int16 *)(v16 + 44 * v420 + 2);
              if (v420 == 0xFFFF)
              {
                int v425 = 2;
                uint64_t v420 = 0xFFFFLL;
                goto LABEL_237;
              }
            }
            if (v419 >= v426) {
              int v425 = 2;
            }
            else {
              int v425 = 0;
            }
          }
LABEL_237:
          uint64_t v418 = v425 | v418;
          if ((v306 & 4) == 0)
          {
LABEL_238:
            unsigned int v421 = v494 + 1;
            uint64_t v422 = 0xFFFFLL;
            if (v299 == 0xFFFF)
            {
              int v427 = 4;
              unsigned int v423 = v481;
            }
            else
            {
              uint64_t v422 = v299;
              unsigned int v423 = v481;
              while (1)
              {
                unsigned int v428 = *(unsigned __int8 *)(v16 + 44 * v422 + 5);
                if (v421 != v428) {
                  break;
                }
                unsigned int v421 = 0;
                uint64_t v422 = *(unsigned __int16 *)(v16 + 44 * v422 + 2);
                if (v422 == 0xFFFF)
                {
                  int v427 = 4;
                  uint64_t v422 = 0xFFFFLL;
                  goto LABEL_247;
                }
              }
              if (v421 >= v428) {
                int v427 = 4;
              }
              else {
                int v427 = 0;
              }
            }
LABEL_247:
            uint64_t v418 = v427 | v418;
            uint64_t v218 = _X23 + v463;
            if ((v306 & 8) == 0)
            {
LABEL_248:
              uint64_t v429 = v218;
              unsigned int v430 = v423 + 1;
              unsigned int v431 = 0xFFFF;
              if (v482 == 0xFFFF)
              {
                int v432 = 8;
              }
              else
              {
                unsigned int v431 = v482;
                while (1)
                {
                  unsigned int v433 = *(unsigned __int8 *)(v16 + 44 * v431 + 5);
                  if (v430 != v433) {
                    break;
                  }
                  unsigned int v430 = 0;
                  unsigned int v431 = *(unsigned __int16 *)(v16 + 44 * v431 + 2);
                  if (v431 == 0xFFFF)
                  {
                    int v432 = 8;
                    unsigned int v431 = 0xFFFF;
                    goto LABEL_257;
                  }
                }
                if (v430 >= v433) {
                  int v432 = 8;
                }
                else {
                  int v432 = 0;
                }
              }
LABEL_257:
              uint64_t v418 = v432 | v418;
              unsigned int v483 = v482;
              unsigned int v480 = v423;
              unsigned int v482 = v431;
              unsigned int v481 = v430;
              uint64_t v218 = v429;
            }
LABEL_258:
            _X23 = v218;
            unsigned int v292 = v300;
            unsigned int v303 = v494;
            unsigned int v304 = v492;
            unsigned int v305 = v490;
            uint64_t v299 = v422;
            unsigned int v494 = v421;
            uint64_t v300 = v420;
            unsigned int v492 = v419;
            LODWORD(v283) = v384;
            uint64_t v301 = v416;
            unsigned int v285 = v374;
            _ZF = v306 == 15;
            uint64_t v306 = v418;
            if (_ZF) {
              goto LABEL_260;
            }
            continue;
          }
LABEL_220:
          unsigned int v421 = v494;
          uint64_t v422 = v299;
          unsigned int v494 = v303;
          int v384 = v479;
          unsigned int v423 = v481;
          if ((v306 & 8) == 0) {
            goto LABEL_248;
          }
          goto LABEL_258;
        }
      }
      break;
    }
    unsigned int v419 = v492;
    uint64_t v420 = v300;
    unsigned int v492 = v304;
    LODWORD(v300) = v292;
    if ((v306 & 4) == 0) {
      goto LABEL_238;
    }
    goto LABEL_220;
  }
LABEL_261:
  *(void *)(v435 + v434) = 0xFFFFFFFF00000000;
  return 2;
}

uint64_t physx::Dy::createFinalizeSolverContactsCoulomb(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (***a4)(void, void), int a5, uint64_t a6, double a7, int32x2_t a8, int32x2_t a9, double a10, double a11, double a12, double a13, int32x2_t a14)
{
  uint64_t v17 = *(void *)(a1 + 16);
  *(_WORD *)(v17 + 30) = 0;
  *(_DWORD *)(a3 + 4112) = 0;
  _X8 = *(void *)(a1 + 160);
  __asm { PRFM            #0, [X8] }
  _X8 = *(void *)(a1 + 40);
  _X9 = *(void *)(a1 + 48);
  if (*(float *)(_X8 + 76) >= *(float *)(_X9 + 76)) {
    float v26 = *(float *)(_X9 + 76);
  }
  else {
    float v26 = *(float *)(_X8 + 76);
  }
  uint64_t v27 = *a2;
  if (!*a2
    || ((v28 = *(unsigned char *)(v27 + 43), (v28 & 2) != 0) ? (uint64_t v29 = 64) : (uint64_t v29 = 16),
        (*(unsigned char *)(v27 + 43) & 4) != 0 || (int v31 = *((unsigned __int8 *)a2 + 25), !*((unsigned char *)a2 + 25))))
  {
    *(_DWORD *)(a3 + 4112) = 0;
    goto LABEL_59;
  }
  unsigned int v34 = 0;
  int v35 = 0;
  unsigned int v36 = 0;
  int v37 = 0;
  float v38 = (void *)(a3 + 11812);
  float v39 = (unsigned char *)(a3 + 6945);
  uint64_t v40 = a3 + 16;
  _X13 = a2[1];
  v14.i32[0] = *(_DWORD *)v27;
  LODWORD(a11) = *(_DWORD *)(v27 + 4);
  a14.i32[0] = *(_DWORD *)(v27 + 8);
  LODWORD(a10) = *(_DWORD *)(v27 + 12);
  if ((*(unsigned char *)(v27 + 43) & 2) != 0) {
    char v42 = 6;
  }
  else {
    char v42 = 4;
  }
  if (v28 < 0)
  {
    uint64_t v29 = 32;
    char v42 = 5;
  }
  unsigned int v43 = v28 & 0xFFFFFF82;
  do
  {
    if (v35)
    {
      unsigned int v44 = *(unsigned __int8 *)(v27 + 41);
      _CF = v44 >= v36;
      unsigned int v46 = v44 - v36;
      BOOL v45 = v46 != 0 && _CF;
      LODWORD(v47) = v46 << v42;
      if (v45) {
        uint64_t v47 = v47;
      }
      else {
        uint64_t v47 = 0;
      }
      _X13 += v47;
      v27 += 48;
    }
    unsigned int v36 = *(unsigned __int8 *)(v27 + 41);
    if (*(unsigned char *)(v27 + 41))
    {
      for (int i = *(unsigned __int8 *)(v27 + 41); i; --i)
      {
        if (v37) {
          uint64_t v49 = v29;
        }
        else {
          uint64_t v49 = 0;
        }
        _X13 += v49;
        __asm { PRFM            #0, [X13,#0x80] }
        _X3 = (_OWORD *)(v40 + ((unint64_t)v34 << 6));
        __asm { PRFM            #0, [X3,#0x80] }
        float v53 = v26;
        if ((v28 & 0x20) != 0)
        {
          if (!v43)
          {
            float v53 = 3.4028e38;
LABEL_32:
            *(void *)&long long v54 = *(void *)(v27 + 16);
            unint64_t v55 = v40 + ((unint64_t)v34 << 6);
            DWORD2(v54) = *(_DWORD *)(v27 + 24);
            HIDWORD(v54) = *(_DWORD *)(_X13 + 12);
            *_X3 = v54;
            *(void *)(v55 + 16) = *(void *)_X13;
            *(_DWORD *)(v55 + 24) = *(_DWORD *)(_X13 + 8);
            *(unsigned char *)(v55 + 48) = *(unsigned char *)(v27 + 42);
            *(float *)(v55 + 28) = v53;
            *(_DWORD *)(v55 + 44) = *(_DWORD *)(v27 + 36);
            *(int32x2_t *)(v55 + 56) = vrev64_s32(*(int32x2_t *)(v27 + 28));
            if (v43)
            {
              uint64_t v56 = *(void *)(_X13 + 16);
              int v57 = *(_DWORD *)(_X13 + 24);
            }
            else
            {
              uint64_t v56 = 0;
              int v57 = 0;
            }
            *(void *)(v55 + 32) = v56;
            *(_DWORD *)(v55 + 40) = v57;
            ++v34;
            goto LABEL_36;
          }
          float v53 = *(float *)(_X13 + 28);
        }
        if (v53 != 0.0) {
          goto LABEL_32;
        }
LABEL_36:
        int v37 = 1;
      }
    }
    ++v35;
  }
  while (v35 != v31);
  *(_DWORD *)(a3 + 4112) = v34;
  if (!v34)
  {
LABEL_59:
    *(void *)(a1 + 160) = 0;
    *(unsigned char *)(a1 + 168) = 0;
    return 1;
  }
  int32x2_t v290 = a14;
  double v286 = a11;
  double v287 = a10;
  _X10 = *(void *)(a1 + 24);
  __asm { PRFM            #0, [X10] }
  _X10 = *(void *)(a1 + 32);
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X8]
    PRFM            #0, [X9]
  }
  uint64_t v64 = a3 + 4128;
  *float v38 = 0;
  uint64_t v302 = v38;
  uint64_t v289 = a3;
  physx::Dy::createContactPatches(a3 + 4128, a3 + 16, v34, 0.999);
  if (a5 == 1) {
    int v65 = 1;
  }
  else {
    int v65 = 2;
  }
  physx::Dy::correlatePatches(v64, v40, (float *)(a1 + 56), (float *)(a1 + 84), 0, 0, 0.999);
  uint64_t v70 = v289;
  int v71 = *(_DWORD *)(a1 + 116) | *(_DWORD *)(a1 + 112);
  uint64_t v72 = *(unsigned int *)(v289 + 11816);
  int v284 = a5;
  if (v72)
  {
    unsigned int v73 = 0;
    if ((v71 & 8) != 0) {
      int v74 = 112;
    }
    else {
      int v74 = 48;
    }
    if ((v71 & 8) != 0) {
      char v75 = 7;
    }
    else {
      char v75 = 6;
    }
    uint64_t v76 = (int *)(v289 + 11424);
    int32x2_t v77 = *(int32x2_t *)&v286;
    int32x2_t v78 = *(int32x2_t *)&v287;
    do
    {
      int v80 = *v76++;
      int v79 = v80;
      if (v80)
      {
        int v81 = v73 + v79 * v74 + 80;
        unsigned int v82 = (4 * v79 + 12) & 0xFFFFFFF0;
        if (*v39) {
          unsigned int v73 = v82 + v81;
        }
        else {
          unsigned int v73 = (v79 << (a5 != 1) << v75) + v81 + v82;
        }
      }
      v39 += 104;
      --v72;
    }
    while (v72);
    unsigned int v83 = (v73 + 15) & 0xFFFFFFF0;
    if (v83)
    {
      char v84 = *(unsigned char *)(a1 + 116) | *(unsigned char *)(a1 + 112);
      uint64_t v85 = (**a4)(a4, v83 + 16);
      if ((unint64_t)(v85 + 1) <= 1)
      {
        uint64_t result = 0;
        *(void *)(a1 + 160) = 0;
        *(void *)(v17 + 32) = 0;
        *(_WORD *)(v17 + 30) = 0;
        *(unsigned char *)(a1 + 168) = 0;
        return result;
      }
      _X23 = v85;
      uint64_t v70 = v289;
      int32x2_t v77 = *(int32x2_t *)&v286;
      int32x2_t v78 = *(int32x2_t *)&v287;
      LOBYTE(v71) = v84;
    }
    else
    {
      _X23 = 0;
    }
  }
  else
  {
    _X23 = 0;
    unsigned int v83 = 0;
    int32x2_t v77 = *(int32x2_t *)&v286;
    int32x2_t v78 = *(int32x2_t *)&v287;
  }
  *(void *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  *(void *)(v17 + 32) = _X23;
  *((unsigned char *)a2 + 24) = v34;
  unsigned int v278 = v83;
  *(_WORD *)(v17 + 30) = v83 >> 4;
  if (_X23)
  {
    uint64_t v89 = *(void *)(a1 + 40);
    uint64_t v88 = *(void *)(a1 + 48);
    if ((v71 & 8) != 0)
    {
      __int16 v272 = *(_WORD *)(v17 + 16);
      uint64_t v273 = *(void *)(a1 + 32);
      v310[0] = *(void *)(a1 + 24);
      v310[1] = v89;
      __int16 v311 = v272;
      __int16 v274 = *(_WORD *)(v17 + 18);
      v308[0] = v273;
      v308[1] = v88;
      __int16 v309 = v274;
      v67.i32[0] = *(_DWORD *)(a1 + 152);
      v68.i32[0] = *(_DWORD *)(a1 + 156);
      v66.i32[0] = v14.i32[0];
      int v182 = physx::Dy::setupFinalizeExtSolverContactsCoulomb(v40, v64, a1 + 56, a1 + 84, (int32x2_t *)_X23, (uint64_t)v310, (uint64_t)v308, v65, a7, a8, v66, v77, v290, v78, v67, v68, a6);
      unsigned int v275 = v83;
    }
    else
    {
      _X9 = v70 + 11684;
      __asm { PRFM            #0, [X9] }
      _X9 = v302;
      __asm { PRFM            #0, [X9] }
      uint64_t v94 = *(unsigned int *)(v70 + 11816);
      if (*(_DWORD *)(a1 + 116) == 2) {
        char v95 = 5;
      }
      else {
        char v95 = 1;
      }
      if (*(_DWORD *)(a1 + 116) == 2) {
        char v96 = 11;
      }
      else {
        char v96 = 10;
      }
      char v279 = v96;
      uint64_t v277 = _X23;
      if (v94)
      {
        uint64_t v97 = 0;
        uint64_t v98 = *(void *)(a1 + 128);
        float32x4_t v99 = (float32x4_t)vdupq_lane_s32(a9, 0);
        v99.i32[3] = 0;
        float32x4_t v100 = *(float32x4_t *)(a1 + 72);
        v100.i64[1] = *(unsigned int *)(a1 + 80);
        float32x4_t v101 = *(float32x4_t *)(a1 + 100);
        v101.i64[1] = *(unsigned int *)(a1 + 108);
        float32x4_t v295 = v101;
        v101.i64[0] = *(void *)v89;
        v101.i64[1] = *(unsigned int *)(v89 + 8);
        float32x4_t v281 = v101;
        v101.i64[0] = *(void *)v88;
        v101.i64[1] = *(unsigned int *)(v88 + 8);
        float32x4_t v280 = v101;
        v101.i64[0] = *(void *)(v89 + 16);
        v101.i64[1] = *(unsigned int *)(v89 + 24);
        float32x4_t v294 = v101;
        v101.i64[0] = *(void *)(v88 + 16);
        v101.i64[1] = *(unsigned int *)(v88 + 24);
        float32x4_t v307 = v101;
        v102.i64[0] = *(void *)(v89 + 32);
        v103.i64[0] = *(void *)(v89 + 44);
        char v104 = *(unsigned char *)(a1 + 150);
        float32x2_t v105 = vmax_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)(v89 + 68), 0), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(v88 + 68), 0));
        v102.i64[1] = *(unsigned int *)(v89 + 40);
        v103.i64[1] = *(unsigned int *)(v89 + 52);
        float32x4_t v303 = v103;
        float32x4_t v305 = v102;
        v106.i64[0] = *(void *)(v89 + 56);
        v106.i64[1] = *(unsigned int *)(v89 + 64);
        float32x4_t v301 = v106;
        v106.i64[0] = *(void *)(v88 + 32);
        v106.i64[1] = *(unsigned int *)(v88 + 40);
        float32x4_t v300 = v106;
        v106.i64[0] = *(void *)(v88 + 44);
        v106.i64[1] = *(unsigned int *)(v88 + 52);
        float32x4_t v299 = v106;
        v106.i64[0] = *(void *)(v88 + 56);
        v106.i64[1] = *(unsigned int *)(v88 + 64);
        float32x4_t v298 = v106;
        float32x2_t v107 = vmul_n_f32((float32x2_t)vdup_n_s32(0x3F4CCCCDu), *(float *)&a7);
        *(float32x2_t *)v103.f32 = vmul_f32(v14, *(float32x2_t *)(v89 + 12));
        float32x2_t v108 = vmul_n_f32(vneg_f32((float32x2_t)vdup_lane_s32(v290, 0)), COERCE_FLOAT(*(void *)(v88 + 12)));
        float v109 = *(float *)(a1 + 152);
        float v110 = *(float *)(a1 + 156);
        float32x2_t v111 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0);
        float32x2_t v297 = v108;
        float v112 = -v108.f32[0];
        float32x2_t v113 = (float32x2_t)vdup_lane_s32(a8, 0);
        float v288 = v103.f32[0];
        float32x2_t v114 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v103.f32, 0);
        do
        {
          uint64_t v115 = v70 + 4 * v97;
          int v116 = *(_DWORD *)(v115 + 11424);
          if (v116)
          {
            unsigned int v117 = *(_DWORD *)(v115 + 11552);
            int32x4_t v118 = (float32x2_t *)(v40 + ((unint64_t)*(unsigned __int16 *)(v64 + 44 * v117) << 6));
            unsigned __int32 v119 = v118[1].u32[0];
            uint64_t v120 = (const float *)&v118[7] + 1;
            float32x2_t v121 = vld1_dup_f32(v120);
            uint64_t v122 = _X23 + 48;
            float32x2_t v123 = *v118;
            __asm
            {
              PRFM            #0, [X23,#0xB0]
              PRFM            #0, [X23,#0x130]
              PRFM            #0, [X23,#0x1B0]
            }
            *(unsigned char *)(_X23 + 1) = v116;
            *(unsigned char *)_X23 = v95;
            *(float *)(_X23 + 8) = v288;
            *(float *)(_X23 + 12) = v112;
            *(_DWORD *)(_X23 + 4) = v77.i32[0];
            *(float32x2_t *)(_X23 + 16) = v123;
            *(_DWORD *)(_X23 + 24) = v119;
            *(_DWORD *)(_X23 + 28) = v78.i32[0];
            *(unsigned char *)(_X23 + 40) = v104;
            *(void *)(_X23 + 32) = v98;
            if (v117 == 0xFFFF)
            {
              _X23 += 48;
            }
            else
            {
              *(float32x2_t *)v127.f32 = v123;
              v127.i64[1] = v119;
              float32x4_t v128 = vmulq_f32(v127, v127);
              v128.i64[0] = vpaddq_f32(v128, v128).u64[0];
              float32x2_t v129 = vpadd_f32(*(float32x2_t *)v128.f32, *(float32x2_t *)v128.f32);
              float32x4_t v130 = vmlsq_f32(vmulq_f32(v281, v127), v280, v127);
              v130.i64[0] = vpaddq_f32(v130, v130).u64[0];
              float32x2_t v131 = vpadd_f32(*(float32x2_t *)v130.f32, *(float32x2_t *)v130.f32);
              float32x2_t v132 = vmul_n_f32(v129, v288);
              float32x2_t v133 = vmul_f32(v108, v129);
              float32x2_t v134 = (float32x2_t)vextq_s8((int8x16_t)v127, (int8x16_t)v127, 8uLL).u64[0];
              float32x2_t v135 = (float32x2_t)vext_s8((int8x8_t)v123, (int8x8_t)v134, 4uLL);
              float32x2_t v136 = vneg_f32(v134);
              float32x2_t v137 = vneg_f32(v123);
              do
              {
                int32x4_t v138 = (unsigned __int16 *)(v64 + 44 * v117);
                uint64_t v139 = *((unsigned __int8 *)v138 + 5);
                if (*((unsigned char *)v138 + 5))
                {
                  uint64_t v140 = 0;
                  unint64_t v141 = v40 + ((unint64_t)*v138 << 6);
                  do
                  {
                    unint64_t v142 = v141 + (v140 << 6);
                    v143.i64[0] = *(void *)(v142 + 16);
                    v143.i64[1] = *(unsigned int *)(v142 + 24);
                    v69.i32[0] = *(_DWORD *)(v142 + 12);
                    v144.i64[0] = *(void *)(v142 + 32);
                    v144.i64[1] = *(unsigned int *)(v142 + 40);
                    int8x16_t v145 = (int8x16_t)vsubq_f32(v143, v100);
                    int8x8_t v146 = (int8x8_t)vmla_f32(vmul_f32(v135, *(float32x2_t *)v145.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v145, v145, 4uLL), v137);
                    *(int8x8_t *)v147.i8 = vext_s8(v146, (int8x8_t)vmla_f32(vmul_f32(v123, (float32x2_t)*(_OWORD *)&vextq_s8(v145, v145, 8uLL)), *(float32x2_t *)v145.i8, v136), 4uLL);
                    float32x4_t v148 = vsubq_f32(v143, v295);
                    v147.i64[1] = v146.u32[0];
                    int8x8_t v149 = (int8x8_t)vmla_f32(vmul_f32(v135, *(float32x2_t *)v148.f32), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v148, (int8x16_t)v148, 4uLL), v137);
                    *(int8x8_t *)v148.f32 = vext_s8(v149, (int8x8_t)vmla_f32(vmul_f32(v123, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v148, (int8x16_t)v148, 8uLL)), *(float32x2_t *)v148.f32, v136), 4uLL);
                    float32x4_t v150 = vmulq_f32(v127, v144);
                    v148.i64[1] = v149.u32[0];
                    float32x4_t v151 = (float32x4_t)vbicq_s8(v147, (int8x16_t)vcgtq_f32(v99, vabsq_f32((float32x4_t)v147)));
                    float32x4_t v152 = (float32x4_t)vbicq_s8((int8x16_t)v148, (int8x16_t)vcgtq_f32(v99, vabsq_f32(v148)));
                    float32x4_t v153 = vmulq_n_f32(v305, v151.f32[0]);
                    v153.i32[3] = 0;
                    float32x4_t v154 = vmulq_lane_f32(v303, *(float32x2_t *)v151.f32, 1);
                    v154.i32[3] = 0;
                    float32x4_t v155 = vmulq_laneq_f32(v301, v151, 2);
                    v155.i32[3] = 0;
                    float32x4_t v156 = vaddq_f32(v155, vaddq_f32(v153, v154));
                    float32x4_t v157 = vmulq_n_f32(v300, v152.f32[0]);
                    v157.i32[3] = 0;
                    float32x4_t v158 = vmulq_lane_f32(v299, *(float32x2_t *)v152.f32, 1);
                    v158.i32[3] = 0;
                    float32x4_t v159 = vmulq_laneq_f32(v298, v152, 2);
                    v159.i32[3] = 0;
                    float32x4_t v160 = vaddq_f32(v159, vaddq_f32(v157, v158));
                    float32x4_t v161 = vmulq_f32(v156, v156);
                    v161.i64[0] = vpaddq_f32(v161, v161).u64[0];
                    float32x4_t v162 = vmulq_f32(v160, v160);
                    v162.i64[0] = vpaddq_f32(v162, v162).u64[0];
                    float32x2_t v163 = vadd_f32(vadd_f32(v132, vmul_n_f32(vpadd_f32(*(float32x2_t *)v161.f32, *(float32x2_t *)v161.f32), *(float *)v77.i32)), vsub_f32(vmul_n_f32(vpadd_f32(*(float32x2_t *)v162.f32, *(float32x2_t *)v162.f32), *(float *)v78.i32), v133));
                    int8x16_t v164 = (int8x16_t)vmulq_f32(v294, v151);
                    float32x2_t v165 = (float32x2_t)vextq_s8(v164, v164, 8uLL).u64[0];
                    float32x4_t v166 = vmulq_f32(v307, v152);
                    float32x2_t v167 = (float32x2_t)vpaddq_f32(v166, v166).u64[0];
                    float32x2_t v168 = vrecpe_f32(v163);
                    int v169 = 4;
                    do
                    {
                      float32x2_t v168 = vmul_f32(v168, vrecps_f32(v163, v168));
                      --v169;
                    }
                    while (v169);
                    float32x2_t v170 = vpadd_f32(*(float32x2_t *)v164.i8, v165);
                    float32x2_t v171 = (float32x2_t)vpaddq_f32(v150, v150).u64[0];
                    _X23 = v122 + 48;
                    float32x2_t v172 = vsub_f32(vadd_f32(v131, vpadd_f32(v170, v170)), vpadd_f32(v167, v167));
                    float32x2_t v173 = (float32x2_t)vand_s8((int8x8_t)vdup_lane_s32(vcgtz_f32(v163), 0), (int8x8_t)v168);
                    *(float *)v69.i32 = *(float *)v69.i32 - v109;
                    int8x8_t v174 = (int8x8_t)vmul_f32(vmax_f32(v105, vmul_n_f32(v107, *(float *)v69.i32)), v173);
                    float32x2_t v175 = vneg_f32(v172);
                    int32x2_t v176 = (int32x2_t)vand_s8(vand_s8((int8x8_t)vcgt_f32(v113, v172), (int8x8_t)vcgtz_f32(v121)), (int8x8_t)vcgt_f32(v175, vmul_n_f32(v111, *(float *)v69.i32)));
                    v69.i32[0] = *(float *)v69.i32 <= v110;
                    float32x2_t v177 = (float32x2_t)vand_s8((int8x8_t)vdup_lane_s32(vcltz_s32(vshl_n_s32((int32x2_t)vmvn_s8(vand_s8((int8x8_t)v176, v69)), 0x1FuLL)), 0), v174);
                    int8x8_t v178 = (int8x8_t)vdup_lane_s32(v176, 0);
                    float32x2_t v179 = vsub_f32(vadd_f32(vpadd_f32(v171, v171), (float32x2_t)vand_s8(v178, (int8x8_t)vmul_f32(v121, v175))), v172);
                    int32x2_t v180 = (int32x2_t)vmla_f32(vneg_f32(v177), v173, v179);
                    int8x8_t v69 = (int8x8_t)vmla_f32((float32x2_t)vbic_s8((int8x8_t)vneg_f32(vmax_f32(v177, 0)), v178), v173, v179);
                    *(int32x2_t *)(v122 + 32) = vzip1_s32((int32x2_t)v173, v180);
                    *(_DWORD *)(v122 + 40) = v69.i32[0];
                    *(_DWORD *)(v122 + 44) = *(_DWORD *)(v141 + (v140 << 6) + 28);
                    *(float32x4_t *)uint64_t v122 = v156;
                    *(float32x4_t *)(v122 + 16) = v160;
                    ++v140;
                    v122 += 48;
                  }
                  while (v140 != v139);
                }
                else
                {
                  _X23 = v122;
                }
                unsigned int v117 = *(unsigned __int16 *)(v64 + 44 * v117 + 2);
                uint64_t v122 = _X23;
              }
              while (v117 != 0xFFFF);
            }
          }
          ++v97;
        }
        while (v97 != v94);
        uint64_t v181 = 0;
        int v182 = 0;
        char v285 = v284 != 1;
        float32x4_t v283 = vsubq_f32(v281, v280);
        float32x2_t v183 = (float32x2_t)vdup_n_s32(0x3F3504F3u);
        float32x2_t v184 = (float32x2_t)vdup_n_s32(0x3727C5ACu);
        __asm { FMOV            V12.2S, #1.0 }
        uint64_t v186 = v277;
        uint64_t v282 = v94;
        do
        {
          uint64_t v187 = v70 + 4 * v181;
          int v188 = *(_DWORD *)(v187 + 11424);
          if (v188)
          {
            uint64_t v189 = *(unsigned __int16 *)(v64 + 44 * *(unsigned int *)(v187 + 11552));
            *(_WORD *)(v186 + 2) = _X23 - v186;
            uint64_t v293 = v186;
            uint64_t v291 = *(unsigned __int8 *)(v186 + 1);
            uint64_t v190 = v40 + (v189 << 6);
            int v191 = *(_DWORD *)(v190 + 44);
            char v192 = *(unsigned char *)(v190 + 48);
            *(unsigned char *)(_X23 + 1) = v188;
            int v193 = v188 << v285;
            if (v192) {
              LOBYTE(v193) = 0;
            }
            *(unsigned char *)(_X23 + 2) = v193;
            int v194 = 4 * v188;
            _X24 = _X23 + 32 + ((v194 + 12) & 0xFFFFFFF0);
            bzero((void *)(_X23 + 32), (v194 << v285));
            __asm
            {
              PRFM            #0, [X24,#0x80]
              PRFM            #0, [X24,#0x100]
              PRFM            #0, [X24,#0x180]
            }
            unsigned int v199 = *(_DWORD *)(v187 + 11552);
            int8x16_t v200 = (__int32 *)(v40 + ((unint64_t)*(unsigned __int16 *)(v64 + 44 * v199) << 6));
            v201.i32[0] = *v200;
            v202.i32[0] = v200[1];
            v203.i32[3] = 0;
            v203.i32[0] = *v200;
            *(uint64_t *)((char *)v203.i64 + 4) = v202.u32[0];
            float32x4_t v204 = v203;
            v204.i32[2] = v200[2];
            float32x2_t v205 = (float32x2_t)vdup_lane_s32(v201, 0);
            float32x2_t v206 = (float32x2_t)vdup_lane_s32(v202, 0);
            *(int8x8_t *)v207.i8 = vext_s8(0, (int8x8_t)vneg_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v204, 2)), 4uLL);
            v207.i64[1] = v206.u32[0];
            *(int8x8_t *)v208.i8 = vext_s8((int8x8_t)vneg_f32(v206), (int8x8_t)v205, 4uLL);
            int8x16_t v209 = vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32(v183, vabs_f32(v205)), 0), 0x1FuLL)), v207, v208);
            float32x4_t v210 = vmulq_f32(v283, v204);
            v210.i64[0] = vpaddq_f32(v210, v210).u64[0];
            float32x4_t v211 = vmulq_n_f32(v204, vpadd_f32(*(float32x2_t *)v210.f32, *(float32x2_t *)v210.f32).f32[0]);
            v211.i32[3] = 0;
            float32x4_t v212 = vsubq_f32(v283, v211);
            float32x4_t v213 = vmulq_f32(v212, v212);
            v213.i64[0] = vpaddq_f32(v213, v213).u64[0];
            float32x4_t v214 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v213.f32, *(float32x2_t *)v213.f32), v184), 0), (int8x16_t)v212, v209);
            float32x4_t v215 = vmulq_f32(v214, v214);
            v215.i64[0] = vpaddq_f32(v215, v215).u64[0];
            float32x2_t v216 = vpadd_f32(*(float32x2_t *)v215.f32, *(float32x2_t *)v215.f32);
            float32x2_t v217 = vrsqrte_f32(v216);
            int v218 = 4;
            do
            {
              float32x2_t v217 = vmul_f32(v217, vrsqrts_f32(vmul_f32(v217, v217), v216));
              --v218;
            }
            while (v218);
            float32x2_t v219 = vmul_f32(v216, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v216), 0), _D12, (int8x8_t)v217));
            float32x2_t v220 = vrecpe_f32(v219);
            int v221 = 4;
            do
            {
              float32x2_t v220 = vmul_f32(v220, vrecps_f32(v219, v220));
              --v221;
            }
            while (v221);
            uint64_t v186 = 48 * v291 + v293 + 48;
            uint64_t v70 = v289;
            if ((v192 & 1) == 0)
            {
              *(_DWORD *)(_X23 + 4) = v191;
              *(float *)(_X23 + 8) = v288;
              *(float *)(_X23 + 12) = v112;
              *(_DWORD *)(_X23 + 16) = LODWORD(v286);
              *(_DWORD *)(_X23 + 20) = LODWORD(v287);
              *(unsigned char *)_X23 = v279;
              if (v199 != 0xFFFF)
              {
                float32x4_t v222 = vmulq_n_f32(v214, v220.f32[0]);
                int8x16_t v223 = (int8x16_t)v222;
                v223.i32[3] = 0;
                float32x2_t v224 = (float32x2_t)vextq_s8(v223, v223, 8uLL).u64[0];
                float32x2_t v225 = (float32x2_t)vextq_s8((int8x16_t)v204, (int8x16_t)v204, 8uLL).u64[0];
                int8x8_t v226 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v203.f32, (int8x8_t)v225, 4uLL), *(float32x2_t *)v222.f32), (float32x2_t)vext_s8(*(int8x8_t *)v222.f32, (int8x8_t)v224, 4uLL), *(float32x2_t *)v203.f32);
                *(int8x8_t *)v227.f32 = vext_s8(v226, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v203.f32, v224), *(float32x2_t *)v222.f32, v225), 4uLL);
                v227.i64[1] = v226.u32[0];
                do
                {
                  unsigned int v228 = (unsigned __int16 *)(v64 + 44 * v199);
                  uint64_t v229 = *((unsigned __int8 *)v228 + 5);
                  if (*((unsigned char *)v228 + 5))
                  {
                    uint64_t v230 = 0;
                    unint64_t v231 = v40 + ((unint64_t)*v228 << 6);
                    do
                    {
                      int v232 = 0;
                      unint64_t v233 = v231 + (v230 << 6);
                      v234.i64[0] = *(void *)(v233 + 32);
                      v234.i64[1] = *(unsigned int *)(v233 + 40);
                      v235.i64[0] = *(void *)(v233 + 16);
                      v235.i64[1] = *(unsigned int *)(v233 + 24);
                      int8x16_t v236 = vbicq_s8((int8x16_t)vsubq_f32(v235, v295), (int8x16_t)vcgtq_f32(v99, vabdq_f32(v235, v295)));
                      int8x16_t v237 = vbicq_s8((int8x16_t)vsubq_f32(v235, v100), (int8x16_t)vcgtq_f32(v99, vabdq_f32(v235, v100)));
                      float32x2_t v238 = (float32x2_t)vextq_s8(v237, v237, 8uLL).u64[0];
                      float32x2_t v239 = (float32x2_t)vext_s8(*(int8x8_t *)v237.i8, (int8x8_t)v238, 4uLL);
                      float32x2_t v240 = (float32x2_t)vextq_s8(v236, v236, 8uLL).u64[0];
                      float32x2_t v241 = (float32x2_t)vext_s8(*(int8x8_t *)v236.i8, (int8x8_t)v240, 4uLL);
                      uint64_t v242 = _X24;
                      float32x4_t v243 = v227;
                      do
                      {
                        float32x4_t v227 = (float32x4_t)v223;
                        int8x16_t v223 = (int8x16_t)v243;
                        float32x2_t v244 = (float32x2_t)vextq_s8((int8x16_t)v227, (int8x16_t)v227, 8uLL).u64[0];
                        float32x2_t v245 = (float32x2_t)vextq_s8((int8x16_t)v227, (int8x16_t)v227, 4uLL).u64[0];
                        int8x8_t v246 = (int8x8_t)vmls_f32(vmul_f32(v238, *(float32x2_t *)v227.f32), *(float32x2_t *)v237.i8, v244);
                        float32x2_t v247 = vmls_f32(vmul_f32(*(float32x2_t *)v237.i8, v245), v239, *(float32x2_t *)v227.f32);
                        float32x2_t v248 = vmls_f32(vmul_f32(*(float32x2_t *)v236.i8, v245), v241, *(float32x2_t *)v227.f32);
                        float32x4_t v249 = vmulq_lane_f32(v305, v247, 1);
                        v249.i32[3] = 0;
                        float32x4_t v250 = vmulq_n_f32(v303, *(float *)v246.i32);
                        v250.i32[3] = 0;
                        int8x8_t v251 = (int8x8_t)vmls_f32(vmul_f32(v240, *(float32x2_t *)v227.f32), *(float32x2_t *)v236.i8, v244);
                        float32x4_t v252 = vmulq_n_f32(v301, v247.f32[0]);
                        v252.i32[3] = 0;
                        float32x4_t v253 = vaddq_f32(vaddq_f32(v249, v250), v252);
                        float32x4_t v254 = vmulq_lane_f32(v300, v248, 1);
                        v254.i32[3] = 0;
                        float32x4_t v255 = vmulq_n_f32(v299, *(float *)v251.i32);
                        v255.i32[3] = 0;
                        float32x4_t v256 = vmulq_n_f32(v298, v248.f32[0]);
                        v256.i32[3] = 0;
                        float32x4_t v257 = vaddq_f32(vaddq_f32(v254, v255), v256);
                        float32x4_t v258 = vmulq_f32(v253, v253);
                        v258.i64[0] = vpaddq_f32(v258, v258).u64[0];
                        float32x4_t v259 = vmulq_f32(v257, v257);
                        v259.i64[0] = vpaddq_f32(v259, v259).u64[0];
                        float32x2_t v260 = vadd_f32(vadd_f32(v114, vmul_n_f32(vpadd_f32(*(float32x2_t *)v258.f32, *(float32x2_t *)v258.f32), *(float *)&v286)), vsub_f32(vmul_n_f32(vpadd_f32(*(float32x2_t *)v259.f32, *(float32x2_t *)v259.f32), *(float *)&v287), v297));
                        float32x2_t v261 = vrecpe_f32(v260);
                        int v262 = 4;
                        do
                        {
                          float32x2_t v261 = vmul_f32(v261, vrecps_f32(v260, v261));
                          --v262;
                        }
                        while (v262);
                        _X24 = v242 + 64;
                        *(int8x8_t *)v263.f32 = vext_s8((int8x8_t)v247, v246, 4uLL);
                        v263.i64[1] = v247.u32[0];
                        *(int8x8_t *)v264.f32 = vext_s8((int8x8_t)v248, v251, 4uLL);
                        v264.i64[1] = v248.u32[0];
                        *(int8x8_t *)v265.f32 = vand_s8((int8x8_t)vdup_lane_s32(vcgtz_f32(v260), 0), (int8x8_t)v261);
                        float32x4_t v266 = vmulq_f32(v281, v227);
                        v266.i64[0] = vpaddq_f32(v266, v266).u64[0];
                        float32x4_t v267 = vmulq_f32(v294, v263);
                        v267.i64[0] = vpaddq_f32(v267, v267).u64[0];
                        *(float32x2_t *)v267.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v266.f32, *(float32x2_t *)v266.f32), vpadd_f32(*(float32x2_t *)v267.f32, *(float32x2_t *)v267.f32));
                        float32x4_t v268 = vmulq_f32(v280, v227);
                        v268.i64[0] = vpaddq_f32(v268, v268).u64[0];
                        float32x4_t v269 = vmulq_f32(v307, v264);
                        v269.i64[0] = vpaddq_f32(v269, v269).u64[0];
                        *(float32x2_t *)v269.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v268.f32, *(float32x2_t *)v268.f32), vpadd_f32(*(float32x2_t *)v269.f32, *(float32x2_t *)v269.f32));
                        float32x4_t v270 = v227;
                        v270.i32[3] = 0;
                        v265.i64[1] = v265.i64[0];
                        v253.i32[3] = vnegq_f32(v265).i32[3];
                        *(float32x4_t *)uint64_t v242 = v270;
                        *(float32x4_t *)(v242 + 16) = v253;
                        *(float32x4_t *)(v242 + 32) = v257;
                        float32x4_t v271 = vmulq_f32(v234, v227);
                        v271.i64[0] = vpaddq_f32(v271, v271).u64[0];
                        *(_DWORD *)(v242 + 48) = vsub_f32(vpadd_f32(*(float32x2_t *)v271.f32, *(float32x2_t *)v271.f32), vsub_f32(*(float32x2_t *)v267.f32, *(float32x2_t *)v269.f32)).u32[0];
                        ++v232;
                        v242 += 64;
                        float32x4_t v243 = v227;
                      }
                      while (v232 != v65);
                      ++v230;
                    }
                    while (v230 != v229);
                    int v182 = 1;
                  }
                  unsigned int v199 = *(unsigned __int16 *)(v64 + 44 * v199 + 2);
                }
                while (v199 != 0xFFFF);
              }
            }
            _X23 = _X24;
            uint64_t v94 = v282;
          }
          ++v181;
        }
        while (v181 != v94);
      }
      else
      {
        int v182 = 0;
      }
      *(unsigned char *)_X23 = 0;
      unsigned int v275 = v278;
      _X23 = v277;
    }
    float32x4_t v276 = (_DWORD *)(_X23 + v275);
    *float32x4_t v276 = 0;
    v276[1] = v182 << 31 >> 31;
  }
  return 1;
}

uint64_t physx::Dy::FeatherstoneArticulation::willStoreStaticConstraint(physx::Dy::FeatherstoneArticulation *this)
{
  return 1;
}

uint64_t physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>::allocate(result, 32 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    int v4 = (_OWORD *)result;
  }
  else
  {
    int v4 = 0;
  }
  uint64_t v5 = *(unsigned int *)(v3 + 8);
  uint64_t v6 = *(_OWORD **)v3;
  if (v5)
  {
    unint64_t v7 = (unint64_t)&v4[2 * v5];
    float32x4_t v8 = *(_OWORD **)v3;
    uint64_t v9 = v4;
    do
    {
      _OWORD *v9 = *v8;
      v9[1] = v8[1];
      v9 += 2;
      v8 += 2;
    }
    while ((unint64_t)v9 < v7);
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    float32x4_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>::getName() [T = physx::Cm::SpatialVectorF]";
  }
  else {
    float32x4_t v8 = "<allocation names disabled>";
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::Array<physx::Dy::SpatialImpulseResponseMatrix,physx::shdfnd::ReflectionAllocator<physx::Dy::SpatialImpulseResponseMatrix>>::recreate(uint64_t *a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = 192 * a2;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance, a2))
  {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::SpatialImpulseResponseMatrix>::getName() [T = "
         "physx::Dy::SpatialImpulseResponseMatrix]";
  }
  else
  {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v8 = result;
  unsigned int v9 = *((_DWORD *)a1 + 2);
  uint64_t v10 = *a1;
  if (v9)
  {
    unint64_t v11 = result + 192 * v9;
    uint64_t v12 = *a1;
    unint64_t v13 = result;
    do
    {
      for (uint64_t i = 0; i != 192; i += 32)
      {
        unint64_t v15 = (_OWORD *)(v13 + i);
        *unint64_t v15 = *(_OWORD *)(v12 + i);
        v15[1] = *(_OWORD *)(v12 + i + 16);
      }
      v13 += 192;
      v12 += 192;
    }
    while (v13 < v11);
  }
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && v10) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *a1 = v8;
  *((_DWORD *)a1 + 3) = v2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Dy::SpatialMatrix,physx::shdfnd::ReflectionAllocator<physx::Dy::SpatialMatrix>>::recreate(uint64_t *a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = 112 * a2;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance, a2))
  {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::SpatialMatrix>::getName() [T = physx::Dy::SpatialMatrix]";
  }
  else
  {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v8 = result;
  unsigned int v9 = *((_DWORD *)a1 + 2);
  uint64_t v10 = *a1;
  if (v9)
  {
    unint64_t v11 = result + 112 * v9;
    uint64_t v12 = *a1;
    unint64_t v13 = result;
    do
    {
      *(void *)unint64_t v13 = *(void *)v12;
      *(void *)(v13 + 8) = *(void *)(v12 + 8);
      *(void *)(v13 + 16) = *(void *)(v12 + 16);
      *(void *)(v13 + 24) = *(void *)(v12 + 24);
      *(void *)(v13 + 32) = *(void *)(v12 + 32);
      *(void *)(v13 + 40) = *(void *)(v12 + 40);
      *(void *)(v13 + 48) = *(void *)(v12 + 48);
      *(void *)(v13 + 56) = *(void *)(v12 + 56);
      *(void *)(v13 + 64) = *(void *)(v12 + 64);
      *(void *)(v13 + 72) = *(void *)(v12 + 72);
      *(void *)(v13 + 80) = *(void *)(v12 + 80);
      *(void *)(v13 + 88) = *(void *)(v12 + 88);
      *(void *)(v13 + 96) = *(void *)(v12 + 96);
      *(_DWORD *)(v13 + 104) = *(_DWORD *)(v12 + 104);
      *(_DWORD *)(v13 + 108) = *(_DWORD *)(v12 + 108);
      v13 += 112;
      v12 += 112;
    }
    while (v13 < v11);
  }
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && v10) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *a1 = v8;
  *((_DWORD *)a1 + 3) = v2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Dy::InvStIs,physx::shdfnd::ReflectionAllocator<physx::Dy::InvStIs>>::recreate(uint64_t *a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = 36 * a2;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance, a2))
  {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::InvStIs>::getName() [T = physx::Dy::InvStIs]";
  }
  else
  {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v8 = result;
  unsigned int v9 = *((_DWORD *)a1 + 2);
  uint64_t v10 = (long long *)*a1;
  if (v9)
  {
    unint64_t v11 = result + 36 * v9;
    unint64_t v12 = result;
    do
    {
      long long v13 = *v10;
      long long v14 = v10[1];
      *(_DWORD *)(v12 + 32) = *((_DWORD *)v10 + 8);
      *(_OWORD *)unint64_t v12 = v13;
      *(_OWORD *)(v12 + 16) = v14;
      v12 += 36;
      uint64_t v10 = (long long *)((char *)v10 + 36);
    }
    while (v12 < v11);
    uint64_t v10 = (long long *)*a1;
  }
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && v10) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *a1 = v8;
  *((_DWORD *)a1 + 3) = v2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Dy::SpatialSubspaceMatrix,physx::shdfnd::ReflectionAllocator<physx::Dy::SpatialSubspaceMatrix>>::recreate(uint64_t *a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = 76 * a2;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance, a2))
  {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::SpatialSubspaceMatrix>::getName() [T = physx::"
         "Dy::SpatialSubspaceMatrix]";
  }
  else
  {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v8 = result;
  unsigned int v9 = *((_DWORD *)a1 + 2);
  uint64_t v10 = *a1;
  if (v9)
  {
    unint64_t v11 = result + 76 * v9;
    uint64_t v12 = *a1;
    unint64_t v13 = result;
    do
    {
      for (uint64_t i = 0; i != 72; i += 24)
      {
        unint64_t v15 = (void *)(v13 + i);
        *unint64_t v15 = *(void *)(v12 + i);
        v15[1] = *(void *)(v12 + i + 8);
        v15[2] = *(void *)(v12 + i + 16);
      }
      *(_DWORD *)(v13 + 72) = *(_DWORD *)(v12 + 72);
      v13 += 76;
      v12 += 76;
    }
    while (v13 < v11);
  }
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && v10) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *a1 = v8;
  *((_DWORD *)a1 + 3) = v2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Dy::IsInvD,physx::shdfnd::ReflectionAllocator<physx::Dy::IsInvD>>::recreate(uint64_t *a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = 96 * a2;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance, a2))
  {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::IsInvD>::getName() [T = physx::Dy::IsInvD]";
  }
  else
  {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v8 = result;
  unsigned int v9 = *((_DWORD *)a1 + 2);
  uint64_t v10 = *a1;
  if (v9)
  {
    unint64_t v11 = result + 96 * v9;
    uint64_t v12 = *a1;
    unint64_t v13 = result;
    do
    {
      for (uint64_t i = 0; i != 96; i += 32)
      {
        unint64_t v15 = (_OWORD *)(v13 + i);
        *unint64_t v15 = *(_OWORD *)(v12 + i);
        v15[1] = *(_OWORD *)(v12 + i + 16);
      }
      v13 += 96;
      v12 += 96;
    }
    while (v13 < v11);
  }
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && v10) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *a1 = v8;
  *((_DWORD *)a1 + 3) = v2;
  return result;
}

uint64_t physx::shdfnd::Array<float,physx::shdfnd::ReflectionAllocator<float>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t result = physx::shdfnd::ReflectionAllocator<float>::allocate(a1, 4 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v5 = result;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  uint64_t v7 = *(int **)a1;
  if (v6)
  {
    unint64_t v8 = result + 4 * v6;
    unsigned int v9 = *(int **)a1;
    uint64_t v10 = (_DWORD *)result;
    do
    {
      int v11 = *v9++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v8);
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v7) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<float>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    unint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<float>::getName() [T = float]";
  }
  else {
    unint64_t v8 = "<allocation names disabled>";
  }
  unsigned int v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::Array<physx::PxSolverConstraintDesc,physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>::growAndPushBack(uint64_t result, long long *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>::allocate(result, 48 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (_OWORD *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  unsigned int v7 = *(_DWORD *)(v3 + 8);
  if (v7)
  {
    unint64_t v8 = (unint64_t)&v6[3 * v7];
    unsigned int v9 = *(long long **)v3;
    uint64_t v10 = v6;
    do
    {
      long long v11 = *v9;
      long long v12 = v9[2];
      v10[1] = v9[1];
      v10[2] = v12;
      _OWORD *v10 = v11;
      v10 += 3;
      v9 += 3;
    }
    while ((unint64_t)v10 < v8);
    unsigned int v13 = *(_DWORD *)(v3 + 8);
  }
  else
  {
    unsigned int v13 = 0;
  }
  long long v14 = &v6[3 * v13];
  long long v15 = *a2;
  long long v16 = a2[2];
  v14[1] = a2[1];
  v14[2] = v16;
  *long long v14 = v15;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v6;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    unint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>::getName() [T = physx::PxS"
  }
         "olverConstraintDesc]";
  else {
    unint64_t v8 = "<allocation names disabled>";
  }
  unsigned int v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::sort<physx::PxSolverConstraintDesc,physx::Dy::ArticulationStaticConstraintSortPredicate,physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>(uint64_t result, int a2)
{
  uint64_t v88 = *MEMORY[0x263EF8340];
  uint64_t v84 = 0x2000000000;
  uint64_t v85 = v87;
  char v86 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 >= 1)
  {
    uint64_t v3 = result;
    int v4 = 0;
    uint64_t v5 = result + 66;
    uint64_t v6 = v87;
    memset(v87, 0, sizeof(v87));
    while (1)
    {
      if (v2 > v4)
      {
        if ((v2 - v4) < 5)
        {
LABEL_51:
          uint64_t v61 = v4;
          int v62 = v4 + 1;
          unsigned int v63 = (unsigned __int16 *)(v5 + 48 * v4);
          do
          {
            uint64_t v64 = 0;
            uint64_t v65 = v61++;
            int32x2_t v66 = v63;
            int v67 = v65;
            do
            {
              unsigned int v68 = *(v66 - 1);
              unsigned int v70 = *v66;
              v66 += 24;
              unsigned int v69 = v70;
              if (v68 == 0xFFFF) {
                unsigned int v68 = v69;
              }
              uint64_t v71 = v3 + 48 * v67;
              unsigned int v72 = *(unsigned __int16 *)(v71 + 16);
              unsigned int v73 = *(unsigned __int16 *)(v71 + 18);
              if (v72 != 0xFFFF) {
                unsigned int v73 = v72;
              }
              uint64_t result = (v62 + v64);
              if (v68 < v73) {
                int v67 = v62 + v64;
              }
              ++v64;
            }
            while (v65 + v64 < v2);
            if (v67 != v65)
            {
              int v74 = (long long *)(v3 + 48 * v67);
              long long v75 = *v74;
              long long v76 = v74[1];
              int32x2_t v77 = (long long *)(v3 + 48 * v65);
              long long v78 = v74[2];
              long long v80 = v77[1];
              long long v79 = v77[2];
              *int v74 = *v77;
              v74[1] = v80;
              v74[2] = v79;
              v77[1] = v76;
              v77[2] = v78;
              *int32x2_t v77 = v75;
            }
            ++v62;
            v63 += 24;
          }
          while (v61 != v2);
        }
        else
        {
          while (1)
          {
            int v7 = v4 + v2;
            if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
              ++v7;
            }
            uint64_t v8 = v3 + 48 * (v7 >> 1);
            uint64_t v9 = v3 + 48 * v4;
            if (*(unsigned __int16 *)(v8 + 16) == 0xFFFF) {
              unsigned int v10 = *(unsigned __int16 *)(v8 + 18);
            }
            else {
              unsigned int v10 = *(unsigned __int16 *)(v8 + 16);
            }
            unsigned int v11 = *(unsigned __int16 *)(v9 + 16);
            unsigned int v12 = *(unsigned __int16 *)(v9 + 18);
            if (v11 == 0xFFFF) {
              unsigned int v13 = *(unsigned __int16 *)(v9 + 18);
            }
            else {
              unsigned int v13 = *(unsigned __int16 *)(v9 + 16);
            }
            if (v10 < v13)
            {
              long long v14 = *(_OWORD *)v9;
              long long v15 = *(_OWORD *)(v9 + 16);
              long long v16 = *(_OWORD *)(v9 + 32);
              long long v18 = *(_OWORD *)(v8 + 16);
              long long v17 = *(_OWORD *)(v8 + 32);
              *(_OWORD *)uint64_t v9 = *(_OWORD *)v8;
              *(_OWORD *)(v9 + 16) = v18;
              *(_OWORD *)(v9 + 32) = v17;
              *(_OWORD *)(v8 + 16) = v15;
              *(_OWORD *)(v8 + 32) = v16;
              *(_OWORD *)uint64_t v8 = v14;
              unsigned int v11 = *(unsigned __int16 *)(v9 + 16);
              unsigned int v12 = *(unsigned __int16 *)(v9 + 18);
            }
            uint64_t v19 = v3 + 48 * v2;
            unsigned int v20 = *(unsigned __int16 *)(v19 + 16);
            uint64_t result = *(unsigned __int16 *)(v19 + 18);
            if (v20 == 0xFFFF) {
              unsigned int v21 = *(unsigned __int16 *)(v19 + 18);
            }
            else {
              unsigned int v21 = *(unsigned __int16 *)(v19 + 16);
            }
            if (v11 == 0xFFFF) {
              unsigned int v11 = v12;
            }
            if (v21 < v11)
            {
              long long v22 = *(_OWORD *)v9;
              long long v23 = *(_OWORD *)(v9 + 16);
              long long v24 = *(_OWORD *)(v9 + 32);
              long long v26 = *(_OWORD *)(v19 + 16);
              long long v25 = *(_OWORD *)(v19 + 32);
              *(_OWORD *)uint64_t v9 = *(_OWORD *)v19;
              *(_OWORD *)(v9 + 16) = v26;
              *(_OWORD *)(v9 + 32) = v25;
              *(_OWORD *)(v19 + 16) = v23;
              *(_OWORD *)(v19 + 32) = v24;
              *(_OWORD *)uint64_t v19 = v22;
              unsigned int v20 = *(unsigned __int16 *)(v19 + 16);
              uint64_t result = *(unsigned __int16 *)(v19 + 18);
            }
            if (v20 == 0xFFFF) {
              unsigned int v27 = result;
            }
            else {
              unsigned int v27 = v20;
            }
            unsigned int v28 = *(unsigned __int16 *)(v8 + 16);
            if (v28 == 0xFFFF) {
              unsigned int v28 = *(unsigned __int16 *)(v8 + 18);
            }
            if (v27 < v28)
            {
              long long v29 = *(_OWORD *)v8;
              long long v30 = *(_OWORD *)(v8 + 16);
              long long v31 = *(_OWORD *)(v8 + 32);
              long long v33 = *(_OWORD *)(v19 + 16);
              long long v32 = *(_OWORD *)(v19 + 32);
              *(_OWORD *)uint64_t v8 = *(_OWORD *)v19;
              *(_OWORD *)(v8 + 16) = v33;
              *(_OWORD *)(v8 + 32) = v32;
              *(_OWORD *)(v19 + 16) = v30;
              *(_OWORD *)(v19 + 32) = v31;
              *(_OWORD *)uint64_t v19 = v29;
            }
            uint64_t v34 = v2 - 1;
            long long v35 = *(_OWORD *)v8;
            long long v36 = *(_OWORD *)(v8 + 16);
            uint64_t v37 = v3 + 48 * v34;
            long long v38 = *(_OWORD *)(v8 + 32);
            long long v40 = *(_OWORD *)(v37 + 16);
            long long v39 = *(_OWORD *)(v37 + 32);
            *(_OWORD *)uint64_t v8 = *(_OWORD *)v37;
            *(_OWORD *)(v8 + 16) = v40;
            *(_OWORD *)(v8 + 32) = v39;
            *(_OWORD *)(v37 + 16) = v36;
            *(_OWORD *)(v37 + 32) = v38;
            *(_OWORD *)uint64_t v37 = v35;
            int v41 = v4;
            while (1)
            {
              unsigned int v42 = *(unsigned __int16 *)(v37 + 18);
              if (*(unsigned __int16 *)(v37 + 16) != 0xFFFF) {
                unsigned int v42 = *(unsigned __int16 *)(v37 + 16);
              }
              uint64_t v43 = v3 + 48 * v41;
              do
              {
                unsigned int v44 = *(unsigned __int16 *)(v43 + 64);
                if (v44 == 0xFFFF) {
                  unsigned int v44 = *(unsigned __int16 *)(v43 + 66);
                }
                v43 += 48;
                ++v41;
              }
              while (v44 < v42);
              BOOL v45 = (_OWORD *)(v3 + 48 * (int)v34);
              do
              {
                unsigned int v46 = *((unsigned __int16 *)v45 - 16);
                if (v46 == 0xFFFF) {
                  unsigned int v46 = *((unsigned __int16 *)v45 - 15);
                }
                v45 -= 3;
                LODWORD(v34) = v34 - 1;
              }
              while (v42 < v46);
              if (v41 >= (int)v34) {
                break;
              }
              long long v47 = *(_OWORD *)v43;
              long long v48 = *(_OWORD *)(v43 + 16);
              long long v49 = *(_OWORD *)(v43 + 32);
              long long v51 = v45[1];
              long long v50 = v45[2];
              *(_OWORD *)uint64_t v43 = *v45;
              *(_OWORD *)(v43 + 16) = v51;
              *(_OWORD *)(v43 + 32) = v50;
              v45[1] = v48;
              v45[2] = v49;
              *BOOL v45 = v47;
            }
            long long v52 = *(_OWORD *)v43;
            long long v53 = *(_OWORD *)(v43 + 16);
            long long v54 = *(_OWORD *)(v43 + 32);
            long long v56 = *(_OWORD *)(v37 + 16);
            long long v55 = *(_OWORD *)(v37 + 32);
            *(_OWORD *)uint64_t v43 = *(_OWORD *)v37;
            *(_OWORD *)(v43 + 16) = v56;
            *(_OWORD *)(v43 + 32) = v55;
            *(_OWORD *)(v37 + 16) = v53;
            *(_OWORD *)(v37 + 32) = v54;
            *(_OWORD *)uint64_t v37 = v52;
            unsigned int v57 = v84;
            unsigned int v58 = HIDWORD(v84) - 1;
            if (v41 - v4 >= v2 - v41)
            {
              if (v84 >= v58)
              {
                uint64_t result = (uint64_t)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>::grow((uint64_t)v83);
                unsigned int v57 = v84;
                uint64_t v6 = v85;
              }
              LODWORD(v84) = v57 + 1;
              *((_DWORD *)v6 + v57) = v41 + 1;
              uint64_t v60 = v84;
              LODWORD(v84) = v84 + 1;
              *((_DWORD *)v6 + v60) = v2;
              int v2 = v41 - 1;
            }
            else
            {
              if (v84 >= v58)
              {
                uint64_t result = (uint64_t)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>::grow((uint64_t)v83);
                unsigned int v57 = v84;
                uint64_t v6 = v85;
              }
              LODWORD(v84) = v57 + 1;
              *((_DWORD *)v6 + v57) = v4;
              uint64_t v59 = v84;
              LODWORD(v84) = v84 + 1;
              *((_DWORD *)v6 + v59) = v41 - 1;
              int v4 = v41 + 1;
            }
            if (v2 <= v4) {
              break;
            }
            if ((v2 - v4) <= 4) {
              goto LABEL_51;
            }
          }
        }
      }
      int v81 = v84;
      if (!v84) {
        break;
      }
      LODWORD(v84) = v84 - 1;
      int v2 = *((_DWORD *)v6 + (v81 - 1));
      LODWORD(v84) = v81 - 2;
      int v4 = *((_DWORD *)v6 + (v81 - 2));
    }
    if (v86) {
      BOOL v82 = v6 == 0;
    }
    else {
      BOOL v82 = 1;
    }
    if (!v82) {
      return (*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    }
  }
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>::allocate(a1, 4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  uint64_t result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Dy::ArticulationInternalConstraint,physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationInternalConstraint>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationInternalConstraint>::getName() ["
    }
           "T = physx::Dy::ArticulationInternalConstraint]";
    else {
      uint64_t v5 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 176 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  unsigned int v7 = *(_DWORD *)(v3 + 8);
  uint64_t v8 = *(void *)v3;
  if (v7)
  {
    unint64_t v9 = v6 + 176 * v7;
    unint64_t v10 = v6;
    do
    {
      *(void *)unint64_t v10 = *(void *)v8;
      *(void *)(v10 + 8) = *(void *)(v8 + 8);
      *(void *)(v10 + 16) = *(void *)(v8 + 16);
      *(void *)(v10 + 24) = *(void *)(v8 + 24);
      *(void *)(v10 + 32) = *(void *)(v8 + 32);
      *(void *)(v10 + 40) = *(void *)(v8 + 40);
      *(void *)(v10 + 48) = *(void *)(v8 + 48);
      *(void *)(v10 + 56) = *(void *)(v8 + 56);
      *(void *)(v10 + 64) = *(void *)(v8 + 64);
      *(void *)(v10 + 72) = *(void *)(v8 + 72);
      *(void *)(v10 + 80) = *(void *)(v8 + 80);
      *(void *)(v10 + 88) = *(void *)(v8 + 88);
      *(_OWORD *)(v10 + 96) = *(_OWORD *)(v8 + 96);
      long long v11 = *(_OWORD *)(v8 + 112);
      long long v12 = *(_OWORD *)(v8 + 128);
      long long v13 = *(_OWORD *)(v8 + 160);
      *(_OWORD *)(v10 + 144) = *(_OWORD *)(v8 + 144);
      *(_OWORD *)(v10 + 160) = v13;
      *(_OWORD *)(v10 + 112) = v11;
      *(_OWORD *)(v10 + 128) = v12;
      v10 += 176;
      v8 += 176;
    }
    while (v10 < v9);
    uint64_t v8 = *(void *)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Dy::ArticulationInternalLockedAxis,physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationInternalLockedAxis>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationInternalLockedAxis>::getName() ["
    }
           "T = physx::Dy::ArticulationInternalLockedAxis]";
    else {
      uint64_t v5 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 80 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  unsigned int v7 = *(_DWORD *)(v3 + 8);
  uint64_t v8 = *(void *)v3;
  if (v7)
  {
    unint64_t v9 = v6 + 80 * v7;
    unint64_t v10 = v6;
    do
    {
      *(void *)unint64_t v10 = *(void *)v8;
      *(void *)(v10 + 8) = *(void *)(v8 + 8);
      *(void *)(v10 + 16) = *(void *)(v8 + 16);
      *(void *)(v10 + 24) = *(void *)(v8 + 24);
      *(void *)(v10 + 32) = *(void *)(v8 + 32);
      *(void *)(v10 + 40) = *(void *)(v8 + 40);
      *(void *)(v10 + 48) = *(void *)(v8 + 48);
      *(_DWORD *)(v10 + 56) = *(_DWORD *)(v8 + 56);
      long long v11 = *(_OWORD *)(v8 + 60);
      *(_DWORD *)(v10 + 76) = *(_DWORD *)(v8 + 76);
      *(_OWORD *)(v10 + 60) = v11;
      v10 += 80;
      v8 += 80;
    }
    while (v10 < v9);
    uint64_t v8 = *(void *)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::Dy::DynamicsContext::create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, uint64_t a10, char a11, char a12, char a13, char a14)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, 784, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyDynamics.cpp", 134);
  if (result) {
    return physx::Dy::DynamicsContext::DynamicsContext(result, a1, a2, a3, a4, a5, a6, a7, a9, a8, a10, a11, a12, a13, a14);
  }
  return result;
}

uint64_t physx::Dy::DynamicsContext::destroy(physx::Dy::DynamicsContext *this)
{
  (*(void (**)(physx::Dy::DynamicsContext *))(*(void *)this + 56))(this);
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
  return v1();
}

uint64_t physx::Dy::DynamicsContext::resetThreadContexts(physx::Dy::DynamicsContext *this)
{
  uint64_t v2 = *((void *)this + 50);
  pthread_mutex_lock((pthread_mutex_t *)(v2 + 8));
  uint64_t v3 = *(void **)v2;
  *(void *)uint64_t v2 = 0;
  uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)(v2 + 8));
  if (v3)
  {
    uint64_t v5 = v3;
    do
    {
      uint64_t v6 = (void *)*v5;
      v5[1479] = 0;
      *((_DWORD *)v5 + 2960) = 0;
      v5[1485] = 0;
      *((_DWORD *)v5 + 2972) = 0;
      v5[1533] = v5[1502];
      v5[1535] = v5[1508];
      v5[1530] = 0;
      *((_DWORD *)v5 + 2974) = 0;
      v5[1488] = 0;
      *((_OWORD *)v5 + 763) = 0uLL;
      uint64_t v5 = v6;
    }
    while (v6);
    do
    {
      unsigned int v7 = (void *)*v3;
      uint64_t v8 = *((void *)this + 50);
      pthread_mutex_lock((pthread_mutex_t *)(v8 + 8));
      void *v3 = *(void *)v8;
      *(void *)uint64_t v8 = v3;
      uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)(v8 + 8));
      uint64_t v3 = v7;
    }
    while (v7);
  }
  return result;
}

uint64_t physx::Dy::DynamicsContext::DynamicsContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, uint64_t a10, uint64_t a11, char a12, char a13, char a14, char a15)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)(a1 + 72) = a10;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(a1 + 88) = _D1;
  *(float *)(a1 + 96) = a9;
  *(unsigned char *)(a1 + 100) = a12;
  *(unsigned char *)(a1 + 101) = a13;
  *(unsigned char *)(a1 + 102) = a14;
  *(_DWORD *)(a1 + 120) = -1073741824;
  *(_DWORD *)(a1 + 140) = 32;
  *(void *)(a1 + 224) = a7;
  *(_OWORD *)(a1 + 232) = 0u;
  *(void *)(a1 + 248) = a5;
  *(void *)a1 = &unk_26E7244D8;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  uint64_t v37 = a1 + 288;
  uint64_t v27 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    unsigned int v28 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::SListImpl>::getName() [T = physx::shdfnd::SListImpl]";
  }
  else {
    unsigned int v28 = "<allocation names disabled>";
  }
  uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v27 + 24) + 16))(v27 + 24, 72, v28, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSList.h", 103);
  *(void *)(a1 + 400) = v29;
  *(void *)uint64_t v29 = 0;
  pthread_mutex_init((pthread_mutex_t *)(v29 + 8), 0);
  *(void *)(a1 + 408) = a2;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(void *)(a1 + 688) = a8;
  *(void *)(a1 + 728) = 0;
  *(void *)(a1 + 736) = a3;
  *(void *)(a1 + 744) = a4;
  *(void *)(a1 + 752) = a6;
  *(void *)(a1 + 768) = a11;
  long long v30 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 24, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/include/DyContext.h", 262);
  v30[1] = 0;
  v30[2] = 0;
  *long long v30 = a7;
  *(void *)(a1 + 8) = v30;
  long long v31 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 24, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/include/DyContext.h", 264);
  v31[1] = 0;
  v31[2] = 0;
  *long long v31 = a7;
  *(void *)(a1 + 16) = v31;
  long long v32 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 24, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyDynamics.cpp", 190);
  v32[1] = 0;
  v32[2] = 0;
  *long long v32 = a7;
  *(void *)(a1 + 576) = v32;
  long long v33 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 24, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyDynamics.cpp", 191);
  v33[1] = 0;
  v33[2] = 0;
  *long long v33 = a7;
  *(void *)(a1 + 584) = v33;
  *(_DWORD *)(a1 + 684) = 0;
  *(_DWORD *)(a1 + 760) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0xFFFF00000000;
  *(void *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_DWORD *)(a1 + 352) = 0;
  *(void *)(a1 + 356) = 0x1FFFFFFFF7FFFFFLL;
  *(_OWORD *)(a1 + 304) = xmmword_23441F6B0;
  *(void *)(a1 + 296) = 0;
  *(_OWORD *)(v37 + 76) = xmmword_23441F6E0;
  *(_DWORD *)(a1 + 380) = 1065353216;
  *(void *)(v37 + 102) = 0;
  *(void *)(a1 + 384) = 0;
  uint64_t v34 = (physx::Dy::SolverCoreGeneralPF *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 16, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DySolverControl.cpp", 174);
  if (v34)
  {
    *(void *)uint64_t v34 = &unk_26E724640;
    *((unsigned char *)v34 + 8) = a15;
  }
  *(void *)(a1 + 608) = v34;
  long long v35 = (physx::Dy::SolverCoreGeneralPF *)physx::Dy::SolverCoreGeneralPF::create(v34);
  *(void *)(a1 + 616) = v35;
  *(void *)(a1 + 624) = physx::Dy::SolverCoreGeneralPF::create(v35);
  return a1;
}

void *physx::Dy::SolverCoreGeneralPF::create(physx::Dy::SolverCoreGeneralPF *this)
{
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 8, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DySolverControlPF.cpp", 200);
  if (result) {
    *uint64_t result = &unk_26E7246A8;
  }
  return result;
}

void physx::Dy::DynamicsContext::~DynamicsContext(physx::Dy::DynamicsContext *this)
{
  *(void *)this = &unk_26E7244D8;
  for (uint64_t i = 608; i != 632; i += 8)
    (***(void (****)(void))((char *)this + i))(*(void *)((char *)this + i));
  uint64_t v3 = (void *)*((void *)this + 72);
  if (v3)
  {
    int v4 = *((_DWORD *)v3 + 5);
    if (v4 < 0
      || ((v4 & 0x7FFFFFFF) != 0 ? (BOOL v5 = v3[1] == 0) : (BOOL v5 = 1),
          v5 || ((*(void (**)(void, void))(*(void *)*v3 + 24))(*v3, v3[1]), *((void *)this + 72))))
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *((void *)this + 72) = 0;
  uint64_t v6 = (void *)*((void *)this + 73);
  if (v6)
  {
    int v7 = *((_DWORD *)v6 + 5);
    if (v7 < 0
      || ((v7 & 0x7FFFFFFF) != 0 ? (BOOL v8 = v6[1] == 0) : (BOOL v8 = 1),
          v8 || ((*(void (**)(void, void))(*(void *)*v6 + 24))(*v6, v6[1]), *((void *)this + 73))))
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *((void *)this + 73) = 0;
  int v9 = *((_DWORD *)this + 169);
  if ((v9 & 0x80000000) == 0 && (v9 & 0x7FFFFFFF) != 0 && *((void *)this + 83)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v10 = *((_DWORD *)this + 165);
  if ((v10 & 0x80000000) == 0 && (v10 & 0x7FFFFFFF) != 0 && *((void *)this + 81)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v11 = *((_DWORD *)this + 161);
  if ((v11 & 0x80000000) == 0 && (v11 & 0x7FFFFFFF) != 0 && *((void *)this + 79)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v12 = *((_DWORD *)this + 151);
  if ((v12 & 0x80000000) == 0 && (v12 & 0x7FFFFFFF) != 0 && *((void *)this + 74)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v13 = *((_DWORD *)this + 143);
  if ((v13 & 0x80000000) == 0 && (v13 & 0x7FFFFFFF) != 0)
  {
    uint64_t v14 = *((void *)this + 70);
    if (v14) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v14 - *(void *)(v14 - 8));
    }
  }
  int v15 = *((_DWORD *)this + 139);
  if ((v15 & 0x80000000) == 0 && (v15 & 0x7FFFFFFF) != 0)
  {
    uint64_t v16 = *((void *)this + 68);
    if (v16) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v16 - *(void *)(v16 - 8));
    }
  }
  int v17 = *((_DWORD *)this + 135);
  if ((v17 & 0x80000000) == 0 && (v17 & 0x7FFFFFFF) != 0 && *((void *)this + 66)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v18 = *((_DWORD *)this + 131);
  if ((v18 & 0x80000000) == 0 && (v18 & 0x7FFFFFFF) != 0 && *((void *)this + 64)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v19 = *((_DWORD *)this + 127);
  if ((v19 & 0x80000000) == 0 && (v19 & 0x7FFFFFFF) != 0 && *((void *)this + 62)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v20 = *((_DWORD *)this + 123);
  if ((v20 & 0x80000000) == 0 && (v20 & 0x7FFFFFFF) != 0 && *((void *)this + 60)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v21 = *((_DWORD *)this + 119);
  if ((v21 & 0x80000000) == 0 && (v21 & 0x7FFFFFFF) != 0 && *((void *)this + 58)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v22 = *((_DWORD *)this + 115);
  if ((v22 & 0x80000000) == 0 && (v22 & 0x7FFFFFFF) != 0)
  {
    uint64_t v23 = *((void *)this + 56);
    if (v23) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v23 - *(void *)(v23 - 8));
    }
  }
  int v24 = *((_DWORD *)this + 111);
  if ((v24 & 0x80000000) == 0 && (v24 & 0x7FFFFFFF) != 0)
  {
    uint64_t v25 = *((void *)this + 54);
    if (v25) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v25 - *(void *)(v25 - 8));
    }
  }
  int v26 = *((_DWORD *)this + 107);
  if ((v26 & 0x80000000) == 0 && (v26 & 0x7FFFFFFF) != 0)
  {
    uint64_t v27 = *((void *)this + 52);
    if (v27) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v27 - *(void *)(v27 - 8));
    }
  }
  for (int j = (physx::shdfnd::SListImpl *)*((void *)this + 50); ; int j = (physx::shdfnd::SListImpl *)*((void *)this + 50))
  {
    uint64_t v29 = (physx::Dy::ThreadContext *)physx::shdfnd::SListImpl::pop(j);
    if (!v29) {
      break;
    }
    physx::Dy::ThreadContext::~ThreadContext(v29);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v30 - *(void *)(v30 - 8));
  }
  physx::shdfnd::SListT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::SListImpl>>::~SListT((uint64_t)this + 400);
  physx::Dy::Context::~Context(this);
}

{
  uint64_t vars8;

  physx::Dy::DynamicsContext::~DynamicsContext(this);
  JUMPOUT(0x237DBCBD0);
}

void physx::Dy::Context::~Context(physx::Dy::Context *this)
{
  *(void *)this = &unk_26E724C60;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    int v3 = *((_DWORD *)v2 + 5);
    if (v3 < 0
      || ((v3 & 0x7FFFFFFF) != 0 ? (BOOL v4 = v2[1] == 0) : (BOOL v4 = 1),
          v4 || ((*(void (**)(void, void))(*(void *)*v2 + 24))(*v2, v2[1]), *((void *)this + 1))))
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *((void *)this + 1) = 0;
  BOOL v5 = (void *)*((void *)this + 2);
  if (v5)
  {
    int v6 = *((_DWORD *)v5 + 5);
    if (v6 < 0
      || ((v6 & 0x7FFFFFFF) != 0 ? (BOOL v7 = v5[1] == 0) : (BOOL v7 = 1),
          v7 || ((*(void (**)(void, void))(*(void *)*v5 + 24))(*v5, v5[1]), *((void *)this + 2))))
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *((void *)this + 2) = 0;
  int v8 = *((_DWORD *)this + 61);
  if ((v8 & 0x80000000) == 0 && (v8 & 0x7FFFFFFF) != 0 && *((void *)this + 29) != 0) {
    (*(void (**)(void))(**((void **)this + 28) + 24))(*((void *)this + 28));
  }
  if (*((void *)this + 3)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
}

uint64_t physx::Dy::DynamicsContext::setDescFromIndices(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  v12[0] = a4;
  v12[1] = 0;
  uint64_t v4 = *(unsigned __int8 *)(a3 + 16);
  if (v4 == 2)
  {
    *(void *)a2 = *(void *)a3 & 0xFFFFFFFFFFFFFFC0;
    *(_WORD *)(a2 + 16) = *(_WORD *)a3 & 0x3F;
  }
  else
  {
    *(_WORD *)(a2 + 16) = -1;
    if (v4 == 3) {
      uint64_t v5 = result + 256;
    }
    else {
      uint64_t v5 = *(void *)(result + 544) + 32 * (v12[v4] + *(_DWORD *)a3);
    }
    *(void *)a2 = v5;
    uint64_t v6 = *(unsigned __int8 *)(a3 + 16);
    if (v6 == 3) {
      int v7 = 0;
    }
    else {
      int v7 = *(_DWORD *)a3 + v12[v6] + 1;
    }
    *(_DWORD *)(a2 + 20) = v7;
  }
  uint64_t v8 = *(unsigned __int8 *)(a3 + 17);
  if (v8 == 2)
  {
    *(void *)(a2 + 8) = *(void *)(a3 + 8) & 0xFFFFFFFFFFFFFFC0;
    *(_WORD *)(a2 + 18) = *(_WORD *)(a3 + 8) & 0x3F;
  }
  else
  {
    *(_WORD *)(a2 + 18) = -1;
    if (v8 == 3) {
      uint64_t v9 = result + 256;
    }
    else {
      uint64_t v9 = *(void *)(result + 544) + 32 * (v12[v8] + *(_DWORD *)(a3 + 8));
    }
    *(void *)(a2 + 8) = v9;
    uint64_t v10 = *(unsigned __int8 *)(a3 + 17);
    if (v10 == 3) {
      int v11 = 0;
    }
    else {
      int v11 = *(_DWORD *)(a3 + 8) + v12[v10] + 1;
    }
    *(_DWORD *)(a2 + 24) = v11;
  }
  return result;
}

uint64_t physx::Dy::DynamicsContext::update(physx::Dy::DynamicsContext *this, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, float a9, uint64_t a10, long long *a11, uint64_t a12, uint64_t a13)
{
  long long v17 = *a11;
  long long v18 = a11[1];
  *((void *)this + 91) = *((void *)a11 + 4);
  *(_OWORD *)((char *)this + 696) = v17;
  *(_OWORD *)((char *)this + 712) = v18;
  float v19 = 1.0 / a9;
  if (a9 == 0.0) {
    float v19 = 0.0;
  }
  *((float *)this + 22) = a9;
  *((float *)this + 23) = v19;
  *((void *)this + 13) = *(void *)a13;
  *((_DWORD *)this + 28) = *(_DWORD *)(a13 + 8);
  int v20 = *(_DWORD *)(a2 + 552);
  uint64_t v21 = *(unsigned int *)(a2 + 432);
  if (v21)
  {
    int v22 = *(unsigned int **)(a2 + 424);
    unsigned int v23 = *(_DWORD *)(a2 + 200);
    uint64_t v24 = *(void *)(a2 + 176);
    do
    {
      unsigned int v25 = *v22++;
      uint64_t v26 = *(void *)(*(void *)(v24 + 8 * (v25 / v23)) + 8 * (v25 % v23));
      if (v26) {
        *(unsigned char *)(v26 + 82) = 0;
      }
      --v21;
    }
    while (v21);
  }
  uint64_t v27 = (_DWORD *)*((void *)this + 31);
  v27[152] = *(_DWORD *)(a2 + 416);
  if (v20)
  {
    v27[151] = *(_DWORD *)(a2 + 384);
    v27[150] = *(_DWORD *)(a2 + 460);
    *((_DWORD *)this + 171) = 0;
    physx::Dy::DynamicsContext::resetThreadContexts(this);
    (*(void (**)(uint64_t))(*(void *)a4 + 32))(a4);
    uint64_t v28 = physx::Cm::FlushPool::allocate(*((pthread_mutex_t ***)this + 93), 64, 0x10u);
    *(void *)(v28 + 8) = *((void *)this + 96);
    *(void *)(v28 + 16) = 0;
    *(_DWORD *)(v28 + 32) = 0;
    *(void *)uint64_t v28 = &unk_26E724A10;
    *(void *)(v28 + 40) = this;
    *(void *)(v28 + 48) = a2;
    *(void *)(v28 + 56) = a4;
    *(_DWORD *)(v28 + 32) = 1;
    *(void *)(v28 + 24) = a3;
    if (a3)
    {
      (*(void (**)(uint64_t))(*(void *)a3 + 32))(a3);
      *(void *)(v28 + 16) = *(void *)(*(void *)(v28 + 24) + 16);
    }
    *((void *)this + 34) = 0;
    *((_DWORD *)this + 70) = 0;
    *((void *)this + 32) = 0;
    *((_DWORD *)this + 66) = 0;
    uint64_t v29 = *(unsigned int *)(a2 + 416);
    uint64_t v30 = *(void *)(a2 + 408);
    *((_DWORD *)this + 170) = v29;
    unsigned int v31 = *(_DWORD *)(a2 + 384);
    int v58 = *(_DWORD *)(a2 + 400);
    int v32 = v31 + v29;
    unsigned int v33 = *((_DWORD *)this + 139) & 0x7FFFFFFF;
    if (v31 + v29 > v33)
    {
      unsigned int v34 = (v32 + 31) & 0xFFFFFFE0;
      if (v33 < v34) {
        physx::shdfnd::Array<physx::PxSolverBody,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxSolverBody>>>::recreate((unint64_t *)this + 68, v34);
      }
      unsigned int v35 = (v32 & 0xFFFFFFE0) + 32;
      if ((*((_DWORD *)this + 143) & 0x7FFFFFFFu) < v35) {
        physx::shdfnd::Array<physx::PxSolverBodyData,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxSolverBodyData>>>::recreate((unint64_t *)this + 70, (v32 & 0xFFFFFFE0) + 32);
      }
      if ((*((_DWORD *)this + 161) & 0x7FFFFFFFu) < v35) {
        physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)this + 632, (v32 & 0xFFFFFFE0) + 32);
      }
    }
    memset(v62, 0, 32);
    physx::shdfnd::Array<physx::PxSolverBody,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxSolverBody>>>::resize((uint64_t)this + 544, v31 + v29, (uint64_t)v62);
    memset(v61, 0, sizeof(v61));
    physx::shdfnd::Array<physx::PxSolverBodyData,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxSolverBodyData>>>::resize((uint64_t)this + 560, (v32 + 1), (uint64_t)v61);
    int v60 = 0;
    unsigned int v59 = v31;
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)this + 632, v31, &v60);
    uint64_t v36 = *((void *)this + 70);
    *(_OWORD *)uint64_t v36 = *((_OWORD *)this + 18);
    *(_OWORD *)(v36 + 16) = *((_OWORD *)this + 19);
    *(void *)(v36 + 32) = *((void *)this + 40);
    *(void *)(v36 + 40) = *((void *)this + 41);
    *(void *)(v36 + 48) = *((void *)this + 42);
    *(void *)(v36 + 56) = *((void *)this + 43);
    *(_DWORD *)(v36 + 64) = *((_DWORD *)this + 88);
    uint64_t v37 = *(void *)((char *)this + 356);
    *(_DWORD *)(v36 + 76) = *((_DWORD *)this + 91);
    *(void *)(v36 + 68) = v37;
    *(_OWORD *)(v36 + 80) = *((_OWORD *)this + 23);
    *(void *)(v36 + 96) = *((void *)this + 48);
    *(_DWORD *)(v36 + 104) = *((_DWORD *)this + 98);
    *(_DWORD *)(v36 + 108) = *((_DWORD *)this + 99);
    bzero(*((void **)this + 68), (32 * v29));
    if (v29)
    {
      uint64_t v38 = v30;
      unsigned int v39 = 0;
      unsigned int v40 = v29;
      do
      {
        unsigned int v41 = v40 - 1024;
        uint64_t v42 = v29;
        if (v40 >= 0x400) {
          int v43 = 1024;
        }
        else {
          int v43 = v40;
        }
        uint64_t v44 = physx::Cm::FlushPool::allocate(*((pthread_mutex_t ***)this + 93), 72, 0x10u);
        uint64_t v45 = *((void *)this + 70) + 112 * v39;
        *(void *)(v44 + 8) = *((void *)this + 96);
        *(void *)(v44 + 16) = 0;
        *(_DWORD *)(v44 + 32) = 0;
        *(void *)uint64_t v44 = &unk_26E724A80;
        *(void *)(v44 + 40) = v38 + 4 * v39;
        *(_DWORD *)(v44 + 48) = v43;
        uint64_t v29 = v42;
        *(void *)(v44 + 56) = a2 + 224;
        *(void *)(v44 + 64) = v45;
        *(_DWORD *)(v44 + 32) = 1;
        *(void *)(v44 + 24) = v28;
        (*(void (**)(uint64_t))(*(void *)v28 + 32))(v28);
        *(void *)(v44 + 16) = *(void *)(*(void *)(v44 + 24) + 16);
        (*(void (**)(uint64_t))(*(void *)v44 + 40))(v44);
        v39 += 1024;
        unsigned int v40 = v41;
      }
      while (v39 < v42);
    }
    int v46 = *(_DWORD *)(a2 + 456);
    int v47 = v46 + (v58 << 6) + *(_DWORD *)(a2 + 460);
    *((_DWORD *)this + 106) = 0;
    unsigned int v48 = (v47 + 63) & 0xFFFFFFC0;
    if ((*((_DWORD *)this + 107) & 0x7FFFFFFFu) < v48) {
      physx::shdfnd::Array<physx::PxSolverConstraintDesc,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>>::recreate((uint64_t)this + 416, (v47 + 63) & 0xFFFFFFC0);
    }
    *((_DWORD *)this + 106) = v47;
    *((_DWORD *)this + 110) = 0;
    if ((*((_DWORD *)this + 111) & 0x7FFFFFFFu) < v48) {
      physx::shdfnd::Array<physx::PxSolverConstraintDesc,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>>::recreate((uint64_t)this + 432, (v47 + 63) & 0xFFFFFFC0);
    }
    *((_DWORD *)this + 110) = v47;
    *((_DWORD *)this + 114) = 0;
    if ((*((_DWORD *)this + 115) & 0x7FFFFFFFu) < v48) {
      physx::shdfnd::Array<physx::PxSolverConstraintDesc,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>>::recreate((uint64_t)this + 448, (v47 + 63) & 0xFFFFFFC0);
    }
    *((_DWORD *)this + 114) = v47;
    *((_DWORD *)this + 118) = 0;
    if ((*((_DWORD *)this + 119) & 0x7FFFFFFFu) < v48) {
      physx::shdfnd::Array<physx::PxConstraintBatchHeader,physx::shdfnd::ReflectionAllocator<physx::PxConstraintBatchHeader>>::recreate((uint64_t)this + 464, (v47 + 63) & 0xFFFFFFC0);
    }
    *((_DWORD *)this + 118) = v47;
    *((_DWORD *)this + 168) = 0;
    unsigned int v49 = (v46 + 63) & 0xFFFFFFC0;
    if ((*((_DWORD *)this + 169) & 0x7FFFFFFFu) < v49) {
      physx::shdfnd::Array<physx::PxsIndexedContactManager,physx::shdfnd::ReflectionAllocator<physx::PxsIndexedContactManager>>::recreate((uint64_t)this + 664, v49);
    }
    *((_DWORD *)this + 168) = v46;
    *((_DWORD *)this + 122) = 0;
    unsigned int v50 = (v59 + 63) & 0xFFFFFFC0;
    if ((*((_DWORD *)this + 123) & 0x7FFFFFFFu) < v50) {
      physx::shdfnd::Array<physx::Cm::SpatialVector,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVector>>::recreate((uint64_t)this + 480, (v59 + 63) & 0xFFFFFFC0);
    }
    *((_DWORD *)this + 122) = v59;
    *((_DWORD *)this + 126) = 0;
    if ((*((_DWORD *)this + 127) & 0x7FFFFFFFu) < v50) {
      physx::shdfnd::Array<physx::PxsBodyCore *,physx::shdfnd::ReflectionAllocator<physx::PxsBodyCore *>>::recreate((uint64_t)this + 496, (v59 + 63) & 0xFFFFFFC0);
    }
    *((_DWORD *)this + 126) = v59;
    *((_DWORD *)this + 130) = 0;
    if ((*((_DWORD *)this + 131) & 0x7FFFFFFFu) < v50) {
      physx::shdfnd::Array<physx::PxsRigidBody *,physx::shdfnd::ReflectionAllocator<physx::PxsRigidBody *>>::recreate((uint64_t)this + 512, (v59 + 63) & 0xFFFFFFC0);
    }
    *((_DWORD *)this + 130) = v59;
    *((_DWORD *)this + 134) = 0;
    unsigned int v51 = (v58 + 63) & 0xFFFFFFC0;
    if ((*((_DWORD *)this + 135) & 0x7FFFFFFFu) < v51) {
      physx::shdfnd::Array<physx::Dy::ArticulationV *,physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationV *>>::recreate((uint64_t)this + 528, v51);
    }
    *((_DWORD *)this + 134) = v58;
    *((_DWORD *)this + 164) = 0;
    if ((*((_DWORD *)this + 165) & 0x7FFFFFFFu) < v50) {
      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)this + 648, (v59 + 63) & 0xFFFFFFC0);
    }
    *((_DWORD *)this + 164) = v59;
    uint64_t v52 = *((void *)this + 1);
    *(_DWORD *)(v52 + 16) = 0;
    unsigned int v53 = v46 - 1;
    if (!v46) {
      unsigned int v53 = 0;
    }
    unsigned int v54 = v53 | (v53 >> 1) | ((v53 | (v53 >> 1)) >> 2);
    unsigned int v55 = v54 | (v54 >> 4) | ((v54 | (v54 >> 4)) >> 8);
    unsigned int v56 = (v55 | HIWORD(v55)) + 1;
    if ((*(_DWORD *)(v52 + 20) & 0x7FFFFFFFu) < v56) {
      physx::shdfnd::Array<physx::Dy::ThresholdStreamElement,physx::shdfnd::VirtualAllocator>::recreate(v52, v56);
    }
    *((_DWORD *)this + 190) = 1 - *((_DWORD *)this + 190);
    return (*(uint64_t (**)(uint64_t))(*(void *)v28 + 40))(v28);
  }
  else
  {
    *((void *)v27 + 75) = 0;
    *((_DWORD *)this + 171) = 0;
    return physx::Dy::DynamicsContext::resetThreadContexts(this);
  }
}

uint64_t physx::shdfnd::Array<physx::PxSolverBody,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxSolverBody>>>::resize(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2) {
    uint64_t result = physx::shdfnd::Array<physx::PxSolverBody,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxSolverBody>>>::recreate((unint64_t *)result, a2);
  }
  uint64_t v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    unint64_t v7 = *(void *)v5 + 32 * a2;
    unint64_t v8 = *(void *)v5 + 32 * v6;
    do
    {
      *(void *)unint64_t v8 = *(void *)a3;
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(v8 + 12) = *(_DWORD *)(a3 + 12);
      *(void *)(v8 + 16) = *(void *)(a3 + 16);
      *(_DWORD *)(v8 + 24) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(v8 + 28) = *(_DWORD *)(a3 + 28);
      v8 += 32;
    }
    while (v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxSolverBodyData,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxSolverBodyData>>>::resize(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = a2;
  uint64_t v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2) {
    uint64_t result = physx::shdfnd::Array<physx::PxSolverBodyData,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxSolverBodyData>>>::recreate((unint64_t *)result, a2);
  }
  unsigned int v6 = *(_DWORD *)(v5 + 8);
  if (v6 < v4)
  {
    unint64_t v7 = *(void *)v5 + 112 * v4;
    unint64_t v8 = *(void *)v5 + 112 * v6;
    do
    {
      *(_OWORD *)unint64_t v8 = *(_OWORD *)a3;
      *(_OWORD *)(v8 + 16) = *(_OWORD *)(a3 + 16);
      *(void *)(v8 + 32) = *(void *)(a3 + 32);
      *(void *)(v8 + 40) = *(void *)(a3 + 40);
      *(void *)(v8 + 48) = *(void *)(a3 + 48);
      *(void *)(v8 + 56) = *(void *)(a3 + 56);
      *(_DWORD *)(v8 + 64) = *(_DWORD *)(a3 + 64);
      uint64_t v9 = *(void *)(a3 + 68);
      *(_DWORD *)(v8 + 76) = *(_DWORD *)(a3 + 76);
      *(void *)(v8 + 68) = v9;
      *(_OWORD *)(v8 + 80) = *(_OWORD *)(a3 + 80);
      *(void *)(v8 + 96) = *(void *)(a3 + 96);
      *(_DWORD *)(v8 + 104) = *(_DWORD *)(a3 + 104);
      *(_DWORD *)(v8 + 108) = *(_DWORD *)(a3 + 108);
      v8 += 112;
    }
    while (v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = v4;
  return result;
}

uint64_t physx::Dy::DynamicsContext::mergeResults(physx::Dy::DynamicsContext *this)
{
  uint64_t v2 = *((void *)this + 50);
  pthread_mutex_lock((pthread_mutex_t *)(v2 + 8));
  int v3 = *(int32x4_t **)v2;
  *(void *)uint64_t v2 = 0;
  uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)(v2 + 8));
  if (v3)
  {
    uint64_t v5 = v3;
    do
    {
      unsigned int v6 = (int32x4_t *)v5->i64[0];
      *(int32x4_t *)(*((void *)this + 31) + 600) = vaddq_s32(*(int32x4_t *)(*((void *)this + 31) + 600), v5[769]);
      v5[769] = 0uLL;
      uint64_t v5 = v6;
    }
    while (v6);
    do
    {
      unint64_t v7 = (int32x4_t *)v3->i64[0];
      uint64_t v8 = *((void *)this + 50);
      pthread_mutex_lock((pthread_mutex_t *)(v8 + 8));
      v3->i64[0] = *(void *)v8;
      *(void *)uint64_t v8 = v3;
      uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)(v8 + 8));
      int v3 = v7;
    }
    while (v7);
  }
  return result;
}

void physx::Dy::PxsPreIntegrateTask::runInternal(float32x2_t *this)
{
  float v2 = this[11].f32[0];
  uint64_t v4 = this[14].u32[0];
  uint64_t v3 = this[14].u32[1];
  unsigned int v71 = v3;
  uint64_t v72 = *(void *)&this[7] + 8 * v4;
  uint64_t v5 = (int *)(*(void *)&this[8] + 4 * v4);
  unint64_t v7 = (atomic_uint *)this[12];
  unsigned int v6 = (atomic_uint *)this[13];
  uint64_t v75 = *(void *)&this[9] + 32 * v4;
  unsigned __int32 v69 = this[14].u32[0];
  unsigned int v70 = v5;
  uint64_t v67 = *(void *)&this[6] + 8 * v4;
  float32x2_t v68 = this[10];
  if (v3 < 2)
  {
    unsigned int v10 = 0;
    unsigned int v9 = 0;
  }
  else
  {
    uint64_t v8 = 0;
    unsigned int v9 = 0;
    unsigned int v10 = 0;
    uint64_t v73 = 8 * v3 - 8;
    _X27 = *(void *)&this[10] + 112 * v4 + 240;
    uint64_t v12 = *(void *)&this[6] + 8 * v4 + 8;
    uint64_t v13 = *(void *)&this[9] + 32 * v4 + 14;
    float v74 = this[11].f32[0];
    do
    {
      uint64_t v14 = *(float32x2_t **)(v12 + v8 - 8);
      _X9 = *(void *)(v12 + v8);
      __asm
      {
        PRFM            #0, [X9]
        PRFM            #0, [X9,#0x80]
        PRFUM           #0, [X27,#-0x80]
        PRFM            #0, [X27]
      }
      if (v14[3].i16[3] > v9) {
        unsigned int v9 = v14[3].i16[3];
      }
      if (HIBYTE(v14[3].u16[3]) > v10) {
        unsigned int v10 = HIBYTE(v14[3].u16[3]);
      }
      float32x2_t v24 = v14[8];
      float v25 = v14[9].f32[0];
      if (!v14[19].i8[5])
      {
        float v26 = *(float *)(*(void *)(v72 + v8) + 76);
        float32x2_t v24 = vadd_f32(v24, vmul_n_f32(vmul_n_f32(this[15], v2), v26));
        float v25 = v25 + (float)(v26 * (float)(v2 * this[16].f32[0]));
      }
      float v27 = v14[12].f32[0];
      float v28 = v14[12].f32[1];
      if ((float)(1.0 - (float)(v2 * v14[13].f32[0])) < 0.0) {
        float v29 = 0.0;
      }
      else {
        float v29 = 1.0 - (float)(v2 * v14[13].f32[0]);
      }
      if ((float)(1.0 - (float)(v2 * v14[13].f32[1])) < 0.0) {
        float v30 = 0.0;
      }
      else {
        float v30 = 1.0 - (float)(v2 * v14[13].f32[1]);
      }
      float32x2_t v31 = vmul_n_f32(v24, v29);
      float v32 = v29 * v25;
      float v33 = vmlas_n_f32(COERCE_FLOAT(vmul_f32(v31, v31).i32[1]), v31.f32[0], v31.f32[0]) + (float)(v32 * v32);
      if (v33 > v28)
      {
        float v34 = sqrtf(v28 / v33);
        float32x2_t v31 = vmul_n_f32(v31, v34);
        float v32 = v32 * v34;
      }
      float32x2_t v35 = vmul_n_f32(v14[10], v30);
      float v36 = v30 * v14[11].f32[0];
      float v37 = vmlas_n_f32(COERCE_FLOAT(vmul_f32(v35, v35).i32[1]), v35.f32[0], v35.f32[0]) + (float)(v36 * v36);
      if (v37 > v27)
      {
        float v38 = sqrtf(v27 / v37);
        float32x2_t v35 = vmul_n_f32(v35, v38);
        float v36 = v36 * v38;
      }
      v14[8] = v31;
      v14[9].f32[0] = v32;
      v14[10] = v35;
      v14[11].f32[0] = v36;
      int v39 = *v5++;
      physx::Dy::copyToSolverBodyData((uint64_t)&v14[8], (uint64_t)&v14[10], (float *)&v14[14], (uint64_t)v14, v39, _X27 - 128, v14[19].u8[6], v14[15].f32[1], v14[9].f32[1], v14[16].f32[0], v14[11].f32[1]);
      *(_DWORD *)(v75 + 4 * v8 + 28) = 0;
      *(_DWORD *)(v13 - 2) = 0;
      v8 += 8;
      _X27 += 112;
      v13 += 32;
      float v2 = v74;
    }
    while (v73 != v8);
  }
  uint64_t v40 = v71 - 1;
  unsigned int v41 = *(float32x2_t **)(v67 + 8 * v40);
  float v42 = v41[12].f32[1];
  float32x2_t v43 = v41[8];
  float v44 = v41[9].f32[0];
  float v45 = 1.0 - (float)(v2 * v41[13].f32[0]);
  if (!v41[19].i8[5])
  {
    float v46 = *(float *)(*(void *)(v72 + 8 * v40) + 76);
    float32x2_t v43 = vadd_f32(v43, vmul_n_f32(vmul_n_f32(this[15], v2), v46));
    float v44 = v44 + (float)(v46 * (float)(v2 * this[16].f32[0]));
  }
  float v47 = v41[12].f32[0];
  float v48 = 0.0;
  if (v45 < 0.0) {
    float v45 = 0.0;
  }
  if ((float)(1.0 - (float)(v2 * v41[13].f32[1])) >= 0.0) {
    float v48 = 1.0 - (float)(v2 * v41[13].f32[1]);
  }
  float32x2_t v49 = vmul_n_f32(v43, v45);
  float v50 = v45 * v44;
  float32x2_t v51 = vmul_n_f32(v41[10], v48);
  float v52 = v48 * v41[11].f32[0];
  float v53 = vmlas_n_f32(COERCE_FLOAT(vmul_f32(v49, v49).i32[1]), v49.f32[0], v49.f32[0]) + (float)(v50 * v50);
  if (v53 > v42)
  {
    float v54 = sqrtf(v42 / v53);
    float32x2_t v49 = vmul_n_f32(v49, v54);
    float v50 = v50 * v54;
  }
  float v55 = vmlas_n_f32(COERCE_FLOAT(vmul_f32(v51, v51).i32[1]), v51.f32[0], v51.f32[0]) + (float)(v52 * v52);
  if (v55 > v47)
  {
    float v56 = sqrtf(v47 / v55);
    float32x2_t v51 = vmul_n_f32(v51, v56);
    float v52 = v52 * v56;
  }
  unsigned int v57 = HIBYTE(v41[3].u16[3]);
  if (v41[3].i16[3] <= v9) {
    atomic_uint v58 = v9;
  }
  else {
    atomic_uint v58 = v41[3].i16[3];
  }
  v41[8] = v49;
  v41[9].f32[0] = v50;
  v41[10] = v51;
  v41[11].f32[0] = v52;
  physx::Dy::copyToSolverBodyData((uint64_t)&v41[8], (uint64_t)&v41[10], (float *)&v41[14], (uint64_t)v41, v70[v40], *(void *)&v68 + 112 * v69 + 112 * v71, v41[19].u8[6], v41[15].f32[1], v41[9].f32[1], v41[16].f32[0], v41[11].f32[1]);
  uint64_t v59 = v75 + 32 * v40;
  *(_DWORD *)(v59 + 28) = 0;
  *(_DWORD *)(v59 + 12) = 0;
  do
  {
    atomic_uint v60 = *v7;
    if (*v7 <= v58) {
      unsigned int v61 = v58;
    }
    else {
      unsigned int v61 = *v7;
    }
    atomic_uint v62 = *v7;
    atomic_compare_exchange_strong(v7, (unsigned int *)&v62, v61);
  }
  while (v62 != v60);
  if (v57 <= v10) {
    atomic_uint v63 = v10;
  }
  else {
    atomic_uint v63 = v57;
  }
  do
  {
    atomic_uint v64 = *v6;
    if (*v6 <= v63) {
      unsigned int v65 = v63;
    }
    else {
      unsigned int v65 = *v6;
    }
    atomic_uint v66 = *v6;
    atomic_compare_exchange_strong(v6, (unsigned int *)&v66, v65);
  }
  while (v66 != v64);
}

uint64_t physx::Dy::solveParallel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = physx::shdfnd::SListImpl::pop(*(physx::shdfnd::SListImpl **)(a1 + 400));
  if (!v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ThreadContext>::getName() [T = physx::Dy::ThreadContext]";
    }
    else {
      unint64_t v7 = "<allocation names disabled>";
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24) + 16))(v6 + 24, 12343, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/include/utils/PxcThreadCoherentCache.h", 82);
    if (v8)
    {
      unsigned int v9 = (physx::Dy::ThreadContext *)((v8 + 23) & 0xFFFFFFFFFFFFFFF0);
      *((void *)v9 - 1) = (char *)v9 - v8;
    }
    else
    {
      unsigned int v9 = 0;
    }
    unsigned int v10 = v9;
    physx::Dy::ThreadContext::ThreadContext(v9, *(physx::PxcNpMemBlockPool **)(a1 + 408));
    uint64_t v5 = v10;
  }
  *((_DWORD *)v5 + 3042) = 0;
  unsigned int v11 = *(_DWORD *)(a2 + 224);
  char v192 = v5;
  if ((*((_DWORD *)v5 + 3043) & 0x7FFFFFFFu) < v11)
  {
    physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate((uint64_t)(v5 + 1520), v11);
    uint64_t v5 = v192;
    unsigned int v11 = *(_DWORD *)(a2 + 224);
  }
  *((_DWORD *)v5 + 3042) = v11;
  *((_DWORD *)v5 + 3046) = 0;
  if ((*((_DWORD *)v5 + 3047) & 0x7FFFFFFFu) < v11)
  {
    physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate((uint64_t)(v5 + 1522), v11);
    uint64_t v5 = v192;
    unsigned int v11 = *(_DWORD *)(a2 + 224);
  }
  *((_DWORD *)v5 + 3046) = v11;
  uint64_t v12 = v5[1520];
  uint64_t v13 = v5[1522];
  uint64_t v14 = *(void *)(a1 + 8 * *(unsigned int *)(a1 + 148) + 608);
  int v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v14 + 24))(v14, a2, v12, v13);
  if (*(_DWORD *)(a2 + 124) < v15)
  {
    int v17 = v15;
    int v18 = 30000;
    while (*(_DWORD *)(a2 + 124) < v17)
    {
      if (!--v18)
      {
        sched_yield();
        int v18 = 10000;
      }
    }
  }
  signed int add = atomic_fetch_add((atomic_uint *volatile)(a2 + 144), 0x80u);
  int v196 = *(_DWORD *)(a2 + 24);
  signed int v20 = *(_DWORD *)(a2 + 40);
  uint64_t v195 = *(void *)(a2 + 88);
  uint64_t v202 = *(void *)(a2 + 104);
  uint64_t v203 = *(void *)(a2 + 112);
  uint64_t v197 = a2;
  signed int v200 = v20;
  unsigned int v21 = 0;
  if (add >= v20)
  {
    int v23 = 128;
  }
  else
  {
    uint64_t v22 = *(void *)(a2 + 32);
    int v23 = 128;
    do
    {
      if (v20 - add >= 128) {
        int v24 = 128;
      }
      else {
        int v24 = v20 - add;
      }
      if (v20 - add >= 1)
      {
        unsigned int v25 = v21;
        if (v24 <= 1) {
          int v26 = 1;
        }
        else {
          int v26 = v24;
        }
        uint64_t v27 = v22 + 96 * add;
        add += v26;
        int v28 = v26;
        do
        {
          float v29 = (void (*)(uint64_t, float))physx::Dy::ArticulationPImpl::sUpdateBodies[*(unsigned int *)(*(void *)v27 + 40)];
          if (v29) {
            v29(v27, *(float *)(a1 + 88));
          }
          v27 += 96;
          --v28;
        }
        while (v28);
        unsigned int v21 = v26 + v25;
        signed int v20 = v200;
      }
      v23 -= v24;
      if (!v23)
      {
        int v23 = 128;
        signed int add = atomic_fetch_add((atomic_uint *volatile)(v197 + 144), 0x80u);
      }
    }
    while (add < v20);
  }
  int v30 = add - v20;
  int v31 = v196;
  if (add - v20 < v196)
  {
    uint64_t v32 = v197;
    uint64_t v194 = *(void *)(v197 + 8);
    uint64_t v193 = *(void *)(v197 + 16) + 112 * *(unsigned int *)(v197 + 28) + 220;
    while (1)
    {
      int v33 = v31 - v30 >= v23 ? v23 : v31 - v30;
      if (v33 >= 1) {
        break;
      }
LABEL_141:
      int v23 = 128;
      int v30 = atomic_fetch_add((atomic_uint *volatile)(v32 + 144), 0x80u) - v20;
      if (v30 >= v31) {
        goto LABEL_144;
      }
    }
    int v198 = v33;
    unsigned int v199 = v21;
    uint64_t v34 = 32 * v30;
    uint64_t v35 = v194;
    float v36 = (float *)(v193 + 112 * v30);
    int v37 = v30 + 4;
    uint64_t v38 = v195;
    int v39 = (uint64_t *)(v203 + 8 * v30);
    _X21 = v202 + 256 + 8 * v30;
    while (1)
    {
      if (v37 >= v196 - 1) {
        int v41 = v196 - 1;
      }
      else {
        int v41 = v37;
      }
      _X8 = *(void *)(v202 + 8 * v41);
      __asm
      {
        PRFM            #0, [X8]
        PRFM            #0, [X8,#0x80]
      }
      _X8 = (float32x2_t *)(v35 + v34);
      __asm { PRFM            #0, [X8,#0x80] }
      _X23 = v38 + v34;
      __asm
      {
        PRFM            #0, [X23,#0x80]
        PRFM            #0, [X21]
      }
      _X9 = v203 + 8 * v41;
      __asm { PRFM            #0, [X9] }
      float v56 = *(float *)(a1 + 88);
      __int16 v57 = *(_WORD *)v36;
      if (!*(_WORD *)v36) {
        goto LABEL_55;
      }
      if (v57)
      {
        *(_DWORD *)_X23 = 0;
        *(_DWORD *)(v35 + v34) = 0;
        if ((v57 & 2) == 0)
        {
LABEL_50:
          if ((v57 & 4) == 0) {
            goto LABEL_51;
          }
          goto LABEL_103;
        }
      }
      else if ((v57 & 2) == 0)
      {
        goto LABEL_50;
      }
      *(_DWORD *)(v38 + v34 + 4) = 0;
      *(_DWORD *)(v35 + v34 + 4) = 0;
      if ((v57 & 4) == 0)
      {
LABEL_51:
        if ((v57 & 8) != 0) {
          goto LABEL_104;
        }
        goto LABEL_52;
      }
LABEL_103:
      *(_DWORD *)(v38 + v34 + 8) = 0;
      *(_DWORD *)(v35 + v34 + 8) = 0;
      if ((v57 & 8) != 0)
      {
LABEL_104:
        *(_DWORD *)(_X23 + 16) = 0;
        *(_DWORD *)(v35 + v34 + 16) = 0;
        if ((v57 & 0x10) == 0)
        {
LABEL_53:
          if ((v57 & 0x20) == 0) {
            goto LABEL_55;
          }
LABEL_54:
          *(_DWORD *)(v38 + v34 + 24) = 0;
          *(_DWORD *)(v35 + v34 + 24) = 0;
          goto LABEL_55;
        }
        goto LABEL_105;
      }
LABEL_52:
      if ((v57 & 0x10) == 0) {
        goto LABEL_53;
      }
LABEL_105:
      *(_DWORD *)(v38 + v34 + 20) = 0;
      *(_DWORD *)(v35 + v34 + 20) = 0;
      if ((v57 & 0x20) != 0) {
        goto LABEL_54;
      }
LABEL_55:
      float v58 = *(v36 - 25);
      float v59 = v58 + *(float *)(_X23 + 8);
      float v60 = *(float *)(_X23 + 16);
      float v61 = *(v36 - 17);
      float v62 = *(v36 - 14);
      float v63 = *(v36 - 11);
      float v64 = *(v36 - 21);
      float32x2_t v65 = *(float32x2_t *)(v36 - 27);
      float32x2_t v66 = *(float32x2_t *)(v36 - 3);
      float32x2_t v67 = *(float32x2_t *)(v36 - 19);
      float v68 = v60 * v67.f32[0];
      float32x2_t v69 = *(float32x2_t *)(v36 - 16);
      float32x2_t v70 = *(float32x2_t *)(v36 - 13);
      float32x2_t v71 = *(float32x2_t *)(_X23 + 20);
      float v72 = (float)((float)((float)(v60 * v61) + (float)(v62 * v71.f32[0])) + vmuls_lane_f32(v63, v71, 1)) + v64;
      *(v36 - 1) = (float)(v56 * v59) + *(v36 - 1);
      *(float32x2_t *)&long long v16 = vadd_f32(v65, *(float32x2_t *)_X23);
      *(float32x2_t *)(v36 - 3) = vadd_f32(vmul_n_f32(*(float32x2_t *)&v16, v56), v66);
      *(float32x2_t *)(v36 - 27) = vadd_f32(v65, *_X8);
      *(v36 - 25) = v58 + _X8[1].f32[0];
      float v73 = _X8[2].f32[0];
      float v74 = _X8[2].f32[1];
      float v75 = (float)(v61 * v73) + (float)(v62 * v74);
      float v76 = _X8[3].f32[0];
      float v77 = v75 + (float)(v63 * v76);
      float32x2_t v78 = vmul_f32(v71, (float32x2_t)vzip2_s32((int32x2_t)v69, (int32x2_t)v70));
      float v79 = (float)(vmuls_lane_f32(v60, v67, 1) + v78.f32[0]) + v78.f32[1];
      float32x2_t v80 = *(float32x2_t *)(v36 - 23);
      float v81 = (float)((float)(v68 + vmul_f32(v71, v69).f32[0]) + vmuls_lane_f32(v70.f32[0], v71, 1)) + v80.f32[0];
      float v82 = v79 + v80.f32[1];
      float v83 = (float)((float)(v82 * v82) + (float)(v81 * v81)) + (float)(v72 * v72);
      *(float32x2_t *)(v36 - 23) = vadd_f32(v80, vadd_f32(vadd_f32(vmul_n_f32(v67, v73), vmul_n_f32(v69, v74)), vmul_n_f32(v70, v76)));
      *(v36 - 21) = v64 + v77;
      float v205 = v56;
      if (v83 != 0.0)
      {
        float v84 = sqrtf(v83);
        long long v204 = v16;
        if (v84 > 10000000.0)
        {
          float v85 = 0.0;
          BOOL v86 = v83 <= 0.0;
          float v87 = 0.0;
          float v88 = 0.0;
          if (!v86)
          {
            float v85 = v81 * (float)(1.0 / v84);
            float v87 = v82 * (float)(1.0 / v84);
            float v88 = v72 * (float)(1.0 / v84);
          }
          float v81 = v85 * 10000000.0;
          float v82 = v87 * 10000000.0;
          float v84 = 10000000.0;
          float v72 = v88 * 10000000.0;
        }
        __float2 v89 = __sincosf_stret((float)(v56 * v84) * 0.5);
        *(float *)v90.i32 = v81 * (float)(v89.__sinval / v84);
        float32x4_t v91 = *(float32x4_t *)(v36 - 7);
        *(float *)&v90.i32[1] = v82 * (float)(v89.__sinval / v84);
        *(float *)&v90.i32[2] = v72 * (float)(v89.__sinval / v84);
        float32x4_t v92 = (float32x4_t)vextq_s8(vextq_s8(v90, v90, 0xCuLL), v90, 8uLL);
        *(float *)&v90.i32[3] = -*(float *)v90.i32;
        float32x4_t v93 = (float32x4_t)vzip1q_s32((int32x4_t)v91, (int32x4_t)v91);
        v93.i32[0] = *(void *)(v36 - 5);
        _Q2 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vdupq_laneq_s32((int32x4_t)v91, 3), (int8x16_t)v91, 4uLL), (float32x4_t)v90), (float32x4_t)0, v91);
        int32x4_t v95 = vzip2q_s32((int32x4_t)v92, (int32x4_t)v91);
        float32x4_t v96 = vmulq_n_f32(v91, v89.__cosval);
        v91.i32[3] = v92.i32[1];
        int32x4_t v97 = vrev64q_s32((int32x4_t)v92);
        v92.f32[3] = -(float)(v82 * (float)(v89.__sinval / v84));
        _Q0 = vaddq_f32(v96, vmlsq_f32(vmlaq_f32(_Q2, v93, v92), (float32x4_t)vzip1q_s32(v97, v95), (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v91, (int32x4_t)vextq_s8((int8x16_t)v91, (int8x16_t)v91, 0xCuLL)), (int32x4_t)v91)));
        _Q1 = vmulq_f32(_Q0, _Q0);
        _Q2.i32[0] = _Q0.i32[2];
        __asm { FMLA            S1, S2, V0.S[2] }
        _Q2.i32[0] = _Q0.i32[3];
        __asm { FMLA            S1, S2, V0.S[3] }
        _Q1.f32[0] = sqrtf(_Q1.f32[0]);
        *(float32x4_t *)(v36 - 7) = vdivq_f32(_Q0, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0));
        long long v16 = v204;
      }
      *(void *)_X23 = v16;
      *(float *)(_X23 + 8) = v59;
      *(float *)(_X23 + 16) = v81;
      *(float *)(_X23 + 20) = v82;
      *(float *)(_X23 + 24) = v72;
      uint64_t v100 = *v39;
      uint64_t v101 = *(void *)(*v39 + 40);
      *(_OWORD *)uint64_t v100 = *(_OWORD *)v101;
      *(void *)(v100 + 16) = *(void *)(v101 + 16);
      *(_DWORD *)(v100 + 24) = *(_DWORD *)(v101 + 24);
      float v102 = *(v36 - 7);
      float v103 = *(v36 - 6);
      *(float *)uint64_t v101 = v102;
      *(float *)(v101 + 4) = v103;
      _Q6 = *(_OWORD *)(v36 - 5);
      *(_OWORD *)(v101 + 8) = _Q6;
      *(float *)(v101 + 24) = *(v36 - 1);
      float v105 = *(v36 - 27);
      float v106 = *(v36 - 26);
      *(float *)(v101 + 64) = v105;
      *(float *)(v101 + 68) = v106;
      float v107 = *(v36 - 25);
      *(float *)(v101 + 72) = v107;
      float v108 = *(v36 - 23);
      float v109 = *(v36 - 22);
      *(float *)(v101 + 80) = v108;
      *(float *)(v101 + 84) = v109;
      float v110 = *(v36 - 21);
      uint64_t v111 = *(unsigned int *)(*(void *)(a3 + 272) + 4 * (*(_DWORD *)(v36 - 9) & 0x1FFFFFF));
      *(float *)(v101 + 88) = v110;
      int v112 = *(_DWORD *)(*(void *)(a3 + 136) + 4 * v111);
      float v113 = *(float *)(v101 + 140);
      if (!*(unsigned char *)(a1 + 100))
      {
        float v123 = v205;
        if (*(unsigned char *)(a1 + 102))
        {
          float v124 = 1.0;
          if (v112)
          {
            unsigned int v125 = *(_DWORD *)(v101 + 152);
            if (v125 >= 2) {
              float v124 = 1.0 / (float)v125;
            }
          }
          *(float *)(v100 + 76) = v124;
        }
        if (v113 < 0.2 || v113 < v205)
        {
          float v126 = *(float *)(v101 + 112);
          float v127 = *(float *)(v101 + 116);
          float v128 = *(float *)(v101 + 120);
          if (v126 <= 0.0) {
            float v129 = 1.0;
          }
          else {
            float v129 = 1.0 / v126;
          }
          if (v127 <= 0.0) {
            float v130 = 1.0;
          }
          else {
            float v130 = 1.0 / v127;
          }
          if (v128 <= 0.0) {
            float v131 = 1.0;
          }
          else {
            float v131 = 1.0 / v128;
          }
          float v132 = *(float *)(_X23 + 8);
          float v133 = *(float *)(_X23 + 16) + *(float *)(_X23 + 16);
          float v134 = *(float *)(_X23 + 20) + *(float *)(_X23 + 20);
          float v135 = *(float *)(_X23 + 24) + *(float *)(_X23 + 24);
          _S19 = DWORD1(_Q6);
          __asm { FMLA            S20, S19, V6.S[1] }
          float v138 = vmlas_n_f32((float)(v103 * v134) + (float)(v102 * v133), v135, *(float *)&_Q6);
          float v139 = (float)(vmuls_lane_f32(-(float)((float)(v103 * v135) - (float)(*(float *)&_Q6 * v134)), *(float32x2_t *)&_Q6, 1)+ (float)(v133 * _S20))+ (float)(v102 * v138);
          float v140 = (float)(vmuls_lane_f32(-(float)((float)(*(float *)&_Q6 * v133) - (float)(v102 * v135)), *(float32x2_t *)&_Q6, 1)+ (float)(v134 * _S20))+ (float)(v103 * v138);
          float v141 = vmlas_n_f32(vmuls_lane_f32(-(float)((float)(v102 * v134) - (float)(v103 * v133)), *(float32x2_t *)&_Q6, 1)+ (float)(v135 * _S20), v138, *(float *)&_Q6);
          float32x2_t v142 = vadd_f32(*(float32x2_t *)_X23, *(float32x2_t *)(v100 + 48));
          *(float32x2_t *)(v100 + 48) = v142;
          float v143 = v132 + *(float *)(v100 + 56);
          *(float *)(v100 + 56) = v143;
          float v144 = v139 + *(float *)(v100 + 64);
          float v145 = v140 + *(float *)(v100 + 68);
          *(float *)(v100 + 64) = v144;
          *(float *)(v100 + 68) = v145;
          float v146 = v141 + *(float *)(v100 + 72);
          *(float *)(v100 + 72) = v146;
          float v147 = *(float *)(v101 + 124);
          if (v147 == 0.0) {
            float v147 = 1.0;
          }
          float v148 = (float)((float)(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v142, v142).i32[1]), v142.f32[0], v142.f32[0])
                               + (float)(v143 * v143))
                       + (float)((float)((float)((float)(v130 * (float)(v145 * v145))
                                               + (float)((float)(v144 * v144) * v129))
                                       + (float)((float)(v146 * v146) * v131))
                               * v147))
               * 0.5;
          float v149 = (float)(*(_DWORD *)(v101 + 148) + 1);
          float v150 = *(float *)(v101 + 132) * v149;
          if (v148 >= v150)
          {
            *(void *)(v100 + 48) = 0;
            *(_DWORD *)(v100 + 56) = 0;
            float v151 = 1.0;
            *(void *)(v100 + 64) = 0;
            *(_DWORD *)(v100 + 72) = 0;
            if (v150 != 0.0)
            {
              float v152 = v148 / v150;
              if (v152 >= 2.0) {
                float v151 = 1.0;
              }
              else {
                float v151 = v152 * 0.5;
              }
            }
            float v153 = (float)(v205 * (float)(v149 + -1.0)) + (float)(v151 * 0.4);
            *(float *)(v101 + 144) = v153;
            *(_WORD *)(v100 + 28) = 8 * (v113 == 0.0);
            goto LABEL_131;
          }
        }
        goto LABEL_130;
      }
      float v114 = *(float *)(v101 + 112);
      float v115 = *(float *)(v101 + 116);
      if (v114 <= 0.0) {
        float v116 = 1.0;
      }
      else {
        float v116 = 1.0 / v114;
      }
      if (v115 <= 0.0) {
        float v117 = 1.0;
      }
      else {
        float v117 = 1.0 / v115;
      }
      float v118 = *(float *)(v101 + 120);
      float v119 = *(float *)(v101 + 124);
      BOOL v86 = v118 <= 0.0;
      float v120 = 1.0 / v118;
      if (v86) {
        float v120 = 1.0;
      }
      if (v119 == 0.0) {
        float v119 = 1.0;
      }
      if (v112)
      {
        unsigned int v121 = *(_DWORD *)(v101 + 152);
        if (v121 >= 0xA) {
          unsigned int v121 = 10;
        }
        float v122 = (float)v121;
      }
      else
      {
        float v122 = 0.0;
      }
      float v154 = *(float *)_X23;
      float v155 = *(float *)(_X23 + 4);
      float v156 = *(float *)(_X23 + 8);
      float v157 = *(float *)(_X23 + 16) + *(float *)(_X23 + 16);
      float v158 = *(float *)(_X23 + 20) + *(float *)(_X23 + 20);
      float v159 = *(float *)(_X23 + 24) + *(float *)(_X23 + 24);
      _S19 = DWORD1(_Q6);
      __asm { FMLA            S31, S19, V6.S[1] }
      float v162 = vmlas_n_f32((float)(v103 * v158) + (float)(v102 * v157), v159, *(float *)&_Q6);
      float v163 = (float)(vmuls_lane_f32(-(float)((float)(v103 * v159) - (float)(*(float *)&_Q6 * v158)), *(float32x2_t *)&_Q6, 1)+ (float)(v157 * _S31))+ (float)(v102 * v162);
      float v164 = (float)(vmuls_lane_f32(-(float)((float)(*(float *)&_Q6 * v157) - (float)(v102 * v159)), *(float32x2_t *)&_Q6, 1)+ (float)(v158 * _S31))+ (float)(v103 * v162);
      float v165 = vmlas_n_f32(vmuls_lane_f32(-(float)((float)(v102 * v158) - (float)(v103 * v157)), *(float32x2_t *)&_Q6, 1)+ (float)(v159 * _S31), v162, *(float *)&_Q6);
      float v166 = (float)((float)((float)((float)(v155 * v155) + (float)(v154 * v154)) + (float)(v156 * v156))
                   + (float)(v119
                           * (float)((float)((float)(v117 * (float)(v164 * v164)) + (float)((float)(v163 * v163) * v116))
                                   + (float)((float)(v165 * v165) * v120))))
           * 0.5;
      float v167 = v122 * *(float *)(v101 + 136);
      float v123 = v205;
      float v168 = fmaxf(*(float *)(v100 + 60) - v205, 0.0);
      *(float *)(v100 + 60) = v168;
      float v169 = v205 + *(float *)(v100 + 76);
      if (v169 > 1.0) {
        float v169 = 1.0;
      }
      if (v166 >= v167)
      {
        *(_DWORD *)(v100 + 60) = 1069547520;
        if (v112) {
          float v176 = v169;
        }
        else {
          float v176 = 1.0;
        }
        goto LABEL_124;
      }
      if (!v112)
      {
        float v176 = 1.0;
LABEL_124:
        float32x2_t v172 = (__int16 *)(v100 + 28);
        char v177 = *(_WORD *)(v100 + 28);
        *(float *)(v100 + 76) = v176;
        LOWORD(v174) = v177 & 1;
LABEL_125:
        __int16 v175 = 4 * v174;
        goto LABEL_126;
      }
      if (v122 > 1.0)
      {
        float v170 = (float)(v205 * -0.5) + 1.0;
        *(float *)(v101 + 64) = v170 * v105;
        *(float *)(v101 + 68) = v170 * v106;
        *(float *)(v101 + 72) = v170 * v107;
        *(float *)(v101 + 80) = v170 * v108;
        *(float *)(v101 + 84) = v170 * v109;
        *(float *)(v101 + 88) = v170 * v110;
        float v169 = (float)(v169 * 0.75) + 0.025;
      }
      float v171 = *(float *)(v101 + 136);
      float32x2_t v172 = (__int16 *)(v100 + 28);
      char v173 = *(_WORD *)(v100 + 28);
      *(float *)(v100 + 76) = v169;
      int v174 = v173 & 1;
      if (v168 != 0.0 || v166 >= (float)(v171 * 0.25)) {
        goto LABEL_125;
      }
      if (v174) {
        __int16 v175 = 1;
      }
      else {
        __int16 v175 = 3;
      }
      *(_OWORD *)uint64_t v101 = *(_OWORD *)v100;
      *(void *)(v101 + 16) = *(void *)(v100 + 16);
      *(_DWORD *)(v101 + 24) = *(_DWORD *)(v100 + 24);
LABEL_126:
      *float32x2_t v172 = v175;
      if (v113 < 0.2 || v113 < v205)
      {
        float v178 = v154 + *(float *)(v100 + 48);
        float v179 = v155 + *(float *)(v100 + 52);
        float v180 = v156 + *(float *)(v100 + 56);
        float v181 = *(float *)(v100 + 68);
        float v182 = v163 + *(float *)(v100 + 64);
        *(float *)(v100 + 48) = v178;
        *(float *)(v100 + 52) = v179;
        *(float *)(v100 + 56) = v180;
        float v183 = v164 + v181;
        *(float *)(v100 + 64) = v182;
        *(float *)(v100 + 68) = v183;
        float v184 = v165 + *(float *)(v100 + 72);
        *(float *)(v100 + 72) = v184;
        float v185 = *(float *)(v101 + 132);
        if (v166 >= v185)
        {
          float v186 = (float)((float)((float)((float)(v179 * v179) + (float)(v178 * v178)) + (float)(v180 * v180))
                       + (float)(v119
                               * (float)((float)((float)(v117 * (float)(v183 * v183))
                                               + (float)((float)(v182 * v182) * v116))
                                       + (float)((float)(v184 * v184) * v120))))
               * 0.5;
          float v187 = (float)(*(_DWORD *)(v101 + 148) + 1);
          if (v186 >= (float)(v185 * v187))
          {
            *(void *)(v100 + 64) = 0;
            *(_DWORD *)(v100 + 72) = 0;
            float v188 = 1.0;
            *(void *)(v100 + 48) = 0;
            *(_DWORD *)(v100 + 56) = 0;
            if (v185 != 0.0)
            {
              float v189 = v186 / (float)(v185 * v187);
              if (v189 >= 2.0) {
                float v188 = 1.0;
              }
              else {
                float v188 = v189 * 0.5;
              }
            }
            float v153 = (float)(v205 * (float)(v187 + -1.0)) + (float)(v188 * 0.4);
            *(float *)(v101 + 144) = v153;
            if (v113 == 0.0) {
              *float32x2_t v172 = v175 | 8;
            }
            goto LABEL_131;
          }
        }
      }
LABEL_130:
      float v153 = fmaxf(v113 - v123, 0.0);
      *(float *)(v101 + 144) = v153;
LABEL_131:
      if (v153 == 0.0)
      {
        *(_WORD *)(v100 + 28) |= 0x10u;
        *(void *)(v100 + 48) = 0;
        *(_DWORD *)(v100 + 56) = 0;
        *(void *)(v100 + 64) = 0;
        *(_DWORD *)(v100 + 72) = 0;
      }
      v36 += 28;
      ++v39;
      v35 += 32;
      v38 += 32;
      ++v37;
      _X21 += 8;
      if (!--v33)
      {
        unsigned int v21 = v199 + v198;
        uint64_t v32 = v197;
        int v31 = v196;
        signed int v20 = v200;
        goto LABEL_141;
      }
    }
  }
  uint64_t v32 = v197;
LABEL_144:
  __dmb(0xBu);
  atomic_fetch_add((atomic_uint *volatile)(v32 + 148), v21);
  uint64_t v190 = *(void *)(a1 + 400);
  pthread_mutex_lock((pthread_mutex_t *)(v190 + 8));
  *char v192 = *(void *)v190;
  *(void *)uint64_t v190 = v192;
  return pthread_mutex_unlock((pthread_mutex_t *)(v190 + 8));
}

uint64_t physx::Dy::BlockAllocator::reserveConstraintData(physx::Dy::BlockAllocator *this, int a2)
{
  **((_DWORD **)this + 4) += a2;
  uint64_t v2 = *((void *)this + 2);
  unsigned int v3 = (a2 + 15) & 0xFFFFFFF0;
  if (v3 <= 0x4000)
  {
    uint64_t v6 = *(void *)(v2 + 8);
    if (v6 && (uint64_t v7 = *(unsigned int *)(v2 + 16), v7 + v3 <= 0x4000))
    {
      uint64_t result = v6 + v7;
      *(_DWORD *)(v2 + 16) = v7 + v3;
    }
    else
    {
      uint64_t result = physx::PxcNpMemBlockPool::acquire(*(void *)v2, *((void *)this + 1), (_DWORD *)(*(void *)v2 + 244), (int *)(*(void *)v2 + 240), 1);
      *(void *)(v2 + 8) = result;
      *(_DWORD *)(v2 + 16) = v3;
    }
  }
  else
  {
    uint64_t v4 = *(pthread_mutex_t ***)v2;
    return physx::PxcNpMemBlockPool::acquireExceptionalConstraintMemory(v4, (a2 + 15) & 0xFFFFFFF0);
  }
  return result;
}

uint64_t physx::Dy::BlockAllocator::reserveFrictionData(physx::Dy::BlockAllocator *this, unsigned int a2)
{
  if (a2 > 0x4000) {
    return -1;
  }
  uint64_t v4 = *((void *)this + 3);
  uint64_t result = *(void *)(v4 + 8);
  if (!result || (unsigned int v5 = *(_DWORD *)(v4 + 16), v5 + a2 > 0x4000))
  {
    uint64_t result = physx::PxcNpMemBlockPool::acquire(*(void *)v4, *(void *)v4 + 16 * *(unsigned int *)(*(void *)v4 + 180) + 56, 0, 0, 0);
    *(void *)(v4 + 8) = result;
    *(_DWORD *)(v4 + 16) = 0;
    if (!result) {
      return result;
    }
    unsigned int v5 = 0;
  }
  result += v5;
  *(_DWORD *)(v4 + 16) = v5 + a2;
  return result;
}

uint64_t physx::Dy::PxsSolverCreateFinalizeConstraintsTask::runInternal(physx::Dy::PxsSolverCreateFinalizeConstraintsTask *this)
{
  uint64_t v2 = **((void **)this + 6);
  unsigned int v3 = *(_DWORD *)(v2 + 11896);
  int v4 = *(_DWORD *)(v2 + 12024);
  int v5 = *(_DWORD *)(v2 + 11908);
  int v6 = v5 + v3;
  unsigned int v75 = v3;
  if (v3)
  {
    unsigned int v3 = 0;
    int v7 = 0;
    int v8 = 0;
    unsigned int v9 = 0;
    unsigned int v10 = *(int **)(v2 + 11920);
    int v11 = *v10;
    if (*((unsigned char *)this + 72)) {
      unsigned int v12 = 1;
    }
    else {
      unsigned int v12 = 4;
    }
    while (1)
    {
      unsigned int v13 = v11 - v9 >= v12 ? v12 : v11 - v9;
      if (v13) {
        break;
      }
      LOWORD(v19) = 0;
LABEL_16:
      v9 += (unsigned __int16)v19;
      if (v11 != v75 && v11 == v9)
      {
        v10[v7] = v8;
        int v8 = 0;
        int v11 = v10[++v7];
      }
      if (v9 >= v75)
      {
        v10[v7] = v8;
        goto LABEL_42;
      }
    }
    uint64_t v14 = *(void *)(v2 + 12032);
    uint64_t v15 = v14 + 48 * v9;
    int v16 = *(__int16 *)(v15 + 16);
    int v17 = *(unsigned __int16 *)(v15 + 18);
    if (v16 != -1 || v17 != 0xFFFF)
    {
      LOWORD(v19) = 1;
LABEL_14:
      uint64_t v20 = *(void *)(v2 + 12040);
      uint64_t v21 = v3;
      uint64_t v22 = (unsigned int *)(v20 + 8 * v3++);
      *uint64_t v22 = v9;
      *(_WORD *)(v20 + 8 * v21 + 4) = v19;
      ++v8;
      goto LABEL_16;
    }
    int v23 = *(unsigned __int16 *)(v14 + 48 * v9 + 30);
    LOWORD(v19) = 1;
    if (v23 == 1)
    {
      if (v7 == -1 || v13 < 2) {
        goto LABEL_14;
      }
    }
    else
    {
      if (v13 < 2) {
        goto LABEL_14;
      }
      if (v23 != 2 || v7 == -1) {
        goto LABEL_14;
      }
    }
    if ((unsigned __int16)v13 <= 2u) {
      uint64_t v25 = 2;
    }
    else {
      uint64_t v25 = (unsigned __int16)v13;
    }
    uint64_t v19 = 1;
    while (v23 == *(unsigned __int16 *)(v14 + 48 * (v9 + v19) + 30))
    {
      uint64_t v26 = v14 + 48 * (v9 + v19);
      int v27 = *(__int16 *)(v26 + 16);
      int v28 = *(unsigned __int16 *)(v26 + 18);
      if (v27 != -1 || v28 != 0xFFFF) {
        break;
      }
      if (v25 == ++v19)
      {
        LOWORD(v19) = v13;
        goto LABEL_14;
      }
    }
    goto LABEL_14;
  }
LABEL_42:
  *(_DWORD *)(v2 + 11928) = *(_DWORD *)(v2 + 12232);
  unsigned int v30 = v3;
  if (v4 != v6)
  {
    uint64_t v31 = *(void *)(v2 + 12040);
    int v32 = v4 - v5;
    unsigned int v33 = v75;
    unsigned int v34 = v3;
    do
    {
      unsigned int v30 = v34 + 1;
      uint64_t v35 = v31 + 8 * v34;
      *(_DWORD *)uint64_t v35 = v33;
      *(_WORD *)(v35 + 4) = 1;
      ++v33;
      unsigned int v34 = v30;
    }
    while (v32 != v33);
  }
  *(_DWORD *)(v2 + 12192) = v3;
  *(_DWORD *)(v2 + 12196) = v30 - v3;
  *(_DWORD *)(v2 + 12048) = v30;
  uint64_t v36 = v2;
  uint64_t v37 = *(void *)(v2 + 12032);
  uint64_t v38 = (*(uint64_t (**)(void))(**((void **)this + 2) + 8))(*((void *)this + 2));
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v38 + 8))(v38);
  if (v30 + 63 >= 0x40)
  {
    unint64_t v40 = 0;
    unsigned int v41 = (v30 + 63) >> 6;
    LODWORD(v42) = (v30 + 15) >> 4;
    if (v41 >= result) {
      unint64_t v42 = v41;
    }
    else {
      unint64_t v42 = v42;
    }
    unsigned int v43 = v42;
    unsigned int v44 = (v30 + v42 - 1) / v42;
    unint64_t v73 = v42;
    do
    {
      unsigned int v74 = v43;
      if (v43 >= 0x40uLL) {
        uint64_t v45 = 64;
      }
      else {
        uint64_t v45 = v43;
      }
      if ((v42 - v40) >= 0x40) {
        int v46 = 64;
      }
      else {
        int v46 = v42 - v40;
      }
      uint64_t result = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(*((void *)this + 5) + 744), 88 * v46, 0x10u);
      if (v46)
      {
        uint64_t v47 = result;
        int v48 = 0;
        uint64_t v49 = result;
        do
        {
          int v50 = v44 * (v48 + v40);
          unsigned int v51 = v50 + v44;
          if (v50 + v44 >= v30) {
            unsigned int v51 = v30;
          }
          uint64_t v52 = *((void *)this + 5);
          uint64_t v53 = *(void *)(v52 + 560);
          uint64_t v54 = *((void *)this + 8);
          uint64_t v55 = *(void *)(v52 + 768);
          *(void *)(v49 + 16) = 0;
          *(void *)(v49 + 24) = 0;
          *(_DWORD *)(v49 + 32) = 0;
          float v56 = (uint64_t (**)(uint64_t))&unk_26E724B60;
          *(void *)uint64_t v49 = &unk_26E724B60;
          *(void *)(v49 + 8) = v55;
          *(_DWORD *)(v49 + 36) = v75;
          *(void *)(v49 + 40) = v37;
          *(void *)(v49 + 48) = v53;
          *(void *)(v49 + 56) = v36;
          *(void *)(v49 + 64) = v52;
          *(void *)(v49 + 72) = v54;
          *(_DWORD *)(v49 + 80) = v50;
          *(_DWORD *)(v49 + 84) = v51;
          uint64_t v57 = *((void *)this + 3);
          *(_DWORD *)(v49 + 32) = 1;
          *(void *)(v49 + 24) = v57;
          if (v57)
          {
            (*(void (**)(uint64_t))(*(void *)v57 + 32))(v57);
            *(void *)(v49 + 16) = *(void *)(*(void *)(v49 + 24) + 16);
            float v56 = *(uint64_t (***)(uint64_t))v49;
          }
          uint64_t result = v56[5](v49);
          ++v48;
          v49 += 88;
          v47 += 88;
          --v45;
        }
        while (v45);
      }
      v40 += 64;
      unsigned int v43 = v74 - 64;
      LODWORD(v42) = v73;
    }
    while (v40 < v73);
  }
  int v58 = *(_DWORD *)(*((void *)this + 6) + 12);
  unint64_t v59 = v58 & 0x7FFFFFFF;
  if ((v58 & 0x7FFFFFFF) != 0)
  {
    uint64_t v60 = 0;
    unint64_t v61 = 0;
    unsigned int v62 = v58 & 0x7FFFFFFF;
    do
    {
      unsigned int v63 = v62 - 32;
      if (v62 >= 0x20) {
        int v64 = 32;
      }
      else {
        int v64 = v62;
      }
      uint64_t v65 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(*((void *)this + 5) + 744), 88, 0x10u);
      uint64_t v66 = *(void *)(v36 + 11984) + v60;
      uint64_t v67 = *((void *)this + 5);
      uint64_t v68 = *(void *)(v67 + 560);
      uint64_t v69 = *((void *)this + 8);
      uint64_t v70 = *(void *)(v67 + 768);
      *(void *)(v65 + 16) = 0;
      *(void *)(v65 + 24) = 0;
      *(_DWORD *)(v65 + 32) = 0;
      float32x2_t v71 = (uint64_t (**)(uint64_t))&unk_26E724BD0;
      *(void *)uint64_t v65 = &unk_26E724BD0;
      *(void *)(v65 + 8) = v70;
      *(void *)(v65 + 40) = v66;
      *(_DWORD *)(v65 + 48) = v64;
      *(void *)(v65 + 56) = v68;
      *(void *)(v65 + 64) = v36;
      *(void *)(v65 + 72) = v67;
      *(void *)(v65 + 80) = v69;
      uint64_t v72 = *((void *)this + 3);
      *(_DWORD *)(v65 + 32) = 1;
      *(void *)(v65 + 24) = v72;
      if (v72)
      {
        (*(void (**)(uint64_t))(*(void *)v72 + 32))(v72);
        *(void *)(v65 + 16) = *(void *)(*(void *)(v65 + 24) + 16);
        float32x2_t v71 = *(uint64_t (***)(uint64_t))v65;
      }
      uint64_t result = v71[5](v65);
      v61 += 32;
      v60 += 256;
      unsigned int v62 = v63;
    }
    while (v61 < v59);
  }
  return result;
}

uint64_t physx::Dy::createContactPatches(uint64_t a1, uint64_t a2, unsigned int a3, float a4)
{
  unsigned int v4 = *(_DWORD *)(a1 + 7684);
  if (v4 == 64) {
    return 0;
  }
  if (a3)
  {
    uint64_t v6 = a1 + 44 * v4++;
    int v7 = *(_DWORD *)(a2 + 44);
    char v8 = *(unsigned char *)(a2 + 48);
    *(_DWORD *)uint64_t v6 = 0;
    *(unsigned char *)(v6 + 5) = 1;
    *(unsigned char *)(v6 + 4) = v8;
    *(_DWORD *)(v6 + 8) = v7;
    *(void *)(v6 + 12) = *(void *)(a2 + 56);
    float v10 = *(float *)(a2 + 16);
    float v9 = *(float *)(a2 + 20);
    float v11 = *(float *)(a2 + 24);
    if (a3 == 1)
    {
      float v12 = *(float *)(a2 + 24);
      float v13 = *(float *)(a2 + 20);
      float v14 = *(float *)(a2 + 16);
    }
    else
    {
      unsigned int v15 = 0;
      uint64_t v16 = 1;
      do
      {
        int v17 = (float *)(a2 + ((unint64_t)v15 << 6));
        uint64_t v18 = v16 + 1;
        uint64_t v19 = a2 + 44 + (v16 << 6);
        char v20 = 1;
        float v12 = v11;
        float v13 = v9;
        float v14 = v10;
        while (1)
        {
          float v21 = *(float *)v19;
          if (*(float *)v19 != v17[11]
            || *(float *)(v19 + 12) != v17[14]
            || *(float *)(v19 + 16) != v17[15]
            || (float)((float)((float)(*(float *)(v19 - 40) * v17[1]) + (float)(*(float *)(v19 - 44) * *v17))
                     + (float)(*(float *)(v19 - 36) * v17[2])) < a4)
          {
            break;
          }
          float v22 = *(float *)(v19 - 28);
          float v23 = *(float *)(v19 - 24);
          if (v14 >= v22) {
            float v14 = *(float *)(v19 - 28);
          }
          if (v13 >= v23) {
            float v13 = *(float *)(v19 - 24);
          }
          float v24 = *(float *)(v19 - 20);
          if (v12 >= v24) {
            float v12 = *(float *)(v19 - 20);
          }
          if (v10 <= v22) {
            float v10 = *(float *)(v19 - 28);
          }
          if (v9 <= v23) {
            float v9 = *(float *)(v19 - 24);
          }
          if (v11 <= v24) {
            float v11 = *(float *)(v19 - 20);
          }
          ++v20;
          ++v18;
          v19 += 64;
          if (v18 - a3 == 1)
          {
            if (a3 != v16) {
              *(unsigned char *)(v6 + 5) = a3 + 1 - v16;
            }
            goto LABEL_31;
          }
        }
        if (v4 == 64) {
          return 0;
        }
        unsigned int v15 = v18 - 1;
        *(unsigned char *)(v6 + 5) = v20;
        *(float *)(v6 + 20) = v14;
        *(float *)(v6 + 24) = v13;
        *(float *)(v6 + 28) = v12;
        *(float *)(v6 + 32) = v10;
        *(float *)(v6 + 36) = v9;
        *(float *)(v6 + 40) = v11;
        uint64_t v6 = a1 + 44 * v4++;
        char v25 = *(unsigned char *)(v19 + 4);
        *(_WORD *)uint64_t v6 = v18 - 1;
        *(unsigned char *)(v6 + 5) = 1;
        *(_WORD *)(v6 + 2) = 0;
        *(unsigned char *)(v6 + 4) = v25;
        *(float *)(v6 + 8) = v21;
        *(void *)(v6 + 12) = *(void *)(v19 + 12);
        float v10 = *(float *)(v19 - 28);
        float v9 = *(float *)(v19 - 24);
        uint64_t v16 = v18;
        float v11 = *(float *)(v19 - 20);
        float v12 = v11;
        float v13 = v9;
        float v14 = v10;
      }
      while (v18 != a3);
    }
LABEL_31:
    *(float *)(v6 + 20) = v14;
    *(float *)(v6 + 24) = v13;
    *(float *)(v6 + 28) = v12;
    *(float *)(v6 + 32) = v10;
    *(float *)(v6 + 36) = v9;
    *(float *)(v6 + 40) = v11;
  }
  *(_DWORD *)(a1 + 7684) = v4;
  return 1;
}

uint64_t physx::Dy::correlatePatches(uint64_t a1, uint64_t a2, float *a3, float *a4, unsigned int a5, unsigned int a6, float a7)
{
  unsigned int v7 = *(_DWORD *)(a1 + 7688);
  unint64_t v8 = *(unsigned int *)(a1 + 7684);
  if (v8 > a5)
  {
    char v9 = 0;
    uint64_t v10 = a5;
    while (1)
    {
      float v11 = (float *)(a2 + ((unint64_t)*(unsigned __int16 *)(a1 + 44 * v10) << 6));
      float v12 = *v11;
      float v13 = v11[1];
      float v14 = v11[2];
      unsigned int v15 = a6;
      if (v7 > a6)
      {
        uint64_t v16 = (float *)(a1 + 44 * v10);
        int v17 = v16 + 4;
        uint64_t v18 = v16 + 2;
        uint64_t v19 = v16 + 3;
        char v20 = (float *)(a1 + 104 * a6 + 2828);
        float v21 = (float *)(a1 + 12 * a6 + 6152);
        unsigned int v15 = a6;
        while ((float)((float)((float)(v13 * *(v21 - 1)) + (float)(v12 * *(v21 - 2))) + (float)(v14 * *v21)) < a7
             || *(v20 - 2) != *v17
             || *(v20 - 1) != *v18
             || *v20 != *v19)
        {
          ++v15;
          v21 += 3;
          v20 += 26;
          if (v7 == v15) {
            goto LABEL_12;
          }
        }
      }
      if (v15 != v7) {
        break;
      }
LABEL_12:
      if (!(v9 & 1 | (v7 == 32)))
      {
        char v9 = 0;
        uint64_t v22 = a1 + 104 * v7;
        uint64_t v46 = a1 + 44 * v10;
        int v23 = *(_DWORD *)(v46 + 16);
        char v24 = *(unsigned char *)(v46 + 4);
        float v26 = a3[2];
        float v25 = a3[3];
        float v27 = (float)(v25 * v25) + -0.5;
        float v28 = *a3;
        float v29 = a3[1];
        float v30 = (float)((float)((float)(v13 + v13) * v29) + (float)(*a3 * (float)(v12 + v12)))
            + (float)(v26 * (float)(v14 + v14));
        float v31 = (float)((float)((float)(v12 + v12) * v27)
                    - (float)((float)((float)(v29 * (float)(v14 + v14)) - (float)(v26 * (float)(v13 + v13))) * v25))
            + (float)(*a3 * v30);
        float v32 = (float)((float)((float)(v13 + v13) * v27)
                    - (float)((float)((float)(v26 * (float)(v12 + v12)) - (float)(*a3 * (float)(v14 + v14))) * v25))
            + (float)(v29 * v30);
        float v33 = (float)((float)((float)(v14 + v14) * v27)
                    - (float)((float)((float)(*a3 * (float)(v13 + v13)) - (float)(v29 * (float)(v12 + v12))) * v25))
            + (float)(v26 * v30);
        *(float *)(v22 + 2832) = v31;
        *(float *)(v22 + 2836) = v32;
        *(float *)(v22 + 2840) = v33;
        float v35 = a4[2];
        float v34 = a4[3];
        float v36 = (float)(v34 * v34) + -0.5;
        float v37 = *a4;
        float v38 = a4[1];
        float v39 = (float)((float)((float)(v13 + v13) * v38) + (float)(*a4 * (float)(v12 + v12)))
            + (float)(v35 * (float)(v14 + v14));
        float v40 = (float)((float)((float)(v13 + v13) * v36)
                    - (float)((float)((float)(v35 * (float)(v12 + v12)) - (float)(*a4 * (float)(v14 + v14))) * v34))
            + (float)(v38 * v39);
        float v41 = (float)((float)((float)(v14 + v14) * v36)
                    - (float)((float)((float)(*a4 * (float)(v13 + v13)) - (float)(v38 * (float)(v12 + v12))) * v34))
            + (float)(v35 * v39);
        *(float *)(v22 + 2844) = (float)((float)((float)(v12 + v12) * v36)
                                       - (float)((float)((float)(v38 * (float)(v14 + v14))
                                                       - (float)(v35 * (float)(v13 + v13)))
                                               * v34))
                               + (float)(*a4 * v39);
        *(float *)(v22 + 2848) = v40;
        *(float *)(v22 + 2852) = v41;
        *(float *)(v22 + 2904) = (float)((float)((float)(v25 * v37) - (float)(v28 * v34)) - (float)(v29 * v35))
                               + (float)(v38 * v26);
        *(float *)(v22 + 2908) = (float)((float)((float)(v25 * v38) - (float)(v29 * v34)) - (float)(v26 * v37))
                               + (float)(v35 * v28);
        *(float *)(v22 + 2912) = (float)((float)((float)(v25 * v35) - (float)(v26 * v34)) - (float)(v28 * v38))
                               + (float)(v37 * v29);
        *(float *)(v22 + 2916) = (float)((float)((float)(v28 * v37) + (float)(v25 * v34)) + (float)(v29 * v38))
                               + (float)(v26 * v35);
        *(_WORD *)(v22 + 2818) = 0;
        *(unsigned char *)(v22 + 2816) = 0;
        *(void *)(v22 + 2824) = *(void *)(v46 + 8);
        *(_DWORD *)(v22 + 2820) = v23;
        *(unsigned char *)(v22 + 2817) = v24;
        unint64_t v42 = (float *)(a1 + 12 * v7);
        v42[1536] = v12;
        v42[1537] = v13;
        v42[1538] = v14;
        uint64_t v43 = a1 + 4 * v7;
        *(_DWORD *)(v43 + 7296) = *(unsigned __int8 *)(v46 + 5);
        unsigned int v44 = (void *)(a1 + 24 * v7);
        v44[816] = *(void *)(v46 + 20);
        v44[817] = *(void *)(v46 + 28);
        uint64_t v45 = v7;
        v44[818] = *(void *)(v46 + 36);
        LOWORD(v46) = -1;
        *(_WORD *)(v43 + 7556) = -1;
        ++v7;
        *(_WORD *)(v43 + 7558) = -1;
LABEL_20:
        *(_WORD *)(a1 + 44 * v10 + 2) = v46;
        *(_DWORD *)(a1 + 4 * v45 + 7424) = v10;
        unint64_t v8 = *(unsigned int *)(a1 + 7684);
        goto LABEL_21;
      }
      char v9 = 1;
LABEL_21:
      if (++v10 >= v8) {
        goto LABEL_24;
      }
    }
    uint64_t v45 = v15;
    uint64_t v47 = a1 + 24 * v15;
    uint64_t v48 = a1 + 44 * v10;
    float v49 = *(float *)(v47 + 6536);
    if (v49 >= *(float *)(v48 + 28)) {
      float v49 = *(float *)(v48 + 28);
    }
    *(int8x8_t *)(v47 + 6528) = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(v48 + 20), *(float32x2_t *)(v47 + 6528)), *(int8x8_t *)(v47 + 6528), *(int8x8_t *)(v48 + 20));
    *(float *)(v47 + 6536) = v49;
    float v50 = *(float *)(v47 + 6548);
    if (v50 <= *(float *)(v48 + 40)) {
      float v50 = *(float *)(v48 + 40);
    }
    *(int8x8_t *)(v47 + 6540) = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(v47 + 6540), *(float32x2_t *)(v48 + 32)), *(int8x8_t *)(v47 + 6540), *(int8x8_t *)(v48 + 32));
    *(float *)(v47 + 6548) = v50;
    uint64_t v46 = a1 + 4 * v15;
    *(_DWORD *)(v46 + 7296) += *(unsigned __int8 *)(v48 + 5);
    LODWORD(v46) = *(_DWORD *)(v46 + 7424);
    goto LABEL_20;
  }
  char v9 = 0;
LABEL_24:
  *(_DWORD *)(a1 + 7688) = v7;
  return v9 & 1;
}

uint64_t physx::Dy::growPatches(uint64_t result, uint64_t a2, float *a3, float *a4, unsigned int a5, float a6, float a7)
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(unsigned int *)(result + 7688);
  if (v8 <= a5) {
    return result;
  }
  float v10 = a3[2];
  float v9 = a3[3];
  float v11 = (float)(v9 * v9) + -0.5;
  float v12 = *a3;
  float v13 = a3[1];
  float v14 = -v10;
  float v15 = -*a3;
  float v16 = -v13;
  float v17 = a6 * a6;
  float v19 = a4[2];
  float v18 = a4[3];
  float v20 = (float)(v18 * v18) + -0.5;
  float v21 = *a4;
  float v22 = a4[1];
  uint64_t v23 = a5;
  float v24 = -*a4;
  uint64_t v25 = result + 104 * a5 + 2856;
  do
  {
    float v26 = (_WORD *)(result + 104 * v23 + 2818);
    int v27 = (unsigned __int16)*v26;
    if (v27 == 2 || (unsigned int v28 = *(_DWORD *)(result + 4 * v23 + 7424), v28 == 0xFFFF))
    {
      if (!*(_DWORD *)(result + 4 * v23 + 7296)) {
        goto LABEL_36;
      }
      float v29 = (float *)(result + 24 * v23);
      float v30 = v29[1635] - v29[1632];
      float v31 = v29[1636] - v29[1633];
      float v32 = v29[1637] - v29[1634];
      float v7 = (float)((float)(v31 * v31) + (float)(v30 * v30)) + (float)(v32 * v32);
      float v33 = (float *)(result + 104 * v23);
      float v34 = v33[714] - v33[717];
      float v35 = v33[715] - v33[718];
      float v36 = v33[716] - v33[719];
      if ((float)((float)((float)((float)(v35 * v35) + (float)(v34 * v34)) + (float)(v36 * v36)) * 4.0) >= v7) {
        goto LABEL_36;
      }
      *float v26 = 0;
      unsigned int v28 = *(_DWORD *)(result + 4 * v23 + 7424);
      if (v28 == 0xFFFF) {
        goto LABEL_34;
      }
LABEL_11:
      unsigned int v46 = 0;
      goto LABEL_12;
    }
    if (v27 != 1) {
      goto LABEL_11;
    }
    float v37 = (float *)(result + 104 * v23);
    float v38 = v37[714] + v37[714];
    float v39 = v37[715] + v37[715];
    float v40 = v37[716] + v37[716];
    float v41 = (float)((float)(v13 * v39) + (float)(v12 * v38)) + (float)(v10 * v40);
    float v42 = (float)((float)(v9 * (float)((float)(v39 * v14) + (float)(v13 * v40))) + (float)(v38 * v11))
        + (float)(v12 * v41);
    float v43 = (float)((float)(v9 * (float)((float)(v40 * v15) + (float)(v10 * v38))) + (float)(v39 * v11))
        + (float)(v13 * v41);
    float v44 = (float)((float)(v9 * (float)((float)(v38 * v16) + (float)(v12 * v39))) + (float)(v40 * v11))
        + (float)(v10 * v41);
    float v7 = a3[4] + v42;
    float v45 = a3[6] + v44;
    float v92 = a3[5] + v43;
    float v93 = v45;
    unsigned int v46 = 1;
LABEL_12:
    uint64_t v47 = result + 4 * v23;
    uint64_t v48 = (_WORD *)(v47 + 7558);
    float v49 = (_WORD *)(v47 + 7556);
    float v51 = v92;
    float v50 = v93;
    float v52 = v94;
    float v53 = v95;
    float v54 = 0.0;
    float v55 = v96;
    do
    {
      float v56 = (unsigned __int16 *)(result + 44 * v28);
      int v57 = *((unsigned __int8 *)v56 + 5);
      if (*((unsigned char *)v56 + 5))
      {
        for (uint64_t i = 0; v57 != i; ++i)
        {
          uint64_t v59 = *v56;
          uint64_t v60 = i + v59;
          uint64_t v61 = a2 + ((i + v59) << 6);
          if (*(float *)(v61 + 12) < a7)
          {
            unsigned int v62 = (float *)(v61 + 16);
            if (v46 != 1)
            {
              if (v46)
              {
                float v68 = *v62;
                uint64_t v69 = a2 + (v60 << 6);
                float v70 = *(float *)(v69 + 20);
                float v71 = *(float *)(v69 + 24);
                float v72 = (float)((float)((float)(v70 - v51) * (float)(v70 - v51))
                            + (float)((float)(*v62 - v7) * (float)(*v62 - v7)))
                    + (float)((float)(v71 - v50) * (float)(v71 - v50));
                float v73 = (float)((float)((float)(v70 - v53) * (float)(v70 - v53))
                            + (float)((float)(*v62 - v52) * (float)(*v62 - v52)))
                    + (float)((float)(v71 - v55) * (float)(v71 - v55));
                if (v72 <= v73)
                {
                  if (v73 > v54)
                  {
                    *float v49 = v59 + i;
                    float v50 = v71;
                    float v51 = v70;
                    float v7 = v68;
                    float v54 = v73;
                  }
                }
                else if (v72 > v54)
                {
                  *uint64_t v48 = v59 + i;
                  float v55 = v71;
                  float v53 = v70;
                  float v52 = v68;
                  float v54 = v72;
                }
                continue;
              }
              *float v49 = v60;
              float v7 = *v62;
              uint64_t v63 = a2 + (v60 << 6);
              float v51 = *(float *)(v63 + 20);
              float v50 = *(float *)(v63 + 24);
LABEL_21:
              unsigned int v46 = 1;
              continue;
            }
            float v64 = *v62;
            uint64_t v65 = a2 + (v60 << 6);
            float v66 = *(float *)(v65 + 20);
            float v67 = *(float *)(v65 + 24);
            float v54 = (float)((float)((float)(v66 - v51) * (float)(v66 - v51))
                        + (float)((float)(*v62 - v7) * (float)(*v62 - v7)))
                + (float)((float)(v67 - v50) * (float)(v67 - v50));
            if (v54 <= v17) {
              goto LABEL_21;
            }
            *uint64_t v48 = v59 + i;
            unsigned int v46 = 2;
            float v55 = v67;
            float v53 = v66;
            float v52 = v64;
          }
        }
      }
      unsigned int v28 = *(unsigned __int16 *)(result + 44 * v28 + 2);
    }
    while (v28 != 0xFFFF);
    float v93 = v50;
    float v94 = v52;
    float v95 = v53;
    float v96 = v55;
    uint64_t v74 = (unsigned __int16)*v26;
    float v91 = v7;
    float v92 = v51;
    if (v74 < v46)
    {
      uint64_t v75 = v46 - v74;
      uint64_t v76 = 3 * v74;
      float v77 = &v92;
      uint64_t v78 = v25;
      do
      {
        float v79 = v77[v76 - 1];
        float v80 = v77[v76];
        float v81 = v77[v76 + 1];
        float v82 = (float)(v79 - a3[4]) + (float)(v79 - a3[4]);
        float v83 = (float)(v80 - a3[5]) + (float)(v80 - a3[5]);
        float v84 = (float)(v81 - a3[6]) + (float)(v81 - a3[6]);
        float v85 = (float)((float)(v13 * v83) + (float)(v12 * v82)) + (float)(v10 * v84);
        BOOL v86 = (float *)(v78 + v76 * 4);
        *BOOL v86 = (float)((float)(v82 * v11) - (float)((float)((float)(v83 * v14) + (float)(v13 * v84)) * v9))
             + (float)(v12 * v85);
        v86[1] = (float)((float)(v83 * v11) - (float)((float)((float)(v84 * v15) + (float)(v10 * v82)) * v9))
               + (float)(v13 * v85);
        v86[2] = (float)((float)(v84 * v11) - (float)((float)((float)(v82 * v16) + (float)(v12 * v83)) * v9))
               + (float)(v10 * v85);
        float v87 = (float)(v79 - a4[4]) + (float)(v79 - a4[4]);
        float v88 = (float)(v80 - a4[5]) + (float)(v80 - a4[5]);
        float v7 = (float)(v81 - a4[6]) + (float)(v81 - a4[6]);
        float v89 = (float)((float)(v22 * v88) + (float)(v21 * v87)) + (float)(v19 * v7);
        v86[6] = (float)((float)(v87 * v20) - (float)((float)((float)(v88 * (float)-v19) + (float)(v22 * v7)) * v18))
               + (float)(v21 * v89);
        v86[7] = (float)((float)(v88 * v20) - (float)((float)((float)(v7 * v24) + (float)(v19 * v87)) * v18))
               + (float)(v22 * v89);
        v86[8] = (float)((float)(v7 * v20) - (float)((float)((float)(v87 * (float)-v22) + (float)(v21 * v88)) * v18))
               + (float)(v19 * v89);
        v78 += 12;
        v77 += 3;
        --v75;
      }
      while (v75);
    }
    if (!v46)
    {
LABEL_34:
      LOWORD(v46) = 0;
      uint64_t v90 = result + 104 * v23;
      *(void *)(v90 + 2880) = 0;
      *(_DWORD *)(v90 + 2888) = 0;
      *(void *)(v90 + 2856) = 0;
      *(_DWORD *)(v90 + 2864) = 0;
    }
    *float v26 = v46;
LABEL_36:
    ++v23;
    v25 += 104;
  }
  while (v23 != v8);
  return result;
}

float physx::Dy::copyToSolverBodyData(uint64_t a1, uint64_t a2, float *a3, uint64_t a4, int a5, uint64_t a6, int a7, float a8, float a9, float a10, float a11)
{
  *(_DWORD *)(a6 + 72) = a5;
  float v11 = a3[1];
  float v12 = sqrtf(*a3);
  float v13 = 0.0;
  if (*a3 == 0.0) {
    float v12 = 0.0;
  }
  float v14 = sqrtf(v11);
  if (v11 == 0.0) {
    float v15 = 0.0;
  }
  else {
    float v15 = v14;
  }
  float v16 = a3[2];
  float v17 = sqrtf(v16);
  if (v16 != 0.0) {
    float v13 = v17;
  }
  float v18 = *(float *)a4;
  float v19 = *(float *)(a4 + 4);
  float v20 = *(float *)(a4 + 8);
  float v21 = *(float *)(a4 + 12);
  float v22 = v19 + v19;
  float v23 = v20 + v20;
  float v24 = v19 * (float)(v19 + v19);
  float v25 = v20 * (float)(v20 + v20);
  float v26 = (float)(v18 + v18) * v19;
  float v27 = (float)(v18 + v18) * v20;
  float v28 = (float)(v18 + v18) * v21;
  float v29 = v22 * v20;
  float v30 = v22 * v21;
  float v31 = v23 * v21;
  float v32 = (float)(1.0 - v24) - v25;
  float v33 = v26 + v31;
  float v34 = v27 - v30;
  float v35 = v26 - v31;
  float v36 = 1.0 - (float)(v18 * (float)(v18 + v18));
  float v37 = v36 - v25;
  float v38 = v29 + v28;
  float v39 = v27 + v30;
  float v40 = v29 - v28;
  float v41 = v36 - v24;
  float v42 = v12 * v32;
  float v43 = v12 * v33;
  float v44 = v15 * v35;
  float v45 = v15 * v37;
  float v46 = v13 * v39;
  float v47 = v13 * v40;
  float v48 = (float)((float)(v35 * (float)(v15 * v35)) + (float)((float)(v12 * v32) * v32))
      + (float)((float)(v13 * v39) * v39);
  float v49 = (float)((float)(v37 * (float)(v15 * v37)) + (float)((float)(v12 * v33) * v33))
      + (float)((float)(v13 * v40) * v40);
  float v50 = (float)((float)(v38 * (float)(v15 * v38)) + (float)((float)(v12 * v34) * v34))
      + (float)((float)(v13 * v41) * v41);
  float v51 = (float)((float)(v37 * v44) + (float)(v42 * v33)) + (float)(v46 * v40);
  *(float *)(a6 + 32) = v48;
  *(float *)(a6 + 36) = v51;
  float v52 = (float)((float)(v38 * v44) + (float)(v42 * v34)) + (float)(v46 * v41);
  *(float *)(a6 + 40) = v52;
  *(float *)(a6 + 44) = v51;
  float v53 = (float)((float)(v38 * v45) + (float)(v43 * v34)) + (float)(v47 * v41);
  *(float *)(a6 + 48) = v49;
  *(float *)(a6 + 52) = v53;
  *(float *)(a6 + 56) = v52;
  *(float *)(a6 + 60) = v53;
  *(float *)(a6 + 64) = v50;
  *(void *)a6 = *(void *)a1;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a1 + 8);
  *(void *)(a6 + 16) = *(void *)a2;
  *(_DWORD *)(a6 + 24) = *(_DWORD *)(a2 + 8);
  if (!a7) {
    goto LABEL_16;
  }
  if (a7)
  {
    *(_DWORD *)a6 = 0;
    if ((a7 & 2) == 0)
    {
LABEL_11:
      if ((a7 & 4) == 0) {
        goto LABEL_12;
      }
      goto LABEL_19;
    }
  }
  else if ((a7 & 2) == 0)
  {
    goto LABEL_11;
  }
  *(_DWORD *)(a6 + 4) = 0;
  if ((a7 & 4) == 0)
  {
LABEL_12:
    if ((a7 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)(a6 + 8) = 0;
  if ((a7 & 8) == 0)
  {
LABEL_13:
    if ((a7 & 0x10) == 0) {
      goto LABEL_14;
    }
LABEL_21:
    *(_DWORD *)(a6 + 20) = 0;
    if ((a7 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_20:
  *(_DWORD *)(a6 + 16) = 0;
  if ((a7 & 0x10) != 0) {
    goto LABEL_21;
  }
LABEL_14:
  if ((a7 & 0x20) != 0) {
LABEL_15:
  }
    *(_DWORD *)(a6 + 24) = 0;
LABEL_16:
  *(float *)(a6 + 12) = a8;
  *(float *)(a6 + 68) = a9;
  *(float *)(a6 + 76) = a10;
  *(_OWORD *)(a6 + 80) = *(_OWORD *)a4;
  *(void *)(a6 + 96) = *(void *)(a4 + 16);
  float result = *(float *)(a4 + 24);
  *(float *)(a6 + 104) = result;
  *(_WORD *)(a6 + 108) = a7;
  *(float *)(a6 + 28) = a11;
  return result;
}

uint64_t **physx::Dy::solve1D(uint64_t **result, double a2, double a3, double a4, double a5, float32x2_t a6, float32x2_t a7, float32x2_t a8, float32x2_t a9)
{
  float v9 = result[4];
  if (v9)
  {
    float v11 = *result;
    float v10 = result[1];
    v13.i64[0] = **result;
    float v12 = *result + 1;
    v13.i64[1] = *v12;
    v14.i64[0] = *v10;
    v14.i64[1] = *((unsigned int *)v10 + 2);
    v16.i64[0] = (*result)[2];
    float v15 = *result + 3;
    v16.i64[1] = *v15;
    v17.i64[0] = v10[2];
    v17.i64[1] = *((unsigned int *)v10 + 6);
    int v18 = *((unsigned __int8 *)v9 + 1);
    if (*((unsigned char *)v9 + 1))
    {
      a6.i32[0] = *((_DWORD *)v9 + 3);
      a7.i32[0] = *((_DWORD *)v9 + 7);
      a8.i32[0] = *((_DWORD *)v9 + 9);
      _X15 = (unsigned int *)(v9 + 9);
      a9.i32[0] = *((_DWORD *)v9 + 11);
      do
      {
        __asm { PRFM            #0, [X15,#0x48] }
        v25.i64[0] = *((void *)_X15 - 3);
        v25.i64[1] = *(_X15 - 4);
        v26.i64[0] = *((void *)_X15 - 1);
        v26.i64[1] = *_X15;
        v27.i64[0] = *((void *)_X15 + 1);
        v27.i64[1] = _X15[4];
        v28.i64[0] = *((void *)_X15 + 3);
        v28.i64[1] = _X15[8];
        float v29 = (const float *)(_X15 - 3);
        float32x2_t v30 = vld1_dup_f32(v29);
        float v31 = (const float *)(_X15 + 16);
        float32x2_t v32 = vld1_dup_f32(v31);
        float v33 = (const float *)(_X15 + 15);
        float32x2_t v34 = vld1_dup_f32(v33);
        float v35 = (const float *)(_X15 + 14);
        float32x2_t v36 = vld1_dup_f32(v35);
        float32x4_t v37 = vsubq_f32(vmlaq_f32(vmulq_f32(v16, v27), v25, v13), vmlaq_f32(vmulq_f32(v17, v28), v26, v14));
        v37.i64[0] = vpaddq_f32(v37, v37).u64[0];
        float32x2_t v38 = vmin_f32(v34, vmax_f32(v36, vmla_n_f32(vmla_n_f32(v30, vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32), *((float *)_X15 + 5)), v32, *((float *)_X15 + 9))));
        float32x2_t v39 = vsub_f32(v38, v32);
        float32x4_t v13 = vmlaq_n_f32(v13, v25, vmul_f32(a6, v39).f32[0]);
        v13.i64[1] = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u32[0];
        float32x4_t v14 = vmlsq_lane_f32(v14, v26, vmul_f32(a7, v39), 0);
        v14.i64[1] = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u32[0];
        float32x4_t v16 = vmlaq_n_f32(v16, v27, vmul_f32(a8, v39).f32[0]);
        _X15[16] = v38.i32[0];
        v16.i64[1] = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u32[0];
        float32x4_t v17 = vmlaq_n_f32(v17, v28, vmul_f32(a9, v39).f32[0]);
        v17.i64[1] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u32[0];
        _X15 += 24;
        --v18;
      }
      while (v18);
    }
    uint64_t *v11 = v13.i64[0];
    _DWORD *v12 = v13.i32[2];
    v11[2] = v16.i64[0];
    *float v15 = v16.i32[2];
    uint64_t *v10 = v14.i64[0];
    *((_DWORD *)v10 + 2) = v14.i32[2];
    v10[2] = v17.i64[0];
    *((_DWORD *)v10 + 6) = v17.i32[2];
  }
  return result;
}

uint64_t **physx::Dy::solveContact(uint64_t **result, unsigned char *a2, double a3, double a4, double a5, double a6, double a7, float32x2_t a8, float32x2_t a9)
{
  float v11 = *result;
  float v10 = result[1];
  v13.i64[0] = **result;
  float v12 = *result + 1;
  v13.i64[1] = *v12;
  v14.i64[0] = *v10;
  v14.i64[1] = *((unsigned int *)v10 + 2);
  v16.i64[0] = (*result)[2];
  float v15 = *result + 3;
  v16.i64[1] = *v15;
  v17.i64[0] = v10[2];
  v17.i64[1] = *((unsigned int *)v10 + 6);
  if (*((_WORD *)result + 15))
  {
    _X15 = (unint64_t)result[4];
    unint64_t v19 = _X15 + 16 * *((unsigned __int16 *)result + 15);
    do
    {
      __int16 v20 = *(unsigned __int8 *)(_X15 + 2);
      uint64_t v21 = *(unsigned __int8 *)(_X15 + 3);
      __asm { PRFM            #0, [X15,#0x50] }
      uint64_t v27 = 3 * *(unsigned __int8 *)(_X15 + 2);
      uint64_t v28 = _X15 + 80 + 48 * *(unsigned __int8 *)(_X15 + 2);
      a9.i32[0] = *(_DWORD *)(_X15 + 8);
      float v29 = *(float *)(_X15 + 12);
      float32x2_t v30 = (const float *)(_X15 + 48);
      a8.i32[0] = *(_DWORD *)(_X15 + 4);
      float32x4_t v31 = vld1q_dup_f32(v30);
      if (*(unsigned char *)(_X15 + 2))
      {
        float32x4_t v32 = *(float32x4_t *)(_X15 + 32);
        float32x4_t v33 = vmulq_n_f32(v32, v29);
        v33.i32[3] = 0;
        float32x4_t v34 = vmulq_f32(v31, v32);
        v34.i32[3] = 0;
        float32x4_t v35 = vnegq_f32(v34);
        _X3 = (float32x4_t *)(_X15 + 112);
        float32x2_t v37 = 0;
        float32x2_t v38 = (float *)(_X15 + 80 + 48 * *(unsigned __int8 *)(_X15 + 2));
        uint64_t v39 = *(unsigned __int8 *)(_X15 + 2);
        float v40 = v38;
        do
        {
          __asm { PRFM            #0, [X3,#0x60] }
          float32x4_t v43 = _X3[-2];
          float32x4_t v42 = _X3[-1];
          float32x2_t v44 = vld1_dup_f32(v40++);
          v9.i32[0] = _X3->i32[0];
          float v45 = &_X3->f32[3];
          float32x2_t v46 = vld1_dup_f32(v45);
          float32x4_t v47 = vsubq_f32(vmlaq_f32(vmulq_f32(v16, v43), v32, v13), vmlaq_f32(vmulq_f32(v17, v42), v32, v14));
          v47.i64[0] = vpaddq_f32(v47, v47).u64[0];
          float v48 = &_X3->f32[1];
          float32x2_t v49 = vld1_dup_f32(v48);
          *(float32x2_t *)v9.i8 = vmin_f32(vadd_f32(v44, vmax_f32(vmls_lane_f32(v49, vpadd_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v47.f32), *(float32x2_t *)v9.i8, 0), vneg_f32(v44))), v46);
          float32x2_t v50 = vsub_f32(*(float32x2_t *)v9.i8, v44);
          float32x4_t v13 = vmlaq_n_f32(v13, v33, v50.f32[0]);
          v13.i64[1] = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u32[0];
          float32x4_t v14 = vmlaq_n_f32(v14, v35, v50.f32[0]);
          v14.i64[1] = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u32[0];
          float32x4_t v16 = vmlaq_n_f32(v16, v43, vmul_f32(a8, v50).f32[0]);
          v16.i64[1] = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u32[0];
          float32x4_t v17 = vmlsq_lane_f32(v17, v42, vmul_f32(a9, v50), 0);
          v17.i64[1] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u32[0];
          *float32x2_t v38 = *(float *)v9.i32;
          float32x2_t v37 = vadd_f32(v37, *(float32x2_t *)v9.i8);
          _X3 += 3;
          float32x2_t v38 = (float *)v40;
          --v39;
        }
        while (v39);
      }
      else
      {
        float32x2_t v37 = 0;
      }
      float result = (uint64_t **)((4 * v20 + 12) & 0x7F0);
      if (*a2 && v21)
      {
        float32x2_t v51 = *(float32x2_t *)(_X15 + 16);
        if (a2[1])
        {
          _X3 = *(void *)(_X15 + 56);
          __asm { PRFM            #0, [X3] }
        }
        float32x2_t v54 = vmul_n_f32(v37, v51.f32[0]);
        float32x2_t v55 = vmul_lane_f32(v37, v51, 1);
        float32x2_t v56 = vneg_f32(v55);
        _X2 = (int32x4_t *)((char *)&result[2 * v27 + 14] + _X15);
        int8x16_t v58 = 0uLL;
        uint64_t v59 = v21;
        do
        {
          __asm { PRFM            #0, [X2,#0x60] }
          int32x4_t v61 = _X2[-2];
          float32x4_t v62 = *(float32x4_t *)_X2;
          float32x4_t v63 = (float32x4_t)v61;
          v63.i32[3] = 0;
          float32x4_t v64 = (float32x4_t)_X2[-1];
          v64.i32[3] = 0;
          float32x2_t v65 = (float32x2_t)vdup_laneq_s32(v61, 3);
          v62.i32[3] = 0;
          i32 = (const float *)_X2[1].i32;
          float32x2_t v67 = vld1_dup_f32(i32);
          float32x4_t v68 = vmulq_n_f32(v63, v29);
          v68.i32[3] = 0;
          float32x4_t v69 = vmulq_f32(v31, v63);
          v69.i32[3] = 0;
          float32x4_t v70 = vsubq_f32(vmlaq_f32(vmulq_f32(v16, v64), v63, v13), vmlaq_f32(vmulq_f32(v17, v62), v63, v14));
          v70.i64[0] = vpaddq_f32(v70, v70).u64[0];
          float32x2_t v71 = vmls_laneq_f32(vmls_laneq_f32(v65, vsub_f32((float32x2_t)vdup_laneq_s32(*_X2, 3), v67), (float32x4_t)_X2[-1], 3), vpadd_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v70.f32), (float32x4_t)_X2[-1], 3);
          int8x16_t v9 = (int8x16_t)vdupq_lane_s32(vcgt_f32(vabs_f32(v71), v54), 0);
          *(int8x8_t *)v70.f32 = vbsl_s8(*(int8x8_t *)v9.i8, (int8x8_t)vmin_f32(v55, vmax_f32(v56, v71)), (int8x8_t)v71);
          float32x2_t v72 = vsub_f32(*(float32x2_t *)v70.f32, v65);
          float32x4_t v13 = vmlaq_n_f32(v13, v68, v72.f32[0]);
          v13.i64[1] = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u32[0];
          float32x4_t v14 = vmlsq_lane_f32(v14, v69, v72, 0);
          v14.i64[1] = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u32[0];
          float32x4_t v16 = vmlaq_n_f32(v16, v64, vmul_f32(a8, v72).f32[0]);
          v16.i64[1] = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u32[0];
          float32x4_t v17 = vmlsq_lane_f32(v17, v62, vmul_f32(a9, v72), 0);
          v17.i64[1] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u32[0];
          int8x16_t v58 = vorrq_s8(v9, v58);
          v61.i32[3] = v70.i32[1];
          _X2[-2] = v61;
          _X2 += 4;
          --v59;
        }
        while (v59);
        *(_DWORD *)(_X15 + 52) = v58.i32[0];
      }
      _X15 = (unint64_t)&result[8 * v21] + v28;
    }
    while (_X15 < v19);
  }
  uint64_t *v11 = v13.i64[0];
  _DWORD *v12 = v13.i32[2];
  uint64_t *v10 = v14.i64[0];
  *((_DWORD *)v10 + 2) = v14.i32[2];
  v11[2] = v16.i64[0];
  *float v15 = v16.i32[2];
  v10[2] = v17.i64[0];
  *((_DWORD *)v10 + 6) = v17.i32[2];
  return result;
}

int32x4_t *physx::Dy::solveContact_BStatic(int32x4_t *result, unsigned char *a2, double a3, double a4, double a5, float32x2_t a6)
{
  float v7 = (uint64_t *)result->i64[0];
  v9.i64[0] = *(void *)result->i64[0];
  uint64_t v8 = (_DWORD *)(result->i64[0] + 8);
  v9.i64[1] = *v8;
  v11.i64[0] = *(void *)(result->i64[0] + 16);
  float v10 = (_DWORD *)(result->i64[0] + 24);
  v11.i64[1] = *v10;
  if (result[1].i16[7])
  {
    unint64_t v12 = result[2].u64[0];
    unint64_t v13 = v12 + 16 * result[1].u16[7];
    do
    {
      __int16 v14 = *(unsigned __int8 *)(v12 + 2);
      uint64_t v15 = 3 * *(unsigned __int8 *)(v12 + 2);
      uint64_t v16 = *(unsigned __int8 *)(v12 + 3);
      uint64_t v17 = v12 + 48 * *(unsigned __int8 *)(v12 + 2) + 80;
      float v18 = *(float *)(v12 + 12);
      a6.i32[0] = *(_DWORD *)(v12 + 4);
      if (*(unsigned char *)(v12 + 2))
      {
        float32x4_t v19 = *(float32x4_t *)(v12 + 32);
        float32x4_t v20 = vmulq_n_f32(v19, v18);
        v20.i32[3] = 0;
        _X17 = (float32x4_t *)(v12 + 112);
        float32x2_t v22 = 0;
        float v23 = (float *)(v12 + 48 * *(unsigned __int8 *)(v12 + 2) + 80);
        float result = (int32x4_t *)*(unsigned __int8 *)(v12 + 2);
        float v24 = v23;
        do
        {
          __asm { PRFM            #0, [X17,#0x60] }
          float32x4_t v30 = _X17[-2];
          float32x2_t v31 = vld1_dup_f32(v24++);
          v6.i32[0] = _X17->i32[0];
          float32x4_t v32 = &_X17->f32[3];
          float32x2_t v33 = vld1_dup_f32(v32);
          float32x4_t v34 = vmlaq_f32(vmulq_f32(v11, v30), v19, v9);
          v34.i64[0] = vpaddq_f32(v34, v34).u64[0];
          float32x4_t v35 = &_X17->f32[1];
          float32x2_t v36 = vld1_dup_f32(v35);
          *(float32x2_t *)v6.i8 = vmin_f32(vadd_f32(v31, vmax_f32(vmls_lane_f32(v36, vpadd_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v34.f32), *(float32x2_t *)v6.i8, 0), vneg_f32(v31))), v33);
          float32x2_t v37 = vsub_f32(*(float32x2_t *)v6.i8, v31);
          float32x4_t v9 = vmlaq_n_f32(v9, v20, v37.f32[0]);
          v9.i64[1] = vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u32[0];
          float32x4_t v11 = vmlaq_n_f32(v11, v30, vmul_f32(a6, v37).f32[0]);
          v11.i64[1] = vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u32[0];
          *float v23 = *(float *)v6.i32;
          float32x2_t v22 = vadd_f32(v22, *(float32x2_t *)v6.i8);
          _X17 += 3;
          float v23 = (float *)v24;
          float result = (int32x4_t *)((char *)result - 1);
        }
        while (result);
      }
      else
      {
        float32x2_t v22 = 0;
      }
      uint64_t v38 = (4 * v14 + 12) & 0x7F0;
      if (*a2 && v16)
      {
        float32x2_t v39 = *(float32x2_t *)(v12 + 16);
        if (a2[1])
        {
          _X17 = *(void *)(v12 + 56);
          __asm { PRFM            #0, [X17] }
        }
        float32x2_t v42 = vmul_n_f32(v22, v39.f32[0]);
        float32x2_t v43 = vmul_lane_f32(v22, v39, 1);
        float32x2_t v44 = vneg_f32(v43);
        _X16 = (int32x4_t *)(v12 + 16 * v15 + v38 + 112);
        int8x16_t v46 = 0uLL;
        uint64_t v47 = v16;
        do
        {
          __asm { PRFM            #0, [X16,#0x60] }
          int32x4_t v49 = _X16[-2];
          float32x4_t v50 = (float32x4_t)v49;
          v50.i32[3] = 0;
          float32x4_t v51 = (float32x4_t)_X16[-1];
          v51.i32[3] = 0;
          float32x2_t v52 = (float32x2_t)vdup_laneq_s32(v49, 3);
          float result = _X16 + 1;
          float32x2_t v53 = vld1_dup_f32((const float *)result->i32);
          float32x4_t v54 = vmulq_n_f32(v50, v18);
          v54.i32[3] = 0;
          float32x4_t v55 = vmlaq_f32(vmulq_f32(v11, v51), v50, v9);
          v50.i64[0] = vpaddq_f32(v55, v55).u64[0];
          float32x2_t v56 = vmls_laneq_f32(vmls_laneq_f32(v52, vsub_f32((float32x2_t)vdup_laneq_s32(*_X16, 3), v53), (float32x4_t)_X16[-1], 3), vpadd_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)v50.f32), (float32x4_t)_X16[-1], 3);
          int8x16_t v6 = (int8x16_t)vdupq_lane_s32(vcgt_f32(vabs_f32(v56), v42), 0);
          *(int8x8_t *)v50.f32 = vbsl_s8(*(int8x8_t *)v6.i8, (int8x8_t)vmin_f32(v43, vmax_f32(v44, v56)), (int8x8_t)v56);
          float32x2_t v57 = vsub_f32(*(float32x2_t *)v50.f32, v52);
          float32x4_t v9 = vmlaq_n_f32(v9, v54, v57.f32[0]);
          v9.i64[1] = vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u32[0];
          float32x4_t v11 = vmlaq_n_f32(v11, v51, vmul_f32(a6, v57).f32[0]);
          v11.i64[1] = vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u32[0];
          int8x16_t v46 = vorrq_s8(v6, v46);
          v49.i32[3] = v50.i32[1];
          _X16[-2] = v49;
          _X16 += 4;
          --v47;
        }
        while (v47);
        *(_DWORD *)(v12 + 52) = v46.i32[0];
      }
      unint64_t v12 = v17 + v38 + (v16 << 6);
    }
    while (v12 < v13);
  }
  *float v7 = v9.i64[0];
  _DWORD *v8 = v9.i32[2];
  v7[2] = v11.i64[0];
  _DWORD *v10 = v11.i32[2];
  return result;
}

uint64_t physx::Dy::concludeContact(uint64_t result)
{
  if (*(_WORD *)(result + 30))
  {
    _X14 = *(unsigned __int8 **)(result + 32);
    uint64_t v2 = &_X14[16 * *(unsigned __int16 *)(result + 30)];
    do
    {
      unsigned int v3 = _X14 + 80;
      int v4 = _X14[2];
      int v5 = _X14[3];
      __asm
      {
        PRFM            #0, [X14,#0xD0]
        PRFM            #0, [X14,#0x150]
        PRFM            #0, [X14,#0x1D0]
      }
      int v13 = *_X14;
      if (v4)
      {
        if (v13 == 3) {
          float result = 112;
        }
        else {
          float result = 48;
        }
        int v14 = v4;
        do
        {
          uint64_t v15 = &v3[result];
          *((_DWORD *)v3 + 9) = *((_DWORD *)v3 + 10);
          v3 += result;
          --v14;
        }
        while (v14);
      }
      else
      {
        uint64_t v15 = v3;
      }
      uint64_t v16 = &v15[(4 * (_WORD)v4 + 12) & 0x7F0];
      if (v5)
      {
        if (v13 == 3) {
          uint64_t v17 = 128;
        }
        else {
          uint64_t v17 = 64;
        }
        do
        {
          _X14 = &v16[v17];
          *((_DWORD *)v16 + 11) = 0;
          v16 += v17;
          --v5;
        }
        while (v5);
      }
      else
      {
        _X14 = v16;
      }
    }
    while (_X14 < v2);
  }
  return result;
}

uint64_t physx::Dy::writeBackContact(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_WORD *)(result + 30))
  {
    _X15 = *(unsigned __int8 **)(result + 32);
    int v4 = *(float **)(result + 40);
    int8x16_t v6 = &_X15[16 * *(unsigned __int16 *)(result + 30)];
    float v7 = 0.0;
    do
    {
      unsigned __int8 v8 = _X15[1];
      int v9 = _X15[2];
      int v10 = _X15[3];
      __asm
      {
        PRFM            #0, [X15,#0x150]
        PRFM            #0, [X15,#0x1D0]
      }
      int v17 = *_X15;
      if (v17 == 3) {
        int v18 = 112;
      }
      else {
        int v18 = 48;
      }
      uint64_t v19 = (uint64_t)&_X15[v18 * v9 + 80];
      if (v4 && _X15[2])
      {
        float32x4_t v20 = (float *)v19;
        uint64_t v21 = _X15[2];
        do
        {
          float v22 = *v20++;
          *v4++ = v22;
          float v7 = v7 + v22;
          --v21;
        }
        while (v21);
      }
      if (*((_DWORD *)_X15 + 13))
      {
        float v23 = (unsigned char *)*((void *)_X15 + 7);
        if (v23) {
          *float v23 = 1;
        }
      }
      if (v17 == 3) {
        char v24 = 7;
      }
      else {
        char v24 = 6;
      }
      _X15 = (unsigned __int8 *)(v19 + ((4 * (_WORD)v9 + 12) & 0x7F0) + (v10 << v24));
    }
    while (_X15 < v6);
    if ((v8 & 1) != 0 && *(unsigned __int16 *)(result + 16) == 0xFFFF && *(__int16 *)(result + 18) == -1 && v7 != 0.0)
    {
      float v25 = *(float *)(a3 + 28);
      float v26 = *(float *)(a4 + 28);
      if (v25 < 3.4028e38 || v26 < 3.4028e38)
      {
        if (v25 >= v26) {
          float v25 = *(float *)(a4 + 28);
        }
        unsigned int v27 = *(_DWORD *)(a3 + 72) << 7;
        unsigned int v28 = *(_DWORD *)(a4 + 72) << 7;
        uint64_t v29 = *(void *)(*(void *)(result + 32) + 64);
        if (v28 >= v27) {
          int v30 = *(_DWORD *)(a3 + 72) << 7;
        }
        else {
          int v30 = *(_DWORD *)(a4 + 72) << 7;
        }
        if (v28 > v27) {
          unsigned int v27 = *(_DWORD *)(a4 + 72) << 7;
        }
        uint64_t v31 = *(void *)(a2 + 8);
        uint64_t v32 = *(unsigned int *)(a2 + 16);
        *(_DWORD *)(a2 + 16) = v32 + 1;
        uint64_t v33 = v31 + 32 * v32;
        *(void *)uint64_t v33 = v29;
        *(float *)(v33 + 8) = v7;
        *(float *)(v33 + 12) = v25;
        *(_DWORD *)(v33 + 16) = v30;
        *(_DWORD *)(v33 + 20) = v27;
      }
    }
  }
  return result;
}

uint64_t physx::Dy::writeBack1D(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  if (v1)
  {
    uint64_t v2 = *(void *)(result + 32);
    int v3 = *(unsigned __int8 *)(v2 + 1);
    if (*(unsigned char *)(v2 + 1))
    {
      uint64_t v4 = v2 + 112;
      uint64_t v5 = 96;
      if (*(unsigned char *)v2 == 4) {
        uint64_t v5 = 160;
      }
      float v6 = 0.0;
      float v7 = 0.0;
      float v8 = 0.0;
      float v9 = 0.0;
      float v10 = 0.0;
      float v11 = 0.0;
      do
      {
        if ((*(unsigned char *)(v4 + 28) & 2) != 0)
        {
          float v12 = *(float *)(v4 + 24);
          float v8 = v8 + (float)(v12 * *(float *)(v4 - 64));
          float v7 = v7 + (float)(v12 * *(float *)(v4 - 60));
          float v6 = v6 + (float)(v12 * *(float *)(v4 - 56));
          float v11 = v11 + (float)(v12 * *(float *)v4);
          float v10 = v10 + (float)(v12 * *(float *)(v4 + 4));
          float v9 = v9 + (float)(v12 * *(float *)(v4 + 8));
        }
        v4 += v5;
        --v3;
      }
      while (v3);
    }
    else
    {
      float v11 = 0.0;
      float v10 = 0.0;
      float v9 = 0.0;
      float v8 = 0.0;
      float v7 = 0.0;
      float v6 = 0.0;
    }
    float v14 = *(float *)(v2 + 20);
    float v13 = *(float *)(v2 + 24);
    float v15 = *(float *)(v2 + 16);
    float v16 = v11 - (float)((float)(v14 * v6) - (float)(v13 * v7));
    float v17 = v10 - (float)((float)(v13 * v8) - (float)(v15 * v6));
    float v18 = v9 - (float)((float)(v15 * v7) - (float)(v14 * v8));
    *(float *)uint64_t v1 = v8;
    *(float *)(v1 + 4) = v7;
    *(float *)(v1 + 8) = v6;
    *(float *)(v1 + 16) = v16;
    *(float *)(v1 + 20) = v17;
    *(float *)(v1 + 24) = v18;
    if (*(unsigned char *)(v2 + 3)) {
      BOOL v19 = sqrtf((float)((float)(v7 * v7) + (float)(v8 * v8)) + (float)(v6 * v6)) > *(float *)(v2 + 4)
    }
         || sqrtf((float)((float)(v17 * v17) + (float)(v16 * v16)) + (float)(v18 * v18)) > *(float *)(v2 + 8);
    else {
      BOOL v19 = 0;
    }
    *(_DWORD *)(v1 + 12) = v19;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  BOOL v24;

  uint64_t v1 = *(void *)(result + 40);
  if (v1)
  {
    uint64_t v2 = *(void *)(result + 32);
    int v3 = *(unsigned __int8 *)(v2 + 1);
    if (*(unsigned char *)(v2 + 1))
    {
      uint64_t v4 = v2 + 176;
      uint64_t v5 = 96;
      if (*(unsigned char *)v2 == 4) {
        uint64_t v5 = 160;
      }
      float v6 = 0.0;
      float v7 = 0.0;
      float v8 = 0.0;
      float v9 = 0.0;
      float v10 = 0.0;
      float v11 = 0.0;
      do
      {
        if ((*(unsigned char *)(v4 + 84) & 2) != 0)
        {
          float v12 = *(float *)(v4 + 76);
          float v13 = *(float *)(v4 + 4);
          float v14 = *(float *)(v4 + 8);
          float v8 = v8 + (float)(v12 * *(float *)v4);
          float v7 = v7 + (float)(v12 * v13);
          float v6 = v6 + (float)(v12 * v14);
          float v16 = *(float *)(v2 + 36);
          float v15 = *(float *)(v2 + 40);
          float v17 = *(float *)(v2 + 32);
          float v11 = v11 + (float)(v12 * (float)(*(float *)(v4 + 32) + (float)((float)(v13 * v15) - (float)(v14 * v16))));
          float v10 = v10
              + (float)(v12 * (float)((float)((float)(v14 * v17) - (float)(*(float *)v4 * v15)) + *(float *)(v4 + 36)));
          float v9 = v9
             + (float)(v12 * (float)((float)((float)(*(float *)v4 * v16) - (float)(v13 * v17)) + *(float *)(v4 + 40)));
        }
        v4 += v5;
        --v3;
      }
      while (v3);
    }
    else
    {
      float v11 = 0.0;
      float v10 = 0.0;
      float v9 = 0.0;
      float v8 = 0.0;
      float v7 = 0.0;
      float v6 = 0.0;
    }
    BOOL v19 = *(float *)(v2 + 20);
    float v18 = *(float *)(v2 + 24);
    float32x4_t v20 = *(float *)(v2 + 16);
    uint64_t v21 = v11 - (float)((float)(v19 * v6) - (float)(v18 * v7));
    float v22 = v10 - (float)((float)(v18 * v8) - (float)(v20 * v6));
    float v23 = v9 - (float)((float)(v20 * v7) - (float)(v19 * v8));
    *(float *)uint64_t v1 = v8;
    *(float *)(v1 + 4) = v7;
    *(float *)(v1 + 8) = v6;
    *(float *)(v1 + 16) = v21;
    *(float *)(v1 + 20) = v22;
    *(float *)(v1 + 24) = v23;
    if (*(unsigned char *)(v2 + 3)) {
      char v24 = sqrtf((float)((float)(v7 * v7) + (float)(v8 * v8)) + (float)(v6 * v6)) > *(float *)(v2 + 4)
    }
         || sqrtf((float)((float)(v22 * v22) + (float)(v21 * v21)) + (float)(v23 * v23)) > *(float *)(v2 + 8);
    else {
      char v24 = 0;
    }
    *(_DWORD *)(v1 + 12) = v24;
  }
  return result;
}

uint64_t **physx::Dy::solve1DBlock(uint64_t a1, unsigned int a2, double a3, double a4, double a5, double a6, float32x2_t a7, float32x2_t a8, float32x2_t a9, float32x2_t a10)
{
  if (a2 >= 2)
  {
    uint64_t v12 = a2 - 1;
    uint64_t v13 = a1;
    do
    {
      _X8 = *(void *)(v13 + 80);
      __asm
      {
        PRFM            #0, [X8]
        PRFM            #0, [X8,#0x80]
        PRFM            #0, [X8,#0x100]
      }
      physx::Dy::solve1D((uint64_t **)v13, a3, a4, a5, a6, a7, a8, a9, a10);
      v13 += 48;
      --v12;
    }
    while (v12);
  }
  return physx::Dy::solve1D((uint64_t **)(a1 + 48 * (a2 - 1)), a3, a4, a5, a6, a7, a8, a9, a10);
}

float physx::Dy::solve1DConcludeBlock(uint64_t a1, unsigned int a2, double a3, double a4, double a5, double a6, float32x2_t a7, float32x2_t a8, float32x2_t a9, float32x2_t a10)
{
  if (a2 >= 2)
  {
    for (uint64_t i = 1; i != a2; ++i)
    {
      uint64_t v13 = a1 + 48 * i;
      _X8 = *(void *)(v13 + 32);
      __asm
      {
        PRFM            #0, [X8]
        PRFM            #0, [X8,#0x80]
        PRFM            #0, [X8,#0x100]
      }
      physx::Dy::solve1D((uint64_t **)(v13 - 48), a3, a4, a5, a6, a7, a8, a9, a10);
      float v22 = *(unsigned __int8 **)(v13 - 16);
      if (v22)
      {
        int v23 = v22[1];
        if (v22[1])
        {
          int v25 = *v22;
          char v24 = v22 + 76;
          if (v25 == 4) {
            uint64_t v26 = 160;
          }
          else {
            uint64_t v26 = 96;
          }
          do
          {
            LODWORD(a3) = *v24;
            *(v24 - 4) = *v24;
            char v24 = (_DWORD *)((char *)v24 + v26);
            --v23;
          }
          while (v23);
        }
      }
    }
  }
  uint64_t v27 = a1 + 48 * (a2 - 1);
  physx::Dy::solve1D((uint64_t **)v27, a3, a4, a5, a6, a7, a8, a9, a10);
  uint64_t v29 = *(unsigned __int8 **)(v27 + 32);
  if (v29)
  {
    int v30 = v29[1];
    if (v29[1])
    {
      int v32 = *v29;
      uint64_t v31 = (float *)(v29 + 76);
      uint64_t v33 = 96;
      if (v32 == 4) {
        uint64_t v33 = 160;
      }
      do
      {
        float result = *v31;
        *(v31 - 4) = *v31;
        uint64_t v31 = (float *)((char *)v31 + v33);
        --v30;
      }
      while (v30);
    }
  }
  return result;
}

uint64_t physx::Dy::solve1DBlockWriteBack(uint64_t a1, unsigned int a2, double a3, double a4, double a5, double a6, float32x2_t a7, float32x2_t a8, float32x2_t a9, float32x2_t a10)
{
  if (a2 >= 2)
  {
    uint64_t v12 = a2 - 1;
    uint64_t v13 = a1;
    do
    {
      _X8 = *(void *)(v13 + 80);
      __asm
      {
        PRFM            #0, [X8]
        PRFM            #0, [X8,#0x80]
        PRFM            #0, [X8,#0x100]
      }
      physx::Dy::solve1D((uint64_t **)v13, a3, a4, a5, a6, a7, a8, a9, a10);
      physx::Dy::writeBack1D(v13);
      v13 += 48;
      --v12;
    }
    while (v12);
  }
  float v22 = (uint64_t **)(a1 + 48 * (a2 - 1));
  physx::Dy::solve1D(v22, a3, a4, a5, a6, a7, a8, a9, a10);
  return physx::Dy::writeBack1D((uint64_t)v22);
}

uint64_t **physx::Dy::solveContactBlock(uint64_t a1, unsigned int a2, unsigned char *a3, double a4, double a5, double a6, double a7, double a8, float32x2_t a9, float32x2_t a10)
{
  if (a2 >= 2)
  {
    uint64_t v13 = a2 - 1;
    uint64_t v14 = a1;
    do
    {
      _X8 = *(void *)(v14 + 80);
      __asm
      {
        PRFM            #0, [X8]
        PRFM            #0, [X8,#0x80]
        PRFM            #0, [X8,#0x100]
      }
      physx::Dy::solveContact((uint64_t **)v14, a3, a4, a5, a6, a7, a8, a9, a10);
      v14 += 48;
      --v13;
    }
    while (v13);
  }
  return physx::Dy::solveContact((uint64_t **)(a1 + 48 * (a2 - 1)), a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t physx::Dy::solveContactConcludeBlock(uint64_t a1, unsigned int a2, unsigned char *a3, double a4, double a5, double a6, double a7, double a8, float32x2_t a9, float32x2_t a10)
{
  if (a2 >= 2)
  {
    uint64_t v13 = a2 - 1;
    uint64_t v14 = a1;
    do
    {
      _X8 = *(void *)(v14 + 80);
      __asm
      {
        PRFM            #0, [X8]
        PRFM            #0, [X8,#0x80]
        PRFM            #0, [X8,#0x100]
      }
      physx::Dy::solveContact((uint64_t **)v14, a3, a4, a5, a6, a7, a8, a9, a10);
      physx::Dy::concludeContact(v14);
      v14 += 48;
      --v13;
    }
    while (v13);
  }
  int v23 = (uint64_t **)(a1 + 48 * (a2 - 1));
  physx::Dy::solveContact(v23, a3, a4, a5, a6, a7, a8, a9, a10);
  return physx::Dy::concludeContact((uint64_t)v23);
}

uint64_t physx::Dy::solveContactBlockWriteBack(uint64_t a1, unsigned int a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, float32x2_t a9, float32x2_t a10)
{
  if (a2 >= 2)
  {
    uint64_t v13 = a2 - 1;
    uint64_t v14 = a1;
    do
    {
      _X8 = *(void *)(v14 + 80);
      __asm
      {
        PRFM            #0, [X8]
        PRFM            #0, [X8,#0x80]
        PRFM            #0, [X8,#0x100]
      }
      uint64_t v23 = *(void *)(a3 + 24);
      uint64_t v24 = v23 + 112 * *(unsigned int *)(v14 + 20);
      uint64_t v25 = v23 + 112 * *(unsigned int *)(v14 + 24);
      physx::Dy::solveContact((uint64_t **)v14, (unsigned char *)a3, a4, a5, a6, a7, a8, a9, a10);
      physx::Dy::writeBackContact(v14, a3, v24, v25);
      v14 += 48;
      --v13;
    }
    while (v13);
  }
  uint64_t v26 = *(void *)(a3 + 24);
  uint64_t v27 = a1 + 48 * (a2 - 1);
  uint64_t v28 = v26 + 112 * *(unsigned int *)(v27 + 20);
  uint64_t v29 = v26 + 112 * *(unsigned int *)(v27 + 24);
  physx::Dy::solveContact((uint64_t **)v27, (unsigned char *)a3, a4, a5, a6, a7, a8, a9, a10);
  uint64_t result = physx::Dy::writeBackContact(v27, a3, v28, v29);
  unsigned int v31 = *(_DWORD *)(a3 + 16);
  if (v31 > *(_DWORD *)(a3 + 20) - 4)
  {
    unsigned int add = atomic_fetch_add(*(atomic_uint *volatile *)(a3 + 48), v31);
    int v33 = *(_DWORD *)(a3 + 16);
    if (v33)
    {
      uint64_t v34 = 0;
      unint64_t v35 = 0;
      int v36 = add + v31 - v33;
      do
      {
        float32x2_t v37 = (_OWORD *)(*(void *)(a3 + 8) + v34);
        uint64_t v38 = (_OWORD *)(*(void *)(a3 + 32) + 32 * (v36 + v35));
        long long v39 = v37[1];
        *uint64_t v38 = *v37;
        v38[1] = v39;
        ++v35;
        v34 += 32;
      }
      while (v35 < *(unsigned int *)(a3 + 16));
    }
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

int32x4_t *physx::Dy::solveContact_BStaticBlock(int32x4_t *a1, unsigned int a2, unsigned char *a3, double a4, double a5, double a6, float32x2_t a7)
{
  if (a2 >= 2)
  {
    uint64_t v10 = a2 - 1;
    float v11 = a1;
    do
    {
      _X8 = v11[5].i64[0];
      __asm
      {
        PRFM            #0, [X8]
        PRFM            #0, [X8,#0x80]
        PRFM            #0, [X8,#0x100]
      }
      physx::Dy::solveContact_BStatic(v11, a3, a4, a5, a6, a7);
      v11 += 3;
      --v10;
    }
    while (v10);
  }
  return physx::Dy::solveContact_BStatic(&a1[3 * a2 - 3], a3, a4, a5, a6, a7);
}

uint64_t physx::Dy::solveContact_BStaticConcludeBlock(int32x4_t *a1, unsigned int a2, unsigned char *a3, double a4, double a5, double a6, float32x2_t a7)
{
  if (a2 >= 2)
  {
    uint64_t v10 = a2 - 1;
    float v11 = a1;
    do
    {
      _X8 = v11[5].i64[0];
      __asm
      {
        PRFM            #0, [X8]
        PRFM            #0, [X8,#0x80]
        PRFM            #0, [X8,#0x100]
      }
      physx::Dy::solveContact_BStatic(v11, a3, a4, a5, a6, a7);
      physx::Dy::concludeContact((uint64_t)v11);
      v11 += 3;
      --v10;
    }
    while (v10);
  }
  float32x4_t v20 = &a1[3 * a2 - 3];
  physx::Dy::solveContact_BStatic(v20, a3, a4, a5, a6, a7);
  return physx::Dy::concludeContact((uint64_t)v20);
}

uint64_t physx::Dy::solveContact_BStaticBlockWriteBack(int32x4_t *a1, unsigned int a2, uint64_t a3, double a4, double a5, double a6, float32x2_t a7)
{
  if (a2 >= 2)
  {
    uint64_t v10 = a2 - 1;
    float v11 = a1;
    do
    {
      _X8 = v11[5].i64[0];
      __asm
      {
        PRFM            #0, [X8]
        PRFM            #0, [X8,#0x80]
        PRFM            #0, [X8,#0x100]
      }
      uint64_t v20 = *(void *)(a3 + 24);
      uint64_t v21 = v20 + 112 * v11[1].u32[1];
      uint64_t v22 = v20 + 112 * v11[1].u32[2];
      physx::Dy::solveContact_BStatic(v11, (unsigned char *)a3, a4, a5, a6, a7);
      physx::Dy::writeBackContact((uint64_t)v11, a3, v21, v22);
      v11 += 3;
      --v10;
    }
    while (v10);
  }
  uint64_t v23 = *(void *)(a3 + 24);
  uint64_t v24 = &a1[3 * a2 - 3];
  uint64_t v25 = v23 + 112 * v24[1].u32[1];
  uint64_t v26 = v23 + 112 * v24[1].u32[2];
  physx::Dy::solveContact_BStatic(v24, (unsigned char *)a3, a4, a5, a6, a7);
  uint64_t result = physx::Dy::writeBackContact((uint64_t)v24, a3, v25, v26);
  unsigned int v28 = *(_DWORD *)(a3 + 16);
  if (v28 > *(_DWORD *)(a3 + 20) - 4)
  {
    unsigned int add = atomic_fetch_add(*(atomic_uint *volatile *)(a3 + 48), v28);
    int v30 = *(_DWORD *)(a3 + 16);
    if (v30)
    {
      uint64_t v31 = 0;
      unint64_t v32 = 0;
      int v33 = add + v28 - v30;
      do
      {
        uint64_t v34 = (_OWORD *)(*(void *)(a3 + 8) + v31);
        unint64_t v35 = (_OWORD *)(*(void *)(a3 + 32) + 32 * (v33 + v32));
        long long v36 = v34[1];
        *unint64_t v35 = *v34;
        v35[1] = v36;
        ++v32;
        v31 += 32;
      }
      while (v32 < *(unsigned int *)(a3 + 16));
    }
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

float32x4_t physx::Dy::solveExt1D(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6, float32x4_t *a7, float32x4_t *a8, float32x4_t *a9)
{
  uint64_t v9 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v9 + 1))
  {
    unsigned int v10 = 0;
    float32x4_t v11 = *a5;
    _X11 = v9 + 128;
    do
    {
      __asm { PRFM            #0, [X11,#0x50] }
      float32x4_t v19 = *(float32x4_t *)(_X11 - 80);
      float32x4_t v18 = *(float32x4_t *)(_X11 - 64);
      float32x2_t v20 = (float32x2_t)vdup_laneq_s32((int32x4_t)v19, 3);
      v19.i32[3] = 0;
      v18.i32[3] = 0;
      float32x4_t v21 = *(float32x4_t *)(_X11 - 48);
      v21.i32[3] = 0;
      float32x4_t v22 = *(float32x4_t *)(_X11 - 32);
      v22.i32[3] = 0;
      float32x4_t v23 = vsubq_f32(vmlaq_f32(vmulq_f32(v21, *a4), v19, *a2), vmlaq_f32(vmulq_f32(v11, v22), v18, *a3));
      v23.i64[0] = vpaddq_f32(v23, v23).u64[0];
      *(float32x2_t *)v23.f32 = vmin_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)_X11, 1), vmax_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)_X11, 0), vmla_laneq_f32(vmla_laneq_f32(v20, vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32), *(float32x4_t *)(_X11 - 48), 3), (float32x2_t)vdup_laneq_s32(*(int32x4_t *)_X11, 2), *(float32x4_t *)(_X11 - 32), 3)));
      v20.i32[0] = vsub_f32(*(float32x2_t *)v23.f32, (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)_X11, *(int8x16_t *)_X11, 8uLL)).u32[0];
      *(_DWORD *)(_X11 + 8) = v23.i32[0];
      int8x16_t v24 = (int8x16_t)vmlaq_n_f32(*a6, v19, v20.f32[0]);
      v24.i64[1] = vextq_s8(v24, v24, 8uLL).u32[0];
      *a6 = (float32x4_t)v24;
      int8x16_t v25 = (int8x16_t)vmlaq_n_f32(*a8, v21, v20.f32[0]);
      v25.i64[1] = vextq_s8(v25, v25, 8uLL).u32[0];
      *a8 = (float32x4_t)v25;
      int8x16_t v26 = (int8x16_t)vmlaq_n_f32(*a7, v18, v20.f32[0]);
      v26.i64[1] = vextq_s8(v26, v26, 8uLL).u32[0];
      *a7 = (float32x4_t)v26;
      int8x16_t v27 = (int8x16_t)vmlaq_n_f32(*a9, v22, v20.f32[0]);
      v27.i64[1] = vextq_s8(v27, v27, 8uLL).u32[0];
      *a9 = (float32x4_t)v27;
      int8x16_t v28 = (int8x16_t)vmlaq_n_f32(*a2, *(float32x4_t *)(_X11 + 16), v20.f32[0]);
      v28.i64[1] = vextq_s8(v28, v28, 8uLL).u32[0];
      *a2 = (float32x4_t)v28;
      int8x16_t v29 = (int8x16_t)vmlaq_n_f32(*a4, *(float32x4_t *)(_X11 + 32), v20.f32[0]);
      v29.i64[1] = vextq_s8(v29, v29, 8uLL).u32[0];
      *a4 = (float32x4_t)v29;
      int8x16_t v30 = (int8x16_t)vmlaq_n_f32(*a3, *(float32x4_t *)(_X11 + 48), v20.f32[0]);
      v30.i64[1] = vextq_s8(v30, v30, 8uLL).u32[0];
      *a3 = (float32x4_t)v30;
      float32x4_t v11 = vmlaq_n_f32(*a5, *(float32x4_t *)(_X11 + 64), v20.f32[0]);
      v11.i64[1] = vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u32[0];
      *a5 = v11;
      ++v10;
      _X11 += 160;
    }
    while (v10 < *(unsigned __int8 *)(v9 + 1));
  }
  float32x4_t v31 = vmulq_n_f32(*a6, *(float *)(v9 + 32));
  v31.i32[3] = 0;
  *a6 = v31;
  float32x4_t v32 = vmulq_n_f32(*a7, *(float *)(v9 + 40));
  v32.i32[3] = 0;
  *a7 = v32;
  float32x4_t v33 = vmulq_n_f32(*a8, *(float *)(v9 + 36));
  v33.i32[3] = 0;
  *a8 = v33;
  float32x4_t result = vmulq_n_f32(*a9, *(float *)(v9 + 44));
  result.i32[3] = 0;
  *a9 = result;
  return result;
}

float physx::Dy::solveExt1D(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(_DWORD **)a1;
  if (v4 == *(_DWORD **)(a1 + 8))
  {
    (*(void (**)(_DWORD *, void, void, float32x4_t *, float32x4_t *))(*(void *)v4 + 304))(v4, *(unsigned __int16 *)(a1 + 16), *(unsigned __int16 *)(a1 + 18), &v25, v24);
    float32x4_t v29 = v26;
    float32x4_t v30 = v25;
    float32x4_t v7 = v24[0];
    float32x4_t v8 = v24[1];
LABEL_8:
    float32x4_t v27 = v8;
    float32x4_t v28 = v7;
    goto LABEL_10;
  }
  if (*(unsigned __int16 *)(a1 + 16) == 0xFFFF)
  {
    v5.i64[0] = *(void *)v4;
    v5.i64[1] = v4[2];
    v6.i64[0] = *((void *)v4 + 2);
    v6.i64[1] = v4[6];
  }
  else
  {
    (*(void (**)(float32x4_t *__return_ptr))(*(void *)v4 + 312))(&v25);
    float32x4_t v5 = v25;
    float32x4_t v6 = v26;
  }
  float32x4_t v29 = v6;
  float32x4_t v30 = v5;
  if (*(unsigned __int16 *)(a1 + 18) != 0xFFFF)
  {
    (*(void (**)(float32x4_t *__return_ptr))(**(void **)(a1 + 8) + 312))(&v25);
    float32x4_t v7 = v25;
    float32x4_t v8 = v26;
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(a1 + 8);
  v10.i64[0] = *(void *)v9;
  v10.i64[1] = *(unsigned int *)(v9 + 8);
  float32x4_t v28 = v10;
  v10.i64[0] = *(void *)(v9 + 16);
  v10.i64[1] = *(unsigned int *)(v9 + 24);
  float32x4_t v27 = v10;
LABEL_10:
  float32x4_t v25 = 0u;
  __n128 v23 = 0u;
  v24[0] = 0u;
  __n128 v22 = 0u;
  float32x4_t v11 = physx::Dy::solveExt1D(a1, &v30, &v28, &v29, &v27, &v25, v24, (float32x4_t *)&v23, (float32x4_t *)&v22);
  uint64_t v12 = *(_DWORD **)a1;
  uint64_t v13 = *(unsigned __int16 *)(a1 + 16);
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    (*(void (**)(_DWORD *, uint64_t, float32x4_t *, __n128 *, void, float32x4_t *, __n128 *, void, float32x4_t, void))(*(void *)v12 + 264))(v12, v13, &v25, &v23, *(unsigned __int16 *)(a1 + 18), v24, &v22, *(void *)(a2 + 56), v11, *(void *)(a2 + 64));
  }
  else
  {
    if (v13 == 0xFFFF)
    {
      __int32 v15 = v30.i32[2];
      *(void *)uint64_t v12 = v30.i64[0];
      _DWORD v12[2] = v15;
      float v16 = *(_DWORD **)a1;
      __int32 v17 = v29.i32[2];
      *((void *)v16 + 2) = v29.i64[0];
      v16[6] = v17;
    }
    else
    {
      (*(void (**)(_DWORD *, uint64_t, void, void, float32x4_t, __n128))(*(void *)v12 + 256))(v12, v13, *(void *)(a2 + 56), *(void *)(a2 + 64), v25, v23);
    }
    uint64_t v18 = *(unsigned __int16 *)(a1 + 18);
    if (v18 == 0xFFFF)
    {
      uint64_t v19 = *(void *)(a1 + 8);
      __int32 v20 = v28.i32[2];
      *(void *)uint64_t v19 = v28.i64[0];
      *(_DWORD *)(v19 + 8) = v20;
      uint64_t v21 = *(void *)(a1 + 8);
      float result = v27.f32[2];
      *(void *)(v21 + 16) = v27.i64[0];
      *(float *)(v21 + 24) = result;
    }
    else
    {
      (*(void (**)(void, uint64_t, void, void, float32x4_t, __n128))(**(void **)(a1 + 8) + 256))(*(void *)(a1 + 8), v18, *(void *)(a2 + 56), *(void *)(a2 + 64), v24[0], v22);
    }
  }
  return result;
}

float32x2_t physx::Dy::solveExtContacts(float32x4_t *a1, unsigned int a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6, float32x4_t *a7, float32x4_t *a8, double a9, double a10, double a11, double a12, float32x4_t *a13, float32x4_t *a14, float32x4_t *a15, float *a16)
{
  if (a2)
  {
    float v16 = a16;
    uint64_t v17 = a2;
    _X13 = a1 + 4;
    float32x2_t result = 0;
    __int32 v20 = a16;
    do
    {
      __asm { PRFM            #0, [X13,#0x30] }
      float32x4_t v27 = _X13[-4];
      float32x4_t v26 = _X13[-3];
      float32x2_t v28 = vld1_dup_f32(v20++);
      LODWORD(a12) = _X13[-2].i32[0];
      float32x4_t v29 = vsubq_f32(vmlaq_f32(vmulq_f32(v27, *a5), *a3, *a4), vmlaq_f32(vmulq_f32(v26, *a7), *a3, *a6));
      v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
      float32x4_t v30 = &_X13[-2].f32[1];
      float32x2_t v31 = vld1_dup_f32(v30);
      a12 = COERCE_DOUBLE(vmax_f32(vmls_lane_f32(v31, vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32), *(float32x2_t *)&a12, 0), vneg_f32(v28)));
      int8x16_t v32 = (int8x16_t)vmlaq_n_f32(*a4, _X13[-1], *(float *)&a12);
      v32.i64[1] = vextq_s8(v32, v32, 8uLL).u32[0];
      *a4 = (float32x4_t)v32;
      int8x16_t v33 = (int8x16_t)vmlaq_n_f32(*a5, *_X13, *(float *)&a12);
      v33.i64[1] = vextq_s8(v33, v33, 8uLL).u32[0];
      *a5 = (float32x4_t)v33;
      int8x16_t v34 = (int8x16_t)vmlaq_n_f32(*a6, _X13[1], *(float *)&a12);
      v34.i64[1] = vextq_s8(v34, v34, 8uLL).u32[0];
      *a6 = (float32x4_t)v34;
      int8x16_t v35 = (int8x16_t)vmlaq_n_f32(*a7, _X13[2], *(float *)&a12);
      v35.i64[1] = vextq_s8(v35, v35, 8uLL).u32[0];
      *a7 = (float32x4_t)v35;
      int8x16_t v36 = (int8x16_t)vmlaq_n_f32(*a8, *a3, *(float *)&a12);
      v36.i64[1] = vextq_s8(v36, v36, 8uLL).u32[0];
      *a8 = (float32x4_t)v36;
      int8x16_t v37 = (int8x16_t)vmlaq_n_f32(*a13, v27, *(float *)&a12);
      v37.i64[1] = vextq_s8(v37, v37, 8uLL).u32[0];
      *a13 = (float32x4_t)v37;
      int8x16_t v38 = (int8x16_t)vmlaq_n_f32(*a14, *a3, *(float *)&a12);
      v38.i64[1] = vextq_s8(v38, v38, 8uLL).u32[0];
      *a14 = (float32x4_t)v38;
      int8x16_t v39 = (int8x16_t)vmlaq_n_f32(*a15, v26, *(float *)&a12);
      v39.i64[1] = vextq_s8(v39, v39, 8uLL).u32[0];
      *a15 = (float32x4_t)v39;
      float32x2_t v40 = vadd_f32(v28, *(float32x2_t *)&a12);
      *float v16 = v40.f32[0];
      float32x2_t result = vadd_f32(result, v40);
      _X13 += 7;
      float v16 = (float *)v20;
      --v17;
    }
    while (v17);
  }
  else
  {
    return 0;
  }
  return result;
}

double physx::Dy::solveExtContact(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6, float32x4_t *a7, float32x4_t *a8, double result, __n128 a10, int8x16_t a11, int8x16_t a12, float32x4_t *a13, char a14)
{
  if (*(_WORD *)(a1 + 30))
  {
    _X27 = *(char **)(a1 + 32);
    float32x4_t v63 = &_X27[16 * *(unsigned __int16 *)(a1 + 30)];
    do
    {
      unsigned int v19 = _X27[2];
      uint64_t v20 = _X27[3];
      __asm { PRFM            #0, [X27,#0x50] }
      float32x4_t v26 = (float *)&_X27[112 * _X27[2] + 80];
      uint64_t v27 = (4 * v19 + 12) & 0x7F0;
      _X20 = (char *)v26 + v27;
      float32x4_t v71 = 0u;
      v72[0] = 0u;
      __n128 v69 = 0u;
      float32x4_t v70 = 0u;
      int32x4_t v67 = *((int32x4_t *)_X27 + 2);
      float32x4_t v29 = (float32x4_t)v67;
      v29.i32[3] = 0;
      float32x4_t v68 = v29;
      float32x2_t v30 = physx::Dy::solveExtContacts((float32x4_t *)_X27 + 5, v19, &v68, a2, a4, a3, a5, v72, *(double *)v67.i64, a10.n128_f64[0], *(double *)a11.i64, *(double *)a12.i64, &v70, &v71, (float32x4_t *)&v69, v26);
      float32x4_t v31 = v71;
      float32x4_t v32 = v72[0];
      a10 = v69;
      float32x4_t v33 = v70;
      if (a14 && v20)
      {
        float32x2_t v34 = vmax_f32(v30, (float32x2_t)vdup_laneq_s32(v67, 3));
        __asm { PRFM            #0, [X20] }
        float32x2_t v36 = *(float32x2_t *)(_X27 + 16);
        float32x2_t v37 = vmul_n_f32(v34, v36.f32[0]);
        float32x2_t v38 = vmul_lane_f32(v34, v36, 1);
        float32x2_t v39 = vneg_f32(v38);
        float32x2_t v40 = vneg_f32(v37);
        _X8 = (uint64_t)&_X27[112 * v19 + 112 + v27];
        int8x16_t v42 = 0uLL;
        uint64_t v43 = v20;
        do
        {
          __asm { PRFM            #0, [X8,#0x60] }
          float32x4_t v45 = *(float32x4_t *)(_X8 - 32);
          float32x4_t v46 = *(float32x4_t *)_X8;
          float32x4_t v47 = *(float32x4_t *)(_X8 - 16);
          v47.i32[3] = 0;
          float32x2_t v48 = (float32x2_t)vdup_laneq_s32((int32x4_t)v45, 3);
          v45.i32[3] = 0;
          v46.i32[3] = 0;
          int32x4_t v49 = (const float *)(_X8 + 16);
          float32x2_t v50 = vld1_dup_f32(v49);
          float32x4_t v51 = vsubq_f32(vmlaq_f32(vmulq_f32(v47, *a4), v45, *a2), vmlaq_f32(vmulq_f32(v46, *a5), v45, *a3));
          v51.i64[0] = vpaddq_f32(v51, v51).u64[0];
          float32x2_t v52 = vmls_laneq_f32(vmls_laneq_f32(v48, vsub_f32((float32x2_t)vdup_laneq_s32(*(int32x4_t *)_X8, 3), v50), *(float32x4_t *)(_X8 - 16), 3), vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32), *(float32x4_t *)(_X8 - 16), 3);
          int32x2_t v53 = vcgt_f32(v40, v52);
          *(int32x2_t *)v51.f32 = vcgt_f32(v52, v37);
          float32x2_t v54 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(v53, 0), (int8x8_t)vmax_f32(v39, v52), vbsl_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v51.f32, 0), (int8x8_t)vmin_f32(v38, v52), (int8x8_t)v52));
          v48.i32[0] = vsub_f32(v54, v48).u32[0];
          int8x16_t v55 = (int8x16_t)vmlaq_n_f32(*a2, *(float32x4_t *)(_X8 + 32), v48.f32[0]);
          v55.i64[1] = vextq_s8(v55, v55, 8uLL).u32[0];
          *a2 = (float32x4_t)v55;
          int8x16_t v56 = (int8x16_t)vmlaq_n_f32(*a4, *(float32x4_t *)(_X8 + 48), v48.f32[0]);
          v56.i64[1] = vextq_s8(v56, v56, 8uLL).u32[0];
          *a4 = (float32x4_t)v56;
          int8x16_t v57 = (int8x16_t)vmlaq_n_f32(*a3, *(float32x4_t *)(_X8 + 64), v48.f32[0]);
          v57.i64[1] = vextq_s8(v57, v57, 8uLL).u32[0];
          *a3 = (float32x4_t)v57;
          int8x16_t v58 = (int8x16_t)vmlaq_n_f32(*a5, *(float32x4_t *)(_X8 + 80), v48.f32[0]);
          int8x16_t v42 = vorrq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)vorr_s8((int8x8_t)v53, *(int8x8_t *)v51.f32), 0), v42);
          v58.i64[1] = vextq_s8(v58, v58, 8uLL).u32[0];
          *a5 = (float32x4_t)v58;
          float32x4_t v32 = vmlaq_n_f32(v32, v45, v48.f32[0]);
          v32.i64[1] = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u32[0];
          float32x4_t v33 = vmlaq_n_f32(v33, v47, v48.f32[0]);
          v33.i64[1] = vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u32[0];
          float32x4_t v31 = vmlaq_n_f32(v31, v45, v48.f32[0]);
          v31.i64[1] = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u32[0];
          a10 = (__n128)vmlaq_n_f32((float32x4_t)a10, v46, v48.f32[0]);
          a10.n128_u64[1] = vextq_s8((int8x16_t)a10, (int8x16_t)a10, 8uLL).u32[0];
          long long v59 = *(_OWORD *)(_X8 - 32);
          HIDWORD(v59) = v54.i32[1];
          *(_OWORD *)(_X8 - 32) = v59;
          _X8 += 128;
          --v43;
        }
        while (v43);
        *((_DWORD *)_X27 + 13) = v42.i32[0];
      }
      int8x16_t v60 = (int8x16_t)vmlaq_laneq_f32(*a6, v32, *((float32x4_t *)_X27 + 1), 2);
      v60.i64[1] = vextq_s8(v60, v60, 8uLL).u32[0];
      *a6 = (float32x4_t)v60;
      int8x16_t v61 = (int8x16_t)vmlaq_n_f32(*a8, v33, *((float *)_X27 + 1));
      v61.i64[1] = vextq_s8(v61, v61, 8uLL).u32[0];
      *a8 = (float32x4_t)v61;
      a12 = (int8x16_t)vmlsq_laneq_f32(*a7, v31, *((float32x4_t *)_X27 + 1), 3);
      float32x2_t v62 = (float32x2_t)vextq_s8(a12, a12, 8uLL).u32[0];
      a12.i64[1] = v62.u32[0];
      *a7 = (float32x4_t)a12;
      v62.i32[0] = *((_DWORD *)_X27 + 2);
      a11 = (int8x16_t)vmlsq_lane_f32(*a13, (float32x4_t)a10, v62, 0);
      *(void *)&float32x2_t result = vextq_s8(a11, a11, 8uLL).u32[0];
      a11.i64[1] = LODWORD(result);
      *a13 = (float32x4_t)a11;
      _X27 = &_X20[128 * v20];
    }
    while (_X27 < v63);
  }
  return result;
}

float physx::Dy::solveExtContact(uint64_t a1, uint64_t a2, double a3, double a4, int8x16_t a5, int8x16_t a6)
{
  float32x4_t v8 = *(_DWORD **)a1;
  if (v8 == *(_DWORD **)(a1 + 8))
  {
    (*(void (**)(_DWORD *, void, void, float32x4_t *, float32x4_t *))(*(void *)v8 + 304))(v8, *(unsigned __int16 *)(a1 + 16), *(unsigned __int16 *)(a1 + 18), &v28, v27);
    float32x4_t v32 = v29;
    float32x4_t v33 = v28;
    float32x4_t v11 = v27[0];
    __n128 v10 = (__n128)v27[1];
LABEL_8:
    float32x4_t v30 = (float32x4_t)v10;
    float32x4_t v31 = v11;
    goto LABEL_10;
  }
  if (*(unsigned __int16 *)(a1 + 16) == 0xFFFF)
  {
    v9.i64[0] = *(void *)v8;
    v9.i64[1] = v8[2];
    v10.n128_u64[0] = *((void *)v8 + 2);
    v10.n128_u64[1] = v8[6];
  }
  else
  {
    (*(void (**)(float32x4_t *__return_ptr))(*(void *)v8 + 312))(&v28);
    float32x4_t v9 = v28;
    __n128 v10 = (__n128)v29;
  }
  float32x4_t v32 = (float32x4_t)v10;
  float32x4_t v33 = v9;
  if (*(unsigned __int16 *)(a1 + 18) != 0xFFFF)
  {
    (*(void (**)(float32x4_t *__return_ptr))(**(void **)(a1 + 8) + 312))(&v28);
    float32x4_t v11 = v28;
    __n128 v10 = (__n128)v29;
    goto LABEL_8;
  }
  uint64_t v12 = *(void *)(a1 + 8);
  v13.i64[0] = *(void *)v12;
  v13.i64[1] = *(unsigned int *)(v12 + 8);
  float32x4_t v31 = v13;
  v13.i64[0] = *(void *)(v12 + 16);
  v13.i64[1] = *(unsigned int *)(v12 + 24);
  float32x4_t v30 = v13;
LABEL_10:
  float32x4_t v28 = 0u;
  __n128 v26 = 0u;
  v27[0] = 0u;
  __n128 v25 = 0u;
  double v14 = physx::Dy::solveExtContact(a1, &v33, &v31, &v32, &v30, &v28, v27, (float32x4_t *)&v26, 0.0, v10, a5, a6, (float32x4_t *)&v25, *(unsigned char *)a2);
  __int32 v15 = *(_DWORD **)a1;
  uint64_t v16 = *(unsigned __int16 *)(a1 + 16);
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    (*(void (**)(_DWORD *, uint64_t, float32x4_t *, __n128 *, void, float32x4_t *, __n128 *, void, double, void))(*(void *)v15 + 264))(v15, v16, &v28, &v26, *(unsigned __int16 *)(a1 + 18), v27, &v25, *(void *)(a2 + 56), v14, *(void *)(a2 + 64));
  }
  else
  {
    if (v16 == 0xFFFF)
    {
      __int32 v18 = v33.i32[2];
      *(void *)__int32 v15 = v33.i64[0];
      v15[2] = v18;
      unsigned int v19 = *(_DWORD **)a1;
      __int32 v20 = v32.i32[2];
      *((void *)v19 + 2) = v32.i64[0];
      v19[6] = v20;
    }
    else
    {
      (*(void (**)(_DWORD *, uint64_t, void, void, float32x4_t, __n128))(*(void *)v15 + 256))(v15, v16, *(void *)(a2 + 56), *(void *)(a2 + 64), v28, v26);
    }
    uint64_t v21 = *(unsigned __int16 *)(a1 + 18);
    if (v21 == 0xFFFF)
    {
      uint64_t v22 = *(void *)(a1 + 8);
      __int32 v23 = v31.i32[2];
      *(void *)uint64_t v22 = v31.i64[0];
      *(_DWORD *)(v22 + 8) = v23;
      uint64_t v24 = *(void *)(a1 + 8);
      float result = v30.f32[2];
      *(void *)(v24 + 16) = v30.i64[0];
      *(float *)(v24 + 24) = result;
    }
    else
    {
      (*(void (**)(void, uint64_t, void, void, float32x4_t, __n128))(**(void **)(a1 + 8) + 256))(*(void *)(a1 + 8), v21, *(void *)(a2 + 56), *(void *)(a2 + 64), v27[0], v25);
    }
  }
  return result;
}

void physx::Dy::solveExtContactBlock(uint64_t a1, unsigned int a2, uint64_t a3, double a4, double a5, int8x16_t a6, int8x16_t a7)
{
  if (a2)
  {
    uint64_t v9 = a2;
    do
    {
      *(float *)&a4 = physx::Dy::solveExtContact(a1, a3, a4, a5, a6, a7);
      a1 += 48;
      --v9;
    }
    while (v9);
  }
}

uint64_t physx::Dy::solveExtContactConcludeBlock(uint64_t result, unsigned int a2, uint64_t a3, double a4, double a5, int8x16_t a6, int8x16_t a7)
{
  if (a2)
  {
    uint64_t v8 = result;
    uint64_t v9 = a2;
    do
    {
      physx::Dy::solveExtContact(v8, a3, a4, a5, a6, a7);
      float result = physx::Dy::concludeContact(v8);
      v8 += 48;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t physx::Dy::solveExtContactBlockWriteBack(uint64_t result, unsigned int a2, uint64_t a3, double a4, double a5, int8x16_t a6, int8x16_t a7)
{
  if (a2)
  {
    uint64_t v8 = result;
    uint64_t v9 = a2;
    do
    {
      if (*(__int16 *)(v8 + 16) == -1) {
        unsigned int v10 = *(_DWORD *)(v8 + 20);
      }
      else {
        unsigned int v10 = 0;
      }
      if (*(__int16 *)(v8 + 18) == -1) {
        unsigned int v11 = *(_DWORD *)(v8 + 24);
      }
      else {
        unsigned int v11 = 0;
      }
      uint64_t v12 = *(void *)(a3 + 24);
      uint64_t v13 = v12 + 112 * v10;
      uint64_t v14 = v12 + 112 * v11;
      physx::Dy::solveExtContact(v8, a3, a4, a5, a6, a7);
      float result = physx::Dy::writeBackContact(v8, a3, v13, v14);
      v8 += 48;
      --v9;
    }
    while (v9);
  }
  unsigned int v15 = *(_DWORD *)(a3 + 16);
  if (v15)
  {
    unsigned int add = atomic_fetch_add(*(atomic_uint *volatile *)(a3 + 48), v15);
    int v17 = *(_DWORD *)(a3 + 16);
    if (v17)
    {
      uint64_t v18 = 0;
      unint64_t v19 = 0;
      int v20 = add + v15 - v17;
      do
      {
        uint64_t v21 = (_OWORD *)(*(void *)(a3 + 8) + v18);
        uint64_t v22 = (_OWORD *)(*(void *)(a3 + 32) + 32 * (v20 + v19));
        long long v23 = v21[1];
        *uint64_t v22 = *v21;
        v22[1] = v23;
        ++v19;
        v18 += 32;
      }
      while (v19 < *(unsigned int *)(a3 + 16));
    }
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

void physx::Dy::solveExt1DBlock(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v5 = a2;
    do
    {
      physx::Dy::solveExt1D(a1, a3);
      a1 += 48;
      --v5;
    }
    while (v5);
  }
}

void physx::Dy::solveExt1DConcludeBlock(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a2;
    do
    {
      physx::Dy::solveExt1D(a1 + 48 * v5, a3);
      float32x4_t v7 = *(unsigned __int8 **)(a1 + 48 * v5 + 32);
      if (v7)
      {
        int v8 = v7[1];
        if (v7[1])
        {
          int v10 = *v7;
          uint64_t v9 = v7 + 76;
          if (v10 == 4) {
            uint64_t v11 = 160;
          }
          else {
            uint64_t v11 = 96;
          }
          do
          {
            *(v9 - 4) = *v9;
            uint64_t v9 = (_DWORD *)((char *)v9 + v11);
            --v8;
          }
          while (v8);
        }
      }
      ++v5;
    }
    while (v5 != v6);
  }
}

uint64_t physx::Dy::solveExt1DBlockWriteBack(uint64_t result, unsigned int a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = result;
    uint64_t v5 = a2;
    do
    {
      physx::Dy::solveExt1D(v4, a3);
      float result = physx::Dy::writeBack1D(v4);
      v4 += 48;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t physx::Dy::writeBackContact4_Block(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, double a5, __n128 a6)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(unsigned __int16 *)(result + 30);
  unint64_t v8 = *(void *)(result + 32);
  float32x4_t v7 = *(_DWORD **)(result + 40);
  uint64_t v9 = *(_DWORD **)(result + 88);
  int v10 = *(_DWORD **)(result + 136);
  uint64_t v11 = *(_DWORD **)(result + 184);
  if (*(unsigned char *)v8 == 7) {
    int v12 = 144;
  }
  else {
    int v12 = 96;
  }
  unsigned __int32 v41 = 0;
  float32x4_t v13 = 0uLL;
  if (v6)
  {
    unint64_t v14 = v8 + 16 * v6;
    do
    {
      unint64_t v15 = v8 + 208;
      uint64_t v16 = *(unsigned __int8 *)(v8 + 1);
      uint64_t v17 = *(unsigned __int8 *)(v8 + 2);
      uint64_t v18 = 16 * v16;
      if (*(unsigned char *)(v8 + 3)) {
        uint64_t v19 = 16 * v16;
      }
      else {
        uint64_t v19 = 0;
      }
      if (*(unsigned char *)(v8 + 2)) {
        uint64_t v20 = 9;
      }
      else {
        uint64_t v20 = 0;
      }
      a6.n128_u32[0] = *(_DWORD *)(v8 + 4);
      a6 = (__n128)vmovl_u8((uint8x8_t)a6.n128_u64[0]);
      a6.n128_u32[0] &= 0xFF01FF01;
      a6.n128_u16[2] &= 0xFF01u;
      a6.n128_u16[3] &= 0xFF01u;
      a6.n128_u64[0] = (unint64_t)vmovn_s16((int16x8_t)a6);
      unsigned __int32 v41 = a6.n128_u32[0];
      if (v16)
      {
        for (unint64_t i = 0; i != v16; ++i)
        {
          a6 = *(__n128 *)(v15 + 16 * i);
          if (v7 && i < *(unsigned __int8 *)(v8 + 8)) {
            *v7++ = a6.n128_u32[0];
          }
          if (v9 && i < *(unsigned __int8 *)(v8 + 9)) {
            *v9++ = a6.n128_u32[1];
          }
          if (v10 && i < *(unsigned __int8 *)(v8 + 10)) {
            *v10++ = a6.n128_u32[2];
          }
          if (v11 && i < *(unsigned __int8 *)(v8 + 11)) {
            *v11++ = a6.n128_u32[3];
          }
          float32x4_t v13 = vaddq_f32(v13, (float32x4_t)a6);
        }
      }
      uint64_t v22 = (v12 * v16);
      long long v23 = (__n128 *)(v15 + 16 * v16 + v19 + v22);
      if (v17)
      {
        uint64_t v24 = 0;
        a6 = *v23;
        __n128 v42 = *v23;
        unint64_t v25 = v8 + 12;
        uint64_t v26 = v8 + v19 + v18 + v22 + 224;
        do
        {
          if (*(unsigned char *)(v25 + v24) && v42.n128_u32[v24]) {
            **(unsigned char **)(v26 + 8 * v24) = 1;
          }
          ++v24;
        }
        while (v24 != 4);
      }
      unint64_t v8 = (unint64_t)v23[v20 + v17].n128_u64 + (v12 * v17);
    }
    while (v8 < v14);
    unint64_t v8 = *(void *)(result + 32);
  }
  uint64_t v27 = 0;
  unint64_t v28 = v8 + 176;
  __n128 v42 = (__n128)v13;
  float32x4_t v29 = (__int16 *)(result + 18);
  do
  {
    if (*((unsigned char *)&v41 + v27))
    {
      if (*(v29 - 1) == -1 && *v29 == -1)
      {
        float v30 = v42.n128_f32[v27];
        if (v30 != 0.0)
        {
          uint64_t v31 = *(void *)(a3 + 8 * v27);
          float v32 = *(float *)(v31 + 28);
          uint64_t v33 = *(void *)(a4 + 8 * v27);
          float v34 = *(float *)(v33 + 28);
          if (v32 < 3.4028e38 || v34 < 3.4028e38)
          {
            if (v32 >= v34) {
              float v32 = *(float *)(v33 + 28);
            }
            unsigned int v36 = *(_DWORD *)(v31 + 72) << 7;
            unsigned int v37 = *(_DWORD *)(v33 + 72) << 7;
            uint64_t v38 = *(void *)(v28 + 8 * v27);
            uint64_t v39 = *(unsigned int *)(a2 + 16);
            *(_DWORD *)(a2 + 16) = v39 + 1;
            float result = *(void *)(a2 + 8) + 32 * v39;
            *(void *)float result = v38;
            if (v37 >= v36) {
              unsigned int v40 = v36;
            }
            else {
              unsigned int v40 = v37;
            }
            if (v37 <= v36) {
              unsigned int v37 = v36;
            }
            *(float *)(result + 8) = v30;
            *(float *)(result + 12) = v32;
            *(_DWORD *)(result + 16) = v40;
            *(_DWORD *)(result + 20) = v37;
          }
        }
      }
    }
    ++v27;
    v29 += 24;
  }
  while (v27 != 4);
  return result;
}

int32x4_t **physx::Dy::solveContactPreBlock(int32x4_t **a1, uint64_t a2, unsigned char *a3)
{
  return physx::Dy::solveContact4_Block(a1, a3);
}

int32x4_t **physx::Dy::solveContact4_Block(int32x4_t **result, unsigned char *a2)
{
  int v3 = (float *)*result;
  uint64_t v2 = result[1];
  uint64_t v5 = result[6];
  uint64_t v4 = result[7];
  float32x4_t v7 = result[12];
  uint64_t v6 = result[13];
  int32x4_t v8 = **result;
  int32x4_t v9 = vzip1q_s32(v8, *v7);
  int32x4_t v10 = vzip2q_s32(v8, *v7);
  int v12 = result[18];
  uint64_t v11 = result[19];
  int32x4_t v13 = v5[1];
  int32x4_t v14 = v12[1];
  int32x4_t v15 = vzip1q_s32(*v5, *v12);
  int32x4_t v16 = vzip2q_s32(*v5, *v12);
  float32x4_t v17 = (float32x4_t)vzip1q_s32(v9, v15);
  float32x4_t v18 = (float32x4_t)vzip2q_s32(v9, v15);
  uint64_t v19 = *result + 1;
  int32x4_t v21 = v2[1];
  int32x4_t v22 = v4[1];
  int32x4_t v23 = *v6;
  int32x4_t v25 = v7[1];
  float v152 = (float *)v6;
  int32x4_t v27 = v6[1];
  i32 = (float *)v6[1].i32;
  int32x4_t v28 = v11[1];
  float32x4_t v29 = (float32x4_t)vzip1q_s32(v10, v16);
  int32x4_t v154 = vzip2q_s32(v10, v16);
  int32x4_t v30 = vzip1q_s32(*v2, v23);
  int32x4_t v31 = vzip2q_s32(*v2, v23);
  int32x4_t v32 = vzip1q_s32(*v4, *v11);
  int32x4_t v33 = vzip2q_s32(*v4, *v11);
  float32x4_t v34 = (float32x4_t)vzip1q_s32(v30, v32);
  float32x4_t v35 = (float32x4_t)vzip2q_s32(v30, v32);
  float32x4_t v36 = (float32x4_t)vzip1q_s32(v31, v33);
  int32x4_t v156 = vzip2q_s32(v31, v33);
  int32x4_t v37 = vzip1q_s32(*v19, v25);
  int32x4_t v38 = vzip2q_s32(*v19, v25);
  int32x4_t v39 = vzip1q_s32(v13, v14);
  int32x4_t v40 = vzip2q_s32(v13, v14);
  float32x4_t v41 = (float32x4_t)vzip1q_s32(v37, v39);
  float32x4_t v42 = (float32x4_t)vzip2q_s32(v37, v39);
  float32x4_t v43 = (float32x4_t)vzip1q_s32(v38, v40);
  int32x4_t v153 = vzip2q_s32(v38, v40);
  int32x4_t v44 = vzip1q_s32(v21, v27);
  int32x4_t v45 = vzip2q_s32(v21, v27);
  int32x4_t v46 = vzip1q_s32(v22, v28);
  int32x4_t v47 = vzip2q_s32(v22, v28);
  float32x4_t v48 = (float32x4_t)vzip1q_s32(v44, v46);
  float32x4_t v49 = (float32x4_t)vzip2q_s32(v44, v46);
  float32x4_t v50 = (float32x4_t)vzip1q_s32(v45, v47);
  int32x4_t v155 = vzip2q_s32(v45, v47);
  float32x4_t v51 = (float32x4_t *)result[4];
  uint64_t v52 = *((unsigned __int16 *)result + 15);
  int32x4_t v160 = vdupq_n_s32(0x7F7FFFFFu);
  if (v52)
  {
    int32x2_t v53 = &v51[v52];
    float32x4_t v54 = v51[4];
    float32x4_t v55 = vaddq_f32(v54, v51[5]);
    _X8 = v51 + 22;
    float32x4_t v157 = v55;
    float32x4_t v158 = v51[5];
    do
    {
      int8x16_t v57 = v51 + 13;
      uint64_t v58 = v51->u8[1];
      uint64_t v59 = v51->u8[2];
      __int8 v60 = v51->i8[3];
      if (v60) {
        int8x16_t v61 = (int32x4_t *)&v51[9 * v51->u8[1] + 13 + v51->u8[1]];
      }
      else {
        int8x16_t v61 = &v160;
      }
      if (v51->i8[3]) {
        uint64_t v62 = v58;
      }
      else {
        uint64_t v62 = 0;
      }
      if (v51->i8[2]) {
        uint64_t v63 = 9;
      }
      else {
        uint64_t v63 = 0;
      }
      float32x4_t v64 = v51[6];
      float32x4_t v65 = v51[7];
      float32x4_t v66 = v51[8];
      float32x4_t v159 = v51[10];
      if (v51->i8[1])
      {
        float32x4_t v67 = v54;
        uint64_t v68 = 0;
        float32x4_t v69 = v51[9];
        float32x4_t v70 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v17, v66), v69, v18), v51[10], v29), vmlaq_f32(vmlaq_f32(vmulq_f32(v34, v66), v69, v35), v51[10], v36));
        float32x4_t v71 = &v51[v58 + 21];
        float32x4_t v72 = 0uLL;
        _X19 = _X8;
        float32x4_t v74 = 0uLL;
        do
        {
          __asm
          {
            PRFM            #0, [X19,#0x40]
            PRFM            #0, [X19,#0x80]
          }
          _X8 = _X19 + 12;
          __asm { PRFM            #0, [X19,#0xC0] }
          float32x4_t v82 = v57[v68];
          if (v60) {
            uint64_t v83 = v68;
          }
          else {
            uint64_t v83 = 0;
          }
          float32x4_t v84 = v71[-8];
          float32x4_t v85 = v71[-7];
          float32x4_t v86 = v71[-2];
          float32x4_t v87 = v71[-1];
          float32x4_t v88 = *v71;
          float32x4_t v89 = v71[-6];
          float32x4_t v90 = vminq_f32(vaddq_f32(v82, vmaxq_f32(vmlsq_f32(v71[-3], v71[-5], vaddq_f32(v70, vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v41, v84), v42, v85), v43, v89), vmlaq_f32(vmlaq_f32(vmulq_f32(v48, v86), v49, v87), v50, *v71)))), vnegq_f32(v82))), (float32x4_t)v61[v83]);
          float32x4_t v91 = vsubq_f32(v90, v82);
          float32x4_t v74 = vaddq_f32(v74, v91);
          float32x4_t v92 = vmulq_f32(v64, v91);
          float32x4_t v93 = vmulq_f32(v65, v91);
          float32x4_t v70 = vmlaq_f32(v70, v91, v55);
          float32x4_t v41 = vmlaq_f32(v41, v92, v84);
          float32x4_t v48 = vmlsq_f32(v48, v93, v86);
          float32x4_t v42 = vmlaq_f32(v42, v92, v85);
          float32x4_t v49 = vmlsq_f32(v49, v93, v87);
          float32x4_t v43 = vmlaq_f32(v43, v92, v89);
          v57[v68] = v90;
          float32x4_t v50 = vmlsq_f32(v50, v93, v88);
          float32x4_t v72 = vaddq_f32(v72, v90);
          ++v68;
          v71 += 9;
          _X19 = _X8;
        }
        while (v58 != v68);
      }
      else
      {
        float32x4_t v69 = v51[9];
        float32x4_t v67 = v54;
        float32x4_t v74 = 0uLL;
        float32x4_t v72 = 0uLL;
      }
      float v94 = (int8x16_t *)&v51[9 * v58 + 13 + v58 + v62];
      float v95 = (float32x4_t *)&v94[v63];
      float v96 = &v95[v59];
      float32x4_t v54 = v67;
      float32x4_t v97 = vmulq_f32(v67, v74);
      float32x4_t v98 = vmulq_f32(v158, v74);
      float32x4_t v17 = vmlaq_f32(v17, v97, v66);
      float32x4_t v34 = vmlsq_f32(v34, v98, v66);
      float32x4_t v18 = vmlaq_f32(v18, v97, v69);
      float32x4_t v35 = vmlsq_f32(v35, v98, v69);
      float32x4_t v29 = vmlaq_f32(v29, v97, v159);
      float32x4_t v36 = vmlsq_f32(v36, v98, v159);
      if (v59 && *a2)
      {
        float32x4_t v99 = v51[2];
        float32x4_t v100 = v51[3];
        if (a2[1])
        {
          _X19 = v94[1].i64[0];
          __asm { PRFM            #0, [X19] }
          _X19 = v94[1].i64[1];
          __asm { PRFM            #0, [X19] }
          _X19 = v94[2].i64[0];
          __asm { PRFM            #0, [X19] }
        }
        uint64_t v107 = 0;
        float32x4_t v108 = vmulq_f32(v72, v99);
        float32x4_t v109 = vmulq_f32(v72, v100);
        float32x4_t v110 = vnegq_f32(v109);
        int8x16_t v111 = 0uLL;
        int v112 = &v95[v59];
        do
        {
          float v113 = _X8;
          __asm
          {
            PRFM            #0, [X8,#0x40]
            PRFM            #0, [X8,#0x80]
            PRFM            #0, [X8,#0xC0]
            PRFM            #0, [X8,#0x100]
          }
          float v118 = (float32x4_t *)&v94[v107 & 1];
          float32x4_t v119 = v118[3];
          float32x4_t v120 = v118[5];
          float32x4_t v121 = v118[7];
          float32x4_t v122 = v112[1];
          float32x4_t v123 = v112[6];
          float32x4_t v124 = v112[7];
          float32x4_t v125 = v112[2];
          float32x4_t v126 = v112[8];
          float32x4_t v127 = vmlsq_f32(vsubq_f32(*v95, v112[3]), v112[4], vsubq_f32(vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v17, v119), v120, v18), v121, v29), vmlaq_f32(vmlaq_f32(vmulq_f32(v41, *v112), v42, v122), v43, v125)), vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v34, v119), v120, v35), v121, v36), vmlaq_f32(vmlaq_f32(vmulq_f32(v48, v123), v49, v124), v50, v126))));
          int8x16_t v111 = vorrq_s8(v111, (int8x16_t)vcgtq_f32(vabsq_f32(v127), v108));
          float32x4_t v128 = (float32x4_t)vbslq_s8(v111, (int8x16_t)vminq_f32(v109, vmaxq_f32(v110, v127)), (int8x16_t)v127);
          float32x4_t v129 = vsubq_f32(v128, *v95);
          *v95++ = v128;
          float32x4_t v130 = vmulq_f32(v67, v129);
          float32x4_t v131 = vmulq_f32(v158, v129);
          float32x4_t v17 = vmlaq_f32(v17, v130, v119);
          float32x4_t v34 = vmlsq_f32(v34, v131, v119);
          float32x4_t v18 = vmlaq_f32(v18, v130, v120);
          float32x4_t v35 = vmlsq_f32(v35, v131, v120);
          float32x4_t v29 = vmlaq_f32(v29, v130, v121);
          float32x4_t v36 = vmlsq_f32(v36, v131, v121);
          float32x4_t v132 = vmulq_f32(v64, v129);
          float32x4_t v133 = *v112;
          v112 += 9;
          float32x4_t v41 = vmlaq_f32(v41, v132, v133);
          float32x4_t v42 = vmlaq_f32(v42, v132, v122);
          float32x4_t v43 = vmlaq_f32(v43, v132, v125);
          float32x4_t v134 = vmulq_f32(v65, v129);
          float32x4_t v48 = vmlsq_f32(v48, v134, v123);
          float32x4_t v49 = vmlsq_f32(v49, v134, v124);
          float32x4_t v50 = vmlsq_f32(v50, v134, v126);
          _X8 = v113 + 16;
          ++v107;
        }
        while (v59 != v107);
        *float v94 = v111;
        float32x4_t v54 = v67;
        float32x4_t v55 = v157;
      }
      float32x4_t v51 = &v96[9 * v59];
    }
    while (v51 < v53);
  }
  float32x2x2_t v135 = (float32x2x2_t)vzip1q_s32((int32x4_t)v17, (int32x4_t)v29);
  float32x2x2_t v136 = (float32x2x2_t)vzip2q_s32((int32x4_t)v17, (int32x4_t)v29);
  int32x4_t v137 = vzip1q_s32((int32x4_t)v18, v154);
  int32x4_t v138 = vzip2q_s32((int32x4_t)v18, v154);
  float32x2x2_t v139 = (float32x2x2_t)vzip1q_s32((int32x4_t)v34, (int32x4_t)v36);
  int32x4_t v140 = vzip1q_s32((int32x4_t)v35, v156);
  float32x2x2_t v141 = (float32x2x2_t)vzip1q_s32((int32x4_t)v41, (int32x4_t)v43);
  float32x2x2_t v142 = (float32x2x2_t)vzip2q_s32((int32x4_t)v41, (int32x4_t)v43);
  int32x4_t v143 = vzip1q_s32((int32x4_t)v42, v153);
  int32x4_t v144 = vzip2q_s32((int32x4_t)v42, v153);
  vst2_f32(v3, v135);
  vst2_f32((float *)v19->i32, v141);
  *uint64_t v5 = vzip2q_s32((int32x4_t)v135, v137);
  v5[1] = vzip2q_s32((int32x4_t)v141, v143);
  vst2_f32((float *)v7->i32, v136);
  uint64_t v24 = (float *)v7[1].i32;
  vst2_f32(v24, v142);
  int32x4_t *v12 = vzip2q_s32((int32x4_t)v136, v138);
  v12[1] = vzip2q_s32((int32x4_t)v142, v144);
  float32x2x2_t v145 = (float32x2x2_t)vzip1q_s32((int32x4_t)v48, (int32x4_t)v50);
  int32x4_t v146 = vzip1q_s32((int32x4_t)v49, v155);
  if (*((_DWORD *)result + 6))
  {
    vst2_f32((float *)v2->i32, v139);
    uint64_t v20 = (float *)v2[1].i32;
    vst2_f32(v20, v145);
  }
  if (*((_DWORD *)result + 18))
  {
    *uint64_t v4 = vzip2q_s32((int32x4_t)v139, v140);
    v4[1] = vzip2q_s32((int32x4_t)v145, v146);
  }
  float32x2x2_t v147 = (float32x2x2_t)vzip2q_s32((int32x4_t)v34, (int32x4_t)v36);
  int32x4_t v148 = vzip2q_s32((int32x4_t)v35, v156);
  float32x2x2_t v149 = (float32x2x2_t)vzip2q_s32((int32x4_t)v48, (int32x4_t)v50);
  int32x4_t v150 = vzip2q_s32((int32x4_t)v49, v155);
  if (*((_DWORD *)result + 30))
  {
    float v151 = v152;
    vst2_f32(v151, v147);
    vst2_f32(i32, v149);
  }
  if (*((_DWORD *)result + 42))
  {
    int32x4_t *v11 = vzip2q_s32((int32x4_t)v147, v148);
    v11[1] = vzip2q_s32((int32x4_t)v149, v150);
  }
  return result;
}

double physx::Dy::solveContactPreBlock_Static(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  *(void *)&double result = physx::Dy::solveContact4_StaticBlock(a1, a3).u64[0];
  return result;
}

int32x4_t physx::Dy::solveContact4_StaticBlock(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = *(int32x4_t **)a1;
  int v3 = *(int32x4_t **)(a1 + 48);
  uint64_t v4 = *(int32x4_t **)(a1 + 96);
  uint64_t v5 = *(int32x4_t **)(a1 + 144);
  unint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(unsigned __int16 *)(a1 + 30);
  int32x4_t v109 = vdupq_n_s32(0x7F7FFFFFu);
  int32x4_t v9 = v2[1];
  int32x4_t v10 = v3[1];
  int32x4_t v12 = v4[1];
  int32x4_t v13 = vzip1q_s32(*v2, *v4);
  int32x4_t v14 = vzip2q_s32(*v2, *v4);
  int32x4_t v15 = v5[1];
  int32x4_t v16 = vzip1q_s32(*v3, *v5);
  int32x4_t v17 = vzip2q_s32(*v3, *v5);
  float32x4_t v18 = (float32x4_t)vzip1q_s32(v13, v16);
  float32x4_t v19 = (float32x4_t)vzip2q_s32(v13, v16);
  float32x4_t v20 = (float32x4_t)vzip1q_s32(v14, v17);
  int32x4_t v21 = vzip1q_s32(v9, v12);
  int32x4_t v22 = vzip2q_s32(v9, v12);
  int32x4_t v23 = vzip1q_s32(v10, v15);
  int32x4_t v24 = vzip2q_s32(v10, v15);
  float32x4_t v25 = (float32x4_t)vzip1q_s32(v21, v23);
  float32x4_t v26 = (float32x4_t)vzip2q_s32(v21, v23);
  float32x4_t v27 = (float32x4_t)vzip1q_s32(v22, v24);
  if (v7)
  {
    float32x4_t v28 = *(float32x4_t *)(v6 + 64);
    _X2 = v6 + 304;
    unint64_t v30 = v6 + 16 * v7;
    do
    {
      unint64_t v31 = v6 + 208;
      uint64_t v32 = *(unsigned __int8 *)(v6 + 1);
      uint64_t v33 = *(unsigned __int8 *)(v6 + 2);
      char v34 = *(unsigned char *)(v6 + 3);
      uint64_t v35 = 16 * v32;
      uint64_t v36 = v6 + 208 + 16 * v32;
      uint64_t v37 = v36 + 96 * v32;
      if (v34) {
        int32x4_t v38 = (int32x4_t *)(v36 + 96 * *(unsigned __int8 *)(v6 + 1));
      }
      else {
        int32x4_t v38 = &v109;
      }
      if ((*(unsigned char *)(v6 + 3) & 1) == 0) {
        uint64_t v35 = 0;
      }
      if (*(unsigned char *)(v6 + 2)) {
        uint64_t v39 = 144;
      }
      else {
        uint64_t v39 = 0;
      }
      float32x4_t v40 = *(float32x4_t *)(v6 + 96);
      float32x4_t v42 = *(float32x4_t *)(v6 + 128);
      float32x4_t v41 = *(float32x4_t *)(v6 + 144);
      float32x4_t v43 = *(float32x4_t *)(v6 + 160);
      if (*(unsigned char *)(v6 + 1))
      {
        uint64_t v44 = 0;
        float32x4_t v45 = vmlaq_f32(vmlaq_f32(vmulq_f32(v18, v42), v41, v19), v43, v20);
        float32x4_t v46 = 0uLL;
        _X25 = _X2;
        float32x4_t v48 = 0uLL;
        do
        {
          __asm
          {
            PRFM            #0, [X25,#0x40]
            PRFM            #0, [X25,#0x80]
          }
          _X2 = _X25 + 192;
          __asm { PRFM            #0, [X25,#0xC0] }
          float32x4_t v56 = *(float32x4_t *)(v31 + 16 * v44);
          if (v34) {
            uint64_t v57 = v44;
          }
          else {
            uint64_t v57 = 0;
          }
          float32x4_t v58 = *(float32x4_t *)(v36 + 16);
          float32x4_t v59 = *(float32x4_t *)(v36 + 32);
          float32x4_t v60 = vminq_f32(vaddq_f32(v56, vmaxq_f32(vmlsq_f32(*(float32x4_t *)(v36 + 80), *(float32x4_t *)(v36 + 48), vmlaq_f32(vmlaq_f32(vmlaq_f32(v45, v25, *(float32x4_t *)v36), v26, v58), v27, v59)), vnegq_f32(v56))), (float32x4_t)v38[v57]);
          float32x4_t v61 = vsubq_f32(v60, v56);
          float32x4_t v62 = vmulq_f32(v40, v61);
          float32x4_t v48 = vaddq_f32(v48, v61);
          float32x4_t v45 = vmlaq_f32(v45, v61, v28);
          float32x4_t v25 = vmlaq_f32(v25, v62, *(float32x4_t *)v36);
          float32x4_t v26 = vmlaq_f32(v26, v62, v58);
          *(float32x4_t *)(v31 + 16 * v44) = v60;
          float32x4_t v27 = vmlaq_f32(v27, v62, v59);
          float32x4_t v46 = vaddq_f32(v46, v60);
          ++v44;
          v36 += 96;
          _X25 = _X2;
        }
        while (v32 != v44);
      }
      else
      {
        float32x4_t v48 = 0uLL;
        float32x4_t v46 = 0uLL;
      }
      uint64_t v63 = (int8x16_t *)(v37 + v35);
      float32x4_t v64 = (float32x4_t *)(v37 + v35 + v39);
      float32x4_t v65 = vmulq_f32(v28, v48);
      float32x4_t v18 = vmlaq_f32(v18, v65, v42);
      float32x4_t v19 = vmlaq_f32(v19, v65, v41);
      float32x4_t v20 = vmlaq_f32(v20, v65, v43);
      if (v33 && *a2)
      {
        if (a2[1])
        {
          _X21 = v63[1].i64[0];
          __asm { PRFM            #0, [X21] }
          _X21 = v63[1].i64[1];
          __asm { PRFM            #0, [X21] }
          _X21 = v63[2].i64[0];
          __asm { PRFM            #0, [X21] }
          _X21 = v63[2].i64[1];
          __asm { PRFM            #0, [X21] }
        }
        uint64_t v74 = 0;
        float32x4_t v75 = vmulq_f32(v46, *(float32x4_t *)(v6 + 32));
        float32x4_t v76 = vmulq_f32(v46, *(float32x4_t *)(v6 + 48));
        float32x4_t v77 = vnegq_f32(v76);
        uint64_t v78 = (float32x4_t *)(v6 + 16 * v33 + v35 + v39 + 112 * v32 + 272);
        int8x16_t v79 = 0uLL;
        float v80 = v64;
        do
        {
          __asm
          {
            PRFM            #0, [X2,#0x40]
            PRFM            #0, [X2,#0x80]
            PRFM            #0, [X2,#0xC0]
          }
          _X2 += 192;
          float32x4_t v84 = (float32x4_t *)&v63[v74 & 1];
          float32x4_t v85 = v84[3];
          float32x4_t v86 = v84[5];
          float32x4_t v87 = v84[7];
          float32x4_t v88 = v78[-4];
          float32x4_t v89 = v78[-3];
          float32x4_t v90 = v78[-2];
          float32x4_t v91 = vsubq_f32(*v80, v78[-1]);
          float32x4_t v92 = *v78;
          v78 += 6;
          float32x4_t v93 = vmlsq_f32(v91, v92, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v18, v85), v86, v19), v87, v20), vmlaq_f32(vmlaq_f32(vmulq_f32(v25, v88), v26, v89), v27, v90)));
          int8x16_t v79 = vorrq_s8(v79, (int8x16_t)vcgtq_f32(vabsq_f32(v93), v75));
          float32x4_t v94 = (float32x4_t)vbslq_s8(v79, (int8x16_t)vminq_f32(v76, vmaxq_f32(v77, v93)), (int8x16_t)v93);
          float32x4_t v95 = vsubq_f32(v94, *v80);
          float32x4_t v96 = vmulq_f32(v28, v95);
          float32x4_t v97 = vmulq_f32(v40, v95);
          float32x4_t v18 = vmlaq_f32(v18, v96, v85);
          float32x4_t v25 = vmlaq_f32(v25, v97, v88);
          float32x4_t v19 = vmlaq_f32(v19, v96, v86);
          float32x4_t v26 = vmlaq_f32(v26, v97, v89);
          float32x4_t v20 = vmlaq_f32(v20, v96, v87);
          float32x4_t v27 = vmlaq_f32(v27, v97, v90);
          *v80++ = v94;
          ++v74;
        }
        while (v33 != v74);
        int8x16_t *v63 = v79;
      }
      unint64_t v6 = (unint64_t)&v64[6 * v33 + v33];
    }
    while (v6 < v30);
  }
  int32x4_t v98 = vzip2q_s32(v22, v24);
  int32x4_t v99 = vzip2q_s32(v14, v17);
  float32x2x2_t v100 = (float32x2x2_t)vzip1q_s32((int32x4_t)v18, (int32x4_t)v20);
  float32x2x2_t v101 = (float32x2x2_t)vzip2q_s32((int32x4_t)v18, (int32x4_t)v20);
  int32x4_t v102 = vzip1q_s32((int32x4_t)v19, v99);
  int32x4_t v103 = vzip2q_s32((int32x4_t)v19, v99);
  float32x2x2_t v104 = (float32x2x2_t)vzip1q_s32((int32x4_t)v25, (int32x4_t)v27);
  float32x2x2_t v105 = (float32x2x2_t)vzip2q_s32((int32x4_t)v25, (int32x4_t)v27);
  int32x4_t v106 = vzip1q_s32((int32x4_t)v26, v98);
  vst2_f32((float *)v2->i32, v100);
  int32x4_t *v3 = vzip2q_s32((int32x4_t)v100, v102);
  int32x4_t v107 = vzip2q_s32((int32x4_t)v26, v98);
  vst2_f32((float *)v4->i32, v101);
  *uint64_t v5 = vzip2q_s32((int32x4_t)v101, v103);
  i32 = (float *)v2[1].i32;
  vst2_f32(i32, v104);
  v3[1] = vzip2q_s32((int32x4_t)v104, v106);
  int32x4_t result = vzip2q_s32((int32x4_t)v105, v107);
  uint64_t v11 = (float *)v4[1].i32;
  vst2_f32(v11, v105);
  v5[1] = result;
  return result;
}

uint64_t physx::Dy::solveContactPreBlock_Conclude(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  physx::Dy::solveContact4_Block((int32x4_t **)a1, a3);
  uint64_t v4 = *(unsigned __int8 **)(a1 + 32);
  uint64_t v5 = *(unsigned __int16 *)(a1 + 30);
  return physx::Dy::concludeContact4_Block(v5, v4, 0x90u, 0x90u);
}

uint64_t physx::Dy::concludeContact4_Block(uint64_t result, unsigned __int8 *a2, unsigned int a3, unsigned int a4)
{
  if ((_WORD)result)
  {
    uint64_t v4 = &a2[16 * (unsigned __int16)result];
    do
    {
      uint64_t v5 = a2[1];
      uint64_t v6 = a2[2];
      uint64_t v7 = 16 * v5;
      uint64_t v8 = v5 * a3;
      if (a2[3]) {
        uint64_t v9 = 16 * v5;
      }
      else {
        uint64_t v9 = 0;
      }
      uint64_t v10 = (uint64_t)&a2[16 * v5 + 208 + v9 + v8];
      if (a2[2]) {
        v10 += 16 * v6 + 144;
      }
      if (a2[1])
      {
        uint64_t v11 = (float32x4_t *)&a2[v7 + 288];
        do
        {
          float32x4_t *v11 = vsubq_f32(*v11, v11[-1]);
          uint64_t v11 = (float32x4_t *)((char *)v11 + a3);
          LODWORD(v5) = v5 - 1;
        }
        while (v5);
      }
      if (v6)
      {
        int32x4_t v12 = &a2[16 * v6 + 432 + v9 + v7 + v8];
        int v13 = v6;
        do
        {
          *((_OWORD *)v12 - 2) = *(_OWORD *)v12;
          v12 += a4;
          --v13;
        }
        while (v13);
      }
      a2 = (unsigned __int8 *)(v10 + v6 * a4);
    }
    while (a2 < v4);
  }
  return result;
}

uint64_t physx::Dy::solveContactPreBlock_ConcludeStatic(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  physx::Dy::solveContact4_StaticBlock(a1, a3);
  uint64_t v4 = *(unsigned __int8 **)(a1 + 32);
  uint64_t v5 = *(unsigned __int16 *)(a1 + 30);
  return physx::Dy::concludeContact4_Block(v5, v4, 0x60u, 0x60u);
}

uint64_t physx::Dy::solveContactPreBlock_WriteBack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[4] = *MEMORY[0x263EF8340];
  physx::Dy::solveContact4_Block((int32x4_t **)a1, (unsigned char *)a3);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = v5 + 112 * *(unsigned int *)(a1 + 20);
  uint64_t v7 = v5 + 112 * *(unsigned int *)(a1 + 68);
  uint64_t v8 = v5 + 112 * *(unsigned int *)(a1 + 116);
  uint64_t v9 = v5 + 112 * *(unsigned int *)(a1 + 164);
  uint64_t v10 = v5 + 112 * *(unsigned int *)(a1 + 24);
  uint64_t v11 = v5 + 112 * *(unsigned int *)(a1 + 72);
  uint64_t v12 = v5 + 112 * *(unsigned int *)(a1 + 120);
  uint64_t v13 = v5 + 112 * *(unsigned int *)(a1 + 168);
  v27[0] = v6;
  v27[1] = v7;
  float32x4_t v27[2] = v8;
  v27[3] = v9;
  v26[0] = v10;
  v26[1] = v11;
  v26[2] = v12;
  v26[3] = v13;
  uint64_t result = physx::Dy::writeBackContact4_Block(a1, a3, (uint64_t)v27, (uint64_t)v26, v14, v15);
  unsigned int v17 = *(_DWORD *)(a3 + 16);
  if (v17 > *(_DWORD *)(a3 + 20) - 4)
  {
    unsigned int add = atomic_fetch_add(*(atomic_uint *volatile *)(a3 + 48), v17);
    int v19 = *(_DWORD *)(a3 + 16);
    if (v19)
    {
      uint64_t v20 = 0;
      unint64_t v21 = 0;
      int v22 = add + v17 - v19;
      do
      {
        int32x4_t v23 = (_OWORD *)(*(void *)(a3 + 8) + v20);
        int32x4_t v24 = (_OWORD *)(*(void *)(a3 + 32) + 32 * (v22 + v21));
        long long v25 = v23[1];
        *int32x4_t v24 = *v23;
        v24[1] = v25;
        ++v21;
        v20 += 32;
      }
      while (v21 < *(unsigned int *)(a3 + 16));
    }
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t physx::Dy::solveContactPreBlock_WriteBackStatic(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  v27[4] = *MEMORY[0x263EF8340];
  *(void *)&double v5 = physx::Dy::solveContact4_StaticBlock((uint64_t)a1, (unsigned char *)a3).u64[0];
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = v6 + 112 * a1[5];
  uint64_t v8 = v6 + 112 * a1[17];
  uint64_t v9 = v6 + 112 * a1[29];
  uint64_t v10 = v6 + 112 * a1[41];
  uint64_t v11 = v6 + 112 * a1[6];
  uint64_t v12 = v6 + 112 * a1[18];
  uint64_t v13 = v6 + 112 * a1[30];
  uint64_t v14 = v6 + 112 * a1[42];
  v27[0] = v7;
  v27[1] = v8;
  float32x4_t v27[2] = v9;
  v27[3] = v10;
  v26[0] = v11;
  v26[1] = v12;
  v26[2] = v13;
  v26[3] = v14;
  uint64_t result = physx::Dy::writeBackContact4_Block((uint64_t)a1, a3, (uint64_t)v27, (uint64_t)v26, v5, v15);
  unsigned int v17 = *(_DWORD *)(a3 + 16);
  if (v17 > *(_DWORD *)(a3 + 20) - 4)
  {
    unsigned int add = atomic_fetch_add(*(atomic_uint *volatile *)(a3 + 48), v17);
    int v19 = *(_DWORD *)(a3 + 16);
    if (v19)
    {
      uint64_t v20 = 0;
      unint64_t v21 = 0;
      int v22 = add + v17 - v19;
      do
      {
        int32x4_t v23 = (_OWORD *)(*(void *)(a3 + 8) + v20);
        int32x4_t v24 = (_OWORD *)(*(void *)(a3 + 32) + 32 * (v22 + v21));
        long long v25 = v23[1];
        *int32x4_t v24 = *v23;
        v24[1] = v25;
        ++v21;
        v20 += 32;
      }
      while (v21 < *(unsigned int *)(a3 + 16));
    }
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

int32x4_t physx::Dy::solve1D4_Block(int32x4_t **a1)
{
  uint64_t v2 = (float *)*a1;
  uint64_t v1 = a1[1];
  uint64_t v4 = a1[6];
  int v3 = a1[7];
  uint64_t v6 = a1[12];
  double v5 = a1[13];
  int32x4_t v7 = **a1;
  int32x4_t v8 = vzip1q_s32(v7, *v6);
  uint64_t v10 = a1[18];
  uint64_t v9 = a1[19];
  uint64_t v11 = (float32x4_t *)a1[4];
  uint64_t v12 = *a1 + 1;
  int32x4_t v14 = v1[1];
  int32x4_t v15 = v4[1];
  int32x4_t v16 = v3[1];
  int32x4_t v18 = v6[1];
  int32x4_t v19 = v10[1];
  int32x4_t v20 = vzip2q_s32(v7, *v6);
  int32x4_t v21 = vzip1q_s32(*v4, *v10);
  int32x4_t v22 = v9[1];
  float32x4_t v23 = (float32x4_t)vzip1q_s32(v8, v21);
  float32x4_t v24 = (float32x4_t)vzip2q_s32(v8, v21);
  int32x4_t v104 = vzip2q_s32(*v4, *v10);
  int32x4_t v105 = v20;
  float32x4_t v25 = (float32x4_t)vzip1q_s32(v20, v104);
  int32x4_t v26 = vzip1q_s32(*v1, *v5);
  int32x4_t v27 = vzip1q_s32(*v3, *v9);
  float32x4_t v28 = (float32x4_t)vzip1q_s32(v26, v27);
  float32x4_t v29 = (float32x4_t)vzip2q_s32(v26, v27);
  int32x4_t v102 = vzip2q_s32(*v3, *v9);
  int32x4_t v103 = vzip2q_s32(*v1, *v5);
  float32x4_t v30 = (float32x4_t)vzip1q_s32(v103, v102);
  int32x4_t v31 = vzip1q_s32(*v12, v18);
  int32x4_t v32 = vzip1q_s32(v15, v19);
  int32x4_t v34 = v5[1];
  float32x4_t v35 = (float32x4_t)vzip1q_s32(v31, v32);
  float32x4_t v36 = (float32x4_t)vzip2q_s32(v31, v32);
  int32x4_t v100 = vzip2q_s32(v15, v19);
  int32x4_t v101 = vzip2q_s32(*v12, v18);
  float32x4_t v37 = (float32x4_t)vzip1q_s32(v101, v100);
  int32x4_t v38 = vzip1q_s32(v14, v34);
  int32x4_t v39 = vzip2q_s32(v14, v34);
  int32x4_t v40 = vzip1q_s32(v16, v22);
  int32x4_t v41 = vzip2q_s32(v16, v22);
  float32x4_t v42 = (float32x4_t)vzip1q_s32(v38, v40);
  float32x4_t v43 = (float32x4_t)vzip2q_s32(v38, v40);
  int32x4_t v99 = v39;
  float32x4_t v44 = (float32x4_t)vzip1q_s32(v39, v41);
  __int32 v45 = v11->i32[1];
  if (v45)
  {
    float32x4_t v46 = v11[3];
    float32x4_t v47 = v11[4];
    _X3 = v11 + 25;
    float32x4_t v49 = v11[5];
    float32x4_t v50 = v11[6];
    do
    {
      __asm
      {
        PRFM            #0, [X3,#0x80]
        PRFM            #0, [X3,#0xC0]
        PRFM            #0, [X3,#0x100]
        PRFM            #0, [X3,#0x140]
        PRFM            #0, [X3,#0x180]
      }
      float32x4_t v60 = _X3[-15];
      float32x4_t v61 = _X3[-14];
      float32x4_t v62 = _X3[2];
      float32x4_t v63 = _X3[3];
      float32x4_t v65 = _X3[-13];
      float32x4_t v64 = _X3[-12];
      float32x4_t v67 = _X3[4];
      float32x4_t v66 = _X3[5];
      float32x4_t v68 = _X3[-11];
      float32x4_t v69 = _X3[-10];
      float32x4_t v70 = _X3[6];
      float32x4_t v71 = _X3[7];
      float32x4_t v72 = vmaxq_f32(_X3[-2], vminq_f32(_X3[-1], vmlaq_f32(vmlaq_f32(_X3[-6], _X3[-4], vsubq_f32(vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v23, v60), v24, v61), v25, v65), vmlaq_f32(vmlaq_f32(vmulq_f32(v35, v64), v36, v68), v37, v69)), vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v28, v62), v29, v63), v30, v67), vmlaq_f32(vmlaq_f32(vmulq_f32(v42, v66), v43, v70), v44, v71)))), _X3[-3], *_X3)));
      float32x4_t v73 = vsubq_f32(v72, *_X3);
      float32x4_t v74 = vmulq_f32(v46, v73);
      float32x4_t v23 = vmlaq_f32(v23, v74, v60);
      float32x4_t v24 = vmlaq_f32(v24, v74, v61);
      float32x4_t v25 = vmlaq_f32(v25, v74, v65);
      float32x4_t v75 = vmulq_f32(v47, v73);
      float32x4_t v28 = vmlsq_f32(v28, v75, v62);
      float32x4_t v29 = vmlsq_f32(v29, v75, v63);
      float32x4_t v30 = vmlsq_f32(v30, v75, v67);
      float32x4_t v76 = vmulq_f32(v49, v73);
      float32x4_t v35 = vmlaq_f32(v35, v76, v64);
      float32x4_t v36 = vmlaq_f32(v36, v76, v68);
      float32x4_t v37 = vmlaq_f32(v37, v76, v69);
      float32x4_t v77 = vmulq_f32(v50, v73);
      float32x4_t v42 = vmlsq_f32(v42, v77, v66);
      float32x4_t v43 = vmlsq_f32(v43, v77, v70);
      float32x4_t v44 = vmlsq_f32(v44, v77, v71);
      *_X3 = v72;
      _X3 += 23;
      --v45;
    }
    while (v45);
  }
  int32x4_t v78 = vzip2q_s32(v99, v41);
  int32x4_t v79 = vzip2q_s32(v101, v100);
  int32x4_t v80 = vzip2q_s32(v103, v102);
  int32x4_t v81 = vzip2q_s32(v105, v104);
  float32x2x2_t v82 = (float32x2x2_t)vzip1q_s32((int32x4_t)v23, (int32x4_t)v25);
  float32x2x2_t v83 = (float32x2x2_t)vzip2q_s32((int32x4_t)v23, (int32x4_t)v25);
  int32x4_t v84 = vzip1q_s32((int32x4_t)v24, v81);
  int32x4_t v85 = vzip2q_s32((int32x4_t)v24, v81);
  float32x2x2_t v86 = (float32x2x2_t)vzip1q_s32((int32x4_t)v28, (int32x4_t)v30);
  float32x2x2_t v87 = (float32x2x2_t)vzip2q_s32((int32x4_t)v28, (int32x4_t)v30);
  vst2_f32(v2, v82);
  int32x4_t v88 = vzip1q_s32((int32x4_t)v29, v80);
  *uint64_t v4 = vzip2q_s32((int32x4_t)v82, v84);
  int32x4_t v89 = vzip2q_s32((int32x4_t)v29, v80);
  vst2_f32((float *)v6->i32, v83);
  int32x4_t *v10 = vzip2q_s32((int32x4_t)v83, v85);
  vst2_f32((float *)v1->i32, v86);
  float32x2x2_t v90 = (float32x2x2_t)vzip1q_s32((int32x4_t)v35, (int32x4_t)v37);
  int32x4_t *v3 = vzip2q_s32((int32x4_t)v86, v88);
  float32x2x2_t v91 = (float32x2x2_t)vzip2q_s32((int32x4_t)v35, (int32x4_t)v37);
  int32x4_t v92 = vzip1q_s32((int32x4_t)v36, v79);
  vst2_f32((float *)v5->i32, v87);
  int32x4_t *v9 = vzip2q_s32((int32x4_t)v87, v89);
  int32x4_t v93 = vzip2q_s32((int32x4_t)v36, v79);
  vst2_f32((float *)v12->i32, v90);
  v4[1] = vzip2q_s32((int32x4_t)v90, v92);
  float32x2x2_t v94 = (float32x2x2_t)vzip1q_s32((int32x4_t)v42, (int32x4_t)v44);
  i32 = (float *)v6[1].i32;
  vst2_f32(i32, v91);
  v10[1] = vzip2q_s32((int32x4_t)v91, v93);
  int32x4_t v95 = vzip1q_s32((int32x4_t)v43, v78);
  uint64_t v13 = (float *)v1[1].i32;
  vst2_f32(v13, v94);
  v3[1] = vzip2q_s32((int32x4_t)v94, v95);
  float32x2x2_t v96 = (float32x2x2_t)vzip2q_s32((int32x4_t)v42, (int32x4_t)v44);
  int32x4_t v97 = vzip2q_s32((int32x4_t)v43, v78);
  int32x4_t result = vzip2q_s32((int32x4_t)v96, v97);
  uint64_t v33 = (float *)v5[1].i32;
  vst2_f32(v33, v96);
  v9[1] = result;
  return result;
}

int32x4_t physx::Dy::solve1D4Block_Conclude(int32x4_t **a1)
{
  result.i64[0] = physx::Dy::solve1D4_Block(a1).u64[0];
  int v3 = a1[4];
  if (v3->i32[1])
  {
    unsigned __int32 v4 = 0;
    uint64_t v5 = 272;
    if (v3->i8[0] == 9) {
      uint64_t v5 = 368;
    }
    uint64_t v6 = v3 + 20;
    do
    {
      int32x4_t result = *v6;
      v6[-1] = *v6;
      ++v4;
      uint64_t v6 = (int32x4_t *)((char *)v6 + v5);
    }
    while (v4 < v3->i32[1]);
  }
  return result;
}

void physx::Dy::solve1D4Block_WriteBack(uint64_t a1)
{
  physx::Dy::solve1D4_Block((int32x4_t **)a1);
  uint64_t v2 = *(int32x2_t **)(a1 + 40);
  int v3 = *(int32x2_t **)(a1 + 88);
  unsigned __int32 v4 = *(int32x2_t **)(a1 + 136);
  uint64_t v5 = *(int32x2_t **)(a1 + 184);
  if (v2) {
    _ZF = 0;
  }
  else {
    _ZF = v3 == 0;
  }
  if (!_ZF || v4 != 0 || v5 != 0)
  {
    uint64_t v9 = *(float32x4_t **)(a1 + 32);
    __int32 v10 = v9->i32[1];
    if (v10)
    {
      float32x4_t v11 = 0uLL;
      uint64_t v12 = 272;
      if (v9->i8[0] == 9) {
        uint64_t v12 = 368;
      }
      uint64_t v13 = v9 + 16;
      v14.i64[0] = 0x200000002;
      v14.i64[1] = 0x200000002;
      float32x4_t v15 = 0uLL;
      float32x4_t v16 = 0uLL;
      float32x4_t v17 = 0uLL;
      float32x4_t v18 = 0uLL;
      float32x4_t v19 = 0uLL;
      do
      {
        float32x4_t v20 = (float32x4_t)vbicq_s8((int8x16_t)v13[9], (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)v13[10], v14)));
        float32x4_t v11 = vmlaq_f32(v11, v20, v13[-6]);
        float32x4_t v15 = vmlaq_f32(v15, v20, v13[-5]);
        float32x4_t v16 = vmlaq_f32(v16, v20, v13[-4]);
        float32x4_t v17 = vmlaq_f32(v17, v20, *v13);
        float32x4_t v19 = vmlaq_f32(v19, v20, v13[1]);
        float32x4_t v18 = vmlaq_f32(v18, v20, v13[2]);
        uint64_t v13 = (float32x4_t *)((char *)v13 + v12);
        --v10;
      }
      while (v10);
    }
    else
    {
      float32x4_t v19 = 0uLL;
      float32x4_t v18 = 0uLL;
      float32x4_t v17 = 0uLL;
      float32x4_t v16 = 0uLL;
      float32x4_t v15 = 0uLL;
      float32x4_t v11 = 0uLL;
    }
    float32x4_t v22 = v9[8];
    float32x4_t v21 = v9[9];
    float32x4_t v23 = v9[7];
    float32x4_t v24 = vsubq_f32(v17, vmlsq_f32(vmulq_f32(v16, v22), v15, v21));
    float32x4_t v25 = vsubq_f32(v19, vmlsq_f32(vmulq_f32(v11, v21), v16, v23));
    float32x4_t v26 = vnegq_f32(v22);
    float32x4_t v27 = vmlaq_f32(vmlaq_f32(vmulq_f32(v11, v11), v15, v15), v16, v16);
    float32x4_t v28 = vmulq_f32(v24, v24);
    float32x4_t v29 = vrsqrteq_f32(v27);
    int v30 = 4;
    do
    {
      float32x4_t v29 = vmulq_f32(v29, vrsqrtsq_f32(vmulq_f32(v29, v29), v27));
      --v30;
    }
    while (v30);
    float32x4_t v31 = vsubq_f32(v18, vmlaq_f32(vmulq_f32(v15, v23), v11, v26));
    float32x4_t v32 = vmlaq_f32(vmlaq_f32(v28, v25, v25), v31, v31);
    float32x4_t v33 = vrsqrteq_f32(v32);
    int v34 = 4;
    do
    {
      float32x4_t v33 = vmulq_f32(v33, vrsqrtsq_f32(vmulq_f32(v33, v33), v32));
      --v34;
    }
    while (v34);
    __asm { FMOV            V19.4S, #1.0 }
    int8x16_t v39 = vorrq_s8((int8x16_t)vcgtq_f32(vmulq_f32(v32, (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v32), _Q19, (int8x16_t)v33)), v9[2]), (int8x16_t)vcgtq_f32(vmulq_f32(v27, (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v27), _Q19, (int8x16_t)v29)), v9[1]));
    if (v2)
    {
      *uint64_t v2 = vzip1_s32(*(int32x2_t *)v11.f32, *(int32x2_t *)v15.f32);
      v2[1].i32[0] = v16.i32[0];
      v2[2] = vzip1_s32(*(int32x2_t *)v24.f32, *(int32x2_t *)v25.f32);
      v2[3].i32[0] = v31.i32[0];
      if (v9->i8[12]) {
        BOOL v40 = v39.i32[0] == 0;
      }
      else {
        BOOL v40 = 1;
      }
      int v41 = !v40;
      v2[1].i32[1] = v41;
    }
    if (v3)
    {
      int32x2_t *v3 = vzip2_s32(*(int32x2_t *)v11.f32, *(int32x2_t *)v15.f32);
      v3[1].i32[0] = v16.i32[1];
      v3[2] = vzip2_s32(*(int32x2_t *)v24.f32, *(int32x2_t *)v25.f32);
      v3[3].i32[0] = v31.i32[1];
      if (v9->i8[13]) {
        BOOL v42 = v39.i32[1] == 0;
      }
      else {
        BOOL v42 = 1;
      }
      int v43 = !v42;
      v3[1].i32[1] = v43;
    }
    int32x2_t v44 = (int32x2_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
    int32x2_t v45 = (int32x2_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u64[0];
    int32x2_t v46 = (int32x2_t)vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u64[0];
    int32x2_t v47 = (int32x2_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
    if (v4)
    {
      *unsigned __int32 v4 = vzip1_s32(v45, v44);
      v4[1].i32[0] = v16.i32[2];
      _OWORD v4[2] = vzip1_s32(v47, v46);
      v4[3].i32[0] = v31.i32[2];
      if (v9->i8[14]) {
        BOOL v48 = v39.i32[2] == 0;
      }
      else {
        BOOL v48 = 1;
      }
      int v49 = !v48;
      v4[1].i32[1] = v49;
    }
    if (v5)
    {
      *uint64_t v5 = vzip2_s32(v45, v44);
      v5[1].i32[0] = v16.i32[3];
      v5[2] = vzip2_s32(v47, v46);
      v5[3].i32[0] = v31.i32[3];
      if (v9->i8[15]) {
        BOOL v50 = v39.i32[3] == 0;
      }
      else {
        BOOL v50 = 1;
      }
      int v51 = !v50;
      v5[1].i32[1] = v51;
    }
  }
}

void physx::Dy::SolverCoreRegisterArticulationFns(physx::Dy *this)
{
  qword_26AF712E8 = (uint64_t)physx::Dy::solveExtContactBlock;
  qword_26AF712F0 = (uint64_t)physx::Dy::solveExt1DBlock;
  qword_26AF71338 = (uint64_t)physx::Dy::solveExtContactBlockWriteBack;
  qword_26AF71340 = (uint64_t)physx::Dy::solveExt1DBlockWriteBack;
  qword_26AF71388 = (uint64_t)physx::Dy::solveExtContactConcludeBlock;
  qword_26AF71390 = (uint64_t)physx::Dy::solveExt1DConcludeBlock;
}

uint64_t physx::Dy::SolverCoreGeneral::destroyV(physx::Dy::SolverCoreGeneral *this)
{
  (*(void (**)(physx::Dy::SolverCoreGeneral *))(*(void *)this + 8))(this);
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
  return v1();
}

__n128 physx::Dy::SolverCoreGeneral::solveV_Blocks(uint64_t a1, int *a2)
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  for (uint64_t i = 16; i != 1040; i += 32)
    *(void *)&v96[i] = 0x7F0000007FLL;
  __n128 result = *(__n128 *)(a2 + 58);
  __n128 v95 = result;
  uint64_t v5 = a2[16];
  uint64_t v6 = a2[6];
  int v8 = *a2;
  int v7 = a2[1];
  uint64_t v94 = a2[10];
  uint64_t v9 = (uint64_t *)*((void *)a2 + 4);
  if (v5)
  {
    uint64_t v90 = *((void *)a2 + 11);
    uint64_t v91 = *((void *)a2 + 1);
    int v92 = a2[1];
    int32x4_t v93 = (uint64_t *)*((void *)a2 + 4);
    uint64_t v11 = *((void *)a2 + 6);
    for (uint64_t j = *((void *)a2 + 7); v8; --v8)
    {
      if (v8 == 1) {
        uint64_t v12 = (void (**)(uint64_t))&unk_26AF71370;
      }
      else {
        uint64_t v12 = (void (**)(uint64_t))&_MergedGlobals_9;
      }
      if ((int)v5 >= 1)
      {
        for (uint64_t k = 0; k != v5; ++k)
        {
          int8x16_t v14 = (unsigned int *)(j + 8 * k);
          uint64_t v15 = *((unsigned __int16 *)v14 + 2);
          unsigned int v16 = *v14;
          _X9 = *(void *)(v11 + 48 * v16 + 32);
          int v18 = ~((_X9 + 383) >> 5) + (_X9 >> 5);
          do
          {
            __asm { PRFM            #0, [X9] }
            _X9 += 32;
            _CF = __CFADD__(v18++, 1);
          }
          while (!_CF);
          if (v15)
          {
            float32x4_t v24 = (uint64_t *)(v11 + 8 + 48 * v16);
            uint64_t v25 = v15;
            do
            {
              _X11 = *(v24 - 1);
              __asm { PRFM            #0, [X11] }
              uint64_t v29 = *v24;
              v24 += 6;
              _X11 = v29;
              __asm { PRFM            #0, [X11] }
              --v25;
            }
            while (v25);
          }
          v12[*(unsigned __int16 *)(j + 8 * k + 6)](v11 + 48 * v16);
        }
      }
      float32x4_t v31 = v93;
      uint64_t v32 = v94;
      if (v94)
      {
        do
        {
          uint64_t v33 = *v31;
          v31 += 12;
          (*(void (**)(uint64_t, unint64_t, unint64_t, void, void, float, float, double))(*(void *)v33 + 272))(v33, v95.n128_u64[0], v95.n128_u64[1], 0, 0, *((float *)a2 + 38), *((float *)a2 + 39), 0.0);
          --v32;
        }
        while (v32);
      }
    }
    if (v6)
    {
      uint64_t v34 = v90 + 16;
      uint64_t v35 = v91 + 16;
      do
      {
        *(void *)(v34 - 16) = *(void *)(v35 - 16);
        *(_DWORD *)(v34 - 8) = *(_DWORD *)(v35 - 8);
        result.n128_u64[0] = *(void *)v35;
        *(void *)uint64_t v34 = *(void *)v35;
        result.n128_u32[0] = *(_DWORD *)(v35 + 8);
        *(_DWORD *)(v34 + 8) = result.n128_u32[0];
        v34 += 32;
        v35 += 32;
        --v6;
      }
      while (v6);
    }
    float32x4_t v37 = v93;
    uint64_t v36 = v94;
    if (v94)
    {
      int32x4_t v38 = v93;
      do
      {
        int8x16_t v39 = (void (*)(uint64_t *, unint64_t))physx::Dy::ArticulationPImpl::sSaveVelocity[*(unsigned int *)(*v38 + 40)];
        if (v39) {
          v39(v38, v95.n128_u64[1]);
        }
        v38 += 12;
        --v36;
      }
      while (v36);
    }
    if (v92 < 2)
    {
      int v41 = 0;
    }
    else
    {
      int v40 = 0;
      int v41 = v92 - 1;
      do
      {
        if ((int)v5 >= 1)
        {
          for (uint64_t m = 0; m != v5; ++m)
          {
            int v43 = (unsigned int *)(j + 8 * m);
            uint64_t v44 = *((unsigned __int16 *)v43 + 2);
            unsigned int v45 = *v43;
            _X9 = *(void *)(v11 + 48 * v45 + 32);
            int v47 = ~((_X9 + 383) >> 5) + (_X9 >> 5);
            do
            {
              __asm { PRFM            #0, [X9] }
              _X9 += 32;
              _CF = __CFADD__(v47++, 1);
            }
            while (!_CF);
            if (v44)
            {
              int v49 = (uint64_t *)(v11 + 8 + 48 * v45);
              uint64_t v50 = v44;
              do
              {
                _X11 = *(v49 - 1);
                __asm { PRFM            #0, [X11] }
                uint64_t v54 = *v49;
                v49 += 6;
                _X11 = v54;
                __asm { PRFM            #0, [X11] }
                --v50;
              }
              while (v50);
            }
            (*((void (**)(uint64_t))&_MergedGlobals_9 + *(unsigned __int16 *)(j + 8 * m + 6)))(v11 + 48 * v45);
          }
        }
        float32x4_t v56 = v37;
        uint64_t v57 = v94;
        if (v94)
        {
          do
          {
            uint64_t v58 = *v56;
            v56 += 12;
            (*(void (**)(uint64_t, unint64_t, unint64_t, uint64_t, void, float, float, double))(*(void *)v58 + 272))(v58, v95.n128_u64[0], v95.n128_u64[1], 1, 0, *((float *)a2 + 38), *((float *)a2 + 39), 0.0);
            --v57;
          }
          while (v57);
        }
        ++v40;
        float32x4_t v37 = v93;
      }
      while (v40 != v41);
    }
    if (v41 < v92)
    {
      if ((int)v5 >= 1)
      {
        for (uint64_t n = 0; n != v5; ++n)
        {
          float32x4_t v75 = (unsigned int *)(j + 8 * n);
          uint64_t v76 = *((unsigned __int16 *)v75 + 2);
          unsigned int v77 = *v75;
          _X9 = *(void *)(v11 + 48 * v77 + 32);
          int v79 = ~((_X9 + 383) >> 5) + (_X9 >> 5);
          do
          {
            __asm { PRFM            #0, [X9] }
            _X9 += 32;
            _CF = __CFADD__(v79++, 1);
          }
          while (!_CF);
          if (v76)
          {
            int32x4_t v81 = (uint64_t *)(v11 + 8 + 48 * v77);
            uint64_t v82 = v76;
            do
            {
              _X11 = *(v81 - 1);
              __asm { PRFM            #0, [X11] }
              uint64_t v86 = *v81;
              v81 += 6;
              _X11 = v86;
              __asm { PRFM            #0, [X11] }
              --v82;
            }
            while (v82);
          }
          (*((void (**)(uint64_t))&_MergedGlobals_9 + *(unsigned __int16 *)(j + 8 * n + 6) + 10))(v11 + 48 * v77);
        }
      }
      uint64_t v88 = v94;
      if (v94)
      {
        do
        {
          (*(void (**)(uint64_t, unint64_t, unint64_t, uint64_t, void, float, float, double))(*(void *)*v37 + 272))(*v37, v95.n128_u64[0], v95.n128_u64[1], 1, 0, *((float *)a2 + 38), *((float *)a2 + 39), 0.0);
          uint64_t v89 = *v37;
          v37 += 12;
          (*(void (**)(void))(*(void *)v89 + 280))();
          --v88;
        }
        while (v88);
      }
    }
  }
  else
  {
    if (v6)
    {
      uint64_t v59 = *((void *)a2 + 11) + 16;
      uint64_t v60 = *((void *)a2 + 1) + 16;
      do
      {
        *(void *)(v59 - 16) = *(void *)(v60 - 16);
        *(_DWORD *)(v59 - 8) = *(_DWORD *)(v60 - 8);
        result.n128_u64[0] = *(void *)v60;
        *(void *)uint64_t v59 = *(void *)v60;
        result.n128_u32[0] = *(_DWORD *)(v60 + 8);
        *(_DWORD *)(v59 + 8) = result.n128_u32[0];
        v59 += 32;
        v60 += 32;
        --v6;
      }
      while (v6);
    }
    uint64_t v61 = v94;
    if (v8)
    {
      for (iuint64_t i = 0; ii != v8; ++ii)
      {
        float32x4_t v63 = v9;
        uint64_t v64 = v94;
        if (v94)
        {
          do
          {
            uint64_t v65 = *v63;
            v63 += 12;
            (*(void (**)(uint64_t, unint64_t, unint64_t, void, void, float, float, double))(*(void *)v65 + 272))(v65, v95.n128_u64[0], v95.n128_u64[1], 0, 0, *((float *)a2 + 38), *((float *)a2 + 39), 0.0);
            --v64;
          }
          while (v64);
        }
      }
    }
    if (v94)
    {
      float32x4_t v66 = v9;
      uint64_t v67 = v94;
      do
      {
        float32x4_t v68 = (void (*)(uint64_t *, unint64_t))physx::Dy::ArticulationPImpl::sSaveVelocity[*(unsigned int *)(*v66 + 40)];
        if (v68) {
          v68(v66, v95.n128_u64[1]);
        }
        v66 += 12;
        --v67;
      }
      while (v67);
    }
    if (v7)
    {
      for (juint64_t j = 0; jj != v7; ++jj)
      {
        float32x4_t v70 = v9;
        uint64_t v71 = v94;
        if (v94)
        {
          do
          {
            uint64_t v72 = *v70;
            v70 += 12;
            (*(void (**)(uint64_t, unint64_t, unint64_t, uint64_t, void, float, float, double))(*(void *)v72 + 272))(v72, v95.n128_u64[0], v95.n128_u64[1], 1, 0, *((float *)a2 + 38), *((float *)a2 + 39), 0.0);
            --v71;
          }
          while (v71);
        }
      }
    }
    if (v94)
    {
      do
      {
        uint64_t v73 = *v9;
        v9 += 12;
        (*(void (**)(uint64_t, void))(*(void *)v73 + 280))(v73, 0);
        --v61;
      }
      while (v61);
    }
  }
  return result;
}

uint64_t physx::Dy::SolverCoreGeneral::solveVParallelAndWriteBack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2;
  uint64_t v208 = *MEMORY[0x263EF8340];
  unsigned int v192 = *(_DWORD *)(a2 + 96);
  for (uint64_t i = 16; i != 1040; i += 32)
    *(void *)&v207[i] = 0x7F0000007FLL;
  int v6 = 0;
  atomic_uint v7 = 0;
  signed int v8 = 0;
  int v177 = 0;
  int v161 = 0;
  uint64_t v163 = 0;
  int v175 = 0;
  int v153 = *(_DWORD *)(a2 + 24);
  uint64_t v167 = *(int *)(a2 + 40);
  uint64_t v168 = 0;
  atomic_uint v158 = 0;
  int v160 = *(_DWORD *)(a2 + 64);
  float v9 = *(float *)(a2 + 152);
  float v10 = *(float *)(a2 + 156);
  atomic_uint v11 = *(_DWORD *)a2;
  uint64_t v13 = *(void *)(a2 + 48);
  uint64_t v12 = *(void *)(a2 + 56);
  uint64_t v169 = *(void *)(a2 + 32);
  uint64_t v181 = *(unsigned int *)(a2 + 80);
  uint64_t v14 = *(void *)(a2 + 72);
  signed int add = atomic_fetch_add((atomic_uint *volatile)(a2 + 120), v192);
  atomic_uint v15 = v11 - 1;
  char v16 = 1;
  atomic_uint v157 = v15;
  signed int v203 = v192;
  uint64_t v174 = v14;
  atomic_uint v154 = v15;
  do
  {
    char v156 = v16;
    if (v16) {
      float32x4_t v17 = (void (**)(uint64_t))&_MergedGlobals_9;
    }
    else {
      float32x4_t v17 = (void (**)(uint64_t))&unk_26AF71370;
    }
    atomic_uint v162 = v6 + v15;
    if (HIDWORD(v168) < v6 + v15)
    {
      int v165 = v177;
      int v155 = (v157 - HIDWORD(v168)) * v167;
      int v164 = v167 + v161;
      atomic_uint v18 = v158;
      int v19 = v161;
      uint64_t v172 = -(uint64_t)v177;
      do
      {
        atomic_uint v170 = v18;
        if (*(_DWORD *)(v4 + 140) < v18)
        {
          int v20 = 30000;
          while (*(_DWORD *)(v4 + 140) < v170)
          {
            if (!--v20)
            {
              sched_yield();
              int v20 = 10000;
            }
          }
        }
        if (v181)
        {
          uint64_t v188 = 0;
          int v194 = v168 * v160;
          int v178 = v19;
          do
          {
            if (*(_DWORD *)(v4 + 124) < v7)
            {
              int v21 = 30000;
              while (*(_DWORD *)(v4 + 124) < v7)
              {
                if (!--v21)
                {
                  sched_yield();
                  int v21 = 10000;
                }
              }
            }
            v8 += *(_DWORD *)(v14 + 4 * v188);
            signed int v22 = add;
            if (add >= v8)
            {
              int v24 = v203;
            }
            else
            {
              atomic_uint v182 = v7;
              unsigned int v23 = 0;
              int v24 = v203;
              signed int v198 = v8;
              do
              {
                signed int v25 = v22;
                int v26 = v8 - v22;
                int v204 = v24;
                if (v26 >= v24) {
                  int v27 = v24;
                }
                else {
                  int v27 = v26;
                }
                if (v27 >= 1)
                {
                  uint64_t v28 = v25 - v194;
                  do
                  {
                    uint64_t v29 = (unsigned int *)(v12 + 8 * v28);
                    uint64_t v30 = *((unsigned __int16 *)v29 + 2);
                    unsigned int v31 = *v29;
                    _X9 = *(void *)(v13 + 48 * v31 + 32);
                    int v33 = ~((_X9 + 383) >> 5) + (_X9 >> 5);
                    do
                    {
                      __asm { PRFM            #0, [X9] }
                      _X9 += 32;
                      _CF = __CFADD__(v33++, 1);
                    }
                    while (!_CF);
                    if (v30)
                    {
                      int8x16_t v39 = (uint64_t *)(v13 + 8 + 48 * v31);
                      uint64_t v40 = v30;
                      do
                      {
                        _X11 = *(v39 - 1);
                        __asm { PRFM            #0, [X11] }
                        uint64_t v44 = *v39;
                        v39 += 6;
                        _X11 = v44;
                        __asm { PRFM            #0, [X11] }
                        --v40;
                      }
                      while (v40);
                    }
                    v17[*(unsigned __int16 *)(v12 + 8 * v28++ + 6)](v13 + 48 * v31);
                  }
                  while (v28 < v27 + v25 - v194);
                }
                int v24 = v204 - v27;
                if (v204 == v27)
                {
                  unsigned int v46 = v192;
                  signed int v22 = atomic_fetch_add((atomic_uint *volatile)(a2 + 120), v192);
                  int v24 = v46;
                }
                else
                {
                  signed int v22 = v27 + v25;
                }
                signed int v8 = v198;
                v23 += v27;
              }
              while (v22 < v198);
              signed int add = v22;
              if (v23)
              {
                __dmb(0xBu);
                uint64_t v4 = a2;
                atomic_fetch_add((atomic_uint *volatile)(a2 + 124), v23);
              }
              else
              {
                uint64_t v4 = a2;
              }
              atomic_uint v7 = v182;
              uint64_t v14 = v174;
              int v19 = v178;
            }
            signed int v203 = v24;
            v7 += *(_DWORD *)(v14 + 4 * v188++);
          }
          while (v188 != v181);
        }
        if (*(_DWORD *)(v4 + 124) < v7)
        {
          int v47 = 30000;
          while (*(_DWORD *)(v4 + 124) < v7)
          {
            if (!--v47)
            {
              sched_yield();
              int v47 = 10000;
            }
          }
        }
        v19 += v167;
        LODWORD(v48) = v175;
        if (v175 >= v19)
        {
          uint64_t v50 = v163;
        }
        else
        {
          uint64_t v49 = v175;
          uint64_t v50 = v163;
          signed int v199 = v8;
          int v179 = v19;
          do
          {
            if ((int)v50 >= v19) {
              int v51 = v19;
            }
            else {
              int v51 = v50;
            }
            if ((int)v49 >= v51)
            {
              uint64_t v48 = v49;
            }
            else
            {
              if ((int)v50 >= v164) {
                int v52 = v164;
              }
              else {
                int v52 = v50;
              }
              unsigned int v176 = v52;
              uint64_t v53 = v50;
              uint64_t v54 = (int)v50;
              if ((int)v50 >= (uint64_t)v164) {
                uint64_t v54 = v164;
              }
              uint64_t v55 = v54 - (int)v49;
              float32x4_t v56 = (uint64_t *)(v169 + 96 * (v172 + (int)v49));
              do
              {
                uint64_t v57 = *v56;
                v56 += 12;
                (*(void (**)(uint64_t, uint64_t, uint64_t, void, void, float, float, double))(*(void *)v57 + 272))(v57, a3, a4, 0, 0, v9, v10, 0.0);
                --v55;
              }
              while (v55);
              uint64_t v4 = a2;
              atomic_fetch_add((atomic_uint *volatile)(a2 + 140), v176 - v49);
              uint64_t v48 = v176;
              signed int v8 = v199;
              uint64_t v50 = v53;
              int v19 = v179;
            }
            if (v50 == v48)
            {
              uint64_t v48 = atomic_fetch_add((atomic_uint *volatile)(v4 + 136), 2u);
              uint64_t v50 = (v48 + 2);
            }
            uint64_t v49 = v48;
          }
          while ((int)v48 < v19);
        }
        uint64_t v163 = v50;
        int v175 = v48;
        atomic_uint v18 = v170 + v167;
        v165 += v167;
        LODWORD(v168) = v168 + 1;
        v164 += v167;
        uint64_t v14 = v174;
        v172 -= v167;
        ++HIDWORD(v168);
      }
      while (HIDWORD(v168) != v162);
      atomic_uint v15 = v154;
      v161 += v155;
      v158 += v155;
      int v177 = v165;
      HIDWORD(v168) = v162;
    }
    char v16 = 0;
    ++v157;
    int v6 = 1;
  }
  while ((v156 & 1) != 0);
  uint64_t v195 = *(void *)(v4 + 8);
  uint64_t v189 = *(void *)(v4 + 88);
  uint64_t v58 = v4;
  int v59 = atomic_fetch_add((atomic_uint *volatile)(v4 + 128), 0x20u);
  int v60 = v167;
  if (*(_DWORD *)(v58 + 140) < v158 && *(_DWORD *)(a2 + 140) < v158)
  {
    int v61 = 30000;
    while (*(_DWORD *)(a2 + 140) < v158)
    {
      if (!--v61)
      {
        sched_yield();
        int v61 = 10000;
      }
    }
  }
  if (*(_DWORD *)(a2 + 124) < v7)
  {
    int v62 = 30000;
    while (*(_DWORD *)(a2 + 124) < v7)
    {
      if (!--v62)
      {
        sched_yield();
        int v62 = 10000;
      }
    }
  }
  atomic_uint v183 = v7;
  if (v59 >= (int)v167)
  {
    unsigned int v63 = 0;
    int v64 = 32;
  }
  else
  {
    unsigned int v63 = 0;
    int v64 = 32;
    do
    {
      if (v60 - v59 >= 32) {
        int v65 = 32;
      }
      else {
        int v65 = v60 - v59;
      }
      if (v60 - v59 >= 1)
      {
        if (v65 <= 1) {
          int v66 = 1;
        }
        else {
          int v66 = v65;
        }
        uint64_t v67 = v169 + 96 * v59;
        v59 += v66;
        do
        {
          float32x4_t v68 = (void (*)(uint64_t, uint64_t))physx::Dy::ArticulationPImpl::sSaveVelocity[*(unsigned int *)(*(void *)v67 + 40)];
          if (v68) {
            v68(v67, a4);
          }
          v67 += 96;
          --v66;
        }
        while (v66);
      }
      v64 -= v65;
      if (!v64)
      {
        int v64 = 32;
        int v59 = atomic_fetch_add((atomic_uint *volatile)(a2 + 128), 0x20u);
      }
      v63 += v65;
      int v60 = v167;
    }
    while (v59 < (int)v167);
  }
  int v69 = v59 - v60;
  if (v59 - v60 >= v153)
  {
    float32x4_t v70 = (atomic_uint *)a2;
    atomic_uint v71 = v158;
    if (v63)
    {
LABEL_111:
      __dmb(0xBu);
      atomic_fetch_add(v70 + 33, v63);
    }
  }
  else
  {
    float32x4_t v70 = (atomic_uint *)a2;
    atomic_uint v71 = v158;
    do
    {
      int v72 = v153 - v69;
      if (v64 < v153 - v69) {
        int v72 = v64;
      }
      if (v72 >= 1)
      {
        uint64_t v73 = 32 * v69;
        int v74 = v72;
        uint64_t v75 = v195;
        uint64_t v76 = v189;
        do
        {
          _X13 = v75 + v73;
          __asm { PRFM            #0, [X13,#0x100] }
          _X14 = v76 + v73;
          __asm { PRFM            #0, [X14,#0x100] }
          *(void *)_X14 = *(void *)(v75 + v73);
          *(_DWORD *)(_X14 + 8) = *(_DWORD *)(v75 + v73 + 8);
          *(void *)(_X14 + 16) = *(void *)(v75 + v73 + 16);
          *(_DWORD *)(_X14 + 24) = *(_DWORD *)(v75 + v73 + 24);
          v76 += 32;
          v75 += 32;
          --v74;
        }
        while (v74);
      }
      v63 += v72;
      int v64 = 32;
      int v69 = atomic_fetch_add((atomic_uint *volatile)(a2 + 128), 0x20u) - v60;
    }
    while (v69 < v153);
    if (v63) {
      goto LABEL_111;
    }
  }
  atomic_uint v81 = v183;
  if (v70[33] < v60 + v153)
  {
    int v82 = 30000;
    while (v70[33] < v60 + v153)
    {
      if (!--v82)
      {
        sched_yield();
        int v82 = 10000;
      }
    }
  }
  if (v70[1] < 2)
  {
    uint64_t v84 = v163;
  }
  else
  {
    int v171 = v177;
    int v166 = v60 + v161;
    HIDWORD(v168) = 1;
    atomic_uint v83 = v71;
    uint64_t v84 = v163;
    uint64_t v173 = -(uint64_t)v177;
    do
    {
      atomic_uint v159 = v83;
      if (v70[35] < v83)
      {
        int v85 = 30000;
        while (v70[35] < v159)
        {
          if (!--v85)
          {
            sched_yield();
            int v85 = 10000;
          }
        }
      }
      if (v181)
      {
        uint64_t v86 = 0;
        int v196 = v168 * v160;
        uint64_t v180 = v84;
        do
        {
          if (v70[31] < v81)
          {
            int v87 = 30000;
            while (v70[31] < v81)
            {
              if (!--v87)
              {
                sched_yield();
                int v87 = 10000;
              }
            }
          }
          v8 += *(_DWORD *)(v174 + 4 * v86);
          signed int v88 = add;
          if (add >= v8)
          {
            int v90 = v203;
          }
          else
          {
            uint64_t v190 = v86;
            atomic_uint v184 = v81;
            unsigned int v89 = 0;
            int v90 = v203;
            signed int v200 = v8;
            do
            {
              signed int v91 = v88;
              int v92 = v8 - v88;
              int v93 = v90;
              if (v92 >= v90) {
                int v94 = v90;
              }
              else {
                int v94 = v92;
              }
              if (v94 >= 1)
              {
                uint64_t v95 = v91 - v196;
                do
                {
                  float32x2x2_t v96 = (unsigned int *)(v12 + 8 * v95);
                  uint64_t v97 = *((unsigned __int16 *)v96 + 2);
                  unsigned int v98 = *v96;
                  _X9 = *(void *)(v13 + 48 * v98 + 32);
                  int v100 = ~((_X9 + 383) >> 5) + (_X9 >> 5);
                  do
                  {
                    __asm { PRFM            #0, [X9] }
                    _X9 += 32;
                    _CF = __CFADD__(v100++, 1);
                  }
                  while (!_CF);
                  if (v97)
                  {
                    int32x4_t v102 = (uint64_t *)(v13 + 8 + 48 * v98);
                    uint64_t v103 = v97;
                    do
                    {
                      _X11 = *(v102 - 1);
                      __asm { PRFM            #0, [X11] }
                      uint64_t v107 = *v102;
                      v102 += 6;
                      _X11 = v107;
                      __asm { PRFM            #0, [X11] }
                      --v103;
                    }
                    while (v103);
                  }
                  (*((void (**)(uint64_t))&_MergedGlobals_9 + *(unsigned __int16 *)(v12 + 8 * v95++ + 6)))(v13 + 48 * v98);
                }
                while (v95 < v94 + v91 - v196);
              }
              int v90 = v93 - v94;
              if (v93 == v94)
              {
                float32x4_t v70 = (atomic_uint *)a2;
                unsigned int v109 = v192;
                signed int v88 = atomic_fetch_add((atomic_uint *volatile)(a2 + 120), v192);
                int v90 = v109;
              }
              else
              {
                signed int v88 = v94 + v91;
                float32x4_t v70 = (atomic_uint *)a2;
              }
              signed int v8 = v200;
              v89 += v94;
            }
            while (v88 < v200);
            signed int add = v88;
            if (v89)
            {
              __dmb(0xBu);
              atomic_fetch_add(v70 + 31, v89);
            }
            atomic_uint v81 = v184;
            uint64_t v84 = v180;
            uint64_t v86 = v190;
          }
          signed int v203 = v90;
          v81 += *(_DWORD *)(v174 + 4 * v86++);
        }
        while (v86 != v181);
      }
      if (v70[31] < v81)
      {
        int v110 = 30000;
        while (v70[31] < v81)
        {
          if (!--v110)
          {
            sched_yield();
            int v110 = 10000;
          }
        }
      }
      LODWORD(v112) = v175;
      v161 += v167;
      int v111 = v161;
      if (v175 < v161)
      {
        uint64_t v113 = v175;
        atomic_uint v185 = v81;
        signed int v201 = v8;
        do
        {
          if ((int)v84 < v111) {
            int v111 = v84;
          }
          if ((int)v113 >= v111)
          {
            uint64_t v112 = v113;
          }
          else
          {
            if ((int)v84 >= v166) {
              uint64_t v114 = v166;
            }
            else {
              uint64_t v114 = v84;
            }
            uint64_t v115 = (int)v84;
            if ((int)v84 >= (uint64_t)v166) {
              uint64_t v115 = v166;
            }
            uint64_t v116 = v115 - (int)v113;
            float v117 = (uint64_t *)(v169 + 96 * (v173 + (int)v113));
            do
            {
              uint64_t v118 = *v117;
              v117 += 12;
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, float, float, double))(*(void *)v118 + 272))(v118, a3, a4, 1, 0, v9, v10, 0.0);
              --v116;
            }
            while (v116);
            float32x4_t v70 = (atomic_uint *)a2;
            atomic_fetch_add((atomic_uint *volatile)(a2 + 140), v114 - v113);
            uint64_t v112 = v114;
            atomic_uint v81 = v185;
            signed int v8 = v201;
          }
          if (v84 == v112)
          {
            uint64_t v112 = atomic_fetch_add(v70 + 34, 2u);
            uint64_t v84 = (v112 + 2);
          }
          uint64_t v113 = v112;
          int v111 = v161;
        }
        while ((int)v112 < v161);
      }
      int v175 = v112;
      atomic_uint v83 = v159 + v167;
      LODWORD(v168) = v168 + 1;
      v171 += v167;
      v166 += v167;
      v173 -= v167;
      ++HIDWORD(v168);
    }
    while (HIDWORD(v168) < v70[1]);
    int v177 = v171;
    atomic_uint v71 = v159 + v167;
  }
  if (v70[35] < v71)
  {
    int v119 = 30000;
    while (v70[35] < v71)
    {
      if (!--v119)
      {
        sched_yield();
        int v119 = 10000;
      }
    }
  }
  if (v181)
  {
    uint64_t v191 = 0;
    int v197 = v168 * v160;
    do
    {
      if (v70[31] < v81)
      {
        int v120 = 30000;
        while (v70[31] < v81)
        {
          if (!--v120)
          {
            sched_yield();
            int v120 = 10000;
          }
        }
      }
      v8 += *(_DWORD *)(v174 + 4 * v191);
      signed int v121 = add;
      if (add < v8)
      {
        signed int v122 = v8;
        atomic_uint v186 = v81;
        unsigned int v123 = 0;
        signed int v202 = v8;
        do
        {
          signed int v124 = v121;
          int v125 = v122 - v121;
          if (v125 >= v203) {
            int v126 = v203;
          }
          else {
            int v126 = v125;
          }
          if (v126 >= 1)
          {
            uint64_t v127 = v121 - v197;
            do
            {
              float32x4_t v128 = (unsigned int *)(v12 + 8 * v127);
              uint64_t v129 = *((unsigned __int16 *)v128 + 2);
              unsigned int v130 = *v128;
              _X9 = *(void *)(v13 + 48 * v130 + 32);
              int v132 = ~((_X9 + 383) >> 5) + (_X9 >> 5);
              do
              {
                __asm { PRFM            #0, [X9] }
                _X9 += 32;
                _CF = __CFADD__(v132++, 1);
              }
              while (!_CF);
              if (v129)
              {
                float32x4_t v134 = (uint64_t *)(v13 + 8 + 48 * v130);
                uint64_t v135 = v129;
                do
                {
                  _X11 = *(v134 - 1);
                  __asm { PRFM            #0, [X11] }
                  uint64_t v139 = *v134;
                  v134 += 6;
                  _X11 = v139;
                  __asm { PRFM            #0, [X11] }
                  --v135;
                }
                while (v135);
              }
              (*((void (**)(uint64_t))&_MergedGlobals_9 + *(unsigned __int16 *)(v12 + 8 * v127++ + 6) + 10))(v13 + 48 * v130);
            }
            while (v127 < v126 + v124 - v197);
          }
          uint64_t v141 = v84;
          if (v203 == v126)
          {
            unsigned int v142 = v192;
            signed int v121 = atomic_fetch_add((atomic_uint *volatile)(a2 + 120), v192);
            signed int v203 = v142;
          }
          else
          {
            v203 -= v126;
            signed int v121 = v126 + v124;
          }
          v123 += v126;
          signed int v122 = v202;
          uint64_t v84 = v141;
        }
        while (v121 < v202);
        signed int add = v121;
        if (v123)
        {
          __dmb(0xBu);
          atomic_fetch_add((atomic_uint *volatile)(a2 + 124), v123);
        }
        float32x4_t v70 = (atomic_uint *)a2;
        atomic_uint v81 = v186;
        signed int v8 = v202;
      }
      v81 += *(_DWORD *)(v174 + 4 * v191++);
    }
    while (v191 != v181);
  }
  if (v70[31] < v81)
  {
    int v143 = 30000;
    while (v70[31] < v81)
    {
      if (!--v143)
      {
        sched_yield();
        int v143 = 10000;
      }
    }
  }
  int v144 = v161 + v167;
  uint64_t v145 = v175;
  if (v175 < v161 + (int)v167)
  {
    do
    {
      if ((int)v84 >= v144) {
        uint64_t v146 = v144;
      }
      else {
        uint64_t v146 = v84;
      }
      unsigned int v147 = v146 - v145;
      if ((int)v146 <= (int)v145)
      {
        uint64_t v146 = v145;
        uint64_t v151 = a2;
      }
      else
      {
        int32x4_t v148 = (void *)(v169 - 96 * v177 + 96 * (int)v145);
        int v149 = v146 - v145;
        do
        {
          (*(void (**)(void, uint64_t, uint64_t, void, void, float, float, double))(*(void *)*v148
                                                                                                 + 272))(*v148, a3, a4, 0, 0, v9, v10, 0.0);
          uint64_t v150 = *v148;
          v148 += 12;
          (*(void (**)(void))(*(void *)v150 + 280))();
          --v149;
        }
        while (v149);
        atomic_fetch_add((atomic_uint *volatile)(a2 + 140), v147);
        uint64_t v151 = a2;
      }
      if (v84 == v146)
      {
        uint64_t v146 = atomic_fetch_add((atomic_uint *volatile)(v151 + 136), 2u);
        LODWORD(v84) = v146 + 2;
      }
      uint64_t v145 = v146;
    }
    while ((int)v146 < v144);
  }
  return (v160 + v160 * v168);
}

uint64_t physx::Dy::SolverCoreGeneral::writeBackV(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, _DWORD *a8, uint64_t a9, uint64_t a10)
{
  if (a5)
  {
    uint64_t v12 = a5;
    uint64_t v13 = a4 + 4;
    do
    {
      uint64_t v14 = *(uint64_t (**)(void))(a10 + 8 * **(unsigned __int8 **)(a2 + 48 * *(unsigned int *)(v13 - 4) + 32));
      v13 += 8;
      uint64_t result = v14();
      --v12;
    }
    while (v12);
  }
  *a8 = 0;
  return result;
}

void physx::Dy::SolverCoreRegisterArticulationFnsCoulomb(physx::Dy *this)
{
  qword_26AF713D8 = (uint64_t)physx::Dy::solveExtContactCoulombBlock;
  qword_26AF713E0 = (uint64_t)physx::Dy::solveExt1DBlock;
  qword_26AF71450 = (uint64_t)physx::Dy::solveExtContactCoulombBlockWriteBack;
  qword_26AF71458 = (uint64_t)physx::Dy::solveExt1DBlockWriteBack;
  qword_26AF714C8 = (uint64_t)physx::Dy::solveExtContactCoulombConcludeBlock;
  qword_26AF714D0 = (uint64_t)physx::Dy::solveExt1DConcludeBlock;
  qword_26AF71420 = (uint64_t)physx::Dy::solveExtFrictionBlock;
  qword_26AF71498 = (uint64_t)physx::Dy::solveExtFrictionBlockWriteBack;
  qword_26AF71510 = (uint64_t)physx::Dy::solveExtFrictionBlock;
}

void physx::Dy::solveExtContactCoulombBlock(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    uint64_t v3 = a2;
    do
    {
      physx::Dy::solveExtContactCoulomb(a1);
      a1 += 48;
      --v3;
    }
    while (v3);
  }
}

uint64_t physx::Dy::solveExtContactCoulombBlockWriteBack(uint64_t result, unsigned int a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = result;
    uint64_t v5 = a2;
    do
    {
      if (*(__int16 *)(v4 + 16) == -1) {
        unsigned int v6 = *(_DWORD *)(v4 + 20);
      }
      else {
        unsigned int v6 = 0;
      }
      if (*(__int16 *)(v4 + 18) == -1) {
        unsigned int v7 = *(_DWORD *)(v4 + 24);
      }
      else {
        unsigned int v7 = 0;
      }
      uint64_t v8 = *(void *)(a3 + 24);
      uint64_t v9 = v8 + 112 * v6;
      uint64_t v10 = v8 + 112 * v7;
      physx::Dy::solveExtContactCoulomb(v4);
      uint64_t result = physx::Dy::writeBackContactCoulomb(v4, a3, v9, v10);
      v4 += 48;
      --v5;
    }
    while (v5);
  }
  unsigned int v11 = *(_DWORD *)(a3 + 16);
  if (v11)
  {
    unsigned int add = atomic_fetch_add(*(atomic_uint *volatile *)(a3 + 48), v11);
    int v13 = *(_DWORD *)(a3 + 16);
    if (v13)
    {
      uint64_t v14 = 0;
      unint64_t v15 = 0;
      int v16 = add + v11 - v13;
      do
      {
        float32x4_t v17 = (_OWORD *)(*(void *)(a3 + 8) + v14);
        atomic_uint v18 = (_OWORD *)(*(void *)(a3 + 32) + 32 * (v16 + v15));
        long long v19 = v17[1];
        *atomic_uint v18 = *v17;
        v18[1] = v19;
        ++v15;
        v14 += 32;
      }
      while (v15 < *(unsigned int *)(a3 + 16));
    }
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

unint64_t physx::Dy::solveExtContactCoulombConcludeBlock(unint64_t result, unsigned int a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = a2;
    do
    {
      physx::Dy::solveExtContactCoulomb(v2);
      uint64_t result = physx::Dy::concludeContactCoulomb(*(void *)(v2 + 32));
      v2 += 48;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t physx::Dy::solveExtFrictionBlock(uint64_t result, unsigned int a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9, float32x2_t a10, float32x4_t a11)
{
  if (a2)
  {
    uint64_t v12 = result;
    uint64_t v13 = a2;
    do
    {
      uint64_t result = physx::Dy::solveExtFriction(v12, a3, a4, a5, a6, a7, a8, a9, a10, a11);
      v12 += 48;
      --v13;
    }
    while (v13);
  }
  return result;
}

uint64_t physx::Dy::solveExtFrictionBlockWriteBack(uint64_t result, unsigned int a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9, float32x2_t a10, float32x4_t a11)
{
  if (a2)
  {
    uint64_t v12 = result;
    uint64_t v13 = a2;
    do
    {
      uint64_t result = physx::Dy::solveExtFriction(v12, a3, a4, a5, a6, a7, a8, a9, a10, a11);
      v12 += 48;
      --v13;
    }
    while (v13);
  }
  return result;
}

uint64_t physx::Dy::SolverCoreGeneralPF::destroyV(physx::Dy::SolverCoreGeneralPF *this)
{
  (*(void (**)(physx::Dy::SolverCoreGeneralPF *))(*(void *)this + 8))(this);
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
  return v1();
}

uint64_t physx::Dy::SolverCoreGeneralPF::solveV_Blocks(uint64_t a1, int *a2)
{
  uint64_t v146 = *MEMORY[0x263EF8340];
  for (uint64_t i = 16; i != 1040; i += 32)
    *(void *)&v145[i] = 0x7F0000007FLL;
  uint64_t v3 = *((void *)a2 + 1);
  uint64_t v140 = *((void *)a2 + 2);
  int32x4_t v138 = v145;
  uint64_t v139 = 0x2000000000;
  char v137 = 0;
  long long v144 = *(_OWORD *)(a2 + 58);
  uint64_t v4 = a2[16];
  uint64_t v5 = a2[6];
  uint64_t v6 = a2[10];
  uint64_t v7 = *((void *)a2 + 4);
  if (v4)
  {
    uint64_t v125 = *((void *)a2 + 11);
    uint64_t v126 = v3;
    uint64_t v127 = a2[6];
    uint64_t v128 = *((void *)a2 + 4);
    uint64_t v129 = a2[10];
    uint64_t v8 = a2[44];
    uint64_t v10 = *((void *)a2 + 6);
    uint64_t v9 = *((void *)a2 + 7);
    uint64_t v12 = *((void *)a2 + 20);
    uint64_t v11 = *((void *)a2 + 21);
    int v131 = a2[1];
    int v132 = *a2;
    if (*a2)
    {
      int v13 = *a2;
      do
      {
        int v133 = v13;
        if (v13 == 1) {
          uint64_t v14 = (uint64_t (**)(uint64_t))&unk_26AF714B0;
        }
        else {
          uint64_t v14 = (uint64_t (**)(uint64_t))&unk_26AF713C0;
        }
        if ((int)v4 >= 1)
        {
          for (uint64_t j = 0; j != v4; ++j)
          {
            int v16 = (unsigned int *)(v9 + 8 * j);
            uint64_t v17 = *((unsigned __int16 *)v16 + 2);
            unsigned int v18 = *v16;
            _X9 = *(void *)(v10 + 48 * v18 + 32);
            int v20 = ~((_X9 + 383) >> 5) + (_X9 >> 5);
            do
            {
              __asm { PRFM            #0, [X9] }
              _X9 += 32;
              _CF = __CFADD__(v20++, 1);
            }
            while (!_CF);
            if (v17)
            {
              int v26 = (uint64_t *)(v10 + 8 + 48 * v18);
              uint64_t v27 = v17;
              do
              {
                _X11 = *(v26 - 1);
                __asm { PRFM            #0, [X11] }
                uint64_t v31 = *v26;
                v26 += 6;
                _X11 = v31;
                __asm { PRFM            #0, [X11] }
                --v27;
              }
              while (v27);
            }
            uint64_t result = v14[*(unsigned __int16 *)(v9 + 8 * j + 6)](v10 + 48 * v18);
          }
        }
        int v13 = v133 - 1;
      }
      while (v133 != 1);
    }
    if ((int)v8 > 0)
    {
      int v34 = 2 * v132;
      if (2 * v132)
      {
        do
        {
          uint64_t v35 = 0;
          int v134 = v34;
          if (v34 == 1) {
            uint64_t v36 = (uint64_t (**)(uint64_t))&unk_26AF714B0;
          }
          else {
            uint64_t v36 = (uint64_t (**)(uint64_t))&unk_26AF713C0;
          }
          do
          {
            float32x4_t v37 = (unsigned int *)(v11 + 8 * v35);
            uint64_t v38 = *((unsigned __int16 *)v37 + 2);
            unsigned int v39 = *v37;
            _X9 = *(void *)(v12 + 48 * v39 + 32);
            int v41 = ~((_X9 + 383) >> 5) + (_X9 >> 5);
            do
            {
              __asm { PRFM            #0, [X9] }
              _X9 += 32;
              _CF = __CFADD__(v41++, 1);
            }
            while (!_CF);
            if (v38)
            {
              int v43 = (uint64_t *)(v12 + 8 + 48 * v39);
              uint64_t v44 = v38;
              do
              {
                _X11 = *(v43 - 1);
                __asm { PRFM            #0, [X11] }
                uint64_t v48 = *v43;
                v43 += 6;
                _X11 = v48;
                __asm { PRFM            #0, [X11] }
                --v44;
              }
              while (v44);
            }
            uint64_t result = v36[*(unsigned __int16 *)(v11 + 8 * v35++ + 6)](v12 + 48 * v39);
          }
          while (v35 != v8);
          int v34 = v134 - 1;
        }
        while (v134 != 1);
      }
    }
    uint64_t v50 = v127;
    if (v127)
    {
      uint64_t v51 = v125 + 16;
      uint64_t v52 = v126 + 16;
      do
      {
        *(void *)(v51 - 16) = *(void *)(v52 - 16);
        *(_DWORD *)(v51 - 8) = *(_DWORD *)(v52 - 8);
        *(void *)uint64_t v51 = *(void *)v52;
        *(_DWORD *)(v51 + 8) = *(_DWORD *)(v52 + 8);
        v51 += 32;
        v52 += 32;
        --v50;
      }
      while (v50);
    }
    uint64_t v54 = v128;
    uint64_t v53 = v129;
    if (v129)
    {
      do
      {
        uint64_t v55 = (uint64_t (*)(uint64_t, void))physx::Dy::ArticulationPImpl::sSaveVelocity[*(unsigned int *)(*(void *)v54 + 40)];
        if (v55) {
          uint64_t result = v55(v54, *((void *)&v144 + 1));
        }
        v54 += 96;
        --v53;
      }
      while (v53);
    }
    if (v131 != 1)
    {
      int v56 = 0;
      do
      {
        int v135 = v56;
        if ((int)v4 >= 1)
        {
          for (uint64_t k = 0; k != v4; ++k)
          {
            uint64_t v58 = (unsigned int *)(v9 + 8 * k);
            uint64_t v59 = *((unsigned __int16 *)v58 + 2);
            unsigned int v60 = *v58;
            _X9 = *(void *)(v10 + 48 * v60 + 32);
            int v62 = ~((_X9 + 383) >> 5) + (_X9 >> 5);
            do
            {
              __asm { PRFM            #0, [X9] }
              _X9 += 32;
              _CF = __CFADD__(v62++, 1);
            }
            while (!_CF);
            if (v59)
            {
              int v64 = (uint64_t *)(v10 + 8 + 48 * v60);
              uint64_t v65 = v59;
              do
              {
                _X11 = *(v64 - 1);
                __asm { PRFM            #0, [X11] }
                uint64_t v69 = *v64;
                v64 += 6;
                _X11 = v69;
                __asm { PRFM            #0, [X11] }
                --v65;
              }
              while (v65);
            }
            uint64_t result = (*((uint64_t (**)(uint64_t))&_MergedGlobals_9 + *(unsigned __int16 *)(v9 + 8 * k + 6) + 30))(v10 + 48 * v60);
          }
        }
        if ((int)v8 >= 1)
        {
          for (uint64_t m = 0; m != v8; ++m)
          {
            int v72 = (unsigned int *)(v11 + 8 * m);
            uint64_t v73 = *((unsigned __int16 *)v72 + 2);
            unsigned int v74 = *v72;
            _X9 = *(void *)(v12 + 48 * v74 + 32);
            int v76 = ~((_X9 + 383) >> 5) + (_X9 >> 5);
            do
            {
              __asm { PRFM            #0, [X9] }
              _X9 += 32;
              _CF = __CFADD__(v76++, 1);
            }
            while (!_CF);
            if (v73)
            {
              int32x4_t v78 = (uint64_t *)(v12 + 8 + 48 * v74);
              uint64_t v79 = v73;
              do
              {
                _X11 = *(v78 - 1);
                __asm { PRFM            #0, [X11] }
                uint64_t v83 = *v78;
                v78 += 6;
                _X11 = v83;
                __asm { PRFM            #0, [X11] }
                --v79;
              }
              while (v79);
            }
            uint64_t result = (*((uint64_t (**)(uint64_t))&_MergedGlobals_9 + *(unsigned __int16 *)(v11 + 8 * m + 6)
                                                                            + 30))(v12 + 48 * v74);
          }
        }
        int v56 = v135 + 1;
      }
      while (v135 + 1 != v131 - 1);
    }
    uint64_t v136 = *((void *)a2 + 27);
    uint64_t v85 = *((void *)a2 + 25);
    int v86 = a2[52];
    char v137 = 1;
    uint64_t v143 = v136;
    int v142 = v86;
    uint64_t v141 = v85;
    if (v131)
    {
      if ((int)v4 >= 1)
      {
        for (uint64_t n = 0; n != v4; ++n)
        {
          signed int v88 = (unsigned int *)(v9 + 8 * n);
          uint64_t v89 = *((unsigned __int16 *)v88 + 2);
          unsigned int v90 = *v88;
          _X9 = *(void *)(v10 + 48 * v90 + 32);
          int v92 = ~((_X9 + 383) >> 5) + (_X9 >> 5);
          do
          {
            __asm { PRFM            #0, [X9] }
            _X9 += 32;
            _CF = __CFADD__(v92++, 1);
          }
          while (!_CF);
          if (v89)
          {
            int v94 = (uint64_t *)(v10 + 8 + 48 * v90);
            uint64_t v95 = v89;
            do
            {
              _X11 = *(v94 - 1);
              __asm { PRFM            #0, [X11] }
              uint64_t v99 = *v94;
              v94 += 6;
              _X11 = v99;
              __asm { PRFM            #0, [X11] }
              --v95;
            }
            while (v95);
          }
          uint64_t result = (*((uint64_t (**)(uint64_t))&_MergedGlobals_9 + *(unsigned __int16 *)(v9 + 8 * n + 6) + 45))(v10 + 48 * v90);
        }
      }
      if ((int)v8 >= 1)
      {
        for (iuint64_t i = 0; ii != v8; ++ii)
        {
          int32x4_t v102 = (unsigned int *)(v11 + 8 * ii);
          uint64_t v103 = *((unsigned __int16 *)v102 + 2);
          unsigned int v104 = *v102;
          _X9 = *(void *)(v12 + 48 * v104 + 32);
          int v106 = ~((_X9 + 383) >> 5) + (_X9 >> 5);
          do
          {
            __asm { PRFM            #0, [X9] }
            _X9 += 32;
            _CF = __CFADD__(v106++, 1);
          }
          while (!_CF);
          if (v103)
          {
            float32x4_t v108 = (uint64_t *)(v12 + 8 + 48 * v104);
            uint64_t v109 = v103;
            do
            {
              _X11 = *(v108 - 1);
              __asm { PRFM            #0, [X11] }
              uint64_t v113 = *v108;
              v108 += 6;
              _X11 = v113;
              __asm { PRFM            #0, [X11] }
              --v109;
            }
            while (v109);
          }
          uint64_t result = (*((uint64_t (**)(uint64_t))&_MergedGlobals_9 + *(unsigned __int16 *)(v11 + 8 * ii + 6) + 45))(v12 + 48 * v104);
        }
      }
    }
    int v115 = v139;
    if (v139)
    {
      unsigned int add = atomic_fetch_add((atomic_uint *volatile)&v136, v139);
      if (v139)
      {
        uint64_t v117 = 0;
        unint64_t v118 = 0;
        int v119 = add + v115 - v139;
        do
        {
          int v120 = (_OWORD *)(v85 + 32 * (v119 + v118));
          long long v121 = *(_OWORD *)&v138[v117 + 16];
          _OWORD *v120 = *(_OWORD *)&v138[v117];
          v120[1] = v121;
          ++v118;
          v117 += 32;
        }
        while (v118 < v139);
      }
    }
  }
  else
  {
    if (v5)
    {
      uint64_t v122 = *((void *)a2 + 11) + 16;
      uint64_t v123 = v3 + 16;
      do
      {
        *(void *)(v122 - 16) = *(void *)(v123 - 16);
        *(_DWORD *)(v122 - 8) = *(_DWORD *)(v123 - 8);
        *(void *)uint64_t v122 = *(void *)v123;
        *(_DWORD *)(v122 + 8) = *(_DWORD *)(v123 + 8);
        v122 += 32;
        v123 += 32;
        --v5;
      }
      while (v5);
    }
    if (v6)
    {
      do
      {
        signed int v124 = (uint64_t (*)(uint64_t, void))physx::Dy::ArticulationPImpl::sSaveVelocity[*(unsigned int *)(*(void *)v7 + 40)];
        if (v124) {
          uint64_t result = v124(v7, *((void *)&v144 + 1));
        }
        v7 += 96;
        --v6;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t physx::Dy::SolverCoreGeneralPF::solveVParallelAndWriteBack(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2;
  uint64_t v273 = *MEMORY[0x263EF8340];
  unsigned int v243 = a2[24];
  for (uint64_t i = 16; i != 1040; i += 32)
    *(void *)&v272[i] = 0x7F0000007FLL;
  int v6 = 0;
  unsigned int v7 = 0;
  unsigned int v216 = 0;
  int v8 = 0;
  int v9 = 0;
  int v208 = a2[44];
  int v209 = a2[16];
  int v10 = *a2;
  int v201 = a2[6];
  int v202 = a2[1];
  signed int v203 = a2[10];
  signed int add = atomic_fetch_add(a2 + 30, v243);
  unsigned int v265 = atomic_fetch_add(a2 + 49, v243);
  uint64_t v11 = a2[20];
  uint64_t v223 = *((void *)a2 + 9);
  uint64_t v224 = *((void *)a2 + 23);
  uint64_t v225 = a2[48];
  uint64_t v12 = *((void *)a2 + 6);
  int v206 = v10;
  unsigned int v13 = v10 - 1;
  uint64_t v245 = *((void *)a2 + 21);
  uint64_t v246 = *((void *)a2 + 7);
  uint64_t v270 = *((void *)a2 + 20);
  char v14 = 1;
  unsigned int v15 = v13;
  unsigned int v253 = v243;
  uint64_t v219 = v11;
  unsigned int v210 = v13;
  do
  {
    char v16 = v14;
    if (v14) {
      uint64_t v17 = 240;
    }
    else {
      uint64_t v17 = 480;
    }
    if (v7 < v6 + v13)
    {
      char v214 = v16;
      unsigned int v220 = v15;
      unsigned int v18 = (char *)&_MergedGlobals_9 + v17;
      unsigned int v232 = v13 + v216 + v6 - v7;
      uint64_t v19 = add;
      do
      {
        if (v11)
        {
          uint64_t v248 = 0;
          int v262 = v216 * v209;
          do
          {
            uint64_t v20 = v19;
            if (v4[31] < v8)
            {
              int v21 = 30000;
              while (v4[31] < v8)
              {
                if (!--v21)
                {
                  sched_yield();
                  int v21 = 10000;
                }
              }
            }
            uint64_t v22 = v248;
            int v237 = *(_DWORD *)(v223 + 4 * v248);
            v9 += v237;
            uint64_t v19 = v20;
            if ((int)v20 < v9)
            {
              int v226 = v8;
              unsigned int v23 = 0;
              signed int v24 = v253;
              int v256 = v9;
              do
              {
                int v25 = v19;
                int v26 = v9 - v19;
                signed int v254 = v24;
                if (v26 >= v24) {
                  int v27 = v24;
                }
                else {
                  int v27 = v26;
                }
                if (v27 >= 1)
                {
                  uint64_t v28 = v25 - v262;
                  do
                  {
                    uint64_t v29 = (unsigned int *)(v246 + 8 * v28);
                    uint64_t v30 = *((unsigned __int16 *)v29 + 2);
                    unsigned int v31 = *v29;
                    _X9 = *(void *)(v12 + 48 * v31 + 32);
                    int v33 = ~((_X9 + 383) >> 5) + (_X9 >> 5);
                    do
                    {
                      __asm { PRFM            #0, [X9] }
                      _X9 += 32;
                      _CF = __CFADD__(v33++, 1);
                    }
                    while (!_CF);
                    if (v30)
                    {
                      unsigned int v39 = (uint64_t *)(v12 + 8 + 48 * v31);
                      uint64_t v40 = v30;
                      do
                      {
                        _X11 = *(v39 - 1);
                        __asm { PRFM            #0, [X11] }
                        uint64_t v44 = *v39;
                        v39 += 6;
                        _X11 = v44;
                        __asm { PRFM            #0, [X11] }
                        --v40;
                      }
                      while (v40);
                    }
                    (*(void (**)(uint64_t))&v18[8 * *(unsigned __int16 *)(v246 + 8 * v28++ + 6)])(v12 + 48 * v31);
                  }
                  while (v28 < v27 + v25 - v262);
                }
                signed int v24 = v254 - v27;
                if (v254 == v27)
                {
                  signed int v24 = v243;
                  uint64_t v19 = atomic_fetch_add(a2 + 30, v243);
                }
                else
                {
                  uint64_t v19 = (v27 + v25);
                }
                int v9 = v256;
                v23 += v27;
              }
              while ((int)v19 < v256);
              unsigned int v253 = v24;
              if (v23)
              {
                __dmb(0xBu);
                uint64_t v4 = a2;
                atomic_fetch_add(a2 + 31, v23);
              }
              else
              {
                uint64_t v4 = a2;
              }
              int v8 = v226;
              uint64_t v11 = v219;
              uint64_t v22 = v248;
            }
            v8 += v237;
            uint64_t v248 = v22 + 1;
          }
          while (v22 + 1 != v11);
        }
        ++v216;
      }
      while (v216 != v232);
      signed int add = v19;
      unsigned int v216 = v232;
      unsigned int v15 = v220;
      unsigned int v7 = v220;
      unsigned int v13 = v210;
      char v16 = v214;
    }
    char v14 = 0;
    ++v15;
    int v6 = 1;
  }
  while ((v16 & 1) != 0);
  int v46 = 0;
  unsigned int v215 = 0;
  signed int v47 = 0;
  int v48 = 2 * v206 - 1;
  char v49 = 1;
  int v50 = v48;
  signed int v263 = v243;
  signed int v51 = v265;
  int v204 = v48;
  do
  {
    char v52 = v49;
    if (v49) {
      uint64_t v53 = 240;
    }
    else {
      uint64_t v53 = 480;
    }
    if (v7 < v46 + v48)
    {
      char v205 = v52;
      unsigned int v207 = v50;
      uint64_t v54 = (char *)&_MergedGlobals_9 + v53;
      unsigned int v211 = v48 + v215 + v46 - v7;
      int v257 = v9;
      do
      {
        if (v225)
        {
          uint64_t v233 = 0;
          int v238 = v215 * v208;
          do
          {
            if (v4[31] < v8)
            {
              int v55 = 30000;
              while (v4[31] < v8)
              {
                if (!--v55)
                {
                  sched_yield();
                  int v55 = 10000;
                }
              }
            }
            int v56 = *(_DWORD *)(v224 + 4 * v233);
            v47 += v56;
            if (v51 >= v47)
            {
              signed int v58 = v263;
            }
            else
            {
              int v221 = *(_DWORD *)(v224 + 4 * v233);
              int v227 = v8;
              unsigned int v57 = 0;
              signed int v58 = v263;
              signed int v249 = v47;
              do
              {
                signed int v264 = v58;
                signed int v266 = v51;
                if (v47 - v51 >= v58) {
                  int v59 = v58;
                }
                else {
                  int v59 = v47 - v51;
                }
                uint64_t v60 = v270;
                if (v59 >= 1)
                {
                  uint64_t v61 = v51 - v238;
                  do
                  {
                    int v62 = (unsigned int *)(v245 + 8 * v61);
                    uint64_t v63 = *((unsigned __int16 *)v62 + 2);
                    unsigned int v64 = *v62;
                    _X9 = *(void *)(v60 + 48 * v64 + 32);
                    int v66 = ~((_X9 + 383) >> 5) + (_X9 >> 5);
                    do
                    {
                      __asm { PRFM            #0, [X9] }
                      _X9 += 32;
                      _CF = __CFADD__(v66++, 1);
                    }
                    while (!_CF);
                    if (v63)
                    {
                      float32x4_t v68 = (uint64_t *)(v270 + 8 + 48 * v64);
                      uint64_t v69 = v63;
                      do
                      {
                        _X11 = *(v68 - 1);
                        __asm { PRFM            #0, [X11] }
                        uint64_t v73 = *v68;
                        v68 += 6;
                        _X11 = v73;
                        __asm { PRFM            #0, [X11] }
                        --v69;
                      }
                      while (v69);
                    }
                    uint64_t v60 = v270;
                    (*(void (**)(uint64_t))&v54[8 * *(unsigned __int16 *)(v245 + 8 * v61++ + 6)])(v270 + 48 * v64);
                  }
                  while (v61 < v59 + v266 - v238);
                }
                signed int v58 = v264 - v59;
                if (v264 == v59)
                {
                  signed int v58 = v243;
                  signed int v51 = atomic_fetch_add(a2 + 49, v243);
                }
                else
                {
                  signed int v51 = v59 + v266;
                }
                int v9 = v257;
                signed int v47 = v249;
                v57 += v59;
              }
              while (v51 < v249);
              if (v57)
              {
                __dmb(0xBu);
                uint64_t v4 = a2;
                atomic_fetch_add(a2 + 31, v57);
              }
              else
              {
                uint64_t v4 = a2;
              }
              int v8 = v227;
              int v56 = v221;
            }
            signed int v263 = v58;
            v8 += v56;
            ++v233;
          }
          while (v233 != v225);
        }
        ++v215;
      }
      while (v215 != v211);
      unsigned int v215 = v211;
      char v52 = v205;
      int v50 = v207;
      unsigned int v7 = v207;
      int v48 = v204;
    }
    char v49 = 0;
    ++v50;
    int v46 = 1;
  }
  while ((v52 & 1) != 0);
  signed int v75 = v203;
  if (v4[31] < v8)
  {
    int v76 = 30000;
    while (v4[31] < v8)
    {
      if (!--v76)
      {
        sched_yield();
        int v76 = 10000;
      }
    }
  }
  signed int v267 = v51;
  int v228 = v8;
  uint64_t v77 = *((void *)v4 + 4);
  uint64_t v234 = *((void *)v4 + 11);
  uint64_t v239 = *((void *)v4 + 1);
  signed int v78 = atomic_fetch_add(v4 + 32, 0x40u);
  if (v78 >= v203)
  {
    unsigned int v79 = 0;
    int v80 = 64;
  }
  else
  {
    unsigned int v79 = 0;
    int v80 = 64;
    do
    {
      if (v75 - v78 >= 64) {
        int v81 = 64;
      }
      else {
        int v81 = v75 - v78;
      }
      if (v75 - v78 >= 1)
      {
        if (v81 <= 1) {
          int v82 = 1;
        }
        else {
          int v82 = v81;
        }
        uint64_t v83 = v77 + 96 * v78;
        v78 += v82;
        do
        {
          uint64_t v84 = (void (*)(uint64_t, uint64_t))physx::Dy::ArticulationPImpl::sSaveVelocity[*(unsigned int *)(*(void *)v83 + 40)];
          if (v84) {
            v84(v83, a4);
          }
          v83 += 96;
          --v82;
        }
        while (v82);
        signed int v75 = v203;
      }
      v80 -= v81;
      if (!v80)
      {
        int v80 = 64;
        signed int v78 = atomic_fetch_add(a2 + 32, 0x40u);
      }
      v79 += 2 * v81;
    }
    while (v78 < v75);
  }
  int v85 = v78 - v75;
  if (v78 - v75 >= v201)
  {
    signed int v86 = v47;
  }
  else
  {
    signed int v86 = v47;
    do
    {
      int v87 = v201 - v85;
      if (v80 < v201 - v85) {
        int v87 = v80;
      }
      if (v87 >= 1)
      {
        uint64_t v88 = 32 * v85;
        int v89 = v87;
        uint64_t v90 = v239;
        uint64_t v91 = v234;
        do
        {
          _X13 = v90 + v88;
          __asm { PRFM            #0, [X13,#0x100] }
          _X14 = v91 + v88;
          __asm { PRFM            #0, [X14,#0x100] }
          *(void *)_X14 = *(void *)(v90 + v88);
          *(_DWORD *)(_X14 + 8) = *(_DWORD *)(v90 + v88 + 8);
          *(void *)(_X14 + 16) = *(void *)(v90 + v88 + 16);
          *(_DWORD *)(_X14 + 24) = *(_DWORD *)(v90 + v88 + 24);
          v91 += 32;
          v90 += 32;
          --v89;
        }
        while (v89);
      }
      v79 += v87;
      int v80 = 64;
      int v85 = atomic_fetch_add(a2 + 32, 0x40u) - v75;
    }
    while (v85 < v201);
  }
  float32x2x2_t v96 = a2;
  if (v79)
  {
    __dmb(0xBu);
    atomic_fetch_add(a2 + 33, v79);
  }
  int v97 = v228;
  if (a2[33] < v75 + v201)
  {
    int v98 = 30000;
    while (a2[33] < v75 + v201)
    {
      if (!--v98)
      {
        sched_yield();
        int v98 = 10000;
      }
    }
  }
  if (v202 == 1)
  {
    unsigned int v212 = v216;
    signed int v101 = v267;
  }
  else
  {
    unsigned int v99 = v216;
    unsigned int v212 = v216 + v202 - 1;
    uint64_t v100 = v12 + 8;
    signed int v101 = v267;
    do
    {
      unsigned int v217 = v99;
      if (v219)
      {
        uint64_t v102 = 0;
        int v240 = v99 * v209;
        signed int v268 = v101;
        signed int v250 = v86;
        do
        {
          if (v96[31] < v97)
          {
            int v103 = 30000;
            while (v96[31] < v97)
            {
              if (!--v103)
              {
                sched_yield();
                int v103 = 10000;
              }
            }
          }
          int v235 = *(_DWORD *)(v223 + 4 * v102);
          v9 += v235;
          signed int v104 = add;
          if (add >= v9)
          {
            signed int v106 = v253;
          }
          else
          {
            uint64_t v222 = v102;
            int v229 = v97;
            unsigned int v105 = 0;
            signed int v106 = v253;
            signed int v258 = v9;
            do
            {
              signed int v107 = v104;
              int v108 = v9 - v104;
              signed int v109 = v106;
              if (v108 >= v106) {
                int v108 = v106;
              }
              int v110 = v108;
              if (v108 >= 1)
              {
                uint64_t v111 = v107 - v240;
                uint64_t v112 = v108 + v107 - v240;
                do
                {
                  uint64_t v113 = (unsigned int *)(v246 + 8 * v111);
                  uint64_t v114 = *((unsigned __int16 *)v113 + 2);
                  unsigned int v115 = *v113;
                  _X9 = *(void *)(v12 + 48 * v115 + 32);
                  int v117 = ~((_X9 + 383) >> 5) + (_X9 >> 5);
                  do
                  {
                    __asm { PRFM            #0, [X9] }
                    _X9 += 32;
                    _CF = __CFADD__(v117++, 1);
                  }
                  while (!_CF);
                  if (v114)
                  {
                    int v119 = (uint64_t *)(v100 + 48 * v115);
                    uint64_t v120 = v114;
                    do
                    {
                      _X11 = *(v119 - 1);
                      __asm { PRFM            #0, [X11] }
                      uint64_t v124 = *v119;
                      v119 += 6;
                      _X11 = v124;
                      __asm { PRFM            #0, [X11] }
                      --v120;
                    }
                    while (v120);
                  }
                  (*((void (**)(uint64_t))&_MergedGlobals_9 + *(unsigned __int16 *)(v246 + 8 * v111++ + 6)
                                                                      + 30))(v12 + 48 * v115);
                }
                while (v111 < v112);
              }
              signed int v106 = v109 - v110;
              if (v109 == v110)
              {
                signed int v106 = v243;
                signed int v104 = atomic_fetch_add(a2 + 30, v243);
              }
              else
              {
                signed int v104 = v110 + v107;
              }
              int v9 = v258;
              signed int v86 = v250;
              v105 += v110;
            }
            while (v104 < v258);
            signed int add = v104;
            if (v105)
            {
              __dmb(0xBu);
              float32x2x2_t v96 = a2;
              atomic_fetch_add(a2 + 31, v105);
            }
            else
            {
              float32x2x2_t v96 = a2;
            }
            int v97 = v229;
            signed int v101 = v268;
            uint64_t v102 = v222;
          }
          unsigned int v253 = v106;
          v97 += v235;
          ++v102;
        }
        while (v102 != v219);
      }
      unsigned int v126 = v217 + 1;
      unsigned int v218 = v217 + 1;
      if (v225)
      {
        uint64_t v127 = 0;
        uint64_t v259 = (int)(add - v126 * v209);
        do
        {
          int v230 = v97;
          if (a2[31] < v97)
          {
            int v128 = 30000;
            while (a2[31] < v97)
            {
              if (!--v128)
              {
                sched_yield();
                int v128 = 10000;
              }
            }
          }
          int v129 = *(_DWORD *)(v224 + 4 * v127);
          v86 += v129;
          if (v101 >= v86)
          {
            signed int v131 = v263;
          }
          else
          {
            int v236 = *(_DWORD *)(v224 + 4 * v127);
            uint64_t v241 = v127;
            unsigned int v130 = 0;
            signed int v131 = v263;
            signed int v251 = v86;
            do
            {
              signed int v132 = v131;
              if (v86 - v101 >= v131) {
                int v133 = v131;
              }
              else {
                int v133 = v86 - v101;
              }
              if (v133 >= 1)
              {
                uint64_t v134 = v259;
                do
                {
                  int v135 = (unsigned int *)(v246 + 8 * v134);
                  uint64_t v136 = *((unsigned __int16 *)v135 + 2);
                  unsigned int v137 = *v135;
                  _X9 = *(void *)(v12 + 48 * v137 + 32);
                  int v139 = ~((_X9 + 383) >> 5) + (_X9 >> 5);
                  do
                  {
                    __asm { PRFM            #0, [X9] }
                    _X9 += 32;
                    _CF = __CFADD__(v139++, 1);
                  }
                  while (!_CF);
                  if (v136)
                  {
                    uint64_t v141 = (uint64_t *)(v100 + 48 * v137);
                    uint64_t v142 = v136;
                    do
                    {
                      _X11 = *(v141 - 1);
                      __asm { PRFM            #0, [X11] }
                      uint64_t v146 = *v141;
                      v141 += 6;
                      _X11 = v146;
                      __asm { PRFM            #0, [X11] }
                      --v142;
                    }
                    while (v142);
                  }
                  (*((void (**)(uint64_t))&_MergedGlobals_9 + *(unsigned __int16 *)(v246 + 8 * v134++ + 6)
                                                                      + 30))(v12 + 48 * v137);
                }
                while (v134 < v133 + (int)v259);
              }
              signed int v131 = v132 - v133;
              if (v132 == v133)
              {
                signed int v131 = v243;
                signed int v101 = atomic_fetch_add(a2 + 49, v243);
              }
              else
              {
                v101 += v133;
              }
              signed int v86 = v251;
              v130 += v133;
            }
            while (v101 < v251);
            if (v130)
            {
              __dmb(0xBu);
              atomic_fetch_add(a2 + 31, v130);
            }
            uint64_t v127 = v241;
            int v129 = v236;
          }
          signed int v263 = v131;
          int v97 = v129 + v230;
          ++v127;
        }
        while (v127 != v225);
      }
      unsigned int v99 = v218;
      float32x2x2_t v96 = a2;
    }
    while (v218 != v212);
    v215 += v202 - 1;
  }
  signed int v252 = v86;
  signed int v269 = v101;
  if (v219)
  {
    uint64_t v148 = 0;
    int v149 = v97;
    do
    {
      int v231 = v149;
      if (a2[31] < v149)
      {
        int v150 = 30000;
        while (a2[31] < v231)
        {
          if (!--v150)
          {
            sched_yield();
            int v150 = 10000;
          }
        }
      }
      int v151 = *(_DWORD *)(v223 + 4 * v148);
      v9 += v151;
      signed int v152 = add;
      if (add < v9)
      {
        int v242 = *(_DWORD *)(v223 + 4 * v148);
        uint64_t v260 = v148;
        unsigned int v153 = 0;
        unsigned int v154 = v253;
        do
        {
          signed int v155 = v152;
          int v156 = v9 - v152;
          unsigned int v157 = v154;
          if (v156 >= (int)v154) {
            uint64_t v158 = v154;
          }
          else {
            uint64_t v158 = v156;
          }
          if ((int)v158 >= 1)
          {
            for (uint64_t j = 0; j != v158; ++j)
            {
              int v160 = (unsigned int *)(v246 + 8 * j);
              uint64_t v161 = *((unsigned __int16 *)v160 + 2);
              unsigned int v162 = *v160;
              _X9 = *(void *)(v12 + 48 * v162 + 32);
              int v164 = ~((_X9 + 383) >> 5) + (_X9 >> 5);
              do
              {
                __asm { PRFM            #0, [X9] }
                _X9 += 32;
                _CF = __CFADD__(v164++, 1);
              }
              while (!_CF);
              if (v161)
              {
                int v166 = (uint64_t *)(v12 + 8 + 48 * v162);
                uint64_t v167 = v161;
                do
                {
                  _X11 = *(v166 - 1);
                  __asm { PRFM            #0, [X11] }
                  uint64_t v171 = *v166;
                  v166 += 6;
                  _X11 = v171;
                  __asm { PRFM            #0, [X11] }
                  --v167;
                }
                while (v167);
              }
              (*((void (**)(uint64_t))&_MergedGlobals_9 + *(unsigned __int16 *)(v246 + 8 * j + 6) + 45))(v12 + 48 * v162);
            }
          }
          unsigned int v154 = v157 - v158;
          if (v157 == v158)
          {
            unsigned int v154 = v243;
            signed int v152 = atomic_fetch_add(a2 + 30, v243);
          }
          else
          {
            signed int v152 = v158 + v155;
          }
          v153 += v158;
        }
        while (v152 < v9);
        signed int add = v152;
        unsigned int v253 = v154;
        if (v153)
        {
          __dmb(0xBu);
          atomic_fetch_add(a2 + 31, v153);
        }
        uint64_t v148 = v260;
        int v151 = v242;
      }
      int v149 = v151 + v231;
      ++v148;
    }
    while (v148 != v219);
  }
  else
  {
    int v149 = v97;
  }
  uint64_t v173 = a2;
  int v174 = v149;
  if (v225)
  {
    uint64_t v175 = 0;
    int v261 = v215 * v208;
    do
    {
      if (v173[31] < v174)
      {
        int v176 = 30000;
        while (v173[31] < v174)
        {
          if (!--v176)
          {
            sched_yield();
            int v176 = 10000;
          }
        }
      }
      int v177 = *(_DWORD *)(v224 + 4 * v175);
      v252 += v177;
      if (v269 < v252)
      {
        int v247 = *(_DWORD *)(v224 + 4 * v175);
        uint64_t v255 = v175;
        unsigned int v178 = 0;
        signed int v179 = v269;
        signed int v180 = v252;
        do
        {
          signed int v181 = v179;
          int v182 = v180 - v179;
          if (v182 >= v263) {
            int v183 = v263;
          }
          else {
            int v183 = v182;
          }
          uint64_t v184 = v270;
          if (v183 >= 1)
          {
            uint64_t v185 = v181 - v261;
            do
            {
              atomic_uint v186 = (unsigned int *)(v245 + 8 * v185);
              uint64_t v187 = *((unsigned __int16 *)v186 + 2);
              unsigned int v188 = *v186;
              _X9 = *(void *)(v184 + 48 * v188 + 32);
              int v190 = ~((_X9 + 383) >> 5) + (_X9 >> 5);
              do
              {
                __asm { PRFM            #0, [X9] }
                _X9 += 32;
                _CF = __CFADD__(v190++, 1);
              }
              while (!_CF);
              if (v187)
              {
                unsigned int v192 = (uint64_t *)(v270 + 8 + 48 * v188);
                uint64_t v193 = v187;
                do
                {
                  _X11 = *(v192 - 1);
                  __asm { PRFM            #0, [X11] }
                  uint64_t v197 = *v192;
                  v192 += 6;
                  _X11 = v197;
                  __asm { PRFM            #0, [X11] }
                  --v193;
                }
                while (v193);
              }
              uint64_t v184 = v270;
              (*((void (**)(uint64_t))&_MergedGlobals_9 + *(unsigned __int16 *)(v245 + 8 * v185++ + 6) + 45))(v270 + 48 * v188);
            }
            while (v185 < v183 + v181 - v261);
          }
          if (v263 == v183)
          {
            unsigned int v199 = v243;
            signed int v179 = atomic_fetch_add(a2 + 49, v243);
            signed int v263 = v199;
          }
          else
          {
            v263 -= v183;
            signed int v179 = v183 + v181;
          }
          v178 += v183;
          signed int v180 = v252;
        }
        while (v179 < v252);
        signed int v269 = v179;
        if (v178)
        {
          __dmb(0xBu);
          uint64_t v173 = a2;
          atomic_fetch_add(a2 + 31, v178);
        }
        else
        {
          uint64_t v173 = a2;
        }
        uint64_t v175 = v255;
        int v177 = v247;
      }
      v174 += v177;
      ++v175;
    }
    while (v175 != v225);
  }
  return v208 + v208 * v215 + v209 + v209 * v212;
}

uint64_t physx::Dy::SolverCoreGeneralPF::writeBackV(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, _DWORD *a8, uint64_t a9, uint64_t a10)
{
  if (a5)
  {
    uint64_t v12 = a5;
    uint64_t v13 = a4 + 4;
    do
    {
      char v14 = *(uint64_t (**)(void))(a10 + 8 * **(unsigned __int8 **)(a2 + 48 * *(unsigned int *)(v13 - 4) + 32));
      v13 += 8;
      uint64_t result = v14();
      --v12;
    }
    while (v12);
  }
  *a8 = 0;
  return result;
}

float *physx::Dy::solveContactCoulomb(float *result, double a2, double a3, double a4, double a5, double a6, float32x2_t a7, float32x2_t a8)
{
  int v10 = *(uint64_t **)result;
  uint64_t v9 = *((void *)result + 1);
  v12.i64[0] = **(void **)result;
  uint64_t v11 = (_DWORD *)(*(void *)result + 8);
  v12.i64[1] = *v11;
  v13.i64[0] = *(void *)v9;
  v13.i64[1] = *(unsigned int *)(v9 + 8);
  v15.i64[0] = *(void *)(*(void *)result + 16);
  char v14 = (_DWORD *)(*(void *)result + 24);
  v15.i64[1] = *v14;
  v16.i64[0] = *(void *)(v9 + 16);
  v16.i64[1] = *(unsigned int *)(v9 + 24);
  unint64_t v17 = *((void *)result + 4);
  if (*(_WORD *)(v17 + 2))
  {
    unint64_t v18 = v17 + *(unsigned __int16 *)(v17 + 2);
    do
    {
      unsigned int v19 = *(unsigned __int8 *)(v17 + 1);
      uint64_t result = (float *)(v17 + *(unsigned __int16 *)(v17 + 2));
      __asm { PRFM            #0, [X0,#0x20] }
      if (*(unsigned char *)(v17 + 1))
      {
        v25.i64[0] = *(void *)(v17 + 16);
        v25.i64[1] = *(unsigned int *)(v17 + 24);
        a7.i32[0] = *(_DWORD *)(v17 + 4);
        a8.i32[0] = *(_DWORD *)(v17 + 28);
        result += 8;
        float32x4_t v26 = vmulq_n_f32(v25, *(float *)(v17 + 8));
        v26.i32[3] = 0;
        float32x4_t v27 = vmulq_n_f32(v25, *(float *)(v17 + 12));
        v27.i32[3] = 0;
        float32x4_t v28 = vnegq_f32(v27);
        _X1 = (const float *)(v17 + 92);
        uint64_t v30 = *(unsigned __int8 *)(v17 + 1);
        unsigned int v31 = result;
        do
        {
          __asm { PRFUM           #0, [X1,#0x54] }
          float32x4_t v33 = *(float32x4_t *)(_X1 - 11);
          float32x4_t v34 = *(float32x4_t *)(_X1 - 7);
          float32x2_t v35 = vld1_dup_f32(v31++);
          float32x2_t v36 = vld1_dup_f32(_X1);
          v8.f32[0] = *(_X1 - 3);
          float32x4_t v37 = vsubq_f32(vmlaq_f32(vmulq_f32(v15, v33), v25, v12), vmlaq_f32(vmulq_f32(v16, v34), v25, v13));
          v37.i64[0] = vpaddq_f32(v37, v37).u64[0];
          uint64_t v38 = _X1 - 2;
          float32x2_t v39 = vld1_dup_f32(v38);
          float32x2_t v40 = vmin_f32(vadd_f32(v35, vmax_f32(vmls_lane_f32(v39, vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32), v8, 0), vneg_f32(v35))), v36);
          float32x2_t v41 = vsub_f32(v40, v35);
          float32x4_t v12 = vmlaq_n_f32(v12, v26, v41.f32[0]);
          v12.i64[1] = vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u32[0];
          float32x4_t v13 = vmlaq_n_f32(v13, v28, v41.f32[0]);
          v13.i64[1] = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u32[0];
          float32x2_t v8 = vmul_f32(a7, v41);
          float32x4_t v15 = vmlaq_n_f32(v15, v33, v8.f32[0]);
          v15.i64[1] = vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u32[0];
          float32x4_t v16 = vmlsq_lane_f32(v16, v34, vmul_f32(a8, v41), 0);
          v16.i64[1] = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u32[0];
          *uint64_t result = v40.f32[0];
          _X1 += 12;
          uint64_t result = (float *)v31;
          --v30;
        }
        while (v30);
      }
      v17 += 48 * v19 + 48;
    }
    while (v17 < v18);
  }
  uint64_t *v10 = v12.i64[0];
  _DWORD *v11 = v12.i32[2];
  *(void *)uint64_t v9 = v13.i64[0];
  *(_DWORD *)(v9 + 8) = v13.i32[2];
  v10[2] = v15.i64[0];
  *char v14 = v15.i32[2];
  *(void *)(v9 + 16) = v16.i64[0];
  *(_DWORD *)(v9 + 24) = v16.i32[2];
  return result;
}

uint64_t **physx::Dy::solveFriction(uint64_t **result, double a2, double a3, double a4, double a5, double a6, float32x2_t a7, float32x2_t a8)
{
  int v10 = *result;
  uint64_t v9 = result[1];
  v12.i64[0] = **result;
  uint64_t v11 = *result + 1;
  v12.i64[1] = *v11;
  v13.i64[0] = *v9;
  v13.i64[1] = *((unsigned int *)v9 + 2);
  v15.i64[0] = (*result)[2];
  char v14 = *result + 3;
  v15.i64[1] = *v14;
  v16.i64[0] = v9[2];
  v16.i64[1] = *((unsigned int *)v9 + 6);
  if (*((_WORD *)result + 15))
  {
    unint64_t v17 = (unint64_t)result[4];
    unint64_t v18 = v17 + 16 * *((unsigned __int16 *)result + 15);
    do
    {
      unint64_t v19 = v17 + 32;
      uint64_t result = (uint64_t **)*(unsigned __int8 *)(v17 + 1);
      uint64_t v20 = v17 + 32 + ((4 * (_WORD)result + 12) & 0x7F0);
      uint64_t v21 = *(unsigned __int8 *)(v17 + 2);
      if (*(unsigned char *)(v17 + 2))
      {
        unsigned int v22 = 0;
        unsigned int v23 = 0;
        float v24 = *(float *)(v17 + 4);
        a7.i32[0] = *(_DWORD *)(v17 + 16);
        a8.i32[0] = *(_DWORD *)(v17 + 20);
        float32x4_t v25 = (const float *)(v17 + 12);
        float32x4_t v26 = (const float *)(v17 + 8);
        float32x4_t v27 = vld1q_dup_f32(v26);
        float32x4_t v28 = vld1q_dup_f32(v25);
        if (v21 / result <= 1) {
          unsigned int v29 = 1;
        }
        else {
          unsigned int v29 = v21 / result;
        }
        do
        {
          if (result <= v21)
          {
            unsigned int v30 = v22 + v29;
            do
            {
              _X6 = v20 + ((unint64_t)v22 << 6);
              __asm { PRFM            #0, [X6,#0x80] }
              int32x4_t v37 = *(int32x4_t *)_X6;
              float32x4_t v38 = *(float32x4_t *)_X6;
              v38.i32[3] = 0;
              float32x4_t v39 = *(float32x4_t *)(_X6 + 16);
              v39.i32[3] = 0;
              float32x4_t v40 = *(float32x4_t *)(_X6 + 32);
              v40.i32[3] = 0;
              float32x2_t v41 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)_X6, 3);
              BOOL v42 = (const float *)(_X6 + 48);
              float32x2_t v43 = vld1_dup_f32(v42);
              v8.f32[0] = v24 * *(float *)(v19 + 4 * v23);
              float32x2_t v8 = (float32x2_t)vdup_lane_s32((int32x2_t)v8, 0);
              float32x4_t v44 = vmulq_f32(v12, v38);
              v44.i64[0] = vpaddq_f32(v44, v44).u64[0];
              float32x4_t v45 = vmulq_f32(v15, v39);
              v45.i64[0] = vpaddq_f32(v45, v45).u64[0];
              float32x4_t v46 = vmulq_f32(v13, v38);
              v46.i64[0] = vpaddq_f32(v46, v46).u64[0];
              float32x4_t v47 = vmulq_f32(v16, v40);
              v47.i64[0] = vpaddq_f32(v47, v47).u64[0];
              *(float32x2_t *)v44.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v44.f32), vpadd_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32));
              *(float32x2_t *)v45.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32), vpadd_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v47.f32));
              float32x4_t v48 = vmulq_f32(v27, v38);
              v48.i32[3] = 0;
              float32x4_t v49 = vmulq_f32(v28, v38);
              v49.i32[3] = 0;
              float32x2_t v50 = vmax_f32(vmin_f32(vmla_laneq_f32(vmls_laneq_f32(v41, v43, *(float32x4_t *)(_X6 + 16), 3), vsub_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v45.f32), *(float32x4_t *)(_X6 + 16), 3), v8), vneg_f32(v8));
              float32x2_t v51 = vsub_f32(v50, v41);
              float32x4_t v12 = vmlaq_n_f32(v12, v48, v51.f32[0]);
              v12.i64[1] = vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u32[0];
              float32x4_t v13 = vmlsq_lane_f32(v13, v49, v51, 0);
              v13.i64[1] = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u32[0];
              float32x4_t v15 = vmlaq_n_f32(v15, v39, vmul_f32(a7, v51).f32[0]);
              v15.i64[1] = vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u32[0];
              float32x4_t v16 = vmlsq_lane_f32(v16, v40, vmul_f32(a8, v51), 0);
              v16.i64[1] = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u32[0];
              v37.i32[3] = v50.i32[1];
              *(int32x4_t *)_X6 = v37;
              ++v22;
            }
            while (v30 != v22);
            unsigned int v22 = v30;
          }
          ++v23;
        }
        while (v22 < v21);
      }
      unint64_t v17 = v20 + (v21 << 6);
    }
    while (v17 < v18);
  }
  uint64_t *v10 = v12.i64[0];
  _DWORD *v11 = v12.i32[2];
  uint64_t *v9 = v13.i64[0];
  *((_DWORD *)v9 + 2) = v13.i32[2];
  v10[2] = v15.i64[0];
  *char v14 = v15.i32[2];
  v9[2] = v16.i64[0];
  *((_DWORD *)v9 + 6) = v16.i32[2];
  return result;
}

uint64_t physx::Dy::solveContactCoulomb_BStatic(uint64_t result, unint64_t _X1, double a3, double a4, double a5, float32x2_t a6, double a7, double a8, double a9, float32x2_t a10)
{
  v10.i64[0] = *(void *)result;
  v10.i64[1] = *(unsigned int *)(result + 8);
  v11.i64[0] = *(void *)(result + 16);
  v11.i64[1] = *(unsigned int *)(result + 24);
  if (*(_WORD *)(_X1 + 2))
  {
    unint64_t v12 = _X1 + *(unsigned __int16 *)(_X1 + 2);
    do
    {
      unsigned int v13 = *(unsigned __int8 *)(_X1 + 1);
      __asm { PRFM            #0, [X1,#0x30] }
      _X13 = _X1 + *(unsigned __int16 *)(_X1 + 2);
      __asm { PRFM            #0, [X13,#0x20] }
      if (*(unsigned char *)(_X1 + 1))
      {
        uint64_t v21 = (float *)(_X13 + 32);
        v22.i64[0] = *(void *)(_X1 + 16);
        v22.i64[1] = *(unsigned int *)(_X1 + 24);
        a6.i32[0] = *(_DWORD *)(_X1 + 4);
        float32x4_t v23 = vmulq_n_f32(v22, *(float *)(_X1 + 8));
        v23.i32[3] = 0;
        _X14 = (const float *)(_X1 + 92);
        uint64_t v25 = *(unsigned __int8 *)(_X1 + 1);
        float32x4_t v26 = v21;
        do
        {
          __asm { PRFUM           #0, [X14,#0x54] }
          float32x4_t v28 = *(float32x4_t *)(_X14 - 11);
          float32x2_t v29 = vld1_dup_f32(v26++);
          a10.f32[0] = *(_X14 - 3);
          float32x2_t v30 = vld1_dup_f32(_X14);
          float32x4_t v31 = vmlaq_f32(vmulq_f32(v11, v28), v22, v10);
          v31.i64[0] = vpaddq_f32(v31, v31).u64[0];
          uint64_t v32 = _X14 - 2;
          float32x2_t v33 = vld1_dup_f32(v32);
          a10 = vmin_f32(vadd_f32(v29, vmax_f32(vmls_lane_f32(v33, vpadd_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v31.f32), a10, 0), vneg_f32(v29))), v30);
          float32x2_t v34 = vsub_f32(a10, v29);
          float32x4_t v10 = vmlaq_n_f32(v10, v23, v34.f32[0]);
          v10.i64[1] = vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u32[0];
          float32x4_t v11 = vmlaq_n_f32(v11, v28, vmul_f32(a6, v34).f32[0]);
          v11.i64[1] = vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u32[0];
          *uint64_t v21 = a10.f32[0];
          _X14 += 12;
          uint64_t v21 = (float *)v26;
          --v25;
        }
        while (v25);
      }
      _X1 += 48 + 48 * v13;
    }
    while (_X1 < v12);
  }
  *(void *)uint64_t result = v10.i64[0];
  *(_DWORD *)(result + 8) = v10.i32[2];
  *(void *)(result + 16) = v11.i64[0];
  *(_DWORD *)(result + 24) = v11.i32[2];
  return result;
}

unint64_t physx::Dy::solveFriction_BStatic(unint64_t result)
{
  uint64_t v2 = *(uint64_t **)result;
  v4.i64[0] = **(void **)result;
  uint64_t v3 = (_DWORD *)(*(void *)result + 8);
  v4.i64[1] = *v3;
  v6.i64[0] = *(void *)(*(void *)result + 16);
  uint64_t v5 = (_DWORD *)(*(void *)result + 24);
  v6.i64[1] = *v5;
  uint64_t v7 = *(unsigned __int16 *)(result + 30);
  if (*(_WORD *)(result + 30))
  {
    uint64_t result = *(void *)(result + 32);
    unint64_t v8 = result + 16 * v7;
    do
    {
      uint64_t v9 = *(unsigned __int8 *)(result + 2);
      unsigned int v10 = *(unsigned __int8 *)(result + 1);
      unint64_t v11 = result + 32;
      uint64_t v12 = result + 32 + ((4 * (_WORD)v10 + 12) & 0x7F0);
      if (*(unsigned char *)(result + 2))
      {
        LODWORD(v13) = 0;
        unsigned int v14 = 0;
        float v15 = *(float *)(result + 4);
        float32x4_t v16 = (const float *)(result + 16);
        unint64_t v17 = (const float *)(result + 8);
        float32x4_t v18 = vld1q_dup_f32(v16);
        float32x4_t v19 = vld1q_dup_f32(v17);
        if (v9 / v10 <= 1) {
          unsigned int v20 = 1;
        }
        else {
          unsigned int v20 = v9 / v10;
        }
        do
        {
          if (v10 <= v9)
          {
            int v21 = v13 + v20;
            do
            {
              unint64_t v22 = v12 + ((unint64_t)v13 << 6);
              uint64_t v13 = (v13 + 1);
              _X4 = v12 + (v13 << 6);
              __asm { PRFM            #0, [X4] }
              int32x4_t v29 = *(int32x4_t *)v22;
              float32x4_t v30 = *(float32x4_t *)v22;
              v30.i32[3] = 0;
              float32x4_t v31 = *(float32x4_t *)(v22 + 16);
              v31.i32[3] = 0;
              float32x2_t v32 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)v22, 3);
              float32x2_t v33 = (const float *)(v22 + 48);
              float32x2_t v34 = vld1_dup_f32(v33);
              v1.f32[0] = v15 * *(float *)(v11 + 4 * v14);
              float32x2_t v1 = (float32x2_t)vdup_lane_s32((int32x2_t)v1, 0);
              float32x4_t v35 = vmulq_f32(v4, v30);
              v35.i64[0] = vpaddq_f32(v35, v35).u64[0];
              float32x4_t v36 = vmulq_f32(v6, v31);
              v36.i64[0] = vpaddq_f32(v36, v36).u64[0];
              float32x4_t v37 = vmulq_f32(v18, v31);
              v37.i32[3] = 0;
              float32x4_t v38 = vmulq_f32(v19, v30);
              v38.i32[3] = 0;
              float32x2_t v39 = vmax_f32(vmin_f32(vmla_laneq_f32(vmls_laneq_f32(v32, v34, *(float32x4_t *)(v22 + 16), 3), vadd_f32(vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32), vpadd_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v36.f32)), *(float32x4_t *)(v22 + 16), 3), v1), vneg_f32(v1));
              v32.i32[0] = vsub_f32(v39, v32).u32[0];
              float32x4_t v4 = vmlaq_n_f32(v4, v38, v32.f32[0]);
              v4.i64[1] = vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL).u32[0];
              float32x4_t v6 = vmlaq_n_f32(v6, v37, v32.f32[0]);
              v6.i64[1] = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL).u32[0];
              v29.i32[3] = v39.i32[1];
              *(int32x4_t *)unint64_t v22 = v29;
            }
            while (v21 != v13);
            LODWORD(v13) = v21;
          }
          ++v14;
        }
        while (v13 < v9);
      }
      uint64_t result = v12 + (v9 << 6);
    }
    while (result < v8);
  }
  *uint64_t v2 = v4.i64[0];
  _DWORD *v3 = v4.i32[2];
  v2[2] = v6.i64[0];
  *uint64_t v5 = v6.i32[2];
  return result;
}

unint64_t physx::Dy::concludeContactCoulomb(unint64_t result)
{
  if (*(_WORD *)(result + 2))
  {
    unint64_t v1 = result + *(unsigned __int16 *)(result + 2);
    do
    {
      unint64_t v2 = result + 48;
      int v3 = *(unsigned __int8 *)(result + 1);
      __asm
      {
        PRFM            #0, [X0,#0xB0]
        PRFM            #0, [X0,#0x130]
        PRFM            #0, [X0,#0x1B0]
      }
      if (*(unsigned char *)(result + 1))
      {
        if (*(unsigned char *)result == 3) {
          uint64_t v11 = 112;
        }
        else {
          uint64_t v11 = 48;
        }
        do
        {
          uint64_t result = v2 + v11;
          *(_DWORD *)(v2 + 36) = *(_DWORD *)(v2 + 40);
          v2 += v11;
          --v3;
        }
        while (v3);
      }
      else
      {
        result += 48;
      }
    }
    while (result < v1);
  }
  return result;
}

uint64_t physx::Dy::writeBackContactCoulomb(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 32);
  unsigned int v5 = 48;
  if (*(unsigned char *)v4 == 3) {
    unsigned int v5 = 112;
  }
  if (*(_WORD *)(v4 + 2))
  {
    unint64_t v6 = v4 + *(unsigned __int16 *)(v4 + 2);
    uint64_t v7 = *(float **)(result + 40);
    float v8 = 0.0;
    _X12 = *(void *)(result + 32);
    do
    {
      char v10 = *(unsigned char *)(_X12 + 40);
      unsigned int v11 = *(unsigned __int8 *)(_X12 + 1);
      __asm
      {
        PRFM            #0, [X12,#0x130]
        PRFM            #0, [X12,#0x1B0]
      }
      if (v7 && *(unsigned char *)(_X12 + 1))
      {
        float32x4_t v18 = (float *)(_X12 + *(unsigned __int16 *)(_X12 + 2) + 32);
        uint64_t v19 = *(unsigned __int8 *)(_X12 + 1);
        do
        {
          float v20 = *v18++;
          *v7++ = v20;
          float v8 = v8 + v20;
          --v19;
        }
        while (v19);
      }
      _X12 += 48 + v5 * (unint64_t)v11;
    }
    while (_X12 < v6);
    if ((v10 & 1) != 0 && *(unsigned __int16 *)(result + 16) == 0xFFFF && *(__int16 *)(result + 18) == -1 && v8 != 0.0)
    {
      float v21 = *(float *)(a3 + 28);
      float v22 = *(float *)(a4 + 28);
      if (v21 < 3.4028e38 || v22 < 3.4028e38)
      {
        if (v21 >= v22) {
          float v21 = *(float *)(a4 + 28);
        }
        unsigned int v23 = *(_DWORD *)(a3 + 72) << 7;
        unsigned int v24 = *(_DWORD *)(a4 + 72) << 7;
        uint64_t v25 = *(void *)(v4 + 32);
        if (v24 >= v23) {
          int v26 = *(_DWORD *)(a3 + 72) << 7;
        }
        else {
          int v26 = *(_DWORD *)(a4 + 72) << 7;
        }
        if (v24 > v23) {
          unsigned int v23 = *(_DWORD *)(a4 + 72) << 7;
        }
        uint64_t v27 = *(void *)(a2 + 8);
        uint64_t v28 = *(unsigned int *)(a2 + 16);
        *(_DWORD *)(a2 + 16) = v28 + 1;
        uint64_t v29 = v27 + 32 * v28;
        *(void *)uint64_t v29 = v25;
        *(float *)(v29 + 8) = v8;
        *(float *)(v29 + 12) = v21;
        *(_DWORD *)(v29 + 16) = v26;
        *(_DWORD *)(v29 + 20) = v23;
      }
    }
  }
  return result;
}

uint64_t **physx::Dy::solveFrictionBlock(uint64_t **result, unsigned int a2, double a3, double a4, double a5, double a6, double a7, float32x2_t a8, float32x2_t a9)
{
  if (a2)
  {
    uint64_t v9 = result;
    uint64_t v10 = a2;
    do
    {
      uint64_t result = physx::Dy::solveFriction(v9, a3, a4, a5, a6, a7, a8, a9);
      v9 += 6;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t **physx::Dy::solveFrictionBlockWriteBack(uint64_t **result, unsigned int a2, double a3, double a4, double a5, double a6, double a7, float32x2_t a8, float32x2_t a9)
{
  if (a2)
  {
    uint64_t v9 = result;
    uint64_t v10 = a2;
    do
    {
      uint64_t result = physx::Dy::solveFriction(v9, a3, a4, a5, a6, a7, a8, a9);
      v9 += 6;
      --v10;
    }
    while (v10);
  }
  return result;
}

unint64_t physx::Dy::solveFriction_BStaticBlock(unint64_t result, unsigned int a2)
{
  if (a2)
  {
    unint64_t v2 = result;
    uint64_t v3 = a2;
    do
    {
      uint64_t result = physx::Dy::solveFriction_BStatic(v2);
      v2 += 48;
      --v3;
    }
    while (v3);
  }
  return result;
}

unint64_t physx::Dy::solveFriction_BStaticBlockWriteBack(unint64_t result, unsigned int a2)
{
  if (a2)
  {
    unint64_t v2 = result;
    uint64_t v3 = a2;
    do
    {
      uint64_t result = physx::Dy::solveFriction_BStatic(v2);
      v2 += 48;
      --v3;
    }
    while (v3);
  }
  return result;
}

float *physx::Dy::solveContactCoulombBlock(float *result, unsigned int a2, double a3, double a4, double a5, double a6, double a7, float32x2_t a8, float32x2_t a9)
{
  if (a2)
  {
    uint64_t v9 = result;
    uint64_t v10 = a2;
    do
    {
      uint64_t result = physx::Dy::solveContactCoulomb(v9, a3, a4, a5, a6, a7, a8, a9);
      v9 += 12;
      --v10;
    }
    while (v10);
  }
  return result;
}

unint64_t physx::Dy::solveContactCoulombConcludeBlock(unint64_t result, unsigned int a2, double a3, double a4, double a5, double a6, double a7, float32x2_t a8, float32x2_t a9)
{
  if (a2)
  {
    unint64_t v9 = result;
    uint64_t v10 = a2;
    do
    {
      physx::Dy::solveContactCoulomb((float *)v9, a3, a4, a5, a6, a7, a8, a9);
      uint64_t result = physx::Dy::concludeContactCoulomb(*(void *)(v9 + 32));
      v9 += 48;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t physx::Dy::solveContactCoulombBlockWriteBack(uint64_t result, unsigned int a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, float32x2_t a9, float32x2_t a10)
{
  if (a2)
  {
    uint64_t v11 = result;
    uint64_t v12 = a2;
    do
    {
      uint64_t v13 = *(void *)(a3 + 24);
      uint64_t v14 = v13 + 112 * *(unsigned int *)(v11 + 20);
      uint64_t v15 = v13 + 112 * *(unsigned int *)(v11 + 24);
      physx::Dy::solveContactCoulomb((float *)v11, a4, a5, a6, a7, a8, a9, a10);
      uint64_t result = physx::Dy::writeBackContactCoulomb(v11, a3, v14, v15);
      v11 += 48;
      --v12;
    }
    while (v12);
  }
  unsigned int v16 = *(_DWORD *)(a3 + 16);
  if (v16 > *(_DWORD *)(a3 + 20) - 4)
  {
    unsigned int add = atomic_fetch_add(*(atomic_uint *volatile *)(a3 + 48), v16);
    int v18 = *(_DWORD *)(a3 + 16);
    if (v18)
    {
      uint64_t v19 = 0;
      unint64_t v20 = 0;
      int v21 = add + v16 - v18;
      do
      {
        float v22 = (_OWORD *)(*(void *)(a3 + 8) + v19);
        unsigned int v23 = (_OWORD *)(*(void *)(a3 + 32) + 32 * (v21 + v20));
        long long v24 = v22[1];
        *unsigned int v23 = *v22;
        v23[1] = v24;
        ++v20;
        v19 += 32;
      }
      while (v20 < *(unsigned int *)(a3 + 16));
    }
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t physx::Dy::solveContactCoulomb_BStaticBlock(uint64_t result, unsigned int a2, double a3, double a4, double a5, float32x2_t a6, double a7, double a8, double a9, float32x2_t a10)
{
  if (a2)
  {
    uint64_t v10 = a2;
    uint64_t v11 = (unint64_t *)(result + 32);
    do
    {
      uint64_t v12 = *(v11 - 4);
      unint64_t v13 = *v11;
      v11 += 6;
      uint64_t result = physx::Dy::solveContactCoulomb_BStatic(v12, v13, a3, a4, a5, a6, a7, a8, a9, a10);
      --v10;
    }
    while (v10);
  }
  return result;
}

unint64_t physx::Dy::solveContactCoulomb_BStaticConcludeBlock(unint64_t result, unsigned int a2, double a3, double a4, double a5, float32x2_t a6, double a7, double a8, double a9, float32x2_t a10)
{
  if (a2)
  {
    uint64_t v10 = a2;
    uint64_t v11 = (unint64_t *)(result + 32);
    do
    {
      physx::Dy::solveContactCoulomb_BStatic(*(v11 - 4), *v11, a3, a4, a5, a6, a7, a8, a9, a10);
      unint64_t v12 = *v11;
      v11 += 6;
      uint64_t result = physx::Dy::concludeContactCoulomb(v12);
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t physx::Dy::solveContactCoulomb_BStaticBlockWriteBack(uint64_t result, unsigned int a2, uint64_t a3, double a4, double a5, double a6, float32x2_t a7, double a8, double a9, double a10, float32x2_t a11)
{
  if (a2)
  {
    uint64_t v12 = result;
    uint64_t v13 = a2;
    do
    {
      uint64_t v14 = *(void *)(a3 + 24);
      uint64_t v15 = v14 + 112 * *(unsigned int *)(v12 + 20);
      uint64_t v16 = v14 + 112 * *(unsigned int *)(v12 + 24);
      physx::Dy::solveContactCoulomb_BStatic(*(void *)v12, *(void *)(v12 + 32), a4, a5, a6, a7, a8, a9, a10, a11);
      uint64_t result = physx::Dy::writeBackContactCoulomb(v12, a3, v15, v16);
      v12 += 48;
      --v13;
    }
    while (v13);
  }
  unsigned int v17 = *(_DWORD *)(a3 + 16);
  if (v17 > *(_DWORD *)(a3 + 20) - 4)
  {
    unsigned int add = atomic_fetch_add(*(atomic_uint *volatile *)(a3 + 48), v17);
    int v19 = *(_DWORD *)(a3 + 16);
    if (v19)
    {
      uint64_t v20 = 0;
      unint64_t v21 = 0;
      int v22 = add + v17 - v19;
      do
      {
        unsigned int v23 = (_OWORD *)(*(void *)(a3 + 8) + v20);
        long long v24 = (_OWORD *)(*(void *)(a3 + 32) + 32 * (v22 + v21));
        long long v25 = v23[1];
        *long long v24 = *v23;
        v24[1] = v25;
        ++v21;
        v20 += 32;
      }
      while (v21 < *(unsigned int *)(a3 + 16));
    }
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

float physx::Dy::solveExtContactCoulomb(uint64_t a1)
{
  unint64_t v1 = (unsigned __int16 *)MEMORY[0x270FA5388](a1);
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v54 = *MEMORY[0x263EF8340];
  if (v1[8] == 0xFFFF)
  {
    v5.i64[0] = **(void **)v1;
    v5.i64[1] = *(unsigned int *)(*(void *)v1 + 8);
    v6.i64[0] = *(void *)(*(void *)v1 + 16);
    v6.i64[1] = *(unsigned int *)(*(void *)v1 + 24);
  }
  else
  {
    (*(void (**)(float32x4_t *__return_ptr))(**(void **)v1 + 312))(&v52);
    float32x4_t v5 = v52;
    float32x4_t v6 = v53;
  }
  float32x4_t v49 = v6;
  float32x4_t v50 = v5;
  if (*((unsigned __int16 *)v4 + 9) == 0xFFFF)
  {
    uint64_t v9 = v4[1];
    v7.i64[0] = *(void *)v9;
    v7.i64[1] = *(unsigned int *)(v9 + 8);
    v8.i64[0] = *(void *)(v9 + 16);
    v8.i64[1] = *(unsigned int *)(v9 + 24);
  }
  else
  {
    (*(void (**)(float32x4_t *__return_ptr))(*(void *)v4[1] + 312))(&v52);
    float32x4_t v7 = v52;
    float32x4_t v8 = v53;
  }
  float32x4_t v47 = v8;
  float32x4_t v48 = v7;
  _X25 = (float32x4_t *)v4[4];
  if (_X25->i16[1])
  {
    uint64_t v11 = (char *)_X25 + _X25->u16[1];
    __n128 v12 = 0uLL;
    __n128 v13 = 0uLL;
    __n128 v14 = 0uLL;
    __n128 v15 = 0uLL;
    do
    {
      float32x4_t v38 = (float32x4_t)v12;
      float32x4_t v39 = (float32x4_t)v15;
      float32x4_t v40 = (float32x4_t)v13;
      float32x4_t v42 = (float32x4_t)v14;
      unsigned int v16 = _X25->u8[1];
      _X9 = (float *)((char *)_X25[2].f32 + _X25->u16[1]);
      __asm
      {
        PRFM            #0, [X8,#0x20]
        PRFM            #0, [X25,#0x30]
      }
      unint64_t v24 = (unint64_t)&_X25[7 * _X25->u8[1] + 3];
      float32x4_t v52 = 0u;
      v51[0] = 0u;
      float32x4_t v45 = 0u;
      float32x4_t v46 = 0u;
      v25.i64[0] = _X25[1].i64[0];
      v25.i64[1] = _X25[1].u32[2];
      float32x4_t v44 = v25;
      physx::Dy::solveExtContacts(_X25 + 3, v16, &v44, &v50, &v49, &v48, &v47, &v52, *(double *)v25.i64, v15.n128_f64[0], v14.n128_f64[0], v13.n128_f64[0], &v46, v51, &v45, _X9);
      __n128 v12 = (__n128)vmlaq_n_f32(v38, v52, _X25->f32[2]);
      v12.n128_u64[1] = vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u32[0];
      __n128 v15 = (__n128)vmlaq_n_f32(v39, v46, _X25->f32[1]);
      float32x2_t v26 = (float32x2_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u32[0];
      v15.n128_u64[1] = v26.u32[0];
      v26.i32[0] = _X25->i32[3];
      __n128 v13 = (__n128)vmlsq_lane_f32(v40, v51[0], v26, 0);
      float32x2_t v27 = (float32x2_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u32[0];
      v13.n128_u64[1] = v27.u32[0];
      v27.i32[0] = _X25[1].i32[3];
      __n128 v14 = (__n128)vmlsq_lane_f32(v42, v45, v27, 0);
      v14.n128_u64[1] = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u32[0];
      _X25 = (float32x4_t *)v24;
    }
    while (v24 < (unint64_t)v11);
  }
  else
  {
    __n128 v15 = 0uLL;
    __n128 v14 = 0uLL;
    __n128 v13 = 0uLL;
    __n128 v12 = 0uLL;
  }
  uint64_t v28 = *((unsigned __int16 *)v4 + 8);
  if (v28 == 0xFFFF)
  {
    uint64_t v29 = *v4;
    __int32 v30 = v50.i32[2];
    *(void *)uint64_t v29 = v50.i64[0];
    *(_DWORD *)(v29 + 8) = v30;
    uint64_t v31 = *v4;
    __int32 v32 = v49.i32[2];
    *(void *)(v31 + 16) = v49.i64[0];
    *(_DWORD *)(v31 + 24) = v32;
  }
  else
  {
    __n128 v41 = v13;
    __n128 v43 = v14;
    (*(void (**)(void, uint64_t, float32x4_t *, float32x4_t *, __n128, __n128))(*(void *)*v4 + 256))(*v4, v28, &v52, v51, v12, v15);
    __n128 v13 = v41;
    __n128 v14 = v43;
  }
  uint64_t v33 = *((unsigned __int16 *)v4 + 9);
  if (v33 == 0xFFFF)
  {
    uint64_t v35 = v4[1];
    __int32 v36 = v48.i32[2];
    *(void *)uint64_t v35 = v48.i64[0];
    *(_DWORD *)(v35 + 8) = v36;
    uint64_t v37 = v4[1];
    float result = v47.f32[2];
    *(void *)(v37 + 16) = v47.i64[0];
    *(float *)(v37 + 24) = result;
  }
  else
  {
    (*(void (**)(void, uint64_t, void, void, __n128, __n128))(*(void *)v4[1] + 256))(v4[1], v33, *(void *)(v3 + 56), *(void *)(v3 + 64), v13, v14);
  }
  return result;
}

uint64_t physx::Dy::solveExtFriction(uint64_t result, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, float32x2_t a9, float32x4_t a10)
{
  __n128 v12 = (void *)result;
  if (*(unsigned __int16 *)(result + 16) == 0xFFFF)
  {
    v13.i64[0] = **(void **)result;
    v13.i64[1] = *(unsigned int *)(*(void *)result + 8);
    v14.i64[0] = *(void *)(*(void *)result + 16);
    v14.i64[1] = *(unsigned int *)(*(void *)result + 24);
  }
  else
  {
    float result = (uint64_t)(*(void *(**)(float32x4_t *__return_ptr))(**(void **)result + 312))(&v66);
    float32x4_t v13 = v66;
    float32x4_t v14 = v67;
  }
  float32x4_t v62 = v14;
  float32x4_t v64 = v13;
  if (*((unsigned __int16 *)v12 + 9) == 0xFFFF)
  {
    uint64_t v17 = v12[1];
    v15.i64[0] = *(void *)v17;
    v15.i64[1] = *(unsigned int *)(v17 + 8);
    v16.i64[0] = *(void *)(v17 + 16);
    v16.i64[1] = *(unsigned int *)(v17 + 24);
  }
  else
  {
    float result = (uint64_t)(*(void *(**)(float32x4_t *__return_ptr))(*(void *)v12[1] + 312))(&v66);
    float32x4_t v15 = v66;
    float32x4_t v16 = v67;
  }
  if (*((_WORD *)v12 + 15))
  {
    unint64_t v18 = v12[4];
    unint64_t v19 = v18 + 16 * *((unsigned __int16 *)v12 + 15);
    __n128 v20 = 0uLL;
    __n128 v21 = 0uLL;
    __n128 v22 = 0uLL;
    __n128 v23 = 0uLL;
    float32x4_t v25 = v62;
    float32x4_t v24 = v64;
    do
    {
      unsigned int v26 = *(unsigned __int8 *)(v18 + 1);
      uint64_t v27 = v18 + 32 + ((4 * (_WORD)v26 + 12) & 0x7F0);
      uint64_t v28 = *(unsigned __int8 *)(v18 + 2);
      if (*(unsigned char *)(v18 + 2))
      {
        unsigned int v29 = 0;
        LODWORD(v30) = 0;
        float v31 = *(float *)(v18 + 4);
        unsigned int v32 = v28 / v26;
        if (v28 / v26 <= 1) {
          unsigned int v32 = 1;
        }
        float32x4_t v33 = 0uLL;
        float32x4_t v34 = 0uLL;
        float32x4_t v35 = 0uLL;
        float32x4_t v36 = 0uLL;
        do
        {
          if (v26 <= v28)
          {
            float result = v29;
            int v37 = v30 + v32;
            do
            {
              float32x4_t v38 = (float32x4_t *)(v27 + ((unint64_t)v30 << 7));
              uint64_t v30 = (v30 + 1);
              _X2 = v27 + (v30 << 7);
              __asm { PRFM            #0, [X2] }
              a10 = *v38;
              float32x4_t v45 = *v38;
              v45.i32[3] = 0;
              float32x4_t v46 = v38[1];
              v46.i32[3] = 0;
              float32x4_t v47 = v38[2];
              v47.i32[3] = 0;
              float32x2_t v48 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)v38, 3);
              f32 = v38[3].f32;
              float32x2_t v50 = vld1_dup_f32(f32);
              v10.f32[0] = v31 * *(float *)(v18 + 32 + 4 * v29);
              float32x2_t v51 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.f32, 0);
              float32x4_t v52 = vsubq_f32(vmlaq_f32(vmulq_f32(v25, v46), v45, v24), vmlaq_f32(vmulq_f32(v16, v47), v45, v15));
              v52.i64[0] = vpaddq_f32(v52, v52).u64[0];
              float32x2_t v53 = vmax_f32(vmin_f32(vsub_f32(v48, vmul_laneq_f32(vadd_f32(v50, vpadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32)), v38[1], 3)), v51), vneg_f32(v51));
              v48.i32[0] = vsub_f32(v53, v48).u32[0];
              float32x4_t v24 = vmlaq_n_f32(v24, v38[4], v48.f32[0]);
              v24.i64[1] = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u32[0];
              float32x4_t v25 = vmlaq_n_f32(v25, v38[5], v48.f32[0]);
              v25.i64[1] = vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u32[0];
              float32x4_t v10 = v38[7];
              float32x4_t v15 = vmlaq_n_f32(v15, v38[6], v48.f32[0]);
              v15.i64[1] = vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u32[0];
              float32x4_t v16 = vmlaq_n_f32(v16, v10, v48.f32[0]);
              v16.i64[1] = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u32[0];
              float32x4_t v36 = vmlaq_n_f32(v36, v45, v48.f32[0]);
              v36.i64[1] = vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u32[0];
              float32x4_t v34 = vmlaq_n_f32(v34, v46, v48.f32[0]);
              v34.i64[1] = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u32[0];
              float32x4_t v35 = vmlaq_n_f32(v35, v45, v48.f32[0]);
              v35.i64[1] = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u32[0];
              float32x4_t v33 = vmlaq_n_f32(v33, v47, v48.f32[0]);
              v33.i64[1] = vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u32[0];
              a10.i32[3] = v53.i32[1];
              *float32x4_t v38 = a10;
            }
            while (v37 != v30);
            LODWORD(v30) = v37;
          }
          ++v29;
        }
        while (v30 < v28);
      }
      else
      {
        float32x4_t v36 = 0uLL;
        float32x4_t v35 = 0uLL;
        float32x4_t v34 = 0uLL;
        float32x4_t v33 = 0uLL;
      }
      a10.i32[0] = *(_DWORD *)(v18 + 12);
      __n128 v20 = (__n128)vmlaq_n_f32((float32x4_t)v20, v36, *(float *)(v18 + 8));
      a9.i32[0] = *(_DWORD *)(v18 + 20);
      __n128 v22 = (__n128)vmlaq_n_f32((float32x4_t)v22, v34, *(float *)(v18 + 16));
      v20.n128_u64[1] = vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u32[0];
      v22.n128_u64[1] = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u32[0];
      __n128 v21 = (__n128)vmlsq_lane_f32((float32x4_t)v21, v35, *(float32x2_t *)a10.f32, 0);
      v21.n128_u64[1] = vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u32[0];
      __n128 v23 = (__n128)vmlsq_lane_f32((float32x4_t)v23, v33, a9, 0);
      v23.n128_u64[1] = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u32[0];
      unint64_t v18 = v27 + (v28 << 7);
    }
    while (v18 < v19);
  }
  else
  {
    __n128 v23 = 0uLL;
    __n128 v22 = 0uLL;
    __n128 v21 = 0uLL;
    __n128 v20 = 0uLL;
    float32x4_t v25 = v62;
    float32x4_t v24 = v64;
  }
  uint64_t v54 = *((unsigned __int16 *)v12 + 8);
  if (v54 == 0xFFFF)
  {
    int v55 = (void *)*v12;
    *(_DWORD *)(*v12 + 8) = v24.i32[2];
    *int v55 = v24.i64[0];
    uint64_t v56 = *v12;
    *(void *)(v56 + 16) = v25.i64[0];
    *(_DWORD *)(v56 + 24) = v25.i32[2];
  }
  else
  {
    float32x4_t v63 = v16;
    float32x4_t v65 = v15;
    __n128 v60 = v21;
    __n128 v61 = v23;
    float result = (*(uint64_t (**)(void, uint64_t, void, void, __n128, __n128))(*(void *)*v12 + 256))(*v12, v54, *(void *)(a2 + 56), *(void *)(a2 + 64), v20, v22);
    __n128 v21 = v60;
    __n128 v23 = v61;
    float32x4_t v16 = v63;
    float32x4_t v15 = v65;
  }
  uint64_t v57 = *((unsigned __int16 *)v12 + 9);
  if (v57 != 0xFFFF) {
    return (*(uint64_t (**)(void, uint64_t, void, void, __n128, __n128))(*(void *)v12[1] + 256))(v12[1], v57, *(void *)(a2 + 56), *(void *)(a2 + 64), v21, v23);
  }
  uint64_t v58 = v12[1];
  *(_DWORD *)(v58 + 8) = v15.i32[2];
  *(void *)uint64_t v58 = v15.i64[0];
  uint64_t v59 = v12[1];
  *(void *)(v59 + 16) = v16.i64[0];
  *(_DWORD *)(v59 + 24) = v16.i32[2];
  return result;
}

uint64_t physx::Dy::createFinalizeSolverContacts4Step(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, float a7, float a8, double a9, float a10, float a11)
{
  int32x2_t v742 = *(int32x2_t *)&a6;
  float v607 = *(float *)&a5;
  uint64_t v13 = a2;
  LODWORD(v15) = 0;
  uint64_t v16 = 0;
  uint64_t v778 = *MEMORY[0x263EF8340];
  uint64_t v749 = a2 + 564;
  uint64_t v745 = a2 + 296;
  uint64_t v760 = a1 + 7684;
  *(void *)(a1 + 7684) = 0;
  uint64_t v17 = a1 + 7296;
  uint64_t v18 = a1 + 7424;
  do
  {
    uint64_t v19 = v13 + 224 * v16;
    LODWORD(a5) = *(_DWORD *)(v19 + 4);
    v775.i32[v16] = *(_DWORD *)v19;
    LODWORD(a6) = *(_DWORD *)(v19 + 12);
    v774.i32[v16] = *(_DWORD *)(v19 + 8);
    v773.i32[v16] = LODWORD(a5);
    v772.i32[v16] = LODWORD(a6);
    *(_DWORD *)(v19 + 192) = v15;
    __n128 v20 = (unsigned int *)(v19 + 192);
    if (!*(unsigned char *)(v19 + 157)
      && !physx::Dy::getFrictionPatches(a1, *(float **)(v13 + 224 * v16 + 168), *(unsigned __int8 *)(v13 + 224 * v16 + 176), (float *)(v19 + 72), (float *)(v19 + 100), a8, a5, a6, a7, a8, *(float *)&a9, a10, a11))
    {
      return 1;
    }
    uint64_t v21 = v13 + 224 * v16;
    *(_DWORD *)(v21 + 200) = *(_DWORD *)(a1 + 7684);
    __n128 v22 = (unsigned int *)(v21 + 200);
    uint64_t v23 = v13;
    float32x4_t v24 = (uint64_t *)(v22 - 14);
    if (!physx::Dy::createContactPatches(a1, *((void *)v22 - 7), *(v22 - 12), 0.999)) {
      return 1;
    }
    unsigned int v25 = *v22;
    *(_WORD *)(v23 + 224 * v16 + 204) = *(_WORD *)(a1 + 7684) - *v22;
    unsigned int v26 = (float *)(v19 + 72);
    uint64_t v27 = (float *)(v19 + 100);
    if (physx::Dy::correlatePatches(a1, *v24, v26, v27, v25, *v20, 0.999)) {
      return 1;
    }
    physx::Dy::growPatches(a1, *v24, v26, v27, *v20, a8, *(float *)(v23 + 224 * v16 + 160) + a7);
    LODWORD(v15) = *(_DWORD *)(a1 + 7688);
    unsigned int v28 = *v20;
    uint64_t v13 = v23;
    if (v15 > *v20)
    {
      unsigned int v29 = *(_DWORD *)(a1 + 7688);
      do
      {
        unsigned int v30 = v29 - 1;
        if (*(_DWORD *)(a1 + 4 * (v29 - 1) + 7424) == 0xFFFF)
        {
          if (v29 < v15)
          {
            unint64_t v31 = v29;
            do
            {
              uint64_t v32 = a1 + 4 * (v31 - 1);
              *(_DWORD *)(v32 + 7424) = *(_DWORD *)(v18 + 4 * v31);
              *(_DWORD *)(v32 + 7296) = *(_DWORD *)(v17 + 4 * v31++);
              unint64_t v15 = *(unsigned int *)(a1 + 7688);
            }
            while (v31 < v15);
            unsigned int v28 = *v20;
          }
          LODWORD(v15) = v15 - 1;
          *(_DWORD *)(a1 + 7688) = v15;
        }
        unsigned int v29 = v30;
      }
      while (v30 > v28);
    }
    *(_DWORD *)(v23 + 224 * v16++ + 196) = v15 - v28;
  }
  while (v16 != 4);
  uint64_t v33 = 0;
  memset(v771, 0, sizeof(v771));
  do
  {
    uint64_t v34 = v23 + 224 * v33;
    uint64_t v35 = *(unsigned int *)(v34 + 192);
    uint64_t v36 = (*(_DWORD *)(v34 + 196) + v35);
    if (v35 >= v36)
    {
      v770[v33 + 4] = 0;
LABEL_29:
      *((void *)v771 + v33) = 0;
      goto LABEL_30;
    }
    int v37 = 0;
    uint64_t v38 = v36 - v35;
    float32x4_t v39 = (int *)(a1 + 7424 + 4 * v35);
    do
    {
      int v40 = *v39++;
      if (v40 != 0xFFFF) {
        ++v37;
      }
      --v38;
    }
    while (v38);
    v770[v33 + 4] = v37;
    int v41 = 104 * v37 + 15;
    if ((v41 & 0xFFFFFFF0) == 0) {
      goto LABEL_29;
    }
    uint64_t v42 = (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 8))(a3, v41 & 0xFFFFFFF0);
    if (v42 == -1) {
      uint64_t v43 = 0;
    }
    else {
      uint64_t v43 = v42;
    }
    *((void *)v771 + v33) = v43;
    if (!v43) {
      return 0;
    }
LABEL_30:
    ++v33;
  }
  while (v33 != 4);
  uint64_t v44 = 0;
  LODWORD(v45) = 0;
  LOBYTE(v46) = 0;
  memset(v777, 0, sizeof(v777));
  memset(v776, 0, sizeof(v776));
  do
  {
    BOOL v46 = v46 || *(unsigned char *)(v23 + 224 * v44 + 156) != 0;
    unsigned int v47 = *(_DWORD *)(v23 + 224 * v44 + 196);
    if (v47)
    {
      int v48 = 0;
      unsigned int v49 = *(_DWORD *)(v23 + 224 * v44 + 192);
      float32x2_t v50 = (int *)v776;
      float32x2_t v51 = (unsigned int *)v777;
      uint64_t v52 = *(unsigned int *)(v23 + 224 * v44 + 196);
      do
      {
        uint64_t v53 = v49;
        BOOL v54 = (*(unsigned char *)(a1 + 104 * v49 + 2817) & 1) == 0 && *(_WORD *)(a1 + 104 * v49 + 2818) != 0;
        unsigned int v55 = *(_DWORD *)(a1 + 4 * v53 + 7296);
        if (v55)
        {
          unsigned int v56 = *v51;
          if (v55 > *v51) {
            unsigned int v56 = *(_DWORD *)(a1 + 4 * v53 + 7296);
          }
          *float32x2_t v51 = v56;
          v48 += v55;
          if (v54)
          {
            int v57 = *(unsigned __int16 *)(a1 + 104 * v53 + 2818);
            int v58 = 2 * v57;
            if (2 * v57 <= *v50) {
              int v58 = *v50;
            }
            *float32x2_t v50 = v58;
            v48 += 2 * v57;
          }
        }
        ++v50;
        ++v51;
        unsigned int v49 = v53 + 1;
        --v52;
      }
      while (v52);
    }
    else
    {
      int v48 = 0;
    }
    if (v47 <= v45) {
      uint64_t v45 = v45;
    }
    else {
      uint64_t v45 = v47;
    }
    v770[v44++] = v48;
  }
  while (v44 != 4);
  if (v45)
  {
    int v59 = 0;
    int v60 = 0;
    __n128 v61 = (int *)v776;
    float32x4_t v62 = (int *)v777;
    uint64_t v63 = v45;
    do
    {
      int v64 = *v62++;
      v60 += v64;
      int v65 = *v61++;
      v59 += v65;
      --v63;
    }
    while (v63);
  }
  else
  {
    int v60 = 0;
    int v59 = 0;
  }
  if (v46) {
    int v66 = v60;
  }
  else {
    int v66 = 0;
  }
  unsigned int v67 = 272 * v45 + 160 * v60 + 208 * v59 + 16 * (v59 + v60 + v66);
  if (v67)
  {
    if (v67 + 16 > 0x4000) {
      return 1;
    }
    uint64_t v69 = (**(uint64_t (***)(uint64_t))a3)(a3);
    if ((unint64_t)(v69 + 1) < 2) {
      return 0;
    }
  }
  else
  {
    uint64_t v69 = 0;
  }
  for (uint64_t i = 0; i != 4; ++i)
  {
    _X17 = *((void *)v771 + i);
    uint64_t v72 = v23 + 224 * i;
    uint64_t v73 = *(void *)(v72 + 16);
    *(void *)(v72 + 168) = _X17;
    *(unsigned char *)(v72 + 176) = v770[i + 4];
    if (_X17)
    {
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X17,#0x80]
        PRFM            #0, [X17,#0x100]
      }
      uint64_t v81 = v23 + 224 * i;
      unsigned int v84 = *(_DWORD *)(v81 + 196);
      uint64_t v83 = (unsigned int *)(v81 + 196);
      unsigned int v82 = v84;
      if (v84)
      {
        unsigned int v85 = 0;
        do
        {
          unsigned int v86 = v85 + *(_DWORD *)(v23 + 224 * i + 192);
          if (*(_DWORD *)(a1 + 4 * v86 + 7424) != 0xFFFF)
          {
            uint64_t v87 = a1 + 104 * v86;
            long long v88 = *(_OWORD *)(v87 + 2816);
            long long v89 = *(_OWORD *)(v87 + 2848);
            *(_OWORD *)(_X17 + 16) = *(_OWORD *)(v87 + 2832);
            *(_OWORD *)(_X17 + 32) = v89;
            *(_OWORD *)_X17 = v88;
            long long v90 = *(_OWORD *)(v87 + 2864);
            long long v91 = *(_OWORD *)(v87 + 2880);
            long long v92 = *(_OWORD *)(v87 + 2896);
            *(void *)(_X17 + 96) = *(void *)(v87 + 2912);
            *(_OWORD *)(_X17 + 64) = v91;
            *(_OWORD *)(_X17 + 80) = v92;
            *(_OWORD *)(_X17 + 48) = v90;
            _X17 += 104;
            unsigned int v82 = *v83;
          }
          ++v85;
        }
        while (v85 < v82);
      }
    }
    uint64_t v93 = v23 + 224 * i;
    *(_WORD *)(v93 + 206) += v770[i];
    *(void *)(v73 + 32) = v69;
    *(_WORD *)(v73 + 30) = v67 >> 4;
    *(_WORD *)(v73 + 28) = *(_DWORD *)(v93 + 152);
    *(void *)(v73 + 40) = *(void *)(v93 + 184);
  }
  unsigned int v592 = v67;
  BOOL v94 = *(unsigned char *)(v23 + 156) || *(unsigned char *)(v23 + 380) || *(unsigned char *)(v23 + 604) || *(unsigned char *)(v23 + 828) != 0;
  BOOL v636 = v94;
  uint64_t v95 = 0;
  LOBYTE(v96) = 0;
  LOBYTE(v97) = 0;
  float32x4_t v98 = v775;
  float32x4_t v99 = v773;
  float32x4_t v100 = v774;
  float32x4_t v708 = v772;
  int32x4_t v101 = vdupq_lane_s32(*(int32x2_t *)&a9, 0);
  __int8 v605 = *(unsigned char *)(v23 + 382);
  __int8 v606 = *(unsigned char *)(v23 + 158);
  uint64_t v102 = (_DWORD *)(v23 + 132);
  __int8 v604 = *(unsigned char *)(v23 + 606);
  __int8 v603 = *(unsigned char *)(v23 + 830);
  while (2)
  {
    if (v96)
    {
      BOOL v96 = 1;
      if (!v97) {
        goto LABEL_83;
      }
LABEL_85:
      BOOL v97 = 1;
    }
    else
    {
      BOOL v96 = *v102 == 1;
      if (v97) {
        goto LABEL_85;
      }
LABEL_83:
      BOOL v97 = *v102 == 4;
    }
    if (*(unsigned char *)(*(void *)(v102 - 27) + 62)) {
      float v103 = 1.0;
    }
    else {
      float v103 = 0.0;
    }
    *(float *)((char *)v777 + v95) = v103;
    if (*(unsigned char *)(*(void *)(v102 - 25) + 62)) {
      float v104 = 1.0;
    }
    else {
      float v104 = 0.0;
    }
    *(float *)((char *)v776 + v95) = v104;
    v95 += 4;
    v102 += 56;
    if (v95 != 16) {
      continue;
    }
    break;
  }
  uint64_t v593 = v69;
  _X8 = a1 + 7556;
  __asm { PRFM            #0, [X8] }
  _X8 = v760;
  __asm { PRFM            #0, [X8] }
  unsigned int v109 = *(_DWORD *)(v23 + 196);
  unsigned int v110 = *(_DWORD *)(v23 + 420);
  unsigned int v111 = *(_DWORD *)(v23 + 644);
  if (v111 <= *(_DWORD *)(v23 + 868)) {
    unsigned int v111 = *(_DWORD *)(v23 + 868);
  }
  if (v110 <= v111) {
    unsigned int v110 = v111;
  }
  if (v109 <= v110) {
    unsigned int v109 = v110;
  }
  unsigned int v602 = v109;
  if (v109)
  {
    unsigned int v610 = 0;
    uint64_t v608 = 0;
    uint64_t v609 = 0;
    uint64_t v632 = 0;
    unsigned int v631 = 0;
    uint64_t v697 = 0;
    uint64_t v696 = 0;
    uint64_t v695 = 0;
    uint64_t v694 = 0;
    uint64_t v112 = *(int32x4_t **)(v23 + 728);
    uint64_t v113 = *(int32x4_t **)(v23 + 56);
    uint64_t v114 = *(int32x4_t **)(v23 + 64);
    uint64_t v116 = *(int32x4_t **)(v23 + 280);
    unsigned int v115 = *(int32x4_t **)(v23 + 288);
    v117.i32[0] = v113[1].i32[3];
    v118.i32[0] = v113[2].i32[0];
    v117.i32[1] = v116[1].i32[3];
    int v119 = *(int32x4_t **)(v23 + 504);
    uint64_t v120 = *(int32x4_t **)(v23 + 512);
    v117.i32[2] = v119[1].i32[3];
    v117.i32[3] = v112[1].i32[3];
    long long v121 = *(int32x4_t **)(v23 + 736);
    v122.i32[0] = v114[1].i32[3];
    v123.i32[0] = v114[2].i32[0];
    v122.i32[1] = v115[1].i32[3];
    v122.i32[2] = v120[1].i32[3];
    v122.i32[3] = v121[1].i32[3];
    float32x4_t v601 = vmaxq_f32(v117, v122);
    int32x4_t v124 = v113[1];
    int32x4_t v125 = v116[1];
    int32x4_t v126 = v119[1];
    int32x4_t v127 = v112[1];
    int32x4_t v128 = v114[1];
    int32x4_t v129 = v115[1];
    int32x4_t v130 = vzip1q_s32(*v113, *v119);
    int32x4_t v131 = vzip1q_s32(*v116, *v112);
    int32x4_t v132 = v120[1];
    float32x4_t v725 = (float32x4_t)vzip1q_s32(v130, v131);
    float32x4_t v730 = (float32x4_t)vzip2q_s32(v130, v131);
    int32x4_t v133 = v121[1];
    float32x4_t v134 = (float32x4_t)vzip1q_s32(vzip2q_s32(*v113, *v119), vzip2q_s32(*v116, *v112));
    int32x4_t v135 = vzip1q_s32(*v114, *v120);
    int32x4_t v136 = vzip1q_s32(*v115, *v121);
    float32x4_t v137 = (float32x4_t)vzip1q_s32(v135, v136);
    float32x4_t v138 = (float32x4_t)vzip2q_s32(v135, v136);
    float32x4_t v139 = (float32x4_t)vzip1q_s32(vzip2q_s32(*v114, *v120), vzip2q_s32(*v115, *v121));
    int32x4_t v140 = vzip1q_s32(v124, v126);
    int32x4_t v141 = vzip1q_s32(v125, v127);
    float32x4_t v689 = (float32x4_t)vzip1q_s32(v140, v141);
    float32x4_t v741 = (float32x4_t)vzip2q_s32(v140, v141);
    float32x4_t v740 = (float32x4_t)vzip1q_s32(vzip2q_s32(v124, v126), vzip2q_s32(v125, v127));
    int32x4_t v142 = vzip1q_s32(v128, v132);
    int32x4_t v143 = vzip1q_s32(v129, v133);
    float32x4_t v729 = (float32x4_t)vzip1q_s32(v142, v143);
    float32x4_t v728 = (float32x4_t)vzip2q_s32(v142, v143);
    float32x4_t v727 = (float32x4_t)vzip1q_s32(vzip2q_s32(v128, v132), vzip2q_s32(v129, v133));
    v118.i32[1] = v116[2].i32[0];
    v118.i32[2] = v119[2].i32[0];
    v118.i32[3] = v112[2].i32[0];
    v123.i32[1] = v115[2].i32[0];
    v123.i32[2] = v120[2].i32[0];
    v123.i32[3] = v121[2].i32[0];
    float32x4_t v692 = vmulq_f32(v98, v118);
    float32x4_t v707 = vmulq_f32(v100, v123);
    uint64_t v145 = *(void *)(v23 + 40);
    uint64_t v144 = *(void *)(v23 + 48);
    int32x4_t v146 = *(int32x4_t *)(v145 + 28);
    int32x4_t v147 = *(int32x4_t *)(v145 + 40);
    uint64_t v148 = *(void *)(v23 + 264);
    uint64_t v149 = *(void *)(v23 + 272);
    int32x4_t v150 = *(int32x4_t *)(v148 + 28);
    int32x4_t v151 = *(int32x4_t *)(v148 + 40);
    uint64_t v152 = *(void *)(v23 + 488);
    uint64_t v153 = *(void *)(v23 + 496);
    int32x4_t v154 = *(int32x4_t *)(v152 + 28);
    uint64_t v155 = *(void *)(v23 + 712);
    int32x4_t v156 = vzip1q_s32(v146, v154);
    int32x4_t v157 = *(int32x4_t *)(v152 + 40);
    int32x4_t v158 = vzip2q_s32(v146, v154);
    int32x4_t v159 = *(int32x4_t *)(v155 + 28);
    int32x4_t v160 = vzip1q_s32(v150, v159);
    int32x4_t v161 = vzip2q_s32(v150, v159);
    int32x4_t v162 = *(int32x4_t *)(v155 + 40);
    float32x4_t v691 = (float32x4_t)vzip1q_s32(v156, v160);
    float32x4_t v690 = (float32x4_t)vzip2q_s32(v156, v160);
    float32x4_t v739 = (float32x4_t)vzip1q_s32(v158, v161);
    int32x4_t v163 = vzip1q_s32(v147, v157);
    int32x4_t v164 = vzip1q_s32(v151, v162);
    float32x4_t v738 = (float32x4_t)vzip1q_s32(v163, v164);
    float32x4_t v737 = (float32x4_t)vzip2q_s32(v163, v164);
    float32x4_t v736 = (float32x4_t)vzip1q_s32(vzip2q_s32(v147, v157), vzip2q_s32(v151, v162));
    v163.i32[0] = vdupq_laneq_s32(v147, 3).u32[0];
    v163.i32[1] = v157.i32[3];
    v163.i32[2] = *(_DWORD *)(v145 + 56);
    v163.i32[3] = *(_DWORD *)(v152 + 56);
    v147.i32[0] = vdupq_laneq_s32(v151, 3).u32[0];
    v147.i32[1] = v162.i32[3];
    v147.i32[2] = *(_DWORD *)(v148 + 56);
    v147.i32[3] = *(_DWORD *)(v155 + 56);
    float32x4_t v735 = (float32x4_t)vzip1q_s32(v163, v147);
    float32x4_t v734 = (float32x4_t)vzip2q_s32(v163, v147);
    int32x4_t v165 = *(int32x4_t *)(v144 + 28);
    int32x4_t v166 = *(int32x4_t *)(v153 + 28);
    int32x4_t v167 = vzip1q_s32(v165, v166);
    int32x4_t v168 = vzip2q_s32(v165, v166);
    int32x4_t v169 = *(int32x4_t *)(v149 + 28);
    uint64_t v170 = *(void *)(v23 + 720);
    int32x4_t v171 = *(int32x4_t *)(v170 + 28);
    int32x4_t v172 = vzip1q_s32(v169, v171);
    float32x4_t v706 = (float32x4_t)vzip1q_s32(v167, v172);
    float32x4_t v705 = (float32x4_t)vzip2q_s32(v167, v172);
    float32x4_t v704 = (float32x4_t)vzip1q_s32(v168, vzip2q_s32(v169, v171));
    int32x4_t v173 = *(int32x4_t *)(v144 + 40);
    int32x4_t v174 = *(int32x4_t *)(v153 + 40);
    int32x4_t v175 = vzip1q_s32(v173, v174);
    int32x4_t v176 = *(int32x4_t *)(v149 + 40);
    int32x4_t v177 = *(int32x4_t *)(v170 + 40);
    int32x4_t v178 = vzip1q_s32(v176, v177);
    float32x4_t v703 = (float32x4_t)vzip1q_s32(v175, v178);
    float32x4_t v702 = (float32x4_t)vzip2q_s32(v175, v178);
    int32x4_t v179 = vzip2q_s32(v173, v174);
    v173.i32[0] = vdupq_laneq_s32(v173, 3).u32[0];
    v173.i32[1] = v174.i32[3];
    float32x4_t v701 = (float32x4_t)vzip1q_s32(v179, vzip2q_s32(v176, v177));
    v174.i32[0] = vdupq_laneq_s32(v176, 3).u32[0];
    v174.i32[1] = v177.i32[3];
    v173.i32[2] = *(_DWORD *)(v144 + 56);
    v173.i32[3] = *(_DWORD *)(v153 + 56);
    v174.i32[2] = *(_DWORD *)(v149 + 56);
    v174.i32[3] = *(_DWORD *)(v170 + 56);
    int32x4_t v180 = vzip1q_s32(v173, v174);
    float32x4_t v700 = (float32x4_t)v180;
    int32x4_t v181 = vzip2q_s32(v173, v174);
    float32x4_t v699 = (float32x4_t)v181;
    v181.i64[0] = *(void *)(v23 + 88);
    v174.i64[0] = *(void *)(v23 + 536);
    int32x4_t v182 = vzip1q_s32(v181, v174);
    v174.i64[0] = *(void *)(v23 + 312);
    v180.i64[0] = *(void *)(v23 + 760);
    int32x4_t v183 = vzip1q_s32(v174, v180);
    int32x4_t v184 = vzip1q_s32(v182, v183);
    float32x4_t v717 = (float32x4_t)v184;
    int32x4_t v185 = vzip2q_s32(v182, v183);
    float32x4_t v716 = (float32x4_t)v185;
    v185.i64[0] = *(void *)(v23 + 116);
    v183.i64[0] = *(void *)v749;
    int32x4_t v186 = vzip1q_s32(v185, v183);
    v183.i64[0] = *(void *)(v745 + 44);
    v184.i64[0] = *(void *)(v749 + 224);
    int32x4_t v187 = vzip1q_s32(v183, v184);
    float32x4_t v715 = (float32x4_t)vzip1q_s32(v186, v187);
    float32x4_t v714 = (float32x4_t)vzip2q_s32(v186, v187);
    BOOL v634 = v97;
    v186.i32[0] = *(_DWORD *)(v23 + 160);
    v186.i32[1] = *(_DWORD *)(v23 + 384);
    v186.i32[2] = *(_DWORD *)(v23 + 608);
    v186.i32[3] = *(_DWORD *)(v23 + 832);
    float32x4_t v600 = (float32x4_t)v186;
    v187.i32[0] = *(_DWORD *)(v145 + 60);
    v187.i32[1] = *(_DWORD *)(v148 + 60);
    unsigned int v188 = 0;
    *(float *)v186.i32 = *(float *)&a4 * 0.8;
    float32x4_t v599 = vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v186.i8, 0));
    int32x4_t v189 = *(int32x4_t *)(v23 + 72);
    float32x4_t v684 = (float32x4_t)vdupq_laneq_s32(v189, 3);
    LODWORD(v686) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v684.f32, *(float32x2_t *)v684.f32).u32[0];
    float32x4_t v681 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)v745, 3);
    LODWORD(v683) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v681.f32, *(float32x2_t *)v681.f32).u32[0];
    int32x4_t v190 = *(int32x4_t *)(v745 + 224);
    float32x4_t v678 = (float32x4_t)vdupq_laneq_s32(v190, 3);
    LODWORD(v680) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v678.f32, *(float32x2_t *)v678.f32).u32[0];
    int32x4_t v191 = *(int32x4_t *)(v749 + 180);
    int32x4_t v192 = vdupq_laneq_s32(v191, 3);
    LODWORD(v675) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v192.i8, *(float32x2_t *)v192.i8).u32[0];
    float32x4_t v676 = (float32x4_t)v192;
    int32x4_t v193 = *(int32x4_t *)(v23 + 100);
    float32x4_t v672 = (float32x4_t)vdupq_laneq_s32(v193, 3);
    LODWORD(v674) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v672.f32, *(float32x2_t *)v672.f32).u32[0];
    v187.i32[2] = *(_DWORD *)(v152 + 60);
    v187.i32[3] = *(_DWORD *)(v155 + 60);
    float32x4_t v733 = (float32x4_t)v187;
    v187.i32[0] = *(_DWORD *)(v144 + 60);
    v187.i32[1] = *(_DWORD *)(v149 + 60);
    v187.i32[2] = *(_DWORD *)(v153 + 60);
    v187.i32[3] = *(_DWORD *)(v170 + 60);
    float32x4_t v698 = (float32x4_t)v187;
    float32x4_t v598 = (float32x4_t)vdupq_lane_s32(v742, 0);
    int32x4_t v194 = *(int32x4_t *)(v745 + 28);
    float32x4_t v669 = (float32x4_t)vdupq_laneq_s32(v194, 3);
    LODWORD(v671) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v669.f32, *(float32x2_t *)v669.f32).u32[0];
    v187.i32[0] = *(_DWORD *)(v23 + 96);
    v187.i32[1] = *(_DWORD *)(v23 + 320);
    v187.i32[2] = *(_DWORD *)(v23 + 544);
    v187.i32[3] = *(_DWORD *)(v23 + 768);
    float32x4_t v713 = (float32x4_t)v187;
    int32x4_t v195 = *(int32x4_t *)(v745 + 252);
    float32x4_t v666 = (float32x4_t)vdupq_laneq_s32(v195, 3);
    LODWORD(v668) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v666.f32, *(float32x2_t *)v666.f32).u32[0];
    v187.i32[0] = *(_DWORD *)(v23 + 124);
    v187.i32[1] = *(_DWORD *)(v23 + 348);
    v187.i32[2] = *(_DWORD *)(v23 + 572);
    v187.i32[3] = *(_DWORD *)(v23 + 796);
    float32x4_t v712 = (float32x4_t)v187;
    int8x16_t v196 = (int8x16_t)v189;
    v196.i32[3] = 0;
    int8x16_t v197 = *(int8x16_t *)v745;
    v197.i32[3] = 0;
    int8x16_t v198 = (int8x16_t)v190;
    v198.i32[3] = 0;
    int8x16_t v199 = (int8x16_t)v191;
    v199.i32[3] = 0;
    int8x16_t v200 = (int8x16_t)v193;
    v200.i32[3] = 0;
    int8x16_t v201 = (int8x16_t)v194;
    v201.i32[3] = 0;
    int8x16_t v202 = (int8x16_t)v195;
    v202.i32[3] = 0;
    int32x4_t v203 = *(int32x4_t *)(v749 + 208);
    int8x16_t v204 = (int8x16_t)v203;
    v204.i32[3] = 0;
    float32x4_t v655 = (float32x4_t)vdupq_laneq_s32(v203, 3);
    LODWORD(v656) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v655.f32, *(float32x2_t *)v655.f32).u32[0];
    int32x4_t v723 = vdupq_lane_s32(*(int32x2_t *)&a4, 0);
    uint64_t v597 = a1 + 7424;
    uint64_t v654 = a1 + 7556;
    char v205 = (float32x4_t *)v69;
    float32x4_t v711 = v137;
    float32x4_t v710 = v138;
    float32x4_t v595 = vsubq_f32(v730, v138);
    float32x4_t v596 = vsubq_f32(v725, v137);
    float32x4_t v724 = v134;
    float32x4_t v709 = v139;
    float32x4_t v594 = vsubq_f32(v134, v139);
    float32x4_t v664 = (float32x4_t)v197;
    float32x4_t v665 = (float32x4_t)v196;
    float32x2_t v685 = *(float32x2_t *)v189.i8;
    float32x2_t v653 = (float32x2_t)vextq_s8(v196, v196, 8uLL).u64[0];
    float32x2_t v652 = (float32x2_t)vext_s8(*(int8x8_t *)v189.i8, (int8x8_t)v653, 4uLL);
    int32x4_t v682 = *(int32x4_t *)v745;
    float32x2_t v651 = (float32x2_t)vextq_s8(v197, v197, 8uLL).u64[0];
    float32x2_t v650 = (float32x2_t)vext_s8(*(int8x8_t *)v745, (int8x8_t)v651, 4uLL);
    float32x4_t v662 = (float32x4_t)v199;
    float32x4_t v663 = (float32x4_t)v198;
    float32x2_t v679 = *(float32x2_t *)v190.i8;
    float32x2_t v649 = (float32x2_t)vextq_s8(v198, v198, 8uLL).u64[0];
    float32x2_t v648 = (float32x2_t)vext_s8(*(int8x8_t *)v190.i8, (int8x8_t)v649, 4uLL);
    float32x2_t v677 = *(float32x2_t *)v191.i8;
    float32x2_t v647 = (float32x2_t)vextq_s8(v199, v199, 8uLL).u64[0];
    float32x2_t v646 = (float32x2_t)vext_s8(*(int8x8_t *)v191.i8, (int8x8_t)v647, 4uLL);
    float32x4_t v660 = (float32x4_t)v201;
    float32x4_t v661 = (float32x4_t)v200;
    float32x2_t v673 = *(float32x2_t *)v193.i8;
    float32x2_t v645 = (float32x2_t)vextq_s8(v200, v200, 8uLL).u64[0];
    float32x2_t v644 = (float32x2_t)vext_s8(*(int8x8_t *)v193.i8, (int8x8_t)v645, 4uLL);
    float32x2_t v670 = *(float32x2_t *)v194.i8;
    float32x2_t v643 = (float32x2_t)vextq_s8(v201, v201, 8uLL).u64[0];
    float32x2_t v642 = (float32x2_t)vext_s8(*(int8x8_t *)v194.i8, (int8x8_t)v643, 4uLL);
    float32x2_t v658 = *(float32x2_t *)v203.i8;
    float32x4_t v659 = (float32x4_t)v202;
    float32x2_t v667 = *(float32x2_t *)v195.i8;
    float32x2_t v641 = (float32x2_t)vextq_s8(v202, v202, 8uLL).u64[0];
    float32x2_t v640 = (float32x2_t)vext_s8(*(int8x8_t *)v195.i8, (int8x8_t)v641, 4uLL);
    float32x4_t v657 = (float32x4_t)v204;
    float32x2_t v639 = (float32x2_t)vextq_s8(v204, v204, 8uLL).u64[0];
    float32x2_t v638 = (float32x2_t)vext_s8(*(int8x8_t *)v203.i8, (int8x8_t)v639, 4uLL);
    float32x4_t v732 = (float32x4_t)v777[0];
    float32x4_t v731 = (float32x4_t)v776[0];
    float32x4_t v726 = v99;
    float32x4_t v693 = (float32x4_t)v101;
    uint64_t v635 = v23;
    while (1)
    {
      unsigned int v206 = *(_DWORD *)(v13 + 196);
      if (v188 < v206) {
        HIDWORD(v632) = *(_DWORD *)(v13 + 192) + v188;
      }
      unsigned int v207 = *(_DWORD *)(v13 + 420);
      if (v188 < v207) {
        LODWORD(v632) = *(_DWORD *)(v13 + 416) + v188;
      }
      unsigned int v208 = *(_DWORD *)(v13 + 644);
      if (v188 < v208) {
        unsigned int v631 = *(_DWORD *)(v13 + 640) + v188;
      }
      unsigned int v209 = *(_DWORD *)(v13 + 868);
      if (v188 < v209) {
        LODWORD(v608) = *(_DWORD *)(v13 + 864) + v188;
      }
      if (v188 < v206) {
        unsigned int v210 = *(_DWORD *)(a1 + 4 * HIDWORD(v632) + 7296);
      }
      else {
        unsigned int v210 = 0;
      }
      if (v188 < v207) {
        unsigned int v211 = *(_DWORD *)(a1 + 4 * v632 + 7296);
      }
      else {
        unsigned int v211 = 0;
      }
      if (v188 < v208) {
        unsigned int v212 = *(_DWORD *)(a1 + 4 * v631 + 7296);
      }
      else {
        unsigned int v212 = 0;
      }
      unsigned int v761 = *(_DWORD *)(v13 + 868);
      BOOL v637 = v96;
      if (v188 < v209)
      {
        int v621 = 0;
        unsigned int v213 = *(_DWORD *)(a1 + 4 * v608 + 7296);
      }
      else
      {
        unsigned int v213 = 0;
        int v621 = 8;
      }
      __int8 v613 = v213;
      unsigned int v753 = *(_DWORD *)(v13 + 644);
      BOOL v620 = v188 >= v208;
      unsigned int v758 = *(_DWORD *)(v13 + 420);
      BOOL v619 = v188 >= v207;
      unsigned int v633 = v188;
      unsigned int v750 = *(_DWORD *)(v13 + 196);
      uint64_t v214 = *(unsigned int *)(v597 + 4 * HIDWORD(v632));
      uint64_t v215 = *(unsigned int *)(v597 + 4 * v632);
      uint64_t v216 = *(unsigned int *)(v597 + 4 * v631);
      BOOL v618 = v188 >= v206;
      uint64_t v217 = *(unsigned int *)(v597 + 4 * v608);
      uint64_t v743 = *(unsigned __int16 *)(a1 + 44 * v214);
      uint64_t v721 = *(void *)(v13 + 144);
      uint64_t v626 = *(void *)(v13 + 368);
      uint64_t v624 = *(unsigned __int16 *)(a1 + 44 * v215);
      uint64_t v718 = *(void *)(v13 + 592);
      uint64_t v628 = *(unsigned __int16 *)(a1 + 44 * v216);
      uint64_t v629 = (int32x4_t *)(v626 + (v624 << 6));
      uint64_t v615 = (int32x4_t *)(v721 + (v743 << 6));
      uint64_t v616 = (int32x4_t *)(v718 + (v628 << 6));
      uint64_t v746 = *(void *)(v13 + 816);
      uint64_t v687 = *(unsigned __int16 *)(a1 + 44 * v217);
      int v614 = (int32x4_t *)(v746 + (v687 << 6));
      v218.i32[0] = v615[3].i32[3];
      v218.i32[1] = v629[3].i32[3];
      v218.i32[2] = v616[3].i32[3];
      v218.i32[3] = v614[3].i32[3];
      float32x4_t v622 = v218;
      float32x4_t v766 = vnegq_f32(v218);
      v205->i8[4] = v606;
      v205->i8[5] = v605;
      v205->i8[6] = v604;
      v205->i8[7] = v603;
      v205->i8[3] = v636;
      if (v212 <= v213) {
        unsigned int v219 = v213;
      }
      else {
        unsigned int v219 = v212;
      }
      if (v211 > v219) {
        unsigned int v219 = v211;
      }
      if (v210 <= v219) {
        unsigned int v220 = v219;
      }
      else {
        unsigned int v220 = v210;
      }
      uint64_t v623 = 16 * v220;
      uint64_t v617 = v205 + 17;
      __int8 v611 = v211;
      __int8 v612 = v212;
      bzero(&v205[17], 16 * v220);
      v205->i8[1] = v220;
      v205->i8[8] = v210;
      v205->i8[9] = v611;
      v205->i8[10] = v612;
      v205->i8[11] = v613;
      v205[4] = v692;
      v205[5] = v707;
      v205[6] = v726;
      v205[7] = v708;
      v205[12].i64[0] = *(void *)(v13 + 136);
      v205[12].i64[1] = *(void *)(v13 + 360);
      v205[13].i64[0] = *(void *)(v13 + 584);
      v205[13].i64[1] = *(void *)(v13 + 808);
      v205[1] = v766;
      int32x4_t v221 = vzip1q_s32(*v615, *v616);
      int32x4_t v222 = vzip1q_s32(*v629, *v614);
      float32x4_t v223 = (float32x4_t)vzip1q_s32(v221, v222);
      float32x4_t v224 = (float32x4_t)vzip2q_s32(v221, v222);
      float32x4_t v225 = (float32x4_t)vzip1q_s32(vzip2q_s32(*v615, *v616), vzip2q_s32(*v629, *v614));
      v205[8] = v223;
      v205[9] = v224;
      unsigned int v630 = v205;
      v205[10] = v225;
      v205[11] = v601;
      uint64_t v226 = 0xFFFFLL;
      uint64_t v227 = 0xFFFFLL;
      if (v214 != 0xFFFF)
      {
        while (!*(unsigned char *)(a1 + 44 * v214 + 5))
        {
          uint64_t v214 = *(unsigned __int16 *)(a1 + 44 * v214 + 2);
          uint64_t v227 = 0xFFFFLL;
          if (v214 == 0xFFFF) {
            goto LABEL_134;
          }
        }
        uint64_t v227 = v214;
      }
LABEL_134:
      uint64_t v13 = v635;
      unsigned int v228 = v608;
      if (v215 != 0xFFFF)
      {
        while (!*(unsigned char *)(a1 + 44 * v215 + 5))
        {
          uint64_t v215 = *(unsigned __int16 *)(a1 + 44 * v215 + 2);
          uint64_t v226 = 0xFFFFLL;
          if (v215 == 0xFFFF) {
            goto LABEL_139;
          }
        }
        uint64_t v226 = v215;
      }
LABEL_139:
      uint64_t v229 = 0xFFFFLL;
      uint64_t v230 = 0xFFFFLL;
      if (v216 == 0xFFFF) {
        goto LABEL_144;
      }
      do
      {
        if (*(unsigned char *)(a1 + 44 * v216 + 5))
        {
          uint64_t v230 = v216;
          break;
        }
        uint64_t v216 = *(unsigned __int16 *)(a1 + 44 * v216 + 2);
        uint64_t v230 = 0xFFFFLL;
      }
      while (v216 != 0xFFFF);
LABEL_144:
      while (v217 != 0xFFFF)
      {
        if (*(unsigned char *)(a1 + 44 * v217 + 5))
        {
          uint64_t v229 = v217;
          break;
        }
        uint64_t v217 = *(unsigned __int16 *)(a1 + 44 * v217 + 2);
        uint64_t v229 = 0xFFFFLL;
      }
      if (v633 < v750)
      {
        HIDWORD(v697) = 0xFFFF;
        if (v227 == 0xFFFF)
        {
          HIDWORD(v695) = 0;
          unsigned int v231 = 1;
LABEL_156:
          uint64_t v227 = 0xFFFFLL;
        }
        else
        {
          unsigned int v231 = 1;
          uint64_t v232 = v227;
          while (v231 == *(unsigned __int8 *)(a1 + 44 * v232 + 5))
          {
            unsigned int v231 = 0;
            uint64_t v232 = *(unsigned __int16 *)(a1 + 44 * v232 + 2);
            if (v232 == 0xFFFF)
            {
              HIDWORD(v695) = 0;
              HIDWORD(v697) = v227;
              goto LABEL_156;
            }
          }
          HIDWORD(v695) = 0;
          HIDWORD(v697) = v227;
          uint64_t v227 = v232;
        }
      }
      else
      {
        unsigned int v231 = 0;
      }
      if (v633 < v758)
      {
        LODWORD(v696) = 0xFFFF;
        if (v226 == 0xFFFF)
        {
          LODWORD(v694) = 0;
          unsigned int v233 = 1;
LABEL_166:
          uint64_t v226 = 0xFFFFLL;
        }
        else
        {
          unsigned int v233 = 1;
          uint64_t v234 = v226;
          while (v233 == *(unsigned __int8 *)(a1 + 44 * v234 + 5))
          {
            unsigned int v233 = 0;
            uint64_t v234 = *(unsigned __int16 *)(a1 + 44 * v234 + 2);
            if (v234 == 0xFFFF)
            {
              LODWORD(v694) = 0;
              LODWORD(v696) = v226;
              goto LABEL_166;
            }
          }
          LODWORD(v694) = 0;
          LODWORD(v696) = v226;
          uint64_t v226 = v234;
        }
      }
      else
      {
        unsigned int v233 = 0;
      }
      if (v633 < v753)
      {
        HIDWORD(v696) = 0xFFFF;
        if (v230 == 0xFFFF)
        {
          HIDWORD(v694) = 0;
          unsigned int v235 = 1;
LABEL_176:
          uint64_t v230 = 0xFFFFLL;
        }
        else
        {
          unsigned int v235 = 1;
          uint64_t v236 = v230;
          while (v235 == *(unsigned __int8 *)(a1 + 44 * v236 + 5))
          {
            unsigned int v235 = 0;
            uint64_t v236 = *(unsigned __int16 *)(a1 + 44 * v236 + 2);
            if (v236 == 0xFFFF)
            {
              HIDWORD(v694) = 0;
              HIDWORD(v696) = v230;
              goto LABEL_176;
            }
          }
          HIDWORD(v694) = 0;
          HIDWORD(v696) = v230;
          uint64_t v230 = v236;
        }
      }
      else
      {
        unsigned int v235 = 0;
      }
      if (v633 < v761)
      {
        LODWORD(v697) = 0xFFFF;
        if (v229 == 0xFFFF)
        {
          LODWORD(v695) = 0;
          unsigned int v237 = 1;
LABEL_186:
          uint64_t v229 = 0xFFFFLL;
        }
        else
        {
          unsigned int v237 = 1;
          uint64_t v238 = v229;
          while (v237 == *(unsigned __int8 *)(a1 + 44 * v238 + 5))
          {
            unsigned int v237 = 0;
            uint64_t v238 = *(unsigned __int16 *)(a1 + 44 * v238 + 2);
            if (v238 == 0xFFFF)
            {
              LODWORD(v695) = 0;
              LODWORD(v697) = v229;
              goto LABEL_186;
            }
          }
          LODWORD(v695) = 0;
          LODWORD(v697) = v229;
          uint64_t v229 = v238;
        }
      }
      else
      {
        unsigned int v237 = 0;
      }
      if (v633 < v750)
      {
        BOOL v240 = v227 != 0xFFFF && v231 < *(unsigned __int8 *)(a1 + 44 * v227 + 5);
        int v239 = !v240;
      }
      else
      {
        int v239 = 1;
      }
      int v241 = v633 >= v758 || v226 == 0xFFFF || v233 >= *(unsigned __int8 *)(a1 + 44 * v226 + 5)
           ? 2
           : 0;
      int v242 = v633 >= v753 || v230 == 0xFFFF || v235 >= *(unsigned __int8 *)(a1 + 44 * v230 + 5)
           ? 4
           : 0;
      int v243 = v633 >= v761 || v229 == 0xFFFF || v237 >= *(unsigned __int8 *)(a1 + 44 * v229 + 5)
           ? 8
           : 0;
      _X2 = &v617[v220];
      float32x4_t v245 = vmlaq_f32(vmlaq_f32(vmulq_f32(v725, v223), v730, v224), v724, v225);
      float32x4_t v246 = vmlaq_f32(vmlaq_f32(vmulq_f32(v711, v223), v710, v224), v709, v225);
      if ((v618 | (2 * v619) | (4 * v620) | v621) != 0xF) {
        break;
      }
      int v247 = &v617[v220];
LABEL_268:
      if (v636) {
        uint64_t v339 = v623;
      }
      else {
        uint64_t v339 = 0;
      }
      unsigned __int32 v340 = *(unsigned __int16 *)(a1 + 2816 + 104 * v632 + 2);
      unsigned __int32 v341 = *(unsigned __int16 *)(a1 + 2816 + 104 * v631 + 2);
      unsigned __int32 v342 = *(unsigned __int16 *)(a1 + 2816 + 104 * v228 + 2);
      unsigned int v343 = v633;
      if (v633 < v750)
      {
        uint64_t v346 = v743;
        uint64_t v347 = v721;
        if (*(unsigned char *)(v721 + (v743 << 6) + 48)) {
          unsigned __int32 v344 = 0;
        }
        else {
          unsigned __int32 v344 = *(unsigned __int16 *)(a1 + 104 * HIDWORD(v632) + 2818);
        }
        BOOL v96 = v637;
        float32x4_t v345 = v630;
      }
      else
      {
        unsigned __int32 v344 = 0;
        BOOL v96 = v637;
        float32x4_t v345 = v630;
        uint64_t v346 = v743;
        uint64_t v347 = v721;
      }
      float32x4_t v348 = (float32x4_t *)((char *)v247 + v339);
      uint64_t v349 = v626 + (v624 << 6);
      unsigned int v350 = *(unsigned __int8 *)(v349 + 48);
      if (v350) {
        unsigned __int32 v340 = 0;
      }
      if (v633 < v758) {
        unsigned __int32 v351 = v340;
      }
      else {
        unsigned __int32 v351 = 0;
      }
      uint64_t v352 = v718 + (v628 << 6);
      unsigned int v353 = *(unsigned __int8 *)(v352 + 48);
      if (v353) {
        unsigned __int32 v341 = 0;
      }
      if (v633 < v753) {
        unsigned __int32 v354 = v341;
      }
      else {
        unsigned __int32 v354 = 0;
      }
      uint64_t v355 = v746 + (v687 << 6);
      unsigned int v356 = *(unsigned __int8 *)(v355 + 48);
      if (v356) {
        unsigned __int32 v342 = 0;
      }
      if (v633 < v761) {
        unsigned __int32 v357 = v342;
      }
      else {
        unsigned __int32 v357 = 0;
      }
      if (v354 <= v357) {
        unsigned __int32 v358 = v357;
      }
      else {
        unsigned __int32 v358 = v354;
      }
      if (v351 > v358) {
        unsigned __int32 v358 = v351;
      }
      if (v344 <= v358) {
        unsigned __int32 v359 = v358;
      }
      else {
        unsigned __int32 v359 = v344;
      }
      uint64_t v360 = v347 + (v346 << 6);
      float v361 = 1.0;
      if (((v344 == 2) & (*(unsigned __int8 *)(v360 + 48) >> 2)) != 0) {
        float v362 = 0.5;
      }
      else {
        float v362 = 1.0;
      }
      if (((v351 == 2) & (v350 >> 2)) != 0) {
        float v363 = 0.5;
      }
      else {
        float v363 = 1.0;
      }
      float v364 = *(float *)(v360 + 44);
      float v365 = *(float *)(v360 + 56);
      float v366 = *(float *)(v349 + 44);
      float v367 = *(float *)(v349 + 56);
      if (((v354 == 2) & (v353 >> 2)) != 0) {
        float v368 = 0.5;
      }
      else {
        float v368 = 1.0;
      }
      float v369 = *(float *)(v352 + 44);
      float v370 = *(float *)(v352 + 56);
      float v371 = *(float *)(v355 + 44);
      float v372 = *(float *)(v355 + 56);
      v345->i8[2] = 2 * v359;
      v345->i8[12] = 2 * v344;
      if (((v357 == 2) & (v356 >> 2)) != 0) {
        float v361 = 0.5;
      }
      v345->i8[13] = 2 * v351;
      v345->i8[14] = 2 * v354;
      v345->i8[15] = 2 * v357;
      v345->i8[0] = 7;
      unsigned __int32 v688 = v359;
      if (v359)
      {
        float32x4_t v373 = vsubq_f32(v245, v246);
        v374.f32[0] = v364 * v362;
        v375.f32[0] = v365 * v362;
        v374.f32[1] = v366 * v363;
        v374.f32[2] = v368 * v369;
        v374.f32[3] = v361 * v371;
        v375.f32[1] = v363 * v367;
        v375.f32[2] = v368 * v370;
        v375.f32[3] = v361 * v372;
        float32x4_t v625 = v375;
        float32x4_t v627 = v374;
        int8x16_t v376 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x3F3504F3u), vabsq_f32(v223));
        float32x4_t v377 = vnegq_f32(v224);
        float32x4_t v378 = vnegq_f32(v225);
        int8x16_t v379 = vbslq_s8(v376, (int8x16_t)v378, (int8x16_t)v223);
        int8x16_t v380 = vandq_s8(v376, (int8x16_t)v224);
        float32x4_t v381 = vnegq_f32(v223);
        float32x4_t v382 = vmlsq_f32(v596, v373, v223);
        float32x4_t v383 = vmlsq_f32(v595, v373, v224);
        float32x4_t v384 = vmlsq_f32(v594, v373, v225);
        int8x16_t v385 = (int8x16_t)vcgtq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v384, v384), v383, v383), v382, v382), (float32x4_t)vdupq_n_s32(0x38D1B717u));
        float32x4_t v386 = (float32x4_t)vorrq_s8(vandq_s8(v385, (int8x16_t)v382), vbicq_s8((int8x16_t)v377, vorrq_s8(v385, v376)));
        float32x4_t v387 = (float32x4_t)vbslq_s8(v385, (int8x16_t)v383, v379);
        float32x4_t v388 = (float32x4_t)vbslq_s8(v385, (int8x16_t)v384, v380);
        float32x4_t v389 = vmlaq_f32(vmlaq_f32(vmulq_f32(v386, v386), v387, v387), v388, v388);
        float32x4_t v390 = vrsqrteq_f32(v389);
        int v391 = 4;
        do
        {
          float32x4_t v390 = vmulq_f32(v390, vrsqrtsq_f32(vmulq_f32(v390, v390), v389));
          --v391;
        }
        while (v391);
        float32x4_t v392 = vmulq_f32(v390, v386);
        float32x4_t v393 = vmulq_f32(v390, v387);
        float32x4_t v394 = vmulq_f32(v390, v388);
        float32x4_t v719 = v393;
        float32x4_t v754 = vmlaq_f32(vmulq_f32(v224, v394), v393, v378);
        float32x4_t v747 = v394;
        float32x4_t v767 = vmlaq_f32(vmulq_f32(v225, v392), v394, v381);
        float32x4_t v751 = v392;
        float32x4_t v762 = vmlaq_f32(vmulq_f32(v223, v393), v392, v377);
        uint64_t v395 = *(void *)(v13 + 168) + 104 * v610;
        uint64_t v396 = *(void *)(v13 + 392) + 104 * HIDWORD(v609);
        uint64_t v397 = *(void *)(v13 + 616) + 104 * v609;
        uint64_t v398 = *(void *)(v13 + 840);
        v345[14].i64[0] = 0;
        v345[14].i64[1] = 0;
        v345[15].i64[0] = v395;
        v345[15].i64[1] = v396;
        v345[16].i64[0] = v397;
        v345[16].i64[1] = v398 + 104 * HIDWORD(v608);
        _X21 = &v348[(2 * v359)];
        bzero(v348, 16 * (2 * v359));
        float32x4_t v401 = v762;
        float32x4_t v402 = v767;
        float32x4_t v403 = v754;
        float32x4_t v404 = v719;
        unsigned __int32 v405 = 0;
        unsigned __int32 v406 = 0;
        unsigned __int32 v407 = 0;
        unsigned __int32 v408 = 0;
        unsigned __int32 v409 = 0;
        uint64_t v410 = v721 + (v743 << 6) + 32;
        __asm { FMOV            V0.4S, #1.0 }
        float32x4_t v759 = _Q0;
        BOOL v96 = v637;
        float32x4_t v412 = v693;
        unsigned int v343 = v633;
        float32x4_t v413 = v730;
        float32x4_t v414 = v692;
        float32x4_t v415 = v691;
        float32x4_t v416 = v690;
        do
        {
          __asm
          {
            PRFM            #0, [X21,#0x180]
            PRFM            #0, [X21,#0x200]
            PRFM            #0, [X21,#0x280]
          }
          if (v405 < v344) {
            unsigned __int32 v409 = v405;
          }
          if (v405 < v351) {
            unsigned __int32 v408 = v405;
          }
          if (v405 < v354) {
            unsigned __int32 v407 = v405;
          }
          if (v405 < v357) {
            unsigned __int32 v406 = v405;
          }
          uint64_t v420 = a1 + 2816 + 104 * HIDWORD(v632) + 12 * v409;
          float32x2_t v421 = *(float32x2_t *)(v420 + 40);
          *(float32x2_t *)v422.f32 = v421;
          v422.i32[2] = *(_DWORD *)(v420 + 48);
          uint64_t v423 = a1 + 2816 + 104 * v632 + 12 * v408;
          float32x2_t v424 = *(float32x2_t *)(v423 + 40);
          *(float32x2_t *)v425.f32 = v424;
          v425.i32[2] = *(_DWORD *)(v423 + 48);
          uint64_t v426 = a1 + 2816 + 104 * v631 + 12 * v407;
          float32x2_t v427 = *(float32x2_t *)(v426 + 40);
          *(float32x2_t *)v428.f32 = v427;
          v428.i32[2] = *(_DWORD *)(v426 + 48);
          uint64_t v429 = a1 + 2816 + 104 * v608 + 12 * v406;
          float32x2_t v430 = *(float32x2_t *)(v429 + 40);
          *(float32x2_t *)v431.f32 = v430;
          v431.i32[2] = *(_DWORD *)(v429 + 48);
          float32x2_t v432 = *(float32x2_t *)(v420 + 64);
          *(float32x2_t *)v433.f32 = v432;
          v433.i32[2] = *(_DWORD *)(v420 + 72);
          float32x2_t v434 = *(float32x2_t *)(v423 + 64);
          *(float32x2_t *)v435.f32 = v434;
          v435.i32[2] = *(_DWORD *)(v423 + 72);
          float32x2_t v436 = *(float32x2_t *)(v426 + 64);
          *(float32x2_t *)v437.f32 = v436;
          v437.i32[2] = *(_DWORD *)(v426 + 72);
          float32x2_t v438 = *(float32x2_t *)(v429 + 64);
          *(float32x2_t *)v439.f32 = v438;
          v439.i32[2] = *(_DWORD *)(v429 + 72);
          uint64_t v440 = *(unsigned __int16 *)(v654 + 4 * HIDWORD(v632) + 2 * v409);
          uint64_t v441 = *(unsigned __int16 *)(v654 + 4 * v632 + 2 * v408);
          uint64_t v442 = *(unsigned __int16 *)(v654 + 4 * v631 + 2 * v407);
          uint64_t v443 = *(unsigned __int16 *)(v654 + 4 * v608 + 2 * v406);
          char v444 = (int32x4_t *)v410;
          if (v440 != 0xFFFF) {
            char v444 = (int32x4_t *)(*(void *)(v13 + 144) + (v440 << 6) + 32);
          }
          char v445 = (int32x4_t *)v410;
          if (v441 != 0xFFFF) {
            char v445 = (int32x4_t *)(*(void *)(v13 + 368) + (v441 << 6) + 32);
          }
          int32x4_t v722 = *v445;
          char v446 = (int32x4_t *)v410;
          if (v442 != 0xFFFF) {
            char v446 = (int32x4_t *)(*(void *)(v13 + 592) + (v442 << 6) + 32);
          }
          float32x4_t v763 = v401;
          float32x4_t v768 = v402;
          float32x4_t v755 = v403;
          int32x4_t v720 = *v446;
          char v447 = (int32x4_t *)v410;
          if (v443 != 0xFFFF) {
            char v447 = (int32x4_t *)(*(void *)(v13 + 816) + (v443 << 6) + 32);
          }
          v400.i32[0] = v344;
          v402.i32[0] = v405;
          int8x16_t v448 = (int8x16_t)v759;
          v448.i32[0] = 0;
          int8x16_t v449 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_u32(v400, (uint32x4_t)v402), 0), (int8x16_t)v759, v448);
          int8x16_t v450 = v449;
          v450.i32[1] = 0;
          v448.i32[0] = v351;
          int8x16_t v451 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_u32((uint32x4_t)v448, (uint32x4_t)v402), 0);
          int8x16_t v452 = vbslq_s8(v451, v449, v450);
          int8x16_t v453 = v452;
          v453.i32[2] = 0;
          v451.i32[0] = v354;
          int8x16_t v454 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_u32((uint32x4_t)v451, (uint32x4_t)v402), 0);
          int8x16_t v455 = vbslq_s8(v454, v452, v453);
          int8x16_t v456 = v455;
          v456.i32[3] = 0;
          v454.i32[0] = v357;
          float32x4_t v457 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_u32((uint32x4_t)v454, (uint32x4_t)v402), 0), v455, v456);
          float32x4_t v458 = vmulq_f32(v751, v457);
          float32x4_t v404 = vmulq_f32(v404, v457);
          float32x4_t v759 = v457;
          float32x4_t v459 = vmulq_f32(v747, v457);
          v422.i32[3] = 0;
          v425.i32[3] = 0;
          v428.i32[3] = 0;
          v431.i32[3] = 0;
          float32x4_t v460 = vmulq_n_f32(v422, v686);
          v460.i32[3] = 0;
          float32x2_t v461 = (float32x2_t)vextq_s8((int8x16_t)v422, (int8x16_t)v422, 8uLL).u64[0];
          *(float32x2_t *)v454.i8 = vmls_f32(vmul_f32(v685, (float32x2_t)vext_s8((int8x8_t)v421, (int8x8_t)v461, 4uLL)), v652, v421);
          *(int8x8_t *)v462.f32 = vext_s8(*(int8x8_t *)v454.i8, (int8x8_t)vmls_f32(vmul_f32(v653, v421), v685, v461), 4uLL);
          v462.i64[1] = v454.u32[0];
          float32x4_t v463 = vmlaq_f32(v460, v684, v462);
          v463.i64[1] = vextq_s8((int8x16_t)v463, (int8x16_t)v463, 8uLL).u32[0];
          float32x4_t v464 = vmulq_f32(v665, v422);
          v464.i64[0] = vpaddq_f32(v464, v464).u64[0];
          float32x4_t v465 = vmlaq_n_f32(v463, v665, vpadd_f32(*(float32x2_t *)v464.f32, *(float32x2_t *)v464.f32).f32[0]);
          float32x4_t v466 = vmulq_n_f32(v425, v683);
          v466.i32[3] = 0;
          v462.i64[0] = vextq_s8((int8x16_t)v425, (int8x16_t)v425, 8uLL).u64[0];
          int8x8_t v467 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v682.i8, (float32x2_t)vext_s8((int8x8_t)v424, *(int8x8_t *)v462.f32, 4uLL)), v650, v424);
          *(int8x8_t *)v468.f32 = vext_s8(v467, (int8x8_t)vmls_f32(vmul_f32(v651, v424), *(float32x2_t *)v682.i8, *(float32x2_t *)v462.f32), 4uLL);
          v468.i64[1] = v467.u32[0];
          float32x4_t v469 = vmlaq_f32(v466, v681, v468);
          int32x4_t v470 = (int32x4_t)vaddq_f32(v465, v465);
          v469.i64[1] = vextq_s8((int8x16_t)v469, (int8x16_t)v469, 8uLL).u32[0];
          float32x4_t v471 = vmulq_f32(v664, v425);
          v471.i64[0] = vpaddq_f32(v471, v471).u64[0];
          float32x4_t v472 = vmlaq_n_f32(v469, v664, vpadd_f32(*(float32x2_t *)v471.f32, *(float32x2_t *)v471.f32).f32[0]);
          int32x4_t v473 = (int32x4_t)vaddq_f32(v472, v472);
          float32x4_t v474 = vmulq_n_f32(v428, v680);
          v474.i32[3] = 0;
          v462.i64[0] = vextq_s8((int8x16_t)v428, (int8x16_t)v428, 8uLL).u64[0];
          *(float32x2_t *)v465.f32 = vmls_f32(vmul_f32(v679, (float32x2_t)vext_s8((int8x8_t)v427, *(int8x8_t *)v462.f32, 4uLL)), v648, v427);
          *(int8x8_t *)v475.f32 = vext_s8(*(int8x8_t *)v465.f32, (int8x8_t)vmls_f32(vmul_f32(v649, v427), v679, *(float32x2_t *)v462.f32), 4uLL);
          v475.i64[1] = v465.u32[0];
          float32x4_t v476 = vmlaq_f32(v474, v678, v475);
          v476.i64[1] = vextq_s8((int8x16_t)v476, (int8x16_t)v476, 8uLL).u32[0];
          float32x4_t v477 = vmulq_f32(v663, v428);
          v477.i64[0] = vpaddq_f32(v477, v477).u64[0];
          float32x4_t v478 = vmlaq_n_f32(v476, v663, vpadd_f32(*(float32x2_t *)v477.f32, *(float32x2_t *)v477.f32).f32[0]);
          int32x4_t v479 = (int32x4_t)vaddq_f32(v478, v478);
          float32x4_t v480 = vmulq_n_f32(v431, v675);
          v480.i32[3] = 0;
          v478.i64[0] = vextq_s8((int8x16_t)v431, (int8x16_t)v431, 8uLL).u64[0];
          *(float32x2_t *)v462.f32 = vmls_f32(vmul_f32(v677, (float32x2_t)vext_s8((int8x8_t)v430, *(int8x8_t *)v478.f32, 4uLL)), v646, v430);
          *(int8x8_t *)v481.f32 = vext_s8(*(int8x8_t *)v462.f32, (int8x8_t)vmls_f32(vmul_f32(v647, v430), v677, *(float32x2_t *)v478.f32), 4uLL);
          v481.i64[1] = v462.u32[0];
          float32x4_t v482 = vmlaq_f32(v480, v676, v481);
          v482.i64[1] = vextq_s8((int8x16_t)v482, (int8x16_t)v482, 8uLL).u32[0];
          float32x4_t v483 = vmulq_f32(v662, v431);
          v483.i64[0] = vpaddq_f32(v483, v483).u64[0];
          float32x4_t v484 = vmlaq_n_f32(v482, v662, vpadd_f32(*(float32x2_t *)v483.f32, *(float32x2_t *)v483.f32).f32[0]);
          int32x4_t v485 = (int32x4_t)vaddq_f32(v484, v484);
          int32x4_t v486 = vzip1q_s32(v470, v479);
          int32x4_t v487 = vzip2q_s32(v470, v479);
          int32x4_t v488 = vzip1q_s32(v473, v485);
          int32x4_t v489 = vzip2q_s32(v473, v485);
          float32x4_t v490 = (float32x4_t)vzip1q_s32(v486, v488);
          float32x4_t v491 = (float32x4_t)vzip2q_s32(v486, v488);
          float32x4_t v492 = (float32x4_t)vzip1q_s32(v487, v489);
          float32x4_t v493 = vaddq_f32(v717, v490);
          v433.i32[3] = 0;
          v435.i32[3] = 0;
          v437.i32[3] = 0;
          float32x4_t v748 = vaddq_f32(v716, v491);
          v439.i32[3] = 0;
          float32x4_t v494 = vmulq_n_f32(v433, v674);
          v494.i32[3] = 0;
          float32x4_t v495 = vaddq_f32(v713, v492);
          v462.i64[0] = vextq_s8((int8x16_t)v433, (int8x16_t)v433, 8uLL).u64[0];
          *(float32x2_t *)v465.f32 = vmls_f32(vmul_f32(v673, (float32x2_t)vext_s8((int8x8_t)v432, *(int8x8_t *)v462.f32, 4uLL)), v644, v432);
          *(int8x8_t *)v496.f32 = vext_s8(*(int8x8_t *)v465.f32, (int8x8_t)vmls_f32(vmul_f32(v645, v432), v673, *(float32x2_t *)v462.f32), 4uLL);
          v496.i64[1] = v465.u32[0];
          float32x4_t v497 = vmlaq_f32(v494, v672, v496);
          v497.i64[1] = vextq_s8((int8x16_t)v497, (int8x16_t)v497, 8uLL).u32[0];
          float32x4_t v498 = vmulq_f32(v661, v433);
          v498.i64[0] = vpaddq_f32(v498, v498).u64[0];
          float32x4_t v499 = vmulq_n_f32(v435, v671);
          v499.i32[3] = 0;
          float32x4_t v500 = vmlaq_n_f32(v497, v661, vpadd_f32(*(float32x2_t *)v498.f32, *(float32x2_t *)v498.f32).f32[0]);
          v498.i64[0] = vextq_s8((int8x16_t)v435, (int8x16_t)v435, 8uLL).u64[0];
          *(float32x2_t *)v462.f32 = vmls_f32(vmul_f32(v670, (float32x2_t)vext_s8((int8x8_t)v434, *(int8x8_t *)v498.f32, 4uLL)), v642, v434);
          *(int8x8_t *)v501.f32 = vext_s8(*(int8x8_t *)v462.f32, (int8x8_t)vmls_f32(vmul_f32(v643, v434), v670, *(float32x2_t *)v498.f32), 4uLL);
          v501.i64[1] = v462.u32[0];
          float32x4_t v502 = vmlaq_f32(v499, v669, v501);
          v502.i64[1] = vextq_s8((int8x16_t)v502, (int8x16_t)v502, 8uLL).u32[0];
          int32x4_t v503 = (int32x4_t)vaddq_f32(v500, v500);
          float32x4_t v504 = vmulq_f32(v660, v435);
          v504.i64[0] = vpaddq_f32(v504, v504).u64[0];
          float32x4_t v505 = vmlaq_n_f32(v502, v660, vpadd_f32(*(float32x2_t *)v504.f32, *(float32x2_t *)v504.f32).f32[0]);
          int32x4_t v506 = (int32x4_t)vaddq_f32(v505, v505);
          float32x4_t v507 = vmulq_n_f32(v437, v668);
          v507.i32[3] = 0;
          v505.i64[0] = vextq_s8((int8x16_t)v437, (int8x16_t)v437, 8uLL).u64[0];
          *(float32x2_t *)v500.f32 = vmls_f32(vmul_f32(v667, (float32x2_t)vext_s8((int8x8_t)v436, *(int8x8_t *)v505.f32, 4uLL)), v640, v436);
          *(int8x8_t *)v508.f32 = vext_s8(*(int8x8_t *)v500.f32, (int8x8_t)vmls_f32(vmul_f32(v641, v436), v667, *(float32x2_t *)v505.f32), 4uLL);
          v508.i64[1] = v500.u32[0];
          float32x4_t v509 = vmlaq_f32(v507, v666, v508);
          v509.i64[1] = vextq_s8((int8x16_t)v509, (int8x16_t)v509, 8uLL).u32[0];
          float32x4_t v510 = vmulq_f32(v659, v437);
          v510.i64[0] = vpaddq_f32(v510, v510).u64[0];
          float32x4_t v511 = vmlaq_n_f32(v509, v659, vpadd_f32(*(float32x2_t *)v510.f32, *(float32x2_t *)v510.f32).f32[0]);
          float32x4_t v512 = vmulq_n_f32(v439, v656);
          v512.i32[3] = 0;
          v508.i64[0] = vextq_s8((int8x16_t)v439, (int8x16_t)v439, 8uLL).u64[0];
          *(float32x2_t *)v505.f32 = vmls_f32(vmul_f32(v658, (float32x2_t)vext_s8((int8x8_t)v438, *(int8x8_t *)v508.f32, 4uLL)), v638, v438);
          *(int8x8_t *)v513.f32 = vext_s8(*(int8x8_t *)v505.f32, (int8x8_t)vmls_f32(vmul_f32(v639, v438), v658, *(float32x2_t *)v508.f32), 4uLL);
          v513.i64[1] = v505.u32[0];
          float32x4_t v514 = vmlaq_f32(v512, v655, v513);
          int32x4_t v515 = (int32x4_t)vaddq_f32(v511, v511);
          v514.i64[1] = vextq_s8((int8x16_t)v514, (int8x16_t)v514, 8uLL).u32[0];
          float32x4_t v516 = vmulq_f32(v657, v439);
          v516.i64[0] = vpaddq_f32(v516, v516).u64[0];
          float32x4_t v517 = vmlaq_n_f32(v514, v657, vpadd_f32(*(float32x2_t *)v516.f32, *(float32x2_t *)v516.f32).f32[0]);
          int32x4_t v518 = (int32x4_t)vaddq_f32(v517, v517);
          int32x4_t v519 = vzip1q_s32(v503, v515);
          int32x4_t v520 = vzip2q_s32(v503, v515);
          int32x4_t v521 = vzip1q_s32(v506, v518);
          int32x4_t v522 = vzip2q_s32(v506, v518);
          float32x4_t v523 = (float32x4_t)vzip1q_s32(v519, v521);
          float32x4_t v524 = (float32x4_t)vzip2q_s32(v519, v521);
          float32x4_t v525 = (float32x4_t)vzip1q_s32(v520, v522);
          float32x4_t v526 = vaddq_f32(v715, v523);
          float32x4_t v527 = vaddq_f32(v714, v524);
          float32x4_t v528 = vaddq_f32(v712, v525);
          float32x4_t v529 = vmlsq_f32(vmulq_f32(v459, v491), v404, v492);
          float32x4_t v530 = vmlsq_f32(vmulq_f32(v458, v492), v459, v490);
          float32x4_t v531 = vmlsq_f32(vmulq_f32(v404, v490), v458, v491);
          float32x4_t v532 = (float32x4_t)vbicq_s8((int8x16_t)v529, (int8x16_t)vcgtq_f32(v412, vabsq_f32(v529)));
          float32x4_t v533 = (float32x4_t)vbicq_s8((int8x16_t)v530, (int8x16_t)vcgtq_f32(v412, vabsq_f32(v530)));
          float32x4_t v534 = (float32x4_t)vbicq_s8((int8x16_t)v531, (int8x16_t)vcgtq_f32(v412, vabsq_f32(v531)));
          float32x4_t v535 = vmlaq_f32(vmlaq_f32(vmulq_f32(v415, v532), v533, v416), v534, v739);
          float32x4_t v536 = vmlaq_f32(vmlaq_f32(vmulq_f32(v738, v532), v533, v737), v534, v736);
          float32x4_t v537 = vmlaq_f32(vmlaq_f32(vmulq_f32(v735, v532), v533, v734), v534, v733);
          float32x4_t v538 = vmlaq_f32(v414, v726, vmlaq_f32(vmlaq_f32(vmulq_f32(v535, v535), v536, v536), v537, v537));
          int32x4_t v539 = *v447;
          float32x4_t v751 = v458;
          if (v637)
          {
            float32x4_t v540 = vmlsq_f32(vmulq_f32(v459, v524), v404, v525);
            float32x4_t v541 = vmlsq_f32(vmulq_f32(v458, v525), v459, v523);
            float32x4_t v542 = vmlsq_f32(vmulq_f32(v404, v523), v458, v524);
            float32x4_t v543 = (float32x4_t)vbicq_s8((int8x16_t)v540, (int8x16_t)vcgtq_f32(v412, vabsq_f32(v540)));
            float32x4_t v544 = v459;
            float32x4_t v545 = (float32x4_t)vbicq_s8((int8x16_t)v541, (int8x16_t)vcgtq_f32(v412, vabsq_f32(v541)));
            float32x4_t v546 = (float32x4_t)vbicq_s8((int8x16_t)v542, (int8x16_t)vcgtq_f32(v412, vabsq_f32(v542)));
            float32x4_t v547 = vmlaq_f32(vmlaq_f32(vmulq_f32(v706, v543), v545, v705), v546, v704);
            float32x4_t v548 = vmlaq_f32(vmlaq_f32(vmulq_f32(v703, v543), v545, v702), v546, v701);
            float32x4_t v549 = vmlaq_f32(vmlaq_f32(vmulq_f32(v700, v543), v545, v699), v546, v698);
            float32x4_t v538 = vaddq_f32(v538, vmlaq_f32(v707, v708, vmlaq_f32(vmlaq_f32(vmulq_f32(v547, v547), v548, v548), v549, v549)));
            float32x4_t v550 = v730;
            float32x4_t v551 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v711, v458), v710, v404), v709, v544), v729, v543), v728, v545), v727, v546);
          }
          else
          {
            float32x4_t v547 = 0uLL;
            if (v634)
            {
              float32x4_t v551 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v711, v458), v710, v404), v709, v459), v729, vmlsq_f32(vmulq_f32(v459, v524), v404, v525)), v728, vmlsq_f32(vmulq_f32(v458, v525), v459, v523)), v727, vmlsq_f32(vmulq_f32(v404, v523), v458, v524));
              float32x4_t v548 = 0uLL;
              float32x4_t v549 = 0uLL;
            }
            else
            {
              float32x4_t v548 = 0uLL;
              float32x4_t v549 = 0uLL;
              float32x4_t v551 = 0uLL;
            }
            float32x4_t v544 = v459;
            float32x4_t v550 = v413;
          }
          float32x4_t v552 = vsubq_f32(v493, v526);
          float32x4_t v744 = vsubq_f32(v748, v527);
          float32x4_t v553 = vsubq_f32(v495, v528);
          int32x4_t v554 = vzip1q_s32(*v444, v720);
          int32x4_t v555 = vzip1q_s32(v722, v539);
          int32x4_t v556 = vzip2q_s32(v722, v539);
          float32x4_t v557 = (float32x4_t)vzip1q_s32(v554, v555);
          float32x4_t v558 = (float32x4_t)vzip2q_s32(v554, v555);
          float32x4_t v559 = (float32x4_t)vzip1q_s32(vzip2q_s32(*v444, v720), v556);
          float32x4_t v747 = v544;
          float32x4_t v348 = _X21 + 26;
          float32x4_t v756 = vmulq_f32(v755, v759);
          float32x4_t v769 = vmulq_f32(v768, v759);
          float32x4_t v764 = vmulq_f32(v763, v759);
          float32x4_t v560 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v725, v458), v550, v404), v724, v544), v689, v532), v741, v533), v740, v534);
          float32x4_t v561 = vnegq_f32(v492);
          _X21[6] = v547;
          _X21[7] = v548;
          float32x4_t v562 = vnegq_f32(v490);
          float32x4_t v563 = vnegq_f32(v491);
          _X21[8] = v549;
          float32x4_t v564 = vrecpeq_f32(v538);
          int v565 = 4;
          do
          {
            float32x4_t v564 = vmulq_f32(v564, vrecpsq_f32(v564, v538));
            --v565;
          }
          while (v565);
          float32x4_t v566 = (float32x4_t)vdupq_n_s32(0x3F4CCCCDu);
          _X21[3] = v535;
          _X21[4] = v536;
          _X21[5] = v537;
          _X21[9] = vmlaq_f32(vmlaq_f32(vmulq_f32(v458, v552), v744, v404), v553, v544);
          _X21[10] = vmulq_f32(v759, (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v564, v566), (int8x16_t)vcgtzq_f32(v538)));
          _X21[11] = vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v458, v557), v558, v404), v559, v544), v731, v551), v732, v560);
          float32x4_t v401 = v764;
          float32x4_t v402 = v769;
          float32x4_t v567 = vmlaq_f32(vmulq_f32(v764, v491), v769, v561);
          float32x4_t v403 = v756;
          float32x4_t v568 = vmlaq_f32(vmulq_f32(v756, v492), v764, v562);
          float32x4_t v569 = vmlaq_f32(vmulq_f32(v769, v490), v756, v563);
          float32x4_t v412 = v693;
          float32x4_t v570 = (float32x4_t)vbicq_s8((int8x16_t)v567, (int8x16_t)vcgtq_f32(v693, vabsq_f32(v567)));
          float32x4_t v571 = (float32x4_t)vbicq_s8((int8x16_t)v568, (int8x16_t)vcgtq_f32(v693, vabsq_f32(v568)));
          float32x4_t v572 = (float32x4_t)vbicq_s8((int8x16_t)v569, (int8x16_t)vcgtq_f32(v693, vabsq_f32(v569)));
          float32x4_t v415 = v691;
          float32x4_t v416 = v690;
          float32x4_t v573 = vmlaq_f32(vmlaq_f32(vmulq_f32(v691, v570), v571, v690), v572, v739);
          float32x4_t v574 = vmlaq_f32(vmlaq_f32(vmulq_f32(v738, v570), v571, v737), v572, v736);
          float32x4_t v575 = vmlaq_f32(vmlaq_f32(vmulq_f32(v735, v570), v571, v734), v572, v733);
          float32x4_t v414 = v692;
          float32x4_t v576 = vmlaq_f32(v692, v726, vmlaq_f32(vmlaq_f32(vmulq_f32(v573, v573), v574, v574), v575, v575));
          _X21[1] = v404;
          _X21[2] = v544;
          _X21[12] = (float32x4_t)v723;
          *_X21 = v458;
          if (v637)
          {
            float32x4_t v577 = vmlsq_f32(vmulq_f32(v764, v524), v769, v525);
            float32x4_t v578 = vmlsq_f32(vmulq_f32(v756, v525), v764, v523);
            float32x4_t v579 = vmlsq_f32(vmulq_f32(v769, v523), v756, v524);
            float32x4_t v580 = (float32x4_t)vbicq_s8((int8x16_t)v577, (int8x16_t)vcgtq_f32(v693, vabsq_f32(v577)));
            float32x4_t v581 = (float32x4_t)vbicq_s8((int8x16_t)v578, (int8x16_t)vcgtq_f32(v693, vabsq_f32(v578)));
            float32x4_t v582 = (float32x4_t)vbicq_s8((int8x16_t)v579, (int8x16_t)vcgtq_f32(v693, vabsq_f32(v579)));
            float32x4_t v583 = vmlaq_f32(vmlaq_f32(vmulq_f32(v706, v580), v581, v705), v582, v704);
            float32x4_t v584 = vmlaq_f32(vmlaq_f32(vmulq_f32(v703, v580), v581, v702), v582, v701);
            float32x4_t v585 = vmlaq_f32(vmlaq_f32(vmulq_f32(v700, v580), v581, v699), v582, v698);
            float32x4_t v403 = v756;
            float32x4_t v576 = vaddq_f32(v576, vmlaq_f32(v707, v708, vmlaq_f32(vmlaq_f32(vmulq_f32(v583, v583), v584, v584), v585, v585)));
            float32x4_t v401 = v764;
            float32x4_t v586 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v711, v756), v710, v769), v709, v764), v729, v580), v728, v581), v727, v582);
            float32x4_t v402 = v769;
            float32x4_t v587 = v730;
            float32x4_t v588 = v725;
          }
          else
          {
            float32x4_t v583 = 0uLL;
            float32x4_t v588 = v725;
            if (v634)
            {
              float32x4_t v586 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v711, v756), v710, v769), v709, v764), v729, vmlsq_f32(vmulq_f32(v764, v524), v769, v525)), v728, vmlsq_f32(vmulq_f32(v756, v525), v764, v523)), v727, vmlsq_f32(vmulq_f32(v769, v523), v756, v524));
              float32x4_t v584 = 0uLL;
              float32x4_t v585 = 0uLL;
            }
            else
            {
              float32x4_t v584 = 0uLL;
              float32x4_t v585 = 0uLL;
              float32x4_t v586 = 0uLL;
            }
            float32x4_t v587 = v730;
          }
          uint32x4_t v400 = (uint32x4_t)v724;
          float32x4_t v589 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v588, v403), v587, v402), v724, v401), v689, v570), v741, v571), v740, v572);
          _X21[19] = v583;
          _X21[20] = v584;
          _X21[21] = v585;
          float32x4_t v590 = vrecpeq_f32(v576);
          int v591 = 4;
          do
          {
            float32x4_t v590 = vmulq_f32(v590, vrecpsq_f32(v590, v576));
            --v591;
          }
          while (v591);
          _X21[13] = v403;
          _X21[14] = v402;
          _X21[15] = v401;
          _X21[16] = v573;
          _X21[17] = v574;
          _X21[18] = v575;
          _X21[22] = vmlaq_f32(vmlaq_f32(vmulq_f32(v403, v552), v744, v402), v553, v401);
          _X21[23] = vmulq_f32(v759, (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v590, v566), (int8x16_t)vcgtzq_f32(v576)));
          _X21[24] = vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v403, v557), v558, v402), v559, v401), v731, v586), v732, v589);
          _X21[25] = (float32x4_t)v723;
          ++v405;
          _X21 += 26;
          float32x4_t v413 = v730;
        }
        while (v405 != v688);
        v630[2] = v627;
        v630[3] = v625;
        ++HIDWORD(v609);
        ++v610;
        ++HIDWORD(v608);
        LODWORD(v609) = v609 + 1;
      }
      unsigned int v188 = v343 + 1;
      char v205 = v348;
      if (v188 == v602) {
        goto LABEL_350;
      }
    }
    int v248 = 0;
    signed int v249 = &_X2[10 * v220];
    uint64_t v250 = v241 | v239 | v242 | v243;
    while (2)
    {
      __asm
      {
        PRFM            #0, [X2,#0x180]
        PRFM            #0, [X2,#0x200]
        PRFM            #0, [X2,#0x280]
      }
      uint64_t v254 = *(void *)(v13 + 144);
      uint64_t v255 = HIDWORD(v695) + *(unsigned __int16 *)(a1 + 44 * HIDWORD(v697));
      uint64_t v256 = *(void *)(v13 + 368);
      uint64_t v257 = v694 + *(unsigned __int16 *)(a1 + 44 * v696);
      uint64_t v258 = *(void *)(v13 + 592);
      uint64_t v259 = HIDWORD(v694) + *(unsigned __int16 *)(a1 + 44 * HIDWORD(v696));
      uint64_t v260 = *(void *)(v13 + 816);
      uint64_t v261 = v695 + *(unsigned __int16 *)(a1 + 44 * v697);
      int v262 = (int32x4_t *)(v254 + (v255 << 6));
      int32x4_t v263 = v262[1];
      signed int v264 = (int32x4_t *)(v256 + (v257 << 6));
      int32x4_t v265 = v264[1];
      signed int v266 = (int32x4_t *)(v258 + (v259 << 6));
      int32x4_t v267 = v266[1];
      signed int v268 = (int32x4_t *)(v260 + (v261 << 6));
      int32x4_t v269 = v268[1];
      int32x4_t v270 = vzip1q_s32(v263, v267);
      int32x4_t v271 = vzip2q_s32(v263, v267);
      int32x4_t v272 = vzip1q_s32(v265, v269);
      int32x4_t v273 = vzip2q_s32(v265, v269);
      float32x4_t v274 = (float32x4_t)vzip1q_s32(v270, v272);
      float32x4_t v275 = (float32x4_t)vzip2q_s32(v270, v272);
      float32x4_t v276 = (float32x4_t)vzip1q_s32(v271, v273);
      float32x4_t v277 = vsubq_f32(v274, v717);
      float32x4_t v278 = vsubq_f32(v275, v716);
      float32x4_t v279 = vsubq_f32(v276, v713);
      float32x4_t v280 = vsubq_f32(v274, v715);
      float32x4_t v281 = vsubq_f32(v275, v714);
      float32x4_t v282 = vsubq_f32(v276, v712);
      float32x4_t v283 = vmlsq_f32(vmulq_f32(v225, v278), v224, v279);
      float32x4_t v284 = vmlsq_f32(vmulq_f32(v223, v279), v225, v277);
      float32x4_t v285 = vmlsq_f32(vmulq_f32(v224, v277), v223, v278);
      float32x4_t v286 = (float32x4_t)vbicq_s8((int8x16_t)v283, (int8x16_t)vcgtq_f32(v693, vabsq_f32(v283)));
      float32x4_t v287 = (float32x4_t)vbicq_s8((int8x16_t)v284, (int8x16_t)vcgtq_f32(v693, vabsq_f32(v284)));
      float32x4_t v288 = (float32x4_t)vbicq_s8((int8x16_t)v285, (int8x16_t)vcgtq_f32(v693, vabsq_f32(v285)));
      float32x4_t v289 = vmlaq_f32(vmlaq_f32(vmulq_f32(v691, v286), v287, v690), v288, v739);
      float32x4_t v290 = vmlaq_f32(vmlaq_f32(vmulq_f32(v738, v286), v287, v737), v288, v736);
      float32x4_t v291 = vmlaq_f32(vmlaq_f32(vmulq_f32(v735, v286), v287, v734), v288, v733);
      float32x4_t v292 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v291, v291), v290, v290), v289, v289), v726, v692);
      if (v637)
      {
        float32x4_t v293 = vmlsq_f32(vmulq_f32(v225, v281), v224, v282);
        float32x4_t v294 = vmlsq_f32(vmulq_f32(v223, v282), v225, v280);
        float32x4_t v295 = vmlsq_f32(vmulq_f32(v224, v280), v223, v281);
        float32x4_t v296 = (float32x4_t)vbicq_s8((int8x16_t)v293, (int8x16_t)vcgtq_f32(v693, vabsq_f32(v293)));
        float32x4_t v297 = (float32x4_t)vbicq_s8((int8x16_t)v294, (int8x16_t)vcgtq_f32(v693, vabsq_f32(v294)));
        float32x4_t v298 = (float32x4_t)vbicq_s8((int8x16_t)v295, (int8x16_t)vcgtq_f32(v693, vabsq_f32(v295)));
        float32x4_t v299 = vmlaq_f32(vmlaq_f32(vmulq_f32(v706, v296), v297, v705), v298, v704);
        float32x4_t v300 = vmlaq_f32(vmlaq_f32(vmulq_f32(v703, v296), v297, v702), v298, v701);
        float32x4_t v301 = vmlaq_f32(vmlaq_f32(vmulq_f32(v700, v296), v297, v699), v298, v698);
        float32x4_t v292 = vaddq_f32(v292, vmlaq_f32(v707, v708, vmlaq_f32(vmlaq_f32(vmulq_f32(v301, v301), v300, v300), v299, v299)));
        float32x4_t v302 = vaddq_f32(v246, vmlaq_f32(vmlaq_f32(vmulq_f32(v729, v296), v728, v297), v727, v298));
      }
      else
      {
        float32x4_t v299 = 0uLL;
        if (v634) {
          float32x4_t v302 = vaddq_f32(v246, vmlaq_f32(vmlaq_f32(vmulq_f32(v729, vmlsq_f32(vmulq_f32(v225, v281), v224, v282)), v728, vmlsq_f32(vmulq_f32(v223, v282), v225, v280)), v727, vmlsq_f32(vmulq_f32(v224, v280), v223, v281)));
        }
        else {
          float32x4_t v302 = v246;
        }
        float32x4_t v300 = 0uLL;
        float32x4_t v301 = 0uLL;
      }
      int v303 = v248 + 1;
      int v247 = _X2 + 10;
      int32x4_t v304 = v262[2];
      int32x4_t v305 = v264[2];
      int32x4_t v306 = v266[2];
      int32x4_t v307 = v268[2];
      int32x4_t v308 = vzip1q_s32(v304, v306);
      int32x4_t v309 = vzip2q_s32(v304, v306);
      int32x4_t v310 = vzip1q_s32(v305, v307);
      float32x4_t v311 = (float32x4_t)vzip1q_s32(v309, vzip2q_s32(v305, v307));
      v312.i32[0] = v262->i32[3];
      v312.i32[1] = v264->i32[3];
      v312.i32[2] = v266->i32[3];
      v312.i32[3] = v268->i32[3];
      float32x4_t v313 = vmlaq_f32(vmlaq_f32(vmulq_f32(v225, v311), v224, (float32x4_t)vzip2q_s32(v308, v310)), v223, (float32x4_t)vzip1q_s32(v308, v310));
      float32x4_t v314 = vaddq_f32(v245, vmlaq_f32(vmlaq_f32(vmulq_f32(v689, v286), v741, v287), v740, v288));
      _X2[3] = v299;
      _X2[4] = v300;
      _X2[5] = v301;
      float32x4_t v315 = vrecpeq_f32(v292);
      int v316 = 4;
      do
      {
        float32x4_t v315 = vmulq_f32(v315, vrecpsq_f32(v315, v292));
        --v316;
      }
      while (v316);
      float32x4_t v317 = vsubq_f32(v314, v302);
      int8x16_t v318 = vandq_s8((int8x16_t)v315, (int8x16_t)vcgtzq_f32(v292));
      float32x4_t v319 = vsubq_f32(v312, v600);
      *_X2 = v289;
      _X2[1] = v290;
      _X2[2] = v291;
      _X2[6] = v319;
      _X2[7] = (float32x4_t)v318;
      float32x4_t v320 = vaddq_f32(v313, vmlsq_f32(vmlaq_f32((float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v317, v766), vandq_s8(vandq_s8((int8x16_t)vcgtq_f32(v598, v317), (int8x16_t)vcgtzq_f32(v622)), (int8x16_t)vcgtq_f32(vnegq_f32(v317), vmulq_n_f32(v319, v607)))), v731, v302), v732, v314));
      _X2[8] = v320;
      _X2[9] = v599;
      if (v636)
      {
        v320.i32[0] = *(_DWORD *)(v254 + (v255 << 6) + 28);
        v290.i32[0] = *(_DWORD *)(v256 + (v257 << 6) + 28);
        v291.i32[0] = *(_DWORD *)(v258 + (v259 << 6) + 28);
        v318.i32[0] = *(_DWORD *)(v260 + (v261 << 6) + 28);
        *(int8x8_t *)v321.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v320.f32, 0), *(int8x8_t *)v290.f32, 4uLL);
        *(int8x8_t *)&v321.u32[2] = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v291.f32, 0), *(int8x8_t *)v318.i8, 4uLL);
        v249[v248] = v321;
      }
      uint64_t v13 = v635;
      if (v250)
      {
        uint64_t v325 = v250;
        unsigned int v228 = v608;
        if ((v250 & 2) == 0) {
          goto LABEL_233;
        }
      }
      else
      {
        unsigned int v322 = v231 + 1;
        uint64_t v323 = 0xFFFFLL;
        unsigned int v228 = v608;
        if (v227 == 0xFFFF)
        {
          BOOL v324 = 0;
        }
        else
        {
          uint64_t v323 = v227;
          while (1)
          {
            unsigned int v326 = *(unsigned __int8 *)(a1 + 44 * v323 + 5);
            if (v322 != v326) {
              break;
            }
            unsigned int v322 = 0;
            uint64_t v323 = *(unsigned __int16 *)(a1 + 44 * v323 + 2);
            if (v323 == 0xFFFF)
            {
              unsigned int v322 = 0;
              BOOL v324 = 0;
              uint64_t v323 = 0xFFFFLL;
              goto LABEL_232;
            }
          }
          BOOL v324 = v322 < v326;
        }
LABEL_232:
        uint64_t v325 = v250 | !v324;
        HIDWORD(v695) = v231;
        HIDWORD(v697) = v227;
        unsigned int v231 = v322;
        uint64_t v227 = v323;
        if ((v250 & 2) == 0)
        {
LABEL_233:
          unsigned int v327 = v233 + 1;
          uint64_t v328 = 0xFFFFLL;
          if (v226 == 0xFFFF)
          {
            int v329 = 2;
          }
          else
          {
            uint64_t v328 = v226;
            while (1)
            {
              unsigned int v330 = *(unsigned __int8 *)(a1 + 44 * v328 + 5);
              if (v327 != v330) {
                break;
              }
              unsigned int v327 = 0;
              uint64_t v328 = *(unsigned __int16 *)(a1 + 44 * v328 + 2);
              if (v328 == 0xFFFF)
              {
                int v329 = 2;
                uint64_t v328 = 0xFFFFLL;
                goto LABEL_242;
              }
            }
            if (v327 >= v330) {
              int v329 = 2;
            }
            else {
              int v329 = 0;
            }
          }
LABEL_242:
          uint64_t v325 = v329 | v325;
          LODWORD(v694) = v233;
          LODWORD(v696) = v226;
          unsigned int v233 = v327;
          uint64_t v226 = v328;
        }
      }
      if ((v250 & 4) != 0)
      {
        if ((v250 & 8) != 0) {
          goto LABEL_266;
        }
LABEL_256:
        unsigned int v335 = v237 + 1;
        uint64_t v336 = 0xFFFFLL;
        if (v229 == 0xFFFF)
        {
          int v337 = 8;
        }
        else
        {
          uint64_t v336 = v229;
          while (1)
          {
            unsigned int v338 = *(unsigned __int8 *)(a1 + 44 * v336 + 5);
            if (v335 != v338) {
              break;
            }
            unsigned int v335 = 0;
            uint64_t v336 = *(unsigned __int16 *)(a1 + 44 * v336 + 2);
            if (v336 == 0xFFFF)
            {
              int v337 = 8;
              uint64_t v336 = 0xFFFFLL;
              goto LABEL_265;
            }
          }
          if (v335 >= v338) {
            int v337 = 8;
          }
          else {
            int v337 = 0;
          }
        }
LABEL_265:
        uint64_t v325 = v337 | v325;
        LODWORD(v695) = v237;
        LODWORD(v697) = v229;
        unsigned int v237 = v335;
        uint64_t v229 = v336;
      }
      else
      {
        unsigned int v331 = v235 + 1;
        uint64_t v332 = 0xFFFFLL;
        if (v230 == 0xFFFF)
        {
          int v333 = 4;
        }
        else
        {
          uint64_t v332 = v230;
          while (1)
          {
            unsigned int v334 = *(unsigned __int8 *)(a1 + 44 * v332 + 5);
            if (v331 != v334) {
              break;
            }
            unsigned int v331 = 0;
            uint64_t v332 = *(unsigned __int16 *)(a1 + 44 * v332 + 2);
            if (v332 == 0xFFFF)
            {
              int v333 = 4;
              uint64_t v332 = 0xFFFFLL;
              goto LABEL_255;
            }
          }
          if (v331 >= v334) {
            int v333 = 4;
          }
          else {
            int v333 = 0;
          }
        }
LABEL_255:
        uint64_t v325 = v333 | v325;
        HIDWORD(v694) = v235;
        HIDWORD(v696) = v230;
        unsigned int v235 = v331;
        uint64_t v230 = v332;
        if ((v250 & 8) == 0) {
          goto LABEL_256;
        }
      }
LABEL_266:
      _X2 = v247;
      int v248 = v303;
      _ZF = v250 == 15;
      uint64_t v250 = v325;
      if (_ZF) {
        goto LABEL_268;
      }
      continue;
    }
  }
LABEL_350:
  *(_DWORD *)(v593 + v592) = 0;
  return 2;
}

uint64_t physx::Dy::createFinalizeSolverContacts4Step(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, float a8, float a9, double a10)
{
  for (uint64_t i = 16; i != 912; i += 224)
    *(_WORD *)(*(void *)(a3 + i) + 30) = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = a2 + 16;
  *(_DWORD *)(a2 + 4112) = 0;
  do
  {
    float32x4_t v14 = (float32x4_t *)(a3 + 224 * v11);
    unint64_t v15 = (uint64_t *)v14[1].i64[0];
    v14[9].i64[0] = v13 + ((unint64_t)v12 << 6);
    _X3 = *v15;
    _X8 = v15[1];
    __asm
    {
      PRFM            #0, [X3]
      PRFM            #0, [X8]
    }
    float32x4_t v24 = *(uint64_t **)(a1 + 8 * v11);
    if (v12 + *((unsigned __int8 *)v24 + 24) > 0x40
      || *(float *)(a3 + 224 * v11 + 212) != 0.0
      || *(float *)(a3 + 224 * v11 + 216) != 0.0)
    {
      return 1;
    }
    _X3 = *(void *)(a3 + 224 * v11 + 168);
    __asm
    {
      PRFM            #0, [X3]
      PRFM            #0, [X3,#0x40]
      PRFM            #0, [X3,#0x80]
    }
    _X7 = *v24;
    if (v11 >= 3)
    {
      _X19 = v24[1];
    }
    else
    {
      __asm { PRFM            #0, [X7] }
      _X19 = v24[1];
      __asm { PRFM            #0, [X19] }
    }
    uint64_t v33 = v14[3].i64[1];
    uint64_t v34 = v14[4].i64[0];
    if (*(float *)(v33 + 12) >= *(float *)(v34 + 12)) {
      float v35 = *(float *)(v34 + 12);
    }
    else {
      float v35 = *(float *)(v33 + 12);
    }
    if (!_X7
      || ((char v36 = *(unsigned char *)(_X7 + 43), (v36 & 2) != 0) ? (v37 = 64) : (v37 = 16),
          (*(unsigned char *)(_X7 + 43) & 4) != 0 || (int v38 = *((unsigned __int8 *)v24 + 25), !*((unsigned char *)v24 + 25))))
    {
      *(_DWORD *)(a2 + 4112) = v12;
      return 1;
    }
    int v39 = 0;
    unsigned int v40 = 0;
    int v41 = 0;
    int v42 = v36;
    v43.i32[0] = *(_DWORD *)_X7;
    float v44 = *(float *)(_X7 + 4);
    unsigned int v45 = (v36 >> 5) & 1;
    if ((v36 & 2) != 0) {
      char v46 = 6;
    }
    else {
      char v46 = 4;
    }
    unsigned int v47 = *(_DWORD *)(_X7 + 8);
    float v48 = *(float *)(_X7 + 12);
    if (v42 < 0) {
      uint64_t v49 = 32;
    }
    else {
      uint64_t v49 = v37;
    }
    unsigned int v50 = v42 & 0xFFFFFF82;
    if (v42 < 0) {
      char v51 = 5;
    }
    else {
      char v51 = v46;
    }
    uint64_t v52 = v12;
    do
    {
      if (v39)
      {
        unsigned int v53 = *(unsigned __int8 *)(_X7 + 41);
        BOOL v54 = v53 > v40;
        LODWORD(v55) = (v53 - v40) << v51;
        if (v54) {
          uint64_t v55 = v55;
        }
        else {
          uint64_t v55 = 0;
        }
        _X19 += v55;
        _X7 += 48;
      }
      unsigned int v40 = *(unsigned __int8 *)(_X7 + 41);
      if (*(unsigned char *)(_X7 + 41))
      {
        for (int j = *(unsigned __int8 *)(_X7 + 41); j; --j)
        {
          if (v41) {
            uint64_t v57 = v49;
          }
          else {
            uint64_t v57 = 0;
          }
          _X19 += v57;
          __asm { PRFM            #0, [X19,#0x80] }
          _X3 = (_OWORD *)(v13 + ((unint64_t)v52 << 6));
          __asm { PRFM            #0, [X3,#0x80] }
          float v61 = v35;
          if (v45)
          {
            if (!v50)
            {
              float v61 = 3.4028e38;
LABEL_45:
              *(void *)&long long v62 = *(void *)(_X7 + 16);
              uint64_t v63 = v13 + ((unint64_t)v52 << 6);
              DWORD2(v62) = *(_DWORD *)(_X7 + 24);
              HIDWORD(v62) = *(_DWORD *)(_X19 + 12);
              *_X3 = v62;
              *(void *)(v63 + 16) = *(void *)_X19;
              LODWORD(v62) = *(_DWORD *)(_X19 + 8);
              *(unsigned char *)(v63 + 48) = *(unsigned char *)(_X7 + 42);
              *(_DWORD *)(v63 + 24) = v62;
              *(float *)(v63 + 28) = v61;
              *(_DWORD *)(v63 + 44) = *(_DWORD *)(_X7 + 36);
              *(int32x2_t *)(v63 + 56) = vrev64_s32(*(int32x2_t *)(_X7 + 28));
              if (v50)
              {
                uint64_t v64 = *(void *)(_X19 + 16);
                int v65 = *(_DWORD *)(_X19 + 24);
              }
              else
              {
                uint64_t v64 = 0;
                int v65 = 0;
              }
              *(void *)(v63 + 32) = v64;
              *(_DWORD *)(v63 + 40) = v65;
              uint64_t v52 = (v52 + 1);
              goto LABEL_49;
            }
            float v61 = *(float *)(_X19 + 28);
          }
          if (v61 != 0.0) {
            goto LABEL_45;
          }
LABEL_49:
          int v41 = 1;
        }
      }
      ++v39;
    }
    while (v39 != v38);
    *(_DWORD *)(a2 + 4112) = v52;
    if ((v42 & 0x10) != 0 || v52 == v12) {
      return 1;
    }
    unint64_t v66 = a3 + 224 * v11;
    *(_DWORD *)(v66 + 152) = v52 - v12;
    *(unsigned char *)(v66 + 156) = v45;
    if (*(unsigned char *)(v14[1].i64[1] + 62)) {
      float v67 = 0.0;
    }
    else {
      float v67 = v44;
    }
    if (*(unsigned char *)(v14[2].i64[0] + 62)) {
      float v68 = 0.0;
    }
    else {
      float v68 = v48;
    }
    v43.f32[1] = v67;
    v43.i64[1] = __PAIR64__(LODWORD(v68), v47);
    float32x4_t v69 = vmulq_f32(v43, *v14);
    *float32x4_t v14 = v69;
    ++v11;
    uint64_t v12 = v52;
  }
  while (v11 != 4);
  return physx::Dy::createFinalizeSolverContacts4Step(a2 + 4128, a3, a4, a5, a6, a7, a8, a9, a10, 0.0, v69.f32[0]);
}

uint64_t physx::Dy::setupSolverConstraintStep4(uint64_t a1, uint64_t a2, float *a3, uint64_t (***a4)(void, void), float a5, float a6, float a7, float a8, float32_t a9)
{
  uint64_t v15 = 0;
  unsigned int v16 = 0;
  unsigned int v17 = 0;
  unsigned int v18 = 0;
  uint64_t v45 = *MEMORY[0x263EF8340];
  *a3 = 0.0;
  __asm { FMOV            V0.4S, #1.0 }
  long long v42 = _Q0;
  while (1)
  {
    float32x4_t v24 = *(uint64_t (**)(_OWORD *))(a1 + 32 * v15 + 8);
    if (!v24) {
      break;
    }
    unsigned int v25 = v16;
    unsigned int v26 = &v44[5 * v16];
    bzero(&v26[5 * v18], 0x3C0uLL);
    if (v18 <= 0xB)
    {
      uint64_t v27 = v18 + 1;
      unsigned int v28 = (_DWORD *)&v44[5 * v18 + 3 + 5 * v25] + 3;
      do
      {
        *(v28 - 4) = -8388609;
        *unsigned int v28 = 2139095039;
        v28 += 20;
      }
      while (v27++ != 12);
    }
    uint64_t v29 = a2 + 208 * v15;
    *(_OWORD *)uint64_t v29 = v42;
    *(_DWORD *)(v29 + 172) = 0;
    *(_DWORD *)(v29 + 176) = 0;
    *(_DWORD *)(v29 + 180) = 0;
    unsigned int v30 = v24(v26);
    if (v30 > v17) {
      unsigned int v17 = v30;
    }
    if (!v30) {
      break;
    }
    uint64_t v38 = a2 + 208 * v15;
    *(void *)(v38 + 136) = v26;
    *(_DWORD *)(v38 + 144) = v30;
    if (*(unsigned char *)(*(void *)(v29 + 24) + 62)) {
      *(_DWORD *)(v29 + 4) = 0;
    }
    if (*(unsigned char *)(*(void *)(v29 + 32) + 62)) {
      *(_DWORD *)(v29 + 12) = 0;
    }
    unsigned int v18 = 12 - v30;
    unsigned int v16 = v30 + v25;
    if (++v15 == 4)
    {
      *(float *)&double v31 = a6;
      *(float *)&double v32 = a7;
      *(float *)&double v33 = a8;
      v34.f32[0] = a9;
      return physx::Dy::setupSolverConstraintStep4(a2, a3, a4, v17, a5, v31, v32, v33, v34, v35, v36, v37);
    }
  }
  return 1;
}

uint64_t physx::Dy::setupSolverConstraintStep4(uint64_t a1, float *a2, uint64_t (***a3)(void, void), int a4, float a5, double a6, double a7, double a8, float32x4_t a9, double a10, double a11, float32x4_t a12)
{
  float v12 = a9.f32[0];
  float v13 = *(float *)&a8;
  float v14 = *(float *)&a7;
  uint64_t v17 = 0;
  float v18 = 0.0;
  uint64_t v309 = *MEMORY[0x263EF8340];
  uint64_t v296 = a1 + 796;
  uint64_t v294 = a1 + 380;
  memset(v308, 0, sizeof(v308));
  do
  {
    v304[v17 + 385] = v18;
    uint64_t v19 = a1 + 208 * v17;
    uint64_t v21 = (_DWORD *)(v19 + 144);
    unsigned int v20 = *(_DWORD *)(v19 + 144);
    uint64_t v22 = *(void *)(v19 + 136);
    if (v20)
    {
      uint64_t v23 = (__int16 *)(v22 + 78);
      for (uint64_t i = *(unsigned int *)(v19 + 144); i; --i)
      {
        if ((*(v23 - 1) & 0x40) != 0)
        {
          int v25 = (unsigned __int16)*v23;
          if (v25 == 2048)
          {
            __int16 v26 = 1024;
            goto LABEL_9;
          }
          if (v25 == 2049)
          {
            __int16 v26 = 1025;
LABEL_9:
            *uint64_t v23 = v26;
          }
        }
        v23 += 40;
      }
    }
    physx::Dy::preprocessRows((float **)v308 + LODWORD(v18), v22, (float32x4_t *)&v304[4 * LODWORD(v18) + 193], (float32x4_t *)&v304[4 * LODWORD(v18) + 1], v20, *(void *)(v19 + 40) + 28, *(void *)(v19 + 48) + 28, v19, *(float *)(*(void *)(v19 + 56) + 32), *(float *)(*(void *)(v19 + 64) + 32), a7, a8, a9, a10, a11, a12, *(_WORD *)(a1 + 208 * v17 + 168), HIBYTE(*(_WORD *)(a1 + 208 * v17 + 168)), 0);
    LODWORD(v18) += *v21;
    ++v17;
  }
  while (v17 != 4);
  uint64_t v27 = (**a3)(a3, (368 * a4 + 656));
  if ((unint64_t)(v27 + 1) > 1)
  {
    uint64_t v35 = 0;
    *a2 = v18;
    int v275 = *(unsigned __int8 *)(*(void *)(a1 + 24) + 62);
    int v274 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 62);
    int v273 = *(unsigned __int8 *)(*(void *)(a1 + 232) + 62);
    int v272 = *(unsigned __int8 *)(*(void *)(a1 + 240) + 62);
    int v271 = *(unsigned __int8 *)(*(void *)(a1 + 440) + 62);
    int v270 = *(unsigned __int8 *)(*(void *)(a1 + 448) + 62);
    int v269 = *(unsigned __int8 *)(*(void *)(a1 + 648) + 62);
    int v268 = *(unsigned __int8 *)(*(void *)(a1 + 656) + 62);
    do
    {
      uint64_t v36 = *(void *)(a1 + v35 + 16);
      *(void *)(v36 + 32) = v27;
      *(_WORD *)(v36 + 30) = (368 * a4 + 640) >> 4;
      *(void *)(v36 + 40) = *(void *)(a1 + v35 + 160);
      v35 += 208;
    }
    while (v35 != 832);
    v38.i32[0] = *(_DWORD *)a1;
    v37.i32[0] = *(_DWORD *)(a1 + 4);
    v38.i32[1] = *(_DWORD *)(a1 + 208);
    v38.i32[2] = *(_DWORD *)(a1 + 416);
    v38.i32[3] = *(_DWORD *)(a1 + 624);
    v40.i32[0] = *(_DWORD *)(a1 + 8);
    v39.i32[0] = *(_DWORD *)(a1 + 12);
    v40.i32[1] = *(_DWORD *)(a1 + 216);
    v40.i32[2] = *(_DWORD *)(a1 + 424);
    v40.i32[3] = *(_DWORD *)(a1 + 632);
    v41.i32[0] = *(_DWORD *)(*(void *)(a1 + 56) + 32);
    v41.i32[1] = *(_DWORD *)(*(void *)(a1 + 264) + 32);
    v41.i32[2] = *(_DWORD *)(*(void *)(a1 + 472) + 32);
    v41.i32[3] = *(_DWORD *)(*(void *)(a1 + 680) + 32);
    v42.i32[0] = *(_DWORD *)(*(void *)(a1 + 64) + 32);
    v42.i32[1] = *(_DWORD *)(*(void *)(a1 + 272) + 32);
    v42.i32[2] = *(_DWORD *)(*(void *)(a1 + 480) + 32);
    v42.i32[3] = *(_DWORD *)(*(void *)(a1 + 688) + 32);
    v37.i32[1] = *(_DWORD *)(a1 + 212);
    v37.i32[2] = *(_DWORD *)(a1 + 420);
    v37.i32[3] = *(_DWORD *)(a1 + 628);
    v39.i32[1] = *(_DWORD *)(a1 + 220);
    v39.i32[2] = *(_DWORD *)(a1 + 428);
    v39.i32[3] = *(_DWORD *)(a1 + 636);
    float32x4_t v278 = v39;
    float32x4_t v279 = v37;
    v28.i64[0] = *(void *)(a1 + 172);
    LODWORD(v43) = *(_DWORD *)(a1 + 180);
    v30.i64[0] = *(void *)v294;
    LODWORD(v44) = *(_DWORD *)(a1 + 388);
    v29.i64[0] = *(void *)(v294 + 208);
    v31.i64[0] = *(void *)v296;
    HIDWORD(v43) = *(_DWORD *)(a1 + 596);
    HIDWORD(v44) = *(_DWORD *)(a1 + 804);
    v45.i32[0] = *(_DWORD *)(a1 + 148);
    v46.i32[0] = *(_DWORD *)(a1 + 152);
    v45.i32[1] = *(_DWORD *)(a1 + 356);
    v45.i32[2] = *(_DWORD *)(a1 + 564);
    v45.i32[3] = *(_DWORD *)(a1 + 772);
    v46.i32[1] = *(_DWORD *)(a1 + 360);
    v46.i32[2] = *(_DWORD *)(a1 + 568);
    BOOL v47 = v46.f32[0] != 3.4028e38 || v45.f32[0] != 3.4028e38;
    v46.i32[3] = *(_DWORD *)(a1 + 776);
    *(unsigned char *)(v27 + 12) = v47;
    BOOL v48 = *(float *)(a1 + 356) != 3.4028e38 || *(float *)(a1 + 360) != 3.4028e38;
    float32x2x2_t v49 = (float32x2x2_t)vzip1q_s32(v28, v29);
    int32x4_t v50 = vzip1q_s32(v30, v31);
    *(unsigned char *)(v27 + 13) = v48;
    BOOL v51 = *(float *)(a1 + 564) != 3.4028e38 || *(float *)(a1 + 568) != 3.4028e38;
    uint64_t v52 = v27 + 640;
    float32x4_t v277 = vmulq_f32(v38, v41);
    float32x4_t v276 = vmulq_f32(v40, v42);
    int32x4_t v53 = vzip2q_s32((int32x4_t)v49, v50);
    *(unsigned char *)(v27 + 14) = v51;
    BOOL v54 = *(float *)(a1 + 772) != 3.4028e38 || *(float *)(a1 + 776) != 3.4028e38;
    *(unsigned char *)(v27 + 15) = v54;
    *(float32x4_t *)(v27 + 48) = v277;
    *(float32x4_t *)(v27 + 64) = v276;
    *(float32x4_t *)(v27 + 80) = v279;
    *(float32x4_t *)(v27 + 96) = v278;
    uint64_t v55 = (float *)(v27 + 112);
    vst2_f32(v55, v49);
    *(int32x4_t *)(v27 + 128) = v53;
    unsigned int v56 = (float *)(v27 + 144);
    vst2_f32(v56, *(float32x2x2_t *)&v43);
    *(_DWORD *)(v27 + 4) = a4;
    *(unsigned char *)uint64_t v27 = 9;
    *(float32x4_t *)(v27 + 16) = vmulq_n_f32(v45, *(float *)&a6);
    *(float32x4_t *)(v27 + 32) = vmulq_n_f32(v46, *(float *)&a6);
    *(unsigned char *)(v27 + 8) = *(_DWORD *)(a1 + 144);
    *(unsigned char *)(v27 + 9) = *(_DWORD *)(a1 + 352);
    *(unsigned char *)(v27 + 10) = *(_DWORD *)(a1 + 560);
    *(unsigned char *)(v27 + 11) = *(_DWORD *)(a1 + 768);
    int32x4_t v57 = *(int32x4_t *)(a1 + 184);
    int32x4_t v58 = *(int32x4_t *)(v294 + 12);
    int32x4_t v59 = *(int32x4_t *)(v294 + 220);
    int32x4_t v60 = *(int32x4_t *)(v296 + 12);
    int32x4_t v61 = *(int32x4_t *)(a1 + 196);
    int32x4_t v62 = *(int32x4_t *)(v294 + 24);
    int32x4_t v63 = *(int32x4_t *)(v294 + 232);
    int32x4_t v64 = *(int32x4_t *)(v296 + 24);
    int32x4_t v65 = vzip1q_s32(v57, v59);
    int32x4_t v66 = vzip2q_s32(v57, v59);
    int32x4_t v67 = vzip1q_s32(v58, v60);
    float32x4_t v68 = (float32x4_t)vzip1q_s32(v65, v67);
    float32x4_t v69 = (float32x4_t)vzip2q_s32(v65, v67);
    float32x4_t v70 = (float32x4_t)vzip1q_s32(v66, vzip2q_s32(v58, v60));
    int32x4_t v71 = vzip1q_s32(v61, v63);
    int32x4_t v72 = vzip1q_s32(v62, v64);
    float32x4_t v73 = (float32x4_t)vzip1q_s32(v71, v72);
    float32x4_t v74 = (float32x4_t)vzip2q_s32(v71, v72);
    float32x4_t v75 = (float32x4_t)vzip1q_s32(vzip2q_s32(v61, v63), vzip2q_s32(v62, v64));
    int32x4_t v76 = *(int32x4_t *)(*(void *)(a1 + 40) + 16);
    int32x4_t v77 = *(int32x4_t *)(*(void *)(a1 + 48) + 16);
    int32x4_t v78 = *(int32x4_t *)(*(void *)(a1 + 248) + 16);
    int32x4_t v79 = *(int32x4_t *)(*(void *)(a1 + 256) + 16);
    int32x4_t v80 = *(int32x4_t *)(*(void *)(a1 + 456) + 16);
    int32x4_t v81 = *(int32x4_t *)(*(void *)(a1 + 464) + 16);
    int32x4_t v82 = *(int32x4_t *)(*(void *)(a1 + 664) + 16);
    int32x4_t v83 = *(int32x4_t *)(*(void *)(a1 + 672) + 16);
    int32x4_t v84 = vzip1q_s32(v76, v80);
    int32x4_t v85 = vzip2q_s32(v76, v80);
    int32x4_t v86 = vzip1q_s32(v78, v82);
    float32x4_t v87 = (float32x4_t)vzip1q_s32(v84, v86);
    float32x4_t v88 = (float32x4_t)vzip2q_s32(v84, v86);
    float32x4_t v89 = (float32x4_t)vzip1q_s32(v85, vzip2q_s32(v78, v82));
    int32x4_t v90 = vzip1q_s32(v77, v81);
    int32x4_t v91 = vzip1q_s32(v79, v83);
    float32x4_t v92 = (float32x4_t)vzip1q_s32(v90, v91);
    float32x4_t v93 = (float32x4_t)vzip2q_s32(v90, v91);
    float32x4_t v94 = (float32x4_t)vzip1q_s32(vzip2q_s32(v77, v81), vzip2q_s32(v79, v83));
    uint64_t v95 = *(int32x4_t **)(a1 + 56);
    BOOL v96 = *(int32x4_t **)(a1 + 64);
    int32x4_t v98 = *v95;
    int32x4_t v97 = v95[1];
    int32x4_t v100 = *v96;
    int32x4_t v99 = v96[1];
    int32x4_t v101 = *(int32x4_t **)(a1 + 264);
    uint64_t v102 = *(int32x4_t **)(a1 + 272);
    int32x4_t v104 = *v101;
    int32x4_t v103 = v101[1];
    int32x4_t v106 = *v102;
    int32x4_t v105 = v102[1];
    signed int v107 = *(int32x4_t **)(a1 + 472);
    int v108 = *(int32x4_t **)(a1 + 480);
    int32x4_t v110 = *v107;
    int32x4_t v109 = v107[1];
    float32x4_t v111 = vsubq_f32(v68, v87);
    float32x4_t v112 = vsubq_f32(v69, v88);
    int32x4_t v114 = *v108;
    int32x4_t v113 = v108[1];
    unsigned int v115 = *(int32x4_t **)(a1 + 680);
    uint64_t v116 = *(int32x4_t **)(a1 + 688);
    float32x4_t v117 = vsubq_f32(v70, v89);
    float32x4_t v118 = vsubq_f32(v73, v92);
    int32x4_t v120 = *v115;
    int32x4_t v119 = v115[1];
    int32x4_t v122 = *v116;
    int32x4_t v121 = v116[1];
    *(float32x4_t *)(v27 + 160) = v111;
    *(float32x4_t *)(v27 + 176) = v112;
    *(float32x4_t *)(v27 + 192) = v117;
    *(float32x4_t *)(v27 + 208) = v118;
    *(float32x4_t *)(v27 + 224) = vsubq_f32(v74, v93);
    *(float32x4_t *)(v27 + 240) = vsubq_f32(v75, v94);
    int v123 = *(_DWORD *)(a1 + 144);
    int v124 = *(_DWORD *)(a1 + 352);
    int v125 = *(_DWORD *)(a1 + 560);
    int v126 = *(_DWORD *)(a1 + 768);
    *(_OWORD *)(v27 + 256) = 0u;
    *(_OWORD *)(v27 + 272) = 0u;
    *(_OWORD *)(v27 + 288) = 0u;
    *(_OWORD *)(v27 + 304) = 0u;
    *(_OWORD *)(v27 + 320) = 0u;
    *(_OWORD *)(v27 + 336) = 0u;
    *(_OWORD *)(v27 + 352) = 0u;
    *(_OWORD *)(v27 + 368) = 0u;
    *(_OWORD *)(v27 + 384) = 0u;
    *(_OWORD *)(v27 + 400) = 0u;
    *(_OWORD *)(v27 + 416) = 0u;
    *(_OWORD *)(v27 + 432) = 0u;
    *(_OWORD *)(v27 + 448) = 0u;
    *(_OWORD *)(v27 + 464) = 0u;
    *(_OWORD *)(v27 + 480) = 0u;
    *(_OWORD *)(v27 + 496) = 0u;
    *(_OWORD *)(v27 + 512) = 0u;
    *(_OWORD *)(v27 + 528) = 0u;
    *(_OWORD *)(v27 + 544) = 0u;
    *(_OWORD *)(v27 + 560) = 0u;
    *(_OWORD *)(v27 + 576) = 0u;
    *(_OWORD *)(v27 + 592) = 0u;
    *(_OWORD *)(v27 + 608) = 0u;
    *(_OWORD *)(v27 + 624) = 0u;
    unsigned int v127 = v305;
    unsigned int v128 = v306;
    unsigned int v129 = v307;
    if (!a4)
    {
LABEL_108:
      *(void *)uint64_t v52 = 0;
      return 2;
    }
    unsigned int v130 = 0;
    unsigned int v131 = 0;
    uint64_t v242 = 0;
    uint64_t v243 = 0;
    float32x2_t v132 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0);
    int32x4_t v133 = vzip1q_s32(v98, v110);
    int32x4_t v134 = vzip1q_s32(v104, v120);
    int32x4_t v135 = vzip2q_s32(v104, v120);
    int32x4_t v136 = vzip1q_s32(v100, v114);
    int32x4_t v137 = vzip1q_s32(v106, v122);
    int32x4_t v138 = vzip2q_s32(v106, v122);
    float32x4_t v266 = (float32x4_t)vzip2q_s32(v136, v137);
    float32x4_t v267 = (float32x4_t)vzip2q_s32(v133, v134);
    int32x4_t v139 = vzip1q_s32(v97, v109);
    int32x4_t v140 = vzip1q_s32(v103, v119);
    int32x4_t v141 = vzip2q_s32(v103, v119);
    int32x4_t v142 = vzip1q_s32(v99, v113);
    int32x4_t v143 = vzip1q_s32(v105, v121);
    uint64_t v250 = v27 + 304;
    uint64_t v251 = v27 + 256;
    float32x4_t v264 = (float32x4_t)vzip2q_s32(v142, v143);
    float32x4_t v265 = (float32x4_t)vzip2q_s32(v139, v140);
    uint64_t v248 = v27 + 400;
    uint64_t v249 = v27 + 352;
    uint64_t v246 = v27 + 496;
    uint64_t v247 = v27 + 448;
    uint64_t v244 = v27 + 592;
    uint64_t v245 = v27 + 544;
    float32x4_t v262 = (float32x4_t)vzip1q_s32(vzip2q_s32(v98, v110), v135);
    float32x4_t v263 = (float32x4_t)vzip1q_s32(v133, v134);
    int v261 = v123 - 1;
    float32x4_t v260 = (float32x4_t)vzip1q_s32(v136, v137);
    int v259 = v305 + v124 - 1;
    float32x4_t v258 = (float32x4_t)vzip1q_s32(vzip2q_s32(v100, v114), v138);
    int v256 = v307 + v126 - 1;
    int v257 = v306 + v125 - 1;
    float32x4_t v255 = (float32x4_t)vzip1q_s32(v139, v140);
    float32x4_t v254 = (float32x4_t)vzip1q_s32(vzip2q_s32(v97, v109), v141);
    float32x4_t v252 = (float32x4_t)vzip1q_s32(vzip2q_s32(v99, v113), vzip2q_s32(v105, v121));
    float32x4_t v253 = (float32x4_t)vzip1q_s32(v142, v143);
    while (1)
    {
      uint64_t v144 = *((void *)v308 + v130);
      if (v130 == v261) {
        unsigned int v145 = v130;
      }
      else {
        unsigned int v145 = v130 + 1;
      }
      if (v127 == v259) {
        unsigned int v146 = v127;
      }
      else {
        unsigned int v146 = v127 + 1;
      }
      if (v128 == v257) {
        unsigned int v147 = v128;
      }
      else {
        unsigned int v147 = v128 + 1;
      }
      if (v129 == v256) {
        unsigned int v148 = v129;
      }
      else {
        unsigned int v148 = v129 + 1;
      }
      __asm { FMOV            V0.4S, #1.0 }
      if ((*(_WORD *)(v144 + 76) & 0x20) != 0 && *(unsigned char *)(a1 + 170))
      {
        __asm { FMOV            V0.2S, #1.0 }
        _Q0 = (float32x4_t)vorrq_s8((int8x16_t)vmin_f32(v132, _D0).u32[0], (int8x16_t)xmmword_234371EE0);
      }
      uint64_t v155 = *((void *)v308 + v127);
      if ((*(_WORD *)(v155 + 76) & 0x20) != 0 && *(unsigned char *)(a1 + 378))
      {
        __asm { FMOV            V1.2S, #1.0 }
        _Q0.i32[1] = vmin_f32(v132, _D1).i32[1];
      }
      uint64_t v157 = *((void *)v308 + v128);
      if ((*(_WORD *)(v157 + 76) & 0x20) != 0 && *(unsigned char *)(a1 + 586))
      {
        __asm { FMOV            V1.2S, #1.0 }
        _Q0.i32[2] = vmin_f32(v132, _D1).u32[0];
      }
      uint64_t v160 = *((void *)v308 + v129);
      v161.i16[0] = *(_WORD *)(v144 + 76);
      v161.i16[1] = *(_WORD *)(v155 + 76);
      v161.i16[2] = *(_WORD *)(v157 + 76);
      v161.i16[3] = *(_WORD *)(v160 + 76);
      int8x16_t v162 = (int8x16_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vand_s8((int8x8_t)vshr_n_u16(v161, 6uLL), (int8x8_t)0x1000100010001)));
      unsigned int v285 = v145;
      unsigned int v284 = v147;
      unsigned int v283 = v146;
      unsigned int v282 = v148;
      if ((v161.i8[6] & 0x20) != 0 && *(unsigned char *)(a1 + 794))
      {
        __asm { FMOV            V1.2S, #1.0 }
        _Q0.i32[3] = vmin_f32(v132, _D1).i32[1];
      }
      int32x4_t v164 = *(int32x4_t *)&v304[4 * v130 + 193];
      int32x4_t v165 = *(int32x4_t *)&v304[4 * v127 + 193];
      int32x4_t v166 = *(int32x4_t *)&v304[4 * v128 + 193];
      int32x4_t v167 = *(int32x4_t *)&v304[4 * v129 + 193];
      int32x4_t v168 = *(int32x4_t *)&v304[4 * v130 + 1];
      int32x4_t v169 = *(int32x4_t *)&v304[4 * v127 + 1];
      int32x4_t v170 = *(int32x4_t *)&v304[4 * v128 + 1];
      int32x4_t v171 = *(int32x4_t *)(v144 + 16);
      int32x4_t v172 = *(int32x4_t *)(v157 + 16);
      int32x4_t v173 = vzip1q_s32(*(int32x4_t *)v144, *(int32x4_t *)v157);
      int32x4_t v174 = *(int32x4_t *)(v155 + 16);
      int32x4_t v175 = *(int32x4_t *)(v160 + 16);
      int32x4_t v176 = vzip1q_s32(*(int32x4_t *)v155, *(int32x4_t *)v160);
      float32x4_t v177 = (float32x4_t)vzip1q_s32(v173, v176);
      float32x4_t v178 = (float32x4_t)vzip2q_s32(v173, v176);
      float32x4_t v179 = (float32x4_t)vzip1q_s32(vzip2q_s32(*(int32x4_t *)v144, *(int32x4_t *)v157), vzip2q_s32(*(int32x4_t *)v155, *(int32x4_t *)v160));
      int32x4_t v180 = vzip1q_s32(v171, v172);
      int32x4_t v181 = vzip2q_s32(v171, v172);
      int32x4_t v182 = vzip1q_s32(v174, v175);
      float32x4_t v183 = (float32x4_t)vzip1q_s32(v180, v182);
      float32x4_t v184 = (float32x4_t)vzip2q_s32(v180, v182);
      float32x4_t v185 = (float32x4_t)vzip1q_s32(v181, vzip2q_s32(v174, v175));
      float32x4_t v186 = *(float32x4_t *)(v144 + 48);
      float32x4_t v187 = *(float32x4_t *)(v155 + 48);
      int32x4_t v188 = *(int32x4_t *)(v157 + 48);
      int32x4_t v189 = *(int32x4_t *)(v160 + 48);
      int32x4_t v190 = vzip1q_s32((int32x4_t)v186, v188);
      int32x4_t v191 = vzip1q_s32((int32x4_t)v187, v189);
      int8x16_t v192 = (int8x16_t)vzip1q_s32(v190, v191);
      int8x16_t v193 = (int8x16_t)vzip2q_s32(v190, v191);
      int8x16_t v194 = (int8x16_t)vzip1q_s32(vzip2q_s32((int32x4_t)v186, v188), vzip2q_s32((int32x4_t)v187, v189));
      int32x4_t v195 = *(int32x4_t *)&v304[4 * v129 + 1];
      v186.i64[0] = vuzp2q_s32(vuzp2q_s32((int32x4_t)v186, (int32x4_t)v187), (int32x4_t)v186).u64[0];
      v186.i64[1] = __PAIR64__(v189.u32[3], v188.u32[3]);
      v187.i32[0] = *(_DWORD *)(v144 + 44);
      v187.i32[1] = *(_DWORD *)(v155 + 44);
      v187.i32[2] = *(_DWORD *)(v157 + 44);
      v187.i32[3] = *(_DWORD *)(v160 + 44);
      int32x4_t v196 = vzip1q_s32(v164, v166);
      int32x4_t v197 = vzip2q_s32(v164, v166);
      int32x4_t v198 = vzip1q_s32(v165, v167);
      int32x4_t v199 = vzip2q_s32(v165, v167);
      float32x4_t v200 = (float32x4_t)vzip1q_s32(v196, v198);
      float32x4_t v201 = (float32x4_t)vzip2q_s32(v196, v198);
      float32x4_t v202 = (float32x4_t)vzip1q_s32(v197, v199);
      v159.i32[3] = *(_DWORD *)(a1 + 768);
      v159.i32[2] = *(_DWORD *)(a1 + 560);
      v159.i32[1] = *(_DWORD *)(a1 + 352);
      v159.i32[0] = *(_DWORD *)(a1 + 144);
      int8x16_t v203 = (int8x16_t)vcgtq_u32(v159, (uint32x4_t)vdupq_n_s32(v131));
      *(void *)(v52 + 352) = 0;
      *(void *)(v52 + 360) = 0;
      *(int8x16_t *)uint64_t v52 = vandq_s8((int8x16_t)v177, v203);
      *(int8x16_t *)(v52 + 16) = vandq_s8((int8x16_t)v178, v203);
      *(int8x16_t *)(v52 + 32) = vandq_s8((int8x16_t)v179, v203);
      int8x16_t v204 = vandq_s8(v162, v203);
      *(int8x16_t *)(v52 + 128) = vandq_s8(v204, (int8x16_t)v183);
      *(int8x16_t *)(v52 + 144) = vandq_s8(v204, (int8x16_t)v184);
      *(int8x16_t *)(v52 + 160) = vandq_s8(v204, (int8x16_t)v185);
      __asm { FMOV            V28.4S, #1.0 }
      *(int8x16_t *)(v52 + 336) = vandq_s8(v162, _Q28);
      *(float32x4_t *)(v52 + 272) = vmulq_f32(_Q0, v187);
      *(float32x4_t *)(v52 + 288) = vmulq_f32(_Q0, v186);
      *(void *)(v52 + 304) = 0;
      *(void *)(v52 + 312) = 0;
      int32x4_t v206 = *(int32x4_t *)(v144 + 32);
      int32x4_t v207 = *(int32x4_t *)(v155 + 32);
      int32x4_t v208 = *(int32x4_t *)(v157 + 32);
      int32x4_t v209 = *(int32x4_t *)(v160 + 32);
      int32x4_t v210 = vzip1q_s32(v206, v208);
      int32x4_t v211 = vzip2q_s32(v206, v208);
      int32x4_t v212 = vzip1q_s32(v207, v209);
      int32x4_t v213 = vzip2q_s32(v207, v209);
      float32x4_t v214 = (float32x4_t)vzip1q_s32(v210, v212);
      float32x4_t v215 = (float32x4_t)vzip2q_s32(v210, v212);
      float32x4_t v216 = (float32x4_t)vzip1q_s32(v211, v213);
      int32x4_t v217 = vzip1q_s32(v168, v170);
      int32x4_t v218 = vzip2q_s32(v168, v170);
      int32x4_t v219 = vzip1q_s32(v169, v195);
      int32x4_t v220 = vzip2q_s32(v169, v195);
      float32x4_t v221 = (float32x4_t)vzip1q_s32(v217, v219);
      float32x4_t v222 = (float32x4_t)vzip2q_s32(v217, v219);
      float32x4_t v223 = (float32x4_t)vzip1q_s32(v218, v220);
      *(int8x16_t *)(v52 + 64) = vandq_s8((int8x16_t)v214, v203);
      *(int8x16_t *)(v52 + 80) = vandq_s8((int8x16_t)v215, v203);
      *(int8x16_t *)(v52 + 96) = vandq_s8((int8x16_t)v216, v203);
      *(int8x16_t *)(v52 + 192) = vandq_s8(v204, v192);
      *(int8x16_t *)(v52 + 208) = vandq_s8(v204, v193);
      *(int8x16_t *)(v52 + 224) = vandq_s8(v204, v194);
      float32x4_t v295 = vaddq_f32(vmlaq_f32(vmulq_f32(v279, vmlaq_f32(vmlaq_f32(vmulq_f32(v200, v200), v201, v201), v202, v202)), v277, vmlaq_f32(vmlaq_f32(vmulq_f32(v177, v177), v178, v178), v179, v179)), vmlaq_f32(vmulq_f32(v278, vmlaq_f32(vmlaq_f32(vmulq_f32(v221, v221), v222, v222), v223, v223)), v276, vmlaq_f32(vmlaq_f32(vmulq_f32(v214, v214), v215, v215), v216, v216)));
      float32x4_t v281 = (_DWORD *)(v52 + 352);
      float32x4_t v297 = vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v262, v179), v267, v178), v263, v177), vmlaq_f32(vmlaq_f32(vmulq_f32(v254, v185), v265, v184), v255, v183));
      float32x4_t v299 = vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v252, v223), v264, v222), v253, v221), vmlaq_f32(vmlaq_f32(vmulq_f32(v258, v216), v266, v215), v260, v214));
      float32x4_t v286 = vmulq_f32(v279, v200);
      float32x4_t v287 = vmulq_f32(v279, v201);
      float32x4_t v288 = vmulq_f32(v279, v202);
      float32x4_t v289 = vmulq_f32(v278, v221);
      float32x4_t v290 = vmulq_f32(v278, v222);
      float32x4_t v291 = vmulq_f32(v278, v223);
      float32x4_t v293 = vsubq_f32(v297, v299);
      int32x2_t v238 = vzip1_s32(*(int32x2_t *)v297.f32, *(int32x2_t *)v299.f32);
        v275 != 0,
        v274 != 0);
      int32x2_t v239 = vzip2_s32(*(int32x2_t *)v297.f32, *(int32x2_t *)v299.f32);
        v273 != 0,
        v272 != 0);
      unint64_t v240 = vzip2q_s32((int32x4_t)v297, (int32x4_t)v299).u64[0];
        v271 != 0,
        v270 != 0);
      unint64_t v241 = vuzp2q_s32(vuzp2q_s32((int32x4_t)v297, (int32x4_t)v299), (int32x4_t)v297).u64[0];
        v269 != 0,
        v268 != 0);
      int v224 = *(unsigned __int16 *)(v144 + 78);
      if (*(unsigned char *)(a1 + 168) || v131 >= *(_DWORD *)(a1 + 144))
      {
        int v225 = a4;
        unsigned int v226 = v285;
        unsigned int v227 = v284;
        unsigned int v228 = v283;
        unsigned int v229 = v282;
        uint64_t v230 = (_DWORD *)(v52 + 352);
      }
      else
      {
        int v225 = a4;
        unsigned int v226 = v285;
        unsigned int v227 = v284;
        unsigned int v228 = v283;
        unsigned int v229 = v282;
        uint64_t v230 = (_DWORD *)(v52 + 352);
        if (v224 == 1024)
        {
          *v281 |= 8u;
          *(_DWORD *)(v251 + 16 * HIDWORD(v243)) = v286.i32[0];
          *(_DWORD *)(v250 + 16 * HIDWORD(v243)) = v287.i32[0];
          *(_DWORD *)(v249 + 16 * HIDWORD(v243)) = v288.i32[0];
          *(_DWORD *)(v248 + 16 * HIDWORD(v243)) = v289.i32[0];
          *(_DWORD *)(v247 + 16 * HIDWORD(v243)) = v290.i32[0];
          *(_DWORD *)(v246 + 16 * HIDWORD(v243)) = v291.i32[0];
          *(_DWORD *)(v245 + 16 * HIDWORD(v243)) = v301;
          *(_DWORD *)(v244 + 16 * HIDWORD(v243)) = *(_DWORD *)(v52 + 48);
          ++HIDWORD(v243);
        }
        else if ((v224 & 0x800) != 0)
        {
          *v281 |= 0x10u;
        }
      }
      int v231 = *(unsigned __int16 *)(v155 + 78);
      if (!*(unsigned char *)(a1 + 376) && v131 < *(_DWORD *)(a1 + 352))
      {
        if (v231 == 1024)
        {
          *(_DWORD *)(v52 + 356) |= 8u;
          *(_DWORD *)(v251 + 16 * v243 + 4) = v286.i32[1];
          *(_DWORD *)(v250 + 16 * v243 + 4) = v287.i32[1];
          *(_DWORD *)(v249 + 16 * v243 + 4) = v288.i32[1];
          *(_DWORD *)(v248 + 16 * v243 + 4) = v289.i32[1];
          *(_DWORD *)(v247 + 16 * v243 + 4) = v290.i32[1];
          *(_DWORD *)(v246 + 16 * v243 + 4) = v291.i32[1];
          *(_DWORD *)(v245 + 16 * v243 + 4) = v302;
          *(_DWORD *)(v244 + 16 * v243 + 4) = *(_DWORD *)(v52 + 52);
          LODWORD(v243) = v243 + 1;
        }
        else if ((v231 & 0x800) != 0)
        {
          *(_DWORD *)(v52 + 356) |= 0x10u;
        }
      }
      int v232 = *(unsigned __int16 *)(v157 + 78);
      if (!*(unsigned char *)(a1 + 584) && v131 < *(_DWORD *)(a1 + 560))
      {
        if (v232 == 1024)
        {
          *(_DWORD *)(v52 + 360) |= 8u;
          *(_DWORD *)(v251 + 16 * HIDWORD(v242) + 8) = v286.i32[2];
          *(_DWORD *)(v250 + 16 * HIDWORD(v242) + 8) = v287.i32[2];
          *(_DWORD *)(v249 + 16 * HIDWORD(v242) + 8) = v288.i32[2];
          *(_DWORD *)(v248 + 16 * HIDWORD(v242) + 8) = v289.i32[2];
          *(_DWORD *)(v247 + 16 * HIDWORD(v242) + 8) = v290.i32[2];
          *(_DWORD *)(v246 + 16 * HIDWORD(v242) + 8) = v291.i32[2];
          *(_DWORD *)(v245 + 16 * HIDWORD(v242) + 8) = v303;
          *(_DWORD *)(v244 + 16 * HIDWORD(v242) + 8) = *(_DWORD *)(v52 + 56);
          ++HIDWORD(v242);
        }
        else if ((v232 & 0x800) != 0)
        {
          *(_DWORD *)(v52 + 360) |= 0x10u;
        }
      }
      int v233 = *(unsigned __int16 *)(v160 + 78);
      if (!*(unsigned char *)(a1 + 792) && v131 < *(_DWORD *)(a1 + 768))
      {
        if (v233 == 1024)
        {
          *(_DWORD *)(v52 + 364) |= 8u;
          *(_DWORD *)(v251 + 16 * v242 + 12) = v286.i32[3];
          *(_DWORD *)(v250 + 16 * v242 + 12) = v287.i32[3];
          *(_DWORD *)(v249 + 16 * v242 + 12) = v288.i32[3];
          *(_DWORD *)(v248 + 16 * v242 + 12) = v289.i32[3];
          *(_DWORD *)(v247 + 16 * v242 + 12) = v290.i32[3];
          *(_DWORD *)(v246 + 16 * v242 + 12) = v291.i32[3];
          *(float *)(v245 + 16 * v242 + 12) = v304[0];
          *(_DWORD *)(v244 + 16 * v242 + 12) = *(_DWORD *)(v52 + 60);
          LODWORD(v242) = v242 + 1;
        }
        else if ((v233 & 0x800) != 0)
        {
          *(_DWORD *)(v52 + 364) |= 0x10u;
        }
      }
      __int16 v234 = *(_WORD *)(v144 + 76);
      if ((v234 & 0x10) != 0) {
        *v230 |= 2u;
      }
      __int16 v235 = *(_WORD *)(v155 + 76);
      if ((v235 & 0x10) != 0) {
        *(_DWORD *)(v52 + 356) |= 2u;
      }
      __int16 v236 = *(_WORD *)(v157 + 76);
      if ((v236 & 0x10) != 0) {
        *(_DWORD *)(v52 + 360) |= 2u;
      }
      __int16 v237 = *(_WORD *)(v160 + 76);
      if ((v237 & 0x10) != 0)
      {
        *(_DWORD *)(v52 + 364) |= 2u;
        if ((v234 & 8) == 0)
        {
LABEL_89:
          if ((v235 & 8) == 0) {
            goto LABEL_90;
          }
          goto LABEL_101;
        }
      }
      else if ((v234 & 8) == 0)
      {
        goto LABEL_89;
      }
      *v230 |= 4u;
      if ((v235 & 8) == 0)
      {
LABEL_90:
        if ((v236 & 8) == 0) {
          goto LABEL_91;
        }
        goto LABEL_102;
      }
LABEL_101:
      *(_DWORD *)(v52 + 356) |= 4u;
      if ((v236 & 8) == 0)
      {
LABEL_91:
        if ((v237 & 8) == 0) {
          goto LABEL_92;
        }
        goto LABEL_103;
      }
LABEL_102:
      *(_DWORD *)(v52 + 360) |= 4u;
      if ((v237 & 8) == 0)
      {
LABEL_92:
        if ((v224 & 1) == 0) {
          goto LABEL_93;
        }
        goto LABEL_104;
      }
LABEL_103:
      *(_DWORD *)(v52 + 364) |= 4u;
      if ((v224 & 1) == 0)
      {
LABEL_93:
        if ((v231 & 1) == 0) {
          goto LABEL_94;
        }
        goto LABEL_105;
      }
LABEL_104:
      *v230 |= 0x40u;
      if ((v231 & 1) == 0)
      {
LABEL_94:
        if (v232) {
          goto LABEL_106;
        }
        goto LABEL_95;
      }
LABEL_105:
      *(_DWORD *)(v52 + 356) |= 0x40u;
      if (v232)
      {
LABEL_106:
        *(_DWORD *)(v52 + 360) |= 0x40u;
        if ((v233 & 1) == 0) {
          goto LABEL_97;
        }
LABEL_96:
        *(_DWORD *)(v52 + 364) |= 0x40u;
        goto LABEL_97;
      }
LABEL_95:
      if (v233) {
        goto LABEL_96;
      }
LABEL_97:
      v52 += 368;
      ++v131;
      unsigned int v130 = v226;
      unsigned int v127 = v228;
      unsigned int v129 = v229;
      unsigned int v128 = v227;
      if (v225 == v131) {
        goto LABEL_108;
      }
    }
  }
  for (uint64_t j = 0; j != 832; j += 208)
  {
    uint64_t v33 = *(void *)(a1 + j + 16);
    *(void *)(v33 + 32) = 0;
    *(_WORD *)(v33 + 30) = 0;
    *(void *)(v33 + 40) = *(void *)(a1 + j + 160);
  }
  return 0;
}

float *physx::Dy::anonymous namespace'::setConstants(float *result, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, uint64_t a8, float a9, float a10, float a11, float a12, float a13, float a14, float a15, float a16, char a17, float a18, float a19, char a20,char a21)
{
  if (a17)
  {
    *float result = 0.0;
    *a2 = 0.0;
    *a4 = 0.0;
    *a5 = 0.0;
    *a6 = 0.0;
    float v22 = 0.0;
    *a7 = 0.0;
LABEL_10:
    *a3 = v22;
    return result;
  }
  if ((*(_WORD *)(a8 + 76) & 0x40) != 0) {
    float v23 = 100.0;
  }
  else {
    float v23 = a15 * 1000.0;
  }
  float result = physx::Dy::setSolverConstantsStep(result, a2, a3, a4, a5, a6, a7, a8, a16, a9, a10, 1.0, a11, a12, v23, a13, a14);
  if (a20) {
    *a3 = *a3 - a18;
  }
  if (a21)
  {
    float v22 = *a3 + a19;
    goto LABEL_10;
  }
  return result;
}

int32x4_t **physx::Dy::solveContact4_Block(int32x4_t **result, int32x2_t a2, float a3)
{
  uint64_t v4 = (float *)*result;
  uint64_t v3 = result[1];
  float32x4_t v6 = result[6];
  float32x4_t v5 = result[7];
  float32x4_t v8 = result[12];
  float32x4_t v7 = result[13];
  float32x4_t v10 = result[18];
  uint64_t v9 = result[19];
  int32x4_t v11 = **result;
  float v12 = *result + 1;
  int32x4_t v14 = v3[1];
  int32x4_t v15 = v6[1];
  int32x4_t v16 = v5[1];
  int32x4_t v18 = v8[1];
  int32x4_t v19 = v7[1];
  int32x4_t v20 = v10[1];
  int32x4_t v21 = v9[1];
  int32x4_t v22 = vzip1q_s32(v11, *v8);
  int32x4_t v23 = vzip1q_s32(*v6, *v10);
  float32x4_t v24 = (float32x4_t)vzip1q_s32(v22, v23);
  float32x4_t v25 = (float32x4_t)vzip2q_s32(v22, v23);
  float32x4_t v26 = (float32x4_t)vzip1q_s32(vzip2q_s32(v11, *v8), vzip2q_s32(*v6, *v10));
  int32x4_t v27 = vzip1q_s32(*v3, *v7);
  int32x4_t v28 = vzip1q_s32(*v5, *v9);
  float32x4_t v29 = (float32x4_t)vzip1q_s32(v27, v28);
  float32x4_t v30 = (float32x4_t)vzip2q_s32(v27, v28);
  float32x4_t v31 = (float32x4_t)vzip1q_s32(vzip2q_s32(*v3, *v7), vzip2q_s32(*v5, *v9));
  int32x4_t v32 = vzip1q_s32(*v12, v18);
  int32x4_t v33 = vzip2q_s32(*v12, v18);
  int32x4_t v34 = vzip1q_s32(v15, v20);
  float32x4_t v35 = (float32x4_t)vzip1q_s32(v32, v34);
  float32x4_t v36 = (float32x4_t)vzip2q_s32(v32, v34);
  float32x4_t v37 = (float32x4_t)vzip1q_s32(v33, vzip2q_s32(v15, v20));
  int32x4_t v38 = vzip1q_s32(v14, v19);
  int32x4_t v39 = vzip2q_s32(v14, v19);
  int32x4_t v40 = vzip1q_s32(v16, v21);
  float32x4_t v41 = (float32x4_t)vzip1q_s32(v38, v40);
  float32x4_t v42 = (float32x4_t)vzip2q_s32(v38, v40);
  float32x4_t v43 = (float32x4_t)vzip1q_s32(v39, vzip2q_s32(v16, v21));
  int32x4_t v44 = (*result)[2];
  int32x4_t v45 = (*result)[3];
  int32x4_t v46 = v3[2];
  int32x4_t v47 = v3[3];
  int32x4_t v49 = v6[2];
  int32x4_t v48 = v6[3];
  int32x4_t v50 = v5[2];
  int32x4_t v51 = v5[3];
  int32x4_t v53 = v8[2];
  int32x4_t v52 = v8[3];
  int32x4_t v55 = v7[2];
  int32x4_t v54 = v7[3];
  int32x4_t v57 = v10[2];
  int32x4_t v56 = v10[3];
  int32x4_t v59 = v9[2];
  int32x4_t v58 = v9[3];
  unint64_t v60 = (unint64_t)result[4];
  uint64_t v61 = *((unsigned __int16 *)result + 15);
  int32x4_t v209 = vdupq_n_s32(0x7F7FFFFFu);
  if (v61)
  {
    float32x4_t v191 = (float32x4_t)vdupq_lane_s32(a2, 0);
    int32x4_t v62 = vzip1q_s32(v45, v52);
    int32x4_t v63 = vzip2q_s32(v45, v52);
    int32x4_t v64 = vzip1q_s32(v48, v56);
    int32x4_t v65 = vzip2q_s32(v48, v56);
    float32x4_t v66 = (float32x4_t)vzip1q_s32(v62, v64);
    float32x4_t v67 = (float32x4_t)vzip2q_s32(v62, v64);
    float32x4_t v68 = (float32x4_t)vzip1q_s32(v63, v65);
    int32x4_t v69 = vzip1q_s32(v47, v54);
    int32x4_t v70 = vzip2q_s32(v47, v54);
    int32x4_t v71 = vzip1q_s32(v51, v58);
    float32x4_t v72 = (float32x4_t)vzip1q_s32(v70, vzip2q_s32(v51, v58));
    int32x4_t v73 = vzip1q_s32(v44, v53);
    int32x4_t v74 = vzip2q_s32(v44, v53);
    int32x4_t v75 = vzip1q_s32(v49, v57);
    int32x4_t v76 = vzip2q_s32(v49, v57);
    float32x4_t v205 = (float32x4_t)vzip1q_s32(v73, v75);
    int32x4_t v77 = vzip2q_s32(v73, v75);
    float32x4_t v78 = (float32x4_t)vzip1q_s32(v74, v76);
    int32x4_t v79 = vzip1q_s32(v46, v55);
    int32x4_t v80 = vzip2q_s32(v46, v55);
    int32x4_t v81 = vzip1q_s32(v50, v59);
    float32x4_t v82 = (float32x4_t)vzip1q_s32(v79, v81);
    float32x4_t v83 = (float32x4_t)vzip2q_s32(v79, v81);
    float32x4_t v84 = (float32x4_t)vzip1q_s32(v80, vzip2q_s32(v50, v59));
    unint64_t v85 = v60 + 16 * v61;
    float32x4_t v186 = *(float32x4_t *)(v60 + 80);
    float32x4_t v187 = *(float32x4_t *)(v60 + 64);
    float32x4_t v190 = vaddq_f32(v187, v186);
    unint64_t v86 = v60 + 432;
    float32x4_t v87 = vsubq_f32(v66, (float32x4_t)vzip1q_s32(v69, v71));
    float32x4_t v88 = vsubq_f32(v67, (float32x4_t)vzip2q_s32(v69, v71));
    float32x4_t v89 = vsubq_f32(v68, v72);
    float v90 = a3;
    float32x4_t v203 = v88;
    float32x4_t v204 = v87;
    float32x4_t v185 = v89;
    float32x4_t v201 = v84;
    float32x4_t v202 = (float32x4_t)v77;
    float32x4_t v199 = v83;
    float32x4_t v200 = v82;
    float32x4_t v198 = v78;
    do
    {
      unint64_t v91 = v60 + 272;
      uint64_t v92 = *(unsigned __int8 *)(v60 + 1);
      uint64_t v93 = *(unsigned __int8 *)(v60 + 2);
      char v94 = *(unsigned char *)(v60 + 3);
      if (v94) {
        uint64_t v95 = (int32x4_t *)(v60 + 272 + 16 * *(unsigned __int8 *)(v60 + 1) + 160 * *(unsigned __int8 *)(v60 + 1));
      }
      else {
        uint64_t v95 = &v209;
      }
      if (*(unsigned char *)(v60 + 3)) {
        uint64_t v96 = 16 * v92;
      }
      else {
        uint64_t v96 = 0;
      }
      float32x4_t v97 = *(float32x4_t *)(v60 + 128);
      float32x4_t v207 = *(float32x4_t *)(v60 + 112);
      float32x4_t v208 = *(float32x4_t *)(v60 + 96);
      float32x4_t v99 = *(float32x4_t *)(v60 + 144);
      float32x4_t v98 = *(float32x4_t *)(v60 + 160);
      float32x4_t v192 = v98;
      float32x4_t v188 = v97;
      float32x4_t v189 = v99;
      if (*(unsigned char *)(v60 + 1))
      {
        uint64_t v100 = 0;
        float32x4_t v196 = vmlaq_f32(vmlaq_f32(vmulq_f32(v87, v97), v99, v88), v98, v89);
        float32x4_t v101 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v24, v97), v99, v25), v98, v26), vmlaq_f32(vmlaq_f32(vmulq_f32(v29, v97), v99, v30), v98, v31));
        float32x4_t v194 = vnegq_f32(*(float32x4_t *)(v60 + 176));
        uint64_t v102 = (float32x4_t *)(v60 + 16 * v92 + 416);
        float32x4_t v103 = 0uLL;
        _X21 = v86;
        float32x4_t v105 = 0uLL;
        float32x4_t v106 = (float32x4_t)v77;
        do
        {
          __asm
          {
            PRFM            #0, [X21,#0x40]
            PRFM            #0, [X21,#0x80]
            PRFM            #0, [X21,#0xC0]
          }
          float32x4_t v114 = v102[-9];
          float32x4_t v115 = v102[-8];
          float32x4_t v117 = v102[-7];
          float32x4_t v116 = v102[-6];
          float32x4_t v118 = v102[-5];
          float32x4_t v119 = v102[-4];
          float32x4_t v120 = v82;
          float32x4_t v121 = v102[-1];
          float32x4_t v122 = vaddq_f32(v196, vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v205, v114), v115, v106), v117, v78), vmlaq_f32(vmlaq_f32(vmulq_f32(v82, v116), v118, v83), v119, v84)));
          float32x4_t v123 = v84;
          float32x4_t v124 = v78;
          float32x4_t v125 = v83;
          float32x4_t v126 = v102[-2];
          float32x4_t v127 = vaddq_f32(v102[-3], vsubq_f32(v122, vmulq_n_f32(v121, v90)));
          float32x4_t v128 = *v102;
          v102 += 10;
          float32x4_t v129 = vsubq_f32(vaddq_f32(v121, vminq_f32(v194, vmulq_f32(v128, vmaxq_f32(v191, v127)))), vaddq_f32(v101, vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v35, v114), v36, v115), v37, v117), vmlaq_f32(vmlaq_f32(vmulq_f32(v41, v116), v42, v118), v43, v119))));
          float32x4_t v130 = *(float32x4_t *)(v91 + 16 * v100);
          if (v94) {
            uint64_t v131 = v100;
          }
          else {
            uint64_t v131 = 0;
          }
          float32x4_t v132 = vminq_f32(vaddq_f32(v130, vmaxq_f32(vmulq_f32(v126, v129), vnegq_f32(v130))), (float32x4_t)v95[v131]);
          float32x4_t v133 = vsubq_f32(v132, v130);
          float32x4_t v134 = vmulq_f32(v208, v133);
          float32x4_t v35 = vmlaq_f32(v35, v134, v114);
          float32x4_t v36 = vmlaq_f32(v36, v134, v115);
          float32x4_t v37 = vmlaq_f32(v37, v134, v117);
          float32x4_t v83 = v125;
          float32x4_t v135 = vmulq_f32(v207, v133);
          float32x4_t v41 = vmlsq_f32(v41, v135, v116);
          float32x4_t v42 = vmlsq_f32(v42, v135, v118);
          float32x4_t v43 = vmlsq_f32(v43, v135, v119);
          float32x4_t v105 = vaddq_f32(v105, v133);
          float32x4_t v101 = vmlaq_f32(v101, v133, v190);
          float32x4_t v78 = v124;
          float32x4_t v84 = v123;
          *(float32x4_t *)(v91 + 16 * v100) = v132;
          float32x4_t v103 = vaddq_f32(v103, v132);
          float32x4_t v82 = v120;
          unint64_t v86 = _X21 + 192;
          ++v100;
          _X21 += 192;
        }
        while (v92 != v100);
      }
      else
      {
        float32x4_t v105 = 0uLL;
        float32x4_t v103 = 0uLL;
        float32x4_t v106 = (float32x4_t)v77;
      }
      int32x4_t v136 = (float32x4_t *)(v60 + 272 + 16 * v92 + 160 * v92 + v96);
      float32x4_t v137 = vmulq_f32(v187, v105);
      float32x4_t v138 = vmulq_f32(v186, v105);
      float32x4_t v24 = vmlaq_f32(v24, v137, v188);
      float32x4_t v29 = vmlsq_f32(v29, v138, v188);
      float32x4_t v25 = vmlaq_f32(v25, v137, v189);
      float32x4_t v30 = vmlsq_f32(v30, v138, v189);
      float32x4_t v26 = vmlaq_f32(v26, v137, v192);
      float32x4_t v31 = vmlsq_f32(v31, v138, v192);
      if (v93)
      {
        uint64_t v139 = 0;
        float32x4_t v197 = vmulq_f32(v103, *(float32x4_t *)(v60 + 32));
        float32x4_t v195 = vmulq_f32(v103, *(float32x4_t *)(v60 + 48));
        float32x4_t v193 = vnegq_f32(v195);
        int32x4_t v140 = (float32x4_t *)(v60 + 16 * v93 + v96 + 176 * v92 + 464);
        int8x16_t v141 = 0uLL;
        int32x4_t v142 = v136;
        float32x4_t v89 = v185;
        do
        {
          _X21 = v86 + v139;
          __asm
          {
            PRFM            #0, [X21,#0x40]
            PRFM            #0, [X21,#0x80]
            PRFM            #0, [X21,#0xC0]
            PRFM            #0, [X21,#0x100]
          }
          float32x4_t v149 = v140[-12];
          float32x4_t v148 = v140[-11];
          float32x4_t v151 = v140[-10];
          float32x4_t v150 = v140[-9];
          float32x4_t v153 = v140[-6];
          float32x4_t v152 = v140[-5];
          float32x4_t v154 = v140[-8];
          float32x4_t v155 = v140[-7];
          float32x4_t v156 = v140[-4];
          float32x4_t v158 = v140[-2];
          float32x4_t v157 = v140[-1];
          float v90 = a3;
          float32x4_t v159 = vaddq_f32(v140[-3], vsubq_f32(vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v204, v149), v148, v203), v151, v185), vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v205, v150), v154, v202), v155, v198), vmlaq_f32(vmlaq_f32(vmulq_f32(v200, v153), v152, v199), v156, v201))), vmulq_n_f32(v157, a3)));
          float32x4_t v160 = *v140;
          v140 += 13;
          float32x4_t v161 = vmlsq_f32(vmlsq_f32(*v142, v158, vsubq_f32(vmulq_f32(v160, v159), v157)), v158, vsubq_f32(vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v24, v149), v148, v25), v151, v26), vmlaq_f32(vmlaq_f32(vmulq_f32(v35, v150), v36, v154), v37, v155)), vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v29, v149), v148, v30), v151, v31), vmlaq_f32(vmlaq_f32(vmulq_f32(v41, v153), v42, v152), v43, v156))));
          float32x4_t v162 = vminq_f32(v195, vmaxq_f32(v193, v161));
          float32x4_t v163 = vsubq_f32(v162, *v142);
          float32x4_t v164 = vmulq_f32(v187, v163);
          float32x4_t v165 = vmulq_f32(v186, v163);
          float32x4_t v24 = vmlaq_f32(v24, v164, v149);
          float32x4_t v29 = vmlsq_f32(v29, v165, v149);
          float32x4_t v25 = vmlaq_f32(v25, v164, v148);
          float32x4_t v30 = vmlsq_f32(v30, v165, v148);
          float32x4_t v26 = vmlaq_f32(v26, v164, v151);
          float32x4_t v31 = vmlsq_f32(v31, v165, v151);
          float32x4_t v166 = vmulq_f32(v208, v163);
          float32x4_t v35 = vmlaq_f32(v35, v166, v150);
          float32x4_t v36 = vmlaq_f32(v36, v166, v154);
          float32x4_t v37 = vmlaq_f32(v37, v166, v155);
          float32x4_t v167 = vmulq_f32(v207, v163);
          float32x4_t v41 = vmlsq_f32(v41, v167, v153);
          float32x4_t v42 = vmlsq_f32(v42, v167, v152);
          float32x4_t v43 = vmlsq_f32(v43, v167, v156);
          int8x16_t v141 = vorrq_s8(v141, (int8x16_t)vcgtq_f32(vabsq_f32(v161), v197));
          *v142++ = v162;
          v139 += 256;
        }
        while (v93 << 8 != v139);
        *(int8x16_t *)(v60 + 224) = v141;
        v86 += v139;
        float32x4_t v84 = v201;
        int32x4_t v77 = (int32x4_t)v202;
        float32x4_t v78 = v198;
        float32x4_t v83 = v199;
        float32x4_t v82 = v200;
        float32x4_t v88 = v203;
        float32x4_t v87 = v204;
      }
      else
      {
        float32x4_t v88 = v203;
        float32x4_t v87 = v204;
        float32x4_t v89 = v185;
        int32x4_t v77 = (int32x4_t)v106;
      }
      unint64_t v60 = (unint64_t)&v136[13 * v93 + v93];
    }
    while (v60 < v85);
  }
  float32x2x2_t v168 = (float32x2x2_t)vzip1q_s32((int32x4_t)v24, (int32x4_t)v26);
  float32x2x2_t v169 = (float32x2x2_t)vzip2q_s32((int32x4_t)v24, (int32x4_t)v26);
  int32x4_t v170 = vzip1q_s32((int32x4_t)v25, (int32x4_t)v25);
  int32x4_t v171 = vzip2q_s32((int32x4_t)v25, (int32x4_t)v25);
  float32x2x2_t v172 = (float32x2x2_t)vzip1q_s32((int32x4_t)v29, (int32x4_t)v31);
  int32x4_t v173 = vzip1q_s32((int32x4_t)v30, (int32x4_t)v30);
  float32x2x2_t v174 = (float32x2x2_t)vzip1q_s32((int32x4_t)v35, (int32x4_t)v37);
  float32x2x2_t v175 = (float32x2x2_t)vzip2q_s32((int32x4_t)v35, (int32x4_t)v37);
  int32x4_t v176 = vzip1q_s32((int32x4_t)v36, (int32x4_t)v36);
  int32x4_t v177 = vzip2q_s32((int32x4_t)v36, (int32x4_t)v36);
  vst2_f32(v4, v168);
  vst2_f32((float *)v12->i32, v174);
  *float32x4_t v6 = vzip2q_s32((int32x4_t)v168, v170);
  v6[1] = vzip2q_s32((int32x4_t)v174, v176);
  vst2_f32((float *)v8->i32, v169);
  i32 = (float *)v8[1].i32;
  vst2_f32(i32, v175);
  int32x4_t *v10 = vzip2q_s32((int32x4_t)v169, v171);
  v10[1] = vzip2q_s32((int32x4_t)v175, v177);
  float32x2x2_t v178 = (float32x2x2_t)vzip1q_s32((int32x4_t)v41, (int32x4_t)v43);
  int32x4_t v179 = vzip1q_s32((int32x4_t)v42, (int32x4_t)v42);
  if (*((_DWORD *)result + 6))
  {
    vst2_f32((float *)v3->i32, v172);
    float v13 = (float *)v3[1].i32;
    vst2_f32(v13, v178);
  }
  if (*((_DWORD *)result + 18))
  {
    *float32x4_t v5 = vzip2q_s32((int32x4_t)v172, v173);
    v5[1] = vzip2q_s32((int32x4_t)v178, v179);
  }
  float32x2x2_t v180 = (float32x2x2_t)vzip2q_s32((int32x4_t)v29, (int32x4_t)v31);
  int32x4_t v181 = vzip2q_s32((int32x4_t)v30, (int32x4_t)v30);
  float32x2x2_t v182 = (float32x2x2_t)vzip2q_s32((int32x4_t)v41, (int32x4_t)v43);
  int32x4_t v183 = vzip2q_s32((int32x4_t)v42, (int32x4_t)v42);
  if (*((_DWORD *)result + 30))
  {
    vst2_f32((float *)v7->i32, v180);
    float32x4_t v184 = (float *)v7[1].i32;
    vst2_f32(v184, v182);
  }
  if (*((_DWORD *)result + 42))
  {
    int32x4_t *v9 = vzip2q_s32((int32x4_t)v180, v181);
    v9[1] = vzip2q_s32((int32x4_t)v182, v183);
  }
  return result;
}

int32x4_t **physx::Dy::solveContact4(unsigned int *a1, uint64_t a2, int32x2_t a3, float a4)
{
  return physx::Dy::solveContact4_Block((int32x4_t **)(a2 + 48 * *a1), a3, a4);
}

unint64_t physx::Dy::writeBackContact4(unint64_t result, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = a2 + 48 * *(unsigned int *)result;
  uint64_t v3 = *(unsigned __int16 *)(v2 + 30);
  if (*(_WORD *)(v2 + 30))
  {
    unint64_t v4 = *(void *)(v2 + 32);
    unint64_t v5 = v4 + 16 * v3;
    float32x4_t v6 = (void *)(a2 + 48 * *(unsigned int *)result);
    float32x4_t v7 = (_DWORD *)v6[23];
    float32x4_t v8 = (_DWORD *)v6[17];
    uint64_t v9 = (_DWORD *)v6[11];
    float32x4_t v10 = (_DWORD *)v6[5];
    do
    {
      unint64_t v11 = v4 + 272;
      uint64_t v12 = *(unsigned __int8 *)(v4 + 1);
      float result = *(unsigned __int8 *)(v4 + 2);
      uint64_t v13 = 16 * v12;
      if ((*(unsigned char *)(v4 + 3) & 1) == 0) {
        uint64_t v13 = 0;
      }
      if (*(unsigned char *)(v4 + 1))
      {
        unint64_t v14 = 0;
        do
        {
          long long v15 = *(_OWORD *)(v11 + 16 * v14);
          if (v10 && v14 < *(unsigned __int8 *)(v4 + 8)) {
            *v10++ = v15;
          }
          if (v9 && v14 < *(unsigned __int8 *)(v4 + 9)) {
            *v9++ = DWORD1(v15);
          }
          if (v8 && v14 < *(unsigned __int8 *)(v4 + 10)) {
            *v8++ = DWORD2(v15);
          }
          if (v7 && v14 < *(unsigned __int8 *)(v4 + 11)) {
            *v7++ = HIDWORD(v15);
          }
          ++v14;
        }
        while (v12 != v14);
      }
      if (result)
      {
        uint64_t v16 = 0;
        long long v17 = *(_OWORD *)(v4 + 224);
        do
        {
          if (*(unsigned char *)(v4 + v16 + 8))
          {
            if (*((_DWORD *)&v17 + v16)) {
              **(unsigned char **)(v4 + 8 * v16 + 240) = 1;
            }
          }
          ++v16;
        }
        while (v16 != 4);
      }
      unint64_t v4 = v11 + 16 * v12 + 160 * v12 + v13 + 16 * result + 208 * result;
    }
    while (v4 < v5);
  }
  return result;
}

int32x4_t **physx::Dy::solve1DStep4(int32x4_t **result, uint64_t a2, int32x2_t a3)
{
  uint64_t v3 = result[4];
  if (v3)
  {
    unint64_t v5 = *result;
    unint64_t v4 = result[1];
    float32x4_t v7 = result[6];
    float32x4_t v6 = result[7];
    uint64_t v9 = result[12];
    float32x4_t v8 = result[13];
    int32x4_t v10 = **result;
    int32x4_t v11 = vzip1q_s32(v10, *v9);
    uint64_t v13 = result[18];
    uint64_t v12 = result[19];
    unint64_t v14 = *result + 1;
    int32x4_t v15 = v7[1];
    int32x4_t v16 = v6[1];
    int32x4_t v18 = v9[1];
    int32x4_t v19 = v13[1];
    int32x4_t v20 = vzip2q_s32(v10, *v9);
    int32x4_t v21 = vzip1q_s32(*v7, *v13);
    int32x4_t v22 = v12[1];
    int32x4_t v23 = vzip1q_s32(v11, v21);
    int32x4_t v24 = vzip2q_s32(v11, v21);
    int32x4_t v25 = vzip1q_s32(v20, vzip2q_s32(*v7, *v13));
    int32x4_t v26 = vzip1q_s32(*v4, *v8);
    int32x4_t v27 = vzip1q_s32(*v6, *v12);
    int32x4_t v28 = vzip1q_s32(v26, v27);
    int32x4_t v29 = vzip2q_s32(v26, v27);
    int32x4_t v30 = vzip1q_s32(vzip2q_s32(*v4, *v8), vzip2q_s32(*v6, *v12));
    int32x4_t v31 = vzip1q_s32(*v14, v18);
    int32x4_t v32 = vzip2q_s32(*v14, v18);
    int32x4_t v33 = vzip1q_s32(v15, v19);
    int32x4_t v35 = v4[1];
    int32x4_t v37 = v8[1];
    float32x4_t v38 = (float32x4_t)vzip1q_s32(v31, v33);
    int32x4_t v39 = vzip2q_s32(v31, v33);
    int32x4_t v40 = vzip1q_s32(v32, vzip2q_s32(v15, v19));
    int32x4_t v41 = vzip1q_s32(v35, v37);
    int32x4_t v42 = vzip1q_s32(v16, v22);
    int32x4_t v43 = vzip1q_s32(v41, v42);
    int32x4_t v44 = vzip2q_s32(v41, v42);
    int32x4_t v45 = vzip1q_s32(vzip2q_s32(v35, v37), vzip2q_s32(v16, v22));
    if (v3->i32[1])
    {
      unsigned int v46 = 0;
      int32x4_t v335 = v29;
      int32x4_t v48 = v5[2];
      int32x4_t v47 = v5[3];
      int32x4_t v331 = v43;
      int32x4_t v50 = v9[2];
      int32x4_t v49 = v9[3];
      int32x4_t v51 = vzip1q_s32(v47, v49);
      int32x4_t v52 = vzip2q_s32(v47, v49);
      int32x4_t v54 = v7[2];
      int32x4_t v53 = v7[3];
      int32x4_t v329 = v45;
      int32x4_t v56 = v13[2];
      float32x4_t v55 = (float32x4_t)v13[3];
      int32x4_t v57 = vzip1q_s32(v53, (int32x4_t)v55);
      float32x4_t v320 = (float32x4_t)vzip1q_s32(v51, v57);
      float32x4_t v321 = (float32x4_t)vzip2q_s32(v51, v57);
      float32x4_t v323 = (float32x4_t)vzip1q_s32(v52, vzip2q_s32(v53, (int32x4_t)v55));
      int32x4_t v325 = v39;
      int32x4_t v59 = v4[2];
      int32x4_t v58 = v4[3];
      int32x4_t v61 = v8[2];
      int32x4_t v60 = v8[3];
      int32x4_t v327 = v30;
      int32x4_t v62 = vzip1q_s32(v58, v60);
      int32x4_t v63 = vzip2q_s32(v58, v60);
      int32x4_t v333 = v44;
      int32x4_t v64 = v6[2];
      int32x4_t v65 = v6[3];
      float32x4_t v66 = (float32x4_t)v12[2];
      int32x4_t v67 = v12[3];
      int32x4_t v68 = v28;
      int32x4_t v69 = vzip1q_s32(v65, v67);
      float32x4_t v314 = (float32x4_t)vzip1q_s32(v62, v69);
      float32x4_t v316 = (float32x4_t)vzip2q_s32(v62, v69);
      float32x4_t v318 = (float32x4_t)vzip1q_s32(v63, vzip2q_s32(v65, v67));
      int32x4_t v70 = vzip1q_s32(v48, v50);
      int32x4_t v71 = vzip2q_s32(v48, v50);
      int32x4_t v72 = vzip1q_s32(v54, v56);
      float32x4_t v73 = (float32x4_t)vzip1q_s32(v70, v72);
      float32x4_t v74 = (float32x4_t)vzip2q_s32(v70, v72);
      float32x4_t v75 = (float32x4_t)vzip1q_s32(v71, vzip2q_s32(v54, v56));
      int32x4_t v76 = vzip1q_s32(v59, v61);
      int32x4_t v77 = vzip1q_s32(v64, (int32x4_t)v66);
      float32x4_t v78 = (float32x4_t)vzip1q_s32(v76, v77);
      float32x4_t v79 = (float32x4_t)vzip2q_s32(v76, v77);
      uint64_t v80 = *((unsigned int *)result + 6);
      uint64_t v81 = a2 + ((unint64_t)*((unsigned int *)result + 5) << 6);
      float32x4_t v82 = (float32x4_t)vzip1q_s32(vzip2q_s32(v59, v61), vzip2q_s32(v64, (int32x4_t)v66));
      uint64_t v83 = *((unsigned int *)result + 30);
      uint64_t v84 = a2 + ((unint64_t)*((unsigned int *)result + 29) << 6);
      int32x4_t v85 = vzip1q_s32(*(int32x4_t *)v81, *(int32x4_t *)v84);
      int32x4_t v86 = vzip2q_s32(*(int32x4_t *)v81, *(int32x4_t *)v84);
      uint64_t v87 = *((unsigned int *)result + 18);
      uint64_t v88 = a2 + ((unint64_t)*((unsigned int *)result + 17) << 6);
      uint64_t v89 = *((unsigned int *)result + 42);
      uint64_t v90 = a2 + ((unint64_t)*((unsigned int *)result + 41) << 6);
      int32x4_t v91 = vzip1q_s32(*(int32x4_t *)v88, *(int32x4_t *)v90);
      int32x4_t v92 = vzip2q_s32(*(int32x4_t *)v88, *(int32x4_t *)v90);
      float32x4_t v93 = (float32x4_t)vzip1q_s32(v85, v91);
      float32x4_t v94 = v38;
      float32x4_t v95 = (float32x4_t)vzip2q_s32(v85, v91);
      float32x4_t v96 = (float32x4_t)vzip1q_s32(v86, v92);
      float32x4_t v97 = (float32x4_t)vzip2q_s32(v86, v92);
      uint64_t v98 = a2 + (v80 << 6);
      uint64_t v99 = a2 + (v83 << 6);
      int32x4_t v100 = vzip1q_s32(*(int32x4_t *)v98, *(int32x4_t *)v99);
      int32x4_t v101 = vzip2q_s32(*(int32x4_t *)v98, *(int32x4_t *)v99);
      uint64_t v102 = a2 + (v87 << 6);
      uint64_t v103 = a2 + (v89 << 6);
      int32x4_t v104 = vzip1q_s32(*(int32x4_t *)v102, *(int32x4_t *)v103);
      int32x4_t v105 = vzip2q_s32(*(int32x4_t *)v102, *(int32x4_t *)v103);
      float32x4_t v106 = (float32x4_t)vzip1q_s32(v100, v104);
      float32x4_t v107 = (float32x4_t)vzip2q_s32(v100, v104);
      float32x4_t v108 = (float32x4_t)vzip1q_s32(v101, v105);
      float32x4_t v109 = (float32x4_t)vzip2q_s32(v101, v105);
      v55.i64[0] = 0xBF000000BF000000;
      v55.i64[1] = 0xBF000000BF000000;
      v66.i64[0] = 0xBF000000BF000000;
      v66.i64[1] = 0xBF000000BF000000;
      float32x4_t v110 = vmlaq_f32(v66, v97, v97);
      float32x4_t v111 = (float32x4_t)v3[10];
      float32x4_t v112 = (float32x4_t)v3[11];
      float32x4_t v114 = (float32x4_t)v3[12];
      float32x4_t v113 = (float32x4_t)v3[13];
      int32x4_t v115 = *(int32x4_t *)(v81 + 28);
      int32x4_t v116 = *(int32x4_t *)(v81 + 40);
      float32x4_t v117 = vmlaq_f32(vmlaq_f32(vmulq_f32(v93, v111), v112, v95), v114, v96);
      float32x4_t v118 = vmlaq_f32(vmlaq_f32(vmulq_f32(v111, v110), v97, vmlsq_f32(vmulq_f32(v95, v114), v112, v96)), v117, v93);
      float32x4_t v119 = vmlaq_f32(vmlaq_f32(vmulq_f32(v112, v110), v97, vmlsq_f32(vmulq_f32(v96, v111), v114, v93)), v117, v95);
      float32x4_t v120 = vmlaq_f32(vmlaq_f32(vmulq_f32(v110, v114), v97, vmlsq_f32(vmulq_f32(v93, v112), v111, v95)), v117, v96);
      float32x4_t v121 = vmlaq_f32(v55, v109, v109);
      float32x4_t v122 = (float32x4_t)v3[14];
      float32x4_t v123 = (float32x4_t)v3[15];
      float32x4_t v124 = vmlaq_f32(vmulq_f32(v121, v113), v109, vmlsq_f32(vmulq_f32(v107, v123), v122, v108));
      float32x4_t v125 = vmlaq_f32(vmulq_f32(v121, v122), v109, vmlsq_f32(vmulq_f32(v108, v113), v123, v106));
      float32x4_t v126 = vmlaq_f32(vmulq_f32(v121, v123), v109, vmlsq_f32(vmulq_f32(v106, v122), v113, v107));
      int32x4_t v127 = *(int32x4_t *)(v88 + 28);
      float32x4_t v128 = vmlaq_f32(vmlaq_f32(vmulq_f32(v106, v113), v122, v107), v123, v108);
      float32x4_t v129 = vmlaq_f32(v124, v128, v106);
      int32x4_t v130 = *(int32x4_t *)(v88 + 40);
      float32x4_t v131 = vmlaq_f32(v125, v128, v107);
      int32x4_t v132 = *(int32x4_t *)(v84 + 28);
      float32x4_t v133 = vmlaq_f32(v126, v128, v108);
      int32x4_t v134 = *(int32x4_t *)(v90 + 28);
      int32x4_t v135 = vzip1q_s32(v115, v132);
      int32x4_t v136 = vzip2q_s32(v115, v132);
      int32x4_t v137 = vzip1q_s32(v127, v134);
      int32x4_t v138 = vzip2q_s32(v127, v134);
      float32x4_t v297 = (float32x4_t)vzip2q_s32(v135, v137);
      float32x4_t v298 = (float32x4_t)vzip1q_s32(v135, v137);
      int32x4_t v139 = *(int32x4_t *)(v84 + 40);
      int32x4_t v140 = vzip1q_s32(v136, v138);
      int32x4_t v141 = *(int32x4_t *)(v90 + 40);
      int32x4_t v142 = vzip1q_s32(v116, v139);
      int32x4_t v143 = vzip1q_s32(v130, v141);
      float32x4_t v295 = (float32x4_t)vzip1q_s32(v142, v143);
      float32x4_t v296 = (float32x4_t)v140;
      int32x4_t v144 = vzip2q_s32(v142, v143);
      int32x4_t v145 = vzip2q_s32(v116, v139);
      v116.i32[0] = vdupq_laneq_s32(v116, 3).u32[0];
      v116.i32[1] = v139.i32[3];
      float32x4_t v293 = (float32x4_t)vzip1q_s32(v145, vzip2q_s32(v130, v141));
      float32x4_t v294 = (float32x4_t)v144;
      v145.i32[0] = vdupq_laneq_s32(v130, 3).u32[0];
      v145.i32[1] = v141.i32[3];
      v116.i32[2] = *(_DWORD *)(v81 + 56);
      v116.i32[3] = *(_DWORD *)(v84 + 56);
      v145.i32[2] = *(_DWORD *)(v88 + 56);
      v145.i32[3] = *(_DWORD *)(v90 + 56);
      float32x4_t v291 = (float32x4_t)vzip2q_s32(v116, v145);
      float32x4_t v292 = (float32x4_t)vzip1q_s32(v116, v145);
      int32x4_t v146 = *(int32x4_t *)(v98 + 28);
      int32x4_t v147 = *(int32x4_t *)(v99 + 28);
      int32x4_t v148 = vzip1q_s32(v146, v147);
      int32x4_t v149 = vzip2q_s32(v146, v147);
      int32x4_t v150 = *(int32x4_t *)(v102 + 28);
      int32x4_t v151 = *(int32x4_t *)(v103 + 28);
      int32x4_t v152 = vzip1q_s32(v150, v151);
      float32x4_t v289 = (float32x4_t)vzip2q_s32(v148, v152);
      float32x4_t v290 = (float32x4_t)vzip1q_s32(v148, v152);
      int32x4_t v153 = vzip1q_s32(v149, vzip2q_s32(v150, v151));
      int32x4_t v154 = *(int32x4_t *)(v98 + 40);
      int32x4_t v155 = *(int32x4_t *)(v99 + 40);
      int32x4_t v156 = vzip1q_s32(v154, v155);
      int32x4_t v157 = vzip2q_s32(v154, v155);
      v154.i32[0] = vdupq_laneq_s32(v154, 3).u32[0];
      v154.i32[1] = v155.i32[3];
      int32x4_t v158 = *(int32x4_t *)(v102 + 40);
      int32x4_t v159 = *(int32x4_t *)(v103 + 40);
      int32x4_t v160 = vzip1q_s32(v158, v159);
      float32x4_t v287 = (float32x4_t)vzip1q_s32(v156, v160);
      float32x4_t v288 = (float32x4_t)v153;
      int32x4_t v161 = vzip2q_s32(v156, v160);
      int32x4_t v162 = vzip2q_s32(v158, v159);
      v158.i32[0] = vdupq_laneq_s32(v158, 3).u32[0];
      v158.i32[1] = v159.i32[3];
      v154.i32[2] = *(_DWORD *)(v98 + 56);
      v154.i32[3] = *(_DWORD *)(v99 + 56);
      v158.i32[2] = *(_DWORD *)(v102 + 56);
      v158.i32[3] = *(_DWORD *)(v103 + 56);
      float32x4_t v285 = (float32x4_t)vzip1q_s32(v157, v162);
      float32x4_t v286 = (float32x4_t)v161;
      float32x4_t v283 = (float32x4_t)vzip2q_s32(v154, v158);
      float32x4_t v284 = (float32x4_t)vzip1q_s32(v154, v158);
      float32x4_t v163 = vaddq_f32(v118, v118);
      float32x4_t v281 = vsubq_f32(vaddq_f32(v320, v163), v111);
      float32x4_t v164 = vaddq_f32(v119, v119);
      float32x4_t v279 = vsubq_f32(vaddq_f32(v321, v164), v112);
      float32x4_t v165 = vaddq_f32(v120, v120);
      int32x4_t v39 = v325;
      int32x4_t v30 = v327;
      float32x4_t v277 = vsubq_f32(vaddq_f32(v323, v165), v114);
      float32x4_t v166 = vaddq_f32(v129, v129);
      float32x4_t v275 = vsubq_f32(vaddq_f32(v314, v166), v113);
      float32x4_t v167 = vaddq_f32(v131, v131);
      float32x4_t v273 = vsubq_f32(vaddq_f32(v316, v167), v122);
      float32x4_t v168 = vaddq_f32(v133, v133);
      float32x4_t v271 = vsubq_f32(vaddq_f32(v318, v168), v123);
      float32x4_t v38 = v94;
      float32x4_t v270 = vaddq_f32((float32x4_t)v3[37], vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v75, (float32x4_t)v3[22]), v74, (float32x4_t)v3[19]), v73, (float32x4_t)v3[16]), vmlaq_f32(vmlaq_f32(vmulq_f32(v82, (float32x4_t)v3[31]), v79, (float32x4_t)v3[28]), v78, (float32x4_t)v3[25])));
      int32x4_t v43 = v331;
      float32x4_t v269 = vaddq_f32((float32x4_t)v3[38], vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v75, (float32x4_t)v3[23]), v74, (float32x4_t)v3[20]), v73, (float32x4_t)v3[17]), vmlaq_f32(vmlaq_f32(vmulq_f32(v82, (float32x4_t)v3[32]), v79, (float32x4_t)v3[29]), v78, (float32x4_t)v3[26])));
      int32x4_t v29 = v335;
      float32x4_t v302 = v75;
      float32x4_t v303 = v74;
      float32x4_t v304 = v73;
      float32x4_t v299 = v82;
      float32x4_t v300 = v79;
      float32x4_t v301 = v78;
      int32x4_t v45 = v329;
      v129.i32[0] = *(_DWORD *)(v81 + 60);
      v129.i32[1] = *(_DWORD *)(v88 + 60);
      v129.i32[2] = *(_DWORD *)(v84 + 60);
      v129.i32[3] = *(_DWORD *)(v90 + 60);
      float32x4_t v267 = v129;
      float32x4_t v268 = vaddq_f32((float32x4_t)v3[39], vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v75, (float32x4_t)v3[24]), v74, (float32x4_t)v3[21]), v73, (float32x4_t)v3[18]), vmlaq_f32(vmlaq_f32(vmulq_f32(v82, (float32x4_t)v3[33]), v79, (float32x4_t)v3[30]), v78, (float32x4_t)v3[27])));
      v129.i32[0] = *(_DWORD *)(v98 + 60);
      v129.i32[1] = *(_DWORD *)(v102 + 60);
      v129.i32[2] = *(_DWORD *)(v99 + 60);
      v129.i32[3] = *(_DWORD *)(v103 + 60);
      float32x4_t v266 = v129;
      float result = (int32x4_t **)&v3[40];
      float32x4_t v265 = (float32x4_t)vdupq_lane_s32(a3, 0);
      float32x4_t v169 = (float32x4_t)v3[6];
      float32x4_t v324 = (float32x4_t)v3[5];
      float32x4_t v170 = (float32x4_t)v3[3];
      float32x4_t v171 = (float32x4_t)v3[4];
      float32x4_t v278 = v165;
      float32x4_t v172 = vnegq_f32(v165);
      int32x4_t v28 = v68;
      float32x4_t v282 = v163;
      float32x4_t v262 = vnegq_f32(v163);
      float32x4_t v263 = v172;
      float32x4_t v280 = v164;
      float32x4_t v173 = vnegq_f32(v164);
      int32x4_t v44 = v333;
      float32x4_t v272 = v168;
      float32x4_t v260 = vnegq_f32(v168);
      float32x4_t v261 = v173;
      float32x4_t v276 = v166;
      float32x4_t v274 = v167;
      float32x4_t v258 = vnegq_f32(v167);
      float32x4_t v259 = vnegq_f32(v166);
      float32x4_t v264 = v169;
      do
      {
        float32x4_t v313 = (float32x4_t)v25;
        float32x4_t v315 = (float32x4_t)v23;
        float32x4_t v317 = (float32x4_t)v24;
        float32x4_t v319 = (float32x4_t)v40;
        float32x4_t v322 = (float32x4_t)v28;
        float32x4_t v326 = (float32x4_t)v39;
        float32x4_t v328 = (float32x4_t)v30;
        float32x4_t v330 = (float32x4_t)v45;
        float32x4_t v332 = (float32x4_t)v43;
        float32x4_t v334 = (float32x4_t)v44;
        float32x4_t v336 = (float32x4_t)v29;
        __asm { PRFM            #0, [X0,#0x170] }
        float32x4_t v179 = *((float32x4_t *)result + 2);
        float32x4_t v309 = *((float32x4_t *)result + 1);
        float32x4_t v310 = v179;
        float32x4_t v180 = vaddq_f32(*((float32x4_t *)result + 8), vmlaq_f32(vmulq_f32(v280, v179), v309, v263));
        float32x4_t v181 = vaddq_f32(*((float32x4_t *)result + 9), vmlaq_f32(vmulq_f32(v278, *(float32x4_t *)result), v179, v262));
        float32x4_t v182 = vaddq_f32(*((float32x4_t *)result + 10), vmlaq_f32(vmulq_f32(v282, v309), *(float32x4_t *)result, v261));
        float32x4_t v307 = *((float32x4_t *)result + 6);
        float32x4_t v308 = *(float32x4_t *)result;
        float32x4_t v305 = *((float32x4_t *)result + 4);
        float32x4_t v306 = *((float32x4_t *)result + 5);
        float32x4_t v183 = vaddq_f32(*((float32x4_t *)result + 12), vmlaq_f32(vmulq_f32(v274, v307), v306, v260));
        float32x4_t v184 = vaddq_f32(*((float32x4_t *)result + 13), vmlaq_f32(vmulq_f32(v272, v305), v307, v259));
        float32x4_t v185 = vaddq_f32(*((float32x4_t *)result + 14), vmlaq_f32(vmulq_f32(v276, v306), v305, v258));
        v186.i64[0] = 0x1000000010;
        v186.i64[1] = 0x1000000010;
        int8x16_t v311 = *((int8x16_t *)result + 22);
        __asm { FMOV            V24.4S, #1.0 }
        float32x4_t v188 = (float32x4_t)vbicq_s8(_Q24, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v311, v186)));
        float32x4_t v189 = vmlaq_f32(vmlaq_f32(vmulq_f32(v298, v180), v181, v297), v182, v296);
        float32x4_t v190 = vmlaq_f32(vmlaq_f32(vmulq_f32(v295, v180), v181, v294), v182, v293);
        float32x4_t v191 = vmlaq_f32(vmlaq_f32(vmulq_f32(v292, v180), v181, v291), v182, v267);
        float32x4_t v192 = vmlaq_f32(vmlaq_f32(vmulq_f32(v290, v183), v184, v289), v185, v288);
        float32x4_t v193 = vmlaq_f32(vmlaq_f32(vmulq_f32(v287, v183), v184, v286), v185, v285);
        float32x4_t v194 = vmlaq_f32(vmlaq_f32(vmulq_f32(v284, v183), v184, v283), v185, v266);
        float32x4_t v196 = (float32x4_t)v3[30];
        float32x4_t v195 = (float32x4_t)v3[31];
        float32x4_t v198 = (float32x4_t)v3[28];
        float32x4_t v197 = (float32x4_t)v3[29];
        float32x4_t v199 = v169;
        float32x4_t v201 = (float32x4_t)v3[24];
        float32x4_t v200 = (float32x4_t)v3[25];
        float32x4_t v202 = v170;
        float32x4_t v203 = v171;
        float32x4_t v204 = (float32x4_t)v3[22];
        float32x4_t v205 = (float32x4_t)v3[23];
        float32x4_t v207 = (float32x4_t)v3[18];
        float32x4_t v206 = (float32x4_t)v3[19];
        float32x4_t v208 = (float32x4_t)v3[16];
        float32x4_t v209 = (float32x4_t)v3[17];
        float32x4_t v210 = vmulq_f32((float32x4_t)v3[34], vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v194, v195), v193, v198), v192, v200), v191, v204), v190, v206), v189, v208));
        float32x4_t v211 = (float32x4_t)v3[32];
        float32x4_t v212 = (float32x4_t)v3[33];
        float32x4_t v213 = (float32x4_t)v3[26];
        float32x4_t v214 = (float32x4_t)v3[27];
        float32x4_t v215 = (float32x4_t)v3[20];
        float32x4_t v216 = (float32x4_t)v3[21];
        float32x4_t v217 = vmulq_f32((float32x4_t)v3[35], vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v194, v211), v193, v197), v192, v213), v191, v205), v190, v215), v189, v209));
        float32x4_t v218 = vmulq_f32((float32x4_t)v3[36], vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v194, v212), v193, v196), v192, v214), v191, v201), v190, v216), v189, v207));
        float32x4_t v219 = vmlsq_f32(v189, v188, vmlaq_f32(vmlaq_f32(vmulq_f32(v207, v218), v217, v209), v210, v208));
        float32x4_t v220 = vmlsq_f32(v190, v188, vmlaq_f32(vmlaq_f32(vmulq_f32(v216, v218), v217, v215), v210, v206));
        float32x4_t v221 = vmlsq_f32(v191, v188, vmlaq_f32(vmlaq_f32(vmulq_f32(v201, v218), v217, v205), v210, v204));
        float32x4_t v222 = vmlsq_f32(v192, v188, vmlaq_f32(vmlaq_f32(vmulq_f32(v214, v218), v217, v213), v210, v200));
        float32x4_t v223 = vmlsq_f32(v193, v188, vmlaq_f32(vmlaq_f32(vmulq_f32(v196, v218), v217, v197), v210, v198));
        float32x4_t v224 = vmlsq_f32(v194, v188, vmlaq_f32(vmlaq_f32(vmulq_f32(v212, v218), v217, v211), v210, v195));
        float32x4_t v225 = vmlaq_f32(vmulq_f32(v302, v221), v303, v220);
        float32x4_t v226 = vmlaq_f32(vmulq_f32(v299, v224), v300, v223);
        float32x4_t v227 = vaddq_f32(vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v277, v310), v279, v309), v281, *(float32x4_t *)result), vmlaq_f32(vmlaq_f32(vmulq_f32(v271, v307), v273, v306), v275, v305)), vsubq_f32(*((float32x4_t *)result + 3), vmulq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v268, v218), v217, v269), v210, v270), v188)));
        float32x4_t v228 = vaddq_f32(vmlaq_f32(vmulq_f32(v324, vmlaq_f32(vmlaq_f32(vmulq_f32(v221, v221), v220, v220), v219, v219)), vmlaq_f32(vmlaq_f32(vmulq_f32(v310, v310), v309, v309), v308, v308), v202), vmlaq_f32(vmulq_f32(v199, vmlaq_f32(vmlaq_f32(vmulq_f32(v224, v224), v223, v223), v222, v222)), vmlaq_f32(vmlaq_f32(vmulq_f32(v307, v307), v306, v306), v305, v305), v203));
        float32x4_t v229 = vrecpeq_f32(v228);
        int v230 = 4;
        do
        {
          float32x4_t v229 = vmulq_f32(v229, vrecpsq_f32(v229, v228));
          --v230;
        }
        while (v230);
        float32x4_t v231 = (float32x4_t)vandq_s8((int8x16_t)v229, (int8x16_t)vcgtzq_f32(v228));
        v232.i64[0] = 0x4000000040;
        v232.i64[1] = 0x4000000040;
        float32x4_t v233 = *((float32x4_t *)result + 19);
        v234.i64[0] = 0x80000000800000;
        v234.i64[1] = 0x80000000800000;
        float32x4_t v235 = vmaxq_f32(vminq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v231, vaddq_f32(*((float32x4_t *)result + 16), vmaxq_f32(vminq_f32(vmulq_f32(vmlsq_f32(vaddq_f32(v227, vmulq_f32(*((float32x4_t *)result + 21), vsubq_f32(vmlaq_f32(v225, v304, v219), vmlaq_f32(v226, v301, v222)))), v265, *((float32x4_t *)result + 16)), *((float32x4_t *)result + 7)),
                               *((float32x4_t *)result + 20)),
                             (float32x4_t)vbslq_s8((int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v311, v232)), (int8x16_t)vnegq_f32(*((float32x4_t *)result + 20)), v234)))), vaddq_f32(vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v313, v310), v317, v309), v315, v308), vmlaq_f32(vmlaq_f32(vmulq_f32(v328, v307), v336, v306), v322, v305)), vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v319, v221), v326, v220), v38, v219), vmlaq_f32(vmlaq_f32(vmulq_f32(v330, v224), v334, v223), v332, v222))), vmulq_f32(v231, *((float32x4_t *)result + 11))), v233, *((float32x4_t *)result + 15)), *((float32x4_t *)result + 18)), *((float32x4_t *)result + 17));
        float32x4_t v236 = vsubq_f32(v235, v233);
        float32x4_t v170 = v202;
        float32x4_t v237 = vmulq_f32(v202, v236);
        int32x4_t v23 = (int32x4_t)vmlaq_f32(v315, v237, v308);
        int32x4_t v24 = (int32x4_t)vmlaq_f32(v317, v237, v309);
        int32x4_t v25 = (int32x4_t)vmlaq_f32(v313, v237, v310);
        float32x4_t v171 = v203;
        float32x4_t v238 = vmulq_f32(v203, v236);
        int32x4_t v28 = (int32x4_t)vmlsq_f32(v322, v238, v305);
        int32x4_t v29 = (int32x4_t)vmlsq_f32(v336, v238, v306);
        int32x4_t v30 = (int32x4_t)vmlsq_f32(v328, v238, v307);
        float32x4_t v239 = vmulq_f32(v324, v236);
        float32x4_t v38 = vmlaq_f32(v38, v239, v219);
        int32x4_t v39 = (int32x4_t)vmlaq_f32(v326, v239, v220);
        int32x4_t v40 = (int32x4_t)vmlaq_f32(v319, v239, v221);
        float32x4_t v169 = v264;
        float32x4_t v240 = vmulq_f32(v264, v236);
        int32x4_t v43 = (int32x4_t)vmlsq_f32(v332, v240, v222);
        int32x4_t v44 = (int32x4_t)vmlsq_f32(v334, v240, v223);
        int32x4_t v45 = (int32x4_t)vmlsq_f32(v330, v240, v224);
        *((float32x4_t *)result + 19) = v235;
        ++v46;
        result += 46;
      }
      while (v46 < v3->i32[1]);
    }
    float32x2x2_t v241 = (float32x2x2_t)vzip1q_s32(v23, v25);
    float32x2x2_t v242 = (float32x2x2_t)vzip2q_s32(v23, v25);
    int32x4_t v243 = vzip1q_s32(v24, v24);
    int32x4_t v244 = vzip2q_s32(v24, v24);
    int32x4_t v245 = vzip2q_s32((int32x4_t)v241, v243);
    float32x2x2_t v246 = (float32x2x2_t)vzip1q_s32((int32x4_t)v38, v40);
    int32x4_t v247 = vzip1q_s32(v39, v39);
    vst2_f32((float *)v5->i32, v241);
    vst2_f32((float *)v14->i32, v246);
    float32x2x2_t v248 = (float32x2x2_t)vzip1q_s32(v28, v30);
    float32x2x2_t v249 = (float32x2x2_t)vzip2q_s32((int32x4_t)v38, v40);
    *float32x4_t v7 = v245;
    v7[1] = vzip2q_s32((int32x4_t)v246, v247);
    int32x4_t v250 = vzip2q_s32(v39, v39);
    vst2_f32((float *)v9->i32, v242);
    i32 = (float *)v9[1].i32;
    vst2_f32(i32, v249);
    float32x2x2_t v251 = (float32x2x2_t)vzip2q_s32(v28, v30);
    int32x4_t v252 = vzip1q_s32(v29, v29);
    *uint64_t v13 = vzip2q_s32((int32x4_t)v242, v244);
    v13[1] = vzip2q_s32((int32x4_t)v249, v250);
    float32x2x2_t v253 = (float32x2x2_t)vzip1q_s32(v43, v45);
    int32x4_t v254 = vzip1q_s32(v44, v44);
    vst2_f32((float *)v4->i32, v248);
    int32x4_t v34 = (float *)v4[1].i32;
    vst2_f32(v34, v253);
    *float32x4_t v6 = vzip2q_s32((int32x4_t)v248, v252);
    v6[1] = vzip2q_s32((int32x4_t)v253, v254);
    int32x4_t v255 = vzip2q_s32(v29, v29);
    float32x2x2_t v256 = (float32x2x2_t)vzip2q_s32(v43, v45);
    vst2_f32((float *)v8->i32, v251);
    int32x4_t v257 = vzip2q_s32(v44, v44);
    float32x4_t v36 = (float *)v8[1].i32;
    vst2_f32(v36, v256);
    int32x4_t *v12 = vzip2q_s32((int32x4_t)v251, v255);
    v12[1] = vzip2q_s32((int32x4_t)v256, v257);
  }
  return result;
}

int32x4_t **physx::Dy::solve1D4(unsigned int *a1, uint64_t a2, uint64_t a3, double a4, float a5)
{
  *(float *)&a4 = a5;
  return physx::Dy::solve1DStep4((int32x4_t **)(a2 + 48 * *a1), a3, *(int32x2_t *)&a4);
}

_DWORD *physx::Dy::writeBack1D4(_DWORD *result, uint64_t a2)
{
  uint64_t v2 = *(int32x2_t **)(a2 + 48 * *result + 40);
  uint64_t v3 = *(int32x2_t **)(a2 + 48 * (*result + 1) + 40);
  unint64_t v4 = *(int32x2_t **)(a2 + 48 * (*result + 2) + 40);
  unint64_t v5 = *(int32x2_t **)(a2 + 48 * (*result + 3) + 40);
  if (v2) {
    _ZF = 0;
  }
  else {
    _ZF = v3 == 0;
  }
  if (!_ZF || v4 != 0 || v5 != 0)
  {
    uint64_t v9 = *(float32x4_t **)(a2 + 48 * *result + 32);
    __int32 v10 = v9->i32[1];
    if (v10)
    {
      float32x4_t v11 = 0uLL;
      uint64_t v12 = v9 + 40;
      v13.i64[0] = 0x200000002;
      v13.i64[1] = 0x200000002;
      float32x4_t v14 = 0uLL;
      float32x4_t v15 = 0uLL;
      float32x4_t v16 = 0uLL;
      float32x4_t v17 = 0uLL;
      float32x4_t v18 = 0uLL;
      do
      {
        float32x4_t v19 = (float32x4_t)vbicq_s8((int8x16_t)v12[19], (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)v12[22], v13)));
        float32x4_t v11 = vmlaq_f32(v11, v19, *v12);
        float32x4_t v14 = vmlaq_f32(v14, v19, v12[1]);
        float32x4_t v15 = vmlaq_f32(v15, v19, v12[2]);
        float32x4_t v16 = vmlaq_f32(v16, v19, v12[8]);
        float32x4_t v18 = vmlaq_f32(v18, v19, v12[9]);
        float32x4_t v17 = vmlaq_f32(v17, v19, v12[10]);
        v12 += 23;
        --v10;
      }
      while (v10);
    }
    else
    {
      float32x4_t v18 = 0uLL;
      float32x4_t v17 = 0uLL;
      float32x4_t v16 = 0uLL;
      float32x4_t v15 = 0uLL;
      float32x4_t v14 = 0uLL;
      float32x4_t v11 = 0uLL;
    }
    float32x4_t v20 = v9[7];
    float32x4_t v21 = v9[8];
    float32x4_t v22 = vsubq_f32(v16, vmlsq_f32(vmulq_f32(v15, v21), v14, v20));
    float32x4_t v23 = v9[9];
    float32x4_t v24 = vsubq_f32(v18, vmlsq_f32(vmulq_f32(v11, v23), v15, v21));
    float32x4_t v25 = vmlsq_f32(vmulq_f32(v14, v20), v11, v23);
    float32x4_t v26 = vmlaq_f32(vmlaq_f32(vmulq_f32(v11, v11), v14, v14), v15, v15);
    float32x4_t v27 = vmlaq_f32(vmulq_f32(v22, v22), v24, v24);
    float32x4_t v28 = vrsqrteq_f32(v26);
    int v29 = 4;
    do
    {
      float32x4_t v28 = vmulq_f32(v28, vrsqrtsq_f32(vmulq_f32(v28, v28), v26));
      --v29;
    }
    while (v29);
    float32x4_t v30 = vsubq_f32(v17, v25);
    float32x4_t v31 = vmlaq_f32(v27, v30, v30);
    __asm { FMOV            V16.4S, #1.0 }
    float32x4_t v36 = (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v26), _Q16, (int8x16_t)v28);
    float32x4_t v37 = vrsqrteq_f32(v31);
    int v38 = 4;
    do
    {
      float32x4_t v37 = vmulq_f32(v37, vrsqrtsq_f32(vmulq_f32(v37, v37), v31));
      --v38;
    }
    while (v38);
    int8x16_t v39 = vorrq_s8((int8x16_t)vcgtq_f32(vmulq_f32(v31, (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v31), _Q16, (int8x16_t)v37)), v9[2]), (int8x16_t)vcgtq_f32(vmulq_f32(v26, v36), v9[1]));
    if (v2)
    {
      *uint64_t v2 = vzip1_s32(*(int32x2_t *)v11.f32, *(int32x2_t *)v14.f32);
      v2[1].i32[0] = v15.i32[0];
      v2[2] = vzip1_s32(*(int32x2_t *)v22.f32, *(int32x2_t *)v24.f32);
      v2[3].i32[0] = v30.i32[0];
      if (v9->i8[12]) {
        BOOL v40 = v39.i32[0] == 0;
      }
      else {
        BOOL v40 = 1;
      }
      int v41 = !v40;
      v2[1].i32[1] = v41;
    }
    if (v3)
    {
      int32x2_t *v3 = vzip2_s32(*(int32x2_t *)v11.f32, *(int32x2_t *)v14.f32);
      v3[1].i32[0] = v15.i32[1];
      v3[2] = vzip2_s32(*(int32x2_t *)v22.f32, *(int32x2_t *)v24.f32);
      v3[3].i32[0] = v30.i32[1];
      if (v9->i8[13]) {
        BOOL v42 = v39.i32[1] == 0;
      }
      else {
        BOOL v42 = 1;
      }
      int v43 = !v42;
      v3[1].i32[1] = v43;
    }
    int32x2_t v44 = (int32x2_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
    int32x2_t v45 = (int32x2_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u64[0];
    int32x2_t v46 = (int32x2_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
    int32x2_t v47 = (int32x2_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
    if (v4)
    {
      *unint64_t v4 = vzip1_s32(v45, v44);
      v4[1].i32[0] = v15.i32[2];
      _OWORD v4[2] = vzip1_s32(v47, v46);
      v4[3].i32[0] = v30.i32[2];
      if (v9->i8[14]) {
        BOOL v48 = v39.i32[2] == 0;
      }
      else {
        BOOL v48 = 1;
      }
      int v49 = !v48;
      v4[1].i32[1] = v49;
    }
    if (v5)
    {
      *unint64_t v5 = vzip2_s32(v45, v44);
      v5[1].i32[0] = v15.i32[3];
      v5[2] = vzip2_s32(v47, v46);
      v5[3].i32[0] = v30.i32[3];
      if (v9->i8[15]) {
        BOOL v50 = v39.i32[3] == 0;
      }
      else {
        BOOL v50 = 1;
      }
      int v51 = !v50;
      v5[1].i32[1] = v51;
    }
  }
  return result;
}

int32x4_t **physx::Dy::solveConcludeContact4(unsigned int *a1, uint64_t a2, int32x2_t a3)
{
  float v3 = *(float *)a3.i32;
  a3.i32[0] = -8388609;
  return physx::Dy::solveContact4_Block((int32x4_t **)(a2 + 48 * *a1), a3, v3);
}

int32x4_t **physx::Dy::solveConclude1D4(unsigned int *a1, uint64_t a2, uint64_t a3, int32x2_t a4)
{
  float result = physx::Dy::solve1DStep4((int32x4_t **)(a2 + 48 * *a1), a3, a4);
  float32x4_t v7 = *(int8x16_t **)(a2 + 48 * *a1 + 32);
  if (v7 && v7->i32[1])
  {
    unsigned __int32 v8 = 0;
    _X10 = v7 + 47;
    v10.i64[0] = 0x400000004;
    v10.i64[1] = 0x400000004;
    do
    {
      __asm { PRFM            #0, [X10,#0x100] }
      *_X10 = vbicq_s8(*_X10, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(_X10[15], v10)));
      ++v8;
      _X10 += 23;
    }
    while (v8 < v7->i32[1]);
  }
  return result;
}

void physx::Dy::BlockAllocator::~BlockAllocator(physx::Dy::BlockAllocator *this)
{
}

unsigned __int8 *physx::Dy::BlockAllocator::findInputPatches(physx::Dy::BlockAllocator *this, unsigned __int8 *a2)
{
  return a2;
}

uint64_t physx::Dy::DynamicsContext::setSimulationController(uint64_t result, uint64_t a2)
{
  *(void *)(result + 80) = a2;
  return result;
}

void physx::Dy::PxsPreIntegrateTask::~PxsPreIntegrateTask(physx::Dy::PxsPreIntegrateTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Dy::PxsPreIntegrateTask::getName(physx::Dy::PxsPreIntegrateTask *this)
{
  return "PxsDynamics.preIntegrate";
}

void physx::Dy::PxsSolverCreateFinalizeConstraintsTask::~PxsSolverCreateFinalizeConstraintsTask(physx::Dy::PxsSolverCreateFinalizeConstraintsTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Dy::PxsSolverCreateFinalizeConstraintsTask::getName(physx::Dy::PxsSolverCreateFinalizeConstraintsTask *this)
{
  return "PxsDynamics.solverCreateFinalizeConstraints";
}

void physx::Dy::SolverCoreGeneral::~SolverCoreGeneral(physx::Dy::SolverCoreGeneral *this)
{
}

void physx::Dy::SolverCoreGeneralPF::~SolverCoreGeneralPF(physx::Dy::SolverCoreGeneralPF *this)
{
}

void physx::Dy::PxsSolverStartTask::~PxsSolverStartTask(physx::Dy::PxsSolverStartTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Dy::PxsSolverStartTask::getName(physx::Dy::PxsSolverStartTask *this)
{
  return "PxsDynamics.solverStart";
}

void physx::Dy::PxsSolverStartTask::runInternal(physx::Dy::PxsSolverStartTask *this)
{
  unint64_t v1 = this;
  uint64_t v360 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 5);
  uint64_t v3 = (uint64_t)physx::shdfnd::SListImpl::pop(*(physx::shdfnd::SListImpl **)(v2 + 400));
  unsigned __int32 v342 = v1;
  if (!v3)
  {
    uint64_t v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unint64_t v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ThreadContext>::getName() [T = physx::Dy::ThreadContext]";
    }
    else {
      unint64_t v5 = "<allocation names disabled>";
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24) + 16))(v4 + 24, 12343, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/include/utils/PxcThreadCoherentCache.h", 82);
    if (v6)
    {
      uint64_t v3 = (v6 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(void *)(v3 - 8) = v3 - v6;
    }
    else
    {
      uint64_t v3 = 0;
    }
    physx::Dy::ThreadContext::ThreadContext((physx::Dy::ThreadContext *)v3, *(physx::PxcNpMemBlockPool **)(v2 + 408));
    unint64_t v1 = v342;
  }
  uint64_t v7 = *((void *)v1 + 6);
  *(void *)uint64_t v7 = v3;
  *(void *)(v3 + 12240) = 0;
  *(_DWORD *)(v3 + 12212) = 0;
  *(void *)(v3 + 12280) = *(void *)(v3 + 12064);
  *(_DWORD *)(v3 + 12048) = 0;
  *(_DWORD *)(v3 + 12024) = 0;
  *(_DWORD *)(v3 + 12256) = 0;
  *(void *)(v3 + 11896) = 0;
  *(void *)(v3 + 11912) = 0;
  *(void *)(v3 + 11904) = 0;
  uint64_t v8 = *((void *)v1 + 15);
  *(void *)(v3 + 12016) = v8;
  *(void *)(v3 + 12032) = *((void *)v1 + 16);
  *(void *)(v3 + 12264) = v8;
  *(void *)(v3 + 12056) = *((void *)v1 + 17);
  *(void *)(v3 + 12040) = *((void *)v1 + 18);
  *(void *)(v3 + 11992) = *((void *)v1 + 19);
  *(void *)(v3 + 11968) = *((void *)v1 + 20);
  long long v10 = *(_OWORD *)((char *)v1 + 56);
  uint64_t v9 = (char *)v1 + 56;
  *(_OWORD *)(v3 + 11976) = v10;
  *(_OWORD *)(v3 + 12000) = *((_OWORD *)v9 + 3);
  float32x4_t v315 = v9;
  if (*(_DWORD *)(*((void *)v9 - 2) + 148)) {
    int v11 = *(_DWORD *)(v7 + 16);
  }
  else {
    int v11 = 0;
  }
  physx::Dy::ThreadContext::resizeArrays(v3, v11, *(_DWORD *)(v7 + 12) & 0x7FFFFFFF);
  uint64_t v12 = *(void *)(v3 + 11968);
  uint64_t v13 = *(void *)(v3 + 11976);
  uint64_t v14 = *(void *)(v3 + 12000);
  uint64_t v15 = *(void *)(v3 + 12008);
  float32x4_t v16 = v342;
  uint64_t v17 = *((unsigned int *)v342 + 24);
  uint64_t v18 = *((void *)v342 + 11);
  uint64_t v19 = *((void *)v342 + 22);
  if (v17)
  {
    uint64_t v20 = 0;
    unsigned int v21 = 0;
    unsigned int v22 = 0;
    uint64_t v23 = *(void *)(v3 + 11984);
    do
    {
      unsigned int v24 = *(_DWORD *)(*(void *)(v19 + 344) + 44 * *(unsigned int *)(v18 + 4 * v20));
      if (v24 <= 0xFFFFFF7F)
      {
        do
        {
          uint64_t v25 = v24 >> 7;
          uint64_t v26 = *(void *)(v19 + 248);
          uint64_t v27 = v26 + 32 * v25;
          if (*(unsigned char *)(v27 + 5) == 1) {
            *(void *)(v23 + 8 * v22++) = *(void *)(v27 + 24);
          }
          else {
            *(_DWORD *)(v15 + 4 * v21++) = v25;
          }
          unsigned int v24 = *(_DWORD *)(v26 + 32 * v25 + 8);
        }
        while (v24 < 0xFFFFFF80);
      }
      ++v20;
    }
    while (v20 != v17);
  }
  else
  {
    unsigned int v21 = 0;
  }
  if (*((unsigned char *)v342 + 208))
  {
    physx::shdfnd::sort<unsigned int,physx::shdfnd::Less<unsigned int>,physx::shdfnd::ReflectionAllocator<unsigned int>>(v15, v21, (uint64_t)&v352, (uint64_t)v347, 32);
    float32x4_t v16 = v342;
  }
  if (v21)
  {
    for (uint64_t i = 0; i != v21; *(_DWORD *)(v14 + 4 * *(unsigned int *)(*(void *)(v19 + 264) + 4 * v29)) = i++)
    {
      uint64_t v29 = *(_DWORD *)(v15 + 4 * i) & 0x1FFFFFF;
      uint64_t v30 = *(void *)(*(void *)(v19 + 248) + 32 * v29 + 24);
      *(void *)(v13 + 8 * i) = v30;
      *(void *)(v12 + 8 * i) = *(void *)(v30 + 40);
    }
  }
  uint64_t v31 = *((void *)v16 + 10);
  if (v17)
  {
    uint64_t v343 = v14;
    uint64_t v32 = 0;
    unsigned int v33 = 0;
    uint64_t v334 = v18;
    uint64_t v338 = v17;
    do
    {
      for (unsigned int j = *(_DWORD *)(*(void *)(v19 + 344) + 44 * *(unsigned int *)(v18 + 4 * v32) + 20);
            j != -1;
            unsigned int j = *(_DWORD *)(v36 + 16 * (j % v35) + 8))
      {
        unsigned int v35 = *(_DWORD *)(v19 + 304);
        uint64_t v36 = *(void *)(*(void *)(v19 + 280) + 8 * (j / v35));
        uint64_t v37 = *(void *)(*(void *)(*(void *)(*((void *)v16 + 22) + 176)
                                    + 8 * (j / *(_DWORD *)(*((void *)v16 + 22) + 200)))
                        + 8 * (j % *(_DWORD *)(*((void *)v16 + 22) + 200)));
        if (v37)
        {
          int v38 = *(uint64_t **)(v19 + 832);
          unsigned int v39 = *((_DWORD *)v38 + 6);
          uint64_t v40 = *v38;
          unint64_t v41 = *(unsigned int *)(*(void *)(*v38 + 8 * (2 * j / v39)) + 4 * (2 * j % v39));
          unint64_t v42 = *(unsigned int *)(*(void *)(v40 + 8 * (((2 * j) | 1) / v39)) + 4 * (((2 * j) | 1) % v39));
          uint64_t v43 = v31 + 32 * v33;
          *(void *)(v43 + 24) = v37;
          unint64_t v44 = v41 >> 7;
          uint64_t v45 = *(void *)(v19 + 248) + 32 * (v41 >> 7);
          if (*(unsigned char *)(v45 + 5) == 1)
          {
            (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(v45 + 24) + 376))(*(void *)(v45 + 24), (v41 >> 1) & 0x3F, v31 + 32 * v33, v43 + 16);
          }
          else
          {
            if ((*(unsigned char *)(v45 + 4) & 4) != 0)
            {
              *(unsigned char *)(v43 + 16) = 1;
              uint64_t v46 = *(unsigned int *)(*(void *)(v19 + 264) + 4 * v44);
            }
            else
            {
              *(unsigned char *)(v43 + 16) = 0;
              uint64_t v46 = *(unsigned int *)(v343 + 4 * *(unsigned int *)(*(void *)(v19 + 264) + 4 * v44));
            }
            *(void *)uint64_t v43 = v46;
          }
          ++v33;
          if (v42 < 0xFFFFFF80)
          {
            unint64_t v47 = v42 >> 7;
            uint64_t v48 = *(void *)(v19 + 248) + 32 * (v42 >> 7);
            if (*(unsigned char *)(v48 + 5) == 1)
            {
              (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(v48 + 24) + 376))(*(void *)(v48 + 24), (v42 >> 1) & 0x3F, v43 + 8, v43 + 17);
            }
            else
            {
              if ((*(unsigned char *)(v48 + 4) & 4) != 0)
              {
                *(unsigned char *)(v43 + 17) = 1;
                uint64_t v49 = *(void *)(v19 + 264);
              }
              else
              {
                *(unsigned char *)(v43 + 17) = 0;
                unint64_t v47 = *(unsigned int *)(*(void *)(v19 + 264) + 4 * v47);
                uint64_t v49 = v343;
              }
              *(void *)(v43 + 8) = *(unsigned int *)(v49 + 4 * v47);
            }
          }
          else
          {
            *(unsigned char *)(v43 + 17) = 3;
          }
          float32x4_t v16 = v342;
        }
      }
      ++v32;
      uint64_t v18 = v334;
    }
    while (v32 != v338);
  }
  else
  {
    unsigned int v33 = 0;
  }
  if (*((unsigned char *)v16 + 208))
  {
    uint64_t v348 = 0x2000000000;
    uint64_t v349 = &v352;
    char v350 = 0;
    int v50 = v33 - 1;
    if ((int)(v33 - 1) >= 1)
    {
      int v51 = 0;
      long long v358 = 0u;
      long long v359 = 0u;
      long long v356 = 0u;
      long long v357 = 0u;
      long long v354 = 0u;
      long long v355 = 0u;
      int32x4_t v52 = &v352;
      long long v352 = 0u;
      long long v353 = 0u;
      while (1)
      {
        if (v50 > v51)
        {
          if ((v50 - v51) >= 5)
          {
            while (1)
            {
              int32x4_t v53 = (long long *)(v31 + 32 * ((uint64_t)(v50 + v51 + (v50 + v51 < 0)) >> 1));
              int32x4_t v54 = (long long *)(v31 + 32 * v51);
              uint64_t v55 = *((void *)v53 + 3);
              int32x4_t v56 = (uint64_t *)v54 + 3;
              uint64_t v57 = *((void *)v54 + 3);
              unsigned int v58 = *(_DWORD *)(v55 + 96);
              unsigned int v59 = *(_DWORD *)(v57 + 96);
              if (v58 < v59
                || v58 == v59 && (unsigned int v59 = *(_DWORD *)(v55 + 96), *(_DWORD *)(v55 + 100) < *(_DWORD *)(v57 + 100)))
              {
                long long v61 = *v54;
                long long v60 = v54[1];
                long long v62 = v53[1];
                *int32x4_t v54 = *v53;
                v54[1] = v62;
                *int32x4_t v53 = v61;
                v53[1] = v60;
                uint64_t v57 = *v56;
                unsigned int v59 = *(_DWORD *)(*v56 + 96);
              }
              int32x4_t v63 = (long long *)(v31 + 32 * v50);
              int32x4_t v65 = (uint64_t *)v63 + 3;
              uint64_t v64 = *((void *)v63 + 3);
              unsigned int v66 = *(_DWORD *)(v64 + 96);
              if (v66 < v59) {
                break;
              }
              if (v66 == v59)
              {
                if (*(_DWORD *)(v64 + 100) < *(_DWORD *)(v57 + 100)) {
                  break;
                }
              }
              else
              {
                unsigned int v59 = *(_DWORD *)(v64 + 96);
              }
LABEL_65:
              uint64_t v70 = *((void *)v53 + 3);
              unsigned int v71 = *(_DWORD *)(v70 + 96);
              if (v59 < v71 || v59 == v71 && *(_DWORD *)(v64 + 100) < *(_DWORD *)(v70 + 100))
              {
                long long v73 = *v53;
                long long v72 = v53[1];
                long long v74 = v63[1];
                *int32x4_t v53 = *v63;
                v53[1] = v74;
                long long *v63 = v73;
                v63[1] = v72;
              }
              float32x4_t v75 = (_OWORD *)(v31 + 32 * (v50 - 1));
              long long v77 = *v53;
              long long v76 = v53[1];
              long long v78 = v75[1];
              *int32x4_t v53 = *v75;
              v53[1] = v78;
              *float32x4_t v75 = v77;
              v75[1] = v76;
              float32x4_t v79 = (char *)v75 + 24;
              int v80 = v51;
              int v81 = v50 - 1;
              while (1)
              {
                uint64_t v82 = *(void *)v79;
                unsigned int v83 = *(_DWORD *)(*(void *)v79 + 96);
                uint64_t v84 = v31 + 32 + 32 * v80;
                for (int k = v80; ; ++k)
                {
                  uint64_t v86 = *(void *)(v84 + 24);
                  unsigned int v87 = *(_DWORD *)(v86 + 96);
                  if (v87 >= v83 && (v87 != v83 || *(_DWORD *)(v86 + 100) >= *(_DWORD *)(v82 + 100))) {
                    break;
                  }
                  v84 += 32;
                }
                int v80 = k + 1;
                for (uint64_t m = v31 - 32 + 32 * v81; ; m -= 32)
                {
                  --v81;
                  uint64_t v89 = *(void *)(m + 24);
                  unsigned int v90 = *(_DWORD *)(v89 + 96);
                  if (v83 >= v90 && (v83 != v90 || *(_DWORD *)(v82 + 100) >= *(_DWORD *)(v89 + 100))) {
                    break;
                  }
                }
                if (v80 >= v81) {
                  break;
                }
                long long v92 = *(_OWORD *)v84;
                long long v91 = *(_OWORD *)(v84 + 16);
                long long v93 = *(_OWORD *)(m + 16);
                *(_OWORD *)uint64_t v84 = *(_OWORD *)m;
                *(_OWORD *)(v84 + 16) = v93;
                *(_OWORD *)uint64_t m = v92;
                *(_OWORD *)(m + 16) = v91;
              }
              long long v95 = *(_OWORD *)v84;
              long long v94 = *(_OWORD *)(v84 + 16);
              long long v96 = v75[1];
              *(_OWORD *)uint64_t v84 = *v75;
              *(_OWORD *)(v84 + 16) = v96;
              *float32x4_t v75 = v95;
              v75[1] = v94;
              unsigned int v97 = v348;
              unsigned int v98 = HIDWORD(v348) - 1;
              if (k - v51 + 1 >= v50 - 1 - k)
              {
                if (v348 >= v98)
                {
                  physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::PxsIndexedContactManager>>::grow((uint64_t)v347);
                  unsigned int v97 = v348;
                  int32x4_t v52 = v349;
                }
                LODWORD(v348) = v97 + 1;
                *((_DWORD *)v52 + v97) = k + 2;
                uint64_t v100 = v348;
                LODWORD(v348) = v348 + 1;
                *((_DWORD *)v52 + v100) = v50;
                int v50 = k;
              }
              else
              {
                if (v348 >= v98)
                {
                  physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::PxsIndexedContactManager>>::grow((uint64_t)v347);
                  unsigned int v97 = v348;
                  int32x4_t v52 = v349;
                }
                LODWORD(v348) = v97 + 1;
                *((_DWORD *)v52 + v97) = v51;
                uint64_t v99 = v348;
                LODWORD(v348) = v348 + 1;
                *((_DWORD *)v52 + v99) = k;
                int v51 = k + 2;
              }
              if (v50 <= v51) {
                goto LABEL_101;
              }
              if ((v50 - v51) <= 4) {
                goto LABEL_91;
              }
            }
            long long v68 = *v54;
            long long v67 = v54[1];
            long long v69 = v63[1];
            *int32x4_t v54 = *v63;
            v54[1] = v69;
            long long *v63 = v68;
            v63[1] = v67;
            uint64_t v64 = *v65;
            unsigned int v59 = *(_DWORD *)(*v65 + 96);
            goto LABEL_65;
          }
LABEL_91:
          uint64_t v101 = v51;
          int v102 = v51 + 1;
          uint64_t v103 = v31 + 56 + 32 * v51;
          do
          {
            uint64_t v104 = 0;
            uint64_t v105 = v101++;
            uint64_t v106 = v103;
            int v107 = v105;
            do
            {
              uint64_t v108 = *(void *)(v31 + 32 * v107 + 24);
              unsigned int v109 = *(_DWORD *)(*(void *)v106 + 96);
              unsigned int v110 = *(_DWORD *)(v108 + 96);
              if (v109 < v110 || v109 == v110 && *(_DWORD *)(*(void *)v106 + 100) < *(_DWORD *)(v108 + 100)) {
                int v107 = v102 + v104;
              }
              ++v104;
              v106 += 32;
            }
            while (v105 + v104 < v50);
            if (v107 != v105)
            {
              float32x4_t v111 = (long long *)(v31 + 32 * v107);
              float32x4_t v112 = (long long *)(v31 + 32 * v105);
              long long v114 = *v111;
              long long v113 = v111[1];
              long long v115 = v112[1];
              *float32x4_t v111 = *v112;
              v111[1] = v115;
              *float32x4_t v112 = v114;
              v112[1] = v113;
            }
            ++v102;
            v103 += 32;
          }
          while (v101 != v50);
        }
LABEL_101:
        int v116 = v348;
        if (!v348) {
          break;
        }
        LODWORD(v348) = v348 - 1;
        int v50 = *((_DWORD *)v52 + (v116 - 1));
        LODWORD(v348) = v116 - 2;
        int v51 = *((_DWORD *)v52 + (v116 - 2));
      }
      if (v350) {
        BOOL v117 = v52 == 0;
      }
      else {
        BOOL v117 = 1;
      }
      if (!v117) {
        (*(void (**)(uint64_t, long long *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v52);
      }
    }
    float32x4_t v16 = v342;
  }
  float32x4_t v118 = (uint64_t *)*((void *)v16 + 6);
  *((_DWORD *)v118 + 4) = v33;
  uint64_t v119 = *((void *)v16 + 5);
  uint64_t v120 = *((unsigned int *)v16 + 42);
  int32x4_t v335 = (void *)(*(void *)(v119 + 544) + 32 * v120);
  unsigned int v339 = *((_DWORD *)v118 + 2);
  unsigned int v121 = v339 + 255;
  if (v339 + 255 >= 0x100)
  {
    int v326 = 0;
    int v122 = 0;
    uint64_t v123 = *v118;
    uint64_t v321 = *(void *)(v119 + 560) + 112 * v120;
    int v124 = *(_DWORD *)(v119 + 88);
    uint64_t v320 = *(void *)(v123 + 11968);
    uint64_t v319 = *(void *)(v123 + 12008);
    uint64_t v318 = v123 + 12240;
    uint64_t v317 = v123 + 12244;
    unsigned int v125 = v121 >> 8;
    uint64_t v126 = *((void *)v342 + 3);
    unsigned int v324 = v339;
    unsigned int v127 = v121 >> 8;
    unsigned int v316 = v121 >> 8;
    uint64_t v328 = v126;
    uint64_t v128 = *((void *)v342 + 7);
    do
    {
      unsigned int v322 = v127;
      int v323 = v122;
      if (v127 >= 0x40uLL) {
        uint64_t v129 = 64;
      }
      else {
        uint64_t v129 = v127;
      }
      if (v125 - v122 >= 0x40) {
        int v130 = 64;
      }
      else {
        int v130 = v125 - v122;
      }
      uint64_t v131 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(v119 + 744), 136 * v130, 0x10u);
      int32x4_t v132 = v335;
      unsigned int v133 = v339;
      uint64_t v134 = v320;
      uint64_t v135 = v318;
      if (v130)
      {
        uint64_t v136 = 0;
        uint64_t v330 = 136 * v129;
        uint64_t v332 = v131;
        int v137 = v326;
        unsigned int v138 = v324;
        do
        {
          unsigned int v344 = v138 - 256;
          if (v138 >= 0x100) {
            unsigned int v138 = 256;
          }
          uint64_t v139 = v131 + v136;
          uint64_t v140 = *(void *)(v119 + 768);
          *(void *)(v139 + 16) = 0;
          *(void *)(v139 + 24) = 0;
          *(_DWORD *)(v139 + 32) = 0;
          *(void *)uint64_t v139 = &unk_26E724560;
          *(void *)(v139 + 8) = v140;
          *(void *)(v139 + 40) = v119;
          *(void *)(v139 + 48) = v134;
          *(void *)(v139 + 56) = v128;
          *(void *)(v139 + 64) = v319;
          *(void *)(v139 + 72) = v132;
          *(void *)(v139 + 80) = v321;
          *(_DWORD *)(v139 + 88) = v124;
          *(_DWORD *)(v139 + 92) = v133;
          *(void *)(v139 + 96) = v135;
          *(void *)(v139 + 104) = v317;
          *(_DWORD *)(v139 + 112) = v137;
          *(_DWORD *)(v139 + 116) = v138;
          *(void *)(v139 + 120) = *(void *)(v119 + 104);
          *(_DWORD *)(v139 + 128) = *(_DWORD *)(v119 + 112);
          *(_DWORD *)(v139 + 32) = 1;
          *(void *)(v139 + 24) = v126;
          int32x4_t v141 = *(void (**)(uint64_t))(*(void *)v126 + 32);
          uint64_t v142 = v126;
          uint64_t v143 = v134;
          uint64_t v144 = v135;
          v141(v142);
          *(void *)(v139 + 16) = *(void *)(*(void *)(v139 + 24) + 16);
          (*(void (**)(uint64_t))(*(void *)v139 + 40))(v139);
          uint64_t v135 = v144;
          uint64_t v134 = v143;
          int32x4_t v132 = v335;
          unsigned int v133 = v339;
          uint64_t v126 = v328;
          uint64_t v131 = v332;
          v136 += 136;
          v137 += 256;
          unsigned int v138 = v344;
        }
        while (v330 != v136);
      }
      int v122 = v323 + 64;
      unsigned int v127 = v322 - 64;
      v324 -= 0x4000;
      v326 += 0x4000;
      unsigned int v125 = v316;
    }
    while (v323 + 64 < v316);
  }
  bzero(v335, 32 * v339);
  int32x4_t v145 = v342;
  uint64_t v146 = **((void **)v342 + 6);
  uint64_t v147 = *(void *)(v146 + 12264);
  uint64_t v325 = v146;
  uint64_t v329 = *((unsigned int *)v342 + 24);
  if (v329)
  {
    uint64_t v148 = 0;
    uint64_t v327 = *((void *)v342 + 11);
    uint64_t v149 = *((void *)v342 + 22);
    uint64_t v345 = v149;
    while (1)
    {
      uint64_t v331 = v148;
      for (unsigned int n = *(_DWORD *)(*(void *)(v149 + 344) + 44 * *(unsigned int *)(v327 + 4 * v148) + 24);
            n != -1;
            unsigned int n = *(_DWORD *)(v152 + 16 * (n % v151) + 8))
      {
        unsigned int v151 = *(_DWORD *)(v149 + 304);
        uint64_t v152 = *(void *)(*(void *)(v149 + 280) + 8 * (n / v151));
        uint64_t v154 = *((void *)v145 + 22);
        uint64_t v153 = *((void *)v145 + 23);
        uint64_t v155 = *(void *)(*(void *)(*(void *)(v154 + 176) + 8 * (n / *(_DWORD *)(v154 + 200)))
                         + 8 * (n % *(_DWORD *)(v154 + 200)));
        uint64_t v156 = *((void *)v145 + 5);
        int v157 = *((_DWORD *)v145 + 42);
        unsigned int v158 = 2 * n;
        unint64_t v159 = *(unsigned int *)(*(void *)(**(void **)(v154 + 832)
                                           + 8 * (v158 / *(_DWORD *)(*(void *)(v154 + 832) + 24)))
                               + 4 * (v158 % *(_DWORD *)(*(void *)(v154 + 832) + 24)));
        if (v159 >= 0xFFFFFF80)
        {
          *(void *)uint64_t v147 = v156 + 256;
          *(_DWORD *)(v147 + 20) = 0;
LABEL_136:
          *(_WORD *)(v147 + 16) = -1;
          goto LABEL_137;
        }
        uint64_t v160 = *(void *)(v154 + 248) + 32 * (v159 >> 7);
        if (*(unsigned char *)(v160 + 5) != 1)
        {
          uint64_t v163 = *(unsigned int *)(*(void *)(v154 + 264) + 4 * (v159 >> 7));
          if ((*(unsigned char *)(v160 + 4) & 4) == 0) {
            LODWORD(v163) = *(_DWORD *)(v153 + 4 * v163) + v157;
          }
          *(void *)uint64_t v147 = *(void *)(v156 + 544) + 32 * v163;
          *(_DWORD *)(v147 + 20) = v163 + 1;
          goto LABEL_136;
        }
        int v333 = *((_DWORD *)v145 + 42);
        uint64_t v336 = *((void *)v145 + 23);
        uint64_t v340 = *(void *)(*(void *)(v149 + 280) + 8 * (n / v151));
        uint64_t v161 = *(void *)(v160 + 24);
        *(void *)&long long v352 = 0;
        v347[0] = 0;
        unsigned int v162 = (v159 >> 1) & 0x3F;
        (*(void (**)(uint64_t, void, long long *, unsigned char *))(*(void *)v161 + 376))(v161, v162, &v352, v347);
        if (v347[0] != 2)
        {
          uint64_t v161 = v156 + 256;
          *(_DWORD *)(v147 + 20) = 0;
          LOWORD(v162) = -1;
        }
        *(void *)uint64_t v147 = v161;
        *(_WORD *)(v147 + 16) = v162;
        int32x4_t v145 = v342;
        uint64_t v149 = v345;
        uint64_t v153 = v336;
        uint64_t v152 = v340;
        int v157 = v333;
LABEL_137:
        unint64_t v164 = *(unsigned int *)(*(void *)(**(void **)(v154 + 832)
                                           + 8 * ((v158 | 1) / *(_DWORD *)(*(void *)(v154 + 832) + 24)))
                               + 4 * ((v158 | 1) % *(_DWORD *)(*(void *)(v154 + 832) + 24)));
        if (v164 >= 0xFFFFFF80)
        {
          *(void *)(v147 + 8) = v156 + 256;
          *(_DWORD *)(v147 + 24) = 0;
LABEL_146:
          *(_WORD *)(v147 + 18) = -1;
          goto LABEL_147;
        }
        uint64_t v165 = *(void *)(v154 + 248) + 32 * (v164 >> 7);
        if (*(unsigned char *)(v165 + 5) != 1)
        {
          uint64_t v169 = *(unsigned int *)(*(void *)(v154 + 264) + 4 * (v164 >> 7));
          if ((*(unsigned char *)(v165 + 4) & 4) == 0) {
            LODWORD(v169) = *(_DWORD *)(v153 + 4 * v169) + v157;
          }
          *(void *)(v147 + 8) = *(void *)(v156 + 544) + 32 * v169;
          *(_DWORD *)(v147 + 24) = v169 + 1;
          goto LABEL_146;
        }
        uint64_t v166 = v152;
        uint64_t v167 = *(void *)(v165 + 24);
        *(void *)&long long v352 = 0;
        v347[0] = 0;
        unsigned int v168 = (v164 >> 1) & 0x3F;
        (*(void (**)(uint64_t, void, long long *, unsigned char *))(*(void *)v167 + 376))(v167, v168, &v352, v347);
        if (v347[0] != 2)
        {
          uint64_t v167 = v156 + 256;
          *(_DWORD *)(v147 + 24) = 0;
          LOWORD(v168) = -1;
        }
        int32x4_t v145 = v342;
        uint64_t v149 = v345;
        uint64_t v152 = v166;
        *(void *)(v147 + 8) = v167;
        *(_WORD *)(v147 + 18) = v168;
LABEL_147:
        *(void *)(v147 + 32) = v155;
        *(_WORD *)(v147 + 30) = 2;
        v147 += 48;
      }
      uint64_t v148 = v331 + 1;
      if (v331 + 1 == v329)
      {
        uint64_t v146 = v325;
        uint64_t v170 = *(void *)(v325 + 12264);
        goto LABEL_151;
      }
    }
  }
  uint64_t v170 = *(void *)(v146 + 12264);
LABEL_151:
  physx::shdfnd::sort<physx::PxSolverConstraintDesc,physx::Dy::ConstraintLess,physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>(v170, -1431655765 * ((unint64_t)(v147 - v170) >> 4), (uint64_t)v347, (uint64_t)&v352, 32);
  *(_DWORD *)(v146 + 12120) = 0;
  uint64_t v171 = *((void *)v342 + 6);
  unsigned int v172 = *(_DWORD *)(v171 + 16);
  if ((*(_DWORD *)(v146 + 12124) & 0x7FFFFFFFu) < v172)
  {
    physx::shdfnd::Array<physx::PxsIndexedContactManager const*,physx::shdfnd::ReflectionAllocator<physx::PxsIndexedContactManager const*>>::recreate(v146 + 12112, v172);
    uint64_t v171 = *((void *)v342 + 6);
    unsigned int v172 = *(_DWORD *)(v171 + 16);
  }
  *(_DWORD *)(v146 + 12120) = v172;
  float32x4_t v173 = (uint64_t *)(v146 + 12128);
  *(_DWORD *)(v146 + 12136) = 0;
  if ((*(_DWORD *)(v146 + 12140) & 0x7FFFFFFFu) < v172)
  {
    physx::shdfnd::Array<physx::PxsIndexedContactManager const*,physx::shdfnd::ReflectionAllocator<physx::PxsIndexedContactManager const*>>::recreate(v146 + 12128, v172);
    uint64_t v171 = *((void *)v342 + 6);
    unsigned int v172 = *(_DWORD *)(v171 + 16);
  }
  *(_DWORD *)(v146 + 12136) = v172;
  float32x2x2_t v174 = *(uint64_t **)(v146 + 12112);
  *(_DWORD *)(v146 + 12104) = 0;
  if (!v172)
  {
    float32x4_t v184 = v342;
    goto LABEL_291;
  }
  float32x2x2_t v175 = (void **)(v146 + 12144);
  *(_DWORD *)(v146 + 12152) = 0;
  v351[0] = *(_DWORD *)(*((void *)v342 + 5) + 680);
  v351[1] = 0;
  unsigned int v176 = v351[0] + *(_DWORD *)(v171 + 8) + 1;
  if ((*(_DWORD *)(v146 + 12156) & 0x7FFFFFFFu) < v176) {
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(v146 + 12144, v176);
  }
  *(_DWORD *)(v146 + 12152) = v176;
  size_t v177 = 4 * v176;
  bzero(*(void **)(v146 + 12144), v177);
  uint64_t v178 = *((void *)v342 + 6);
  unint64_t v179 = *(unsigned int *)(v178 + 16);
  if (v179)
  {
    unint64_t v180 = 0;
    float32x4_t v181 = (unsigned char *)(*((void *)v342 + 10) + 17);
    do
    {
      uint64_t v182 = *(v181 - 1);
      if (v182 != 2 && *v181 != 2)
      {
        unsigned int v183 = v351[v182] + *(_DWORD *)(v181 - 17);
        ++*((_DWORD *)*v175 + v183);
        unint64_t v179 = *(unsigned int *)(v178 + 16);
      }
      ++v180;
      v181 += 32;
    }
    while (v180 < v179);
  }
  else
  {
    unint64_t v179 = 0;
  }
  uint64_t v185 = *(unsigned int *)(v146 + 12152);
  if (v185)
  {
    unsigned int v186 = 0;
    float32x4_t v187 = *v175;
    uint64_t v188 = v185 - 1;
    do
    {
      int v189 = v187[v188];
      v187[v188] = v186;
      v186 += v189;
    }
    while ((unint64_t)v188--);
    if (!*(_DWORD *)(v178 + 16)) {
      goto LABEL_179;
    }
  }
  else
  {
    unsigned int v186 = 0;
    if (!v179) {
      goto LABEL_179;
    }
  }
  uint64_t v191 = 0;
  unint64_t v192 = 0;
  do
  {
    uint64_t v193 = *((void *)v342 + 10) + v191;
    uint64_t v194 = *(unsigned __int8 *)(v193 + 16);
    if (v194 == 2 || *(unsigned char *)(v193 + 17) == 2)
    {
      unsigned int v195 = v186++;
    }
    else
    {
      unsigned int v196 = v351[v194] + *(_DWORD *)v193;
      unsigned int v195 = *((_DWORD *)*v175 + v196);
      *((_DWORD *)*v175 + v196) = v195 + 1;
    }
    *(void *)(*v173 + 8 * v195) = v193;
    ++v192;
    v191 += 32;
  }
  while (v192 < *(unsigned int *)(*((void *)v342 + 6) + 16));
LABEL_179:
  bzero(*v175, v177);
  uint64_t v197 = *((void *)v342 + 6);
  unint64_t v198 = *(unsigned int *)(v197 + 16);
  if (v198)
  {
    unint64_t v199 = 0;
    uint64_t v200 = *v173;
    uint64_t v201 = 16;
    do
    {
      uint64_t v202 = *(void *)(v200 + 8 * v199);
      uint64_t v203 = *(unsigned __int8 *)(v202 + 17);
      if (v203 != 2 && *(unsigned char *)(*((void *)v342 + 10) + v201) != 2)
      {
        if (v203 == 3) {
          unsigned int v204 = 0;
        }
        else {
          unsigned int v204 = v351[v203] + *(_DWORD *)(v202 + 8);
        }
        ++*((_DWORD *)*v175 + v204);
        unint64_t v198 = *(unsigned int *)(v197 + 16);
      }
      ++v199;
      v201 += 32;
    }
    while (v199 < v198);
  }
  else
  {
    unint64_t v198 = 0;
  }
  uint64_t v205 = *(unsigned int *)(v146 + 12152);
  if (v205)
  {
    int v206 = 0;
    float32x4_t v207 = *v175;
    uint64_t v208 = v205 - 1;
    do
    {
      int v209 = v207[v208];
      v207[v208] = v206;
      v206 += v209;
    }
    while ((unint64_t)v208--);
    unint64_t v198 = *(unsigned int *)(v197 + 16);
  }
  else
  {
    int v206 = 0;
  }
  int v211 = v206;
  if (v198)
  {
    unint64_t v212 = 0;
    uint64_t v213 = 16;
    int v211 = v206;
    do
    {
      uint64_t v214 = *(void *)(*v173 + 8 * v212);
      uint64_t v215 = *(unsigned __int8 *)(v214 + 17);
      if (v215 == 2 || *(unsigned char *)(*((void *)v342 + 10) + v213) == 2)
      {
        int v216 = v211++;
      }
      else
      {
        if (v215 == 3) {
          unsigned int v217 = 0;
        }
        else {
          unsigned int v217 = v351[v215] + *(_DWORD *)(v214 + 8);
        }
        int v216 = *((_DWORD *)*v175 + v217);
        *((_DWORD *)*v175 + v217) = v216 + 1;
      }
      v174[v216] = v214;
      ++v212;
      v213 += 32;
    }
    while (v212 < *(unsigned int *)(*((void *)v342 + 6) + 16));
  }
  uint64_t v337 = v146 + 12096;
  uint64_t v348 = 0x2000000000;
  uint64_t v349 = &v352;
  char v350 = 0;
  int v218 = v211 + ~v206;
  if (v218 >= 1)
  {
    int v219 = 0;
    long long v358 = 0u;
    long long v359 = 0u;
    float32x4_t v220 = &v174[v206];
    long long v356 = 0u;
    long long v357 = 0u;
    long long v354 = 0u;
    long long v355 = 0u;
    long long v352 = 0u;
    long long v353 = 0u;
    float32x4_t v221 = &v352;
    while (1)
    {
      if (v218 <= v219) {
        goto LABEL_240;
      }
      if ((v218 - v219) <= 4)
      {
        uint64_t v243 = v219;
        int v244 = v219 + 1;
        uint64_t v245 = (uint64_t)&v220[v219 + 1];
        do
        {
          uint64_t v246 = 0;
          uint64_t v247 = v243++;
          int v248 = v247;
          do
          {
            if (*(_DWORD *)(*(void *)(*(void *)(v245 + 8 * v246) + 24) + 88) < *(_DWORD *)(*(void *)(v220[v248] + 24)
                                                                                                  + 88))
              int v248 = v244 + v246;
            ++v246;
          }
          while (v247 + v246 < v218);
          if (v248 != v247)
          {
            uint64_t v249 = v220[v248];
            v220[v248] = v220[v247];
            v220[v247] = v249;
          }
          ++v244;
          v245 += 8;
        }
        while (v243 != v218);
LABEL_240:
        int v250 = v348;
        if (!v348)
        {
          if (v350) {
            BOOL v251 = v221 == 0;
          }
          else {
            BOOL v251 = 1;
          }
          if (!v251) {
            (*(void (**)(uint64_t, long long *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v221);
          }
          break;
        }
        LODWORD(v348) = v348 - 1;
        int v218 = *((_DWORD *)v221 + (v250 - 1));
        LODWORD(v348) = v250 - 2;
        int v219 = *((_DWORD *)v221 + (v250 - 2));
      }
      else
      {
        int v222 = v219 + v218;
        if (v219 + v218 < 0 != __OFADD__(v219, v218)) {
          ++v222;
        }
        uint64_t v223 = (uint64_t)v222 >> 1;
        uint64_t v224 = v220[v222 >> 1];
        uint64_t v225 = v220[v219];
        unsigned int v226 = *(_DWORD *)(*(void *)(v225 + 24) + 88);
        if (*(_DWORD *)(*(void *)(v224 + 24) + 88) < v226)
        {
          v220[v219] = v224;
          v220[v223] = v225;
          uint64_t v224 = v225;
          uint64_t v225 = v220[v219];
          unsigned int v226 = *(_DWORD *)(*(void *)(v225 + 24) + 88);
        }
        uint64_t v227 = v220[v218];
        unsigned int v228 = *(_DWORD *)(*(void *)(v227 + 24) + 88);
        if (v228 >= v226)
        {
          uint64_t v225 = v220[v218];
        }
        else
        {
          v220[v219] = v227;
          v220[v218] = v225;
          unsigned int v228 = *(_DWORD *)(*(void *)(v225 + 24) + 88);
          uint64_t v224 = v220[v223];
        }
        if (v228 < *(_DWORD *)(*(void *)(v224 + 24) + 88))
        {
          v220[v223] = v225;
          v220[v218] = v224;
          uint64_t v224 = v220[v223];
        }
        uint64_t v229 = v218 - 1;
        v220[v223] = v220[v229];
        v220[v229] = v224;
        int v230 = v219;
        int v231 = v218 - 1;
        while (1)
        {
          unsigned int v232 = *(_DWORD *)(*(void *)(v224 + 24) + 88);
          float32x4_t v233 = &v220[v230];
          do
          {
            uint64_t v235 = v233[1];
            ++v233;
            uint64_t v234 = v235;
            ++v230;
          }
          while (*(_DWORD *)(*(void *)(v235 + 24) + 88) < v232);
          float32x4_t v236 = &v220[v231];
          do
          {
            uint64_t v238 = *--v236;
            uint64_t v237 = v238;
            --v231;
          }
          while (v232 < *(_DWORD *)(*(void *)(v238 + 24) + 88));
          if (v230 >= v231) {
            break;
          }
          *float32x4_t v233 = v237;
          *float32x4_t v236 = v234;
          uint64_t v224 = v220[v229];
        }
        *float32x4_t v233 = v224;
        v220[v229] = v234;
        unsigned int v239 = v348;
        unsigned int v240 = HIDWORD(v348) - 1;
        if (v230 - v219 >= v218 - v230)
        {
          if (v348 >= v240)
          {
            physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::PxsIndexedContactManager const*>>::grow((uint64_t)v347);
            unsigned int v239 = v348;
            float32x4_t v221 = v349;
          }
          LODWORD(v348) = v239 + 1;
          *((_DWORD *)v221 + v239) = v230 + 1;
          uint64_t v242 = v348;
          LODWORD(v348) = v348 + 1;
          *((_DWORD *)v221 + v242) = v218;
          int v218 = v230 - 1;
        }
        else
        {
          if (v348 >= v240)
          {
            physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::PxsIndexedContactManager const*>>::grow((uint64_t)v347);
            unsigned int v239 = v348;
            float32x4_t v221 = v349;
          }
          LODWORD(v348) = v239 + 1;
          *((_DWORD *)v221 + v239) = v219;
          uint64_t v241 = v348;
          LODWORD(v348) = v348 + 1;
          *((_DWORD *)v221 + v241) = v230 - 1;
          int v219 = v230 + 1;
        }
      }
    }
  }
  *(void *)(v146 + 12272) = v147;
  if ((*(_DWORD *)(v146 + 12108) & 0x7FFFFC00) == 0) {
    physx::shdfnd::Array<physx::Dy::CompoundContactManager,physx::shdfnd::ReflectionAllocator<physx::Dy::CompoundContactManager>>::recreate(v337, 0x400u);
  }
  *(_DWORD *)(v146 + 12104) = 0;
  physx::Dy::DynamicsContext::setDescFromIndices(*((void *)v342 + 5), v147, *v174, *((_DWORD *)v342 + 42));
  float32x4_t v184 = v342;
  *(void *)(v147 + 32) = *(void *)(*v174 + 24);
  *(_WORD *)(v147 + 30) = 1;
  uint64_t v346 = v174;
  unsigned int v252 = *(_DWORD *)(*(void *)(*v174 + 24) + 108);
  uint64_t v253 = *(void *)(*((void *)v184 + 25) + 32)
       + 32 * (*(_DWORD *)(*((void *)v184 + 25) + 4 * (v252 & 7)) + (v252 >> 3));
  int v254 = *(unsigned __int8 *)(v253 + 24);
  LODWORD(v255) = *(_DWORD *)(*((void *)v342 + 6) + 16);
  if (v255 >= 2)
  {
    unsigned int v341 = 0;
    int v256 = 0;
    unint64_t v257 = 1;
    float32x4_t v258 = (_OWORD *)v147;
    do
    {
      uint64_t v259 = v253;
      float32x4_t v260 = (_OWORD *)(v147 + 48);
      physx::Dy::DynamicsContext::setDescFromIndices(*((void *)v184 + 5), v147 + 48, v346[v257], *((_DWORD *)v184 + 42));
      float32x4_t v184 = v342;
      uint64_t v261 = *(void *)(v346[v257] + 24);
      uint64_t v262 = *((void *)v342 + 25);
      uint64_t v263 = *(void *)(v262 + 32);
      uint64_t v264 = (*(_DWORD *)(v262 + 4 * (*(_DWORD *)(v261 + 108) & 7)) + (*(_DWORD *)(v261 + 108) >> 3));
      uint64_t v253 = v263 + 32 * v264;
      *(void *)(v147 + 80) = v261;
      *(_WORD *)(v147 + 78) = 1;
      if (!v254)
      {
        long long v265 = *v260;
        long long v266 = *(_OWORD *)(v147 + 80);
        v258[1] = *(_OWORD *)(v147 + 64);
        v258[2] = v266;
        *float32x4_t v258 = v265;
        uint64_t v259 = v263 + 32 * v264;
        int v256 = v257;
      }
      if (*(void *)v258 == *(void *)v260
        && *((void *)v258 + 1) == *(void *)(v147 + 56)
        && *((__int16 *)v258 + 8) == -1
        && *((__int16 *)v258 + 9) == -1
        && v254 + *(unsigned __int8 *)(v263 + 32 * v264 + 24) <= 0x40
        && (*(unsigned char *)(v261 + 16) & 1) == 0)
      {
        float32x4_t v260 = v258;
        uint64_t v253 = v259;
      }
      else if (v254)
      {
        if ((v257 - v256) <= 1)
        {
          int v254 = 0;
          int v256 = v257;
          v147 += 48;
        }
        else
        {
          unsigned int v267 = *(_DWORD *)(v325 + 12108) & 0x7FFFFFFF;
          unsigned int v268 = *(_DWORD *)(v325 + 12104);
          if (v267 <= v268)
          {
            if (v267) {
              unsigned int v269 = 2 * *(_DWORD *)(v325 + 12108);
            }
            else {
              unsigned int v269 = 1;
            }
            physx::shdfnd::Array<physx::Dy::CompoundContactManager,physx::shdfnd::ReflectionAllocator<physx::Dy::CompoundContactManager>>::recreate(v337, v269);
            float32x4_t v184 = v342;
            unsigned int v268 = *(_DWORD *)(v325 + 12104);
          }
          ++v341;
          uint64_t v270 = *(void *)(v325 + 12096);
          *(_DWORD *)(v325 + 12104) = v268 + 1;
          uint64_t v271 = v270 + ((unint64_t)v268 << 6);
          *(_DWORD *)uint64_t v271 = v256;
          *(_WORD *)(v271 + 4) = v257 - v256;
          *(_WORD *)(v271 + 6) = v254;
          *(void *)(v271 + 8) = *(void *)(v346[v256] + 24) + 32;
          *(void *)(v271 + 16) = v259;
          *(_OWORD *)(v271 + 24) = *(_OWORD *)v259;
          *(_WORD *)(v271 + 40) = *(_WORD *)(v259 + 24);
          *(void *)(v271 + 48) = *(void *)(v259 + 16);
          *(unsigned char *)(v271 + 42) = *(unsigned char *)(v259 + 26);
          int v256 = v257;
          v147 += 48;
          int v254 = 0;
        }
      }
      else
      {
        long long v272 = *v260;
        long long v273 = *(_OWORD *)(v147 + 80);
        v258[1] = *(_OWORD *)(v147 + 64);
        v258[2] = v273;
        *float32x4_t v258 = v272;
        float32x4_t v260 = v258;
        int v256 = v257;
      }
      v254 += *(unsigned __int8 *)(v263 + 32 * v264 + 24);
      ++v257;
      unint64_t v255 = *(unsigned int *)(*((void *)v184 + 6) + 16);
      float32x4_t v258 = v260;
    }
    while (v257 < v255);
    float32x4_t v274 = v315;
    unsigned int v275 = v341;
    if (!v254) {
      goto LABEL_282;
    }
    goto LABEL_274;
  }
  int v256 = 0;
  unsigned int v275 = 0;
  float32x4_t v274 = v315;
  if (*(unsigned char *)(v253 + 24))
  {
LABEL_274:
    __int16 v276 = v255 - v256;
    if ((v255 - v256) >= 2)
    {
      ++v275;
      unsigned int v277 = *(_DWORD *)(v325 + 12108) & 0x7FFFFFFF;
      unsigned int v278 = *(_DWORD *)(v325 + 12104);
      if (v277 <= v278)
      {
        if (v277) {
          unsigned int v279 = 2 * *(_DWORD *)(v325 + 12108);
        }
        else {
          unsigned int v279 = 1;
        }
        physx::shdfnd::Array<physx::Dy::CompoundContactManager,physx::shdfnd::ReflectionAllocator<physx::Dy::CompoundContactManager>>::recreate(v337, v279);
        float32x4_t v184 = v342;
        unsigned int v278 = *(_DWORD *)(v325 + 12104);
      }
      uint64_t v280 = *(void *)(v325 + 12096);
      *(_DWORD *)(v325 + 12104) = v278 + 1;
      uint64_t v281 = v280 + ((unint64_t)v278 << 6);
      *(_DWORD *)uint64_t v281 = v256;
      *(_WORD *)(v281 + 4) = v276;
      *(_WORD *)(v281 + 6) = v254;
      *(void *)(v281 + 8) = *(void *)(v346[v256] + 24) + 32;
      *(void *)(v281 + 16) = v253;
      *(_OWORD *)(v281 + 24) = *(_OWORD *)v253;
      *(_WORD *)(v281 + 40) = *(_WORD *)(v253 + 24);
      *(void *)(v281 + 48) = *(void *)(v253 + 16);
      *(unsigned char *)(v281 + 42) = *(unsigned char *)(v253 + 26);
    }
    v147 += 48;
  }
LABEL_282:
  uint64_t v146 = v325;
  if (v275)
  {
    unsigned int v282 = 0;
    unsigned int v283 = v275;
    do
    {
      float32x4_t v284 = v184;
      uint64_t v285 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(*((void *)v184 + 5) + 744), 200, 0x10u);
      uint64_t v286 = v285;
      uint64_t v287 = *((void *)v284 + 5);
      int v288 = *((_DWORD *)v284 + 42);
      if (v283 >= 8) {
        int v289 = 8;
      }
      else {
        int v289 = v283;
      }
      uint64_t v290 = *(void *)(v287 + 768);
      long long v291 = *((_OWORD *)v284 + 12);
      *(void *)(v285 + 16) = 0;
      *(void *)(v285 + 24) = 0;
      *(_DWORD *)(v285 + 32) = 0;
      float32x4_t v292 = (void (**)(void))&unk_26E724770;
      *(void *)uint64_t v285 = &unk_26E724770;
      *(void *)(v285 + 8) = v290;
      *(void *)(v285 + 40) = v287;
      *(void *)(v285 + 48) = v325;
      long long v294 = v274[5];
      long long v293 = v274[6];
      long long v295 = v274[4];
      *(_OWORD *)(v285 + 104) = v274[3];
      *(_OWORD *)(v285 + 120) = v295;
      *(_OWORD *)(v285 + 136) = v294;
      *(_OWORD *)(v285 + 152) = v293;
      long long v297 = v274[1];
      long long v296 = v274[2];
      *(_OWORD *)(v285 + 56) = *v274;
      *(_OWORD *)(v285 + 72) = v297;
      *(_OWORD *)(v285 + 88) = v296;
      *(_DWORD *)(v285 + 168) = v288;
      *(_DWORD *)(v285 + 172) = v282;
      *(_DWORD *)(v285 + 176) = v289;
      *(_OWORD *)(v285 + 184) = v291;
      uint64_t v298 = *((void *)v284 + 3);
      *(_DWORD *)(v286 + 32) = 1;
      *(void *)(v286 + 24) = v298;
      if (v298)
      {
        (*(void (**)(uint64_t))(*(void *)v298 + 32))(v298);
        *(void *)(v286 + 16) = *(void *)(*(void *)(v286 + 24) + 16);
        float32x4_t v292 = *(void (***)(void))v286;
      }
      v292[5](v286);
      v282 += 8;
      v283 -= 8;
      float32x4_t v184 = v342;
    }
    while (v282 < v275);
    uint64_t v146 = v325;
  }
LABEL_291:
  *(_DWORD *)(v146 + 12024) = -1431655765 * ((unint64_t)(v147 - *(void *)(v146 + 12016)) >> 4);
  *(void *)(v146 + 12264) = v147;
  float32x4_t v299 = (_DWORD *)*((void *)v184 + 6);
  if ((v299[3] & 0x7FFFFFFF) != 0)
  {
    uint64_t v300 = 0;
    int v301 = 0;
    int v302 = 0;
    unint64_t v303 = 0;
    uint64_t v304 = *(void *)v299;
    uint64_t v305 = *(void *)(*(void *)v299 + 12288);
    do
    {
      float32x4_t v306 = v184;
      uint64_t v307 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(*((void *)v184 + 5) + 744), 88, 0x10u);
      uint64_t v308 = v307;
      uint64_t v309 = *((void *)v306 + 8) + v300;
      uint64_t v310 = *((void *)v306 + 5);
      unsigned int v311 = v301 + (*(_DWORD *)(*((void *)v306 + 6) + 12) & 0x7FFFFFFF);
      if (v311 >= 0x20) {
        unsigned int v311 = 32;
      }
      uint64_t v312 = *(void *)(v310 + 768);
      *(void *)(v307 + 16) = 0;
      *(void *)(v307 + 24) = 0;
      *(_DWORD *)(v307 + 32) = 0;
      float32x4_t v313 = (void (**)(void))&unk_26E7247E0;
      *(void *)uint64_t v307 = &unk_26E7247E0;
      *(void *)(v307 + 8) = v312;
      *(void *)(v307 + 40) = v304;
      *(void *)(v307 + 48) = v309;
      *(void *)(v307 + 56) = v305;
      *(_DWORD *)(v307 + 64) = v311;
      *(void *)(v307 + 72) = v310;
      *(_DWORD *)(v307 + 80) = v302;
      uint64_t v314 = *((void *)v306 + 3);
      *(_DWORD *)(v308 + 32) = 1;
      *(void *)(v308 + 24) = v314;
      if (v314)
      {
        (*(void (**)(uint64_t))(*(void *)v314 + 32))(v314);
        *(void *)(v308 + 16) = *(void *)(*(void *)(v308 + 24) + 16);
        float32x4_t v313 = *(void (***)(void))v308;
      }
      v313[5](v308);
      v303 += 32;
      float32x4_t v184 = v342;
      v302 += 2048;
      v301 -= 32;
      v305 += 3072;
      v300 += 256;
    }
    while (v303 < (*(_DWORD *)(*((void *)v342 + 6) + 12) & 0x7FFFFFFFu));
  }
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::PxsIndexedContactManager>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::PxsIndexedContactManager>::allocate(a1, 4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  float result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    float result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::PxsIndexedContactManager>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsIndexedContactManager>::getName() [T = physx::P"
  }
         "xsIndexedContactManager]";
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

void physx::shdfnd::sort<physx::PxSolverConstraintDesc,physx::Dy::ConstraintLess,physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v85 = *MEMORY[0x263EF8340];
  size_t v8 = (4 * a5);
  BOOL v84 = v8 > 0x400;
  if (v8 < 0x401)
  {
    MEMORY[0x270FA5388](a1);
    uint64_t v9 = &v78[-((v8 + 15) & 0x1FFFFFFF0)];
    bzero(v9, v8);
  }
  else
  {
    uint64_t v9 = physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)v78, (4 * a5), "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSort.h", 65);
  }
  unsigned int v83 = v9;
  unsigned int v79 = 0;
  int v80 = a5;
  int v81 = v9;
  int v10 = a2 - 1;
  char v82 = 0;
  if (a2 - 1 < 1) {
    goto LABEL_45;
  }
  int v11 = 0;
  for (i = v9; ; int v11 = *((_DWORD *)i + v76 - 2))
  {
    while (1)
    {
      if (v10 <= v11) {
        goto LABEL_38;
      }
      if ((v10 - v11) <= 4) {
        break;
      }
      int v13 = v11 + v10;
      if (v11 + v10 < 0 != __OFADD__(v11, v10)) {
        ++v13;
      }
      uint64_t v14 = (_OWORD *)(a1 + 48 * (v13 >> 1));
      uint64_t v15 = (long long *)(a1 + 48 * v11);
      unsigned int v16 = *(_DWORD *)(*((void *)v15 + 4) + 72);
      if (*(_DWORD *)(*((void *)v14 + 4) + 72) > v16)
      {
        long long v17 = *v15;
        long long v18 = v15[1];
        long long v19 = v15[2];
        long long v21 = v14[1];
        long long v20 = v14[2];
        *uint64_t v15 = *v14;
        v15[1] = v21;
        v15[2] = v20;
        v14[1] = v18;
        v14[2] = v19;
        *uint64_t v14 = v17;
        unsigned int v16 = *(_DWORD *)(*((void *)v15 + 4) + 72);
      }
      unsigned int v22 = (long long *)(a1 + 48 * v10);
      unsigned int v23 = *(_DWORD *)(*((void *)v22 + 4) + 72);
      if (v23 > v16)
      {
        long long v24 = *v15;
        long long v25 = v15[1];
        long long v26 = v15[2];
        long long v28 = v22[1];
        long long v27 = v22[2];
        *uint64_t v15 = *v22;
        v15[1] = v28;
        v15[2] = v27;
        v22[1] = v25;
        v22[2] = v26;
        *unsigned int v22 = v24;
        unsigned int v23 = *(_DWORD *)(*((void *)v22 + 4) + 72);
      }
      if (v23 > *(_DWORD *)(*((void *)v14 + 4) + 72))
      {
        long long v29 = *v14;
        long long v30 = v14[1];
        long long v31 = v14[2];
        long long v33 = v22[1];
        long long v32 = v22[2];
        *uint64_t v14 = *v22;
        v14[1] = v33;
        v14[2] = v32;
        v22[1] = v30;
        v22[2] = v31;
        *unsigned int v22 = v29;
      }
      uint64_t v34 = v10 - 1;
      long long v35 = *v14;
      long long v36 = v14[1];
      uint64_t v37 = (_OWORD *)(a1 + 48 * v34);
      long long v38 = v14[2];
      long long v40 = v37[1];
      long long v39 = v37[2];
      *uint64_t v14 = *v37;
      v14[1] = v40;
      v14[2] = v39;
      v37[1] = v36;
      v37[2] = v38;
      *uint64_t v37 = v35;
      int v41 = v11;
      while (1)
      {
        unsigned int v42 = *(_DWORD *)(*((void *)v37 + 4) + 72);
        uint64_t v43 = (long long *)(a1 + 48 * v41);
        do
        {
          unsigned int v44 = *(_DWORD *)(*((void *)v43 + 10) + 72);
          ++v41;
          v43 += 3;
        }
        while (v44 > v42);
        uint64_t v45 = (_OWORD *)(a1 + 48 * (int)v34);
        do
        {
          unsigned int v46 = *(_DWORD *)(*((void *)v45 - 2) + 72);
          v45 -= 3;
          LODWORD(v34) = v34 - 1;
        }
        while (v42 > v46);
        if (v41 >= (int)v34) {
          break;
        }
        long long v47 = *v43;
        long long v48 = v43[1];
        long long v49 = v43[2];
        long long v51 = v45[1];
        long long v50 = v45[2];
        *uint64_t v43 = *v45;
        v43[1] = v51;
        v43[2] = v50;
        v45[1] = v48;
        v45[2] = v49;
        *uint64_t v45 = v47;
      }
      long long v52 = *v43;
      long long v53 = v43[1];
      long long v54 = v43[2];
      long long v56 = v37[1];
      long long v55 = v37[2];
      *uint64_t v43 = *v37;
      v43[1] = v56;
      v43[2] = v55;
      v37[1] = v53;
      v37[2] = v54;
      *uint64_t v37 = v52;
      unsigned int v57 = v79;
      unsigned int v58 = v80 - 1;
      if (v41 - v11 >= v10 - v41)
      {
        if (v79 >= v58)
        {
          physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>::grow((uint64_t)v78);
          unsigned int v57 = v79;
          uint64_t i = v81;
        }
        unsigned int v79 = v57 + 1;
        *((_DWORD *)i + v57) = v41 + 1;
        uint64_t v60 = v79++;
        *((_DWORD *)i + v60) = v10;
        int v10 = v41 - 1;
      }
      else
      {
        if (v79 >= v58)
        {
          physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>::grow((uint64_t)v78);
          unsigned int v57 = v79;
          uint64_t i = v81;
        }
        unsigned int v79 = v57 + 1;
        *((_DWORD *)i + v57) = v11;
        uint64_t v59 = v79++;
        *((_DWORD *)i + v59) = v41 - 1;
        int v11 = v41 + 1;
      }
    }
    uint64_t v61 = v11;
    int v62 = v11 + 1;
    uint64_t v63 = a1 + 80 + 48 * v11;
    do
    {
      uint64_t v64 = 0;
      uint64_t v65 = v61++;
      unsigned int v66 = (uint64_t *)v63;
      int v67 = v65;
      do
      {
        uint64_t v68 = *v66;
        v66 += 6;
        if (*(_DWORD *)(v68 + 72) > *(_DWORD *)(*(void *)(a1 + 48 * v67 + 32) + 72)) {
          int v67 = v62 + v64;
        }
        ++v64;
      }
      while (v65 + v64 < v10);
      if (v67 != v65)
      {
        long long v69 = (long long *)(a1 + 48 * v67);
        long long v70 = *v69;
        long long v71 = v69[1];
        long long v72 = (long long *)(a1 + 48 * v65);
        long long v73 = v69[2];
        long long v75 = v72[1];
        long long v74 = v72[2];
        *long long v69 = *v72;
        v69[1] = v75;
        v69[2] = v74;
        v72[1] = v71;
        float32x4_t v72[2] = v73;
        *long long v72 = v70;
      }
      ++v62;
      v63 += 48;
    }
    while (v61 != v10);
LABEL_38:
    unsigned int v76 = v79;
    if (!v79) {
      break;
    }
    --v79;
    int v10 = *((_DWORD *)i + v76 - 1);
    unsigned int v79 = v76 - 2;
  }
  if (v82) {
    BOOL v77 = i == 0;
  }
  else {
    BOOL v77 = 1;
  }
  if (!v77) {
    (*(void (**)(uint64_t, void *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, i);
  }
LABEL_45:
  if (v8 >= 0x401) {
    physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v83, v9);
  }
}

uint64_t physx::shdfnd::Array<physx::PxsIndexedContactManager const*,physx::shdfnd::ReflectionAllocator<physx::PxsIndexedContactManager const*>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t result = physx::shdfnd::ReflectionAllocator<physx::PxsIndexedContactManager const*>::allocate(8 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v5 = result;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  uint64_t v7 = *(uint64_t **)a1;
  if (v6)
  {
    unint64_t v8 = result + 8 * v6;
    uint64_t v9 = (void *)result;
    do
    {
      uint64_t v10 = *v7++;
      *v9++ = v10;
    }
    while ((unint64_t)v9 < v8);
    uint64_t v7 = *(uint64_t **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v7) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::PxsIndexedContactManager const*>::allocate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<const physx::PxsIndexedContactManager *>::getName() [T "
    }
           "= const physx::PxsIndexedContactManager *]";
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    unint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v6 + 24) + 16);
    return v8(v6 + 24, v5, v7, a2, a3);
  }
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::PxsIndexedContactManager const*>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::PxsIndexedContactManager const*>::allocate(4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  uint64_t result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Dy::CompoundContactManager,physx::shdfnd::ReflectionAllocator<physx::Dy::CompoundContactManager>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::CompoundContactManager>::getName() [T = phys"
    }
           "x::Dy::CompoundContactManager]";
    else {
      uint64_t v5 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24) + 16))(v4 + 24, (unint64_t)a2 << 6, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (_OWORD *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  unint64_t v8 = *(long long **)v3;
  if (v7)
  {
    unint64_t v9 = (unint64_t)&v6[4 * v7];
    uint64_t v10 = v6;
    do
    {
      long long v11 = *v8;
      long long v12 = v8[1];
      long long v13 = v8[3];
      v10[2] = v8[2];
      v10[3] = v13;
      _OWORD *v10 = v11;
      v10[1] = v12;
      v10 += 4;
      v8 += 4;
    }
    while ((unint64_t)v10 < v9);
    unint64_t v8 = *(long long **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

void physx::Dy::PxsSolverConstraintPostProcessTask::~PxsSolverConstraintPostProcessTask(physx::Dy::PxsSolverConstraintPostProcessTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Dy::PxsSolverConstraintPostProcessTask::getName(physx::Dy::PxsSolverConstraintPostProcessTask *this)
{
  return "PxsDynamics.solverConstraintPostProcess";
}

uint64_t physx::Dy::PxsSolverConstraintPostProcessTask::runInternal(physx::Dy::PxsSolverConstraintPostProcessTask *this)
{
  unint64_t v1 = this;
  uint64_t v243 = *MEMORY[0x263EF8340];
  unsigned int v2 = *((_DWORD *)this + 44) + *((_DWORD *)this + 43);
  uint64_t v3 = *((void *)this + 5);
  unint64_t v4 = (unint64_t)physx::shdfnd::SListImpl::pop(*(physx::shdfnd::SListImpl **)(v3 + 400));
  if (!v4)
  {
    uint64_t v5 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ThreadContext>::getName() [T = physx::Dy::ThreadContext]";
    }
    else {
      uint64_t v6 = "<allocation names disabled>";
    }
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, 12343, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/include/utils/PxcThreadCoherentCache.h", 82);
    if (v7)
    {
      unint64_t v4 = (v7 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(void *)(v4 - 8) = v4 - v7;
    }
    else
    {
      unint64_t v4 = 0;
    }
    physx::Dy::ThreadContext::ThreadContext((physx::Dy::ThreadContext *)v4, *(physx::PxcNpMemBlockPool **)(v3 + 408));
  }
  *(void *)(v4 + 11880) = 0;
  unint64_t v192 = (void *)v4;
  *(_DWORD *)(v4 + 11888) = 0;
  uint64_t v8 = *((unsigned int *)v1 + 43);
  if (v8 >= v2) {
    goto LABEL_171;
  }
  unint64_t v9 = (float *)(v4 + 16);
  float32x4_t v190 = (pthread_mutex_t ***)(v4 + 11872);
  uint64_t v191 = v1;
  unsigned int v189 = v2;
  do
  {
    uint64_t v10 = *((void *)v1 + 6);
    uint64_t v11 = *(void *)(v10 + 12096);
    uint64_t v12 = *(unsigned __int16 *)(v11 + (v8 << 6) + 4);
    uint64_t v193 = v11;
    uint64_t v194 = v8;
    if (*(_WORD *)(v11 + (v8 << 6) + 4))
    {
      uint64_t v13 = 0;
      unsigned int v14 = 0;
      int v204 = *(_DWORD *)(v11 + (v8 << 6));
      uint64_t v200 = *((void *)v1 + 24);
      uint64_t v202 = *(void *)(v10 + 12112);
      uint64_t v198 = *(void *)(v200 + 32);
      do
      {
        unsigned int v15 = *(_DWORD *)(*(void *)(*(void *)(v202 + 8 * (v204 + v13)) + 24) + 108);
        unsigned int v16 = (long long *)(v198 + 32 * (*(_DWORD *)(v200 + 4 * (v15 & 7)) + (v15 >> 3)));
        long long v17 = *v16;
        uint64_t v18 = *((void *)v16 + 2);
        unsigned int v19 = *((unsigned __int8 *)v16 + 24);
        int v20 = *((unsigned __int8 *)v16 + 25);
        uint64_t v206 = 0;
        int v207 = 0;
        if ((void)v17)
        {
          unsigned int v21 = *(unsigned __int8 *)(v17 + 43);
          int v22 = v21 & 1;
          long long v209 = v17;
          float32x4_t v210 = (int *)(v18 + 4 * v19);
          if ((v21 & 2) != 0) {
            int v23 = 64;
          }
          else {
            int v23 = 16;
          }
          if ((v21 & 0x80u) == 0) {
            unsigned int v24 = v23;
          }
          else {
            unsigned int v24 = 32;
          }
          int v25 = (v21 >> 2) & 1;
          if ((v21 & 0x80u) == 0) {
            int v26 = (v21 & 2) >> 1;
          }
          else {
            int v26 = 2;
          }
        }
        else
        {
          unsigned int v24 = 0;
          int v22 = 0;
          int v26 = 0;
          int v25 = 1;
        }
        int v219 = v22;
        int v217 = v26;
        int v218 = v25;
        int v215 = 48;
        unsigned int v216 = v24;
        unsigned int v212 = v19;
        int v211 = v20;
        if (!v25 && v20)
        {
          int v27 = 0;
          unsigned int v28 = 0;
          int v29 = 0;
          uint64_t v31 = *((void *)&v209 + 1);
          uint64_t v30 = v209;
          long long v32 = v210;
          do
          {
            if (v27)
            {
              unsigned int v33 = *(unsigned __int8 *)(v30 + 41);
              BOOL v34 = v33 > v28;
              LODWORD(v35) = (v33 - v28) * v24;
              if (v34) {
                uint64_t v35 = v35;
              }
              else {
                uint64_t v35 = 0;
              }
              v31 += v35;
              v30 += 48;
            }
            int v214 = ++v27;
            unsigned int v213 = 0;
            unsigned int v28 = *(unsigned __int8 *)(v30 + 41);
            if (*(unsigned char *)(v30 + 41))
            {
              int v36 = *(_DWORD *)(v30 + 36);
              char v37 = *(unsigned char *)(v30 + 42);
              __int16 v38 = *(_WORD *)(v30 + 44);
              __int16 v39 = *(_WORD *)(v30 + 46);
              int32x2_t v40 = vrev64_s32(*(int32x2_t *)(v30 + 28));
              int v41 = *(unsigned __int8 *)(v30 + 41);
              do
              {
                v32 += v29 != 0;
                if (v29) {
                  uint64_t v42 = v24;
                }
                else {
                  uint64_t v42 = 0;
                }
                uint64_t v43 = &v9[16 * (unint64_t)v14];
                *((_DWORD *)v43 + 11) = v36;
                *((int32x2_t *)v43 + 7) = v40;
                if (v22) {
                  int v44 = *v32;
                }
                else {
                  int v44 = -1;
                }
                v31 += v42;
                *((_DWORD *)v43 + 13) = v44;
                *((unsigned char *)v43 + 48) = v37;
                if (v26)
                {
                  int v45 = *(_DWORD *)(v31 + 28);
                  unsigned int v46 = (float *)(v31 + 16);
                }
                else
                {
                  unsigned int v46 = (float *)&v206;
                  int v45 = 2139095039;
                }
                long long v47 = &v9[16 * (unint64_t)v14];
                *((_DWORD *)v47 + 7) = v45;
                *((void *)v47 + 4) = *(void *)v46;
                v47[10] = v46[2];
                *(void *)&long long v48 = *(void *)(v30 + 16);
                DWORD2(v48) = *(_DWORD *)(v30 + 24);
                HIDWORD(v48) = *(_DWORD *)(v31 + 12);
                *(_OWORD *)uint64_t v43 = v48;
                *((void *)v47 + 2) = *(void *)v31;
                v47[6] = *(float *)(v31 + 8);
                LOWORD(v233[v14]) = v38;
                HIWORD(v233[v14++]) = v39;
                int v29 = 1;
                --v41;
              }
              while (v41);
            }
            unsigned int v213 = v28;
          }
          while (v27 != v20);
        }
        ++v13;
      }
      while (v13 != v12);
    }
    else
    {
      unsigned int v14 = 0;
    }
    int v221 = 0;
    int v229 = 0;
    unint64_t v230 = v4 + 16;
    int v231 = v233;
    unsigned int v232 = v14;
    uint64_t v222 = *(void *)(v4 + 16);
    int v223 = *(_DWORD *)(v4 + 24);
    uint64_t v224 = 0;
    v226[0] = 0;
    int v227 = 0;
    int v225 = *(_DWORD *)(v4 + 28);
    if (v14 < 2)
    {
      unsigned __int16 v50 = 1;
      unsigned __int16 v49 = 1;
      goto LABEL_70;
    }
    unsigned __int16 v49 = 1;
    unsigned __int16 v50 = 1;
    while (1)
    {
      long long v51 = &v9[16 * (unint64_t)v50];
      if (v49)
      {
        long long v52 = (unsigned __int16 *)&v231[v50];
        int v55 = *v52;
        long long v53 = v52 + 1;
        int v54 = v55;
        unsigned int v56 = v49 - 1;
        unsigned int v57 = (float *)(&v222 + 5 * v56);
        do
        {
          uint64_t v58 = *((unsigned __int16 *)v57 + 14);
          if (LOWORD(v231[v58]) == v54
            && HIWORD(v231[v58]) == *v53
            && (float)((float)((float)(v57[1] * v51[1]) + (float)(*v57 * *v51)) + (float)(v57[2] * v51[2])) >= 0.995)
          {
            break;
          }
          v57 -= 10;
          --v56;
        }
        while (v56 != -1);
      }
      else
      {
        unsigned int v56 = -1;
      }
      int v59 = v49 - 1;
      if (v56 != v59) {
        break;
      }
LABEL_66:
      if (v14 <= ++v50) {
        goto LABEL_70;
      }
    }
    v226[20 * v59 + 1] = v50 - v226[20 * v59];
    if (v49 != 32)
    {
      uint64_t v60 = &v206 + 5 * v49;
      uint64_t v61 = v60 + 22;
      *((_WORD *)v60 + 102) = v50;
      v60[24] = 0;
      if (v56 == -1)
      {
        uint64_t v63 = *(void *)v51;
        int v64 = *((_DWORD *)v51 + 2);
        *(float *)&v226[20 * v49 - 2] = v9[16 * (unint64_t)v50 + 3];
        LOWORD(v51) = v49;
      }
      else
      {
        int v62 = &v222 + 5 * (int)v56;
        LODWORD(v51) = *((unsigned __int16 *)v62 + 16);
        v62[2] = (uint64_t)v61;
        uint64_t v63 = *v62;
        int v64 = *((_DWORD *)v62 + 2);
        uint64_t v65 = (float *)(&v222 + 5 * v51);
        float v66 = v65[6];
        if (v66 >= v9[16 * (unint64_t)v50 + 3]) {
          float v66 = v9[16 * (unint64_t)v50 + 3];
        }
        *(float *)&v226[20 * v49 - 2] = v66;
        v65[6] = v66;
      }
      int v67 = &v206 + 5 * v49;
      *((_WORD *)v67 + 104) = (_WORD)v51;
      *uint64_t v61 = v63;
      *((_DWORD *)v60 + 46) = v64;
      *((_WORD *)v67 + 105) = v49++;
      goto LABEL_66;
    }
    unsigned __int16 v49 = 32;
LABEL_70:
    *(_WORD *)&v220[40 * v49 + 2] = v50 - *(_WORD *)&v220[40 * v49];
    uint64_t v68 = v49;
    if (!v49)
    {
      physx::shdfnd::sort<physx::Dy::ContactPatch *,physx::Dy::SortBoundsPredicateManifold,physx::shdfnd::ReflectionAllocator<physx::Dy::ContactPatch *>>((char *)v228, 0);
      unsigned int v167 = 0;
      int v221 = 0;
      long long v236 = 0u;
      long long v237 = 0u;
      long long v234 = 0u;
      long long v235 = 0u;
      goto LABEL_157;
    }
    long long v69 = &v222;
    long long v70 = (uint64_t **)v228;
    uint64_t v71 = v68;
    do
    {
      *v70++ = v69;
      v69 += 5;
      --v71;
    }
    while (v71);
    uint64_t v197 = v68;
    physx::shdfnd::sort<physx::Dy::ContactPatch *,physx::Dy::SortBoundsPredicateManifold,physx::shdfnd::ReflectionAllocator<physx::Dy::ContactPatch *>>((char *)v228, v68);
    uint64_t v72 = v197;
    uint64_t v73 = 0;
    unsigned int v74 = 0;
    unint64_t v75 = v230;
    unint64_t v76 = v230 + 24;
    unint64_t v195 = v230 + 12;
    unint64_t v196 = v230 + 24;
    while (2)
    {
      uint64_t v77 = v228[v73];
      if (*(unsigned __int16 *)(v77 + 32) != *(unsigned __int16 *)(v77 + 34)) {
        goto LABEL_145;
      }
      if (v74 == 6)
      {
        int v221 = 6;
        long long v236 = 0u;
        long long v237 = 0u;
        long long v234 = 0u;
        long long v235 = 0u;
        goto LABEL_150;
      }
      unsigned int v78 = 0;
      uint64_t v79 = v228[v73];
      do
      {
        v78 += *(unsigned __int16 *)(v79 + 30);
        uint64_t v79 = *(void *)(v79 + 16);
      }
      while (v79);
      uint64_t v80 = v74;
      unsigned int v81 = v74 + 1;
      char v82 = (unsigned int *)&v206 + 7 * v74;
      if (v78 > 6)
      {
        unsigned int v87 = 0;
        float v88 = 0.0;
        uint64_t v89 = v228[v73];
        do
        {
          uint64_t v90 = *(unsigned __int16 *)(v89 + 30);
          if (*(_WORD *)(v89 + 30))
          {
            uint64_t v91 = *(unsigned __int16 *)(v89 + 28);
            long long v92 = (float *)(v230 + 24 + (v91 << 6));
            do
            {
              float v93 = (float)(*(v92 - 1) * *(v92 - 1)) + (float)(*(v92 - 2) * *(v92 - 2));
              float v94 = *v92;
              v92 += 16;
              float v95 = v93 + (float)(v94 * v94);
              if (v88 < v95)
              {
                unsigned int v87 = v91;
                float v88 = v95;
              }
              LODWORD(v91) = v91 + 1;
              --v90;
            }
            while (v90);
          }
          uint64_t v89 = *(void *)(v89 + 16);
        }
        while (v89);
        long long v96 = (char *)&v206 + 28 * v74;
        *((_DWORD *)v96 + 1) = v87;
        unsigned int v97 = v96 + 4;
        unsigned int v98 = (float *)(v75 + ((unint64_t)v87 << 6));
        float v99 = v98[4];
        float v100 = v98[5];
        float v101 = v98[6];
        float v102 = 0.0;
        uint64_t v103 = v77;
        do
        {
          uint64_t v104 = *(unsigned __int16 *)(v103 + 30);
          if (*(_WORD *)(v103 + 30))
          {
            uint64_t v105 = *(unsigned __int16 *)(v103 + 28);
            uint64_t v106 = (float *)(v76 + (v105 << 6));
            do
            {
              float v107 = v99 - *(v106 - 2);
              float v108 = v100 - *(v106 - 1);
              float v109 = *v106;
              v106 += 16;
              float v110 = (float)((float)(v108 * v108) + (float)(v107 * v107))
                   + (float)((float)(v101 - v109) * (float)(v101 - v109));
              if (v110 > v102)
              {
                unsigned int v87 = v105;
                float v102 = v110;
              }
              LODWORD(v105) = v105 + 1;
              --v104;
            }
            while (v104);
          }
          uint64_t v103 = *(void *)(v103 + 16);
        }
        while (v103);
        float32x4_t v111 = (float *)(v75 + ((unint64_t)v87 << 6));
        float v112 = v111[4];
        float v113 = v111[5];
        float v114 = v111[6];
        *((_DWORD *)&v206 + 7 * v80 + 2) = v87;
        float v115 = v99 - v112;
        float v116 = v100 - v113;
        float v117 = v101 - v114;
        float v119 = *(float *)(v77 + 4);
        float v118 = *(float *)(v77 + 8);
        float v120 = (float)(v116 * v118) - (float)(v117 * v119);
        float v121 = (float)(v117 * *(float *)v77) - (float)(v115 * v118);
        float v122 = (float)(v115 * v119) - (float)(v116 * *(float *)v77);
        float v123 = 0.0;
        uint64_t v124 = v77;
        do
        {
          uint64_t v125 = *(unsigned __int16 *)(v124 + 30);
          if (*(_WORD *)(v124 + 30))
          {
            uint64_t v126 = *(unsigned __int16 *)(v124 + 28);
            unsigned int v127 = (float *)(v76 + (v126 << 6));
            do
            {
              float v128 = *(v127 - 2) - v99;
              float v129 = *(v127 - 1) - v100;
              float v130 = *v127;
              v127 += 16;
              float v131 = (float)((float)(v121 * v129) + (float)(v128 * v120)) + (float)((float)(v130 - v101) * v122);
              if (v131 > v123)
              {
                unsigned int v87 = v126;
                float v123 = v131;
              }
              LODWORD(v126) = v126 + 1;
              --v125;
            }
            while (v125);
          }
          uint64_t v124 = *(void *)(v124 + 16);
        }
        while (v124);
        *(_DWORD *)&v208[28 * v80] = v87;
        float v132 = -v120;
        float v133 = -v121;
        float v134 = -v122;
        float v135 = 0.0;
        uint64_t v136 = v77;
        do
        {
          uint64_t v137 = *(unsigned __int16 *)(v136 + 30);
          if (*(_WORD *)(v136 + 30))
          {
            uint64_t v138 = *(unsigned __int16 *)(v136 + 28);
            uint64_t v139 = (float *)(v76 + (v138 << 6));
            do
            {
              float v140 = *(v139 - 2) - v99;
              float v141 = *(v139 - 1) - v100;
              float v142 = *v139;
              v139 += 16;
              float v143 = (float)((float)(v141 * v133) + (float)(v140 * v132)) + (float)((float)(v142 - v101) * v134);
              if (v143 > v135)
              {
                unsigned int v87 = v138;
                float v135 = v143;
              }
              LODWORD(v138) = v138 + 1;
              --v137;
            }
            while (v137);
          }
          uint64_t v136 = *(void *)(v136 + 16);
        }
        while (v136);
        uint64_t v205 = v73;
        *((_DWORD *)&v209 + 7 * v80) = v87;
        uint64_t v199 = 28 * v80;
        long long v238 = *(_OWORD *)((char *)&v206 + 28 * v80 + 4);
        do
        {
          *(float *)((char *)v240 + v136) = *(float *)(v75 + ((unint64_t)*(unsigned int *)&v97[v136] << 6) + 12)
                                          + -0.001;
          v136 += 4;
        }
        while (v136 != 16);
        uint64_t v144 = v77;
        do
        {
          uint64_t v145 = *(unsigned __int16 *)(v144 + 30);
          if (*(_WORD *)(v144 + 30))
          {
            uint64_t v146 = 0;
            uint64_t v147 = *(unsigned __int16 *)(v144 + 28);
            do
            {
              uint64_t v148 = 0;
              LODWORD(v149) = 0;
              uint64_t v150 = v146 + v147;
              unsigned int v151 = (float *)(v75 + ((v146 + v147) << 6));
              float v152 = v151[4];
              float v153 = v151[5];
              float v154 = v151[6];
              float v155 = 3.4028e38;
              do
              {
                uint64_t v156 = (float *)(v75 + ((unint64_t)*(unsigned int *)&v97[4 * v148] << 6));
                float v157 = v156[6] - v154;
                float v158 = (float)(v156[5] - v153) * (float)(v156[5] - v153);
                if (v155 <= (float)((float)(v158 + (float)((float)(v156[4] - v152) * (float)(v156[4] - v152)))
                                   + (float)(v157 * v157)))
                {
                  uint64_t v149 = v149;
                }
                else
                {
                  float v155 = (float)(v158 + (float)((float)(v156[4] - v152) * (float)(v156[4] - v152)))
                       + (float)(v157 * v157);
                  uint64_t v149 = v148;
                }
                ++v148;
              }
              while (v148 != 4);
              float v159 = *(float *)(v75 + (v150 << 6) + 12);
              if (*(float *)&v240[2 * v149] > v159)
              {
                *((_DWORD *)&v238 + v149) = v150;
                *(float *)&v240[2 * v149] = v159;
              }
              ++v146;
            }
            while (v146 != v145);
          }
          uint64_t v144 = *(void *)(v144 + 16);
        }
        while (v144);
        uint64_t v201 = v82;
        unsigned int v203 = v81;
        long long v236 = 0u;
        long long v237 = 0u;
        long long v234 = 0u;
        long long v235 = 0u;
        do
        {
          uint64_t v160 = *(unsigned int *)((char *)&v238 + v144);
          if (v160 <= 0x3F)
          {
            *(_DWORD *)&v97[v144] = v160;
            *((unsigned char *)&v234 + v160) = 1;
          }
          v144 += 4;
        }
        while (v144 != 16);
        uint64_t v239 = 0;
        memset_pattern16(&v241, &unk_23441FF20, 8uLL);
        uint64_t v72 = v197;
        uint64_t v73 = v205;
        unint64_t v76 = v196;
        while (1)
        {
          uint64_t v161 = *(unsigned __int16 *)(v77 + 30);
          if (*(_WORD *)(v77 + 30)) {
            break;
          }
LABEL_143:
          uint64_t v77 = *(void *)(v77 + 16);
          if (!v77)
          {
            *(void *)((char *)&v209 + v199 + 4) = v239;
            unsigned int *v201 = 6;
            unsigned int v74 = v203;
            goto LABEL_145;
          }
        }
        uint64_t v162 = *(unsigned __int16 *)(v77 + 28);
        uint64_t v163 = (float *)(v195 + (v162 << 6));
        while (2)
        {
          if (!*((unsigned char *)&v234 + v162))
          {
            float v164 = *v163;
            if (*v163 < v241)
            {
              float v242 = v241;
              HIDWORD(v239) = v239;
              uint64_t v165 = &v241;
              uint64_t v166 = 4;
              goto LABEL_141;
            }
            if (v164 < v242)
            {
              uint64_t v165 = &v242;
              uint64_t v166 = 5;
LABEL_141:
              *uint64_t v165 = v164;
              *((_DWORD *)&v238 + v166) = v162;
            }
          }
          ++v162;
          v163 += 16;
          if (!--v161) {
            goto LABEL_143;
          }
          continue;
        }
      }
      uint64_t v83 = 0;
      do
      {
        int v84 = *(unsigned __int16 *)(v77 + 30);
        if (*(_WORD *)(v77 + 30))
        {
          int v85 = *(unsigned __int16 *)(v77 + 28);
          do
          {
            uint64_t v86 = (v83 + 1);
            *((_DWORD *)&v206 + 7 * v80 + v83 + 1) = v85++;
            LODWORD(v83) = v83 + 1;
            --v84;
          }
          while (v84);
        }
        else
        {
          uint64_t v86 = v83;
        }
        uint64_t v77 = *(void *)(v77 + 16);
        uint64_t v83 = v86;
      }
      while (v77);
      *char v82 = v78;
      unsigned int v74 = v81;
LABEL_145:
      if (++v73 != v72) {
        continue;
      }
      break;
    }
    int v221 = v74;
    long long v236 = 0u;
    long long v237 = 0u;
    long long v234 = 0u;
    long long v235 = 0u;
    if (!v74)
    {
      unsigned int v167 = 0;
      goto LABEL_157;
    }
LABEL_150:
    uint64_t v168 = 0;
    int v169 = 0;
    uint64_t v170 = (char *)&v206 + 4;
    do
    {
      uint64_t v171 = *((unsigned int *)&v206 + 7 * v168);
      unsigned int v172 = (unsigned int *)v170;
      uint64_t v173 = v171;
      if (v171)
      {
        do
        {
          unsigned int v174 = *v172++;
          *((unsigned char *)&v234 + v174) = 1;
          --v173;
        }
        while (v173);
        v169 += v171;
      }
      ++v168;
      v170 += 28;
    }
    while (v168 != v74);
    unsigned int v167 = (2 * v169 + 15) & 0xFFFFFFF0;
    if (v167 > 0x4000)
    {
      uint64_t v175 = physx::PxcNpMemBlockPool::acquireExceptionalConstraintMemory(*v190, v167);
      goto LABEL_161;
    }
LABEL_157:
    uint64_t v176 = *(void *)(v4 + 11880);
    if (v176 && (uint64_t v177 = *(unsigned int *)(v4 + 11888), v177 + v167 <= 0x4000))
    {
      uint64_t v175 = v176 + v177;
      *(_DWORD *)(v4 + 11888) = v177 + v167;
    }
    else
    {
      uint64_t v175 = physx::PxcNpMemBlockPool::acquire(*(void *)(v4 + 11872), *((void *)v191 + 6) + 11848, (_DWORD *)(*(void *)(v4 + 11872) + 244), (int *)(*(void *)(v4 + 11872) + 240), 1);
      *(void *)(v4 + 11880) = v175;
      *(_DWORD *)(v4 + 11888) = v167;
    }
LABEL_161:
    uint64_t v178 = v193 + (v194 << 6);
    *(void *)(v178 + 56) = v175;
    if (v14)
    {
      uint64_t v179 = 0;
      unsigned int v180 = 0;
      unint64_t v181 = v4 + 60;
      unint64_t v1 = v191;
      unsigned int v182 = v189;
      do
      {
        if (*((unsigned char *)&v234 + v179))
        {
          if (v179 != v180)
          {
            unsigned int v183 = &v9[16 * (unint64_t)v180];
            *(_OWORD *)unsigned int v183 = *(_OWORD *)(v181 - 44);
            *((_OWORD *)v183 + 1) = *(_OWORD *)(v181 - 28);
            *((void *)v183 + 4) = *(void *)(v181 - 12);
            v183[10] = *(float *)(v181 - 4);
            long long v184 = *(_OWORD *)v181;
            v183[15] = *(float *)(v181 + 16);
            *(_OWORD *)(v183 + 11) = v184;
            v233[v180] = v233[v179];
          }
          *(_WORD *)(v175 + 2 * v180++) = v179;
        }
        ++v179;
        v181 += 64;
      }
      while (v14 != v179);
    }
    else
    {
      unsigned int v180 = 0;
      unint64_t v1 = v191;
      unsigned int v182 = v189;
    }
    uint64_t v185 = *((void *)v1 + 23);
    uint64_t v186 = *(void *)(*((void *)v1 + 24) + 32)
         + 32
         * (*(_DWORD *)(*((void *)v1 + 24) + 4 * (*(_DWORD *)(*(void *)(v178 + 8) + 76) & 7))
                        + (*(_DWORD *)(*(void *)(v178 + 8) + 76) >> 3));
    v240[0] = 0;
    physx::writeCompressedContact(v9, v180, 0, (unsigned char *)(v186 + 24), (void *)v186, (float *)(v186 + 8), v240, (uint64_t *)(v186 + 16), 4 * v180, v185, 0, 0, (unsigned __int16 *)v233, (unsigned char *)(v186 + 25), 0, *((void *)v1 + 6) + 11848, (uint64_t)v190, 0, 0,
      0,
      0,
      0);
    uint64_t v8 = v194 + 1;
  }
  while (v182 != v194 + 1);
LABEL_171:
  uint64_t v187 = *(void *)(*((void *)v1 + 5) + 400);
  pthread_mutex_lock((pthread_mutex_t *)(v187 + 8));
  *unint64_t v192 = *(void *)v187;
  *(void *)uint64_t v187 = v192;
  return pthread_mutex_unlock((pthread_mutex_t *)(v187 + 8));
}

char *physx::shdfnd::sort<physx::Dy::ContactPatch *,physx::Dy::SortBoundsPredicateManifold,physx::shdfnd::ReflectionAllocator<physx::Dy::ContactPatch *>>(char *result, int a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v37 = 0x2000000000;
  __int16 v38 = v40;
  char v39 = 0;
  if (a2 < 2) {
    return result;
  }
  unsigned int v2 = result;
  int v3 = 0;
  int v4 = a2 - 1;
  uint64_t v5 = result + 8;
  uint64_t v6 = v40;
  memset(v40, 0, sizeof(v40));
  while (1)
  {
    while (1)
    {
      if (v4 <= v3) {
        goto LABEL_36;
      }
      if ((v4 - v3) <= 4) {
        break;
      }
      int v7 = v3 + v4;
      if (v3 + v4 < 0 != __OFADD__(v3, v4)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      uint64_t v9 = *(void *)&v2[8 * (v7 >> 1)];
      uint64_t v10 = *(void *)&v2[8 * v3];
      float v11 = *(float *)(v10 + 24);
      if (*(float *)(v9 + 24) < v11)
      {
        *(void *)&v2[8 * v3] = v9;
        *(void *)&v2[8 * v8] = v10;
        uint64_t v9 = v10;
        uint64_t v10 = *(void *)&v2[8 * v3];
        float v11 = *(float *)(v10 + 24);
      }
      uint64_t v12 = *(void *)&v2[8 * v4];
      if (*(float *)(v12 + 24) >= v11)
      {
        float v11 = *(float *)(v12 + 24);
        uint64_t v10 = *(void *)&v2[8 * v4];
      }
      else
      {
        *(void *)&v2[8 * v3] = v12;
        *(void *)&v2[8 * v4] = v10;
        uint64_t v9 = *(void *)&v2[8 * v8];
      }
      if (v11 < *(float *)(v9 + 24))
      {
        *(void *)&v2[8 * v8] = v10;
        *(void *)&v2[8 * v4] = v9;
        uint64_t v9 = *(void *)&v2[8 * v8];
      }
      uint64_t v13 = v4 - 1;
      *(void *)&v2[8 * v8] = *(void *)&v2[8 * v13];
      *(void *)&v2[8 * v13] = v9;
      int v14 = v3;
      int v15 = v4 - 1;
      while (1)
      {
        float v16 = *(float *)(v9 + 24);
        long long v17 = &v2[8 * v14];
        do
        {
          uint64_t v19 = *((void *)v17 + 1);
          v17 += 8;
          uint64_t v18 = v19;
          ++v14;
        }
        while (*(float *)(v19 + 24) < v16);
        int v20 = &v2[8 * v15];
        do
        {
          uint64_t v22 = *((void *)v20 - 1);
          v20 -= 8;
          uint64_t v21 = v22;
          --v15;
        }
        while (v16 < *(float *)(v22 + 24));
        if (v14 >= v15) {
          break;
        }
        *(void *)long long v17 = v21;
        *(void *)int v20 = v18;
        uint64_t v9 = *(void *)&v2[8 * v13];
      }
      *(void *)long long v17 = v9;
      *(void *)&v2[8 * v13] = v18;
      unsigned int v23 = v37;
      unsigned int v24 = HIDWORD(v37) - 1;
      if (v14 - v3 >= v4 - v14)
      {
        if (v37 >= v24)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Dy::ContactPatch *>>::grow((uint64_t)v36);
          unsigned int v23 = v37;
          uint64_t v6 = v38;
        }
        LODWORD(v37) = v23 + 1;
        *((_DWORD *)v6 + v23) = v14 + 1;
        uint64_t v26 = v37;
        LODWORD(v37) = v37 + 1;
        *((_DWORD *)v6 + v26) = v4;
        int v4 = v14 - 1;
      }
      else
      {
        if (v37 >= v24)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Dy::ContactPatch *>>::grow((uint64_t)v36);
          unsigned int v23 = v37;
          uint64_t v6 = v38;
        }
        LODWORD(v37) = v23 + 1;
        *((_DWORD *)v6 + v23) = v3;
        uint64_t v25 = v37;
        LODWORD(v37) = v37 + 1;
        *((_DWORD *)v6 + v25) = v14 - 1;
        int v3 = v14 + 1;
      }
    }
    uint64_t v27 = v3;
    int v28 = v3 + 1;
    int v29 = &v5[8 * v3];
    do
    {
      uint64_t v30 = 0;
      uint64_t v31 = v27++;
      int v32 = v31;
      do
      {
        if (*(float *)(*(void *)&v29[8 * v30] + 24) < *(float *)(*(void *)&v2[8 * v32] + 24)) {
          int v32 = v28 + v30;
        }
        ++v30;
      }
      while (v31 + v30 < v4);
      if (v32 != v31)
      {
        uint64_t v33 = *(void *)&v2[8 * v32];
        *(void *)&v2[8 * v32] = *(void *)&v2[8 * v31];
        *(void *)&v2[8 * v31] = v33;
      }
      ++v28;
      v29 += 8;
    }
    while (v27 != v4);
LABEL_36:
    int v34 = v37;
    if (!v37) {
      break;
    }
    LODWORD(v37) = v37 - 1;
    int v4 = *((_DWORD *)v6 + (v34 - 1));
    LODWORD(v37) = v34 - 2;
    int v3 = *((_DWORD *)v6 + (v34 - 2));
  }
  if (v39) {
    BOOL v35 = v6 == 0;
  }
  else {
    BOOL v35 = 1;
  }
  if (!v35) {
    return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Dy::ContactPatch *>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    uint64_t v3 = 4 * v2;
    uint64_t v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ContactPatch *>::getName() [T = physx::Dy::ContactPatch *]";
    }
    else {
      uint64_t v5 = "<allocation names disabled>";
    }
    uint64_t v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v6;
  return result;
}

void physx::Dy::SolverArticulationUpdateTask::~SolverArticulationUpdateTask(physx::Dy::SolverArticulationUpdateTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Dy::SolverArticulationUpdateTask::getName(physx::Dy::SolverArticulationUpdateTask *this)
{
  return "SolverArticulationUpdateTask";
}

uint64_t physx::Dy::SolverArticulationUpdateTask::runInternal(physx::Dy::SolverArticulationUpdateTask *this)
{
  uint64_t v2 = *((void *)this + 9);
  unint64_t v3 = (unint64_t)physx::shdfnd::SListImpl::pop(*(physx::shdfnd::SListImpl **)(v2 + 400));
  if (!v3)
  {
    uint64_t v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ThreadContext>::getName() [T = physx::Dy::ThreadContext]";
    }
    else {
      uint64_t v5 = "<allocation names disabled>";
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24) + 16))(v4 + 24, 12343, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/include/utils/PxcThreadCoherentCache.h", 82);
    if (v6)
    {
      unint64_t v3 = (v6 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(void *)(v3 - 8) = v3 - v6;
    }
    else
    {
      unint64_t v3 = 0;
    }
    physx::Dy::ThreadContext::ThreadContext((physx::Dy::ThreadContext *)v3, *(physx::PxcNpMemBlockPool **)(v2 + 408));
  }
  *(void *)(v3 + 11880) = 0;
  *(_DWORD *)(v3 + 11888) = 0;
  if (*((_DWORD *)this + 16))
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = *((void *)this + 7);
    do
    {
      float v11 = *(_OWORD **)(*((void *)this + 6) + 8 * v8);
      uint64_t v12 = (_OWORD *)(v10 + v7);
      long long v13 = v11[8];
      long long v15 = v11[5];
      long long v14 = v11[6];
      v12[4] = v11[7];
      v12[5] = v13;
      _DWORD v12[2] = v15;
      v12[3] = v14;
      long long v16 = v11[4];
      _OWORD *v12 = v11[3];
      v12[1] = v16;
      uint64_t v10 = *((void *)this + 7);
      if (v9 <= *(unsigned __int8 *)(v10 + v7 + 92)) {
        unsigned int v9 = *(unsigned __int8 *)(v10 + v7 + 92);
      }
      ++v8;
      v7 += 96;
    }
    while (v8 < *((unsigned int *)this + 16));
    *(_DWORD *)(v3 + 12168) = 0;
    if ((*(_DWORD *)(v3 + 12172) & 0x7FFFFFFFu) < v9) {
      physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate(v3 + 12160, v9);
    }
    *(_DWORD *)(v3 + 12168) = v9;
    unint64_t v17 = v3 + 12176;
    *(_DWORD *)(v3 + 12184) = 0;
    if ((*(_DWORD *)(v3 + 12188) & 0x7FFFFFFFu) < v9)
    {
      physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate(v3 + 12176, v9);
      unint64_t v17 = v3 + 12176;
    }
  }
  else
  {
    unsigned int v9 = 0;
    *(_DWORD *)(v3 + 12168) = 0;
    unint64_t v17 = v3 + 12176;
  }
  *(_DWORD *)(v3 + 12184) = v9;
  int v18 = *((_DWORD *)this + 20);
  uint64_t v19 = *((void *)this + 5);
  unint64_t v20 = *((unsigned int *)this + 16);
  if (v20)
  {
    unsigned int v54 = v9;
    unint64_t v55 = v3;
    uint64_t v21 = 0;
    unint64_t v22 = 0;
    unsigned int v23 = 0;
    unsigned int v24 = 0;
    unsigned int v25 = 0;
    unsigned int v26 = 0;
    uint64_t v27 = *((void *)this + 7);
    do
    {
      uint64_t v28 = *(void *)(*((void *)this + 6) + 8 * v22);
      int v29 = (uint64_t (*)(float))physx::Dy::ArticulationPImpl::sComputeUnconstrainedVelocities[*(unsigned int *)(*(void *)(v27 + v21) + 40)];
      if (v29)
      {
        unint64_t v30 = v17;
        char v31 = v29(*(float *)(*((void *)this + 9) + 88));
        unint64_t v17 = v30;
        uint64_t v27 = *((void *)this + 7);
        unint64_t v20 = *((unsigned int *)this + 16);
      }
      else
      {
        char v31 = 0;
      }
      *(unsigned char *)(v27 + v21 + 93) = v31;
      if (v25 <= *(unsigned __int16 *)(v27 + v21 + 88)) {
        unsigned int v25 = *(unsigned __int16 *)(v27 + v21 + 88);
      }
      if (v26 <= *(unsigned __int16 *)(v27 + v21 + 90)) {
        unsigned int v26 = *(unsigned __int16 *)(v27 + v21 + 90);
      }
      unsigned int v32 = *(unsigned __int16 *)(*(void *)(v28 + 112) + 12);
      if (v32 >> 8 > v23) {
        unsigned int v23 = v32 >> 8;
      }
      if (*(_WORD *)(*(void *)(v28 + 112) + 12) > v24) {
        unsigned int v24 = *(_WORD *)(*(void *)(v28 + 112) + 12);
      }
      v18 += 64;
      ++v22;
      v21 += 96;
    }
    while (v22 < v20);
    uint64_t v19 = *((void *)this + 5);
    unint64_t v3 = v55;
    unsigned int v9 = v54;
  }
  else
  {
    unsigned int v26 = 0;
    unsigned int v25 = 0;
    unsigned int v24 = 0;
    unsigned int v23 = 0;
  }
  do
  {
    signed int v33 = *(_DWORD *)(v19 + 12240);
    if (v33 <= (int)v24) {
      unsigned int v34 = v24;
    }
    else {
      unsigned int v34 = *(_DWORD *)(v19 + 12240);
    }
    int v35 = *(_DWORD *)(v19 + 12240);
    atomic_compare_exchange_strong((atomic_uint *volatile)(v19 + 12240), (unsigned int *)&v35, v34);
  }
  while (v35 != v33);
  uint64_t v36 = *((void *)this + 5);
  do
  {
    int v37 = *(_DWORD *)(v36 + 12244);
    if (v37 <= (int)v23) {
      unsigned int v38 = v23;
    }
    else {
      unsigned int v38 = *(_DWORD *)(v36 + 12244);
    }
    int v39 = *(_DWORD *)(v36 + 12244);
    atomic_compare_exchange_strong((atomic_uint *volatile)(v36 + 12244), (unsigned int *)&v39, v38);
  }
  while (v39 != v37);
  uint64_t v40 = *((void *)this + 5);
  do
  {
    signed int v41 = *(_DWORD *)(v40 + 12248);
    if (v41 <= (int)v25) {
      unsigned int v42 = v25;
    }
    else {
      unsigned int v42 = *(_DWORD *)(v40 + 12248);
    }
    int v43 = *(_DWORD *)(v40 + 12248);
    atomic_compare_exchange_strong((atomic_uint *volatile)(v40 + 12248), (unsigned int *)&v43, v42);
  }
  while (v43 != v41);
  uint64_t v44 = *((void *)this + 5);
  do
  {
    signed int v45 = *(_DWORD *)(v44 + 12252);
    if (v45 <= (int)v26) {
      unsigned int v46 = v26;
    }
    else {
      unsigned int v46 = *(_DWORD *)(v44 + 12252);
    }
    int v47 = *(_DWORD *)(v44 + 12252);
    atomic_compare_exchange_strong((atomic_uint *volatile)(v44 + 12252), (unsigned int *)&v47, v46);
  }
  while (v47 != v45);
  uint64_t v48 = *((void *)this + 5);
  do
  {
    signed int v49 = *(_DWORD *)(v48 + 12256);
    if (v49 <= (int)v9) {
      unsigned int v50 = v9;
    }
    else {
      unsigned int v50 = *(_DWORD *)(v48 + 12256);
    }
    int v51 = *(_DWORD *)(v48 + 12256);
    atomic_compare_exchange_strong((atomic_uint *volatile)(v48 + 12256), (unsigned int *)&v51, v50);
  }
  while (v51 != v49);
  uint64_t v52 = *(void *)(*((void *)this + 9) + 400);
  pthread_mutex_lock((pthread_mutex_t *)(v52 + 8));
  *(void *)unint64_t v3 = *(void *)v52;
  *(void *)uint64_t v52 = v3;
  return pthread_mutex_unlock((pthread_mutex_t *)(v52 + 8));
}

void physx::Dy::PxsSolverEndTask::~PxsSolverEndTask(physx::Dy::PxsSolverEndTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Dy::PxsSolverEndTask::getName(physx::Dy::PxsSolverEndTask *this)
{
  return "PxsDynamics.solverEnd";
}

uint64_t physx::Dy::PxsSolverEndTask::runInternal(physx::Dy::PxsSolverEndTask *this)
{
  uint64_t v2 = **((void **)this + 6);
  *(_DWORD *)(v2 + 12316) += *(_DWORD *)(v2 + 12212);
  uint64_t v3 = *(unsigned int *)(v2 + 12104);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(v2 + 12096);
    do
    {
      uint64_t v6 = (int *)(v5 + (v4 << 6));
      uint64_t v7 = *((void *)v6 + 2);
      uint64_t v8 = *(void *)(v7 + 16);
      uint64_t v9 = *(unsigned __int8 *)(v7 + 24);
      *(_OWORD *)uint64_t v7 = *(_OWORD *)(v6 + 6);
      *(unsigned char *)(v7 + 24) = *((unsigned char *)v6 + 40);
      *(_WORD *)(v7 + 25) = *(_WORD *)((char *)v6 + 41);
      *(void *)(v7 + 16) = *((void *)v6 + 6);
      unint64_t v10 = *((unsigned __int16 *)v6 + 2);
      if (v10 >= 2)
      {
        uint64_t v11 = *(void *)(v2 + 12112);
        uint64_t v12 = *((void *)v6 + 1);
        unint64_t v13 = v10 - 1;
        unsigned int v14 = *v6 + 1;
        do
        {
          uint64_t v15 = *(void *)(*(void *)(v11 + 8 * v14) + 24);
          *(void *)(v15 + 72) = *(void *)(v12 + 40);
          *(unsigned char *)(v15 + 82) = *(unsigned char *)(v12 + 50);
          ++v14;
          --v13;
        }
        while (v13);
      }
      if (v8) {
        BOOL v16 = v9 == 0;
      }
      else {
        BOOL v16 = 1;
      }
      if (!v16)
      {
        uint64_t v17 = 0;
        unsigned int v18 = 0;
        unsigned int v19 = 0;
        unsigned int v20 = *v6;
        uint64_t v21 = *(void *)(v5 + (v4 << 6) + 56);
        uint64_t v22 = *(void *)(v2 + 12112);
        uint64_t v23 = *((void *)this + 22);
        uint64_t v24 = *(void *)(v23 + 32);
        do
        {
          unsigned int v25 = *(unsigned __int16 *)(v21 + 2 * v17);
LABEL_12:
          unsigned int v26 = *(_DWORD *)(*(void *)(*(void *)(v22 + 8 * v20) + 24) + 108);
          uint64_t v27 = *(_DWORD *)(v23 + 4 * (v26 & 7)) + (v26 >> 3);
          while (1)
          {
            unsigned int v28 = v25 - v19;
            int v29 = v25 <= v19 ? 0 : *(unsigned __int8 *)(v24 + 32 * v27 + 24);
            if (v25 <= v19 && *(unsigned char *)(v24 + 32 * v27 + 24)) {
              break;
            }
            if (v28 >= v29 - v18) {
              unsigned int v28 = v29 - v18;
            }
            v19 += v28;
            v18 += v28;
            if (v18 == v29)
            {
              unsigned int v18 = 0;
              ++v20;
              goto LABEL_12;
            }
          }
          uint64_t v30 = *(void *)(v24 + 32 * v27 + 16);
          if (v30) {
            *(_DWORD *)(v30 + 4 * v18) = *(_DWORD *)(v8 + 4 * v17);
          }
          ++v17;
        }
        while (v17 != v9);
      }
      ++v4;
    }
    while (v4 != v3);
  }
  *(_DWORD *)(v2 + 12104) = 0;
  physx::PxcNpMemBlockPool::releaseConstraintBlocks(*(void *)(v2 + 11864), v2 + 11848);
  uint64_t v31 = *(void *)(*((void *)this + 5) + 400);
  pthread_mutex_lock((pthread_mutex_t *)(v31 + 8));
  *(void *)uint64_t v2 = *(void *)v31;
  *(void *)uint64_t v31 = v2;
  return pthread_mutex_unlock((pthread_mutex_t *)(v31 + 8));
}

void physx::Dy::PxsSolverSetupSolveTask::~PxsSolverSetupSolveTask(physx::Dy::PxsSolverSetupSolveTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Dy::PxsSolverSetupSolveTask::getName(physx::Dy::PxsSolverSetupSolveTask *this)
{
  return "PxsDynamics.solverSetupSolve";
}

void physx::Dy::PxsSolverSetupSolveTask::runInternal(physx::Dy::PxsSolverSetupSolveTask *this)
{
  unint64_t v1 = this;
  uint64_t v2 = *((void *)this + 5);
  uint64_t v3 = **((void **)this + 6);
  uint64_t v4 = *(void *)(v3 + 12032);
  uint64_t v261 = *(void *)(v2 + 544) + 32 * *((unsigned int *)this + 42);
  uint64_t v5 = *(void *)(v2 + 560);
  if (*(_DWORD *)(v3 + 11928))
  {
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    unsigned int v9 = 0;
    unsigned int v10 = 0;
    uint64_t v11 = *(void *)(v3 + 11920);
    uint64_t v12 = *(void *)(v3 + 12032);
    do
    {
      uint64_t v13 = *(_DWORD *)(v11 + 4 * v6) + v10;
      if (v10 >= v13)
      {
        int v14 = 0;
        v10 += *(_DWORD *)(v11 + 4 * v6);
      }
      else
      {
        int v14 = 0;
        uint64_t v15 = v10;
        do
        {
          unsigned __int16 v16 = *(_WORD *)(*(void *)(v3 + 12040) + 8 * v15 + 4);
          if (v16)
          {
            unsigned __int16 v17 = v16 + v8;
            uint64_t v18 = v7;
            do
            {
              unsigned int v19 = (long long *)(v4 + 48 * v8);
              if (*((_WORD *)v19 + 15))
              {
                if (v8 != v18)
                {
                  unsigned int v20 = (_OWORD *)(v4 + 48 * v18);
                  long long v21 = *v19;
                  long long v22 = v19[2];
                  v20[1] = v19[1];
                  v20[2] = v22;
                  *unsigned int v20 = v21;
                }
                uint64_t v18 = (v18 + 1);
                v12 += 48;
              }
              else
              {
                --v16;
              }
              ++v8;
            }
            while (v17 != (unsigned __int16)v8);
            if (v16)
            {
              uint64_t v23 = *(void *)(v3 + 12040);
              uint64_t v24 = v23 + 8 * v9;
              *(_DWORD *)uint64_t v24 = v7;
              *(_WORD *)(v24 + 4) = v16;
              int v25 = **(unsigned __int8 **)(v4 + 48 * v7 + 32);
              if (v25 == 5)
              {
                if (v16 < 2u)
                {
                  LOBYTE(v25) = 5;
                }
                else
                {
                  uint64_t v26 = v16 - 1;
                  unsigned int v27 = v7 + 1;
                  LOBYTE(v25) = 5;
                  do
                  {
                    if (**(unsigned char **)(v4 + 48 * v27 + 32) == 1) {
                      LOBYTE(v25) = 1;
                    }
                    ++v27;
                    --v26;
                  }
                  while (v26);
                }
              }
              *(_WORD *)(v23 + 8 * v9++ + 6) = v25;
              ++v14;
            }
            uint64_t v7 = v18;
          }
          ++v15;
        }
        while (v15 != v13);
        uint64_t v11 = *(void *)(v3 + 11920);
        v10 += *(_DWORD *)(v11 + 4 * v6);
      }
      *(_DWORD *)(v11 + 4 * v6++) = v14;
    }
    while (v6 < *(unsigned int *)(v3 + 11928));
    uint64_t v2 = *((void *)v1 + 5);
  }
  else
  {
    unsigned int v9 = 0;
    LODWORD(v7) = 0;
    uint64_t v12 = *(void *)(v3 + 12032);
  }
  int v28 = -1431655765 * ((unint64_t)(v12 - v4) >> 4);
  *(_DWORD *)(v3 + 11896) = v28;
  *(_DWORD *)(v3 + 12048) = v9;
  *(_DWORD *)(v3 + 11904) = v7 - v28;
  *(_DWORD *)(v3 + 12200) = v7;
  if (*(_DWORD *)(v2 + 148))
  {
    uint64_t v262 = v1;
    uint64_t v29 = *(void *)(v3 + 12064);
    *(_DWORD *)(v3 + 12088) = 0;
    if ((*(_DWORD *)(v3 + 12092) & 0x7FFFFFFFu) < v9) {
      physx::shdfnd::Array<physx::PxConstraintBatchHeader,physx::shdfnd::ReflectionAllocator<physx::PxConstraintBatchHeader>>::recreate(v3 + 12080, v9);
    }
    uint64_t v30 = *(void *)(v3 + 12080);
    uint64_t v264 = v3 + 11936;
    *(_DWORD *)(v3 + 11944) = 0;
    unsigned int v31 = *(_DWORD *)(v3 + 11932) & 0x7FFFFFFF;
    if ((*(_DWORD *)(v3 + 11948) & 0x7FFFFFFFu) < v31) {
      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(v264, v31);
    }
    uint64_t v259 = v29;
    uint64_t v260 = v5;
    if (*(_DWORD *)(v3 + 11928))
    {
      unint64_t v32 = 0;
      int v33 = 0;
      LODWORD(v34) = 0;
      uint64_t v35 = 0;
      do
      {
        uint64_t v36 = (*(_DWORD *)(*(void *)(v3 + 11920) + 4 * v32) + v34);
        if (v34 >= v36)
        {
          uint64_t v37 = v35;
        }
        else
        {
          uint64_t v34 = v34;
          uint64_t v37 = v35;
          do
          {
            unsigned int v38 = (unsigned int *)(*(void *)(v3 + 12040) + 8 * v34);
            unsigned int v39 = *((unsigned __int16 *)v38 + 3);
            if (v39 <= 8)
            {
              int v40 = *((unsigned __int16 *)v38 + 2);
              int v41 = 1 << v39;
              if ((v41 & 0x2A) != 0)
              {
                if (*((_WORD *)v38 + 2))
                {
                  uint64_t v42 = 0;
                  int v43 = 0;
                  do
                  {
                    uint64_t v44 = v29 + v42;
                    uint64_t v45 = v4 + 48 * (v43 + *v38);
                    uint64_t v46 = *(void *)(v45 + 32);
                    uint64_t v47 = *(unsigned __int16 *)(v46 + 2);
                    *(_WORD *)(v44 + 30) = (16 * *(unsigned __int16 *)(v45 + 30) - v47) >> 4;
                    *(void *)(v44 + 32) = v46 + v47;
                    *(void *)uint64_t v44 = *(void *)v45;
                    *(void *)(v44 + 8) = *(void *)(v45 + 8);
                    *(void *)(v44 + 20) = *(void *)(v45 + 20);
                    *(_DWORD *)(v44 + 16) = *(_DWORD *)(v45 + 16);
                    *(void *)(v44 + 40) = 0;
                    *(_WORD *)(v44 + 28) = 0;
                    ++v43;
                    v42 += 48;
                  }
                  while (48 * v40 != v42);
                  __int16 v48 = *(unsigned __int8 *)(v46 + v47);
                  v29 += v42;
                  int v49 = v40;
                }
                else
                {
                  int v49 = 0;
                  __int16 v48 = 0;
                }
                *(_DWORD *)uint64_t v30 = v33;
                *(_WORD *)(v30 + 4) = v40;
                *(_WORD *)(v30 + 6) = v48;
                v30 += 8;
                uint64_t v37 = (v37 + 1);
                v33 += v49;
              }
              else if ((v41 & 0x180) != 0)
              {
                uint64_t v50 = 0;
                int v51 = 0;
                uint64_t v52 = v4 + 48 * *v38;
                uint64_t v53 = *(void *)(v52 + 32);
                uint64_t v54 = *(unsigned __int16 *)(v53 + 2);
                unint64_t v55 = (unsigned __int8 *)(v53 + v54);
                unsigned int v56 = 16 * *(unsigned __int16 *)(v52 + 30) - v54;
                __int16 v57 = *v55;
                do
                {
                  uint64_t v58 = v29 + v50;
                  uint64_t v59 = v4 + 48 * (v51 + *v38);
                  *(_WORD *)(v58 + 30) = v56 >> 4;
                  *(void *)(v58 + 32) = v55;
                  *(void *)uint64_t v58 = *(void *)v59;
                  *(void *)(v58 + 8) = *(void *)(v59 + 8);
                  *(void *)(v58 + 20) = *(void *)(v59 + 20);
                  *(_DWORD *)(v58 + 16) = *(_DWORD *)(v59 + 16);
                  *(void *)(v58 + 40) = 0;
                  *(_WORD *)(v58 + 28) = 0;
                  ++v51;
                  v50 += 48;
                }
                while (v50 != 192);
                *(_DWORD *)uint64_t v30 = v33;
                *(_WORD *)(v30 + 4) = v40;
                *(_WORD *)(v30 + 6) = v57;
                v30 += 8;
                uint64_t v37 = (v37 + 1);
                v33 += v40;
                v29 += v50;
              }
            }
            ++v34;
          }
          while (v34 != v36);
        }
        _CF = v37 >= v35;
        int v61 = v37 - v35;
        if (v61 != 0 && _CF)
        {
          int v266 = v61;
          uint64_t v62 = *(unsigned int *)(v3 + 11944);
          if ((*(_DWORD *)(v3 + 11948) & 0x7FFFFFFFu) <= v62)
          {
            physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v264, &v266);
          }
          else
          {
            *(_DWORD *)(*(void *)(v3 + 11936) + 4 * v62) = v61;
            ++*(_DWORD *)(v3 + 11944);
          }
        }
        ++v32;
        LODWORD(v34) = v36;
        uint64_t v35 = v37;
      }
      while (v32 < *(unsigned int *)(v3 + 11928));
    }
    else
    {
      int v33 = 0;
    }
    int v63 = -1431655765 * ((unint64_t)(v29 - v259) >> 4);
    *(_DWORD *)(v3 + 12088) = (unint64_t)(v30 - *(void *)(v3 + 12080)) >> 3;
    *(_DWORD *)(v3 + 11912) = v33 - v63;
    *(_DWORD *)(v3 + 11900) = v63;
    *(_DWORD *)(v3 + 12204) = v33;
    unint64_t v1 = v262;
    uint64_t v2 = *((void *)v262 + 5);
    uint64_t v5 = v260;
  }
  uint64_t v64 = *(void *)(v3 + 12032);
  uint64_t v65 = *(void *)(v3 + 12064);
  uint64_t v66 = v2 + 684;
  uint64_t v67 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(v2 + 744), 248, 0x10u);
  *(void *)uint64_t v67 = *(void *)(v3 + 12240);
  int v68 = *((_DWORD *)v1 + 42);
  *(_DWORD *)(v67 + 24) = *(_DWORD *)(*((void *)v1 + 6) + 8);
  *(_DWORD *)(v67 + 28) = v68;
  *(void *)(v67 + 32) = *(void *)(v3 + 12288);
  *(_DWORD *)(v67 + 40) = *(_DWORD *)(v3 + 12296);
  *(void *)(v67 + 128) = 0;
  *(void *)(v67 + 136) = 0;
  *(void *)(v67 + 120) = 0;
  *(_DWORD *)(v67 + 144) = 0;
  uint64_t v69 = *((void *)v1 + 5);
  uint64_t v70 = *(void *)(v69 + 8);
  *(void *)(v67 + 200) = *(void *)(v70 + 8);
  *(void *)(v67 + 8) = v261;
  *(void *)(v67 + 16) = v5;
  *(_DWORD *)(v67 + 208) = *(_DWORD *)(v70 + 16);
  *(void *)(v67 + 216) = v66;
  *(void *)(v67 + 88) = *(void *)(v3 + 11992);
  uint64_t v71 = *(void *)(v3 + 11968);
  *(_DWORD *)(v67 + 148) = 0;
  uint64_t v72 = *(void *)(v3 + 12040);
  *(void *)(v67 + 48) = v64;
  *(void *)(v67 + 56) = v72;
  *(_DWORD *)(v67 + 64) = *(_DWORD *)(v3 + 12048);
  *(void *)(v67 + 72) = *(void *)(v3 + 11920);
  *(_DWORD *)(v67 + 80) = *(_DWORD *)(v3 + 11928);
  uint64_t v73 = *((void *)v1 + 7);
  *(void *)(v67 + 104) = v71;
  *(void *)(v67 + 112) = v73;
  *(void *)(v67 + 184) = *(void *)(v3 + 11936);
  LODWORD(v71) = *(_DWORD *)(v3 + 11944);
  uint64_t v74 = *(void *)(v3 + 12080);
  *(_DWORD *)(v67 + 176) = *(_DWORD *)(v3 + 12088);
  *(_DWORD *)(v67 + 192) = v71;
  *(_DWORD *)(v67 + 196) = 0;
  *(void *)(v67 + 160) = v65;
  *(void *)(v67 + 168) = v74;
  *(_DWORD *)(v67 + 224) = *(_DWORD *)(v3 + 12256);
  *(void *)(v67 + 152) = *(void *)(v69 + 88);
  if ((8 * *(_DWORD *)(v3 + 12232)) <= 1) {
    unsigned int v75 = 1;
  }
  else {
    unsigned int v75 = 8 * *(_DWORD *)(v3 + 12232);
  }
  uint64_t v76 = (*(uint64_t (**)(void))(**((void **)v1 + 2) + 8))(*((void *)v1 + 2));
  unsigned int v77 = (*(uint64_t (**)(uint64_t))(*(void *)v76 + 8))(v76);
  unsigned int v78 = (v75 + *(_DWORD *)(v3 + 12048) - 1) / v75;
  if (v78 >= v77) {
    unsigned int v79 = v77;
  }
  else {
    unsigned int v79 = (v75 + *(_DWORD *)(v3 + 12048) - 1) / v75;
  }
  if (v79 <= 1) {
    int v80 = 1;
  }
  else {
    int v80 = v79;
  }
  if (v79 >= 2)
  {
    unsigned int v81 = 8 * v78 / (2 * v80);
    if (v81 <= 8) {
      unsigned int v81 = 8;
    }
    *(_DWORD *)(v67 + 96) = v81;
    int v82 = 1 - v80;
    do
    {
      uint64_t v83 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(*((void *)v1 + 5) + 744), 72, 0x10u);
      uint64_t v84 = *((void *)v1 + 5);
      int v85 = *(_DWORD *)(v84 + 148);
      uint64_t v86 = *((void *)v1 + 22);
      uint64_t v87 = *(void *)(v84 + 768);
      *(void *)(v83 + 16) = 0;
      *(void *)(v83 + 24) = 0;
      *(_DWORD *)(v83 + 32) = 0;
      float v88 = (void (**)(uint64_t))&unk_26E724930;
      *(void *)uint64_t v83 = &unk_26E724930;
      *(void *)(v83 + 8) = v87;
      *(void *)(v83 + 40) = v67;
      *(void *)(v83 + 48) = v84;
      *(_DWORD *)(v83 + 56) = v85;
      *(void *)(v83 + 64) = v86;
      uint64_t v89 = *((void *)v1 + 3);
      *(_DWORD *)(v83 + 32) = 1;
      *(void *)(v83 + 24) = v89;
      if (v89)
      {
        (*(void (**)(uint64_t))(*(void *)v89 + 32))(v89);
        *(void *)(v83 + 16) = *(void *)(*(void *)(v83 + 24) + 16);
        float v88 = *(void (***)(uint64_t))v83;
      }
      v88[5](v83);
      _CF = __CFADD__(v82++, 1);
    }
    while (!_CF);
    physx::Dy::solveParallel(*((void *)v1 + 5), v67, *((void *)v1 + 22));
    int v90 = (*(_DWORD *)(*((void *)v1 + 6) + 12) & 0x7FFFFFFF) + *(_DWORD *)(*((void *)v1 + 6) + 8);
    if (*(_DWORD *)(v67 + 148) < v90)
    {
      int v91 = 30000;
      while (*(_DWORD *)(v67 + 148) < v90)
      {
        if (!--v91)
        {
          sched_yield();
          int v91 = 10000;
        }
      }
    }
    return;
  }
  *(_DWORD *)(v3 + 12168) = 0;
  unsigned int v92 = *(_DWORD *)(v3 + 12256);
  if ((*(_DWORD *)(v3 + 12172) & 0x7FFFFFFFu) < v92)
  {
    physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate(v3 + 12160, v92);
    unsigned int v92 = *(_DWORD *)(v3 + 12256);
  }
  *(_DWORD *)(v3 + 12168) = v92;
  *(_DWORD *)(v3 + 12184) = 0;
  if ((*(_DWORD *)(v3 + 12188) & 0x7FFFFFFFu) < v92)
  {
    physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate(v3 + 12176, v92);
    unsigned int v92 = *(_DWORD *)(v3 + 12256);
  }
  *(_DWORD *)(v3 + 12184) = v92;
  uint64_t v93 = *(void *)(v3 + 12176);
  *(void *)(v67 + 232) = *(void *)(v3 + 12160);
  *(void *)(v67 + 240) = v93;
  uint64_t v94 = *(void *)(*((void *)v1 + 5) + 8 * *(unsigned int *)(*((void *)v1 + 5) + 148) + 608);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v94 + 32))(v94, v67);
  uint64_t v96 = *((void *)v1 + 6);
  int v97 = *(_DWORD *)(v96 + 8);
  if (v97)
  {
    uint64_t v98 = 0;
    unint64_t v99 = 0;
    unsigned int v100 = v97 - 1;
    float v101 = (float *)(v5 + 112 * *((unsigned int *)v1 + 42) + 220);
    uint64_t v102 = v261;
    do
    {
      unsigned int v103 = v99 + 4;
      if ((int)v99 + 4 >= v100) {
        unsigned int v103 = v100;
      }
      _X9 = (uint64_t *)(*(void *)(v3 + 11968) + 8 * v103);
      uint64_t v106 = *_X9;
      _X9 += 16;
      _X10 = v106;
      __asm { PRFM            #0, [X10] }
      uint64_t v111 = *(void *)(v3 + 11992);
      _X27 = v111 + v98;
      __asm
      {
        PRFM            #0, [X27,#0x80]
        PRFM            #0, [X9]
      }
      uint64_t v115 = *((void *)v1 + 7);
      _X8 = v115 + 8 * v103;
      __asm { PRFM            #0, [X8] }
      float v118 = v1;
      uint64_t v119 = *((void *)v1 + 5);
      float v120 = *(float *)(v119 + 88);
      __int16 v121 = *(_WORD *)v101;
      if (!*(_WORD *)v101) {
        goto LABEL_101;
      }
      if (v121)
      {
        *(_DWORD *)(v111 + v98) = 0;
        *(_DWORD *)(v102 + v98) = 0;
        if ((v121 & 2) == 0)
        {
LABEL_96:
          if ((v121 & 4) == 0) {
            goto LABEL_97;
          }
          goto LABEL_149;
        }
      }
      else if ((v121 & 2) == 0)
      {
        goto LABEL_96;
      }
      *(_DWORD *)(v111 + v98 + 4) = 0;
      *(_DWORD *)(v102 + v98 + 4) = 0;
      if ((v121 & 4) == 0)
      {
LABEL_97:
        if ((v121 & 8) != 0) {
          goto LABEL_150;
        }
        goto LABEL_98;
      }
LABEL_149:
      *(_DWORD *)(v111 + v98 + 8) = 0;
      *(_DWORD *)(v102 + v98 + 8) = 0;
      if ((v121 & 8) != 0)
      {
LABEL_150:
        *(_DWORD *)(_X27 + 16) = 0;
        *(_DWORD *)(v102 + v98 + 16) = 0;
        if ((v121 & 0x10) == 0)
        {
LABEL_99:
          if ((v121 & 0x20) == 0) {
            goto LABEL_101;
          }
LABEL_100:
          *(_DWORD *)(v111 + v98 + 24) = 0;
          *(_DWORD *)(v102 + v98 + 24) = 0;
          goto LABEL_101;
        }
        goto LABEL_151;
      }
LABEL_98:
      if ((v121 & 0x10) == 0) {
        goto LABEL_99;
      }
LABEL_151:
      *(_DWORD *)(v111 + v98 + 20) = 0;
      *(_DWORD *)(v102 + v98 + 20) = 0;
      if ((v121 & 0x20) != 0) {
        goto LABEL_100;
      }
LABEL_101:
      float v122 = *(v101 - 25);
      float v123 = v122 + *(float *)(_X27 + 8);
      float v124 = *(float *)(_X27 + 16);
      float v125 = *(v101 - 17);
      float v126 = *(v101 - 14);
      float v127 = *(v101 - 11);
      float v128 = *(v101 - 21);
      float32x2_t v129 = *(float32x2_t *)(v101 - 27);
      float32x2_t v130 = *(float32x2_t *)(v101 - 3);
      float32x2_t v131 = *(float32x2_t *)(v101 - 19);
      float v132 = v124 * v131.f32[0];
      float32x2_t v133 = *(float32x2_t *)(v101 - 16);
      float32x2_t v134 = *(float32x2_t *)(v101 - 13);
      float32x2_t v135 = *(float32x2_t *)(_X27 + 20);
      float v136 = (float)((float)((float)(v124 * v125) + (float)(v126 * v135.f32[0])) + vmuls_lane_f32(v127, v135, 1)) + v128;
      *(v101 - 1) = (float)(v120 * v123) + *(v101 - 1);
      *(float32x2_t *)&long long v95 = vadd_f32(v129, *(float32x2_t *)_X27);
      *(float32x2_t *)(v101 - 3) = vadd_f32(vmul_n_f32(*(float32x2_t *)&v95, v120), v130);
      *(float32x2_t *)(v101 - 27) = vadd_f32(v129, *(float32x2_t *)(v102 + v98));
      *(v101 - 25) = v122 + *(float *)(v102 + v98 + 8);
      float v137 = *(float *)(v102 + v98 + 16);
      float v138 = *(float *)(v102 + v98 + 20);
      float v139 = (float)(v125 * v137) + (float)(v126 * v138);
      float v140 = *(float *)(v102 + v98 + 24);
      float v141 = v139 + (float)(v127 * v140);
      float32x2_t v142 = vmul_f32(v135, (float32x2_t)vzip2_s32((int32x2_t)v133, (int32x2_t)v134));
      float v143 = (float)(vmuls_lane_f32(v124, v131, 1) + v142.f32[0]) + v142.f32[1];
      float32x2_t v144 = *(float32x2_t *)(v101 - 23);
      float v145 = (float)((float)(v132 + vmul_f32(v135, v133).f32[0]) + vmuls_lane_f32(v134.f32[0], v135, 1)) + v144.f32[0];
      float v146 = v143 + v144.f32[1];
      float v147 = (float)((float)(v146 * v146) + (float)(v145 * v145)) + (float)(v136 * v136);
      *(float32x2_t *)(v101 - 23) = vadd_f32(v144, vadd_f32(vadd_f32(vmul_n_f32(v131, v137), vmul_n_f32(v133, v138)), vmul_n_f32(v134, v140)));
      *(v101 - 21) = v128 + v141;
      float v265 = v120;
      if (v147 != 0.0)
      {
        float v148 = sqrtf(v147);
        long long v263 = v95;
        if (v148 > 10000000.0)
        {
          float v149 = 0.0;
          BOOL v150 = v147 <= 0.0;
          float v151 = 0.0;
          float v152 = 0.0;
          if (!v150)
          {
            float v149 = v145 * (float)(1.0 / v148);
            float v151 = v146 * (float)(1.0 / v148);
            float v152 = v136 * (float)(1.0 / v148);
          }
          float v145 = v149 * 10000000.0;
          float v146 = v151 * 10000000.0;
          float v148 = 10000000.0;
          float v136 = v152 * 10000000.0;
        }
        __float2 v153 = __sincosf_stret((float)(v120 * v148) * 0.5);
        *(float *)v154.i32 = v145 * (float)(v153.__sinval / v148);
        float32x4_t v155 = *(float32x4_t *)(v101 - 7);
        *(float *)&v154.i32[1] = v146 * (float)(v153.__sinval / v148);
        *(float *)&v154.i32[2] = v136 * (float)(v153.__sinval / v148);
        float32x4_t v156 = (float32x4_t)vextq_s8(vextq_s8(v154, v154, 0xCuLL), v154, 8uLL);
        *(float *)&v154.i32[3] = -*(float *)v154.i32;
        float32x4_t v157 = (float32x4_t)vzip1q_s32((int32x4_t)v155, (int32x4_t)v155);
        v157.i32[0] = *(void *)(v101 - 5);
        _Q2 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vdupq_laneq_s32((int32x4_t)v155, 3), (int8x16_t)v155, 4uLL), (float32x4_t)v154), (float32x4_t)0, v155);
        int32x4_t v159 = vzip2q_s32((int32x4_t)v156, (int32x4_t)v155);
        float32x4_t v160 = vmulq_n_f32(v155, v153.__cosval);
        v155.i32[3] = v156.i32[1];
        int32x4_t v161 = vrev64q_s32((int32x4_t)v156);
        v156.f32[3] = -(float)(v146 * (float)(v153.__sinval / v148));
        _Q0 = vaddq_f32(v160, vmlsq_f32(vmlaq_f32(_Q2, v157, v156), (float32x4_t)vzip1q_s32(v161, v159), (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v155, (int32x4_t)vextq_s8((int8x16_t)v155, (int8x16_t)v155, 0xCuLL)), (int32x4_t)v155)));
        _Q1 = vmulq_f32(_Q0, _Q0);
        _Q2.i32[0] = _Q0.i32[2];
        __asm { FMLA            S1, S2, V0.S[2] }
        _Q2.i32[0] = _Q0.i32[3];
        __asm { FMLA            S1, S2, V0.S[3] }
        _Q1.f32[0] = sqrtf(_Q1.f32[0]);
        *(float32x4_t *)(v101 - 7) = vdivq_f32(_Q0, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0));
        uint64_t v102 = v261;
        long long v95 = v263;
      }
      *(_DWORD *)(v111 + v98) = v95;
      *(_DWORD *)(_X27 + 4) = DWORD1(v95);
      *(float *)(_X27 + 8) = v123;
      *(float *)(_X27 + 16) = v145;
      *(float *)(_X27 + 20) = v146;
      *(float *)(_X27 + 24) = v136;
      uint64_t v164 = *(void *)(v115 + 8 * v99);
      uint64_t v165 = *(void *)(v164 + 40);
      *(_OWORD *)uint64_t v164 = *(_OWORD *)v165;
      *(void *)(v164 + 16) = *(void *)(v165 + 16);
      *(_DWORD *)(v164 + 24) = *(_DWORD *)(v165 + 24);
      float v166 = *(v101 - 7);
      float v167 = *(v101 - 6);
      *(float *)uint64_t v165 = v166;
      *(float *)(v165 + 4) = v167;
      _Q6 = *(_OWORD *)(v101 - 5);
      *(_OWORD *)(v165 + 8) = _Q6;
      *(float *)(v165 + 24) = *(v101 - 1);
      float v169 = *(v101 - 27);
      float v170 = *(v101 - 26);
      *(float *)(v165 + 64) = v169;
      *(float *)(v165 + 68) = v170;
      float v171 = *(v101 - 25);
      *(float *)(v165 + 72) = v171;
      float v172 = *(v101 - 23);
      float v173 = *(v101 - 22);
      *(float *)(v165 + 80) = v172;
      *(float *)(v165 + 84) = v173;
      float v174 = *(v101 - 21);
      uint64_t v175 = *((void *)v118 + 22);
      uint64_t v176 = *(unsigned int *)(*(void *)(v175 + 272) + 4 * (*(_DWORD *)(v101 - 9) & 0x1FFFFFF));
      *(float *)(v165 + 88) = v174;
      int v177 = *(_DWORD *)(*(void *)(v175 + 136) + 4 * v176);
      float v178 = *(float *)(v165 + 140);
      if (!*(unsigned char *)(v119 + 100))
      {
        int v188 = *(unsigned __int8 *)(v119 + 102);
        unint64_t v1 = v118;
        float v189 = v265;
        if (v188)
        {
          float v190 = 1.0;
          if (v177)
          {
            unsigned int v191 = *(_DWORD *)(v165 + 152);
            if (v191 >= 2) {
              float v190 = 1.0 / (float)v191;
            }
          }
          *(float *)(v164 + 76) = v190;
        }
        if (v178 < 0.2 || v178 < v265)
        {
          float v192 = *(float *)(v165 + 112);
          float v193 = *(float *)(v165 + 116);
          float v194 = *(float *)(v165 + 120);
          if (v192 <= 0.0) {
            float v195 = 1.0;
          }
          else {
            float v195 = 1.0 / v192;
          }
          if (v193 <= 0.0) {
            float v196 = 1.0;
          }
          else {
            float v196 = 1.0 / v193;
          }
          if (v194 <= 0.0) {
            float v197 = 1.0;
          }
          else {
            float v197 = 1.0 / v194;
          }
          float v198 = *(float *)(_X27 + 8);
          float v199 = *(float *)(_X27 + 16) + *(float *)(_X27 + 16);
          float v200 = *(float *)(_X27 + 20) + *(float *)(_X27 + 20);
          float v201 = *(float *)(_X27 + 24) + *(float *)(_X27 + 24);
          _S19 = DWORD1(_Q6);
          __asm { FMLA            S20, S19, V6.S[1] }
          float v204 = vmlas_n_f32((float)(v167 * v200) + (float)(v166 * v199), v201, *(float *)&_Q6);
          float v205 = (float)(vmuls_lane_f32(-(float)((float)(v167 * v201) - (float)(*(float *)&_Q6 * v200)), *(float32x2_t *)&_Q6, 1)+ (float)(v199 * _S20))+ (float)(v166 * v204);
          float v206 = (float)(vmuls_lane_f32(-(float)((float)(*(float *)&_Q6 * v199) - (float)(v166 * v201)), *(float32x2_t *)&_Q6, 1)+ (float)(v200 * _S20))+ (float)(v167 * v204);
          float v207 = vmlas_n_f32(vmuls_lane_f32(-(float)((float)(v166 * v200) - (float)(v167 * v199)), *(float32x2_t *)&_Q6, 1)+ (float)(v201 * _S20), v204, *(float *)&_Q6);
          float32x2_t v208 = vadd_f32(*(float32x2_t *)(v111 + v98), *(float32x2_t *)(v164 + 48));
          *(float32x2_t *)(v164 + 48) = v208;
          float v209 = v198 + *(float *)(v164 + 56);
          *(float *)(v164 + 56) = v209;
          float v210 = v205 + *(float *)(v164 + 64);
          float v211 = v206 + *(float *)(v164 + 68);
          *(float *)(v164 + 64) = v210;
          *(float *)(v164 + 68) = v211;
          float v212 = v207 + *(float *)(v164 + 72);
          *(float *)(v164 + 72) = v212;
          float v213 = *(float *)(v165 + 124);
          if (v213 == 0.0) {
            float v213 = 1.0;
          }
          float v214 = (float)((float)(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v208, v208).i32[1]), v208.f32[0], v208.f32[0])
                               + (float)(v209 * v209))
                       + (float)((float)((float)((float)(v196 * (float)(v211 * v211))
                                               + (float)((float)(v210 * v210) * v195))
                                       + (float)((float)(v212 * v212) * v197))
                               * v213))
               * 0.5;
          float v215 = (float)(*(_DWORD *)(v165 + 148) + 1);
          float v216 = *(float *)(v165 + 132) * v215;
          if (v214 >= v216)
          {
            *(void *)(v164 + 48) = 0;
            *(_DWORD *)(v164 + 56) = 0;
            float v217 = 1.0;
            *(void *)(v164 + 64) = 0;
            *(_DWORD *)(v164 + 72) = 0;
            if (v216 != 0.0)
            {
              float v218 = v214 / v216;
              if (v218 >= 2.0) {
                float v217 = 1.0;
              }
              else {
                float v217 = v218 * 0.5;
              }
            }
            float v219 = (float)(v265 * (float)(v215 + -1.0)) + (float)(v217 * 0.4);
            *(float *)(v165 + 144) = v219;
            *(_WORD *)(v164 + 28) = 8 * (v178 == 0.0);
            goto LABEL_177;
          }
        }
        goto LABEL_176;
      }
      float v179 = *(float *)(v165 + 112);
      float v180 = *(float *)(v165 + 116);
      if (v179 <= 0.0) {
        float v181 = 1.0;
      }
      else {
        float v181 = 1.0 / v179;
      }
      if (v180 <= 0.0) {
        float v182 = 1.0;
      }
      else {
        float v182 = 1.0 / v180;
      }
      float v183 = *(float *)(v165 + 120);
      float v184 = *(float *)(v165 + 124);
      BOOL v150 = v183 <= 0.0;
      float v185 = 1.0 / v183;
      if (v150) {
        float v185 = 1.0;
      }
      if (v184 == 0.0) {
        float v184 = 1.0;
      }
      if (v177)
      {
        unsigned int v186 = *(_DWORD *)(v165 + 152);
        if (v186 >= 0xA) {
          unsigned int v186 = 10;
        }
        float v187 = (float)v186;
      }
      else
      {
        float v187 = 0.0;
      }
      unint64_t v1 = v118;
      float v220 = *(float *)(v111 + v98);
      float v222 = *(float *)(_X27 + 4);
      float v221 = *(float *)(_X27 + 8);
      float v223 = *(float *)(_X27 + 16) + *(float *)(_X27 + 16);
      float v224 = *(float *)(_X27 + 20) + *(float *)(_X27 + 20);
      float v225 = *(float *)(_X27 + 24) + *(float *)(_X27 + 24);
      _S19 = DWORD1(_Q6);
      __asm { FMLA            S31, S19, V6.S[1] }
      float v228 = vmlas_n_f32((float)(v167 * v224) + (float)(v166 * v223), v225, *(float *)&_Q6);
      float v229 = (float)(vmuls_lane_f32(-(float)((float)(v167 * v225) - (float)(*(float *)&_Q6 * v224)), *(float32x2_t *)&_Q6, 1)+ (float)(v223 * _S31))+ (float)(v166 * v228);
      float v230 = (float)(vmuls_lane_f32(-(float)((float)(*(float *)&_Q6 * v223) - (float)(v166 * v225)), *(float32x2_t *)&_Q6, 1)+ (float)(v224 * _S31))+ (float)(v167 * v228);
      float v231 = vmlas_n_f32(vmuls_lane_f32(-(float)((float)(v166 * v224) - (float)(v167 * v223)), *(float32x2_t *)&_Q6, 1)+ (float)(v225 * _S31), v228, *(float *)&_Q6);
      float v232 = (float)((float)((float)((float)(v222 * v222) + (float)(v220 * v220)) + (float)(v221 * v221))
                   + (float)(v184
                           * (float)((float)((float)(v182 * (float)(v230 * v230)) + (float)((float)(v229 * v229) * v181))
                                   + (float)((float)(v231 * v231) * v185))))
           * 0.5;
      float v233 = v187 * *(float *)(v165 + 136);
      float v189 = v265;
      float v234 = fmaxf(*(float *)(v164 + 60) - v265, 0.0);
      *(float *)(v164 + 60) = v234;
      float v235 = v265 + *(float *)(v164 + 76);
      if (v235 > 1.0) {
        float v235 = 1.0;
      }
      if (v232 >= v233)
      {
        *(_DWORD *)(v164 + 60) = 1069547520;
        if (v177) {
          float v242 = v235;
        }
        else {
          float v242 = 1.0;
        }
        goto LABEL_170;
      }
      if (!v177)
      {
        float v242 = 1.0;
LABEL_170:
        long long v238 = (__int16 *)(v164 + 28);
        char v243 = *(_WORD *)(v164 + 28);
        *(float *)(v164 + 76) = v242;
        LOWORD(v240) = v243 & 1;
LABEL_171:
        __int16 v241 = 4 * v240;
        goto LABEL_172;
      }
      if (v187 > 1.0)
      {
        float v236 = (float)(v265 * -0.5) + 1.0;
        *(float *)(v165 + 64) = v236 * v169;
        *(float *)(v165 + 68) = v236 * v170;
        *(float *)(v165 + 72) = v236 * v171;
        *(float *)(v165 + 80) = v236 * v172;
        *(float *)(v165 + 84) = v236 * v173;
        *(float *)(v165 + 88) = v236 * v174;
        float v235 = (float)(v235 * 0.75) + 0.025;
      }
      float v237 = *(float *)(v165 + 136);
      long long v238 = (__int16 *)(v164 + 28);
      char v239 = *(_WORD *)(v164 + 28);
      *(float *)(v164 + 76) = v235;
      int v240 = v239 & 1;
      if (v234 != 0.0 || v232 >= (float)(v237 * 0.25)) {
        goto LABEL_171;
      }
      if (v240) {
        __int16 v241 = 1;
      }
      else {
        __int16 v241 = 3;
      }
      *(_OWORD *)uint64_t v165 = *(_OWORD *)v164;
      *(void *)(v165 + 16) = *(void *)(v164 + 16);
      *(_DWORD *)(v165 + 24) = *(_DWORD *)(v164 + 24);
LABEL_172:
      *long long v238 = v241;
      if (v178 < 0.2 || v178 < v265)
      {
        float v244 = v220 + *(float *)(v164 + 48);
        float v245 = v222 + *(float *)(v164 + 52);
        float v246 = v221 + *(float *)(v164 + 56);
        float v247 = *(float *)(v164 + 68);
        float v248 = v229 + *(float *)(v164 + 64);
        *(float *)(v164 + 48) = v244;
        *(float *)(v164 + 52) = v245;
        *(float *)(v164 + 56) = v246;
        float v249 = v230 + v247;
        *(float *)(v164 + 64) = v248;
        *(float *)(v164 + 68) = v249;
        float v250 = v231 + *(float *)(v164 + 72);
        *(float *)(v164 + 72) = v250;
        float v251 = *(float *)(v165 + 132);
        if (v232 >= v251)
        {
          float v252 = (float)((float)((float)((float)(v245 * v245) + (float)(v244 * v244)) + (float)(v246 * v246))
                       + (float)(v184
                               * (float)((float)((float)(v182 * (float)(v249 * v249))
                                               + (float)((float)(v248 * v248) * v181))
                                       + (float)((float)(v250 * v250) * v185))))
               * 0.5;
          float v253 = (float)(*(_DWORD *)(v165 + 148) + 1);
          if (v252 >= (float)(v251 * v253))
          {
            *(void *)(v164 + 64) = 0;
            *(_DWORD *)(v164 + 72) = 0;
            float v254 = 1.0;
            *(void *)(v164 + 48) = 0;
            *(_DWORD *)(v164 + 56) = 0;
            if (v251 != 0.0)
            {
              float v255 = v252 / (float)(v251 * v253);
              if (v255 >= 2.0) {
                float v254 = 1.0;
              }
              else {
                float v254 = v255 * 0.5;
              }
            }
            float v219 = (float)(v265 * (float)(v253 + -1.0)) + (float)(v254 * 0.4);
            *(float *)(v165 + 144) = v219;
            if (v178 == 0.0) {
              *long long v238 = v241 | 8;
            }
            goto LABEL_177;
          }
        }
      }
LABEL_176:
      float v219 = fmaxf(v178 - v189, 0.0);
      *(float *)(v165 + 144) = v219;
LABEL_177:
      if (v219 == 0.0)
      {
        *(_WORD *)(v164 + 28) |= 0x10u;
        *(void *)(v164 + 48) = 0;
        *(_DWORD *)(v164 + 56) = 0;
        *(void *)(v164 + 64) = 0;
        *(_DWORD *)(v164 + 72) = 0;
      }
      ++v99;
      uint64_t v96 = *((void *)v1 + 6);
      v101 += 28;
      v98 += 32;
    }
    while (v99 < *(unsigned int *)(v96 + 8));
  }
  if ((*(_DWORD *)(v96 + 12) & 0x7FFFFFFF) != 0)
  {
    uint64_t v256 = 0;
    unint64_t v257 = 0;
    do
    {
      float32x4_t v258 = (void (*)(float))physx::Dy::ArticulationPImpl::sUpdateBodies[*(unsigned int *)(*(void *)(*(void *)(v3 + 12288) + v256) + 40)];
      if (v258)
      {
        v258(*(float *)(*((void *)v1 + 5) + 88));
        uint64_t v96 = *((void *)v1 + 6);
      }
      ++v257;
      v256 += 96;
    }
    while (v257 < (*(_DWORD *)(v96 + 12) & 0x7FFFFFFFu));
  }
}

void physx::Dy::PxsParallelSolverTask::~PxsParallelSolverTask(physx::Dy::PxsParallelSolverTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Dy::PxsParallelSolverTask::getName(physx::Dy::PxsParallelSolverTask *this)
{
  return "PxsDynamics.parallelSolver";
}

uint64_t physx::Dy::PxsParallelSolverTask::runInternal(physx::Dy::PxsParallelSolverTask *this)
{
  return physx::Dy::solveParallel(*((void *)this + 6), *((void *)this + 5), *((void *)this + 8));
}

void physx::Dy::PxsSolverConstraintPartitionTask::~PxsSolverConstraintPartitionTask(physx::Dy::PxsSolverConstraintPartitionTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Dy::PxsSolverConstraintPartitionTask::getName(physx::Dy::PxsSolverConstraintPartitionTask *this)
{
  return "PxsDynamics.solverConstraintPartition";
}

void physx::Dy::PxsSolverConstraintPartitionTask::runInternal(physx::Dy::PxsSolverConstraintPartitionTask *this)
{
  unint64_t v1 = (_DWORD *)*((void *)this + 6);
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 12288);
  int v4 = v1[3];
  if ((v4 & 0x7FFFFFFF) != 0)
  {
    unsigned int v5 = *(unsigned __int8 *)(v3 + 93);
    if ((v4 & 0x7FFFFFFE) != 0)
    {
      uint64_t v6 = *(void *)(v2 + 12264);
      unsigned int v7 = 64;
      unint64_t v8 = 1;
      do
      {
        unsigned int v9 = v7;
        int v10 = *(unsigned __int8 *)(v3 + 96 * v8 + 93);
        if (v8 << 6 < (v10 + (v8 << 6)))
        {
          uint64_t v11 = (long long *)(v6 + 48 * v7);
          unint64_t v12 = v7 + v10 - (unint64_t)v7;
          do
          {
            uint64_t v13 = (_OWORD *)(v6 + 48 * v5++);
            long long v14 = *v11;
            long long v15 = v11[2];
            v13[1] = v11[1];
            v13[2] = v15;
            *uint64_t v13 = v14;
            v11 += 3;
            --v12;
          }
          while (v12);
          unint64_t v1 = (_DWORD *)*((void *)this + 6);
        }
        ++v8;
        unsigned int v7 = v9 + 64;
      }
      while (v8 < (v1[3] & 0x7FFFFFFFu));
    }
    unsigned int v16 = *(_DWORD *)(v2 + 12024) + v5;
    *(_DWORD *)(v2 + 12024) = v16;
  }
  else
  {
    unsigned int v16 = *(_DWORD *)(v2 + 12024);
  }
  uint64_t v17 = *(void *)(v2 + 12016);
  uint64_t v18 = *(void *)(*((void *)this + 5) + 544);
  uint64_t v19 = *((unsigned int *)this + 42);
  *(void *)(v2 + 11896) = 0;
  *(void *)(v2 + 11912) = 0;
  *(void *)(v2 + 11904) = 0;
  if (v16)
  {
    uint64_t v23 = v18 + 32 * v19;
    int v25 = 32;
    uint64_t v26 = v3;
    uint64_t v28 = v17;
    int v27 = *(_DWORD *)(v2 + 12296);
    int v24 = v1[2];
    unsigned int v29 = v16;
    uint64_t v20 = *(void *)(v2 + 12056);
    uint64_t v30 = *(void *)(v2 + 12032);
    uint64_t v31 = v20;
    memset(v32, 0, 12);
    v32[2] = v2 + 11920;
    v32[3] = v2 + 11952;
    char v33 = *((unsigned char *)this + 172);
    *(_DWORD *)(v2 + 12232) = physx::Dy::partitionContactConstraints(&v23);
    *(_DWORD *)(v2 + 11896) = v32[0];
    *(void *)(v2 + 11904) = *(void *)((char *)v32 + 4);
  }
  else
  {
    long long v21 = *(void **)(v2 + 11920);
    size_t v22 = (4 * *(_DWORD *)(v2 + 11932));
    bzero(v21, v22);
  }
}

void physx::Dy::UpdateContinuationTask::~UpdateContinuationTask(physx::Dy::UpdateContinuationTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Dy::UpdateContinuationTask::getName(physx::Dy::UpdateContinuationTask *this)
{
  return "UpdateContinuationTask";
}

uint64_t physx::Dy::UpdateContinuationTask::runInternal(physx::Dy::UpdateContinuationTask *this)
{
  uint64_t v1 = *((void *)this + 5);
  uint64_t v2 = *((void *)this + 7);
  uint64_t v59 = *((void *)this + 6);
  unsigned int v3 = *(_DWORD *)(v59 + 552);
  unsigned int v4 = *(_DWORD *)(v1 + 140);
  unsigned int v5 = *(_DWORD *)(v1 + 144);
  uint64_t v6 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(v1 + 744), 48, 0x10u);
  *(void *)(v6 + 8) = *(void *)(v1 + 768);
  *(void *)(v6 + 16) = 0;
  *(_DWORD *)(v6 + 32) = 0;
  *(void *)uint64_t v6 = &unk_26E724AF0;
  *(void *)(v6 + 40) = v1;
  *(_DWORD *)(v6 + 32) = 1;
  *(void *)(v6 + 24) = v2;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    *(void *)(v6 + 16) = *(void *)(*(void *)(v6 + 24) + 16);
  }
  uint64_t v49 = v6;
  if (v3)
  {
    unsigned int v7 = 0;
    unsigned int v8 = 0;
    unsigned int v9 = 0;
    unsigned int v10 = 0;
    unsigned int v11 = 0;
    uint64_t v12 = *(void *)(v59 + 544);
    uint64_t v56 = v1 + 696;
    uint64_t v45 = v12;
    unsigned int v47 = v4;
    unsigned int v48 = v3;
    unsigned int v46 = v5;
    uint64_t v74 = v1;
    do
    {
      unsigned int v13 = 0;
      unsigned int v14 = 0;
      unsigned __int32 v15 = 0;
      unsigned int v16 = v11;
      uint64_t v17 = *(void *)(v1 + 480) + 32 * v10;
      uint64_t v73 = *(void *)(v1 + 496) + 8 * v10;
      uint64_t v70 = *(void *)(v1 + 632);
      uint64_t v72 = v12 + 4 * v11;
      if (v3 <= v11 + 1) {
        unsigned int v18 = v11 + 1;
      }
      else {
        unsigned int v18 = v3;
      }
      int32x2_t v19 = 0;
      uint64_t v71 = *(void *)(v1 + 648) + 4 * v10;
      while (1)
      {
        BOOL v20 = v15 && v13 >= v4;
        if (v20 || v14 >= v5) {
          break;
        }
        uint64_t v22 = *(void *)(v59 + 344) + 44 * *(unsigned int *)(v12 + 4 * v11);
        v13 += *(_DWORD *)(v22 + 8);
        v14 += *(_DWORD *)(v22 + 12);
        int32x2_t v19 = vadd_s32(*(int32x2_t *)(v22 + 36), v19);
        unsigned __int32 v15 = vadd_s32(v19, vdup_lane_s32(v19, 1)).u32[0];
        if (v18 == ++v11)
        {
          unsigned int v11 = v18;
          break;
        }
      }
      if ((v14 & 0x7FFFFFFF) + v13)
      {
        uint64_t v64 = *(void *)(v1 + 464) + 8 * v7;
        uint64_t v65 = *(void *)(v1 + 448) + 48 * v7;
        uint64_t v66 = *(void *)(v1 + 432) + 48 * v7;
        uint64_t v67 = *(void *)(v1 + 416) + 48 * v7;
        uint64_t v68 = *(void *)(v1 + 664) + 32 * v8;
        uint64_t v63 = *(void *)(v1 + 512) + 8 * v10;
        uint64_t v69 = *(void *)(v1 + 528) + 8 * v9;
        int32x2_t v58 = v19;
        unsigned int v53 = v7;
        unsigned int v54 = v9;
        unsigned int v55 = v8;
        unsigned int v23 = v11 - v16;
        unsigned int v52 = v10;
        unsigned int v24 = *(_DWORD *)(v1 + 680) + v10;
        uint64_t v50 = *(void *)(v1 + 688);
        char v62 = *(unsigned char *)(v1 + 101);
        int v25 = *(pthread_mutex_t ***)(v1 + 744);
        if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
          pthread_mutex_lock(*v25);
        }
        uint64_t v26 = physx::Cm::FlushPool::allocate(v25, 24, 0x10u);
        *(void *)uint64_t v26 = 0;
        *(_DWORD *)(v26 + 8) = v13;
        *(_DWORD *)(v26 + 12) = v14 & 0x7FFFFFFF;
        *(int32x2_t *)(v26 + 16) = v58;
        uint64_t v60 = v26;
        uint64_t NotThreadSafe = physx::Cm::FlushPool::allocateNotThreadSafe((physx::Cm::FlushPool *)v25, 216, 0x10u);
        int v28 = *(_DWORD *)(v1 + 680);
        uint64_t v29 = *(void *)(v1 + 768);
        *(void *)(NotThreadSafe + 16) = 0;
        *(void *)(NotThreadSafe + 24) = 0;
        *(_DWORD *)(NotThreadSafe + 32) = 0;
        *(void *)uint64_t NotThreadSafe = &unk_26E724700;
        *(void *)(NotThreadSafe + 8) = v29;
        *(void *)(NotThreadSafe + 40) = v1;
        *(void *)(NotThreadSafe + 48) = v26;
        *(void *)(NotThreadSafe + 56) = v63;
        *(void *)(NotThreadSafe + 64) = v69;
        *(void *)(NotThreadSafe + 72) = 0;
        *(void *)(NotThreadSafe + 80) = v68;
        *(void *)(NotThreadSafe + 88) = v72;
        unsigned int v61 = v23;
        *(_DWORD *)(NotThreadSafe + 96) = v23;
        *(void *)(NotThreadSafe + 104) = v70;
        *(void *)(NotThreadSafe + 112) = v71;
        *(void *)(NotThreadSafe + 120) = v67;
        *(void *)(NotThreadSafe + 128) = v66;
        *(void *)(NotThreadSafe + 136) = v65;
        *(void *)(NotThreadSafe + 144) = v64;
        *(void *)(NotThreadSafe + 152) = v17;
        *(void *)(NotThreadSafe + 160) = v73;
        *(_DWORD *)(NotThreadSafe + 168) = v24;
        *(_DWORD *)(NotThreadSafe + 172) = v28;
        *(void *)(NotThreadSafe + 176) = v59;
        *(void *)(NotThreadSafe + 184) = v70;
        *(void *)(NotThreadSafe + 192) = v50;
        uint64_t v30 = (physx::Cm::FlushPool *)v25;
        unsigned int v31 = v24;
        *(void *)(NotThreadSafe + 200) = v56;
        *(unsigned char *)(NotThreadSafe + 208) = v62;
        unint64_t v32 = v30;
        uint64_t v33 = physx::Cm::FlushPool::allocateNotThreadSafe(v30, 184, 0x10u);
        uint64_t v34 = *(void *)(v74 + 768);
        *(void *)(v33 + 16) = 0;
        *(void *)(v33 + 24) = 0;
        *(_DWORD *)(v33 + 32) = 0;
        *(void *)uint64_t v33 = &unk_26E724850;
        *(void *)(v33 + 8) = v34;
        *(void *)(v33 + 40) = v74;
        *(void *)(v33 + 48) = v60;
        *(void *)(v33 + 56) = v63;
        *(void *)(v33 + 64) = v69;
        *(void *)(v33 + 72) = 0;
        *(void *)(v33 + 80) = v68;
        *(void *)(v33 + 88) = v72;
        *(_DWORD *)(v33 + 96) = v23;
        *(void *)(v33 + 104) = v70;
        *(void *)(v33 + 112) = v71;
        *(void *)(v33 + 120) = v67;
        *(void *)(v33 + 128) = v66;
        *(void *)(v33 + 136) = v65;
        *(void *)(v33 + 144) = v64;
        *(void *)(v33 + 152) = v17;
        *(void *)(v33 + 160) = v73;
        *(_DWORD *)(v33 + 168) = v24;
        unsigned int v57 = v24;
        *(void *)(v33 + 176) = v56;
        uint64_t v35 = physx::Cm::FlushPool::allocateNotThreadSafe(v32, 80, 0x10u);
        uint64_t v36 = *(void *)(v74 + 768);
        *(void *)(v35 + 16) = 0;
        *(void *)(v35 + 24) = 0;
        *(_DWORD *)(v35 + 32) = 0;
        *(void *)uint64_t v35 = &unk_26E7245D0;
        *(void *)(v35 + 8) = v36;
        *(void *)(v35 + 40) = v74;
        *(void *)(v35 + 48) = v60;
        *(_DWORD *)(v35 + 56) = v24;
        *(void *)(v35 + 64) = v56;
        *(unsigned char *)(v35 + 72) = v62;
        uint64_t v37 = physx::Cm::FlushPool::allocateNotThreadSafe(v32, 184, 0x10u);
        uint64_t v38 = *(void *)(v74 + 768);
        *(void *)(v37 + 16) = 0;
        *(void *)(v37 + 24) = 0;
        *(_DWORD *)(v37 + 32) = 0;
        *(void *)uint64_t v37 = &unk_26E7248C0;
        *(void *)(v37 + 8) = v38;
        *(void *)(v37 + 40) = v74;
        *(void *)(v37 + 48) = v60;
        *(void *)(v37 + 56) = v63;
        *(void *)(v37 + 64) = v69;
        *(void *)(v37 + 72) = 0;
        *(void *)(v37 + 80) = v68;
        *(void *)(v37 + 88) = v72;
        *(_DWORD *)(v37 + 96) = v61;
        *(void *)(v37 + 104) = v70;
        *(void *)(v37 + 112) = v71;
        *(void *)(v37 + 120) = v67;
        *(void *)(v37 + 128) = v66;
        *(void *)(v37 + 136) = v65;
        *(void *)(v37 + 144) = v64;
        *(void *)(v37 + 152) = v17;
        *(void *)(v37 + 160) = v73;
        *(_DWORD *)(v37 + 168) = v31;
        *(void *)(v37 + 176) = v59 + 224;
        unsigned int v39 = v32;
        uint64_t v1 = v74;
        int v51 = (pthread_mutex_t **)v39;
        uint64_t v40 = physx::Cm::FlushPool::allocateNotThreadSafe(v39, 176, 0x10u);
        uint64_t v41 = *(void *)(v74 + 768);
        *(void *)(v40 + 16) = 0;
        *(void *)(v40 + 24) = 0;
        *(_DWORD *)(v40 + 32) = 0;
        *(void *)uint64_t v40 = &unk_26E7249A0;
        *(void *)(v40 + 8) = v41;
        *(void *)(v40 + 40) = v74;
        *(void *)(v40 + 48) = v60;
        *(void *)(v40 + 56) = v63;
        *(void *)(v40 + 64) = v69;
        *(void *)(v40 + 72) = 0;
        *(void *)(v40 + 80) = v68;
        *(void *)(v40 + 88) = v72;
        *(_DWORD *)(v40 + 96) = v61;
        *(void *)(v40 + 104) = v70;
        *(void *)(v40 + 112) = v71;
        *(void *)(v40 + 120) = v67;
        *(void *)(v40 + 128) = v66;
        *(void *)(v40 + 136) = v65;
        *(void *)(v40 + 144) = v64;
        *(void *)(v40 + 152) = v17;
        *(void *)(v40 + 160) = v73;
        *(_DWORD *)(v40 + 168) = v57;
        *(unsigned char *)(v40 + 172) = v62;
        *(_DWORD *)(v33 + 32) = 1;
        *(void *)(v33 + 24) = v49;
        (*(void (**)(uint64_t))(*(void *)v49 + 32))(v49);
        *(void *)(v33 + 16) = *(void *)(*(void *)(v33 + 24) + 16);
        *(_DWORD *)(v37 + 32) = 1;
        *(void *)(v37 + 24) = v33;
        (*(void (**)(uint64_t))(*(void *)v33 + 32))(v33);
        *(void *)(v37 + 16) = *(void *)(*(void *)(v37 + 24) + 16);
        (*(void (**)(uint64_t))(*(void *)v33 + 40))(v33);
        *(_DWORD *)(v35 + 32) = 1;
        *(void *)(v35 + 24) = v37;
        (*(void (**)(uint64_t))(*(void *)v37 + 32))(v37);
        *(void *)(v35 + 16) = *(void *)(*(void *)(v35 + 24) + 16);
        (*(void (**)(uint64_t))(*(void *)v37 + 40))(v37);
        *(_DWORD *)(v40 + 32) = 1;
        *(void *)(v40 + 24) = v35;
        (*(void (**)(uint64_t))(*(void *)v35 + 32))(v35);
        *(void *)(v40 + 16) = *(void *)(*(void *)(v40 + 24) + 16);
        (*(void (**)(uint64_t))(*(void *)v35 + 40))(v35);
        *(_DWORD *)(NotThreadSafe + 32) = 1;
        *(void *)(NotThreadSafe + 24) = v40;
        (*(void (**)(uint64_t))(*(void *)v40 + 32))(v40);
        *(void *)(NotThreadSafe + 16) = *(void *)(*(void *)(NotThreadSafe + 24) + 16);
        (*(void (**)(uint64_t))(*(void *)v40 + 40))(v40);
        if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
          pthread_mutex_unlock(*v51);
        }
        (*(void (**)(uint64_t))(*(void *)NotThreadSafe + 40))(NotThreadSafe);
        unsigned int v4 = v47;
        unsigned int v3 = v48;
        unsigned int v5 = v46;
        unsigned int v9 = v54;
        unsigned int v8 = v55;
        unsigned int v7 = v53;
        unsigned int v10 = v52;
        uint64_t v12 = v45;
        v19.i32[0] = v58.i32[0];
      }
      v10 += v13;
      v9 += v14;
      v8 += v19.i32[0];
      v7 += v15 + (v14 << 6);
    }
    while (v11 < v3);
  }
  (*(void (**)(uint64_t))(*(void *)v49 + 40))(v49);
  uint64_t v42 = *(uint64_t (**)(void))(**((void **)this + 7) + 40);
  return v42();
}

void physx::Dy::KinematicCopyTask::~KinematicCopyTask(physx::Dy::KinematicCopyTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Dy::KinematicCopyTask::getName(physx::Dy::KinematicCopyTask *this)
{
  return "KinematicCopyTask";
}

float physx::Dy::KinematicCopyTask::runInternal(physx::Dy::KinematicCopyTask *this)
{
  if (*((_DWORD *)this + 12))
  {
    unint64_t v2 = 0;
    uint64_t v3 = 112;
    do
    {
      unint64_t v4 = (unint64_t)*(unsigned int *)(*((void *)this + 5) + 4 * v2) >> 7;
      uint64_t v5 = *(void *)(*(void *)(*((void *)this + 7) + 24) + 32 * v4 + 24);
      uint64_t v6 = *(void *)(v5 + 40);
      ++v2;
      physx::Dy::copyToSolverBodyData(v6 + 64, v6 + 80, (float *)(v6 + 112), v6, v4, *((void *)this + 8) + v3, *(unsigned __int8 *)(v6 + 158), *(float *)(v6 + 124), *(float *)(v6 + 76), *(float *)(v6 + 128), *(float *)(v6 + 92));
      uint64_t v7 = *(void *)(v5 + 40);
      *(_OWORD *)uint64_t v5 = *(_OWORD *)v7;
      *(void *)(v5 + 16) = *(void *)(v7 + 16);
      float result = *(float *)(v7 + 24);
      *(float *)(v5 + 24) = result;
      v3 += 112;
    }
    while (v2 < *((unsigned int *)this + 12));
  }
  return result;
}

void physx::Dy::PxsForceThresholdTask::~PxsForceThresholdTask(physx::Dy::PxsForceThresholdTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Dy::PxsForceThresholdTask::getName(physx::Dy::PxsForceThresholdTask *this)
{
  return "PxsDynamics.createForceChangeThresholdStream";
}

void physx::Dy::PxsForceThresholdTask::runInternal(physx::Dy::PxsForceThresholdTask *this)
{
  uint64_t v2 = *((void *)this + 5);
  uint64_t v3 = *(void *)(v2 + 8);
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(v2 + 684);
  physx::Dy::ThresholdTable::build(v2 + 24, v3);
  uint64_t v4 = *((void *)this + 5);
  uint64_t v5 = *(unsigned int *)(v4 + 760);
  uint64_t v6 = *(void *)(v4 + 576 + 8 * v5);
  uint64_t v7 = *(void *)(v4 + 576 + 8 * (1 - v5));
  *(_DWORD *)(v6 + 16) = 0;
  if (*(_DWORD *)(v2 + 64))
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      unsigned int v10 = (float *)(*(void *)(v2 + 48) + v8);
      uint64_t v11 = *(void *)(v3 + 8) + 32 * *(unsigned int *)v10;
      float v12 = v10[1];
      if (v12 > (float)(*(float *)(v11 + 12) * *(float *)(*((void *)this + 5) + 88)))
      {
        *(float *)(v11 + 24) = v12;
        uint64_t v13 = *(unsigned int *)(v6 + 16);
        if ((*(_DWORD *)(v6 + 20) & 0x7FFFFFFFu) <= v13)
        {
          physx::shdfnd::Array<physx::Dy::ThresholdStreamElement,physx::shdfnd::VirtualAllocator>::growAndPushBack(v6, (_OWORD *)v11);
        }
        else
        {
          unsigned int v14 = (_OWORD *)(*(void *)(v6 + 8) + 32 * v13);
          long long v15 = *(_OWORD *)(v11 + 16);
          *unsigned int v14 = *(_OWORD *)v11;
          v14[1] = v15;
          ++*(_DWORD *)(v6 + 16);
        }
      }
      ++v9;
      v8 += 8;
    }
    while (v9 < *(unsigned int *)(v2 + 64));
    uint64_t v4 = *((void *)this + 5);
  }
  uint64_t v16 = *(void *)(v4 + 16);
  *(_DWORD *)(v16 + 16) = 0;
  unint64_t v17 = *(unsigned int *)(v7 + 16);
  uint64_t v18 = *(unsigned int *)(v6 + 16);
  if (!v17)
  {
    if ((*(_DWORD *)(v16 + 20) & 0x7FFFFFFFu) < v18) {
      physx::shdfnd::Array<physx::Dy::ThresholdStreamElement,physx::shdfnd::VirtualAllocator>::recreate(v16, *(_DWORD *)(v6 + 16));
    }
    *(_DWORD *)(v16 + 16) = v18;
    long long v21 = *(void **)(v16 + 8);
    uint64_t v22 = *(const void **)(v6 + 8);
    memcpy(v21, v22, (32 * v18));
    return;
  }
  int32x2_t v19 = (void **)(v4 + 592);
  physx::Dy::ThresholdTable::build(v2 + 24, v7);
  uint64_t v20 = (v18 + v17);
  if ((*(_DWORD *)(v4 + 604) & 0x7FFFFFFFu) >= v20)
  {
    *(_DWORD *)(v4 + 600) = v20;
    if (!v20)
    {
      char v23 = 1;
      if (!v18) {
        goto LABEL_29;
      }
      goto LABEL_19;
    }
  }
  else
  {
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(v4 + 592, v18 + v17);
    *(_DWORD *)(v4 + 600) = v20;
  }
  memset_pattern16(*v19, &unk_23441FF10, 4 * (v20 - 1) + 4);
  char v23 = 0;
  if (!v18) {
    goto LABEL_29;
  }
LABEL_19:
  uint64_t v24 = 0;
  uint64_t v25 = *(void *)(v6 + 8);
  uint64_t v26 = *(void *)(v2 + 32);
  uint64_t v28 = *(void *)(v2 + 48);
  uint64_t v27 = *(void *)(v2 + 56);
  do
  {
    uint64_t v29 = v25 + 32 * v24;
    unsigned int v30 = *(_DWORD *)(v29 + 16);
    unint64_t v31 = *(unsigned int *)(v29 + 20);
    unint64_t v32 = ((v31 >> 7) & 0xFE000000FFFFFFFFLL | ((unint64_t)(v30 >> 7) << 32)) + ~(v31 >> 7 << 32);
    unint64_t v33 = (v32 ^ (v32 >> 22)) + ~((v32 ^ (v32 >> 22)) << 13);
    unint64_t v34 = (9 * (v33 ^ (v33 >> 8))) ^ ((9 * (v33 ^ (v33 >> 8))) >> 15);
    uint64_t v35 = *(unsigned int *)(v26
                          + 4
                          * ((((v34 + ~(v34 << 27)) >> 31) ^ (v34 + ~(v34 << 27)))
                           % *(_DWORD *)(v2 + 40)));
    if (v35 != -1)
    {
      while (1)
      {
        uint64_t v36 = *(unsigned int *)(v28 + 8 * v35);
        uint64_t v37 = *(void *)(v7 + 8) + 32 * v36;
        if (*(_DWORD *)(v37 + 16) == v30
          && *(_DWORD *)(v37 + 20) == v31
          && *(void *)v37 == *(void *)(v25 + 32 * v24))
        {
          break;
        }
        uint64_t v35 = *(unsigned int *)(v27 + 4 * v35);
        if (v35 == -1) {
          goto LABEL_25;
        }
      }
      uint64_t v38 = *v19;
      *((_DWORD *)*v19 + v36) = 0;
      v38[(v17 + v24)] = 0;
    }
LABEL_25:
    ++v24;
  }
  while (v24 != v18);
LABEL_29:
  if ((v23 & 1) == 0)
  {
    uint64_t v39 = 0;
    unint64_t v40 = 0;
    while (!*((_DWORD *)*v19 + v40))
    {
      if (v40 < v17)
      {
        uint64_t v44 = *(void *)(v7 + 8) + v39;
        goto LABEL_37;
      }
LABEL_41:
      ++v40;
      v39 += 32;
      if (v20 == v40) {
        return;
      }
    }
    if (v40 >= v17)
    {
      uint64_t v44 = *(void *)(v6 + 8) + 32 * (v40 - v17);
LABEL_37:
      *(void *)&long long v50 = 0x7F0000007FLL;
      long long v45 = *(_OWORD *)(v44 + 16);
      long long v49 = *(_OWORD *)v44;
      long long v50 = v45;
      int v43 = *(_DWORD *)(v44 + 24);
    }
    else
    {
      uint64_t v41 = (long long *)(*(void *)(v7 + 8) + v39);
      *(void *)&long long v50 = 0x7F0000007FLL;
      long long v42 = v41[1];
      long long v49 = *v41;
      long long v50 = v42;
      int v43 = 0;
    }
    DWORD2(v50) = v43;
    uint64_t v46 = *(unsigned int *)(v16 + 16);
    if ((*(_DWORD *)(v16 + 20) & 0x7FFFFFFFu) <= v46)
    {
      physx::shdfnd::Array<physx::Dy::ThresholdStreamElement,physx::shdfnd::VirtualAllocator>::growAndPushBack(v16, &v49);
    }
    else
    {
      unsigned int v47 = (_OWORD *)(*(void *)(v16 + 8) + 32 * v46);
      long long v48 = v50;
      _OWORD *v47 = v49;
      v47[1] = v48;
      ++*(_DWORD *)(v16 + 16);
    }
    goto LABEL_41;
  }
}

uint64_t physx::Dy::ThresholdTable::build(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 16);
  if (v3)
  {
    unsigned int v5 = (2 * v3) | 1;
    unsigned int v6 = *(_DWORD *)(result + 44);
    if (v3 <= v6 && v3 >= v6 >> 2)
    {
      unsigned int v10 = *(void **)(result + 8);
      unsigned int v8 = 4 * v5;
    }
    else
    {
      if (*(void *)result) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      unsigned int v8 = 4 * v5;
      if (4 * v5 + 12 * v3) {
        uint64_t v9 = (*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
      }
                                                                                             + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v5 + 12 * v3, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/include/DyThresholdTable.h", 198);
      else {
        uint64_t v9 = 0;
      }
      *(void *)(v2 + 24) = v9;
      *(void *)(v2 + 32) = v9 + (8 * v3);
      unsigned int v10 = (void *)(v9 + (12 * v3));
      *(void *)uint64_t v2 = v9;
      *(void *)(v2 + 8) = v10;
      *(_DWORD *)(v2 + 44) = v3;
      *(_DWORD *)(v2 + 20) = v5;
    }
    memset(v10, 255, v8);
    uint64_t v11 = 0;
    unsigned int v12 = 0;
    *(_DWORD *)(v2 + 40) = 0;
    *(_DWORD *)(v2 + 16) = v5;
    uint64_t v13 = *(void *)(v2 + 8);
    uint64_t v15 = *(void *)(v2 + 24);
    uint64_t v14 = *(void *)(v2 + 32);
    uint64_t v16 = *(void *)(a2 + 8);
    do
    {
      uint64_t v17 = v16 + 32 * v11;
      unsigned int v18 = *(_DWORD *)(v17 + 16);
      unint64_t v19 = *(unsigned int *)(v17 + 20);
      float v20 = *(float *)(v17 + 8);
      unint64_t v21 = ((v19 >> 7) & 0xFE000000FFFFFFFFLL | ((unint64_t)(v18 >> 7) << 32)) + ~(v19 >> 7 << 32);
      unint64_t v22 = (v21 ^ (v21 >> 22)) + ~((v21 ^ (v21 >> 22)) << 13);
      unint64_t v23 = (9 * (v22 ^ (v22 >> 8))) ^ ((9 * (v22 ^ (v22 >> 8))) >> 15);
      uint64_t v24 = (((v23 + ~(v23 << 27)) >> 31) ^ (v23 + ~(v23 << 27))) % v5;
      float result = *(unsigned int *)(v13 + 4 * v24);
      if (result == -1)
      {
LABEL_22:
        *(_DWORD *)(v14 + 4 * v12) = result;
        *(_DWORD *)(v13 + 4 * v24) = v12;
        uint64_t v27 = v15 + 8 * v12;
        *(_DWORD *)uint64_t v27 = v11;
        *(float *)(v27 + 4) = v20;
        ++v12;
      }
      else
      {
        uint64_t v25 = *(unsigned int *)(v13 + 4 * v24);
        while (1)
        {
          uint64_t v26 = v16 + 32 * *(unsigned int *)(v15 + 8 * v25);
          if (v18 == *(_DWORD *)(v26 + 16) && v19 == *(_DWORD *)(v26 + 20)) {
            break;
          }
          uint64_t v25 = *(unsigned int *)(v14 + 4 * v25);
          if (v25 == -1) {
            goto LABEL_22;
          }
        }
        *(float *)(v15 + 8 * v25 + 4) = v20 + *(float *)(v15 + 8 * v25 + 4);
      }
      ++v11;
    }
    while (v11 != v3);
    *(_DWORD *)(v2 + 40) = v12;
  }
  else
  {
    *(void *)(result + 40) = 0;
    *(void *)(result + 16) = 0;
    if (*(void *)result) {
      float result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
    *(void *)uint64_t v2 = 0;
  }
  return result;
}

void physx::Dy::PxsCreateFinalizeContactsTask::~PxsCreateFinalizeContactsTask(physx::Dy::PxsCreateFinalizeContactsTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Dy::PxsCreateFinalizeContactsTask::getName(physx::Dy::PxsCreateFinalizeContactsTask *this)
{
  return "PxsDynamics.createFinalizeContacts";
}

uint64_t physx::Dy::PxsCreateFinalizeContactsTask::runInternal(physx::Dy::PxsCreateFinalizeContactsTask *this)
{
  v119[85] = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 6);
  uint64_t v1 = *((void *)this + 7);
  uint64_t v3 = *((unsigned int *)this + 20);
  uint64_t v4 = *((unsigned int *)this + 21);
  uint64_t v5 = *((void *)this + 8);
  uint64_t v6 = *((void *)this + 9);
  uint64_t v7 = *(unsigned int *)(v5 + 148);
  float v8 = *(float *)(v5 + 136);
  float v9 = *(float *)(v5 + 120);
  float v10 = *(float *)(v5 + 124);
  float v11 = *(float *)(v5 + 88);
  if (*(float *)(v5 + 96) >= *(float *)(v5 + 92)) {
    float v12 = *(float *)(v5 + 92);
  }
  else {
    float v12 = *(float *)(v5 + 96);
  }
  float v13 = *(float *)(v5 + 128);
  uint64_t v14 = *(void *)(v1 + 12032);
  uint64_t v15 = *(void *)(v1 + 12040);
  uint64_t v108 = *((void *)this + 8);
  unint64_t v16 = (unint64_t)physx::shdfnd::SListImpl::pop(*(physx::shdfnd::SListImpl **)(v5 + 400));
  if (!v16)
  {
    uint64_t v17 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unsigned int v18 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ThreadContext>::getName() [T = physx::Dy::ThreadContext]";
    }
    else {
      unsigned int v18 = "<allocation names disabled>";
    }
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v17 + 24) + 16))(v17 + 24, 12343, v18, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/include/utils/PxcThreadCoherentCache.h", 82);
    if (v19)
    {
      unint64_t v16 = (v19 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(void *)(v16 - 8) = v16 - v19;
    }
    else
    {
      unint64_t v16 = 0;
    }
    physx::Dy::ThreadContext::ThreadContext((physx::Dy::ThreadContext *)v16, *(physx::PxcNpMemBlockPool **)(v108 + 408));
  }
  *(void *)(v16 + 11880) = 0;
  *(_DWORD *)(v16 + 11888) = 0;
  *(_DWORD *)(v16 + 12168) = 0;
  unsigned int v20 = *(_DWORD *)(v1 + 12256);
  if ((*(_DWORD *)(v16 + 12172) & 0x7FFFFFFFu) < v20)
  {
    physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate(v16 + 12160, v20);
    unsigned int v20 = *(_DWORD *)(v1 + 12256);
  }
  *(_DWORD *)(v16 + 12168) = v20;
  uint64_t v21 = *(void *)(v16 + 12160);
  v113[0] = (uint64_t (**)(void, void))&unk_26E724CB8;
  v113[1] = (uint64_t (**)(void, void))(v1 + 11848);
  unint64_t v107 = v16;
  uint64_t v113[2] = (uint64_t (**)(void, void))(v16 + 11872);
  v113[3] = (uint64_t (**)(void, void))(v16 + 11824);
  v113[4] = (uint64_t (**)(void, void))(v16 + 12208);
  uint64_t v22 = v3;
  if (v3 < v4)
  {
    int v23 = 0;
    float v24 = *(float *)(v108 + 132);
    uint64_t v104 = v7;
    long long v25 = xmmword_23435FBB0;
    __asm { FMOV            V15.2S, #1.0 }
    uint64_t v110 = v4;
    uint64_t v111 = v21;
    uint64_t v31 = v15;
    uint64_t v102 = v2;
    uint64_t v103 = v15;
    while (1)
    {
      unint64_t v32 = (unsigned int *)(v31 + 8 * v22);
      unsigned int v33 = *v32;
      int v34 = *(unsigned __int16 *)(v14 + 48 * *v32 + 30);
      if (v34 == 2) {
        break;
      }
      if (v34 == 1)
      {
        long long v114 = 0u;
        long long v115 = 0u;
        long long v116 = 0u;
        long long v117 = 0u;
        uint64_t v35 = v31 + 8 * v22;
        unsigned int v38 = *(unsigned __int16 *)(v35 + 4);
        uint64_t v37 = (_WORD *)(v35 + 4);
        unsigned int v36 = v38;
        if (v38)
        {
          float v109 = v37;
          uint64_t v106 = (_DWORD *)(v31 + 8 * v22);
          uint64_t v39 = 0;
          uint64_t v40 = 0;
          uint64_t v41 = *(void *)(v6 + 32);
          do
          {
            unsigned int v42 = v33 + v40;
            uint64_t v43 = v14 + 48 * (v33 + v40);
            uint64_t v44 = *(void *)(v43 + 32);
            *((void *)&v116 + v40) = v44;
            uint64_t v45 = (*(_DWORD *)(v6 + 4 * (*(_DWORD *)(v44 + 108) & 7)) + (*(_DWORD *)(v44 + 108) >> 3));
            *((void *)&v114 + v40) = v41 + 32 * v45;
            uint64_t v46 = v2;
            if (*(__int16 *)(v43 + 16) == -1) {
              uint64_t v46 = v2 + 112 * *(unsigned int *)(v14 + 48 * v42 + 20);
            }
            int v47 = *(unsigned __int16 *)(v14 + 48 * v42 + 18);
            uint64_t v48 = v2;
            if (v47 == 0xFFFF) {
              uint64_t v48 = v2 + 112 * *(unsigned int *)(v14 + 48 * v42 + 24);
            }
            long long v49 = &v118[v39];
            *((void *)v49 + 5) = v46;
            *((void *)v49 + 6) = v48;
            uint64_t v51 = *(void *)(v44 + 32);
            uint64_t v50 = *(void *)(v44 + 40);
            char v52 = *(unsigned char *)(v51 + 28);
            if (v50) {
              v52 |= *(unsigned char *)(v50 + 28);
            }
            *(_OWORD *)(v49 + 56) = *(_OWORD *)v51;
            *((void *)v49 + 9) = *(void *)(v51 + 16);
            *((_DWORD *)v49 + 20) = *(_DWORD *)(v51 + 24);
            if (v50)
            {
              long long v53 = *(_OWORD *)v50;
              uint64_t v54 = *(void *)(v50 + 16);
              int v55 = *(_DWORD *)(v50 + 24);
            }
            else
            {
              uint64_t v54 = 0;
              int v55 = 0;
              long long v53 = v25;
            }
            *(_OWORD *)(v49 + 84) = v53;
            uint64_t v56 = &v118[v39];
            *(void *)(v56 + 100) = v54;
            *((_DWORD *)v56 + 27) = v55;
            *((void *)v56 + 16) = *(void *)(v44 + 24);
            *((void *)v56 + 22) = *(void *)(v41 + 32 * v45 + 16);
            *((void *)v56 + 2) = v43;
            *((void *)v56 + 3) = *(void *)v43;
            *((void *)v56 + 4) = *(void *)(v14 + 48 * v42 + 8);
            __int16 v57 = *(_WORD *)(v44 + 80);
            v56[150] = HIBYTE(v57) & 1;
            v56[149] = (v57 & 4) != 0;
            if ((v57 & 8) != 0) {
              int v58 = 8;
            }
            else {
              int v58 = 1;
            }
            *((_DWORD *)v56 + 28) = v58;
            if ((v57 & 0x10) != 0)
            {
              if (v47 == 0xFFFF) {
                int v60 = 2;
              }
              else {
                int v60 = 8;
              }
            }
            else
            {
              if ((v57 & 0x40) != 0) {
                int v59 = 1;
              }
              else {
                int v59 = 2;
              }
              if ((v57 & 0x400) != 0) {
                int v60 = 4;
              }
              else {
                int v60 = v59;
              }
            }
            *((_DWORD *)v56 + 29) = v60;
            unsigned int v61 = (float *)&v118[v39];
            v62.i32[0] = *(unsigned __int8 *)(v44 + 84);
            v62.i32[1] = *(unsigned __int8 *)(v44 + 85);
            v120.val[0] = (float32x2_t)vbic_s8(_D15, (int8x8_t)vceqz_s32(v62));
            v120.val[1] = v120.val[0];
            vst2_f32(v61, v120);
            uint64_t v63 = &v118[v39];
            *((_DWORD *)v63 + 38) = *(_DWORD *)(v44 + 92);
            *((void *)v63 + 20) = *(void *)(v44 + 72);
            v63[168] = *(unsigned char *)(v44 + 82);
            float v64 = 3.4028e38;
            if ((v52 & 0x20) != 0) {
              float v64 = v24;
            }
            *((float *)v63 + 39) = v64;
            ++v40;
            v39 += 208;
          }
          while (208 * v36 != v39);
          if (v36 != 4)
          {
LABEL_72:
            uint64_t v105 = v22;
            unint64_t v93 = 0;
            uint64_t v94 = v118;
            do
            {
              uint64_t v95 = v14 + 48 * (v93 + *v106);
              uint64_t v96 = *(void *)(v6 + 32)
                  + 32
                  * (*(_DWORD *)(v6 + 4 * (*(_DWORD *)(*(void *)(v95 + 32) + 108) & 7))
                                 + (*(_DWORD *)(*(void *)(v95 + 32) + 108) >> 3));
              ((void (*)(unsigned char *, uint64_t, unint64_t, uint64_t (***)(void, void), uint64_t, float, float, float, float, float))physx::Dy::createFinalizeMethods[v104])(v94, v96, v107, v113, v21, v12, v9, v10, v8, v13);
              uint64_t v21 = v111;
              *(_WORD *)(v95 + 28) = *(unsigned __int8 *)(v96 + 24);
              *(void *)(v95 + 40) = *(void *)(v96 + 16);
              ++v93;
              unint64_t v66 = (unsigned __int16)*v109;
              v94 += 208;
            }
            while (v93 < v66);
            uint64_t v22 = v105;
            uint64_t v4 = v110;
            uint64_t v2 = v102;
            uint64_t v31 = v103;
            long long v25 = xmmword_23435FBB0;
LABEL_75:
            if (v66)
            {
              unint64_t v66 = v66;
              int v97 = &v116;
              uint64_t v98 = v119;
              do
              {
                uint64_t v99 = *(void *)v97;
                int v97 = (long long *)((char *)v97 + 8);
                *(void *)(v99 + 72) = *v98;
                *(unsigned char *)(v99 + 82) = *((unsigned char *)v98 + 8);
                v23 += *((unsigned __int16 *)v98 + 19);
                v98 += 26;
                --v66;
              }
              while (v66);
            }
            goto LABEL_80;
          }
          int v65 = ((uint64_t (*)(long long *, unint64_t, unsigned char *, uint64_t (***)(void, void), float, float, float, float, float))physx::Dy::createFinalizeMethods4[v104])(&v114, v107, v118, v113, v12, v9, v10, v8, v13);
          LODWORD(v66) = (unsigned __int16)*v109;
          if (v65 == 2)
          {
            uint64_t v21 = v111;
            long long v25 = xmmword_23435FBB0;
            goto LABEL_75;
          }
          uint64_t v21 = v111;
          if (*v109) {
            goto LABEL_72;
          }
          long long v25 = xmmword_23435FBB0;
        }
      }
LABEL_80:
      if (++v22 == v4) {
        goto LABEL_83;
      }
    }
    long long v116 = v25;
    *(void *)&long long v117 = 0;
    DWORD2(v117) = 0;
    unsigned int v69 = *((unsigned __int16 *)v32 + 2);
    uint64_t v68 = (unsigned __int16 *)(v32 + 1);
    unsigned int v67 = v69;
    if (v69)
    {
      uint64_t v70 = 0;
      uint64_t v71 = *(void *)(v108 + 232);
      uint64_t v72 = &v115;
      do
      {
        uint64_t v73 = (long long *)(v14 + 48 * v33);
        uint64_t v74 = *((void *)v73 + 4);
        uint64_t v75 = *(void *)(v74 + 40);
        if (v75) {
          uint64_t v76 = *(long long **)(v75 + 40);
        }
        else {
          uint64_t v76 = &v116;
        }
        uint64_t v77 = *(void *)(v74 + 48);
        if (v77) {
          unsigned int v78 = *(long long **)(v77 + 40);
        }
        else {
          unsigned int v78 = &v116;
        }
        if (*(__int16 *)(v14 + 48 * v33 + 16) == -1) {
          unsigned int v79 = *(_DWORD *)(v14 + 48 * v33 + 20);
        }
        else {
          unsigned int v79 = 0;
        }
        if (*(__int16 *)(v14 + 48 * v33 + 18) == -1) {
          unsigned int v80 = *(_DWORD *)(v14 + 48 * v33 + 24);
        }
        else {
          unsigned int v80 = 0;
        }
        uint64_t v81 = *(void *)(v74 + 32);
        int v82 = *(unsigned __int16 *)(v74 + 8);
        long long v83 = *v73;
        *((void *)v72 - 1) = *(void *)(v74 + 16);
        *(void *)uint64_t v72 = v81;
        *((_DWORD *)v72 + 2) = v82;
        *((void *)v72 - 2) = v74;
        uint64_t v84 = &v118[v70];
        *((void *)v84 + 2) = v73;
        *(_OWORD *)(v84 + 56) = *v76;
        *((_DWORD *)v84 + 18) = *((_DWORD *)v76 + 4);
        *(void *)&long long v85 = *(void *)((char *)v76 + 20);
        *((void *)&v85 + 1) = *(void *)v78;
        *(_OWORD *)(v84 + 76) = v85;
        *(_OWORD *)(v84 + 92) = *(long long *)((char *)v78 + 8);
        *((_DWORD *)v84 + 27) = *((_DWORD *)v78 + 6);
        *((void *)v84 + 5) = v2 + 112 * v79;
        *((void *)v84 + 6) = v2 + 112 * v80;
        *(_OWORD *)(v84 + 24) = v83;
        *(void *)(v84 + 140) = *(void *)v74;
        *((void *)v84 + 19) = v71 + 32 * *(unsigned int *)(v74 + 72);
        __int16 v86 = *(_WORD *)(v74 + 10);
        v84[160] = HIBYTE(v86) & 1;
        v84[161] = (v86 & 0x80) != 0;
        v84[162] = (v86 & 0x20) != 0;
        v84[163] = (v86 & 0x200) != 0;
        *((_DWORD *)v84 + 37) = *(_DWORD *)(v74 + 76);
        v70 += 176;
        ++v33;
        v72 += 2;
      }
      while (176 * v67 != v70);
      if (v67 == 4)
      {
        unsigned int v112 = 0;
        int v87 = physx::Dy::setupSolverConstraint4((uint64_t)&v114, (uint64_t)v118, &v112, v113, v11, v12);
        uint64_t v21 = v111;
        v23 += v112;
        float v88 = v68;
        if (v87 == 2) {
          goto LABEL_70;
        }
      }
      else
      {
        float v88 = v68;
      }
      if (*v88)
      {
        unint64_t v89 = 0;
        int v90 = v118;
        int v91 = &v114;
        do
        {
          int v92 = physx::Dy::SetupSolverConstraint((uint64_t)v91, (uint64_t)v90, v113, v21, v11, v12);
          uint64_t v21 = v111;
          v23 += v92;
          ++v89;
          v90 += 176;
          v91 += 2;
        }
        while (v89 < *v68);
      }
    }
LABEL_70:
    uint64_t v4 = v110;
    long long v25 = xmmword_23435FBB0;
    goto LABEL_80;
  }
  int v23 = 0;
LABEL_83:
  *(_DWORD *)(v107 + 12316) += v23;
  uint64_t v100 = *(void *)(v108 + 400);
  pthread_mutex_lock((pthread_mutex_t *)(v100 + 8));
  *(void *)unint64_t v107 = *(void *)v100;
  *(void *)uint64_t v100 = v107;
  return pthread_mutex_unlock((pthread_mutex_t *)(v100 + 8));
}

void physx::Dy::PxsCreateArticConstraintsTask::~PxsCreateArticConstraintsTask(physx::Dy::PxsCreateArticConstraintsTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Dy::PxsCreateArticConstraintsTask::getName(physx::Dy::PxsCreateArticConstraintsTask *this)
{
  return "PxsDynamics.createFinalizeContacts";
}

uint64_t physx::Dy::PxsCreateArticConstraintsTask::runInternal(physx::Dy::PxsCreateArticConstraintsTask *this)
{
  uint64_t v2 = *((void *)this + 9);
  float v4 = *(float *)(v2 + 132);
  float v3 = *(float *)(v2 + 136);
  float v5 = *(float *)(v2 + 120);
  float v6 = *(float *)(v2 + 124);
  float v7 = *(float *)(v2 + 88);
  if (*(float *)(v2 + 96) >= *(float *)(v2 + 92)) {
    float v8 = *(float *)(v2 + 92);
  }
  else {
    float v8 = *(float *)(v2 + 96);
  }
  float v9 = *(float *)(v2 + 128);
  unint64_t v10 = (unint64_t)physx::shdfnd::SListImpl::pop(*(physx::shdfnd::SListImpl **)(v2 + 400));
  if (!v10)
  {
    uint64_t v11 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      float v12 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ThreadContext>::getName() [T = physx::Dy::ThreadContext]";
    }
    else {
      float v12 = "<allocation names disabled>";
    }
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v11 + 24) + 16))(v11 + 24, 12343, v12, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/include/utils/PxcThreadCoherentCache.h", 82);
    if (v13)
    {
      unint64_t v10 = (v13 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(void *)(v10 - 8) = v10 - v13;
    }
    else
    {
      unint64_t v10 = 0;
    }
    physx::Dy::ThreadContext::ThreadContext((physx::Dy::ThreadContext *)v10, *(physx::PxcNpMemBlockPool **)(v2 + 408));
  }
  *(void *)(v10 + 11880) = 0;
  *(_DWORD *)(v10 + 11888) = 0;
  *(_DWORD *)(v10 + 12168) = 0;
  unsigned int v14 = *(_DWORD *)(*((void *)this + 8) + 12256);
  if ((*(_DWORD *)(v10 + 12172) & 0x7FFFFFFFu) < v14)
  {
    physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate(v10 + 12160, v14);
    unsigned int v14 = *(_DWORD *)(*((void *)this + 8) + 12256);
  }
  *(_DWORD *)(v10 + 12168) = v14;
  if (*((_DWORD *)this + 12))
  {
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(void *)(*((void *)this + 5) + 8 * v15);
      (*(void (**)(uint64_t, void, unint64_t, void, uint64_t, void, float, float, float, float, float, float, float))(*(void *)v16 + 288))(v16, *((void *)this + 10), v10, *((void *)this + 7), *((void *)this + 8) + 11848, *(void *)(*((void *)this + 9) + 232), v7, v8, v3, v5, v6, v9, v4);
      ++v15;
    }
    while (v15 < *((unsigned int *)this + 12));
  }
  uint64_t v17 = *(void *)(*((void *)this + 9) + 400);
  pthread_mutex_lock((pthread_mutex_t *)(v17 + 8));
  *(void *)unint64_t v10 = *(void *)v17;
  *(void *)uint64_t v17 = v10;
  return pthread_mutex_unlock((pthread_mutex_t *)(v17 + 8));
}

void physx::Dy::ThreadContext::~ThreadContext(physx::Dy::ThreadContext *this)
{
  int v2 = *((_DWORD *)this + 3075);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0 && *((void *)this + 1536) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v4 = *((_DWORD *)this + 3047);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0 && *((void *)this + 1522) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v6 = *((_DWORD *)this + 3043);
  if ((v6 & 0x80000000) == 0 && (v6 & 0x7FFFFFFF) != 0 && *((void *)this + 1520) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v8 = *((_DWORD *)this + 3039);
  if ((v8 & 0x80000000) == 0 && (v8 & 0x7FFFFFFF) != 0 && *((void *)this + 1518)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v9 = *((_DWORD *)this + 3035);
  if ((v9 & 0x80000000) == 0 && (v9 & 0x7FFFFFFF) != 0 && *((void *)this + 1516)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v10 = *((_DWORD *)this + 3031);
  if ((v10 & 0x80000000) == 0 && (v10 & 0x7FFFFFFF) != 0 && *((void *)this + 1514)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v11 = *((_DWORD *)this + 3027);
  if ((v11 & 0x80000000) == 0 && (v11 & 0x7FFFFFFF) != 0 && *((void *)this + 1512)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v12 = *((_DWORD *)this + 3023);
  if ((v12 & 0x80000000) == 0 && (v12 & 0x7FFFFFFF) != 0 && *((void *)this + 1510)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v13 = *((_DWORD *)this + 3019);
  if ((v13 & 0x80000000) == 0 && (v13 & 0x7FFFFFFF) != 0 && *((void *)this + 1508)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v14 = *((_DWORD *)this + 2991);
  if ((v14 & 0x80000000) == 0 && (v14 & 0x7FFFFFFF) != 0 && *((void *)this + 1494)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v15 = *((_DWORD *)this + 2987);
  if ((v15 & 0x80000000) == 0 && (v15 & 0x7FFFFFFF) != 0 && *((void *)this + 1492)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v16 = *((_DWORD *)this + 2983);
  if ((v16 & 0x80000000) == 0 && (v16 & 0x7FFFFFFF) != 0 && *((void *)this + 1490)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v17 = *((_DWORD *)this + 2965);
  if ((v17 & 0x80000000) == 0 && (v17 & 0x7FFFFFFF) != 0)
  {
    if (*((void *)this + 1481)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
}

uint64_t physx::shdfnd::Array<physx::PxConstraintBatchHeader,physx::shdfnd::ReflectionAllocator<physx::PxConstraintBatchHeader>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    float result = physx::shdfnd::ReflectionAllocator<physx::PxConstraintBatchHeader>::allocate(result, 8 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    int v4 = (void *)result;
  }
  else
  {
    int v4 = 0;
  }
  uint64_t v5 = *(unsigned int *)(v3 + 8);
  int v6 = *(uint64_t **)v3;
  if (v5)
  {
    unint64_t v7 = (unint64_t)&v4[v5];
    int v8 = v4;
    do
    {
      uint64_t v9 = *v6++;
      *v8++ = v9;
    }
    while ((unint64_t)v8 < v7);
    int v6 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6) {
    float result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::PxConstraintBatchHeader>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    int v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxConstraintBatchHeader>::getName() [T = physx::Px"
  }
         "ConstraintBatchHeader]";
  else {
    int v8 = "<allocation names disabled>";
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::Array<physx::PxSolverBody,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxSolverBody>>>::recreate(unint64_t *a1, unsigned int a2)
{
  uint64_t v4 = 32 * a2 + 135;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    int v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxSolverBody>::getName() [T = physx::PxSolverBody]";
  }
  else {
    int v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  if (result)
  {
    unint64_t v8 = (result + 135) & 0xFFFFFFFFFFFFFF80;
    *(void *)(v8 - 8) = v8 - result;
  }
  else
  {
    unint64_t v8 = 0;
  }
  uint64_t v9 = *((unsigned int *)a1 + 2);
  if (v9)
  {
    unint64_t v10 = v8 + 32 * v9;
    unint64_t v11 = *a1;
    unint64_t v12 = v8;
    do
    {
      *(void *)unint64_t v12 = *(void *)v11;
      *(_DWORD *)(v12 + 8) = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v12 + 12) = *(_DWORD *)(v11 + 12);
      *(void *)(v12 + 16) = *(void *)(v11 + 16);
      *(_DWORD *)(v12 + 24) = *(_DWORD *)(v11 + 24);
      *(_DWORD *)(v12 + 28) = *(_DWORD *)(v11 + 28);
      v12 += 32;
      v11 += 32;
    }
    while (v12 < v10);
  }
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && *a1) {
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, *a1 - *(void *)(*a1 - 8));
  *a1 = v8;
  *((_DWORD *)a1 + 3) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxSolverBodyData,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxSolverBodyData>>>::recreate(unint64_t *a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = 112 * a2 + 135;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance, a2))
  {
    int v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxSolverBodyData>::getName() [T = physx::PxSolverBodyData]";
  }
  else
  {
    int v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  if (result)
  {
    unint64_t v8 = (result + 135) & 0xFFFFFFFFFFFFFF80;
    *(void *)(v8 - 8) = v8 - result;
  }
  else
  {
    unint64_t v8 = 0;
  }
  unsigned int v9 = *((_DWORD *)a1 + 2);
  if (v9)
  {
    unint64_t v10 = v8 + 112 * v9;
    unint64_t v11 = *a1;
    unint64_t v12 = v8;
    do
    {
      *(_OWORD *)unint64_t v12 = *(_OWORD *)v11;
      *(_OWORD *)(v12 + 16) = *(_OWORD *)(v11 + 16);
      *(void *)(v12 + 32) = *(void *)(v11 + 32);
      *(void *)(v12 + 40) = *(void *)(v11 + 40);
      *(void *)(v12 + 48) = *(void *)(v11 + 48);
      *(void *)(v12 + 56) = *(void *)(v11 + 56);
      *(_DWORD *)(v12 + 64) = *(_DWORD *)(v11 + 64);
      uint64_t v13 = *(void *)(v11 + 68);
      *(_DWORD *)(v12 + 76) = *(_DWORD *)(v11 + 76);
      *(void *)(v12 + 68) = v13;
      *(_OWORD *)(v12 + 80) = *(_OWORD *)(v11 + 80);
      *(void *)(v12 + 96) = *(void *)(v11 + 96);
      *(_DWORD *)(v12 + 104) = *(_DWORD *)(v11 + 104);
      *(_DWORD *)(v12 + 108) = *(_DWORD *)(v11 + 108);
      v12 += 112;
      v11 += 112;
    }
    while (v12 < v10);
  }
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && *a1) {
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, *a1 - *(void *)(*a1 - 8));
  *a1 = v8;
  *((_DWORD *)a1 + 3) = v2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxSolverConstraintDesc,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2
    && (uint64_t result = physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>::allocate(result, 48 * a2 + 135, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553)) != 0)
  {
    unint64_t v4 = (result + 135) & 0xFFFFFFFFFFFFFF80;
    *(void *)(v4 - 8) = v4 - result;
  }
  else
  {
    unint64_t v4 = 0;
  }
  unsigned int v5 = *(_DWORD *)(v3 + 8);
  if (v5)
  {
    unint64_t v6 = v4 + 48 * v5;
    uint64_t v7 = *(long long **)v3;
    unint64_t v8 = (_OWORD *)v4;
    do
    {
      long long v9 = *v7;
      long long v10 = v7[2];
      v8[1] = v7[1];
      v8[2] = v10;
      _OWORD *v8 = v9;
      v8 += 3;
      v7 += 3;
    }
    while ((unint64_t)v8 < v6);
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3) {
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, *(void *)v3 - *(void *)(*(void *)v3 - 8));
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxsIndexedContactManager,physx::shdfnd::ReflectionAllocator<physx::PxsIndexedContactManager>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::PxsIndexedContactManager>::allocate(result, 32 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    unint64_t v4 = (_OWORD *)result;
  }
  else
  {
    unint64_t v4 = 0;
  }
  uint64_t v5 = *(unsigned int *)(v3 + 8);
  unint64_t v6 = *(long long **)v3;
  if (v5)
  {
    unint64_t v7 = (unint64_t)&v4[2 * v5];
    unint64_t v8 = v4;
    do
    {
      long long v9 = *v6;
      long long v10 = v6[1];
      v6 += 2;
      _OWORD *v8 = v9;
      v8[1] = v10;
      v8 += 2;
    }
    while ((unint64_t)v8 < v7);
    unint64_t v6 = *(long long **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Cm::SpatialVector,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVector>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVector>::allocate(result, 32 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    unint64_t v4 = (_OWORD *)result;
  }
  else
  {
    unint64_t v4 = 0;
  }
  uint64_t v5 = *(unsigned int *)(v3 + 8);
  unint64_t v6 = *(_OWORD **)v3;
  if (v5)
  {
    unint64_t v7 = (unint64_t)&v4[2 * v5];
    unint64_t v8 = *(_OWORD **)v3;
    long long v9 = v4;
    do
    {
      _OWORD *v9 = *v8;
      v9[1] = v8[1];
      v9 += 2;
      v8 += 2;
    }
    while ((unint64_t)v9 < v7);
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxsBodyCore *,physx::shdfnd::ReflectionAllocator<physx::PxsBodyCore *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::PxsBodyCore *>::allocate(result, 8 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    unint64_t v4 = (void *)result;
  }
  else
  {
    unint64_t v4 = 0;
  }
  uint64_t v5 = *(unsigned int *)(v3 + 8);
  unint64_t v6 = *(uint64_t **)v3;
  if (v5)
  {
    unint64_t v7 = (unint64_t)&v4[v5];
    unint64_t v8 = v4;
    do
    {
      uint64_t v9 = *v6++;
      *v8++ = v9;
    }
    while ((unint64_t)v8 < v7);
    unint64_t v6 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::PxsBodyCore *>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    unint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsBodyCore *>::getName() [T = physx::PxsBodyCore *]";
  }
  else {
    unint64_t v8 = "<allocation names disabled>";
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::Array<physx::PxsRigidBody *,physx::shdfnd::ReflectionAllocator<physx::PxsRigidBody *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::PxsRigidBody *>::allocate(result, 8 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    unint64_t v4 = (void *)result;
  }
  else
  {
    unint64_t v4 = 0;
  }
  uint64_t v5 = *(unsigned int *)(v3 + 8);
  unint64_t v6 = *(uint64_t **)v3;
  if (v5)
  {
    unint64_t v7 = (unint64_t)&v4[v5];
    unint64_t v8 = v4;
    do
    {
      uint64_t v9 = *v6++;
      *v8++ = v9;
    }
    while ((unint64_t)v8 < v7);
    unint64_t v6 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Dy::ArticulationV *,physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationV *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationV *>::allocate(result, 8 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    unint64_t v4 = (void *)result;
  }
  else
  {
    unint64_t v4 = 0;
  }
  uint64_t v5 = *(unsigned int *)(v3 + 8);
  unint64_t v6 = *(uint64_t **)v3;
  if (v5)
  {
    unint64_t v7 = (unint64_t)&v4[v5];
    unint64_t v8 = v4;
    do
    {
      uint64_t v9 = *v6++;
      *v8++ = v9;
    }
    while ((unint64_t)v8 < v7);
    unint64_t v6 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationV *>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    unint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationV *>::getName() [T = physx::Dy::ArticulationV *]";
  }
  else {
    unint64_t v8 = "<allocation names disabled>";
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

float32x2_t physx::Dy::FeatherstoneArticulation::computeLinkAccelerationInv(uint64_t a1, void *a2)
{
  int v2 = (_OWORD *)a2[1];
  uint64_t v3 = a2[2];
  uint64_t v4 = a2[7];
  float32x2_t result = 0;
  *int v2 = 0u;
  v2[1] = 0u;
  uint64_t v6 = *(unsigned int *)(a1 + 440);
  if (v6 >= 2)
  {
    uint64_t v7 = *(void *)(a1 + 432);
    uint64_t v8 = *(void *)(a1 + 352) + 96;
    uint64_t v9 = *(void *)(a1 + 448);
    uint64_t v10 = *(void *)(a1 + 456);
    for (uint64_t i = 1; i != v6; ++i)
    {
      float32x2_t v12 = 0;
      float v13 = 0.0;
      if (v4)
      {
        uint64_t v14 = v10 + 80 * i;
        uint64_t v15 = *(unsigned __int8 *)(v14 + 76);
        float v16 = 0.0;
        float32x2_t v17 = 0;
        if (*(unsigned char *)(v14 + 76))
        {
          unsigned int v18 = (float *)(v4 + 4 * *(unsigned int *)(v14 + 72));
          uint64_t v19 = (float *)v8;
          do
          {
            float v20 = *v18++;
            float v21 = v20;
            float32x2_t v12 = vadd_f32(v12, vmul_n_f32(*(float32x2_t *)(v19 - 5), v20));
            float v13 = v13 + (float)(v20 * *(v19 - 3));
            float32x2_t v22 = vmul_n_f32(*(float32x2_t *)(v19 - 2), v20);
            float v23 = *v19;
            v19 += 6;
            float32x2_t v17 = vadd_f32(v17, v22);
            float v16 = v16 + (float)(v21 * v23);
            --v15;
          }
          while (v15);
        }
      }
      else
      {
        float v16 = 0.0;
        float32x2_t v17 = 0;
      }
      uint64_t v24 = v9 + 160 * i;
      long long v25 = &v2[2 * *(unsigned int *)(v7 + 40 * i + 32)];
      _D6 = *(int32x2_t *)v25;
      float32x2_t v27 = *(float32x2_t *)(v24 + 124);
      _D16.i32[1] = v27.i32[1];
      _D16.i32[0] = *(_DWORD *)(v24 + 120);
      float32x2_t v29 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v25, 0);
      __asm { FMLS            S18, S4, V6.S[1] }
      v35.i32[1] = HIDWORD(*(void *)v25);
      v35.i32[0] = *((_DWORD *)v25 + 2);
      unsigned int v36 = (float32x2_t *)(v3 + 32 * i);
      float32x2_t v37 = vadd_f32(*(float32x2_t *)v25, *v36);
      v29.i32[0] = v35.i32[0];
      float32x2_t v38 = vadd_f32((float32x2_t)v25[1], vmls_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_f32(_D16, v35)), v29, v27));
      float32_t v39 = v16 + (float)((float)(_S18 + *((float *)v25 + 6)) + v36[3].f32[0]);
      uint64_t v40 = (float32x2_t *)&v2[2 * i];
      float32x2_t result = vadd_f32(v12, v37);
      v40[1].f32[0] = v13 + (float)(v29.f32[0] + v36[1].f32[0]);
      v40[1].i32[1] = 0;
      float32x2_t v41 = vadd_f32(v17, vadd_f32(v38, v36[2]));
      *uint64_t v40 = result;
      v40[2] = v41;
      v40[3].f32[0] = v39;
      v40[3].i32[1] = 0;
      v8 += 76;
    }
  }
  return result;
}

float32x2_t *physx::Dy::FeatherstoneArticulation::computeGeneralizedForceInv(float32x2_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (result[55].i32[0] - 1);
  if (result[55].i32[0] != 1)
  {
    float32x2_t v4 = result[54];
    float32x2_t v5 = result[56];
    float32x2_t v6 = result[57];
    uint64_t v7 = *(void *)&result[44] + 76 * v3 + 12;
    do
    {
      uint64_t v8 = *(void *)&v5 + 160 * v3;
      uint64_t v9 = (float32x2_t *)(a2 + 32 * v3);
      float32x2_t v10 = v9[2];
      float v11 = v9[3].f32[0];
      float32x2_t result = v9 + 3;
      float32x2_t v12 = (float32x2_t *)(a2 + 32 * *(unsigned int *)(*(void *)&v4 + 40 * v3 + 32));
      _D4 = *v9;
      float32_t v14 = v9[1].f32[0] + v12[1].f32[0];
      float32x2_t v15 = *(float32x2_t *)(v8 + 124);
      _D16.i32[1] = v15.i32[1];
      _D16.i32[0] = *(_DWORD *)(v8 + 120);
      float32x2_t v17 = (float32x2_t)vdup_lane_s32((int32x2_t)*v9, 0);
      __asm { FMLA            S18, S2, V4.S[1] }
      _D4.i32[0] = v9[1].i32[0];
      v17.i32[0] = _D4.i32[0];
      float32x2_t *v12 = vadd_f32(*v9, *v12);
      v12[1].f32[0] = v14;
      _DWORD v12[2] = vadd_f32(vadd_f32(vmla_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_f32(_D4, vneg_f32(_D16))), v17, v15), v10), v12[2]);
      v12[3].f32[0] = (float)(_S18 + v11) + v12[3].f32[0];
      uint64_t v23 = *(void *)&v6 + 80 * v3;
      uint64_t v24 = *(unsigned __int8 *)(v23 + 76);
      if (*(unsigned char *)(v23 + 76))
      {
        long long v25 = (float *)(a3 + 4 * *(unsigned int *)(v23 + 72));
        uint64_t v26 = (float *)v7;
        do
        {
          *v25++ = (float)((float)((float)(v26[1] * v9->f32[1]) + (float)(*v26 * v9->f32[0]))
                         + (float)(v26[2] * v9[1].f32[0]))
                 + (float)((float)((float)(*(v26 - 2) * v9[2].f32[1]) + (float)(*(v26 - 3) * v9[2].f32[0]))
                         + (float)(*(v26 - 1) * result->f32[0]));
          v26 += 6;
          --v24;
        }
        while (v24);
      }
      v7 -= 76;
      --v3;
    }
    while (v3);
  }
  return result;
}

float physx::Dy::FeatherstoneArticulation::computeZAForceInv(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a2 + 440);
  if (v3)
  {
    float32x2_t v4 = (float **)(*(void *)(a2 + 432) + 16);
    uint64_t v5 = *(void *)(a3 + 8) + 16;
    float32x2_t v6 = (float *)(*(void *)(a3 + 24) + 16);
    float result = 1.0;
    do
    {
      uint64_t v9 = *v4;
      v4 += 5;
      uint64_t v8 = v9;
      float v11 = v9[30];
      float v10 = v9[31];
      float v12 = 1.0 / v10;
      BOOL v13 = v10 == 0.0;
      float v14 = v9[28];
      float v15 = v9[29];
      if (v13) {
        float v12 = 0.0;
      }
      float v16 = 1.0 / v14;
      float v17 = 1.0 / v15;
      float v18 = 1.0 / v11;
      BOOL v13 = v14 == 0.0;
      float v19 = *(float *)(v5 - 16) + *(float *)(v5 - 16);
      float v20 = *(float *)(v5 - 12) + *(float *)(v5 - 12);
      float v21 = *(float *)(v5 - 8) + *(float *)(v5 - 8);
      float v23 = v8[2];
      float v22 = v8[3];
      if (v13) {
        float v16 = 0.0;
      }
      float v24 = (float)(v22 * v22) + -0.5;
      float v25 = *v8;
      float v26 = v8[1];
      BOOL v13 = v15 == 0.0;
      float v27 = (float)((float)(v20 * v26) + (float)(*v8 * v19)) + (float)(v23 * v21);
      if (v13) {
        float v17 = 0.0;
      }
      float v28 = (float)((float)(v19 * v24) - (float)((float)((float)(v26 * v21) - (float)(v23 * v20)) * v22))
          + (float)(v25 * v27);
      BOOL v13 = v11 == 0.0;
      float v29 = (float)((float)(v20 * v24) - (float)((float)((float)(v23 * v19) - (float)(v25 * v21)) * v22))
          + (float)(v26 * v27);
      float v30 = -(float)((float)((float)(v25 * v20) - (float)(v26 * v19)) * v22);
      if (v13) {
        float v18 = 0.0;
      }
      float v31 = (float)(v30 + (float)(v21 * v24)) + (float)(v23 * v27);
      float v32 = (float)(v16 * v28) + (float)(v16 * v28);
      float v33 = (float)(v17 * v29) + (float)(v17 * v29);
      float v34 = (float)(v18 * v31) + (float)(v18 * v31);
      float v35 = (float)((float)(v26 * v33) + (float)(v25 * v32)) + (float)(v23 * v34);
      float v36 = (float)((float)(v22 * (float)((float)(v26 * v34) - (float)(v23 * v33))) + (float)(v32 * v24))
          + (float)(v25 * v35);
      float v37 = (float)(v22 * (float)((float)(v23 * v32) - (float)(v25 * v34))) + (float)(v33 * v24);
      float v38 = (float)((float)(v22 * (float)((float)(v25 * v33) - (float)(v26 * v32))) + (float)(v34 * v24))
          + (float)(v23 * v35);
      float v39 = v12 * *(float *)(v5 + 8);
      float32x2_t v40 = *(float32x2_t *)v5;
      v5 += 32;
      *((float32x2_t *)v6 - 2) = vadd_f32(vmul_n_f32(v40, v12), *(float32x2_t *)(v6 - 4));
      *(v6 - 2) = v39 + *(v6 - 2);
      float v41 = (float)(v37 + (float)(v26 * v35)) + v6[1];
      *float32x2_t v6 = *v6 + v36;
      v6[1] = v41;
      v6[2] = v38 + v6[2];
      v6 += 8;
      --v3;
    }
    while (v3);
  }
  return result;
}

float physx::Dy::FeatherstoneArticulation::initCompositeSpatialInertia(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v3 = a2;
    uint64_t v4 = a3 + 52;
    uint64_t v5 = (float **)(a1 + 16);
    float result = 1.0;
    do
    {
      uint64_t v8 = *v5;
      v5 += 5;
      uint64_t v7 = v8;
      float v9 = v8[31];
      if (v9 == 0.0) {
        float v10 = 0.0;
      }
      else {
        float v10 = 1.0 / v9;
      }
      *(_DWORD *)(v4 - 20) = 0;
      *(_OWORD *)(v4 - 36) = 0uLL;
      *(_OWORD *)(v4 - 52) = 0uLL;
      *(float *)(v4 - 16) = v10;
      *(void *)(v4 - 12) = 0;
      *(_DWORD *)(v4 - 4) = 0;
      *(float *)uint64_t v4 = v10;
      *(void *)(v4 + 4) = 0;
      *(_DWORD *)(v4 + 12) = 0;
      *(float *)(v4 + 16) = v10;
      float v11 = *v7;
      float v12 = v7[1];
      float v13 = v7[2];
      float v14 = v7[3];
      float v15 = v12 + v12;
      float v16 = v13 + v13;
      float v17 = v12 * (float)(v12 + v12);
      float v18 = v13 * (float)(v13 + v13);
      float v19 = (float)(v11 + v11) * v12;
      float v20 = (float)(v11 + v11) * v13;
      float v21 = (float)(v11 + v11) * v14;
      float v22 = v15 * v13;
      float v23 = v15 * v14;
      float v24 = v16 * v14;
      float v25 = (float)(1.0 - v17) - v18;
      float v26 = v19 + v24;
      float v27 = v20 - v23;
      float v28 = v19 - v24;
      float v29 = 1.0 - (float)(v11 * (float)(v11 + v11));
      float v30 = v29 - v18;
      float v31 = v22 + v21;
      float v32 = v20 + v23;
      float v33 = v22 - v21;
      float v34 = v29 - v17;
      float v35 = v7[28];
      float v36 = v7[29];
      if (v35 == 0.0) {
        float v37 = 0.0;
      }
      else {
        float v37 = 1.0 / v35;
      }
      if (v36 == 0.0) {
        float v38 = 0.0;
      }
      else {
        float v38 = 1.0 / v36;
      }
      float v39 = v7[30];
      if (v39 == 0.0) {
        float v40 = 0.0;
      }
      else {
        float v40 = 1.0 / v39;
      }
      float v41 = v25 * v37;
      float v42 = v26 * v37;
      float v43 = v28 * v38;
      float v44 = v32 * v40;
      float v45 = v33 * v40;
      float v46 = (float)((float)(v28 * (float)(v28 * v38)) + (float)((float)(v25 * v37) * v25))
          + (float)((float)(v32 * v40) * v32);
      float v47 = (float)((float)(v30 * (float)(v30 * v38)) + (float)((float)(v26 * v37) * v26))
          + (float)((float)(v33 * v40) * v33);
      float v48 = (float)((float)(v31 * (float)(v31 * v38)) + (float)((float)(v27 * v37) * v27))
          + (float)((float)(v34 * v40) * v34);
      float v49 = (float)((float)(v30 * v43) + (float)(v41 * v26)) + (float)(v44 * v33);
      *(float *)(v4 + 20) = v46;
      *(float *)(v4 + 24) = v49;
      float v50 = (float)((float)(v31 * v43) + (float)(v41 * v27)) + (float)(v44 * v34);
      *(float *)(v4 + 28) = v50;
      *(float *)(v4 + 32) = v49;
      float v51 = (float)((float)(v31 * (float)(v30 * v38)) + (float)(v42 * v27)) + (float)(v45 * v34);
      *(float *)(v4 + 36) = v47;
      *(float *)(v4 + 40) = v51;
      *(float *)(v4 + 44) = v50;
      *(float *)(v4 + 48) = v51;
      *(float *)(v4 + 52) = v48;
      v4 += 112;
      --v3;
    }
    while (v3);
  }
  return result;
}

float32x2_t *physx::Dy::FeatherstoneArticulation::inverseDynamic(uint64_t a1, float32x2_t *a2, float32x2_t *a3, uint64_t a4, int a5)
{
  physx::Dy::FeatherstoneArticulation::computeLinkVelocities(a1, (uint64_t)a2, (int **)a4);
  if (a5) {
    physx::Dy::FeatherstoneArticulation::computeC(a1, (uint64_t)a2, (uint64_t *)a4);
  }
  else {
    bzero(*(void **)(a4 + 16), (32 * a2[55].i32[0]));
  }
  physx::Dy::FeatherstoneArticulation::computeZ(v10, v11, v12, v13, v14, v15, v16, a1, (uint64_t)a2, a3, (void *)a4);
  physx::Dy::FeatherstoneArticulation::computeLinkAccelerationInv((uint64_t)a2, (void *)a4);
  physx::Dy::FeatherstoneArticulation::computeZAForceInv(v17, (uint64_t)a2, a4);
  uint64_t v18 = *(void *)(a4 + 24);
  uint64_t v19 = *(void *)(a4 + 64);
  return physx::Dy::FeatherstoneArticulation::computeGeneralizedForceInv(a2, v18, v19);
}

void physx::Dy::FeatherstoneArticulation::inverseDynamicFloatingBase(uint64_t a1, uint64_t a2, float32x2_t *a3, uint64_t a4, int a5)
{
  physx::Dy::FeatherstoneArticulation::computeLinkVelocities(a1, a2, (int **)a4);
  if (a5) {
    physx::Dy::FeatherstoneArticulation::computeC(a1, a2, (uint64_t *)a4);
  }
  else {
    bzero(*(void **)(a4 + 16), (32 * *(_DWORD *)(a2 + 440)));
  }
  physx::Dy::FeatherstoneArticulation::computeZ(v10, v11, v12, v13, v14, v15, v16, a1, a2, a3, (void *)a4);
  physx::Dy::FeatherstoneArticulation::computeLinkAccelerationInv(a2, (void *)a4);
  physx::Dy::FeatherstoneArticulation::computeZAForceInv(v17, a2, a4);
  uint64_t v18 = *(void *)(a4 + 24);
  float v189 = (void *)a4;
  uint64_t v19 = *(void *)(a4 + 40);
  uint64_t v20 = *(void *)(a2 + 432);
  unsigned int v21 = *(_DWORD *)(a2 + 440);
  physx::Dy::FeatherstoneArticulation::initCompositeSpatialInertia(v20, v21, v19);
  uint64_t v22 = v21 - 1;
  if (v21 != 1)
  {
    uint64_t v23 = *(void *)(a2 + 448);
    uint64_t v24 = v22 - 1;
    uint64_t v25 = v18 + 32 * v22 + 16;
    uint64_t v26 = 160 * v22 + 124;
    float v27 = (float *)(v19 + 112 * v22 + 108);
    float v28 = (unsigned int *)(v20 + 40 * v22 + 32);
    do
    {
      float32x2_t v197 = *(float32x2_t *)(v27 - 27);
      float32x2_t v198 = *(float32x2_t *)(v27 - 25);
      float32x2_t v199 = *(float32x2_t *)(v27 - 23);
      float32x2_t v200 = *(float32x2_t *)(v27 - 21);
      float32x2_t v201 = *(float32x2_t *)(v27 - 19);
      float32x2_t v202 = *(float32x2_t *)(v27 - 17);
      float32x2_t v203 = *(float32x2_t *)(v27 - 15);
      float32x2_t v204 = *(float32x2_t *)(v27 - 13);
      float32x2_t v205 = *(float32x2_t *)(v27 - 11);
      float32x2_t v206 = *(float32x2_t *)(v27 - 9);
      float32x2_t v207 = *(float32x2_t *)(v27 - 7);
      float32x2_t v208 = *(float32x2_t *)(v27 - 5);
      float32x2_t v209 = *(float32x2_t *)(v27 - 3);
      float v210 = *(v27 - 1);
      float v211 = *v27;
      float v29 = (float32x2_t *)(v23 + v26);
      float v30 = v29[-1].f32[1];
      v190[0] = 0;
      float32x2_t v31 = *v29;
      float32x2_t v32 = vneg_f32(*v29);
      v190[1] = HIDWORD(*(unint64_t *)v29);
      float32x2_t v191 = v32;
      int v192 = 0;
      float v193 = v30;
      __int32 v194 = v31.i32[0];
      float v195 = -v30;
      int v196 = 0;
      physx::Dy::FeatherstoneArticulation::translateInertia((uint64_t)v190, (uint64_t)&v197);
      unsigned int v33 = *v28;
      v28 -= 10;
      float v34 = (float32x2_t *)(v19 + 112 * v33);
      float32x2_t v35 = v34[1];
      *float v34 = vadd_f32(v197, *v34);
      v34[1] = vadd_f32(v198, v35);
      float32x2_t v36 = v34[3];
      v34[2] = vadd_f32(v199, v34[2]);
      v34[3] = vadd_f32(v200, v36);
      float32x2_t v37 = v34[5];
      v34[4] = vadd_f32(v201, v34[4]);
      v34[5] = vadd_f32(v202, v37);
      float32x2_t v38 = v34[7];
      v34[6] = vadd_f32(v203, v34[6]);
      v34[7] = vadd_f32(v204, v38);
      float32x2_t v39 = v34[9];
      v34[8] = vadd_f32(v205, v34[8]);
      v34[9] = vadd_f32(v206, v39);
      float32x2_t v40 = v34[11];
      v34[10] = vadd_f32(v207, v34[10]);
      v34[11] = vadd_f32(v208, v40);
      v34[12] = vadd_f32(v209, v34[12]);
      v34[13].f32[0] = v210 + v34[13].f32[0];
      uint64_t v23 = *(void *)(a2 + 448);
      float v41 = *(float *)(v25 - 8);
      float v42 = *(float *)(v25 + 8);
      float v43 = (float32x2_t *)(v18 + 32 * v33);
      _D2 = *(float32x2_t *)(v25 - 16);
      float32x2_t v45 = vadd_f32(_D2, *v43);
      float32x2_t v46 = *(float32x2_t *)(v23 + v26);
      _D7.i32[1] = v46.i32[1];
      float32x2_t v48 = *(float32x2_t *)v25;
      v25 -= 32;
      _D7.i32[0] = *(_DWORD *)(v23 + v26 - 4);
      float32x2_t v49 = (float32x2_t)vdup_lane_s32((int32x2_t)_D2, 0);
      __asm { FMLA            S16, S5, V2.S[1] }
      _D2.f32[0] = v41;
      v49.f32[0] = v41;
      float32_t v55 = v41 + v43[1].f32[0];
      *float v43 = v45;
      float32x2_t v56 = vadd_f32(vadd_f32(vmla_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_f32(_D2, vneg_f32(_D7))), v49, v46), v48), v43[2]);
      float32_t v57 = (float)(_S16 + v42) + v43[3].f32[0];
      int v58 = v24--;
      v43[1].f32[0] = v55;
      v43[3].f32[0] = v57;
      v26 -= 160;
      v27 -= 28;
      v43[2] = v56;
    }
    while (v58);
  }
  int v59 = (float32x2_t *)v189[1];
  uint64_t v60 = v189[5];
  unsigned int v61 = (float32x2_t *)v189[3];
  float v62 = *(float *)v60;
  float v63 = *(float *)(v60 + 12);
  float v64 = *(float *)(v60 + 24);
  float v65 = *(float *)(v60 + 76) + *(float *)(v60 + 84);
  float v66 = *(float *)(v60 + 92) + *(float *)(v60 + 100);
  float v67 = (float)(*(float *)(v60 + 72) + *(float *)(v60 + 72)) * 0.5;
  float v68 = v65 * 0.5;
  float v69 = (float)(*(float *)(v60 + 80) + *(float *)(v60 + 96)) * 0.5;
  float v70 = (float)(*(float *)(v60 + 88) + *(float *)(v60 + 88)) * 0.5;
  float v71 = (float)(*(float *)(v60 + 104) + *(float *)(v60 + 104)) * 0.5;
  float32x2_t v72 = *(float32x2_t *)(v60 + 4);
  float32x2_t v73 = *(float32x2_t *)(v60 + 16);
  float32x2_t v74 = *(float32x2_t *)(v60 + 28);
  v75.i32[1] = HIDWORD(*(void *)(v60 + 64));
  v75.i32[0] = *(_DWORD *)(v60 + 56);
  float v76 = (float)(*(float *)(v60 + 40) + *(float *)(v60 + 48)) * 0.5;
  float v77 = (float)(*(float *)(v60 + 44) + *(float *)(v60 + 60)) * 0.5;
  float32x2_t v78 = (float32x2_t)vrev64_s32((int32x2_t)vmul_f32(vadd_f32(v75, *(float32x2_t *)(v60 + 64)), (float32x2_t)0x3F0000003F000000));
  float v79 = (float)(v70 * v71) - (float)((float)(v66 * 0.5) * (float)(v66 * 0.5));
  v80.f32[0] = (float)((float)(v66 * 0.5) * v69) - (float)((float)(v65 * 0.5) * v71);
  v81.f32[0] = (float)((float)(v65 * 0.5) * (float)(v66 * 0.5)) - (float)(v70 * v69);
  float v82 = (float)((float)((float)(v65 * 0.5) * v80.f32[0]) + (float)(v79 * v67)) + (float)(v81.f32[0] * v69);
  float32x2_t v83 = (float32x2_t)0x3F80000000000000;
  float32x2_t v84 = 0;
  float v85 = 1.0;
  float v86 = 1.0;
  float32x2_t v87 = (float32x2_t)0x3F80000000000000;
  float32x2_t v88 = 0;
  if (v82 != 0.0)
  {
    v80.f32[1] = (float)(v71 * v67) - (float)(v69 * v69);
    float v85 = v79 * (float)(1.0 / v82);
    float32x2_t v87 = vmul_n_f32(v80, 1.0 / v82);
    v81.f32[1] = (float)(v67 * (float)-(float)(v66 * 0.5)) + (float)(v69 * v68);
    float32x2_t v88 = vmul_n_f32(v81, 1.0 / v82);
    float v86 = (float)((float)(v68 * (float)-(float)(v65 * 0.5)) + (float)(v67 * v70)) * (float)(1.0 / v82);
  }
  float32x2_t v89 = vneg_f32(v73);
  float32x2_t v90 = (float32x2_t)vdup_lane_s32((int32x2_t)v87, 0);
  float32x2_t v99 = vmul_lane_f32((float32x2_t)__PAIR64__(v90.u32[1], LODWORD(v85)), v72, 1);
  float v91 = (float)(vmuls_lane_f32(-v63, v88, 1) - (float)(v62 * v88.f32[0])) - (float)(v64 * v86);
  float32x2_t v92 = vsub_f32(vsub_f32(vmul_n_f32(v87, -v63), vmul_n_f32((float32x2_t)__PAIR64__(v90.u32[1], LODWORD(v85)), v62)), vmul_n_f32(v88, v64));
  float32x2_t v93 = vsub_f32(vsub_f32(vmul_n_f32(v87, v89.f32[0]), vmul_n_f32((float32x2_t)__PAIR64__(v90.u32[1], LODWORD(v85)), v72.f32[0])), vmul_n_f32(v88, v74.f32[0]));
  float32x2_t v94 = vsub_f32(vsub_f32(vmul_lane_f32(v87, v89, 1), v99), vmul_lane_f32(v88, v74, 1));
  float v95 = (float)(v62 * v93.f32[0]) + vmuls_lane_f32(v63, v93, 1);
  float v96 = (float)(v62 * v94.f32[0]) + vmuls_lane_f32(v63, v94, 1);
  float v97 = vmul_f32(v72, v93).f32[0] + vmuls_lane_f32(v73.f32[0], v93, 1);
  _S31 = (float)((float)(*(float *)(v60 + 36) + *(float *)(v60 + 36)) * 0.5)
       + (float)((float)((float)(v62 * v92.f32[0]) + vmuls_lane_f32(v63, v92, 1)) + (float)(v64 * v91));
  v99.f32[0] = v77
             + (float)(vaddv_f32(vmul_f32((float32x2_t)vzip2_s32((int32x2_t)v72, (int32x2_t)v73), v92))
                     + vmuls_lane_f32(v91, v74, 1));
  float32x2_t v100 = vsub_f32(vsub_f32(vmul_lane_f32(v89, v88, 1), vmul_n_f32(v72, v88.f32[0])), vmul_n_f32(v74, v86));
  float v101 = v100.f32[1];
  v89.f32[0] = vmul_f32(v74, v100).f32[0];
  float v102 = v95 + (float)(v64 * v100.f32[0]);
  float v103 = v96 + vmuls_lane_f32(v64, v100, 1);
  float32x2_t v104 = vadd_f32(vadd_f32(vmul_n_f32((float32x2_t)vzip1_s32((int32x2_t)v92, (int32x2_t)v94), v72.f32[0]), vmul_n_f32((float32x2_t)vzip2_s32((int32x2_t)v92, (int32x2_t)v94), v73.f32[0])), vmul_n_f32((float32x2_t)__PAIR64__(v100.u32[1], LODWORD(v91)), v74.f32[0]));
  float32x2_t v105 = vadd_f32(vadd_f32(vmul_lane_f32((float32x2_t)vzip1_s32((int32x2_t)v94, (int32x2_t)v93), v72, 1), vmul_lane_f32((float32x2_t)vzip2_s32((int32x2_t)v94, (int32x2_t)v93), v73, 1)), (float32x2_t)vrev64_s32((int32x2_t)vmul_lane_f32(v100, v74, 1)));
  float v106 = v76 + v102;
  float v107 = v77 + v103;
  float v108 = (float)((float)(*(float *)(v60 + 52) + *(float *)(v60 + 52)) * 0.5) + (float)(v97 + v89.f32[0]);
  float32x2_t v109 = vadd_f32((float32x2_t)__PAIR64__(v78.u32[1], LODWORD(v76)), v104);
  float32x2_t v110 = vadd_f32(v78, v105);
  _D1.i32[0] = vdup_lane_s32((int32x2_t)v109, 1).u32[0];
  _D1.f32[1] = v108;
  _D25 = vmla_f32(vmul_f32(v110, vneg_f32(v109)), (float32x2_t)vzip1_s32((int32x2_t)v99, (int32x2_t)v110), _D1);
  float v113 = vmlas_n_f32(-(float)(v108 * v99.f32[0]), v110.f32[1], v109.f32[0]);
  __asm { FMLA            S1, S31, V25.S[1] }
  float v114 = _D1.f32[0] + (float)(v113 * v107);
  float v115 = 1.0;
  float v116 = 1.0;
  if (v114 != 0.0)
  {
    v117.f32[0] = (float)(v99.f32[0] * v106) - (float)(v110.f32[1] * _S31);
    float32x2_t v83 = vmul_n_f32(_D25, 1.0 / v114);
    float v116 = vmlas_n_f32(-(float)(v99.f32[0] * v107), _S31, v110.f32[0]) * (float)(1.0 / v114);
    v117.f32[1] = v113;
    float32x2_t v84 = vmul_n_f32(v117, 1.0 / v114);
    float v115 = (float)((float)(_S31 * v108) - (float)(v106 * v109.f32[0])) * (float)(1.0 / v114);
  }
  float32x2_t v118 = (float32x2_t)__PAIR64__(v93.u32[1], v92.u32[0]);
  float32x2_t v119 = (float32x2_t)vrev64_s32((int32x2_t)v84);
  float32x2_t v120 = (float32x2_t)vrev64_s32((int32x2_t)__PAIR64__(LODWORD(v116), v83.u32[0]));
  float32x2_t v121 = (float32x2_t)__PAIR64__(v92.u32[1], v93.u32[0]);
  float v122 = (float)(vmuls_lane_f32(v91, v84, 1) + vmul_f32(v100, v84).f32[0]) + (float)(v100.f32[1] * v115);
  float32x2_t v123 = vadd_f32(vmul_f32(v92, v83), vmul_f32(v93, v120));
  v120.i32[1] = v83.i32[1];
  float32x2_t v124 = vmul_f32((float32x2_t)__PAIR64__(LODWORD(v91), v100.u32[0]), v120);
  float32x2_t v125 = vadd_f32(v123, vmul_f32(v94, v84));
  float32x2_t v126 = vadd_f32(vadd_f32(vmul_f32(v92, (float32x2_t)vrev64_s32((int32x2_t)v83)), vmul_f32(v93, (float32x2_t)__PAIR64__(LODWORD(v116), v83.u32[0]))), vmul_f32(v94, v119));
  float32x2_t v127 = vadd_f32(vadd_f32(vmul_f32((float32x2_t)__PAIR64__(v92.u32[1], v93.u32[0]), v84), vmul_f32((float32x2_t)__PAIR64__(v93.u32[1], v92.u32[0]), v119)), vmul_n_f32(v94, v115));
  float32x2_t v128 = vadd_f32(vadd_f32(v124, vmul_n_f32((float32x2_t)vrev64_s32((int32x2_t)__PAIR64__(LODWORD(v91), v100.u32[0])), v83.f32[0])), vmul_lane_f32(v84, v100, 1));
  float v129 = (float)((float)(v91 * v126.f32[0]) + vmul_f32(v100, v125).f32[0]) + (float)(v100.f32[1] * v127.f32[0]);
  float32x2_t v130 = (float32x2_t)vext_s8((int8x8_t)v125, (int8x8_t)v126, 4uLL);
  float32x2_t v131 = vmul_f32(v92, v130);
  float32x2_t v132 = vmul_f32(v92, (float32x2_t)vrev64_s32((int32x2_t)v130));
  float32x2_t v133 = (float32x2_t)vext_s8((int8x8_t)v126, (int8x8_t)v125, 4uLL);
  float32x2_t v134 = vmul_f32(v93, v133);
  float32x2_t v135 = vadd_f32(v132, vmul_f32(v93, (float32x2_t)vrev64_s32((int32x2_t)v133)));
  float v136 = (float)(vmuls_lane_f32(v91, v125, 1) + vmul_lane_f32(v100, v126, 1).f32[0])
       + vmuls_lane_f32(v100.f32[1], v127, 1);
  float v137 = vmuls_lane_f32(v91, v128, 1) + vmul_f32(v100, v128).f32[0];
  float32x2_t v138 = vadd_f32(vadd_f32(vmul_f32(v121, v128), vmul_f32(v118, (float32x2_t)vrev64_s32((int32x2_t)v128))), vmul_n_f32(v94, v122));
  float v139 = v137 + (float)(v101 * v122);
  float v140 = v61[1].f32[0];
  float32x2_t v141 = vadd_f32(v90, vadd_f32(vadd_f32(v131, v134), vmul_f32(v94, (float32x2_t)vrev64_s32((int32x2_t)v127))));
  v87.f32[0] = v85;
  float32x2_t v142 = vadd_f32(v87, vadd_f32(v135, vmul_f32(v94, v127)));
  float v143 = v86 + v139;
  float32x2_t v144 = (float32x2_t)vrev64_s32((int32x2_t)*v61);
  float32x2_t v145 = v61[2];
  v135.i32[0] = v61[3].i32[0];
  float v146 = (float)((float)(vmuls_lane_f32(COERCE_FLOAT(*v61), v128, 1) + vmul_f32(v128, v144).f32[0])
               + (float)(v122 * v140))
       + (float)((float)((float)((float)(v88.f32[0] + v129) * v145.f32[0]) + vmuls_lane_f32(v88.f32[1] + v136, v145, 1))
               + (float)(v143 * v135.f32[0]));
  float v147 = (float)((float)(vmuls_lane_f32(COERCE_FLOAT(*v61), v84, 1) + vmul_f32(v84, v144).f32[0]) + (float)(v115 * v140))
       + (float)(vmlas_n_f32(vmuls_lane_f32(v127.f32[1], v145, 1), v145.f32[0], v127.f32[0])
               + (float)(v122 * v135.f32[0]));
  uint64_t v148 = v189[8];
  float32x2_t *v59 = vneg_f32(vadd_f32(vadd_f32(vadd_f32(vmul_f32(v125, v144), vmul_f32(v126, *v61)), vmul_n_f32(v127, v140)), vadd_f32(vadd_f32(vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v145), v141), vmul_f32(v145, v142)), vmul_n_f32(vadd_f32(v88, v138), v135.f32[0]))));
  v59[1].f32[0] = -v146;
  float32x2_t v149 = vmul_n_f32(v84, v140);
  int32x2_t v150 = (int32x2_t)vmul_n_f32(v144, v83.f32[0]);
  v83.f32[0] = v116;
  v59[2] = vneg_f32((float32x2_t)vrev64_s32((int32x2_t)vadd_f32(vadd_f32(vadd_f32((float32x2_t)vrev64_s32(v150), vmul_f32(v83, v144)), v149), vmla_n_f32(vmla_n_f32(vmul_lane_f32((float32x2_t)vzip2_s32((int32x2_t)v126, (int32x2_t)v125), v145, 1), (float32x2_t)vzip1_s32((int32x2_t)v125, (int32x2_t)v126), v145.f32[0]), v128, v135.f32[0]))));
  v59[3].f32[0] = -v147;
  v59[1].i32[1] = 0;
  v59[3].i32[1] = 0;
  uint64_t v151 = *(unsigned int *)(a2 + 440);
  if (v151 >= 2)
  {
    uint64_t v152 = *(void *)(a2 + 432);
    uint64_t v153 = *(void *)(a2 + 352) + 96;
    uint64_t v154 = 1;
    uint64_t v155 = *(void *)(a2 + 448);
    uint64_t v156 = *(void *)(a2 + 456);
    do
    {
      float32x4_t v157 = (float *)(v155 + 160 * v154);
      float v158 = v157[30];
      float v159 = v157[31];
      float v160 = v157[32];
      int32x4_t v161 = (float *)&v59[4 * *(unsigned int *)(v152 + 40 * v154 + 32)];
      float v163 = v161[1];
      float v162 = v161[2];
      float v164 = *v161;
      float v165 = (float)(v160 * v163) - (float)(v159 * v162);
      float v166 = (float)(v158 * v162) - (float)(v160 * *v161);
      float v167 = (float)(v159 * *v161) - (float)(v158 * v163);
      float v168 = v161[4] + v165;
      float v169 = v166 + v161[5];
      float v170 = v167 + v161[6];
      float v171 = &v59[4 * v154];
      v171->f32[0] = v164;
      v171->f32[1] = v163;
      v171[1].f32[0] = v162;
      v171[1].i32[1] = 0;
      v171[2].f32[0] = v168;
      v171[2].f32[1] = v169;
      v171[3].f32[0] = v170;
      v171[3].i32[1] = 0;
      uint64_t v172 = v60 + 112 * v154;
      v173.i32[0] = *(_DWORD *)(v172 + 8);
      float v174 = *(float *)(v172 + 20);
      float v175 = *(float *)(v172 + 32);
      uint64_t v176 = &v61[4 * v154];
      float32_t v177 = (float)((float)((float)((float)(v164 * v173.f32[0]) + (float)(v163 * v174)) + (float)(v162 * v175))
                   + (float)((float)((float)(v168 * *(float *)(v172 + 44)) + (float)(v169 * *(float *)(v172 + 56)))
                           + (float)(v170 * *(float *)(v172 + 68))))
           + v176[1].f32[0];
      int32x2_t v178 = *(int32x2_t *)v172;
      float32x2_t v179 = *(float32x2_t *)(v172 + 12);
      float32x2_t v180 = *(float32x2_t *)(v172 + 24);
      float32x2_t v181 = v176[2];
      float32x2_t v182 = vadd_f32(vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v172, v164), vmul_n_f32(v179, v163)), vmul_n_f32(v180, v162)), vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v172 + 36), v168), vmul_n_f32(*(float32x2_t *)(v172 + 48), v169)), vmul_n_f32(*(float32x2_t *)(v172 + 60), v170))), *v176);
      float32_t v183 = (float)((float)(vmlas_n_f32(vmuls_lane_f32(v169, v180, 1), v168, v180.f32[0]) + (float)(v175 * v170))
                   + (float)((float)((float)(v164 * *(float *)(v172 + 80)) + (float)(v163 * *(float *)(v172 + 92)))
                           + (float)(v162 * *(float *)(v172 + 104))))
           + v176[3].f32[0];
      v176[1].f32[0] = v177;
      v176[1].i32[1] = 0;
      v173.f32[1] = v174;
      float32x2_t v184 = vadd_f32(vadd_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32((float32x2_t)vzip2_s32(v178, (int32x2_t)v179), v169), (float32x2_t)vzip1_s32(v178, (int32x2_t)v179), v168), v173, v170), vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v172 + 72), v164), vmul_n_f32(*(float32x2_t *)(v172 + 84), v163)), vmul_n_f32(*(float32x2_t *)(v172 + 96), v162))), v181);
      *uint64_t v176 = v182;
      v176[2] = v184;
      v176[3].f32[0] = v183;
      v176[3].i32[1] = 0;
      uint64_t v185 = v156 + 80 * v154;
      uint64_t v186 = *(unsigned __int8 *)(v185 + 76);
      if (*(unsigned char *)(v185 + 76))
      {
        float v187 = (float *)(v148 + 4 * *(unsigned int *)(v185 + 72));
        int v188 = (float *)v153;
        do
        {
          *v187++ = (float)((float)((float)(*(v188 - 1) * v176->f32[1]) + (float)(*(v188 - 2) * v176->f32[0]))
                          + (float)(*v188 * v176[1].f32[0]))
                  + (float)((float)((float)(*(v188 - 4) * v176[2].f32[1]) + (float)(*(v188 - 5) * v176[2].f32[0]))
                          + (float)(*(v188 - 3) * v176[3].f32[0]));
          v188 += 6;
          --v186;
        }
        while (v186);
      }
      ++v154;
      v153 += 76;
    }
    while (v154 != v151);
  }
}

BOOL physx::Dy::FeatherstoneArticulation::applyCacheToDest(physx::Dy::FeatherstoneArticulation *this, physx::Dy::ArticulationData *a2, uint64_t a3, void *__dst, void *a5, void *a6, void *a7, char *a8)
{
  int v15 = *((_DWORD *)this + 222);
  char v16 = *a8;
  if (*a8)
  {
    memcpy(__dst, *(const void **)(a3 + 24), (4 * *((_DWORD *)a2 + 119)));
    int v17 = *((_DWORD *)this + 222) | 4;
    *((_DWORD *)this + 222) = v17;
    char v16 = *a8;
    if ((*a8 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v17 = *((_DWORD *)this + 222);
  if ((*a8 & 2) != 0)
  {
LABEL_5:
    memcpy(a5, *(const void **)(a3 + 32), (4 * *((_DWORD *)a2 + 119)));
    int v17 = *((_DWORD *)this + 222) | 8;
    *((_DWORD *)this + 222) = v17;
    char v16 = *a8;
  }
LABEL_6:
  if ((v16 & 0x40) == 0)
  {
    if ((v16 & 4) == 0) {
      goto LABEL_15;
    }
LABEL_14:
    memcpy(a6, *(const void **)(a3 + 40), (4 * *((_DWORD *)a2 + 119)));
    *((_DWORD *)this + 222) |= 2u;
    char v16 = *a8;
    goto LABEL_15;
  }
  uint64_t v18 = *((void *)this + 76);
  if ((v16 & 4) != 0)
  {
    uint64_t v19 = *(float **)(a3 + 72);
    uint64_t v20 = *(float **)(v18 + 16);
    float v21 = v20[12] + v20[12];
    float v22 = v20[13] + v20[13];
    float v23 = v20[14] + v20[14];
    float v25 = v19[2];
    float v24 = v19[3];
    float v26 = (float)(v24 * v24) + -0.5;
    float v27 = v19[1];
    float v28 = (float)((float)(v22 * v27) + (float)(*v19 * v21)) + (float)(v25 * v23);
    float v29 = (float)((float)(v24 * (float)((float)(v27 * v23) - (float)(v25 * v22))) + (float)(v21 * v26))
        + (float)(*v19 * v28);
    float v30 = (float)((float)(v24 * (float)((float)(v25 * v21) - (float)(*v19 * v23))) + (float)(v22 * v26))
        + (float)(v27 * v28);
    float v31 = (float)((float)(v24 * (float)((float)(*v19 * v22) - (float)(v27 * v21))) + (float)(v23 * v26))
        + (float)(v25 * v28);
    float v32 = v19[4] + v29;
    float v33 = v19[5] + v30;
    float v35 = v20[10];
    float v34 = v20[11];
    float v36 = v20[8];
    float v37 = v20[9];
    float v38 = (float)(*v19 * v34) + (float)(v24 * v36);
    float v39 = (float)((float)((float)(v27 * v34) + (float)(v24 * v37)) + (float)(v25 * v36)) - (float)(v35 * *v19);
    float v40 = (float)((float)((float)(v25 * v34) + (float)(v24 * v35)) + (float)(*v19 * v37)) - (float)(v36 * v27);
    float v41 = -(float)(*v19 * v36);
    float v42 = v19[6];
    *uint64_t v20 = (float)(v38 + (float)(v27 * v35)) - (float)(v37 * v25);
    v20[1] = v39;
    v20[2] = v40;
    v20[3] = (float)((float)(v41 + (float)(v24 * v34)) - (float)(v27 * v37)) - (float)(v25 * v35);
    v20[4] = v32;
    v20[5] = v33;
    v20[6] = v42 + v31;
  }
  if (v16)
  {
    uint64_t v43 = *(void *)(a3 + 72);
    uint64_t v44 = *(void *)(v18 + 16);
    *(void *)(v44 + 64) = *(void *)(v43 + 28);
    *(_DWORD *)(v44 + 72) = *(_DWORD *)(v43 + 36);
    *(void *)(v44 + 80) = *(void *)(v43 + 40);
    *(_DWORD *)(v44 + 88) = *(_DWORD *)(v43 + 48);
  }
  *((_DWORD *)this + 222) = v17 | 0x20;
  if ((v16 & 4) != 0) {
    goto LABEL_14;
  }
LABEL_15:
  if ((v16 & 8) != 0)
  {
    memcpy(a7, *(const void **)(a3 + 48), (4 * *((_DWORD *)a2 + 119)));
    *((_DWORD *)this + 222) |= 0x10u;
    char v16 = *a8;
  }
  if ((v16 & 4) != 0)
  {
    physx::Dy::FeatherstoneArticulation::teleportLinks(this, a2);
    char v16 = *a8;
  }
  if ((v16 & 5) != 0) {
    physx::Dy::FeatherstoneArticulation::computeLinkVelocities(this, a2);
  }
  return v15 == 0;
}

uint64_t physx::Dy::FeatherstoneArticulation::packJointData(uint64_t this, const float *a2, float *a3)
{
  uint64_t v3 = *(unsigned int *)(this + 616);
  if (v3 >= 2)
  {
    uint64_t v4 = *(void *)(this + 608);
    uint64_t v5 = *(void *)(this + 632);
    for (uint64_t i = 1; i != v3; ++i)
    {
      uint64_t v7 = 0;
      int v8 = 0;
      float v9 = &a3[*(unsigned int *)(v5 + 80 * i + 72)];
      uint64_t v10 = *(void *)(v4 + 40 * i + 24) + 258;
      do
      {
        this = *(unsigned __int8 *)(v10 + v7);
        if (*(unsigned char *)(v10 + v7)) {
          v9[v8++] = a2[v7];
        }
        ++v7;
      }
      while (v7 != 6);
      a2 += 6;
    }
  }
  return this;
}

uint64_t physx::Dy::FeatherstoneArticulation::unpackJointData(uint64_t this, const float *a2, float *a3)
{
  uint64_t v3 = *(unsigned int *)(this + 616);
  if (v3 >= 2)
  {
    uint64_t v4 = *(void *)(this + 608);
    uint64_t v5 = *(void *)(this + 632);
    for (uint64_t i = 1; i != v3; ++i)
    {
      uint64_t v7 = 0;
      int v8 = 0;
      float v9 = &a2[*(unsigned int *)(v5 + 80 * i + 72)];
      uint64_t v10 = *(void *)(v4 + 40 * i + 24) + 258;
      do
      {
        this = *(unsigned __int8 *)(v10 + v7);
        if (*(unsigned char *)(v10 + v7)) {
          float v11 = v9[v8++];
        }
        else {
          float v11 = 0.0;
        }
        a3[v7++] = v11;
      }
      while (v7 != 6);
      a3 += 6;
    }
  }
  return this;
}

void physx::Dy::FeatherstoneArticulation::initializeCommonData(physx::Dy::FeatherstoneArticulation *this)
{
  int v2 = (char *)this + 176;
  physx::Dy::FeatherstoneArticulation::jcalc(this, (physx::Dy::FeatherstoneArticulation *)((char *)this + 176), 0);
  physx::Dy::FeatherstoneArticulation::computeRelativeTransformC2P((uint64_t)this, (uint64_t)v2);
  physx::Dy::FeatherstoneArticulation::computeRelativeTransformC2B((uint64_t)this, (uint64_t)v2);
  physx::Dy::FeatherstoneArticulation::computeSpatialInertia((uint64_t)this, (uint64_t)v2);
  *((unsigned char *)this + 684) = 0;
}

uint64_t physx::Dy::FeatherstoneArticulation::getGeneralizedGravityForce(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (*(unsigned char *)(a1 + 684))
  {
    uint64_t v9 = physx::shdfnd::Foundation::mInstance;
    return physx::shdfnd::Foundation::error(v9, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyFeatherstoneInverseDynamic.cpp", 420, "Articulation::getGeneralisedGravityForce() commonInit need to be called first to initialize data!", a6, a7, a8, a9);
  }
  else
  {
    double v13 = (float32x2_t *)(a1 + 176);
    float32x2_t v14 = vneg_f32(*a2);
    float v15 = -a2[1].f32[0];
    float32x2_t v26 = v14;
    float v27 = v15;
    char v16 = *(pthread_mutex_t ***)(a3 + 104);
    uint64_t v17 = *(unsigned int *)(a1 + 616);
    if (**(unsigned char **)(a1 + 664))
    {
      uint64_t v19 = physx::PxcScratchAllocator::alloc(*(pthread_mutex_t ***)(a3 + 104), 32 * (int)v17, 0);
      unint64_t v20 = v19;
      if (v17)
      {
        uint64_t v21 = v19 + 16;
        float v22 = (uint64_t *)(*(void *)(a1 + 608) + 16);
        do
        {
          uint64_t v23 = *v22;
          v22 += 5;
          float v24 = 1.0 / *(float *)(v23 + 124);
          *(float32x2_t *)(v21 - 16) = vmul_n_f32(v14, v24);
          *(float *)(v21 - 8) = v24 * v15;
          *(void *)uint64_t v21 = 0;
          *(_DWORD *)(v21 + 8) = 0;
          v21 += 32;
          --v17;
        }
        while (v17);
      }
      physx::Dy::FeatherstoneArticulation::computeGeneralizedForceInv(v13, v19, *(void *)(a3 + 48));
      return physx::PxcScratchAllocator::free((uint64_t)v16, v20);
    }
    else
    {
      v25[9] = 0;
      v25[10] = 0;
      unint64_t v18 = physx::PxcScratchAllocator::alloc(v16, 240 * (int)v17, 0);
      v25[0] = v18;
      v25[1] = v18 + (32 * v17);
      v25[2] = v18 + (v17 << 6);
      v25[3] = v18 + (96 * v17);
      v25[6] = 0;
      v25[7] = 0;
      v25[8] = *(void *)(a3 + 48);
      v25[4] = 0;
      v25[5] = v18 + (v17 << 7);
      physx::Dy::FeatherstoneArticulation::inverseDynamicFloatingBase(a1, (uint64_t)v13, &v26, (uint64_t)v25, 0);
      return physx::PxcScratchAllocator::free((uint64_t)v16, v18);
    }
  }
}

uint64_t physx::Dy::FeatherstoneArticulation::getCoriolisAndCentrifugalForce(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (*(unsigned char *)(a1 + 684))
  {
    uint64_t v9 = physx::shdfnd::Foundation::mInstance;
    return physx::shdfnd::Foundation::error(v9, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyFeatherstoneInverseDynamic.cpp", 515, "Articulation::getCoriolisAndCentrifugalForce() commonInit need to be called first to initialize data!", a6, a7, a8, a9);
  }
  else
  {
    double v13 = (float32x2_t *)(a1 + 176);
    int v14 = *(_DWORD *)(a1 + 616);
    float v15 = (pthread_mutex_t **)a2[13];
    v19[9] = 0;
    v19[10] = 0;
    unint64_t v16 = physx::PxcScratchAllocator::alloc(v15, 240 * v14, 0);
    v19[0] = v16;
    v19[1] = v16 + (32 * v14);
    v19[2] = v16 + (v14 << 6);
    v19[3] = v16 + (96 * v14);
    v19[6] = a2[3];
    v19[7] = 0;
    v19[8] = a2[6];
    v19[4] = 0;
    v19[5] = v16 + (v14 << 7);
    if (**(unsigned char **)(a1 + 664))
    {
      float32x2_t v17 = 0;
      int v18 = 0;
      physx::Dy::FeatherstoneArticulation::inverseDynamic(a1, v13, &v17, (uint64_t)v19, 1);
    }
    else
    {
      float32x2_t v17 = 0;
      int v18 = 0;
      physx::Dy::FeatherstoneArticulation::inverseDynamicFloatingBase(a1, (uint64_t)v13, &v17, (uint64_t)v19, 1);
    }
    return physx::PxcScratchAllocator::free((uint64_t)v15, v16);
  }
}

uint64_t physx::Dy::FeatherstoneArticulation::getGeneralizedExternalForce(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (*(unsigned char *)(a1 + 684))
  {
    uint64_t v9 = physx::shdfnd::Foundation::mInstance;
    return physx::shdfnd::Foundation::error(v9, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyFeatherstoneInverseDynamic.cpp", 545, "Articulation::getCoriolisAndCentrifugalForce() commonInit need to be called first to initialize data!", a6, a7, a8, a9);
  }
  else
  {
    double v13 = (float32x2_t *)(a1 + 176);
    uint64_t v14 = *(unsigned int *)(a1 + 616);
    float v15 = (pthread_mutex_t **)a2[13];
    v69[9] = 0;
    v69[10] = 0;
    unint64_t v16 = physx::PxcScratchAllocator::alloc(v15, 240 * (int)v14, 0);
    v69[0] = v16;
    v69[1] = v16 + (32 * v14);
    v69[2] = v16 + (v14 << 6);
    v69[3] = v16 + (96 * v14);
    v69[5] = v16 + (v14 << 7);
    v69[6] = 0;
    uint64_t v17 = a2[6];
    v69[7] = 0;
    v69[8] = v17;
    uint64_t v18 = physx::PxcScratchAllocator::alloc(v15, 32 * (int)v14, 0);
    unint64_t v19 = v18;
    if (v14)
    {
      unint64_t v20 = (float **)(*(void *)(a1 + 608) + 16);
      uint64_t v21 = (float *)(*a2 + 24);
      float v22 = (float *)(v18 + 16);
      do
      {
        uint64_t v23 = *v20;
        v20 += 5;
        float v24 = v23[31];
        float v25 = v24 * *(v21 - 4);
        *((float32x2_t *)v22 - 2) = vmul_n_f32(*(float32x2_t *)(v21 - 6), v24);
        *(v22 - 2) = v25;
        float v26 = *v23;
        float v27 = v23[1];
        float v28 = v23[2];
        float v29 = v23[3];
        float v30 = v27 + v27;
        float v31 = v28 + v28;
        float v32 = v27 * (float)(v27 + v27);
        float v33 = v28 * (float)(v28 + v28);
        float v34 = (float)(v26 + v26) * v27;
        float v35 = (float)(v26 + v26) * v28;
        float v36 = (float)(v26 + v26) * v29;
        float v37 = v30 * v28;
        float v38 = v30 * v29;
        float v39 = v31 * v29;
        float v40 = (float)(1.0 - v32) - v33;
        float v41 = v34 + v39;
        float v42 = v35 - v38;
        float v43 = v34 - v39;
        float v44 = 1.0 - (float)(v26 * (float)(v26 + v26));
        float v45 = v44 - v33;
        float v46 = v37 + v36;
        float v47 = v35 + v38;
        float v48 = v37 - v36;
        float v49 = v44 - v32;
        float v50 = v23[28];
        float v51 = v23[29];
        float v52 = v50 * v40;
        float v53 = v50 * v41;
        float v54 = v51 * v43;
        float v55 = v51 * v45;
        float v56 = v23[30];
        float v57 = v47 * v56;
        float v58 = v48 * v56;
        float v59 = (float)((float)(v43 * (float)(v51 * v43)) + (float)((float)(v50 * v40) * v40))
            + (float)((float)(v47 * v56) * v47);
        float v60 = (float)((float)(v45 * (float)(v51 * v45)) + (float)((float)(v50 * v41) * v41))
            + (float)((float)(v48 * v56) * v48);
        float v61 = (float)((float)(v46 * (float)(v51 * v46)) + (float)((float)(v50 * v42) * v42))
            + (float)((float)(v49 * v56) * v49);
        float v62 = (float)((float)(v45 * v54) + (float)(v52 * v41)) + (float)(v57 * v48);
        float v63 = (float)((float)(v46 * v54) + (float)(v52 * v42)) + (float)(v57 * v49);
        float v64 = (float)((float)(v46 * v55) + (float)(v53 * v42)) + (float)(v58 * v49);
        float v65 = *(v21 - 2);
        float v66 = *(v21 - 1);
        *(float *)&uint64_t v23 = *v21;
        v21 += 8;
        *float v22 = (float)(*(float *)&v23 * v63) + (float)((float)(v65 * v59) + (float)(v66 * v62));
        v22[1] = (float)(*(float *)&v23 * v64) + (float)((float)(v65 * v62) + (float)(v66 * v60));
        v22[2] = (float)(*(float *)&v23 * v61) + (float)((float)(v65 * v63) + (float)(v66 * v64));
        v22 += 8;
        --v14;
      }
      while (v14);
    }
    v69[4] = v18;
    if (**(unsigned char **)(a1 + 664))
    {
      float32x2_t v67 = 0;
      int v68 = 0;
      physx::Dy::FeatherstoneArticulation::inverseDynamic(a1, v13, &v67, (uint64_t)v69, 0);
    }
    else
    {
      float32x2_t v67 = 0;
      int v68 = 0;
      physx::Dy::FeatherstoneArticulation::inverseDynamicFloatingBase(a1, (uint64_t)v13, &v67, (uint64_t)v69, 0);
    }
    physx::PxcScratchAllocator::free((uint64_t)v15, v16);
    return physx::PxcScratchAllocator::free((uint64_t)v15, v19);
  }
}

uint64_t physx::Dy::FeatherstoneArticulation::getJointForce(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (*(unsigned char *)(a1 + 684))
  {
    uint64_t v9 = physx::shdfnd::Foundation::mInstance;
    return physx::shdfnd::Foundation::error(v9, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyFeatherstoneInverseDynamic.cpp", 596, "ArticulationHelper::getJointForce() commonInit need to be called first to initialize data!", a6, a7, a8, a9);
  }
  else
  {
    double v12 = (float32x2_t *)(a1 + 176);
    double v13 = (pthread_mutex_t **)a2[13];
    long long v23 = 0u;
    long long v22 = 0u;
    long long v21 = 0u;
    uint64_t v14 = a2[4];
    uint64_t v15 = a2[6];
    uint64_t v24 = 0;
    *((void *)&v22 + 1) = v14;
    *(void *)&long long v23 = v15;
    int v16 = *(_DWORD *)(a1 + 616);
    unint64_t v17 = physx::PxcScratchAllocator::alloc(v13, 240 * v16, 0);
    v20[0] = v17;
    v20[1] = v17 + (32 * v16);
    v20[2] = v17 + (v16 << 6);
    v20[3] = v17 + (96 * v16);
    *((void *)&v21 + 1) = v17 + (v16 << 7);
    if (**(unsigned char **)(a1 + 664))
    {
      float32x2_t v18 = 0;
      int v19 = 0;
      physx::Dy::FeatherstoneArticulation::inverseDynamic(a1, v12, &v18, (uint64_t)v20, 0);
    }
    else
    {
      float32x2_t v18 = 0;
      int v19 = 0;
      physx::Dy::FeatherstoneArticulation::inverseDynamicFloatingBase(a1, (uint64_t)v12, &v18, (uint64_t)v20, 0);
    }
    return physx::PxcScratchAllocator::free((uint64_t)v13, v17);
  }
}

void physx::Dy::FeatherstoneArticulation::getCoefficientMatrix(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, int32x4_t a15, char a16)
{
  if (*(unsigned char *)(a1 + 684))
  {
    uint64_t v16 = physx::shdfnd::Foundation::mInstance;
    physx::shdfnd::Foundation::error(v16, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyFeatherstoneInverseDynamic.cpp", 893, "ArticulationHelper::getCoefficientMatrix() commonInit need to be called first to initialize data!", a6, a7, a8, a16);
  }
  else
  {
    float v20 = *(float *)&a9;
    long long v22 = (float32x2_t *)(a1 + 176);
    physx::Dy::FeatherstoneArticulation::computeArticulatedSpatialInertia(a1, a1 + 176, a9, a10, a11, a12, a13, a14, a15);
    uint64_t v23 = *(void *)(a1 + 608);
    int v24 = *(_DWORD *)(a1 + 616);
    uint64_t v56 = a1;
    int v52 = *(_DWORD *)(a1 + 652);
    float v53 = *(char **)(a5 + 80);
    bzero(v53, 4 * a4 * v52);
    if (a4)
    {
      uint64_t v25 = 0;
      char v55 = **(unsigned char **)(v56 + 664);
      size_t v51 = (32 * v24);
      uint64_t v50 = a4;
      uint64_t v49 = (96 * v24);
      uint64_t v48 = a5;
      float v26 = 1.0 / v20;
      uint64_t v47 = a3;
      do
      {
        (*(void (**)(uint64_t, float *))(*(void *)(a3 + 24 * v25) + 320))(a3 + 24 * v25, &v73);
        float v27 = *(float **)(v23 + 40 * a2 + 16);
        float v28 = *(pthread_mutex_t ***)(a5 + 104);
        uint64_t v72 = 0;
        long long v70 = 0u;
        long long v71 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        long long v67 = 0u;
        unint64_t v29 = physx::PxcScratchAllocator::alloc(v28, 240 * v24, 0);
        *(void *)&long long v67 = v29;
        *((void *)&v67 + 1) = v29 + v51;
        *(void *)&long long v68 = v29 + (v24 << 6);
        *((void *)&v68 + 1) = v29 + v49;
        *((void *)&v69 + 1) = v29 + (v24 << 7);
        bzero((void *)(v29 + v49), v51);
        float v31 = v27[2];
        float v30 = v27[3];
        float v32 = (float)(v30 * v30) + -0.5;
        float v33 = v27[1];
        float v34 = (float)((float)((float)(v74 + v74) * v33) + (float)(*v27 * (float)(v73 + v73)))
            + (float)(v31 * (float)(v75 + v75));
        *(float *)&unsigned int v35 = (float)((float)((float)(v73 + v73) * v32)
                               - (float)((float)((float)(v33 * (float)(v75 + v75)) - (float)(v31 * (float)(v74 + v74)))
                                       * v30))
                       + (float)(*v27 * v34);
        *(float *)&unsigned int v36 = (float)((float)((float)(v74 + v74) * v32)
                               - (float)((float)((float)(v31 * (float)(v73 + v73)) - (float)(*v27 * (float)(v75 + v75)))
                                       * v30))
                       + (float)(v33 * v34);
        float v37 = (float)((float)((float)(v75 + v75) * v32)
                    - (float)((float)((float)(*v27 * (float)(v74 + v74)) - (float)(v33 * (float)(v73 + v73))) * v30))
            + (float)(v31 * v34);
        float v38 = (float)((float)(v33 * (float)(v77 + v77)) + (float)(*v27 * (float)(v76 + v76)))
            + (float)(v31 * (float)(v78 + v78));
        float v39 = (float)((float)((float)(v76 + v76) * v32)
                    - (float)((float)((float)(v33 * (float)(v78 + v78)) - (float)(v31 * (float)(v77 + v77))) * v30))
            + (float)(*v27 * v38);
        float v40 = (float)((float)((float)(v77 + v77) * v32)
                    - (float)((float)((float)(v31 * (float)(v76 + v76)) - (float)(*v27 * (float)(v78 + v78))) * v30))
            + (float)(v33 * v38);
        float v41 = (float)((float)(v78 + v78) * v32)
            - (float)((float)((float)(*v27 * (float)(v77 + v77)) - (float)(v33 * (float)(v76 + v76))) * v30);
        unint64_t v60 = __PAIR64__(v36, v35);
        float v61 = v37;
        int v62 = 0;
        float v63 = v39;
        float v64 = v40;
        float v65 = v41 + (float)(v31 * v38);
        int v66 = 0;
        physx::Dy::FeatherstoneArticulation::getZ(a2, v22, v29 + v49, (float32x2_t *)&v60);
        uint64_t v42 = *(unsigned int *)(v56 + 652);
        size_t v43 = (4 * v42);
        float v44 = (char *)physx::PxcScratchAllocator::alloc(v28, 8 * (int)v42, 0);
        bzero(v44, v43);
        physx::Dy::FeatherstoneArticulation::getDeltaVWithDeltaJV(v55 & 1, a2, (uint64_t)v22, v29 + v49, (uint64_t)v44, (uint64_t)v59, v45);
        float v46 = (float *)v44;
        if (v42)
        {
          do
          {
            *(float *)((char *)v46 + v43) = v26 * *v46;
            ++v46;
            --v42;
          }
          while (v42);
        }
        physx::Dy::FeatherstoneArticulation::computeSpatialInertia(v56, (uint64_t)v22);
        *(void *)&long long v70 = 0;
        *((void *)&v70 + 1) = &v44[v43];
        *(void *)&long long v69 = 0;
        *(void *)&long long v71 = &v53[4 * (v52 * v25)];
        float32x2_t v57 = 0;
        int v58 = 0;
        if (v55) {
          physx::Dy::FeatherstoneArticulation::inverseDynamic(v56, v22, &v57, (uint64_t)&v67, 0);
        }
        else {
          physx::Dy::FeatherstoneArticulation::inverseDynamicFloatingBase(v56, (uint64_t)v22, &v57, (uint64_t)&v67, 0);
        }
        a3 = v47;
        a5 = v48;
        physx::PxcScratchAllocator::free((uint64_t)v28, (unint64_t)v44);
        physx::PxcScratchAllocator::free((uint64_t)v28, v29);
        ++v25;
      }
      while (v25 != v50);
    }
  }
}

void physx::Dy::FeatherstoneArticulation::getImpulseSelfResponseInv(uint64_t a1, char a2, unsigned int a3, unsigned __int32 a4, uint64_t a5, float32x2_t *a6, float32x2_t *a7, float32x2_t *a8, uint64_t a9, uint64_t a10)
{
  unsigned int v10 = a3;
  uint64_t v135 = *MEMORY[0x263EF8340];
  uint64_t v12 = *(void *)(a1 + 608);
  uint64_t v13 = a4;
  if (*(_DWORD *)(v12 + 40 * a4 + 32) == a3)
  {
    float v16 = a6[1].f32[0];
    float v17 = a6[3].f32[0];
    *(float *)&unsigned int v18 = -a7[1].f32[0];
    *(float *)&unsigned int v19 = -a7[3].f32[0];
    *(float32x2_t *)&long long v129 = vneg_f32(*a7);
    *((void *)&v129 + 1) = v18;
    *(float32x2_t *)&long long v130 = vneg_f32(a7[2]);
    *((void *)&v130 + 1) = v19;
    float32x2_t v20 = *a6;
    float32x2_t v21 = a6[2];
    physx::Dy::FeatherstoneArticulation::propagateImpulseW(*(void *)(a1 + 544) + 96 * a4, (float32x2_t *)(*(void *)(a1 + 624) + 160 * a4 + 120), *(void *)(a1 + 528) + 76 * a4, (uint64_t)&v129, (uint64_t)&v131);
    unint64_t v123 = (unint64_t)vsub_f32(v20, v131);
    float v124 = v16 - v132;
    int v125 = 0;
    float32x2_t v126 = vsub_f32(v21, v133);
    float v127 = v17 - v134;
    int v128 = 0;
    physx::Dy::FeatherstoneArticulation::getZ(v10, (void *)(a1 + 176), a5, (float32x2_t *)&v123);
    physx::Dy::FeatherstoneArticulation::getDeltaVWithDeltaJV(a2, v10, a1 + 176, a5, a10, (uint64_t)v112, v23);
    float32x2_t v117 = *(float32x2_t *)v112;
    float v118 = *(float *)&v112[8];
    int v119 = 0;
    float32x2_t v120 = (float32x2_t)v114;
    float v121 = v115;
    int v122 = 0;
    physx::Dy::FeatherstoneArticulation::propagateVelocityW(*(void *)(a1 + 624) + 160 * v13 + 120, (float *)(*(void *)(a1 + 480) + 112 * v13), (float *)(*(void *)(a1 + 496) + 36 * v13), *(void *)(a1 + 528) + 76 * v13, (float *)&v129, a10, &v117, (float32x2_t *)v112);
    int v24 = *(_DWORD *)&v112[8];
    float v25 = v115;
    int32x2_t v26 = v114;
    uint64_t v27 = *(void *)v112;
    *a8 = v120;
    a8[1].f32[0] = v121;
    a8[2] = v117;
    a8[3].f32[0] = v118;
    *(int32x2_t *)a9 = v26;
    *(float *)(a9 + 8) = v25;
    *(void *)(a9 + 16) = v27;
    *(_DWORD *)(a9 + 24) = v24;
    return;
  }
  unsigned __int32 v28 = a4;
  unsigned __int32 v29 = a4;
  if (a3 != a4)
  {
    unsigned __int32 v30 = a3;
    unsigned __int32 v29 = a4;
    do
    {
      if (v30 >= v29) {
        unsigned __int32 v30 = *(_DWORD *)(v12 + 40 * v30 + 32);
      }
      else {
        unsigned __int32 v29 = *(_DWORD *)(v12 + 40 * v29 + 32);
      }
    }
    while (v30 != v29);
  }
  float v32 = -a6->f32[0];
  float v33 = -a6->f32[1];
  float v34 = -a6[1].f32[0];
  float v35 = -a6[3].f32[0];
  unint64_t v123 = __PAIR64__(LODWORD(v33), LODWORD(v32));
  float v124 = v34;
  int v125 = 0;
  float v127 = v35;
  int v128 = 0;
  float v37 = -a7->f32[1];
  float v38 = -a7[1].f32[0];
  float v39 = -a7[3].f32[0];
  v117.f32[0] = -a7->f32[0];
  float v36 = v117.f32[0];
  v117.f32[1] = v37;
  float v118 = v38;
  int v119 = 0;
  float v121 = v39;
  int v122 = 0;
  float v40 = (float32x2_t *)(&v129 + 2 * a3);
  v40->f32[0] = v32;
  v40->f32[1] = v33;
  v40[1].f32[0] = v34;
  v40[1].i32[1] = 0;
  float32x2_t v41 = vneg_f32(a6[2]);
  float32x2_t v126 = v41;
  v40[2] = v41;
  v40[3].f32[0] = v35;
  v40[3].i32[1] = 0;
  uint64_t v42 = (float32x2_t *)(&v129 + 2 * a4);
  v42->f32[0] = v36;
  v42->f32[1] = v37;
  v42[1].f32[0] = v38;
  v42[1].i32[1] = 0;
  float32x2_t v120 = vneg_f32(a7[2]);
  float32x2_t v105 = v120;
  v42[2] = v120;
  v42[3].f32[0] = v39;
  v42[3].i32[1] = 0;
  if (v29 == a3)
  {
    unsigned int v43 = 0;
    float v44 = v41.f32[1];
  }
  else
  {
    int v45 = 0;
    do
    {
      physx::Dy::FeatherstoneArticulation::propagateImpulseW(*(void *)(a1 + 544) + 96 * v10, (float32x2_t *)(*(void *)(a1 + 624) + 160 * v10 + 120), *(void *)(a1 + 528) + 76 * v10, (uint64_t)&v123, (uint64_t)v112);
      float v33 = *(float *)&v112[4];
      float v32 = *(float *)v112;
      unint64_t v123 = *(void *)v112;
      float v34 = *(float *)&v112[8];
      float v44 = *(float *)&v114.i32[1];
      v41.i32[0] = v114.i32[0];
      float v124 = *(float *)&v112[8];
      int v125 = 0;
      float v35 = v115;
      float32x2_t v126 = (float32x2_t)v114;
      float v127 = v115;
      int v128 = 0;
      uint64_t v46 = *(unsigned int *)(v12 + 40 * v10 + 32);
      uint64_t v47 = (float *)(&v129 + 2 * v46);
      float *v47 = *(float *)v112;
      v47[1] = v33;
      v47[2] = v34;
      v47[3] = 0.0;
      *((void *)v47 + 2) = __PAIR64__(LODWORD(v44), v41.u32[0]);
      v47[6] = v35;
      v47[7] = 0.0;
      unsigned int v43 = v45 + 1;
      v131.i32[v45++] = v10;
      unsigned int v10 = v46;
    }
    while (v46 != v29);
  }
  unsigned int v107 = v43;
  float v106 = a8;
  if (v29 == v28)
  {
    float v48 = v105.f32[1];
    float v49 = v105.f32[0];
    unsigned int v50 = v43;
  }
  else
  {
    unsigned int v50 = v43;
    do
    {
      unsigned int v51 = v50;
      physx::Dy::FeatherstoneArticulation::propagateImpulseW(*(void *)(a1 + 544) + 96 * v28, (float32x2_t *)(*(void *)(a1 + 624) + 160 * v28 + 120), *(void *)(a1 + 528) + 76 * v28, (uint64_t)&v117, (uint64_t)v112);
      float v37 = *(float *)&v112[4];
      float v36 = *(float *)v112;
      float32x2_t v117 = *(float32x2_t *)v112;
      float v38 = *(float *)&v112[8];
      float v48 = *(float *)&v114.i32[1];
      float v49 = *(float *)v114.i32;
      float v118 = *(float *)&v112[8];
      int v119 = 0;
      float v39 = v115;
      float32x2_t v120 = (float32x2_t)v114;
      float v121 = v115;
      int v122 = 0;
      uint64_t v52 = *(unsigned int *)(v12 + 40 * v28 + 32);
      float v53 = (float *)(&v129 + 2 * v52);
      *float v53 = *(float *)v112;
      v53[1] = v37;
      v53[2] = v38;
      v53[3] = 0.0;
      *((void *)v53 + 2) = __PAIR64__(LODWORD(v48), LODWORD(v49));
      v53[6] = v39;
      v53[7] = 0.0;
      ++v50;
      v131.i32[v51] = v28;
      unsigned __int32 v28 = v52;
    }
    while (v52 != v29);
    float v33 = *((float *)&v123 + 1);
    LODWORD(v32) = v123;
    float v34 = v124;
    float v44 = v126.f32[1];
    v41.i32[0] = v126.i32[0];
    float v35 = v127;
  }
  float v54 = (float *)(&v129 + 2 * v29);
  *float v54 = v36 + v32;
  v54[1] = v37 + v33;
  v54[2] = v38 + v34;
  v54[3] = 0.0;
  v54[4] = v49 + v41.f32[0];
  v54[5] = v48 + v44;
  v54[6] = v39 + v35;
  v54[7] = 0.0;
  unsigned int v55 = v50;
  if (v29)
  {
    unsigned int v56 = v50;
    do
    {
      physx::Dy::FeatherstoneArticulation::propagateImpulseW(*(void *)(a1 + 544) + 96 * v29, (float32x2_t *)(*(void *)(a1 + 624) + 160 * v29 + 120), *(void *)(a1 + 512) + 76 * v29, (uint64_t)(&v129 + 2 * v29), (uint64_t)v112);
      uint64_t v57 = *(unsigned int *)(v12 + 40 * v29 + 32);
      int v58 = (int32x2_t *)(&v129 + 2 * v57);
      *int v58 = *(int32x2_t *)v112;
      v58[1].i32[0] = *(_DWORD *)&v112[8];
      v58[1].i32[1] = 0;
      v58[2] = v114;
      *(float *)v58[3].i32 = v115;
      v58[3].i32[1] = 0;
      unsigned int v55 = v56 + 1;
      v131.i32[v56++] = v29;
      unsigned __int32 v29 = v57;
    }
    while (v57);
  }
  float v59 = (int32x2_t *)(a1 + 748);
  if (**(unsigned char **)(a1 + 664))
  {
    long long v129 = 0u;
    long long v130 = 0u;
    _S3 = 0.0;
    float v63 = 0.0;
    float v64 = 0.0;
    float v62 = 0.0;
    float v61 = 0.0;
    float v60 = 0.0;
  }
  else
  {
    float v61 = *((float *)&v129 + 1);
    float v60 = *(float *)&v129;
    float v62 = *((float *)&v129 + 2);
    float v63 = *((float *)&v130 + 1);
    float v64 = *(float *)&v130;
    _S3 = *((float *)&v130 + 2);
  }
  int v66 = (__int32 *)a9;
  unsigned int v67 = v107;
  float v68 = -v61;
  _D6 = *(int32x2_t *)(a1 + 736);
  _D20 = *v59;
  _D7 = *(int32x2_t *)(a1 + 760);
  int32x2_t v72 = (int32x2_t)vsub_f32(vsub_f32(vmul_n_f32(*(float32x2_t *)(a1 + 784), -v63), vmul_n_f32(*(float32x2_t *)(a1 + 772), v64)), vmul_n_f32(*(float32x2_t *)(a1 + 796), _S3));
  float v73 = (float)((float)((float)-(float)(v61 * *(float *)(a1 + 744)) - (float)(v60 * *(float *)(a1 + 732)))
              - (float)(v62 * *(float *)(a1 + 756)))
      + (float)((float)((float)-(float)(v63 * *(float *)(a1 + 780)) - (float)(v64 * *(float *)(a1 + 768)))
              - (float)(_S3 * *(float *)(a1 + 792)));
  float v74 = (float)((float)-(float)(v61 * *(float *)(a1 + 824)) - (float)(v60 * *(float *)(a1 + 812)))
      - (float)(v62 * *(float *)(a1 + 836));
  __asm
  {
    FMLS            S18, S3, V6.S[1]
    FMLS            S19, S3, V20.S[1]
    FMLS            S4, S3, V7.S[1]
  }
  *(int32x2_t *)v82.f32 = vrev64_s32(*(int32x2_t *)(a1 + 816));
  *(int32x2_t *)&v82.u32[2] = vrev64_s32(*v59);
  float32x4_t v83 = vmulq_n_f32(v82, v68);
  int32x2_t v84 = vrev64_s32(_D6);
  *(int32x2_t *)v85.f32 = vrev64_s32(*(int32x2_t *)(a1 + 804));
  *(int32x2_t *)&v85.u32[2] = v84;
  *(int32x2_t *)v86.f32 = vrev64_s32(*(int32x2_t *)(a1 + 828));
  *(int32x2_t *)&v86.u32[2] = vrev64_s32(_D7);
  _Q19.i32[1] = _S18;
  *(int32x2_t *)&_Q19.u32[2] = vrev64_s32(v72);
  int8x16_t v87 = (int8x16_t)vaddq_f32(_Q19, vsubq_f32(vsubq_f32(v83, vmulq_n_f32(v85, v60)), vmulq_n_f32(v86, v62)));
  *(float *)unsigned int v112 = v73;
  *(int32x2_t *)&v112[4] = vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL));
  int v113 = 0;
  int32x2_t v114 = vrev64_s32(*(int32x2_t *)v87.i8);
  float v88 = _S4 + v74;
  float v115 = _S4 + v74;
  int v116 = 0;
  if (v55 > v50)
  {
    float32x2_t v89 = (unsigned int *)&v131 + v55 - 1;
    do
    {
      unsigned int v90 = *v89--;
      physx::Dy::FeatherstoneArticulation::propagateVelocityW(*(void *)(a1 + 624) + 160 * v90 + 120, (float *)(*(void *)(a1 + 480) + 112 * v90), (float *)(*(void *)(a1 + 496) + 36 * v90), *(void *)(a1 + 528) + 76 * v90, (float *)&v129 + 8 * v90, a10, (float32x2_t *)v112, &v108);
      float v73 = v108.f32[0];
      *(float32x2_t *)unsigned int v112 = v108;
      *(_DWORD *)&v112[8] = v109;
      int v113 = 0;
      int32x2_t v114 = v110;
      float v88 = v111;
      float v115 = v111;
      int v116 = 0;
      --v55;
    }
    while (v50 < v55);
    *(int32x2_t *)v87.i8 = vrev64_s32(v110);
    v87.i64[1] = __PAIR64__(v108.u32[1], v109);
    int v66 = (__int32 *)a9;
    unsigned int v67 = v107;
  }
  if (v50 > v67)
  {
    float v91 = (unsigned int *)&v131 + v50 - 1;
    do
    {
      unsigned int v92 = *v91--;
      physx::Dy::FeatherstoneArticulation::propagateVelocityW(*(void *)(a1 + 624) + 160 * v92 + 120, (float *)(*(void *)(a1 + 480) + 112 * v92), (float *)(*(void *)(a1 + 496) + 36 * v92), *(void *)(a1 + 528) + 76 * v92, (float *)&v129 + 8 * v92, a10, (float32x2_t *)v112, &v108);
      --v50;
    }
    while (v67 < v50);
    __int32 v93 = v108.i32[1];
    __int32 v94 = v108.i32[0];
    __int32 v95 = v109;
    __int32 v96 = v110.i32[1];
    __int32 v97 = v110.i32[0];
    float v98 = v111;
    __int32 v99 = *(_DWORD *)&v112[4];
    float v73 = *(float *)v112;
    __int32 v100 = *(_DWORD *)&v112[8];
    v87.i32[0] = v114.i32[1];
    __int32 v101 = v114.i32[0];
    float v88 = v115;
    int v66 = (__int32 *)a9;
    if (!v67) {
      goto LABEL_37;
    }
    goto LABEL_34;
  }
  __int32 v101 = v87.i32[1];
  __int32 v100 = v87.i32[2];
  float v98 = v88;
  __int32 v96 = v87.i32[0];
  __int32 v99 = v87.i32[3];
  __int32 v97 = v87.i32[1];
  __int32 v93 = v87.i32[3];
  __int32 v95 = v87.i32[2];
  __int32 v94 = LODWORD(v73);
  if (v67)
  {
LABEL_34:
    unsigned int v102 = v67 - 1;
    do
    {
      uint64_t v103 = v102;
      uint64_t v104 = v131.u32[v102];
      physx::Dy::FeatherstoneArticulation::propagateVelocityW(*(void *)(a1 + 624) + 160 * v104 + 120, (float *)(*(void *)(a1 + 480) + 112 * v104), (float *)(*(void *)(a1 + 496) + 36 * v104), *(void *)(a1 + 528) + 76 * v104, (float *)&v129 + 8 * v104, a10, (float32x2_t *)v112, &v108);
      --v102;
    }
    while (v103);
    __int32 v99 = v108.i32[1];
    float v73 = v108.f32[0];
    __int32 v100 = v109;
    v87.i32[0] = v110.i32[1];
    __int32 v101 = v110.i32[0];
    float v88 = v111;
    int v66 = (__int32 *)a9;
  }
LABEL_37:
  v106->i32[0] = v101;
  v106->i32[1] = v87.i32[0];
  v106[1].f32[0] = v88;
  v106[2].f32[0] = v73;
  v106[2].i32[1] = v99;
  v106[3].i32[0] = v100;
  __int32 *v66 = v97;
  v66[1] = v96;
  *((float *)v66 + 2) = v98;
  v66[4] = v94;
  v66[5] = v93;
  v66[6] = v95;
}

float32_t physx::Dy::FeatherstoneArticulation::getImpulseResponseInv(uint64_t a1, uint64_t a2, char a3, unsigned int a4, float *a5, float32x2_t *a6, uint64_t a7)
{
  uint64_t v12 = a4;
  uint64_t v13 = *(void *)(a2 + 608);
  uint64_t v14 = *(void *)(a2 + 632);
  bzero(a5, (32 * *(_DWORD *)(a2 + 616)));
  float32_t v15 = -a6[3].f32[0];
  float v16 = (float32x2_t *)&a5[8 * v12];
  _D2 = vneg_f32(*a6);
  v16[1].f32[0] = -a6[1].f32[0];
  v16[1].i32[1] = 0;
  float32x2_t v18 = vneg_f32(a6[2]);
  *float v16 = _D2;
  v16[2] = v18;
  v16[3].f32[0] = v15;
  v16[3].i32[1] = 0;
  if (a4)
  {
    uint64_t v19 = v12;
    do
    {
      physx::Dy::FeatherstoneArticulation::propagateImpulseW(*(void *)(a2 + 544) + 96 * v19, (float32x2_t *)(*(void *)(a2 + 624) + 160 * v19 + 120), *(void *)(a2 + 528) + 76 * v19, (uint64_t)&a5[8 * v19], (uint64_t)&v49);
      uint64_t v19 = *(unsigned int *)(v13 + 40 * v19 + 32);
      float32x2_t v20 = (float32x2_t *)&a5[8 * v19];
      *float32x2_t v20 = v49;
      v20[1].i32[0] = v50;
      v20[1].i32[1] = 0;
      v20[2] = v51;
      v20[3].i32[0] = v52;
      v20[3].i32[1] = 0;
    }
    while (v19);
  }
  float32x2_t v21 = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if ((a3 & 1) == 0)
  {
    float v22 = *a5;
    float v23 = a5[1];
    float v24 = -v23;
    float v25 = a5[2];
    _D2.f32[0] = a5[4];
    float v26 = a5[5];
    float v27 = -v26;
    v21.f32[0] = a5[6];
    v28.i32[0] = *(_DWORD *)(a2 + 740);
    float v29 = *(float *)(a2 + 752);
    float v30 = *(float *)(a2 + 764);
    float v31 = (float)((float)((float)-(float)(v23 * v29) - (float)(*a5 * v28.f32[0])) - (float)(v25 * v30))
        + (float)((float)((float)-(float)(v26 * *(float *)(a2 + 788)) - (float)(_D2.f32[0] * *(float *)(a2 + 776)))
                - (float)(v21.f32[0] * *(float *)(a2 + 800)));
    float32x2_t v32 = *(float32x2_t *)(a2 + 732);
    float32x2_t v33 = *(float32x2_t *)(a2 + 744);
    _D22 = *(float32x2_t *)(a2 + 756);
    float32x2_t v35 = vadd_f32(vsub_f32(vsub_f32(vmul_n_f32(v33, -v23), vmul_n_f32(v32, *a5)), vmul_n_f32(_D22, v25)), vsub_f32(vsub_f32(vmul_n_f32(*(float32x2_t *)(a2 + 780), v27), vmul_n_f32(*(float32x2_t *)(a2 + 768), _D2.f32[0])), vmul_n_f32(*(float32x2_t *)(a2 + 792), v21.f32[0])));
    __asm { FMLS            S23, S2, V22.S[0] }
    float v41 = (float)(_S23 - (float)(v30 * v21.f32[0]))
        + (float)((float)((float)-(float)(v23 * *(float *)(a2 + 824)) - (float)(*a5 * *(float *)(a2 + 812)))
                - (float)(v25 * *(float *)(a2 + 836)));
    *(float32x2_t *)a1 = v35;
    *(float *)(a1 + 8) = v31;
    v28.f32[1] = v29;
    float32x2_t v21 = vadd_f32(vmls_lane_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip2_s32((int32x2_t)v32, (int32x2_t)v33), v27), (float32x2_t)vzip1_s32((int32x2_t)v32, (int32x2_t)v33), _D2, 0), v28, v21, 0), vsub_f32(vsub_f32(vmul_n_f32(*(float32x2_t *)(a2 + 816), v24), vmul_n_f32(*(float32x2_t *)(a2 + 804), v22)), vmul_n_f32(*(float32x2_t *)(a2 + 828), v25)));
    *(float32x2_t *)(a1 + 16) = v21;
    *(float *)(a1 + 24) = v41;
  }
  uint64_t v42 = *(void *)(v13 + 40 * v12 + 8);
  uint64_t v43 = v42 - 1;
  if (v42 != 1)
  {
    do
    {
      unsigned int v44 = __clz(__rbit32(v43));
      LODWORD(v45) = __clz(__rbit32(HIDWORD(v43))) + 32;
      if (v43) {
        uint64_t v45 = v44;
      }
      else {
        uint64_t v45 = v45;
      }
      physx::Dy::FeatherstoneArticulation::propagateVelocityW(*(void *)(a2 + 624) + 160 * v45 + 120, (float *)(*(void *)(a2 + 480) + 112 * v45), (float *)(*(void *)(a2 + 496) + 36 * v45), *(void *)(a2 + 528) + 76 * v45, &a5[8 * v45], a7 + 4 * *(unsigned int *)(v14 + 80 * v45 + 72), (float32x2_t *)a1, &v49);
      *(float32x2_t *)a1 = v49;
      *(_DWORD *)(a1 + 8) = v50;
      *(_DWORD *)(a1 + 12) = 0;
      *(float32x2_t *)(a1 + 16) = v51;
      v21.i32[0] = v52;
      *(_DWORD *)(a1 + 24) = v52;
      *(_DWORD *)(a1 + 28) = 0;
      v43 &= v43 - 1;
    }
    while (v43);
  }
  return v21.f32[0];
}

uint64_t physx::Dy::FeatherstoneArticulation::getCoefficientMatrixWithLoopJoints(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, double a5, double a6, double a7, double a8, double a9, double a10, int32x4_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  v101[117] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 684))
  {
    uint64_t v16 = physx::shdfnd::Foundation::mInstance;
    return physx::shdfnd::Foundation::error(v16, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyFeatherstoneInverseDynamic.cpp", 1211, "ArticulationHelper::getCoefficientMatrix() commonInit need to be called first to initialize data!", a13, a14, a15, a16);
  }
  else
  {
    float v22 = (float32x2_t *)(a1 + 176);
    physx::Dy::FeatherstoneArticulation::computeArticulatedSpatialInertia(a1, a1 + 176, a5, a6, a7, a8, a9, a10, a11);
    int v23 = *(_DWORD *)(a1 + 616);
    int v63 = *(_DWORD *)(a1 + 652);
    float v64 = *(char **)(a4 + 80);
    bzero(v64, 4 * a3 * v63);
    char v24 = **(unsigned char **)(a1 + 664);
    float v25 = *(pthread_mutex_t ***)(a4 + 104);
    uint64_t v99 = 0;
    long long v97 = 0u;
    long long v98 = 0u;
    uint64_t v95 = 0;
    v94[0] = physx::PxcScratchAllocator::alloc(v25, 240 * v23, 0);
    v94[1] = v94[0] + (32 * v23);
    float v26 = (float *)(v94[0] + (96 * v23));
    v94[2] = v94[0] + (v23 << 6);
    v94[3] = v26;
    float v61 = (void *)v94[0];
    float v62 = (physx::PxcScratchAllocator *)v25;
    uint64_t v96 = v94[0] + (v23 << 7);
    uint64_t v65 = *(unsigned int *)(a1 + 652);
    uint64_t result = physx::PxcScratchAllocator::alloc(v25, 8 * (int)v65, 0);
    if (a3)
    {
      float v27 = (void *)result;
      uint64_t v28 = a2;
      uint64_t v29 = 0;
      size_t v30 = (4 * v65);
      size_t v58 = result + v30;
      uint64_t v57 = a3;
      float v31 = 1.0 / *(float *)(a1 + 648);
      float v59 = v22;
      uint64_t v60 = v28;
      do
      {
        uint64_t v32 = *(void *)(v28 + 16 * v29 + 8);
        bzero(v100, 0x3C0uLL);
        for (uint64_t i = 0; i != 960; i += 80)
        {
          float v34 = &v100[i];
          *((_DWORD *)v34 + 11) = -8388609;
          *((_DWORD *)v34 + 15) = 2139095039;
        }
        uint64_t v35 = 0;
        int v36 = 0;
        int v37 = 0;
        long long v38 = xmmword_23435FBB0;
        uint64_t v39 = 0;
        if (*(void *)(v32 + 40))
        {
          uint64_t v40 = *(void *)(v32 + 56);
          long long v38 = *(_OWORD *)v40;
          uint64_t v39 = *(void *)(v40 + 16);
          int v37 = *(_DWORD *)(v40 + 24);
        }
        long long v91 = v38;
        uint64_t v92 = v39;
        int v93 = v37;
        long long v41 = xmmword_23435FBB0;
        if (*(void *)(v32 + 48))
        {
          uint64_t v42 = *(void *)(v32 + 64);
          long long v41 = *(_OWORD *)v42;
          uint64_t v35 = *(void *)(v42 + 16);
          int v36 = *(_DWORD *)(v42 + 24);
        }
        uint64_t v43 = (unsigned int *)(v28 + 16 * v29);
        long long v88 = v41;
        uint64_t v89 = v35;
        int v90 = v36;
        uint64_t v86 = 0;
        int v87 = 0;
        int v44 = (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, unsigned char *, void, long long *, long long *, void, unsigned char *, unsigned char *))(v32 + 16))(v100, &v86, 12, v83, *(void *)(v32 + 32), &v91, &v88, (*(unsigned __int16 *)(v32 + 10) >> 9) & 1, v85, v84);
        uint64_t v45 = v29;
        LODWORD(v29) = v44;
        unsigned int v46 = *v43;
        uint64_t v66 = v45;
        unsigned __int32 v47 = *(_DWORD *)(v28 + 16 * v45 + 4);
        bzero(v27, v30);
        if (v29)
        {
          BOOL v49 = v46 != 0x80000000 && v47 != 0x80000000;
          uint64_t v29 = v29;
          __int32 v50 = (float32x2_t *)v101;
          do
          {
            if (v49)
            {
              float32x2_t v77 = v50[-4];
              __int32 v78 = v50[-3].i32[0];
              int v79 = 0;
              float32x2_t v80 = v50[-2];
              __int32 v81 = v50[-1].i32[0];
              int v82 = 0;
              float32x2_t v71 = *v50;
              __int32 v72 = v50[1].i32[0];
              int v73 = 0;
              float32x2_t v74 = v50[2];
              __int32 v75 = v50[3].i32[0];
              int v76 = 0;
              char v51 = v24 & 1;
              if (v46 <= v47) {
                physx::Dy::FeatherstoneArticulation::getImpulseSelfResponseInv(a1, v51, v46, v47, (uint64_t)v26, &v77, &v71, v70, (uint64_t)v69, (uint64_t)v27);
              }
              else {
                physx::Dy::FeatherstoneArticulation::getImpulseSelfResponseInv(a1, v51, v47, v46, (uint64_t)v26, &v71, &v77, v69, (uint64_t)v70, (uint64_t)v27);
              }
            }
            else
            {
              if (v46 == 0x80000000)
              {
                float32x2_t v77 = *v50;
                __int32 v78 = v50[1].i32[0];
                int v79 = 0;
                float32x2_t v80 = v50[2];
                __int32 v81 = v50[3].i32[0];
                int v82 = 0;
                __int32 v52 = &v68;
                uint64_t v53 = a1;
                unsigned int v54 = v47;
              }
              else
              {
                float32x2_t v77 = v50[-4];
                __int32 v78 = v50[-3].i32[0];
                int v79 = 0;
                float32x2_t v80 = v50[-2];
                __int32 v81 = v50[-1].i32[0];
                int v82 = 0;
                __int32 v52 = &v67;
                uint64_t v53 = a1;
                unsigned int v54 = v46;
              }
              physx::Dy::FeatherstoneArticulation::getImpulseResponseInv((uint64_t)v52, v53, v24 & 1, v54, v26, &v77, (uint64_t)v27);
            }
            v50 += 10;
            --v29;
          }
          while (v29);
        }
        unsigned int v55 = (float *)v27;
        uint64_t v56 = v65;
        if (v65)
        {
          do
          {
            *(float *)((char *)v55 + v30) = v31 * *v55;
            ++v55;
            --v56;
          }
          while (v56);
        }
        physx::Dy::FeatherstoneArticulation::computeSpatialInertia(a1, (uint64_t)v59);
        uint64_t v95 = 0;
        *(void *)&long long v97 = 0;
        *((void *)&v97 + 1) = v58;
        *(void *)&long long v98 = &v64[4 * (v63 * v66)];
        float32x2_t v77 = 0;
        __int32 v78 = 0;
        if (v24) {
          physx::Dy::FeatherstoneArticulation::inverseDynamic(a1, v59, &v77, (uint64_t)v94, 0);
        }
        else {
          physx::Dy::FeatherstoneArticulation::inverseDynamicFloatingBase(a1, (uint64_t)v59, &v77, (uint64_t)v94, 0);
        }
        uint64_t v28 = v60;
        physx::PxcScratchAllocator::free((uint64_t)v62, (unint64_t)v27);
        uint64_t result = physx::PxcScratchAllocator::free((uint64_t)v62, (unint64_t)v61);
        uint64_t v29 = v66 + 1;
      }
      while (v66 + 1 != v57);
    }
  }
  return result;
}

uint64_t physx::Dy::FeatherstoneArticulation::getLambda(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, float *a6, float32x2_t *a7, int a8)
{
  uint64_t v182 = *MEMORY[0x263EF8340];
  float v9 = *(float *)(a1 + 648);
  uint64_t v114 = *(unsigned int *)(a1 + 652);
  int v10 = *(_DWORD *)(a1 + 616);
  float32x2_t v144 = (uint64_t (**)(void, void))&unk_26E724D60;
  v145[0] = &unk_26E724DA8;
  memset(&v145[1], 0, 24);
  int v146 = 0;
  uint64_t v11 = 6;
  do
  {
    uint64_t v12 = &v145[v11 - 1];
    void *v12 = &unk_26E724DA8;
    v12[1] = 0;
    _DWORD v12[2] = 0;
    v12[3] = 0;
    *((_DWORD *)v12 + 8) = 0;
    v11 += 5;
  }
  while (v12 + 5 != (void *)&v148);
  unsigned int v148 = 0;
  uint64_t v13 = (pthread_mutex_t **)a4[13];
  size_t v14 = (32 * v10);
  float32_t v15 = (float *)physx::PxcScratchAllocator::alloc(v13, 32 * v10, 1);
  size_t v107 = v14;
  uint64_t v16 = (float32x2_t *)physx::PxcScratchAllocator::alloc(v13, v14, 1);
  __b = (void *)physx::PxcScratchAllocator::alloc(v13, 8 * (int)a3, 1);
  float v17 = (float *)a4[11];
  uint64_t v106 = a4[10];
  memset(v143, 0, sizeof(v143));
  long long v140 = 0u;
  long long v141 = 0u;
  long long v142 = 0u;
  memset(v139, 0, sizeof(v139));
  HIDWORD(v140) = 2139095039;
  DWORD1(v140) = -8388609;
  HIDWORD(v141) = 1065353216;
  float v137 = v15;
  float32x2_t v138 = v16;
  v136[0] = 0;
  uint64_t v124 = physx::PxcScratchAllocator::alloc(v13, 48 * (int)a3, 1);
  uint64_t v109 = (uint64_t)v13;
  uint64_t v18 = physx::PxcScratchAllocator::alloc(v13, 48 * *(_DWORD *)(a1 + 616) - 1, 1);
  v135[0] = a1;
  int v134 = 0;
  unint64_t v108 = v18;
  float32x2_t v120 = v15;
  float v115 = v16;
  physx::Dy::FeatherstoneArticulation::computeUnconstrainedVelocities(v135, v9, (uint64_t)&v144, v18, &v134, a7, 0, v15, v16);
  double v21 = 0.0;
  long long v132 = 0u;
  long long v131 = 0u;
  long long v133 = 0u;
  float v22 = *(int **)(a1 + 336);
  v130[0] = *(int **)(a1 + 320);
  v130[1] = v22;
  int v23 = *(int **)(a1 + 368);
  v130[2] = *(int **)(a1 + 352);
  v130[3] = v23;
  uint64_t v24 = *(void *)(a1 + 208);
  *((void *)&v131 + 1) = *(void *)(a1 + 224);
  *(void *)&long long v132 = v24;
  uint64_t v25 = *(void *)(a1 + 256);
  *((void *)&v132 + 1) = *(void *)(a1 + 272);
  *(void *)&long long v133 = v25;
  v130[4] = *(int **)(a1 + 672);
  int v26 = a8;
  if (a3)
  {
    unsigned int v27 = a3;
    uint64_t v28 = 0;
    float v29 = *(float *)(a1 + 648);
    unsigned int v104 = v27;
    size_t v119 = v27;
    __asm { FMOV            V0.4S, #1.0 }
    int64x2_t v117 = vdupq_n_s64(a1);
    long long v118 = _Q0;
    uint64_t v35 = v124;
    while (1)
    {
      int v36 = *(uint64_t **)(a2 + 16 * v28 + 8);
      int v122 = (int64x2_t *)(v35 + 48 * v28);
      float v159 = v122;
      uint64_t v172 = *v36;
      uint64_t v174 = *(void *)(*(void *)(a1 + 32) + 232) + 32 * *((unsigned int *)v36 + 18);
      __int16 v37 = *((_WORD *)v36 + 5);
      char v175 = HIBYTE(v37) & 1;
      BOOL v176 = (v37 & 0x80) != 0;
      BOOL v177 = (v37 & 0x20) != 0;
      BOOL v178 = (v37 & 0x200) != 0;
      int v173 = *((_DWORD *)v36 + 19);
      bzero(v181, 0x3C0uLL);
      for (uint64_t i = 0; i != 960; i += 80)
      {
        uint64_t v39 = &v181[i];
        *((_DWORD *)v39 + 11) = -8388609;
        *((_DWORD *)v39 + 15) = 2139095039;
      }
      long long v158 = v118;
      uint64_t v40 = 0;
      int v41 = 0;
      int v42 = 0;
      long long v43 = xmmword_23435FBB0;
      uint64_t v44 = 0;
      if (v36[5])
      {
        uint64_t v45 = v36[7];
        long long v43 = *(_OWORD *)v45;
        uint64_t v44 = *(void *)(v45 + 16);
        int v42 = *(_DWORD *)(v45 + 24);
      }
      long long v156 = v43;
      v157[0] = v44;
      LODWORD(v157[1]) = v42;
      long long v46 = xmmword_23435FBB0;
      if (v36[6])
      {
        uint64_t v47 = v36[8];
        long long v46 = *(_OWORD *)v47;
        uint64_t v40 = *(void *)(v47 + 16);
        int v41 = *(_DWORD *)(v47 + 24);
      }
      *(_OWORD *)uint64_t v154 = v46;
      *(void *)&v154[16] = v40;
      int v155 = v41;
      uint64_t v152 = 0;
      int v153 = 0;
      int v48 = ((uint64_t (*)(unsigned char *, uint64_t *, uint64_t, char *, uint64_t, long long *, unsigned char *, void, char *, char *))v36[2])(v181, &v152, 12, v149, v36[4], &v156, v154, (*((unsigned __int16 *)v36 + 5) >> 9) & 1, v151, v150);
      uint64_t v179 = v152;
      int v180 = v153;
      long long v164 = v156;
      *(void *)&long long v49 = *(void *)((char *)v157 + 4);
      *((void *)&v49 + 1) = *(void *)v154;
      int v165 = v157[0];
      long long v166 = v49;
      long long v167 = *(_OWORD *)&v154[8];
      int v168 = v155;
      int v171 = v48;
      float v170 = v181;
      int v50 = *(_DWORD *)(a2 + 16 * v28);
      int v51 = *(_DWORD *)(a2 + 16 * v28 + 4);
      if (v50 != 0x80000000 && v51 != 0x80000000) {
        break;
      }
      if (v50 == 0x80000000)
      {
        uint64_t v55 = v124 + 48 * v28;
        *(_WORD *)(v55 + 16) = -1;
        *(_WORD *)(v55 + 18) = v51;
        uint64_t v53 = (uint64_t *)(v35 + 48 * v28);
        v122->i64[0] = (uint64_t)v143;
        *(void *)(v55 + 8) = a1;
        uint64_t v54 = 0x800000002;
        goto LABEL_18;
      }
      uint64_t v53 = (uint64_t *)(v35 + 48 * v28);
      if (v51 == 0x80000000)
      {
        uint64_t v56 = v124 + 48 * v28;
        *(_WORD *)(v56 + 16) = v50;
        *(_WORD *)(v56 + 18) = -1;
        v122->i64[0] = a1;
        *(void *)(v56 + 8) = v143;
        uint64_t v54 = 0x200000008;
        goto LABEL_18;
      }
LABEL_19:
      uint64_t v160 = *v53;
      uint64_t v35 = v124;
      uint64_t v161 = *(void *)(v124 + 48 * v28 + 8);
      float v162 = v139;
      float v163 = v139;
      physx::Dy::ConstraintHelper::setupSolverConstraint((uint64_t)&v158, &v144, (uint64_t)v15, v29, 1.0 / v29);
      if (++v28 == v119)
      {
        memset_pattern16(__b, &unk_23441FF20, 4 * v119);
        int v26 = a8;
        a3 = v104;
        goto LABEL_21;
      }
    }
    uint64_t v52 = v124 + 48 * v28;
    *(_WORD *)(v52 + 16) = v50;
    *(_WORD *)(v52 + 18) = v51;
    uint64_t v53 = (uint64_t *)(v35 + 48 * v28);
    *int v122 = v117;
    uint64_t v54 = 0x800000008;
LABEL_18:
    uint64_t v169 = v54;
    goto LABEL_19;
  }
LABEL_21:
  if (v26)
  {
    int v57 = 0;
    uint64_t v123 = a1 + 176;
    uint64_t v58 = a3;
    uint64_t v60 = a3;
    unint64_t v61 = (unint64_t)__b;
    unint64_t v62 = v124;
    do
    {
      int v125 = v57;
      uint64_t v63 = v60;
      if (v60)
      {
        uint64_t v64 = 0;
        do
        {
          uint64_t v65 = *(void *)(v124 + 48 * v64 + 32);
          int v66 = *(unsigned __int8 *)(v65 + 1);
          if (*(unsigned char *)(v65 + 1))
          {
            char v67 = (_DWORD *)(v65 + 136);
            do
            {
              _DWORD *v67 = 0;
              v67 += 40;
              --v66;
            }
            while (v66);
          }
          ++v64;
        }
        while (v64 != v58);
      }
      for (int j = 0; j != 4; ++j)
      {
        while (1)
        {
          uint64_t v69 = v124;
          uint64_t v70 = v58;
          if (v63) {
            break;
          }
          if (++j == 4)
          {
            physx::Dy::PxcFsFlushVelocity(a1, v115, v21, v19, v20);
            char v102 = 1;
            goto LABEL_62;
          }
        }
        do
        {
          *(float *)&double v21 = physx::Dy::solveExt1D(v69, (uint64_t)v136);
          v69 += 48;
          --v70;
        }
        while (v70);
      }
      uint64_t v71 = 0;
      do
      {
        __int32 v72 = *(unsigned __int8 **)(v124 + 48 * v71 + 32);
        if (v72)
        {
          int v73 = v72[1];
          if (v72[1])
          {
            int v75 = *v72;
            float32x2_t v74 = v72 + 76;
            if (v75 == 4) {
              uint64_t v76 = 160;
            }
            else {
              uint64_t v76 = 96;
            }
            do
            {
              LODWORD(v21) = *v74;
              *(v74 - 4) = *v74;
              float32x2_t v74 = (_DWORD *)((char *)v74 + v76);
              --v73;
            }
            while (v73);
          }
        }
        ++v71;
      }
      while (v71 != v58);
      uint64_t v60 = v63;
      physx::Dy::PxcFsFlushVelocity(a1, v115, v21, v19, v20);
      uint64_t v77 = v124;
      uint64_t v78 = v58;
      do
      {
        physx::Dy::solveExt1D(v77, (uint64_t)v136);
        physx::Dy::writeBack1D(v77);
        v77 += 48;
        --v78;
      }
      while (v78);
      int v79 = (float *)(*(void *)(*(void *)(a1 + 32) + 232) + 32 * *(unsigned int *)(*(void *)(a2 + 8) + 72));
      char v102 = 1;
      float32x2_t v80 = v17;
      __int32 v81 = (float *)__b;
      uint64_t v82 = v58;
      do
      {
        float v59 = 1.0 / v9;
        float v83 = v9
            * sqrtf((float)((float)((float)(v59 * v79[1]) * (float)(v59 * v79[1]))+ (float)((float)(v59 * *v79) * (float)(v59 * *v79)))+ (float)((float)(v59 * v79[2]) * (float)(v59 * v79[2])));
        *v80++ = v83;
        if (vabds_f32(*v81, v83) > 0.00001) {
          char v102 = 0;
        }
        *v81++ = v83;
        --v82;
      }
      while (v82);
      if (v102) {
        break;
      }
      int32x2_t v84 = (float *)a4[6];
      bzero(v84, (4 * v114));
      uint64_t v85 = 0;
      do
      {
        while (!v114)
        {
          if (++v85 == v58) {
            goto LABEL_59;
          }
        }
        uint64_t v86 = (float *)(v106 + 4 * (v114 * v85));
        int v87 = v84;
        uint64_t v88 = v114;
        do
        {
          float v89 = *v86++;
          *int v87 = *v87 + (float)(v89 * v17[v85]);
          ++v87;
          --v88;
        }
        while (v88);
        ++v85;
      }
      while (v85 != v58);
      int v90 = a6;
      uint64_t v91 = v114;
      do
      {
        float v92 = *v90++;
        *int32x2_t v84 = v92 - *v84;
        ++v84;
        --v91;
      }
      while (v91);
LABEL_59:
      char v129 = 119;
      uint64_t v93 = a1;
      (*(void (**)(uint64_t, uint64_t, char *))(*(void *)a1 + 72))(a1, a5, &v129);
      char v128 = 8;
      (*(void (**)(uint64_t, void *, char *))(*(void *)v93 + 72))(v93, a4, &v128);
      bzero(*(void **)(v93 + 432), (32 * *(_DWORD *)(v93 + 616)));
      bzero(*(void **)(v93 + 240), (4 * *(_DWORD *)(v93 + 652)));
      *(unsigned char *)(a1 + 685) = 0;
      physx::Dy::FeatherstoneArticulation::computeLinkVelocities(a1, v123, v130);
      physx::Dy::FeatherstoneArticulation::computeZ(v94, v95, v96, v97, v98, v99, v100, a1, v123, a7, v130);
      physx::Dy::FeatherstoneArticulation::computeArticulatedSpatialZ(v101, a1, v123, v130);
      physx::Dy::FeatherstoneArticulation::computeLinkAcceleration(a1, v123, (uint64_t)v130);
      bzero(*(void **)(a1 + 368), v107);
      int v57 = v125 + 1;
    }
    while (v125 + 1 != v26);
  }
  else
  {
    char v102 = 1;
    unint64_t v61 = (unint64_t)__b;
    unint64_t v62 = v124;
  }
LABEL_62:
  physx::PxcScratchAllocator::free(v109, v108);
  physx::PxcScratchAllocator::free(v109, v61);
  physx::PxcScratchAllocator::free(v109, (unint64_t)v120);
  physx::PxcScratchAllocator::free(v109, (unint64_t)v115);
  physx::PxcScratchAllocator::free(v109, v62);
  unsigned int v148 = 1 - v148;
  physx::Dy::BlockBasedAllocator::release((uint64_t)v145);
  physx::Dy::BlockBasedAllocator::release((uint64_t)&v147[5 * v148]);
  char v127 = 119;
  (*(void (**)(uint64_t, uint64_t, char *))(*(void *)a1 + 72))(a1, a5, &v127);
  physx::Dy::ArticulationBlockAllocator::~ArticulationBlockAllocator((physx::Dy::ArticulationBlockAllocator *)&v144);
  return v102 & 1;
}

uint64_t physx::Dy::computeHi(uint64_t a1, unsigned int a2, uint64_t a3, float32x2_t *a4)
{
  uint64_t result = a2;
  uint64_t v6 = *(void *)(a1 + 432);
  uint64_t v7 = *(void *)(a1 + 456);
  int v8 = *(_DWORD *)(a1 + 476);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80 * a2 + 76);
  if (*(unsigned char *)(v7 + 80 * a2 + 76))
  {
    uint64_t v10 = 0;
    int v11 = *(_DWORD *)(v7 + 80 * a2 + 72);
    unsigned int v12 = v11 + v11 * v8;
    uint64_t v13 = *(void *)(a1 + 352) + 76 * a2 + 12;
    do
    {
      float32_t v15 = (float *)v13;
      unsigned int v16 = v12;
      uint64_t v17 = v9;
      do
      {
        size_t v14 = (float *)&a4[4 * v10];
        *(float *)(a3 + 4 * v16++) = (float)((float)((float)(v15[1] * v14[1]) + (float)(*v15 * *v14))
                                             + (float)(v15[2] * v14[2]))
                                     + (float)((float)((float)(*(v15 - 2) * v14[5]) + (float)(*(v15 - 3) * v14[4]))
                                             + (float)(*(v15 - 1) * v14[6]));
        v15 += 6;
        --v17;
      }
      while (v17);
      ++v10;
      v12 += v8;
    }
    while (v10 != v9);
  }
  uint64_t v18 = *(unsigned int *)(v6 + 40 * a2 + 32);
  if (v18)
  {
    double v19 = (_DWORD *)(v7 + 80 * a2 + 72);
    uint64_t v20 = *(void *)(a1 + 448);
    uint64_t v21 = *(void *)(a1 + 352);
    if (v9 <= 1) {
      uint64_t v22 = 1;
    }
    else {
      uint64_t v22 = v9;
    }
    int v23 = a4 + 2;
    LOBYTE(v24) = v9;
    do
    {
      uint64_t v25 = result;
      uint64_t result = v18;
      if ((_BYTE)v24)
      {
        uint64_t v26 = v20 + 160 * v25;
        unsigned int v27 = (float32x2_t *)(v26 + 124);
        uint64_t v28 = v23;
        uint64_t v29 = v22;
        do
        {
          float v30 = v28[-2].f32[0];
          float v31 = *(float *)(v26 + 120);
          float v32 = v28[1].f32[0];
          v28[-1].i32[1] = 0;
          float32x2_t v33 = *(float32x2_t *)((char *)v28 - 12);
          v34.i32[1] = HIDWORD(*(unint64_t *)v27);
          *(float *)v34.i32 = v31;
          v35.i32[0] = vdup_lane_s32((int32x2_t)v33, 1).u32[0];
          v35.f32[1] = v30;
          float32_t v36 = vmlas_n_f32(-(float)(COERCE_FLOAT(*v27) * v30), v31, v33.f32[0]) + v32;
          *uint64_t v28 = vadd_f32(vmla_f32(vmul_f32(v33, vneg_f32((float32x2_t)vrev64_s32(v34))), v35, *v27), *v28);
          v28[1].f32[0] = v36;
          v28[1].i32[1] = 0;
          v28 += 4;
          --v29;
        }
        while (v29);
        unsigned int v24 = v9;
      }
      else
      {
        unsigned int v24 = 0;
      }
      uint64_t v37 = v7 + 80 * result;
      uint64_t v38 = *(unsigned __int8 *)(v37 + 76);
      if (*(unsigned char *)(v37 + 76))
      {
        uint64_t v39 = 0;
        uint64_t v40 = v21 + 76 * result;
        int v41 = *(_DWORD *)(v7 + 80 * result + 72);
        int v42 = v41;
        do
        {
          if (v24)
          {
            long long v43 = (float *)(v40 + 24 * v39);
            uint64_t v44 = v43 + 3;
            uint64_t v45 = v43 + 4;
            long long v46 = v43 + 5;
            unsigned int v47 = v42 + v8 * *v19;
            int v48 = (float *)v23;
            uint64_t v49 = v24;
            do
            {
              *(float *)(a3 + 4 * v47) = (float)((float)((float)(*v45 * *(v48 - 3)) + (float)(*v44 * *(v48 - 4)))
                                                 + (float)(*v46 * *(v48 - 2)))
                                         + (float)((float)((float)(*(float *)(v40 + 24 * v39 + 4) * v48[1])
                                                         + (float)(*(float *)(v40 + 24 * v39) * *v48))
                                                 + (float)(*(float *)(v40 + 24 * v39 + 8) * v48[2]));
              v47 += v8;
              v48 += 8;
              --v49;
            }
            while (v49);
          }
          ++v39;
          ++v42;
        }
        while (v39 != v38);
        int v50 = 0;
        int v51 = v8 * v41;
        do
        {
          if (v24)
          {
            unsigned int v52 = *v19 + v51;
            unsigned int v53 = v41 + v8 * *v19;
            uint64_t v54 = v24;
            do
            {
              *(_DWORD *)(a3 + 4 * v52++) = *(_DWORD *)(a3 + 4 * v53);
              v53 += v8;
              --v54;
            }
            while (v54);
          }
          ++v50;
          v51 += v8;
          ++v41;
        }
        while (v50 != v38);
      }
      uint64_t v18 = *(unsigned int *)(v6 + 40 * result + 32);
    }
    while (v18);
  }
  return result;
}

uint64_t physx::Dy::FeatherstoneArticulation::getGeneralizedMassMatrixCRB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v266 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 684))
  {
    uint64_t v9 = physx::shdfnd::Foundation::mInstance;
    return physx::shdfnd::Foundation::error(v9, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyFeatherstoneInverseDynamic.cpp", 2004, "ArticulationHelper::getGeneralizedMassMatrix() commonInit need to be called first to initialize data!", a6, a7, a8, a9);
  }
  else
  {
    uint64_t v222 = a1 + 176;
    char v12 = **(unsigned char **)(a1 + 664);
    uint64_t v13 = *(unsigned int *)(a1 + 652);
    size_t v14 = *(void **)(a2 + 16);
    bzero(v14, (4 * v13 * v13));
    int v16 = *(_DWORD *)(a1 + 616);
    uint64_t v17 = *(pthread_mutex_t ***)(a2 + 104);
    uint64_t v220 = *(void *)(a1 + 608);
    uint64_t v225 = a1;
    if (v12)
    {
      float v217 = (char *)physx::PxcScratchAllocator::alloc(v17, 112 * v16, 0);
      physx::Dy::FeatherstoneArticulation::initCompositeSpatialInertia(*(void *)(a1 + 608), *(_DWORD *)(a1 + 616), (uint64_t)v217);
      uint64_t v166 = (v16 - 1);
      if (v166)
      {
        uint64_t v167 = 76 * v166 + 12;
        do
        {
          int v168 = &v217[112 * v166];
          float32x2_t v236 = *(float32x2_t *)v168;
          float32x2_t v237 = *(float32x2_t *)(v168 + 8);
          float32x2_t v238 = *(float32x2_t *)(v168 + 16);
          float32x2_t v239 = *(float32x2_t *)(v168 + 24);
          float32x2_t v240 = *(float32x2_t *)(v168 + 32);
          float32x2_t v241 = *(float32x2_t *)(v168 + 40);
          float32x2_t v242 = *(float32x2_t *)(v168 + 48);
          float32x2_t v243 = *(float32x2_t *)(v168 + 56);
          float32x2_t v244 = *(float32x2_t *)(v168 + 64);
          float32x2_t v245 = *(float32x2_t *)(v168 + 72);
          float32x2_t v246 = *(float32x2_t *)(v168 + 80);
          float32x2_t v247 = *(float32x2_t *)(v168 + 88);
          float32x2_t v248 = *(float32x2_t *)(v168 + 96);
          float v249 = *((float *)v168 + 26);
          int v250 = *((_DWORD *)v168 + 27);
          uint64_t v169 = *(void *)(a1 + 624) + 160 * v166;
          float v170 = *(float *)(v169 + 120);
          v229[0] = 0;
          float32x2_t v171 = *(float32x2_t *)(v169 + 124);
          v229[1] = v171.i32[1];
          float32x2_t v230 = vneg_f32(v171);
          int v231 = 0;
          float v232 = v170;
          __int32 v233 = v171.i32[0];
          float v234 = -v170;
          int v235 = 0;
          physx::Dy::FeatherstoneArticulation::translateInertia((uint64_t)v229, (uint64_t)&v236);
          uint64_t v172 = (float32x2_t *)&v217[112 * *(unsigned int *)(v220 + 40 * v166 + 32)];
          float32x2_t v173 = v172[1];
          *uint64_t v172 = vadd_f32(v236, *v172);
          v172[1] = vadd_f32(v237, v173);
          float32x2_t v174 = v172[3];
          v172[2] = vadd_f32(v238, v172[2]);
          v172[3] = vadd_f32(v239, v174);
          float32x2_t v175 = v172[5];
          v172[4] = vadd_f32(v240, v172[4]);
          v172[5] = vadd_f32(v241, v175);
          float32x2_t v176 = v172[7];
          v172[6] = vadd_f32(v242, v172[6]);
          v172[7] = vadd_f32(v243, v176);
          float32x2_t v177 = v172[9];
          v172[8] = vadd_f32(v244, v172[8]);
          v172[9] = vadd_f32(v245, v177);
          float32x2_t v178 = v172[11];
          v172[10] = vadd_f32(v246, v172[10]);
          v172[11] = vadd_f32(v247, v178);
          v172[12] = vadd_f32(v248, v172[12]);
          v172[13].f32[0] = v249 + v172[13].f32[0];
          uint64_t v179 = *(unsigned __int8 *)(*(void *)(a1 + 632) + 80 * v166 + 76);
          if (*(unsigned char *)(*(void *)(a1 + 632) + 80 * v166 + 76))
          {
            int v180 = &v217[112 * v166];
            float v181 = *((float *)v168 + 8);
            float v228 = *((float *)v180 + 11);
            float v182 = *((float *)v168 + 14);
            float v183 = *((float *)v180 + 17);
            float v184 = *((float *)v168 + 20);
            float v185 = *((float *)v180 + 23);
            float32x2_t v186 = *(float32x2_t *)(v168 + 72);
            float32x2_t v187 = *(float32x2_t *)(v180 + 84);
            float32x2_t v188 = *(float32x2_t *)(v168 + 96);
            float v189 = *((float *)v168 + 26);
            float v190 = *((float *)v168 + 2);
            float32x2_t v191 = *(float32x2_t *)(v168 + 24);
            float32x2_t v192 = *(float32x2_t *)(v180 + 36);
            float32x2_t v193 = *(float32x2_t *)(v168 + 48);
            float32x2_t v194 = *(float32x2_t *)(v180 + 60);
            float32x2_t v195 = *(float32x2_t *)v168;
            float32x2_t v196 = *(float32x2_t *)(v168 + 12);
            v202.f32[0] = v190;
            float32x2_t v197 = (float32x2_t)vzip1_s32(*(int32x2_t *)v168, (int32x2_t)v196);
            float v198 = *((float *)v168 + 5);
            float32x2_t v199 = (float32x2_t)vzip2_s32(*(int32x2_t *)v168, (int32x2_t)v196);
            float32x2_t v200 = (float *)(*(void *)(a1 + 528) + v167);
            float32x2_t v201 = &v253;
            v202.f32[1] = v198;
            do
            {
              float v203 = *(v200 - 3);
              float v204 = *(v200 - 2);
              float v205 = *(v200 - 1);
              float v206 = *v200;
              float v207 = v200[1];
              float v208 = v200[2];
              float32_t v209 = (float)((float)((float)(v190 * v203) + (float)(v198 * v204)) + (float)(v181 * v205))
                   + (float)((float)((float)(v228 * *v200) + (float)(v182 * v207)) + (float)(v183 * v208));
              float32_t v210 = (float)((float)((float)(v184 * v203) + (float)(v185 * v204)) + (float)(v189 * v205))
                   + (float)((float)((float)(v191.f32[1] * v207) + (float)(v191.f32[0] * *v200)) + (float)(v181 * v208));
              v201[-2] = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(v195, v203), vmul_n_f32(v196, v204)), vmul_n_f32(v191, v205)), vadd_f32(vadd_f32(vmul_n_f32(v192, *v200), vmul_n_f32(v193, v207)), vmul_n_f32(v194, v208)));
              v201[-1].f32[0] = v209;
              float32x2_t *v201 = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(v186, v203), vmul_n_f32(v187, v204)), vmul_n_f32(v188, v205)), vmla_n_f32(vmla_n_f32(vmul_n_f32(v199, v207), v197, v206), v202, v208));
              v201[1].f32[0] = v210;
              v201 += 4;
              v200 += 6;
              --v179;
            }
            while (v179);
          }
          physx::Dy::computeHi(v222, v166, (uint64_t)v14, &v251);
          v167 -= 76;
          --v166;
        }
        while (v166);
      }
      uint64_t v164 = (uint64_t)v17;
      unint64_t v165 = (unint64_t)v217;
    }
    else
    {
      uint64_t v215 = *(void *)(a1 + 624);
      uint64_t v18 = (float *)physx::PxcScratchAllocator::alloc(v17, 112 * v16, 0);
      uint64_t v211 = v13;
      uint64_t v19 = physx::PxcScratchAllocator::alloc(v17, 32 * (int)v13, 0);
      physx::Dy::FeatherstoneArticulation::initCompositeSpatialInertia(*(void *)(a1 + 608), *(_DWORD *)(a1 + 616), (uint64_t)v18);
      uint64_t v20 = (v16 - 1);
      if (v16 != 1)
      {
        uint64_t v21 = a1;
        uint64_t v218 = v19 + 16;
        uint64_t v226 = 76 * v20 + 12;
        uint64_t v213 = v19;
        do
        {
          uint64_t v22 = &v18[28 * v20];
          float32x2_t v251 = *(float32x2_t *)v22;
          float32x2_t v252 = *(float32x2_t *)(v22 + 2);
          float32x2_t v253 = *(float32x2_t *)(v22 + 4);
          float32x2_t v254 = *(float32x2_t *)(v22 + 6);
          float32x2_t v255 = *(float32x2_t *)(v22 + 8);
          float32x2_t v256 = *(float32x2_t *)(v22 + 10);
          float32x2_t v257 = *(float32x2_t *)(v22 + 12);
          float32x2_t v258 = *(float32x2_t *)(v22 + 14);
          float32x2_t v259 = *(float32x2_t *)(v22 + 16);
          float32x2_t v260 = *(float32x2_t *)(v22 + 18);
          float32x2_t v261 = *(float32x2_t *)(v22 + 20);
          float32x2_t v262 = *(float32x2_t *)(v22 + 22);
          float32x2_t v263 = *(float32x2_t *)(v22 + 24);
          float v264 = v22[26];
          int v265 = *((_DWORD *)v22 + 27);
          uint64_t v23 = *(void *)(v21 + 624) + 160 * v20;
          float v24 = *(float *)(v23 + 120);
          v236.i32[0] = 0;
          float32x2_t v25 = *(float32x2_t *)(v23 + 124);
          v236.i32[1] = v25.i32[1];
          float32x2_t v237 = vneg_f32(v25);
          v238.i32[0] = 0;
          v238.f32[1] = v24;
          v239.i32[0] = v25.i32[0];
          v239.f32[1] = -v24;
          v240.i32[0] = 0;
          physx::Dy::FeatherstoneArticulation::translateInertia((uint64_t)&v236, (uint64_t)&v251);
          uint64_t v26 = (float32x2_t *)&v18[28 * *(unsigned int *)(v220 + 40 * v20 + 32)];
          float32x2_t v27 = v26[1];
          *uint64_t v26 = vadd_f32(v251, *v26);
          v26[1] = vadd_f32(v252, v27);
          float32x2_t v28 = v26[3];
          v26[2] = vadd_f32(v253, v26[2]);
          v26[3] = vadd_f32(v254, v28);
          float32x2_t v29 = v26[5];
          void v26[4] = vadd_f32(v255, v26[4]);
          v26[5] = vadd_f32(v256, v29);
          float32x2_t v30 = v26[7];
          v26[6] = vadd_f32(v257, v26[6]);
          v26[7] = vadd_f32(v258, v30);
          float32x2_t v31 = v26[9];
          v26[8] = vadd_f32(v259, v26[8]);
          v26[9] = vadd_f32(v260, v31);
          float32x2_t v32 = v26[11];
          v26[10] = vadd_f32(v261, v26[10]);
          v26[11] = vadd_f32(v262, v32);
          v26[12] = vadd_f32(v263, v26[12]);
          v26[13].f32[0] = v264 + v26[13].f32[0];
          uint64_t v33 = *(void *)(v225 + 632) + 80 * v20;
          unsigned int v36 = *(unsigned __int8 *)(v33 + 76);
          float32x2_t v35 = (unsigned char *)(v33 + 76);
          uint64_t v34 = v36;
          uint64_t v37 = *((unsigned int *)v35 - 1);
          if (v36)
          {
            uint64_t v38 = (float32x2_t *)(v218 + 32 * v37);
            uint64_t v39 = (float *)(*(void *)(v225 + 528) + v226);
            do
            {
              v40.f32[0] = v22[2];
              float v41 = *(v39 - 3);
              float v42 = *(v39 - 2);
              float v43 = v22[5];
              float v44 = *(v39 - 1);
              float v45 = *v39;
              float v46 = v22[8];
              float v47 = v39[1];
              float v48 = v39[2];
              float32_t v49 = (float)((float)((float)(v41 * v40.f32[0]) + (float)(v42 * v43)) + (float)(v44 * v46))
                  + (float)((float)((float)(*v39 * v22[11]) + (float)(v47 * v22[14])) + (float)(v48 * v22[17]));
              int32x2_t v50 = *(int32x2_t *)v22;
              float32x2_t v51 = *(float32x2_t *)(v22 + 3);
              float32x2_t v52 = *(float32x2_t *)(v22 + 6);
              float32x2_t v53 = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v22, v41), vmul_n_f32(v51, v42)), vmul_n_f32(v52, v44)), vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v22 + 9), *v39), vmul_n_f32(*(float32x2_t *)(v22 + 12), v47)), vmul_n_f32(*(float32x2_t *)(v22 + 15), v48)));
              float32_t v54 = (float)(vmlas_n_f32(vmuls_lane_f32(v47, v52, 1), *v39, v52.f32[0]) + (float)(v46 * v48))
                  + (float)((float)((float)(v41 * v22[20]) + (float)(v42 * v22[23])) + (float)(v44 * v22[26]));
              v38[-1].f32[0] = v49;
              float32x2_t v55 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v22 + 18), v41), vmul_n_f32(*(float32x2_t *)(v22 + 21), v42)), vmul_n_f32(*(float32x2_t *)(v22 + 24), v44));
              v40.f32[1] = v43;
              v38[-2] = v53;
              *uint64_t v38 = vadd_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32((float32x2_t)vzip2_s32(v50, (int32x2_t)v51), v47), (float32x2_t)vzip1_s32(v50, (int32x2_t)v51), v45), v40, v48), v55);
              v38[1].f32[0] = v54;
              v38 += 4;
              v39 += 6;
              --v34;
            }
            while (v34);
          }
          uint64_t v19 = v213;
          unsigned int v56 = physx::Dy::computeHi(v222, v20, (uint64_t)v14, (float32x2_t *)(v213 + 32 * v37));
          uint64_t v57 = *v35;
          if (*v35)
          {
            uint64_t v58 = v215 + 160 * v56;
            float v59 = (float *)(v58 + 96);
            uint64_t v60 = (float32x2_t *)(v58 + 100);
            unint64_t v61 = (float32x2_t *)(v218 + 32 * v37);
            do
            {
              float v62 = v61[-2].f32[0];
              float v63 = *v59;
              float v64 = v61[1].f32[0];
              v61[-1].i32[1] = 0;
              float32x2_t v65 = *(float32x2_t *)((char *)v61 - 12);
              v66.i32[1] = HIDWORD(*(unint64_t *)v60);
              *(float *)v66.i32 = v63;
              v67.i32[0] = vdup_lane_s32((int32x2_t)v65, 1).u32[0];
              v67.f32[1] = v62;
              float v68 = vmlas_n_f32(-(float)(COERCE_FLOAT(*v60) * v62), v63, v65.f32[0]);
              *unint64_t v61 = vadd_f32(vmla_f32(vmul_f32(v65, vneg_f32((float32x2_t)vrev64_s32(v66))), v67, *v60), *v61);
              v61[1].f32[0] = v68 + v64;
              v61[1].i32[1] = 0;
              v61 += 4;
              --v57;
            }
            while (v57);
          }
          uint64_t v21 = v225;
          v226 -= 76;
          --v20;
        }
        while (v20);
      }
      float v70 = *v18;
      float v69 = v18[1];
      float v72 = v18[2];
      float v71 = v18[3];
      float v74 = v18[4];
      float v73 = v18[5];
      float v75 = v18[8];
      float v76 = v18[19] + v18[21];
      float v77 = v18[23] + v18[25];
      float v78 = (float)(v18[18] + v18[18]) * 0.5;
      float v79 = v76 * 0.5;
      float v80 = (float)(v18[20] + v18[24]) * 0.5;
      float v81 = (float)(v18[22] + v18[22]) * 0.5;
      float v82 = (float)(v18[26] + v18[26]) * 0.5;
      float v223 = (float)(v18[9] + v18[9]) * 0.5;
      float v83 = (float)(v18[10] + v18[12]) * 0.5;
      float v84 = (float)(v18[11] + v18[15]) * 0.5;
      float v85 = (float)(v18[14] + v18[16]) * 0.5;
      float v86 = (float)(v81 * v82) - (float)((float)(v77 * 0.5) * (float)(v77 * 0.5));
      float v87 = (float)((float)(v77 * 0.5) * v80) - (float)((float)(v76 * 0.5) * v82);
      float v88 = (float)((float)(v76 * 0.5) * (float)(v77 * 0.5)) - (float)(v81 * v80);
      float v89 = (float)((float)((float)(v76 * 0.5) * v87) + (float)(v86 * v78)) + (float)(v88 * v80);
      float v90 = 0.0;
      float v91 = 1.0;
      float v93 = v18[6];
      float v92 = v18[7];
      float v94 = 1.0;
      float v95 = 0.0;
      float v96 = 0.0;
      float v97 = 1.0;
      float v98 = 0.0;
      float v99 = 1.0;
      if (v89 != 0.0)
      {
        float v95 = v87 * (float)(1.0 / v89);
        float v96 = v88 * (float)(1.0 / v89);
        float v94 = v86 * (float)(1.0 / v89);
        float v98 = (float)((float)(v78 * (float)-(float)(v77 * 0.5)) + (float)(v80 * v79)) * (float)(1.0 / v89);
        float v99 = (float)((float)(v79 * (float)-(float)(v76 * 0.5)) + (float)(v78 * v81)) * (float)(1.0 / v89);
        float v97 = (float)((float)(v82 * v78) - (float)(v80 * v80)) * (float)(1.0 / v89);
      }
      float v100 = (float)((float)-(float)(v71 * v95) - (float)(v70 * v94)) - (float)(v93 * v96);
      float v101 = (float)((float)-(float)(v74 * v95) - (float)(v69 * v94)) - (float)(v92 * v96);
      float v102 = (float)((float)-(float)(v73 * v95) - (float)(v72 * v94)) - (float)(v75 * v96);
      float v103 = (float)((float)-(float)(v71 * v97) - (float)(v70 * v95)) - (float)(v93 * v98);
      float v104 = (float)((float)-(float)(v74 * v97) - (float)(v69 * v95)) - (float)(v92 * v98);
      float v105 = (float)((float)-(float)(v73 * v97) - (float)(v72 * v95)) - (float)(v75 * v98);
      float v106 = (float)((float)-(float)(v71 * v98) - (float)(v70 * v96)) - (float)(v93 * v99);
      float v107 = (float)((float)-(float)(v74 * v98) - (float)(v69 * v96)) - (float)(v92 * v99);
      float v212 = v99;
      float v108 = (float)((float)-(float)(v73 * v98) - (float)(v72 * v96)) - (float)(v75 * v99);
      float v109 = (float)((float)(v70 * v100) + (float)(v71 * v103)) + (float)(v93 * v106);
      float v110 = (float)((float)(v70 * v101) + (float)(v71 * v104)) + (float)(v93 * v107);
      float v111 = (float)((float)(v70 * v102) + (float)(v71 * v105)) + (float)(v93 * v108);
      float v112 = (float)((float)(v69 * v100) + (float)(v74 * v103)) + (float)(v92 * v106);
      float v113 = (float)((float)(v69 * v101) + (float)(v74 * v104)) + (float)(v92 * v107);
      float v114 = (float)((float)(v69 * v102) + (float)(v74 * v105)) + (float)(v92 * v108);
      float v115 = (float)(v72 * v100) + (float)(v73 * v103);
      float v116 = (float)(v72 * v101) + (float)(v73 * v104);
      float v117 = (float)(v72 * v102) + (float)(v73 * v105);
      float v118 = v115 + (float)(v75 * v106);
      float v119 = v116 + (float)(v75 * v107);
      float v120 = v223 + v109;
      float v121 = v83 + v110;
      float v122 = v84 + v111;
      float v123 = v83 + v112;
      float v124 = (float)((float)(v18[13] + v18[13]) * 0.5) + v113;
      float v125 = v84 + v118;
      float v126 = v85 + v119;
      float v127 = (float)((float)(v18[17] + v18[17]) * 0.5) + (float)(v117 + (float)(v75 * v108));
      float v128 = (float)(v124 * v127) - (float)((float)(v85 + v114) * (float)(v85 + v119));
      float v129 = (float)((float)(v85 + v114) * (float)(v84 + v118)) - (float)(v123 * v127);
      float v130 = (float)(v123 * (float)(v85 + v119)) - (float)(v124 * (float)(v84 + v118));
      float v131 = (float)((float)(v121 * v129) + (float)(v128 * (float)(v223 + v109))) + (float)(v130 * v122);
      float v132 = 0.0;
      float v133 = 1.0;
      float v134 = 0.0;
      float v135 = 1.0;
      if (v131 != 0.0)
      {
        float v136 = 1.0 / v131;
        float v91 = v128 * v136;
        float v90 = v129 * v136;
        float v132 = v130 * v136;
        float v133 = (float)((float)(v127 * v120) - (float)(v125 * v122)) * v136;
        float v134 = (float)((float)(v125 * v121) - (float)(v126 * v120)) * v136;
        float v135 = (float)((float)(v120 * v124) - (float)(v121 * v123)) * v136;
      }
      float v214 = v132;
      float v216 = v90;
      float v227 = v91;
      if (v211)
      {
        unsigned int v137 = 0;
        uint64_t v138 = 0;
        float v139 = (float)((float)(v100 * v91) + (float)(v101 * v90)) + (float)(v102 * v132);
        float v140 = (float)((float)(v100 * v90) + (float)(v101 * v133)) + (float)(v102 * v134);
        float v141 = (float)((float)(v100 * v132) + (float)(v101 * v134)) + (float)(v102 * v135);
        float v142 = (float)((float)(v103 * v91) + (float)(v104 * v90)) + (float)(v105 * v132);
        float v143 = (float)((float)(v103 * v90) + (float)(v104 * v133)) + (float)(v105 * v134);
        float v144 = (float)((float)(v103 * v132) + (float)(v104 * v134)) + (float)(v105 * v135);
        float v145 = (float)((float)(v106 * v91) + (float)(v107 * v90)) + (float)(v108 * v132);
        float v146 = (float)((float)(v106 * v90) + (float)(v107 * v133)) + (float)(v108 * v134);
        float v147 = (float)((float)(v106 * v132) + (float)(v107 * v134)) + (float)(v108 * v135);
        float v148 = v96;
        float v149 = (float)((float)(v100 * v142) + (float)(v101 * v143)) + (float)(v102 * v144);
        float v150 = v94 + (float)((float)((float)(v100 * v139) + (float)(v101 * v140)) + (float)(v102 * v141));
        float v151 = v95 + (float)((float)((float)(v103 * v139) + (float)(v104 * v140)) + (float)(v105 * v141));
        float v224 = v97 + (float)((float)((float)(v103 * v142) + (float)(v104 * v143)) + (float)(v105 * v144));
        float v152 = v148 + (float)((float)((float)(v106 * v139) + (float)(v107 * v140)) + (float)(v108 * v141));
        float v219 = v148 + (float)((float)((float)(v100 * v145) + (float)(v101 * v146)) + (float)(v102 * v147));
        float v221 = v98 + (float)((float)((float)(v103 * v145) + (float)(v104 * v146)) + (float)(v105 * v147));
        float v153 = v212 + (float)((float)((float)(v106 * v145) + (float)(v107 * v146)) + (float)(v108 * v147));
        float v154 = v98 + (float)((float)((float)(v106 * v142) + (float)(v107 * v143)) + (float)(v108 * v144));
        do
        {
          long long v156 = (float *)(v19 + 16);
          unsigned int v157 = v137;
          uint64_t v158 = v211;
          do
          {
            float v159 = *(v156 - 4);
            float v160 = *(v156 - 3);
            float v161 = *(v156 - 2);
            float v162 = v156[1];
            float v163 = v156[2];
            int v155 = (float *)(v19 + 32 * v138);
            *((float *)v14 + v157) = *((float *)v14 + v157)
                                   - (float)((float)((float)((float)(v155[5]
                                                                   * (float)((float)((float)((float)(v142 * v159)
                                                                                           + (float)(v143 * v160))
                                                                                   + (float)(v144 * v161))
                                                                           + (float)((float)((float)(v151 * *v156)
                                                                                           + (float)(v224 * v162))
                                                                                   + (float)(v221 * v163))))
                                                           + (float)(v155[4]
                                                                   * (float)((float)((float)((float)(v139 * v159)
                                                                                           + (float)(v140 * v160))
                                                                                   + (float)(v141 * v161))
                                                                           + (float)((float)((float)(v150 * *v156)
                                                                                           + (float)((float)(v95 + v149) * v162))
                                                                                   + (float)(v219 * v163)))))
                                                   + (float)(v155[6]
                                                           * (float)((float)((float)((float)(v145 * v159)
                                                                                   + (float)(v146 * v160))
                                                                           + (float)(v147 * v161))
                                                                   + (float)((float)((float)(v152 * *v156)
                                                                                   + (float)(v154 * v162))
                                                                           + (float)(v153 * v163)))))
                                           + (float)((float)((float)((float)((float)((float)((float)(v216 * v159)
                                                                                           + (float)(v133 * v160))
                                                                                   + (float)(v134 * v161))
                                                                           + (float)((float)((float)(v143 * v162)
                                                                                           + (float)(v140 * *v156))
                                                                                   + (float)(v146 * v163)))
                                                                   * v155[1])
                                                           + (float)(*v155
                                                                   * (float)((float)((float)((float)(v227 * v159)
                                                                                           + (float)(v216 * v160))
                                                                                   + (float)(v214 * v161))
                                                                           + (float)((float)((float)(v142 * v162)
                                                                                           + (float)(v139 * *v156))
                                                                                   + (float)(v145 * v163)))))
                                                   + (float)(v155[2]
                                                           * (float)((float)((float)((float)(v214 * v159)
                                                                                   + (float)(v134 * v160))
                                                                           + (float)(v135 * v161))
                                                                   + (float)((float)((float)(v144 * v162)
                                                                                   + (float)(v141 * *v156))
                                                                           + (float)(v147 * v163))))));
            ++v157;
            v156 += 8;
            --v158;
          }
          while (v158);
          ++v138;
          v137 += v211;
        }
        while (v138 != v211);
      }
      physx::PxcScratchAllocator::free((uint64_t)v17, (unint64_t)v18);
      uint64_t v164 = (uint64_t)v17;
      unint64_t v165 = v19;
    }
    return physx::PxcScratchAllocator::free(v164, v165);
  }
}

uint64_t physx::Dy::FeatherstoneArticulation::getGeneralizedMassMatrix(float32x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a1[85].i8[4])
  {
    uint64_t v9 = physx::shdfnd::Foundation::mInstance;
    return physx::shdfnd::Foundation::error(v9, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyFeatherstoneInverseDynamic.cpp", 2024, "ArticulationHelper::getGeneralizedMassMatrix() commonInit need to be called first to initialize data!", a6, a7, a8, a9);
  }
  else
  {
    uint64_t v63 = *(void *)(a2 + 16);
    __int32 v12 = a1[77].i32[0];
    uint64_t v13 = a1[81].u32[1];
    size_t v14 = *(pthread_mutex_t ***)(a2 + 104);
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    uint64_t v76 = 0;
    uint64_t v66 = physx::PxcScratchAllocator::alloc(v14, 240 * v12, 0);
    float32x2_t v67 = (_OWORD *)(v66 + (32 * v12));
    uint64_t v68 = v66 + (v12 << 6);
    float v69 = (_OWORD *)(v66 + (96 * v12));
    unint64_t v61 = (void *)v66;
    float v62 = (physx::PxcScratchAllocator *)v14;
    uint64_t v71 = v66 + (v12 << 7);
    float32_t v15 = (char *)physx::PxcScratchAllocator::alloc(v14, 4 * (int)v13, 0);
    uint64_t v72 = 0;
    float v73 = v15;
    uint64_t v70 = 0;
    char v16 = **(unsigned char **)&a1[83];
    bzero(v15, (4 * v13));
    if (v13)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        uint64_t v74 = v63 + 4 * (v13 * i);
        *(_DWORD *)&v15[4 * i] = 1065353216;
        if (v16)
        {
          uint64_t v18 = a1[77].u32[0];
          uint64_t v19 = v67;
          uint64_t v20 = v69;
          uint64_t v21 = v73;
          _OWORD *v67 = 0u;
          v19[1] = 0u;
          *uint64_t v20 = 0u;
          v20[1] = 0u;
          if (v18 >= 2)
          {
            float32x2_t v22 = a1[76];
            float32x2_t v23 = a1[79];
            float32x2_t v24 = a1[78];
            uint64_t v25 = 76;
            uint64_t v26 = 1;
            float32x2_t v27 = a1[60];
            do
            {
              uint64_t v28 = *(void *)&v24 + 160 * v26;
              _S2 = *(_DWORD *)(v28 + 120);
              float32x2_t v30 = &v19[2 * *(unsigned int *)(*(void *)&v22 + 40 * v26 + 32)];
              float v31 = *(float *)v30;
              float32x2_t v32 = *(float32x2_t *)(v28 + 124);
              _D0 = *(float32x2_t *)((char *)v30 + 4);
              v34.i32[0] = vdup_lane_s32((int32x2_t)v32, 1).u32[0];
              v34.i32[1] = _S2;
              _D5.i32[0] = vdup_lane_s32((int32x2_t)_D0, 1).u32[0];
              _D5.i32[1] = *(_DWORD *)v30;
              float32x2_t v36 = vmls_f32(vmul_f32(v34, _D0), _D5, v32);
              __asm { FMLS            S5, S2, V0.S[0] }
              float32x2_t v41 = vadd_f32((float32x2_t)v30[1], v36);
              float v42 = _D5.f32[0] + *((float *)v30 + 6);
              uint64_t v43 = *(void *)&v23 + 80 * v26;
              uint64_t v44 = *(unsigned __int8 *)(v43 + 76);
              if (*(unsigned char *)(v43 + 76))
              {
                float v45 = (float *)&v21[4 * *(unsigned int *)(v43 + 72)];
                uint64_t v46 = *(void *)&a1[66] + v25;
                do
                {
                  float v47 = *v45++;
                  float v31 = v31 + (float)(v47 * *(float *)v46);
                  _D0 = vadd_f32(_D0, vmul_n_f32(*(float32x2_t *)(v46 + 4), v47));
                  float32x2_t v41 = vadd_f32(v41, vmul_n_f32(*(float32x2_t *)(v46 + 12), v47));
                  float v42 = v42 + (float)(v47 * *(float *)(v46 + 20));
                  v46 += 24;
                  --v44;
                }
                while (v44);
              }
              float v48 = &v19[2 * v26];
              *(float *)float v48 = v31;
              *(float32x2_t *)((char *)v48 + 4) = _D0;
              *((_DWORD *)v48 + 3) = 0;
              *((float32x2_t *)v48 + 2) = v41;
              *((float *)v48 + 6) = v42;
              *((_DWORD *)v48 + 7) = 0;
              uint64_t v49 = *(void *)&v27 + 112 * v26;
              v50.i32[0] = *(_DWORD *)(v49 + 8);
              float v51 = *(float *)(v49 + 20);
              float v52 = *(float *)(v49 + 32);
              float32_t v53 = (float)((float)((float)(v31 * v50.f32[0]) + (float)(v51 * _D0.f32[0])) + vmuls_lane_f32(v52, _D0, 1))
                  + (float)((float)((float)(*(float *)(v49 + 44) * v41.f32[0])
                                  + vmuls_lane_f32(*(float *)(v49 + 56), v41, 1))
                          + (float)(v42 * *(float *)(v49 + 68)));
              float32_t v54 = (float32x2_t *)&v20[2 * v26];
              int32x2_t v55 = *(int32x2_t *)v49;
              float32x2_t v56 = *(float32x2_t *)(v49 + 12);
              float32x2_t v57 = *(float32x2_t *)(v49 + 24);
              float32x2_t v58 = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v49, v31), vmul_n_f32(v56, _D0.f32[0])), vmul_lane_f32(v57, _D0, 1)), vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v49 + 36), v41.f32[0]), vmul_lane_f32(*(float32x2_t *)(v49 + 48), v41, 1)), vmul_n_f32(*(float32x2_t *)(v49 + 60), v42)));
              float32_t v59 = (float)(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v41, v57).i32[1]), v41.f32[0], v57.f32[0])
                          + (float)(v52 * v42))
                  + (float)((float)((float)(v31 * *(float *)(v49 + 80)) + (float)(*(float *)(v49 + 92) * _D0.f32[0]))
                          + vmuls_lane_f32(*(float *)(v49 + 104), _D0, 1));
              v54[1].f32[0] = v53;
              v54[1].i32[1] = 0;
              v50.f32[1] = v51;
              float32x2_t v60 = vadd_f32(vmla_n_f32(vmla_n_f32(vmul_lane_f32((float32x2_t)vzip2_s32(v55, (int32x2_t)v56), v41, 1), (float32x2_t)vzip1_s32(v55, (int32x2_t)v56), v41.f32[0]), v50, v42), vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v49 + 72), v31), vmul_n_f32(*(float32x2_t *)(v49 + 84), _D0.f32[0])), vmul_lane_f32(*(float32x2_t *)(v49 + 96), _D0, 1)));
              *float32_t v54 = v58;
              v54[2] = v60;
              v54[3].f32[0] = v59;
              v54[3].i32[1] = 0;
              ++v26;
              v25 += 76;
            }
            while (v26 != v18);
          }
          physx::Dy::FeatherstoneArticulation::computeGeneralizedForceInv(a1 + 22, (uint64_t)v69, v74);
        }
        else
        {
          float32x2_t v64 = 0;
          int v65 = 0;
          physx::Dy::FeatherstoneArticulation::inverseDynamicFloatingBase((uint64_t)a1, (uint64_t)&a1[22], &v64, (uint64_t)&v66, 0);
        }
        *(_DWORD *)&v15[4 * i] = 0;
      }
    }
    physx::PxcScratchAllocator::free((uint64_t)v62, (unint64_t)v15);
    return physx::PxcScratchAllocator::free((uint64_t)v62, (unint64_t)v61);
  }
}

uint64_t physx::Dy::writeBackContactCoulomb4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(unsigned __int8 **)(result + 32);
  uint64_t v5 = *(_DWORD **)(result + 40);
  uint64_t v6 = *(_DWORD **)(result + 88);
  uint64_t v7 = *(_DWORD **)(result + 136);
  int v8 = *(_DWORD **)(result + 184);
  uint64_t v9 = *((unsigned __int16 *)v4 + 1);
  int v10 = *v4;
  int v43 = 0;
  if (v9)
  {
    int v11 = &v4[v9];
    _ZF = v10 == 7;
    uint64_t v13 = 128;
    if (_ZF) {
      uint64_t v13 = 176;
    }
    float32x4_t v14 = 0uLL;
    _X5 = v4;
    do
    {
      char v16 = (float32x4_t *)(_X5 + 176);
      unsigned __int8 v17 = _X5[8];
      unsigned __int8 v18 = _X5[9];
      unsigned __int8 v19 = _X5[10];
      unsigned __int8 v20 = _X5[11];
      int v21 = _X5[1];
      __asm
      {
        PRFM            #0, [X5,#0x1B0]
        PRFM            #0, [X5,#0x230]
      }
      if (_X5[1])
      {
        unsigned int v26 = 0;
        do
        {
          float32x4_t v27 = v16[3];
          if (v5 && v26 < _X5[4]) {
            *v5++ = v27.i32[0];
          }
          if (v6 && v26 < _X5[5]) {
            *v6++ = v27.i32[1];
          }
          if (v7 && v26 < _X5[6]) {
            *v7++ = v27.i32[2];
          }
          if (v8 && v26 < _X5[7]) {
            *v8++ = v27.i32[3];
          }
          char v16 = (float32x4_t *)((char *)v16 + v13);
          float32x4_t v14 = vaddq_f32(v14, v27);
          ++v26;
        }
        while (v21 != v26);
      }
      _X5 = (unsigned __int8 *)v16;
    }
    while (v16 < (float32x4_t *)v11);
    BYTE1(v43) = v18 & 1;
    BYTE2(v43) = v19 & 1;
    HIBYTE(v43) = v20 & 1;
    char v28 = v17 & 1;
  }
  else
  {
    char v28 = 0;
    float32x4_t v14 = 0uLL;
  }
  uint64_t v29 = 0;
  float32x2_t v30 = v4 + 144;
  LOBYTE(v43) = v28;
  float32x4_t v44 = v14;
  float v31 = (__int16 *)(result + 18);
  do
  {
    if (*((unsigned char *)&v43 + v29))
    {
      if (*(v31 - 1) == -1 && *v31 == -1)
      {
        float v32 = v44.f32[v29];
        if (v32 != 0.0)
        {
          uint64_t v33 = *(void *)(a3 + 8 * v29);
          float v34 = *(float *)(v33 + 28);
          uint64_t v35 = *(void *)(a4 + 8 * v29);
          float v36 = *(float *)(v35 + 28);
          if (v34 < 3.4028e38 || v36 < 3.4028e38)
          {
            if (v34 >= v36) {
              float v34 = *(float *)(v35 + 28);
            }
            unsigned int v38 = *(_DWORD *)(v33 + 72) << 7;
            unsigned int v39 = *(_DWORD *)(v35 + 72) << 7;
            uint64_t v40 = *(void *)&v30[8 * v29];
            uint64_t v41 = *(unsigned int *)(a2 + 16);
            *(_DWORD *)(a2 + 16) = v41 + 1;
            uint64_t result = *(void *)(a2 + 8) + 32 * v41;
            *(void *)uint64_t result = v40;
            if (v39 >= v38) {
              unsigned int v42 = v38;
            }
            else {
              unsigned int v42 = v39;
            }
            if (v39 <= v38) {
              unsigned int v39 = v38;
            }
            *(float *)(result + 8) = v32;
            *(float *)(result + 12) = v34;
            *(_DWORD *)(result + 16) = v42;
            *(_DWORD *)(result + 20) = v39;
          }
        }
      }
    }
    ++v29;
    v31 += 24;
  }
  while (v29 != 4);
  return result;
}

int32x4_t physx::Dy::solveContactCoulomb4_Block(int32x4_t **a1)
{
  int v2 = (float *)*a1;
  uint64_t v1 = a1[1];
  uint64_t v4 = a1[6];
  uint64_t v3 = a1[7];
  uint64_t v6 = a1[12];
  uint64_t v5 = a1[13];
  int32x4_t v7 = **a1;
  int32x4_t v8 = vzip1q_s32(v7, *v6);
  int v10 = a1[18];
  uint64_t v9 = a1[19];
  int v11 = *a1 + 1;
  int32x4_t v13 = v1[1];
  int32x4_t v14 = v4[1];
  int32x4_t v15 = v3[1];
  int32x4_t v17 = v6[1];
  int32x4_t v19 = v5[1];
  int32x4_t v20 = v10[1];
  int32x4_t v21 = v9[1];
  int32x4_t v22 = vzip2q_s32(v7, *v6);
  int32x4_t v23 = vzip1q_s32(*v4, *v10);
  float32x4_t v24 = (float32x4_t)vzip1q_s32(v8, v23);
  float32x4_t v25 = (float32x4_t)vzip2q_s32(v8, v23);
  int32x4_t v106 = vzip2q_s32(*v4, *v10);
  int32x4_t v107 = v22;
  float32x4_t v26 = (float32x4_t)vzip1q_s32(v22, v106);
  int32x4_t v27 = vzip1q_s32(*v1, *v5);
  int32x4_t v28 = vzip1q_s32(*v3, *v9);
  float32x4_t v29 = (float32x4_t)vzip1q_s32(v27, v28);
  float32x4_t v30 = (float32x4_t)vzip2q_s32(v27, v28);
  int32x4_t v104 = vzip2q_s32(*v3, *v9);
  int32x4_t v105 = vzip2q_s32(*v1, *v5);
  float32x4_t v31 = (float32x4_t)vzip1q_s32(v105, v104);
  int32x4_t v32 = vzip1q_s32(*v11, v17);
  int32x4_t v33 = vzip1q_s32(v14, v20);
  float32x4_t v34 = (float32x4_t)vzip1q_s32(v32, v33);
  float32x4_t v35 = (float32x4_t)vzip2q_s32(v32, v33);
  int32x4_t v102 = vzip2q_s32(v14, v20);
  int32x4_t v103 = vzip2q_s32(*v11, v17);
  float32x4_t v36 = (float32x4_t)vzip1q_s32(v103, v102);
  int32x4_t v37 = vzip1q_s32(v13, v19);
  int32x4_t v38 = vzip1q_s32(v15, v21);
  float32x4_t v39 = (float32x4_t)vzip1q_s32(v37, v38);
  float32x4_t v40 = (float32x4_t)vzip2q_s32(v37, v38);
  int32x4_t v100 = vzip2q_s32(v15, v21);
  int32x4_t v101 = vzip2q_s32(v13, v19);
  float32x4_t v41 = (float32x4_t)vzip1q_s32(v101, v100);
  unsigned int v42 = (float32x4_t *)a1[4];
  if (v42->i16[1])
  {
    int v43 = (float32x4_t *)((char *)v42 + v42->u16[1]);
    do
    {
      unsigned int v44 = v42->u8[1];
      float32x4_t v45 = v42[5];
      float32x4_t v47 = v42[2];
      float32x4_t v46 = v42[3];
      float32x4_t v48 = v42[4];
      float32x4_t v110 = v29;
      float32x4_t v111 = v30;
      float32x4_t v108 = v42[6];
      float32x4_t v109 = v31;
      if (v42->i8[1])
      {
        uint64_t v49 = 0;
        float32x4_t v50 = v42[7];
        float32x4_t v51 = v42[8];
        float32x4_t v52 = vmlaq_f32(vmlaq_f32(vmulq_f32(v29, v47), v46, v30), v48, v31);
        float32x4_t v53 = vmlaq_f32(vmlaq_f32(vmulq_f32(v24, v47), v46, v25), v48, v26);
        float32x4_t v54 = vnegq_f32(v42[6]);
        uint64_t v55 = v42->u16[1] + 96;
        float32x4_t v56 = 0uLL;
        do
        {
          _X20 = &v42[v49];
          __asm
          {
            PRFM            #0, [X20,#0x160]
            PRFM            #0, [X20,#0x1E0]
            PRFM            #0, [X20,#0x260]
            PRFM            #0, [X20,#0x2E0]
          }
          float32x4_t v66 = v42[v49 + 11];
          float32x4_t v67 = v42[v49 + 12];
          float32x4_t v69 = v42[v49 + 13];
          float32x4_t v68 = v42[v49 + 14];
          float32x4_t v70 = v42[v49 + 19];
          float32x4_t v71 = v42[v49 + 20];
          float32x4_t v72 = v42[v49 + 21];
          float32x4_t v73 = vminq_f32(vaddq_f32(v68, vmaxq_f32(vmlsq_f32(vmlaq_f32(vnegq_f32(v42[v49 + 17]), v42[v49 + 15], v42[v49 + 16]), v42[v49 + 15], vsubq_f32(vaddq_f32(v53, vmlaq_f32(vmlaq_f32(vmulq_f32(v34, v66), v35, v67), v36, v69)), vaddq_f32(v52, vmlaq_f32(vmlaq_f32(vmulq_f32(v39, v70), v40, v71), v41, v72)))), vnegq_f32(v68))), v42[v49 + 18]);
          float32x4_t v74 = vsubq_f32(v73, v68);
          float32x4_t v53 = vmlaq_f32(v53, v74, v45);
          float32x4_t v52 = vmlaq_f32(v52, v74, v54);
          float32x4_t v56 = vaddq_f32(v56, v74);
          float32x4_t v75 = vmulq_f32(v50, v74);
          float32x4_t v76 = vmulq_f32(v51, v74);
          float32x4_t v34 = vmlaq_f32(v34, v75, v66);
          float32x4_t v39 = vmlsq_f32(v39, v76, v70);
          float32x4_t v35 = vmlaq_f32(v35, v75, v67);
          float32x4_t v40 = vmlsq_f32(v40, v76, v71);
          float32x4_t v36 = vmlaq_f32(v36, v75, v69);
          float32x4_t v41 = vmlsq_f32(v41, v76, v72);
          _X20[14] = v73;
          *(float32x4_t *)((char *)v42 + v55) = v73;
          v55 += 16;
          v49 += 11;
        }
        while (11 * v44 != v49);
      }
      else
      {
        float32x4_t v56 = 0uLL;
      }
      v42 += 11 * v44 + 11;
      float32x4_t v77 = vmulq_f32(v45, v56);
      float32x4_t v78 = vmulq_f32(v108, v56);
      float32x4_t v24 = vmlaq_f32(v24, v77, v47);
      float32x4_t v29 = vmlsq_f32(v110, v78, v47);
      float32x4_t v25 = vmlaq_f32(v25, v77, v46);
      float32x4_t v30 = vmlsq_f32(v111, v78, v46);
      float32x4_t v26 = vmlaq_f32(v26, v77, v48);
      float32x4_t v31 = vmlsq_f32(v109, v78, v48);
    }
    while (v42 < v43);
  }
  int32x4_t v79 = vzip2q_s32(v101, v100);
  int32x4_t v80 = vzip2q_s32(v103, v102);
  int32x4_t v81 = vzip2q_s32(v105, v104);
  int32x4_t v82 = vzip2q_s32(v107, v106);
  float32x2x2_t v83 = (float32x2x2_t)vzip1q_s32((int32x4_t)v24, (int32x4_t)v26);
  float32x2x2_t v84 = (float32x2x2_t)vzip2q_s32((int32x4_t)v24, (int32x4_t)v26);
  int32x4_t v85 = vzip1q_s32((int32x4_t)v25, v82);
  int32x4_t v86 = vzip2q_s32((int32x4_t)v25, v82);
  float32x2x2_t v87 = (float32x2x2_t)vzip1q_s32((int32x4_t)v29, (int32x4_t)v31);
  float32x2x2_t v88 = (float32x2x2_t)vzip2q_s32((int32x4_t)v29, (int32x4_t)v31);
  vst2_f32(v2, v83);
  int32x4_t v89 = vzip1q_s32((int32x4_t)v30, v81);
  *uint64_t v4 = vzip2q_s32((int32x4_t)v83, v85);
  int32x4_t v90 = vzip2q_s32((int32x4_t)v30, v81);
  vst2_f32((float *)v6->i32, v84);
  int32x4_t *v10 = vzip2q_s32((int32x4_t)v84, v86);
  vst2_f32((float *)v1->i32, v87);
  float32x2x2_t v91 = (float32x2x2_t)vzip1q_s32((int32x4_t)v34, (int32x4_t)v36);
  int32x4_t *v3 = vzip2q_s32((int32x4_t)v87, v89);
  float32x2x2_t v92 = (float32x2x2_t)vzip2q_s32((int32x4_t)v34, (int32x4_t)v36);
  int32x4_t v93 = vzip1q_s32((int32x4_t)v35, v80);
  vst2_f32((float *)v5->i32, v88);
  int32x4_t *v9 = vzip2q_s32((int32x4_t)v88, v90);
  int32x4_t v94 = vzip2q_s32((int32x4_t)v35, v80);
  vst2_f32((float *)v11->i32, v91);
  v4[1] = vzip2q_s32((int32x4_t)v91, v93);
  float32x2x2_t v95 = (float32x2x2_t)vzip1q_s32((int32x4_t)v39, (int32x4_t)v41);
  i32 = (float *)v6[1].i32;
  vst2_f32(i32, v92);
  v10[1] = vzip2q_s32((int32x4_t)v92, v94);
  int32x4_t v96 = vzip1q_s32((int32x4_t)v40, v79);
  __int32 v12 = (float *)v1[1].i32;
  vst2_f32(v12, v95);
  v3[1] = vzip2q_s32((int32x4_t)v95, v96);
  float32x2x2_t v97 = (float32x2x2_t)vzip2q_s32((int32x4_t)v39, (int32x4_t)v41);
  int32x4_t v98 = vzip2q_s32((int32x4_t)v40, v79);
  int32x4_t result = vzip2q_s32((int32x4_t)v97, v98);
  unsigned __int8 v18 = (float *)v5[1].i32;
  vst2_f32(v18, v97);
  v9[1] = result;
  return result;
}

int32x4_t physx::Dy::solveContactCoulomb4_StaticBlock(int32x4_t **a1)
{
  uint64_t v1 = (float *)*a1;
  int v2 = a1[6];
  uint64_t v3 = a1[12];
  uint64_t v4 = a1[18];
  int32x4_t v5 = **a1;
  uint64_t v6 = *a1 + 1;
  int32x4_t v7 = v2[1];
  int32x4_t v9 = v3[1];
  int32x4_t v10 = v4[1];
  int32x4_t v11 = vzip1q_s32(v5, *v3);
  int32x4_t v12 = vzip2q_s32(v5, *v3);
  int32x4_t v13 = vzip1q_s32(*v2, *v4);
  int32x4_t v14 = vzip2q_s32(*v2, *v4);
  float32x4_t v15 = (float32x4_t)vzip1q_s32(v11, v13);
  float32x4_t v16 = (float32x4_t)vzip2q_s32(v11, v13);
  float32x4_t v17 = (float32x4_t)vzip1q_s32(v12, v14);
  int32x4_t v18 = vzip1q_s32(*v6, v9);
  int32x4_t v19 = vzip2q_s32(*v6, v9);
  int32x4_t v20 = vzip1q_s32(v7, v10);
  int32x4_t v21 = vzip2q_s32(v7, v10);
  float32x4_t v22 = (float32x4_t)vzip1q_s32(v18, v20);
  float32x4_t v23 = (float32x4_t)vzip2q_s32(v18, v20);
  float32x4_t v24 = (float32x4_t)vzip1q_s32(v19, v21);
  float32x4_t v25 = (float32x4_t *)a1[4];
  if (v25->i16[1])
  {
    float32x4_t v26 = (float32x4_t *)((char *)v25 + v25->u16[1]);
    do
    {
      uint64_t v27 = v25->u8[1];
      float32x4_t v29 = v25[2];
      float32x4_t v28 = v25[3];
      float32x4_t v30 = v25[4];
      float32x4_t v31 = v25[5];
      if (v25->i8[1])
      {
        int32x4_t v32 = (float32x4_t *)((char *)v25 + v25->u16[1] + 96);
        float32x4_t v33 = v25[7];
        float32x4_t v34 = vmlaq_f32(vmlaq_f32(vmulq_f32(v15, v29), v28, v16), v30, v17);
        _X0 = v25 + 18;
        float32x4_t v36 = 0uLL;
        uint64_t v37 = v25->u8[1];
        do
        {
          __asm
          {
            PRFM            #0, [X0,#0x10]
            PRFM            #0, [X0,#0x90]
            PRFM            #0, [X0,#0x110]
          }
          float32x4_t v45 = _X0[-7];
          float32x4_t v46 = _X0[-6];
          float32x4_t v47 = _X0[-5];
          float32x4_t v48 = _X0[-4];
          float32x4_t v49 = vminq_f32(vaddq_f32(v48, vmaxq_f32(vmlsq_f32(vmlaq_f32(vnegq_f32(_X0[-1]), _X0[-3], _X0[-2]), _X0[-3], vaddq_f32(v34, vmlaq_f32(vmlaq_f32(vmulq_f32(v22, v45), v23, v46), v24, v47))), vnegq_f32(v48))), *_X0);
          float32x4_t v50 = vsubq_f32(v49, v48);
          float32x4_t v51 = vmulq_f32(v33, v50);
          float32x4_t v34 = vmlaq_f32(v34, v50, v31);
          float32x4_t v36 = vaddq_f32(v36, v50);
          float32x4_t v22 = vmlaq_f32(v22, v51, v45);
          float32x4_t v23 = vmlaq_f32(v23, v51, v46);
          float32x4_t v24 = vmlaq_f32(v24, v51, v47);
          _X0[-4] = v49;
          *v32++ = v49;
          _X0 += 8;
          --v37;
        }
        while (v37);
      }
      else
      {
        float32x4_t v36 = 0uLL;
      }
      v25 += 8 * v27 + 11;
      float32x4_t v52 = vmulq_f32(v31, v36);
      float32x4_t v15 = vmlaq_f32(v15, v52, v29);
      float32x4_t v16 = vmlaq_f32(v16, v52, v28);
      float32x4_t v17 = vmlaq_f32(v17, v52, v30);
    }
    while (v25 < v26);
  }
  int32x4_t v53 = vzip2q_s32(v19, v21);
  int32x4_t v54 = vzip2q_s32(v12, v14);
  float32x2x2_t v55 = (float32x2x2_t)vzip1q_s32((int32x4_t)v15, (int32x4_t)v17);
  float32x2x2_t v56 = (float32x2x2_t)vzip2q_s32((int32x4_t)v15, (int32x4_t)v17);
  int32x4_t v57 = vzip1q_s32((int32x4_t)v16, v54);
  int32x4_t v58 = vzip2q_s32((int32x4_t)v16, v54);
  float32x2x2_t v59 = (float32x2x2_t)vzip1q_s32((int32x4_t)v22, (int32x4_t)v24);
  float32x2x2_t v60 = (float32x2x2_t)vzip2q_s32((int32x4_t)v22, (int32x4_t)v24);
  int32x4_t v61 = vzip1q_s32((int32x4_t)v23, v53);
  vst2_f32(v1, v55);
  *int v2 = vzip2q_s32((int32x4_t)v55, v57);
  int32x4_t v62 = vzip2q_s32((int32x4_t)v23, v53);
  vst2_f32((float *)v3->i32, v56);
  *uint64_t v4 = vzip2q_s32((int32x4_t)v56, v58);
  vst2_f32((float *)v6->i32, v59);
  v2[1] = vzip2q_s32((int32x4_t)v59, v61);
  int32x4_t result = vzip2q_s32((int32x4_t)v60, v62);
  i32 = (float *)v3[1].i32;
  vst2_f32(i32, v60);
  v4[1] = result;
  return result;
}

float32x4_t *physx::Dy::solveContactCoulombPreBlock_Conclude(uint64_t a1)
{
  physx::Dy::solveContactCoulomb4_Block((int32x4_t **)a1);
  int v2 = *(float32x4_t **)(a1 + 32);
  return physx::Dy::concludeContactCoulomb4(v2);
}

float32x4_t *physx::Dy::concludeContactCoulomb4(float32x4_t *result)
{
  if (result->i16[1])
  {
    uint64_t v1 = (float32x4_t *)((char *)result + result->u16[1]);
    uint64_t v2 = 8;
    if (result->i8[0] == 7) {
      uint64_t v2 = 11;
    }
    do
    {
      uint64_t v3 = result + 11;
      int v4 = result->u8[1];
      __asm
      {
        PRFM            #0, [X0,#0x130]
        PRFM            #0, [X0,#0x1B0]
        PRFM            #0, [X0,#0x230]
      }
      if (result->i8[1])
      {
        do
        {
          int32x4_t result = &v3[v2];
          v3[6] = vmaxq_f32(v3[6], (float32x4_t)0);
          uint64_t v3 = (float32x4_t *)((char *)v3 + v2 * 16);
          --v4;
        }
        while (v4);
      }
      else
      {
        result += 11;
      }
    }
    while (result < v1);
  }
  return result;
}

float32x4_t *physx::Dy::solveContactCoulombPreBlock_ConcludeStatic(uint64_t a1)
{
  physx::Dy::solveContactCoulomb4_StaticBlock((int32x4_t **)a1);
  uint64_t v2 = *(float32x4_t **)(a1 + 32);
  return physx::Dy::concludeContactCoulomb4(v2);
}

uint64_t physx::Dy::solveContactCoulombPreBlock_WriteBack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v25[4] = *MEMORY[0x263EF8340];
  physx::Dy::solveContactCoulomb4_Block((int32x4_t **)a1);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = v5 + 112 * *(unsigned int *)(a1 + 20);
  uint64_t v7 = v5 + 112 * *(unsigned int *)(a1 + 68);
  uint64_t v8 = v5 + 112 * *(unsigned int *)(a1 + 116);
  uint64_t v9 = v5 + 112 * *(unsigned int *)(a1 + 164);
  uint64_t v10 = v5 + 112 * *(unsigned int *)(a1 + 24);
  uint64_t v11 = v5 + 112 * *(unsigned int *)(a1 + 72);
  uint64_t v12 = v5 + 112 * *(unsigned int *)(a1 + 120);
  uint64_t v13 = v5 + 112 * *(unsigned int *)(a1 + 168);
  v25[0] = v6;
  v25[1] = v7;
  v25[2] = v8;
  v25[3] = v9;
  v24[0] = v10;
  v24[1] = v11;
  float32x4_t v24[2] = v12;
  v24[3] = v13;
  uint64_t result = physx::Dy::writeBackContactCoulomb4(a1, a3, (uint64_t)v25, (uint64_t)v24);
  unsigned int v15 = *(_DWORD *)(a3 + 16);
  if (v15 > *(_DWORD *)(a3 + 20) - 4)
  {
    unsigned int add = atomic_fetch_add(*(atomic_uint *volatile *)(a3 + 48), v15);
    int v17 = *(_DWORD *)(a3 + 16);
    if (v17)
    {
      uint64_t v18 = 0;
      unint64_t v19 = 0;
      int v20 = add + v15 - v17;
      do
      {
        int32x4_t v21 = (_OWORD *)(*(void *)(a3 + 8) + v18);
        float32x4_t v22 = (_OWORD *)(*(void *)(a3 + 32) + 32 * (v20 + v19));
        long long v23 = v21[1];
        *float32x4_t v22 = *v21;
        v22[1] = v23;
        ++v19;
        v18 += 32;
      }
      while (v19 < *(unsigned int *)(a3 + 16));
    }
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t physx::Dy::solveContactCoulombPreBlock_WriteBackStatic(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v25[4] = *MEMORY[0x263EF8340];
  physx::Dy::solveContactCoulomb4_StaticBlock((int32x4_t **)a1);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = v5 + 112 * *(unsigned int *)(a1 + 20);
  uint64_t v7 = v5 + 112 * *(unsigned int *)(a1 + 68);
  uint64_t v8 = v5 + 112 * *(unsigned int *)(a1 + 116);
  uint64_t v9 = v5 + 112 * *(unsigned int *)(a1 + 164);
  uint64_t v10 = v5 + 112 * *(unsigned int *)(a1 + 24);
  uint64_t v11 = v5 + 112 * *(unsigned int *)(a1 + 72);
  uint64_t v12 = v5 + 112 * *(unsigned int *)(a1 + 120);
  uint64_t v13 = v5 + 112 * *(unsigned int *)(a1 + 168);
  v25[0] = v6;
  v25[1] = v7;
  v25[2] = v8;
  v25[3] = v9;
  v24[0] = v10;
  v24[1] = v11;
  float32x4_t v24[2] = v12;
  v24[3] = v13;
  uint64_t result = physx::Dy::writeBackContactCoulomb4(a1, a3, (uint64_t)v25, (uint64_t)v24);
  unsigned int v15 = *(_DWORD *)(a3 + 16);
  if (v15 > *(_DWORD *)(a3 + 20) - 4)
  {
    unsigned int add = atomic_fetch_add(*(atomic_uint *volatile *)(a3 + 48), v15);
    int v17 = *(_DWORD *)(a3 + 16);
    if (v17)
    {
      uint64_t v18 = 0;
      unint64_t v19 = 0;
      int v20 = add + v15 - v17;
      do
      {
        int32x4_t v21 = (_OWORD *)(*(void *)(a3 + 8) + v18);
        float32x4_t v22 = (_OWORD *)(*(void *)(a3 + 32) + 32 * (v20 + v19));
        long long v23 = v21[1];
        *float32x4_t v22 = *v21;
        v22[1] = v23;
        ++v19;
        v18 += 32;
      }
      while (v19 < *(unsigned int *)(a3 + 16));
    }
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

int32x4_t physx::Dy::solveFriction4_Block(int32x4_t **a1)
{
  uint64_t v2 = (float *)*a1;
  uint64_t v1 = a1[1];
  int v4 = a1[6];
  uint64_t v3 = a1[7];
  uint64_t v6 = a1[12];
  uint64_t v5 = a1[13];
  int32x4_t v7 = **a1;
  int32x4_t v8 = vzip1q_s32(v7, *v6);
  uint64_t v10 = a1[18];
  uint64_t v9 = a1[19];
  uint64_t v11 = *a1 + 1;
  int32x4_t v13 = v1[1];
  int32x4_t v14 = v4[1];
  int32x4_t v15 = v3[1];
  int32x4_t v17 = v6[1];
  int32x4_t v18 = v10[1];
  int32x4_t v19 = vzip2q_s32(v7, *v6);
  int32x4_t v20 = vzip1q_s32(*v4, *v10);
  int32x4_t v21 = v9[1];
  float32x4_t v22 = (float32x4_t)vzip1q_s32(v8, v20);
  float32x4_t v23 = (float32x4_t)vzip2q_s32(v8, v20);
  int32x4_t v113 = vzip2q_s32(*v4, *v10);
  int32x4_t v114 = v19;
  float32x4_t v24 = (float32x4_t)vzip1q_s32(v19, v113);
  int32x4_t v25 = vzip1q_s32(*v1, *v5);
  int32x4_t v26 = vzip1q_s32(*v3, *v9);
  float32x4_t v27 = (float32x4_t)vzip1q_s32(v25, v26);
  float32x4_t v28 = (float32x4_t)vzip2q_s32(v25, v26);
  int32x4_t v30 = v5[1];
  int32x4_t v111 = vzip2q_s32(*v3, *v9);
  int32x4_t v112 = vzip2q_s32(*v1, *v5);
  float32x4_t v31 = (float32x4_t)vzip1q_s32(v112, v111);
  int32x4_t v32 = vzip1q_s32(*v11, v17);
  int32x4_t v33 = vzip1q_s32(v14, v18);
  float32x4_t v34 = (float32x4_t)vzip1q_s32(v32, v33);
  float32x4_t v35 = (float32x4_t)vzip2q_s32(v32, v33);
  int32x4_t v109 = vzip2q_s32(v14, v18);
  int32x4_t v110 = vzip2q_s32(*v11, v17);
  float32x4_t v36 = (float32x4_t)vzip1q_s32(v110, v109);
  int32x4_t v37 = vzip1q_s32(v13, v30);
  int32x4_t v38 = vzip1q_s32(v15, v21);
  int32x4_t v39 = vzip2q_s32(v15, v21);
  float32x4_t v40 = (float32x4_t)vzip1q_s32(v37, v38);
  float32x4_t v41 = (float32x4_t)vzip2q_s32(v37, v38);
  int32x4_t v108 = vzip2q_s32(v13, v30);
  float32x4_t v42 = (float32x4_t)vzip1q_s32(v108, v39);
  if (*((_WORD *)a1 + 15))
  {
    int v43 = (float32x4_t *)a1[4];
    unsigned int v44 = &v43[*((unsigned __int16 *)a1 + 15)];
    do
    {
      float32x4_t v45 = v43 + 6;
      uint64_t v46 = v43->u8[1];
      _X4 = (uint64_t)&v43[v46 + 6];
      __asm
      {
        PRFM            #0, [X4,#0x80]
        PRFM            #0, [X4,#0x100]
        PRFM            #0, [X4,#0x180]
      }
      uint64_t v55 = v43->u8[2];
      if (v43->i8[2])
      {
        unsigned int v56 = 0;
        uint64_t v57 = 0;
        uint64_t v58 = v46;
        float32x4_t v59 = v43[1];
        float32x4_t v60 = v43[2];
        float32x4_t v61 = v43[3];
        float32x4_t v62 = v43[4];
        float32x4_t v63 = v43[5];
        __int32 v64 = v43->i32[3];
        int v65 = &v43[v58];
        do
        {
          _X23 = &v65[v57];
          __asm
          {
            PRFM            #0, [X23,#0x120]
            PRFM            #0, [X23,#0x1A0]
            PRFM            #0, [X23,#0x220]
            PRFM            #0, [X23,#0x2A0]
          }
          float32x4_t v71 = v65[v57 + 6];
          float32x4_t v72 = v65[v57 + 7];
          float32x4_t v73 = v65[v57 + 8];
          float32x4_t v74 = v65[v57 + 9];
          float32x4_t v75 = v65[v57 + 10];
          float32x4_t v76 = v65[v57 + 11];
          float32x4_t v77 = v65[v57 + 16];
          float32x4_t v78 = v65[v57 + 17];
          float32x4_t v79 = v65[v57 + 15];
          float32x4_t v80 = vmulq_f32(v59, v45[v56 >> v64]);
          float32x4_t v81 = vmaxq_f32(vminq_f32(vmlaq_f32(vmlsq_f32(v65[v57 + 12], v65[v57 + 13], v65[v57 + 14]), v65[v57 + 13], vsubq_f32(vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v22, v71), v72, v23), v73, v24), vmlaq_f32(vmlaq_f32(vmulq_f32(v34, v74), v35, v75), v36, v76)), vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v27, v71), v72, v28), v73, v31), vmlaq_f32(vmlaq_f32(vmulq_f32(v40, v79), v41, v77), v42, v78)))), v80), vnegq_f32(v80));
          float32x4_t v82 = vsubq_f32(v81, v65[v57 + 12]);
          float32x4_t v83 = vmulq_f32(v60, v82);
          float32x4_t v84 = vmulq_f32(v61, v82);
          float32x4_t v22 = vmlaq_f32(v22, v83, v71);
          float32x4_t v27 = vmlsq_f32(v27, v84, v71);
          float32x4_t v23 = vmlaq_f32(v23, v83, v72);
          float32x4_t v28 = vmlsq_f32(v28, v84, v72);
          float32x4_t v24 = vmlaq_f32(v24, v83, v73);
          float32x4_t v31 = vmlsq_f32(v31, v84, v73);
          float32x4_t v85 = vmulq_f32(v62, v82);
          float32x4_t v34 = vmlaq_f32(v34, v85, v74);
          float32x4_t v35 = vmlaq_f32(v35, v85, v75);
          float32x4_t v36 = vmlaq_f32(v36, v85, v76);
          float32x4_t v86 = vmulq_f32(v63, v82);
          float32x4_t v40 = vmlsq_f32(v40, v86, v79);
          float32x4_t v41 = vmlsq_f32(v41, v86, v77);
          float32x4_t v42 = vmlsq_f32(v42, v86, v78);
          _X23[12] = v81;
          v57 += 12;
          ++v56;
        }
        while (12 * v55 != v57);
      }
      int v43 = (float32x4_t *)(_X4 + 192 * v55);
    }
    while (v43 < v44);
  }
  int32x4_t v87 = vzip2q_s32(v108, v39);
  int32x4_t v88 = vzip2q_s32(v110, v109);
  int32x4_t v89 = vzip2q_s32(v112, v111);
  int32x4_t v90 = vzip2q_s32(v114, v113);
  float32x2x2_t v91 = (float32x2x2_t)vzip1q_s32((int32x4_t)v22, (int32x4_t)v24);
  float32x2x2_t v92 = (float32x2x2_t)vzip2q_s32((int32x4_t)v22, (int32x4_t)v24);
  int32x4_t v93 = vzip1q_s32((int32x4_t)v23, v90);
  int32x4_t v94 = vzip2q_s32((int32x4_t)v23, v90);
  float32x2x2_t v95 = (float32x2x2_t)vzip1q_s32((int32x4_t)v27, (int32x4_t)v31);
  float32x2x2_t v96 = (float32x2x2_t)vzip2q_s32((int32x4_t)v27, (int32x4_t)v31);
  vst2_f32(v2, v91);
  int32x4_t v97 = vzip1q_s32((int32x4_t)v28, v89);
  *int v4 = vzip2q_s32((int32x4_t)v91, v93);
  int32x4_t v98 = vzip2q_s32((int32x4_t)v28, v89);
  vst2_f32((float *)v6->i32, v92);
  int32x4_t *v10 = vzip2q_s32((int32x4_t)v92, v94);
  vst2_f32((float *)v1->i32, v95);
  float32x2x2_t v99 = (float32x2x2_t)vzip1q_s32((int32x4_t)v34, (int32x4_t)v36);
  int32x4_t *v3 = vzip2q_s32((int32x4_t)v95, v97);
  float32x2x2_t v100 = (float32x2x2_t)vzip2q_s32((int32x4_t)v34, (int32x4_t)v36);
  int32x4_t v101 = vzip1q_s32((int32x4_t)v35, v88);
  vst2_f32((float *)v5->i32, v96);
  int32x4_t *v9 = vzip2q_s32((int32x4_t)v96, v98);
  int32x4_t v102 = vzip2q_s32((int32x4_t)v35, v88);
  vst2_f32((float *)v11->i32, v99);
  v4[1] = vzip2q_s32((int32x4_t)v99, v101);
  float32x2x2_t v103 = (float32x2x2_t)vzip1q_s32((int32x4_t)v40, (int32x4_t)v42);
  i32 = (float *)v6[1].i32;
  vst2_f32(i32, v100);
  v10[1] = vzip2q_s32((int32x4_t)v100, v102);
  int32x4_t v104 = vzip1q_s32((int32x4_t)v41, v87);
  uint64_t v12 = (float *)v1[1].i32;
  vst2_f32(v12, v103);
  v3[1] = vzip2q_s32((int32x4_t)v103, v104);
  float32x2x2_t v105 = (float32x2x2_t)vzip2q_s32((int32x4_t)v40, (int32x4_t)v42);
  int32x4_t v106 = vzip2q_s32((int32x4_t)v41, v87);
  int32x4_t result = vzip2q_s32((int32x4_t)v105, v106);
  float32x4_t v29 = (float *)v5[1].i32;
  vst2_f32(v29, v105);
  v9[1] = result;
  return result;
}

int32x4_t physx::Dy::solveFriction4_StaticBlock(int32x4_t **a1)
{
  uint64_t v1 = (float *)*a1;
  uint64_t v2 = a1[6];
  uint64_t v3 = a1[12];
  int v4 = a1[18];
  uint64_t v5 = *a1 + 1;
  int32x4_t v6 = **a1;
  int32x4_t v7 = v2[1];
  int32x4_t v9 = v3[1];
  int32x4_t v10 = v4[1];
  int32x4_t v11 = vzip1q_s32(v6, *v3);
  int32x4_t v12 = vzip2q_s32(v6, *v3);
  int32x4_t v13 = vzip1q_s32(*v2, *v4);
  int32x4_t v14 = vzip2q_s32(*v2, *v4);
  float32x4_t v15 = (float32x4_t)vzip1q_s32(v11, v13);
  float32x4_t v16 = (float32x4_t)vzip2q_s32(v11, v13);
  float32x4_t v17 = (float32x4_t)vzip1q_s32(v12, v14);
  int32x4_t v18 = vzip1q_s32(*v5, v9);
  int32x4_t v19 = vzip2q_s32(*v5, v9);
  int32x4_t v20 = vzip1q_s32(v7, v10);
  int32x4_t v21 = vzip2q_s32(v7, v10);
  float32x4_t v22 = (float32x4_t)vzip1q_s32(v18, v20);
  float32x4_t v23 = (float32x4_t)vzip2q_s32(v18, v20);
  float32x4_t v24 = (float32x4_t)vzip1q_s32(v19, v21);
  if (*((_WORD *)a1 + 15))
  {
    int32x4_t v25 = (float32x4_t *)a1[4];
    int32x4_t v26 = &v25[*((unsigned __int16 *)a1 + 15)];
    do
    {
      float32x4_t v27 = v25 + 6;
      uint64_t v28 = v25->u8[1];
      _X16 = (uint64_t)&v25[v28 + 6];
      __asm
      {
        PRFM            #0, [X16,#0x80]
        PRFM            #0, [X16,#0x100]
        PRFM            #0, [X16,#0x180]
      }
      uint64_t v37 = v25->u8[2];
      if (v25->i8[2])
      {
        unsigned int v38 = 0;
        uint64_t v39 = 0;
        uint64_t v40 = v28;
        float32x4_t v41 = v25[1];
        float32x4_t v42 = v25[2];
        float32x4_t v43 = v25[4];
        __int32 v44 = v25->i32[3];
        float32x4_t v45 = &v25[v40];
        do
        {
          _X6 = &v45[v39];
          __asm
          {
            PRFM            #0, [X6,#0xF0]
            PRFM            #0, [X6,#0x170]
            PRFM            #0, [X6,#0x1F0]
          }
          float32x4_t v50 = vmulq_f32(v41, v27[v38 >> v44]);
          float32x4_t v51 = v45[v39 + 6];
          float32x4_t v52 = v45[v39 + 7];
          float32x4_t v53 = v45[v39 + 8];
          float32x4_t v54 = v45[v39 + 9];
          float32x4_t v55 = v45[v39 + 10];
          float32x4_t v56 = v45[v39 + 11];
          float32x4_t v57 = vmaxq_f32(vminq_f32(vmlaq_f32(vmlsq_f32(v45[v39 + 12], v45[v39 + 13], v45[v39 + 14]), v45[v39 + 13], vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v15, v51), v52, v16), v53, v17), vmlaq_f32(vmlaq_f32(vmulq_f32(v22, v54), v23, v55), v24, v56))), v50), vnegq_f32(v50));
          float32x4_t v58 = vsubq_f32(v57, v45[v39 + 12]);
          float32x4_t v59 = vmulq_f32(v43, v58);
          float32x4_t v15 = vmlaq_f32(v15, v58, vmulq_f32(v42, v51));
          float32x4_t v22 = vmlaq_f32(v22, v59, v54);
          float32x4_t v16 = vmlaq_f32(v16, v58, vmulq_f32(v42, v52));
          float32x4_t v23 = vmlaq_f32(v23, v59, v55);
          float32x4_t v17 = vmlaq_f32(v17, v58, vmulq_f32(v42, v53));
          float32x4_t v24 = vmlaq_f32(v24, v59, v56);
          _X6[12] = v57;
          v39 += 9;
          ++v38;
        }
        while (9 * v37 != v39);
      }
      int32x4_t v25 = (float32x4_t *)(_X16 + 144 * v37);
    }
    while (v25 < v26);
  }
  int32x4_t v60 = vzip2q_s32(v19, v21);
  int32x4_t v61 = vzip2q_s32(v12, v14);
  float32x2x2_t v62 = (float32x2x2_t)vzip1q_s32((int32x4_t)v15, (int32x4_t)v17);
  float32x2x2_t v63 = (float32x2x2_t)vzip2q_s32((int32x4_t)v15, (int32x4_t)v17);
  int32x4_t v64 = vzip1q_s32((int32x4_t)v16, v61);
  int32x4_t v65 = vzip2q_s32((int32x4_t)v16, v61);
  float32x2x2_t v66 = (float32x2x2_t)vzip1q_s32((int32x4_t)v22, (int32x4_t)v24);
  float32x2x2_t v67 = (float32x2x2_t)vzip2q_s32((int32x4_t)v22, (int32x4_t)v24);
  int32x4_t v68 = vzip1q_s32((int32x4_t)v23, v60);
  vst2_f32(v1, v62);
  *uint64_t v2 = vzip2q_s32((int32x4_t)v62, v64);
  int32x4_t v69 = vzip2q_s32((int32x4_t)v23, v60);
  vst2_f32((float *)v3->i32, v63);
  *int v4 = vzip2q_s32((int32x4_t)v63, v65);
  vst2_f32((float *)v5->i32, v66);
  v2[1] = vzip2q_s32((int32x4_t)v66, v68);
  int32x4_t result = vzip2q_s32((int32x4_t)v67, v69);
  i32 = (float *)v3[1].i32;
  vst2_f32(i32, v67);
  v4[1] = result;
  return result;
}

physx::Dy::ThreadContext *physx::Dy::ThreadContext::ThreadContext(physx::Dy::ThreadContext *this, physx::PxcNpMemBlockPool *a2)
{
  *(void *)this = 0;
  *((void *)this + 1478) = a2;
  *((void *)this + 1479) = 0;
  *((_DWORD *)this + 2960) = 0;
  *(_OWORD *)((char *)this + 11848) = 0u;
  *((void *)this + 1483) = a2;
  *((void *)this + 1484) = a2;
  *((void *)this + 1485) = 0;
  *((_DWORD *)this + 2972) = 0;
  *((_DWORD *)this + 2974) = 0;
  *((void *)this + 1488) = 0;
  *((_DWORD *)this + 3058) = 0;
  *((void *)this + 1530) = 0;
  *((_DWORD *)this + 3062) = 0;
  *((void *)this + 1533) = 0;
  *((_OWORD *)this + 745) = 0u;
  *((_OWORD *)this + 746) = 0u;
  *((_OWORD *)this + 747) = 0u;
  *((_OWORD *)this + 761) = 0u;
  *((_OWORD *)this + 760) = 0u;
  *((_OWORD *)this + 759) = 0u;
  *((_OWORD *)this + 758) = 0u;
  *((_OWORD *)this + 757) = 0u;
  *((_OWORD *)this + 756) = 0u;
  *((_OWORD *)this + 755) = 0u;
  *((_OWORD *)this + 754) = 0u;
  *((_OWORD *)this + 763) = 0u;
  *(_OWORD *)((char *)this + 12280) = 0u;
  *(_OWORD *)((char *)this + 12296) = 0u;
  *((void *)this + 1539) = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)this + 11952, 0x200u);
  if ((*((_DWORD *)this + 2983) & 0x7FFFFF80) == 0) {
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)this + 11920, 0x80u);
  }
  return this;
}

uint64_t physx::Dy::ThreadContext::resizeArrays(uint64_t this, int a2, unsigned int a3)
{
  uint64_t v4 = this;
  *(_DWORD *)(this + 12072) = 0;
  unsigned int v5 = (a2 + 63) & 0xFFFFFFC0;
  if ((*(_DWORD *)(this + 12076) & 0x7FFFFFFFu) < v5) {
    this = physx::shdfnd::Array<physx::PxSolverConstraintDesc,physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>::recreate(this + 12064, v5);
  }
  *(_DWORD *)(v4 + 12296) = 0;
  unsigned int v6 = a3 | (a3 >> 1) | ((a3 | (a3 >> 1)) >> 2);
  unsigned int v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
  int v8 = v7 | HIWORD(v7);
  if ((v8 + 1) > 0x10) {
    unsigned int v9 = v8 + 1;
  }
  else {
    unsigned int v9 = 16;
  }
  if ((*(_DWORD *)(v4 + 12300) & 0x7FFFFFFFu) < v9) {
    this = physx::shdfnd::Array<physx::Dy::ArticulationSolverDesc,physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationSolverDesc>>::recreate(v4 + 12288, v9);
  }
  *(_DWORD *)(v4 + 12296) = a3;
  *(void *)(v4 + 12264) = *(void *)(v4 + 12016);
  *(void *)(v4 + 12280) = *(void *)(v4 + 12064);
  return this;
}

uint64_t physx::Dy::DynamicsTGSContext::create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, uint64_t a10, char a11, char a12, char a13)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, 816, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyTGSDynamics.cpp", 108);
  if (result) {
    return physx::Dy::DynamicsTGSContext::DynamicsTGSContext(result, a1, a2, a3, a4, a5, a6, a7, a9, a8, a10, a11, a12, a13);
  }
  return result;
}

uint64_t physx::Dy::DynamicsTGSContext::destroy(physx::Dy::DynamicsTGSContext *this)
{
  (*(void (**)(physx::Dy::DynamicsTGSContext *))(*(void *)this + 56))(this);
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
  return v1();
}

uint64_t physx::Dy::DynamicsTGSContext::resetThreadContexts(physx::Dy::DynamicsTGSContext *this)
{
  uint64_t v2 = *((void *)this + 54);
  pthread_mutex_lock((pthread_mutex_t *)(v2 + 8));
  uint64_t v3 = *(void **)v2;
  *(void *)uint64_t v2 = 0;
  uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)(v2 + 8));
  if (v3)
  {
    unsigned int v5 = v3;
    do
    {
      unsigned int v6 = (void *)*v5;
      v5[1479] = 0;
      *((_DWORD *)v5 + 2960) = 0;
      v5[1485] = 0;
      *((_DWORD *)v5 + 2972) = 0;
      v5[1533] = v5[1502];
      v5[1535] = v5[1508];
      v5[1530] = 0;
      *((_DWORD *)v5 + 2974) = 0;
      v5[1488] = 0;
      *((_OWORD *)v5 + 763) = 0uLL;
      unsigned int v5 = v6;
    }
    while (v6);
    do
    {
      unsigned int v7 = (void *)*v3;
      uint64_t v8 = *((void *)this + 54);
      pthread_mutex_lock((pthread_mutex_t *)(v8 + 8));
      void *v3 = *(void *)v8;
      *(void *)uint64_t v8 = v3;
      uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)(v8 + 8));
      uint64_t v3 = v7;
    }
    while (v7);
  }
  return result;
}

float physx::Dy::copyToSolverBodyDataStep(float *a1, float *a2, float *a3, uint64_t a4, int a5, int a6, char a7, uint64_t a8, float result, float a10, float a11, float a12, float a13, uint64_t a14, uint64_t a15)
{
  float v15 = *(float *)a4;
  float v16 = *(float *)(a4 + 4);
  float v17 = *(float *)(a4 + 8);
  float v18 = *(float *)(a4 + 12);
  float v19 = v15 * (float)(v15 + v15);
  float v20 = v16 * (float)(v16 + v16);
  float v21 = v17 * (float)(v17 + v17);
  float v22 = (float)(v15 + v15) * v16;
  float v23 = (float)(v15 + v15) * v17;
  float v24 = (float)(v15 + v15) * v18;
  float v25 = (float)(v16 + v16) * v17;
  float v26 = (float)(v16 + v16) * v18;
  float v27 = (float)(v17 + v17) * v18;
  float v28 = (float)(1.0 - v20) - v21;
  float v29 = v22 + v27;
  float v30 = v23 - v26;
  float v31 = v22 - v27;
  float v32 = 1.0 - v19;
  float v33 = (float)(1.0 - v19) - v21;
  float v34 = v25 + v24;
  float v35 = v23 + v26;
  float v36 = v25 - v24;
  float v37 = v32 - v20;
  float v38 = a3[1];
  float v39 = sqrtf(*a3);
  if (*a3 == 0.0) {
    float v40 = 0.0;
  }
  else {
    float v40 = v39;
  }
  float v41 = sqrtf(v38);
  if (v38 == 0.0) {
    float v42 = 0.0;
  }
  else {
    float v42 = v41;
  }
  float v43 = a3[2];
  float v44 = sqrtf(v43);
  if (v43 == 0.0) {
    float v45 = 0.0;
  }
  else {
    float v45 = v44;
  }
  *(float *)(a14 + 60) = (float)((float)(v34 * (float)(v34 * v42)) + (float)((float)(v30 * v40) * v30))
                       + (float)((float)(v37 * v45) * v37);
  float v46 = (float)((float)(v33 * (float)(v31 * v42)) + (float)((float)(v28 * v40) * v29))
      + (float)((float)(v35 * v45) * v36);
  *(float *)(a14 + 28) = (float)((float)(v31 * (float)(v31 * v42)) + (float)((float)(v28 * v40) * v28))
                       + (float)((float)(v35 * v45) * v35);
  *(float *)(a14 + 32) = v46;
  float v47 = (float)((float)(v34 * (float)(v31 * v42)) + (float)((float)(v28 * v40) * v30))
      + (float)((float)(v35 * v45) * v37);
  *(float *)(a14 + 36) = v47;
  *(float *)(a14 + 40) = v46;
  float v48 = (float)((float)(v34 * (float)(v33 * v42)) + (float)((float)(v29 * v40) * v30))
      + (float)((float)(v36 * v45) * v37);
  *(float *)(a14 + 44) = (float)((float)(v33 * (float)(v33 * v42)) + (float)((float)(v29 * v40) * v29))
                       + (float)((float)(v36 * v45) * v36);
  *(float *)(a14 + 48) = v48;
  *(float *)(a14 + 52) = v47;
  *(float *)(a14 + 56) = v48;
  *(void *)(a14 + 16) = *(void *)(a4 + 16);
  *(_DWORD *)(a14 + 24) = *(_DWORD *)(a4 + 24);
  *(_OWORD *)a14 = xmmword_23435FBB0;
  float v49 = *a1;
  float v50 = a1[1];
  float v51 = a1[2];
  float v52 = *a2;
  float v53 = a2[1];
  float v54 = a2[2];
  if (a6)
  {
    if (a6) {
      float v49 = 0.0;
    }
    if ((a6 & 2) != 0) {
      float v50 = 0.0;
    }
    if ((a6 & 4) != 0) {
      float v51 = 0.0;
    }
    if ((a6 & 8) != 0) {
      float v52 = 0.0;
    }
    if ((a6 & 0x10) != 0) {
      float v53 = 0.0;
    }
    if ((a6 & 0x20) != 0) {
      float v54 = 0.0;
    }
  }
  if (v45 == 0.0) {
    float v55 = 0.0;
  }
  else {
    float v55 = 1.0 / v45;
  }
  float v56 = v36 * v55;
  if (v40 == 0.0) {
    float v57 = 0.0;
  }
  else {
    float v57 = 1.0 / v40;
  }
  float v58 = v29 * v57;
  float v59 = 1.0 / v42;
  if (v42 == 0.0) {
    float v59 = 0.0;
  }
  float v60 = (float)((float)(v34 * (float)(v33 * v59)) + (float)(v58 * v30)) + (float)(v56 * v37);
  float v61 = (float)((float)(v34 * (float)(v31 * v59)) + (float)((float)(v28 * v57) * v30))
      + (float)((float)(v35 * v55) * v37);
  float v62 = (float)((float)(v33 * (float)(v31 * v59)) + (float)((float)(v28 * v57) * v29))
      + (float)((float)(v35 * v55) * v36);
  *(float *)a8 = v49;
  *(float *)(a8 + 4) = v50;
  *(float *)(a8 + 8) = v51;
  *(float *)(a8 + 16) = (float)((float)((float)((float)((float)(v31 * (float)(v31 * v59))
                                                      + (float)((float)(v28 * v57) * v28))
                                              + (float)((float)(v35 * v55) * v35))
                                      * v52)
                              + (float)(v62 * v53))
                      + (float)(v61 * v54);
  *(float *)(a8 + 20) = (float)((float)(v62 * v52)
                              + (float)((float)((float)((float)(v33 * (float)(v33 * v59)) + (float)(v58 * v29))
                                              + (float)(v56 * v36))
                                      * v53))
                      + (float)(v60 * v54);
  *(float *)(a8 + 24) = (float)((float)(v61 * v52) + (float)(v60 * v53))
                      + (float)((float)((float)((float)(v34 * (float)(v34 * v59)) + (float)((float)(v30 * v57) * v30))
                                      + (float)((float)(v37 * v55) * v37))
                              * v54);
  *(void *)(a8 + 48) = 0;
  *(_DWORD *)(a8 + 56) = 0;
  *(void *)(a8 + 32) = 0;
  *(_DWORD *)(a8 + 40) = 0;
  *(_WORD *)(a8 + 60) = a6;
  *(unsigned char *)(a8 + 62) = a7;
  *(float *)(a8 + 44) = sqrtf(a13);
  *(_DWORD *)(a8 + 28) = 0;
  *(_DWORD *)(a15 + 36) = a5;
  *(float *)(a15 + 28) = a10;
  *(float *)(a15 + 32) = result;
  *(float *)(a15 + 40) = a12;
  *(float *)a15 = v49;
  *(float *)(a15 + 4) = v50;
  *(float *)(a15 + 8) = v51;
  *(float *)(a15 + 12) = a11;
  *(float *)(a15 + 16) = v52;
  *(float *)(a15 + 20) = v53;
  *(float *)(a15 + 24) = v54;
  return result;
}

uint64_t physx::Dy::DynamicsTGSContext::DynamicsTGSContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, uint64_t a10, uint64_t a11, char a12, char a13, char a14)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)(a1 + 72) = a10;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(a1 + 88) = _D0;
  *(_DWORD *)(a1 + 96) = 2139095039;
  *(unsigned char *)(a1 + 100) = a12;
  *(unsigned char *)(a1 + 101) = a13;
  *(unsigned char *)(a1 + 102) = a14;
  *(_DWORD *)(a1 + 120) = -1073741824;
  *(_DWORD *)(a1 + 140) = 32;
  *(void *)(a1 + 224) = a7;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = a5;
  *(void *)a1 = &unk_26E724CF0;
  uint64_t v35 = a1 + 256;
  uint64_t v27 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    float v28 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::SListImpl>::getName() [T = physx::shdfnd::SListImpl]";
  }
  else {
    float v28 = "<allocation names disabled>";
  }
  uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v27 + 24) + 16))(v27 + 24, 72, v28, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSList.h", 103);
  *(void *)(a1 + 432) = v29;
  *(void *)uint64_t v29 = 0;
  pthread_mutex_init((pthread_mutex_t *)(v29 + 8), 0);
  *(void *)(a1 + 440) = a2;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(void *)(a1 + 712) = a8;
  *(void *)(a1 + 752) = 0;
  *(float *)(a1 + 760) = a9;
  *(void *)(a1 + 768) = a3;
  *(void *)(a1 + 776) = a4;
  *(void *)(a1 + 784) = a6;
  *(void *)(a1 + 800) = a11;
  float v30 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 24, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/include/DyContext.h", 262);
  v30[1] = 0;
  v30[2] = 0;
  *float v30 = a7;
  *(void *)(a1 + 8) = v30;
  float v31 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 24, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/include/DyContext.h", 264);
  v31[1] = 0;
  v31[2] = 0;
  *float v31 = a7;
  *(void *)(a1 + 16) = v31;
  float v32 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 24, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyTGSDynamics.cpp", 274);
  v32[1] = 0;
  v32[2] = 0;
  *float v32 = a7;
  *(void *)(a1 + 624) = v32;
  float v33 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 24, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyTGSDynamics.cpp", 275);
  v33[1] = 0;
  v33[2] = 0;
  *float v33 = a7;
  *(void *)(a1 + 632) = v33;
  *(_DWORD *)(a1 + 708) = 0;
  *(_DWORD *)(a1 + 792) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(v35 + 60) = 0u;
  *(_OWORD *)(a1 + 348) = 0u;
  *(_OWORD *)(a1 + 364) = 0u;
  *(_DWORD *)(a1 + 380) = 0;
  *(_OWORD *)(a1 + 332) = xmmword_23435FD50;
  *(void *)(a1 + 416) = 0x1FFFFFF00000000;
  *(_DWORD *)(a1 + 424) = 2139095039;
  *(_OWORD *)(a1 + 384) = xmmword_23441F6B0;
  *(_OWORD *)(a1 + 400) = xmmword_234420230;
  return a1;
}

void physx::Dy::DynamicsTGSContext::~DynamicsTGSContext(physx::Dy::DynamicsTGSContext *this)
{
  *(void *)this = &unk_26E724CF0;
  uint64_t v2 = (void *)*((void *)this + 78);
  if (v2)
  {
    int v3 = *((_DWORD *)v2 + 5);
    if (v3 < 0
      || ((v3 & 0x7FFFFFFF) != 0 ? (BOOL v4 = v2[1] == 0) : (BOOL v4 = 1),
          v4 || ((*(void (**)(void, void))(*(void *)*v2 + 24))(*v2, v2[1]), *((void *)this + 78))))
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *((void *)this + 78) = 0;
  unsigned int v5 = (void *)*((void *)this + 79);
  if (v5)
  {
    int v6 = *((_DWORD *)v5 + 5);
    if (v6 < 0
      || ((v6 & 0x7FFFFFFF) != 0 ? (BOOL v7 = v5[1] == 0) : (BOOL v7 = 1),
          v7 || ((*(void (**)(void, void))(*(void *)*v5 + 24))(*v5, v5[1]), *((void *)this + 79))))
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *((void *)this + 79) = 0;
  int v8 = *((_DWORD *)this + 175);
  if ((v8 & 0x80000000) == 0 && (v8 & 0x7FFFFFFF) != 0 && *((void *)this + 86) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v10 = *((_DWORD *)this + 171);
  if ((v10 & 0x80000000) == 0 && (v10 & 0x7FFFFFFF) != 0 && *((void *)this + 84)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v11 = *((_DWORD *)this + 167);
  if ((v11 & 0x80000000) == 0 && (v11 & 0x7FFFFFFF) != 0 && *((void *)this + 82)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v12 = *((_DWORD *)this + 163);
  if ((v12 & 0x80000000) == 0 && (v12 & 0x7FFFFFFF) != 0 && *((void *)this + 80)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v13 = *((_DWORD *)this + 155);
  if ((v13 & 0x80000000) == 0 && (v13 & 0x7FFFFFFF) != 0)
  {
    uint64_t v14 = *((void *)this + 76);
    if (v14) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v14 - *(void *)(v14 - 8));
    }
  }
  int v15 = *((_DWORD *)this + 151);
  if ((v15 & 0x80000000) == 0 && (v15 & 0x7FFFFFFF) != 0)
  {
    uint64_t v16 = *((void *)this + 74);
    if (v16) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v16 - *(void *)(v16 - 8));
    }
  }
  int v17 = *((_DWORD *)this + 147);
  if ((v17 & 0x80000000) == 0 && (v17 & 0x7FFFFFFF) != 0)
  {
    uint64_t v18 = *((void *)this + 72);
    if (v18) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v18 - *(void *)(v18 - 8));
    }
  }
  int v19 = *((_DWORD *)this + 143);
  if ((v19 & 0x80000000) == 0 && (v19 & 0x7FFFFFFF) != 0 && *((void *)this + 70)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v20 = *((_DWORD *)this + 139);
  if ((v20 & 0x80000000) == 0 && (v20 & 0x7FFFFFFF) != 0 && *((void *)this + 68)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v21 = *((_DWORD *)this + 135);
  if ((v21 & 0x80000000) == 0 && (v21 & 0x7FFFFFFF) != 0 && *((void *)this + 66)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v22 = *((_DWORD *)this + 131);
  if ((v22 & 0x80000000) == 0 && (v22 & 0x7FFFFFFF) != 0 && *((void *)this + 64)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v23 = *((_DWORD *)this + 127);
  if ((v23 & 0x80000000) == 0 && (v23 & 0x7FFFFFFF) != 0 && *((void *)this + 62)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v24 = *((_DWORD *)this + 123);
  if ((v24 & 0x80000000) == 0 && (v24 & 0x7FFFFFFF) != 0)
  {
    uint64_t v25 = *((void *)this + 60);
    if (v25) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v25 - *(void *)(v25 - 8));
    }
  }
  int v26 = *((_DWORD *)this + 119);
  if ((v26 & 0x80000000) == 0 && (v26 & 0x7FFFFFFF) != 0)
  {
    uint64_t v27 = *((void *)this + 58);
    if (v27) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v27 - *(void *)(v27 - 8));
    }
  }
  int v28 = *((_DWORD *)this + 115);
  if ((v28 & 0x80000000) == 0 && (v28 & 0x7FFFFFFF) != 0)
  {
    uint64_t v29 = *((void *)this + 56);
    if (v29) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v29 - *(void *)(v29 - 8));
    }
  }
  for (uint64_t i = (physx::shdfnd::SListImpl *)*((void *)this + 54); ; uint64_t i = (physx::shdfnd::SListImpl *)*((void *)this + 54))
  {
    float v31 = (physx::Dy::ThreadContext *)physx::shdfnd::SListImpl::pop(i);
    if (!v31) {
      break;
    }
    physx::Dy::ThreadContext::~ThreadContext(v31);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v32 - *(void *)(v32 - 8));
  }
  physx::shdfnd::SListT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::SListImpl>>::~SListT((uint64_t)this + 432);
  physx::Dy::Context::~Context(this);
}

{
  uint64_t vars8;

  physx::Dy::DynamicsTGSContext::~DynamicsTGSContext(this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t physx::Dy::DynamicsTGSContext::update(physx::Dy::DynamicsTGSContext *this, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, float a9, uint64_t a10, long long *a11, uint64_t a12, uint64_t a13)
{
  long long v17 = *a11;
  long long v18 = a11[1];
  *((void *)this + 94) = *((void *)a11 + 4);
  *((_OWORD *)this + 45) = v17;
  *((_OWORD *)this + 46) = v18;
  *((float *)this + 22) = a9;
  *((float *)this + 23) = 1.0 / a9;
  *((void *)this + 13) = *(void *)a13;
  *((_DWORD *)this + 28) = *(_DWORD *)(a13 + 8);
  int v19 = *(_DWORD *)(a2 + 552);
  uint64_t v20 = *(unsigned int *)(a2 + 432);
  if (v20)
  {
    int v21 = *(unsigned int **)(a2 + 424);
    unsigned int v22 = *(_DWORD *)(a2 + 200);
    uint64_t v23 = *(void *)(a2 + 176);
    do
    {
      unsigned int v24 = *v21++;
      uint64_t v25 = *(void *)(*(void *)(v23 + 8 * (v24 / v22)) + 8 * (v24 % v22));
      if (v25) {
        *(unsigned char *)(v25 + 82) = 0;
      }
      --v20;
    }
    while (v20);
  }
  int v26 = (_DWORD *)*((void *)this + 31);
  v26[152] = *(_DWORD *)(a2 + 416);
  if (v19)
  {
    v26[151] = *(_DWORD *)(a2 + 384);
    v26[150] = *(_DWORD *)(a2 + 460);
    *((_DWORD *)this + 177) = 0;
    physx::Dy::DynamicsTGSContext::resetThreadContexts(this);
    (*(void (**)(uint64_t))(*(void *)a4 + 32))(a4);
    uint64_t v27 = physx::Cm::FlushPool::allocate(*((pthread_mutex_t ***)this + 97), 64, 0x10u);
    *(void *)(v27 + 8) = *((void *)this + 100);
    *(void *)(v27 + 16) = 0;
    *(_DWORD *)(v27 + 32) = 0;
    *(void *)uint64_t v27 = &unk_26E724DE0;
    *(void *)(v27 + 40) = this;
    *(void *)(v27 + 48) = a2;
    *(void *)(v27 + 56) = a4;
    *(_DWORD *)(v27 + 32) = 1;
    *(void *)(v27 + 24) = a3;
    if (a3)
    {
      (*(void (**)(uint64_t))(*(void *)a3 + 32))(a3);
      *(void *)(v27 + 16) = *(void *)(*(void *)(v27 + 24) + 16);
    }
    *((void *)this + 34) = 0;
    *((_DWORD *)this + 70) = 0;
    *((void *)this + 32) = 0;
    *((_DWORD *)this + 66) = 0;
    uint64_t v28 = *(unsigned int *)(a2 + 416);
    uint64_t v29 = *(void *)(a2 + 408);
    *((_DWORD *)this + 176) = v28;
    uint64_t v63 = a2;
    int v30 = *(_DWORD *)(a2 + 400);
    int v62 = *(_DWORD *)(a2 + 384);
    int v31 = v62 + v28;
    unsigned int v32 = *((_DWORD *)this + 147) & 0x7FFFFFFF;
    if (v62 + (int)v28 > v32)
    {
      unsigned int v33 = (v31 & 0xFFFFFFE0) + 32;
      if ((*((_DWORD *)this + 167) & 0x7FFFFFFFu) < v33)
      {
        physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)this + 656, (v31 & 0xFFFFFFE0) + 32);
        unsigned int v32 = *((_DWORD *)this + 147) & 0x7FFFFFFF;
      }
      if (v32 < v33) {
        physx::shdfnd::Array<physx::PxTGSSolverBodyVel,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxTGSSolverBodyVel>>>::recreate((unint64_t *)this + 72, (v31 & 0xFFFFFFE0) + 32);
      }
      if ((*((_DWORD *)this + 151) & 0x7FFFFFFFu) < v33) {
        physx::shdfnd::Array<physx::PxTGSSolverBodyTxInertia,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxTGSSolverBodyTxInertia>>>::recreate((unint64_t *)this + 74, (v31 & 0xFFFFFFE0) + 32);
      }
      if ((*((_DWORD *)this + 155) & 0x7FFFFFFFu) < v33) {
        physx::shdfnd::Array<physx::PxTGSSolverBodyData,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxTGSSolverBodyData>>>::recreate((unint64_t *)this + 76, (v31 & 0xFFFFFFE0) + 32);
      }
    }
    int v61 = v30;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    physx::shdfnd::Array<physx::PxTGSSolverBodyVel,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxTGSSolverBodyVel>>>::resize((uint64_t)this + 576, v31 + 1, (uint64_t)&v64);
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    physx::shdfnd::Array<physx::PxTGSSolverBodyTxInertia,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxTGSSolverBodyTxInertia>>>::resize((uint64_t)this + 592, v31 + 1, (uint64_t)&v64);
    long long v65 = 0u;
    long long v66 = 0u;
    long long v64 = 0u;
    physx::shdfnd::Array<physx::PxTGSSolverBodyData,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxTGSSolverBodyData>>>::resize((uint64_t)this + 608, (v31 + 1), (uint64_t)&v64);
    LODWORD(v64) = 0;
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)this + 656, v31 + 1, &v64);
    uint64_t v34 = *((void *)this + 72);
    *(void *)uint64_t v34 = *((void *)this + 32);
    *(_DWORD *)(v34 + 8) = *((_DWORD *)this + 66);
    *(_DWORD *)(v34 + 12) = *((_DWORD *)this + 67);
    *(void *)(v34 + 16) = *((void *)this + 34);
    *(_DWORD *)(v34 + 24) = *((_DWORD *)this + 70);
    *(_DWORD *)(v34 + 28) = *((_DWORD *)this + 71);
    *(_OWORD *)(v34 + 32) = *((_OWORD *)this + 18);
    *(void *)(v34 + 48) = *((void *)this + 38);
    *(_DWORD *)(v34 + 56) = *((_DWORD *)this + 78);
    *(_DWORD *)(v34 + 60) = *((_DWORD *)this + 79);
    uint64_t v35 = *((void *)this + 74);
    *(_OWORD *)uint64_t v35 = *((_OWORD *)this + 20);
    *(void *)(v35 + 16) = *((void *)this + 42);
    *(void *)(v35 + 24) = *((void *)this + 43);
    *(void *)(v35 + 32) = *((void *)this + 44);
    *(void *)(v35 + 40) = *((void *)this + 45);
    *(void *)(v35 + 48) = *((void *)this + 46);
    *(void *)(v35 + 56) = *((void *)this + 47);
    uint64_t v36 = *((void *)this + 76);
    *(_OWORD *)uint64_t v36 = *((_OWORD *)this + 24);
    *(void *)(v36 + 16) = *((void *)this + 50);
    *(_DWORD *)(v36 + 24) = *((_DWORD *)this + 102);
    long long v37 = *(_OWORD *)((char *)this + 412);
    *(_DWORD *)(v36 + 44) = *((_DWORD *)this + 107);
    *(_OWORD *)(v36 + 28) = v37;
    if (v28)
    {
      uint64_t v38 = v29;
      unsigned int v39 = 0;
      unsigned int v40 = v28;
      do
      {
        unsigned int v41 = v40 - 1024;
        uint64_t v42 = v28;
        if (v40 >= 0x400) {
          int v43 = 1024;
        }
        else {
          int v43 = v40;
        }
        uint64_t v44 = physx::Cm::FlushPool::allocate(*((pthread_mutex_t ***)this + 97), 88, 0x10u);
        uint64_t v45 = v39 + 1;
        uint64_t v46 = *((void *)this + 72) + (v45 << 6);
        uint64_t v47 = *((void *)this + 74) + (v45 << 6);
        uint64_t v48 = *((void *)this + 76) + 48 * v45;
        *(void *)(v44 + 8) = *((void *)this + 100);
        *(void *)(v44 + 16) = 0;
        *(_DWORD *)(v44 + 32) = 0;
        *(void *)uint64_t v44 = &unk_26E724E50;
        *(void *)(v44 + 40) = v38 + 4 * v39;
        *(_DWORD *)(v44 + 48) = v43;
        uint64_t v28 = v42;
        *(void *)(v44 + 56) = v63 + 224;
        *(void *)(v44 + 64) = v46;
        *(void *)(v44 + 72) = v47;
        *(void *)(v44 + 80) = v48;
        *(_DWORD *)(v44 + 32) = 1;
        *(void *)(v44 + 24) = v27;
        (*(void (**)(uint64_t))(*(void *)v27 + 32))(v27);
        *(void *)(v44 + 16) = *(void *)(*(void *)(v44 + 24) + 16);
        (*(void (**)(uint64_t))(*(void *)v44 + 40))(v44);
        v39 += 1024;
        unsigned int v40 = v41;
      }
      while (v39 < v42);
    }
    int v49 = *(_DWORD *)(v63 + 456);
    int v50 = v49 + (v61 << 6) + *(_DWORD *)(v63 + 460);
    *((_DWORD *)this + 114) = 0;
    unsigned int v51 = (v50 + 63) & 0xFFFFFFC0;
    if ((*((_DWORD *)this + 115) & 0x7FFFFFFFu) < v51) {
      physx::shdfnd::Array<physx::PxSolverConstraintDesc,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>>::recreate((uint64_t)this + 448, (v50 + 63) & 0xFFFFFFC0);
    }
    *((_DWORD *)this + 114) = v50;
    *((_DWORD *)this + 118) = 0;
    if ((*((_DWORD *)this + 119) & 0x7FFFFFFFu) < v51) {
      physx::shdfnd::Array<physx::PxSolverConstraintDesc,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>>::recreate((uint64_t)this + 464, (v50 + 63) & 0xFFFFFFC0);
    }
    *((_DWORD *)this + 118) = v50;
    *((_DWORD *)this + 126) = 0;
    if ((*((_DWORD *)this + 127) & 0x7FFFFFFFu) < v51) {
      physx::shdfnd::Array<physx::PxConstraintBatchHeader,physx::shdfnd::ReflectionAllocator<physx::PxConstraintBatchHeader>>::recreate((uint64_t)this + 496, (v50 + 63) & 0xFFFFFFC0);
    }
    *((_DWORD *)this + 126) = v50;
    *((_DWORD *)this + 122) = 0;
    if ((*((_DWORD *)this + 123) & 0x7FFFFFFFu) < v51) {
      physx::shdfnd::Array<physx::PxSolverConstraintDesc,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>>::recreate((uint64_t)this + 480, (v50 + 63) & 0xFFFFFFC0);
    }
    *((_DWORD *)this + 122) = v50;
    *((_DWORD *)this + 174) = 0;
    unsigned int v52 = (v49 + 63) & 0xFFFFFFC0;
    if ((*((_DWORD *)this + 175) & 0x7FFFFFFFu) < v52) {
      physx::shdfnd::Array<physx::PxsIndexedContactManager,physx::shdfnd::ReflectionAllocator<physx::PxsIndexedContactManager>>::recreate((uint64_t)this + 688, v52);
    }
    *((_DWORD *)this + 174) = v49;
    *((_DWORD *)this + 130) = 0;
    unsigned int v53 = (v62 + 63) & 0xFFFFFFC0;
    if ((*((_DWORD *)this + 131) & 0x7FFFFFFFu) < v53) {
      physx::shdfnd::Array<physx::Cm::SpatialVector,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVector>>::recreate((uint64_t)this + 512, (v62 + 63) & 0xFFFFFFC0);
    }
    *((_DWORD *)this + 130) = v62;
    *((_DWORD *)this + 134) = 0;
    if ((*((_DWORD *)this + 135) & 0x7FFFFFFFu) < v53) {
      physx::shdfnd::Array<physx::PxsBodyCore *,physx::shdfnd::ReflectionAllocator<physx::PxsBodyCore *>>::recreate((uint64_t)this + 528, v53);
    }
    *((_DWORD *)this + 134) = v62;
    *((_DWORD *)this + 138) = 0;
    if ((*((_DWORD *)this + 139) & 0x7FFFFFFFu) < v53) {
      physx::shdfnd::Array<physx::PxsRigidBody *,physx::shdfnd::ReflectionAllocator<physx::PxsRigidBody *>>::recreate((uint64_t)this + 544, v53);
    }
    *((_DWORD *)this + 138) = v62;
    *((_DWORD *)this + 142) = 0;
    unsigned int v54 = (v61 + 63) & 0xFFFFFFC0;
    if ((*((_DWORD *)this + 143) & 0x7FFFFFFFu) < v54) {
      physx::shdfnd::Array<physx::Dy::ArticulationV *,physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationV *>>::recreate((uint64_t)this + 560, v54);
    }
    *((_DWORD *)this + 142) = v61;
    *((_DWORD *)this + 170) = 0;
    if ((*((_DWORD *)this + 171) & 0x7FFFFFFFu) < v53) {
      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)this + 672, v53);
    }
    *((_DWORD *)this + 170) = v62;
    uint64_t v55 = *((void *)this + 1);
    *(_DWORD *)(v55 + 16) = 0;
    unsigned int v56 = v49 - 1;
    if (!v49) {
      unsigned int v56 = 0;
    }
    unsigned int v57 = v56 | (v56 >> 1) | ((v56 | (v56 >> 1)) >> 2);
    unsigned int v58 = v57 | (v57 >> 4) | ((v57 | (v57 >> 4)) >> 8);
    unsigned int v59 = (v58 | HIWORD(v58)) + 1;
    if ((*(_DWORD *)(v55 + 20) & 0x7FFFFFFFu) < v59) {
      physx::shdfnd::Array<physx::Dy::ThresholdStreamElement,physx::shdfnd::VirtualAllocator>::recreate(v55, v59);
    }
    *((_DWORD *)this + 198) = 1 - *((_DWORD *)this + 198);
    return (*(uint64_t (**)(uint64_t))(*(void *)v27 + 40))(v27);
  }
  else
  {
    *((void *)v26 + 75) = 0;
    *((_DWORD *)this + 177) = 0;
    return physx::Dy::DynamicsTGSContext::resetThreadContexts(this);
  }
}

uint64_t physx::shdfnd::Array<physx::PxTGSSolverBodyVel,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxTGSSolverBodyVel>>>::resize(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2) {
    uint64_t result = physx::shdfnd::Array<physx::PxTGSSolverBodyVel,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxTGSSolverBodyVel>>>::recreate((unint64_t *)result, a2);
  }
  uint64_t v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    unint64_t v7 = *(void *)v5 + ((unint64_t)a2 << 6);
    unint64_t v8 = *(void *)v5 + (v6 << 6);
    do
    {
      *(void *)unint64_t v8 = *(void *)a3;
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(v8 + 12) = *(_DWORD *)(a3 + 12);
      *(void *)(v8 + 16) = *(void *)(a3 + 16);
      *(_DWORD *)(v8 + 24) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(v8 + 28) = *(_DWORD *)(a3 + 28);
      *(_OWORD *)(v8 + 32) = *(_OWORD *)(a3 + 32);
      *(void *)(v8 + 48) = *(void *)(a3 + 48);
      *(_DWORD *)(v8 + 56) = *(_DWORD *)(a3 + 56);
      *(_DWORD *)(v8 + 60) = *(_DWORD *)(a3 + 60);
      v8 += 64;
    }
    while (v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxTGSSolverBodyTxInertia,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxTGSSolverBodyTxInertia>>>::resize(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2) {
    uint64_t result = physx::shdfnd::Array<physx::PxTGSSolverBodyTxInertia,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxTGSSolverBodyTxInertia>>>::recreate((unint64_t *)result, a2);
  }
  uint64_t v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    unint64_t v7 = *(void *)v5 + ((unint64_t)a2 << 6);
    unint64_t v8 = *(void *)v5 + (v6 << 6);
    do
    {
      *(_OWORD *)unint64_t v8 = *(_OWORD *)a3;
      *(void *)(v8 + 16) = *(void *)(a3 + 16);
      *(void *)(v8 + 24) = *(void *)(a3 + 24);
      *(void *)(v8 + 32) = *(void *)(a3 + 32);
      *(void *)(v8 + 40) = *(void *)(a3 + 40);
      *(void *)(v8 + 48) = *(void *)(a3 + 48);
      *(void *)(v8 + 56) = *(void *)(a3 + 56);
      v8 += 64;
    }
    while (v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxTGSSolverBodyData,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxTGSSolverBodyData>>>::resize(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = a2;
  uint64_t v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2) {
    uint64_t result = physx::shdfnd::Array<physx::PxTGSSolverBodyData,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxTGSSolverBodyData>>>::recreate((unint64_t *)result, a2);
  }
  unsigned int v6 = *(_DWORD *)(v5 + 8);
  if (v6 < v4)
  {
    unint64_t v7 = *(void *)v5 + 48 * v4;
    unint64_t v8 = *(void *)v5 + 48 * v6;
    do
    {
      *(_OWORD *)unint64_t v8 = *(_OWORD *)a3;
      *(void *)(v8 + 16) = *(void *)(a3 + 16);
      *(_DWORD *)(v8 + 24) = *(_DWORD *)(a3 + 24);
      long long v9 = *(_OWORD *)(a3 + 28);
      *(_DWORD *)(v8 + 44) = *(_DWORD *)(a3 + 44);
      *(_OWORD *)(v8 + 28) = v9;
      v8 += 48;
    }
    while (v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = v4;
  return result;
}

void physx::Dy::DynamicsTGSContext::preIntegrateBodies(float32x2_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6, unsigned int a7, float32x2_t *a8, float a9, unsigned int *a10, unsigned int *a11)
{
  if (a7)
  {
    unsigned int v15 = 0;
    unsigned int v16 = 0;
    uint64_t v17 = a5 + 48;
    uint64_t v18 = a4 + 64;
    uint64_t v19 = a3 + 64;
    uint64_t v20 = a7;
    float v38 = a9;
    do
    {
      int v21 = *a1;
      if ((*a1)[3].i16[3] > v15) {
        unsigned int v15 = (*a1)[3].i16[3];
      }
      if (HIBYTE((*a1)[3].u16[3]) > v16) {
        unsigned int v16 = HIBYTE((*a1)[3].u16[3]);
      }
      float32x2_t v22 = v21[8];
      float v23 = v21[9].f32[0];
      if (!v21[19].i8[5])
      {
        float v24 = *(float *)(*(void *)a2 + 76);
        float32x2_t v22 = vadd_f32(v22, vmul_n_f32(vmul_n_f32(*a8, a9), v24));
        float v23 = v23 + (float)(v24 * (float)(a8[1].f32[0] * a9));
      }
      float v25 = v21[12].f32[1];
      float v26 = 1.0 - (float)(v21[13].f32[0] * a9);
      float v27 = 1.0 - (float)(v21[13].f32[1] * a9);
      if (v26 < 0.0) {
        float v26 = 0.0;
      }
      if (v27 < 0.0) {
        float v27 = 0.0;
      }
      float32x2_t v28 = vmul_n_f32(v22, v26);
      float v29 = v26 * v23;
      float v30 = vmlas_n_f32(COERCE_FLOAT(vmul_f32(v28, v28).i32[1]), v28.f32[0], v28.f32[0]) + (float)(v29 * v29);
      if (v30 > v25)
      {
        float v31 = sqrtf(v25 / v30);
        float32x2_t v28 = vmul_n_f32(v28, v31);
        float v29 = v29 * v31;
      }
      float v32 = v21[12].f32[0];
      float32x2_t v33 = vmul_n_f32(v21[10], v27);
      float v34 = v27 * v21[11].f32[0];
      float v35 = vmlas_n_f32(COERCE_FLOAT(vmul_f32(v33, v33).i32[1]), v33.f32[0], v33.f32[0]) + (float)(v34 * v34);
      if (v35 > v32)
      {
        float v36 = sqrtf(v32 / v35);
        float32x2_t v33 = vmul_n_f32(v33, v36);
        float v34 = v34 * v36;
      }
      v21[8] = v28;
      v21[9].f32[0] = v29;
      v21[10] = v33;
      v21[11].f32[0] = v34;
      int v37 = *a6++;
      physx::Dy::copyToSolverBodyDataStep((float *)&v21[8], (float *)&v21[10], (float *)&v21[14], (uint64_t)v21, v37, v21[19].u8[6], 0, v19, v21[15].f32[1], v21[9].f32[1], v21[16].f32[0], v21[11].f32[1], v32, v18, v17);
      v17 += 48;
      v18 += 64;
      v19 += 64;
      a2 += 8;
      ++a1;
      --v20;
      a9 = v38;
    }
    while (v20);
  }
  else
  {
    unsigned int v16 = 0;
    unsigned int v15 = 0;
  }
  *a10 = v15;
  *a11 = v16;
}

uint64_t physx::Dy::createFinalizeSolverContactsStep(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, float a5, double a6, double a7, float a8, float a9)
{
  *(_DWORD *)(a3 + 4112) = 0;
  if (*(_DWORD *)(a1 + 128) == 8 || (__int32 v10 = 0, !*(unsigned char *)(*(void *)(a1 + 24) + 62))) {
    __int32 v10 = *(_DWORD *)(a1 + 4);
  }
  *(_DWORD *)(a1 + 4) = v10;
  if (*(_DWORD *)(a1 + 132) == 8 || (float v11 = 0.0, !*(unsigned char *)(*(void *)(a1 + 32) + 62))) {
    float v11 = *(float *)(a1 + 12);
  }
  uint64_t v12 = a3 + 16;
  *(float *)(a1 + 12) = v11;
  uint64_t v13 = *a2;
  __asm { FMOV            V7.4S, #1.0 }
  if (!*a2)
  {
    LOBYTE(v23) = 0;
LABEL_44:
    unsigned int v24 = 0;
    goto LABEL_45;
  }
  char v19 = *(unsigned char *)(v13 + 43);
  if ((v19 & 2) != 0) {
    uint64_t v20 = 64;
  }
  else {
    uint64_t v20 = 16;
  }
  if ((*(unsigned char *)(v13 + 43) & 4) != 0)
  {
    LOBYTE(v23) = 0;
    LOBYTE(v13) = 0;
    goto LABEL_44;
  }
  int v21 = *((unsigned __int8 *)a2 + 25);
  int v22 = v19;
  _Q7 = *(float32x4_t *)v13;
  unsigned int v23 = (v19 >> 5) & 1;
  unsigned int v24 = 0;
  if (*((unsigned char *)a2 + 25))
  {
    int v25 = 0;
    unsigned int v26 = 0;
    int v27 = 0;
    float v28 = *(float *)(a1 + 208);
    _X15 = a2[1];
    if ((v22 & 2) != 0) {
      char v30 = 6;
    }
    else {
      char v30 = 4;
    }
    if (v22 < 0)
    {
      uint64_t v20 = 32;
      char v30 = 5;
    }
    unsigned int v31 = v22 & 0xFFFFFF82;
    while (1)
    {
      if (v25)
      {
        unsigned int v32 = *(unsigned __int8 *)(v13 + 41);
        _CF = v32 >= v26;
        unsigned int v34 = v32 - v26;
        BOOL v33 = v34 != 0 && _CF;
        LODWORD(v35) = v34 << v30;
        if (v33) {
          uint64_t v35 = v35;
        }
        else {
          uint64_t v35 = 0;
        }
        _X15 += v35;
        v13 += 48;
      }
      unsigned int v26 = *(unsigned __int8 *)(v13 + 41);
      if (*(unsigned char *)(v13 + 41)) {
        break;
      }
LABEL_40:
      if (++v25 == v21) {
        goto LABEL_41;
      }
    }
    int v36 = *(unsigned __int8 *)(v13 + 41);
    while (1)
    {
      if (v27) {
        uint64_t v37 = v20;
      }
      else {
        uint64_t v37 = 0;
      }
      _X15 += v37;
      __asm { PRFM            #0, [X15,#0x80] }
      _X7 = (_OWORD *)(v12 + ((unint64_t)v24 << 6));
      __asm { PRFM            #0, [X7,#0x80] }
      float v41 = v28;
      if (v23)
      {
        if (!v31)
        {
          float v41 = 3.4028e38;
LABEL_35:
          *(void *)&long long v42 = *(void *)(v13 + 16);
          uint64_t v43 = v12 + ((unint64_t)v24 << 6);
          DWORD2(v42) = *(_DWORD *)(v13 + 24);
          HIDWORD(v42) = *(_DWORD *)(_X15 + 12);
          *_X7 = v42;
          *(void *)(v43 + 16) = *(void *)_X15;
          LODWORD(v42) = *(_DWORD *)(_X15 + 8);
          *(unsigned char *)(v43 + 48) = *(unsigned char *)(v13 + 42);
          *(_DWORD *)(v43 + 24) = v42;
          *(float *)(v43 + 28) = v41;
          *(_DWORD *)(v43 + 44) = *(_DWORD *)(v13 + 36);
          *(int32x2_t *)(v43 + 56) = vrev64_s32(*(int32x2_t *)(v13 + 28));
          if (v31)
          {
            uint64_t v44 = *(void *)(_X15 + 16);
            int v45 = *(_DWORD *)(_X15 + 24);
          }
          else
          {
            uint64_t v44 = 0;
            int v45 = 0;
          }
          *(void *)(v43 + 32) = v44;
          *(_DWORD *)(v43 + 40) = v45;
          ++v24;
          goto LABEL_39;
        }
        float v41 = *(float *)(_X15 + 28);
      }
      if (v41 != 0.0) {
        goto LABEL_35;
      }
LABEL_39:
      int v27 = 1;
      if (!--v36) {
        goto LABEL_40;
      }
    }
  }
LABEL_41:
  LODWORD(v13) = (v22 >> 4) & 1;
LABEL_45:
  *(_DWORD *)(a3 + 4112) = v24;
  *(void *)(a1 + 144) = v12;
  *(_DWORD *)(a1 + 152) = v24;
  if (*(unsigned char *)(a1 + 157)) {
    char v46 = 1;
  }
  else {
    char v46 = v13;
  }
  *(unsigned char *)(a1 + 157) = v46;
  *(unsigned char *)(a1 + 156) = v23;
  v47.i32[0] = *(_DWORD *)a1;
  v47.i32[1] = v10;
  v47.i32[2] = *(_DWORD *)(a1 + 8);
  v47.f32[3] = v11;
  float32x4_t v48 = vmulq_f32(_Q7, v47);
  *(float32x4_t *)a1 = v48;
  return physx::Dy::createFinalizeSolverContactsStep(a1, a3 + 4128, a4, a5, a6, a7, a8, a9, v48.f32[0], v11, _Q7.f32[0]);
}

unint64_t physx::Dy::SetupSolverConstraintStep(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, void), float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  *(_WORD *)(*(void *)(a2 + 16) + 30) = 0;
  unint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8);
  if (!v8) {
    return 0;
  }
  bzero(v30, 0x3C0uLL);
  for (uint64_t i = 0; i != 960; i += 80)
  {
    uint64_t v18 = &v30[i];
    *((_DWORD *)v18 + 11) = -8388609;
    *((_DWORD *)v18 + 15) = 2139095039;
  }
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)a2 = _Q0;
  int v29 = 0;
  uint64_t v24 = *(void *)(a1 + 16);
  uint64_t v25 = *(unsigned __int8 *)(a2 + 171);
  uint64_t v28 = 0;
  int v26 = v8(v30, &v28, 12, a2, v24, a2 + 72, a2 + 100, v25, a2 + 184, a2 + 196);
  *(void *)(a2 + 136) = v30;
  *(_DWORD *)(a2 + 144) = v26;
  *(void *)(a2 + 172) = v28;
  *(_DWORD *)(a2 + 180) = v29;
  if (*(_DWORD *)(a2 + 128) != 8 && *(unsigned char *)(*(void *)(a2 + 24) + 62)) {
    *(_DWORD *)(a2 + 4) = 0;
  }
  if (*(_DWORD *)(a2 + 132) != 8)
  {
    if (*(unsigned char *)(*(void *)(a2 + 32) + 62)) {
      *(_DWORD *)(a2 + 12) = 0;
    }
  }
  return physx::Dy::setupSolverConstraintStep(a2, a3, a4, a5, a6, a7, a8);
}

unsigned int *physx::Dy::solveContactBlock(unsigned int *result, uint64_t a2, int32x2_t a3, int32x2_t a4)
{
  int v4 = *((unsigned __int16 *)result + 2);
  if (*result < *result + v4)
  {
    __int32 v5 = a4.i32[0];
    __int32 v6 = a3.i32[0];
    uint64_t v7 = a2 + 48 * *result;
    do
    {
      a3.i32[0] = v6;
      a4.i32[0] = v5;
      uint64_t result = (unsigned int *)physx::Dy::solveContact(v7, a3, a4);
      v7 += 48;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t **physx::Dy::solve1DBlock(uint64_t **result, uint64_t a2, uint64_t a3, int32x2_t a4, double a5, double a6, double a7, double a8, float32x4_t a9)
{
  int v9 = *((unsigned __int16 *)result + 2);
  if (*(_DWORD *)result < (*(_DWORD *)result + v9))
  {
    __int32 v10 = LODWORD(a5);
    uint64_t v12 = (uint64_t **)(a2 + 48 * *(unsigned int *)result);
    do
    {
      a4.i32[0] = v10;
      uint64_t result = physx::Dy::solve1DStep(v12, a3, a4, a5, a6, a7, a8, a9);
      v12 += 6;
      --v9;
    }
    while (v9);
  }
  return result;
}

_DWORD *physx::Dy::solveExtContactBlock(_DWORD *result, uint64_t a2, float a3, float32_t a4, uint64_t a5, uint64_t a6)
{
  int v6 = *((unsigned __int16 *)result + 2);
  if (*result < (*result + v6))
  {
    __int32 v10 = (char *)(a2 + 48 * *result);
    do
    {
      uint64_t result = physx::Dy::solveExtContactStep(v10, a6, a3, a4);
      v10 += 48;
      --v6;
    }
    while (v6);
  }
  return result;
}

_DWORD *physx::Dy::solveExt1DBlock(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, double a5, float a6)
{
  int v6 = *((unsigned __int16 *)result + 2);
  if (*result < (*result + v6))
  {
    uint64_t v10 = a2 + 48 * *result;
    do
    {
      uint64_t result = physx::Dy::solveExt1DStep(v10, a4, a3, a6);
      v10 += 48;
      --v6;
    }
    while (v6);
  }
  return result;
}

unsigned int *physx::Dy::writeBackContact(unsigned int *result, uint64_t a2)
{
  int v2 = *((unsigned __int16 *)result + 2);
  if (*result < *result + v2)
  {
    uint64_t v3 = a2 + 48 * *result;
    do
    {
      uint64_t result = (unsigned int *)physx::Dy::writeBackContact(v3);
      v3 += 48;
      --v2;
    }
    while (v2);
  }
  return result;
}

unsigned int *physx::Dy::writeBack1D(unsigned int *result, uint64_t a2)
{
  int v2 = *((unsigned __int16 *)result + 2);
  if (*result < *result + v2)
  {
    uint64_t v3 = a2 + 48 * *result;
    do
    {
      uint64_t result = (unsigned int *)physx::Dy::writeBack1D(v3);
      v3 += 48;
      --v2;
    }
    while (v2);
  }
  return result;
}

unsigned int *physx::Dy::solveConcludeContactBlock(unsigned int *result, uint64_t a2, int32x2_t a3, int32x2_t a4)
{
  int v4 = *((unsigned __int16 *)result + 2);
  if (*result < *result + v4)
  {
    __int32 v5 = a3.i32[0];
    uint64_t v6 = a2 + 48 * *result;
    do
    {
      a3.i32[0] = -8388609;
      a4.i32[0] = v5;
      uint64_t result = (unsigned int *)physx::Dy::solveContact(v6, a3, a4);
      v6 += 48;
      --v4;
    }
    while (v4);
  }
  return result;
}

unsigned char *physx::Dy::solveConclude1DBlock(unsigned char *result, uint64_t a2, uint64_t a3, int32x2_t a4, double a5, double a6, double a7, double a8, float32x4_t a9)
{
  int v9 = *((unsigned __int16 *)result + 2);
  if (*(_DWORD *)result < (*(_DWORD *)result + v9))
  {
    __int32 v10 = a4.i32[0];
    uint64_t v12 = a2 + 48 * *(unsigned int *)result;
    do
    {
      a4.i32[0] = v10;
      physx::Dy::solve1DStep((uint64_t **)v12, a3, a4, a5, a6, a7, a8, a9);
      uint64_t result = physx::Dy::conclude1DStep(*(unsigned char **)(v12 + 32));
      v12 += 48;
      --v9;
    }
    while (v9);
  }
  return result;
}

_DWORD *physx::Dy::solveConcludeContactExtBlock(_DWORD *result, uint64_t a2, float32_t a3, uint64_t a4, uint64_t a5)
{
  int v5 = *((unsigned __int16 *)result + 2);
  if (*result < (*result + v5))
  {
    unint64_t v8 = (char *)(a2 + 48 * *result);
    do
    {
      uint64_t result = physx::Dy::solveExtContactStep(v8, a5, -3.4028e38, a3);
      v8 += 48;
      --v5;
    }
    while (v5);
  }
  return result;
}

unsigned char *physx::Dy::solveConclude1DBlockExt(unsigned char *result, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  int v5 = *((unsigned __int16 *)result + 2);
  if (*(_DWORD *)result < (*(_DWORD *)result + v5))
  {
    uint64_t v9 = a2 + 48 * *(unsigned int *)result;
    do
    {
      physx::Dy::solveExt1DStep(v9, a4, a3, a5);
      uint64_t result = physx::Dy::conclude1DStep(*(unsigned char **)(v9 + 32));
      v9 += 48;
      --v5;
    }
    while (v5);
  }
  return result;
}

float32_t physx::Dy::integrateCoreStep(float32x2_t *a1, uint64_t a2, float a3, double a4, __n128 a5)
{
  float v5 = a3;
  __int16 v8 = a1[7].i16[2];
  if (!v8) {
    goto LABEL_9;
  }
  if (v8)
  {
    a1->i32[0] = 0;
    if ((v8 & 2) == 0)
    {
LABEL_4:
      if ((v8 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_14;
    }
  }
  else if ((v8 & 2) == 0)
  {
    goto LABEL_4;
  }
  a1->i32[1] = 0;
  if ((v8 & 4) == 0)
  {
LABEL_5:
    if ((v8 & 8) == 0) {
      goto LABEL_6;
    }
LABEL_15:
    a1[2].i32[0] = 0;
    if ((v8 & 0x10) == 0)
    {
LABEL_7:
      if ((v8 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    goto LABEL_16;
  }
LABEL_14:
  a1[1].i32[0] = 0;
  if ((v8 & 8) != 0) {
    goto LABEL_15;
  }
LABEL_6:
  if ((v8 & 0x10) == 0) {
    goto LABEL_7;
  }
LABEL_16:
  a1[2].i32[1] = 0;
  if ((v8 & 0x20) != 0) {
LABEL_8:
  }
    a1[3].i32[0] = 0;
LABEL_9:
  float32x2_t v9 = vmul_n_f32(*a1, a3);
  float v10 = a1[1].f32[0] * a3;
  float32x2_t v11 = a1[2];
  float v12 = a1[3].f32[0];
  a5.n128_u64[0] = (unint64_t)vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(a2 + 28), v11.f32[0]), vmul_lane_f32(*(float32x2_t *)(a2 + 40), v11, 1)), vmul_n_f32(*(float32x2_t *)(a2 + 52), v12));
  float v13 = (float)((float)(*(float *)(a2 + 36) * v11.f32[0]) + vmuls_lane_f32(*(float *)(a2 + 48), v11, 1))
      + (float)(v12 * *(float *)(a2 + 60));
  float v14 = vmlas_n_f32(COERCE_FLOAT(vmul_f32(*(float32x2_t *)&a5, *(float32x2_t *)&a5).i32[1]), a5.n128_f32[0], a5.n128_f32[0])+ (float)(v13 * v13);
  *(float32x2_t *)(a2 + 16) = vadd_f32(v9, *(float32x2_t *)(a2 + 16));
  *(float *)(a2 + 24) = v10 + *(float *)(a2 + 24);
  if (v14 != 0.0)
  {
    float v15 = sqrtf(v14);
    float32x2_t v34 = v11;
    float v35 = v5;
    __n128 v32 = a5;
    float v33 = v12;
    __float2 v16 = __sincosf_stret((float)(v15 * v5) * 0.5);
    v17.i32[3] = v32.n128_i32[3];
    *(float32x2_t *)v17.i8 = vmul_n_f32((float32x2_t)v32.n128_u64[0], v16.__sinval / v15);
    int8x16_t v18 = *(int8x16_t *)a2;
    *(float *)&v17.i32[2] = v13 * (float)(v16.__sinval / v15);
    float32x4_t v19 = (float32x4_t)vextq_s8(vextq_s8(v17, v17, 0xCuLL), v17, 8uLL);
    *(float *)&v17.i32[3] = -*(float *)v17.i32;
    float32x4_t v20 = (float32x4_t)vzip1q_s32((int32x4_t)v18, (int32x4_t)v18);
    v20.i32[0] = *(void *)(a2 + 8);
    int32x4_t v21 = vzip2q_s32((int32x4_t)v19, *(int32x4_t *)a2);
    v18.i32[3] = v19.i32[1];
    int32x4_t v22 = vrev64q_s32((int32x4_t)v19);
    v19.f32[3] = -*(float *)&v17.i32[1];
    _Q2 = vmlaq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vdupq_laneq_s32(*(int32x4_t *)a2, 3), *(int8x16_t *)a2, 4uLL), (float32x4_t)v17), (float32x4_t)0, *(float32x4_t *)a2), v20, v19);
    float v12 = v33;
    float32x4_t v24 = (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v18, (int32x4_t)vextq_s8(v18, v18, 0xCuLL)), (int32x4_t)v18);
    float32x2_t v11 = v34;
    float v5 = v35;
    _Q0 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)a2, v16.__cosval), vmlsq_f32(_Q2, (float32x4_t)vzip1q_s32(v22, v21), v24));
    _Q1 = vmulq_f32(_Q0, _Q0);
    _Q2.i32[0] = _Q0.i32[2];
    __asm { FMLA            S1, S2, V0.S[2] }
    _Q2.i32[0] = _Q0.i32[3];
    __asm { FMLA            S1, S2, V0.S[3] }
    _Q1.f32[0] = sqrtf(_Q1.f32[0]);
    *(float32x4_t *)a2 = vdivq_f32(_Q0, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0));
  }
  a1[4] = vadd_f32(vmul_n_f32(v11, v5), a1[4]);
  a1[5].f32[0] = (float)(v12 * v5) + a1[5].f32[0];
  a1[6] = vadd_f32(v9, a1[6]);
  float32_t result = v10 + a1[7].f32[0];
  a1[7].f32[0] = result;
  return result;
}

uint64_t physx::Dy::DynamicsTGSContext::stepArticulations(uint64_t result, uint64_t a2, float a3)
{
  int v3 = *(_DWORD *)(a2 + 4);
  if ((v3 & 0x7FFFFFFF) != 0)
  {
    uint64_t v6 = result;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      float32_t result = *(void *)(v6 + 12288) + v7;
      float32x2_t v9 = (uint64_t (*)(float))physx::Dy::ArticulationPImpl::sUpdateDeltaMotion[*(unsigned int *)(*(void *)result + 40)];
      if (v9)
      {
        float32_t result = v9(a3);
        int v3 = *(_DWORD *)(a2 + 4);
      }
      ++v8;
      v7 += 96;
    }
    while (v8 < (v3 & 0x7FFFFFFFu));
  }
  return result;
}

void physx::Dy::DynamicsTGSContext::iterativeSolveIsland(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, unsigned int a5, int a6, uint64_t a7, float a8, double a9, __n128 a10)
{
  uint64_t v14 = a1;
  uint64_t v67 = *(unsigned int *)(a2 + 112);
  if (*(_DWORD *)(a4 + 12048))
  {
    float v16 = 0.0;
    if (a5 >= 2)
    {
      uint64_t v68 = (v67 << 6) + 64;
      for (int i = 1; i != a5; ++i)
      {
        if ((a3[1] & 0x7FFFFFFF) != 0)
        {
          uint64_t v18 = 0;
          unint64_t v19 = 0;
          do
          {
            (*(void (**)(void, void, void, void, uint64_t, float, float, float))(**(void **)(*(void *)(a4 + 12288) + v18)
                                                                                                 + 272))(*(void *)(*(void *)(a4 + 12288) + v18), *(void *)(a4 + 12160), *(void *)(a4 + 12176), 0, 1, a8, 1.0 / a8, v16);
            ++v19;
            v18 += 96;
          }
          while (v19 < (a3[1] & 0x7FFFFFFF));
        }
        uint64_t v20 = *(unsigned int *)(a4 + 12048);
        uint64_t v21 = *(void *)(v14 + 592);
        if (v20)
        {
          uint64_t v22 = *(void *)(a2 + 72);
          uint64_t v23 = *(void *)(a2 + 88);
          do
          {
            physx::Dy::g_SolveTGSMethods[*(unsigned __int16 *)(v23 + 6)](v23, v22, v21, a7, -3.4028e38, v16);
            v23 += 8;
            --v20;
          }
          while (v20);
          uint64_t v14 = a1;
          uint64_t v21 = *(void *)(a1 + 592);
        }
        uint64_t v24 = *a3;
        if (v24)
        {
          uint64_t v25 = v21 + v68;
          int v26 = (float32x2_t *)(*(void *)(v14 + 576) + v68);
          do
          {
            physx::Dy::integrateCoreStep(v26, v25, a8, a9, a10);
            v25 += 64;
            v26 += 8;
            --v24;
          }
          while (v24);
        }
        physx::Dy::DynamicsTGSContext::stepArticulations(a4, (uint64_t)a3, a8);
        float v16 = v16 + a8;
      }
    }
    if ((a3[1] & 0x7FFFFFFF) != 0)
    {
      uint64_t v27 = 0;
      unint64_t v28 = 0;
      do
      {
        (*(void (**)(void, void, void, void, uint64_t, float, float, float))(**(void **)(*(void *)(a4 + 12288) + v27)
                                                                                             + 272))(*(void *)(*(void *)(a4 + 12288) + v27), *(void *)(a4 + 12160), *(void *)(a4 + 12176), 0, 1, a8, 1.0 / a8, v16);
        ++v28;
        v27 += 96;
      }
      while (v28 < (a3[1] & 0x7FFFFFFF));
    }
    uint64_t v29 = *(unsigned int *)(a4 + 12048);
    uint64_t v30 = *(void *)(v14 + 592);
    if (v29)
    {
      uint64_t v31 = *(void *)(a2 + 72);
      uint64_t v32 = *(void *)(a2 + 88);
      do
      {
        physx::Dy::g_SolveConcludeTGSMethods[*(unsigned __int16 *)(v32 + 6)](v32, v31, v30, a7, v16);
        v32 += 8;
        --v29;
      }
      while (v29);
      uint64_t v30 = *(void *)(v14 + 592);
    }
    float v33 = *(float *)(v14 + 92);
    uint64_t v34 = *a3;
    if (v34)
    {
      uint64_t v35 = (v67 << 6) + 64;
      uint64_t v36 = v30 + v35;
      uint64_t v37 = (float32x2_t *)(*(void *)(v14 + 576) + v35);
      do
      {
        physx::Dy::integrateCoreStep(v37, v36, a8, a9, a10);
        v36 += 64;
        v37 += 8;
        --v34;
      }
      while (v34);
    }
    physx::Dy::DynamicsTGSContext::stepArticulations(a4, (uint64_t)a3, a8);
    unsigned int v38 = a3[1];
    if ((v38 & 0x7FFFFFFF) != 0)
    {
      uint64_t v39 = 0;
      unint64_t v40 = 0;
      do
      {
        float v41 = (void (*)(float))physx::Dy::ArticulationPImpl::sSaveVelocityTGS[*(unsigned int *)(*(void *)(*(void *)(a4 + 12288) + v39) + 40)];
        if (v41)
        {
          v41(v33);
          unsigned int v38 = a3[1];
        }
        ++v40;
        v39 += 96;
      }
      while (v40 < (v38 & 0x7FFFFFFF));
    }
    if (a6)
    {
      int v42 = 0;
      float v43 = v16 + a8;
      do
      {
        if ((a3[1] & 0x7FFFFFFF) != 0)
        {
          uint64_t v44 = 0;
          unint64_t v45 = 0;
          do
          {
            (*(void (**)(void, void, void, void, uint64_t, float, float, float))(**(void **)(*(void *)(a4 + 12288) + v44)
                                                                                                 + 272))(*(void *)(*(void *)(a4 + 12288) + v44), *(void *)(a4 + 12160), *(void *)(a4 + 12176), 0, 1, a8, 1.0 / a8, v43);
            ++v45;
            v44 += 96;
          }
          while (v45 < (a3[1] & 0x7FFFFFFF));
        }
        uint64_t v46 = *(unsigned int *)(a4 + 12048);
        if (v46)
        {
          uint64_t v47 = *(void *)(a2 + 72);
          uint64_t v48 = *(void *)(a2 + 88);
          uint64_t v49 = *(void *)(v14 + 592);
          do
          {
            physx::Dy::g_SolveTGSMethods[*(unsigned __int16 *)(v48 + 6)](v48, v47, v49, a7, 0.0, v43);
            v48 += 8;
            --v46;
          }
          while (v46);
        }
        ++v42;
      }
      while (v42 != a6);
    }
    uint64_t v50 = *(unsigned int *)(a4 + 12048);
    if (v50)
    {
      uint64_t v51 = *(void *)(a2 + 88);
      uint64_t v52 = *(void *)(a2 + 72);
      do
      {
        physx::Dy::g_WritebackTGSMethods[*(unsigned __int16 *)(v51 + 6)](v51, v52, 0);
        v51 += 8;
        --v50;
      }
      while (v50);
    }
    if ((a3[1] & 0x7FFFFFFF) != 0)
    {
      uint64_t v53 = 0;
      unint64_t v54 = 0;
      do
      {
        (*(void (**)(void, uint64_t))(**(void **)(*(void *)(a4 + 12288) + v53) + 280))(*(void *)(*(void *)(a4 + 12288) + v53), 1);
        ++v54;
        v53 += 96;
      }
      while (v54 < (a3[1] & 0x7FFFFFFF));
    }
  }
  else
  {
    if ((a3[1] & 0x7FFFFFFF) != 0)
    {
      unint64_t v55 = 0;
      do
      {
        unsigned int v56 = (void *)(*(void *)(a4 + 12288) + 96 * v55);
        float v57 = 0.0;
        if (a5)
        {
          unsigned int v58 = a5;
          do
          {
            (*(void (**)(void, void, void, void, uint64_t, float, float, float))(*(void *)*v56
                                                                                                 + 272))(*v56, *(void *)(a4 + 12160), *(void *)(a4 + 12176), 0, 1, a8, 1.0 / a8, v57);
            unsigned int v59 = (void (*)(void *, void, float))physx::Dy::ArticulationPImpl::sUpdateDeltaMotion[*(unsigned int *)(*v56 + 40)];
            if (v59) {
              v59(v56, *(void *)(a4 + 12176), a8);
            }
            float v57 = v57 + a8;
            --v58;
          }
          while (v58);
        }
        float v60 = (void (*)(void *, float))physx::Dy::ArticulationPImpl::sSaveVelocityTGS[*(unsigned int *)(*v56 + 40)];
        if (v60) {
          v60(v56, *(float *)(v14 + 92));
        }
        for (int j = a6; j; --j)
          (*(void (**)(void, void, void, uint64_t, uint64_t, float, float, float))(*(void *)*v56 + 272))(*v56, *(void *)(a4 + 12160), *(void *)(a4 + 12176), 1, 1, a8, 1.0 / a8, v57);
        (*(void (**)(void, uint64_t))(*(void *)*v56 + 280))(*v56, 1);
        ++v55;
      }
      while (v55 < (a3[1] & 0x7FFFFFFF));
    }
    uint64_t v62 = *a3;
    if (v62)
    {
      float v63 = *(float *)(v14 + 88);
      uint64_t v64 = (v67 << 6) + 64;
      uint64_t v65 = *(void *)(v14 + 592) + v64;
      long long v66 = (float32x2_t *)(*(void *)(v14 + 576) + v64);
      do
      {
        physx::Dy::integrateCoreStep(v66, v65, v63, a9, a10);
        v65 += 64;
        v66 += 8;
        --v62;
      }
      while (v62);
    }
  }
}

float32x2_t *physx::Dy::createImpulseResponseVector(float32x2_t *result, float32x2_t *a2, float *a3, uint64_t a4, __int16 a5)
{
  if (a5 == -1)
  {
    float v7 = a3[1];
    float v8 = a3[2];
    float v9 = v8 * *(float *)(a4 + 60);
    float32x2_t v5 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(a4 + 28), *a3), vmul_n_f32(*(float32x2_t *)(a4 + 40), v7)), vmul_n_f32(*(float32x2_t *)(a4 + 52), v8));
    float v6 = (float)((float)(*a3 * *(float *)(a4 + 36)) + (float)(v7 * *(float *)(a4 + 48))) + v9;
  }
  else
  {
    float32x2_t v5 = *(float32x2_t *)a3;
    float v6 = a3[2];
  }
  __int32 v10 = a2[1].i32[0];
  *float32_t result = *a2;
  result[1].i32[0] = v10;
  result[1].i32[1] = 0;
  result[2] = v5;
  result[3].f32[0] = v6;
  result[3].i32[1] = 0;
  return result;
}

float physx::Dy::getImpulseResponse(uint64_t *a1, float32x2_t *a2, float32x2_t *a3, uint64_t *a4, float32x2_t *a5, float32x2_t *a6, float a7, float a8, float a9, float a10)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v15 = *((unsigned __int16 *)a1 + 12);
  if (v15 == 0xFFFF)
  {
    float v25 = *(float *)(a1[2] + 32);
    float v21 = (float)(v25 * a2[1].f32[0]) * a7;
    float32x2_t v20 = vmul_n_f32(vmul_n_f32(*a2, v25), a7);
    *a3 = v20;
    a3[1].f32[0] = v21;
    float v22 = a2[2].f32[0] * a8;
    float v23 = a2[2].f32[1] * a8;
    float v24 = a2[3].f32[0] * a8;
    a3[2].f32[0] = v22;
    a3[2].f32[1] = v23;
    a3[3].f32[0] = v24;
    float v19 = v20.f32[1];
  }
  else
  {
    uint64_t v16 = *a1;
    float v17 = a2[1].f32[0] * a7;
    float v47 = a9;
    float v18 = a2[3].f32[0] * a8;
    float32x2_t v51 = vmul_n_f32(*a2, a7);
    float v52 = v17;
    int v53 = 0;
    float32x2_t v54 = vmul_n_f32(a2[2], a8);
    float v55 = v18;
    int v56 = 0;
    float v49 = a10;
    (*(void (**)(uint64_t, uint64_t, unsigned char *, float32x2_t *, float32x2_t *))(*(void *)v16 + 208))(v16, v15, v57, &v51, a3);
    a9 = v47;
    a10 = v49;
    v20.i32[0] = a3->i32[0];
    float v19 = a3->f32[1];
    float v21 = a3[1].f32[0];
    float v22 = a3[2].f32[0];
    float v23 = a3[2].f32[1];
    float v24 = a3[3].f32[0];
  }
  float v26 = a2->f32[0];
  float v27 = a2->f32[1];
  float v28 = a2[1].f32[0];
  float v30 = a2[2].f32[0];
  float v29 = a2[2].f32[1];
  float v31 = a2[3].f32[0];
  uint64_t v32 = *((unsigned __int16 *)a4 + 12);
  if (v32 == 0xFFFF)
  {
    float v43 = *(float *)(a4[2] + 32);
    float v39 = (float)(v43 * a5[1].f32[0]) * a9;
    float32x2_t v37 = vmul_n_f32(vmul_n_f32(*a5, v43), a9);
    *a6 = v37;
    a6[1].f32[0] = v39;
    float v40 = a5[2].f32[0] * a10;
    float v41 = a5[2].f32[1] * a10;
    float v42 = a5[3].f32[0] * a10;
    a6[2].f32[0] = v40;
    a6[2].f32[1] = v41;
    a6[3].f32[0] = v42;
    float v38 = v37.f32[1];
  }
  else
  {
    uint64_t v33 = *a4;
    float v34 = a5[1].f32[0] * a9;
    float v35 = a5[3].f32[0] * a10;
    float32x2_t v51 = vmul_n_f32(*a5, a9);
    float v52 = v34;
    int v53 = 0;
    float32x2_t v54 = vmul_n_f32(a5[2], a10);
    float v55 = v35;
    int v56 = 0;
    __int32 v50 = v20.i32[0];
    float v45 = v29;
    float v46 = v27;
    float v36 = v30;
    float v48 = v28;
    (*(void (**)(uint64_t, uint64_t, unsigned char *, float32x2_t *, float32x2_t *))(*(void *)v33 + 208))(v33, v32, v57, &v51, a6);
    float v27 = v46;
    float v28 = v48;
    float v30 = v36;
    float v29 = v45;
    v20.i32[0] = v50;
    v37.i32[0] = a6->i32[0];
    float v38 = a6->f32[1];
    float v39 = a6[1].f32[0];
    float v40 = a6[2].f32[0];
    float v41 = a6[2].f32[1];
    float v42 = a6[3].f32[0];
  }
  return (float)((float)((float)((float)(v19 * v27) + (float)(v26 * v20.f32[0])) + (float)(v28 * v21))
               + (float)((float)((float)(v23 * v29) + (float)(v30 * v22)) + (float)(v31 * v24)))
       + (float)((float)((float)((float)(v38 * a5->f32[1]) + (float)(a5->f32[0] * v37.f32[0]))
                       + (float)(a5[1].f32[0] * v39))
               + (float)((float)((float)(v41 * a5[2].f32[1]) + (float)(a5[2].f32[0] * v40)) + (float)(a5[3].f32[0] * v42)));
}

float32x2_t physx::Dy::getImpulseResponse(uint64_t *a1, float32x4_t *a2, float32x4_t *a3, float32x2_t *a4, uint64_t *a5, float32x4_t *a6, float32x4_t *a7, float32x2_t *a8, double a9, double a10, float32x2_t a11, void *a12)
{
  uint64_t v18 = *((unsigned __int16 *)a1 + 12);
  if (v18 == 0xFFFF)
  {
    a11.i32[0] = *(_DWORD *)(a1[2] + 32);
    float32x4_t v23 = vmulq_n_f32(*a2, vmul_f32(a11, *(float32x2_t *)&a9).f32[0]);
    v23.i32[3] = 0;
    *a3 = v23;
    float32x2_t v22 = *a4;
    float32x4_t v24 = vmulq_n_f32(a2[1], COERCE_FLOAT(*a4));
    v24.i32[3] = 0;
    a3[1] = v24;
  }
  else
  {
    uint64_t v19 = *a1;
    float32x4_t v20 = vmulq_n_f32(*a2, *(float *)&a9);
    v20.i32[3] = 0;
    float32x4_t v21 = vmulq_n_f32(a2[1], COERCE_FLOAT(*a4));
    v21.i32[3] = 0;
    float32x4_t v39 = v20;
    float32x4_t v40 = v21;
    (*(void (**)(uint64_t, uint64_t, void, float32x4_t *, float32x4_t *))(*(void *)v19 + 216))(v19, v18, 0, &v39, a3);
    float32x4_t v23 = *a3;
    float32x4_t v24 = a3[1];
  }
  float32x4_t v25 = *a2;
  float32x4_t v26 = a2[1];
  uint64_t v27 = *((unsigned __int16 *)a5 + 12);
  if (v27 == 0xFFFF)
  {
    v22.i32[0] = *(_DWORD *)(a5[2] + 32);
    float32x4_t v31 = vmulq_n_f32(*a6, vmul_f32(v22, *a8).f32[0]);
    v31.i32[3] = 0;
    *a7 = v31;
    float32x4_t v32 = vmulq_n_f32(a6[1], COERCE_FLOAT(*a12));
    v32.i32[3] = 0;
    a7[1] = v32;
  }
  else
  {
    uint64_t v28 = *a5;
    float32x4_t v29 = vmulq_n_f32(*a6, COERCE_FLOAT(*a8));
    v29.i32[3] = 0;
    float32x4_t v30 = vmulq_n_f32(a6[1], COERCE_FLOAT(*a12));
    v30.i32[3] = 0;
    float32x4_t v39 = v29;
    float32x4_t v40 = v30;
    float32x4_t v37 = v24;
    float32x4_t v38 = v23;
    float32x4_t v35 = v26;
    float32x4_t v36 = v25;
    (*(void (**)(uint64_t, uint64_t, void, float32x4_t *, float32x4_t *))(*(void *)v28 + 216))(v28, v27, 0, &v39, a7);
    float32x4_t v26 = v35;
    float32x4_t v25 = v36;
    float32x4_t v24 = v37;
    float32x4_t v23 = v38;
    float32x4_t v31 = *a7;
    float32x4_t v32 = a7[1];
  }
  float32x4_t v33 = vaddq_f32(vaddq_f32(vmulq_f32(v23, v25), vmulq_f32(v24, v26)), vaddq_f32(vmulq_f32(v31, *a6), vmulq_f32(v32, a6[1])));
  v33.i64[0] = vpaddq_f32(v33, v33).u64[0];
  return vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32);
}

float physx::Dy::SolverExtBodyStep::projectVelocity(uint64_t a1, float *a2, float *a3)
{
  if (*(unsigned __int16 *)(a1 + 24) == 0xFFFF)
  {
    float v9 = *(float **)(a1 + 16);
    return (float)((float)((float)(v9[1] * a2[1]) + (float)(*v9 * *a2)) + (float)(v9[2] * a2[2]))
         + (float)((float)((float)(v9[5] * a3[1]) + (float)(v9[4] * *a3)) + (float)(v9[6] * a3[2]));
  }
  else
  {
    (*(void (**)(float32x4_t *__return_ptr))(**(void **)a1 + 232))(v10);
    v5.i64[0] = *(void *)a2;
    v5.i64[1] = *((unsigned int *)a2 + 2);
    v6.i64[0] = *(void *)a3;
    v6.i64[1] = *((unsigned int *)a3 + 2);
    float32x4_t v7 = vaddq_f32(vmulq_f32(v5, v10[0]), vmulq_f32(v6, v10[1]));
    v7.i64[0] = vpaddq_f32(v7, v7).u64[0];
    LODWORD(result) = vpadd_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32).u32[0];
  }
  return result;
}

uint64_t physx::Dy::createFinalizeSolverContactsStep(uint64_t a1, uint64_t a2, uint64_t a3, float a4, double a5, double a6, float a7, float a8, float a9, float a10, float a11)
{
  _X8 = *(void *)(a1 + 24);
  __asm { PRFM            #0, [X8] }
  _X8 = *(void *)(a1 + 32);
  __asm { PRFM            #0, [X8] }
  _X26 = a2 + 7684;
  *(void *)(a2 + 7684) = 0;
  char v671 = *(unsigned char *)(a1 + 158);
  int v23 = *(_DWORD *)(a1 + 128);
  int v22 = *(_DWORD *)(a1 + 132);
  _ZF = v22 == 4 || v22 == 2;
  int v25 = _ZF;
  int v26 = *(unsigned __int8 *)(a1 + 157);
  uint64_t v27 = *(void *)(a1 + 16);
  *(_WORD *)(v27 + 30) = 0;
  unsigned int v28 = *(_DWORD *)(a1 + 152);
  if (!v28)
  {
    *(void *)(a1 + 168) = 0;
    *(unsigned char *)(a1 + 176) = 0;
    uint64_t result = 1;
    *(void *)(v27 + 32) = 0;
    return result;
  }
  int v773 = v25;
  if (!v26)
  {
    physx::Dy::getFrictionPatches(a2, *(float **)(a1 + 168), *(unsigned __int8 *)(a1 + 176), (float *)(a1 + 72), (float *)(a1 + 100), a8, a5, a6, a7, a8, a9, a10, a11);
    unsigned int v28 = *(_DWORD *)(a1 + 152);
  }
  char v31 = v23 | v22;
  physx::Dy::createContactPatches(a2, *(void *)(a1 + 144), v28, 0.999);
  uint64_t v32 = *(void *)(a1 + 144);
  uint64_t v33 = a1;
  float v34 = (float *)(a1 + 72);
  physx::Dy::correlatePatches(a2, v32, v34, (float *)(v33 + 100), 0, 0, 0.999);
  physx::Dy::growPatches(a2, *(void *)(v33 + 144), v34, (float *)(v33 + 100), 0, a8, *(float *)(v33 + 160) + a7);
  uint64_t v40 = *(unsigned int *)(a2 + 7688);
  uint64_t v711 = v33;
  if (!v40)
  {
    _X14 = 0;
    unsigned int v52 = 0;
    LOBYTE(v42) = 0;
    uint64_t v54 = 0;
LABEL_59:
    *(void *)(v33 + 168) = _X14;
    float v656 = (char *)v54;
    *(void *)(v27 + 32) = v54;
    *(unsigned char *)(v33 + 176) = v42;
    *(_WORD *)(v27 + 30) = v52 >> 4;
    uint64_t v63 = *(void *)(v33 + 184);
    *(void *)(v27 + 40) = v63;
    if (v63) {
      __int16 v64 = *(_WORD *)(v33 + 152);
    }
    else {
      __int16 v64 = 0;
    }
    *(_WORD *)(v27 + 28) = v64;
    if (_X14)
    {
      __asm
      {
        PRFM            #0, [X14]
        PRFM            #0, [X14,#0x80]
        PRFM            #0, [X14,#0x100]
      }
      unsigned int v68 = *(_DWORD *)(a2 + 7688);
      if (v68)
      {
        uint64_t v69 = 0;
        uint64_t v70 = 104 * v68;
        uint64_t v71 = 7296;
        _X11 = _X14;
        do
        {
          if (*(_DWORD *)(a2 + v71))
          {
            *(_DWORD *)_X11 = *(_DWORD *)(a2 + v69 + 2816);
            *(void *)(_X11 + 20) = *(void *)(a2 + v69 + 2836);
            *(void *)(_X11 + 32) = *(void *)(a2 + v69 + 2848);
            *(void *)(_X11 + 44) = *(void *)(a2 + v69 + 2860);
            *(void *)(_X11 + 56) = *(void *)(a2 + v69 + 2872);
            *(void *)(_X11 + 68) = *(void *)(a2 + v69 + 2884);
            *(_OWORD *)(_X11 + 80) = *(_OWORD *)(a2 + v69 + 2896);
            *(void *)(_X11 + 96) = *(void *)(a2 + v69 + 2912);
            float32x4_t v73 = (__n128 *)(a2 + v69 + 2820);
            _Q0 = *v73;
            *(__n128 *)(_X11 + 4) = *v73;
            *(_DWORD *)(_X11 + 28) = *(_DWORD *)(a2 + v69 + 2844);
            *(_DWORD *)(_X11 + 40) = *(_DWORD *)(a2 + v69 + 2856);
            *(_DWORD *)(_X11 + 52) = *(_DWORD *)(a2 + v69 + 2868);
            *(_DWORD *)(_X11 + 64) = *(_DWORD *)(a2 + v69 + 2880);
            *(_DWORD *)(_X11 + 76) = *(_DWORD *)(a2 + v69 + 2892);
            __asm { PRFM            #0, [X11,#0x168] }
            _X11 += 104;
          }
          v69 += 104;
          v71 += 4;
        }
        while (v70 != v69);
      }
    }
    if (v656)
    {
      uint64_t v657 = _X14;
      unsigned int v652 = v52;
      __asm { FMOV            V0.2S, #1.0 }
      int8x8_t v670 = (int8x8_t)_Q0.n128_u64[0];
      if ((v31 & 8) != 0)
      {
        uint64_t v360 = *(unsigned __int16 *)(v27 + 16);
        float v362 = *(unsigned char **)(v33 + 24);
        float v361 = *(unsigned char **)(v33 + 32);
        uint64_t v363 = *(void *)(v33 + 40);
        uint64_t v364 = *(void *)(v33 + 48);
        v784 = v362;
        uint64_t v785 = v363;
        uint64_t v366 = *(void *)(v33 + 56);
        uint64_t v365 = *(void *)(v33 + 64);
        uint64_t v786 = v366;
        __int16 v787 = v360;
        uint64_t v367 = *(unsigned __int16 *)(v27 + 18);
        v780 = v361;
        uint64_t v781 = v364;
        uint64_t v782 = v365;
        __int16 v783 = v367;
        BOOL v368 = v360 == 0xFFFF && v362[62] != 0;
        _Q0.n128_u32[0] = *(_DWORD *)(v711 + 212);
        v36.i32[0] = *(_DWORD *)(v711 + 216);
        __n128 v672 = _Q0;
        BOOL v369 = v367 == 0xFFFF && v361[62] != 0;
        uint64_t v722 = *(void *)(v711 + 144);
        _Q0.n128_u32[0] = *(_DWORD *)v711;
        int32x2_t v669 = (int32x2_t)_Q0.n128_u64[0];
        _Q0.n128_u32[0] = *(_DWORD *)(v711 + 4);
        __n128 v686 = _Q0;
        _Q0.n128_u32[0] = *(_DWORD *)(v711 + 8);
        int32x2_t v674 = (int32x2_t)_Q0.n128_u64[0];
        _Q0.n128_u32[0] = *(_DWORD *)(v711 + 12);
        int32x2_t v684 = (int32x2_t)_Q0.n128_u64[0];
        double v735 = *(double *)(v711 + 160);
        BOOL v370 = v672.n128_f32[0] > 0.0;
        int32x2_t v775 = v36;
        if (*(float *)v36.i32 > 0.0) {
          BOOL v370 = 1;
        }
        BOOL v676 = v370;
        if (v360 == 0xFFFF) {
          float v371 = *(float *)(v366 + 28);
        }
        else {
          float v371 = (*(float (**)(unsigned char *, uint64_t, __n128))(*(void *)v362 + 248))(v362, v360, v672);
        }
        if (v367 == 0xFFFF) {
          float v372 = *(float *)(v365 + 28);
        }
        else {
          (*(void (**)(unsigned char *, uint64_t))(*(void *)v361 + 248))(v361, v367);
        }
        if (v371 > v372) {
          float v372 = v371;
        }
        float v680 = v372;
        if (v360 == 0xFFFF)
        {
          v373.i64[0] = *(void *)v366;
          v373.i64[1] = *(unsigned int *)(v366 + 8);
          v374.i64[0] = *(void *)(v366 + 16);
          v374.i64[1] = *(unsigned int *)(v366 + 24);
          float32x4_t v793 = v373;
          float32x4_t v794 = v374;
        }
        else
        {
          (*(void (**)(float32x4_t *__return_ptr, unsigned char *, uint64_t))(*(void *)v362 + 232))(&v793, v362, v360);
        }
        uint64_t v375 = v722;
        if (v367 == 0xFFFF)
        {
          v376.i64[0] = *(void *)v365;
          v376.i64[1] = *(unsigned int *)(v365 + 8);
          v377.i64[0] = *(void *)(v365 + 16);
          v377.i64[1] = *(unsigned int *)(v365 + 24);
          float32x4_t v791 = v376;
          float32x4_t v792 = v377;
        }
        else
        {
          (*(void (**)(float32x4_t *__return_ptr, unsigned char *, uint64_t))(*(void *)v361 + 232))(&v791, v361, v367);
        }
        int32x2_t v790 = vdup_lane_s32(v674, 0);
        int32x2_t v789 = vdup_lane_s32((int32x2_t)v686.n128_u64[0], 0);
        int32x2_t v788 = vdup_lane_s32(v684, 0);
        uint64_t v378 = a2;
        _X8 = a2 + 7556;
        __asm
        {
          PRFM            #0, [X8]
          PRFM            #0, [X26]
        }
        unint64_t v382 = *(unsigned int *)(a2 + 7688);
        if (v382)
        {
          unint64_t v383 = 0;
          unsigned int v694 = 0;
          double v384 = COERCE_DOUBLE(vdup_lane_s32(v669, 0));
          float32x4_t v385 = *(float32x4_t *)(v711 + 88);
          v385.i64[1] = *(unsigned int *)(v711 + 96);
          float32x4_t v758 = v385;
          float32x4_t v386 = *(float32x4_t *)(v711 + 116);
          v386.i64[1] = *(unsigned int *)(v711 + 124);
          float32x4_t v756 = v386;
          float32x2_t v733 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0);
          v37.f32[0] = a4 * 0.8;
          v387.i64[0] = 0;
          v387.i32[2] = 0;
          v387.i32[3] = vdupq_lane_s32(v674, 0).i32[3];
          v386.i64[0] = 0;
          v389.i64[1] = v669.u32[0];
          int8x16_t v388 = vorrq_s8(v387, (int8x16_t)v389);
          *(int32x2_t *)v389.f32 = vdup_lane_s32(v775, 0);
          float32x2_t v667 = *(float32x2_t *)v389.f32;
          float32x2_t v729 = v37;
          float v731 = -(float)(a4 * 0.8);
          _X12 = v656;
          float v678 = a4;
          do
          {
            uint64_t v391 = v378 + 4 * v383;
            unsigned int v392 = *(_DWORD *)(v391 + 7296);
            if (v392)
            {
              uint64_t v393 = v375 + ((unint64_t)*(unsigned __int16 *)(v378 + 44 * *(unsigned int *)(v391 + 7424)) << 6);
              char v394 = *(unsigned char *)(v393 + 48);
              v389.i32[0] = 1.0;
              if ((v394 & 4) != 0)
              {
                v389.i16[0] = *(_WORD *)(v378 + 104 * v383 + 2818);
                v389.f32[0] = 1.0 / (float)v389.u32[0];
              }
              float v395 = *(float *)(v393 + 44);
              v387.i32[0] = *(_DWORD *)(v393 + 60);
              int32x2_t v752 = *(int32x2_t *)v387.i8;
              float v396 = *(float *)(v393 + 56);
              float v397 = 0.0;
              if ((*(unsigned char *)(v393 + 48) & 1) == 0) {
                float v397 = a4;
              }
              __asm
              {
                PRFM            #0, [X12,#0xD0]
                PRFM            #0, [X12,#0x150]
                PRFM            #0, [X12,#0x1D0]
              }
              _X12[2] = v392;
              unint64_t v714 = v383;
              unsigned int v719 = v392;
              if (v394) {
                char v401 = 0;
              }
              else {
                char v401 = 2 * *(unsigned char *)(v378 + 104 * v383 + 2818);
              }
              char v716 = v394;
              float v688 = v397;
              *(float *)v388.i32 = v389.f32[0] * v395;
              v389.f32[0] = v389.f32[0] * v396;
              v388.i32[1] = vdupq_lane_s32(*(int32x2_t *)&v389, 0).i32[1];
              float32x4_t v402 = (float32x4_t *)(_X12 + 80);
              _X12[3] = v401;
              *(_WORD *)_X12 = 3;
              uint64_t v690 = v388.i64[1];
              *((int8x16_t *)_X12 + 1) = v388;
              v403.i64[1] = v686.n128_i64[1];
              *((_DWORD *)_X12 + 1) = v686.n128_u32[0];
              *((_DWORD *)_X12 + 2) = v684.i32[0];
              float32x4_t v726 = (unsigned int *)(v391 + 7424);
              unsigned int v404 = *(_DWORD *)(v391 + 7424);
              uint64_t v405 = v375 + ((unint64_t)*(unsigned __int16 *)(v378 + 44 * v404) << 6);
              __int32 v406 = *(_DWORD *)(v405 + 8);
              v403.i64[0] = *(void *)v405;
              *((void *)_X12 + 4) = *(void *)v405;
              int32x4_t v682 = (float *)(_X12 + 32);
              float32x4_t v407 = v403;
              v407.i32[1] = v403.i32[1];
              v407.i32[3] = 0;
              float32x4_t v408 = v407;
              v408.i32[2] = v406;
              *((_DWORD *)_X12 + 10) = v406;
              float32x4_t v692 = (float32x2_t *)_X12;
              *((float *)_X12 + 11) = v680;
              float32x2_t v409 = 0;
              float32x2_t v410 = (float32x2_t)vdup_n_s32(0x38D1B717u);
              v389.i64[0] = vextq_s8((int8x16_t)v408, (int8x16_t)v408, 8uLL).u64[0];
              float32x2_t v745 = *(float32x2_t *)v407.f32;
              float32x4_t v749 = v408;
              float32x2_t v706 = *(float32x2_t *)v389.f32;
              int32x2_t v709 = *(int32x2_t *)v403.f32;
              if (v404 == 0xFFFF)
              {
                float32x2_t v411 = 0;
                float32x4_t v412 = (float32x4_t *)(_X12 + 80);
              }
              else
              {
                float32x2_t v413 = (float32x2_t)vdup_lane_s32(v752, 0);
                float32x2_t v414 = (float32x2_t)vextq_s8((int8x16_t)v408, (int8x16_t)v408, 4uLL).u64[0];
                float32x2_t v415 = vneg_f32(*(float32x2_t *)v389.f32);
                float32x2_t v416 = vneg_f32(*(float32x2_t *)v407.f32);
                float32x4_t v389 = vnegq_f32(v408);
                v389.i32[3] = 0;
                float32x2_t v737 = v414;
                float32x4_t v740 = v389;
                float32x2_t v411 = 0;
                do
                {
                  BOOL v417 = (unsigned __int16 *)(v378 + 44 * v404);
                  uint64_t v418 = *((unsigned __int8 *)v417 + 5);
                  if (*((unsigned char *)v417 + 5))
                  {
                    uint64_t v419 = 0;
                    uint64_t v420 = v375 + ((unint64_t)*v417 << 6);
                    do
                    {
                      uint64_t v421 = v420 + (v419 << 6);
                      float32x2_t v423 = *(float32x2_t *)(v421 + 12);
                      uint64_t v422 = v421 + 12;
                      float32x2_t v424 = v423;
                      v425.i32[0] = v423.i32[1];
                      v425.i32[1] = *(_DWORD *)(v422 + 8);
                      v425.i64[1] = *(unsigned int *)(v422 + 12);
                      int8x16_t v426 = (int8x16_t)vsubq_f32(v425, v758);
                      int8x8_t v427 = (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v407.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v426, v426, 8uLL)), *(float32x2_t *)v426.i8, v415);
                      float32x2_t v428 = vmla_f32(vmul_f32(v414, *(float32x2_t *)v426.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v426, v426, 4uLL), v416);
                      float v429 = v428.f32[0];
                      *(int8x8_t *)v430.f32 = vext_s8((int8x8_t)v428, v427, 4uLL);
                      v430.i64[1] = v428.u32[0];
                      float32x4_t v431 = v430;
                      if (v787 == -1)
                      {
                        float32x4_t v432 = *(float32x4_t *)(v785 + 40);
                        float32x4_t v433 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v432, 3);
                        v433.i32[1] = *(_DWORD *)(v785 + 56);
                        v433.i32[2] = *(_DWORD *)(v785 + 60);
                        float32x4_t v434 = vmulq_lane_f32(*(float32x4_t *)(v785 + 28), v428, 1);
                        v434.i32[3] = 0;
                        float32x4_t v435 = vmulq_n_f32(v432, *(float *)v427.i32);
                        v435.i32[3] = 0;
                        float32x4_t v436 = vmulq_n_f32(v433, v429);
                        v436.i32[3] = 0;
                        float32x4_t v431 = vaddq_f32(vaddq_f32(v434, v435), v436);
                      }
                      float32x4_t v437 = vsubq_f32(v425, v756);
                      *(float32x2_t *)v438.f32 = vmla_f32(vmul_f32(*(float32x2_t *)v407.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v437, (int8x16_t)v437, 8uLL)), *(float32x2_t *)v437.f32, v415);
                      int8x8_t v439 = (int8x8_t)vmla_f32(vmul_f32(v414, *(float32x2_t *)v437.f32), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v437, (int8x16_t)v437, 4uLL), v416);
                      *(int8x8_t *)v437.f32 = vext_s8(v439, *(int8x8_t *)v438.f32, 4uLL);
                      v437.i64[1] = v439.u32[0];
                      float32x4_t v797 = v408;
                      float32x4_t v798 = v431;
                      float32x4_t v440 = vnegq_f32(v437);
                      float32x4_t v764 = v431;
                      float32x4_t v767 = v437;
                      float32x4_t v776 = v430;
                      if (v783 == -1)
                      {
                        float32x4_t v441 = *(float32x4_t *)(v781 + 40);
                        float32x4_t v442 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v441, 3);
                        v442.i32[1] = *(_DWORD *)(v781 + 56);
                        v442.i32[2] = *(_DWORD *)(v781 + 60);
                        float32x4_t v443 = vmulq_n_f32(*(float32x4_t *)(v781 + 28), v440.f32[0]);
                        v443.i32[3] = 0;
                        float32x4_t v438 = vmulq_lane_f32(v441, *(float32x2_t *)v440.f32, 1);
                        v438.i32[3] = 0;
                        float32x4_t v444 = vmulq_laneq_f32(v442, v440, 2);
                        v444.i32[3] = 0;
                        float32x4_t v440 = vaddq_f32(vaddq_f32(v443, v438), v444);
                      }
                      else
                      {
                        v440.i32[3] = 0;
                      }
                      float32x4_t v412 = v402 + 7;
                      float32x2_t v770 = vsub_f32(v424, *(float32x2_t *)&v735);
                      float32x4_t v795 = v740;
                      float32x4_t v796 = v440;
                      float32x4_t v760 = v440;
                      float32x2_t ImpulseResponse = physx::Dy::getImpulseResponse((uint64_t *)&v784, &v797, &v801, (float32x2_t *)&v789, (uint64_t *)&v780, &v795, &v799, (float32x2_t *)&v790, v384, v735, *(float32x2_t *)v438.f32, &v788);
                      float32x4_t v446 = vmulq_f32(v776, v794);
                      float32x4_t v408 = v749;
                      float32x4_t v447 = vaddq_f32(vmulq_f32(v749, v791), vmulq_f32(v767, v792));
                      float32x2_t v448 = vadd_f32(ImpulseResponse, v410);
                      float32x2_t v449 = vrecpe_f32(v448);
                      int v450 = 4;
                      do
                      {
                        float32x2_t v449 = vmul_f32(v449, vrecps_f32(v448, v449));
                        --v450;
                      }
                      while (v450);
                      float32x4_t v451 = vaddq_f32(vmulq_f32(v749, v793), v446);
                      float32x4_t v452 = vsubq_f32(v451, v447);
                      v452.i64[0] = vpaddq_f32(v452, v452).u64[0];
                      *(float32x2_t *)v452.f32 = vpadd_f32(*(float32x2_t *)v452.f32, *(float32x2_t *)v452.f32);
                      int8x8_t v453 = (int8x8_t)vcgt_f32(v733, *(float32x2_t *)v452.f32);
                      float32x2_t v454 = vneg_f32(*(float32x2_t *)v452.f32);
                      uint64_t v455 = v420 + (v419 << 6);
                      v456.i64[0] = *(void *)(v455 + 32);
                      v456.i64[1] = *(unsigned int *)(v455 + 40);
                      float32x4_t v457 = vmulq_f32(v749, v456);
                      v457.i64[0] = vpaddq_f32(v457, v457).u64[0];
                      float32x2_t v458 = vadd_f32(vpadd_f32(*(float32x2_t *)v457.f32, *(float32x2_t *)v457.f32), (float32x2_t)vand_s8((int8x8_t)vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v454, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)&a5, v770), 0)), vand_s8((int8x8_t)vcgtz_f32(v413), v453)), 0), (int8x8_t)vmul_n_f32(v454, *(float *)v752.i32)));
                      if (v368)
                      {
                        float32x2_t v459 = (float32x2_t)vpaddq_f32(v451, v451).u64[0];
                        float32x2_t v458 = vsub_f32(v458, vpadd_f32(v459, v459));
                      }
                      *(float32x2_t *)v407.f32 = v745;
                      float32x2_t v414 = v737;
                      float32x4_t v460 = v764;
                      if (v369)
                      {
                        float32x2_t v461 = (float32x2_t)vpaddq_f32(v447, v447).u64[0];
                        float32x2_t v458 = vadd_f32(v458, vpadd_f32(v461, v461));
                      }
                      float32x2_t v462 = (float32x2_t)vand_s8((int8x8_t)vdup_lane_s32(vcgt_f32(ImpulseResponse, (float32x2_t)0x3400000034000000), 0), (int8x8_t)v449);
                      float32x2_t v463 = vmax_f32(vmla_f32(vmul_f32(vsub_f32(v458, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(v729, v770), 0)), v462), v462, v454), 0);
                      v460.i32[3] = vdupq_lane_s32(*(int32x2_t *)&v770, 0).i32[3];
                      float32x4_t v464 = vnegq_f32(v760);
                      v464.i32[3] = v462.i32[1];
                      v402[2].i32[0] = v458.i32[0];
                      v402[2].f32[1] = v731;
                      *float32x4_t v402 = v460;
                      v402[1] = v464;
                      int8x16_t v465 = v802;
                      float32x4_t v466 = v799;
                      float32x4_t v467 = v800;
                      v402[3] = v801;
                      v402[4] = v466;
                      v402[5] = (float32x4_t)v465;
                      v402[6] = v467;
                      float32x2_t v409 = vadd_f32(v409, v463);
                      *(float32x2_t *)v389.f32 = vld1_dup_f32((const float *)v422);
                      float32x2_t v411 = vmin_f32(*(float32x2_t *)v389.f32, v411);
                      ++v419;
                      v402 += 7;
                    }
                    while (v419 != v418);
                  }
                  else
                  {
                    float32x4_t v412 = v402;
                  }
                  uint64_t v378 = a2;
                  unsigned int v404 = *(unsigned __int16 *)(a2 + 44 * v404 + 2);
                  float32x4_t v402 = v412;
                  uint64_t v375 = v722;
                }
                while (v404 != 0xFFFF);
              }
              v389.f32[0] = (float)v719;
              float32x2_t v468 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v389.f32, 0);
              float32x2_t v469 = vrecpe_f32(v468);
              int v470 = 4;
              do
              {
                float32x2_t v469 = vmul_f32(v469, vrecps_f32(v468, v469));
                --v470;
              }
              while (v470);
              v692[6].i32[1] = vmul_f32(v409, v469).u32[0];
              bzero(v412, 4 * v719);
              _X12 = &v412->i8[4 * ((v719 + 3) & 0xFFFFFFFC)];
              v692[7].i32[0] = 0;
              unint64_t v383 = v714;
              float v471 = -0.5;
              if ((v716 & 1) == 0)
              {
                v472.i64[1] = v791.i64[1];
                float32x2_t v473 = (float32x2_t)vdup_lane_s32(v709, 1);
                *(int8x8_t *)v474.i8 = vext_s8(0, (int8x8_t)vneg_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v749, 2)), 4uLL);
                v474.i64[1] = v473.u32[0];
                float32x4_t v475 = vsubq_f32(v793, v791);
                *(int8x8_t *)v472.i8 = vext_s8((int8x8_t)vneg_f32(v473), (int8x8_t)v709, 4uLL);
                float32x4_t v476 = vmulq_f32(v749, v475);
                v476.i64[0] = vpaddq_f32(v476, v476).u64[0];
                float32x4_t v477 = vmulq_n_f32(v749, vpadd_f32(*(float32x2_t *)v476.f32, *(float32x2_t *)v476.f32).f32[0]);
                v477.i32[3] = 0;
                float32x4_t v478 = vsubq_f32(v475, v477);
                float32x4_t v479 = vmulq_f32(v478, v478);
                v479.i64[0] = vpaddq_f32(v479, v479).u64[0];
                float32x4_t v389 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v479.f32, *(float32x2_t *)v479.f32), v410), 0), (int8x16_t)v478, vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32((float32x2_t)vdup_n_s32(0x3F3504F3u), vabs_f32((float32x2_t)vdup_lane_s32(v709, 0))), 0), 0x1FuLL)), v474, v472));
                float32x4_t v480 = vmulq_f32(v389, v389);
                v480.i64[0] = vpaddq_f32(v480, v480).u64[0];
                float32x2_t v481 = vpadd_f32(*(float32x2_t *)v480.f32, *(float32x2_t *)v480.f32);
                float32x2_t v482 = vrsqrte_f32(v481);
                int v483 = 4;
                do
                {
                  float32x2_t v482 = vmul_f32(v482, vrsqrts_f32(vmul_f32(v482, v482), v481));
                  --v483;
                }
                while (v483);
                float32x2_t v484 = vmul_f32(v481, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v481), 0), v670, (int8x8_t)v482));
                *(float32x2_t *)v387.i8 = vrecpe_f32(v484);
                int v485 = 4;
                do
                {
                  *(float32x2_t *)v387.i8 = vmul_f32(*(float32x2_t *)v387.i8, vrecps_f32(v484, *(float32x2_t *)v387.i8));
                  --v485;
                }
                while (v485);
                v692[8] = (float32x2_t)(v657 + 104 * v694);
                uint64_t v486 = v378 + 104 * v714;
                if (*(_WORD *)(v486 + 2818))
                {
                  unint64_t v487 = 0;
                  float32x4_t v488 = vmulq_n_f32(v389, *(float *)v387.i32);
                  float32x4_t v489 = v488;
                  v489.i32[3] = 0;
                  float32x2_t v490 = (float32x2_t)vextq_s8((int8x16_t)v489, (int8x16_t)v489, 8uLL).u64[0];
                  float32x2_t v491 = (float32x2_t)vext_s8(*(int8x8_t *)v488.f32, (int8x8_t)v490, 4uLL);
                  float32x2_t v492 = vneg_f32(v490);
                  float32x2_t v493 = vneg_f32(*(float32x2_t *)v488.f32);
                  float32x4_t v777 = v488;
                  int8x8_t v494 = (int8x8_t)vmls_f32(vmul_f32(v745, v491), (float32x2_t)vext_s8((int8x8_t)v745, (int8x8_t)v706, 4uLL), *(float32x2_t *)v488.f32);
                  *(int8x8_t *)v495.f32 = vext_s8(v494, (int8x8_t)vmls_f32(vmul_f32(v706, *(float32x2_t *)v488.f32), v745, v490), 4uLL);
                  v495.i64[1] = v494.u32[0];
                  float32x4_t v702 = (unsigned __int16 *)(v486 + 2818);
                  float32x4_t v496 = vnegq_f32(v489);
                  v496.i32[3] = 0;
                  float32x4_t v738 = v496;
                  float32x2_t v700 = (float32x2_t)vext_s8(*(int8x8_t *)v495.f32, (int8x8_t)v494.u32[0], 4uLL);
                  float32x2_t v698 = vneg_f32((float32x2_t)v494.u32[0]);
                  float32x2_t v704 = *(float32x2_t *)v495.f32;
                  float32x2_t v497 = vneg_f32(*(float32x2_t *)v495.f32);
                  float32x4_t v498 = vnegq_f32(v495);
                  v498.i32[3] = 0;
                  float32x4_t v720 = v498;
                  float32x4_t v765 = v495;
                  float32x4_t v768 = v489;
                  float32x2_t v710 = v491;
                  float32x2_t v707 = v492;
                  float32x2_t v696 = v493;
                  do
                  {
                    float32x4_t v499 = (float *)(v378 + 104 * v714 + 12 * v487);
                    float v500 = v499[714] + v499[714];
                    float v501 = v499[715] + v499[715];
                    float v502 = v499[716] + v499[716];
                    float v504 = *(float *)(v711 + 80);
                    float v503 = *(float *)(v711 + 84);
                    float v505 = v471 + (float)(v503 * v503);
                    float v506 = *(float *)(v711 + 72);
                    float v507 = *(float *)(v711 + 76);
                    float v508 = (float)((float)(v501 * v507) + (float)(v506 * v500)) + (float)(v504 * v502);
                    *(float *)&unsigned int v509 = (float)((float)(v503 * (float)((float)(v507 * v502) - (float)(v504 * v501)))
                                            + (float)(v500 * v505))
                                    + (float)(v506 * v508);
                    *(float *)&unsigned int v510 = (float)((float)(v503 * (float)((float)(v504 * v500) - (float)(v506 * v502)))
                                            + (float)(v501 * v505))
                                    + (float)(v507 * v508);
                    float32_t v511 = (float)((float)(v503 * (float)((float)(v506 * v501) - (float)(v507 * v500)))
                                 + (float)(v502 * v505))
                         + (float)(v504 * v508);
                    float32x4_t v512 = (float32x4_t)__PAIR64__(v510, v509);
                    v512.f32[2] = v511;
                    float32x4_t v513 = (float32x4_t *)_X12;
                    float32x2_t v514 = (float32x2_t)vextq_s8((int8x16_t)v512, (int8x16_t)v512, 8uLL).u64[0];
                    float32x2_t v515 = (float32x2_t)vext_s8((int8x8_t)__PAIR64__(v510, v509), (int8x8_t)v514, 4uLL);
                    int8x8_t v516 = (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v777.f32, v514), (float32x2_t)__PAIR64__(v510, v509), v492);
                    float32x2_t v517 = vmla_f32(vmul_f32(v491, (float32x2_t)__PAIR64__(v510, v509)), v515, v493);
                    uint64_t v518 = v517.u32[0];
                    float32x2_t v761 = (float32x2_t)__PAIR64__(v510, v509);
                    float32x2_t v753 = v514;
                    if (v787 == -1)
                    {
                      float32x4_t v520 = *(float32x4_t *)(v785 + 40);
                      float32x4_t v521 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v520, 3);
                      v521.i32[1] = *(_DWORD *)(v785 + 56);
                      v521.i32[2] = *(_DWORD *)(v785 + 60);
                      float32x4_t v522 = vmulq_lane_f32(*(float32x4_t *)(v785 + 28), v517, 1);
                      v522.i32[3] = 0;
                      float32x4_t v523 = vmulq_n_f32(v520, *(float *)v516.i32);
                      v523.i32[3] = 0;
                      float32x4_t v524 = vmulq_n_f32(v521, *(float *)&v518);
                      v524.i32[3] = 0;
                      float32x4_t v519 = vaddq_f32(vaddq_f32(v522, v523), v524);
                    }
                    else
                    {
                      *(int8x8_t *)v519.f32 = vext_s8((int8x8_t)v517, v516, 4uLL);
                      v519.i64[1] = v517.u32[0];
                    }
                    float v525 = v499[720] + v499[720];
                    float v526 = v499[721] + v499[721];
                    float v527 = v499[722] + v499[722];
                    float v529 = *(float *)(v711 + 108);
                    float v528 = *(float *)(v711 + 112);
                    float v530 = v471 + (float)(v528 * v528);
                    float v531 = *(float *)(v711 + 100);
                    float v532 = *(float *)(v711 + 104);
                    float v533 = (float)((float)(v526 * v532) + (float)(v531 * v525)) + (float)(v529 * v527);
                    *(float *)&unsigned int v534 = (float)((float)(v528 * (float)((float)(v532 * v527) - (float)(v529 * v526)))
                                            + (float)(v525 * v530))
                                    + (float)(v531 * v533);
                    *(float *)&unsigned int v535 = (float)((float)(v528 * (float)((float)(v529 * v525) - (float)(v531 * v527)))
                                            + (float)(v526 * v530))
                                    + (float)(v532 * v533);
                    float32_t v536 = (float)((float)(v528 * (float)((float)(v531 * v526) - (float)(v532 * v525)))
                                 + (float)(v527 * v530))
                         + (float)(v529 * v533);
                    float32x4_t v537 = (float32x4_t)__PAIR64__(v535, v534);
                    v537.f32[2] = v536;
                    float32x2_t v538 = (float32x2_t)vextq_s8((int8x16_t)v537, (int8x16_t)v537, 8uLL).u64[0];
                    float32x2_t v539 = (float32x2_t)vext_s8((int8x8_t)__PAIR64__(v535, v534), (int8x8_t)v538, 4uLL);
                    int8x8_t v540 = (int8x8_t)vmla_f32(vmul_f32(v491, (float32x2_t)__PAIR64__(v535, v534)), v539, v493);
                    *(int8x8_t *)v541.f32 = vext_s8(v540, (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v777.f32, v538), (float32x2_t)__PAIR64__(v535, v534), v492), 4uLL);
                    v541.i64[1] = v540.u32[0];
                    float32x4_t v797 = v489;
                    float32x4_t v798 = v519;
                    float32x4_t v542 = vnegq_f32(v541);
                    float32x2_t v741 = v538;
                    float32x2_t v746 = (float32x2_t)__PAIR64__(v535, v534);
                    float32x4_t v750 = v519;
                    if (v783 == -1)
                    {
                      float32x4_t v543 = *(float32x4_t *)(v781 + 40);
                      float32x4_t v544 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v543, 3);
                      v544.i32[1] = *(_DWORD *)(v781 + 56);
                      v544.i32[2] = *(_DWORD *)(v781 + 60);
                      float32x4_t v545 = vmulq_n_f32(*(float32x4_t *)(v781 + 28), v542.f32[0]);
                      v545.i32[3] = 0;
                      float32x4_t v546 = vmulq_lane_f32(v543, *(float32x2_t *)v542.f32, 1);
                      v546.i32[3] = 0;
                      float32x4_t v547 = vmulq_laneq_f32(v544, v542, 2);
                      v547.i32[3] = 0;
                      float32x4_t v542 = vaddq_f32(vaddq_f32(v545, v546), v547);
                    }
                    else
                    {
                      v542.i32[3] = 0;
                    }
                    float32x4_t v548 = vaddq_f32(v756, v537);
                    float32x4_t v771 = vsubq_f32(vaddq_f32(v758, v512), v548);
                    float32x4_t v795 = v738;
                    float32x4_t v796 = v542;
                    float32x4_t v717 = v542;
                    float32x2_t v549 = physx::Dy::getImpulseResponse((uint64_t *)&v784, &v797, &v801, (float32x2_t *)&v789, (uint64_t *)&v780, &v795, &v799, (float32x2_t *)&v790, v384, *(double *)v548.i64, *(float32x2_t *)v756.f32, &v788);
                    float32x2_t v550 = vadd_f32(v549, v410);
                    float32x2_t v551 = vrecpe_f32(v550);
                    int v552 = 4;
                    do
                    {
                      float32x2_t v551 = vmul_f32(v551, vrecps_f32(v550, v551));
                      --v552;
                    }
                    while (v552);
                    uint64_t v553 = v375 + ((unint64_t)*(unsigned __int16 *)(v378 + 44 * *v726) << 6);
                    v554.i64[0] = *(void *)(v553 + 32);
                    v554.i64[1] = *(unsigned int *)(v553 + 40);
                    float32x4_t v555 = vmulq_f32(v768, v554);
                    v555.i64[0] = vpaddq_f32(v555, v555).u64[0];
                    float32x2_t v556 = vpadd_f32(*(float32x2_t *)v555.f32, *(float32x2_t *)v555.f32);
                    if (v368)
                    {
                      float32x4_t v557 = vaddq_f32(vmulq_f32(v768, v793), vmulq_f32(v750, v794));
                      v557.i64[0] = vpaddq_f32(v557, v557).u64[0];
                      float32x2_t v556 = vsub_f32(v556, vpadd_f32(*(float32x2_t *)v557.f32, *(float32x2_t *)v557.f32));
                    }
                    if (v369)
                    {
                      float32x4_t v558 = vaddq_f32(vmulq_f32(v738, v791), vmulq_f32(v717, v792));
                      v558.i64[0] = vpaddq_f32(v558, v558).u64[0];
                      float32x2_t v556 = vsub_f32(v556, vpadd_f32(*(float32x2_t *)v558.f32, *(float32x2_t *)v558.f32));
                    }
                    float32x4_t v559 = v777;
                    float32x4_t v560 = vmulq_f32(v768, v771);
                    v560.i64[0] = vpaddq_f32(v560, v560).u64[0];
                    v559.i32[3] = vpadd_f32(*(float32x2_t *)&v560, *(float32x2_t *)&v560).i32[1];
                    float32x2_t v561 = (float32x2_t)vdup_n_s32(0x3F4CCCCDu);
                    int8x8_t v562 = vand_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v549, (float32x2_t)0x3400000034000000), 0), (int8x8_t)vmul_f32(v551, v561));
                    *float32x4_t v513 = v559;
                    float32x4_t v563 = v798;
                    float32x4_t v564 = v799;
                    v563.i32[3] = v556.i32[1];
                    v513[1] = v563;
                    float32x4_t v565 = vnegq_f32(v796);
                    v565.i32[3] = v562.i32[1];
                    v513[2] = v565;
                    v513[3].i32[1] = 0;
                    v513[3].f32[0] = v688;
                    float32x4_t v566 = v800;
                    v513[4] = v801;
                    v513[5] = v564;
                    v513[6] = (float32x4_t)v802;
                    v513[7] = v566;
                    int8x8_t v567 = (int8x8_t)vmla_f32(vmul_f32(v704, v753), v761, v698);
                    float32x2_t v568 = vmla_f32(vmul_f32(v700, v761), v515, v497);
                    uint64_t v569 = v568.u32[0];
                    __int16 v570 = v787;
                    if ((unsigned __int16)v787 == 0xFFFF)
                    {
                      float32x4_t v572 = *(float32x4_t *)(v785 + 40);
                      float32x4_t v573 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v572, 3);
                      v573.i32[1] = *(_DWORD *)(v785 + 56);
                      v573.i32[2] = *(_DWORD *)(v785 + 60);
                      float32x4_t v574 = vmulq_lane_f32(*(float32x4_t *)(v785 + 28), v568, 1);
                      v574.i32[3] = 0;
                      float32x4_t v575 = vmulq_n_f32(v572, *(float *)v567.i32);
                      v575.i32[3] = 0;
                      float32x4_t v576 = vmulq_n_f32(v573, *(float *)&v569);
                      v576.i32[3] = 0;
                      float32x4_t v571 = vaddq_f32(vaddq_f32(v574, v575), v576);
                    }
                    else
                    {
                      *(int8x8_t *)v571.f32 = vext_s8((int8x8_t)v568, v567, 4uLL);
                      v571.i64[1] = v568.u32[0];
                    }
                    v577.i64[0] = v765.i64[0];
                    *(float32x2_t *)v579.f32 = vmla_f32(vmul_f32(v700, v746), v539, v497);
                    *(int8x8_t *)v578.f32 = vext_s8(*(int8x8_t *)v579.f32, (int8x8_t)vmla_f32(vmul_f32(v704, v741), v746, v698), 4uLL);
                    v579.i32[1] = 0;
                    v578.i64[1] = v579.u32[0];
                    float32x4_t v797 = v765;
                    float32x4_t v798 = v571;
                    float32x4_t v580 = vnegq_f32(v578);
                    __int16 v581 = v783;
                    float32x4_t v762 = v571;
                    float32x2_t v582 = v561;
                    if ((unsigned __int16)v783 == 0xFFFF)
                    {
                      float32x4_t v583 = *(float32x4_t *)(v781 + 40);
                      float32x4_t v584 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v583, 3);
                      v584.i32[1] = *(_DWORD *)(v781 + 56);
                      v584.i32[2] = *(_DWORD *)(v781 + 60);
                      float32x4_t v585 = vmulq_n_f32(*(float32x4_t *)(v781 + 28), v580.f32[0]);
                      v585.i32[3] = 0;
                      float32x4_t v579 = vmulq_lane_f32(v583, *(float32x2_t *)v580.f32, 1);
                      v579.i32[3] = 0;
                      float32x4_t v577 = vmulq_laneq_f32(v584, v580, 2);
                      v577.i32[3] = 0;
                      float32x4_t v580 = vaddq_f32(vaddq_f32(v585, v579), v577);
                    }
                    else
                    {
                      v580.i32[3] = 0;
                    }
                    float32x4_t v795 = v720;
                    float32x4_t v796 = v580;
                    float32x4_t v754 = v580;
                    *(float32x2_t *)v389.f32 = physx::Dy::getImpulseResponse((uint64_t *)&v784, &v797, &v801, (float32x2_t *)&v789, (uint64_t *)&v780, &v795, &v799, (float32x2_t *)&v790, v384, *(double *)v579.i64, *(float32x2_t *)v577.f32, &v788);
                    float32x2_t v586 = vadd_f32(*(float32x2_t *)v389.f32, v410);
                    float32x2_t v587 = vrecpe_f32(v586);
                    int v588 = 4;
                    do
                    {
                      float32x2_t v587 = vmul_f32(v587, vrecps_f32(v586, v587));
                      --v588;
                    }
                    while (v588);
                    uint64_t v589 = v375 + ((unint64_t)*(unsigned __int16 *)(v378 + 44 * *v726) << 6);
                    v590.i64[0] = *(void *)(v589 + 32);
                    v590.i64[1] = *(unsigned int *)(v589 + 40);
                    float32x4_t v591 = v762;
                    float32x4_t v592 = vmulq_f32(v765, v590);
                    v592.i64[0] = vpaddq_f32(v592, v592).u64[0];
                    float32x2_t v593 = vpadd_f32(*(float32x2_t *)v592.f32, *(float32x2_t *)v592.f32);
                    _X12 = (char *)&v513[16];
                    float32x2_t v491 = v710;
                    float v471 = -0.5;
                    float32x2_t v492 = v707;
                    float32x2_t v493 = v696;
                    if (v368)
                    {
                      float32x4_t v594 = vaddq_f32(vmulq_f32(v765, v793), vmulq_f32(v762, v794));
                      v594.i64[0] = vpaddq_f32(v594, v594).u64[0];
                      float32x2_t v593 = vsub_f32(v593, vpadd_f32(*(float32x2_t *)v594.f32, *(float32x2_t *)v594.f32));
                    }
                    float32x4_t v489 = v768;
                    if (v369)
                    {
                      float32x4_t v595 = vaddq_f32(vmulq_f32(v720, v791), vmulq_f32(v754, v792));
                      v595.i64[0] = vpaddq_f32(v595, v595).u64[0];
                      float32x2_t v593 = vsub_f32(v593, vpadd_f32(*(float32x2_t *)v595.f32, *(float32x2_t *)v595.f32));
                    }
                    *(int8x8_t *)v389.f32 = vand_s8((int8x8_t)vdup_lane_s32(vcgt_f32(*(float32x2_t *)v389.f32, (float32x2_t)0x3400000034000000), 0), (int8x8_t)vmul_f32(v587, v582));
                    float32x4_t v596 = vmulq_f32(v765, v771);
                    v596.i64[0] = vpaddq_f32(v596, v596).u64[0];
                    float32x4_t v597 = v765;
                    v597.i32[3] = vpadd_f32(*(float32x2_t *)&v596, *(float32x2_t *)&v596).i32[1];
                    v591.i32[3] = v593.i32[1];
                    v513[8] = v597;
                    v513[9] = v591;
                    float32x4_t v598 = vnegq_f32(v754);
                    v598.i32[3] = v389.i32[1];
                    v513[10] = v598;
                    v513[11].i32[1] = 0;
                    v513[11].f32[0] = v688;
                    v389.i32[1] = v801.i32[1];
                    int8x16_t v387 = v802;
                    float32x4_t v599 = v799;
                    float32x4_t v600 = v800;
                    v513[12] = v801;
                    v513[13] = v599;
                    v513[14] = (float32x4_t)v387;
                    v513[15] = v600;
                    ++v487;
                    unint64_t v601 = *v702;
                  }
                  while (v487 < v601);
                  _ZF = v601 == 1;
                  BOOL v602 = v676;
                  if (!_ZF) {
                    BOOL v602 = 0;
                  }
                  unint64_t v383 = v714;
                  if (v602)
                  {
                    float32x2_t v778 = v582;
                    float32x2_t v603 = vmul_n_f32(vmax_f32(vneg_f32(v411), 0), v672.n128_f32[0]);
                    float32x2_t v604 = vrsqrte_f32(v603);
                    int v605 = 4;
                    do
                    {
                      float32x2_t v604 = vmul_f32(v604, vrsqrts_f32(vmul_f32(v604, v604), v603));
                      --v605;
                    }
                    while (v605);
                    ++v692->i8[3];
                    __int8 v606 = (float *)(v378 + 104 * v714);
                    float v607 = v606[726];
                    float v608 = v606[729];
                    float v609 = *(float *)(v711 + 72);
                    float v610 = *(float *)(v711 + 76);
                    float v612 = *(float *)(v711 + 80);
                    float v611 = *(float *)(v711 + 84);
                    float v613 = v606[728];
                    float v614 = v606[727];
                    float v615 = (float)((float)((float)(v608 * v609) + (float)(v611 * v607)) + (float)(v610 * v613))
                         - (float)(v614 * v612);
                    float v616 = (float)((float)((float)(v608 * v610) + (float)(v611 * v614)) + (float)(v612 * v607))
                         - (float)(v613 * v609);
                    float v617 = (float)((float)((float)(v608 * v612) + (float)(v611 * v613)) + (float)(v609 * v614))
                         - (float)(v607 * v610);
                    float v618 = (float)((float)((float)(v611 * v608) - (float)(v609 * v607)) - (float)(v610 * v614))
                         - (float)(v612 * v613);
                    float v620 = *(float *)(v711 + 108);
                    float v619 = *(float *)(v711 + 112);
                    float v621 = *(float *)(v711 + 100);
                    float v622 = *(float *)(v711 + 104);
                    float v623 = (float)((float)((float)(v618 * v621) - (float)(v615 * v619)) - (float)(v616 * v620))
                         + (float)(v622 * v617);
                    float v624 = (float)((float)((float)(v618 * v622) - (float)(v616 * v619)) - (float)(v617 * v621))
                         + (float)(v620 * v615);
                    float v625 = (float)((float)((float)(v618 * v620) - (float)(v617 * v619)) - (float)(v615 * v622))
                         + (float)(v621 * v616);
                    float v626 = (float)((float)((float)(v621 * v615) + (float)(v618 * v619)) + (float)(v616 * v622))
                         + (float)(v617 * v620);
                    float32x4_t v627 = (float *)(v375 + ((unint64_t)*(unsigned __int16 *)(v378 + 44 * *v726) << 6));
                    float v628 = v627[1];
                    float v629 = v627[2];
                    float v630 = v623 * *v627;
                    float v631 = v624 * v628;
                    float v632 = v625 * v629;
                    float v633 = sqrtf((float)((float)((float)(v631 * v631) + (float)(v630 * v630)) + (float)(v632 * v632))+ (float)(v626 * v626));
                    if (v633 != 0.0)
                    {
                      float v630 = v630 / v633;
                      float v631 = v631 / v633;
                      float v632 = v632 / v633;
                      float v626 = v626 / v633;
                    }
                    unsigned __int32 v772 = vmax_f32(v667, vmul_f32(v603, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v603), 0), v670, (int8x8_t)v604))).u32[0];
                    float v634 = (float)((float)((float)(v628 * v631) + (float)(v630 * *v627)) + (float)(v632 * v629))
                         + (float)(v626 * 0.0);
                    v799.i64[0] = 0;
                    v799.i32[2] = 0;
                    physx::Dy::createImpulseResponseVector((float32x2_t *)&v801, (float32x2_t *)&v799, v682, v785, v570);
                    v797.i64[0] = 0;
                    v797.i32[2] = 0;
                    float32_t v635 = -v692[5].f32[0];
                    *(float32x2_t *)v795.f32 = vneg_f32(v692[4]);
                    v795.f32[2] = v635;
                    physx::Dy::createImpulseResponseVector((float32x2_t *)&v799, (float32x2_t *)&v797, v795.f32, v781, v581);
                    *(float *)v636.i32 = physx::Dy::getImpulseResponse((uint64_t *)&v784, (float32x2_t *)&v801, (float32x2_t *)&v797, (uint64_t *)&v780, (float32x2_t *)&v799, (float32x2_t *)&v795, *(float *)v669.i32, v686.n128_f32[0], *(float *)v674.i32, *(float *)v684.i32);
                    float32x2_t v637 = (float32x2_t)vdup_lane_s32(v636, 0);
                    float32x2_t v638 = vadd_f32(v637, v410);
                    float32x2_t v639 = vrecpe_f32(v638);
                    int v640 = 4;
                    do
                    {
                      float32x2_t v639 = vmul_f32(v639, vrecps_f32(v638, v639));
                      --v640;
                    }
                    while (v640);
                    float v641 = 0.0;
                    if ((float)(v633 + -0.000001) >= 0.0) {
                      float v641 = v634 / v626;
                    }
                    *(float *)v642.i32 = -atanf(v641);
                    v643.i64[0] = 0;
                    v643.i32[2] = 0;
                    v643.i32[3] = vdupq_lane_s32(v642, 0).i32[3];
                    v644.i64[0] = v802.i64[0];
                    v644.i64[1] = v802.u32[2];
                    v513[16] = v643;
                    v513[17] = v644;
                    v644.i64[0] = v800.i64[0];
                    v644.i64[1] = v800.u32[2];
                    float32x4_t v645 = vnegq_f32(v644);
                    v645.i32[3] = vand_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v637, (float32x2_t)0x3400000034000000), 0), (int8x8_t)vmul_f32(v639, v778)).i32[1];
                    v513[18] = v645;
                    v513[19].f32[0] = v688;
                    v513[19].i32[1] = 0;
                    v389.i64[0] = v797.i64[0];
                    v387.i64[0] = v798.i64[0];
                    v389.i32[2] = v797.i32[2];
                    v513[19].i32[2] = v772;
                    v389.i64[1] = v389.u32[2];
                    v646.i64[0] = v795.i64[0];
                    v643.i64[0] = v796.i64[0];
                    v646.i64[1] = v795.u32[2];
                    v513[20] = v389;
                    v513[21] = v646;
                    v387.i64[1] = v798.u32[2];
                    v643.i64[1] = v796.u32[2];
                    v513[22] = (float32x4_t)v387;
                    v513[23] = v643;
                    _X12 = (char *)&v513[24];
                  }
                }
              }
              ++v694;
              unint64_t v382 = *(unsigned int *)(v378 + 7688);
              a4 = v678;
              v388.i64[1] = v690;
            }
            ++v383;
          }
          while (v383 < v382);
        }
      }
      else
      {
        uint64_t v76 = *(void *)(v33 + 56);
        uint64_t v75 = *(void *)(v33 + 64);
        _Q0.n128_u32[0] = *(_DWORD *)(v33 + 216);
        float v650 = *(float *)(v33 + 212);
        BOOL v77 = v650 > 0.0;
        if (_Q0.n128_f32[0] > 0.0) {
          BOOL v77 = 1;
        }
        BOOL v651 = v77;
        if (v773) {
          char v78 = 5;
        }
        else {
          char v78 = 1;
        }
        char v665 = v78;
        float v79 = *(float *)(v76 + 28);
        if (v79 <= *(float *)(v75 + 28)) {
          float v79 = *(float *)(v75 + 28);
        }
        float v664 = v79;
        _X8 = a2 + 7556;
        __asm
        {
          PRFM            #0, [X8]
          PRFM            #0, [X26]
        }
        float v83 = 0.0;
        if (!v26) {
          float v83 = a4;
        }
        float v732 = v83;
        unint64_t v84 = *(unsigned int *)(a2 + 7688);
        if (v84)
        {
          uint64_t v85 = 0;
          unsigned int v86 = 0;
          uint64_t v87 = *(void *)(v33 + 144);
          uint64_t v661 = *(void *)(v33 + 136);
          uint64_t v88 = *(void *)(v33 + 40);
          float32x2_t v90 = *(float32x2_t *)v33;
          float32x2_t v89 = *(float32x2_t *)(v33 + 8);
          __int32 v662 = v89.i32[1];
          int v663 = HIDWORD(*(void *)v33);
          float32x2_t v91 = *(float32x2_t *)(v33 + 160);
          unsigned int v92 = *(unsigned __int8 *)(*(void *)(v33 + 24) + 62);
          float32x2_t v93 = vmul_n_f32(vneg_f32((float32x2_t)vdup_lane_s32((int32x2_t)v89, 0)), COERCE_FLOAT(*(void *)(v75 + 32)));
          int32x4_t v94 = *(int32x4_t *)(v33 + 72);
          float32x4_t v95 = *(float32x4_t *)(v33 + 88);
          v95.i64[1] = *(unsigned int *)(v33 + 96);
          float32x4_t v96 = *(float32x4_t *)(v33 + 116);
          v96.i64[1] = *(unsigned int *)(v33 + 124);
          float32x4_t v98 = *(float32x4_t *)v76;
          float32x4_t v97 = *(float32x4_t *)(v76 + 16);
          v98.i32[3] = 0;
          float32x4_t v100 = *(float32x4_t *)v75;
          int8x16_t v99 = *(int8x16_t *)(v75 + 16);
          v100.i32[3] = 0;
          v97.i32[3] = 0;
          v99.i32[3] = 0;
          float32x4_t v751 = (float32x4_t)v99;
          float32x4_t v755 = v97;
          int32x4_t v101 = *(int32x4_t *)(v33 + 100);
          float32x4_t v102 = *(float32x4_t *)(v88 + 28);
          v102.i32[3] = 0;
          float32x4_t v774 = v102;
          float32x4_t v103 = *(float32x4_t *)(v88 + 40);
          uint64_t v648 = *(void *)(v33 + 48);
          float32x2_t v649 = (float *)v88;
          v99.i32[0] = v103.i32[3];
          v103.i32[3] = 0;
          v99.i32[1] = *(_DWORD *)(v88 + 56);
          v99.i64[1] = *(unsigned int *)(v88 + 60);
          float32x4_t v766 = (float32x4_t)v99;
          float32x4_t v769 = v103;
          float32x4_t v104 = *(float32x4_t *)(v648 + 28);
          v104.i32[3] = 0;
          float32x4_t v763 = v104;
          int8x16_t v105 = *(int8x16_t *)(v648 + 40);
          v99.i32[0] = v105.i32[3];
          v105.i32[3] = 0;
          v99.i32[1] = *(_DWORD *)(v648 + 56);
          v99.i64[1] = *(unsigned int *)(v648 + 60);
          float32x4_t v757 = (float32x4_t)v99;
          float32x4_t v759 = (float32x4_t)v105;
          float32x2_t v106 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0);
          v99.i64[0] = 0;
          v99.i32[2] = 0;
          v99.i32[3] = v93.i32[1];
          v105.i64[0] = 0;
          LODWORD(v660) = vmul_f32(*(float32x2_t *)v33, *(float32x2_t *)(v76 + 32)).u32[0];
          v105.i64[1] = LODWORD(v660);
          int8x16_t v675 = vorrq_s8(v99, v105);
          float v107 = a4 * -0.8;
          float32x4_t v108 = v95;
          int8x16_t v109 = (int8x16_t)v94;
          v109.i32[3] = 0;
          float32x4_t v703 = (float32x4_t)vdupq_laneq_s32(v94, 3);
          LODWORD(v699) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v703.f32, *(float32x2_t *)v703.f32).u32[0];
          int8x16_t v110 = (int8x16_t)v101;
          int32x4_t v111 = vdupq_laneq_s32(v101, 3);
          LODWORD(v701) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v111.i8, *(float32x2_t *)v111.i8).u32[0];
          _X22 = v656;
          v110.i32[3] = 0;
          float32x2_t v647 = (float32x2_t)vdup_lane_s32((int32x2_t)_Q0.n128_u64[0], 0);
          __int32 v113 = *(unsigned __int8 *)(*(void *)(v33 + 32) + 62);
          float32x2_t v659 = v93;
          float v658 = -v93.f32[0];
          float32x4_t v654 = v100;
          float32x4_t v655 = v98;
          float32x4_t v653 = vsubq_f32(v98, v100);
          float32x2_t v736 = v89;
          float32x4_t v739 = v96;
          float32x4_t v693 = vsubq_f32(v108, v96);
          float32x4_t v695 = (float32x4_t)v111;
          float32x4_t v705 = (float32x4_t)v109;
          float32x2_t v708 = *(float32x2_t *)v101.i8;
          float32x2_t v712 = *(float32x2_t *)v94.i8;
          float32x2_t v691 = (float32x2_t)vextq_s8(v109, v109, 8uLL).u64[0];
          float32x2_t v689 = (float32x2_t)vext_s8(*(int8x8_t *)v94.i8, (int8x8_t)v691, 4uLL);
          float32x4_t v697 = (float32x4_t)v110;
          float32x2_t v687 = (float32x2_t)vextq_s8(v110, v110, 8uLL).u64[0];
          float32x2_t v685 = (float32x2_t)vext_s8(*(int8x8_t *)v101.i8, (int8x8_t)v687, 4uLL);
          uint64_t v666 = v87;
          float32x2_t v734 = *(float32x2_t *)v33;
          float32x4_t v730 = v108;
          while (1)
          {
            uint64_t v114 = a2 + 4 * v85;
            int v115 = *(_DWORD *)(v114 + 7296);
            if (v115) {
              break;
            }
LABEL_141:
            if (++v85 >= v84) {
              goto LABEL_248;
            }
          }
          unsigned int v116 = *(_DWORD *)(v114 + 7424);
          float v117 = (float32x2_t *)(v87 + ((unint64_t)*(unsigned __int16 *)(a2 + 44 * v116) << 6));
          float v118 = (const float *)&v117[7] + 1;
          float v119 = (float32x4_t *)(_X22 + 80);
          __asm { PRFM            #0, [X22,#0xD0] }
          float32x2_t v121 = vld1_dup_f32(v118);
          __asm { PRFM            #0, [X22,#0x150] }
          *((void *)_X22 + 9) = v661;
          _X22[1] = v671;
          *((float *)_X22 + 3) = v660;
          *((float *)_X22 + 12) = v658;
          *(float32x2_t *)v38.f32 = *v117;
          float32x4_t v123 = v38;
          v123.i32[1] = HIDWORD(*(unint64_t *)v117);
          v123.i32[3] = 0;
          float32x4_t v124 = v123;
          v124.i32[2] = v117[1].i32[0];
          float32x4_t v125 = vmulq_f32(v124, v124);
          v125.i64[0] = vpaddq_f32(v125, v125).u64[0];
          *(float32x2_t *)v125.f32 = vpadd_f32(*(float32x2_t *)v125.f32, *(float32x2_t *)v125.f32);
          float32x2_t v126 = vmul_n_f32(*(float32x2_t *)v125.f32, v660);
          float32x2_t v127 = vmul_f32(v659, *(float32x2_t *)v125.f32);
          float32x2_t v668 = *v117;
          *((float32x2_t *)_X22 + 4) = *v117;
          *((_DWORD *)_X22 + 10) = v124.i32[2];
          *((float *)_X22 + 11) = v664;
          float32x2_t v742 = *(float32x2_t *)v123.f32;
          float32x4_t v748 = v124;
          unsigned int v673 = v86;
          if (v116 == 0xFFFF)
          {
            float32x2_t v128 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
          }
          else
          {
            float32x4_t v129 = vmulq_f32(v655, v124);
            v129.i64[0] = vpaddq_f32(v129, v129).u64[0];
            float32x2_t v130 = vpadd_f32(*(float32x2_t *)v129.f32, *(float32x2_t *)v129.f32);
            float32x4_t v131 = vmulq_f32(v654, v124);
            v131.i64[0] = vpaddq_f32(v131, v131).u64[0];
            float32x2_t v132 = vpadd_f32(*(float32x2_t *)v131.f32, *(float32x2_t *)v131.f32);
            float32x2_t v133 = (float32x2_t)vextq_s8((int8x16_t)v124, (int8x16_t)v124, 4uLL).u64[0];
            float32x2_t v134 = vneg_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v124, (int8x16_t)v124, 8uLL));
            float32x2_t v128 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
            float32x2_t v135 = vneg_f32(*(float32x2_t *)v123.f32);
            _X9 = (float32x4_t *)(_X22 + 80);
            do
            {
              unsigned int v137 = (unsigned __int16 *)(a2 + 44 * v116);
              uint64_t v138 = *((unsigned __int8 *)v137 + 5);
              if (*((unsigned char *)v137 + 5))
              {
                uint64_t v139 = 0;
                uint64_t v140 = v87 + ((unint64_t)*v137 << 6);
                do
                {
                  __asm { PRFM            #0, [X9,#0x100] }
                  uint64_t v142 = v140 + (v139 << 6);
                  v143.i64[0] = *(void *)(v142 + 16);
                  v143.i64[1] = *(unsigned int *)(v142 + 24);
                  float32x2_t v144 = *(float32x2_t *)(v142 + 12);
                  v145.i64[0] = *(void *)(v142 + 32);
                  unsigned int v146 = *(_DWORD *)(v142 + 40);
                  int8x16_t v147 = (int8x16_t)vsubq_f32(v143, v108);
                  int8x16_t v148 = (int8x16_t)vsubq_f32(v143, v739);
                  int8x8_t v149 = (int8x8_t)vmla_f32(vmul_f32(v742, (float32x2_t)*(_OWORD *)&vextq_s8(v147, v147, 8uLL)), *(float32x2_t *)v147.i8, v134);
                  float32x2_t v150 = vmla_f32(vmul_f32(v133, *(float32x2_t *)v147.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v147, v147, 4uLL), v135);
                  float32x2_t v151 = vmla_f32(vmul_f32(v133, *(float32x2_t *)v148.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v148, v148, 4uLL), v135);
                  float32x4_t v152 = vmulq_lane_f32(v774, v150, 1);
                  v152.i32[3] = 0;
                  float32x4_t v153 = vmulq_n_f32(v769, *(float *)v149.i32);
                  v153.i32[3] = 0;
                  int8x8_t v154 = (int8x8_t)vmla_f32(vmul_f32(v742, (float32x2_t)*(_OWORD *)&vextq_s8(v148, v148, 8uLL)), *(float32x2_t *)v148.i8, v134);
                  float32x4_t v155 = vmulq_n_f32(v766, v150.f32[0]);
                  v155.i32[3] = 0;
                  float32x4_t v156 = vaddq_f32(vaddq_f32(v152, v153), v155);
                  float32x4_t v157 = vmulq_lane_f32(v763, v151, 1);
                  v157.i32[3] = 0;
                  float32x4_t v158 = vmulq_n_f32(v759, *(float *)v154.i32);
                  v158.i32[3] = 0;
                  float32x4_t v159 = vmulq_n_f32(v757, v151.f32[0]);
                  v159.i32[3] = 0;
                  float32x4_t v160 = vaddq_f32(vaddq_f32(v157, v158), v159);
                  float32x4_t v161 = vmulq_f32(v156, v156);
                  v161.i64[0] = vpaddq_f32(v161, v161).u64[0];
                  float32x4_t v162 = vmulq_f32(v160, v160);
                  v162.i64[0] = vpaddq_f32(v162, v162).u64[0];
                  float32x2_t v163 = vadd_f32(vadd_f32(v126, vmul_lane_f32(vpadd_f32(*(float32x2_t *)v161.f32, *(float32x2_t *)v161.f32), v90, 1)), vsub_f32(vmul_lane_f32(vpadd_f32(*(float32x2_t *)v162.f32, *(float32x2_t *)v162.f32), v89, 1), v127));
                  float32x2_t v164 = vrecpe_f32(v163);
                  int v165 = 4;
                  do
                  {
                    float32x2_t v166 = vrecps_f32(v163, v164);
                    float32x2_t v164 = vmul_f32(v164, v166);
                    --v165;
                  }
                  while (v165);
                  v166.i32[0] = 0;
                  v39.i32[0] = v113;
                  float32x2_t v39 = (float32x2_t)vdup_lane_s8(vceq_s8((int8x8_t)v39, (int8x8_t)v166), 0);
                  *(int8x8_t *)v167.f32 = vext_s8((int8x8_t)v151, v154, 4uLL);
                  v167.i64[1] = v151.u32[0];
                  float32x4_t v168 = vmulq_f32(v751, v167);
                  v168.i64[0] = vpaddq_f32(v168, v168).u64[0];
                  *(float32x2_t *)v168.f32 = vadd_f32(v132, vpadd_f32(*(float32x2_t *)v168.f32, *(float32x2_t *)v168.f32));
                  float32x2_t v169 = (float32x2_t)vbsl_s8((int8x8_t)v39, (int8x8_t)0x8000000080000000, *(int8x8_t *)v168.f32);
                  *(int8x8_t *)v170.f32 = vext_s8((int8x8_t)v150, v149, 4uLL);
                  v170.i64[1] = v150.u32[0];
                  float32x4_t v171 = vmulq_f32(v755, v170);
                  v171.i64[0] = vpaddq_f32(v171, v171).u64[0];
                  *(float32x2_t *)v171.f32 = vadd_f32(v130, vpadd_f32(*(float32x2_t *)v171.f32, *(float32x2_t *)v171.f32));
                  float32x2_t v172 = (float32x2_t)vbsl_s8(vdup_lane_s8(vceq_s8((int8x8_t)__PAIR64__(v751.u32[1], v92), (int8x8_t)v166), 0), 0, *(int8x8_t *)v171.f32);
                  float v119 = _X9 + 3;
                  float32x2_t v173 = vsub_f32(v144, v91);
                  *(float32x2_t *)v171.f32 = vsub_f32(*(float32x2_t *)v171.f32, *(float32x2_t *)v168.f32);
                  *(float32x2_t *)v168.f32 = vneg_f32(*(float32x2_t *)v171.f32);
                  v145.i64[1] = v146;
                  float32x4_t v174 = vmulq_f32(v748, v145);
                  v174.i64[0] = vpaddq_f32(v174, v174).u64[0];
                  v156.i32[3] = v173.i32[0];
                  v160.i32[3] = vand_s8((int8x8_t)v164, (int8x8_t)vcgtz_f32(v163)).u32[0];
                  *_X9 = v156;
                  _X9[1] = v160;
                  _X9[2].i32[0] = vadd_f32(v169, vsub_f32(vadd_f32(vpadd_f32(*(float32x2_t *)v174.f32, *(float32x2_t *)v174.f32), (float32x2_t)vbsl_s8(vand_s8(vand_s8((int8x8_t)vcgt_f32(v106, *(float32x2_t *)v171.f32), (int8x8_t)vcgtz_f32(v121)), (int8x8_t)vcgt_f32(*(float32x2_t *)v168.f32, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)&a5, v173), 0))), (int8x8_t)vmul_f32(v121, *(float32x2_t *)v168.f32), 0)), v172)).u32[0];
                  _X9[2].f32[1] = v107;
                  float32x2_t v128 = vmin_f32(v128, (float32x2_t)vdup_lane_s32((int32x2_t)v173, 0));
                  ++v139;
                  _X9 += 3;
                }
                while (v139 != v138);
              }
              else
              {
                float v119 = _X9;
              }
              unsigned int v116 = *(unsigned __int16 *)(a2 + 44 * v116 + 2);
              _X9 = v119;
            }
            while (v116 != 0xFFFF);
          }
          bzero(v119, (4 * v115));
          _X25 = &v119->i8[4 * ((v115 + 3) & 0xFFFFFFFC)];
          __int8 v177 = v117[6].i8[0];
          float32x2_t v176 = v117 + 6;
          float32x2_t v178 = (const float *)&v176[1];
          v180.i64[1] = v675.i64[1];
          v180.i32[0] = v176[-1].i32[1];
          float32x4_t v179 = vld1q_dup_f32(v178);
          v180.i32[1] = v179.i32[1];
          if (v177)
          {
            _X22[2] = v115;
            unsigned int v183 = v673;
          }
          else
          {
            uint64_t v181 = a2 + 104 * v85;
            int v182 = *(unsigned __int16 *)(v181 + 2818);
            _X22[2] = v115;
            unsigned int v183 = v673;
            if (v182)
            {
              float v184 = (unsigned int *)(a2 + 4 * v85 + 7424);
              float v185 = (_WORD *)(v181 + 2818);
              _X22[3] = 2 * v182;
              *_X22 = v665;
              *((int8x16_t *)_X22 + 1) = v180;
              *((_DWORD *)_X22 + 1) = v663;
              *((_DWORD *)_X22 + 2) = v662;
              *(int32x2_t *)v180.i8 = vdup_lane_s32((int32x2_t)v668, 1);
              *((_DWORD *)_X22 + 14) = 0;
              v38.i64[1] = 0;
              *(int8x8_t *)v186.i8 = vext_s8(0, (int8x8_t)vneg_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v748, 2)), 4uLL);
              v186.i64[1] = v180.u32[0];
              *(int8x8_t *)v180.i8 = vext_s8((int8x8_t)vneg_f32(*(float32x2_t *)v180.i8), (int8x8_t)v668, 4uLL);
              int8x16_t v187 = vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32((float32x2_t)vdup_n_s32(0x3F3504F3u), vabs_f32((float32x2_t)vdup_lane_s32((int32x2_t)v668, 0))), 0), 0x1FuLL)), v186, v180);
              float32x4_t v188 = vmulq_f32(v653, v748);
              v188.i64[0] = vpaddq_f32(v188, v188).u64[0];
              float32x4_t v189 = vmulq_n_f32(v748, vpadd_f32(*(float32x2_t *)v188.f32, *(float32x2_t *)v188.f32).f32[0]);
              v189.i32[3] = 0;
              float32x4_t v190 = vsubq_f32(v653, v189);
              float32x4_t v191 = vmulq_f32(v190, v190);
              v191.i64[0] = vpaddq_f32(v191, v191).u64[0];
              float32x4_t v192 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v191.f32, *(float32x2_t *)v191.f32), (float32x2_t)vdup_n_s32(0x38D1B717u)), 0), (int8x16_t)v190, v187);
              float32x4_t v193 = vmulq_f32(v192, v192);
              v193.i64[0] = vpaddq_f32(v193, v193).u64[0];
              float32x2_t v194 = vpadd_f32(*(float32x2_t *)v193.f32, *(float32x2_t *)v193.f32);
              float32x2_t v195 = vrsqrte_f32(v194);
              int v196 = 4;
              uint64_t v87 = v666;
              float32x2_t v90 = v734;
              float32x2_t v89 = v736;
              float32x4_t v108 = v730;
              do
              {
                float32x2_t v195 = vmul_f32(v195, vrsqrts_f32(vmul_f32(v195, v195), v194));
                --v196;
              }
              while (v196);
              float32x2_t v197 = vmul_f32(v194, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v194), 0), v670, (int8x8_t)v195));
              float32x2_t v198 = vrecpe_f32(v197);
              int v199 = 4;
              do
              {
                float32x2_t v198 = vmul_f32(v198, vrecps_f32(v197, v198));
                --v199;
              }
              while (v199);
              float32x2_t v200 = (float32x2_t)vextq_s8((int8x16_t)v748, (int8x16_t)v748, 8uLL).u64[0];
              float32x4_t v201 = vmulq_n_f32(v192, v198.f32[0]);
              float32x4_t v202 = v201;
              v202.i32[3] = 0;
              float32x2_t v203 = (float32x2_t)vextq_s8((int8x16_t)v202, (int8x16_t)v202, 8uLL).u64[0];
              float32x2_t v727 = (float32x2_t)vext_s8(*(int8x8_t *)v201.f32, (int8x8_t)v203, 4uLL);
              float32x2_t v724 = vneg_f32(v203);
              int8x8_t v204 = (int8x8_t)vmls_f32(vmul_f32(v742, v727), (float32x2_t)vext_s8((int8x8_t)v742, (int8x8_t)v200, 4uLL), *(float32x2_t *)v201.f32);
              *(int8x8_t *)v205.f32 = vext_s8(v204, (int8x8_t)vmls_f32(vmul_f32(v200, *(float32x2_t *)v201.f32), v742, v203), 4uLL);
              v205.i64[1] = v204.u32[0];
              float32x4_t v743 = v201;
              float32x2_t v721 = vneg_f32(*(float32x2_t *)v201.f32);
              float32x2_t v206 = vpadd_f32(vmul_f32(*(float32x2_t *)v205.f32, *(float32x2_t *)v205.f32), vmul_f32((float32x2_t)v204.u32[0], (float32x2_t)v204.u32[0]));
              float32x2_t v207 = vpadd_f32(v206, v206);
              float32x2_t v208 = vrsqrte_f32(v207);
              int v209 = 4;
              do
              {
                float32x2_t v208 = vmul_f32(v208, vrsqrts_f32(vmul_f32(v208, v208), v207));
                --v209;
              }
              while (v209);
              float32x2_t v210 = vmul_f32(v207, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v207), 0), v670, (int8x8_t)v208));
              float32x2_t v211 = vrecpe_f32(v210);
              int v212 = 4;
              do
              {
                float32x2_t v211 = vmul_f32(v211, vrecps_f32(v210, v211));
                --v212;
              }
              while (v212);
              *((void *)_X22 + 8) = v657 + 104 * v673;
              float v213 = 0.5;
              if (*v185 != 2) {
                float v213 = 1.0;
              }
              if ((v176->i8[0] & 4) != 0) {
                float v214 = v213;
              }
              else {
                float v214 = 1.0;
              }
              if (*v185)
              {
                unint64_t v215 = 0;
                float32x4_t v216 = vmulq_n_f32(v205, v211.f32[0]);
                float32x4_t v217 = v216;
                v217.i32[3] = 0;
                float32x4_t v218 = vmulq_f32(v655, v202);
                v218.i64[0] = vpaddq_f32(v218, v218).u64[0];
                float32x2_t v219 = vpadd_f32(*(float32x2_t *)v218.f32, *(float32x2_t *)v218.f32);
                float32x4_t v220 = vmulq_f32(v654, v202);
                v220.i64[0] = vpaddq_f32(v220, v220).u64[0];
                float32x2_t v681 = vpadd_f32(*(float32x2_t *)v220.f32, *(float32x2_t *)v220.f32);
                float32x2_t v683 = v219;
                float32x4_t v221 = vmulq_f32(v655, v217);
                v221.i64[0] = vpaddq_f32(v221, v221).u64[0];
                float32x2_t v222 = vpadd_f32(*(float32x2_t *)v221.f32, *(float32x2_t *)v221.f32);
                float32x4_t v223 = vmulq_f32(v654, v217);
                v223.i64[0] = vpaddq_f32(v223, v223).u64[0];
                float32x2_t v677 = vpadd_f32(*(float32x2_t *)v223.f32, *(float32x2_t *)v223.f32);
                float32x2_t v679 = v222;
                v223.i64[0] = vextq_s8((int8x16_t)v217, (int8x16_t)v217, 8uLL).u64[0];
                float32x2_t v718 = (float32x2_t)vext_s8(*(int8x8_t *)v216.f32, *(int8x8_t *)v223.f32, 4uLL);
                float32x2_t v715 = vneg_f32(*(float32x2_t *)v223.f32);
                float32x2_t v713 = vneg_f32(*(float32x2_t *)v216.f32);
                do
                {
                  float v224 = (float32x4_t *)_X25;
                  __asm
                  {
                    PRFM            #0, [X25,#0x100]
                    PRFM            #0, [X25,#0x180]
                  }
                  unsigned int v227 = *(unsigned __int16 *)(a2 + 4 * v85 + 2 * v215 + 7556);
                  if (v227 == 0xFFFF) {
                    unsigned int v227 = *(unsigned __int16 *)(a2 + 44 * *v184);
                  }
                  uint64_t v228 = a2 + 104 * v85 + 12 * v215;
                  v229.i64[0] = *(void *)(v228 + 2856);
                  v229.i64[1] = *(unsigned int *)(v228 + 2864);
                  v230.i64[0] = *(void *)(v228 + 2880);
                  v230.i64[1] = *(unsigned int *)(v228 + 2888);
                  float32x4_t v231 = vmulq_n_f32(v229, v699);
                  v231.i32[3] = 0;
                  float32x2_t v232 = (float32x2_t)vextq_s8((int8x16_t)v229, (int8x16_t)v229, 8uLL).u64[0];
                  int8x8_t v233 = (int8x8_t)vmls_f32(vmul_f32(v712, (float32x2_t)vext_s8(*(int8x8_t *)v229.f32, (int8x8_t)v232, 4uLL)), v689, *(float32x2_t *)v229.f32);
                  *(int8x8_t *)v234.f32 = vext_s8(v233, (int8x8_t)vmls_f32(vmul_f32(v691, *(float32x2_t *)v229.f32), v712, v232), 4uLL);
                  v234.i64[1] = v233.u32[0];
                  float32x4_t v235 = vmlaq_f32(v231, v703, v234);
                  v235.i64[1] = vextq_s8((int8x16_t)v235, (int8x16_t)v235, 8uLL).u32[0];
                  float32x4_t v236 = vmulq_f32(v705, v229);
                  v236.i64[0] = vpaddq_f32(v236, v236).u64[0];
                  float32x4_t v237 = vmlaq_n_f32(v235, v705, vpadd_f32(*(float32x2_t *)v236.f32, *(float32x2_t *)v236.f32).f32[0]);
                  float32x4_t v238 = vaddq_f32(v237, v237);
                  float32x4_t v239 = v238;
                  v239.i32[3] = 0;
                  float32x4_t v240 = vmulq_n_f32(v230, v701);
                  v240.i32[3] = 0;
                  v229.i64[0] = vextq_s8((int8x16_t)v230, (int8x16_t)v230, 8uLL).u64[0];
                  *(float32x2_t *)v237.f32 = vmls_f32(vmul_f32(v708, (float32x2_t)vext_s8(*(int8x8_t *)v230.f32, *(int8x8_t *)v229.f32, 4uLL)), v685, *(float32x2_t *)v230.f32);
                  *(int8x8_t *)v229.f32 = vext_s8(*(int8x8_t *)v237.f32, (int8x8_t)vmls_f32(vmul_f32(v687, *(float32x2_t *)v230.f32), v708, *(float32x2_t *)v229.f32), 4uLL);
                  v229.i64[1] = v237.u32[0];
                  float32x4_t v241 = vmlaq_f32(v240, v695, v229);
                  v241.i64[1] = vextq_s8((int8x16_t)v241, (int8x16_t)v241, 8uLL).u32[0];
                  _X25 += 128;
                  float32x4_t v242 = vmulq_f32(v697, v230);
                  v242.i64[0] = vpaddq_f32(v242, v242).u64[0];
                  float32x4_t v243 = vmlaq_n_f32(v241, v697, vpadd_f32(*(float32x2_t *)v242.f32, *(float32x2_t *)v242.f32).f32[0]);
                  float32x4_t v244 = vaddq_f32(v243, v243);
                  float32x4_t v245 = v244;
                  v245.i32[3] = 0;
                  uint64_t v246 = v666 + ((unint64_t)v227 << 6);
                  v247.i64[0] = *(void *)(v246 + 32);
                  unsigned int v248 = *(_DWORD *)(v246 + 40);
                  float32x2_t v249 = (float32x2_t)vextq_s8((int8x16_t)v239, (int8x16_t)v239, 8uLL).u64[0];
                  float32x2_t v250 = (float32x2_t)vext_s8(*(int8x8_t *)v238.f32, (int8x8_t)v249, 4uLL);
                  int8x8_t v251 = (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v743.f32, v249), *(float32x2_t *)v238.f32, v724);
                  float32x2_t v252 = vmla_f32(vmul_f32(v727, *(float32x2_t *)v238.f32), v250, v721);
                  uint64_t v253 = v252.u32[0];
                  float32x2_t v254 = (float32x2_t)vextq_s8((int8x16_t)v245, (int8x16_t)v245, 8uLL).u64[0];
                  float32x2_t v39 = (float32x2_t)vext_s8(*(int8x8_t *)v244.f32, (int8x8_t)v254, 4uLL);
                  float32x2_t v255 = vmla_f32(vmul_f32(v727, *(float32x2_t *)v244.f32), v39, v721);
                  float32x4_t v256 = vmulq_lane_f32(v774, v252, 1);
                  v256.i32[3] = 0;
                  float32x4_t v257 = vmulq_n_f32(v769, *(float *)v251.i32);
                  v257.i32[3] = 0;
                  int8x8_t v258 = (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v743.f32, v254), *(float32x2_t *)v244.f32, v724);
                  float32x4_t v259 = vmulq_n_f32(v766, v252.f32[0]);
                  v259.i32[3] = 0;
                  float32x4_t v260 = vaddq_f32(vaddq_f32(v256, v257), v259);
                  float32x4_t v261 = vmulq_lane_f32(v763, v255, 1);
                  v261.i32[3] = 0;
                  float32x4_t v262 = vmulq_n_f32(v759, *(float *)v258.i32);
                  v262.i32[3] = 0;
                  float32x4_t v263 = vmulq_n_f32(v757, v255.f32[0]);
                  v263.i32[3] = 0;
                  float32x4_t v264 = vaddq_f32(vaddq_f32(v261, v262), v263);
                  float32x4_t v265 = vmulq_f32(v260, v260);
                  v265.i64[0] = vpaddq_f32(v265, v265).u64[0];
                  float32x4_t v266 = vmulq_f32(v264, v264);
                  v266.i64[0] = vpaddq_f32(v266, v266).u64[0];
                  float32x2_t v267 = vadd_f32(vadd_f32(v126, vmul_lane_f32(vpadd_f32(*(float32x2_t *)v265.f32, *(float32x2_t *)v265.f32), v734, 1)), vsub_f32(vmul_lane_f32(vpadd_f32(*(float32x2_t *)v266.f32, *(float32x2_t *)v266.f32), v736, 1), v127));
                  float32x2_t v268 = vrecpe_f32(v267);
                  int v269 = 4;
                  do
                  {
                    float32x2_t v268 = vmul_f32(v268, vrecps_f32(v267, v268));
                    --v269;
                  }
                  while (v269);
                  v247.i64[1] = v248;
                  float32x4_t v270 = vmulq_f32(v202, v247);
                  float32x4_t v38 = vpaddq_f32(v270, v270);
                  *(float32x2_t *)v38.f32 = vpadd_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32);
                  if (v92)
                  {
                    *(int8x8_t *)v271.f32 = vext_s8((int8x8_t)v252, v251, 4uLL);
                    v271.i64[1] = v253;
                    float32x4_t v272 = vmulq_f32(v755, v271);
                    v272.i64[0] = vpaddq_f32(v272, v272).u64[0];
                    *(float32x2_t *)v38.f32 = vsub_f32(*(float32x2_t *)v38.f32, vadd_f32(v683, vpadd_f32(*(float32x2_t *)v272.f32, *(float32x2_t *)v272.f32)));
                  }
                  float32x4_t v273 = vaddq_f32(v693, vsubq_f32(v239, v245));
                  float32x2_t v274 = (float32x2_t)vdup_n_s32(0x3F4CCCCDu);
                  int8x8_t v275 = vand_s8((int8x8_t)vdup_lane_s32(vcgtz_f32(v267), 0), (int8x8_t)vmul_f32(v268, v274));
                  if (v113)
                  {
                    *(int8x8_t *)v276.f32 = vext_s8((int8x8_t)v255, v258, 4uLL);
                    v276.i64[1] = v255.u32[0];
                    float32x4_t v277 = vmulq_f32(v751, v276);
                    v277.i64[0] = vpaddq_f32(v277, v277).u64[0];
                    *(float32x2_t *)v38.f32 = vadd_f32(*(float32x2_t *)v38.f32, vadd_f32(v681, vpadd_f32(*(float32x2_t *)v277.f32, *(float32x2_t *)v277.f32)));
                  }
                  float32x2_t v90 = v734;
                  float32x4_t v278 = vmulq_f32(v202, v273);
                  v278.i64[0] = vpaddq_f32(v278, v278).u64[0];
                  float32x4_t v279 = v743;
                  v279.i32[3] = vpadd_f32(*(float32x2_t *)&v278, *(float32x2_t *)&v278).i32[1];
                  v260.i32[3] = v38.i32[1];
                  *float v224 = v279;
                  v224[1] = v260;
                  v264.i32[3] = v275.i32[1];
                  v224[2] = v264;
                  v224[3].i32[1] = 0;
                  v224[3].f32[2] = v214;
                  v224[3].f32[0] = v732;
                  float32x4_t v280 = vmulq_f32(v217, v247);
                  int8x8_t v281 = (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v216.f32, v249), *(float32x2_t *)v238.f32, v715);
                  float32x2_t v282 = vmla_f32(vmul_f32(v718, *(float32x2_t *)v238.f32), v250, v713);
                  float32x2_t v283 = vmla_f32(vmul_f32(v718, *(float32x2_t *)v244.f32), v39, v713);
                  uint64_t v284 = v283.u32[0];
                  float32x4_t v285 = vmulq_lane_f32(v774, v282, 1);
                  v285.i32[3] = 0;
                  float32x4_t v286 = vmulq_n_f32(v769, *(float *)v281.i32);
                  v286.i32[3] = 0;
                  int8x8_t v287 = (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v216.f32, v254), *(float32x2_t *)v244.f32, v715);
                  float32x4_t v288 = vmulq_n_f32(v766, v282.f32[0]);
                  v288.i32[3] = 0;
                  float32x4_t v289 = vaddq_f32(vaddq_f32(v285, v286), v288);
                  float32x4_t v290 = vmulq_lane_f32(v763, v283, 1);
                  v290.i32[3] = 0;
                  float32x4_t v291 = vmulq_n_f32(v759, *(float *)v287.i32);
                  v291.i32[3] = 0;
                  float32x4_t v292 = vmulq_n_f32(v757, v283.f32[0]);
                  v292.i32[3] = 0;
                  float32x4_t v293 = vaddq_f32(vaddq_f32(v290, v291), v292);
                  float32x4_t v294 = vmulq_f32(v289, v289);
                  v294.i64[0] = vpaddq_f32(v294, v294).u64[0];
                  float32x4_t v295 = vmulq_f32(v293, v293);
                  v295.i64[0] = vpaddq_f32(v295, v295).u64[0];
                  float32x2_t v89 = v736;
                  float32x2_t v296 = vadd_f32(vadd_f32(v126, vmul_lane_f32(vpadd_f32(*(float32x2_t *)v294.f32, *(float32x2_t *)v294.f32), v734, 1)), vsub_f32(vmul_lane_f32(vpadd_f32(*(float32x2_t *)v295.f32, *(float32x2_t *)v295.f32), v736, 1), v127));
                  float32x2_t v297 = vrecpe_f32(v296);
                  int v298 = 4;
                  do
                  {
                    float32x2_t v297 = vmul_f32(v297, vrecps_f32(v296, v297));
                    --v298;
                  }
                  while (v298);
                  float32x2_t v299 = (float32x2_t)vpaddq_f32(v280, v280).u64[0];
                  float32x2_t v300 = vpadd_f32(v299, v299);
                  float32x4_t v108 = v730;
                  if (v92)
                  {
                    *(int8x8_t *)v301.f32 = vext_s8((int8x8_t)v282, v281, 4uLL);
                    v301.i64[1] = v282.u32[0];
                    float32x4_t v302 = vmulq_f32(v755, v301);
                    float32x4_t v38 = vpaddq_f32(v302, v302);
                    float32x2_t v300 = vsub_f32(v300, vadd_f32(v679, vpadd_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32)));
                  }
                  if (v113)
                  {
                    *(int8x8_t *)v303.f32 = vext_s8((int8x8_t)v283, v287, 4uLL);
                    v303.i64[1] = v284;
                    float32x4_t v304 = vmulq_f32(v751, v303);
                    v304.i64[0] = vpaddq_f32(v304, v304).u64[0];
                    float32x2_t v300 = vadd_f32(v300, vadd_f32(v677, vpadd_f32(*(float32x2_t *)v304.f32, *(float32x2_t *)v304.f32)));
                  }
                  float32x4_t v305 = vmulq_f32(v217, v273);
                  v305.i64[0] = vpaddq_f32(v305, v305).u64[0];
                  float32x4_t v306 = v216;
                  v306.i32[3] = vpadd_f32(*(float32x2_t *)&v305, *(float32x2_t *)&v305).i32[1];
                  v289.i32[3] = v300.i32[1];
                  v224[4] = v306;
                  v224[5] = v289;
                  v293.i32[3] = vand_s8((int8x8_t)vdup_lane_s32(vcgtz_f32(v296), 0), (int8x8_t)vmul_f32(v297, v274)).i32[1];
                  v224[6] = v293;
                  v224[7].i32[1] = 0;
                  v224[7].f32[2] = v214;
                  v224[7].f32[0] = v732;
                  ++v215;
                  unint64_t v307 = (unsigned __int16)*v185;
                }
                while (v215 < v307);
                BOOL v308 = v651;
                if (v307 != 1) {
                  BOOL v308 = 0;
                }
                if (v308)
                {
                  *(float32x2_t *)v217.f32 = vmul_n_f32(vmax_f32(vneg_f32(v128), 0), v650);
                  float32x2_t v309 = vrsqrte_f32(*(float32x2_t *)v217.f32);
                  int v310 = 4;
                  do
                  {
                    float32x2_t v309 = vmul_f32(v309, vrsqrts_f32(vmul_f32(v309, v309), *(float32x2_t *)v217.f32));
                    --v310;
                  }
                  while (v310);
                  ++_X22[3];
                  unsigned int v311 = (float *)(a2 + 104 * v85);
                  float v312 = v311[726];
                  float v313 = v311[729];
                  float v314 = v649[1];
                  float v316 = v649[2];
                  float v315 = v649[3];
                  float v317 = v311[728];
                  float v318 = v311[727];
                  float v319 = (float)((float)((float)(v313 * *v649) + (float)(v315 * v312)) + (float)(v314 * v317))
                       - (float)(v318 * v316);
                  float v320 = (float)((float)((float)(v313 * v314) + (float)(v315 * v318)) + (float)(v316 * v312))
                       - (float)(v317 * *v649);
                  float v321 = (float)((float)((float)(v313 * v316) + (float)(v315 * v317)) + (float)(*v649 * v318))
                       - (float)(v312 * v314);
                  float v322 = (float)((float)((float)(v315 * v313) - (float)(*v649 * v312)) - (float)(v314 * v318))
                       - (float)(v316 * v317);
                  float v324 = *(float *)(v648 + 8);
                  float v323 = *(float *)(v648 + 12);
                  float v325 = *(float *)(v648 + 4);
                  float v326 = (float)((float)((float)(v322 * *(float *)v648) - (float)(v319 * v323)) - (float)(v320 * v324))
                       + (float)(v325 * v321);
                  float v327 = (float)((float)((float)(v322 * v325) - (float)(v320 * v323)) - (float)(v321 * *(float *)v648))
                       + (float)(v324 * v319);
                  float v328 = (float)((float)((float)(v322 * v324) - (float)(v321 * v323)) - (float)(v319 * v325))
                       + (float)(*(float *)v648 * v320);
                  float v329 = (float)((float)((float)(*(float *)v648 * v319) + (float)(v322 * v323)) + (float)(v320 * v325))
                       + (float)(v321 * v324);
                  uint64_t v330 = (float *)(v666 + ((unint64_t)*(unsigned __int16 *)(a2 + 44 * *v184) << 6));
                  float v331 = v330[1];
                  float v332 = v330[2];
                  float v333 = v326 * *v330;
                  float v334 = v327 * v331;
                  float v335 = v328 * v332;
                  float v336 = sqrtf((float)((float)((float)(v334 * v334) + (float)(v333 * v333)) + (float)(v335 * v335))+ (float)(v329 * v329));
                  if (v336 != 0.0)
                  {
                    float v333 = v333 / v336;
                    float v334 = v334 / v336;
                    float v335 = v335 / v336;
                    float v329 = v329 / v336;
                  }
                  float32x2_t v337 = v274;
                  *(float32x2_t *)v217.f32 = vmax_f32(v647, vmul_f32(*(float32x2_t *)v217.f32, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(*(float32x2_t *)v217.f32), 0), v670, (int8x8_t)v309)));
                  float32x4_t v744 = v217;
                  _X25 = (char *)&v224[12];
                  float v338 = (float)((float)((float)(v331 * v334) + (float)(v333 * *v330)) + (float)(v335 * v332))
                       + (float)(v329 * 0.0);
                  float32x4_t v339 = vmulq_n_f32(v774, v668.f32[0]);
                  v339.i32[3] = 0;
                  float32x4_t v340 = vmulq_lane_f32(v769, v668, 1);
                  v340.i32[3] = 0;
                  float32x4_t v341 = vmulq_laneq_f32(v766, v748, 2);
                  v341.i32[3] = 0;
                  float32x4_t v342 = vaddq_f32(vaddq_f32(v339, v340), v341);
                  float32x4_t v343 = vmulq_n_f32(v763, v668.f32[0]);
                  v343.i32[3] = 0;
                  float32x4_t v344 = vmulq_lane_f32(v759, v668, 1);
                  v344.i32[3] = 0;
                  float32x4_t v345 = vmulq_laneq_f32(v757, v748, 2);
                  v345.i32[3] = 0;
                  float32x4_t v725 = vaddq_f32(vaddq_f32(v343, v344), v345);
                  float32x4_t v728 = v342;
                  float32x4_t v346 = vmulq_f32(v342, v342);
                  v346.i64[0] = vpaddq_f32(v346, v346).u64[0];
                  float32x4_t v347 = vmulq_f32(v725, v725);
                  v347.i64[0] = vpaddq_f32(v347, v347).u64[0];
                  float32x2_t v348 = vadd_f32(vmul_lane_f32(vpadd_f32(*(float32x2_t *)v346.f32, *(float32x2_t *)v346.f32), v734, 1), vmul_lane_f32(vpadd_f32(*(float32x2_t *)v347.f32, *(float32x2_t *)v347.f32), v736, 1));
                  float32x2_t v349 = vrecpe_f32(v348);
                  int v350 = 4;
                  do
                  {
                    float32x2_t v349 = vmul_f32(v349, vrecps_f32(v348, v349));
                    --v350;
                  }
                  while (v350);
                  float v351 = v338 / v329;
                  if ((float)(v336 + -0.000001) < 0.0) {
                    float v351 = 0.0;
                  }
                  *(float *)v352.i32 = atanf(v351);
                  if (v92)
                  {
                    float32x4_t v353 = v748;
                    float32x4_t v354 = vmulq_f32(v755, v748);
                    v354.i64[0] = vpaddq_f32(v354, v354).u64[0];
                    float32x2_t v355 = vpadd_f32(*(float32x2_t *)v354.f32, *(float32x2_t *)v354.f32);
                    unsigned int v183 = v673;
                    uint64_t v87 = v666;
                    float32x2_t v90 = v734;
                    float32x2_t v89 = v736;
                  }
                  else
                  {
                    v355.i32[1] = 0;
                    unsigned int v183 = v673;
                    uint64_t v87 = v666;
                    float32x2_t v90 = v734;
                    float32x2_t v89 = v736;
                    float32x4_t v353 = v748;
                  }
                  v38.i64[1] = v744.i64[1];
                  float32x4_t v357 = v725;
                  float32x4_t v356 = v728;
                  if (v113)
                  {
                    float32x4_t v358 = vmulq_f32(v751, v353);
                    v358.i64[0] = vpaddq_f32(v358, v358).u64[0];
                    float32x2_t v355 = vpadd_f32(*(float32x2_t *)v358.f32, *(float32x2_t *)v358.f32);
                  }
                  *(float *)v352.i32 = -*(float *)v352.i32;
                  v359.i64[0] = 0;
                  v359.i32[2] = 0;
                  v359.i32[3] = vdupq_lane_s32(v352, 0).i32[3];
                  v356.i32[3] = v355.i32[1];
                  v224[8] = v359;
                  v224[9] = v356;
                  v357.i32[3] = vand_s8((int8x8_t)vdup_lane_s32(vcgtz_f32(v348), 0), (int8x8_t)vmul_f32(v349, v337)).i32[1];
                  v224[10] = v357;
                  v224[11].f32[0] = v732;
                  v224[11].i32[1] = 0;
                  v224[11].i32[2] = v744.i32[0];
                  float32x4_t v108 = v730;
                }
              }
              goto LABEL_140;
            }
          }
          _X22[3] = 0;
          *_X22 = v665;
          *((int8x16_t *)_X22 + 1) = v180;
          *((_DWORD *)_X22 + 1) = v663;
          *((_DWORD *)_X22 + 2) = v662;
          *((_DWORD *)_X22 + 14) = 0;
          uint64_t v87 = v666;
          float32x2_t v90 = v734;
          float32x2_t v89 = v736;
          float32x4_t v108 = v730;
LABEL_140:
          unsigned int v86 = v183 + 1;
          unint64_t v84 = *(unsigned int *)(a2 + 7688);
          _X22 = _X25;
          goto LABEL_141;
        }
      }
LABEL_248:
      *(_DWORD *)&v656[v652] = 0;
    }
    return 1;
  }
  int v41 = 0;
  int v42 = 0;
  _Q0.n128_u32[0] = *(_DWORD *)(v33 + 212);
  if (_Q0.n128_f32[0] <= *(float *)(v33 + 216)) {
    _Q0.n128_u32[0] = *(_DWORD *)(v33 + 216);
  }
  if ((v31 & 8) != 0) {
    int v43 = 112;
  }
  else {
    int v43 = 48;
  }
  if ((v31 & 8) != 0) {
    char v44 = 7;
  }
  else {
    char v44 = 6;
  }
  float v45 = (unsigned __int16 *)(a2 + 2818);
  float v46 = (_DWORD *)(a2 + 7424);
  do
  {
    if (*v46 != 0xFFFF) {
      ++v42;
    }
    int v47 = *(v46 - 32);
    if (v47)
    {
      v41 += v47 * v43 + ((4 * v47 + 12) & 0xFFFFFFF0) + 80;
      if ((*((unsigned char *)v45 - 1) & 1) == 0)
      {
        int v48 = *v45;
        BOOL v50 = _Q0.n128_f32[0] > 0.0 && v48 == 1;
        v41 += (v50 | (2 * v48)) << v44;
      }
    }
    ++v46;
    v45 += 52;
    --v40;
  }
  while (v40);
  unsigned int v51 = (104 * v42 + 15) & 0xFFFFFFF0;
  unsigned int v52 = (v41 + 15) & 0xFFFFFFF0;
  if (v52)
  {
    uint64_t v53 = (**(uint64_t (***)(uint64_t, void, __n128))a3)(a3, v52 + 16, _Q0);
    if (v53 == -1) {
      uint64_t v54 = 0;
    }
    else {
      uint64_t v54 = v53;
    }
  }
  else
  {
    uint64_t v54 = 0;
  }
  if (v52) {
    BOOL v57 = v54 == 0;
  }
  else {
    BOOL v57 = 0;
  }
  int v58 = !v57;
  if (v51) {
    BOOL v59 = v58 == 0;
  }
  else {
    BOOL v59 = 1;
  }
  if (v59)
  {
    _X14 = 0;
  }
  else
  {
    uint64_t v60 = v54;
    uint64_t v61 = (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 8))(a3, (104 * v42 + 15) & 0xFFFFFFF0);
    uint64_t v54 = v60;
    if (v61 == -1) {
      _X14 = 0;
    }
    else {
      _X14 = v61;
    }
  }
  uint64_t result = 0;
  if ((v58 & 1) == 0)
  {
    *(void *)(v711 + 168) = 0;
    *(unsigned char *)(v711 + 176) = 0;
    *(void *)(v27 + 32) = 0;
    *(_WORD *)(v27 + 30) = 0;
    return result;
  }
  uint64_t v33 = v711;
  *(void *)(v711 + 168) = 0;
  *(unsigned char *)(v711 + 176) = 0;
  *(void *)(v27 + 32) = 0;
  *(_WORD *)(v27 + 30) = 0;
  if (v51) {
    BOOL v62 = _X14 == 0;
  }
  else {
    BOOL v62 = 0;
  }
  if (!v62) {
    goto LABEL_59;
  }
  return result;
}

uint64_t physx::Dy::solveContact(uint64_t result, int32x2_t a2, int32x2_t a3)
{
  float32x4_t v6 = *(uint64_t **)result;
  uint64_t v5 = *(void *)(result + 8);
  v8.i64[0] = **(void **)result;
  float32x4_t v7 = (_DWORD *)(*(void *)result + 8);
  v8.i64[1] = *v7;
  v9.i64[0] = *(void *)v5;
  v9.i64[1] = *(unsigned int *)(v5 + 8);
  v11.i64[0] = *(void *)(*(void *)result + 16);
  __int32 v10 = (_DWORD *)(*(void *)result + 24);
  v11.i64[1] = *v10;
  v12.i64[0] = *(void *)(v5 + 16);
  v12.i64[1] = *(unsigned int *)(v5 + 24);
  if (*(_WORD *)(result + 30))
  {
    float32x2_t v13 = (float32x2_t)vdup_lane_s32(a2, 0);
    v14.i64[0] = v6[4];
    v14.i64[1] = *((unsigned int *)v6 + 10);
    v15.i64[0] = *(void *)(v5 + 32);
    v15.i64[1] = *(unsigned int *)(v5 + 40);
    v16.i64[0] = v6[6];
    v16.i64[1] = *((unsigned int *)v6 + 14);
    v17.i64[0] = *(void *)(v5 + 48);
    v17.i64[1] = *(unsigned int *)(v5 + 56);
    float32x4_t v18 = vsubq_f32(v16, v17);
    float32x2_t v19 = (float32x2_t)vdup_lane_s32(a3, 0);
    _X16 = *(float32x2_t **)(result + 32);
    float32x4_t v21 = &_X16[2 * *(unsigned __int16 *)(result + 30)];
    do
    {
      __int16 v22 = _X16->u8[2];
      uint64_t v23 = _X16->u8[3];
      __asm { PRFM            #0, [X16,#0x50] }
      uint64_t v29 = 3 * _X16->u8[2];
      uint64_t result = (uint64_t)&_X16[6 * _X16->u8[2] + 10];
      v4.i32[0] = _X16[1].i32[0];
      float v30 = _X16[1].f32[1];
      float v31 = _X16[6].f32[0];
      v3.i32[0] = _X16->i32[1];
      if (_X16->i8[2])
      {
        *(float32x2_t *)v32.f32 = _X16[4];
        v32.i64[1] = _X16[5].u32[0];
        float32x4_t v33 = vmulq_n_f32(v32, v30);
        v33.i32[3] = 0;
        float32x4_t v34 = vmulq_f32(v18, v32);
        v34.i64[0] = vpaddq_f32(v34, v34).u64[0];
        float32x2_t v35 = vpadd_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v34.f32);
        int32x2_t v36 = (const float *)&_X16[5] + 1;
        *(float32x2_t *)v34.f32 = vld1_dup_f32(v36);
        float32x4_t v37 = vmulq_n_f32(v32, v31);
        v37.i32[3] = 0;
        float32x4_t v38 = vnegq_f32(v37);
        float32x2_t v39 = vneg_f32(*(float32x2_t *)v34.f32);
        _X3 = _X16 + 13;
        float32x2_t v41 = 0;
        int v42 = (float *)&_X16[6 * _X16->u8[2] + 10];
        uint64_t v43 = _X16->u8[2];
        char v44 = v42;
        do
        {
          __asm { PRFM            #0, [X3,#0x68] }
          *(float32x2_t *)v46.f32 = _X3[-3];
          *(float32x2_t *)v47.f32 = _X3[-1];
          v46.i64[1] = _X3[-2].u32[0];
          v47.i64[1] = _X3->u32[0];
          float32x4_t v48 = vmulq_f32(v14, v46);
          v48.i64[0] = vpaddq_f32(v48, v48).u64[0];
          float32x4_t v49 = vmulq_f32(v15, v47);
          v49.i64[0] = vpaddq_f32(v49, v49).u64[0];
          *(float32x2_t *)v49.f32 = vpadd_f32(*(float32x2_t *)v49.f32, *(float32x2_t *)v49.f32);
          *(float32x2_t *)v48.f32 = vsub_f32(vpadd_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v48.f32), *(float32x2_t *)v49.f32);
          v49.i32[0] = _X3[1].i32[0];
          float32x2_t v50 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v49.f32, 0);
          *(float32x2_t *)v48.f32 = vsub_f32(vadd_f32(v35, *(float32x2_t *)v48.f32), vmul_n_f32(v19, v49.f32[0]));
          unsigned int v51 = (const float *)&_X3[-2] + 1;
          *(float32x2_t *)v49.f32 = vld1_dup_f32(v51);
          *(float32x2_t *)v48.f32 = vadd_f32(v50, vmin_f32(v39, vmul_n_f32(vmax_f32(v13, vadd_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v49.f32)), _X3[1].f32[1])));
          float32x2_t v52 = vld1_dup_f32(v44++);
          float32x4_t v53 = vsubq_f32(vmlaq_f32(vmulq_f32(v11, v46), v32, v8), vmlaq_f32(vmulq_f32(v12, v47), v32, v9));
          v53.i64[0] = vpaddq_f32(v53, v53).u64[0];
          *(float32x2_t *)v48.f32 = vmin_f32(vadd_f32(v52, vmax_f32(vmul_n_f32(vsub_f32(*(float32x2_t *)v48.f32, vpadd_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v53.f32)), _X3->f32[1]), vneg_f32(v52))), (float32x2_t)vdup_n_s32(0x7F7FFFFFu));
          *(float32x2_t *)v49.f32 = vsub_f32(*(float32x2_t *)v48.f32, v52);
          float32x4_t v8 = vmlaq_n_f32(v8, v33, v49.f32[0]);
          v8.i64[1] = vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u32[0];
          float32x4_t v9 = vmlaq_n_f32(v9, v38, v49.f32[0]);
          v9.i64[1] = vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u32[0];
          float32x4_t v11 = vmlaq_n_f32(v11, v46, vmul_f32(v3, *(float32x2_t *)v49.f32).f32[0]);
          v11.i64[1] = vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u32[0];
          float32x4_t v12 = vmlsq_lane_f32(v12, v47, vmul_f32(v4, *(float32x2_t *)v49.f32), 0);
          v12.i64[1] = vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u32[0];
          *int v42 = v48.f32[0];
          float32x2_t v41 = vadd_f32(v41, *(float32x2_t *)v48.f32);
          _X3 += 6;
          int v42 = (float *)v44;
          --v43;
        }
        while (v43);
      }
      else
      {
        float32x2_t v41 = 0;
      }
      uint64_t v54 = (4 * v22 + 12) & 0x7F0;
      if (v23)
      {
        uint64_t v55 = 0;
        float32x2_t v56 = _X16[2];
        float32x2_t v57 = vmul_n_f32(v41, v56.f32[0]);
        float32x2_t v58 = vmul_lane_f32(v41, v56, 1);
        float32x2_t v59 = vneg_f32(v58);
        uint64_t v60 = (char *)&_X16[2 * v29] + v54;
        int8x16_t v61 = 0uLL;
        do
        {
          _X5 = &v60[v55];
          __asm { PRFM            #0, [X5,#0xD0] }
          float v64 = *(float *)&v60[v55 + 136];
          float32x4_t v66 = *(float32x4_t *)&v60[v55 + 80];
          float32x4_t v65 = *(float32x4_t *)&v60[v55 + 96];
          float32x2_t v67 = (float32x2_t)vdup_laneq_s32((int32x4_t)v66, 3);
          v66.i32[3] = 0;
          float32x2_t v68 = (float32x2_t)vdup_laneq_s32((int32x4_t)v65, 3);
          float32x2_t v69 = vmul_laneq_f32(v19, v65, 3);
          v65.i32[3] = 0;
          float32x4_t v70 = *(float32x4_t *)&v60[v55 + 112];
          v70.i32[3] = 0;
          uint64_t v71 = (const float *)&v60[v55 + 132];
          float32x2_t v72 = vld1_dup_f32(v71);
          float32x4_t v73 = vmulq_f32(v14, v65);
          v73.i64[0] = vpaddq_f32(v73, v73).u64[0];
          float32x4_t v74 = vmulq_f32(v15, v70);
          v74.i64[0] = vpaddq_f32(v74, v74).u64[0];
          *(float32x2_t *)v73.f32 = vsub_f32(vpadd_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v73.f32), vpadd_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v74.f32));
          float32x4_t v75 = vmulq_f32(v18, v66);
          v75.i64[0] = vpaddq_f32(v75, v75).u64[0];
          float32x2_t v76 = vadd_f32(v67, vsub_f32(vadd_f32(*(float32x2_t *)v73.f32, vpadd_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v75.f32)), v69));
          float32x4_t v77 = vmulq_n_f32(v66, v30);
          v77.i32[3] = 0;
          float32x4_t v78 = vmulq_n_f32(v66, v31);
          v78.i32[3] = 0;
          float32x4_t v79 = vsubq_f32(vmlaq_f32(vmulq_f32(v11, v65), v66, v8), vmlaq_f32(vmulq_f32(v12, v70), v66, v9));
          v79.i64[0] = vpaddq_f32(v79, v79).u64[0];
          float32x2_t v80 = vmls_laneq_f32(vmls_laneq_f32(v72, vsub_f32(vmul_n_f32(v76, *(float *)&v60[v55 + 128]), v68), *(float32x4_t *)&v60[v55 + 112], 3), vpadd_f32(*(float32x2_t *)v79.f32, *(float32x2_t *)v79.f32), *(float32x4_t *)&v60[v55 + 112], 3);
          int8x16_t v81 = (int8x16_t)vdupq_lane_s32(vcgt_f32(vabs_f32(v80), vmul_n_f32(v57, v64)), 0);
          float32x2_t v82 = (float32x2_t)vbsl_s8(*(int8x8_t *)v81.i8, (int8x8_t)vmin_f32(vmul_n_f32(v58, v64), vmax_f32(vmul_n_f32(v59, v64), v80)), (int8x8_t)v80);
          float32x2_t v83 = vsub_f32(v82, v72);
          float32x4_t v8 = vmlaq_n_f32(v8, v77, v83.f32[0]);
          v8.i64[1] = vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u32[0];
          float32x4_t v9 = vmlsq_lane_f32(v9, v78, v83, 0);
          v9.i64[1] = vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u32[0];
          float32x4_t v11 = vmlaq_n_f32(v11, v65, vmul_f32(v3, v83).f32[0]);
          v11.i64[1] = vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u32[0];
          float32x4_t v12 = vmlsq_lane_f32(v12, v70, vmul_f32(v4, v83), 0);
          int8x16_t v61 = vorrq_s8(v81, v61);
          v12.i64[1] = vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u32[0];
          *((_DWORD *)_X5 + 33) = v82.i32[0];
          v55 += 64;
        }
        while (v23 << 6 != v55);
        _X16[7].i32[0] = v61.i32[0];
      }
      _X16 = (float32x2_t *)(result + v54 + (v23 << 6));
    }
    while (_X16 < v21);
  }
  *float32x4_t v6 = v8.i64[0];
  *float32x4_t v7 = v8.i32[2];
  *(void *)uint64_t v5 = v9.i64[0];
  *(_DWORD *)(v5 + 8) = v9.i32[2];
  v6[2] = v11.i64[0];
  _DWORD *v10 = v11.i32[2];
  *(void *)(v5 + 16) = v12.i64[0];
  *(_DWORD *)(v5 + 24) = v12.i32[2];
  return result;
}

uint64_t physx::Dy::writeBackContact(uint64_t result)
{
  if (*(_WORD *)(result + 30))
  {
    _X14 = *(unsigned __int8 **)(result + 32);
    uint64_t v1 = *(_DWORD **)(result + 40);
    float32x2_t v3 = &_X14[16 * *(unsigned __int16 *)(result + 30)];
    do
    {
      int v4 = _X14[2];
      int v5 = _X14[3];
      __asm
      {
        PRFM            #0, [X14,#0x150]
        PRFM            #0, [X14,#0x1D0]
      }
      int v12 = *_X14;
      if (v12 == 3) {
        int v13 = 112;
      }
      else {
        int v13 = 48;
      }
      uint64_t result = (uint64_t)&_X14[v13 * v4 + 80];
      if (v1 && _X14[2])
      {
        float32x4_t v14 = (int *)result;
        uint64_t v15 = _X14[2];
        do
        {
          int v16 = *v14++;
          *v1++ = v16;
          --v15;
        }
        while (v15);
      }
      if (*((_DWORD *)_X14 + 14))
      {
        float32x4_t v17 = (unsigned char *)*((void *)_X14 + 8);
        if (v17) {
          *float32x4_t v17 = 1;
        }
      }
      if (v12 == 3) {
        char v18 = 7;
      }
      else {
        char v18 = 6;
      }
      _X14 = (unsigned __int8 *)(result + ((4 * (_WORD)v4 + 12) & 0x7F0) + (v5 << v18));
    }
    while (_X14 < v3);
  }
  return result;
}

float *physx::Dy::setSolverConstantsStep(float *result, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, uint64_t a8, float a9, float a10, float a11, float a12, float a13, float a14, float a15, float a16, float a17)
{
  float v17 = 1.0 / a10;
  if (a10 <= a11) {
    float v17 = 0.0;
  }
  float v18 = *(float *)(a8 + 12);
  *a7 = v17;
  __int16 v19 = *(_WORD *)(a8 + 76);
  if (v19)
  {
    *uint64_t result = 0.0;
    float v21 = *(float *)(a8 + 64);
    float v22 = *(float *)(a8 + 68);
    float v23 = (float)(v22 + (float)(a14 * v21)) * a14;
    float v24 = (float)((float)(v22 * *(float *)(a8 + 28)) - (float)(v21 * v18)) * a14;
    float v25 = (float)(v22 + (float)(a13 * v21)) * a13;
    *a4 = a15;
    float v26 = 1.0 / (float)((float)(v23 * a10) + 1.0);
    float v27 = (float)(v25 * a10) + 1.0;
    float v28 = (float)(v24 * v26) * a10;
    float v29 = (float)-(float)(v26 * v23) * a10;
    float v30 = 1.0 / (float)(v23 + 1.0);
    float v31 = v25 + 1.0;
    float v32 = v24 * v30;
    float v33 = -(float)(v30 * v23);
    if ((v19 & 2) != 0) {
      float v29 = v33;
    }
    else {
      float v32 = v28;
    }
    if ((v19 & 2) != 0) {
      float v26 = v30;
    }
    else {
      float v31 = v27;
    }
    *a3 = v32;
    *a5 = v29;
    *a6 = 1.0 - v26;
    *a2 = (float)-(float)(a16 * a12) * (float)(1.0 - (float)(1.0 / v31));
  }
  else
  {
    *a5 = -1.0;
    *a6 = 1.0;
    if ((v19 & 4) != 0 && (float v20 = -a9, *(float *)(a8 + 68) < v20))
    {
      *uint64_t result = 0.0;
      *a2 = 0.0;
      *a3 = *(float *)(a8 + 64) * v20;
      *a4 = 0.0;
    }
    else
    {
      *a2 = -(float)(a16 * a12);
      if ((v19 & 0x80) != 0)
      {
        *uint64_t result = 0.0;
        float v34 = *(float *)(a8 + 28) - (float)(v18 * a17);
      }
      else
      {
        *uint64_t result = v18;
        float v34 = *(float *)(a8 + 28);
      }
      *a3 = v34;
      *a4 = a15;
    }
  }
  return result;
}

unint64_t physx::Dy::setupSolverConstraintStep(uint64_t a1, uint64_t (***a2)(void, void), float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v139 = *MEMORY[0x263EF8340];
  int v7 = *(_DWORD *)(a1 + 144);
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v7)
  {
    unint64_t result = 0;
    *(void *)(v8 + 36) = 0;
    *(void *)(v8 + 28) = 0;
    *(_DWORD *)(v8 + 44) = 0;
    return result;
  }
  int v10 = *(unsigned __int16 *)(v8 + 18);
  if (*(__int16 *)(v8 + 16) == -1)
  {
    BOOL v11 = v10 != 0xFFFF;
    BOOL v114 = *(unsigned char *)(*(void *)v8 + 62) != 0;
  }
  else
  {
    BOOL v114 = 0;
    BOOL v11 = 1;
  }
  BOOL v113 = v10 == 0xFFFF && *(unsigned char *)(*(void *)(v8 + 8) + 62) != 0;
  if (v11) {
    uint64_t v13 = 160;
  }
  else {
    uint64_t v13 = 96;
  }
  int v14 = v13 * v7;
  uint64_t v15 = (void *)(**a2)(a2, (v13 * v7 + 192));
  if ((unint64_t)v15 + 1 < 2) {
    return 0;
  }
  size_t v16 = (v14 + 176);
  *(void *)(v8 + 32) = v15;
  *(_WORD *)(v8 + 30) = v16 >> 4;
  *(void *)(v8 + 40) = *(void *)(a1 + 160);
  *(_WORD *)(v8 + 28) = 8;
  bzero(v15, v16);
  uint64_t v21 = *(void *)(v8 + 32);
  uint64_t v22 = *(unsigned int *)(a1 + 144);
  if (v11) {
    char v23 = 4;
  }
  else {
    char v23 = 2;
  }
  *(unsigned char *)uint64_t v21 = v23;
  *(unsigned char *)(v21 + 1) = v22;
  *(unsigned char *)(v21 + 2) = 0;
  float v24 = *(float *)a1;
  *(_DWORD *)(v21 + 44) = *(_DWORD *)a1;
  *(_DWORD *)(v21 + 60) = *(_DWORD *)(a1 + 4);
  float32x2_t v25 = *(float32x2_t *)(a1 + 8);
  *(float32x2_t *)(v21 + 64) = vneg_f32(v25);
  *(void *)(v21 + 16) = *(void *)(a1 + 172);
  *(_DWORD *)(v21 + 24) = *(_DWORD *)(a1 + 180);
  float32x2_t v26 = *(float32x2_t *)(a1 + 148);
  *(float32x2_t *)(v21 + 4) = vmul_n_f32(v26, a4);
  BOOL v27 = v26.f32[0] != 3.4028e38;
  if (*(float *)(a1 + 152) != 3.4028e38) {
    BOOL v27 = 1;
  }
  *(unsigned char *)(v21 + 3) = v27;
  float v28 = *(float *)(*(void *)(a1 + 56) + 32);
  *(float *)(v21 + 12) = v24 * v28;
  float v29 = *(float *)(*(void *)(a1 + 64) + 32);
  *(float *)(v21 + 28) = v29 * v25.f32[0];
  float v30 = *(float *)(a1 + 192) - *(float *)(a1 + 96);
  *(float32x2_t *)(v21 + 32) = vsub_f32(*(float32x2_t *)(a1 + 184), *(float32x2_t *)(a1 + 88));
  *(float *)(v21 + 40) = v30;
  float v31 = *(float *)(a1 + 204) - *(float *)(a1 + 124);
  v17.i64[0] = *(void *)(a1 + 116);
  double v32 = COERCE_DOUBLE(vsub_f32(*(float32x2_t *)(a1 + 196), *(float32x2_t *)v17.f32));
  *(double *)(v21 + 48) = v32;
  float v107 = (float32x2_t *)v21;
  *(float *)(v21 + 56) = v31;
  memset(v138, 0, sizeof(v138));
  uint64_t v33 = *(void *)(a1 + 136);
  if (v22)
  {
    float v34 = (__int16 *)(v33 + 78);
    for (uint64_t i = v22; i; --i)
    {
      if ((*(v34 - 1) & 0x40) != 0)
      {
        int v36 = (unsigned __int16)*v34;
        if (v36 == 2048)
        {
          __int16 v37 = 1024;
          goto LABEL_26;
        }
        if (v36 == 2049)
        {
          __int16 v37 = 1025;
LABEL_26:
          *float v34 = v37;
        }
      }
      v34 += 40;
    }
  }
  if (*(unsigned char *)(a1 + 168)) {
    char v38 = 1;
  }
  else {
    char v38 = v11;
  }
  physx::Dy::preprocessRows((float **)v138, v33, &v137, &v136, v22, *(void *)(a1 + 40) + 28, *(void *)(a1 + 48) + 28, a1, v28, v29, 0.0, v32, v17, v18, v19, v20, v38, *(unsigned char *)(a1 + 169), 0);
  if (!*(_DWORD *)(a1 + 144)) {
    return 0;
  }
  unint64_t v39 = 0;
  unsigned int v108 = 0;
  _X20 = v107 + 22;
  float v111 = fminf(a4, 1.0);
  float32x2_t v41 = &v136.f32[2];
  int v42 = &v137.f32[2];
  float v43 = 1.0;
  float v44 = 1.0;
  uint64_t v112 = v13;
  uint64_t v110 = v8;
  BOOL v109 = v11;
  do
  {
    __asm { PRFM            #0, [X20,#0x80] }
    float32x4_t v49 = (float32x2_t *)*((void *)v138 + v39);
    __int16 v50 = v49[9].i16[2];
    if (*(unsigned char *)(a1 + 170)) {
      _ZF = (v50 & 0x20) == 0;
    }
    else {
      _ZF = 1;
    }
    if (_ZF) {
      float v52 = 1.0;
    }
    else {
      float v52 = v111;
    }
    if (v11)
    {
      uint64_t v53 = *(void *)(a1 + 32);
      uint64_t v54 = *(void *)(a1 + 40);
      uint64_t v55 = *(void *)(a1 + 48);
      v134[0] = *(void *)(a1 + 24);
      v134[1] = v54;
      uint64_t v56 = *(void *)(a1 + 64);
      v134[2] = *(void *)(a1 + 56);
      __int16 v135 = *(_WORD *)(v8 + 16);
      v132[0] = v53;
      v132[1] = v55;
      v132[2] = v56;
      __int16 v57 = *(_WORD *)(v8 + 18);
      __int16 v133 = v57;
      physx::Dy::createImpulseResponseVector(&v128, v49, (float *)&v49[2], v54, v135);
      float v58 = -v49[5].f32[0];
      float32x2_t v122 = vneg_f32(v49[4]);
      float v123 = v58;
      float v59 = -v49[7].f32[0];
      float32x2_t v120 = vneg_f32(v49[6]);
      float v121 = v59;
      physx::Dy::createImpulseResponseVector(&v124, &v122, (float *)&v120, v55, v57);
      float32_t v60 = -v125;
      float32_t v61 = -v127;
      float32_t v62 = v52 * v49[5].f32[1];
      float32_t v63 = v52 * v49[7].f32[1];
      *_X20 = v128;
      _X20[2] = vneg_f32(v124);
      _X20[1].i32[0] = v129;
      _X20[3].f32[0] = v60;
      _X20[4] = v130;
      __int32 v64 = v131;
      _X20[6] = vneg_f32(v126);
      _X20[5].i32[0] = v64;
      _X20[7].f32[0] = v61;
      _X20[8].f32[1] = v62;
      _X20[9].f32[0] = v63;
      _X20[10].i32[1] = 0;
      _X20[9].i32[1] = 0;
      _X20[11].i32[1] = 1065353216;
      float ImpulseResponse = physx::Dy::getImpulseResponse(v134, &v128, _X20 + 12, v132, &v124, _X20 + 16, *(float *)a1, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
      if (ImpulseResponse >= 0.000001) {
        float v66 = ImpulseResponse + 0.0001;
      }
      else {
        float v66 = 0.0;
      }
      float v67 = physx::Dy::SolverExtBodyStep::projectVelocity((uint64_t)v134, (float *)_X20, (float *)&_X20[4]);
      float v68 = physx::Dy::SolverExtBodyStep::projectVelocity((uint64_t)v132, (float *)&_X20[2], (float *)&_X20[6]);
      float v69 = v68;
      if ((v49[9].i16[2] & 0x40) == 0) {
        _X20[11].i32[1] = 0;
      }
      float v70 = v67 - v68;
      float v44 = *(float *)"333?";
      float v43 = *(float *)"333?";
      float v71 = a6 * 1.5;
      uint64_t v8 = v110;
      BOOL v11 = v109;
    }
    else
    {
      float v72 = *(v42 - 2);
      float v73 = *(v42 - 1);
      float v74 = *v42;
      float v75 = *(v41 - 2);
      float v76 = *(v41 - 1);
      float v77 = *v41;
      float32_t v78 = v52 * v49[5].f32[1];
      float32_t v79 = v52 * v49[7].f32[1];
      float v80 = v49->f32[0];
      _X20->i32[0] = v49->i32[0];
      float v81 = v49->f32[1];
      _X20->f32[1] = v81;
      float v82 = v49[1].f32[0];
      _X20[1].f32[0] = v82;
      float v83 = v49[4].f32[0];
      _X20[2].f32[0] = v83;
      float v84 = v49[4].f32[1];
      _X20[2].f32[1] = v84;
      float v85 = v49[5].f32[0];
      _X20[3].f32[0] = v85;
      float v86 = v49[2].f32[0];
      _X20[4].f32[0] = v86;
      float v87 = v49[2].f32[1];
      _X20[4].f32[1] = v87;
      float v88 = v49[3].f32[0];
      _X20[5].f32[0] = v88;
      float v89 = v49[6].f32[0];
      _X20[6].f32[0] = v89;
      float v90 = v49[6].f32[1];
      _X20[6].f32[1] = v90;
      float v91 = v49[7].f32[0];
      _X20[7].f32[0] = v91;
      _X20[8].f32[1] = v78;
      _X20[9].f32[0] = v79;
      _X20[10].i32[1] = 0;
      _X20[9].i32[1] = 0;
      _X20[11].i32[1] = 1065353216;
      unsigned int v92 = *(float **)(a1 + 56);
      float32x2_t v93 = *(float **)(a1 + 64);
      float v66 = (float)((float)((float)((float)((float)((float)(v84 * v84) + (float)(v83 * v83)) + (float)(v85 * v85))
                                  * v93[8])
                          * *(float *)(a1 + 8))
                  + (float)((float)((float)((float)((float)(v81 * v81) + (float)(v80 * v80)) + (float)(v82 * v82))
                                  * v92[8])
                          * *(float *)a1))
          + (float)((float)((float)((float)((float)(v73 * v73) + (float)(v72 * v72)) + (float)(v74 * v74))
                          * *(float *)(a1 + 4))
                  + (float)((float)((float)((float)(v76 * v76) + (float)(v75 * v75)) + (float)(v77 * v77))
                          * *(float *)(a1 + 12)));
      float v67 = (float)((float)((float)(v81 * v92[1]) + (float)(*v92 * v80)) + (float)(v92[2] * v82))
          + (float)((float)((float)(v87 * v92[5]) + (float)(v92[4] * v86)) + (float)(v92[6] * v88));
      float v69 = (float)((float)((float)(v84 * v93[1]) + (float)(*v93 * v83)) + (float)(v93[2] * v85))
          + (float)((float)((float)(v90 * v93[5]) + (float)(v93[4] * v89)) + (float)(v93[6] * v91));
      float v70 = v67 - v69;
      if ((v50 & 0x40) != 0)
      {
        float v71 = a6 * 15.0;
      }
      else
      {
        _X20[4] = 0;
        _X20[5].i32[0] = 0;
        _X20[6] = 0;
        _X20[7].i32[0] = 0;
        float v71 = a6 * 15.0;
        _X20[11].i32[1] = 0;
      }
    }
    LODWORD(v134[0]) = 0;
    float v94 = *(float *)(a1 + 156);
    if (v11) {
      float v94 = 0.00001;
    }
    __int16 v95 = v49[9].i16[2];
    if ((v95 & 0x40) != 0) {
      float v96 = v44;
    }
    else {
      float v96 = v43;
    }
    float v97 = v71 * a7;
    if ((v95 & 0x40) != 0) {
      float v98 = a6 * 1.5;
    }
    else {
      float v98 = v97;
    }
    physx::Dy::setSolverConstantsStep((float *)&_X20[1] + 1, (float *)&_X20[3] + 1, (float *)&_X20[8], (float *)&_X20[10], (float *)&_X20[5] + 1, (float *)&_X20[7] + 1, (float *)v134, (uint64_t)v49, v70, v66, v94, v96, a3, a4, v98, a5, a6);
    __int32 v99 = v134[0];
    _X20[11].i32[0] = v134[0];
    if (v114) {
      _X20[8].f32[0] = _X20[8].f32[0] - v67;
    }
    if (v113) {
      _X20[5].f32[1] = v69 + _X20[5].f32[1];
    }
    __int16 v100 = v49[9].i16[2];
    if ((v100 & 0x10) != 0) {
      _X20[10].i32[1] |= 2u;
    }
    if ((v100 & 8) != 0) {
      _X20[10].i32[1] |= 4u;
    }
    int v101 = v49[9].u16[3];
    if (v101) {
      _X20[10].i32[1] |= 0x40u;
    }
    if (*(unsigned char *)(a1 + 168)) {
      char v102 = 1;
    }
    else {
      char v102 = v11;
    }
    if ((v102 & 1) == 0)
    {
      if (v101 == 1024)
      {
        _X20[10].i32[1] |= 8u;
        float v103 = *(float *)(a1 + 4);
        float32_t v104 = v103 * *v42;
        int8x16_t v105 = &v107[2 * v108];
        v105[10] = vmul_n_f32(*(float32x2_t *)(v42 - 2), v103);
        v105[11].f32[0] = v104;
        v105[11].i32[1] = v99;
        float v106 = *(float *)(a1 + 12);
        v105[16] = vmul_n_f32(*(float32x2_t *)(v41 - 2), v106);
        v105[17].f32[0] = v106 * *v41;
        v105[17].i32[1] = v49[1].i32[1];
        ++v108;
      }
      else if ((v101 & 0x800) != 0)
      {
        _X20[10].i32[1] |= 0x10u;
      }
    }
    _X20 = (float32x2_t *)((char *)_X20 + v112);
    ++v39;
    unint64_t result = *(unsigned int *)(a1 + 144);
    v41 += 4;
    v42 += 4;
  }
  while (v39 < result);
  return result;
}

__n128 physx::Dy::solveExt1D(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6, float32x4_t *a7, float32x4_t *a8, int32x2_t a9, float32x4_t *a10, int32x4_t *a11, int32x4_t *a12, float32x4_t *a13, float32x4_t *a14, float32x4_t *a15, __n128 *a16)
{
  double v18 = *(float32x4_t **)(a1 + 32);
  if (v18->i8[1])
  {
    unsigned int v19 = 0;
    v20.i64[0] = v18[2].i64[0];
    v21.i64[0] = v18[3].i64[0];
    float32x2_t v22 = (float32x2_t)vdup_lane_s32(a9, 0);
    v20.i64[1] = v18[2].u32[2];
    v21.i64[1] = v18[3].u32[2];
    float32x4_t v23 = *(float32x4_t *)a11;
    v23.i32[3] = 0;
    float32x2_t v24 = (float32x2_t)vdupq_laneq_s32(*a11, 3).u64[0];
    float32x4_t v25 = vmulq_n_f32(v20, vmla_f32((float32x2_t)0xBF000000BF000000, v24, v24).f32[0]);
    v25.i32[3] = 0;
    float32x2_t v26 = (float32x2_t)vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u64[0];
    float32x2_t v27 = (float32x2_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
    float32x2_t v28 = (float32x2_t)vext_s8(*(int8x8_t *)a11->i8, (int8x8_t)v26, 4uLL);
    int8x8_t v29 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v20.f32, (int8x8_t)v27, 4uLL), *(float32x2_t *)a11->i8), v28, *(float32x2_t *)v20.f32);
    *(int8x8_t *)v30.f32 = vext_s8(v29, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v20.f32, v26), *(float32x2_t *)a11->i8, v27), 4uLL);
    v30.i64[1] = v29.u32[0];
    float32x4_t v31 = vmlaq_laneq_f32(v25, v30, *(float32x4_t *)a11, 3);
    v31.i64[1] = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u32[0];
    float32x4_t v32 = vmulq_f32(v20, v23);
    v32.i64[0] = vpaddq_f32(v32, v32).u64[0];
    float32x4_t v33 = vmlaq_n_f32(v31, v23, vpadd_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v32.f32).f32[0]);
    float32x4_t v34 = vaddq_f32(v33, v33);
    v34.i32[3] = 0;
    float32x4_t v35 = *(float32x4_t *)a12;
    v35.i32[3] = 0;
    v33.i64[0] = vdupq_laneq_s32(*a12, 3).u64[0];
    float32x4_t v36 = vmulq_n_f32(v21, vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32).f32[0]);
    v36.i32[3] = 0;
    float32x2_t v37 = (float32x2_t)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
    float32x2_t v38 = (float32x2_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u64[0];
    int8x8_t v39 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v21.f32, (int8x8_t)v38, 4uLL), *(float32x2_t *)a12->i8), (float32x2_t)vext_s8(*(int8x8_t *)a12->i8, (int8x8_t)v37, 4uLL), *(float32x2_t *)v21.f32);
    *(int8x8_t *)v40.f32 = vext_s8(v39, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v21.f32, v37), *(float32x2_t *)a12->i8, v38), 4uLL);
    v40.i64[1] = v39.u32[0];
    float32x4_t v41 = vmlaq_laneq_f32(v36, v40, *(float32x4_t *)a12, 3);
    v41.i64[1] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u32[0];
    float32x4_t v42 = vmulq_f32(v21, v35);
    v42.i64[0] = vpaddq_f32(v42, v42).u64[0];
    float32x4_t v43 = vmlaq_n_f32(v41, v35, vpadd_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v42.f32).f32[0]);
    float32x4_t v44 = vaddq_f32(v43, v43);
    v44.i32[3] = 0;
    float32x4_t v45 = vsubq_f32(vaddq_f32(*a6, v34), v20);
    float32x4_t v46 = vsubq_f32(vaddq_f32(*a7, v44), v21);
    _X15 = v18 + 11;
    float32x4_t v48 = 0uLL;
    float32x4_t v49 = 0uLL;
    float32x4_t v50 = 0uLL;
    float32x4_t v51 = 0uLL;
    do
    {
      v28.i32[0] = 0;
      __asm { PRFM            #0, [X15,#0xA0] }
      v57.i64[0] = _X15->i64[0];
      v58.i64[0] = _X15[1].i64[0];
      v57.i64[1] = _X15->u32[2];
      v59.i64[0] = _X15[2].i64[0];
      v58.i64[1] = _X15[1].u32[2];
      v60.i64[0] = _X15[3].i64[0];
      v59.i64[1] = _X15[2].u32[2];
      v60.i64[1] = _X15[3].u32[2];
      v16.i32[0] = _X15[4].i32[0];
      float32x2_t v61 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v16.i8, 0);
      float32x4_t v62 = vmulq_f32(v59, *a8);
      v62.i64[0] = vpaddq_f32(v62, v62).u64[0];
      float32x4_t v63 = vmulq_f32(v60, *a10);
      v63.i64[0] = vpaddq_f32(v63, v63).u64[0];
      *(float32x2_t *)v62.f32 = vsub_f32(vpadd_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v62.f32), vpadd_f32(*(float32x2_t *)v63.f32, *(float32x2_t *)v63.f32));
      __int32 v64 = &_X15->f32[3];
      *(float32x2_t *)v63.f32 = vld1_dup_f32(v64);
      float32x4_t v65 = vmulq_f32(v45, v57);
      v65.i64[0] = vpaddq_f32(v65, v65).u64[0];
      float32x2_t v66 = vpadd_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32);
      float32x4_t v67 = vmulq_f32(v46, v58);
      v67.i64[0] = vpaddq_f32(v67, v67).u64[0];
      *(float32x2_t *)v63.f32 = vadd_f32(*(float32x2_t *)v63.f32, vsub_f32(v66, vpadd_f32(*(float32x2_t *)v67.f32, *(float32x2_t *)v67.f32)));
      f32 = _X15[5].f32;
      *(float32x2_t *)v67.f32 = vld1_dup_f32(f32);
      *(float32x2_t *)v62.f32 = vadd_f32(vmul_n_f32(*(float32x2_t *)v62.f32, _X15[5].f32[3]), *(float32x2_t *)v63.f32);
      v63.i32[0] = _X15[5].i32[1] & 0x40;
      *(float32x2_t *)v62.f32 = vmls_lane_f32(*(float32x2_t *)v62.f32, v22, *(float32x2_t *)v16.i8, 0);
      float32x2_t v69 = vneg_f32(*(float32x2_t *)v67.f32);
      float32x2_t v70 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(*(int32x2_t *)v63.f32, (int32x2_t)v28), 0), (int8x8_t)v69, (int8x8_t)0x80000000800000);
      v69.i32[0] = _X15[4].i32[3];
      float v71 = &_X15[4].f32[2];
      float32x2_t v72 = vld1_dup_f32(v71);
      float v73 = &_X15[4].f32[1];
      float32x2_t v74 = vadd_f32(v61, vmax_f32(vmin_f32(vmul_n_f32(*(float32x2_t *)v62.f32, _X15[1].f32[3]), *(float32x2_t *)v67.f32), v70));
      *(float32x2_t *)v62.f32 = vld1_dup_f32(v73);
      float32x4_t v75 = vsubq_f32(vmlaq_f32(vmulq_f32(v59, *a4), v57, *a2), vmlaq_f32(vmulq_f32(v60, *a5), v58, *a3));
      v75.i64[0] = vpaddq_f32(v75, v75).u64[0];
      *(float *)v17.i32 = _X15[3].f32[3] * v69.f32[0];
      float32x2_t v76 = vmin_f32(v72, vmax_f32(*(float32x2_t *)v62.f32, vadd_f32((float32x2_t)vdup_lane_s32(v17, 0), vmla_n_f32(vmul_n_f32(v74, _X15[5].f32[2]), vpadd_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v75.f32), _X15[5].f32[2] * _X15[2].f32[3]))));
      _X15[4].i32[3] = v76.i32[0];
      float32x2_t v28 = vsub_f32(v76, v69);
      float32x4_t v48 = vmlaq_n_f32(v48, v57, v28.f32[0]);
      float32x4_t v50 = vmlaq_n_f32(v50, v59, v28.f32[0]);
      float32x4_t v49 = vmlaq_n_f32(v49, v58, v28.f32[0]);
      int8x16_t v77 = (int8x16_t)vmlaq_n_f32(*a2, _X15[6], v28.f32[0]);
      float32x4_t v51 = vmlaq_n_f32(v51, v60, v28.f32[0]);
      v77.i64[1] = vextq_s8(v77, v77, 8uLL).u32[0];
      *a2 = (float32x4_t)v77;
      int8x16_t v78 = (int8x16_t)vmlaq_n_f32(*a4, _X15[7], v28.f32[0]);
      v78.i64[1] = vextq_s8(v78, v78, 8uLL).u32[0];
      v17.i32[1] = 0;
      *a4 = (float32x4_t)v78;
      int8x16_t v16 = (int8x16_t)vmlaq_n_f32(*a3, _X15[8], v28.f32[0]);
      v48.i64[1] = vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL).u32[0];
      v16.i64[1] = vextq_s8(v16, v16, 8uLL).u32[0];
      *a3 = (float32x4_t)v16;
      v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
      int8x16_t v79 = (int8x16_t)vmlaq_n_f32(*a5, _X15[9], v28.f32[0]);
      v49.i64[1] = vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).u32[0];
      v79.i64[1] = vextq_s8(v79, v79, 8uLL).u32[0];
      v51.i64[1] = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u32[0];
      _X15 += 10;
      *a5 = (float32x4_t)v79;
      ++v19;
    }
    while (v19 < v18->u8[1]);
  }
  else
  {
    float32x4_t v51 = 0uLL;
    float32x4_t v50 = 0uLL;
    float32x4_t v49 = 0uLL;
    float32x4_t v48 = 0uLL;
  }
  float32x4_t v80 = vmulq_n_f32(v48, v18[2].f32[3]);
  v80.i32[3] = 0;
  *a13 = v80;
  float32x4_t v81 = vmulq_n_f32(v49, v18[4].f32[0]);
  v81.i32[3] = 0;
  *a14 = v81;
  float32x4_t v82 = vmulq_n_f32(v50, v18[3].f32[3]);
  v82.i32[3] = 0;
  *a15 = v82;
  __n128 result = (__n128)vmulq_n_f32(v51, v18[4].f32[1]);
  result.n128_u32[3] = 0;
  *a16 = result;
  return result;
}

_DWORD *physx::Dy::solveExt1DStep(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v7 = *(void *)a1;
  if (v7 == *(void *)(a1 + 8))
  {
    (*(void (**)(uint64_t, void, void, float32x4_t *, float32x4_t *))(*(void *)v7 + 304))(v7, *(unsigned __int16 *)(a1 + 16), *(unsigned __int16 *)(a1 + 18), &v33, &v31);
    float32x4_t v43 = v34;
    float32x4_t v44 = v33;
    float32x4_t v41 = v32;
    float32x4_t v42 = v31;
    (*(void (**)(float32x4_t *__return_ptr))(**(void **)a1 + 240))(v30);
    (*(void (**)(__n128 *__return_ptr))(**(void **)(a1 + 8) + 240))(v29);
    float32x4_t v39 = v30[1];
    float32x4_t v40 = v30[0];
    float32x4_t v37 = (float32x4_t)v29[1];
    float32x4_t v38 = (float32x4_t)v29[0];
    int32x4_t v36 = *(int32x4_t *)(*(uint64_t (**)(void))(**(void **)a1 + 336))();
    int32x4_t v14 = *(int32x4_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 336))();
  }
  else
  {
    if (*(unsigned __int16 *)(a1 + 16) == 0xFFFF)
    {
      v10.i64[0] = *(void *)v7;
      v10.i64[1] = *(unsigned int *)(v7 + 8);
      v11.i64[0] = *(void *)(v7 + 16);
      v11.i64[1] = *(unsigned int *)(v7 + 24);
      v12.i64[0] = *(void *)(v7 + 48);
      v12.i64[1] = *(unsigned int *)(v7 + 56);
      v13.i64[0] = *(void *)(v7 + 32);
      v13.i64[1] = *(unsigned int *)(v7 + 40);
      int32x4_t v9 = *(int32x4_t *)(a3 + ((unint64_t)*(unsigned int *)(a1 + 20) << 6));
    }
    else
    {
      (*(void (**)(float32x4_t *__return_ptr))(*(void *)v7 + 312))(&v33);
      int32x4_t v28 = *(int32x4_t *)(*(uint64_t (**)(void))(**(void **)a1 + 336))();
      (*(void (**)(float32x4_t *__return_ptr))(**(void **)a1 + 240))(&v31);
      int32x4_t v9 = v28;
      float32x4_t v10 = v33;
      float32x4_t v11 = v34;
      float32x4_t v12 = v31;
      float32x4_t v13 = v32;
    }
    float32x4_t v43 = v11;
    float32x4_t v44 = v10;
    float32x4_t v39 = v13;
    float32x4_t v40 = v12;
    int32x4_t v36 = v9;
    if (*(unsigned __int16 *)(a1 + 18) != 0xFFFF)
    {
      (*(void (**)(float32x4_t *__return_ptr))(**(void **)(a1 + 8) + 312))(&v33);
      int32x4_t v35 = *(int32x4_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 336))();
      (*(void (**)(float32x4_t *__return_ptr))(**(void **)(a1 + 8) + 240))(&v31);
      float32x4_t v41 = v34;
      float32x4_t v42 = v33;
      float32x4_t v37 = v32;
      float32x4_t v38 = v31;
      goto LABEL_10;
    }
    uint64_t v15 = *(void *)(a1 + 8);
    v16.i64[0] = *(void *)v15;
    v16.i64[1] = *(unsigned int *)(v15 + 8);
    float32x4_t v42 = v16;
    v16.i64[0] = *(void *)(v15 + 16);
    v16.i64[1] = *(unsigned int *)(v15 + 24);
    float32x4_t v41 = v16;
    v16.i64[0] = *(void *)(v15 + 48);
    v16.i64[1] = *(unsigned int *)(v15 + 56);
    float32x4_t v38 = v16;
    v16.i64[0] = *(void *)(v15 + 32);
    v16.i64[1] = *(unsigned int *)(v15 + 40);
    float32x4_t v37 = v16;
    int32x4_t v14 = *(int32x4_t *)(a3 + ((unint64_t)*(unsigned int *)(a1 + 24) << 6));
  }
  int32x4_t v35 = v14;
LABEL_10:
  float32x4_t v33 = 0u;
  float32x4_t v31 = 0u;
  v30[0] = 0u;
  v29[0] = 0u;
  __n128 v17 = physx::Dy::solveExt1D(a1, &v44, &v42, &v43, &v41, &v40, &v38, &v39, (int32x2_t)LODWORD(a4), &v37, &v36, &v35, &v33, &v31, v30, v29);
  __n128 result = *(_DWORD **)a1;
  uint64_t v19 = *(unsigned __int16 *)(a1 + 16);
  if (*(void *)a1 == *(void *)(a1 + 8)) {
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, float32x4_t *, float32x4_t *, void, float32x4_t *, __n128 *, void, __n128, void))(*(void *)result + 264))(result, v19, &v33, v30, *(unsigned __int16 *)(a1 + 18), &v31, v29, *(void *)(a2 + 56), v17, *(void *)(a2 + 64));
  }
  if (v19 == 0xFFFF)
  {
    __int32 v20 = v44.i32[2];
    *(void *)__n128 result = v44.i64[0];
    result[2] = v20;
    uint64_t v21 = *(void *)a1;
    __int32 v22 = v43.i32[2];
    *(void *)(v21 + 16) = v43.i64[0];
    *(_DWORD *)(v21 + 24) = v22;
  }
  else
  {
    __n128 result = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, void, void, float32x4_t, float32x4_t))(*(void *)result + 256))(result, v19, *(void *)(a2 + 56), *(void *)(a2 + 64), v33, v30[0]);
  }
  uint64_t v23 = *(unsigned __int16 *)(a1 + 18);
  if (v23 != 0xFFFF) {
    return (_DWORD *)(*(uint64_t (**)(void, uint64_t, void, void, float32x4_t, __n128))(**(void **)(a1 + 8) + 256))(*(void *)(a1 + 8), v23, *(void *)(a2 + 56), *(void *)(a2 + 64), v31, v29[0]);
  }
  uint64_t v24 = *(void *)(a1 + 8);
  __int32 v25 = v42.i32[2];
  *(void *)uint64_t v24 = v42.i64[0];
  *(_DWORD *)(v24 + 8) = v25;
  uint64_t v26 = *(void *)(a1 + 8);
  __int32 v27 = v41.i32[2];
  *(void *)(v26 + 16) = v41.i64[0];
  *(_DWORD *)(v26 + 24) = v27;
  return result;
}

uint64_t **physx::Dy::solve1DStep(uint64_t **result, uint64_t a2, int32x2_t a3, double a4, double a5, double a6, double a7, float32x4_t a8)
{
  float32x4_t v11 = (float32x4_t *)result[4];
  if (v11)
  {
    float32x4_t v13 = *result;
    float32x4_t v12 = result[1];
    v15.i64[0] = **result;
    int32x4_t v14 = *result + 1;
    v15.i64[1] = *v14;
    v16.i64[0] = *v12;
    v16.i64[1] = *((unsigned int *)v12 + 2);
    v18.i64[0] = (*result)[2];
    __n128 v17 = *result + 3;
    v18.i64[1] = *v17;
    v19.i64[0] = v12[2];
    v19.i64[1] = *((unsigned int *)v12 + 6);
    int v20 = v11->u8[1];
    if (v11->i8[1])
    {
      int v21 = 0;
      uint64_t v22 = *((unsigned int *)result + 6);
      uint64_t v23 = a2 + ((unint64_t)*((unsigned int *)result + 5) << 6);
      uint64_t v24 = a2 + (v22 << 6);
      a8.i64[0] = *(void *)(v23 + 28);
      a8.i32[2] = *(_DWORD *)(v23 + 36);
      float32x4_t v160 = a8;
      a8.i64[0] = *(void *)(v23 + 40);
      a8.i32[2] = *(_DWORD *)(v23 + 48);
      float32x4_t v159 = a8;
      a8.i64[0] = *(void *)(v23 + 52);
      a8.i32[2] = *(_DWORD *)(v23 + 60);
      float32x4_t v158 = a8;
      a8.i64[0] = *(void *)(v24 + 28);
      a8.i32[2] = *(_DWORD *)(v24 + 36);
      float32x4_t v157 = a8;
      a8.i64[0] = *(void *)(v24 + 40);
      a8.i32[2] = *(_DWORD *)(v24 + 48);
      float32x4_t v156 = a8;
      a8.i64[0] = *(void *)(v24 + 52);
      a8.i32[2] = *(_DWORD *)(v24 + 60);
      float32x4_t v155 = a8;
      v25.i64[0] = v11[2].i64[0];
      v26.i64[0] = v11[3].i64[0];
      int32x2_t v27 = vdup_lane_s32(a3, 0);
      float32x2_t v154 = (float32x2_t)v27;
      v27.i32[0] = v11->i32[3];
      float32x2_t v153 = (float32x2_t)v27;
      float32x2_t v152 = (float32x2_t)vdup_lane_s32(v27, 0);
      v25.i64[1] = v11[2].u32[2];
      v26.i64[1] = v11[3].u32[2];
      float32x4_t v28 = *(float32x4_t *)v23;
      v28.i32[3] = 0;
      float32x2_t v29 = (float32x2_t)vdupq_laneq_s32(*(int32x4_t *)v23, 3).u64[0];
      float32x4_t v30 = vmulq_n_f32(v25, vmla_f32((float32x2_t)0xBF000000BF000000, v29, v29).f32[0]);
      v30.i32[3] = 0;
      float32x2_t v31 = (float32x2_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u64[0];
      float32x2_t v32 = (float32x2_t)vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u64[0];
      int8x8_t v33 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v23, (float32x2_t)vext_s8(*(int8x8_t *)v25.f32, (int8x8_t)v32, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v23, (int8x8_t)v31, 4uLL), *(float32x2_t *)v25.f32);
      *(int8x8_t *)v34.f32 = vext_s8(v33, (int8x8_t)vmls_f32(vmul_f32(v31, *(float32x2_t *)v25.f32), *(float32x2_t *)v23, v32), 4uLL);
      v34.i64[1] = v33.u32[0];
      float32x4_t v35 = vmlaq_laneq_f32(v30, v34, *(float32x4_t *)v23, 3);
      v35.i64[1] = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u32[0];
      float32x4_t v36 = vmulq_f32(v28, v25);
      v36.i64[0] = vpaddq_f32(v36, v36).u64[0];
      float32x4_t v37 = vmlaq_n_f32(v35, v28, vpadd_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v36.f32).f32[0]);
      float32x4_t v38 = vaddq_f32(v37, v37);
      float32x4_t v39 = v38;
      v39.i32[3] = 0;
      float32x4_t v40 = *(float32x4_t *)v24;
      v40.i32[3] = 0;
      v28.i64[0] = vdupq_laneq_s32(*(int32x4_t *)v24, 3).u64[0];
      float32x4_t v41 = vmulq_n_f32(v26, vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32).f32[0]);
      v41.i32[3] = 0;
      v37.i64[0] = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u64[0];
      float32x2_t v42 = (float32x2_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
      int8x8_t v43 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v24, (float32x2_t)vext_s8(*(int8x8_t *)v26.f32, (int8x8_t)v42, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v24, *(int8x8_t *)v37.f32, 4uLL), *(float32x2_t *)v26.f32);
      *(int8x8_t *)v44.f32 = vext_s8(v43, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v26.f32), *(float32x2_t *)v24, v42), 4uLL);
      v44.i64[1] = v43.u32[0];
      float32x4_t v45 = vmlaq_laneq_f32(v41, v44, *(float32x4_t *)v24, 3);
      v45.i64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u32[0];
      float32x4_t v46 = vmulq_f32(v40, v26);
      v46.i64[0] = vpaddq_f32(v46, v46).u64[0];
      float32x4_t v47 = vmlaq_n_f32(v45, v40, vpadd_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32).f32[0]);
      float32x4_t v48 = vaddq_f32(v47, v47);
      float32x4_t v49 = v48;
      v49.i32[3] = 0;
      v37.i64[0] = v13[4];
      v37.i64[1] = *((unsigned int *)v13 + 10);
      v50.i64[0] = v12[4];
      v50.i64[1] = *((unsigned int *)v12 + 10);
      v44.i64[0] = v13[6];
      v44.i64[1] = *((unsigned int *)v13 + 14);
      v40.i64[0] = v12[6];
      v40.i64[1] = *((unsigned int *)v12 + 14);
      v9.i32[0] = v11[1].i32[3];
      float32x4_t v149 = vsubq_f32(vaddq_f32(v39, v44), v25);
      float32x4_t v56 = v11[8];
      float32x4_t v142 = v11[6];
      float32x4_t v143 = v11[5];
      float32x4_t v51 = v143;
      v51.i32[3] = 0;
      float32x4_t v52 = v142;
      v52.i32[3] = 0;
      float32x4_t v53 = v11[7];
      v53.i32[3] = 0;
      float32x4_t v54 = v11[9];
      float32x4_t v55 = v11[10];
      *(int32x2_t *)v44.f32 = vdup_laneq_s32((int32x4_t)v54, 3);
      v54.i32[3] = 0;
      float32x4_t v148 = vsubq_f32(vaddq_f32(v49, v40), v26);
      *(int32x2_t *)v26.f32 = vdup_laneq_s32((int32x4_t)v55, 3);
      v55.i32[3] = 0;
      *(int32x2_t *)v25.f32 = vdup_laneq_s32((int32x4_t)v56, 3);
      v56.i32[3] = 0;
      float32x4_t v139 = v51;
      float32x4_t v57 = vmulq_f32(v37, v51);
      v57.i64[0] = vpaddq_f32(v57, v57).u64[0];
      float32x4_t v140 = v56;
      float32x4_t v141 = v11[7];
      float32x4_t v58 = vmulq_f32(v50, v56);
      v58.i64[0] = vpaddq_f32(v58, v58).u64[0];
      float32x2_t v137 = vadd_f32(*(float32x2_t *)v25.f32, vsub_f32(vpadd_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v57.f32), vpadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32)));
      float32x4_t v59 = vmulq_f32(v37, v52);
      v59.i64[0] = vpaddq_f32(v59, v59).u64[0];
      float32x4_t v60 = vmulq_f32(v50, v54);
      v60.i64[0] = vpaddq_f32(v60, v60).u64[0];
      float32x2_t v136 = vadd_f32(*(float32x2_t *)v44.f32, vsub_f32(vpadd_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v59.f32), vpadd_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v60.f32)));
      float32x4_t v150 = v50;
      float32x4_t v151 = v37;
      float32x4_t v138 = v53;
      float32x4_t v61 = vmulq_f32(v37, v53);
      v61.i64[0] = vpaddq_f32(v61, v61).u64[0];
      float32x4_t v62 = vmulq_f32(v50, v55);
      v62.i64[0] = vpaddq_f32(v62, v62).u64[0];
      v8.i32[0] = v11[3].i32[3];
      float32x2_t v135 = vadd_f32(*(float32x2_t *)v26.f32, vsub_f32(vpadd_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v61.f32), vpadd_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v62.f32)));
      v10.i32[0] = v11[4].i32[1];
      _X16 = v11 + 11;
      float32x2_t v146 = (float32x2_t)vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).u64[0];
      float32x2_t v147 = (float32x2_t)vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL).u64[0];
      float32x2_t v144 = (float32x2_t)vext_s8(*(int8x8_t *)v48.f32, (int8x8_t)v146, 4uLL);
      float32x2_t v145 = (float32x2_t)vext_s8(*(int8x8_t *)v38.f32, (int8x8_t)v147, 4uLL);
      do
      {
        __asm { PRFM            #0, [X16,#0x60] }
        v69.i64[0] = _X16->i64[0];
        v69.i64[1] = _X16->u32[2];
        v70.i64[0] = _X16[1].i64[0];
        v70.i64[1] = _X16[1].u32[2];
        v71.i64[0] = _X16[2].i64[0];
        v71.i64[1] = _X16[2].u32[2];
        v72.i64[0] = _X16[3].i64[0];
        v72.i64[1] = _X16[3].u32[2];
        float32x2_t v73 = (float32x2_t)vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL).u64[0];
        int8x8_t v74 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v38.f32, (float32x2_t)vext_s8(*(int8x8_t *)_X16->f32, (int8x8_t)v73, 4uLL)), v145, *(float32x2_t *)_X16->f32);
        *(int8x8_t *)v75.f32 = vext_s8(v74, (int8x8_t)vmls_f32(vmul_f32(v147, *(float32x2_t *)_X16->f32), *(float32x2_t *)v38.f32, v73), 4uLL);
        v75.i64[1] = v74.u32[0];
        float32x2_t v76 = (float32x2_t)vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL).u64[0];
        int8x8_t v77 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v48.f32, (float32x2_t)vext_s8(*(int8x8_t *)v70.f32, (int8x8_t)v76, 4uLL)), v144, *(float32x2_t *)v70.f32);
        *(int8x8_t *)v78.f32 = vext_s8(v77, (int8x8_t)vmls_f32(vmul_f32(v146, *(float32x2_t *)v70.f32), *(float32x2_t *)v48.f32, v76), 4uLL);
        float32x4_t v79 = vaddq_f32(v71, v75);
        v78.i64[1] = v77.u32[0];
        float32x4_t v80 = &_X16->f32[3];
        float32x2_t v81 = vld1_dup_f32(v80);
        float32x4_t v82 = vaddq_f32(v72, v78);
        float32x4_t v83 = vmulq_n_f32(v160, v79.f32[0]);
        v83.i32[3] = 0;
        float32x4_t v84 = vmulq_lane_f32(v159, *(float32x2_t *)v79.f32, 1);
        v84.i32[3] = 0;
        float32x4_t v85 = vmulq_laneq_f32(v158, v79, 2);
        v85.i32[3] = 0;
        float32x4_t v86 = vaddq_f32(v83, v84);
        float32x4_t v87 = vmulq_n_f32(v157, v82.f32[0]);
        v87.i32[3] = 0;
        float32x4_t v88 = vmulq_lane_f32(v156, *(float32x2_t *)v82.f32, 1);
        v88.i32[3] = 0;
        float32x4_t v89 = vaddq_f32(v85, v86);
        float32x4_t v90 = vmulq_laneq_f32(v155, v82, 2);
        v90.i32[3] = 0;
        float32x4_t v91 = vaddq_f32(v90, vaddq_f32(v87, v88));
        if ((_X16[5].i32[1] & 0x10) != 0)
        {
          float32x4_t v92 = vmlaq_f32(vmulq_f32(v140, v91), v139, v89);
          v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
          *(float32x2_t *)v92.f32 = vmul_laneq_f32(vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32), v143, 3);
          float32x4_t v87 = vmlaq_f32(vmulq_f32(v54, v91), v52, v89);
          v87.i64[0] = vpaddq_f32(v87, v87).u64[0];
          *(float32x2_t *)v87.f32 = vmul_laneq_f32(vpadd_f32(*(float32x2_t *)v87.f32, *(float32x2_t *)v87.f32), v142, 3);
          float32x4_t v93 = vmlaq_f32(vmulq_f32(v55, v91), v138, v89);
          v93.i64[0] = vpaddq_f32(v93, v93).u64[0];
          *(float32x2_t *)v93.f32 = vmul_laneq_f32(vpadd_f32(*(float32x2_t *)v93.f32, *(float32x2_t *)v93.f32), v141, 3);
          float32x4_t v94 = vmulq_n_f32(v138, v93.f32[0]);
          v94.i32[3] = 0;
          float32x4_t v95 = vmlaq_n_f32(v94, v52, v87.f32[0]);
          v95.i64[1] = vextq_s8((int8x16_t)v95, (int8x16_t)v95, 8uLL).u32[0];
          float32x4_t v96 = vmlaq_n_f32(v95, v139, v92.f32[0]);
          v96.i64[1] = vextq_s8((int8x16_t)v96, (int8x16_t)v96, 8uLL).u32[0];
          float32x4_t v97 = vmulq_n_f32(v55, v93.f32[0]);
          v97.i32[3] = 0;
          float32x4_t v98 = vmlaq_n_f32(v97, v54, v87.f32[0]);
          v98.i64[1] = vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL).u32[0];
          float32x4_t v56 = vmlaq_n_f32(v98, v140, v92.f32[0]);
          v51.i32[1] = 0;
          v56.i64[1] = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u32[0];
          float32x4_t v89 = vsubq_f32(v89, v96);
          float32x4_t v91 = vsubq_f32(v91, v56);
          *(float32x2_t *)v93.f32 = vmla_f32(vmul_f32(v135, *(float32x2_t *)v93.f32), *(float32x2_t *)v87.f32, v136);
          v87.i32[1] = v137.i32[1];
          float32x2_t v81 = vsub_f32(v81, vmla_f32(*(float32x2_t *)v93.f32, *(float32x2_t *)v92.f32, v137));
        }
        v56.i32[0] = 0;
        __int32 v99 = &_X16[5].f32[3];
        float32x2_t v100 = vld1_dup_f32(v99);
        int v101 = &_X16[1].f32[3];
        float32x2_t v102 = vld1_dup_f32(v101);
        f32 = _X16[5].f32;
        float32x2_t v104 = vld1_dup_f32(f32);
        int8x16_t v105 = _X16[4].f32;
        float32x2_t v106 = vld1_dup_f32(v105);
        v87.i32[0] = _X16[4].i32[3];
        float32x2_t v107 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v87.f32, 0);
        unsigned int v108 = &_X16[2].f32[3];
        float32x2_t v109 = vld1_dup_f32(v108);
        uint64_t v110 = &_X16[4].f32[2];
        float32x2_t v111 = vld1_dup_f32(v110);
        uint64_t v112 = &_X16[4].f32[1];
        float32x2_t v113 = vld1_dup_f32(v112);
        v51.i32[0] = _X16[5].i32[1] & 0x40;
        float32x2_t v114 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceq_s32(*(int32x2_t *)v51.f32, *(int32x2_t *)v56.f32), 0), (int8x8_t)vneg_f32(v104), (int8x8_t)0x80000000800000);
        float32x4_t v115 = vmulq_f32(v151, v89);
        float32x2_t v116 = (float32x2_t)vpaddq_f32(v115, v115).u64[0];
        float32x4_t v117 = vmulq_f32(v150, v91);
        v117.i64[0] = vpaddq_f32(v117, v117).u64[0];
        float32x2_t v118 = vpadd_f32(*(float32x2_t *)v117.f32, *(float32x2_t *)v117.f32);
        float32x4_t v119 = vmulq_f32(v149, v69);
        v119.i64[0] = vpaddq_f32(v119, v119).u64[0];
        float32x4_t v120 = vmulq_f32(v148, v70);
        v120.i64[0] = vpaddq_f32(v120, v120).u64[0];
        float32x2_t v121 = vadd_f32(v81, vsub_f32(vpadd_f32(*(float32x2_t *)v119.f32, *(float32x2_t *)v119.f32), vpadd_f32(*(float32x2_t *)v120.f32, *(float32x2_t *)v120.f32)));
        float32x4_t v122 = vmulq_f32(v69, v69);
        v122.i64[0] = vpaddq_f32(v122, v122).u64[0];
        float32x4_t v123 = vmulq_n_f32(v89, v8.f32[0]);
        v123.i32[3] = 0;
        float32x4_t v124 = vmulq_f32(v89, v123);
        v124.i64[0] = vpaddq_f32(v124, v124).u64[0];
        *(float32x2_t *)v124.f32 = vmla_f32(vpadd_f32(*(float32x2_t *)v124.f32, *(float32x2_t *)v124.f32), vpadd_f32(*(float32x2_t *)v122.f32, *(float32x2_t *)v122.f32), v152);
        float32x4_t v125 = vmulq_f32(v70, v70);
        v125.i64[0] = vpaddq_f32(v125, v125).u64[0];
        float32x4_t v126 = vmulq_n_f32(v91, v10.f32[0]);
        v126.i32[3] = 0;
        float32x4_t v127 = vmulq_f32(v91, v126);
        v127.i64[0] = vpaddq_f32(v127, v127).u64[0];
        float32x2_t v128 = vadd_f32(*(float32x2_t *)v124.f32, vsub_f32(vmul_n_f32(vpadd_f32(*(float32x2_t *)v125.f32, *(float32x2_t *)v125.f32), v9.f32[0]), vpadd_f32(*(float32x2_t *)v127.f32, *(float32x2_t *)v127.f32)));
        float32x2_t v129 = vrecpe_f32(v128);
        LODWORD(result) = 4;
        do
        {
          float32x2_t v129 = vmul_f32(v129, vrecps_f32(v128, v129));
          __n128 result = (uint64_t **)(result - 1);
        }
        while (result);
        float32x2_t v130 = vmls_f32(vadd_f32(vmul_f32(v100, vsub_f32(vpadd_f32(v116, v116), v118)), v121), v154, v106);
        float32x2_t v131 = (float32x2_t)vand_s8((int8x8_t)vdup_lane_s32(vcgtz_f32(v128), 0), (int8x8_t)v129);
        *(float32x2_t *)v51.f32 = vmul_f32(v109, v131);
        float32x2_t v132 = vmul_f32(vadd_f32(v106, vmax_f32(vmin_f32(vmul_f32(v102, v130), v104), v114)), v131);
        float32x4_t v56 = vsubq_f32(vmlaq_f32(vmulq_f32(v18, v89), v69, v15), vmlaq_f32(vmulq_f32(v19, v91), v70, v16));
        v56.i64[0] = vpaddq_f32(v56, v56).u64[0];
        *(float32x2_t *)v56.f32 = vpadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v56.f32);
        v87.f32[0] = _X16[3].f32[3] * v87.f32[0];
        float32x2_t v133 = vmax_f32(vmin_f32(vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v87.f32, 0), vmla_f32(v132, *(float32x2_t *)v56.f32, *(float32x2_t *)v51.f32)), v111), v113);
        float32x2_t v134 = vsub_f32(v133, v107);
        float32x4_t v15 = vmlaq_n_f32(v15, v69, vmul_f32(v153, v134).f32[0]);
        v15.i64[1] = vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u32[0];
        float32x4_t v16 = vmlsq_lane_f32(v16, v70, vmul_f32(v9, v134), 0);
        v16.i64[1] = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u32[0];
        float32x4_t v18 = vmlaq_n_f32(v18, v89, vmul_f32(v8, v134).f32[0]);
        v18.i64[1] = vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u32[0];
        float32x4_t v19 = vmlaq_n_f32(v19, v91, vmul_f32(v10, v134).f32[0]);
        _X16[4].i32[3] = v133.i32[0];
        v19.i64[1] = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u32[0];
        ++v21;
        _X16 += 6;
      }
      while (v21 != v20);
    }
    *float32x4_t v13 = v15.i64[0];
    *int32x4_t v14 = v15.i32[2];
    v13[2] = v18.i64[0];
    *__n128 v17 = v18.i32[2];
    uint64_t *v12 = v16.i64[0];
    *((_DWORD *)v12 + 2) = v16.i32[2];
    _DWORD v12[2] = v19.i64[0];
    *((_DWORD *)v12 + 6) = v19.i32[2];
  }
  return result;
}

unsigned char *physx::Dy::conclude1DStep(unsigned char *result)
{
  if (result)
  {
    int v1 = result[1];
    if (result[1])
    {
      uint64_t v2 = 160;
      if (*result == 2) {
        uint64_t v2 = 96;
      }
      _X10 = result + 272;
      do
      {
        __asm { PRFM            #0, [X10] }
        if ((*(_X10 - 12) & 4) == 0) {
          *((_DWORD *)_X10 - 17) = 0;
        }
        _X10 += v2;
        --v1;
      }
      while (v1);
    }
  }
  return result;
}

uint64_t physx::Dy::Articulation::setupSolverConstraintsTGS(uint64_t *a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, double a6, float a7, float32x4_t a8)
{
  uint64_t v8 = 0;
  uint64_t v9 = a1[1];
  uint64_t v109 = *a1;
  float32x2_t v10 = *(unsigned __int16 **)(*a1 + 168);
  uint64_t v11 = a1[10];
  uint64_t v12 = *((unsigned __int8 *)a1 + 92);
  *a4 = 0;
  uint64_t v114 = (uint64_t)v10;
  unint64_t v13 = *v10;
  if (v13 >= 2)
  {
    float v14 = a7;
    uint64_t v8 = 0;
    float v102 = 1.0 / a7;
    uint64_t v15 = v11 + 144 * v12;
    unint64_t v16 = v15 + 168;
    unint64_t v17 = v15 + 251;
    uint64_t v18 = 1;
    float v19 = -0.5;
    __asm { FMOV            V0.2S, #-1.0 }
    uint64_t v106 = _D0;
    uint64_t v120 = a2;
    uint64_t v113 = v9;
    uint64_t v107 = v15;
    unint64_t v108 = *v10;
    do
    {
      uint64_t v25 = *(void *)(v9 + 40 * v18 + 24);
      uint64_t v26 = v18 + 1;
      if (v18 + 1 < v13)
      {
        int v27 = ~(v17 >> 5) + (v16 >> 5);
        _X9 = *(void *)(v9 + 40 * v26 + 24);
        int v29 = ~((_X9 + 359) >> 5) + (_X9 >> 5);
        do
        {
          __asm { PRFM            #0, [X9] }
          _X9 += 32;
          _CF = __CFADD__(v29++, 1);
        }
        while (!_CF);
        _X9 = v15 + 84 * v26;
        do
        {
          __asm { PRFM            #0, [X9] }
          _X9 += 32;
          _CF = __CFADD__(v27++, 1);
        }
        while (!_CF);
      }
      if (*(unsigned char *)(v25 + 329) || *(unsigned char *)(v25 + 328))
      {
        int8x8_t v33 = (float *)(v15 + 84 * v18);
        float v34 = v33[14];
        float v35 = v33[17];
        if (v34 == 0.0)
        {
          float v38 = 1.0;
          float v37 = 0.0;
          a8.i64[0] = 0;
        }
        else
        {
          float v36 = sqrtf((float)((float)(v34 * v34) + 0.0) + (float)(v35 * v35));
          float v37 = v34 / v36;
          a8.f32[0] = 0.0 / v36;
          float v38 = v35 / v36;
        }
        float v39 = v33[15];
        float v40 = v33[16];
        v132[0] = (float)((float)((float)(v34 * v38) - (float)(v35 * v37)) - (float)(v39 * a8.f32[0]))
                + (float)(a8.f32[0] * v40);
        v132[1] = (float)((float)((float)(v38 * v39) - (float)(v35 * a8.f32[0])) - (float)(v40 * v37))
                + (float)(a8.f32[0] * v34);
        v132[2] = (float)((float)((float)(v38 * v40) - (float)(v35 * a8.f32[0])) - (float)(v34 * a8.f32[0]))
                + (float)(v37 * v39);
        uint64_t v132[3] = (float)((float)((float)(v34 * v37) + (float)(v35 * v38)) + (float)(v39 * a8.f32[0]))
                + (float)(v40 * a8.f32[0]);
        int v41 = *(_DWORD *)(v25 + 344);
        uint64_t v130 = *(void *)(v25 + 336);
        int v131 = v41;
        float v126 = 0.0;
        if (*(unsigned char *)(v25 + 328))
        {
          if (physx::Cm::ConeLimitHelper::getLimit((float *)&v130, v132, &v127, &v126))
          {
            if (*(float *)(v25 + 320) <= 0.0)
            {
              BOOL v43 = *(float *)(v25 + 324) > 0.0;
              int v42 = 1;
            }
            else
            {
              int v42 = 1;
              BOOL v43 = 1;
            }
          }
          else
          {
            int v42 = 0;
            BOOL v43 = 0;
          }
          a2 = v120;
        }
        else
        {
          int v42 = 0;
          BOOL v43 = 0;
        }
        float32x4_t v44 = (float *)(v15 + 84 * v18);
        float v46 = v44[9];
        float v45 = v44[10];
        a8.f32[0] = v19 + (float)(v45 * v45);
        float v47 = v44[7];
        float v48 = v44[8];
        float v49 = (float)((float)(v48 * 0.0) + (float)(v47 * 2.0)) + (float)(v46 * 0.0);
        v124.f32[0] = (float)((float)(v45 * (float)((float)(v46 * -0.0) + (float)(v48 * 0.0))) + (float)(a8.f32[0] * 2.0))
                    + (float)(v47 * v49);
        v124.f32[1] = (float)((float)(v45 * (float)((float)(v47 * -0.0) + (float)(v46 * 2.0))) + (float)(a8.f32[0] * 0.0))
                    + (float)(v48 * v49);
        float v125 = (float)((float)(v45 * (float)((float)(v48 * -2.0) + (float)(v47 * 0.0))) + (float)(a8.f32[0] * 0.0))
             + (float)(v46 * v49);
        if (v38 == -1.0)
        {
          if (v37 >= 0.0) {
            float v50 = 1.8447e19;
          }
          else {
            float v50 = -1.8447e19;
          }
        }
        else
        {
          float v50 = v37 / (float)(v38 + 1.0);
        }
        if (*(unsigned char *)(v25 + 329))
        {
          float v51 = *(float *)(v25 + 356);
          BOOL v52 = v50 < (float)((float)(*(float *)(v25 + 352) + v51) / (float)(1.0 - (float)(*(float *)(v25 + 352) * v51)));
          float v53 = *(float *)(v25 + 348);
          a8.f32[0] = v53 - v51;
          BOOL v54 = v50 > (float)((float)(v53 - v51) / (float)((float)(v53 * v51) + 1.0));
        }
        else
        {
          BOOL v52 = 0;
          BOOL v54 = 0;
        }
        int v55 = v43 + v42 + v52 + v54;
        if (v55)
        {
          BOOL v116 = v54;
          uint64_t v56 = a3 + 48 * v8;
          *(void *)uint64_t v56 = v109;
          uint64_t v57 = v9 + 40 * v18;
          int v59 = *(_DWORD *)(v57 + 32);
          float32x4_t v58 = (unsigned int *)(v57 + 32);
          *(_WORD *)(v56 + 16) = v59;
          *(void *)(v56 + 8) = v109;
          *(_WORD *)(v56 + 18) = v18;
          *(_WORD *)(v56 + 30) = (160 * v55 + 176) >> 4;
          float32x4_t v60 = (unsigned __int16 *)(v56 + 30);
          int v61 = (160 * (_WORD)v55 + 207) & 0x1FE0;
          uint64_t v62 = *(void *)(a2 + 8);
          unsigned int v118 = v8;
          int v119 = v43 + v42 + v52 + v54;
          BOOL v115 = v52;
          BOOL v111 = v43;
          if (v62 && (uint64_t v63 = *(unsigned int *)(a2 + 16), (v63 + v61) <= 0x4000))
          {
            uint64_t v65 = v62 + v63;
            v61 += v63;
          }
          else
          {
            uint64_t v64 = physx::PxcNpMemBlockPool::acquire(*(void *)a2, a5, (_DWORD *)(*(void *)a2 + 244), (int *)(*(void *)a2 + 240), 1);
            int v55 = v119;
            a2 = v120;
            uint64_t v65 = v64;
            *(void *)(v120 + 8) = v64;
          }
          unsigned int v66 = 0;
          *(_DWORD *)(a2 + 16) = v61;
          uint64_t v67 = a3 + 48 * v118;
          *(void *)(v67 + 32) = v65;
          *(void *)(v67 + 40) = 0;
          float v68 = (void *)(v67 + 32);
          uint64_t v69 = v65 + 176;
          *(unsigned char *)uint64_t v65 = 4;
          *(unsigned char *)(v65 + 1) = v55;
          *(unsigned char *)(v65 + 2) = 0;
          *(void *)(v65 + 64) = v106;
          *(_OWORD *)(v65 + 32) = xmmword_23435FBB0;
          *(_OWORD *)(v65 + 48) = xmmword_23435FBB0;
          if (v42)
          {
            a8.f32[0] = v129 + v129;
            float v71 = v33[2];
            float v70 = v33[3];
            float v72 = v19 + (float)(v70 * v70);
            float v73 = v33[1];
            float v74 = (float)((float)((float)(v128 + v128) * v73) + (float)(*v33 * (float)(v127 + v127)))
                + (float)(v71 * (float)(v129 + v129));
            float v75 = (float)((float)(v70
                                * (float)((float)(v71 * (float)(v127 + v127)) - (float)(*v33 * (float)(v129 + v129))))
                        + (float)((float)(v128 + v128) * v72))
                + (float)(v73 * v74);
            float v76 = (float)((float)(v70
                                * (float)((float)(*v33 * (float)(v128 + v128)) - (float)(v73 * (float)(v127 + v127))))
                        + (float)((float)(v129 + v129) * v72))
                + (float)(v71 * v74);
            float v121 = (float)((float)(v70
                                 * (float)((float)(v73 * (float)(v129 + v129)) - (float)(v71 * (float)(v128 + v128))))
                         + (float)((float)(v127 + v127) * v72))
                 + (float)(*v33 * v74);
            float v122 = v75;
            float v123 = v76;
            physx::Dy::ArticulationHelper::createHardLimitTGS(v114, v113, v18, v69, (uint64_t)&v121, v126, v14, a8);
            if (v111)
            {
              float v77 = v14;
              float v78 = (float)(v124.f32[1] * v123) - (float)(v125 * v122);
              float v79 = (float)(v125 * v121) - (float)(v124.f32[0] * v123);
              float v80 = (float)(v124.f32[0] * v122) - (float)(v124.f32[1] * v121);
              float v81 = (float)((float)(v79 * v79) + (float)(v78 * v78)) + (float)(v80 * v80);
              float v82 = 0.0;
              float v83 = 0.0;
              float v84 = 0.0;
              if (v81 > 0.0)
              {
                float v85 = 1.0 / sqrtf(v81);
                float v82 = v78 * v85;
                float v83 = v79 * v85;
                float v84 = v80 * v85;
              }
              float v103 = v83;
              float v104 = v82;
              float v112 = v84;
              float v86 = *(float *)(v25 + 320);
              float v87 = *(float *)(v25 + 324);
              *(void *)(v65 + 336) = 0;
              *(_DWORD *)(v65 + 344) = 0;
              *(void *)(v65 + 352) = 0;
              *(_DWORD *)(v65 + 360) = 0;
              *(float *)(v65 + 368) = v82;
              *(float *)(v65 + 372) = v83;
              *(float *)(v65 + 376) = v84;
              *(float *)(v65 + 384) = v82;
              *(float *)(v65 + 388) = v83;
              *(float *)(v65 + 392) = v84;
              *(_DWORD *)(v65 + 404) = -8388609;
              *(_DWORD *)(v65 + 420) = 0;
              *(void *)(v65 + 408) = 2139095039;
              *(_DWORD *)(v65 + 428) = 1065353216;
              unsigned int v88 = *v58;
              v134[0] = 0uLL;
              v89.i64[0] = __PAIR64__(LODWORD(v83), LODWORD(v82));
              v89.i64[1] = LODWORD(v84);
              v134[1] = v89;
              v90.i32[3] = 0;
              v90.f32[0] = -v82;
              v90.f32[1] = -v83;
              v90.f32[2] = -v84;
              v133[0] = (float32x4_t)xmmword_23441FE60;
              v133[1] = v90;
              physx::Dy::ArticulationHelper::getImpulseSelfResponse(v114, v88, v134, (float32x4_t *)(v65 + 432), v18, v133, (float32x4_t *)(v65 + 464));
              float v94 = (float)((float)((float)(v103 * *(float *)(v65 + 452)) + (float)(v104 * *(float *)(v65 + 448)))
                          + (float)(v112 * *(float *)(v65 + 456)))
                  - (float)((float)((float)(v103 * *(float *)(v65 + 484)) + (float)(v104 * *(float *)(v65 + 480)))
                          + (float)(v112 * *(float *)(v65 + 488)));
              if (v94 < 0.0) {
                physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyTGSContactPrep.cpp", 2965, "Warning: articulation ill-conditioned or under severe stress, tangential spring ignored", v91, v92, v93, v101);
              }
              float v95 = 1.0 / v94;
              float v96 = (float)(v102 * v87) + (float)((float)(v102 * v102) * v86);
              a8.f32[0] = 1.0 / (float)(v96 + 1.0);
              *(_DWORD *)(v65 + 348) = 0;
              *(_DWORD *)(v65 + 364) = 0;
              *(_DWORD *)(v65 + 416) = 0;
              *(float *)(v65 + 380) = -(float)(a8.f32[0] * v96);
              *(float *)(v65 + 396) = 1.0 - a8.f32[0];
              if (v94 <= 0.0) {
                float v95 = 0.0;
              }
              *(_DWORD *)(v65 + 400) = 0;
              *(float *)(v65 + 424) = v95;
              unsigned int v66 = 2;
              float v14 = v77;
              float v19 = -0.5;
            }
            else
            {
              unsigned int v66 = 1;
            }
            a2 = v120;
            int v55 = v119;
            uint64_t v69 = v65 + 176;
          }
          if (v116)
          {
            unsigned int v97 = v66 + 1;
            uint64_t v98 = v69;
            uint64_t v9 = v113;
            physx::Dy::ArticulationHelper::createHardLimitTGS(v114, v113, v18, v69 + 160 * v66, (uint64_t)&v124, (float)(*(float *)(v25 + 348) - v50) * 4.0, v14, a8);
            a2 = v120;
            unsigned int v66 = v97;
            unsigned int v99 = v118;
            int v55 = v119;
          }
          else
          {
            uint64_t v98 = v69;
            unsigned int v99 = v118;
            uint64_t v9 = v113;
          }
          uint64_t v26 = v18 + 1;
          if (v115)
          {
            *(float32x2_t *)v134[0].f32 = vneg_f32(v124);
            v134[0].f32[2] = -v125;
            physx::Dy::ArticulationHelper::createHardLimitTGS(v114, v9, v18, v98 + 160 * v66, (uint64_t)v134, (float)(*(float *)(v25 + 352) - v50) * -4.0, v14, a8);
            int v55 = v119;
            a2 = v120;
          }
          uint64_t v8 = v99 + 1;
          *(unsigned char *)(*v68 + 16 * *v60) = 0;
          *a4 += v55;
          uint64_t v15 = v107;
          unint64_t v13 = v108;
        }
        else
        {
          uint64_t v26 = v18 + 1;
        }
      }
      v16 += 84;
      v17 += 84;
      uint64_t v18 = v26;
    }
    while (v26 != v13);
  }
  return v8;
}

double physx::Dy::ArticulationHelper::createHardLimitTGS(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, float a6, float a7, float32x4_t a8)
{
  *(void *)a4 = 0;
  *(_DWORD *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(_DWORD *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = *(void *)a5;
  *(_DWORD *)(a4 + 40) = *(_DWORD *)(a5 + 8);
  *(void *)(a4 + 48) = *(void *)a5;
  *(_DWORD *)(a4 + 56) = *(_DWORD *)(a5 + 8);
  *(void *)(a4 + 68) = 0x7F7FFFFF00000000;
  *(_DWORD *)(a4 + 84) = 0;
  *(_DWORD *)(a4 + 76) = 0;
  *(_DWORD *)(a4 + 92) = 1065353216;
  unsigned int v12 = *(_DWORD *)(a2 + 40 * a3 + 32);
  a8.i64[0] = *(void *)a5;
  v13.i64[0] = vnegq_f32(a8).u64[0];
  a8.i64[1] = *(unsigned int *)(a5 + 8);
  v13.f32[2] = -a8.f32[2];
  v21[0] = 0u;
  v21[1] = a8;
  v13.i32[3] = 0;
  v20[0] = 0u;
  v20[1] = v13;
  physx::Dy::ArticulationHelper::getImpulseSelfResponse(a1, v12, v21, (float32x4_t *)(a4 + 96), a3, v20, (float32x4_t *)(a4 + 128));
  float v17 = (float)((float)((float)(*(float *)(a5 + 4) * *(float *)(a4 + 116)) + (float)(*(float *)a5 * *(float *)(a4 + 112)))
              + (float)(*(float *)(a5 + 8) * *(float *)(a4 + 120)))
      - (float)((float)((float)(*(float *)(a5 + 4) * *(float *)(a4 + 148)) + (float)(*(float *)a5 * *(float *)(a4 + 144)))
              + (float)(*(float *)(a5 + 8) * *(float *)(a4 + 152)));
  if (v17 < 0.0) {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyTGSContactPrep.cpp", 2935, "Warning: articulation ill-conditioned or under severe stress, joint limit ignored", v14, v15, v16, v20[0].i8[0]);
  }
  float v18 = 1.0 / v17;
  if (v17 <= 0.0) {
    float v18 = 0.0;
  }
  *(float *)(a4 + 12) = a6;
  *(float *)(a4 + 28) = a7 * -0.7;
  *(_DWORD *)(a4 + 80) = 2139095039;
  *(_DWORD *)(a4 + 44) = -1082130432;
  *(float *)(a4 + 88) = v18;
  *(void *)&double result = 1065353216;
  *(void *)(a4 + 60) = 1065353216;
  return result;
}

char *physx::Dy::solveExtContactStep(char *result, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6, float32x4_t *a7, float32x4_t *a8, int32x2_t a9, int32x2_t a10, float32x4_t *a11, float32x4_t *a12, float32x4_t *a13, float32x4_t *a14, float32x4_t *a15, char a16)
{
  if (*((_WORD *)result + 15))
  {
    float32x2_t v18 = (float32x2_t)vdup_lane_s32(a10, 0);
    _X16 = (float32x4_t *)*((void *)result + 4);
    int v20 = &_X16[*((unsigned __int16 *)result + 15)];
    float32x4_t v21 = vsubq_f32(*a6, *a7);
    float32x2_t v22 = (float32x2_t)vdup_lane_s32(a9, 0);
    do
    {
      unsigned int v23 = _X16->u8[2];
      uint64_t v24 = _X16->u8[3];
      __asm { PRFM            #0, [X16,#0x50] }
      uint64_t v30 = 112 * _X16->u8[2];
      if (_X16->i8[2])
      {
        unint64_t v31 = 0;
        v32.i64[0] = _X16[2].i64[0];
        v32.i64[1] = _X16[2].u32[2];
        float32x4_t v33 = vmulq_f32(v32, vsubq_f32(*a6, *a7));
        v33.i64[0] = vpaddq_f32(v33, v33).u64[0];
        float32x2_t v34 = vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32);
        float v35 = &_X16[2].f32[3];
        *(float32x2_t *)v33.f32 = vld1_dup_f32(v35);
        float32x4_t v36 = *a11;
        float32x2_t v37 = vneg_f32(*(float32x2_t *)v33.f32);
        uint64_t v38 = v30 + 80;
        float32x2_t v39 = 0;
        float32x4_t v40 = 0uLL;
        float32x4_t v41 = 0uLL;
        float32x4_t v42 = 0uLL;
        float32x4_t v43 = 0uLL;
        do
        {
          _X22 = &_X16[v31 / 0x10];
          __asm { PRFM            #0, [X22,#0xC0] }
          v46.i64[0] = _X16[v31 / 0x10 + 5].i64[0];
          v46.i64[1] = _X16[v31 / 0x10 + 5].u32[2];
          v47.i64[0] = _X16[v31 / 0x10 + 6].i64[0];
          v47.i64[1] = _X16[v31 / 0x10 + 6].u32[2];
          float v48 = (const float *)((char *)_X16->f32 + v38);
          float32x2_t v49 = vld1_dup_f32(v48);
          float32x4_t v50 = vsubq_f32(vmlaq_f32(vmulq_f32(v46, *a4), v32, *a2), vmlaq_f32(vmulq_f32(v47, *a5), v32, *a3));
          v50.i64[0] = vpaddq_f32(v50, v50).u64[0];
          float32x4_t v51 = vmulq_f32(v46, *a8);
          v51.i64[0] = vpaddq_f32(v51, v51).u64[0];
          float32x4_t v52 = vmulq_f32(v36, v47);
          v52.i64[0] = vpaddq_f32(v52, v52).u64[0];
          v17.i32[0] = _X16[v31 / 0x10 + 7].i32[0];
          float v53 = &_X16[v31 / 0x10 + 5].f32[3];
          float32x2_t v54 = vld1_dup_f32(v53);
          *(float32x2_t *)v50.f32 = vmax_f32(vmul_n_f32(vsub_f32(vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.f32, 0), vmin_f32(v37, vmul_n_f32(vmax_f32(v22, vadd_f32(vsub_f32(vadd_f32(v34, vsub_f32(vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32), vpadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32))), vmul_n_f32(v18, v17.f32[0])), v54)), _X16[v31 / 0x10 + 7].f32[1]))),
                                          vpadd_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)v50.f32)),
                                        _X16[v31 / 0x10 + 6].f32[3]),
                                      vneg_f32(v49));
          int8x16_t v55 = (int8x16_t)vmlaq_n_f32(*a2, _X16[v31 / 0x10 + 8], v50.f32[0]);
          float32x4_t v56 = _X16[v31 / 0x10 + 10];
          float32x4_t v17 = _X16[v31 / 0x10 + 11];
          v55.i64[1] = vextq_s8(v55, v55, 8uLL).u32[0];
          *a2 = (float32x4_t)v55;
          int8x16_t v57 = (int8x16_t)vmlaq_n_f32(*a4, v56, v50.f32[0]);
          v57.i64[1] = vextq_s8(v57, v57, 8uLL).u32[0];
          *a4 = (float32x4_t)v57;
          int8x16_t v58 = (int8x16_t)vmlaq_n_f32(*a3, _X16[v31 / 0x10 + 9], v50.f32[0]);
          v58.i64[1] = vextq_s8(v58, v58, 8uLL).u32[0];
          *a3 = (float32x4_t)v58;
          int8x16_t v16 = (int8x16_t)vmlaq_n_f32(*a5, v17, v50.f32[0]);
          v16.i64[1] = vextq_s8(v16, v16, 8uLL).u32[0];
          *a5 = (float32x4_t)v16;
          float32x4_t v40 = vmlaq_n_f32(v40, v32, v50.f32[0]);
          v16.i32[1] = 0;
          v40.i64[1] = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u32[0];
          float32x4_t v42 = vmlaq_n_f32(v42, v46, v50.f32[0]);
          v42.i64[1] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u32[0];
          float32x4_t v41 = vmlaq_n_f32(v41, v32, v50.f32[0]);
          v41.i64[1] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u32[0];
          float32x4_t v43 = vmlaq_n_f32(v43, v47, v50.f32[0]);
          v43.i64[1] = vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).u32[0];
          float32x2_t v59 = vadd_f32(v49, *(float32x2_t *)v50.f32);
          *(__int32 *)((char *)_X16->i32 + v38) = v59.i32[0];
          float32x2_t v39 = vadd_f32(v39, v59);
          v31 += 112;
          v38 += 4;
        }
        while (v30 != v31);
      }
      else
      {
        float32x2_t v39 = 0;
        float32x4_t v40 = 0uLL;
        float32x4_t v41 = 0uLL;
        float32x4_t v42 = 0uLL;
        float32x4_t v43 = 0uLL;
      }
      uint64_t v60 = (4 * (_WORD)v23 + 12) & 0x7F0;
      double result = (char *)&_X16[7 * v23 + 5] + v60;
      if (a16 && v24)
      {
        uint64_t v61 = 0;
        uint64_t v62 = &_X16[3].f32[1];
        float32x2_t v63 = vld1_dup_f32(v62);
        float32x2_t v64 = vmax_f32(v39, v63);
        __asm { PRFM            #0, [X0] }
        float32x2_t v66 = *(float32x2_t *)_X16[1].f32;
        float32x2_t v67 = vmul_n_f32(v64, v66.f32[0]);
        float32x2_t v68 = vmul_lane_f32(v64, v66, 1);
        float32x2_t v69 = vneg_f32(v68);
        float v70 = (char *)&_X16[(unint64_t)v30 / 0x10] + v60;
        int8x16_t v71 = 0uLL;
        do
        {
          _X22 = &v70[v61];
          __asm { PRFM            #0, [X22,#0xD0] }
          float32x4_t v74 = *(float32x4_t *)&v70[v61 + 80];
          float32x4_t v75 = *(float32x4_t *)&v70[v61 + 96];
          float32x4_t v76 = v75;
          float32x4_t v77 = *(float32x4_t *)&v70[v61 + 112];
          v76.i32[3] = 0;
          v77.i32[3] = 0;
          v16.i32[0] = *(_DWORD *)&v70[v61 + 132];
          float32x2_t v78 = (float32x2_t)vdup_laneq_s32((int32x4_t)v75, 3);
          float32x2_t v79 = (float32x2_t)vdup_laneq_s32((int32x4_t)v74, 3);
          v74.i32[3] = 0;
          float32x4_t v80 = vmulq_f32(v76, *a8);
          v80.i64[0] = vpaddq_f32(v80, v80).u64[0];
          float32x4_t v81 = vmulq_f32(v77, *a11);
          v81.i64[0] = vpaddq_f32(v81, v81).u64[0];
          float32x4_t v82 = vmulq_f32(v21, v74);
          v82.i64[0] = vpaddq_f32(v82, v82).u64[0];
          float32x2_t v83 = vadd_f32(v79, vmla_laneq_f32(vadd_f32(vsub_f32(vpadd_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v80.f32), vpadd_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v81.f32)), vpadd_f32(*(float32x2_t *)v82.f32, *(float32x2_t *)v82.f32)), v18, v75, 3));
          float32x4_t v84 = vsubq_f32(vmlaq_f32(vmulq_f32(v76, *a4), v74, *a2), vmlaq_f32(vmulq_f32(v77, *a5), v74, *a3));
          v84.i64[0] = vpaddq_f32(v84, v84).u64[0];
          float32x2_t v85 = vmls_laneq_f32(vmls_laneq_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v16.i8, 0), vsub_f32(vmul_n_f32(v83, *(float *)&v70[v61 + 128]), v78), *(float32x4_t *)&v70[v61 + 112], 3), vpadd_f32(*(float32x2_t *)v84.f32, *(float32x2_t *)v84.f32), *(float32x4_t *)&v70[v61 + 112], 3);
          int8x16_t v86 = (int8x16_t)vdupq_lane_s32(vcgt_f32(vabs_f32(v85), v67), 0);
          *(int8x8_t *)v84.f32 = vbsl_s8(*(int8x8_t *)v86.i8, (int8x8_t)vmin_f32(v68, vmax_f32(v69, v85)), (int8x8_t)v85);
          LODWORD(v87) = vsub_f32(*(float32x2_t *)v84.f32, *(float32x2_t *)v16.i8).u32[0];
          int8x16_t v88 = (int8x16_t)vmlaq_n_f32(*a2, *(float32x4_t *)&v70[v61 + 144], v87);
          v88.i64[1] = vextq_s8(v88, v88, 8uLL).u32[0];
          float32x4_t v89 = *(float32x4_t *)&v70[v61 + 176];
          float32x4_t v90 = *(float32x4_t *)&v70[v61 + 192];
          *a2 = (float32x4_t)v88;
          int8x16_t v91 = (int8x16_t)vmlaq_n_f32(*a4, v89, v87);
          v91.i64[1] = vextq_s8(v91, v91, 8uLL).u32[0];
          *a4 = (float32x4_t)v91;
          float32x4_t v17 = vmlaq_n_f32(*a3, *(float32x4_t *)&v70[v61 + 160], v87);
          v17.i64[1] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u32[0];
          int8x16_t v71 = vorrq_s8(v86, v71);
          *a3 = v17;
          float32x4_t v40 = vmlaq_n_f32(v40, v74, v87);
          int8x16_t v16 = (int8x16_t)vmlaq_n_f32(*a5, v90, v87);
          v40.i64[1] = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u32[0];
          float32x4_t v42 = vmlaq_n_f32(v42, v76, v87);
          v42.i64[1] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u32[0];
          float32x4_t v41 = vmlaq_n_f32(v41, v74, v87);
          v16.i64[1] = vextq_s8(v16, v16, 8uLL).u32[0];
          float32x4_t v43 = vmlaq_n_f32(v43, v77, v87);
          v41.i64[1] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u32[0];
          *a5 = (float32x4_t)v16;
          v43.i64[1] = vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).u32[0];
          *((_DWORD *)_X22 + 33) = v84.i32[0];
          v61 += 128;
        }
        while (v24 << 7 != v61);
        _X16[3].i32[2] = v71.i32[0];
      }
      int8x16_t v92 = (int8x16_t)vmlaq_laneq_f32(*a12, v40, _X16[1], 2);
      v92.i64[1] = vextq_s8(v92, v92, 8uLL).u32[0];
      *a12 = (float32x4_t)v92;
      int8x16_t v93 = (int8x16_t)vmlaq_n_f32(*a14, v42, _X16->f32[1]);
      v93.i64[1] = vextq_s8(v93, v93, 8uLL).u32[0];
      *a14 = (float32x4_t)v93;
      int8x16_t v94 = (int8x16_t)vmlsq_laneq_f32(*a13, v41, _X16[1], 3);
      v94.i64[1] = vextq_s8(v94, v94, 8uLL).u32[0];
      *a13 = (float32x4_t)v94;
      int8x16_t v95 = (int8x16_t)vmlsq_lane_f32(*a15, v43, (float32x2_t)_X16->u32[2], 0);
      v95.i64[1] = vextq_s8(v95, v95, 8uLL).u32[0];
      *a15 = (float32x4_t)v95;
      _X16 = (float32x4_t *)&result[128 * v24];
    }
    while (_X16 < v20);
  }
  return result;
}

_DWORD *physx::Dy::solveExtContactStep(char *a1, uint64_t a2, float a3, float32_t a4)
{
  uint64_t v8 = *(void *)a1;
  if (v8 == *((void *)a1 + 1))
  {
    (*(void (**)(uint64_t, void, void, float32x4_t *, float32x4_t *))(*(void *)v8 + 304))(v8, *((unsigned __int16 *)a1 + 8), *((unsigned __int16 *)a1 + 9), &v31, &v29);
    float32x4_t v39 = v32;
    float32x4_t v40 = v31;
    float32x4_t v37 = v30;
    float32x4_t v38 = v29;
    (*(void (**)(float32x4_t *__return_ptr))(**(void **)a1 + 240))(v28);
    (*(void (**)(float32x4_t *__return_ptr))(**((void **)a1 + 1) + 240))(v27);
    float32x4_t v35 = v28[1];
    float32x4_t v36 = v28[0];
    float32x4_t v13 = v27[0];
    float32x4_t v14 = v27[1];
LABEL_8:
    float32x4_t v34 = v13;
    float32x4_t v33 = v14;
    goto LABEL_10;
  }
  if (*((unsigned __int16 *)a1 + 8) == 0xFFFF)
  {
    v9.i64[0] = *(void *)v8;
    v9.i64[1] = *(unsigned int *)(v8 + 8);
    v10.i64[0] = *(void *)(v8 + 16);
    v10.i64[1] = *(unsigned int *)(v8 + 24);
    v11.i64[0] = *(void *)(v8 + 48);
    v11.i64[1] = *(unsigned int *)(v8 + 56);
    v12.i64[0] = *(void *)(v8 + 32);
    v12.i64[1] = *(unsigned int *)(v8 + 40);
  }
  else
  {
    (*(void (**)(float32x4_t *__return_ptr))(*(void *)v8 + 312))(&v31);
    (*(void (**)(float32x4_t *__return_ptr))(**(void **)a1 + 240))(&v29);
    float32x4_t v9 = v31;
    float32x4_t v10 = v32;
    float32x4_t v11 = v29;
    float32x4_t v12 = v30;
  }
  float32x4_t v39 = v10;
  float32x4_t v40 = v9;
  float32x4_t v35 = v12;
  float32x4_t v36 = v11;
  if (*((unsigned __int16 *)a1 + 9) != 0xFFFF)
  {
    (*(void (**)(float32x4_t *__return_ptr))(**((void **)a1 + 1) + 312))(&v31);
    (*(void (**)(float32x4_t *__return_ptr))(**((void **)a1 + 1) + 240))(&v29);
    float32x4_t v37 = v32;
    float32x4_t v38 = v31;
    float32x4_t v13 = v29;
    float32x4_t v14 = v30;
    goto LABEL_8;
  }
  uint64_t v15 = *((void *)a1 + 1);
  v16.i64[0] = *(void *)v15;
  v16.i64[1] = *(unsigned int *)(v15 + 8);
  v14.i64[0] = *(void *)(v15 + 16);
  v14.i64[1] = *(unsigned int *)(v15 + 24);
  float32x4_t v37 = v14;
  float32x4_t v38 = v16;
  v16.i64[0] = *(void *)(v15 + 48);
  v16.i64[1] = *(unsigned int *)(v15 + 56);
  float32x4_t v34 = v16;
  v16.i64[0] = *(void *)(v15 + 32);
  v16.i64[1] = *(unsigned int *)(v15 + 40);
  float32x4_t v33 = v16;
LABEL_10:
  float32x4_t v31 = 0u;
  float32x4_t v29 = 0u;
  v28[0] = 0u;
  v27[0] = 0u;
  v14.f32[0] = a4;
  physx::Dy::solveExtContactStep(a1, &v40, &v38, &v39, &v37, &v36, &v34, &v35, (int32x2_t)LODWORD(a3), *(int32x2_t *)v14.f32, &v33, &v31, &v29, v28, v27, 1);
  double result = *(_DWORD **)a1;
  uint64_t v18 = *((unsigned __int16 *)a1 + 8);
  if (*(void *)a1 == *((void *)a1 + 1)) {
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, float32x4_t *, float32x4_t *, void, float32x4_t *, float32x4_t *, void, void))(*(void *)result + 264))(result, v18, &v31, v28, *((unsigned __int16 *)a1 + 9), &v29, v27, *(void *)(a2 + 56), *(void *)(a2 + 64));
  }
  if (v18 == 0xFFFF)
  {
    __int32 v19 = v40.i32[2];
    *(void *)double result = v40.i64[0];
    result[2] = v19;
    uint64_t v20 = *(void *)a1;
    __int32 v21 = v39.i32[2];
    *(void *)(v20 + 16) = v39.i64[0];
    *(_DWORD *)(v20 + 24) = v21;
  }
  else
  {
    double result = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, void, void, float32x4_t, float32x4_t))(*(void *)result + 256))(result, v18, *(void *)(a2 + 56), *(void *)(a2 + 64), v31, v28[0]);
  }
  uint64_t v22 = *((unsigned __int16 *)a1 + 9);
  if (v22 != 0xFFFF) {
    return (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, void, void, float32x4_t, float32x4_t))(**((void **)a1 + 1) + 256))(*((void *)a1 + 1), v22, *(void *)(a2 + 56), *(void *)(a2 + 64), v29, v27[0]);
  }
  uint64_t v23 = *((void *)a1 + 1);
  __int32 v24 = v38.i32[2];
  *(void *)uint64_t v23 = v38.i64[0];
  *(_DWORD *)(v23 + 8) = v24;
  uint64_t v25 = *((void *)a1 + 1);
  __int32 v26 = v37.i32[2];
  *(void *)(v25 + 16) = v37.i64[0];
  *(_DWORD *)(v25 + 24) = v26;
  return result;
}

uint64_t physx::Dy::DynamicsTGSContext::setSimulationController(uint64_t result, uint64_t a2)
{
  *(void *)(result + 80) = a2;
  return result;
}

uint64_t physx::Dy::ArticulationBlockAllocator::reserveConstraintData(physx::Dy::ArticulationBlockAllocator *this, int a2)
{
  return physx::Dy::BlockBasedAllocator::allocate((physx::Dy::ArticulationBlockAllocator *)((char *)this + 8), a2);
}

uint64_t physx::Dy::ArticulationBlockAllocator::reserveFrictionData(uint64_t (***this)(void))
{
  return (*this[5 * *((unsigned int *)this + 32) + 6])();
}

void physx::Dy::ArticulationBlockAllocator::~ArticulationBlockAllocator(physx::Dy::ArticulationBlockAllocator *this)
{
  physx::Dy::ArticulationBlockAllocator::~ArticulationBlockAllocator(this);
  JUMPOUT(0x237DBCBD0);
}

{
  uint64_t i;

  *(void *)this = &unk_26E724D60;
  for (uint64_t i = 88; i != 8; i -= 40)
    physx::Dy::BlockBasedAllocator::~BlockBasedAllocator((physx::Dy::ArticulationBlockAllocator *)((char *)this + i));
  physx::Dy::BlockBasedAllocator::~BlockBasedAllocator((physx::Dy::ArticulationBlockAllocator *)((char *)this + 8));
}

uint64_t physx::Dy::BlockBasedAllocator::allocate(physx::Dy::BlockBasedAllocator *this, int a2)
{
  int v5 = (void *)((char *)this + 8);
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    float32x4_t v6 = (unsigned int *)(v4 + 0x8000);
    uint64_t v7 = *(unsigned int *)(v4 + 0x8000);
    unsigned int v8 = v7 + ((a2 + 15) & 0xFFFFFFF0);
    if (!(v8 >> 15)) {
      goto LABEL_14;
    }
  }
  uint64_t v9 = *((unsigned int *)this + 8);
  if (v9 >= *((_DWORD *)this + 6))
  {
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, 32772, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyFeatherstoneInverseDynamic.cpp", 1518);
    *(_DWORD *)(v13 + 0x8000) = 0;
    *((void *)this + 1) = v13;
    uint64_t v14 = *((unsigned int *)this + 6);
    if ((*((_DWORD *)this + 7) & 0x7FFFFFFFu) <= v14)
    {
      physx::shdfnd::Array<physx::Dy::BlockBasedAllocator::AllocationPage *,physx::shdfnd::ReflectionAllocator<physx::Dy::BlockBasedAllocator::AllocationPage *>>::growAndPushBack((uint64_t)this + 16, v5);
      int v15 = *((_DWORD *)this + 6);
    }
    else
    {
      *(void *)(*((void *)this + 2) + 8 * v14) = v13;
      int v15 = v14 + 1;
      *((_DWORD *)this + 6) = v15;
    }
    *((_DWORD *)this + 8) = v15;
    uint64_t v4 = *((void *)this + 1);
    float32x4_t v6 = (unsigned int *)(v4 + 0x8000);
    uint64_t v7 = *(unsigned int *)(v4 + 0x8000);
    unsigned int v8 = v7 + ((a2 + 15) & 0xFFFFFFF0);
    if (v8 >> 15) {
      return 0;
    }
LABEL_14:
    uint64_t result = v4 + v7;
    *float32x4_t v6 = v8;
    return result;
  }
  *((_DWORD *)this + 8) = v9 + 1;
  uint64_t v10 = *(void *)(*((void *)this + 2) + 8 * v9);
  *((void *)this + 1) = v10;
  if (((a2 + 15) & 0xFFFF8000) != 0) {
    unsigned int v11 = 0;
  }
  else {
    unsigned int v11 = (a2 + 15) & 0xFFFFFFF0;
  }
  *(_DWORD *)(v10 + 0x8000) = v11;
  if (((a2 + 15) & 0xFFFF8000) != 0) {
    return 0;
  }
  else {
    return v10;
  }
}

void physx::Dy::BlockBasedAllocator::~BlockBasedAllocator(physx::Dy::BlockBasedAllocator *this)
{
  physx::Dy::BlockBasedAllocator::~BlockBasedAllocator(this);
  JUMPOUT(0x237DBCBD0);
}

{
  int v2;

  *(void *)this = &unk_26E724DA8;
  physx::Dy::BlockBasedAllocator::release((uint64_t)this);
  uint64_t v2 = *((_DWORD *)this + 7);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0 && *((void *)this + 2) != 0) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
}

uint64_t physx::shdfnd::Array<physx::Dy::BlockBasedAllocator::AllocationPage *,physx::shdfnd::ReflectionAllocator<physx::Dy::BlockBasedAllocator::AllocationPage *>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::BlockBasedAllocator::AllocationPage *>::getN"
    }
           "ame() [T = physx::Dy::BlockBasedAllocator::AllocationPage *]";
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    unsigned int v8 = (void *)result;
  }
  else
  {
    unsigned int v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  uint64_t v10 = &v8[v9];
  if (v9)
  {
    unsigned int v11 = *(uint64_t **)v3;
    float32x4_t v12 = v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  void *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::Dy::BlockBasedAllocator::release(uint64_t this)
{
  uint64_t v1 = this;
  unint64_t v2 = *(unsigned int *)(this + 24);
  if (v2)
  {
    for (unint64_t i = 0; i < v2; ++i)
    {
      if (*(void *)(*(void *)(v1 + 16) + 8 * i))
      {
        this = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        unint64_t v2 = *(unsigned int *)(v1 + 24);
      }
    }
  }
  *(_DWORD *)(v1 + 24) = 0;
  *(void *)(v1 + 8) = 0;
  *(_DWORD *)(v1 + 32) = 0;
  return this;
}

void physx::Dy::UpdateContinuationTGSTask::~UpdateContinuationTGSTask(physx::Dy::UpdateContinuationTGSTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Dy::UpdateContinuationTGSTask::getName(physx::Dy::UpdateContinuationTGSTask *this)
{
  return "UpdateContinuationTask";
}

uint64_t physx::Dy::UpdateContinuationTGSTask::runInternal(physx::Dy::UpdateContinuationTGSTask *this)
{
  uint64_t v1 = *((void *)this + 5);
  uint64_t v2 = *((void *)this + 6);
  uint64_t v3 = *((void *)this + 3);
  uint64_t v4 = *((void *)this + 7);
  uint64_t v129 = *(void *)(v2 + 544);
  uint64_t v5 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(v1 + 776), 48, 0x10u);
  uint64_t v138 = v1;
  *(void *)(v5 + 8) = *(void *)(v1 + 800);
  *(void *)(v5 + 16) = 0;
  *(_DWORD *)(v5 + 32) = 0;
  *(void *)uint64_t v5 = &unk_26E724EC0;
  *(void *)(v5 + 40) = 0;
  *(_DWORD *)(v5 + 32) = 1;
  *(void *)(v5 + 24) = v3;
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
    *(void *)(v5 + 16) = *(void *)(*(void *)(v5 + 24) + 16);
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
  uint64_t v128 = v5;
  *(void *)(v5 + 40) = v4;
  unint64_t v6 = *(unsigned int *)(v2 + 552);
  if (v6)
  {
    unsigned int v147 = 0;
    unsigned int v7 = 0;
    unsigned int v148 = 0;
    unsigned int v146 = 0;
    unsigned int v8 = 0;
    unsigned int v9 = *(_DWORD *)(v1 + 140);
    unsigned int v10 = *(_DWORD *)(v1 + 144);
    if (v9) {
      BOOL v11 = v10 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    int v12 = !v11;
    int v124 = v12;
    unsigned int v125 = *(_DWORD *)(v1 + 144);
    uint64_t v122 = v1 + 104;
    uint64_t v123 = v1 + 720;
    unint64_t v127 = *(unsigned int *)(v2 + 552);
    unsigned int v126 = *(_DWORD *)(v1 + 140);
    do
    {
      unsigned int v149 = v8;
      if (v124)
      {
        uint64_t v13 = 0;
        unsigned int v14 = 0;
        unsigned int v15 = 0;
        int32x2_t v16 = 0;
        do
        {
          uint64_t v17 = *(void *)(v2 + 344) + 44 * *(unsigned int *)(v129 + 4 * v8 + 4 * v13);
          v14 += *(_DWORD *)(v17 + 8);
          v15 += *(_DWORD *)(v17 + 12);
          int32x2_t v16 = vadd_s32(*(int32x2_t *)(v17 + 36), v16);
          ++v13;
        }
        while (v14 < v9 && v13 + (unint64_t)v8 < v6 && v15 < v10);
        unsigned int v142 = v15;
        unsigned int v139 = v8 + v13;
        unsigned int v140 = v14;
        int32x2_t v141 = v16;
        unsigned __int32 v130 = vadd_s32(v16, vdup_lane_s32(v16, 1)).u32[0];
      }
      else
      {
        unsigned __int32 v130 = 0;
        unsigned int v142 = 0;
        unsigned int v139 = v8;
        unsigned int v140 = 0;
        int32x2_t v141 = 0;
      }
      uint64_t v20 = v138;
      uint64_t v21 = *(void *)(v138 + 560);
      uint64_t v151 = *(void *)(v138 + 544);
      uint64_t v153 = *(void *)(v138 + 688);
      uint64_t v157 = *(void *)(v138 + 464);
      uint64_t v160 = *(void *)(v138 + 448);
      uint64_t v22 = *(void *)(v138 + 496);
      uint64_t v23 = *(void *)(v138 + 480);
      uint64_t v24 = *(void *)(v138 + 512);
      uint64_t v25 = *(void *)(v138 + 528);
      uint64_t v143 = *(void *)(v138 + 656);
      uint64_t v26 = *(void *)(v138 + 672);
      int v27 = *(_DWORD *)(v138 + 704);
      float32x4_t v28 = (physx::Dy::ThreadContext *)physx::shdfnd::SListImpl::pop(*(physx::shdfnd::SListImpl **)(v138 + 432));
      uint64_t v29 = v151;
      uint64_t v30 = v153;
      uint64_t v31 = v25;
      int v32 = v27;
      uint64_t v33 = v26;
      float32x4_t v34 = v28;
      uint64_t v35 = v157;
      uint64_t v36 = v160;
      if (!v34)
      {
        uint64_t v144 = v33;
        unsigned int v37 = v7;
        uint64_t v38 = physx::shdfnd::Foundation::mInstance;
        if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
          float32x4_t v39 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ThreadContext>::getName() [T = physx::D"
        }
                "y::ThreadContext]";
        else {
          float32x4_t v39 = "<allocation names disabled>";
        }
        uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v38 + 24)
                                                                                               + 16))(v38 + 24, 12343, v39, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/include/utils/PxcThreadCoherentCache.h", 82);
        if (v40)
        {
          float32x4_t v34 = (physx::Dy::ThreadContext *)((v40 + 23) & 0xFFFFFFFFFFFFFFF0);
          *((void *)v34 - 1) = (char *)v34 - v40;
        }
        else
        {
          float32x4_t v34 = 0;
        }
        unsigned int v7 = v37;
        uint64_t v20 = v138;
        physx::Dy::ThreadContext::ThreadContext(v34, *(physx::PxcNpMemBlockPool **)(v138 + 440));
        uint64_t v33 = v144;
        int v32 = v27;
        uint64_t v31 = v25;
        uint64_t v35 = v157;
        uint64_t v36 = v160;
        uint64_t v29 = v151;
        uint64_t v30 = v153;
      }
      uint64_t v152 = (uint64_t)v34;
      uint64_t v161 = v21 + 8 * v148;
      uint64_t v41 = v29 + 8 * v146;
      unsigned int v137 = v7;
      uint64_t v131 = v30 + 32 * v7;
      uint64_t v154 = v36 + 48 * v147;
      uint64_t v134 = v35 + 48 * v147;
      uint64_t v42 = v23 + 48 * v147;
      uint64_t v43 = v24 + 32 * v146;
      uint64_t v133 = v31 + 8 * v146;
      uint64_t v44 = v32 + v146;
      uint64_t v45 = v33 + 4 * v146;
      uint64_t v46 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(v20 + 776), 192, 0x10u);
      *(void *)uint64_t v46 = v152;
      *(_DWORD *)(v46 + 8) = v140;
      uint64_t v47 = v46 + 8;
      *(_DWORD *)(v46 + 12) = v142 & 0x7FFFFFFF;
      *(int32x2_t *)(v46 + 16) = v141;
      *(void *)(v46 + 24) = v41;
      uint64_t v48 = v46;
      *(void *)(v46 + 32) = v161;
      *(void *)(v46 + 40) = 0;
      *(void *)(v46 + 48) = v131;
      *(void *)(v46 + 56) = v129 + 4 * v149;
      *(_DWORD *)(v46 + 64) = v139 - v149;
      *(void *)(v46 + 72) = v143;
      *(void *)(v46 + 80) = v45;
      *(void *)(v46 + 88) = v154;
      *(void *)(v46 + 96) = v134;
      *(void *)(v46 + 104) = v42;
      *(void *)(v46 + 112) = v22 + 8 * v147;
      *(void *)(v46 + 120) = v43;
      *(void *)(v46 + 128) = v133;
      *(void *)(v46 + 144) = 0;
      uint64_t v49 = v46 + 144;
      uint64_t v50 = v46 + 148;
      uint64_t v135 = v44;
      *(_DWORD *)(v46 + 136) = v44;
      *(void *)(v152 + 12240) = 0;
      *(_DWORD *)(v152 + 12212) = 0;
      *(void *)(v152 + 12264) = *(void *)(v152 + 12016);
      *(void *)(v152 + 12280) = *(void *)(v152 + 12064);
      *(_DWORD *)(v152 + 12048) = 0;
      *(_DWORD *)(v152 + 12024) = 0;
      *(void *)(v152 + 11912) = 0;
      *(void *)(v152 + 11904) = 0;
      *(void *)(v152 + 11896) = 0;
      uint64_t v51 = *(void *)(v46 + 128);
      *(void *)(v152 + 11992) = *(void *)(v46 + 120);
      *(void *)(v152 + 11968) = v51;
      uint64_t v150 = v46 + 24;
      *(_OWORD *)(v152 + 11976) = *(_OWORD *)(v46 + 24);
      *(_OWORD *)(v152 + 12000) = *(_OWORD *)(v46 + 72);
      physx::Dy::ThreadContext::resizeArrays(v152, 0, *(_DWORD *)(v46 + 12) & 0x7FFFFFFF);
      uint64_t v52 = *(unsigned int *)(v48 + 64);
      uint64_t v145 = v47;
      uint64_t v136 = v48;
      uint64_t v132 = v50;
      if (v52)
      {
        uint64_t v53 = 0;
        unsigned int v54 = 0;
        unsigned int v55 = 0;
        uint64_t v56 = *(void *)(v152 + 11968);
        uint64_t v57 = *(void *)(v152 + 11976);
        uint64_t v58 = *(void *)(v152 + 11984);
        uint64_t v59 = *(void *)(v152 + 12000);
        uint64_t v60 = *(void *)(v152 + 12008);
        uint64_t v61 = *(void *)(v48 + 56);
        do
        {
          unsigned int v62 = *(_DWORD *)(*(void *)(v2 + 344) + 44 * *(unsigned int *)(v61 + 4 * v53));
          if (v62 <= 0xFFFFFF7F)
          {
            do
            {
              uint64_t v63 = v62 >> 7;
              uint64_t v64 = *(void *)(v2 + 248);
              uint64_t v65 = v64 + 32 * v63;
              int v66 = *(unsigned __int8 *)(v65 + 5);
              uint64_t v67 = *(void *)(v65 + 24);
              if (v66 == 1)
              {
                *(void *)(v58 + 8 * v55++) = v67;
              }
              else
              {
                *(void *)(v57 + 8 * v54) = v67;
                *(void *)(v56 + 8 * v54) = *(void *)(v67 + 40);
                *(_DWORD *)(v60 + 4 * v54) = v63;
                *(_DWORD *)(v59 + 4 * *(unsigned int *)(*(void *)(v2 + 264) + 4 * v63)) = v54++;
              }
              unsigned int v62 = *(_DWORD *)(v64 + 32 * v63 + 8);
            }
            while (v62 < 0xFFFFFF80);
          }
          ++v53;
        }
        while (v53 != v52);
        uint64_t v68 = 0;
        unsigned int v69 = 0;
        uint64_t v70 = *(void *)(v48 + 48);
        uint64_t v155 = v61;
        uint64_t v158 = v52;
        do
        {
          unsigned int v71 = *(_DWORD *)(*(void *)(v2 + 344) + 44 * *(unsigned int *)(v61 + 4 * v68) + 20);
          for (uint64_t i = v68; v71 != -1; v71 = *(_DWORD *)(v73 + 16 * (v71 % v72) + 8))
          {
            unsigned int v72 = *(_DWORD *)(v2 + 304);
            uint64_t v73 = *(void *)(*(void *)(v2 + 280) + 8 * (v71 / v72));
            uint64_t v74 = *(void *)(*(void *)(*(void *)(v2 + 176) + 8 * (v71 / *(_DWORD *)(v2 + 200)))
                            + 8 * (v71 % *(_DWORD *)(v2 + 200)));
            if (v74)
            {
              float32x4_t v75 = *(uint64_t **)(v2 + 832);
              unsigned int v76 = *((_DWORD *)v75 + 6);
              uint64_t v77 = *v75;
              unint64_t v78 = *(unsigned int *)(*(void *)(*v75 + 8 * (2 * v71 / v76)) + 4 * (2 * v71 % v76));
              unint64_t v79 = *(unsigned int *)(*(void *)(v77 + 8 * (((2 * v71) | 1) / v76)) + 4 * (((2 * v71) | 1) % v76));
              uint64_t v80 = v70 + 32 * v69;
              *(void *)(v80 + 24) = v74;
              unint64_t v81 = v78 >> 7;
              uint64_t v82 = *(void *)(v2 + 248) + 32 * (v78 >> 7);
              if (*(unsigned char *)(v82 + 5) == 1)
              {
                (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(v82 + 24) + 376))(*(void *)(v82 + 24), (v78 >> 1) & 0x3F, v70 + 32 * v69, v80 + 16);
              }
              else
              {
                if ((*(unsigned char *)(v82 + 4) & 4) != 0)
                {
                  *(unsigned char *)(v80 + 16) = 1;
                  uint64_t v83 = *(unsigned int *)(*(void *)(v2 + 264) + 4 * v81);
                }
                else
                {
                  *(unsigned char *)(v80 + 16) = 0;
                  uint64_t v83 = *(unsigned int *)(v59 + 4 * *(unsigned int *)(*(void *)(v2 + 264) + 4 * v81));
                }
                *(void *)uint64_t v80 = v83;
              }
              ++v69;
              if (v79 < 0xFFFFFF80)
              {
                unint64_t v84 = v79 >> 7;
                uint64_t v85 = *(void *)(v2 + 248) + 32 * (v79 >> 7);
                if (*(unsigned char *)(v85 + 5) == 1)
                {
                  (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(v85 + 24) + 376))(*(void *)(v85 + 24), (v79 >> 1) & 0x3F, v80 + 8, v80 + 17);
                }
                else
                {
                  if ((*(unsigned char *)(v85 + 4) & 4) != 0)
                  {
                    *(unsigned char *)(v80 + 17) = 1;
                    uint64_t v86 = *(unsigned int *)(*(void *)(v2 + 264) + 4 * v84);
                  }
                  else
                  {
                    *(unsigned char *)(v80 + 17) = 0;
                    uint64_t v86 = *(unsigned int *)(v59 + 4 * *(unsigned int *)(*(void *)(v2 + 264) + 4 * v84));
                  }
                  *(void *)(v80 + 8) = v86;
                }
              }
              else
              {
                *(unsigned char *)(v80 + 17) = 3;
              }
            }
          }
          uint64_t v68 = i + 1;
          uint64_t v61 = v155;
        }
        while (i + 1 != v158);
      }
      else
      {
        unsigned int v69 = 0;
      }
      *(_DWORD *)(v136 + 16) = v69;
      uint64_t v163 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(v138 + 776), 96, 0x10u);
      uint64_t v87 = *(void *)(v138 + 800);
      *(void *)(v163 + 16) = 0;
      *(void *)(v163 + 24) = 0;
      *(_DWORD *)(v163 + 32) = 0;
      *(void *)uint64_t v163 = &unk_26E725080;
      *(void *)(v163 + 8) = v87;
      *(void *)(v163 + 40) = v136;
      *(void *)(v163 + 48) = v150;
      *(void *)(v163 + 56) = v2;
      *(void *)(v163 + 64) = v143;
      *(_DWORD *)(v163 + 72) = v135;
      *(void *)(v163 + 80) = v123;
      *(void *)(v163 + 88) = v138;
      uint64_t v88 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(v138 + 776), 136, 0x10u);
      uint64_t v89 = *(void *)(v136 + 128);
      uint64_t v90 = *(void *)(v136 + 24);
      uint64_t v91 = *(void *)(v138 + 576) + (v135 << 6);
      uint64_t v92 = *(void *)(v138 + 592) + (v135 << 6);
      uint64_t v93 = *(void *)(v138 + 608) + 48 * v135;
      uint64_t v94 = *(void *)(v152 + 12008);
      int v95 = *(_DWORD *)(v136 + 8);
      int v96 = *(_DWORD *)(v138 + 88);
      uint64_t v97 = *(void *)(v138 + 800);
      uint64_t v159 = v88;
      *(void *)(v88 + 16) = 0;
      *(void *)(v88 + 24) = 0;
      *(_DWORD *)(v88 + 32) = 0;
      *(void *)uint64_t v88 = &unk_26E7250F0;
      *(void *)(v88 + 8) = v97;
      *(void *)(v88 + 40) = v89;
      *(void *)(v88 + 48) = v90;
      *(void *)(v88 + 56) = v91;
      *(void *)(v88 + 64) = v92;
      *(void *)(v88 + 72) = v93;
      *(void *)(v88 + 80) = v94;
      *(_DWORD *)(v88 + 88) = v95;
      *(void *)(v88 + 96) = v122;
      *(_DWORD *)(v88 + 104) = v96;
      *(void *)(v88 + 112) = v49;
      *(void *)(v88 + 120) = v132;
      *(void *)(v88 + 128) = v138;
      uint64_t v156 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(v138 + 776), 88, 0x10u);
      int v98 = *(_DWORD *)(v138 + 88);
      uint64_t v99 = *(void *)(v138 + 800);
      *(void *)(v156 + 16) = 0;
      *(void *)(v156 + 24) = 0;
      *(_DWORD *)(v156 + 32) = 0;
      *(void *)uint64_t v156 = &unk_26E7251D0;
      *(void *)(v156 + 8) = v99;
      *(void *)(v156 + 40) = v136;
      *(void *)(v156 + 48) = v122;
      *(_DWORD *)(v156 + 56) = v98;
      *(void *)(v156 + 64) = v49;
      *(void *)(v156 + 72) = v132;
      *(void *)(v156 + 80) = v138;
      uint64_t v100 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(v138 + 776), 64, 0x10u);
      uint64_t v101 = *(void *)(v138 + 800);
      *(void *)(v100 + 16) = 0;
      *(void *)(v100 + 24) = 0;
      *(_DWORD *)(v100 + 32) = 0;
      *(void *)uint64_t v100 = &unk_26E725240;
      *(void *)(v100 + 8) = v101;
      *(void *)(v100 + 40) = v136;
      *(void *)(v100 + 48) = v138;
      *(void *)(v100 + 56) = 0;
      uint64_t v102 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(v138 + 776), 72, 0x10u);
      uint64_t v103 = *(void *)(v136 + 88);
      uint64_t v104 = *(void *)(v138 + 800);
      uint64_t v105 = *(void *)(v138 + 88);
      *(void *)(v102 + 16) = 0;
      *(void *)(v102 + 24) = 0;
      *(_DWORD *)(v102 + 32) = 0;
      *(void *)uint64_t v102 = &unk_26E7252B0;
      *(void *)(v102 + 8) = v104;
      *(void *)(v102 + 40) = v136;
      *(void *)(v102 + 48) = v105;
      *(void *)(v102 + 56) = v103;
      *(void *)(v102 + 64) = v138;
      uint64_t v106 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(v138 + 776), 80, 0x10u);
      uint64_t v107 = *(void *)(v136 + 88);
      uint64_t v108 = *(void *)(v138 + 576) + (v135 << 6) + 64;
      uint64_t v109 = *(void *)(v138 + 800);
      *(void *)(v106 + 16) = 0;
      *(void *)(v106 + 24) = 0;
      *(_DWORD *)(v106 + 32) = 0;
      *(void *)uint64_t v106 = &unk_26E725320;
      *(void *)(v106 + 8) = v109;
      *(void *)(v106 + 40) = v136;
      *(void *)(v106 + 48) = v107;
      *(void *)(v106 + 56) = v108;
      *(void *)(v106 + 64) = v152;
      *(void *)(v106 + 72) = v138;
      uint64_t v110 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(v138 + 776), 88, 0x10u);
      uint64_t v111 = *(void *)(v136 + 96);
      int v112 = *(_DWORD *)(v138 + 88);
      uint64_t v113 = *(void *)(v138 + 800);
      *(void *)(v110 + 16) = 0;
      *(void *)(v110 + 24) = 0;
      *(_DWORD *)(v110 + 32) = 0;
      *(void *)uint64_t v110 = &unk_26E725390;
      *(void *)(v110 + 8) = v113;
      *(void *)(v110 + 40) = v136;
      *(void *)(v110 + 48) = v111;
      *(void *)(v110 + 56) = v123;
      *(void *)(v110 + 64) = v152;
      *(_DWORD *)(v110 + 72) = v112;
      *(void *)(v110 + 80) = v138;
      uint64_t v114 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(v138 + 776), 80, 0x10u);
      uint64_t v115 = *(void *)(v138 + 800);
      *(void *)(v114 + 16) = 0;
      *(void *)(v114 + 24) = 0;
      *(_DWORD *)(v114 + 32) = 0;
      *(void *)uint64_t v114 = &unk_26E7254E0;
      *(void *)(v114 + 8) = v115;
      *(void *)(v114 + 40) = v136;
      *(void *)(v114 + 48) = v150;
      *(void *)(v114 + 56) = v145;
      *(void *)(v114 + 64) = v152;
      *(void *)(v114 + 72) = v138;
      uint64_t v116 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(v138 + 776), 80, 0x10u);
      uint64_t v117 = *(void *)(v138 + 800);
      *(void *)(v116 + 16) = 0;
      *(void *)(v116 + 24) = 0;
      *(_DWORD *)(v116 + 32) = 0;
      *(void *)uint64_t v116 = &unk_26E7255C0;
      *(void *)(v116 + 8) = v117;
      *(void *)(v116 + 40) = v152;
      *(void *)(v116 + 48) = v150;
      *(void *)(v116 + 56) = v145;
      *(void *)(v116 + 64) = v2;
      *(void *)(v116 + 72) = v138;
      uint64_t v118 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(v138 + 776), 56, 0x10u);
      *(void *)(v118 + 8) = *(void *)(v138 + 800);
      *(void *)(v118 + 16) = 0;
      *(_DWORD *)(v118 + 32) = 0;
      *(void *)uint64_t v118 = &unk_26E725630;
      *(void *)(v118 + 40) = v152;
      *(void *)(v118 + 48) = v138;
      *(_DWORD *)(v118 + 32) = 1;
      *(void *)(v118 + 24) = v128;
      (*(void (**)(uint64_t))(*(void *)v128 + 32))(v128);
      *(void *)(v118 + 16) = *(void *)(*(void *)(v118 + 24) + 16);
      *(_DWORD *)(v116 + 32) = 1;
      *(void *)(v116 + 24) = v118;
      (*(void (**)(uint64_t))(*(void *)v118 + 32))(v118);
      *(void *)(v116 + 16) = *(void *)(*(void *)(v116 + 24) + 16);
      *(_DWORD *)(v114 + 32) = 1;
      *(void *)(v114 + 24) = v116;
      (*(void (**)(uint64_t))(*(void *)v116 + 32))(v116);
      *(void *)(v114 + 16) = *(void *)(*(void *)(v114 + 24) + 16);
      *(_DWORD *)(v110 + 32) = 1;
      *(void *)(v110 + 24) = v114;
      (*(void (**)(uint64_t))(*(void *)v114 + 32))(v114);
      *(void *)(v110 + 16) = *(void *)(*(void *)(v110 + 24) + 16);
      *(_DWORD *)(v106 + 32) = 1;
      *(void *)(v106 + 24) = v110;
      (*(void (**)(uint64_t))(*(void *)v110 + 32))(v110);
      *(void *)(v106 + 16) = *(void *)(*(void *)(v106 + 24) + 16);
      *(_DWORD *)(v102 + 32) = 1;
      *(void *)(v102 + 24) = v106;
      (*(void (**)(uint64_t))(*(void *)v106 + 32))(v106);
      *(void *)(v102 + 16) = *(void *)(*(void *)(v102 + 24) + 16);
      *(_DWORD *)(v100 + 32) = 1;
      *(void *)(v100 + 24) = v102;
      (*(void (**)(uint64_t))(*(void *)v102 + 32))(v102);
      *(void *)(v100 + 16) = *(void *)(*(void *)(v100 + 24) + 16);
      *(void *)(v100 + 56) = v110;
      (*(void (**)(uint64_t))(*(void *)v110 + 32))(v110);
      *(_DWORD *)(v156 + 32) = 1;
      *(void *)(v156 + 24) = v100;
      (*(void (**)(uint64_t))(*(void *)v100 + 32))(v100);
      *(void *)(v156 + 16) = *(void *)(*(void *)(v156 + 24) + 16);
      *(_DWORD *)(v159 + 32) = 1;
      *(void *)(v159 + 24) = v100;
      (*(void (**)(uint64_t))(*(void *)v100 + 32))(v100);
      *(void *)(v159 + 16) = *(void *)(*(void *)(v159 + 24) + 16);
      *(_DWORD *)(v163 + 32) = 1;
      *(void *)(v163 + 24) = v100;
      (*(void (**)(uint64_t))(*(void *)v100 + 32))(v100);
      *(void *)(v163 + 16) = *(void *)(*(void *)(v163 + 24) + 16);
      (*(void (**)(uint64_t))(*(void *)v118 + 40))(v118);
      (*(void (**)(uint64_t))(*(void *)v116 + 40))(v116);
      (*(void (**)(uint64_t))(*(void *)v114 + 40))(v114);
      (*(void (**)(uint64_t))(*(void *)v110 + 40))(v110);
      (*(void (**)(uint64_t))(*(void *)v106 + 40))(v106);
      (*(void (**)(uint64_t))(*(void *)v102 + 40))(v102);
      (*(void (**)(uint64_t))(*(void *)v100 + 40))(v100);
      (*(void (**)(uint64_t))(*(void *)v156 + 40))(v156);
      (*(void (**)(uint64_t))(*(void *)v159 + 40))(v159);
      (*(void (**)(uint64_t))(*(void *)v163 + 40))(v163);
      v146 += v140;
      v148 += v142;
      unsigned int v7 = v141.i32[0] + v137;
      v147 += v130 + (v142 << 6);
      unsigned int v8 = v139;
      unint64_t v6 = v127;
      unsigned int v10 = v125;
      unsigned int v9 = v126;
    }
    while (v139 < v127);
  }
  (*(void (**)(uint64_t))(*(void *)v128 + 40))(v128);
  int v119 = *(uint64_t (**)(void))(**((void **)this + 7) + 40);
  return v119();
}

void physx::Dy::KinematicCopyTGSTask::~KinematicCopyTGSTask(physx::Dy::KinematicCopyTGSTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Dy::KinematicCopyTGSTask::getName(physx::Dy::KinematicCopyTGSTask *this)
{
  return "KinematicCopyTask";
}

uint64_t physx::Dy::KinematicCopyTGSTask::runInternal(uint64_t this)
{
  if (*(_DWORD *)(this + 48))
  {
    uint64_t v1 = 0;
    unint64_t v2 = 0;
    uint64_t v3 = 62;
    do
    {
      unint64_t v4 = (unint64_t)*(unsigned int *)(*(void *)(this + 40) + 4 * v2) >> 7;
      uint64_t v5 = *(void *)(*(void *)(*(void *)(this + 56) + 24) + 32 * v4 + 24);
      uint64_t v6 = *(void *)(v5 + 40);
      int v7 = *(_DWORD *)(v6 + 92);
      int v8 = *(_DWORD *)(v6 + 128);
      unsigned int v9 = (unsigned char *)(*(void *)(this + 64) + v3);
      uint64_t v10 = *(void *)(this + 72) + v3;
      uint64_t v11 = *(void *)(this + 80) + v1;
      float v12 = sqrtf(*(float *)(v6 + 96));
      v13.i32[0] = *(_DWORD *)(v6 + 76);
      *(void *)(v10 - 46) = *(void *)(v6 + 16);
      *(_DWORD *)(v10 - 38) = *(_DWORD *)(v6 + 24);
      *(_OWORD *)(v10 - 62) = xmmword_23435FBB0;
      *(_OWORD *)(v10 - 34) = 0uLL;
      *(_OWORD *)(v10 - 18) = 0uLL;
      *(_DWORD *)(v10 - 2) = 0;
      *(void *)(v9 - 62) = 0;
      *(_DWORD *)(v9 - 54) = 0;
      *(void *)(v9 - 46) = 0;
      *(void *)(v9 - 38) = 0;
      *(void *)(v9 - 30) = 0;
      *(_DWORD *)(v9 - 22) = 0;
      *(void *)(v9 - 14) = 0;
      *((void *)v9 - 1) = 0;
      unsigned char *v9 = 1;
      *(float *)(v9 - 18) = v12;
      *(_DWORD *)(v11 + 32) = 0;
      *(_DWORD *)(v11 + 36) = v4;
      *(_DWORD *)(v11 + 40) = v7;
      *(void *)&long long v14 = *(void *)(v6 + 64);
      DWORD2(v14) = *(_DWORD *)(v6 + 72);
      HIDWORD(v14) = v8;
      *(_OWORD *)uint64_t v11 = v14;
      v13.i32[1] = *(_DWORD *)(v6 + 80);
      v13.i64[1] = *(void *)(v6 + 84);
      *(int8x16_t *)(v11 + 16) = vextq_s8(v13, v13, 4uLL);
      uint64_t v15 = *(void *)(v5 + 40);
      *(_OWORD *)uint64_t v5 = *(_OWORD *)v15;
      *(void *)(v5 + 16) = *(void *)(v15 + 16);
      *(_DWORD *)(v5 + 24) = *(_DWORD *)(v15 + 24);
      ++v2;
      v1 += 48;
      v3 += 64;
    }
    while (v2 < *(unsigned int *)(this + 48));
  }
  return this;
}

void physx::Dy::DynamicsMergeTask::~DynamicsMergeTask(physx::Dy::DynamicsMergeTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Dy::DynamicsMergeTask::getName(physx::Dy::DynamicsMergeTask *this)
{
  return "MergeTask";
}

uint64_t physx::Dy::DynamicsMergeTask::release(physx::Dy::DynamicsMergeTask *this)
{
  (*(void (**)(void))(**((void **)this + 5) + 40))(*((void *)this + 5));
  uint64_t result = *((void *)this + 3);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 40);
    return v3();
  }
  return result;
}

void physx::Dy::ArticulationTask::~ArticulationTask(physx::Dy::ArticulationTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Dy::ArticulationTask::getName(physx::Dy::ArticulationTask *this)
{
  return "ArticulationTask";
}

uint64_t physx::Dy::ArticulationTask::runInternal(physx::Dy::ArticulationTask *this)
{
  uint64_t v2 = *((unsigned int *)this + 14);
  if (v2)
  {
    unsigned int v3 = 0;
    unint64_t v4 = (unsigned __int8 *)(*((void *)this + 6) + 92);
    do
    {
      unsigned int v6 = *v4;
      v4 += 96;
      unsigned int v5 = v6;
      if (v3 <= v6) {
        unsigned int v3 = v5;
      }
      --v2;
    }
    while (v2);
  }
  else
  {
    unsigned int v3 = 0;
  }
  uint64_t v7 = *((void *)this + 5);
  int v8 = physx::shdfnd::SListImpl::pop(*(physx::shdfnd::SListImpl **)(v7 + 432));
  if (!v8)
  {
    uint64_t v9 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v10 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ThreadContext>::getName() [T = physx::Dy::ThreadContext]";
    }
    else {
      uint64_t v10 = "<allocation names disabled>";
    }
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v9 + 24) + 16))(v9 + 24, 12343, v10, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/include/utils/PxcThreadCoherentCache.h", 82);
    if (v11)
    {
      int v8 = (_DWORD *)((v11 + 23) & 0xFFFFFFFFFFFFFFF0);
      *((void *)v8 - 1) = (char *)v8 - v11;
    }
    else
    {
      int v8 = 0;
    }
    physx::Dy::ThreadContext::ThreadContext((physx::Dy::ThreadContext *)v8, *(physx::PxcNpMemBlockPool **)(v7 + 440));
  }
  v8[3042] = 0;
  if ((v8[3043] & 0x7FFFFFFFu) < v3) {
    physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate((uint64_t)(v8 + 3040), v3);
  }
  v8[3042] = v3;
  v8[3046] = 0;
  if ((v8[3047] & 0x7FFFFFFFu) < v3) {
    physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate((uint64_t)(v8 + 3044), v3);
  }
  v8[3046] = v3;
  unint64_t v12 = *((unsigned int *)this + 14);
  if (v12)
  {
    uint64_t v13 = 0;
    for (unint64_t i = 0; i < v12; ++i)
    {
      uint64_t v15 = (void (*)(float))physx::Dy::ArticulationPImpl::sComputeUnconstrainedVelocitiesTGS[*(unsigned int *)(*(void *)(*((void *)this + 6) + v13) + 40)];
      if (v15)
      {
        v15(*((float *)this + 18));
        unint64_t v12 = *((unsigned int *)this + 14);
      }
      v13 += 96;
    }
  }
  uint64_t v16 = *(void *)(*((void *)this + 5) + 432);
  pthread_mutex_lock((pthread_mutex_t *)(v16 + 8));
  *(void *)int v8 = *(void *)v16;
  *(void *)uint64_t v16 = v8;
  return pthread_mutex_unlock((pthread_mutex_t *)(v16 + 8));
}

void physx::Dy::CopyBackTask::~CopyBackTask(physx::Dy::CopyBackTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Dy::CopyBackTask::getName(physx::Dy::CopyBackTask *this)
{
  return "CopyBackTask";
}

unsigned int *physx::Dy::CopyBackTask::runInternal(unsigned int *this)
{
  uint64_t v2 = this[22];
  uint64_t v1 = this[23];
  if (v2 < v1)
  {
    uint64_t v3 = *((void *)this + 7);
    float v4 = *((float *)this + 18);
    uint64_t v5 = *((void *)this + 10);
    uint64_t v6 = *(void *)(v5 + 136);
    uint64_t v7 = *(void *)(v5 + 272);
    uint64_t v8 = *((void *)this + 12);
    uint64_t v9 = **((void **)this + 5) + 8 * v2;
    uint64_t v10 = v1 - v2;
    uint64_t v11 = (int *)(*((void *)this + 8) + 48 * v2 + 84);
    uint64_t v12 = v2 << 6;
    uint64_t v13 = *((void *)this + 6) + 120;
    this = (unsigned int *)&unk_23441F000;
    while (1)
    {
      float v14 = v4 * *(float *)(v13 + v12 - 8);
      float v15 = v4 * *(float *)(v13 + v12 - 4);
      float v16 = v4 * *(float *)(v13 + v12);
      float v17 = v4 * *(float *)(v13 + v12 - 24);
      float v18 = v4 * *(float *)(v13 + v12 - 20);
      float v19 = v4 * *(float *)(v13 + v12 - 16);
      float v20 = (float)((float)(v17 * *(float *)(v3 + v12 + 92)) + (float)(v18 * *(float *)(v3 + v12 + 104)))
          + (float)(v19 * *(float *)(v3 + v12 + 116));
      float v21 = (float)((float)(v17 * *(float *)(v3 + v12 + 96)) + (float)(v18 * *(float *)(v3 + v12 + 108)))
          + (float)(v19 * *(float *)(v3 + v12 + 120));
      float v22 = (float)((float)(v17 * *(float *)(v3 + v12 + 100)) + (float)(v18 * *(float *)(v3 + v12 + 112)))
          + (float)(v19 * *(float *)(v3 + v12 + 124));
      uint64_t v23 = *(void *)v9;
      uint64_t v24 = *(void *)(*(void *)v9 + 40);
      *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
      *(void *)(v23 + 16) = *(void *)(v24 + 16);
      *(_DWORD *)(v23 + 24) = *(_DWORD *)(v24 + 24);
      float v25 = *(float *)(v3 + v12 + 64);
      float v26 = *(float *)(v3 + v12 + 68);
      float v28 = *(float *)(v24 + 8);
      float v27 = *(float *)(v24 + 12);
      float v29 = *(float *)(v24 + 4);
      float v31 = *(float *)(v3 + v12 + 72);
      float v30 = *(float *)(v3 + v12 + 76);
      float v32 = (float)((float)((float)(v27 * v25) + (float)(v30 * *(float *)v24)) + (float)(v26 * v28))
          - (float)(v29 * v31);
      float v33 = (float)((float)((float)(v27 * v26) + (float)(v30 * v29)) + (float)(v31 * *(float *)v24))
          - (float)(v28 * v25);
      float v34 = (float)((float)((float)(v27 * v31) + (float)(v30 * v28)) + (float)(v25 * v29))
          - (float)(*(float *)v24 * v26);
      float v35 = (float)((float)((float)(v30 * v27) - (float)(v25 * *(float *)v24)) - (float)(v26 * v29))
          - (float)(v31 * v28);
      float v36 = sqrtf((float)((float)((float)(v33 * v33) + (float)(v32 * v32)) + (float)(v34 * v34)) + (float)(v35 * v35));
      float v37 = v32 / v36;
      float v38 = v33 / v36;
      float v39 = v34 / v36;
      float v40 = v35 / v36;
      *(float *)uint64_t v24 = v32 / v36;
      *(float *)(v24 + 4) = v38;
      *(float *)(v24 + 8) = v34 / v36;
      *(float *)(v24 + 12) = v35 / v36;
      *(void *)(v24 + 16) = *(void *)(v3 + v12 + 80);
      *(_DWORD *)(v24 + 24) = *(_DWORD *)(v3 + v12 + 88);
      float v41 = *(float *)(v13 + v12 - 56);
      float v42 = *(float *)(v13 + v12 - 52);
      *(float *)(v24 + 64) = v41;
      *(float *)(v24 + 68) = v42;
      float v43 = *(float *)(v13 + v12 - 48);
      *(float *)(v24 + 72) = v43;
      float v44 = *(float *)(v13 + v12 - 40);
      float v45 = *(float *)(v13 + v12 - 36);
      float v46 = *(float *)(v13 + v12 - 32);
      float32x2_t v47 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v3 + v12 + 92), v44), vmul_n_f32(*(float32x2_t *)(v3 + v12 + 104), v45)), vmul_n_f32(*(float32x2_t *)(v3 + v12 + 116), v46));
      float v48 = (float)((float)(v44 * *(float *)(v3 + v12 + 100)) + (float)(v45 * *(float *)(v3 + v12 + 112)))
          + (float)(v46 * *(float *)(v3 + v12 + 124));
      *(float32x2_t *)(v24 + 80) = v47;
      int v49 = *v11;
      v11 += 12;
      uint64_t v50 = *(unsigned int *)(v7 + 4 * (v49 & 0x1FFFFFF));
      *(float *)(v24 + 88) = v48;
      int v51 = *(_DWORD *)(v6 + 4 * v50);
      float v52 = *(float *)(v8 + 88);
      float v53 = *(float *)(v24 + 140);
      if (!*(unsigned char *)(v8 + 100))
      {
        if (*(unsigned char *)(v8 + 102))
        {
          float v64 = 1.0;
          if (v51)
          {
            unsigned int v65 = *(_DWORD *)(v24 + 152);
            if (v65 >= 2) {
              float v64 = 1.0 / (float)v65;
            }
          }
          *(float *)(v23 + 76) = v64;
        }
        if (v53 < 0.2 || v53 < v52)
        {
          float v66 = *(float *)(v24 + 112);
          float v67 = *(float *)(v24 + 116);
          if (v66 <= 0.0) {
            float v68 = 1.0;
          }
          else {
            float v68 = 1.0 / v66;
          }
          if (v67 <= 0.0) {
            float v69 = 1.0;
          }
          else {
            float v69 = 1.0 / v67;
          }
          float v70 = v21 + v21;
          float v71 = v22 + v22;
          float v72 = (float)(v40 * v40) + -0.5;
          float v73 = (float)((float)((float)(v21 + v21) * v38) + (float)(v37 * (float)(v20 + v20)))
              + (float)(v39 * (float)(v22 + v22));
          float v74 = (float)((float)(v20 + v20) * v72)
              - (float)((float)((float)(v38 * (float)(v22 + v22)) - (float)(v39 * (float)(v21 + v21))) * v40);
          float v75 = (float)((float)((float)(v21 + v21) * v72)
                      - (float)((float)((float)(v39 * (float)(v20 + v20)) - (float)(v37 * (float)(v22 + v22))) * v40))
              + (float)(v38 * v73);
          float v76 = -(float)(v38 * (float)(v20 + v20));
          float v78 = *(float *)(v24 + 120);
          float v77 = *(float *)(v24 + 124);
          BOOL v60 = v78 <= 0.0;
          float v79 = 1.0 / v78;
          if (v60) {
            float v79 = 1.0;
          }
          float v80 = (float)((float)(v71 * v72) - (float)((float)(v76 + (float)(v37 * v70)) * v40)) + (float)(v39 * v73);
          float v81 = v14 + *(float *)(v23 + 48);
          float v82 = v15 + *(float *)(v23 + 52);
          *(float *)(v23 + 48) = v81;
          *(float *)(v23 + 52) = v82;
          float v83 = v16 + *(float *)(v23 + 56);
          *(float *)(v23 + 56) = v83;
          float v84 = (float)(v74 + (float)(v37 * v73)) + *(float *)(v23 + 64);
          float v85 = v75 + *(float *)(v23 + 68);
          *(float *)(v23 + 64) = v84;
          *(float *)(v23 + 68) = v85;
          float v86 = v80 + *(float *)(v23 + 72);
          *(float *)(v23 + 72) = v86;
          float v87 = v77 == 0.0 ? 1.0 : v77;
          float v88 = (float)((float)((float)((float)(v82 * v82) + (float)(v81 * v81)) + (float)(v83 * v83))
                      + (float)((float)((float)((float)(v69 * (float)(v85 * v85)) + (float)((float)(v84 * v84) * v68))
                                      + (float)((float)(v86 * v86) * v79))
                              * v87))
              * 0.5;
          float v89 = (float)(*(_DWORD *)(v24 + 148) + 1);
          float v90 = *(float *)(v24 + 132) * v89;
          if (v88 >= v90)
          {
            *(void *)(v23 + 48) = 0;
            *(_DWORD *)(v23 + 56) = 0;
            float v91 = 1.0;
            *(void *)(v23 + 64) = 0;
            *(_DWORD *)(v23 + 72) = 0;
            if (v90 != 0.0)
            {
              if ((float)(v88 / v90) >= 2.0) {
                float v91 = 1.0;
              }
              else {
                float v91 = (float)(v88 / v90) * 0.5;
              }
            }
            float v92 = (float)(v52 * (float)(v89 + -1.0)) + (float)(v91 * 0.4);
            *(float *)(v24 + 144) = v92;
            *(_WORD *)(v23 + 28) = 8 * (v53 == 0.0);
            goto LABEL_69;
          }
        }
        goto LABEL_68;
      }
      float v54 = *(float *)(v24 + 112);
      float v55 = *(float *)(v24 + 116);
      if (v54 <= 0.0) {
        float v56 = 1.0;
      }
      else {
        float v56 = 1.0 / v54;
      }
      if (v55 <= 0.0) {
        float v57 = 1.0;
      }
      else {
        float v57 = 1.0 / v55;
      }
      float v58 = *(float *)(v24 + 120);
      float v59 = *(float *)(v24 + 124);
      BOOL v60 = v58 <= 0.0;
      float v61 = 1.0 / v58;
      if (v60) {
        float v61 = 1.0;
      }
      if (v59 == 0.0) {
        float v59 = 1.0;
      }
      if (v51)
      {
        unsigned int v62 = *(_DWORD *)(v24 + 152);
        if (v62 >= 0xA) {
          unsigned int v62 = 10;
        }
        float v63 = (float)v62;
      }
      else
      {
        float v63 = 0.0;
      }
      float v93 = v20 + v20;
      float v94 = v21 + v21;
      float v95 = v22 + v22;
      float v96 = (float)(v40 * v40) + -0.5;
      float v97 = (float)((float)((float)(v21 + v21) * v38) + (float)(v37 * v93)) + (float)(v39 * (float)(v22 + v22));
      float v98 = (float)((float)(v93 * v96)
                  - (float)((float)((float)(v38 * (float)(v22 + v22)) - (float)(v39 * (float)(v21 + v21))) * v40))
          + (float)(v37 * v97);
      float v99 = (float)((float)((float)(v21 + v21) * v96) - (float)((float)((float)(v39 * v93) - (float)(v37 * v95)) * v40))
          + (float)(v38 * v97);
      float v100 = (float)((float)(v95 * v96) - (float)((float)((float)(v37 * v94) - (float)(v38 * v93)) * v40))
           + (float)(v39 * v97);
      float v101 = (float)((float)((float)((float)(v15 * v15) + (float)(v14 * v14)) + (float)(v16 * v16))
                   + (float)(v59
                           * (float)((float)((float)((float)(v99 * v99) * v57) + (float)((float)(v98 * v98) * v56))
                                   + (float)((float)(v100 * v100) * v61))))
           * 0.5;
      float v102 = v63 * *(float *)(v24 + 136);
      float v103 = fmaxf(*(float *)(v23 + 60) - v52, 0.0);
      *(float *)(v23 + 60) = v103;
      float v104 = (float)(v52 + *(float *)(v23 + 76)) <= 1.0 ? v52 + *(float *)(v23 + 76) : 1.0;
      if (v101 >= v102) {
        break;
      }
      if (!v51)
      {
        float v111 = 1.0;
LABEL_62:
        uint64_t v107 = (__int16 *)(v23 + 28);
        char v112 = *(_WORD *)(v23 + 28);
        *(float *)(v23 + 76) = v111;
        LOWORD(v109) = v112 & 1;
LABEL_63:
        __int16 v110 = 4 * v109;
        goto LABEL_64;
      }
      if (v63 > 1.0)
      {
        float v105 = (float)(v52 * -0.5) + 1.0;
        *(float *)(v24 + 64) = v41 * v105;
        *(float *)(v24 + 68) = v42 * v105;
        *(float *)(v24 + 72) = v43 * v105;
        *(float32x2_t *)(v24 + 80) = vmul_n_f32(v47, v105);
        *(float *)(v24 + 88) = v48 * v105;
        float v104 = (float)(v104 * 0.75) + 0.025;
      }
      float v106 = *(float *)(v24 + 136);
      uint64_t v107 = (__int16 *)(v23 + 28);
      char v108 = *(_WORD *)(v23 + 28);
      *(float *)(v23 + 76) = v104;
      int v109 = v108 & 1;
      if (v103 != 0.0 || v101 >= (float)(v106 * 0.25)) {
        goto LABEL_63;
      }
      if (v109) {
        __int16 v110 = 1;
      }
      else {
        __int16 v110 = 3;
      }
      *(_OWORD *)uint64_t v24 = *(_OWORD *)v23;
      *(void *)(v24 + 16) = *(void *)(v23 + 16);
      *(_DWORD *)(v24 + 24) = *(_DWORD *)(v23 + 24);
LABEL_64:
      *uint64_t v107 = v110;
      if (v53 < 0.2 || v53 < v52)
      {
        float v113 = v14 + *(float *)(v23 + 48);
        float v114 = v15 + *(float *)(v23 + 52);
        float v115 = v16 + *(float *)(v23 + 56);
        float v116 = *(float *)(v23 + 68);
        float v117 = v98 + *(float *)(v23 + 64);
        *(float *)(v23 + 48) = v113;
        *(float *)(v23 + 52) = v114;
        *(float *)(v23 + 56) = v115;
        float v118 = v99 + v116;
        *(float *)(v23 + 64) = v117;
        *(float *)(v23 + 68) = v118;
        float v119 = v100 + *(float *)(v23 + 72);
        *(float *)(v23 + 72) = v119;
        float v120 = *(float *)(v24 + 132);
        if (v101 >= v120)
        {
          float v121 = (float)((float)((float)((float)(v114 * v114) + (float)(v113 * v113)) + (float)(v115 * v115))
                       + (float)(v59
                               * (float)((float)((float)(v57 * (float)(v118 * v118))
                                               + (float)((float)(v117 * v117) * v56))
                                       + (float)((float)(v119 * v119) * v61))))
               * 0.5;
          float v122 = (float)(*(_DWORD *)(v24 + 148) + 1);
          float v123 = v120 * v122;
          if (v121 >= (float)(v120 * v122))
          {
            *(void *)(v23 + 64) = 0;
            *(_DWORD *)(v23 + 72) = 0;
            float v124 = 1.0;
            *(void *)(v23 + 48) = 0;
            *(_DWORD *)(v23 + 56) = 0;
            if (v120 != 0.0)
            {
              if ((float)(v121 / v123) >= 2.0) {
                float v124 = 1.0;
              }
              else {
                float v124 = (float)(v121 / v123) * 0.5;
              }
            }
            float v92 = (float)(v52 * (float)(v122 + -1.0)) + (float)(v124 * 0.4);
            *(float *)(v24 + 144) = v92;
            if (v53 == 0.0) {
              *uint64_t v107 = v110 | 8;
            }
            goto LABEL_69;
          }
        }
      }
LABEL_68:
      float v92 = fmaxf(v53 - v52, 0.0);
      *(float *)(v24 + 144) = v92;
LABEL_69:
      if (v92 == 0.0)
      {
        *(_WORD *)(v23 + 28) |= 0x10u;
        *(void *)(v23 + 48) = 0;
        *(_DWORD *)(v23 + 56) = 0;
        *(void *)(v23 + 64) = 0;
        *(_DWORD *)(v23 + 72) = 0;
      }
      v9 += 8;
      v3 += 64;
      v13 += 64;
      if (!--v10) {
        return this;
      }
    }
    *(_DWORD *)(v23 + 60) = 1069547520;
    if (v51) {
      float v111 = v104;
    }
    else {
      float v111 = 1.0;
    }
    goto LABEL_62;
  }
  return this;
}

void physx::Dy::UpdateArticTask::~UpdateArticTask(physx::Dy::UpdateArticTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Dy::UpdateArticTask::getName(physx::Dy::UpdateArticTask *this)
{
  return "UpdateArticTask";
}

uint64_t physx::Dy::UpdateArticTask::runInternal(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 48);
  unsigned int v2 = *(_DWORD *)(this + 52);
  if (v2 > v1)
  {
    float v3 = *(float *)(this + 56);
    uint64_t v4 = *(void *)(this + 40);
    int v5 = v2 - v1;
    uint64_t v6 = 96 * v1;
    do
    {
      this = *(void *)(v4 + 12288) + v6;
      uint64_t v7 = (uint64_t (*)(float))physx::Dy::ArticulationPImpl::sUpdateBodiesTGS[*(unsigned int *)(*(void *)this + 40)];
      if (v7) {
        this = v7(v3);
      }
      v6 += 96;
      --v5;
    }
    while (v5);
  }
  return this;
}

void physx::Dy::SetupDescsTask::~SetupDescsTask(physx::Dy::SetupDescsTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Dy::SetupDescsTask::getName(physx::Dy::SetupDescsTask *this)
{
  return "SetupDescsTask";
}

void physx::Dy::SetupDescsTask::runInternal(physx::Dy::SetupDescsTask *this)
{
  uint64_t v1 = this;
  v62[1] = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 11);
  uint64_t v4 = (uint64_t *)*((void *)this + 5);
  uint64_t v3 = *((void *)this + 6);
  unsigned int v57 = *((_DWORD *)this + 18);
  uint64_t v5 = *v4;
  uint64_t v6 = *(void *)(v3 + 64);
  uint64_t v60 = v2;
  uint64_t v54 = *(unsigned int *)(v3 + 40);
  if (v54)
  {
    uint64_t v50 = *((void *)this + 6);
    uint64_t v51 = *v4;
    uint64_t v7 = 0;
    uint64_t v53 = *(void *)(v3 + 32);
    uint64_t v8 = v2 + 256;
    uint64_t v9 = *((void *)this + 7);
    uint64_t v56 = *((void *)this + 8);
    uint64_t v59 = v2 + 256;
    while (1)
    {
      uint64_t v55 = v7;
      for (unsigned int i = *(_DWORD *)(*(void *)(v9 + 344) + 44 * *(unsigned int *)(v53 + 4 * v7) + 24);
            i != -1;
            unsigned int i = *(_DWORD *)(v12 + 16 * (i % v11) + 8))
      {
        unsigned int v11 = *(_DWORD *)(v9 + 304);
        uint64_t v12 = *(void *)(*(void *)(v9 + 280) + 8 * (i / v11));
        uint64_t v13 = *(void *)(*(void *)(*(void *)(v9 + 176) + 8 * (i / *(_DWORD *)(v9 + 200)))
                        + 8 * (i % *(_DWORD *)(v9 + 200)));
        uint64_t v14 = *(void *)(v2 + 576);
        unsigned int v15 = 2 * i;
        unint64_t v16 = *(unsigned int *)(*(void *)(**(void **)(v9 + 832)
                                          + 8 * (v15 / *(_DWORD *)(*(void *)(v9 + 832) + 24)))
                              + 4 * (v15 % *(_DWORD *)(*(void *)(v9 + 832) + 24)));
        if (v16 >= 0xFFFFFF80)
        {
          *(void *)uint64_t v6 = v8;
          *(_DWORD *)(v6 + 20) = 0;
LABEL_18:
          *(_WORD *)(v6 + 16) = -1;
          goto LABEL_19;
        }
        uint64_t v17 = *(void *)(v9 + 248) + 32 * (v16 >> 7);
        if (*(unsigned char *)(v17 + 5) != 1)
        {
          uint64_t v23 = *(unsigned int *)(*(void *)(v9 + 264) + 4 * (v16 >> 7));
          if ((*(unsigned char *)(v17 + 4) & 4) == 0) {
            LODWORD(v23) = *(_DWORD *)(v56 + 4 * v23) + v57;
          }
          uint64_t v24 = (v23 + 1);
          *(void *)uint64_t v6 = v14 + (v24 << 6);
          *(_DWORD *)(v6 + 20) = v24;
          goto LABEL_18;
        }
        uint64_t v18 = *(void *)(v17 + 24);
        v62[0] = 0;
        char v61 = 0;
        unsigned int v19 = (v16 >> 1) & 0x3F;
        uint64_t v58 = v12;
        uint64_t v20 = v14;
        (*(void (**)(uint64_t, void, void *, char *))(*(void *)v18 + 376))(v18, v19, v62, &v61);
        uint64_t v14 = v20;
        uint64_t v12 = v58;
        uint64_t v8 = v59;
        uint64_t v2 = v60;
        if (v61 == 2) {
          uint64_t v21 = v18;
        }
        else {
          uint64_t v21 = v59;
        }
        if (v61 == 2) {
          __int16 v22 = v19;
        }
        else {
          __int16 v22 = -1;
        }
        *(void *)uint64_t v6 = v21;
        *(_WORD *)(v6 + 16) = v22;
        *(_DWORD *)(v6 + 20) = 0;
LABEL_19:
        unint64_t v25 = *(unsigned int *)(*(void *)(**(void **)(v9 + 832)
                                          + 8 * ((v15 | 1) / *(_DWORD *)(*(void *)(v9 + 832) + 24)))
                              + 4 * ((v15 | 1) % *(_DWORD *)(*(void *)(v9 + 832) + 24)));
        if (v25 >= 0xFFFFFF80)
        {
          *(void *)(v6 + 8) = v8;
          *(_DWORD *)(v6 + 24) = 0;
LABEL_32:
          *(_WORD *)(v6 + 18) = -1;
          goto LABEL_33;
        }
        uint64_t v26 = *(void *)(v9 + 248) + 32 * (v25 >> 7);
        if (*(unsigned char *)(v26 + 5) != 1)
        {
          uint64_t v32 = *(unsigned int *)(*(void *)(v9 + 264) + 4 * (v25 >> 7));
          if ((*(unsigned char *)(v26 + 4) & 4) == 0) {
            LODWORD(v32) = *(_DWORD *)(v56 + 4 * v32) + v57;
          }
          uint64_t v33 = (v32 + 1);
          *(void *)(v6 + 8) = v14 + (v33 << 6);
          *(_DWORD *)(v6 + 24) = v33;
          goto LABEL_32;
        }
        uint64_t v27 = *(void *)(v26 + 24);
        v62[0] = 0;
        char v61 = 0;
        unsigned int v28 = (v25 >> 1) & 0x3F;
        uint64_t v29 = v12;
        (*(void (**)(uint64_t, void, void *, char *))(*(void *)v27 + 376))(v27, v28, v62, &v61);
        uint64_t v12 = v29;
        uint64_t v8 = v59;
        uint64_t v2 = v60;
        if (v61 == 2) {
          uint64_t v30 = v27;
        }
        else {
          uint64_t v30 = v59;
        }
        if (v61 == 2) {
          __int16 v31 = v28;
        }
        else {
          __int16 v31 = -1;
        }
        *(void *)(v6 + 8) = v30;
        *(_WORD *)(v6 + 18) = v31;
        *(_DWORD *)(v6 + 24) = 0;
LABEL_33:
        *(void *)(v6 + 32) = v13;
        *(_WORD *)(v6 + 30) = 2;
        v6 += 48;
      }
      uint64_t v7 = v55 + 1;
      if (v55 + 1 == v54)
      {
        uint64_t v3 = v50;
        uint64_t v5 = v51;
        uint64_t v34 = *(void *)(v50 + 64);
        uint64_t v1 = this;
        goto LABEL_37;
      }
    }
  }
  uint64_t v34 = *(void *)(v3 + 64);
LABEL_37:
  physx::shdfnd::sort<physx::PxSolverConstraintDesc,physx::Dy::ConstraintLess,physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>(v34, -1431655765 * ((unint64_t)(v6 - v34) >> 4), (uint64_t)&v61, (uint64_t)v62, 32);
  if (*((_DWORD *)v4 + 4))
  {
    unint64_t v35 = 0;
    uint64_t v36 = *(void *)(v3 + 24);
    uint64_t v37 = v6 + 16;
    uint64_t v38 = 24;
    do
    {
      uint64_t v39 = v36 + v38;
      uint64_t v40 = *(void *)(v60 + 576);
      v62[0] = v57;
      uint64_t v41 = *(unsigned __int8 *)(v36 + v38 - 8);
      uint64_t v42 = v60 + 256;
      if (v41 != 3)
      {
        if (v41 == 2)
        {
          *(void *)(v37 - 16) = *(void *)(v39 - 24) & 0xFFFFFFFFFFFFFFC0;
          *(_WORD *)uint64_t v37 = *(_WORD *)(v39 - 24) & 0x3F;
          *(_DWORD *)(v37 + 4) = 0;
          goto LABEL_47;
        }
        uint64_t v42 = v40 + ((unint64_t)(*(_DWORD *)(v39 - 24) + *((_DWORD *)v62 + v41) + 1) << 6);
      }
      *(void *)(v37 - 16) = v42;
      uint64_t v43 = *(unsigned __int8 *)(v39 - 8);
      if (v43 == 3) {
        int v44 = 0;
      }
      else {
        int v44 = *(_DWORD *)(v39 - 24) + *((_DWORD *)v62 + v43) + 1;
      }
      *(_DWORD *)(v37 + 4) = v44;
      *(_WORD *)uint64_t v37 = -1;
LABEL_47:
      uint64_t v45 = *(unsigned __int8 *)(v36 + v38 - 7);
      uint64_t v46 = v60 + 256;
      if (v45 == 3) {
        goto LABEL_51;
      }
      if (v45 != 2)
      {
        uint64_t v46 = v40 + ((unint64_t)(*(_DWORD *)(v36 + v38 - 16) + *((_DWORD *)v62 + v45) + 1) << 6);
LABEL_51:
        *(void *)(v37 - 8) = v46;
        uint64_t v48 = *(unsigned __int8 *)(v36 + v38 - 7);
        if (v48 == 3) {
          int v49 = 0;
        }
        else {
          int v49 = *(_DWORD *)(v36 + v38 - 16) + *((_DWORD *)v62 + v48) + 1;
        }
        *(_DWORD *)(v37 + 8) = v49;
        *(_WORD *)(v37 + 2) = -1;
        goto LABEL_55;
      }
      uint64_t v47 = v36 + v38;
      *(void *)(v37 - 8) = *(void *)(v47 - 16) & 0xFFFFFFFFFFFFFFC0;
      *(_WORD *)(v37 + 2) = *(_WORD *)(v47 - 16) & 0x3F;
      *(_DWORD *)(v37 + 8) = 0;
LABEL_55:
      uint64_t v36 = *(void *)(v3 + 24);
      *(void *)(v37 + 16) = *(void *)(v36 + v38);
      *(_WORD *)(v37 + 14) = 1;
      ++v35;
      v38 += 32;
      v37 += 48;
      v6 += 48;
    }
    while (v35 < *((unsigned int *)v4 + 4));
  }
  *(_DWORD *)(v5 + 12024) = -1431655765 * ((unint64_t)(v6 - *(void *)(v3 + 64)) >> 4);
  *(_DWORD *)(*((void *)v1 + 5) + 152) = *(_DWORD *)(**((void **)v1 + 5) + 12024);
}

void physx::Dy::PreIntegrateTask::~PreIntegrateTask(physx::Dy::PreIntegrateTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Dy::PreIntegrateTask::getName(physx::Dy::PreIntegrateTask *this)
{
  return "PreIntegrateTask";
}

void physx::Dy::PreIntegrateTask::runInternal(physx::Dy::PreIntegrateTask *this)
{
  unsigned int v2 = *((_DWORD *)this + 22);
  if (v2 >= 0x201)
  {
    int v13 = 0;
    for (unsigned int i = 0; i < v2; i += 512)
    {
      if (v2 + v13 >= 0x200) {
        int v15 = 512;
      }
      else {
        int v15 = v2 + v13;
      }
      uint64_t v16 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(*((void *)this + 16) + 776), 136, 0x10u);
      uint64_t v17 = *((void *)this + 5) + 8 * i;
      uint64_t v18 = *((void *)this + 6) + 8 * i;
      unint64_t v19 = *((void *)this + 7) + ((unint64_t)i << 6);
      uint64_t v20 = *((void *)this + 12);
      int v21 = *((_DWORD *)this + 26);
      uint64_t v22 = *((void *)this + 16);
      uint64_t v23 = *(void *)(v22 + 800);
      unint64_t v24 = *((void *)this + 8) + ((unint64_t)i << 6);
      uint64_t v25 = *((void *)this + 9) + 48 * i;
      long long v26 = *((_OWORD *)this + 7);
      uint64_t v27 = *((void *)this + 10) + 4 * i;
      *(void *)(v16 + 16) = 0;
      *(void *)(v16 + 24) = 0;
      *(_DWORD *)(v16 + 32) = 0;
      *(void *)(v16 + 8) = v23;
      unsigned int v28 = (void (**)(uint64_t))&unk_26E725160;
      *(void *)uint64_t v16 = &unk_26E725160;
      *(void *)(v16 + 40) = v17;
      *(void *)(v16 + 48) = v18;
      *(void *)(v16 + 56) = v19;
      *(void *)(v16 + 64) = v24;
      *(void *)(v16 + 72) = v25;
      *(void *)(v16 + 80) = v27;
      *(_DWORD *)(v16 + 88) = v15;
      *(void *)(v16 + 96) = v20;
      *(_DWORD *)(v16 + 104) = v21;
      *(_OWORD *)(v16 + 112) = v26;
      *(void *)(v16 + 128) = v22;
      uint64_t v29 = *((void *)this + 3);
      *(_DWORD *)(v16 + 32) = 1;
      *(void *)(v16 + 24) = v29;
      if (v29)
      {
        (*(void (**)(uint64_t))(*(void *)v29 + 32))(v29);
        *(void *)(v16 + 16) = *(void *)(*(void *)(v16 + 24) + 16);
        unsigned int v28 = *(void (***)(uint64_t))v16;
      }
      v28[5](v16);
      unsigned int v2 = *((_DWORD *)this + 22);
      v13 -= 512;
    }
  }
  else
  {
    uint64_t v30 = 0;
    physx::Dy::DynamicsTGSContext::preIntegrateBodies(*((float32x2_t ***)this + 5), *((void *)this + 6), *((void *)this + 7), *((void *)this + 8), *((void *)this + 9), *((int **)this + 10), v2, *((float32x2_t **)this + 12), *((float *)this + 26), (unsigned int *)&v30 + 1, (unsigned int *)&v30);
    uint64_t v3 = (atomic_uint *)*((void *)this + 14);
    atomic_uint v4 = HIDWORD(v30);
    do
    {
      atomic_uint v5 = *v3;
      if (*v3 <= v4) {
        unsigned int v6 = v4;
      }
      else {
        unsigned int v6 = *v3;
      }
      atomic_uint v7 = *v3;
      atomic_compare_exchange_strong(v3, (unsigned int *)&v7, v6);
    }
    while (v7 != v5);
    uint64_t v8 = (atomic_uint *)*((void *)this + 15);
    atomic_uint v9 = v30;
    do
    {
      atomic_uint v10 = *v8;
      if (*v8 <= v9) {
        unsigned int v11 = v9;
      }
      else {
        unsigned int v11 = *v8;
      }
      atomic_uint v12 = *v8;
      atomic_compare_exchange_strong(v8, (unsigned int *)&v12, v11);
    }
    while (v12 != v10);
  }
}

void physx::Dy::PreIntegrateParallelTask::~PreIntegrateParallelTask(physx::Dy::PreIntegrateParallelTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Dy::PreIntegrateParallelTask::getName(physx::Dy::PreIntegrateParallelTask *this)
{
  return "PreIntegrateParallelTask";
}

void physx::Dy::PreIntegrateParallelTask::runInternal(physx::Dy::PreIntegrateParallelTask *this)
{
  signed int v13 = 0;
  signed int v12 = 0;
  physx::Dy::DynamicsTGSContext::preIntegrateBodies(*((float32x2_t ***)this + 5), *((void *)this + 6), *((void *)this + 7), *((void *)this + 8), *((void *)this + 9), *((int **)this + 10), *((_DWORD *)this + 22), *((float32x2_t **)this + 12), *((float *)this + 26), (unsigned int *)&v13, (unsigned int *)&v12);
  unsigned int v2 = (atomic_uint *)*((void *)this + 14);
  signed int v3 = v13;
  do
  {
    atomic_uint v4 = *v2;
    if (*v2 <= v3) {
      unsigned int v5 = v3;
    }
    else {
      unsigned int v5 = *v2;
    }
    atomic_uint v6 = *v2;
    atomic_compare_exchange_strong(v2, (unsigned int *)&v6, v5);
  }
  while (v6 != v4);
  atomic_uint v7 = (atomic_uint *)*((void *)this + 15);
  signed int v8 = v12;
  do
  {
    atomic_uint v9 = *v7;
    if (*v7 <= v8) {
      unsigned int v10 = v8;
    }
    else {
      unsigned int v10 = *v7;
    }
    atomic_uint v11 = *v7;
    atomic_compare_exchange_strong(v7, (unsigned int *)&v11, v10);
  }
  while (v11 != v9);
}

void physx::Dy::SetupArticulationTask::~SetupArticulationTask(physx::Dy::SetupArticulationTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Dy::SetupArticulationTask::getName(physx::Dy::SetupArticulationTask *this)
{
  return "SetupArticulationTask";
}

uint64_t physx::Dy::SetupArticulationTask::runInternal(uint64_t this)
{
  uint64_t v1 = *(_DWORD **)(this + 40);
  int v2 = v1[3];
  unint64_t v3 = v2 & 0x7FFFFFFF;
  uint64_t v36 = this;
  if ((v2 & 0x7FFFFFFF) != 0)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    unsigned int v6 = 0;
    unsigned int v7 = 0;
    uint64_t v39 = *(void *)(this + 48);
    uint64_t v40 = *(void *)(this + 80);
    int v8 = *(_DWORD *)(this + 56);
    unint64_t v37 = v2 & 0x7FFFFFFF;
    uint64_t v38 = *(void *)(this + 24);
    atomic_uint v9 = *(uint64_t **)(*(void *)v1 + 11984);
    unint64_t v10 = 32;
    do
    {
      if (v10 >= v3) {
        unint64_t v11 = v3;
      }
      else {
        unint64_t v11 = v10;
      }
      if (v3 >= (int)v5 + 32) {
        unint64_t v12 = (v5 + 32);
      }
      else {
        unint64_t v12 = v3;
      }
      unint64_t v41 = v5 + 32;
      int v42 = v12;
      if (v5 < v12)
      {
        uint64_t v13 = v4;
        uint64_t v14 = v9;
        do
        {
          int v15 = (_OWORD *)(*(void *)(*(void *)v1 + 12288) + v13);
          uint64_t v16 = *v14;
          long long v17 = *(_OWORD *)(*v14 + 128);
          long long v19 = *(_OWORD *)(*v14 + 80);
          long long v18 = *(_OWORD *)(*v14 + 96);
          v15[4] = *(_OWORD *)(*v14 + 112);
          v15[5] = v17;
          v15[2] = v19;
          v15[3] = v18;
          long long v20 = *(_OWORD *)(v16 + 64);
          *int v15 = *(_OWORD *)(v16 + 48);
          v15[1] = v20;
          uint64_t v21 = *v14++;
          unsigned int v22 = *(unsigned __int16 *)(*(void *)(v21 + 112) + 12);
          if (v22 >> 8 > v6) {
            unsigned int v6 = v22 >> 8;
          }
          if (v22 > v7) {
            unsigned int v7 = v22;
          }
          --v11;
          v13 += 96;
        }
        while (v5 != v11);
      }
      uint64_t v23 = *(void *)v1;
      uint64_t v24 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(v40 + 776), 80, 0x10u);
      uint64_t v25 = *(void *)(v23 + 12288) + 96 * v5;
      uint64_t v26 = *(void *)(v40 + 800);
      *(void *)(v24 + 16) = 0;
      *(void *)(v24 + 24) = 0;
      *(_DWORD *)(v24 + 32) = 0;
      uint64_t v27 = (uint64_t (**)(uint64_t))&unk_26E724F30;
      *(void *)uint64_t v24 = &unk_26E724F30;
      *(void *)(v24 + 8) = v26;
      *(void *)(v24 + 40) = v40;
      *(void *)(v24 + 48) = v25;
      *(_DWORD *)(v24 + 56) = v42 - v5;
      *(void *)(v24 + 60) = *(void *)v39;
      *(_DWORD *)(v24 + 68) = *(_DWORD *)(v39 + 8);
      *(_DWORD *)(v24 + 72) = v8;
      *(_DWORD *)(v24 + 32) = 1;
      *(void *)(v24 + 24) = v38;
      if (v38)
      {
        (*(void (**)(uint64_t))(*(void *)v38 + 32))(v38);
        *(void *)(v24 + 16) = *(void *)(*(void *)(v24 + 24) + 16);
        uint64_t v27 = *(uint64_t (***)(uint64_t))v24;
      }
      unint64_t v3 = v37;
      this = v27[5](v24);
      v10 += 32;
      v9 += 32;
      v4 += 3072;
      v5 += 32;
    }
    while (v41 < v37);
  }
  else
  {
    unsigned int v7 = 0;
    unsigned int v6 = 0;
  }
  unsigned int v28 = *(atomic_uint **)(v36 + 64);
  do
  {
    atomic_uint v29 = *v28;
    if (*v28 <= (int)v7) {
      unsigned int v30 = v7;
    }
    else {
      unsigned int v30 = *v28;
    }
    atomic_uint v31 = *v28;
    atomic_compare_exchange_strong(v28, (unsigned int *)&v31, v30);
  }
  while (v31 != v29);
  uint64_t v32 = *(atomic_uint **)(v36 + 72);
  do
  {
    atomic_uint v33 = *v32;
    if (*v32 <= (int)v6) {
      unsigned int v34 = v6;
    }
    else {
      unsigned int v34 = *v32;
    }
    atomic_uint v35 = *v32;
    atomic_compare_exchange_strong(v32, (unsigned int *)&v35, v34);
  }
  while (v35 != v33);
  return this;
}

void physx::Dy::SetStepperTask::~SetStepperTask(physx::Dy::SetStepperTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Dy::SetStepperTask::getName(physx::Dy::SetStepperTask *this)
{
  return "SetStepperTask";
}

uint64_t physx::Dy::SetStepperTask::release(physx::Dy::SetStepperTask *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  unint64_t v3 = *(uint64_t (**)(void))(**((void **)this + 7) + 40);
  return v3();
}

float physx::Dy::SetStepperTask::runInternal(physx::Dy::SetStepperTask *this)
{
  uint64_t v1 = *((void *)this + 5);
  float v2 = *(float *)(*((void *)this + 6) + 88);
  unsigned int v3 = *(_DWORD *)(v1 + 148);
  if (v3 >= 4) {
    int v4 = 4;
  }
  else {
    int v4 = *(_DWORD *)(v1 + 148);
  }
  unsigned int v5 = *(_DWORD *)(v1 + 144) + v3 - v4;
  *(_DWORD *)(v1 + 144) = v5;
  *(_DWORD *)(v1 + 148) = v4;
  float result = v2 / (float)v5;
  *(float *)(v1 + 156) = result;
  *(float *)(v1 + 160) = 1.0 / result;
  return result;
}

void physx::Dy::SetupArticulationInternalConstraintsTask::~SetupArticulationInternalConstraintsTask(physx::Dy::SetupArticulationInternalConstraintsTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Dy::SetupArticulationInternalConstraintsTask::getName(physx::Dy::SetupArticulationInternalConstraintsTask *this)
{
  return "SetupArticulationInternalConstraintsTask";
}

uint64_t physx::Dy::SetupArticulationInternalConstraintsTask::runInternal(physx::Dy::SetupArticulationInternalConstraintsTask *this)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 5);
  float v2 = *((float *)this + 12);
  float v3 = *(float *)(v1 + 160);
  uint64_t v4 = *((void *)this + 7);
  uint64_t v5 = *((void *)this + 8);
  unsigned int v6 = *(_DWORD *)(v1 + 152);
  unsigned int v7 = *(uint64_t **)(*(void *)v1 + 11984);
  uint64_t v8 = *(_DWORD *)(v1 + 12) & 0x7FFFFFFF;
  unint64_t v9 = (unint64_t)physx::shdfnd::SListImpl::pop(*(physx::shdfnd::SListImpl **)(v5 + 432));
  if (!v9)
  {
    uint64_t v10 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unint64_t v11 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ThreadContext>::getName() [T = physx::Dy::ThreadContext]";
    }
    else {
      unint64_t v11 = "<allocation names disabled>";
    }
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v10 + 24) + 16))(v10 + 24, 12343, v11, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/include/utils/PxcThreadCoherentCache.h", 82);
    if (v12)
    {
      unint64_t v9 = (v12 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(void *)(v9 - 8) = v9 - v12;
    }
    else
    {
      unint64_t v9 = 0;
    }
    physx::Dy::ThreadContext::ThreadContext((physx::Dy::ThreadContext *)v9, *(physx::PxcNpMemBlockPool **)(v5 + 440));
  }
  unsigned int v30 = (void *)v9;
  *(void *)(v9 + 11880) = 0;
  *(_DWORD *)(v9 + 11888) = 0;
  if (v8)
  {
    uint64_t v13 = 0;
    int v14 = 0;
    unsigned int v15 = 0;
    uint64_t v16 = v4 + 48 * v6;
    unint64_t v17 = v9 + 11872;
    uint64_t v18 = 96 * v8;
    do
    {
      uint64_t v19 = *(void *)(*(void *)v1 + 12288) + v13;
      uint64_t v20 = *v7;
      long long v21 = *(_OWORD *)(*v7 + 128);
      long long v23 = *(_OWORD *)(*v7 + 80);
      long long v22 = *(_OWORD *)(*v7 + 96);
      *(_OWORD *)(v19 + 64) = *(_OWORD *)(*v7 + 112);
      *(_OWORD *)(v19 + 80) = v21;
      *(_OWORD *)(v19 + 32) = v23;
      *(_OWORD *)(v19 + 48) = v22;
      long long v24 = *(_OWORD *)(v20 + 64);
      *(_OWORD *)uint64_t v19 = *(_OWORD *)(v20 + 48);
      *(_OWORD *)(v19 + 16) = v24;
      int v31 = 0;
      unsigned int v25 = v15;
      uint64_t v26 = (uint64_t (*)(uint64_t, unint64_t, uint64_t, int *, uint64_t, char *, float, float, float))physx::Dy::ArticulationPImpl::sSetupInternalConstraintsTGS[*(unsigned int *)(*(void *)v19 + 40)];
      if (v26) {
        int v27 = v26(v19, v17, v16 + 48 * v25, &v31, *(void *)v1 + 11848, v32, *(float *)(v1 + 156), v3, v2);
      }
      else {
        int v27 = 0;
      }
      *(unsigned char *)(v19 + 93) = v27;
      v14 += v27;
      unsigned int v15 = v25 + 64;
      v13 += 96;
      ++v7;
    }
    while (v18 != v13);
  }
  else
  {
    int v14 = 0;
  }
  uint64_t v28 = *(void *)(v5 + 432);
  pthread_mutex_lock((pthread_mutex_t *)(v28 + 8));
  *unsigned int v30 = *(void *)v28;
  *(void *)uint64_t v28 = v30;
  uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)(v28 + 8));
  *(_DWORD *)(*(void *)v1 + 12024) += v14;
  return result;
}

void physx::Dy::PartitionTask::~PartitionTask(physx::Dy::PartitionTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Dy::PartitionTask::getName(physx::Dy::PartitionTask *this)
{
  return "PartitionTask";
}

uint64_t physx::Dy::PartitionTask::runInternal(physx::Dy::PartitionTask *this)
{
  uint64_t v2 = *((void *)this + 8);
  uint64_t v3 = *(void *)(v2 + 12288);
  uint64_t v4 = *((void *)this + 5);
  int v5 = *(_DWORD *)(v4 + 12);
  if ((v5 & 0x7FFFFFFF) != 0 && (v5 & 0x7FFFFFFE) != 0)
  {
    unsigned int v6 = *(_DWORD *)(v4 + 152);
    unsigned int v7 = v6 + *(unsigned __int8 *)(v3 + 93);
    uint64_t v8 = *((void *)this + 6);
    unsigned int v9 = v6 + 64;
    unint64_t v10 = 1;
    do
    {
      v6 += 64;
      int v11 = *(unsigned __int8 *)(v3 + 96 * v10 + 93);
      if (v6 < v6 + v11)
      {
        uint64_t v12 = (long long *)(v8 + 48 * v9);
        do
        {
          uint64_t v13 = (_OWORD *)(v8 + 48 * v7++);
          long long v14 = *v12;
          long long v15 = v12[2];
          v13[1] = v12[1];
          v13[2] = v15;
          *uint64_t v13 = v14;
          v12 += 3;
          --v11;
        }
        while (v11);
        uint64_t v4 = *((void *)this + 5);
      }
      ++v10;
      v9 += 64;
    }
    while (v10 < (*(_DWORD *)(v4 + 12) & 0x7FFFFFFFu));
    uint64_t v2 = *((void *)this + 8);
  }
  int v16 = *(_DWORD *)(v2 + 12024);
  *(_DWORD *)(v2 + 11928) = 0;
  LODWORD(v54) = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize(v2 + 11920, 1u, &v54);
  uint64_t v17 = *((void *)this + 8);
  **(_DWORD **)(v17 + 11920) = 0;
  uint64_t v54 = *((void *)this + 7);
  int v56 = 64;
  uint64_t v57 = v3;
  uint64_t v18 = *((void *)this + 5);
  uint64_t v59 = *((void *)this + 6);
  int v58 = *(_DWORD *)(v17 + 12296);
  int v55 = *(_DWORD *)(v18 + 8);
  int v60 = v16;
  long long v61 = *(_OWORD *)(v18 + 96);
  int v63 = 0;
  uint64_t v62 = 0;
  uint64_t v64 = v17 + 11920;
  uint64_t v65 = v17 + 11952;
  char v66 = 0;
  uint64_t result = physx::Dy::partitionContactConstraints(&v54);
  uint64_t v20 = *((void *)this + 8);
  *(_DWORD *)(v20 + 12232) = result;
  unsigned int v21 = v62;
  int v22 = HIDWORD(v62);
  *(_DWORD *)(v20 + 11896) = v62;
  *(_DWORD *)(v20 + 11904) = v22;
  int v23 = v63;
  *(_DWORD *)(v20 + 11908) = v63;
  int v24 = *(_DWORD *)(v20 + 12024);
  if (v21)
  {
    unsigned int v25 = 0;
    int v26 = 0;
    int v27 = 0;
    unsigned int v28 = 0;
    atomic_uint v29 = *(int **)(v20 + 11920);
    int v30 = *v29;
    if (v66) {
      unsigned int v31 = 1;
    }
    else {
      unsigned int v31 = 4;
    }
    uint64_t v32 = *((void *)this + 5);
    uint64_t v33 = *(void *)(v32 + 112);
    uint64_t v34 = *(void *)(v32 + 96);
    while (1)
    {
      unsigned int v35 = v30 - v25 >= v31 ? v31 : v30 - v25;
      if (v35) {
        break;
      }
      LOWORD(v39) = 0;
LABEL_27:
      v25 += (unsigned __int16)v39;
      if (v30 != v21 && v30 == v25)
      {
        v29[v27] = v26;
        int v26 = 0;
        int v30 = v29[++v27];
      }
      if (v25 >= v21)
      {
        v29[v27] = v26;
        uint64_t result = *(unsigned int *)(v20 + 12232);
        goto LABEL_54;
      }
    }
    uint64_t v36 = v34 + 48 * v25;
    int v37 = *(unsigned __int16 *)(v36 + 30);
    if (*(__int16 *)(v36 + 16) != -1 || *(unsigned __int16 *)(v36 + 18) != 0xFFFF)
    {
      LOWORD(v39) = 1;
LABEL_24:
      __int16 v40 = v37;
LABEL_25:
      uint64_t v41 = v28;
      int v42 = (unsigned int *)(v33 + 8 * v28++);
      *int v42 = v25;
      uint64_t v43 = v33 + 8 * v41;
      *(_WORD *)(v43 + 4) = v39;
      *(_WORD *)(v43 + 6) = v40;
      ++v26;
      goto LABEL_27;
    }
    if (v37 == 1)
    {
      __int16 v40 = 1;
      LOWORD(v39) = 1;
      if (v27 == -1 || v35 < 2) {
        goto LABEL_25;
      }
    }
    else
    {
      LOWORD(v39) = 1;
      if (v35 < 2) {
        goto LABEL_24;
      }
      if (v37 != 2 || v27 == -1) {
        goto LABEL_24;
      }
    }
    if ((unsigned __int16)v35 <= 2u) {
      uint64_t v45 = 2;
    }
    else {
      uint64_t v45 = (unsigned __int16)v35;
    }
    uint64_t v39 = 1;
    while (v37 == *(unsigned __int16 *)(v34 + 48 * (v25 + v39) + 30))
    {
      uint64_t v46 = v34 + 48 * (v25 + v39);
      int v47 = *(__int16 *)(v46 + 16);
      int v48 = *(unsigned __int16 *)(v46 + 18);
      if (v47 != -1 || v48 != 0xFFFF) {
        break;
      }
      if (v45 == ++v39)
      {
        __int16 v40 = v37;
        LOWORD(v39) = v35;
        goto LABEL_25;
      }
    }
    goto LABEL_24;
  }
  unsigned int v28 = 0;
  uint64_t v33 = *(void *)(*((void *)this + 5) + 112);
LABEL_54:
  *(_DWORD *)(v20 + 11928) = result;
  unsigned int v50 = v28;
  if (v24 != v23 + v21)
  {
    int v51 = v24 - v23;
    unsigned int v52 = v28;
    do
    {
      unsigned int v50 = v52 + 1;
      uint64_t v53 = (unsigned int *)(v33 + 8 * v52);
      *uint64_t v53 = v21;
      v53[1] = 262145;
      ++v21;
      unsigned int v52 = v50;
    }
    while (v51 != v21);
  }
  *(_DWORD *)(v20 + 12192) = v28;
  *(_DWORD *)(v20 + 12196) = v50 - v28;
  *(_DWORD *)(v20 + 12048) = v50;
  return result;
}

void physx::Dy::SetupSolverConstraintsTask::~SetupSolverConstraintsTask(physx::Dy::SetupSolverConstraintsTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Dy::SetupSolverConstraintsTask::getName(physx::Dy::SetupSolverConstraintsTask *this)
{
  return "SetupSolverConstraintsTask";
}

uint64_t physx::Dy::SetupSolverConstraintsTask::runInternal(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(_DWORD **)(this + 40);
  unsigned int v3 = *(_DWORD *)(*(void *)v2 + 12048);
  if (v3)
  {
    unsigned int v4 = 0;
    uint64_t v5 = *((void *)v2 + 14);
    unsigned int v6 = *(_DWORD *)(*(void *)v2 + 12048);
    do
    {
      unsigned int v7 = v6 - 64;
      if (v6 >= 0x40) {
        int v8 = 64;
      }
      else {
        int v8 = v6;
      }
      uint64_t v9 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(*(void *)(v1 + 80) + 776), 112, 0x10u);
      int v11 = *(_DWORD **)(v1 + 40);
      uint64_t v10 = *(void *)(v1 + 48);
      int v12 = *(_DWORD *)(v1 + 72);
      int v13 = v11[39];
      int v14 = v11[40];
      uint64_t v15 = *(void *)(v1 + 80);
      int v16 = *(_DWORD *)(v15 + 92);
      LODWORD(v11) = v11[36];
      uint64_t v17 = *(void *)(v1 + 56);
      uint64_t v18 = *(void *)(v1 + 64);
      uint64_t v19 = *(void *)(v15 + 800);
      *(void *)(v9 + 16) = 0;
      *(void *)(v9 + 24) = 0;
      *(_DWORD *)(v9 + 32) = 0;
      uint64_t v20 = (uint64_t (**)(uint64_t))&unk_26E725400;
      *(void *)uint64_t v9 = &unk_26E725400;
      *(void *)(v9 + 8) = v19;
      *(void *)(v9 + 40) = v10;
      *(void *)(v9 + 48) = v5 + 8 * v4;
      *(_DWORD *)(v9 + 56) = v8;
      *(void *)(v9 + 64) = v17;
      *(_DWORD *)(v9 + 72) = v13;
      *(_DWORD *)(v9 + 76) = v12;
      *(_DWORD *)(v9 + 80) = v14;
      *(_DWORD *)(v9 + 84) = v16;
      *(_DWORD *)(v9 + 88) = v11;
      *(void *)(v9 + 96) = v15;
      *(void *)(v9 + 104) = v18;
      uint64_t v21 = *(void *)(v1 + 24);
      *(_DWORD *)(v9 + 32) = 1;
      *(void *)(v9 + 24) = v21;
      if (v21)
      {
        (*(void (**)(uint64_t))(*(void *)v21 + 32))(v21);
        *(void *)(v9 + 16) = *(void *)(*(void *)(v9 + 24) + 16);
        uint64_t v20 = *(uint64_t (***)(uint64_t))v9;
      }
      this = v20[5](v9);
      v4 += 64;
      unsigned int v6 = v7;
    }
    while (v4 < v3);
    uint64_t v2 = *(_DWORD **)(v1 + 40);
  }
  int v22 = v2[3];
  unint64_t v23 = v22 & 0x7FFFFFFF;
  if ((v22 & 0x7FFFFFFF) != 0)
  {
    uint64_t v24 = 0;
    unint64_t v25 = 0;
    unsigned int v26 = v22 & 0x7FFFFFFF;
    do
    {
      unsigned int v27 = v26 - 64;
      if (v26 >= 0x40) {
        int v28 = 64;
      }
      else {
        int v28 = v26;
      }
      uint64_t v29 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(*(void *)(v1 + 80) + 776), 104, 0x10u);
      uint64_t v31 = *(void *)(v1 + 56);
      uint64_t v30 = *(void *)(v1 + 64);
      uint64_t v32 = *(void *)(v30 + 11984) + v24;
      uint64_t v33 = *(void **)(v1 + 80);
      uint64_t v34 = v33[76];
      uint64_t v35 = v33[74];
      uint64_t v36 = *(void *)(v1 + 40);
      uint64_t v37 = v33[100];
      *(void *)(v29 + 16) = 0;
      *(void *)(v29 + 24) = 0;
      *(_DWORD *)(v29 + 32) = 0;
      uint64_t v38 = (uint64_t (**)(uint64_t))&unk_26E725470;
      *(void *)uint64_t v29 = &unk_26E725470;
      *(void *)(v29 + 8) = v37;
      *(void *)(v29 + 40) = v32;
      *(_DWORD *)(v29 + 48) = v28;
      *(void *)(v29 + 56) = v34;
      *(void *)(v29 + 64) = v35;
      *(void *)(v29 + 72) = v30;
      *(void *)(v29 + 80) = v33;
      *(void *)(v29 + 88) = v31;
      *(void *)(v29 + 96) = v36;
      uint64_t v39 = *(void *)(v1 + 24);
      *(_DWORD *)(v29 + 32) = 1;
      *(void *)(v29 + 24) = v39;
      if (v39)
      {
        (*(void (**)(uint64_t))(*(void *)v39 + 32))(v39);
        *(void *)(v29 + 16) = *(void *)(*(void *)(v29 + 24) + 16);
        uint64_t v38 = *(uint64_t (***)(uint64_t))v29;
      }
      this = v38[5](v29);
      v25 += 64;
      v24 += 512;
      unsigned int v26 = v27;
    }
    while (v25 < v23);
  }
  return this;
}

void physx::Dy::SetupSolverConstraintsSubTask::~SetupSolverConstraintsSubTask(physx::Dy::SetupSolverConstraintsSubTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Dy::SetupSolverConstraintsSubTask::getName(physx::Dy::SetupSolverConstraintsSubTask *this)
{
  return "SetupSolverConstraintsSubTask";
}

uint64_t physx::Dy::SetupSolverConstraintsSubTask::runInternal(physx::Dy::SetupSolverConstraintsSubTask *this)
{
  *(void *)&v116[692] = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 12);
  unint64_t v3 = (unint64_t)physx::shdfnd::SListImpl::pop(*(physx::shdfnd::SListImpl **)(v2 + 432));
  if (!v3)
  {
    uint64_t v7 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      int v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ThreadContext>::getName() [T = physx::Dy::ThreadContext]";
    }
    else {
      int v8 = "<allocation names disabled>";
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v7 + 24) + 16))(v7 + 24, 12343, v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/include/utils/PxcThreadCoherentCache.h", 82);
    if (v9)
    {
      unint64_t v3 = (v9 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(void *)(v3 - 8) = v3 - v9;
    }
    else
    {
      unint64_t v3 = 0;
    }
    physx::Dy::ThreadContext::ThreadContext((physx::Dy::ThreadContext *)v3, *(physx::PxcNpMemBlockPool **)(v2 + 440));
  }
  *(void *)(v3 + 11880) = 0;
  *(_DWORD *)(v3 + 11888) = 0;
  uint64_t v10 = *((void *)this + 5);
  uint64_t v11 = *((void *)this + 6);
  uint64_t v12 = *((unsigned int *)this + 14);
  uint64_t v104 = *((void *)this + 8);
  uint64_t v13 = *((void *)this + 12);
  float v14 = *((float *)this + 18);
  float v15 = *((float *)this + 19);
  float v16 = *((float *)this + 20);
  uint64_t v17 = (uint64_t (**)(void, void))(*((void *)this + 13) + 11848);
  v108[0] = (uint64_t (**)(void, void))&unk_26E724CB8;
  v108[1] = v17;
  v108[2] = (uint64_t (**)(void, void))(v3 + 11872);
  v108[3] = (uint64_t (**)(void, void))(v3 + 11824);
  v108[4] = (uint64_t (**)(void, void))(v3 + 12208);
  if (v12)
  {
    uint64_t v105 = v3;
    float v97 = this;
    uint64_t v18 = 0;
    uint64_t v19 = *(void *)(v13 + 592);
    uint64_t v20 = *(void *)(v13 + 608);
    uint64_t v100 = v10 + 16;
    long long v21 = xmmword_23435FBB0;
    uint64_t v99 = v10 + 18;
    uint64_t v98 = v10 + 40;
    uint64_t v101 = v12;
    __asm { FMOV            V14.2S, #1.0 }
    uint64_t v102 = v11;
    uint64_t v103 = v10;
    while (1)
    {
      unsigned int v26 = (int *)(v11 + 8 * v18);
      unsigned int v27 = *v26;
      int v30 = *((unsigned __int16 *)v26 + 2);
      int v28 = v26 + 1;
      int v29 = v30;
      unsigned int v31 = v27 + v30;
      int v32 = *(unsigned __int16 *)(v10 + 48 * v27 + 30);
      if (v32 == 2)
      {
        uint64_t v107 = v18;
        if (v27 < v31)
        {
          uint64_t v61 = *(void *)(v13 + 232);
          uint64_t v62 = v114;
          int v63 = (unsigned __int16 *)(v100 + 48 * v27);
          uint64_t v64 = &v110;
          int v65 = v29;
          do
          {
            long long v111 = v21;
            *(void *)&long long v112 = 0;
            DWORD2(v112) = 0;
            uint64_t v66 = *((void *)v63 + 2);
            uint64_t v67 = *(void *)(v66 + 40);
            if (v67) {
              float v68 = *(long long **)(v67 + 40);
            }
            else {
              float v68 = &v111;
            }
            uint64_t v69 = *(void *)(v66 + 48);
            if (v69) {
              float v70 = *(long long **)(v69 + 40);
            }
            else {
              float v70 = &v111;
            }
            uint64_t v71 = *(void *)(v66 + 32);
            int v72 = *(unsigned __int16 *)(v66 + 8);
            uint64_t v73 = *((unsigned int *)v63 + 1);
            uint64_t v74 = *((unsigned int *)v63 + 2);
            *((void *)v64 - 1) = *(void *)(v66 + 16);
            *(void *)uint64_t v64 = v71;
            *((_DWORD *)v64 + 2) = v72;
            *((void *)v64 - 2) = v66;
            int v75 = *((_DWORD *)v68 + 6);
            long long v76 = *((_OWORD *)v63 - 1);
            *(void *)(v62 - 155) = v63 - 8;
            long long v5 = *v68;
            uint64_t v77 = *((void *)v68 + 2);
            *(_OWORD *)(v62 - 99) = *v68;
            *(void *)(v62 - 83) = v77;
            *(_DWORD *)(v62 - 75) = v75;
            *(void *)(v62 - 71) = *(void *)v70;
            *(_DWORD *)(v62 - 63) = *((_DWORD *)v70 + 2);
            *(void *)(v62 - 59) = *(void *)((char *)v70 + 12);
            *(_DWORD *)(v62 - 51) = *((_DWORD *)v70 + 5);
            *(_DWORD *)(v62 - 47) = *((_DWORD *)v70 + 6);
            *(_OWORD *)(v62 - 147) = v76;
            *(void *)(v62 - 131) = v19 + (v73 << 6);
            *(void *)(v62 - 123) = v19 + (v74 << 6);
            *(void *)(v62 - 115) = v20 + 48 * v73;
            *(void *)(v62 - 107) = v20 + 48 * v74;
            *(void *)(v62 - 23) = *(void *)v66;
            *(void *)(v62 - 11) = v61 + 32 * *(unsigned int *)(v66 + 72);
            __int16 v78 = *(_WORD *)(v66 + 10);
            *(v62 - 3) = HIBYTE(v78) & 1;
            *(v62 - 2) = (v78 & 0x80) != 0;
            *(v62 - 1) = (v78 & 0x20) != 0;
            *uint64_t v62 = (v78 & 0x200) != 0;
            *(_DWORD *)(v62 - 15) = *(_DWORD *)(v66 + 76);
            v79.i32[0] = *v63;
            v79.i32[1] = v63[1];
            int32x2_t v80 = vceq_s32(v79, (int32x2_t)0xFFFF0000FFFFLL);
            int32x2_t v4 = (int32x2_t)vbic_s8((int8x8_t)0x800000008, (int8x8_t)v80);
            *(int32x2_t *)(v62 - 43) = vsub_s32(v4, v80);
            v63 += 24;
            v62 += 208;
            v64 += 2;
            --v65;
          }
          while (v65);
        }
        if (v29 == 4) {
          int v81 = physx::Dy::setupSolverConstraintStep4((uint64_t)&v109, (uint64_t)v113, (float *)&v111, v108, v14, v15, v16, 1.0 / v15, *(float32_t *)(v13 + 760));
        }
        else {
          int v81 = 1;
        }
        if (v27 < v31 && v81 != 2)
        {
          float v93 = v113;
          float v94 = &v109;
          do
          {
            physx::Dy::SetupSolverConstraintStep((uint64_t)v94, (uint64_t)v93, v108, v14, v15, v16, 1.0 / v15, *(float *)(v13 + 760));
            v93 += 208;
            v94 += 2;
            --v29;
          }
          while (v29);
        }
        goto LABEL_67;
      }
      if (v32 == 1) {
        break;
      }
LABEL_68:
      if (++v18 == v12)
      {
        uint64_t v13 = *((void *)v97 + 12);
        unint64_t v3 = v105;
        goto LABEL_70;
      }
    }
    float v106 = v28;
    uint64_t v107 = v18;
    HIDWORD(v33) = 0;
    long long v109 = 0u;
    long long v110 = 0u;
    int v34 = v29;
    long long v111 = 0u;
    long long v112 = 0u;
    if (v27 >= v31) {
      goto LABEL_36;
    }
    uint64_t v35 = v116;
    uint64_t v36 = (__int16 *)(v99 + 48 * v27);
    uint64_t v37 = *(void *)(v104 + 32);
    uint64_t v38 = &v109;
    uint64_t v39 = &v111;
    int v40 = v29;
    while (1)
    {
      uint64_t v41 = *(void *)(v36 + 7);
      *(void *)uint64_t v39 = v41;
      uint64_t v42 = v37
          + 32
          * (*(_DWORD *)(v104 + 4 * (*(_DWORD *)(v41 + 108) & 7)) + (*(_DWORD *)(v41 + 108) >> 3));
      *(void *)uint64_t v38 = v42;
      long long v43 = *(_OWORD *)(v36 - 9);
      uint64_t v45 = *(unsigned int *)(v36 + 1);
      uint64_t v44 = *(unsigned int *)(v36 + 3);
      uint64_t v47 = *(void *)(v41 + 32);
      uint64_t v46 = *(void *)(v41 + 40);
      uint64_t v48 = *(void *)(v41 + 24);
      int v49 = *(_DWORD *)(v47 + 16);
      *(void *)&long long v5 = *(void *)(v47 + 20);
      uint64_t v50 = *(void *)(v42 + 16);
      *(_OWORD *)((char *)v35 - 140) = *(_OWORD *)v47;
      *((_DWORD *)v35 - 31) = v49;
      *((void *)&v5 + 1) = *(void *)v46;
      *(_OWORD *)(v35 - 15) = v5;
      *(_OWORD *)(v35 - 13) = *(_OWORD *)(v46 + 8);
      *((_DWORD *)v35 - 22) = *(_DWORD *)(v46 + 24);
      *(void *)((char *)v35 - 76) = v48;
      *(void *)((char *)v35 - 28) = v50;
      *(void *)((char *)v35 - 196) = v36 - 9;
      *(_OWORD *)((char *)v35 - 188) = v43;
      *(void *)((char *)v35 - 172) = v19 + (v45 << 6);
      *(void *)((char *)v35 - 164) = v19 + (v44 << 6);
      *(void *)((char *)v35 - 156) = v20 + 48 * v45;
      *(void *)((char *)v35 - 148) = v20 + 48 * v44;
      __int16 v51 = *(_WORD *)(v41 + 80);
      *((unsigned char *)v35 - 54) = HIBYTE(v51) & 1;
      *((unsigned char *)v35 - 55) = (v51 & 4) != 0;
      int v52 = (v51 & 8) != 0 ? 8 : 1;
      *((_DWORD *)v35 - 21) = v52;
      if ((v51 & 0x10) == 0) {
        break;
      }
      if (*v36 == -1)
      {
        int v53 = 2;
LABEL_27:
        *((_DWORD *)v35 - 20) = v53;
        goto LABEL_28;
      }
      *((_DWORD *)v35 - 20) = 8;
LABEL_28:
      uint64_t v54 = (float *)(v20 + 48 * v45 + 12);
      if ((v51 & 8) != 0) {
        uint64_t v54 = (float *)(*(void *)(v41 + 32) + 128);
      }
      float v56 = *v54;
      uint64_t v57 = (float *)(v20 + 48 * v44 + 12);
      if ((v51 & 0x10) != 0) {
        uint64_t v57 = (float *)(*(void *)(v41 + 40) + 128);
      }
      v58.i32[0] = *(unsigned __int8 *)(v41 + 84);
      v58.i32[1] = *(unsigned __int8 *)(v41 + 85);
      float v59 = *v57;
      int32x2_t v4 = vceqz_s32(v58);
      v118.val[0] = (float32x2_t)vbic_s8(_D14, (int8x8_t)v4);
      v118.val[1] = v118.val[0];
      int v55 = (float *)v35 - 53;
      vst2_f32(v55, v118);
      *((_DWORD *)v35 - 13) = *(_DWORD *)(v41 + 92);
      *(void *)((char *)v35 - 44) = *(void *)(v41 + 72);
      *((unsigned char *)v35 - 36) = *(unsigned char *)(v41 + 82);
      *((_DWORD *)v35 - 12) = 2139095039;
      if (v56 >= v59) {
        float v56 = v59;
      }
      *((float *)v35 - 1) = v56;
      double v33 = *(double *)(v41 + 112);
      *(double *)uint64_t v35 = v33;
      v35 += 28;
      uint64_t v38 = (long long *)((char *)v38 + 8);
      uint64_t v39 = (long long *)((char *)v39 + 8);
      v36 += 24;
      if (!--v40)
      {
        int v34 = (unsigned __int16)*v106;
LABEL_36:
        if (v34 == 4)
        {
          LODWORD(v5) = *(_DWORD *)(v13 + 120);
          LODWORD(v6) = *(_DWORD *)(v13 + 128);
          *(float *)&double v33 = v16;
          *(float *)v4.i32 = 1.0 / v15;
          int FinalizeSolverContacts4Step = physx::Dy::createFinalizeSolverContacts4Step((uint64_t)&v109, v105, (uint64_t)v113, (uint64_t)v108, v33, *(double *)&v4, *(double *)&v5, *(float *)(v13 + 124), *(float *)(v13 + 136), v6);
        }
        else
        {
          int FinalizeSolverContacts4Step = 1;
        }
        if (v27 < v31 && FinalizeSolverContacts4Step != 2)
        {
          float v83 = (void *)(v98 + 48 * v27);
          float v84 = v113;
          float v85 = (uint64_t *)&v109;
          do
          {
            uint64_t v86 = *v85++;
            LODWORD(v5) = *(_DWORD *)(v13 + 120);
            *(float *)v4.i32 = 1.0 / v15;
            physx::Dy::createFinalizeSolverContactsStep((uint64_t)v84, (uint64_t *)v86, v105, (uint64_t)v108, v16, *(double *)&v4, *(double *)&v5, *(float *)(v13 + 124), *(float *)(v13 + 136));
            *((_WORD *)v83 - 6) = *(unsigned __int8 *)(v86 + 24);
            *float v83 = *(void *)(v86 + 16);
            v83 += 6;
            v84 += 224;
            --v29;
          }
          while (v29);
        }
        uint64_t v87 = (unsigned __int16)*v106;
        if (*v106)
        {
          float v88 = &v111;
          float v89 = &v115;
          do
          {
            uint64_t v91 = *(void *)v88;
            float v88 = (long long *)((char *)v88 + 8);
            uint64_t v90 = v91;
            *(void *)(v91 + 72) = *(v89 - 1);
            LOBYTE(v91) = *(unsigned char *)v89;
            v89 += 28;
            *(unsigned char *)(v90 + 82) = v91;
            --v87;
          }
          while (v87);
        }
        uint64_t v11 = v102;
        uint64_t v10 = v103;
        uint64_t v12 = v101;
LABEL_67:
        uint64_t v18 = v107;
        long long v21 = xmmword_23435FBB0;
        goto LABEL_68;
      }
    }
    if ((v51 & 0x40) != 0) {
      int v53 = 1;
    }
    else {
      int v53 = 2;
    }
    if ((v51 & 0x400) != 0) {
      int v53 = 4;
    }
    goto LABEL_27;
  }
LABEL_70:
  uint64_t v95 = *(void *)(v13 + 432);
  pthread_mutex_lock((pthread_mutex_t *)(v95 + 8));
  *(void *)unint64_t v3 = *(void *)v95;
  *(void *)uint64_t v95 = v3;
  return pthread_mutex_unlock((pthread_mutex_t *)(v95 + 8));
}

void physx::Dy::PxsCreateArticConstraintsSubTask::~PxsCreateArticConstraintsSubTask(physx::Dy::PxsCreateArticConstraintsSubTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Dy::PxsCreateArticConstraintsSubTask::getName(physx::Dy::PxsCreateArticConstraintsSubTask *this)
{
  return "PxsDynamics.PxsCreateArticConstraintsSubTask";
}

uint64_t physx::Dy::PxsCreateArticConstraintsSubTask::runInternal(physx::Dy::PxsCreateArticConstraintsSubTask *this)
{
  uint64_t v2 = *((void *)this + 10);
  float v3 = *(float *)(v2 + 136);
  float v4 = *(float *)(v2 + 120);
  float v5 = *(float *)(v2 + 124);
  float v6 = *(float *)(v2 + 88);
  if (*(float *)(v2 + 96) >= *(float *)(v2 + 92)) {
    float v7 = *(float *)(v2 + 92);
  }
  else {
    float v7 = *(float *)(v2 + 96);
  }
  unint64_t v8 = (unint64_t)physx::shdfnd::SListImpl::pop(*(physx::shdfnd::SListImpl **)(v2 + 432));
  if (!v8)
  {
    uint64_t v9 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v10 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ThreadContext>::getName() [T = physx::Dy::ThreadContext]";
    }
    else {
      uint64_t v10 = "<allocation names disabled>";
    }
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v9 + 24) + 16))(v9 + 24, 12343, v10, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/include/utils/PxcThreadCoherentCache.h", 82);
    if (v11)
    {
      unint64_t v8 = (v11 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(void *)(v8 - 8) = v8 - v11;
    }
    else
    {
      unint64_t v8 = 0;
    }
    physx::Dy::ThreadContext::ThreadContext((physx::Dy::ThreadContext *)v8, *(physx::PxcNpMemBlockPool **)(v2 + 440));
  }
  *(void *)(v8 + 11880) = 0;
  *(_DWORD *)(v8 + 11888) = 0;
  if (*((_DWORD *)this + 12))
  {
    unint64_t v12 = 0;
    do
    {
      uint64_t v13 = *(void *)(*((void *)this + 5) + 8 * v12);
      (*(void (**)(uint64_t, void, unint64_t, void, void, uint64_t, void, void, float, float, float, float, float, float, float, float))(*(void *)v13 + 296))(v13, *((void *)this + 11), v8, *((void *)this + 7), *((void *)this + 8), *((void *)this + 9) + 11848, *(void *)(*((void *)this + 10) + 232), *(unsigned int *)(*((void *)this + 12) + 144), *(float *)(*((void *)this + 12) + 156), v6, *(float *)(*((void *)this + 12) + 160), v7, v3, v4, v5, *(float *)(*((void *)this + 10) + 760));
      ++v12;
    }
    while (v12 < *((unsigned int *)this + 12));
  }
  uint64_t v14 = *(void *)(*((void *)this + 10) + 432);
  pthread_mutex_lock((pthread_mutex_t *)(v14 + 8));
  *(void *)unint64_t v8 = *(void *)v14;
  *(void *)uint64_t v14 = v8;
  return pthread_mutex_unlock((pthread_mutex_t *)(v14 + 8));
}

void physx::Dy::SolveIslandTask::~SolveIslandTask(physx::Dy::SolveIslandTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Dy::SolveIslandTask::getName(physx::Dy::SolveIslandTask *this)
{
  return "SolveIslandTask";
}

void physx::Dy::SolveIslandTask::runInternal(physx::Dy::SolveIslandTask *this, double a2, __n128 a3, __n128 a4)
{
  uint64_t v5 = *((void *)this + 8);
  unsigned int v6 = *(_DWORD *)(v5 + 11928);
  if (v6)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    unsigned int v9 = 0;
    unsigned int v10 = 0;
    unsigned int v11 = 0;
    unsigned int v6 = 0;
    int v12 = 0;
    uint64_t v13 = *((void *)this + 6);
    uint64_t v14 = *(void *)(v13 + 72);
    uint64_t v15 = *(void *)(v13 + 88);
    do
    {
      uint64_t v16 = *(void *)(v5 + 11920);
      uint64_t v17 = *(_DWORD *)(v16 + 4 * v7) + v11;
      if (v11 >= v17)
      {
        int v18 = 0;
        v11 += *(_DWORD *)(v16 + 4 * v7);
      }
      else
      {
        int v18 = 0;
        uint64_t v19 = v11;
        do
        {
          unsigned __int16 v20 = *(_WORD *)(v15 + 8 * v19 + 4);
          if (v20)
          {
            unsigned __int16 v21 = v20 + v9;
            uint64_t v22 = v8;
            do
            {
              unint64_t v23 = (long long *)(v14 + 48 * v9);
              if (*((_WORD *)v23 + 15))
              {
                if (v9 != v22)
                {
                  uint64_t v24 = v14 + 48 * v22;
                  long long v25 = *v23;
                  a3 = (__n128)v23[1];
                  a4 = (__n128)v23[2];
                  *(__n128 *)(v24 + 16) = a3;
                  *(__n128 *)(v24 + 32) = a4;
                  *(_OWORD *)uint64_t v24 = v25;
                }
                uint64_t v22 = (v22 + 1);
              }
              else
              {
                --v20;
              }
              ++v9;
            }
            while (v21 != (unsigned __int16)v9);
            if (v20)
            {
              uint64_t v26 = v15 + 8 * v10;
              *(_DWORD *)uint64_t v26 = v8;
              *(_WORD *)(v26 + 4) = v20;
              int v27 = **(unsigned __int8 **)(v14 + 48 * v8 + 32);
              if (v27 == 5)
              {
                if (v20 < 2u)
                {
                  LOBYTE(v27) = 5;
                }
                else
                {
                  uint64_t v28 = v20 - 1;
                  unsigned int v29 = v8 + 1;
                  LOBYTE(v27) = 5;
                  do
                  {
                    if (**(unsigned char **)(v14 + 48 * v29 + 32) == 1) {
                      LOBYTE(v27) = 1;
                    }
                    ++v29;
                    --v28;
                  }
                  while (v28);
                }
              }
              *(_WORD *)(v15 + 8 * v10++ + 6) = v27;
              ++v18;
            }
            uint64_t v8 = v22;
          }
          ++v19;
        }
        while (v19 != v17);
        uint64_t v5 = *((void *)this + 8);
        uint64_t v16 = *(void *)(v5 + 11920);
        v11 += *(_DWORD *)(v16 + 4 * v7);
      }
      *(_DWORD *)(v16 + 4 * v6) = v18;
      if (v18) {
        ++v6;
      }
      v12 += v18;
      ++v7;
    }
    while (v7 < *(unsigned int *)(v5 + 11928));
  }
  else
  {
    int v12 = 0;
  }
  *(_DWORD *)(v5 + 11928) = v6;
  *(_DWORD *)(v5 + 12048) = v12;
  unsigned int v30 = 0;
  uint64_t v31 = *(_DWORD *)(*((void *)this + 7) + 4) & 0x7FFFFFFF;
  if (v31)
  {
    int v32 = (unsigned __int8 *)(*(void *)(v5 + 12288) + 92);
    do
    {
      unsigned int v34 = *v32;
      v32 += 96;
      unsigned int v33 = v34;
      if (v30 <= v34) {
        unsigned int v30 = v33;
      }
      --v31;
    }
    while (v31);
    *(_DWORD *)(v5 + 12168) = 0;
    if ((*(_DWORD *)(v5 + 12172) & 0x7FFFFFFFu) < v30)
    {
      physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate(v5 + 12160, v30);
      uint64_t v5 = *((void *)this + 8);
    }
    *(_DWORD *)(v5 + 12168) = v30;
    *(_DWORD *)(v5 + 12184) = 0;
    if ((*(_DWORD *)(v5 + 12188) & 0x7FFFFFFFu) < v30)
    {
      physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate(v5 + 12176, v30);
      uint64_t v5 = *((void *)this + 8);
    }
  }
  else
  {
    *(_DWORD *)(v5 + 12168) = 0;
    *(_DWORD *)(v5 + 12184) = 0;
  }
  *(_DWORD *)(v5 + 12184) = v30;
  uint64_t v35 = *(void *)(v5 + 12176);
  uint64_t v51 = *(void *)(v5 + 12160);
  uint64_t v52 = v35;
  if (*(_DWORD *)(v5 + 11928)
    && ((uint64_t v36 = (*(uint64_t (**)(void))(**((void **)this + 2) + 8))(*((void *)this + 2)),
         unsigned int v37 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 8))(v36),
         uint64_t v5 = *((void *)this + 8),
         unsigned int v38 = (v12 + *(_DWORD *)(v5 + 11928) - 1) / *(_DWORD *)(v5 + 11928) + 7,
         v37 >= 2)
      ? (BOOL v39 = v38 > 0xF)
      : (BOOL v39 = 0),
        v39))
  {
    uint64_t v40 = *((void *)this + 5);
    if (v37 >= v38 >> 3) {
      uint64_t v41 = v38 >> 3;
    }
    else {
      uint64_t v41 = v37;
    }
    *(void *)(v40 + 172) = 0;
    *(void *)(v40 + 164) = 0;
    *(void *)(v40 + 180) = 0;
    uint64_t v42 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(*((void *)this + 9) + 776), 80 * (int)v41, 0x10u);
    uint64_t v43 = v42;
    do
    {
      uint64_t v44 = *((void *)this + 9);
      uint64_t v45 = *(void *)(v44 + 800);
      long long v46 = *(_OWORD *)((char *)this + 40);
      long long v47 = *(_OWORD *)((char *)this + 56);
      *(void *)(v42 + 16) = 0;
      *(void *)(v42 + 24) = 0;
      *(_DWORD *)(v42 + 32) = 0;
      uint64_t v48 = (void (**)(uint64_t))&unk_26E725550;
      *(void *)uint64_t v42 = &unk_26E725550;
      *(void *)(v42 + 8) = v45;
      *(_OWORD *)(v42 + 40) = v46;
      *(_OWORD *)(v42 + 56) = v47;
      *(void *)(v42 + 72) = v44;
      uint64_t v49 = *((void *)this + 3);
      *(_DWORD *)(v42 + 32) = 1;
      *(void *)(v42 + 24) = v49;
      if (v49)
      {
        (*(void (**)(uint64_t))(*(void *)v49 + 32))(v49);
        *(void *)(v42 + 16) = *(void *)(*(void *)(v42 + 24) + 16);
        uint64_t v48 = *(void (***)(uint64_t))v42;
      }
      v48[5](v42);
      v43 += 80;
      v42 += 80;
      --v41;
    }
    while (v41);
  }
  else
  {
    physx::Dy::DynamicsTGSContext::iterativeSolveIsland(*((void *)this + 9), *((void *)this + 6), *((unsigned int **)this + 7), v5, *(_DWORD *)(*((void *)this + 5) + 144), *(_DWORD *)(*((void *)this + 5) + 148), (uint64_t)v50, *(float *)(*((void *)this + 5) + 156), a3.n128_f64[0], a4);
  }
}

void physx::Dy::ParallelSolveTask::~ParallelSolveTask(physx::Dy::ParallelSolveTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Dy::ParallelSolveTask::getName(physx::Dy::ParallelSolveTask *this)
{
  return "ParallelSolveTask";
}

uint64_t physx::Dy::ParallelSolveTask::runInternal(physx::Dy::ParallelSolveTask *this)
{
  uint64_t v2 = *((void *)this + 8);
  uint64_t v1 = *((void *)this + 9);
  uint64_t v4 = *((void *)this + 6);
  float v3 = (unsigned int *)*((void *)this + 7);
  uint64_t v5 = (atomic_uint *)*((void *)this + 5);
  float v6 = *((float *)v5 + 39);
  unsigned int v156 = v5[36];
  atomic_uint v157 = v5[37];
  unint64_t v7 = physx::shdfnd::SListImpl::pop(*(physx::shdfnd::SListImpl **)(v1 + 432));
  if (!v7)
  {
    uint64_t v10 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unsigned int v11 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ThreadContext>::getName() [T = physx::Dy::ThreadContext]";
    }
    else {
      unsigned int v11 = "<allocation names disabled>";
    }
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v10 + 24) + 16))(v10 + 24, 12343, v11, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/include/utils/PxcThreadCoherentCache.h", 82);
    if (v12)
    {
      uint64_t v13 = (physx::Dy::ThreadContext *)((v12 + 23) & 0xFFFFFFFFFFFFFFF0);
      *((void *)v13 - 1) = (char *)v13 - v12;
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = v13;
    physx::Dy::ThreadContext::ThreadContext(v13, *(physx::PxcNpMemBlockPool **)(v1 + 440));
    unint64_t v7 = v14;
  }
  unsigned int add = atomic_fetch_add(v5 + 41, 4u);
  unsigned int v162 = atomic_fetch_add(v5 + 43, 0x80u);
  unsigned int v15 = atomic_fetch_add(v5 + 45, 1u);
  unsigned int v16 = *(_DWORD *)(v2 + 12048);
  unsigned int v17 = v3[1];
  unsigned int v167 = *v3;
  uint64_t v18 = *(void *)(v4 + 72);
  uint64_t v174 = *(void *)(v4 + 88);
  uint64_t v152 = *(void *)(v1 + 576);
  uint64_t v19 = *(void *)(v1 + 592);
  uint64_t v20 = *(void *)(v2 + 11920);
  uint64_t v177 = *(unsigned int *)(v2 + 11928);
  uint64_t v21 = *(unsigned int *)(v4 + 112);
  uint64_t v22 = v7 + 1520;
  unsigned int v23 = *(_DWORD *)(v2 + 12168);
  unsigned int v159 = v15;
  uint64_t v155 = v1;
  if ((*((_DWORD *)v7 + 3043) & 0x7FFFFFFFu) < v23)
  {
    unsigned int v24 = v17;
    uint64_t v25 = v21;
    uint64_t v26 = v7;
    physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate((uint64_t)(v7 + 1520), v23);
    unint64_t v7 = v26;
    uint64_t v21 = v25;
    unsigned int v17 = v24;
    unsigned int v23 = *(_DWORD *)(v2 + 12168);
  }
  unsigned int v154 = v16;
  int v27 = v7 + 1522;
  uint64_t v153 = v7;
  if ((*((_DWORD *)v7 + 3047) & 0x7FFFFFFFu) < v23) {
    physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate((uint64_t)(v7 + 1522), v23);
  }
  unsigned int v175 = v17 & 0x7FFFFFFF;
  float32x4_t v171 = v27;
  float32x2_t v172 = v22;
  uint64_t v28 = *v27;
  uint64_t v203 = *v22;
  uint64_t v204 = v28;
  uint64_t v29 = v21 << 6;
  float32x4_t v191 = v5;
  uint64_t v176 = v2;
  uint64_t v173 = v20;
  uint64_t v151 = v21 << 6;
  if (v156 < 2)
  {
    atomic_uint v32 = 0;
    atomic_uint v31 = 0;
    atomic_uint v30 = 0;
    uint64_t v35 = 4;
    float v34 = 0.0;
    unsigned int v181 = 128;
    unsigned int v36 = v162;
  }
  else
  {
    atomic_uint v30 = 0;
    atomic_uint v31 = 0;
    atomic_uint v32 = 0;
    uint64_t v33 = v29 + 64;
    uint64_t v161 = v19 + v33;
    uint64_t v160 = v152 + v33;
    float v34 = 0.0;
    unsigned int v181 = 128;
    uint64_t v35 = 4;
    int v158 = 1;
    unsigned int v36 = v162;
    do
    {
      unsigned int v186 = v35;
      atomic_uint v165 = v31;
      if (v5[44] < v31)
      {
        int v37 = 30000;
        while (v5[44] < v165)
        {
          if (!--v37)
          {
            sched_yield();
            uint64_t v35 = v186;
            int v37 = 10000;
          }
        }
      }
      if (v5[46] < v32)
      {
        int v38 = 30000;
        while (v5[46] < v32)
        {
          if (!--v38)
          {
            sched_yield();
            uint64_t v35 = v186;
            int v38 = 10000;
          }
        }
      }
      unsigned __int32 v39 = v159 - v32;
      unsigned int v40 = v175;
      unsigned int v163 = v36;
      if (v159 - v32 < v175)
      {
        atomic_uint v41 = v32;
        unsigned int v42 = 0;
        do
        {
          uint64_t v43 = *(void *)(*(void *)(v2 + 12288) + 96 * v39);
          (*(void (**)(uint64_t, void, void, void, uint64_t, float, float, float))(*(void *)v43 + 272))(v43, *v172, *v171, 0, 1, v6, 1.0 / v6, v34);
          ++v42;
          unsigned int v44 = atomic_fetch_add(v5 + 45, 1u);
          unsigned __int32 v39 = v44 - v41;
        }
        while (v44 - v41 < v175);
        atomic_uint v45 = v41;
        unsigned int v159 = v44;
        if (v42) {
          atomic_fetch_add(v5 + 46, v42);
        }
        uint64_t v35 = v186;
        unsigned int v40 = v175;
        uint64_t v20 = v173;
        unsigned int v36 = v163;
        atomic_uint v32 = v45;
      }
      atomic_uint v168 = v32 + v40;
      if (v5[46] < (int)(v32 + v40))
      {
        int v46 = 30000;
        while (v5[46] < v168)
        {
          if (!--v46)
          {
            sched_yield();
            uint64_t v35 = v186;
            int v46 = 10000;
          }
        }
      }
      if (v177)
      {
        uint64_t v183 = 0;
        unsigned int v178 = 0;
        do
        {
          if (v5[42] < v30)
          {
            int v47 = 30000;
            while (v5[42] < v30)
            {
              if (!--v47)
              {
                uint64_t v48 = v35;
                sched_yield();
                uint64_t v35 = v48;
                int v47 = 10000;
              }
            }
          }
          atomic_uint v192 = v30;
          unsigned __int32 v49 = add - v30;
          unsigned int v50 = *(_DWORD *)(v20 + 4 * v183);
          if (v49 >= v50)
          {
            atomic_uint v56 = v192;
          }
          else
          {
            unsigned int v51 = 0;
            do
            {
              int v52 = v35;
              if (v50 - v49 >= v35) {
                uint64_t v53 = v35;
              }
              else {
                uint64_t v53 = v50 - v49;
              }
              if (v53)
              {
                uint64_t v54 = v174 + 8 * v178 + 8 * v49;
                uint64_t v55 = v53;
                do
                {
                  physx::Dy::g_SolveTGSMethods[*(unsigned __int16 *)(v54 + 6)](v54, v18, v19, (uint64_t)v202, -3.4028e38, v34);
                  v54 += 8;
                  --v55;
                }
                while (v55);
              }
              uint64_t v35 = (v52 - v53);
              if (v52 == v53)
              {
                uint64_t v35 = 4;
                unsigned int add = atomic_fetch_add(v191 + 41, 4u);
                unsigned __int32 v49 = add - v192;
              }
              else
              {
                add += v53;
                v49 += v53;
              }
              v51 += v53;
            }
            while (v49 < v50);
            if (v51) {
              atomic_fetch_add(v191 + 42, v51);
            }
            uint64_t v5 = v191;
            atomic_uint v56 = v192;
            uint64_t v20 = v173;
            unsigned int v36 = v163;
          }
          atomic_uint v30 = v50 + v56;
          v178 += v50;
          uint64_t v2 = v176;
          ++v183;
        }
        while (v183 != v177);
      }
      unsigned int v187 = v35;
      if (v5[42] < v30)
      {
        int v57 = 30000;
        while (v5[42] < v30)
        {
          if (!--v57)
          {
            sched_yield();
            uint64_t v35 = v187;
            int v57 = 10000;
          }
        }
      }
      unsigned int v58 = v167;
      unsigned int v59 = v36 - v165;
      if (v36 - v165 < v167)
      {
        unsigned int v60 = 0;
        atomic_uint v193 = v30;
        do
        {
          unsigned int v61 = v58 - v59;
          if (v61 >= v181) {
            uint64_t v62 = v181;
          }
          else {
            uint64_t v62 = v61;
          }
          unsigned int v63 = v59;
          if (v62)
          {
            uint64_t v64 = v161 + ((unint64_t)v59 << 6);
            uint64_t v65 = v62;
            uint64_t v66 = (float32x2_t *)(v160 + ((unint64_t)v59 << 6));
            do
            {
              physx::Dy::integrateCoreStep(v66, v64, v6, v8, v9);
              v64 += 64;
              v66 += 8;
              --v65;
            }
            while (v65);
          }
          v181 -= v62;
          if (v181)
          {
            v36 += v62;
            unsigned int v59 = v62 + v63;
          }
          else
          {
            unsigned int v181 = 128;
            unsigned int v36 = atomic_fetch_add(v191 + 43, 0x80u);
            unsigned int v59 = v36 - v165;
          }
          atomic_uint v30 = v193;
          uint64_t v35 = v187;
          unsigned int v58 = v167;
          v60 += v62;
        }
        while (v59 < v167);
        if (v60) {
          atomic_fetch_add(v191 + 44, v60);
        }
        uint64_t v5 = v191;
        uint64_t v2 = v176;
      }
      atomic_uint v67 = v168;
      unsigned __int32 v68 = v159 - v168;
      unsigned int v69 = v175;
      if (v159 - v168 < v175)
      {
        unsigned int v70 = 0;
        unsigned int v71 = v175;
        atomic_uint v72 = v168;
        do
        {
          uint64_t v73 = (void (*)(float))physx::Dy::ArticulationPImpl::sUpdateDeltaMotion[*(unsigned int *)(*(void *)(*(void *)(v2 + 12288) + 96 * v68) + 40)];
          if (v73)
          {
            v73(v6);
            atomic_uint v72 = v168;
            unsigned int v71 = v175;
          }
          ++v70;
          unsigned int v74 = atomic_fetch_add(v5 + 45, 1u);
          unsigned __int32 v68 = v74 - v72;
        }
        while (v74 - v72 < v71);
        unsigned int v159 = v74;
        if (v70) {
          atomic_fetch_add(v5 + 46, v70);
        }
        unsigned int v69 = v71;
        uint64_t v35 = v187;
        atomic_uint v67 = v72;
      }
      float v34 = v6 + v34;
      atomic_uint v32 = v67 + v69;
      atomic_uint v31 = v165 + v167;
      ++v158;
    }
    while (v158 != v156);
  }
  unsigned int v188 = v35;
  atomic_uint v166 = v31;
  if (v5[44] < v31)
  {
    int v75 = 30000;
    while (v5[44] < v166)
    {
      if (!--v75)
      {
        sched_yield();
        uint64_t v35 = v188;
        int v75 = 10000;
      }
    }
  }
  if (v5[46] < v32)
  {
    int v76 = 30000;
    while (v5[46] < v32)
    {
      if (!--v76)
      {
        sched_yield();
        uint64_t v35 = v188;
        int v76 = 10000;
      }
    }
  }
  unsigned int v164 = v36;
  unsigned __int32 v77 = v159 - v32;
  unsigned int v78 = v175;
  if (v159 - v32 < v175)
  {
    atomic_uint v79 = v32;
    unsigned int v80 = 0;
    do
    {
      uint64_t v81 = *(void *)(*(void *)(v2 + 12288) + 96 * v77);
      (*(void (**)(uint64_t, void, void, void, uint64_t, float, float, float))(*(void *)v81 + 272))(v81, *v172, *v171, 0, 1, v6, 1.0 / v6, v34);
      ++v80;
      unsigned int v82 = atomic_fetch_add(v5 + 45, 1u);
      unsigned __int32 v77 = v82 - v79;
    }
    while (v82 - v79 < v175);
    unsigned int v159 = v82;
    if (v80) {
      atomic_fetch_add(v5 + 46, v80);
    }
    uint64_t v35 = v188;
    unsigned int v78 = v175;
    uint64_t v20 = v173;
    atomic_uint v32 = v79;
  }
  atomic_uint v83 = v32 + v78;
  if (v5[46] < v83)
  {
    int v84 = 30000;
    while (v5[46] < v83)
    {
      if (!--v84)
      {
        sched_yield();
        uint64_t v35 = v188;
        int v84 = 10000;
      }
    }
  }
  atomic_uint v169 = v83;
  if (v177)
  {
    uint64_t v184 = 0;
    unsigned int v179 = 0;
    do
    {
      if (v5[42] < v30)
      {
        int v85 = 30000;
        while (v5[42] < v30)
        {
          if (!--v85)
          {
            uint64_t v86 = v35;
            sched_yield();
            uint64_t v35 = v86;
            int v85 = 10000;
          }
        }
      }
      unsigned int v87 = add - v30;
      unsigned int v88 = *(_DWORD *)(v20 + 4 * v184);
      if (add - v30 < v88)
      {
        atomic_uint v194 = v30;
        unsigned int v89 = 0;
        do
        {
          int v90 = v35;
          if (v88 - v87 >= v35) {
            uint64_t v91 = v35;
          }
          else {
            uint64_t v91 = v88 - v87;
          }
          if (v91)
          {
            uint64_t v92 = v174 + 8 * v179 + 8 * v87;
            uint64_t v93 = v91;
            do
            {
              physx::Dy::g_SolveConcludeTGSMethods[*(unsigned __int16 *)(v92 + 6)](v92, v18, v19, (uint64_t)v202, v34);
              v92 += 8;
              --v93;
            }
            while (v93);
          }
          uint64_t v35 = (v90 - v91);
          if (v90 == v91)
          {
            uint64_t v35 = 4;
            unsigned int add = atomic_fetch_add(v191 + 41, 4u);
            unsigned int v87 = add - v194;
          }
          else
          {
            add += v91;
            v87 += v91;
          }
          v89 += v91;
        }
        while (v87 < v88);
        if (v89) {
          atomic_fetch_add(v191 + 42, v89);
        }
        uint64_t v2 = v176;
        atomic_uint v30 = v194;
        uint64_t v20 = v173;
      }
      v30 += v88;
      v179 += v88;
      ++v184;
      uint64_t v5 = v191;
    }
    while (v184 != v177);
  }
  unsigned int v189 = v35;
  unsigned int v94 = v175;
  if (v5[42] < v30)
  {
    int v95 = 30000;
    while (v5[42] < v30)
    {
      if (!--v95)
      {
        sched_yield();
        unsigned int v94 = v175;
        int v95 = 10000;
      }
    }
  }
  float v96 = *(float *)(v155 + 92);
  unsigned int v97 = v167;
  unsigned int v98 = v164 - v166;
  atomic_uint v195 = v30;
  if (v164 - v166 < v167)
  {
    unsigned int v99 = 0;
    unsigned int v97 = v167;
    do
    {
      unsigned int v100 = v97 - v98;
      if (v100 >= v181) {
        uint64_t v101 = v181;
      }
      else {
        uint64_t v101 = v100;
      }
      unsigned int v102 = v98;
      if (v101)
      {
        uint64_t v103 = v19 + v151 + 64 + ((unint64_t)v98 << 6);
        uint64_t v104 = v101;
        uint64_t v105 = (float32x2_t *)(v152 + v151 + 64 + ((unint64_t)v98 << 6));
        do
        {
          physx::Dy::integrateCoreStep(v105, v103, v6, v8, v9);
          v103 += 64;
          v105 += 8;
          --v104;
        }
        while (v104);
      }
      v181 -= v101;
      if (v181)
      {
        unsigned int v98 = v101 + v102;
      }
      else
      {
        unsigned int v181 = 128;
        unsigned int v98 = atomic_fetch_add(v191 + 43, 0x80u) - v166;
      }
      atomic_uint v30 = v195;
      unsigned int v94 = v175;
      unsigned int v97 = v167;
      v99 += v101;
    }
    while (v98 < v167);
    uint64_t v5 = v191;
    uint64_t v2 = v176;
    if (v99) {
      atomic_fetch_add(v191 + 44, v99);
    }
  }
  atomic_uint v106 = v169;
  unsigned int v107 = v159 - v169;
  if (v159 - v169 < v94)
  {
    unsigned int v108 = 0;
    do
    {
      uint64_t v109 = *(void *)(v2 + 12288) + 96 * v107;
      uint64_t v110 = *(unsigned int *)(*(void *)v109 + 40);
      long long v111 = (void (*)(uint64_t, uint64_t, float))physx::Dy::ArticulationPImpl::sUpdateDeltaMotion[v110];
      if (v111)
      {
        v111(v109, v204, v6);
        unsigned int v94 = v175;
        uint64_t v110 = *(unsigned int *)(*(void *)v109 + 40);
      }
      long long v112 = (void (*)(uint64_t, float))physx::Dy::ArticulationPImpl::sSaveVelocityTGS[v110];
      if (v112)
      {
        v112(v109, v96);
        unsigned int v94 = v175;
      }
      ++v108;
      unsigned int v113 = atomic_fetch_add(v191 + 45, 1u);
      unsigned int v107 = v113 - v169;
    }
    while (v113 - v169 < v94);
    unsigned int v159 = v113;
    uint64_t v5 = v191;
    if (v108) {
      atomic_fetch_add(v191 + 46, v108);
    }
    atomic_uint v30 = v195;
    unsigned int v97 = v167;
    atomic_uint v106 = v169;
  }
  atomic_uint v114 = v166 + v97;
  atomic_uint v185 = v106 + v94;
  uint64_t v115 = *(void *)(v155 + 432);
  pthread_mutex_lock((pthread_mutex_t *)(v115 + 8));
  *uint64_t v153 = *(void *)v115;
  *(void *)uint64_t v115 = v153;
  uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)(v115 + 8));
  uint64_t v117 = v189;
  unsigned int v118 = add;
  if (v5[44] < v114)
  {
    int v119 = 30000;
    while (v5[44] < v114)
    {
      if (!--v119)
      {
        uint64_t result = sched_yield();
        uint64_t v117 = v189;
        int v119 = 10000;
      }
    }
  }
  if (v5[46] < v185)
  {
    int v120 = 30000;
    while (v5[46] < v185)
    {
      if (!--v120)
      {
        uint64_t result = sched_yield();
        uint64_t v117 = v189;
        int v120 = 10000;
      }
    }
  }
  if (v157)
  {
    int v170 = 0;
    float v121 = v6 + v34;
    uint64_t v198 = v18;
    do
    {
      uint64_t v122 = v117;
      if (v5[42] < v30)
      {
        int v123 = 30000;
        while (v5[42] < v30)
        {
          if (!--v123)
          {
            uint64_t result = sched_yield();
            uint64_t v117 = v122;
            int v123 = 10000;
          }
        }
      }
      atomic_uint v124 = v185;
      unsigned __int32 v125 = v159 - v185;
      unsigned int v126 = v175;
      if (v159 - v185 < v175)
      {
        unsigned int v200 = v118;
        unsigned int v127 = 0;
        do
        {
          uint64_t v128 = (void *)(*(void *)(v2 + 12288) + 96 * v125);
          uint64_t result = (*(uint64_t (**)(void, void, void, uint64_t, uint64_t, float, float, float))(*(void *)*v128 + 272))(*v128, *v172, *v171, 1, 1, v6, 1.0 / v6, v121);
          if (v157 - v170 == 1) {
            uint64_t result = (*(uint64_t (**)(void, uint64_t))(*(void *)*v128 + 280))(*v128, 1);
          }
          ++v127;
          unsigned int v129 = atomic_fetch_add(v5 + 45, 1u);
          unsigned __int32 v125 = v129 - v185;
        }
        while (v129 - v185 < v175);
        unsigned int v159 = v129;
        if (v127) {
          atomic_fetch_add(v5 + 46, v127);
        }
        unsigned int v118 = v200;
        uint64_t v117 = v122;
        unsigned int v126 = v175;
        atomic_uint v124 = v185;
      }
      atomic_uint v185 = v124 + v126;
      if (v5[46] < (int)(v124 + v126))
      {
        int v130 = 30000;
        while (v5[46] < v185)
        {
          if (!--v130)
          {
            uint64_t result = sched_yield();
            uint64_t v117 = v122;
            int v130 = 10000;
          }
        }
      }
      if (v177)
      {
        uint64_t v131 = 0;
        unsigned int v132 = 0;
        do
        {
          if (v5[42] < v30)
          {
            int v133 = 30000;
            while (v5[42] < v30)
            {
              if (!--v133)
              {
                uint64_t v134 = v117;
                uint64_t result = sched_yield();
                uint64_t v117 = v134;
                int v133 = 10000;
              }
            }
          }
          unsigned int v135 = v118 - v30;
          unsigned int v136 = *(_DWORD *)(v20 + 4 * v131);
          if (v118 - v30 < v136)
          {
            uint64_t v182 = v131;
            atomic_uint v196 = v30;
            unsigned int v137 = 0;
            unsigned int v180 = v132;
            uint64_t v190 = v174 + 8 * v132;
            unsigned int v201 = *(_DWORD *)(v20 + 4 * v131);
            do
            {
              unsigned int v138 = v118;
              int v139 = v117;
              if (v136 - v135 >= v117) {
                uint64_t v140 = v117;
              }
              else {
                uint64_t v140 = v136 - v135;
              }
              if (v140)
              {
                uint64_t v141 = v190 + 8 * v135;
                uint64_t v142 = v140;
                do
                {
                  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, unsigned char *, double, float))physx::Dy::g_SolveTGSMethods[*(unsigned __int16 *)(v141 + 6)])(v141, v198, v19, v202, 0.0, v121);
                  v141 += 8;
                  --v142;
                }
                while (v142);
              }
              uint64_t v117 = (v139 - v140);
              if (v139 == v140)
              {
                uint64_t v117 = 4;
                unsigned int v118 = atomic_fetch_add(v191 + 41, 4u);
                unsigned int v135 = v118 - v196;
              }
              else
              {
                unsigned int v118 = v140 + v138;
                v135 += v140;
              }
              unsigned int v136 = v201;
              v137 += v140;
            }
            while (v135 < v201);
            uint64_t v5 = v191;
            if (v137) {
              atomic_fetch_add(v191 + 42, v137);
            }
            atomic_uint v30 = v196;
            uint64_t v20 = v173;
            uint64_t v131 = v182;
            unsigned int v132 = v180;
            uint64_t v18 = v198;
          }
          v30 += v136;
          v132 += v136;
          ++v131;
          uint64_t v2 = v176;
        }
        while (v131 != v177);
      }
      ++v170;
    }
    while (v170 != v157);
  }
  if (v5[42] < v30)
  {
    int v143 = 30000;
    while (v5[42] < v30)
    {
      if (!--v143)
      {
        uint64_t v144 = v117;
        uint64_t result = sched_yield();
        uint64_t v117 = v144;
        int v143 = 10000;
      }
    }
  }
  unsigned int v145 = v118 - v30;
  if (v118 - v30 < v154)
  {
    atomic_uint v197 = v30;
    unsigned int v146 = 0;
    do
    {
      int v147 = v117;
      if (v154 - v145 >= v117) {
        uint64_t v148 = v117;
      }
      else {
        uint64_t v148 = v154 - v145;
      }
      if (v148)
      {
        uint64_t v149 = v174 + 8 * v145;
        uint64_t v150 = v148;
        do
        {
          uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, void))physx::Dy::g_WritebackTGSMethods[*(unsigned __int16 *)(v149 + 6)])(v149, v18, 0);
          v149 += 8;
          --v150;
        }
        while (v150);
      }
      LODWORD(v117) = v147 - v148;
      if (v147 == v148)
      {
        LODWORD(v117) = 4;
        unsigned int v145 = atomic_fetch_add(v5 + 41, 4u) - v197;
      }
      else
      {
        v145 += v148;
      }
      v146 += v148;
    }
    while (v145 < v154);
    if (v146) {
      atomic_fetch_add(v5 + 42, v146);
    }
  }
  return result;
}

void physx::Dy::FinishSolveIslandTask::~FinishSolveIslandTask(physx::Dy::FinishSolveIslandTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Dy::FinishSolveIslandTask::getName(physx::Dy::FinishSolveIslandTask *this)
{
  return "FinishSolveIslandTask";
}

uint64_t physx::Dy::FinishSolveIslandTask::runInternal(physx::Dy::FinishSolveIslandTask *this)
{
  uint64_t v1 = *((void *)this + 8);
  uint64_t v2 = *((void *)this + 9);
  uint64_t v3 = *((void *)this + 5);
  uint64_t v4 = *((void *)this + 6);
  uint64_t v5 = (unsigned int *)*((void *)this + 7);
  uint64_t v6 = *((void *)this + 3);
  uint64_t result = physx::PxcNpMemBlockPool::releaseConstraintBlocks(*(void *)(v3 + 11864), v3 + 11848);
  *(void *)(v3 + 11880) = 0;
  *(_DWORD *)(v3 + 11888) = 0;
  if (*v5)
  {
    int v8 = 0;
    uint64_t v9 = v1 + 224;
    do
    {
      uint64_t v10 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(v2 + 776), 104, 0x10u);
      unsigned int v11 = (void *)v10;
      uint64_t v12 = *(unsigned int *)(v4 + 112);
      uint64_t v13 = *(void *)(v2 + 576) + (v12 << 6);
      uint64_t v14 = *(void *)(v2 + 592) + (v12 << 6);
      uint64_t v15 = *(void *)(v2 + 608) + 48 * v12;
      int v16 = *(_DWORD *)(v2 + 92);
      unsigned int v17 = v8 + 512;
      unsigned int v18 = *v5;
      if (v8 + 512 < *v5) {
        unsigned int v18 = v8 + 512;
      }
      *(void *)(v10 + 8) = *(void *)(v2 + 800);
      *(void *)(v10 + 16) = 0;
      *(_DWORD *)(v10 + 32) = 0;
      uint64_t v19 = (uint64_t (**)(void *))&unk_26E724FA0;
      *(void *)uint64_t v10 = &unk_26E724FA0;
      *(void *)(v10 + 40) = v4;
      *(void *)(v10 + 48) = v13;
      *(void *)(v10 + 56) = v14;
      *(void *)(v10 + 64) = v15;
      *(_DWORD *)(v10 + 72) = v16;
      *(void *)(v10 + 80) = v9;
      *(_DWORD *)(v10 + 88) = v8;
      *(_DWORD *)(v10 + 92) = v18;
      *(void *)(v10 + 96) = v2;
      *(_DWORD *)(v10 + 32) = 1;
      *(void *)(v10 + 24) = v6;
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v6 + 32))(v6);
        v11[2] = *(void *)(v11[3] + 16);
        uint64_t v19 = (uint64_t (**)(void *))*v11;
      }
      uint64_t result = v19[5](v11);
      v8 += 512;
    }
    while (v17 < *v5);
  }
  if ((v5[1] & 0x7FFFFFFF) != 0)
  {
    int v20 = 0;
    do
    {
      uint64_t v21 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(v2 + 776), 72, 0x10u);
      uint64_t v22 = (void *)v21;
      unsigned int v23 = v5[1] & 0x7FFFFFFF;
      unsigned int v24 = v20 + 64;
      if (v23 >= v20 + 64) {
        unsigned int v23 = v20 + 64;
      }
      int v25 = *(_DWORD *)(v2 + 88);
      *(void *)(v21 + 8) = *(void *)(v2 + 800);
      *(void *)(v21 + 16) = 0;
      *(_DWORD *)(v21 + 32) = 0;
      uint64_t v26 = (uint64_t (**)(void *))&unk_26E725010;
      *(void *)uint64_t v21 = &unk_26E725010;
      *(void *)(v21 + 40) = v3;
      *(_DWORD *)(v21 + 48) = v20;
      *(_DWORD *)(v21 + 52) = v23;
      *(_DWORD *)(v21 + 56) = v25;
      *(void *)(v21 + 64) = v2;
      *(_DWORD *)(v21 + 32) = 1;
      *(void *)(v21 + 24) = v6;
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v6 + 32))(v6);
        v22[2] = *(void *)(v22[3] + 16);
        uint64_t v26 = (uint64_t (**)(void *))*v22;
      }
      uint64_t result = v26[5](v22);
      v20 += 64;
    }
    while (v24 < (v5[1] & 0x7FFFFFFF));
  }
  return result;
}

void physx::Dy::EndIslandTask::~EndIslandTask(physx::Dy::EndIslandTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Dy::EndIslandTask::getName(physx::Dy::EndIslandTask *this)
{
  return "EndIslandTask";
}

uint64_t physx::Dy::EndIslandTask::runInternal(physx::Dy::EndIslandTask *this)
{
  uint64_t v1 = (void *)*((void *)this + 5);
  uint64_t v2 = *(void *)(*((void *)this + 6) + 432);
  pthread_mutex_lock((pthread_mutex_t *)(v2 + 8));
  *uint64_t v1 = *(void *)v2;
  *(void *)uint64_t v2 = v1;
  return pthread_mutex_unlock((pthread_mutex_t *)(v2 + 8));
}

uint64_t physx::shdfnd::Array<physx::PxSolverConstraintDesc,physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>::allocate(result, 48 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v4 = (_OWORD *)result;
  }
  else
  {
    uint64_t v4 = 0;
  }
  unsigned int v5 = *(_DWORD *)(v3 + 8);
  uint64_t v6 = *(long long **)v3;
  if (v5)
  {
    unint64_t v7 = (unint64_t)&v4[3 * v5];
    int v8 = v4;
    do
    {
      long long v9 = *v6;
      long long v10 = v6[2];
      v8[1] = v6[1];
      v8[2] = v10;
      _OWORD *v8 = v9;
      v8 += 3;
      v6 += 3;
    }
    while ((unint64_t)v8 < v7);
    uint64_t v6 = *(long long **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Dy::ArticulationSolverDesc,physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationSolverDesc>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unsigned int v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationSolverDesc>::getName() [T = phys"
    }
           "x::Dy::ArticulationSolverDesc]";
    else {
      unsigned int v5 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 96 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (_OWORD *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  unsigned int v7 = *(_DWORD *)(v3 + 8);
  int v8 = *(_OWORD **)v3;
  if (v7)
  {
    unint64_t v9 = (unint64_t)&v6[6 * v7];
    long long v10 = v6;
    do
    {
      long long v11 = v8[1];
      _OWORD *v10 = *v8;
      v10[1] = v11;
      long long v12 = v8[2];
      long long v13 = v8[3];
      long long v14 = v8[5];
      v10[4] = v8[4];
      _OWORD v10[5] = v14;
      float32x4_t v10[2] = v12;
      v10[3] = v13;
      v10 += 6;
      v8 += 6;
    }
    while ((unint64_t)v10 < v9);
    int v8 = *(_OWORD **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxTGSSolverBodyVel,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxTGSSolverBodyVel>>>::recreate(unint64_t *a1, unsigned int a2)
{
  unint64_t v4 = ((unint64_t)a2 << 6) + 135;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxTGSSolverBodyVel>::getName() [T = physx::PxTGSSolverBodyVel]";
  }
  else {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  if (result)
  {
    unint64_t v8 = (result + 135) & 0xFFFFFFFFFFFFFF80;
    *(void *)(v8 - 8) = v8 - result;
  }
  else
  {
    unint64_t v8 = 0;
  }
  uint64_t v9 = *((unsigned int *)a1 + 2);
  if (v9)
  {
    unint64_t v10 = v8 + (v9 << 6);
    unint64_t v11 = *a1;
    unint64_t v12 = v8;
    do
    {
      *(void *)unint64_t v12 = *(void *)v11;
      *(_DWORD *)(v12 + 8) = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v12 + 12) = *(_DWORD *)(v11 + 12);
      *(void *)(v12 + 16) = *(void *)(v11 + 16);
      *(_DWORD *)(v12 + 24) = *(_DWORD *)(v11 + 24);
      *(_DWORD *)(v12 + 28) = *(_DWORD *)(v11 + 28);
      *(_OWORD *)(v12 + 32) = *(_OWORD *)(v11 + 32);
      *(void *)(v12 + 48) = *(void *)(v11 + 48);
      *(_DWORD *)(v12 + 56) = *(_DWORD *)(v11 + 56);
      *(_DWORD *)(v12 + 60) = *(_DWORD *)(v11 + 60);
      v12 += 64;
      v11 += 64;
    }
    while (v12 < v10);
  }
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && *a1) {
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, *a1 - *(void *)(*a1 - 8));
  *a1 = v8;
  *((_DWORD *)a1 + 3) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxTGSSolverBodyTxInertia,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxTGSSolverBodyTxInertia>>>::recreate(unint64_t *a1, unsigned int a2)
{
  unint64_t v4 = ((unint64_t)a2 << 6) + 135;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxTGSSolverBodyTxInertia>::getName() [T = physx::P"
  }
         "xTGSSolverBodyTxInertia]";
  else {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  if (result)
  {
    unint64_t v8 = (result + 135) & 0xFFFFFFFFFFFFFF80;
    *(void *)(v8 - 8) = v8 - result;
  }
  else
  {
    unint64_t v8 = 0;
  }
  uint64_t v9 = *((unsigned int *)a1 + 2);
  unint64_t v10 = *a1;
  if (v9)
  {
    unint64_t v11 = v8 + (v9 << 6);
    unint64_t v12 = *a1;
    unint64_t v13 = v8;
    do
    {
      *(_OWORD *)unint64_t v13 = *(_OWORD *)v12;
      *(void *)(v13 + 16) = *(void *)(v12 + 16);
      *(void *)(v13 + 24) = *(void *)(v12 + 24);
      *(void *)(v13 + 32) = *(void *)(v12 + 32);
      *(void *)(v13 + 40) = *(void *)(v12 + 40);
      *(void *)(v13 + 48) = *(void *)(v12 + 48);
      *(void *)(v13 + 56) = *(void *)(v12 + 56);
      v13 += 64;
      v12 += 64;
    }
    while (v13 < v11);
  }
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && v10) {
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v10 - *(void *)(v10 - 8));
  *a1 = v8;
  *((_DWORD *)a1 + 3) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxTGSSolverBodyData,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxTGSSolverBodyData>>>::recreate(unint64_t *a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = 48 * a2 + 135;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance, a2))
  {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxTGSSolverBodyData>::getName() [T = physx::PxTGSSolverBodyData]";
  }
  else
  {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  if (result)
  {
    unint64_t v8 = (result + 135) & 0xFFFFFFFFFFFFFF80;
    *(void *)(v8 - 8) = v8 - result;
  }
  else
  {
    unint64_t v8 = 0;
  }
  unsigned int v9 = *((_DWORD *)a1 + 2);
  if (v9)
  {
    unint64_t v10 = v8 + 48 * v9;
    unint64_t v11 = *a1;
    unint64_t v12 = v8;
    do
    {
      *(_OWORD *)unint64_t v12 = *(_OWORD *)v11;
      *(void *)(v12 + 16) = *(void *)(v11 + 16);
      *(_DWORD *)(v12 + 24) = *(_DWORD *)(v11 + 24);
      long long v13 = *(_OWORD *)(v11 + 28);
      *(_DWORD *)(v12 + 44) = *(_DWORD *)(v11 + 44);
      *(_OWORD *)(v12 + 28) = v13;
      v12 += 48;
      v11 += 48;
    }
    while (v12 < v10);
  }
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && *a1) {
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, *a1 - *(void *)(*a1 - 8));
  *a1 = v8;
  *((_DWORD *)a1 + 3) = v2;
  return result;
}

void *physx::Sc::ActorSim::setActorsInteractionsDirty(void *result, char a2, uint64_t a3, int a4, int8x8_t a5)
{
  int v5 = *((_DWORD *)result + 13);
  if (v5)
  {
    unsigned int v9 = (unsigned __int8 **)result[5];
    do
    {
      unint64_t v11 = *v9++;
      unint64_t v10 = v11;
      if (!a3 || *(void *)v10 == a3 || *((void *)v10 + 1) == a3)
      {
        int v12 = v10[29];
        if ((v12 & a4) != 0)
        {
          v10[30] |= a2;
          if ((v12 & 8) == 0)
          {
            uint64_t result = physx::Sc::NPhaseCore::addToDirtyInteractionList(*(int32x2_t **)(*(void *)(*(void *)v10 + 72) + 3992), (physx::Sc::Interaction *)v10, a5);
            v10[29] |= 8u;
          }
        }
      }
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t physx::Cm::OwnedArray<physx::Sc::Interaction *,physx::Sc::ActorSim,unsigned int,&physx::Sc::ActorSim::reallocInteractions>::releaseMem(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  *(_DWORD *)(result + 12) = 0;
  uint64_t v4 = *(void ***)result;
  if (*(void *)result) {
    BOOL v5 = v4 == (void **)(a2 + 8);
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    uint64_t result = physx::Sc::Scene::deallocatePointerBlock(*(void *)(a2 + 72), v4, *(_DWORD *)(result + 8));
  }
  *(_DWORD *)(v3 + 8) = 0;
  *(void *)uint64_t v3 = 0;
  return result;
}

void physx::Sc::ActorSim::~ActorSim(physx::Sc::ActorSim *this)
{
  *(void *)this = &unk_26E7256A0;
  physx::Cm::OwnedArray<physx::Sc::Interaction *,physx::Sc::ActorSim,unsigned int,&physx::Sc::ActorSim::reallocInteractions>::releaseMem((uint64_t)this + 40, (uint64_t)this);
}

{
  void (*v1)(void);
  uint64_t vars8;

  *(void *)this = &unk_26E7256A0;
  physx::Cm::OwnedArray<physx::Sc::Interaction *,physx::Sc::ActorSim,unsigned int,&physx::Sc::ActorSim::reallocInteractions>::releaseMem((uint64_t)this + 40, (uint64_t)this);
  uint64_t v1 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
  v1();
}

physx::Sc::Scene **physx::Sc::ActorSim::registerInteractionInActor(physx::Sc::ActorSim *this, physx::Sc::Interaction *a2)
{
  BOOL v5 = a2;
  int v3 = *((_DWORD *)this + 13);
  uint64_t result = physx::Cm::OwnedArray<physx::Sc::Interaction *,physx::Sc::ActorSim,unsigned int,&physx::Sc::ActorSim::reallocInteractions>::pushBack((physx::Sc::Scene **)this + 5, (uint64_t *)&v5, (physx::Sc::Scene **)this);
  if (*(physx::Sc::ActorSim **)v5 == this) {
    *((_DWORD *)v5 + 5) = v3;
  }
  else {
    *((_DWORD *)v5 + 6) = v3;
  }
  return result;
}

physx::Sc::Scene **physx::Cm::OwnedArray<physx::Sc::Interaction *,physx::Sc::ActorSim,unsigned int,&physx::Sc::ActorSim::reallocInteractions>::pushBack(physx::Sc::Scene **result, uint64_t *a2, physx::Sc::Scene **this)
{
  uint64_t v4 = result;
  unsigned int v5 = *((_DWORD *)result + 3);
  if (v5 == *((_DWORD *)result + 2))
  {
    uint64_t result = physx::Sc::ActorSim::reallocInteractions(this, (physx::Sc::Interaction ***)result, (unsigned int *)result + 2, v5, v5 + 1);
    unsigned int v5 = *((_DWORD *)v4 + 3);
  }
  uint64_t v6 = *a2;
  unsigned int v7 = *v4;
  *((_DWORD *)v4 + 3) = v5 + 1;
  *((void *)v7 + v5) = v6;
  return result;
}

uint64_t physx::Sc::ActorSim::unregisterInteractionFromActor(uint64_t result, void *a2)
{
  uint64_t v2 = 24;
  if (*a2 == result) {
    uint64_t v2 = 20;
  }
  uint64_t v3 = *(unsigned int *)((char *)a2 + v2);
  uint64_t v4 = *(void *)(result + 40);
  unsigned int v5 = *(_DWORD *)(result + 52) - 1;
  *(_DWORD *)(result + 52) = v5;
  *(void *)(v4 + 8 * v3) = *(void *)(v4 + 8 * v5);
  if (v3 < v5)
  {
    uint64_t v6 = *(void *)(*(void *)(result + 40) + 8 * v3);
    if (*(void *)v6 == result) {
      *(_DWORD *)(v6 + 20) = v3;
    }
    else {
      *(_DWORD *)(v6 + 24) = v3;
    }
  }
  return result;
}

physx::Sc::Scene **physx::Sc::ActorSim::reallocInteractions(physx::Sc::Scene **this, physx::Sc::Interaction ***a2, unsigned int *a3, int a4, unsigned int a5)
{
  uint64_t v8 = (uint64_t)this;
  if (a5)
  {
    if (a5 > 4)
    {
      unsigned int v11 = (a5 - 1) | ((a5 - 1) >> 1) | (((a5 - 1) | ((a5 - 1) >> 1)) >> 2);
      unsigned int v12 = v11 | (v11 >> 4) | ((v11 | (v11 >> 4)) >> 8);
      int v10 = (v12 | HIWORD(v12)) + 1;
      this = (physx::Sc::Scene **)physx::Sc::Scene::allocatePointerBlock(this[9], v10);
      unsigned int v9 = this;
    }
    else
    {
      unsigned int v9 = this + 1;
      int v10 = 4;
    }
  }
  else
  {
    unsigned int v9 = 0;
    int v10 = 0;
  }
  if (*a2)
  {
    this = (physx::Sc::Scene **)memcpy(v9, *a2, (8 * a4));
    if (*a2 != (physx::Sc::Interaction **)(v8 + 8)) {
      this = (physx::Sc::Scene **)physx::Sc::Scene::deallocatePointerBlock(*(void *)(v8 + 72), (void **)*a2, *a3);
    }
  }
  *a3 = v10;
  *a2 = v9;
  return this;
}

unsigned __int16 *physx::Sc::ArticulationSim::createDriveCache(physx::Sc::ArticulationSim *this, float a2, unsigned __int16 a3)
{
  physx::Sc::ArticulationSim::checkResize(this);
  uint64_t v9 = 0;
  int v8 = 0;
  (*(void (**)(void, void, char *, uint64_t *, int *))(**(void **)this + 48))(*(void *)this, *((unsigned int *)this + 8), (char *)&v9 + 4, &v9, &v8);
  if (v9) {
    uint64_t v6 = (unsigned __int16 *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))();
  }
  else {
    uint64_t v6 = 0;
  }
  physx::Dy::PxvArticulationDriveCache::initialize(v6, *((unsigned __int16 *)this + 16), *((void **)this + 3), a3, *(char **)(*(void *)this + 128), *(unsigned __int16 *)(*(void *)this + 142), a2);
  return v6;
}

void physx::Sc::ArticulationSim::updateDriveCache(uint64_t a1, unsigned __int16 *a2, unsigned __int16 a3, float a4)
{
  physx::Sc::ArticulationSim::checkResize((void *)a1);
  unsigned int v8 = *(unsigned __int16 *)(a1 + 32);
  uint64_t v9 = *(void **)(a1 + 24);
  int v10 = *(char **)(*(void *)a1 + 128);
  unsigned int v11 = *(unsigned __int16 *)(*(void *)a1 + 142);
  physx::Dy::PxvArticulationDriveCache::initialize(a2, v8, v9, a3, v10, v11, a4);
}

void physx::Sc::ArticulationSim::applyImpulse(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  unsigned int v8 = v7;
  uint64_t v10 = v9;
  v28[255] = *MEMORY[0x263EF8340];
  int v11 = *(_DWORD *)(v9 + 32);
  bzero(v26, (32 * v11));
  bzero(&v27, (32 * v11));
  uint64_t v14 = *(unsigned int *)(v10 + 48);
  if (v14)
  {
    uint64_t v15 = 0;
    while (*(void *)(*(void *)(v10 + 40) + 8 * v15) != *v8)
    {
      if (v14 == ++v15) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t v15 = 0x80000000;
  }
  v12.i64[0] = *(void *)v4;
  v16.i64[0] = vnegq_f32(v12).u64[0];
  v16.f32[2] = -*(float *)(v4 + 8);
  v13.i64[0] = *(void *)v2;
  v17.i64[0] = vnegq_f32(v13).u64[0];
  v17.f32[2] = -*(float *)(v2 + 8);
  v16.i32[3] = 0;
  unsigned int v18 = &v26[2 * v15];
  v17.i32[3] = 0;
  *unsigned int v18 = v16;
  v18[1] = v17;
  physx::Dy::Articulation::applyImpulses(v6, v26, &v27);
  if (v11)
  {
    unint64_t v19 = 0;
    int v20 = (float32x2_t *)v28;
    do
    {
      uint64_t v21 = *(void *)(*(void *)(*(void *)(v10 + 40) + 8 * v19) + 80);
      float v22 = v20[1].f32[0];
      float v23 = v20[-1].f32[0] + *(float *)(v21 + 88);
      *(float32x2_t *)(v21 + 80) = vadd_f32(v20[-2], *(float32x2_t *)(v21 + 80));
      *(float *)(v21 + 88) = v23;
      updateBodySim((uint64_t *)v21);
      float v24 = v22 + *(float *)(v21 + 104);
      float32x2_t v25 = *v20;
      v20 += 4;
      *(float32x2_t *)(v21 + 96) = vadd_f32(v25, *(float32x2_t *)(v21 + 96));
      *(float *)(v21 + 104) = v24;
      updateBodySim((uint64_t *)v21);
      ++v19;
    }
    while (v19 < *(unsigned int *)(v10 + 32));
  }
}

float physx::Sc::ArticulationSim::computeImpulseResponse(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = *(unsigned int *)(a1 + 48);
  if (v9)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a2;
    while (*(void *)(*(void *)(a1 + 40) + 8 * v11) != v12)
    {
      if (v9 == ++v11) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    LODWORD(v11) = 0x80000000;
  }
  v13.i64[0] = *(void *)a6;
  v13.i64[1] = *(unsigned int *)(a6 + 8);
  v14.i64[0] = *(void *)a7;
  v14.i64[1] = *(unsigned int *)(a7 + 8);
  v17[0] = v13;
  v17[1] = v14;
  physx::Dy::ArticulationHelper::getImpulseResponse(a5, v11, v17, &v18);
  __int32 v15 = v18.i32[2];
  *(void *)a3 = v18.i64[0];
  *(_DWORD *)(a3 + 8) = v15;
  float result = v20;
  *(void *)a4 = v19;
  *(float *)(a4 + 8) = result;
  return result;
}

void *physx::Sc::ArticulationSim::createCache(physx::Sc::ArticulationSim *this)
{
  physx::Sc::ArticulationSim::checkResize(this);
  int v2 = (*(uint64_t (**)(void))(**(void **)this + 56))();
  int v3 = *((_DWORD *)this + 8);
  int v4 = (24 * v2 + 240) * v3 + (4 * v2 + 16) * v2;
  size_t v5 = (v4 + 196);
  if (v4 == -196) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = (void *)(*(uint64_t (**)(uint64_t, size_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v5, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScArticulationSim.cpp", 524);
  }
  bzero(v6, v5);
  int v7 = (*(uint64_t (**)(void))(**(void **)this + 56))();
  int v8 = 32 * v3 + 120;
  *uint64_t v6 = v6 + 15;
  v6[1] = (char *)v6 + (v8 & 0xFFFFFFF8);
  uint64_t v9 = (v8 + 24 * v3 * (v7 + 6));
  int v10 = v9 + 4 * v7 * v7;
  v6[2] = (char *)v6 + v9;
  v6[3] = (char *)v6 + (v10 & 0xFFFFFFFC);
  LODWORD(v9) = v10 + 4 * v7;
  uint64_t v11 = (char *)v6 + (v9 & 0xFFFFFFFC);
  LODWORD(v9) = v9 + 4 * v7;
  v6[4] = v11;
  v6[5] = (char *)v6 + (v9 & 0xFFFFFFFC);
  LODWORD(v9) = v9 + 4 * v7;
  uint64_t v12 = (char *)v6 + (v9 & 0xFFFFFFFC);
  LODWORD(v9) = v9 + 4 * v7;
  v6[6] = v12;
  v6[7] = (char *)v6 + (v9 & 0xFFFFFFFC);
  LODWORD(v9) = v9 + 32 * v3;
  v6[8] = (char *)v6 + (v9 & 0xFFFFFFFC);
  v6[9] = (char *)v6 + ((v9 + 32 * v3) & 0xFFFFFFFC);
  v6[10] = 0;
  v6[11] = 0;
  uint64_t v13 = 20 * (*(unsigned int (**)(void))(**(void **)this + 56))() + 272 * *((_DWORD *)this + 8);
  if (v13) {
    float32x4_t v14 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v13, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScArticulationSim.cpp", 567);
  }
  else {
    float32x4_t v14 = 0;
  }
  v6[12] = v14;
  __int32 v15 = (physx::PxcScratchAllocator *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 40, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScArticulationSim.cpp", 570);
  float32x4_t v16 = physx::PxcScratchAllocator::PxcScratchAllocator(v15);
  v6[13] = v16;
  physx::PxcScratchAllocator::setBlock((uint64_t)v16, v14, v13);
  return v6;
}

uint64_t physx::Sc::ArticulationCore::getCacheDataSize(physx::Sc::ArticulationCore *this)
{
  uint64_t v1 = *(_DWORD **)this;
  if (!*(void *)this) {
    return 0;
  }
  int v2 = (*(uint64_t (**)(void))(**(void **)v1 + 56))();
  return ((24 * v2 + 240) * v1[8] + (4 * v2 + 16) * v2 + 76);
}

void physx::Sc::ArticulationCore::zeroCache(_DWORD **a1, void **a2)
{
  int v2 = *a1;
  if (*a1)
  {
    int v4 = (*(uint64_t (**)(void))(**(void **)v2 + 56))();
    size_t v5 = ((24 * v4 + 240) * v2[8] + (4 * v4 + 16) * v4 + 76);
    uint64_t v6 = *a2;
    bzero(v6, v5);
  }
}

uint64_t physx::Sc::ArticulationSim::applyCache(void *a1, uint64_t a2, char *a3)
{
  uint64_t v4 = *a1;
  char v6 = *a3;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(void *)v4 + 72))(v4, a2, &v6);
  if (result) {
    return (*(uint64_t (**)(void, void, void *))(**(void **)(a1[1] + 1904) + 128))(*(void *)(a1[1] + 1904), *a1, a1 + 9);
  }
  return result;
}

uint64_t physx::Sc::ArticulationSim::releaseCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 104);
  if (v3)
  {
    int v4 = *(_DWORD *)(v3 + 20);
    if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0 && *(void *)(v3 + 8) != 0) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)v3);
    if (*(void *)(a2 + 104)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *(void *)(a2 + 104) = 0;
  }
  if (*(void *)(a2 + 96))
  {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *(void *)(a2 + 96) = 0;
  }
  char v6 = *(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
  return v6();
}

uint64_t physx::Sc::ArticulationCore::computeLambda(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  char v6 = *a1;
  if (!*a1) {
    return 0;
  }
  uint64_t v8 = *a5;
  int v9 = *((_DWORD *)a5 + 2);
  return (*(uint64_t (**)(void, void, void, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)*v6 + 176))(*v6, v6[10], *((unsigned int *)v6 + 22), a2, a3, a4, &v8, a6);
}

double physx::Sc::ArticulationSim::getLinkVelocity@<D0>(physx::Sc::ArticulationSim *this@<X0>, _OWORD *a2@<X8>)
{
  (*(void (**)(_OWORD *__return_ptr))(**(void **)this + 360))(v5);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *a2 = v5[0];
  a2[1] = v4;
  return result;
}

double physx::Sc::ArticulationSim::getLinkAcceleration@<D0>(physx::Sc::ArticulationSim *this@<X0>, _OWORD *a2@<X8>)
{
  (*(void (**)(_OWORD *__return_ptr))(**(void **)this + 368))(v5);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *a2 = v5[0];
  a2[1] = v4;
  return result;
}

void **physx::Sc::ArticulationCore::setGlobalPose(void **this)
{
  uint64_t v1 = (uint64_t)*this;
  if (*this)
  {
    physx::Sc::ArticulationSim::checkResize(*this);
    int v2 = *(uint64_t (**)(void))(**(void **)v1 + 200);
    return (void **)v2();
  }
  return this;
}

uint64_t physx::Sc::ArticulationJointCore::ArticulationJointCore(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)double result = 0;
  *(_DWORD *)(result + 272) = 1120403456;
  *(_OWORD *)(result + 8) = xmmword_23435FBB0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 24) = 0;
  *(_OWORD *)(result + 48) = xmmword_23435FD50;
  long long v4 = (void *)(result + 340);
  *(_DWORD *)(result + 340) = 1028443341;
  *(unsigned char *)(result + 278) = 3;
  *(_WORD *)(result + 270) = 0;
  *(_DWORD *)(result + 266) = 0;
  *(_WORD *)(result + 276) = 256;
  *(_OWORD *)(result + 8) = *(_OWORD *)a2;
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 16);
  *(void *)&long long v5 = *(void *)(a2 + 20);
  *((void *)&v5 + 1) = *(void *)a3;
  *(_OWORD *)(result + 28) = v5;
  *(_OWORD *)(result + 44) = *(_OWORD *)(a3 + 8);
  *(_DWORD *)(result + 60) = *(_DWORD *)(a3 + 24);
  *(_OWORD *)(result + 280) = xmmword_23435FBB0;
  *(unsigned char *)(result + 338) = 0;
  *(void *)(result + 296) = 0;
  *(void *)(result + 304) = 0;
  *(_DWORD *)(result + 312) = 0;
  *(_DWORD *)(result + 316) = 1065353216;
  *(void *)(result + 320) = 0x3D4CCCCD3F800000;
  if (a4)
  {
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    uint64_t v6 = result + 124;
    for (uint64_t i = 208; i != 232; i += 4)
    {
      *(void *)(v6 - 12) = 0;
      *(void *)(v6 - 4) = 0x400000000;
      uint64_t v8 = (_DWORD *)(result + i);
      _DWORD *v8 = 0;
      v6 += 16;
      v8[6] = 0;
    }
    *long long v4 = 0;
    *(void *)(result + 348) = 0;
    *(_DWORD *)(result + 364) = 0;
    *(void *)(result + 356) = 0;
  }
  else
  {
    *(int32x2_t *)(result + 80) = vdup_n_s32(0x3F490FDBu);
    *(_DWORD *)(result + 324) = 1028443341;
    *(_OWORD *)(result + 64) = xmmword_234420590;
    *(_OWORD *)long long v4 = xmmword_2344205A0;
    *(_DWORD *)(result + 356) = 1045147567;
    *(void *)(result + 360) = 0x3C4CCF88BE4BAFAFLL;
  }
  *(_WORD *)(result + 336) = 0;
  *(void *)(result + 328) = 0;
  *(_DWORD *)(result + 256) = 1028443341;
  *(unsigned char *)(result + 278) = 4;
  *(_DWORD *)(result + 266) = 0;
  *(_WORD *)(result + 270) = 0;
  return result;
}

physx::Sc::ArticulationJointSim *physx::Sc::ArticulationJointCore::setParentPose(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(void *)(a1 + 24) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 277) |= 2u;
  double result = *(physx::Sc::ArticulationJointSim **)a1;
  if (result) {
    return (physx::Sc::ArticulationJointSim *)physx::Sc::ArticulationJointSim::setDirty(result);
  }
  return result;
}

physx::Sc::ArticulationJointSim *physx::Sc::ArticulationJointCore::setChildPose(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 36) = *(_OWORD *)a2;
  *(void *)(a1 + 52) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 277) |= 2u;
  double result = *(physx::Sc::ArticulationJointSim **)a1;
  if (result) {
    return (physx::Sc::ArticulationJointSim *)physx::Sc::ArticulationJointSim::setDirty(result);
  }
  return result;
}

uint64_t physx::Sc::ArticulationJointCore::setJointType(uint64_t result, char a2)
{
  *(unsigned char *)(result + 278) = a2;
  int v2 = **(void ***)(result + 368);
  if (v2)
  {
    uint64_t v3 = v2[1];
    *(unsigned char *)(*v2 + 161) = 1;
    return (*(uint64_t (**)(void))(**(void **)(v3 + 1904) + 128))();
  }
  return result;
}

uint64_t physx::Sc::ArticulationJointSim::setDirty(physx::Sc::ArticulationJointSim *this)
{
  uint64_t v1 = **(void ***)(*((void *)this + 4) + 368);
  uint64_t v2 = v1[1];
  *(unsigned char *)(*v1 + 161) = 1;
  (*(void (**)(void))(**(void **)(v2 + 1904) + 128))(*(void *)(v2 + 1904));
  uint64_t v3 = *(uint64_t (**)(void))(**(void **)(v1[1] + 1904) + 136);
  return v3();
}

uint64_t physx::Sc::ArticulationJointSim::ArticulationJointSim(uint64_t a1, uint64_t a2, physx::Sc::ArticulationSim **a3, physx::Sc::BodySim *a4)
{
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = -1;
  *(_DWORD *)(a1 + 24) = -1;
  *(_WORD *)(a1 + 28) = 5;
  *(unsigned char *)(a1 + 30) = 0;
  *(void *)(a1 + 32) = a2;
  physx::Sc::activateInteraction((physx::Sc *)a1, 0, a3, (int8x8_t)-1);
  physx::Sc::ActorSim::registerInteractionInActor(*(physx::Sc::ActorSim **)a1, (physx::Sc::Interaction *)a1);
  physx::Sc::ActorSim::registerInteractionInActor(*(physx::Sc::ActorSim **)(a1 + 8), (physx::Sc::Interaction *)a1);
  physx::Sc::ArticulationSim::addBody(a3[24], a4, (physx::Sc::BodySim *)a3, (physx::Sc::ArticulationJointSim *)a1);
  **(void **)(a1 + 32) = a1;
  return a1;
}

void physx::Sc::ArticulationSim::addBody(physx::Sc::ArticulationSim *this, physx::Sc::BodySim *a2, physx::Sc::BodySim *a3, physx::Sc::ArticulationJointSim *a4)
{
  int v47 = a2;
  uint64_t v48 = a4;
  uint64_t v8 = *((unsigned int *)this + 12);
  if ((*((_DWORD *)this + 13) & 0x7FFFFFFFu) <= v8)
  {
    physx::shdfnd::Array<physx::Sc::BodySim *,physx::shdfnd::ReflectionAllocator<physx::Sc::BodySim *>>::growAndPushBack((uint64_t)this + 40, &v47);
  }
  else
  {
    *(void *)(*((void *)this + 5) + 8 * v8) = a2;
    *((_DWORD *)this + 12) = v8 + 1;
  }
  uint64_t v9 = *((unsigned int *)this + 16);
  if ((*((_DWORD *)this + 17) & 0x7FFFFFFFu) <= v9)
  {
    physx::shdfnd::Array<physx::Sc::ArticulationJointSim *,physx::shdfnd::ReflectionAllocator<physx::Sc::ArticulationJointSim *>>::growAndPushBack((uint64_t)this + 56, &v48);
  }
  else
  {
    *(void *)(*((void *)this + 7) + 8 * v9) = a4;
    *((_DWORD *)this + 16) = v9 + 1;
  }
  (*(void (**)(void, physx::Sc::BodySim *))(**(void **)this + 32))(*(void *)this, a2);
  unsigned int v10 = *((_DWORD *)this + 8);
  unsigned int v11 = *((_DWORD *)this + 9) & 0x7FFFFFFF;
  unsigned int v12 = v10;
  if (v11 <= v10)
  {
    if (v11) {
      unsigned int v13 = 2 * *((_DWORD *)this + 9);
    }
    else {
      unsigned int v13 = 1;
    }
    physx::shdfnd::Array<physx::Dy::ArticulationLink,physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationLink>>::recreate((uint64_t)this + 24, v13);
    unsigned int v12 = *((_DWORD *)this + 8);
  }
  uint64_t v14 = *((void *)this + 3);
  *((_DWORD *)this + 8) = v12 + 1;
  __int32 v15 = (void *)(v14 + 40 * v12);
  uint64_t v16 = *((void *)a2 + 10);
  v15[2] = v16 + 16;
  *__int32 v15 = 0;
  uint64_t v17 = *(void *)(v16 + 176);
  if (!v17 || *(unsigned char *)(v17 + 31) == 1) {
    uint64_t v17 = 0;
  }
  if (*(float *)(v16 + 80) != 0.0
    || *(float *)(v16 + 84) != 0.0
    || *(float *)(v16 + 88) != 0.0
    || *(float *)(v16 + 96) != 0.0
    || *(float *)(v16 + 100) != 0.0)
  {
    goto LABEL_44;
  }
  float v18 = *(float *)(v16 + 104);
  BOOL v19 = v18 == 0.0 && (*((unsigned char *)a2 + 182) & 2) == 0;
  if ((*((unsigned char *)a2 + 182) & 2) != 0 && v18 == 0.0)
  {
    if (!v17)
    {
LABEL_74:
      BOOL v20 = 1;
      goto LABEL_45;
    }
    if (*(float *)v17 == 0.0
      && *(float *)(v17 + 4) == 0.0
      && *(float *)(v17 + 8) == 0.0
      && *(float *)(v17 + 16) == 0.0
      && *(float *)(v17 + 20) == 0.0)
    {
      BOOL v19 = *(float *)(v17 + 24) == 0.0;
      goto LABEL_32;
    }
LABEL_44:
    BOOL v20 = 0;
    goto LABEL_45;
  }
LABEL_32:
  BOOL v20 = (*((unsigned char *)a2 + 182) & 4) == 0 && v19;
  if ((*((unsigned char *)a2 + 182) & 4) != 0 && v19)
  {
    if (v17)
    {
      if (*(float *)(v17 + 32) == 0.0
        && *(float *)(v17 + 36) == 0.0
        && *(float *)(v17 + 40) == 0.0
        && *(float *)(v17 + 48) == 0.0
        && *(float *)(v17 + 52) == 0.0)
      {
        BOOL v20 = *(float *)(v17 + 56) == 0.0;
        goto LABEL_45;
      }
      goto LABEL_44;
    }
    goto LABEL_74;
  }
LABEL_45:
  float v21 = *(float *)(*((void *)this + 2) + 36);
  if (a3)
  {
    uint64_t v22 = *((void *)this + 5);
    unsigned int v23 = *(_DWORD *)(*(void *)v22 + 184);
    char v24 = (v23 != -3) & __CFADD__(v23, 3);
    BOOL v25 = v23 > 0xFFFFFFFD;
    if (v24) {
      BOOL v26 = v20;
    }
    else {
      BOOL v26 = 0;
    }
    uint64_t v27 = *((unsigned int *)this + 12);
    if (v27)
    {
      uint64_t v28 = 0;
      while (*(physx::Sc::BodySim **)(v22 + 8 * v28) != a3)
      {
        if (v27 == ++v28) {
          goto LABEL_53;
        }
      }
    }
    else
    {
LABEL_53:
      LODWORD(v28) = 0x80000000;
    }
    uint64_t v29 = v14 + 40 * v12;
    *(_DWORD *)(v29 + 32) = v28;
    atomic_uint v30 = (uint64_t *)(v14 + 40 * v28);
    uint64_t v31 = *v30;
    unint64_t v32 = v30[1] | (1 << v10);
    *(void *)(v29 + 8) = v32;
    *(void *)(v29 + 24) = *((void *)a4 + 4) + 8;
    *atomic_uint v30 = v31 | (1 << v10);
  }
  else
  {
    BOOL v25 = v21 == 0.0;
    BOOL v26 = v21 == 0.0 && v20;
    uint64_t v33 = v14 + 40 * v12;
    *(_DWORD *)(v33 + 32) = -1;
    unint64_t v32 = 1;
    *(void *)(v33 + 8) = 1;
    *(void *)(v33 + 24) = 0;
  }
  int8x8_t v34 = (int8x8_t)HIDWORD(v32);
  uint8x8_t v35 = (uint8x8_t)vcnt_s8((int8x8_t)v32);
  v35.i16[0] = vaddlv_u8(v35);
  __int32 v36 = v35.i32[0];
  int8x8_t v37 = vcnt_s8(v34);
  v37.i16[0] = vaddlv_u8((uint8x8_t)v37);
  unsigned __int32 v38 = v37.i32[0] + v36;
  if (v38 <= *((_DWORD *)this + 24)) {
    unsigned __int32 v38 = *((_DWORD *)this + 24);
  }
  *((_DWORD *)this + 24) = v38;
  *(_DWORD *)(*(void *)this + 164) = v38;
  if (v25 && !v26 && *((_DWORD *)this + 12) != 1)
  {
    unint64_t v39 = 0;
    do
      physx::Sc::BodySim::internalWakeUpArticulationLink(*(void *)(*((void *)this + 5) + 8 * v39++), v21);
    while (v39 < (*((_DWORD *)this + 12) - 1));
    uint64_t v16 = *((void *)a2 + 10);
  }
  *((void *)a2 + 24) = this;
  unsigned int v40 = *((_DWORD *)this + 18) & 0xFFFFFF80 | (2 * v10);
  *((_DWORD *)a2 + 44) = v40 | 1;
  *(float *)(v16 + 156) = v21;
  if ((*(unsigned char *)(v16 + 44) & 0x20) != 0)
  {
    uint64_t v41 = *((void *)a2 + 9);
    physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v41 + 7632, (v40 >> 7) + 1);
    *(_DWORD *)(*(void *)(v41 + 7632) + 4 * (v40 >> 12)) |= 1 << (v40 >> 7);
  }
  if (v26)
  {
    unsigned int v42 = *((_DWORD *)a2 + 44);
    if (!*((void *)a2 + 24))
    {
      uint64_t v43 = *(void *)(*((void *)a2 + 9) + 1880);
      physx::IG::IslandSim::deactivateNode(v43 + 224, *((_DWORD *)a2 + 44));
      physx::IG::IslandSim::deactivateNode(v43 + 864, v42);
      unsigned int v42 = *((_DWORD *)a2 + 44);
    }
    physx::IG::SimpleIslandManager::putNodeToSleep(*(void *)(*((void *)a2 + 9) + 1880), v42);
    physx::Sc::BodySim::setActive(a2, 0, 0, v44);
  }
  else
  {
    physx::Sc::BodySim::setActive(a2, (physx::Sc::Interaction *)1, 0, v37);
    uint64_t v45 = *(void *)(*((void *)a2 + 9) + 1880);
    unsigned int v46 = *((_DWORD *)a2 + 44);
    physx::IG::IslandSim::activateNode(v45 + 224, v46);
    physx::IG::IslandSim::activateNode(v45 + 864, v46);
  }
}

void physx::Sc::ArticulationJointSim::~ArticulationJointSim(physx::Sc::ArticulationJointSim *this)
{
  **((void **)this + 4) = 0;
}

uint64_t physx::Sc::ArticulationSim::removeBody(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 48);
  if (v2)
  {
    unint64_t v3 = 0;
    while (*(void *)(*(void *)(a1 + 40) + 8 * v3) != a2)
    {
      if (v2 == ++v3) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    LODWORD(v3) = 0x80000000;
  }
  *(void *)(a2 + 192) = 0;
  *(_DWORD *)(a2 + 176) = -125;
  uint64_t v4 = v3;
  unsigned int v5 = v3 + 1;
  LODWORD(v3) = *(_DWORD *)(a1 + 32);
  if (v5 < v3)
  {
    unint64_t v6 = v4 + 1;
    uint64_t v7 = 40 * v4 + 40;
    do
    {
      uint64_t v8 = *(void *)(a1 + 24);
      uint64_t v9 = (long long *)(v8 + v7);
      uint64_t v10 = v8 + 40 * (v6 - 1);
      long long v11 = *v9;
      long long v12 = v9[1];
      *(void *)(v10 + 32) = *((void *)v9 + 4);
      *(_OWORD *)uint64_t v10 = v11;
      *(_OWORD *)(v10 + 16) = v12;
      *(void *)(*(void *)(a1 + 40) + 8 * (v6 - physx::Sc::ArticulationSim::removeBody(*(void *)(*((void *)this + 1) + 192), *((void *)this + 1)) = *(void *)(*(void *)(a1 + 40) + 8 * v6);
      *(void *)(*(void *)(a1 + 56) + 8 * (v6 - physx::Sc::ArticulationSim::removeBody(*(void *)(*((void *)this + 1) + 192), *((void *)this + 1)) = *(void *)(*(void *)(a1 + 56) + 8 * v6);
      ++v6;
      unint64_t v3 = *(unsigned int *)(a1 + 32);
      v7 += 40;
    }
    while (v6 < v3);
  }
  *(_DWORD *)(a1 + 96) = 0;
  unsigned __int32 v13 = 0;
  if (v3)
  {
    uint64_t v14 = (1 << v4) - 1;
    uint64_t v15 = ~(v14 | (1 << v4));
    uint64_t v16 = *(void *)(a1 + 24);
    uint64_t v17 = v3;
    do
    {
      unsigned int v18 = *(_DWORD *)(v16 + 32);
      unint64_t v19 = *(void *)(v16 + 8);
      if (v18 != -1 && v18 > v4)
      {
        unint64_t v19 = v19 & v14 | ((v19 & v15) >> 1);
        *(void *)(v16 + 8) = v19;
      }
      *(void *)uint64_t v16 = *(void *)v16 & v14 | ((*(void *)v16 & (unint64_t)v15) >> 1);
      v16 += 40;
      int8x8_t v21 = (int8x8_t)HIDWORD(v19);
      uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
      v22.i16[0] = vaddlv_u8(v22);
      __int32 v23 = v22.i32[0];
      uint8x8_t v24 = (uint8x8_t)vcnt_s8(v21);
      v24.i16[0] = vaddlv_u8(v24);
      unsigned __int32 v25 = v24.i32[0] + v23;
      if (v25 > v13) {
        unsigned __int32 v13 = v25;
      }
      --v17;
    }
    while (v17);
    *(_DWORD *)(a1 + 96) = v13;
  }
  *(_DWORD *)(a1 + 32) = v3 - 1;
  --*(_DWORD *)(a1 + 48);
  --*(_DWORD *)(a1 + 64);
  BOOL v26 = *(_DWORD **)a1;
  v26[41] = v13;
  return (*(uint64_t (**)(void))(*(void *)v26 + 40))();
}

physx::Sc::ArticulationSim *physx::Sc::ArticulationSim::ArticulationSim(physx::Sc::ArticulationSim *this, physx::Sc::ArticulationCore *a2, physx::IG::SimpleIslandManager **a3, physx::Sc::BodySim **a4)
{
  *(void *)this = 0;
  *((void *)this + 1) = a3;
  *((void *)this + 2) = a2;
  *(_OWORD *)((char *)this + 40) = 0u;
  uint64_t v8 = (char *)this + 40;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = -128;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  physx::shdfnd::Array<physx::Dy::ArticulationLink,physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationLink>>::recreate((uint64_t)this + 24, 0x10u);
  if ((*((_DWORD *)this + 17) & 0x7FFFFFF0) == 0) {
    physx::shdfnd::Array<physx::Sc::ArticulationJointSim *,physx::shdfnd::ReflectionAllocator<physx::Sc::ArticulationJointSim *>>::recreate((uint64_t)this + 56, 0x10u);
  }
  if ((*((_DWORD *)this + 13) & 0x7FFFFFF0) == 0) {
    physx::shdfnd::Array<physx::Sc::BodySim *,physx::shdfnd::ReflectionAllocator<physx::Sc::BodySim *>>::recreate((uint64_t)v8, 0x10u);
  }
  physx::Sc::Scene::createLLArticulation(*((physx::Sc::Scene **)this + 1), this);
  *(void *)this = v9;
  *((_DWORD *)this + 18) = physx::IG::SimpleIslandManager::addArticulation(a3[235], this, v9, 0);
  if (*(void *)this)
  {
    *(unsigned char *)(*(void *)this + 161) = 1;
    physx::Sc::ArticulationSim::addBody(this, *a4, 0, 0);
    **((void **)this + 2) = this;
    uint64_t v13 = *(void *)this;
    *(void *)(v13 + 32) = *(void *)(*((void *)this + 1) + 1888);
    *(_OWORD *)(v13 + 48) = 0u;
    *(_OWORD *)(v13 + 64) = 0u;
    *(_OWORD *)(v13 + 80) = 0u;
    *(_OWORD *)(v13 + 96) = 0u;
    *(void *)(v13 + 112) = (char *)a2 + 8;
    *(void *)(v13 + 120) = 0;
    *(void *)(v13 + 128) = 0;
    *(void *)(v13 + 136) = 0;
  }
  else
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScArticulationSim.cpp", 71, "Articulation: could not allocate low-level resources.", v10, v11, v12, v15);
  }
  return this;
}

void physx::Sc::ArticulationSim::~ArticulationSim(physx::Sc::ArticulationSim *this)
{
  uint64_t v2 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v3 = 4352;
    if (*(_DWORD *)(v2 + 40) == 1) {
      uint64_t v3 = 4344;
    }
    uint64_t v4 = *(void *)(*((void *)this + 1) + v3);
    (**(void (***)(void))v2)(*(void *)this);
    --*(_DWORD *)(v4 + 548);
    uint64_t v5 = *(void *)(v4 + 560);
    *(void *)(v4 + 560) = v2;
    *(void *)uint64_t v2 = v5;
    physx::IG::SimpleIslandManager::removeNode(*(void *)(*((void *)this + 1) + 1880), *((_DWORD *)this + 18));
    **((void **)this + 2) = 0;
  }
  int v6 = *((_DWORD *)this + 23);
  if ((v6 & 0x80000000) == 0 && (v6 & 0x7FFFFFFF) != 0 && *((void *)this + 10) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v8 = *((_DWORD *)this + 17);
  if ((v8 & 0x80000000) == 0 && (v8 & 0x7FFFFFFF) != 0 && *((void *)this + 7) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v10 = *((_DWORD *)this + 13);
  if ((v10 & 0x80000000) == 0 && (v10 & 0x7FFFFFFF) != 0 && *((void *)this + 5)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v11 = *((_DWORD *)this + 9);
  if ((v11 & 0x80000000) == 0 && (v11 & 0x7FFFFFFF) != 0)
  {
    if (*((void *)this + 3)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
}

uint64_t physx::Sc::ArticulationSim::addLoopConstraint(uint64_t this, physx::Sc::ConstraintSim *a2)
{
  uint64_t v3 = *((void *)a2 + 13);
  uint64_t v2 = *((void *)a2 + 14);
  if (v3 && (uint64_t v4 = *(unsigned int *)(this + 48), v4))
  {
    uint64_t v5 = 0;
    while (*(void *)(*(void *)(this + 40) + 8 * v5) != v3)
    {
      if (v4 == ++v5) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    LODWORD(v5) = 0x80000000;
  }
  LODWORD(v9) = v5;
  if (v2 && (uint64_t v6 = *(unsigned int *)(this + 48), v6))
  {
    uint64_t v7 = 0;
    while (*(void *)(*(void *)(this + 40) + 8 * v7) != v2)
    {
      if (v6 == ++v7) {
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    LODWORD(v7) = 0x80000000;
  }
  DWORD1(v9) = v7;
  *((void *)&v9 + 1) = a2;
  uint64_t v8 = *(unsigned int *)(this + 88);
  if ((*(_DWORD *)(this + 92) & 0x7FFFFFFFu) <= v8) {
    return physx::shdfnd::Array<physx::Dy::ArticulationLoopConstraint,physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationLoopConstraint>>::growAndPushBack(this + 80, &v9);
  }
  *(_OWORD *)(*(void *)(this + 80) + 16 * v8) = v9;
  ++*(_DWORD *)(this + 88);
  return this;
}

void physx::Sc::BodySim::updateCached(uint64_t a1, void *a2)
{
  if ((*(_WORD *)(a1 + 124) & 1) == 0)
  {
    for (uint64_t i = *(void **)(a1 + 56); i; uint64_t i = (void *)*i)
      physx::Sc::ShapeSim::updateCached((uint64_t)i, 0, a2);
  }
}

void physx::Sc::ArticulationSim::markShapesUpdated(uint64_t a1, void *a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 48);
  if (v2)
  {
    for (unint64_t i = 0; i < v2; ++i)
    {
      uint64_t v6 = *(uint64_t ***)(*(void *)(*(void *)(a1 + 40) + 8 * i) + 56);
      if (v6)
      {
        do
        {
          unint64_t v7 = *((unsigned int *)v6 + 4);
          if ((v7 & 0x80000000) != 0)
          {
            physx::Cm::BitMapBase<physx::shdfnd::VirtualAllocator>::extend((uint64_t)a2, (v7 & 0x7FFFFFFF) + 1);
            *(_DWORD *)(*a2 + ((v7 >> 3) & 0xFFFFFFC)) |= 1 << v7;
          }
          uint64_t v6 = (uint64_t **)*v6;
        }
        while (v6);
        unint64_t v2 = *(unsigned int *)(a1 + 48);
      }
    }
  }
}

void physx::Sc::BodySim::updateContactDistance(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4 = *(void *)(a1 + 136);
  if ((*(unsigned char *)(v4 + 28) & 0x20) != 0 && (*(_WORD *)(a1 + 124) & 1) == 0)
  {
    uint64_t v5 = *(void **)(a1 + 56);
    if (v5)
    {
      uint64_t v9 = *(void *)(v4 + 80);
      int v10 = *(_DWORD *)(v4 + 88);
      float v11 = sqrtf((float)((float)(*(float *)(v4 + 68) * *(float *)(v4 + 68))+ (float)(*(float *)(v4 + 64) * *(float *)(v4 + 64)))+ (float)(*(float *)(v4 + 72) * *(float *)(v4 + 72)))* a4;
      do
      {
        uint64_t v12 = v9;
        int v13 = v10;
        physx::Sc::ShapeSim::updateContactDistance((uint64_t)v5, a2, (float *)&v12, a3, v11, a4);
        uint64_t v5 = (void *)*v5;
      }
      while (v5);
    }
  }
}

uint64_t physx::Sc::BodySim::internalWakeUpArticulationLink(uint64_t this, float a2)
{
  uint64_t v2 = *(void *)(this + 80);
  if ((*(unsigned char *)(v2 + 44) & 1) == 0 && *(float *)(v2 + 156) < a2)
  {
    uint64_t v3 = this;
    *(float *)(v2 + 156) = a2;
    *(double *)&int8x8_t v4 = (*(double (**)(void, BOOL, uint64_t))(**(void **)(*(void *)(this + 72) + 1904)
                                                                     + 88))(*(void *)(*(void *)(this + 72) + 1904), *(unsigned char *)(v2 + 13) == 2, this + 176);
    physx::Sc::BodySim::setActive((physx::Sc::BodySim *)v3, (physx::Sc::Interaction *)1, 0, v4);
    uint64_t v5 = *(void *)(*(void *)(v3 + 72) + 1880);
    unsigned int v6 = *(_DWORD *)(v3 + 176);
    physx::IG::IslandSim::activateNode(v5 + 224, v6);
    this = physx::IG::IslandSim::activateNode(v5 + 864, v6);
    *(_WORD *)(v3 + 124) &= ~1u;
  }
  return this;
}

void *physx::Sc::ArticulationSim::checkResize(void *this)
{
  if (*((_DWORD *)this + 12))
  {
    uint64_t v1 = *this;
    uint64_t v2 = *((unsigned int *)this + 8);
    uint64_t v3 = this[3];
    (*(void (**)(void, uint64_t))(*(void *)*this + 24))(*this, v2);
    *(void *)(v1 + 56) = v3;
    *(unsigned char *)(v1 + 140) = v2;
    int8x8_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 16);
    return (void *)v4(v1);
  }
  return this;
}

void *physx::Sc::ArticulationSim::sleepCheck(void *this, float a2)
{
  if (!*((_DWORD *)this + 12)) {
    return this;
  }
  uint64_t v2 = (uint64_t)this;
  if (*(_DWORD *)(*(void *)this[5] + 184) > 0xFFFFFFFD) {
    return this;
  }
  uint64_t v3 = this[2];
  if (!*((_DWORD *)this + 8))
  {
    *(_DWORD *)(v3 + 36) = 0;
LABEL_59:
    uint64_t v51 = *(void *)(*(void *)(v2 + 8) + 1880);
    unsigned int v52 = *(_DWORD *)(v2 + 72);
    physx::IG::IslandSim::deactivateNode(v51 + 224, v52);
    return (void *)physx::IG::IslandSim::deactivateNode(v51 + 864, v52);
  }
  unint64_t v5 = 0;
  float v6 = *(float *)(v3 + 28);
  float v7 = 3.4028e38;
  float v8 = 0.0;
  do
  {
    this = (*(void *(**)(float32x2_t *__return_ptr))(**(void **)v2 + 360))(&v53);
    uint64_t v9 = *(float32x2_t **)(*(void *)(v2 + 40) + 8 * v5);
    float32x2_t v10 = v9[10];
    float v11 = *(float *)(*(void *)&v10 + 156);
    float32x2_t v12 = v9[18];
    float v13 = v9[19].f32[0];
    float v14 = v9[20].f32[0];
    float v15 = v9[20].f32[1];
    float v16 = v9[21].f32[0];
    if (v11 >= 0.2 && v11 >= a2) {
      goto LABEL_30;
    }
    uint64_t v18 = *(void *)(*(void *)&v10 + 176);
    if (v18 && *(unsigned char *)(v18 + 31) == 1) {
      unint64_t v19 = (float *)(v18 + 32);
    }
    else {
      unint64_t v19 = (float *)(*(void *)&v10 + 128);
    }
    float v20 = v19[1];
    float v21 = v19[2];
    if (*v19 <= 0.0) {
      float v22 = 1.0;
    }
    else {
      float v22 = 1.0 / *v19;
    }
    if (v20 <= 0.0) {
      float v23 = 1.0;
    }
    else {
      float v23 = 1.0 / v20;
    }
    if (v21 <= 0.0) {
      float v24 = 1.0;
    }
    else {
      float v24 = 1.0 / v21;
    }
    if (v18 && *(unsigned char *)(v18 + 31) == 1) {
      unsigned __int32 v25 = (float *)(v18 + 44);
    }
    else {
      unsigned __int32 v25 = (float *)(*(void *)&v10 + 140);
    }
    float v27 = *(float *)(*(void *)&v10 + 24);
    float v26 = *(float *)(*(void *)&v10 + 28);
    float v28 = (float)(v26 * v26) + -0.5;
    float v29 = *(float *)(*(void *)&v10 + 16);
    float v30 = *(float *)(*(void *)&v10 + 20);
    float v31 = (float)((float)((float)(v56 + v56) * v30) + (float)(v29 * (float)(v55 + v55)))
        + (float)(v27 * (float)(v57 + v57));
    float32x2_t v12 = vadd_f32(v12, v53);
    float v13 = v13 + v54;
    float v14 = v14
        + (float)((float)((float)((float)(v55 + v55) * v28)
                        - (float)((float)((float)(v30 * (float)(v57 + v57)) - (float)(v27 * (float)(v56 + v56))) * v26))
                + (float)(v29 * v31));
    float v15 = v15
        + (float)((float)((float)((float)(v56 + v56) * v28)
                        - (float)((float)((float)(v27 * (float)(v55 + v55)) - (float)(v29 * (float)(v57 + v57))) * v26))
                + (float)(v30 * v31));
    float v16 = v16
        + (float)((float)((float)((float)(v57 + v57) * v28)
                        - (float)((float)((float)(v29 * (float)(v56 + v56)) - (float)(v30 * (float)(v55 + v55))) * v26))
                + (float)(v27 * v31));
    float v32 = *v25;
    if (*v25 == 0.0) {
      float v32 = 1.0;
    }
    float v33 = (float)((float)(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v12, v12).i32[1]), v12.f32[0], v12.f32[0])
                        + (float)(v13 * v13))
                + (float)((float)((float)((float)(v23 * (float)(v15 * v15)) + (float)((float)(v14 * v14) * v22))
                                + (float)((float)(v16 * v16) * v24))
                        * v32))
        * 0.5;
    float v34 = (float)(*(_DWORD *)(*(void *)&v9[17] + 148) + 1);
    float v35 = v6 * v34;
    if (v33 >= (float)(v6 * v34))
    {
      v9[20] = 0;
      v9[21].i32[0] = 0;
      float v38 = 1.0;
      v9[18] = 0;
      v9[19].i32[0] = 0;
      if (v35 != 0.0)
      {
        if ((float)(v33 / v35) >= 2.0) {
          float v38 = 1.0;
        }
        else {
          float v38 = (float)(v33 / v35) * 0.5;
        }
      }
      float v36 = (float)((float)(v34 + -1.0) * a2) + (float)(v38 * 0.4);
      *(float *)(*(void *)&v10 + 156) = v36;
      if (v11 == 0.0)
      {
        uint64_t v39 = *(void *)(*(void *)&v9[9] + 1880);
        unsigned int v40 = v9[22].u32[0];
        physx::IG::IslandSim::activateNode(v39 + 224, v40);
        this = (void *)physx::IG::IslandSim::activateNode(v39 + 864, v40);
      }
    }
    else
    {
LABEL_30:
      v9[18] = v12;
      v9[19].f32[0] = v13;
      v9[20].f32[0] = v14;
      v9[20].f32[1] = v15;
      v9[21].f32[0] = v16;
      float v36 = fmaxf(v11 - a2, 0.0);
      *(float *)(*(void *)&v10 + 156) = v36;
    }
    if (v8 <= v36) {
      float v8 = v36;
    }
    if (v7 >= v36) {
      float v7 = v36;
    }
    ++v5;
    unint64_t v37 = *(unsigned int *)(v2 + 32);
  }
  while (v5 < v37);
  *(float *)(*(void *)(v2 + 16) + 36) = v8;
  if (v8 == 0.0)
  {
    if (v37)
    {
      unint64_t v46 = 0;
      uint64_t v47 = *(void *)(v2 + 40);
      do
      {
        uint64_t v48 = *(void *)(v47 + 8 * v46);
        if (!*(void *)(v48 + 192))
        {
          uint64_t v49 = *(void *)(*(void *)(v48 + 72) + 1880);
          unsigned int v50 = *(_DWORD *)(v48 + 176);
          physx::IG::IslandSim::deactivateNode(v49 + 224, v50);
          physx::IG::IslandSim::deactivateNode(v49 + 864, v50);
          uint64_t v47 = *(void *)(v2 + 40);
          unint64_t v37 = *(unsigned int *)(v2 + 32);
          uint64_t v48 = *(void *)(v47 + 8 * v46);
        }
        *(void *)(v48 + 160) = 0;
        *(_DWORD *)(v48 + 168) = 0;
        *(void *)(v48 + 144) = 0;
        *(_DWORD *)(v48 + 152) = 0;
        ++v46;
      }
      while (v46 < v37);
    }
    goto LABEL_59;
  }
  if (v7 == 0.0 && v37 != 0)
  {
    unsigned int v42 = *(uint64_t **)(v2 + 40);
    do
    {
      uint64_t v43 = *v42++;
      uint64_t v44 = *(void *)(v43 + 80);
      float v45 = *(float *)(v44 + 156);
      if (v45 < 0.000001) {
        float v45 = 0.000001;
      }
      *(float *)(v44 + 156) = v45;
      --v37;
    }
    while (v37);
  }
  return this;
}

uint64_t physx::Sc::BodySim::notifyReadyForSleeping(uint64_t this)
{
  if (!*(void *)(this + 192))
  {
    uint64_t v1 = *(void *)(*(void *)(this + 72) + 1880);
    unsigned int v2 = *(_DWORD *)(this + 176);
    physx::IG::IslandSim::deactivateNode(v1 + 224, v2);
    return physx::IG::IslandSim::deactivateNode(v1 + 864, v2);
  }
  return this;
}

uint64_t physx::Sc::ArticulationSim::internalWakeUp(uint64_t this, float a2)
{
  uint64_t v3 = *(void *)(this + 16);
  if (*(float *)(v3 + 36) < a2)
  {
    uint64_t v4 = this;
    *(float *)(v3 + 36) = a2;
    if (*(_DWORD *)(this + 32))
    {
      unint64_t v5 = 0;
      do
        this = physx::Sc::BodySim::internalWakeUpArticulationLink(*(void *)(*(void *)(v4 + 40) + 8 * v5++), a2);
      while (v5 < *(unsigned int *)(v4 + 32));
    }
  }
  return this;
}

void physx::Sc::ArticulationSim::setActive(physx::Sc::ArticulationSim *this, physx::Sc::Interaction *a2, char a3, int8x8_t a4)
{
  unint64_t v4 = *((unsigned int *)this + 12);
  if (v4)
  {
    unint64_t v8 = 0;
    do
    {
      unint64_t v9 = v8 + 1;
      uint64_t v10 = *((void *)this + 5);
      if (v8 + 1 < v4)
      {
        _X8 = *(void *)(v10 + 8 * v8 + 8);
        __asm
        {
          PRFM            #0, [X8]
          PRFM            #0, [X8,#0x80]
        }
      }
      physx::Sc::BodySim::setActive(*(physx::Sc::BodySim **)(v10 + 8 * v8), a2, a3, a4);
      unint64_t v4 = *((unsigned int *)this + 12);
      unint64_t v8 = v9;
    }
    while (v9 < v4);
  }
}

void physx::Sc::BodySim::setActive(physx::Sc::BodySim *this, physx::Sc::Interaction *a2, char a3, int8x8_t a4)
{
  if (a3)
  {
    if (a2) {
      goto LABEL_6;
    }
  }
  else
  {
    if (*((_DWORD *)this + 46) < 0xFFFFFFFE == a2) {
      return;
    }
    uint64_t v5 = *((void *)this + 9);
    if (a2)
    {
      physx::Sc::Scene::addToActiveBodyList(v5, this);
LABEL_6:
      physx::Sc::BodySim::activate(this, a4);
      return;
    }
    physx::Sc::Scene::removeFromActiveBodyList(v5, this);
  }
  physx::Sc::BodySim::deactivate((uint64_t)this, a2, a4);
}

unsigned int *physx::Sc::ArticulationSim::updateForces(unsigned int *this, float a2, int a3)
{
  int v18 = 0;
  unint64_t v3 = this[12];
  if (v3)
  {
    float v6 = this;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      unint64_t v9 = v8 + 1;
      uint64_t v10 = *((void *)v6 + 5);
      if (v8 + 1 < v3)
      {
        _X8 = *(void *)(v10 + 8 * v8 + 8);
        __asm
        {
          PRFM            #0, [X8,#0x80]
          PRFM            #0, [X8,#0x100]
        }
      }
      this = (unsigned int *)physx::Sc::BodySim::updateForces(*(void *)(v10 + 8 * v8), 0, 0, &v18, (float *)(*(void *)(*(void *)v6 + 72) + v7), *(_DWORD *)(*(void *)v6 + 40) == 0, a3, a2);
      unint64_t v3 = v6[12];
      v7 += 32;
      unint64_t v8 = v9;
    }
    while (v9 < v3);
  }
  return this;
}

uint64_t physx::Sc::BodySim::updateForces(uint64_t result, uint64_t a2, uint64_t a3, _DWORD *a4, float *a5, int a6, int a7, float a8)
{
  char v8 = *(unsigned char *)(result + 182);
  if ((v8 & 6) == 0) {
    goto LABEL_18;
  }
  unint64_t v9 = *(float32x2_t **)(*(void *)(result + 80) + 176);
  if (!v9 || v9[3].i8[7] == 1) {
    goto LABEL_18;
  }
  if (a2)
  {
    uint64_t v10 = *a4;
    *(void *)(a2 + 8 * v10) = result + 96;
    int v11 = *(_DWORD *)(result + 176) >> 7;
    *a4 = v10 + 1;
    *(_DWORD *)(a3 + 4 * v10) = v11;
  }
  if ((v8 & 4) == 0) {
    goto LABEL_9;
  }
  float32x2_t v12 = v9[4];
  float v13 = v9[5].f32[0];
  float32x2_t v14 = v9[6];
  float v15 = v9[7].f32[0];
  if (a6)
  {
    *a5 = (float)(1.0 / a8) * v12.f32[0];
    a5[1] = vmuls_lane_f32(1.0 / a8, v12, 1);
    a5[2] = (float)(1.0 / a8) * v13;
    a5[4] = (float)(1.0 / a8) * v14.f32[0];
    a5[5] = vmuls_lane_f32(1.0 / a8, v14, 1);
    a5[6] = (float)(1.0 / a8) * v15;
LABEL_9:
    if ((v8 & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }
  float v16 = *(float32x2_t **)(result + 80);
  v16[10] = vadd_f32(v12, v16[10]);
  v16[11].f32[0] = v13 + v16[11].f32[0];
  v16[12] = vadd_f32(v14, v16[12]);
  v16[13].f32[0] = v15 + v16[13].f32[0];
  if ((v8 & 2) == 0) {
    goto LABEL_18;
  }
LABEL_12:
  float32x2_t v17 = *v9;
  float v18 = v9[1].f32[0];
  float32x2_t v19 = v9[2];
  float v20 = v9[3].f32[0];
  if (a5)
  {
    *(float32x2_t *)a5 = v17;
    a5[2] = v18;
    *((float32x2_t *)a5 + 2) = v19;
    a5[6] = v20;
  }
  else
  {
    if (a7
      && *(_DWORD *)(*(void *)(*(void *)(*(void *)(result + 72) + 1880) + 360)
                   + 4
                   * *(unsigned int *)(*(void *)(*(void *)(*(void *)(result + 72) + 1880) + 496)
                                     + (((unint64_t)*(unsigned int *)(result + 176) >> 5) & 0x7FFFFFC))))
    {
      a8 = *(float *)(result + 172) * a8;
    }
    float v21 = *(float32x2_t **)(result + 80);
    v21[10] = vadd_f32(vmul_n_f32(v17, a8), v21[10]);
    v21[11].f32[0] = (float)(v18 * a8) + v21[11].f32[0];
    v21[12] = vadd_f32(vmul_n_f32(v19, a8), v21[12]);
    v21[13].f32[0] = (float)(v20 * a8) + v21[13].f32[0];
  }
LABEL_18:
  uint64_t v22 = *(void *)(*(void *)(result + 80) + 176);
  if (*(char *)(*(void *)(result + 136) + 28) < 0)
  {
    if (v22 && *(unsigned char *)(v22 + 31) != 1)
    {
      *(void *)(v22 + 48) = 0;
      *(_DWORD *)(v22 + 56) = 0;
      *(void *)(v22 + 32) = 0;
      *(_DWORD *)(v22 + 40) = 0;
    }
    LOBYTE(v23) = v8 & 0xFB;
  }
  else
  {
    if (v22 && *(unsigned char *)(v22 + 31) != 1)
    {
      *(void *)(v22 + 48) = 0;
      *(_DWORD *)(v22 + 56) = 0;
      *(void *)(v22 + 32) = 0;
      *(_DWORD *)(v22 + 40) = 0;
      *(void *)(v22 + 16) = 0;
      *(_DWORD *)(v22 + 24) = 0;
      *(void *)uint64_t v22 = 0;
      *(_DWORD *)(v22 + 8) = 0;
    }
    int v23 = (v8 & 2) >> 1;
  }
  *(unsigned char *)(result + 182) = v23;
  return result;
}

float physx::Sc::ArticulationSim::saveLastCCDTransform(physx::Sc::ArticulationSim *this)
{
  unint64_t v1 = *((unsigned int *)this + 12);
  if (v1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = *((void *)this + 5);
    do
    {
      uint64_t v4 = v2 + 1;
      if (v2 + 1 < v1)
      {
        _X12 = *(void *)(v3 + 8 * v2 + 8);
        __asm
        {
          PRFM            #0, [X12,#0x80]
          PRFM            #0, [X12,#0x100]
        }
      }
      uint64_t v12 = *(void *)(v3 + 8 * v2);
      uint64_t v13 = *(void *)(v12 + 136);
      *(_OWORD *)(v12 + 96) = *(_OWORD *)v13;
      *(void *)(v12 + 112) = *(void *)(v13 + 16);
      float result = *(float *)(v13 + 24);
      *(float *)(v12 + 120) = result;
      uint64_t v2 = v4;
    }
    while (v1 != v4);
  }
  return result;
}

float32x2_t physx::Sc::BodyCore::BodyCore(uint64_t a1, int a2, uint64_t a3)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0xFFFFFF;
  *(unsigned char *)(a1 + 12) = 1;
  *(unsigned char *)(a1 + 13) = a2;
  *(unsigned char *)(a1 + 14) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  *(_WORD *)(a1 + 174) = 0;
  *(void *)(a1 + 176) = 0;
  float v3 = *(float *)(physx::Sc::Physics::mInstance + 4);
  float v4 = *(float *)physx::Sc::Physics::mInstance * (float)(*(float *)physx::Sc::Physics::mInstance * 10000.0);
  int v5 = dword_234420568[a2 == 1];
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a3;
  *(void *)(a1 + 32) = *(void *)(a3 + 16);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a3 + 24);
  *(_DWORD *)(a1 + 44) = 17039616;
  *(_OWORD *)(a1 + 48) = xmmword_23435FBB0;
  *(_OWORD *)(a1 + 64) = xmmword_2344205B0;
  *(_OWORD *)(a1 + 80) = xmmword_2344205C0;
  *(_OWORD *)(a1 + 96) = xmmword_23441F6B0;
  *(_DWORD *)(a1 + 112) = v5;
  float v6 = (const float *)&dword_234366B8C;
  int8x8_t v7 = (int8x8_t)vld1_dup_f32(v6);
  *(float *)v7.i32 = v4;
  *(int8x8_t *)(a1 + 116) = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(a2 == 1), 0x1FuLL)), (int8x8_t)1956496814, v7);
  *(_OWORD *)(a1 + 124) = xmmword_2344205D0;
  *(void *)(a1 + 140) = 0x749DC5AE3F800000;
  float32x2_t result = vmul_n_f32(vmul_n_f32((float32x2_t)0x37D1B7173851B717, v3), v3);
  *(float32x2_t *)(a1 + 148) = result;
  *(_DWORD *)(a1 + 156) = 1053609164;
  *(_WORD *)(a1 + 172) = 0;
  *(unsigned char *)(a1 + 174) = 0;
  return result;
}

uint64_t physx::Sc::BodyCore::setBody2World(uint64_t result, uint64_t a2)
{
  *(_OWORD *)(result + 16) = *(_OWORD *)a2;
  *(void *)(result + 32) = *(void *)(a2 + 16);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 24);
  uint64_t v2 = *(physx::Sc::BodySim **)result;
  if (*(void *)result)
  {
    physx::Sc::BodySim::postBody2WorldChange(*(physx::Sc::BodySim **)result);
    BOOL v3 = *(unsigned __int8 *)(*((void *)v2 + 10) + 13) == 2;
    uint64_t v4 = *(void *)(*((void *)v2 + 9) + 1904);
    int v5 = *((_DWORD *)v2 + 44);
    return (*(uint64_t (**)(uint64_t, BOOL, int *))(*(void *)v4 + 88))(v4, v3, &v5);
  }
  return result;
}

uint64_t physx::Sc::BodySim::postBody2WorldChange(physx::Sc::BodySim *this)
{
  uint64_t v1 = *((void *)this + 17);
  *((_OWORD *)this + 6) = *(_OWORD *)v1;
  *((void *)this + 14) = *(void *)(v1 + 16);
  *((_DWORD *)this + 30) = *(_DWORD *)(v1 + 24);
  return physx::Sc::RigidSim::notifyShapesOfTransformChange(this);
}

uint64_t *updateBodySim(uint64_t *result)
{
  uint64_t v1 = *result;
  if (*result)
  {
    BOOL v2 = *(unsigned __int8 *)(*(void *)(v1 + 80) + 13) == 2;
    uint64_t v3 = *(void *)(*(void *)(v1 + 72) + 1904);
    int v4 = *(_DWORD *)(v1 + 176);
    return (uint64_t *)(*(uint64_t (**)(uint64_t, BOOL, int *))(*(void *)v3 + 88))(v3, v2, &v4);
  }
  return result;
}

uint64_t physx::Sc::BodyCore::setBody2Actor(uint64_t result, float *a2)
{
  float v2 = a2[4];
  float v3 = a2[5];
  BOOL v4 = v2 == 0.0;
  if (v3 != 0.0) {
    BOOL v4 = 0;
  }
  float v5 = a2[6];
  if (v5 != 0.0) {
    BOOL v4 = 0;
  }
  float v6 = *a2;
  float v7 = a2[1];
  if (*a2 != 0.0) {
    BOOL v4 = 0;
  }
  if (v7 != 0.0) {
    BOOL v4 = 0;
  }
  float v8 = a2[2];
  float v9 = a2[3];
  if (v8 != 0.0) {
    BOOL v4 = 0;
  }
  if (v9 != 1.0) {
    BOOL v4 = 0;
  }
  *(unsigned char *)(result + 45) = v4;
  *(float *)(result + 48) = v6;
  *(float *)(result + 52) = v7;
  *(float *)(result + 56) = v8;
  *(float *)(result + 60) = v9;
  *(float *)(result + 64) = v2;
  *(float *)(result + 68) = v3;
  *(float *)(result + 72) = v5;
  uint64_t v10 = *(physx::Sc::RigidSim **)result;
  if (*(void *)result)
  {
    physx::Sc::RigidSim::notifyShapesOfTransformChange(*(physx::Sc::RigidSim **)result);
    BOOL v11 = *(unsigned __int8 *)(*((void *)v10 + 10) + 13) == 2;
    uint64_t v12 = *(void *)(*((void *)v10 + 9) + 1904);
    int v13 = *((_DWORD *)v10 + 44);
    return (*(uint64_t (**)(uint64_t, BOOL, int *))(*(void *)v12 + 88))(v12, v11, &v13);
  }
  return result;
}

float32_t physx::Sc::BodyCore::addSpatialAcceleration(physx::Sc::BodySim **a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4)
{
  float v8 = *a1;
  if (v8) {
    physx::Sc::BodySim::notifyAddSpatialAcceleration(v8);
  }
  uint64_t v10 = (float32x2_t *)a1[22];
  if (!v10 || v10[3].i8[7])
  {
    physx::Sc::BodyCore::setupSimStateData((uint64_t)a1, a2, 0, 0);
    uint64_t v10 = (float32x2_t *)a1[22];
  }
  v10[1].i8[4] |= 2u;
  if (a3)
  {
    float32x2_t *v10 = vadd_f32(*a3, *v10);
    float32_t result = a3[1].f32[0] + v10[1].f32[0];
    v10[1].f32[0] = result;
  }
  if (a4)
  {
    float32x4_t v10[2] = vadd_f32(*a4, v10[2]);
    float32_t result = a4[1].f32[0] + v10[3].f32[0];
    v10[3].f32[0] = result;
  }
  return result;
}

void physx::Sc::BodySim::notifyAddSpatialAcceleration(physx::Sc::BodySim *this)
{
  *((unsigned char *)this + 182) |= 2u;
  if (*(unsigned char *)(*((void *)this + 10) + 13) != 2)
  {
    uint64_t v1 = *((void *)this + 9);
    unint64_t v2 = *((unsigned int *)this + 44);
    physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v1 + 4416, (v2 >> 7) + 1);
    *(_DWORD *)(*(void *)(v1 + 4416) + ((v2 >> 10) & 0x3FFFFC)) |= 1 << (v2 >> 7);
  }
}

uint64_t physx::Sc::BodyCore::setupSimStateData(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t v7 = *(void *)(a1 + 176);
  if (!v7)
  {
    uint64_t v7 = *(void *)(a2 + 560);
    if (!v7)
    {
      physx::shdfnd::PoolBase<physx::Sc::SimStateData,physx::shdfnd::ReflectionAllocator<physx::Sc::SimStateData>>::allocateSlab(a2);
      uint64_t v7 = *(void *)(a2 + 560);
    }
    *(void *)(a2 + 560) = *(void *)v7;
    ++*(_DWORD *)(a2 + 548);
  }
  *(_OWORD *)(v7 + 32) = 0uLL;
  *(_OWORD *)(v7 + 48) = 0uLL;
  *(_OWORD *)uint64_t v7 = 0uLL;
  *(_OWORD *)(v7 + 16) = 0uLL;
  if (a3)
  {
    *(unsigned char *)(v7 + 31) = 1;
    *(unsigned char *)(v7 + 28) = a4;
    *(void *)(v7 + 48) = *(void *)(a1 + 120);
    *(_OWORD *)(v7 + 32) = *(_OWORD *)(a1 + 128);
    *(void *)(v7 + 56) = *(void *)(a1 + 112);
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
    *(int32x2_t *)(a1 + 112) = vdup_n_s32(0x7F7FFFFFu);
  }
  *(void *)(a1 + 176) = v7;
  return 1;
}

float physx::Sc::BodyCore::setSpatialAcceleration(physx::Sc::BodySim **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float v8 = *a1;
  if (v8) {
    physx::Sc::BodySim::notifyAddSpatialAcceleration(v8);
  }
  uint64_t v10 = a1[22];
  if (!v10 || *((unsigned char *)v10 + 31))
  {
    physx::Sc::BodyCore::setupSimStateData((uint64_t)a1, a2, 0, 0);
    uint64_t v10 = a1[22];
  }
  *((unsigned char *)v10 + 12) |= 2u;
  if (a3)
  {
    *(void *)uint64_t v10 = *(void *)a3;
    float result = *(float *)(a3 + 8);
    *((float *)v10 + 2) = result;
  }
  if (a4)
  {
    *((void *)v10 + 2) = *(void *)a4;
    float result = *(float *)(a4 + 8);
    *((float *)v10 + 6) = result;
  }
  return result;
}

void physx::Sc::BodyCore::clearSpatialAcceleration(physx::Sc::BodySim **this, int a2, int a3)
{
  float v6 = *this;
  if (v6) {
    physx::Sc::BodySim::notifyAddSpatialAcceleration(v6);
  }
  uint64_t v7 = this[22];
  if (v7)
  {
    *((unsigned char *)v7 + 12) |= 2u;
    if (a2)
    {
      *(void *)uint64_t v7 = 0;
      *((_DWORD *)v7 + 2) = 0;
    }
    if (a3)
    {
      *((void *)v7 + 2) = 0;
      *((_DWORD *)v7 + 6) = 0;
    }
  }
}

float32_t physx::Sc::BodyCore::addSpatialVelocity(physx::Sc::BodySim **a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4)
{
  float v8 = *a1;
  if (v8) {
    physx::Sc::BodySim::notifyAddSpatialVelocity(v8);
  }
  uint64_t v10 = (float32x2_t *)a1[22];
  if (!v10 || v10[3].i8[7])
  {
    physx::Sc::BodyCore::setupSimStateData((uint64_t)a1, a2, 0, 0);
    uint64_t v10 = (float32x2_t *)a1[22];
  }
  v10[1].i8[4] |= 4u;
  if (a3)
  {
    v10[4] = vadd_f32(*a3, v10[4]);
    float32_t result = a3[1].f32[0] + v10[5].f32[0];
    v10[5].f32[0] = result;
  }
  if (a4)
  {
    v10[6] = vadd_f32(*a4, v10[6]);
    float32_t result = a4[1].f32[0] + v10[7].f32[0];
    v10[7].f32[0] = result;
  }
  return result;
}

void physx::Sc::BodySim::notifyAddSpatialVelocity(physx::Sc::BodySim *this)
{
  *((unsigned char *)this + 182) |= 4u;
  if (*(unsigned char *)(*((void *)this + 10) + 13) != 2)
  {
    uint64_t v1 = *((void *)this + 9);
    unint64_t v2 = *((unsigned int *)this + 44);
    physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v1 + 4416, (v2 >> 7) + 1);
    *(_DWORD *)(*(void *)(v1 + 4416) + ((v2 >> 10) & 0x3FFFFC)) |= 1 << (v2 >> 7);
  }
}

void physx::Sc::BodyCore::clearSpatialVelocity(physx::Sc::BodySim **this, int a2, int a3)
{
  float v6 = *this;
  if (v6) {
    physx::Sc::BodySim::notifyAddSpatialVelocity(v6);
  }
  uint64_t v7 = this[22];
  if (v7)
  {
    *((unsigned char *)v7 + 12) |= 4u;
    if (a2)
    {
      *((void *)v7 + 4) = 0;
      *((_DWORD *)v7 + 10) = 0;
    }
    if (a3)
    {
      *((void *)v7 + 6) = 0;
      *((_DWORD *)v7 + 14) = 0;
    }
  }
}

uint64_t *physx::Sc::BodyCore::setInverseInertia(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = result[22];
  if (v2 && *(unsigned char *)(v2 + 31) == 1)
  {
    *(void *)(v2 + 32) = *(void *)a2;
    *(_DWORD *)(v2 + 40) = *(_DWORD *)(a2 + 8);
  }
  else
  {
    result[16] = *(void *)a2;
    *((_DWORD *)result + 34) = *(_DWORD *)(a2 + 8);
    return updateBodySim(result);
  }
  return result;
}

void physx::Sc::BodyCore::setFlags(physx::Sc::BodyCore *this, uint64_t a2, unsigned char *a3, int8x8_t a4)
{
  int v4 = *((unsigned __int8 *)this + 44);
  int v5 = *a3;
  if (v5 == v4) {
    return;
  }
  BOOL v8 = (v5 & 1) == 0;
  char v9 = v4 | v8;
  *((unsigned char *)this + 44) = v5;
  uint64_t v10 = *(void *)this;
  if (*(void *)this)
  {
    int v12 = *a3;
    if (((v12 ^ v4) & 0x10) != 0 && *(_DWORD *)(v10 + 184) <= 0xFFFFFFFD)
    {
      int v13 = (int32x2_t *)(*(void *)(v10 + 72) + 7488);
      if ((v12 & 0x10) != 0)
      {
        uint64_t v54 = v10;
        char v55 = 0;
        float32x2_t v14 = (void *)physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(v13, &v54, &v55, a4);
        if (!v55) {
          *float32x2_t v14 = v10;
        }
      }
      else
      {
        uint64_t v54 = v10;
        physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)v13, &v54);
      }
    }
    if ((v4 | v8))
    {
      if ((v4 & v8) != 0)
      {
        physx::Sc::BodyCore::tearDownSimStateData((uint64_t)this, a2, 1);
        uint64_t v15 = *(void *)(*(void *)(v10 + 72) + 1880);
        unsigned int v16 = *(_DWORD *)(v10 + 176);
        physx::IG::IslandSim::setDynamic(v15 + 224, v16);
        physx::IG::IslandSim::setDynamic(v15 + 864, v16);
        uint64_t v18 = *(void *)(*(void *)(v10 + 80) + 176);
        if (*(char *)(*(void *)(v10 + 136) + 28) < 0)
        {
          if (v18 && *(unsigned char *)(v18 + 31) != 1)
          {
            int8x8_t v17 = 0;
            *(void *)(v18 + 48) = 0;
            *(_DWORD *)(v18 + 56) = 0;
            *(void *)(v18 + 32) = 0;
            *(_DWORD *)(v18 + 40) = 0;
          }
          char v19 = *(unsigned char *)(v10 + 182) & 0xFB;
        }
        else
        {
          if (v18 && *(unsigned char *)(v18 + 31) != 1)
          {
            int8x8_t v17 = 0;
            *(void *)(v18 + 48) = 0;
            *(_DWORD *)(v18 + 56) = 0;
            *(void *)(v18 + 32) = 0;
            *(_DWORD *)(v18 + 40) = 0;
            *(void *)(v18 + 16) = 0;
            *(_DWORD *)(v18 + 24) = 0;
            *(void *)uint64_t v18 = 0;
            *(_DWORD *)(v18 + 8) = 0;
          }
          char v19 = 1;
        }
        *(unsigned char *)(v10 + 182) = v19;
        float v32 = *(void **)(v10 + 200);
        if (v32) {
          physx::Sc::ConstraintGroupNode::markForProjectionTreeRebuild(v32, *(int32x2_t **)(*(void *)(v10 + 72) + 2056), v17);
        }
        physx::Sc::ActorSim::setActorsInteractionsDirty((void *)v10, 5, 0, 6, v17);
        *(_WORD *)(v10 + 180) &= 0xF9FBu;
        uint64_t v33 = *(unsigned int *)(v10 + 184);
        if (v33 <= 0xFFFFFFFD)
        {
          uint64_t v34 = *(void *)(v10 + 72);
          uint64_t v35 = *(void *)(v10 + 80);
          unsigned int v36 = *(_DWORD *)(v34 + 48);
          if (v33 >= v36) {
            unsigned int v37 = v36 + 1;
          }
          else {
            unsigned int v37 = v36 - 1;
          }
          if (v33 < v36) {
            --v36;
          }
          uint64_t v38 = *(void *)(v34 + 32);
          *(_DWORD *)(v10 + 184) = v36;
          uint64_t v39 = *(void *)(v38 + 8 * v36);
          *(void *)(v38 + 8 * v36) = v35;
          *(_DWORD *)(*(void *)v39 + 184) = v33;
          *(void *)(*(void *)(v34 + 32) + 8 * v33) = v39;
          *(_DWORD *)(v34 + 48) = v37;
        }
        for (unint64_t i = *(void **)(v10 + 56); i; unint64_t i = (void *)*i)
          physx::Sc::ShapeSim::updateBPGroup((uint64_t)i);
      }
    }
    else
    {
      physx::Sc::BodyCore::setupSimStateData((uint64_t)this, a2, 1, 0);
      uint64_t v21 = *(unsigned int *)(v10 + 184);
      if (v21 <= 0xFFFFFFFD)
      {
        uint64_t v22 = *(void *)(v10 + 72);
        uint64_t v23 = *(void *)(v10 + 80);
        unsigned int v24 = *(_DWORD *)(v22 + 48);
        if (v21 >= v24) {
          unsigned int v25 = v24 + 1;
        }
        else {
          unsigned int v25 = v24 - 1;
        }
        if (v21 < v24) {
          --v24;
        }
        uint64_t v26 = *(void *)(v22 + 32);
        *(_DWORD *)(v10 + 184) = v24;
        uint64_t v27 = *(void *)(v26 + 8 * v24);
        *(void *)(v26 + 8 * v24) = v23;
        *(_DWORD *)(*(void *)v27 + 184) = v21;
        *(void *)(*(void *)(v22 + 32) + 8 * v21) = v27;
        *(_DWORD *)(v22 + 48) = v25;
      }
      float v28 = *(void **)(v10 + 200);
      if (v28) {
        physx::Sc::ConstraintGroupNode::markForProjectionTreeRebuild(v28, *(int32x2_t **)(*(void *)(v10 + 72) + 2056), v20);
      }
      physx::Sc::ActorSim::setActorsInteractionsDirty((void *)v10, 5, 0, 4, v20);
      uint64_t v29 = *(void *)(*(void *)(v10 + 72) + 1880);
      unsigned int v30 = *(_DWORD *)(v10 + 176);
      physx::IG::IslandSim::setKinematic((physx::IG::IslandSim *)(v29 + 224), v30);
      physx::IG::IslandSim::setKinematic((physx::IG::IslandSim *)(v29 + 864), v30);
      for (int j = *(void **)(v10 + 56); j; int j = (void *)*j)
        physx::Sc::ShapeSim::updateBPGroup((uint64_t)j);
    }
    if ((v4 & 0x20) != (*a3 & 0x20))
    {
      if ((v4 & 0x20) == 0)
      {
        if (v9)
        {
          uint64_t v41 = *(void *)(v10 + 72);
          int v42 = *(unsigned __int8 *)(*(void *)(v10 + 80) + 13);
          unint64_t v43 = *(unsigned int *)(v10 + 176);
          if (v42 == 2) {
            uint64_t v44 = 7632;
          }
          else {
            uint64_t v44 = 7616;
          }
          if (v42 == 2) {
            uint64_t v45 = v41 + 7632;
          }
          else {
            uint64_t v45 = v41 + 7616;
          }
          physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v45, (v43 >> 7) + 1);
          *(_DWORD *)(*(void *)(v41 + v44) + ((v43 >> 10) & 0x3FFFFC)) |= 1 << (v43 >> 7);
        }
        __int16 v46 = *(_WORD *)(v10 + 124) | 0x40;
        goto LABEL_61;
      }
      uint64_t v47 = *(void *)(v10 + 72);
      unint64_t v48 = *(unsigned int *)(v10 + 176);
      unsigned int v49 = v48 >> 7;
      if (*(unsigned char *)(*(void *)(v10 + 80) + 13) == 2)
      {
        if (v49 < 32 * *(_DWORD *)(v47 + 7640))
        {
          uint64_t v50 = 7632;
LABEL_59:
          *(_DWORD *)(*(void *)(v47 + v50) + ((v48 >> 10) & 0x3FFFFC)) &= ~(1 << v49);
        }
      }
      else if (v49 < 32 * *(_DWORD *)(v47 + 7624))
      {
        uint64_t v50 = 7616;
        goto LABEL_59;
      }
      __int16 v46 = *(_WORD *)(v10 + 124) & 0xFFBF;
LABEL_61:
      *(_WORD *)(v10 + 124) = v46;
    }
  }
  if ((v9 & 1) == 0) {
    physx::Sc::BodyCore::putToSleep(this);
  }
  if (v10)
  {
    int v51 = *a3 & 3;
    if ((v4 & 3) != 3 && v51 == 3)
    {
      for (int k = *(physx::Sc::ShapeSim **)(v10 + 56); k; int k = *(physx::Sc::ShapeSim **)k)
      {
        if (*((_DWORD *)k + 17) != -1) {
          physx::Sc::SqBoundsManager::removeShape(*(void *)(*(void *)(*((void *)k + 1) + 72) + 2088), k);
        }
      }
    }
    else if ((v4 & 3) == 3 && v51 != 3)
    {
      physx::Sc::BodySim::createSqBounds(v10);
    }
  }
}

uint64_t physx::Sc::BodyCore::tearDownSimStateData(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(result + 176);
  if (v3)
  {
    if (a3)
    {
      *(_OWORD *)(result + 128) = *(_OWORD *)(v3 + 32);
      *(int8x16_t *)(result + 112) = vextq_s8(*(int8x16_t *)(v3 + 48), *(int8x16_t *)(v3 + 48), 8uLL);
    }
    --*(_DWORD *)(a2 + 548);
    *(void *)uint64_t v3 = *(void *)(a2 + 560);
    *(void *)(a2 + 560) = v3;
    *(void *)(result + 176) = 0;
  }
  return result;
}

uint64_t physx::Sc::BodyCore::putToSleep(physx::Sc::BodyCore *this)
{
  *((void *)this + 10) = 0;
  *((_DWORD *)this + 22) = 0;
  *((void *)this + 12) = 0;
  *((_DWORD *)this + 26) = 0;
  uint64_t v2 = *(physx::Sc::BodySim **)this;
  if (*(void *)this)
  {
    physx::Sc::BodySim::notifyAddSpatialAcceleration(*(physx::Sc::BodySim **)this);
    physx::Sc::BodySim::notifyAddSpatialVelocity(v2);
  }
  uint64_t v3 = *((void *)this + 22);
  if (v3 && !*(unsigned char *)(v3 + 31))
  {
    *(void *)(v3 + 48) = 0;
    *(_DWORD *)(v3 + 56) = 0;
    *(void *)(v3 + 32) = 0;
    *(_DWORD *)(v3 + 40) = 0;
    *(void *)(v3 + 16) = 0;
    *(_DWORD *)(v3 + 24) = 0;
    *(void *)uint64_t v3 = 0;
    *(_DWORD *)(v3 + 8) = 0;
  }
  uint64_t result = physx::Sc::BodyCore::setWakeCounter((uint64_t)this, 0.0, 0);
  if (v2)
  {
    return physx::Sc::BodySim::putToSleep(v2, v5);
  }
  return result;
}

uint64_t physx::Sc::BodySim::createSqBounds(uint64_t this)
{
  if (*(_DWORD *)(this + 184) <= 0xFFFFFFFD
    && (~*(unsigned __int8 *)(*(void *)(this + 80) + 44) & 3) != 0
    && (*(_WORD *)(this + 180) & 0x1000) == 0)
  {
    for (unint64_t i = *(void **)(this + 56); i; unint64_t i = (void *)*i)
      this = physx::Sc::ShapeSim::createSqBounds((uint64_t)i);
  }
  return this;
}

uint64_t physx::Sc::BodyCore::setWakeCounter(uint64_t this, float a2, int a3)
{
  *(float *)(this + 156) = a2;
  uint64_t v3 = *(void *)this;
  if (*(void *)this)
  {
    BOOL v6 = *(unsigned __int8 *)(*(void *)(v3 + 80) + 13) == 2;
    uint64_t v7 = *(void *)(*(void *)(v3 + 72) + 1904);
    int v11 = *(_DWORD *)(v3 + 176);
    (*(void (**)(uint64_t, BOOL, int *))(*(void *)v7 + 88))(v7, v6, &v11);
    if (a2 > 0.0 || a3)
    {
      physx::Sc::BodySim::setActive((physx::Sc::BodySim *)v3, (physx::Sc::Interaction *)1, 0, v8);
      uint64_t v9 = *(void *)(*(void *)(v3 + 72) + 1880);
      unsigned int v10 = *(_DWORD *)(v3 + 176);
      physx::IG::IslandSim::activateNode(v9 + 224, v10);
      physx::IG::IslandSim::activateNode(v9 + 864, v10);
    }
    return physx::Sc::BodySim::postSetWakeCounter(v3, a2, a3);
  }
  return this;
}

uint64_t physx::Sc::BodySim::postSetWakeCounter(uint64_t this, float a2, int a3)
{
  if (a2 > 0.0 || a3 != 0)
  {
    uint64_t v4 = *(void *)(*(void *)(this + 72) + 1880);
    unsigned int v5 = *(_DWORD *)(this + 176);
    physx::IG::IslandSim::activateNode(v4 + 224, v5);
    return physx::IG::IslandSim::activateNode(v4 + 864, v5);
  }
  uint64_t v6 = *(void *)(this + 80);
  uint64_t v7 = *(void *)(v6 + 176);
  if (!v7 || *(unsigned char *)(v7 + 31) == 1) {
    uint64_t v7 = 0;
  }
  if (*(float *)(v6 + 80) == 0.0
    && *(float *)(v6 + 84) == 0.0
    && *(float *)(v6 + 88) == 0.0
    && *(float *)(v6 + 96) == 0.0
    && *(float *)(v6 + 100) == 0.0)
  {
    float v8 = *(float *)(v6 + 104);
    char v9 = *(unsigned char *)(this + 182);
    BOOL v10 = (v9 & 2) == 0;
    if (v8 != 0.0) {
      BOOL v10 = 0;
    }
    if ((*(unsigned char *)(this + 182) & 2) != 0 && v8 == 0.0)
    {
      if (!v7)
      {
        if ((*(unsigned char *)(this + 182) & 4) != 0)
        {
LABEL_41:
          if (!*(void *)(this + 192))
          {
            unsigned int v12 = *(_DWORD *)(this + 176);
            uint64_t v13 = *(void *)(*(void *)(this + 72) + 1880);
            return physx::IG::SimpleIslandManager::deactivateNode(v13, v12);
          }
          return this;
        }
        BOOL v11 = 1;
        BOOL v10 = 1;
LABEL_39:
        if (!v11 || !v10) {
          return this;
        }
        goto LABEL_41;
      }
      if (*(float *)v7 != 0.0
        || *(float *)(v7 + 4) != 0.0
        || *(float *)(v7 + 8) != 0.0
        || *(float *)(v7 + 16) != 0.0
        || *(float *)(v7 + 20) != 0.0)
      {
        return this;
      }
      BOOL v10 = *(float *)(v7 + 24) == 0.0;
    }
    BOOL v11 = (v9 & 4) == 0;
    if ((*(unsigned char *)(this + 182) & 4) != 0 && v10)
    {
      if (v7
        && (*(float *)(v7 + 32) != 0.0
         || *(float *)(v7 + 36) != 0.0
         || *(float *)(v7 + 40) != 0.0
         || *(float *)(v7 + 48) != 0.0
         || *(float *)(v7 + 52) != 0.0
         || *(float *)(v7 + 56) != 0.0))
      {
        return this;
      }
      goto LABEL_41;
    }
    goto LABEL_39;
  }
  return this;
}

uint64_t physx::Sc::BodySim::putToSleep(physx::Sc::BodySim *this, int8x8_t a2)
{
  physx::Sc::BodySim::setActive(this, 0, 0, a2);
  uint64_t result = physx::IG::SimpleIslandManager::putNodeToSleep(*(void *)(*((void *)this + 9) + 1880), *((_DWORD *)this + 44));
  *((_WORD *)this + 90) &= 0xF9FFu;
  return result;
}

float32_t physx::Sc::BodyCore::onOriginShift(float32x2_t *a1, float32x2_t *a2)
{
  a1[4] = vsub_f32(a1[4], *a2);
  float32_t result = a1[5].f32[0] - a2[1].f32[0];
  a1[5].f32[0] = result;
  uint64_t v3 = (float32x2_t *)a1[22];
  if (v3 && (a1[5].i8[4] & 1) != 0 && v3[3].i8[4])
  {
    v3[2] = vsub_f32(v3[2], *a2);
    float32_t result = v3[3].f32[0] - a2[1].f32[0];
    v3[3].f32[0] = result;
  }
  uint64_t v4 = (float32x2_t *)*a1;
  if (*a1)
  {
    v4[14] = vsub_f32(v4[14], *a2);
    float32_t result = v4[15].f32[0] - a2[1].f32[0];
    v4[15].f32[0] = result;
  }
  return result;
}

uint64_t physx::Sc::BodyCore::setKinematicTarget(physx::Sc::BodyCore *this, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v7 = *((void *)this + 22);
  if (v7)
  {
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a3;
    *(void *)(v7 + 16) = *(void *)(a3 + 16);
    *(_DWORD *)(v7 + 24) = *(_DWORD *)(a3 + 24);
    *(unsigned char *)(v7 + 28) = 1;
    if (*(void *)this) {
      *(_WORD *)(*(void *)this + 180) = *(_WORD *)(*(void *)this + 180) & 0xF7FB | 4;
    }
  }
  else
  {
    physx::Sc::BodyCore::setupSimStateData((uint64_t)this, a2, 1, 1);
    uint64_t v8 = *((void *)this + 22);
    *(_OWORD *)uint64_t v8 = *(_OWORD *)a3;
    *(void *)(v8 + 16) = *(void *)(a3 + 16);
    *(_DWORD *)(v8 + 24) = *(_DWORD *)(a3 + 24);
    *(unsigned char *)(v8 + 28) = 1;
  }
  return physx::Sc::BodyCore::setWakeCounter((uint64_t)this, a4, 1);
}

physx::Sc::BodySim *physx::Sc::BodySim::BodySim(physx::Sc::BodySim *this, physx::Sc::Scene *a2, physx::Sc::BodyCore *a3, int a4)
{
  uint64_t v8 = physx::Sc::RigidSim::RigidSim((uint64_t)this, (uint64_t)a2, a3);
  *(void *)uint64_t v8 = &unk_26E7256C8;
  *(_OWORD *)(v8 + 96) = *((_OWORD *)a3 + 1);
  char v9 = (physx::PxsRigidBody *)(v8 + 96);
  *(void *)(v8 + 112) = *((void *)a3 + 4);
  *(_DWORD *)(v8 + 120) = *((_DWORD *)a3 + 10);
  *(_WORD *)(v8 + 124) = 0;
  *(_WORD *)(v8 + 126) = *((_WORD *)a3 + 23);
  *(void *)(v8 + 128) = 0;
  *(void *)(v8 + 136) = (char *)a3 + 16;
  *(_OWORD *)(v8 + 144) = xmmword_2344205E0;
  *(_OWORD *)(v8 + 160) = xmmword_23435FBB0;
  *(_DWORD *)(v8 + 176) = -128;
  *(_WORD *)(v8 + 180) = 0;
  *(unsigned char *)(v8 + 182) = 1;
  v10.i32[1] = -1;
  *(void *)(v8 + 184) = -1;
  *(void *)(v8 + 192) = 0;
  *(void *)(v8 + 200) = 0;
  *((_DWORD *)a3 + 41) = 0;
  *((_DWORD *)a3 + 42) = 0;
  *((unsigned char *)a3 + 173) = *((unsigned char *)a3 + 12) & 2;
  if ((*((unsigned char *)a3 + 44) & 0x20) != 0) {
    *((_WORD *)this + 62) = 64;
  }
  uint64_t v11 = *((void *)a3 + 22);
  if (v11 && *(unsigned char *)(v11 + 31) != 1)
  {
    if (*(unsigned char *)(v11 + 12)) {
      BOOL v12 = *(float *)v11 != 0.0
    }
         || *(float *)(v11 + 4) != 0.0
         || *(float *)(v11 + 8) != 0.0
         || *(float *)(v11 + 16) != 0.0
         || *(float *)(v11 + 20) != 0.0
         || *(float *)(v11 + 24) != 0.0
         || *(float *)(v11 + 32) != 0.0
         || *(float *)(v11 + 36) != 0.0
         || *(float *)(v11 + 40) != 0.0
         || *(float *)(v11 + 48) != 0.0
         || *(float *)(v11 + 52) != 0.0
         || *(float *)(v11 + 56) != 0.0;
    else {
      BOOL v12 = 0;
    }
    *((unsigned char *)this + 182) = *(unsigned char *)(v11 + 12);
    *(unsigned char *)(v11 + 12) = 0;
  }
  else
  {
    BOOL v12 = 0;
  }
  v10.i32[0] = *((_DWORD *)a3 + 39);
  if (*(float *)v10.i32 <= 0.0)
  {
    v10.i32[0] = *((_DWORD *)a3 + 20);
    int v13 = 1;
    if (*(float *)v10.i32 == 0.0)
    {
      v10.i32[0] = *((_DWORD *)a3 + 21);
      if (*(float *)v10.i32 == 0.0)
      {
        v10.i32[0] = *((_DWORD *)a3 + 22);
        if (*(float *)v10.i32 == 0.0)
        {
          v10.i32[0] = *((_DWORD *)a3 + 24);
          if (*(float *)v10.i32 == 0.0)
          {
            v10.i32[0] = *((_DWORD *)a3 + 25);
            if (*(float *)v10.i32 == 0.0)
            {
              v10.i32[0] = *((_DWORD *)a3 + 26);
              int v13 = *(float *)v10.i32 != 0.0 || v12;
            }
          }
        }
      }
    }
  }
  else
  {
    int v13 = 1;
  }
  uint64_t v14 = *((void *)this + 10);
  char v15 = *(unsigned char *)(v14 + 44);
  uint64_t v16 = *((void *)a2 + 235);
  if (*(unsigned char *)(v14 + 13) == 2)
  {
    unsigned int v17 = -128;
    if (!v12) {
      goto LABEL_38;
    }
  }
  else
  {
    unsigned int v17 = physx::IG::SimpleIslandManager::addRigidBody(*((physx::IG::SimpleIslandManager **)a2 + 235), v9, v15 & 1, v13);
    *((_DWORD *)this + 44) = v17;
    if (!v12) {
      goto LABEL_38;
    }
  }
  if (*(unsigned char *)(*((void *)this + 10) + 13) != 2)
  {
    physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)a2 + 4416, (v17 >> 7) + 1);
    *(_DWORD *)(*((void *)a2 + 552) + 4 * (v17 >> 12)) |= 1 << (v17 >> 7);
  }
LABEL_38:
  if (a4) {
    *((_WORD *)this + 90) |= 0x1000u;
  }
  if (v13)
  {
    physx::Sc::BodySim::activate(this, v10);
    physx::Sc::Scene::addToActiveBodyList((uint64_t)a2, this);
    if ((v15 & 1) == 0) {
      return this;
    }
  }
  else
  {
    physx::Sc::BodySim::deactivate((uint64_t)this, v9, v10);
    *((void *)this + 23) = 0x100000001;
    unsigned int v19 = *((_DWORD *)this + 44);
    physx::IG::IslandSim::deactivateNode(v16 + 224, v19);
    physx::IG::IslandSim::deactivateNode(v16 + 864, v19);
    if ((v15 & 1) == 0) {
      return this;
    }
  }
  int8x8_t v20 = (void *)*((void *)this + 25);
  if (v20) {
    physx::Sc::ConstraintGroupNode::markForProjectionTreeRebuild(v20, *(int32x2_t **)(*((void *)this + 9) + 2056), v18);
  }
  uint64_t v21 = *((void *)a3 + 22);
  if (v21 && *(unsigned char *)(v21 + 31) == 1)
  {
    *((_WORD *)this + 90) = *((_WORD *)this + 90) & 0xF7FB | 4;
  }
  else
  {
    physx::Sc::BodyCore::setupSimStateData((uint64_t)a3, *((void *)a2 + 546), 1, 0);
    physx::IG::SimpleIslandManager::putNodeToSleep(*(void *)(*((void *)this + 9) + 1880), *((_DWORD *)this + 44));
  }
  return this;
}

void physx::Sc::BodySim::~BodySim(physx::Sc::BodySim *this)
{
  *(void *)this = &unk_26E7256C8;
  unsigned int v2 = *((_DWORD *)this + 46);
  uint64_t v3 = *((void *)this + 9);
  physx::Sc::BodyCore::tearDownSimStateData(*((void *)this + 10), *(void *)(v3 + 4368), *(unsigned char *)(*((void *)this + 10) + 44) & 1);
  *((_WORD *)this + 90) |= 8u;
  physx::Sc::Scene::removeBody((int32x2_t **)v3, this, v4);
  uint64_t v5 = *((void *)this + 24);
  if (!v5 || (physx::Sc::ArticulationSim::removeBody(v5, (uint64_t)this), !*((void *)this + 24)))
  {
    int v6 = *((_DWORD *)this + 44);
    if ((v6 & 0x7E) == 0) {
      physx::IG::SimpleIslandManager::removeNode(*(void *)(v3 + 1880), v6);
    }
  }
  if (v2 <= 0xFFFFFFFD) {
    physx::Sc::Scene::removeFromActiveBodyList(v3, this);
  }
  *((void *)this + 23) = -1;
  **((void **)this + 10) = 0;
  physx::Sc::RigidSim::~RigidSim(this);
}

{
  void (*v1)(void);
  uint64_t vars8;

  physx::Sc::BodySim::~BodySim(this);
  uint64_t v1 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
  v1();
}

uint64_t physx::Sc::BodySim::postActorFlagChange(uint64_t this, char a2, char a3)
{
  if ((a3 & 2) != (a2 & 2))
  {
    if (!*(unsigned char *)(this + 182)) {
      *(unsigned char *)(this + 182) = 1;
    }
    *(unsigned char *)(*(void *)(this + 80) + 173) = (a3 & 2) >> 1;
  }
  return this;
}

void physx::Sc::BodySim::activate(physx::Sc::BodySim *this, int8x8_t a2)
{
  uint64_t v3 = *((void *)this + 10);
  if (*(unsigned char *)(v3 + 13) != 2)
  {
    *((_WORD *)this + 62) &= ~1u;
    physx::Sc::Scene::onBodyWakeUp(*((int32x2_t **)this + 9), (int32x2_t *)this, a2);
    uint64_t v3 = *((void *)this + 10);
  }
  if ((*(unsigned char *)(v3 + 44) & 0x10) != 0)
  {
    int8x8_t v4 = (int32x2_t *)(*((void *)this + 9) + 7488);
    unsigned int v25 = this;
    char v26 = 0;
    uint64_t v5 = (void *)physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(v4, &v25, &v26, a2);
    if (!v26) {
      *uint64_t v5 = this;
    }
  }
  physx::Sc::BodySim::createSqBounds((uint64_t)this);
  uint64_t v8 = *((unsigned int *)this + 13);
  if (v8)
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = v9++;
      if (v9 >= (int)v8 - 1) {
        unsigned int v11 = v8 - 1;
      }
      else {
        unsigned int v11 = v9;
      }
      uint64_t v12 = *((void *)this + 5);
      _X9 = *(void *)(v12 + 8 * v11);
      __asm { PRFM            #0, [X9] }
      int8x8_t v18 = *(physx::Sc **)(v12 + 8 * v10);
      if (*((unsigned char *)v18 + 28))
      {
        _ZF = *((unsigned char *)v18 + 28) != 2 && (*((unsigned char *)v18 + 29) & 0x20) == 0;
        if (_ZF
          && physx::Sc::activateInteraction(v18, 0, v6, v7)
          && *((unsigned __int8 *)v18 + 28) <= 2u)
        {
          physx::Sc::Scene::notifyInteractionActivated(*((void *)this + 9), (uint64_t)v18);
        }
      }
    }
    while (v8 != v9);
  }
  uint64_t v20 = *((void *)this + 10);
  if ((*(unsigned char *)(v20 + 44) & 0x20) != 0)
  {
    if (*(unsigned char *)(v20 + 13) == 2)
    {
      unsigned int v21 = *((_DWORD *)this + 44);
      if (v21 > 0xFFFFFF7F) {
        return;
      }
      uint64_t v22 = *((void *)this + 9);
      uint64_t v23 = 7632;
    }
    else
    {
      uint64_t v22 = *((void *)this + 9);
      unsigned int v21 = *((_DWORD *)this + 44);
      uint64_t v23 = 7616;
    }
    unsigned int v24 = (void *)(v22 + v23);
    physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v22 + v23, (v21 >> 7) + 1);
    *(_DWORD *)(*v24 + 4 * (v21 >> 12)) |= 1 << (v21 >> 7);
  }
}

uint64_t physx::Sc::BodySim::deactivate(uint64_t this, physx::Sc::Interaction *a2, int8x8_t a3)
{
  uint64_t v3 = this;
  uint64_t v4 = *(unsigned int *)(this + 52);
  if (v4)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v5++;
      if (v5 >= (int)v4 - 1) {
        unsigned int v7 = v4 - 1;
      }
      else {
        unsigned int v7 = v5;
      }
      uint64_t v8 = *(void *)(v3 + 40);
      _X9 = *(void *)(v8 + 8 * v7);
      __asm { PRFM            #0, [X9] }
      uint64_t v14 = *(unsigned __int8 **)(v8 + 8 * v6);
      if (v14[28])
      {
        if (v14[28] != 2 && (v14[29] & 0x20) != 0)
        {
          this = physx::Sc::deactivateInteraction((physx::Sc *)v14, a2);
          if (this)
          {
            if (v14[28] <= 2u) {
              this = physx::Sc::Scene::notifyInteractionDeactivated(*(void *)(v3 + 72), (uint64_t)v14);
            }
          }
        }
      }
    }
    while (v4 != v5);
  }
  uint64_t v16 = *(void *)(v3 + 80);
  if ((*(_WORD *)(v3 + 180) & 8) == 0)
  {
    *(double *)&a3 = 0.0;
    *(void *)(v16 + 80) = 0;
    *(_DWORD *)(v16 + 88) = 0;
    *(void *)(v16 + 96) = 0;
    *(_DWORD *)(v16 + 104) = 0;
    uint64_t v17 = *(void *)(v16 + 176);
    if (*(char *)(*(void *)(v3 + 136) + 28) < 0)
    {
      if (v17 && *(unsigned char *)(v17 + 31) != 1)
      {
        *(void *)(v17 + 48) = 0;
        *(_DWORD *)(v17 + 56) = 0;
        *(void *)(v17 + 32) = 0;
        *(_DWORD *)(v17 + 40) = 0;
      }
      char v19 = *(unsigned char *)(v3 + 182) & 0xFB;
    }
    else
    {
      int v18 = *(unsigned __int8 *)(v16 + 173);
      if (v17 && *(unsigned char *)(v17 + 31) != 1)
      {
        *(void *)(v17 + 48) = 0;
        *(_DWORD *)(v17 + 56) = 0;
        *(void *)(v17 + 32) = 0;
        *(_DWORD *)(v17 + 40) = 0;
        *(void *)(v17 + 16) = 0;
        *(_DWORD *)(v17 + 24) = 0;
        *(void *)uint64_t v17 = 0;
        *(_DWORD *)(v17 + 8) = 0;
      }
      if (v18)
      {
        *(unsigned char *)(v3 + 182) = 0;
        goto LABEL_28;
      }
      char v19 = 1;
    }
    *(unsigned char *)(v3 + 182) = v19;
  }
LABEL_28:
  if (*(unsigned char *)(v16 + 13) != 2) {
    this = (uint64_t)physx::Sc::Scene::onBodySleep(*(int32x2_t **)(v3 + 72), (int32x2_t *)v3, a3);
  }
  if ((*(unsigned char *)(v16 + 44) & 0x10) != 0)
  {
    uint64_t v20 = *(void *)(v3 + 72) + 7488;
    uint64_t v27 = v3;
    this = physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v20, &v27);
  }
  for (unint64_t i = *(physx::Sc::ShapeSim **)(v3 + 56); i; unint64_t i = *(physx::Sc::ShapeSim **)i)
  {
    if (*((_DWORD *)i + 17) != -1) {
      this = physx::Sc::SqBoundsManager::removeShape(*(void *)(*(void *)(*((void *)i + 1) + 72) + 2088), i);
    }
  }
  uint64_t v22 = *(void *)(v3 + 80);
  if ((*(unsigned char *)(v22 + 44) & 0x20) != 0)
  {
    if (*(unsigned char *)(v22 + 13) != 2)
    {
      uint64_t v24 = *(void *)(v3 + 72);
      unsigned int v23 = *(_DWORD *)(v3 + 176);
      unsigned int v25 = v23 >> 7;
      if (v23 >> 7 >= 32 * *(_DWORD *)(v24 + 7624)) {
        return this;
      }
      uint64_t v26 = 7616;
      goto LABEL_43;
    }
    unsigned int v23 = *(_DWORD *)(v3 + 176);
    if (v23 <= 0xFFFFFF7F)
    {
      uint64_t v24 = *(void *)(v3 + 72);
      unsigned int v25 = v23 >> 7;
      if (v23 >> 7 < 32 * *(_DWORD *)(v24 + 7640))
      {
        uint64_t v26 = 7632;
LABEL_43:
        *(_DWORD *)(*(void *)(v24 + v26) + 4 * (v23 >> 12)) &= ~(1 << v25);
      }
    }
  }
  return this;
}

uint64_t physx::Sc::BodySim::internalWakeUp(physx::Sc::BodySim *this, float a2)
{
  uint64_t result = *((void *)this + 24);
  if (result)
  {
    return physx::Sc::ArticulationSim::internalWakeUp(result, a2);
  }
  else
  {
    uint64_t v4 = *((void *)this + 10);
    if ((*(unsigned char *)(v4 + 44) & 1) == 0 && *(float *)(v4 + 156) < a2)
    {
      *(float *)(v4 + 156) = a2;
      *(double *)&int8x8_t v5 = (*(double (**)(void, BOOL, char *))(**(void **)(*((void *)this + 9) + 1904)
                                                                      + 88))(*(void *)(*((void *)this + 9) + 1904), *(unsigned char *)(v4 + 13) == 2, (char *)this + 176);
      physx::Sc::BodySim::setActive(this, (physx::Sc::Interaction *)1, 0, v5);
      uint64_t v6 = *(void *)(*((void *)this + 9) + 1880);
      unsigned int v7 = *((_DWORD *)this + 44);
      physx::IG::IslandSim::activateNode(v6 + 224, v7);
      uint64_t result = physx::IG::IslandSim::activateNode(v6 + 864, v7);
      *((_WORD *)this + 62) &= ~1u;
    }
  }
  return result;
}

void physx::Sc::BodySim::calculateKinematicVelocity(physx::Sc::BodySim *this, float a2)
{
  uint64_t v2 = *((void *)this + 10);
  __int16 v3 = *((_WORD *)this + 90);
  if ((v3 & 4) != 0)
  {
    *((_WORD *)this + 90) = v3 & 0xF9FF;
    int8x8_t v5 = *(float32x2_t **)(v2 + 176);
    float v6 = v5->f32[1];
    float v7 = v5[1].f32[0];
    float v8 = v5[1].f32[1];
    float32x2_t v9 = vsub_f32(v5[2], *(float32x2_t *)(v2 + 32));
    float v10 = *(float *)(v2 + 16);
    float v11 = *(float *)(v2 + 20);
    float v12 = *(float *)(v2 + 24);
    float v13 = *(float *)(v2 + 28);
    float v14 = (float)((float)((float)(v5->f32[0] * v13) - (float)(v8 * v10)) - (float)(v6 * v12)) + (float)(v11 * v7);
    float v15 = (float)((float)((float)(v6 * v13) - (float)(v8 * v11)) - (float)(v7 * v10)) + (float)(v12 * v5->f32[0]);
    float v16 = (float)((float)((float)(v7 * v13) - (float)(v8 * v12)) - (float)(v5->f32[0] * v11)) + (float)(v10 * v6);
    float v17 = (float)((float)((float)(v5->f32[0] * v10) + (float)(v8 * v13)) + (float)(v6 * v11)) + (float)(v7 * v12);
    if (v17 < 0.0)
    {
      float v14 = -v14;
      float v15 = -v15;
      float v16 = -v16;
      float v17 = -v17;
    }
    float32x2_t v18 = vmul_n_f32(v9, a2);
    float v19 = (float)(v5[3].f32[0] - *(float *)(v2 + 40)) * a2;
    float v20 = (float)((float)(v15 * v15) + (float)(v14 * v14)) + (float)(v16 * v16);
    if (v20 >= 1.0e-16)
    {
      float v25 = 1.0 / sqrtf(v20);
      float v22 = v14 * v25;
      float v21 = v15 * v25;
      float v23 = v16 * v25;
      if (fabsf(v17) >= 0.00000001)
      {
        float v27 = a2;
        float v26 = atan2f(v20 * v25, v17);
        a2 = v27;
        float v24 = v26 + v26;
      }
      else
      {
        float v24 = 3.1416;
      }
    }
    else
    {
      float v21 = 0.0;
      float v22 = 1.0;
      float v23 = 0.0;
      float v24 = 0.0;
    }
    *(float32x2_t *)(v2 + 80) = v18;
    *(float *)(v2 + 88) = v19;
    *(float *)(v2 + 96) = (float)(v22 * v24) * a2;
    *(float *)(v2 + 100) = (float)(v21 * v24) * a2;
    *(float *)(v2 + 104) = (float)(v23 * v24) * a2;
  }
  else if ((*((_WORD *)this + 90) & 0x800) == 0)
  {
    *(void *)(v2 + 80) = 0;
    *(_DWORD *)(v2 + 88) = 0;
    updateBodySim((uint64_t *)v2);
    *(void *)(v2 + 96) = 0;
    *(_DWORD *)(v2 + 104) = 0;
    updateBodySim((uint64_t *)v2);
  }
}

float physx::Sc::BodySim::updateKinematicPose(physx::Sc::BodySim *this)
{
  __int16 v1 = *((_WORD *)this + 90);
  if ((v1 & 4) != 0)
  {
    uint64_t v2 = *((void *)this + 10);
    *((_WORD *)this + 90) = v1 & 0xF9FF;
    uint64_t v3 = *(void *)(v2 + 176);
    float result = *(float *)(v3 + 24);
    uint64_t v5 = *(void *)(v3 + 16);
    *(_OWORD *)(v2 + 16) = *(_OWORD *)v3;
    *(void *)(v2 + 32) = v5;
    *(float *)(v2 + 40) = result;
  }
  return result;
}

uint64_t physx::Sc::BodySim::deactivateKinematic(physx::Sc::BodySim *this)
{
  unsigned int v2 = *((unsigned __int16 *)this + 90);
  if ((v2 & 0x400) == 0)
  {
    if ((v2 & 0x200) != 0)
    {
      __int16 v7 = v2 & 0xF9FF | 0x400;
    }
    else
    {
      if ((v2 & 0x800) != 0) {
        return (v2 >> 10) & 1;
      }
      __int16 v7 = v2 & 0xFDFB | 0x200;
    }
    *((_WORD *)this + 90) = v7;
    return (v2 >> 10) & 1;
  }
  uint64_t v3 = *((void *)this + 10);
  *((_WORD *)this + 90) = v2 & 0xFBFF;
  *(_DWORD *)(v3 + 156) = 0;
  if (!*((void *)this + 24))
  {
    uint64_t v4 = *(void *)(*((void *)this + 9) + 1880);
    unsigned int v5 = *((_DWORD *)this + 44);
    physx::IG::IslandSim::deactivateNode(v4 + 224, v5);
    physx::IG::IslandSim::deactivateNode(v4 + 864, v5);
  }
  physx::IG::SimpleIslandManager::putNodeToSleep(*(void *)(*((void *)this + 9) + 1880), *((_DWORD *)this + 44));
  physx::Sc::BodySim::setActive(this, 0, 0, v6);
  return (v2 >> 10) & 1;
}

void physx::Sc::BodySim::freezeTransforms(uint64_t a1, void *a2)
{
  for (uint64_t i = *(void *)(a1 + 56); i; uint64_t i = *(void *)i)
  {
    physx::Sc::ShapeSim::updateCached(i, 1, a2);
    if (*(_DWORD *)(i + 68) != -1) {
      physx::Sc::SqBoundsManager::removeShape(*(void *)(*(void *)(*(void *)(i + 8) + 72) + 2088), (physx::Sc::ShapeSim *)i);
    }
  }
}

uint64_t physx::Sc::BodySim::disableCompound(uint64_t this)
{
  if (*(_DWORD *)(this + 184) <= 0xFFFFFFFD)
  {
    uint64_t v1 = *(void *)(this + 72);
    uint64_t v2 = *(unsigned int *)(this + 188);
    *(_DWORD *)(this + 188) = -2;
    unsigned int v3 = *(_DWORD *)(v1 + 64) - 1;
    if (v2 != v3)
    {
      uint64_t v4 = *(void *)(v1 + 56);
      uint64_t v5 = *(void *)(v4 + 8 * v3);
      *(void *)(v4 + 8 * v2) = v5;
      *(_DWORD *)(*(void *)v5 + 184) = v2;
    }
    *(_DWORD *)(v1 + 64) = v3;
  }
  *(_WORD *)(this + 180) &= ~0x1000u;
  return this;
}

void *physx::Sc::NPhaseCore::addToDirtyInteractionList(int32x2_t *this, physx::Sc::Interaction *a2, int8x8_t a3)
{
  uint64_t v4 = a2;
  char v5 = 0;
  float result = (void *)physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(this + 12, &v4, &v5, a3);
  if (!v5) {
    *float result = v4;
  }
  return result;
}

unsigned char *physx::Sc::Interaction::setClean(unsigned char *this, int a2)
{
  uint64_t v2 = this;
  char v3 = this[29];
  if ((v3 & 8) != 0)
  {
    if (a2)
    {
      uint64_t v4 = *(void *)(*(void *)(*(void *)this + 72) + 3992);
      char v5 = this;
      this = (unsigned char *)physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v4 + 96, (uint64_t *)&v5);
      char v3 = v2[29];
    }
    v2[29] = v3 & 0xF7;
  }
  v2[30] = 0;
  return this;
}

void *physx::Sc::filterRbCollisionPairSecondStage@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, unsigned __int16 *a8@<X8>)
{
  void *(***v24)(unsigned __int16 *__return_ptr);
  int v25;
  uint64_t v26;
  void *v27;
  __int16 v28;
  char v30;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  __int16 *v38;
  _DWORD v40[4];
  _DWORD v41[13];
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  unsigned __int16 v54[8];

  *(void *)a8 = 0xFFFFFFFF00000000;
  uint64_t v47 = 0;
  getFilterInfo_ShapeSim((int *)&v47 + 1, (__n128 *)((char *)&v50 + 4), *(void *)(a2 + 8), *(__n128 **)(a2 + 56));
  FilterInfo_ShapeSiuint64_t m = getFilterInfo_ShapeSim((int *)&v47, (__n128 *)&v48, *(void *)(a3 + 8), (__n128 *)*(void *)(a3 + 56));
  uint64_t v34 = v51;
  uint64_t v35 = HIDWORD(v50);
  uint64_t v44 = v51;
  float v32 = v53;
  uint64_t v33 = v52;
  uint64_t v45 = v52;
  __int16 v46 = v53;
  int v14 = v48;
  int v13 = v49;
  v41[12] = v48;
  int v42 = v49;
  int v16 = HIDWORD(v49);
  int v15 = v50;
  unint64_t v43 = v50;
  unsigned int v36 = v47;
  uint64_t v38 = (__int16 *)(a8 + 1);
  float result = (*(void *(**)(unsigned __int16 *__return_ptr, __n128))a1)(v54, FilterInfo_ShapeSim);
  int v21 = v54[0];
  *a8 = v54[0];
  if ((v21 & 4) != 0)
  {
    if (*(void *)(a1 + 24))
    {
      if ((a7 & 1) == 0) {
        return result;
      }
      if (a6 == -1)
      {
        uint64_t v22 = *(void *)(a1 + 32);
        a6 = *(void *)(v22 + 16);
        if (a6 == 0xFFFFFFFFLL)
        {
          *(void *)uint64_t v54 = 0;
          a6 = *(unsigned int *)(v22 + 8);
          if ((*(_DWORD *)(v22 + 12) & 0x7FFFFFFFu) <= a6)
          {
            physx::shdfnd::Array<physx::Sc::ElementSimInteraction *,physx::shdfnd::ReflectionAllocator<physx::Sc::ElementSimInteraction *>>::growAndPushBack(v22, v54);
          }
          else
          {
            *(void *)(*(void *)v22 + 8 * a6) = 0;
            *(_DWORD *)(v22 + 8) = a6 + 1;
          }
        }
        else
        {
          uint64_t v23 = *(void *)v22;
          *(void *)(v22 + 16) = *(void *)(*(void *)v22 + 8 * a6);
          *(void *)(v23 + 8 * a6) = 0;
        }
      }
      float v24 = *(void *(****)(unsigned __int16 *__return_ptr))(a1 + 24);
      v41[8] = v35;
      v41[9] = v34;
      v41[10] = v33;
      v41[11] = v32;
      v41[4] = v14;
      v41[5] = v13;
      v41[6] = v16;
      v41[7] = v15;
      float result = (**v24)(v54);
      int v21 = v54[0];
      *a8 = v54[0];
      *((_DWORD *)a8 + 1) = a6;
    }
    else
    {
      *a8 = v21 & 0xFFF3;
      float result = (void *)physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScNPhaseCore.cpp", 270, "Filtering: eCALLBACK set but no filter callback defined.", v18, v19, v20, v30);
      int v21 = *a8;
    }
  }
  if ((~v21 & 3) == 0)
  {
    LOWORD(v21) = v21 & 0xFFFE;
    *a8 = v21;
  }
  if (a6 != -1)
  {
    float v25 = v21 & 0xC;
    if (v21)
    {
      if (v25 == 12)
      {
        float v26 = *(void *)(a1 + 24);
        v41[0] = v35;
        v41[1] = v34;
        v41[2] = v33;
        v41[3] = v32;
        v40[0] = v14;
        v40[1] = v13;
        v40[2] = v16;
        v40[3] = v15;
        float result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void, _DWORD *, void, _DWORD *, void))(*(void *)v26 + 8))(v26, a6, HIDWORD(v36), v41, v36, v40, 0);
        int v21 = *a8;
        if ((~v21 & 0xC) == 0) {
          goto LABEL_21;
        }
      }
    }
    else if (v25 == 12)
    {
      goto LABEL_22;
    }
    LOWORD(v21) = v21 & 0xFFF3;
    *a8 = v21;
LABEL_21:
    float v27 = *(void **)(a1 + 32);
    *(void *)(*v27 + 8 * a6) = v27[2];
    float32x4_t v27[2] = a6;
    *((_DWORD *)a8 + 1) = -1;
  }
LABEL_22:
  if ((a7 & 1) != 0 || (v21 & 4) == 0)
  {
    float v28 = *v38;
    if (a4
      && (v21 & 3) == 0
      && a5
      && (*(unsigned char *)(*(void *)(a4 + 80) + 44) & 1) != 0
      && (v28 & 1) != 0
      && (*(unsigned char *)(*(void *)(a5 + 80) + 44) & 1) != 0)
    {
      v28 &= ~1u;
    }
    *uint64_t v38 = v28;
  }
  return result;
}

uint64_t physx::Sc::NPhaseCore::runOverlapFilters(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, uint64_t a8, uint64_t a9)
{
  void *(*v60)(uint64_t *__return_ptr, void, long long *, void, long long *, char *, uint64_t, void);
  int v61;
  int v62;
  int v64;
  unsigned int v65;
  unsigned int v66;
  physx::Sc::ActorSim *v67;
  uint64_t v68;
  unsigned char v71[12];
  unint64_t v72;
  long long v73;
  long long v74;
  uint64_t v75;

  if (a2)
  {
    uint64_t v9 = 0;
    memset(v71, 0, sizeof(v71));
    uint64_t v59 = *(void *)(*(void *)result + 4000);
    unsigned int v60 = *(void *(**)(uint64_t *__return_ptr, void, long long *, void, long long *, char *, uint64_t, void))(*(void *)result + 4016);
    unsigned int v58 = *(_DWORD *)(*(void *)result + 4008);
    unsigned int v61 = *(_DWORD *)(*(void *)result + 4032);
    uint64_t v62 = *(_DWORD *)(*(void *)result + 4036);
    unsigned __int32 v68 = a2;
    uint64_t v57 = *(void *)(*(void *)result + 4024);
    while (1)
    {
      float v10 = (void *)(a3 + 24 * v9);
      uint64_t v11 = *v10;
      float v12 = *(physx::Sc::ActorSim **)(*v10 + 8);
      uint64_t v13 = *((void *)v12 + 10);
      int v14 = *(unsigned __int8 *)(v13 + 13);
      unsigned int v15 = gTypeData[*(unsigned __int8 *)(v13 + 13)] >> 1;
      if (*(unsigned char *)(v13 + 13))
      {
        int v16 = *(unsigned char *)(v13 + 44) & 1;
        v15 |= 16 * v16;
        int v17 = v16;
        uint64_t v18 = *(const physx::Sc::BodySim **)(*v10 + 8);
      }
      else
      {
        int v17 = 0;
        uint64_t v18 = 0;
        int v16 = 1;
      }
      uint64_t v19 = v10[1];
      uint64_t v20 = *(const physx::Sc::ActorSim **)(v19 + 8);
      uint64_t v21 = *((void *)v20 + 10);
      int v22 = *(unsigned __int8 *)(v21 + 13);
      unsigned int v23 = gTypeData[*(unsigned __int8 *)(v21 + 13)] >> 1;
      if (*(unsigned char *)(v21 + 13))
      {
        int v24 = *(unsigned char *)(v21 + 44) & 1;
        v23 |= 16 * v24;
        float v25 = *(const physx::Sc::BodySim **)(v19 + 8);
      }
      else
      {
        float v25 = 0;
        int v24 = 0;
      }
      if ((v17 | v24) == 1)
      {
        if (v62)
        {
          if (v61) {
            int v26 = v24;
          }
          else {
            int v26 = 0;
          }
          if (!v18 || !v25 || (v17 & v26 & 1) != 0) {
            goto LABEL_59;
          }
          goto LABEL_23;
        }
        if (v61) {
          int v27 = v24;
        }
        else {
          int v27 = 0;
        }
        if ((v17 & v27) == 1) {
          goto LABEL_59;
        }
      }
      if (!v18)
      {
        atomic_uint v67 = v12;
        uint64_t v65 = v23;
        uint64_t v66 = v15;
        uint64_t v64 = v17;
        if (v25)
        {
          float result = filterJointedBodies(v25, v12);
          if (result) {
            goto LABEL_59;
          }
        }
        int v28 = v14 == 2;
        int v29 = v22 == 2;
        uint64_t v31 = v11;
        if (((v28 ^ v29) & 1) == 0) {
          goto LABEL_40;
        }
        goto LABEL_33;
      }
LABEL_23:
      atomic_uint v67 = v12;
      uint64_t v65 = v23;
      uint64_t v66 = v15;
      uint64_t v64 = v17;
      float result = filterJointedBodies(v18, v20);
      if (result) {
        goto LABEL_59;
      }
      int v28 = v14 == 2;
      int v29 = v22 == 2;
      if (v28 != v29)
      {
        char v30 = v24 ^ 1;
        if (!v22) {
          char v30 = 0;
        }
        uint64_t v31 = v11;
        if ((v30 & 1) == 0 && *(unsigned char *)(*((void *)v18 + 17) + 159)) {
          goto LABEL_59;
        }
LABEL_33:
        if (v25)
        {
          int v32 = *(unsigned char *)(*((void *)v25 + 17) + 159) ? v16 : 0;
          if (v32 == 1) {
            goto LABEL_59;
          }
        }
        goto LABEL_40;
      }
      uint64_t v31 = v11;
LABEL_40:
      if (v29) {
        BOOL v33 = v28 == 0;
      }
      else {
        BOOL v33 = 1;
      }
      if (v33) {
        goto LABEL_45;
      }
      if (!*(unsigned char *)(*((void *)v18 + 17) + 159) || !*(unsigned char *)(*((void *)v25 + 17) + 159))
      {
        int v49 = *((_DWORD *)v67 + 13);
        if (v49)
        {
          uint64_t v50 = (uint64_t *)*((void *)v67 + 5);
          while (1)
          {
            uint64_t v52 = *v50++;
            int v51 = (const physx::Sc::ActorSim **)v52;
            if (*(unsigned char *)(v52 + 28) == 5 && (*v51 == v20 || v51[1] == v20)) {
              break;
            }
            if (!--v49) {
              goto LABEL_45;
            }
          }
          __int16 v39 = 0;
          atomic_uint v72 = 0xFFFFFFFF00000001;
          LOWORD(v38) = 1;
          goto LABEL_60;
        }
LABEL_45:
        atomic_uint v72 = 0xFFFFFFFF00000000;
        long long v34 = *(_OWORD *)(*(void *)(v31 + 56) + 16);
        uint64_t v73 = *(_OWORD *)(*(void *)(v19 + 56) + 16);
        unsigned int v74 = v34;
        float result = (uint64_t)v60(&v75, v66, &v74, v65, &v73, (char *)&v72 + 2, v59, v58);
        int v38 = (unsigned __int16)v75;
        if ((v75 & 4) != 0)
        {
          if (!v57)
          {
            LOWORD(v72) = v75 & 0xFFF3;
            float result = physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScNPhaseCore.cpp", 318, "Filtering: eCALLBACK set but no filter callback defined.", v35, v36, v37, v53);
            int v38 = (unsigned __int16)v72;
            goto LABEL_48;
          }
        }
        else
        {
LABEL_48:
          if ((~v38 & 3) == 0) {
            LOWORD(v38) = v38 & 0xFFFE;
          }
        }
        __int16 v39 = WORD1(v72);
        if ((v38 & 4) == 0)
        {
          if ((v38 & 3) != 0) {
            int v40 = 0;
          }
          else {
            int v40 = v24;
          }
          if ((v64 & v40 & WORD1(v72)) != 0) {
            __int16 v39 = WORD1(v72) & 0xFFFE;
          }
          WORD1(v72) = v39;
        }
        goto LABEL_60;
      }
LABEL_59:
      __int16 v39 = 0;
      atomic_uint v72 = 0xFFFFFFFF00000002;
      LOWORD(v38) = 2;
LABEL_60:
      uint64_t v41 = a4 + 8 * v9;
      *(_WORD *)uint64_t v41 = v38;
      *(_WORD *)(v41 + 2) = v39;
      *(_DWORD *)(v41 + 4) = HIDWORD(v72);
      if ((v38 & 1) == 0)
      {
        int v43 = *(_DWORD *)v71;
        int v42 = *(_DWORD *)&v71[4];
        int v44 = *(_DWORD *)&v71[4] + ((v38 & 2) >> 1);
        if ((v38 & 2) != 0) {
          int v45 = *(_DWORD *)v71;
        }
        else {
          int v45 = *(_DWORD *)v71 + 1;
        }
        BOOL v46 = (v38 & 4) == 0;
        uint64_t v47 = a8;
        if (!v46) {
          uint64_t v47 = a9;
        }
        int v48 = *(_DWORD *)&v71[8];
        if (v46) {
          int v42 = v44;
        }
        else {
          int v48 = *(_DWORD *)&v71[8] + 1;
        }
        *(_DWORD *)&v71[4] = v42;
        *(_DWORD *)&v71[8] = v48;
        if (v46) {
          int v43 = v45;
        }
        *(_DWORD *)unsigned int v71 = v43;
        *(_DWORD *)(v47 + 4 * (v9 >> 5)) |= 1 << v9;
      }
      if (++v9 == v68) {
        goto LABEL_83;
      }
    }
  }
  memset(v71, 0, sizeof(v71));
LABEL_83:
  *a5 = *(_DWORD *)v71;
  *a6 = *(_DWORD *)&v71[4];
  *a7 = *(_DWORD *)&v71[8];
  return result;
}

uint64_t physx::Sc::NPhaseCore::NPhaseCore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v5 = *(unsigned int *)(a3 + 220);
  int v6 = (*(_DWORD *)(a3 + 152) >> 7) & 1;
  *(_DWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = v5;
  *(void *)(a1 + 80) = v5;
  *(unsigned char *)(a1 + 88) = v6;
  if (v5) {
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, v5, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScContactReportBuffer.h", 169);
  else {
    uint64_t v7 = 0;
  }
  *(void *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 1061158912;
  *(void *)(a1 + 140) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 148) = 0;
  physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 96, 0x40u, (int8x8_t)0xFFFFFFFFLL);
  *(void *)(a1 + 696) = 0x4000000000;
  *(unsigned char *)(a1 + 680) = 1;
  *(void *)(a1 + 688) = a1 + 168;
  *(void *)(a1 + 704) = 32;
  *(_DWORD *)(a1 + 712) = 256;
  *(void *)(a1 + 720) = 0;
  *(void *)(a1 + 1264) = 0x4000000000;
  *(unsigned char *)(a1 + 1248) = 1;
  *(void *)(a1 + 1256) = a1 + 736;
  *(void *)(a1 + 1272) = 32;
  *(_DWORD *)(a1 + 1280) = 1024;
  *(void *)(a1 + 1288) = 0;
  *(void *)(a1 + 1832) = 0x4000000000;
  *(unsigned char *)(a1 + 1816) = 1;
  *(void *)(a1 + 1824) = a1 + 1304;
  *(void *)(a1 + 1840) = 256;
  *(_DWORD *)(a1 + 1848) = 26624;
  *(void *)(a1 + 1856) = 0;
  *(void *)(a1 + 2400) = 0x4000000000;
  *(unsigned char *)(a1 + 2384) = 1;
  *(void *)(a1 + 2392) = a1 + 1872;
  *(void *)(a1 + 2408) = 32;
  *(_DWORD *)(a1 + 2416) = 2560;
  *(void *)(a1 + 2424) = 0;
  *(void *)(a1 + 2968) = 0x4000000000;
  *(unsigned char *)(a1 + 2952) = 1;
  *(void *)(a1 + 2960) = a1 + 2440;
  *(void *)(a1 + 2976) = 32;
  *(_DWORD *)(a1 + 2984) = 1280;
  *(void *)(a1 + 2992) = 0;
  *(void *)(a1 + 3536) = 0x4000000000;
  *(unsigned char *)(a1 + 3520) = 1;
  *(void *)(a1 + 3528) = a1 + 3008;
  *(void *)(a1 + 3544) = 32;
  *(_DWORD *)(a1 + 3552) = 2048;
  *(void *)(a1 + 3560) = 0;
  uint64_t v8 = *(void *)(a2 + 24);
  *(void *)(a1 + 3584) = 0;
  *(void *)(a1 + 3592) = 0;
  *(_DWORD *)(a1 + 3600) = 0;
  *(void *)(a1 + 3576) = v8;
  *(void *)(a1 + 3568) = &unk_26E725778;
  *(void *)(a1 + 3608) = a1;
  *(void *)(a1 + 3616) = "ScNPhaseCore.mergeProcessedTriggerInteractions";
  *(void *)(a1 + 3624) = 0;
  uint64_t v9 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    float v10 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  }
  else {
    float v10 = "<allocation names disabled>";
  }
  uint64_t v11 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v9 + 24) + 16))(v9 + 24, 72, v10, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(void *)(a1 + 3632) = v11;
  physx::shdfnd::MutexImpl::MutexImpl(v11);
  *(_DWORD *)(a1 + 3640) = 0;
  *(_OWORD *)(a1 + 3648) = 0u;
  *(_OWORD *)(a1 + 3664) = 0u;
  *(void *)(a1 + 3680) = 0;
  *(void *)(a1 + 3688) = -3233808384;
  *(void *)(a1 + 3696) = 0;
  physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sc::BodyPairKey const,physx::Sc::ActorPair *>,physx::Sc::BodyPairKey,physx::shdfnd::Hash<physx::Sc::BodyPairKey>,physx::shdfnd::internal::HashMapBase<physx::Sc::BodyPairKey,physx::Sc::ActorPair *,physx::shdfnd::Hash<physx::Sc::BodyPairKey>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 3648, 0x40u, 0);
  *(void *)(a1 + 3736) = 0;
  *(_OWORD *)(a1 + 3704) = 0u;
  *(_OWORD *)(a1 + 3720) = 0u;
  *(void *)(a1 + 3744) = -3233808384;
  *(void *)(a1 + 3752) = 0;
  physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sc::ElementSimKey const,physx::Sc::ElementSimInteraction *>,physx::Sc::ElementSimKey,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::internal::HashMapBase<physx::Sc::ElementSimKey,physx::Sc::ElementSimInteraction *,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 3704, 0x40u, 0);
  uint64_t v12 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v13 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  }
  else {
    uint64_t v13 = "<allocation names disabled>";
  }
  int v14 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v12 + 24) + 16))(v12 + 24, 72, v13, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(void *)(a1 + 3760) = v14;
  physx::shdfnd::MutexImpl::MutexImpl(v14);
  uint64_t v15 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    int v16 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  }
  else {
    int v16 = "<allocation names disabled>";
  }
  int v17 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v15 + 24) + 16))(v15 + 24, 72, v16, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(void *)(a1 + 3768) = v17;
  physx::shdfnd::MutexImpl::MutexImpl(v17);
  uint64_t v18 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v19 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::FilterPairManager>::getName() [T = physx::Sc:"
  }
          ":FilterPairManager]";
  else {
    uint64_t v19 = "<allocation names disabled>";
  }
  uint64_t v20 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v18 + 24) + 16))(v18 + 24, 24, v19, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScNPhaseCore.cpp", 651);
  *uint64_t v20 = 0;
  v20[1] = 0;
  float32x4_t v20[2] = 0xFFFFFFFFLL;
  *(void *)(a1 + 152) = v20;
  return a1;
}

void physx::Sc::NPhaseCore::~NPhaseCore(physx::Sc::NPhaseCore *this)
{
  physx::Sc::NPhaseCore::clearContactReportActorPairs((uint64_t)this, 0);
  uint64_t v2 = *((void *)this + 19);
  if (v2)
  {
    int v3 = *(_DWORD *)(v2 + 12);
    if ((v3 & 0x80000000) == 0 && (v3 & 0x7FFFFFFF) != 0 && *(void *)v2 != 0) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2);
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 471);
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 470);
  if (*((void *)this + 463)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 456)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 454);
  *((void *)this + 446) = &unk_26E7231E8;
  *((void *)this + 448) = 0;
  if (*((_DWORD *)this + 887))
  {
    uint64_t v92 = 0;
    uint64_t v93 = 0;
    uint64_t v5 = *((void *)this + 445);
    if (v5)
    {
      do
      {
        uint64_t v91 = v5;
        int v6 = v93;
        if ((HIDWORD(v93) & 0x7FFFFFFFu) <= v93)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker>>::growAndPushBack((uint64_t)&v92, &v91);
        }
        else
        {
          *(void *)&v92[8 * v93] = v5;
          LODWORD(v93) = v6 + 1;
        }
        uint64_t v5 = **((void **)this + 445);
        *((void *)this + 445) = v5;
      }
      while (v5);
      uint64_t v7 = v92;
      int v8 = v93;
    }
    else
    {
      int v8 = 0;
      uint64_t v7 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker>>(v7, v8);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker>>(*((char **)this + 441), *((_DWORD *)this + 884));
    uint64_t v9 = *((unsigned int *)this + 884);
    float v10 = v92;
    if (v9)
    {
      uint64_t v11 = (void *)*((void *)this + 441);
      uint64_t v12 = &v11[v9];
      do
      {
        uint64_t v13 = *((unsigned int *)this + 886);
        if (v13)
        {
          int v14 = (void (***)(void))*v11;
          uint64_t v15 = v13 << 6;
          int v16 = (void (***)(void))*v11;
          do
          {
            if (v10 != &v92[8 * v93] && v16 == *(void (****)(void))v10) {
              v10 += 8;
            }
            else {
              (**v16)(v16);
            }
            v16 += 8;
            v14 += 8;
            v15 -= 64;
          }
          while (v15);
        }
        ++v11;
      }
      while (v11 != v12);
      float v10 = v92;
    }
    if ((v93 & 0x8000000000000000) == 0 && (v93 & 0x7FFFFFFF00000000) != 0 && v10 != 0) {
      (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v10);
    }
  }
  uint64_t v18 = *((unsigned int *)this + 884);
  if (v18)
  {
    uint64_t v19 = (void *)*((void *)this + 441);
    uint64_t v20 = 8 * v18;
    do
    {
      if (*v19) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      ++v19;
      v20 -= 8;
    }
    while (v20);
  }
  int v21 = *((_DWORD *)this + 885);
  if ((v21 & 0x80000000) == 0 && (v21 & 0x7FFFFFFF) != 0)
  {
    int v22 = (physx::Sc::NPhaseCore *)*((void *)this + 441);
    if (v22 == (physx::Sc::NPhaseCore *)((char *)this + 3008))
    {
      *((unsigned char *)this + 3520) = 0;
    }
    else if (v22)
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  if (*((_DWORD *)this + 745))
  {
    uint64_t v92 = 0;
    uint64_t v93 = 0;
    uint64_t v23 = *((void *)this + 374);
    if (v23)
    {
      do
      {
        uint64_t v91 = v23;
        int v24 = v93;
        if ((HIDWORD(v93) & 0x7FFFFFFFu) <= v93)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairContactReportData>>::growAndPushBack((uint64_t)&v92, &v91);
        }
        else
        {
          *(void *)&v92[8 * v93] = v23;
          LODWORD(v93) = v24 + 1;
        }
        uint64_t v23 = **((void **)this + 374);
        *((void *)this + 374) = v23;
      }
      while (v23);
      float v25 = v92;
      int v26 = v93;
    }
    else
    {
      int v26 = 0;
      float v25 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairContactReportData>>(v25, v26);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairContactReportData>>(*((char **)this + 370), *((_DWORD *)this + 742));
    if ((v93 & 0x8000000000000000) == 0 && (v93 & 0x7FFFFFFF00000000) != 0 && v92) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  uint64_t v27 = *((unsigned int *)this + 742);
  if (v27)
  {
    int v28 = (void *)*((void *)this + 370);
    uint64_t v29 = 8 * v27;
    do
    {
      if (*v28) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      ++v28;
      v29 -= 8;
    }
    while (v29);
  }
  int v30 = *((_DWORD *)this + 743);
  if ((v30 & 0x80000000) == 0 && (v30 & 0x7FFFFFFF) != 0)
  {
    uint64_t v31 = (physx::Sc::NPhaseCore *)*((void *)this + 370);
    if (v31 == (physx::Sc::NPhaseCore *)((char *)this + 2440))
    {
      *((unsigned char *)this + 2952) = 0;
    }
    else if (v31)
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  if (*((_DWORD *)this + 603))
  {
    uint64_t v92 = 0;
    uint64_t v93 = 0;
    uint64_t v32 = *((void *)this + 303);
    if (v32)
    {
      do
      {
        uint64_t v91 = v32;
        int v33 = v93;
        if ((HIDWORD(v93) & 0x7FFFFFFFu) <= v93)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerInteraction>>::growAndPushBack((uint64_t)&v92, &v91);
        }
        else
        {
          *(void *)&v92[8 * v93] = v32;
          LODWORD(v93) = v33 + 1;
        }
        uint64_t v32 = **((void **)this + 303);
        *((void *)this + 303) = v32;
      }
      while (v32);
      long long v34 = v92;
      int v35 = v93;
    }
    else
    {
      int v35 = 0;
      long long v34 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerInteraction>>(v34, v35);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerInteraction>>(*((char **)this + 299), *((_DWORD *)this + 600));
    uint64_t v36 = *((unsigned int *)this + 600);
    uint64_t v37 = v92;
    if (v36)
    {
      int v38 = (void *)*((void *)this + 299);
      __int16 v39 = &v38[v36];
      do
      {
        uint64_t v40 = *((unsigned int *)this + 602);
        if (v40)
        {
          uint64_t v41 = (void (***)(void))*v38;
          uint64_t v42 = 80 * v40;
          int v43 = (void (***)(void))*v38;
          do
          {
            if (v37 != &v92[8 * v93] && v43 == *(void (****)(void))v37) {
              v37 += 8;
            }
            else {
              (**v43)(v43);
            }
            v43 += 10;
            v41 += 10;
            v42 -= 80;
          }
          while (v42);
        }
        ++v38;
      }
      while (v38 != v39);
      uint64_t v37 = v92;
    }
    if ((v93 & 0x8000000000000000) == 0 && (v93 & 0x7FFFFFFF00000000) != 0 && v37 != 0) {
      (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v37);
    }
  }
  uint64_t v45 = *((unsigned int *)this + 600);
  if (v45)
  {
    BOOL v46 = (void *)*((void *)this + 299);
    uint64_t v47 = 8 * v45;
    do
    {
      if (*v46) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      ++v46;
      v47 -= 8;
    }
    while (v47);
  }
  int v48 = *((_DWORD *)this + 601);
  if ((v48 & 0x80000000) == 0 && (v48 & 0x7FFFFFFF) != 0)
  {
    int v49 = (physx::Sc::NPhaseCore *)*((void *)this + 299);
    if (v49 == (physx::Sc::NPhaseCore *)((char *)this + 1872))
    {
      *((unsigned char *)this + 2384) = 0;
    }
    else if (v49)
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  if (*((_DWORD *)this + 461))
  {
    uint64_t v92 = 0;
    uint64_t v93 = 0;
    uint64_t v50 = *((void *)this + 232);
    if (v50)
    {
      do
      {
        uint64_t v91 = v50;
        int v51 = v93;
        if ((HIDWORD(v93) & 0x7FFFFFFFu) <= v93)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction>>::growAndPushBack((uint64_t)&v92, &v91);
        }
        else
        {
          *(void *)&v92[8 * v93] = v50;
          LODWORD(v93) = v51 + 1;
        }
        uint64_t v50 = **((void **)this + 232);
        *((void *)this + 232) = v50;
      }
      while (v50);
      uint64_t v52 = v92;
      int v53 = v93;
    }
    else
    {
      int v53 = 0;
      uint64_t v52 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction>>(v52, v53);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction>>(*((char **)this + 228), *((_DWORD *)this + 458));
    uint64_t v54 = *((unsigned int *)this + 458);
    char v55 = v92;
    if (v54)
    {
      float v56 = (void *)*((void *)this + 228);
      uint64_t v57 = &v56[v54];
      do
      {
        unsigned int v58 = *((_DWORD *)this + 460);
        if (v58)
        {
          uint64_t v59 = (void (***)(void))*v56;
          uint64_t v60 = 104 * v58;
          unsigned int v61 = (void (***)(void))*v56;
          do
          {
            if (v55 != &v92[8 * v93] && v61 == *(void (****)(void))v55) {
              v55 += 8;
            }
            else {
              (**v61)(v61);
            }
            v61 += 13;
            v59 += 13;
            v60 -= 104;
          }
          while (v60);
        }
        ++v56;
      }
      while (v56 != v57);
      char v55 = v92;
    }
    if ((v93 & 0x8000000000000000) == 0 && (v93 & 0x7FFFFFFF00000000) != 0 && v55 != 0) {
      (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v55);
    }
  }
  uint64_t v63 = *((unsigned int *)this + 458);
  if (v63)
  {
    uint64_t v64 = (void *)*((void *)this + 228);
    uint64_t v65 = 8 * v63;
    do
    {
      if (*v64) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      ++v64;
      v65 -= 8;
    }
    while (v65);
  }
  int v66 = *((_DWORD *)this + 459);
  if ((v66 & 0x80000000) == 0 && (v66 & 0x7FFFFFFF) != 0)
  {
    atomic_uint v67 = (physx::Sc::NPhaseCore *)*((void *)this + 228);
    if (v67 == (physx::Sc::NPhaseCore *)((char *)this + 1304))
    {
      *((unsigned char *)this + 1816) = 0;
    }
    else if (v67)
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  if (*((_DWORD *)this + 319))
  {
    uint64_t v92 = 0;
    uint64_t v93 = 0;
    uint64_t v68 = *((void *)this + 161);
    if (v68)
    {
      do
      {
        uint64_t v91 = v68;
        int v69 = v93;
        if ((HIDWORD(v93) & 0x7FFFFFFFu) <= v93)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport>>::growAndPushBack((uint64_t)&v92, &v91);
        }
        else
        {
          *(void *)&v92[8 * v93] = v68;
          LODWORD(v93) = v69 + 1;
        }
        uint64_t v68 = **((void **)this + 161);
        *((void *)this + 161) = v68;
      }
      while (v68);
      unsigned int v70 = v92;
      int v71 = v93;
      int v72 = HIDWORD(v93);
    }
    else
    {
      int v72 = 0;
      int v71 = 0;
      unsigned int v70 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport>>(v70, v71);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport>>(*((char **)this + 157), *((_DWORD *)this + 316));
    if ((v72 & 0x80000000) == 0 && (v72 & 0x7FFFFFFF) != 0 && v70) {
      (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v70);
    }
  }
  uint64_t v73 = *((unsigned int *)this + 316);
  if (v73)
  {
    unsigned int v74 = (void *)*((void *)this + 157);
    uint64_t v75 = 8 * v73;
    do
    {
      if (*v74) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      ++v74;
      v75 -= 8;
    }
    while (v75);
  }
  int v76 = *((_DWORD *)this + 317);
  if ((v76 & 0x80000000) == 0 && (v76 & 0x7FFFFFFF) != 0)
  {
    unsigned __int32 v77 = (physx::Sc::NPhaseCore *)*((void *)this + 157);
    if (v77 == (physx::Sc::NPhaseCore *)((char *)this + 736))
    {
      *((unsigned char *)this + 1248) = 0;
    }
    else if (v77)
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  if (*((_DWORD *)this + 177))
  {
    uint64_t v92 = 0;
    uint64_t v93 = 0;
    uint64_t v78 = *((void *)this + 90);
    if (v78)
    {
      do
      {
        uint64_t v91 = v78;
        int v79 = v93;
        if ((HIDWORD(v93) & 0x7FFFFFFFu) <= v93)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPair>>::growAndPushBack((uint64_t)&v92, &v91);
        }
        else
        {
          *(void *)&v92[8 * v93] = v78;
          LODWORD(v93) = v79 + 1;
        }
        uint64_t v78 = **((void **)this + 90);
        *((void *)this + 90) = v78;
      }
      while (v78);
      unsigned int v80 = v92;
      int v81 = v93;
      int v82 = HIDWORD(v93);
    }
    else
    {
      int v82 = 0;
      int v81 = 0;
      unsigned int v80 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPair>>(v80, v81);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPair>>(*((char **)this + 86), *((_DWORD *)this + 174));
    if ((v82 & 0x80000000) == 0 && (v82 & 0x7FFFFFFF) != 0 && v80) {
      (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v80);
    }
  }
  uint64_t v83 = *((unsigned int *)this + 174);
  if (v83)
  {
    int v84 = (void *)*((void *)this + 86);
    uint64_t v85 = 8 * v83;
    do
    {
      if (*v84) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      ++v84;
      v85 -= 8;
    }
    while (v85);
  }
  int v86 = *((_DWORD *)this + 175);
  if ((v86 & 0x80000000) == 0 && (v86 & 0x7FFFFFFF) != 0)
  {
    unsigned int v87 = (physx::Sc::NPhaseCore *)*((void *)this + 86);
    if (v87 == (physx::Sc::NPhaseCore *)((char *)this + 168))
    {
      *((unsigned char *)this + 680) = 0;
    }
    else if (v87)
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  if (*((void *)this + 12)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 8)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v88 = *((_DWORD *)this + 15);
  if ((v88 & 0x80000000) == 0 && (v88 & 0x7FFFFFFF) != 0 && *((void *)this + 6)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v89 = *((_DWORD *)this + 9);
  if ((v89 & 0x80000000) == 0 && (v89 & 0x7FFFFFFF) != 0 && *((void *)this + 3)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v90 = *((_DWORD *)this + 5);
  if ((v90 & 0x80000000) == 0 && (v90 & 0x7FFFFFFF) != 0)
  {
    if (*((void *)this + 1)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
}

uint64_t physx::Sc::NPhaseCore::clearContactReportActorPairs(uint64_t this, char a2)
{
  uint64_t v3 = this;
  uint64_t v4 = (void *)(this + 8);
  unint64_t v5 = *(unsigned int *)(this + 16);
  if (v5)
  {
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v7 = *(void *)(*v4 + 8 * i);
      unsigned int v8 = *(unsigned __int16 *)(v7 + 4);
      *(_WORD *)(v7 + 4) = v8 - 1;
      if (v8 < 2)
      {
        uint64_t v9 = *(void *)(v7 + 24);
        unsigned int v11 = *(_DWORD *)(v9 + 16);
        unsigned int v10 = *(_DWORD *)(v9 + 20);
        if (v11 >= v10) {
          unsigned int v12 = v10;
        }
        else {
          unsigned int v12 = v11;
        }
        if (v11 > v10) {
          unsigned int v10 = v11;
        }
        unint64_t v14 = __PAIR64__(v10, v12);
        this = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sc::BodyPairKey const,physx::Sc::ActorPair *>,physx::Sc::BodyPairKey,physx::shdfnd::Hash<physx::Sc::BodyPairKey>,physx::shdfnd::internal::HashMapBase<physx::Sc::BodyPairKey,physx::Sc::ActorPair *,physx::shdfnd::Hash<physx::Sc::BodyPairKey>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v3 + 3648, (int *)&v14);
        uint64_t v13 = *(void **)(v7 + 24);
        if (v13)
        {
          --*(_DWORD *)(v3 + 2980);
          *uint64_t v13 = *(void *)(v3 + 2992);
          *(void *)(v3 + 2992) = v13;
          *(void *)(v7 + 24) = 0;
        }
        --*(_DWORD *)(v3 + 1276);
        *(void *)uint64_t v7 = *(void *)(v3 + 1288);
        *(void *)(v3 + 1288) = v7;
        unint64_t v5 = *(unsigned int *)(v3 + 16);
      }
      else
      {
        *(_WORD *)v7 &= ~2u;
      }
    }
  }
  if (a2)
  {
    unint64_t v14 = 0;
    physx::shdfnd::Array<physx::Sc::ActorPairReport *,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport *>>::resize((uint64_t)v4, 0, &v14);
    return physx::shdfnd::Array<physx::Sc::ActorPairReport *,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport *>>::recreate((uint64_t)v4, *(_DWORD *)(v3 + 16));
  }
  else
  {
    *(_DWORD *)(v3 + 16) = 0;
  }
  return this;
}

void *physx::Cm::DelegateTask<physx::Sc::NPhaseCore,&physx::Sc::NPhaseCore::mergeProcessedTriggerInteractions>::~DelegateTask(void *result)
{
  *float result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::Sc::NPhaseCore::findInteraction(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 <= a3) {
    unint64_t v3 = a2;
  }
  else {
    unint64_t v3 = a3;
  }
  if (a2 <= a3) {
    unint64_t v4 = a3;
  }
  else {
    unint64_t v4 = a2;
  }
  if (!*(_DWORD *)(a1 + 3756)) {
    return 0;
  }
  unsigned int v5 = (v4 << 14) & 0xFFFF0000 | (unsigned __int16)(v3 >> 2);
  unsigned int v6 = 9 * ((v5 + ~(v5 << 15)) ^ ((v5 + ~(v5 << 15)) >> 10));
  uint64_t v7 = *(unsigned int *)(*(void *)(a1 + 3728)
                       + 4
                       * ((*(_DWORD *)(a1 + 3740) - 1) & (((v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11)) ^ (((v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11)) >> 16))));
  if (v7 == -1) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 3712);
  while (1)
  {
    uint64_t v9 = (uint64_t *)(v8 + 24 * v7);
    uint64_t v11 = *v9;
    uint64_t v10 = v9[1];
    if (v11 == v3 && v10 == v4) {
      break;
    }
    uint64_t v7 = *(unsigned int *)(*(void *)(a1 + 3720) + 4 * v7);
    if (v7 == -1) {
      return 0;
    }
  }
  return *(void *)(v8 + 24 * v7 + 16);
}

physx::Sc::ElementInteractionMarker *physx::Sc::NPhaseCore::onOverlapCreated(physx::Sc::ElementInteractionMarker *result, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    unint64_t v3 = result;
    uint64_t v4 = a3;
    unsigned int v5 = (physx::Sc::ElementSim **)(a2 + 8);
    do
    {
      float result = physx::Sc::NPhaseCore::createRbElementInteraction(v3, *v5, *(v5 - 1), 0, 0, 0);
      v5 += 3;
      --v4;
    }
    while (v4);
  }
  return result;
}

physx::Sc::ElementInteractionMarker *physx::Sc::NPhaseCore::createRbElementInteraction(physx::Sc::NPhaseCore *a1, physx::Sc::ElementSim *a2, physx::Sc::ElementSim *a3, uint64_t a4, physx::Sc::ShapeInteraction *a5, physx::Sc::ElementInteractionMarker *a6)
{
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *((void *)a1 + 19);
  uint64_t v14 = *(void *)(*(void *)a1 + 4000);
  v18[0] = *(void *)(*(void *)a1 + 4016);
  v18[1] = v14;
  int v19 = *(_DWORD *)(v12 + 4008);
  uint64_t v20 = *(void *)(v12 + 4024);
  uint64_t v21 = v13;
  uint64_t v22 = *(void *)(v12 + 4032);
  char v17 = 0;
  filterRbCollisionPair((uint64_t)v18, (uint64_t)a2, (uint64_t)a3, 0xFFFFFFFFLL, (BOOL *)&v17, 0, v16);
  if (v16[0]) {
    return 0;
  }
  else {
    return physx::Sc::NPhaseCore::createRbElementInteraction(a1, (uint64_t)v16, a2, a3, a4, a5, a6, v17);
  }
}

BOOL physx::shdfnd::internal::HashMapBase<physx::Sc::ElementSimKey,physx::Sc::ElementSimInteraction *,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::NonTrackingAllocator>::insert(int32x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int8x8_t a5)
{
  *(void *)&long long v10 = a2;
  *((void *)&v10 + 1) = a3;
  unsigned __int8 v9 = 0;
  unsigned int v6 = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sc::ElementSimKey const,physx::Sc::ElementSimInteraction *>,physx::Sc::ElementSimKey,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::internal::HashMapBase<physx::Sc::ElementSimKey,physx::Sc::ElementSimInteraction *,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(a1, &v10, &v9, a5);
  int v7 = v9;
  if (!v9)
  {
    *(_OWORD *)unsigned int v6 = v10;
    v6[2] = a4;
  }
  return v7 == 0;
}

unsigned char *physx::Sc::NPhaseCore::onOverlapRemoved(uint64_t a1, unint64_t a2, unint64_t a3, int a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a5 || (float result = (unsigned char *)physx::Sc::NPhaseCore::findInteraction(a1, a3, a2), (a5 = (uint64_t)result) != 0))
  {
    return physx::Sc::NPhaseCore::releaseElementPair(a1, a5, 4, a4, 1, a6, a7);
  }
  return result;
}

unsigned char *physx::Sc::NPhaseCore::releaseElementPair(uint64_t a1, uint64_t a2, char a3, int a4, int a5, uint64_t a6, char a7)
{
  float result = physx::Sc::Interaction::setClean((unsigned char *)(a2 + 8), a5);
  if ((*(unsigned char *)(a2 + 37) & 0x10) != 0)
  {
    uint64_t v14 = *(unsigned int *)(a2 + 56);
    uint64_t v15 = *(void *)a1;
    uint64_t v16 = *(void *)(a2 + 40);
    uint64_t v17 = *(void *)(a2 + 48);
    uint64_t v33 = 0;
    getFilterInfo_ShapeSim((int *)&v33 + 1, v28, *(void *)(v16 + 8), *(__n128 **)(v16 + 56));
    getFilterInfo_ShapeSim((int *)&v33, &v34, *(void *)(v17 + 8), *(__n128 **)(v17 + 56));
    uint64_t v18 = *(void *)(v15 + 4024);
    __n128 v31 = v34;
    __n128 v32 = v28[0];
    float result = (unsigned char *)(*(uint64_t (**)(uint64_t, uint64_t, void, __n128 *, void, __n128 *, void))(*(void *)v18 + 8))(v18, v14, HIDWORD(v33), &v32, v33, &v31, a3 & 1);
    int v19 = *(void **)(a1 + 152);
    *(void *)(*v19 + 8 * v14) = v19[2];
    v19[2] = v14;
  }
  int v20 = *(unsigned __int8 *)(a2 + 36);
  if (*(unsigned char *)(a2 + 36))
  {
    if (v20 == 2)
    {
      float result = (unsigned char *)(**(uint64_t (***)(uint64_t))a2)(a2);
      --*(_DWORD *)(a1 + 3548);
      *(void *)a2 = *(void *)(a1 + 3560);
      *(void *)(a1 + 3560) = a2;
    }
    else if (v20 == 1)
    {
      char v30 = 0;
      v34.n128_u16[4] = -1;
      v34.n128_u64[0] = -1;
      if (physx::Sc::findTriggerContacts(a2, 1, a3 & 1, (uint64_t)v28, (uint64_t)&v34, *(void *)(*(void *)a1 + 4256) + 16))
      {
        uint64_t v21 = *(void *)a1;
        unsigned int v22 = *(_DWORD *)(*(void *)a1 + 2136);
        if ((*(_DWORD *)(*(void *)a1 + 2140) & 0x7FFFFFFFu) <= v22)
        {
          physx::shdfnd::Array<physx::PxTriggerPair,physx::shdfnd::ReflectionAllocator<physx::PxTriggerPair>>::growAndPushBack(v21 + 2128, (long long *)v28);
        }
        else
        {
          uint64_t v23 = *(void *)(v21 + 2128) + 40 * v22;
          __n128 v24 = v28[1];
          *(__n128 *)uint64_t v23 = v28[0];
          *(__n128 *)(v23 + 16) = v24;
          *(_DWORD *)(v23 + 32) = v29;
          *(unsigned char *)(v23 + 36) = v30;
          ++*(_DWORD *)(v21 + 2136);
        }
        uint64_t v25 = *(void *)(*(void *)a1 + 2144);
        unsigned int v26 = *(_DWORD *)(v25 + 8);
        if ((*(_DWORD *)(v25 + 12) & 0x7FFFFFFFu) <= v26)
        {
          physx::shdfnd::Array<physx::Sc::TriggerPairExtraData,physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerPairExtraData>>::growAndPushBack(v25, (uint64_t *)&v34);
        }
        else
        {
          uint64_t v27 = *(void *)v25 + 12 * v26;
          *(void *)uint64_t v27 = v34.n128_u64[0];
          *(_DWORD *)(v27 + 8) = v34.n128_u32[2];
          ++*(_DWORD *)(v25 + 8);
        }
      }
      float result = (unsigned char *)(**(uint64_t (***)(uint64_t))a2)(a2);
      --*(_DWORD *)(a1 + 2412);
      *(void *)a2 = *(void *)(a1 + 2424);
      *(void *)(a1 + 2424) = a2;
    }
  }
  else
  {
    if ((a3 & 3) != 0) {
      physx::Sc::NPhaseCore::lostTouchReports(a1, (physx::Sc::ShapeInteraction *)a2, a3, a4, a6, a7);
    }
    float result = (unsigned char *)(**(uint64_t (***)(uint64_t))a2)(a2);
    --*(_DWORD *)(a1 + 1844);
    *(void *)a2 = *(void *)(a1 + 1856);
    *(void *)(a1 + 1856) = a2;
  }
  return result;
}

unsigned char *physx::Sc::NPhaseCore::onVolumeRemoved(unsigned char *result, uint64_t a2, char a3, uint64_t a4, char a5)
{
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(unsigned int *)(v5 + 52);
  if (v6)
  {
    long long v10 = result;
    char v11 = a3 | 3;
    uint64_t v12 = *(void *)(v5 + 40);
    uint64_t v13 = 8 * v6;
    while (1)
    {
      uint64_t v14 = *(void *)(v12 - 8 + v13);
      if ((*(unsigned char *)(v14 + 29) & 1) != 0 && (*(void *)(v14 + 32) == a2 || *(void *)(v14 + 40) == a2)) {
        break;
      }
      v13 -= 8;
      if (!v13) {
        return result;
      }
    }
    float result = physx::Sc::NPhaseCore::releaseElementPair((uint64_t)result, v14 - 8, a3 | 3u, 0, 1, a4, a5);
    if (v13 != 8)
    {
      for (uint64_t i = v13 - 16; ; i -= 8)
      {
        uint64_t v16 = *(void *)(v12 + i);
        if ((*(unsigned char *)(v16 + 29) & 1) != 0 && (*(void *)(v16 + 32) == a2 || *(void *)(v16 + 40) == a2))
        {
          float result = physx::Sc::NPhaseCore::releaseElementPair((uint64_t)v10, v16 - 8, v11, 0, 1, a4, a5);
          if (!i) {
            return result;
          }
        }
        else if (!i)
        {
          return result;
        }
      }
    }
  }
  return result;
}

physx::Sc::ElementInteractionMarker *physx::Sc::NPhaseCore::createRbElementInteraction(physx::Sc::NPhaseCore *a1, uint64_t a2, physx::Sc::ElementSim *a3, physx::Sc::ElementSim *a4, uint64_t a5, physx::Sc::ShapeInteraction *a6, physx::Sc::ElementInteractionMarker *a7, char a8)
{
  if ((*(_WORD *)a2 & 2) != 0)
  {
    float result = physx::Sc::NPhaseCore::createElementInteractionMarker(a1, a3, a4, a7);
  }
  else if (a8)
  {
    __int16 v12 = *(_WORD *)(a2 + 2);
    float result = physx::Sc::NPhaseCore::createTriggerInteraction((uint64_t)a1, a3, a4, &v12);
  }
  else
  {
    unsigned __int16 v13 = *(_WORD *)(a2 + 2);
    float result = physx::Sc::NPhaseCore::createShapeInteraction((uint64_t)a1, (uint64_t)a3, (uint64_t)a4, &v13, a5, a6);
  }
  uint64_t v11 = *(unsigned int *)(a2 + 4);
  if (v11 != -1)
  {
    *((unsigned char *)result + 37) |= 0x10u;
    *(void *)(**((void **)a1 + 19) + 8 * v11) = result;
    *((_DWORD *)result + 14) = v11;
  }
  return result;
}

physx::Sc::ShapeInteraction *physx::Sc::NPhaseCore::createShapeInteraction(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, uint64_t a5, physx::Sc::ShapeInteraction *this)
{
  uint64_t v6 = this;
  uint64_t v9 = a2;
  uint64_t v11 = *(void *)(a2 + 8);
  uint64_t v12 = *(void *)(a3 + 8);
  uint64_t v13 = *(void *)(v11 + 80);
  int v14 = *(unsigned __int8 *)(v13 + 13);
  int v15 = *(unsigned __int8 *)(*(void *)(v12 + 80) + 13);
  if (v14 == 2 && v15 == 2)
  {
    BOOL v17 = *(unsigned char *)(*(void *)(v11 + 136) + 159) != 0;
  }
  else
  {
    if (!*(unsigned char *)(v13 + 13)) {
      goto LABEL_21;
    }
    BOOL v17 = 0;
  }
  BOOL v18 = v15 == 1 && v14 == 2;
  if (v18
    || v17
    || (v14 == 1 ? (BOOL v19 = v15 == 1) : (BOOL v19 = 0),
        v19 && (*(unsigned char *)(v13 + 44) & 1) != 0 || v14 == v15 && *(_DWORD *)(v11 + 88) < *(_DWORD *)(v12 + 88)))
  {
LABEL_21:
    uint64_t v20 = a3;
    if (this) {
      goto LABEL_27;
    }
    goto LABEL_24;
  }
  uint64_t v20 = a2;
  uint64_t v9 = a3;
  if (this) {
    goto LABEL_27;
  }
LABEL_24:
  uint64_t v6 = *(physx::Sc::ShapeInteraction **)(a1 + 1856);
  if (!v6)
  {
    physx::shdfnd::PoolBase<physx::Sc::ShapeInteraction,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction>>::allocateSlab(a1 + 1296);
    uint64_t v6 = *(physx::Sc::ShapeInteraction **)(a1 + 1856);
  }
  *(void *)(a1 + 1856) = *(void *)v6;
  ++*(_DWORD *)(a1 + 1844);
LABEL_27:
  unsigned __int16 v22 = *a4;
  return physx::Sc::ShapeInteraction::ShapeInteraction(v6, v20, v9, &v22, a5);
}

physx::Sc::TriggerInteraction *physx::Sc::NPhaseCore::createTriggerInteraction(uint64_t a1, physx::Sc::ShapeSim *a2, physx::Sc::ShapeSim *a3, _WORD *a4)
{
  char v8 = *(unsigned char *)(*((void *)a3 + 7) + 64);
  uint64_t v9 = *(physx::Sc::TriggerInteraction **)(a1 + 2424);
  if (!v9)
  {
    physx::shdfnd::PoolBase<physx::Sc::TriggerInteraction,physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerInteraction>>::allocateSlab(a1 + 1864);
    uint64_t v9 = *(physx::Sc::TriggerInteraction **)(a1 + 2424);
  }
  if ((v8 & 4) != 0) {
    long long v10 = a3;
  }
  else {
    long long v10 = a2;
  }
  if ((v8 & 4) != 0) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = a3;
  }
  *(void *)(a1 + 2424) = *(void *)v9;
  ++*(_DWORD *)(a1 + 2412);
  float result = physx::Sc::TriggerInteraction::TriggerInteraction(v9, v10, v11);
  *((_WORD *)result + 38) = *((_WORD *)result + 38) & 0xFFE0 | *a4 & 0x14;
  return result;
}

physx::Sc::ElementInteractionMarker *physx::Sc::NPhaseCore::createElementInteractionMarker(physx::Sc::NPhaseCore *this, physx::Sc::ElementSim *a2, physx::Sc::ElementSim *a3, physx::Sc::ElementInteractionMarker *a4)
{
  int v7 = a4;
  if (!a4)
  {
    int v7 = (physx::Sc::ElementInteractionMarker *)*((void *)this + 445);
    if (!v7)
    {
      physx::shdfnd::PoolBase<physx::Sc::ElementInteractionMarker,physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker>>::allocateSlab((uint64_t)this + 3000);
      int v7 = (physx::Sc::ElementInteractionMarker *)*((void *)this + 445);
    }
    *((void *)this + 445) = *(void *)v7;
    ++*((_DWORD *)this + 887);
  }
  uint64_t v9 = *((void *)a3 + 1);
  *((void *)v7 + 1) = *((void *)a2 + 1);
  *((void *)v7 + 2) = v9;
  *((void *)v7 + 3) = -1;
  *((_DWORD *)v7 + 8) = -1;
  *((_WORD *)v7 + 18) = 1282;
  *((unsigned char *)v7 + 38) = 0;
  *((void *)v7 + 5) = a2;
  *((void *)v7 + 6) = a3;
  *((_DWORD *)v7 + 14) = -1;
  *(void *)int v7 = &unk_26E7258B0;
  if (!a4)
  {
    physx::Sc::activateInteraction((physx::Sc::ElementInteractionMarker *)((char *)v7 + 8), 0, a3, (int8x8_t)-1);
    physx::Sc::ActorSim::registerInteractionInActor(*((physx::Sc::ActorSim **)v7 + 1), (physx::Sc::ElementInteractionMarker *)((char *)v7 + 8));
    physx::Sc::ActorSim::registerInteractionInActor(*((physx::Sc::ActorSim **)v7 + 2), (physx::Sc::ElementInteractionMarker *)((char *)v7 + 8));
    physx::Sc::Scene::registerInteraction(*(void *)(*((void *)v7 + 1) + 72), (physx::Sc::ElementInteractionMarker *)((char *)v7 + 8), 0);
    unint64_t v11 = *((void *)v7 + 5);
    unint64_t v12 = *((void *)v7 + 6);
    if (v11 <= v12) {
      uint64_t v13 = *((void *)v7 + 5);
    }
    else {
      uint64_t v13 = *((void *)v7 + 6);
    }
    if (v11 <= v12) {
      uint64_t v14 = *((void *)v7 + 6);
    }
    else {
      uint64_t v14 = *((void *)v7 + 5);
    }
    physx::shdfnd::internal::HashMapBase<physx::Sc::ElementSimKey,physx::Sc::ElementSimInteraction *,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::NonTrackingAllocator>::insert((int32x2_t *)(*(void *)(*(void *)(*((void *)v7 + 1) + 72) + 3992) + 3704), v13, v14, (uint64_t)v7, v10);
  }
  return v7;
}

uint64_t filterRbCollisionPair@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, BOOL *a5@<X4>, char a6@<W5>, unsigned __int16 *a7@<X8>)
{
  char v7 = a6;
  uint64_t v11 = result;
  uint64_t v13 = *(void *)(a2 + 8);
  int v14 = *(unsigned __int8 *)(*(void *)(v13 + 80) + 13);
  if ((v14 - 1) >= 2) {
    int v15 = 0;
  }
  else {
    int v15 = *(const physx::Sc::BodySim **)(a2 + 8);
  }
  uint64_t v16 = *(const physx::Sc::ActorSim **)(a3 + 8);
  int v17 = *(unsigned __int8 *)(*((void *)v16 + 10) + 13);
  if ((v17 - 1) >= 2) {
    BOOL v18 = 0;
  }
  else {
    BOOL v18 = *(const physx::Sc::BodySim **)(a3 + 8);
  }
  int v19 = *(unsigned __int8 *)(*(void *)(a2 + 56) + 64);
  int v20 = *(unsigned __int8 *)(*(void *)(a3 + 56) + 64);
  *a5 = ((v20 | v19) & 4) != 0;
  if (((v20 | v19) & 4) != 0)
  {
    if ((v19 & v20 & 4) != 0)
    {
LABEL_12:
      if (a4 != -1)
      {
        uint64_t v23 = *(void **)(v11 + 32);
        *(void *)(*v23 + 8 * a4) = v23[2];
        v23[2] = a4;
      }
      unint64_t v24 = 0xFFFFFFFF00000001;
      goto LABEL_29;
    }
    goto LABEL_49;
  }
  if (!v15)
  {
    int v21 = 0;
    if (v18) {
      goto LABEL_10;
    }
LABEL_16:
    int v22 = 0;
    goto LABEL_17;
  }
  int v21 = *(unsigned char *)(*((void *)v15 + 10) + 44) & 1;
  if (!v18) {
    goto LABEL_16;
  }
LABEL_10:
  int v22 = *(unsigned char *)(*((void *)v18 + 10) + 44) & 1;
LABEL_17:
  if ((v21 | v22) == 1)
  {
    if (*(_DWORD *)(result + 44))
    {
      if (!v15 || v18 == 0) {
        goto LABEL_26;
      }
    }
    if (!*(_DWORD *)(result + 40)) {
      int v22 = 0;
    }
    if ((v21 & v22) == 1)
    {
LABEL_26:
      if (a4 != -1)
      {
        unsigned int v26 = *(void **)(result + 32);
        *(void *)(*v26 + 8 * a4) = v26[2];
        v26[2] = a4;
      }
      unint64_t v24 = 0xFFFFFFFF00000002;
LABEL_29:
      *(void *)a7 = v24;
      return result;
    }
  }
  __n128 v34 = a7;
  if (v15)
  {
    float result = filterJointedBodies(v15, v16);
    if ((result & 1) == 0)
    {
LABEL_38:
      BOOL v28 = v14 == 2 && v17 == 2;
      a7 = v34;
      char v7 = a6;
      if (v28)
      {
        int v29 = *(_DWORD *)(v13 + 52);
        if (v29)
        {
          char v30 = *(uint64_t **)(v13 + 40);
          do
          {
            uint64_t v32 = *v30++;
            __n128 v31 = (const physx::Sc::ActorSim **)v32;
            if (*(unsigned char *)(v32 + 28) == 5 && (*v31 == v16 || v31[1] == v16)) {
              goto LABEL_12;
            }
          }
          while (--v29);
        }
      }
LABEL_49:
      return (uint64_t)physx::Sc::filterRbCollisionPairSecondStage(v11, a2, a3, (uint64_t)v15, (uint64_t)v18, a4, v7, a7);
    }
  }
  else
  {
    if (!v18) {
      goto LABEL_38;
    }
    float result = filterJointedBodies(v18, (const physx::Sc::ActorSim *)v13);
    if (!result) {
      goto LABEL_38;
    }
  }
  if (a4 != -1)
  {
    uint64_t v27 = *(void **)(v11 + 32);
    *(void *)(*v27 + 8 * a4) = v27[2];
    float32x4_t v27[2] = a4;
  }
  *(void *)__n128 v34 = 0xFFFFFFFF00000002;
  return result;
}

int32x2_t *physx::Sc::NPhaseCore::managerNewTouch(int32x2_t *this, int32x2_t **a2, int8x8_t a3)
{
  if (!a2[9])
  {
    this = physx::Sc::NPhaseCore::findActorPair(this, a2[5], a2[6], a2[8] & 0x1DC, a3);
    ++this->i16[2];
    a2[9] = this;
  }
  return this;
}

int32x2_t *physx::Sc::NPhaseCore::findActorPair(int32x2_t *this, int32x2_t *a2, int32x2_t *a3, int a4, int8x8_t a5)
{
  unsigned int v9 = *(_DWORD *)(*(void *)&a2[1] + 88);
  unsigned int v10 = *(_DWORD *)(*(void *)&a3[1] + 88);
  if (v9 <= v10) {
    int32x2_t v11 = a2[1];
  }
  else {
    int32x2_t v11 = a3[1];
  }
  if (v9 <= v10) {
    int32x2_t v12 = a3[1];
  }
  else {
    int32x2_t v12 = a2[1];
  }
  uint64_t v13 = *(unsigned int *)(*(void *)&v11 + 88);
  uint64_t v14 = *(unsigned int *)(*(void *)&v12 + 88);
  unsigned int v15 = this[460].u32[1];
  if (v15)
  {
    unsigned int v16 = 9
        * ((((unsigned __int16)v13 | ((unsigned __int16)v14 << 16))
          + ~(((unsigned __int16)v13 | ((unsigned __int16)v14 << 16)) << 15)) ^ ((((unsigned __int16)v13 | ((unsigned __int16)v14 << 16))
                                                                                              + ~(((unsigned __int16)v13 | ((unsigned __int16)v14 << 16)) << 15)) >> 10));
    unsigned int v17 = (v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11);
    unsigned int v18 = (v17 ^ HIWORD(v17)) & (v15 - 1);
    uint64_t v19 = *(unsigned int *)(*(void *)&this[459] + 4 * v18);
    if (v19 != -1)
    {
      while (1)
      {
        uint64_t v20 = *(void *)&this[457] + 16 * v19;
        if (*(_DWORD *)v20 == v13 && *(_DWORD *)(v20 + 4) == v14) {
          break;
        }
        uint64_t v19 = *(unsigned int *)(*(void *)&this[458] + 4 * v19);
        if (v19 == -1) {
          goto LABEL_16;
        }
      }
      uint64_t v42 = *(void *)(v20 + 8);
      uint64_t v28 = v20 + 8;
      float result = (int32x2_t *)v42;
      if (v42) {
        goto LABEL_28;
      }
      goto LABEL_24;
    }
  }
  else
  {
    unsigned int v18 = 0;
  }
LABEL_16:
  if (this[462].i32[1] == this[460].i32[0])
  {
    if (v15) {
      unsigned int v22 = 2 * v15;
    }
    else {
      unsigned int v22 = 16;
    }
    if (v15 < v22)
    {
      physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sc::BodyPairKey const,physx::Sc::ActorPair *>,physx::Sc::BodyPairKey,physx::shdfnd::Hash<physx::Sc::BodyPairKey>,physx::shdfnd::internal::HashMapBase<physx::Sc::BodyPairKey,physx::Sc::ActorPair *,physx::shdfnd::Hash<physx::Sc::BodyPairKey>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)&this[456], v22, a5);
      unsigned int v15 = this[460].u32[1];
    }
    unsigned int v23 = 9
        * ((((unsigned __int16)v13 | ((unsigned __int16)v14 << 16))
          + ~(((unsigned __int16)v13 | ((unsigned __int16)v14 << 16)) << 15)) ^ ((((unsigned __int16)v13 | ((unsigned __int16)v14 << 16))
                                                                                              + ~(((unsigned __int16)v13 | ((unsigned __int16)v14 << 16)) << 15)) >> 10));
    unsigned int v18 = (v15 - 1) & (((v23 ^ (v23 >> 6)) + ~((v23 ^ (v23 >> 6)) << 11)) ^ (((v23 ^ (v23 >> 6))
                                                                            + ~((v23 ^ (v23 >> 6)) << 11)) >> 16));
  }
  uint64_t v24 = this[461].u32[1];
  this[461].i32[1] = v24 + 1;
  int32x2_t v25 = this[459];
  *(_DWORD *)(*(void *)&this[458] + 4 * v24) = *(_DWORD *)(*(void *)&v25 + 4 * v18);
  *(_DWORD *)(*(void *)&v25 + 4 * v18) = v24;
  this[462] = vadd_s32(this[462], (int32x2_t)0x100000001);
  int32x2_t v26 = this[457];
  uint64_t v27 = *(void *)&v26 + 16 * v24;
  *(void *)(v27 + 8) = 0;
  uint64_t v28 = v27 + 8;
  *(void *)(*(void *)&v26 + 16 * v24) = v13 | (v14 << 32);
LABEL_24:
  if (!a4)
  {
    float result = (int32x2_t *)this[90];
    if (!result)
    {
      uint64_t v39 = physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPair>::allocate(this[89].u32[0], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
      unint64_t v40 = v39;
      uint64_t v45 = v39;
      uint64_t v41 = this[87].u32[0];
      if ((this[87].i32[1] & 0x7FFFFFFFu) <= v41)
      {
        physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPair>>>::growAndPushBack((uint64_t)&this[21], &v45);
      }
      else
      {
        *(void *)(*(void *)&this[86] + 8 * v41) = v39;
        this[87].i32[0] = v41 + 1;
      }
      unint64_t v43 = v40 + 8 * this[88].u32[0] - 8;
      float result = (int32x2_t *)this[90];
      if (v43 >= v40)
      {
        int v44 = (int32x2_t **)(v40 + 8 * this[88].u32[0] - 8);
        do
        {
          *v44-- = result;
          float result = (int32x2_t *)v43;
          unint64_t v43 = (unint64_t)v44;
        }
        while ((unint64_t)v44 >= v40);
        float result = (int32x2_t *)(v44 + 1);
      }
    }
    this[90] = *result;
    ++this[88].i32[1];
    result->i32[0] = 0;
    result->i16[2] = 0;
    goto LABEL_51;
  }
  int32x2_t v29 = a2[1];
  int32x2_t v30 = a3[1];
  float result = (int32x2_t *)this[161];
  if (!result)
  {
    physx::shdfnd::PoolBase<physx::Sc::ActorPairReport,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport>>::allocateSlab((uint64_t)&this[91]);
    float result = (int32x2_t *)this[161];
  }
  this[161] = *result;
  ++this[159].i32[1];
  result->i16[2] = 0;
  result[1] = v29;
  result[2] = v30;
  result[3] = 0;
  result->i32[0] = 1;
  *(void *)uint64_t v28 = result;
LABEL_28:
  if (a4 && (result->i16[0] & 1) == 0)
  {
    int v32 = *(_DWORD *)(*(void *)&v11 + 52);
    uint64_t v33 = *(void ***)(*(void *)&v11 + 40);
    int32x2_t v34 = a2[1];
    int32x2_t v35 = a3[1];
    float result = (int32x2_t *)this[161];
    if (!result)
    {
      physx::shdfnd::PoolBase<physx::Sc::ActorPairReport,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport>>::allocateSlab((uint64_t)&this[91]);
      float result = (int32x2_t *)this[161];
    }
    this[161] = *result;
    ++this[159].i32[1];
    result->i16[2] = 0;
    result[1] = v34;
    result[2] = v35;
    result[3] = 0;
    result->i32[0] = 1;
    uint64_t v36 = *(void *)v28;
    result->i16[1] = *(_WORD *)(*(void *)v28 + 2);
    for (result->i16[2] = *(_WORD *)(v36 + 4); v32; --v32)
    {
      int v38 = *v33++;
      uint64_t v37 = v38;
      if ((*v38 == *(void *)&v12 || v37[1] == *(void *)&v12) && !*((unsigned char *)v37 + 28))
      {
        if (v37[8]) {
          v37[8] = result;
        }
      }
    }
LABEL_51:
    *(void *)uint64_t v28 = result;
  }
  return result;
}

uint64_t physx::Sc::NPhaseCore::refilterInteraction(int32x2_t *a1, uint64_t a2, unsigned __int16 *a3, int a4, uint64_t a5, char a6, int8x8_t a7)
{
  unsigned int v7 = *(unsigned __int8 *)(a2 + 36);
  if (v7 > 2) {
    return 0;
  }
  char v8 = a6;
  uint64_t v9 = a5;
  uint64_t v10 = a2;
  int32x2_t v11 = a1;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = *(void *)(a2 + 48);
  if (a3)
  {
    int v14 = *a3;
    int v15 = a3[1];
    uint64_t v16 = *((unsigned int *)a3 + 1);
    if ((~v14 & 0xD) == 0)
    {
      int32x2_t v17 = *a1;
      unsigned int v65 = 0;
      unsigned int v64 = 0;
      uint64_t v18 = *(void *)(v12 + 8);
      uint64_t v19 = *(__n128 **)(v12 + 56);
      uint64_t v55 = v12;
      int v23 = v15;
      getFilterInfo_ShapeSim((int *)&v65, &v57, v18, v19);
      getFilterInfo_ShapeSim((int *)&v64, &v66, *(void *)(v13 + 8), *(__n128 **)(v13 + 56));
      uint64_t v24 = *(void *)(*(void *)&v17 + 4024);
      __n128 v62 = v66;
      __n128 v63 = v57;
      (*(void (**)(uint64_t, uint64_t, void, __n128 *, void, __n128 *, void))(*(void *)v24 + 8))(v24, v16, v65, &v63, v64, &v62, 0);
      int v15 = v23;
      char v8 = a6;
      uint64_t v9 = a5;
      int32x2_t v11 = a1;
      uint64_t v12 = v55;
      int32x2_t v25 = (void *)v11[19];
      *(void *)(*v25 + 8 * v16) = v25[2];
      v25[2] = v16;
      LODWORD(v16) = -1;
    }
    if (*(unsigned __int8 *)(*(void *)(*(void *)(v12 + 8) + 80) + 13) - 1 >= 2) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = *(void *)(v12 + 8);
    }
    uint64_t v27 = *(void *)(v13 + 8);
    if (*(unsigned __int8 *)(*(void *)(v27 + 80) + 13) - 1 >= 2) {
      uint64_t v27 = 0;
    }
    if ((v14 & 3) == 0 && v26)
    {
      int v28 = *(unsigned char *)(*(void *)(v26 + 80) + 44) & 1;
      if (v27 && v28 != 0)
      {
        int v30 = *(unsigned char *)(*(void *)(v27 + 80) + 44) & 1;
        if ((v15 & 1) != 0 && v30 != 0) {
          v15 &= 0xFFFEu;
        }
      }
    }
  }
  else
  {
    if ((*(unsigned char *)(a2 + 37) & 0x10) != 0)
    {
      uint64_t v16 = *(unsigned int *)(a2 + 56);
      int32x2_t v32 = *a1;
      unsigned int v65 = 0;
      unsigned int v64 = 0;
      getFilterInfo_ShapeSim((int *)&v65, &v57, *(void *)(v12 + 8), *(__n128 **)(v12 + 56));
      getFilterInfo_ShapeSim((int *)&v64, &v66, *(void *)(v13 + 8), *(__n128 **)(v13 + 56));
      uint64_t v33 = *(void *)(*(void *)&v32 + 4024);
      __n128 v62 = v66;
      __n128 v63 = v57;
      (*(void (**)(uint64_t, uint64_t, void, __n128 *, void, __n128 *, void))(*(void *)v33 + 8))(v33, v16, v65, &v63, v64, &v62, 0);
    }
    else
    {
      uint64_t v16 = 0xFFFFFFFFLL;
    }
    int32x2_t v34 = *v11;
    int32x2_t v35 = v11[19];
    unint64_t v36 = *(void *)(*(void *)v11 + 4000);
    v57.n128_u64[0] = *(void *)(*(void *)v11 + 4016);
    v57.n128_u64[1] = v36;
    int v58 = *(_DWORD *)(*(void *)&v34 + 4008);
    uint64_t v59 = *(void *)(*(void *)&v34 + 4024);
    int32x2_t v60 = v35;
    uint64_t v61 = *(void *)(*(void *)&v34 + 4032);
    filterRbCollisionPair((uint64_t)&v57, v12, v13, v16, (BOOL *)&v63, 1, (unsigned __int16 *)&v66);
    LOBYTE(v14) = v66.n128_u8[0];
    int v15 = v66.n128_u16[1];
    LODWORD(v16) = v66.n128_u32[1];
  }
  if ((*(unsigned char *)(v10 + 37) & 0x10) != 0 && (v14 & 0xC) != 0xC)
  {
    *(unsigned char *)(v10 + 37) &= ~0x10u;
    if (v16 != -1)
    {
      uint64_t v37 = (void *)v11[19];
      *(void *)(*v37 + 8 * v16) = v37[2];
      v37[2] = v16;
    }
    LODWORD(v16) = -1;
  }
  if (v14)
  {
    int v38 = 6;
  }
  else if ((v14 & 2) != 0)
  {
    int v38 = 2;
  }
  else if ((*(unsigned char *)(*(void *)(v12 + 56) + 64) & 4) != 0)
  {
    int v38 = 1;
  }
  else
  {
    int v38 = (*(unsigned __int8 *)(*(void *)(v13 + 56) + 64) >> 2) & 1;
  }
  if (v38 == *(unsigned __int8 *)(v10 + 36))
  {
    if (v7 == 1)
    {
      *(_WORD *)(v10 + 76) = *(_WORD *)(v10 + 76) & 0xFFE0 | v15 & 0x14;
    }
    else if (!v7)
    {
      int v39 = *(_DWORD *)(v10 + 64);
      if ((v39 & 0x7FFF) != v15)
      {
        __int16 v40 = v15;
        if ((v15 & 0x1DC) != 0 && (v39 & 0x1DC) == 0)
        {
          uint64_t v41 = *(_WORD **)(v10 + 72);
          if (!v41 || (*v41 & 1) == 0)
          {
            ActorPair = physx::Sc::NPhaseCore::findActorPair(v11, (int32x2_t *)v12, (int32x2_t *)v13, 1, a7);
            if (!*(void *)(v10 + 72))
            {
              ++ActorPair->i16[2];
              *(void *)(v10 + 72) = ActorPair;
            }
          }
        }
        LOWORD(v15) = v40;
        if ((v40 & 8) == 0)
        {
          int v43 = *(_DWORD *)(v10 + 64);
          if ((v43 & 0x600000) != 0)
          {
            if ((v43 & 0x200000) != 0)
            {
              physx::Sc::NPhaseCore::removeFromPersistentContactEventPairs((uint64_t)v11, v10);
              LOWORD(v15) = v40;
            }
            else
            {
              *(_DWORD *)(v10 + 64) = v43 & 0xFFBFFFFF;
            }
          }
        }
        if ((v15 & 0x1C0) != 0)
        {
          if (*(_DWORD *)(v10 + 80) == -1 && (*(unsigned char *)(v10 + 37) & 0x20) != 0 && (*(unsigned char *)(v10 + 65) & 0x80) != 0)
          {
            physx::Sc::NPhaseCore::addToForceThresholdContactEventPairs((uint64_t)v11, (physx::Sc::ShapeInteraction *)v10);
            LOWORD(v15) = v40;
          }
        }
        else if ((v39 & 0x1C0) != 0)
        {
          int v50 = *(_DWORD *)(v10 + 64);
          *(_DWORD *)(v10 + 64) = v50 & 0xFFE7FFFF;
          if ((v50 & 0x800000) != 0)
          {
            uint64_t v51 = *(unsigned int *)(v10 + 80);
            *(_DWORD *)(v10 + 64) = v50 & 0xFF67FFFF;
            *(_DWORD *)(v10 + 80) = -1;
            int32x2_t v52 = v11[6];
            unsigned int v53 = v11[7].i32[0] - 1;
            v11[7].i32[0] = v53;
            *(void *)(*(void *)&v52 + 8 * v51) = *(void *)(*(void *)&v52 + 8 * v53);
            if (v51 < v53) {
              *(_DWORD *)(*(void *)(*(void *)&v11[6] + 8 * v51) + 80) = v51;
            }
          }
        }
      }
      *(_DWORD *)(v10 + 64) = *(_DWORD *)(v10 + 64) & 0xFFFF8000 | v15 & 0x7FFF;
    }
    return v10;
  }
  unsigned __int16 v44 = v15;
  BOOL v46 = *(physx::Sc::ShapeSim **)(v10 + 40);
  uint64_t v45 = *(physx::Sc::ShapeSim **)(v10 + 48);
  uint64_t v47 = *(void *)(v10 + 8);
  if (*(unsigned char *)(*(void *)(v47 + 80) + 13) == 1 && *(_DWORD *)(v47 + 184) >= 0xFFFFFFFE) {
    physx::Sc::BodySim::internalWakeUp((physx::Sc::BodySim *)v47, 0.4);
  }
  uint64_t v48 = *(void *)(v10 + 16);
  if (*(unsigned char *)(*(void *)(v48 + 80) + 13) == 1 && *(_DWORD *)(v48 + 184) >= 0xFFFFFFFE) {
    physx::Sc::BodySim::internalWakeUp((physx::Sc::BodySim *)v48, 0.4);
  }
  *(unsigned char *)(v10 + 37) &= ~0x10u;
  physx::Sc::NPhaseCore::releaseElementPair((uint64_t)v11, v10, 5, 0, a4, v9, v8);
  switch(v38)
  {
    case 0:
      v57.n128_u16[0] = v44;
      ShapeInteractiounsigned int n = physx::Sc::NPhaseCore::createShapeInteraction((uint64_t)v11, (uint64_t)v46, (uint64_t)v45, (unsigned __int16 *)&v57, 0, 0);
      goto LABEL_65;
    case 1:
      v57.n128_u16[0] = v44;
      ShapeInteractiounsigned int n = physx::Sc::NPhaseCore::createTriggerInteraction((uint64_t)v11, v46, v45, &v57);
      goto LABEL_65;
    case 2:
      ShapeInteractiounsigned int n = physx::Sc::NPhaseCore::createElementInteractionMarker((physx::Sc::NPhaseCore *)v11, v46, v45, 0);
LABEL_65:
      uint64_t v10 = (uint64_t)ShapeInteraction;
      goto LABEL_67;
  }
  uint64_t v10 = 0;
LABEL_67:
  if (v16 != -1)
  {
    *(unsigned char *)(v10 + 37) |= 0x10u;
    *(void *)(**(void **)&v11[19] + 8 * v16) = v10;
    *(_DWORD *)(v10 + 56) = v16;
  }
  return v10;
}

uint64_t physx::Sc::NPhaseCore::removeFromPersistentContactEventPairs(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 80);
  unsigned int v3 = *(_DWORD *)(result + 40);
  if (v2 >= v3)
  {
    unsigned int v5 = *(_DWORD *)(result + 32);
  }
  else
  {
    unsigned int v4 = v3 - 1;
    unsigned int v5 = *(_DWORD *)(result + 32);
    if (v2 != v3 - 1 && v3 < v5)
    {
      uint64_t v7 = *(void *)(result + 24);
      uint64_t v8 = *(void *)(v7 + 8 * v4);
      *(void *)(v7 + 8 * v2) = v8;
      *(_DWORD *)(v8 + 80) = v2;
      LODWORD(v2) = v4;
    }
    *(_DWORD *)(result + 40) = v4;
  }
  *(_DWORD *)(a2 + 64) &= ~0x200000u;
  *(_DWORD *)(a2 + 80) = -1;
  uint64_t v9 = *(void *)(result + 24);
  unsigned int v10 = v5 - 1;
  *(_DWORD *)(result + 32) = v10;
  *(void *)(v9 + 8 * v2) = *(void *)(v9 + 8 * v10);
  if (v2 < v10) {
    *(_DWORD *)(*(void *)(*(void *)(result + 24) + 8 * v2) + 80) = v2;
  }
  return result;
}

uint64_t physx::Sc::NPhaseCore::addToForceThresholdContactEventPairs(uint64_t this, physx::Sc::ShapeInteraction *a2)
{
  unsigned int v4 = a2;
  *((_DWORD *)a2 + 16) |= 0x800000u;
  uint64_t v2 = *(unsigned int *)(this + 56);
  int v3 = *(_DWORD *)(this + 60);
  *((_DWORD *)a2 + 20) = v2;
  if ((v3 & 0x7FFFFFFFu) <= v2) {
    return physx::shdfnd::Array<physx::Sc::ShapeInteraction *,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction *>>::growAndPushBack(this + 48, &v4);
  }
  *(void *)(*(void *)(this + 48) + 8 * v2) = a2;
  *(_DWORD *)(this + 56) = v2 + 1;
  return this;
}

uint64_t *physx::Sc::NPhaseCore::processTriggerInteractions(uint64_t *this, physx::PxBaseTask *a2)
{
  uint64_t v2 = *this;
  unsigned int v3 = *(_DWORD *)(*this + 124);
  if (!v3) {
    return this;
  }
  uint64_t v5 = (uint64_t)this;
  uint64_t v6 = *(void *)(v2 + 88);
  uint64_t v7 = physx::PxcScratchAllocator::alloc(*(pthread_mutex_t ***)(v2 + 1840), 88 * (v3 >> 6) + 8 * v3 + 88, 1);
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = 8 * v3;
    uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(v2 + 7456) + 8))(*(void *)(v2 + 7456));
    unsigned int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 8))(v10);
    BOOL v13 = v3 > 0x40 && v11 > 1;
    *(void *)(v5 + 3624) = v8;
    BOOL v25 = v13;
    if (v13)
    {
      *(_DWORD *)(v5 + 3600) = 1;
      *(void *)(v5 + 3592) = a2;
      if (a2)
      {
        (*(void (**)(physx::PxBaseTask *))(*(void *)a2 + 32))(a2);
        *(void *)(v5 + 3584) = *(void *)(*(void *)(v5 + 3592) + 16);
      }
    }
    uint64_t v14 = v5 + 3632;
    uint64_t v15 = v5 + 3640;
    uint64_t v24 = v5;
    uint64_t v16 = v5 + 3568;
    while (1)
    {
      uint64_t v17 = v8 + v9;
      uint64_t v18 = *(void *)(v2 + 24);
      if (v3 >= 0x40) {
        unsigned int v19 = 64;
      }
      else {
        unsigned int v19 = v3;
      }
      v3 -= v19;
      *(void *)(v17 + 16) = 0;
      *(void *)(v17 + 24) = 0;
      *(_DWORD *)(v17 + 32) = 0;
      *(void *)uint64_t v17 = &unk_26E725708;
      *(void *)(v17 + 8) = v18;
      *(void *)(v17 + 40) = v6;
      *(_DWORD *)(v17 + 48) = v19;
      *(void *)(v17 + 56) = v14;
      *(void *)(v17 + 64) = v8;
      *(void *)(v17 + 72) = v15;
      *(void *)(v17 + 80) = v2;
      if (v25)
      {
        *(_DWORD *)(v17 + 32) = 1;
        *(void *)(v17 + 24) = v16;
        (*(void (**)(uint64_t))(*(void *)v16 + 32))(v16);
        *(void *)(v17 + 16) = *(void *)(*(void *)(v17 + 24) + 16);
        (*(void (**)(uint64_t))(*(void *)v17 + 40))(v8 + v9);
        if (!v3)
        {
          unsigned int v22 = *(uint64_t (**)(void))(**(void **)(v24 + 3584) + 144);
          return (uint64_t *)v22();
        }
      }
      else
      {
        physx::Sc::TriggerContactTask::runInternal(v8 + v9);
        if (!v3)
        {
          uint64_t v23 = *(void *)(v24 + 3608);
          return (uint64_t *)physx::Sc::NPhaseCore::mergeProcessedTriggerInteractions(v23, v20);
        }
      }
      v6 += 8 * v19;
      v9 += 88;
    }
  }
  int v21 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance
                                                                            + 8))(physx::shdfnd::Foundation::mInstance)
                            + 16);
  return (uint64_t *)v21();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::NPhaseCore,&physx::Sc::NPhaseCore::mergeProcessedTriggerInteractions>::runInternal(uint64_t a1, physx::PxBaseTask *a2)
{
  return physx::Sc::NPhaseCore::mergeProcessedTriggerInteractions(*(void *)(a1 + 40), a2);
}

uint64_t physx::Sc::NPhaseCore::mergeProcessedTriggerInteractions(uint64_t this, physx::PxBaseTask *a2)
{
  uint64_t v2 = *(void *)(this + 3624);
  if (v2)
  {
    uint64_t v3 = this;
    if (*(int *)(this + 3640) >= 1)
    {
      uint64_t v4 = 0;
      do
      {
        uint64_t v5 = *(void *)(v2 + 8 * v4);
        if (v5) {
          uint64_t v6 = v5 + 8;
        }
        else {
          uint64_t v6 = 0;
        }
        physx::Sc::Scene::notifyInteractionDeactivated(*(void *)v3, v6);
        ++v4;
      }
      while (v4 < *(int *)(v3 + 3640));
    }
    *(_DWORD *)(v3 + 3640) = 0;
    this = physx::PxcScratchAllocator::free(*(void *)(*(void *)v3 + 1840), *(void *)(v3 + 3624));
    *(void *)(v3 + 3624) = 0;
  }
  return this;
}

uint64_t physx::Sc::NPhaseCore::visualize(uint64_t result, _DWORD *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)result;
  if (*(float *)(*(void *)result + 4656) != 0.0)
  {
    int v4 = *(_DWORD *)(v3 + 120);
    if (v4)
    {
      uint64_t v7 = *(uint64_t **)(v3 + 72);
      do
      {
        --v4;
        uint64_t v8 = *v7++;
        uint64_t v9 = v8 - 8;
        if (v8) {
          uint64_t v10 = v9;
        }
        else {
          uint64_t v10 = 0;
        }
        float result = physx::Sc::ShapeInteraction::visualize(v10, a2, a3);
      }
      while (v4);
    }
  }
  return result;
}

void physx::Sc::NPhaseCore::processPersistentContactEvents(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2)
  {
    int v4 = (uint64_t *)(*(void *)(a1 + 24) + 8);
    do
    {
      uint64_t v5 = *(v4 - 1);
      if (--v2)
      {
        _X8 = *v4;
        __asm { PRFM            #0, [X8] }
      }
      _X8 = *(void *)(v5 + 72);
      __asm { PRFM            #0, [X8] }
      if ((~*(_DWORD *)(v5 + 64) & 0x408) == 0)
      {
        if (*(unsigned __int8 *)(*(void *)(*(void *)(*(void *)(v5 + 40) + 8) + 80) + 13) - 1 >= 2) {
          uint64_t v14 = 0;
        }
        else {
          uint64_t v14 = *(void *)(*(void *)(v5 + 40) + 8);
        }
        uint64_t v15 = *(void *)(*(void *)(v5 + 48) + 8);
        if (*(unsigned __int8 *)(*(void *)(v15 + 80) + 13) - 1 >= 2) {
          uint64_t v15 = 0;
        }
        if (*(_DWORD *)(v14 + 184) < 0xFFFFFFFE || v15 && *(_DWORD *)(v15 + 184) <= 0xFFFFFFFD)
        {
          physx::Sc::ShapeInteraction::processUserNotificationSync(*(v4 - 1));
          physx::Sc::ShapeInteraction::processUserNotificationAsync(v5, 8, 0, 0, 0, 0, a2, 0);
        }
      }
      ++v4;
    }
    while (v2);
  }
}

uint64_t physx::Sc::NPhaseCore::fireCustomFilteringCallbacks(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3 = *(void *)(*(void *)result + 4024);
  if (v3)
  {
    uint64_t v6 = result;
    int v13 = 0;
    unsigned int v14 = 0;
    float result = (*(uint64_t (**)(uint64_t, unsigned int *, int *, char *))(*(void *)v3 + 16))(v3, &v14, &v13, (char *)&v13 + 2);
    if (result)
    {
      do
      {
        unsigned __int16 v8 = HIWORD(v13);
        if ((~HIWORD(v13) & 3) == 0)
        {
          unsigned __int16 v8 = HIWORD(v13) & 0xFFFE;
          HIWORD(v13) &= ~1u;
        }
        uint64_t v9 = *(void *)(**(void **)(v6 + 152) + 8 * v14);
        v11[0] = v8;
        v11[1] = v13;
        unsigned int v12 = v14;
        if (physx::Sc::NPhaseCore::refilterInteraction((int32x2_t *)v6, v9, v11, 1, a2, a3, v7) == v9
          && !*(unsigned char *)(v9 + 36))
        {
          physx::Sc::ShapeInteraction::updateState(v9, 1, v10);
        }
        float result = (*(uint64_t (**)(uint64_t, unsigned int *, int *, char *))(*(void *)v3 + 16))(v3, &v14, &v13, (char *)&v13 + 2);
      }
      while ((result & 1) != 0);
    }
  }
  return result;
}

void *physx::Sc::NPhaseCore::updateDirtyInteractions(int32x2_t *a1, void *a2, uint64_t a3, int8x8_t a4)
{
  char v4 = a3;
  int32x2_t v7 = *a1;
  unsigned int v8 = *(_DWORD *)(*(void *)a1 + 4264);
  if ((v8 & 6) != 0)
  {
    int v9 = *(_DWORD *)(*(void *)&v7 + 80);
    if (v9)
    {
      int v10 = (8 * v8) & 0x20 | (8 * ((v8 >> 1) & 1));
      unsigned int v11 = *(uint64_t **)(*(void *)&v7 + 72);
      do
      {
        uint64_t v13 = *v11++;
        uint64_t v12 = v13;
        if ((*(unsigned char *)(v13 + 29) & 8) != 0) {
          *(unsigned char *)(v12 + 30) |= v10;
        }
        else {
          physx::Sc::ShapeInteraction::updateState(v12 - 8, v10, a3);
        }
        --v9;
      }
      while (v9);
    }
  }
  uint64_t v14 = a1[18].u32[1];
  if (v14)
  {
    int32x2_t v15 = a1[13];
    do
    {
      uint64_t v16 = **(physx::Sc::ConstraintInteraction ***)&v15;
      if ((*(unsigned char *)(**(void **)&v15 + 29) & 1) == 0 || (*((unsigned char *)v16 + 30) & 1) == 0) {
        goto LABEL_15;
      }
      uint64_t v17 = physx::Sc::NPhaseCore::refilterInteraction(a1, (uint64_t)v16 - 8, 0, 0, (uint64_t)a2, v4, a4);
      uint64_t v18 = (physx::Sc::ConstraintInteraction *)(v17 + 8);
      if (!v17) {
        uint64_t v18 = 0;
      }
      if (v16 == v18)
      {
LABEL_15:
        if (*((unsigned char *)v16 + 28) == 4)
        {
          physx::Sc::ConstraintInteraction::onActivate_(v16, a2, a4);
        }
        else if (!*((unsigned char *)v16 + 28))
        {
          physx::Sc::ShapeInteraction::updateState((uint64_t)v16 - 8, 0, a3);
        }
        if ((*((unsigned char *)v16 + 29) & 8) != 0) {
          *((unsigned char *)v16 + 29) &= ~8u;
        }
        *((unsigned char *)v16 + 30) = 0;
      }
      *(void *)&v15 += 8;
      --v14;
    }
    while (v14);
  }
  return physx::shdfnd::internal::HashBase<physx::Sc::Interaction *,physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::internal::HashSetBase<physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::clear(&a1[12]);
}

BOOL physx::Sc::findTriggerContacts(uint64_t a1, char a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  int v11 = *(unsigned __int16 *)(a1 + 76);
  if (a2)
  {
    if (a3) {
      char v12 = 4;
    }
    else {
      char v12 = 0;
    }
    uint64_t v14 = (unsigned char *)(a1 + 78);
    int v13 = *(unsigned __int8 *)(a1 + 78);
    if (!*(unsigned char *)(a1 + 78))
    {
      LOBYTE(v15) = 0;
      goto LABEL_20;
    }
LABEL_16:
    LOBYTE(v15) = 0;
    int v13 = 16;
    goto LABEL_20;
  }
  int v16 = *(_DWORD *)(*(void *)(v9 + 56) + 72);
  uint64_t v17 = *(int *)(*(void *)(v10 + 56) + 72);
  ++*(_DWORD *)(a6 + 28 * v16 + 4 * v17);
  if (v16 <= (int)v17) {
    uint64_t v18 = v10;
  }
  else {
    uint64_t v18 = v9;
  }
  if (v16 <= (int)v17) {
    uint64_t v19 = v9;
  }
  else {
    uint64_t v19 = v10;
  }
  uint64_t v20 = (uint64_t (*)(uint64_t, float32x4_t *, uint64_t, float32x4_t *, uint64_t, __n128))*(&gGeomOverlapMethodTable[7 * *(int *)(*(void *)(v19 + 56) + 72)]
                                                                                                 + *(int *)(*(void *)(v18 + 56) + 72));
  physx::Sc::ShapeSim::getAbsPoseAligned(v19, v29);
  __n128 AbsPoseAligned = (__n128)physx::Sc::ShapeSim::getAbsPoseAligned(v18, v28);
  int v15 = v20(*(void *)(v19 + 56) + 72, v29, *(void *)(v18 + 56) + 72, v28, a1 + 60, AbsPoseAligned);
  int v22 = *(unsigned __int8 *)(a1 + 78);
  uint64_t v14 = (unsigned char *)(a1 + 78);
  char v12 = v22;
  if (v22)
  {
    char v12 = 0;
    if (v15)
    {
      int v13 = 0;
      LOBYTE(v15) = 1;
      goto LABEL_20;
    }
    goto LABEL_16;
  }
  if (v15) {
    int v13 = 4;
  }
  else {
    int v13 = 0;
  }
LABEL_20:
  *uint64_t v14 = v15;
  int v23 = v13 & v11;
  if ((v13 & v11) != 0)
  {
    uint64_t v24 = qword_2687A62F0;
    *(void *)a4 = *(void *)(v9 + 56) + qword_2687A62F0;
    *(void *)(a4 + 16) = *(void *)(v10 + 56) + v24;
    *(_DWORD *)(a4 + 32) = v13;
    *(unsigned char *)(a4 + 36) = v12;
    uint64_t v25 = *(void *)(*(void *)(v9 + 8) + 80);
    uint64_t v26 = *(void *)(*(void *)(v10 + 8) + 80);
    *(void *)(a4 + 8) = v25 + qword_2687A6328[*(unsigned __int8 *)(v25 + 13)];
    *(void *)(a4 + 24) = v26 + qword_2687A6328[*(unsigned __int8 *)(v26 + 13)];
    LODWORD(v24) = *(_DWORD *)(v10 + 64);
    LOBYTE(v25) = *(unsigned char *)(v25 + 11);
    LOBYTE(v26) = *(unsigned char *)(v26 + 11);
    *(_DWORD *)a5 = *(_DWORD *)(v9 + 64);
    *(_DWORD *)(a5 + 4) = v24;
    *(unsigned char *)(a5 + 8) = v25;
    *(unsigned char *)(a5 + 9) = v26;
  }
  return v23 != 0;
}

void physx::Sc::NPhaseCore::lostTouchReports(uint64_t a1, physx::Sc::ShapeInteraction *this, char a3, int a4, uint64_t a5, char a6)
{
  int v9 = *((_DWORD *)this + 16);
  if ((v9 & 0x8000) != 0)
  {
    if ((v9 & 0x1DC) != 0)
    {
      if ((v9 & 0x80000) != 0) {
        int v12 = 272;
      }
      else {
        int v12 = 16;
      }
      __int16 v13 = v12 & v9;
      if ((v12 & v9) != 0)
      {
        __int16 v16 = *(_WORD *)(*((void *)this + 9) + 2) == 1;
        physx::Sc::ShapeInteraction::processUserNotificationSync((uint64_t)this);
        physx::Sc::ShapeInteraction::processUserNotificationAsync((uint64_t)this, v13, 8 * v16, 1, a4, 0, a5, 0);
      }
      uint64_t v17 = *(void *)(*((void *)this + 9) + 24);
      if (v17 && *(_DWORD *)(v17 + 12) == *(_DWORD *)(*(void *)(*((void *)this + 1) + 72) + 1992))
      {
        if (a3)
        {
          if ((*(_WORD *)(v17 + 10) & 8) != 0) {
            physx::Sc::ShapeInteraction::setContactReportPostSolverVelocity((uint64_t)this, (unsigned int *)v17);
          }
          __int16 v18 = 17;
        }
        else
        {
          __int16 v18 = 16;
        }
        *(_WORD *)(v17 + 10) |= v18;
      }
    }
    uint64_t v19 = *(void *)(*((void *)this + 5) + 8);
    int v20 = *(unsigned __int8 *)(*(void *)(v19 + 80) + 13);
    uint64_t v21 = *(void *)(*((void *)this + 6) + 8);
    if (*(unsigned __int8 *)(*(void *)(v21 + 80) + 13) - 1 >= 2) {
      uint64_t v21 = 0;
    }
    uint64_t v10 = *((void *)this + 9);
    __int16 v22 = *(_WORD *)(v10 + 2) - 1;
    *(_WORD *)(v10 + 2) = v22;
    if ((a6 & 1) != 0 || !v22)
    {
      if ((v20 - 1) >= 2) {
        uint64_t v19 = 0;
      }
      --*(_DWORD *)(*(void *)(v19 + 136) + 152);
      if (v21) {
        --*(_DWORD *)(*(void *)(v21 + 136) + 152);
      }
    }
  }
  else
  {
    uint64_t v10 = *((void *)this + 9);
    if (!v10) {
      goto LABEL_38;
    }
  }
  __int16 v23 = *(_WORD *)(v10 + 4) - 1;
  *(_WORD *)(v10 + 4) = v23;
  if (!v23)
  {
    uint64_t v24 = *((void *)this + 1);
    unsigned int v25 = *(_DWORD *)(v24 + 88);
    unsigned int v26 = *(_DWORD *)(*((void *)this + 2) + 88);
    BOOL v27 = v25 > v26;
    if (v25 <= v26) {
      uint64_t v28 = *((void *)this + 1);
    }
    else {
      uint64_t v28 = *((void *)this + 2);
    }
    if (!v27) {
      uint64_t v24 = *((void *)this + 2);
    }
    int v29 = *(_DWORD *)(v24 + 88);
    v37[0] = *(_DWORD *)(v28 + 88);
    v37[1] = v29;
    physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sc::BodyPairKey const,physx::Sc::ActorPair *>,physx::Sc::BodyPairKey,physx::shdfnd::Hash<physx::Sc::BodyPairKey>,physx::shdfnd::internal::HashMapBase<physx::Sc::BodyPairKey,physx::Sc::ActorPair *,physx::shdfnd::Hash<physx::Sc::BodyPairKey>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(a1 + 3648, v37);
    if (*(_WORD *)v10)
    {
      __n128 v31 = *(void **)(v10 + 24);
      if (v31)
      {
        --*(_DWORD *)(a1 + 2980);
        *__n128 v31 = *(void *)(a1 + 2992);
        *(void *)(a1 + 2992) = v31;
        *(void *)(v10 + 24) = 0;
      }
      --*(_DWORD *)(a1 + 1276);
      int v30 = (void *)(a1 + 1288);
    }
    else
    {
      --*(_DWORD *)(a1 + 708);
      int v30 = (void *)(a1 + 720);
    }
    *(void *)uint64_t v10 = *v30;
    *int v30 = v10;
  }
LABEL_38:
  *((void *)this + 9) = 0;
  int v32 = *((_DWORD *)this + 16);
  if ((v32 & 0x8000) == 0)
  {
    uint64_t v33 = *((void *)this + 11);
    if (v33)
    {
      if ((*(unsigned char *)(v33 + 83) & 3) != 0) {
        return;
      }
    }
    else if ((v32 & 0x18000) != 0)
    {
      return;
    }
  }
  if (*(unsigned __int8 *)(*(void *)(*(void *)(*((void *)this + 5) + 8) + 80) + 13) - 1 >= 2) {
    int32x2_t v34 = 0;
  }
  else {
    int32x2_t v34 = *(physx::Sc::BodySim **)(*((void *)this + 5) + 8);
  }
  if (*(unsigned __int8 *)(*(void *)(*(void *)(*((void *)this + 6) + 8) + 80) + 13) - 1 >= 2) {
    int32x2_t v35 = 0;
  }
  else {
    int32x2_t v35 = *(physx::Sc::BodySim **)(*((void *)this + 6) + 8);
  }
  if ((a3 & 4) != 0)
  {
    if (v34) {
      BOOL v36 = v35 == 0;
    }
    else {
      BOOL v36 = 1;
    }
    if (v36)
    {
      if (v34) {
        physx::Sc::BodySim::internalWakeUp(v34, 0.4);
      }
      if (v35) {
        physx::Sc::BodySim::internalWakeUp(v35, 0.4);
      }
    }
    else if ((v32 & 0x40000) == 0)
    {
      physx::Sc::Scene::addToLostTouchList(*(void *)a1, v34, v35);
    }
  }
}

uint64_t physx::Sc::NPhaseCore::addToPersistentContactEventPairs(uint64_t this, physx::Sc::ShapeInteraction *a2)
{
  uint64_t v3 = this;
  uint64_t v10 = a2;
  *((_DWORD *)a2 + 16) |= 0x200000u;
  char v4 = (void *)(this + 24);
  uint64_t v5 = *(unsigned int *)(this + 32);
  uint64_t v6 = *(unsigned int *)(this + 40);
  if (v5 == v6)
  {
    *((_DWORD *)a2 + 20) = v5;
    if ((*(_DWORD *)(this + 36) & 0x7FFFFFFFu) <= v5)
    {
      this = physx::shdfnd::Array<physx::Sc::ShapeInteraction *,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction *>>::growAndPushBack(this + 24, &v10);
      LODWORD(v5) = *(_DWORD *)(v3 + 40);
    }
    else
    {
      *(void *)(*(void *)(this + 24) + 8 * v5) = a2;
      *(_DWORD *)(this + 32) = v5 + 1;
    }
  }
  else
  {
    uint64_t v7 = *(void *)(this + 24);
    uint64_t v8 = *(void *)(v7 + 8 * v6);
    uint64_t v9 = v8;
    *(_DWORD *)(v8 + 80) = v5;
    if ((*(_DWORD *)(this + 36) & 0x7FFFFFFFu) <= v5)
    {
      this = physx::shdfnd::Array<physx::Sc::ShapeInteraction *,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction *>>::growAndPushBack(this + 24, &v9);
      uint64_t v6 = *(unsigned int *)(v3 + 40);
    }
    else
    {
      *(void *)(v7 + 8 * v5) = v8;
      *(_DWORD *)(this + 32) = v5 + 1;
    }
    LODWORD(v5) = v6;
    *((_DWORD *)a2 + 20) = v6;
    *(void *)(*v4 + 8 * v6) = a2;
  }
  *(_DWORD *)(v3 + 40) = v5 + 1;
  return this;
}

uint64_t physx::Sc::NPhaseCore::addToPersistentContactEventPairsDelayed(uint64_t this, physx::Sc::ShapeInteraction *a2)
{
  char v4 = a2;
  *((_DWORD *)a2 + 16) |= 0x200000u;
  uint64_t v2 = *(unsigned int *)(this + 32);
  int v3 = *(_DWORD *)(this + 36);
  *((_DWORD *)a2 + 20) = v2;
  if ((v3 & 0x7FFFFFFFu) <= v2) {
    return physx::shdfnd::Array<physx::Sc::ShapeInteraction *,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction *>>::growAndPushBack(this + 24, &v4);
  }
  *(void *)(*(void *)(this + 24) + 8 * v2) = a2;
  *(_DWORD *)(this + 32) = v2 + 1;
  return this;
}

uint64_t physx::Sc::NPhaseCore::reserveContactReportPairData(physx::Sc::NPhaseCore *this, int a2, int a3, unsigned int *a4, physx::Sc::ContactReportAllocationManager *a5)
{
  unsigned int v6 = (a3 + 16 * ((a3 & 0xF) != 0)) & 0xFFFFFFF0;
  if (a5)
  {
    unsigned int v7 = v6 + (a2 << 6);
    return physx::Sc::ContactReportAllocationManager::allocate(a5, v7, a4, 16);
  }
  else
  {
    unsigned int v10 = v6 + (a2 << 6);
    int v11 = *((_DWORD *)this + 18);
    unsigned int v12 = (v11 + 15) & 0xFFFFFFF0;
    *a4 = v12;
    size_t v13 = *((unsigned int *)this + 19);
    if (v12 + v10 <= v13)
    {
      uint64_t v14 = (void *)*((void *)this + 8);
      unsigned int v15 = (v11 + 15) & 0xFFFFFFF0;
    }
    else
    {
      if (*((unsigned char *)this + 88)) {
        return 0;
      }
      LODWORD(v16) = *((_DWORD *)this + 19);
      do
      {
        int v17 = v16;
        uint64_t v16 = (2 * v16);
        *((_DWORD *)this + 19) = v16;
      }
      while (*a4 + v10 > 2 * v17);
      if (v16) {
        uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v16, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScContactReportBuffer.h", 169);
      }
      else {
        uint64_t v14 = 0;
      }
      memcpy(v14, *((const void **)this + 8), v13);
      if (*((void *)this + 8)) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      *((void *)this + 8) = v14;
      unsigned int v15 = *a4;
    }
    uint64_t result = (uint64_t)v14 + v15;
    *((_DWORD *)this + 21) = v15;
    *((_DWORD *)this + 18) += v10 - v11 + v12;
  }
  return result;
}

uint64_t physx::Sc::ContactReportAllocationManager::allocate(physx::Sc::ContactReportAllocationManager *this, unsigned int a2, unsigned int *a3, int a4)
{
  int v7 = a4 - 1;
  int v8 = -a4;
  unsigned int v9 = ((*((_DWORD *)this + 3) + a4 - 1) & -a4) - *((_DWORD *)this + 3) + *((_DWORD *)this + 4);
  if (v9 + a2 <= *((_DWORD *)this + 2)) {
    goto LABEL_24;
  }
  if (a2 <= *((_DWORD *)this + 10)) {
    unsigned int v10 = *((_DWORD *)this + 10);
  }
  else {
    unsigned int v10 = a2;
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(**((pthread_mutex_t ***)this + 4));
  }
  int v11 = (char **)*((void *)this + 3);
  int v12 = *((_DWORD *)v11 + 2);
  int v13 = (v12 + v7) & v8;
  *((_DWORD *)this + 3) = v13;
  size_t v14 = *((unsigned int *)v11 + 3);
  if (v13 + v10 <= v14)
  {
    uint64_t v16 = *v11;
    unsigned int v17 = v13;
LABEL_20:
    unsigned int v15 = &v16[v17];
    *((_DWORD *)v11 + 5) = v17;
    *((_DWORD *)v11 + 2) += v10 - v12 + v13;
    goto LABEL_21;
  }
  if (!*((unsigned char *)v11 + 24))
  {
    LODWORD(v18) = *((_DWORD *)v11 + 3);
    do
    {
      int v19 = v18;
      uint64_t v18 = (2 * v18);
      *((_DWORD *)v11 + 3) = v18;
    }
    while (*((_DWORD *)this + 3) + v10 > 2 * v19);
    if (v18) {
      uint64_t v16 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v18, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScContactReportBuffer.h", 169);
    }
    else {
      uint64_t v16 = 0;
    }
    memcpy(v16, *v11, v14);
    if (*v11) {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
    uint64_t *v11 = v16;
    unsigned int v17 = *((_DWORD *)this + 3);
    goto LABEL_20;
  }
  unsigned int v15 = 0;
LABEL_21:
  *(void *)this = v15;
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 2) = v10;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || (unsigned int v9 = 0, physx::shdfnd::g_isLockingEnabled))
  {
    pthread_mutex_unlock(**((pthread_mutex_t ***)this + 4));
    unsigned int v9 = 0;
  }
LABEL_24:
  uint64_t result = *(void *)this + v9;
  *a3 = *((_DWORD *)this + 3) + v9;
  *((_DWORD *)this + 4) = v9 + a2;
  return result;
}

char *physx::Sc::NPhaseCore::resizeContactReportPairData(uint64_t a1, unsigned int a2, int a3, unsigned int *a4)
{
  int v7 = *(char **)(a1 + 64);
  uint64_t v8 = *a4;
  _X8 = &v7[v8];
  __asm { PRFM            #0, [X8] }
  int v15 = a3 + 16 * ((a3 & 0xF) != 0);
  uint64_t v16 = v15 & 0xFFFFFFF0;
  int v17 = v16 + (a2 << 6);
  if (*(_DWORD *)(a1 + 84) != v8)
  {
    LODWORD(v8) = *(_DWORD *)(a1 + 72);
    size_t v20 = *(unsigned int *)(a1 + 76);
    unsigned int v18 = (v8 + 15) & 0xFFFFFFF0;
    unsigned int v19 = v18 + v17;
    if (v18 + v17 > v20)
    {
      if (!*(unsigned char *)(a1 + 88))
      {
        int v24 = *(_DWORD *)(a1 + 76);
        do
        {
          BOOL v22 = v19 > 2 * v24;
          v24 *= 2;
        }
        while (v22);
        *(_DWORD *)(a1 + 76) = v24;
        __int16 v23 = &unk_2687A6000;
        if (v24) {
          goto LABEL_13;
        }
LABEL_15:
        unsigned int v25 = 0;
        goto LABEL_16;
      }
      return 0;
    }
LABEL_14:
    int v26 = v8;
    goto LABEL_19;
  }
  *(_DWORD *)(a1 + 72) = v8;
  unsigned int v18 = (v8 + 15) & 0xFFFFFFF0;
  unsigned int v19 = v18 + v17;
  size_t v20 = *(unsigned int *)(a1 + 76);
  if (v18 + v17 <= v20) {
    goto LABEL_14;
  }
  if (*(unsigned char *)(a1 + 88)) {
    return 0;
  }
  int v21 = *(_DWORD *)(a1 + 76);
  do
  {
    BOOL v22 = v19 > 2 * v21;
    v21 *= 2;
  }
  while (v22);
  *(_DWORD *)(a1 + 76) = v21;
  if (!v21) {
    goto LABEL_15;
  }
  __int16 v23 = (void *)&unk_2687A6000;
LABEL_13:
  unsigned int v25 = (char *)(*(uint64_t (**)(void))(*(void *)(v23[105] + 24) + 16))();
  int v7 = *(char **)(a1 + 64);
LABEL_16:
  memcpy(v25, v7, v20);
  if (*(void *)(a1 + 64)) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)(a1 + 64) = v25;
  int v26 = *(_DWORD *)(a1 + 72);
  int v7 = v25;
LABEL_19:
  *(_DWORD *)(a1 + 84) = v18;
  *(_DWORD *)(a1 + 72) = v19 - v8 + v26;
  if (!v7) {
    return 0;
  }
  BOOL v27 = &v7[v18];
  uint64_t v28 = *a4;
  int v29 = &v7[v28];
  unint64_t v30 = ((unint64_t)*((unsigned __int16 *)a4 + 5) >> 1) & 0x7FF0;
  if (v28 == v18)
  {
    if (v16 > v30) {
      memmove(&v27[v16], &v29[((unint64_t)*((unsigned __int16 *)a4 + 5) >> 1) & 0x7FF0], (unint64_t)*((unsigned __int16 *)a4 + 3) << 6);
    }
  }
  else
  {
    if (v16 <= v30)
    {
      size_t v33 = v30 + (*((unsigned __int16 *)a4 + 3) << 6);
      __n128 v31 = &v7[v18];
      int v32 = &v7[v28];
    }
    else
    {
      memcpy(&v7[v18], &v7[v28], *((unsigned __int16 *)a4 + 4));
      __n128 v31 = &v27[v16];
      int v32 = &v29[v30];
      size_t v33 = (unint64_t)*((unsigned __int16 *)a4 + 3) << 6;
    }
    memcpy(v31, v32, v33);
    *a4 = v18;
  }
  if (*((unsigned __int16 *)a4 + 2) < a2) {
    *((_WORD *)a4 + 2) = a2;
  }
  if (v16 > v30) {
    *((_WORD *)a4 + 5) = (2 * v15) & 0xFFE0 | *((_WORD *)a4 + 5) & 0x1F;
  }
  return v27;
}

pthread_mutex_t *physx::Sc::NPhaseCore::createActorPairContactReportData(pthread_mutex_t **this)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(this[471]);
  }
  uint64_t v2 = this[374];
  if (!v2)
  {
    physx::shdfnd::PoolBase<physx::Sc::ActorPairContactReportData,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairContactReportData>>::allocateSlab((uint64_t)(this + 304));
    uint64_t v2 = this[374];
  }
  this[374] = (pthread_mutex_t *)v2->__sig;
  ++*((_DWORD *)this + 745);
  WORD2(v2->__sig) = 0;
  *(_WORD *)&v2->__opaque[2] = 0;
  *(void *)&v2->__opaque[4] = -1;
  *(_DWORD *)&v2->__opaque[12] = -1;
  *(void *)&v2->__opaque[16] = 0;
  *(void *)&v2->__opaque[24] = 0;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(this[471]);
  }
  return v2;
}

uint64_t physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(int32x2_t *a1, void *a2, unsigned char *a3, int8x8_t a4)
{
  unsigned int v6 = a1[4].u32[1];
  if (!v6)
  {
    unsigned int v10 = 0;
    goto LABEL_8;
  }
  unint64_t v7 = ~(*a2 << 32) + *a2;
  unint64_t v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  unsigned int v10 = (v6 - 1) & ((v9 >> 31) ^ v9);
  uint64_t v11 = *(unsigned int *)(*(void *)&a1[3] + 4 * v10);
  if (v11 == -1)
  {
LABEL_8:
    *a3 = 0;
    if (a1[6].i32[1] == a1[4].i32[0])
    {
      if (v6) {
        unsigned int v13 = 2 * v6;
      }
      else {
        unsigned int v13 = 16;
      }
      if (v6 < v13)
      {
        physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)a1, v13, a4);
        unsigned int v6 = a1[4].u32[1];
      }
      unint64_t v14 = ~(*a2 << 32) + *a2;
      unint64_t v15 = 9
          * (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) ^ (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) >> 8));
      unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      unsigned int v10 = (v6 - 1) & ((v16 >> 31) ^ v16);
    }
    uint64_t v17 = a1[5].u32[1];
    a1[5].i32[1] = v17 + 1;
    int32x2_t v18 = a1[3];
    int32x2_t v19 = a1[1];
    *(_DWORD *)(*(void *)&a1[2] + 4 * v17) = *(_DWORD *)(*(void *)&v18 + 4 * v10);
    *(_DWORD *)(*(void *)&v18 + 4 * v10) = v17;
    a1[6] = vadd_s32(a1[6], (int32x2_t)0x100000001);
    return *(void *)&v19 + 8 * v17;
  }
  int32x2_t v12 = a1[1];
  while (*(void *)(*(void *)&v12 + 8 * v11) != *a2)
  {
    uint64_t v11 = *(unsigned int *)(*(void *)&a1[2] + 4 * v11);
    if (v11 == -1) {
      goto LABEL_8;
    }
  }
  uint64_t result = *(void *)&v12 + 8 * v11;
  *a3 = 1;
  return result;
}

void *physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3 = a2;
  a3.i32[0] = a2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    unsigned int v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    unsigned int v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    unsigned int v3 = (v7 | HIWORD(v7)) + 1;
  }
  int v8 = *(_DWORD *)(a1 + 32);
  unsigned int v9 = (float)(*(float *)(a1 + 40) * (float)v3);
  uint64_t v10 = ((-4 * (v3 + v9)) & 0xC) + 4 * (v3 + v9);
  if (v10 + 8 * v9) {
    uint64_t v11 = (char *)(*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v10 + 8 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else {
    uint64_t v11 = 0;
  }
  int32x2_t v12 = &v11[4 * v3];
  unsigned int v13 = &v11[v10];
  uint64_t result = memset(v11, 255, 4 * v3);
  if (*(_DWORD *)(a1 + 52))
  {
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(void *)(*(void *)(a1 + 8) + 8 * v15);
      unint64_t v17 = (~(v16 << 32) + v16) ^ ((unint64_t)(~(v16 << 32) + v16) >> 22);
      unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
      unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
      LODWORD(v19) = (v3 - 1) & ((v19 >> 31) ^ v19);
      *(_DWORD *)&v12[4 * v15] = *(_DWORD *)&v11[4 * v19];
      *(_DWORD *)&v11[4 * v19] = v15;
      *(void *)&v13[8 * v15++] = v16;
    }
    while (v15 < *(unsigned int *)(a1 + 52));
  }
  if (*(void *)a1) {
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 24) = v11;
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v3;
  if (*(_DWORD *)(a1 + 44) == -1) {
    *(_DWORD *)(a1 + 44) = v8;
  }
  return result;
}

uint64_t physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(uint64_t a1, uint64_t *a2)
{
  if (!*(_DWORD *)(a1 + 52)) {
    return 0;
  }
  uint64_t v2 = *a2;
  unint64_t v3 = ~(*a2 << 32) + *a2;
  unint64_t v4 = (v3 ^ (v3 >> 22)) + ~((v3 ^ (v3 >> 22)) << 13);
  unint64_t v5 = (9 * (v4 ^ (v4 >> 8))) ^ ((9 * (v4 ^ (v4 >> 8))) >> 15);
  unsigned int v6 = (_DWORD *)(*(void *)(a1 + 24)
                + 4
                * ((*(_DWORD *)(a1 + 36) - 1) & (((v5 + ~(v5 << 27)) >> 31) ^ (v5
                                                                                           + ~(v5 << 27)))));
  uint64_t v7 = *v6;
  if (v7 == -1) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (*(void *)(v8 + 8 * v7) != v2)
  {
    while (1)
    {
      uint64_t v10 = v7;
      uint64_t v7 = *(unsigned int *)(v9 + 4 * v7);
      if (v7 == -1) {
        return 0;
      }
      if (*(void *)(v8 + 8 * v7) == v2)
      {
        unsigned int v6 = (_DWORD *)(v9 + 4 * v10);
        break;
      }
    }
  }
  *unsigned int v6 = *(_DWORD *)(v9 + 4 * v7);
  unsigned int v11 = *(_DWORD *)(a1 + 52) - 1;
  ++*(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 52) = v11;
  if (v7 != v11)
  {
    *(void *)(v8 + 8 * v7) = *(void *)(v8 + 8 * v11);
    uint64_t v13 = *(void *)(a1 + 8);
    uint64_t v12 = *(void *)(a1 + 16);
    *(_DWORD *)(v12 + 4 * v7) = *(_DWORD *)(v12 + 4 * v11);
    unint64_t v14 = ~(*(void *)(v13 + 8 * v7) << 32) + *(void *)(v13 + 8 * v7);
    unint64_t v15 = 9
        * (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) ^ (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) >> 8));
    unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
    unint64_t v17 = (_DWORD *)(*(void *)(a1 + 24)
                   + 4 * ((*(_DWORD *)(a1 + 36) - 1) & ((v16 >> 31) ^ v16)));
    uint64_t v18 = *(unsigned int *)(a1 + 52);
    uint64_t v19 = *v17;
    if (v19 != v18)
    {
      do
      {
        uint64_t v20 = v19;
        uint64_t v19 = *(unsigned int *)(v12 + 4 * v19);
      }
      while (v19 != v18);
      unint64_t v17 = (_DWORD *)(v12 + 4 * v20);
    }
    *unint64_t v17 = v7;
  }
  --*(_DWORD *)(a1 + 44);
  return 1;
}

__n128 getFilterInfo_ShapeSim(int *a1, __n128 *a2, uint64_t a3, __n128 *a4)
{
  int v4 = (8 * a4[4].n128_u8[0]) & 0x20;
  *a1 = v4;
  if (a3)
  {
    uint64_t v5 = *(void *)(a3 + 80);
    int v6 = *(unsigned __int8 *)(v5 + 13);
    if ((v6 - 3) >= 0xFFFFFFFE)
    {
      if (v6 == 2) {
        int v7 = v4 | 2;
      }
      else {
        int v7 = v4 | (16 * (*(unsigned char *)(v5 + 44) & 1)) | 1;
      }
      *a1 = v7;
    }
  }
  __n128 result = a4[1];
  *a2 = result;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::ElementSimInteraction *,physx::shdfnd::ReflectionAllocator<physx::Sc::ElementSimInteraction *>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      int v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ElementSimInteraction *>::getName() [T = phy"
    }
           "sx::Sc::ElementSimInteraction *]";
    else {
      int v7 = "<allocation names disabled>";
    }
    __n128 result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = (void *)result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  uint64_t v10 = &v8[v9];
  if (v9)
  {
    unsigned int v11 = *(uint64_t **)v3;
    uint64_t v12 = v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  void *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

BOOL filterJointedBodies(const physx::Sc::BodySim *a1, const physx::Sc::ActorSim *a2)
{
  if ((*((_WORD *)a1 + 90) & 0x100) == 0) {
    return 0;
  }
  unsigned int v2 = *((_DWORD *)a1 + 13);
  unsigned int v3 = *((_DWORD *)a2 + 13);
  int v4 = v2 <= v3 ? a2 : a1;
  int v5 = v2 >= v3 ? *((_DWORD *)a2 + 13) : *((_DWORD *)a1 + 13);
  if (!v5) {
    return 0;
  }
  if (v2 <= v3) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = a2;
  }
  int v7 = (uint64_t *)*((void *)v6 + 5);
  while (1)
  {
    uint64_t v9 = *v7++;
    uint64_t v8 = (const physx::Sc::ActorSim **)v9;
    if (*(unsigned char *)(v9 + 28) == 4 && (*v8 == v4 || v8[1] == v4)) {
      break;
    }
    if (!--v5) {
      return 0;
    }
  }
  return (**((_WORD **)v8[4] + 11) & 8) == 0;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker>>(char *result, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0x2000000000;
  BOOL v36 = v38;
  char v37 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 < 1) {
    return result;
  }
  unsigned int v3 = result;
  int v4 = 0;
  int v5 = result + 8;
  uint64_t v6 = v38;
  memset(v38, 0, sizeof(v38));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4) {
        goto LABEL_36;
      }
      if ((v2 - v4) <= 4) {
        break;
      }
      int v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      unint64_t v9 = *(void *)&v3[8 * (v7 >> 1)];
      unint64_t v10 = *(void *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(void *)&v3[8 * v4] = v9;
        *(void *)&v3[8 * v8] = v10;
        unint64_t v9 = v10;
        unint64_t v10 = *(void *)&v3[8 * v4];
      }
      unint64_t v11 = *(void *)&v3[8 * v2];
      if (v11 >= v10)
      {
        unint64_t v10 = *(void *)&v3[8 * v2];
      }
      else
      {
        *(void *)&v3[8 * v4] = v11;
        *(void *)&v3[8 * v2] = v10;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(void *)&v3[8 * v8] = v10;
        *(void *)&v3[8 * v2] = v9;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      uint64_t v12 = v2 - 1;
      *(void *)&v3[8 * v8] = *(void *)&v3[8 * v12];
      *(void *)&v3[8 * v12] = v9;
      int v13 = v4;
      int v14 = v2 - 1;
      while (1)
      {
        unint64_t v15 = &v3[8 * v13];
        do
        {
          unint64_t v17 = *((void *)v15 + 1);
          v15 += 8;
          unint64_t v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        uint64_t v18 = &v3[8 * v14];
        do
        {
          unint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          unint64_t v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14) {
          break;
        }
        *(void *)unint64_t v15 = v19;
        *(void *)uint64_t v18 = v16;
        unint64_t v9 = *(void *)&v3[8 * v12];
      }
      *(void *)unint64_t v15 = v9;
      *(void *)&v3[8 * v12] = v16;
      unsigned int v21 = v35;
      unsigned int v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          __n128 result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        uint64_t v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        int v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          __n128 result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        uint64_t v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        int v4 = v13 + 1;
      }
    }
    uint64_t v25 = v4;
    int v26 = v4 + 1;
    BOOL v27 = &v5[8 * v4];
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v25++;
      int v30 = v29;
      do
      {
        if (*(void *)&v27[8 * v28] < *(void *)&v3[8 * v30]) {
          int v30 = v26 + v28;
        }
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != v29)
      {
        uint64_t v31 = *(void *)&v3[8 * v30];
        *(void *)&v3[8 * v30] = *(void *)&v3[8 * v29];
        *(void *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    int v32 = v35;
    if (!v35) {
      break;
    }
    LODWORD(v35) = v35 - 1;
    int v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    int v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37) {
    BOOL v33 = v6 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33) {
    return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    __n128 result = physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker>::allocate(result, 8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  void *v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    __n128 result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker>::getName() [T = phys"
  }
         "x::Sc::ElementInteractionMarker]";
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker>::allocate(a1, 4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  __n128 result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairContactReportData>>(char *result, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0x2000000000;
  BOOL v36 = v38;
  char v37 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 < 1) {
    return result;
  }
  uint64_t v3 = result;
  int v4 = 0;
  unsigned int v5 = result + 8;
  uint64_t v6 = v38;
  memset(v38, 0, sizeof(v38));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4) {
        goto LABEL_36;
      }
      if ((v2 - v4) <= 4) {
        break;
      }
      int v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      unint64_t v9 = *(void *)&v3[8 * (v7 >> 1)];
      unint64_t v10 = *(void *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(void *)&v3[8 * v4] = v9;
        *(void *)&v3[8 * v8] = v10;
        unint64_t v9 = v10;
        unint64_t v10 = *(void *)&v3[8 * v4];
      }
      unint64_t v11 = *(void *)&v3[8 * v2];
      if (v11 >= v10)
      {
        unint64_t v10 = *(void *)&v3[8 * v2];
      }
      else
      {
        *(void *)&v3[8 * v4] = v11;
        *(void *)&v3[8 * v2] = v10;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(void *)&v3[8 * v8] = v10;
        *(void *)&v3[8 * v2] = v9;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      uint64_t v12 = v2 - 1;
      *(void *)&v3[8 * v8] = *(void *)&v3[8 * v12];
      *(void *)&v3[8 * v12] = v9;
      int v13 = v4;
      int v14 = v2 - 1;
      while (1)
      {
        unint64_t v15 = &v3[8 * v13];
        do
        {
          unint64_t v17 = *((void *)v15 + 1);
          v15 += 8;
          unint64_t v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        uint64_t v18 = &v3[8 * v14];
        do
        {
          unint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          unint64_t v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14) {
          break;
        }
        *(void *)unint64_t v15 = v19;
        *(void *)uint64_t v18 = v16;
        unint64_t v9 = *(void *)&v3[8 * v12];
      }
      *(void *)unint64_t v15 = v9;
      *(void *)&v3[8 * v12] = v16;
      unsigned int v21 = v35;
      unsigned int v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          __n128 result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairContactReportData>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        uint64_t v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        int v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          __n128 result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairContactReportData>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        uint64_t v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        int v4 = v13 + 1;
      }
    }
    uint64_t v25 = v4;
    int v26 = v4 + 1;
    BOOL v27 = &v5[8 * v4];
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v25++;
      int v30 = v29;
      do
      {
        if (*(void *)&v27[8 * v28] < *(void *)&v3[8 * v30]) {
          int v30 = v26 + v28;
        }
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != v29)
      {
        uint64_t v31 = *(void *)&v3[8 * v30];
        *(void *)&v3[8 * v30] = *(void *)&v3[8 * v29];
        *(void *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    int v32 = v35;
    if (!v35) {
      break;
    }
    LODWORD(v35) = v35 - 1;
    int v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    int v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37) {
    BOOL v33 = v6 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33) {
    return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairContactReportData>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    __n128 result = physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairContactReportData>::allocate(result, 8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  void *v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    __n128 result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairContactReportData>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairContactReportData>::getName() [T = ph"
  }
         "ysx::Sc::ActorPairContactReportData]";
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairContactReportData>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairContactReportData>::allocate(a1, 4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  __n128 result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerInteraction>>(char *result, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0x2000000000;
  BOOL v36 = v38;
  char v37 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 < 1) {
    return result;
  }
  uint64_t v3 = result;
  int v4 = 0;
  unsigned int v5 = result + 8;
  uint64_t v6 = v38;
  memset(v38, 0, sizeof(v38));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4) {
        goto LABEL_36;
      }
      if ((v2 - v4) <= 4) {
        break;
      }
      int v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      unint64_t v9 = *(void *)&v3[8 * (v7 >> 1)];
      unint64_t v10 = *(void *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(void *)&v3[8 * v4] = v9;
        *(void *)&v3[8 * v8] = v10;
        unint64_t v9 = v10;
        unint64_t v10 = *(void *)&v3[8 * v4];
      }
      unint64_t v11 = *(void *)&v3[8 * v2];
      if (v11 >= v10)
      {
        unint64_t v10 = *(void *)&v3[8 * v2];
      }
      else
      {
        *(void *)&v3[8 * v4] = v11;
        *(void *)&v3[8 * v2] = v10;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(void *)&v3[8 * v8] = v10;
        *(void *)&v3[8 * v2] = v9;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      uint64_t v12 = v2 - 1;
      *(void *)&v3[8 * v8] = *(void *)&v3[8 * v12];
      *(void *)&v3[8 * v12] = v9;
      int v13 = v4;
      int v14 = v2 - 1;
      while (1)
      {
        unint64_t v15 = &v3[8 * v13];
        do
        {
          unint64_t v17 = *((void *)v15 + 1);
          v15 += 8;
          unint64_t v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        uint64_t v18 = &v3[8 * v14];
        do
        {
          unint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          unint64_t v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14) {
          break;
        }
        *(void *)unint64_t v15 = v19;
        *(void *)uint64_t v18 = v16;
        unint64_t v9 = *(void *)&v3[8 * v12];
      }
      *(void *)unint64_t v15 = v9;
      *(void *)&v3[8 * v12] = v16;
      unsigned int v21 = v35;
      unsigned int v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          __n128 result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerInteraction>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        uint64_t v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        int v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          __n128 result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerInteraction>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        uint64_t v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        int v4 = v13 + 1;
      }
    }
    uint64_t v25 = v4;
    int v26 = v4 + 1;
    BOOL v27 = &v5[8 * v4];
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v25++;
      int v30 = v29;
      do
      {
        if (*(void *)&v27[8 * v28] < *(void *)&v3[8 * v30]) {
          int v30 = v26 + v28;
        }
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != v29)
      {
        uint64_t v31 = *(void *)&v3[8 * v30];
        *(void *)&v3[8 * v30] = *(void *)&v3[8 * v29];
        *(void *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    int v32 = v35;
    if (!v35) {
      break;
    }
    LODWORD(v35) = v35 - 1;
    int v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    int v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37) {
    BOOL v33 = v6 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33) {
    return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerInteraction>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    __n128 result = physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerInteraction>::allocate(result, 8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  void *v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    __n128 result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerInteraction>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerInteraction>::getName() [T = physx::Sc:"
  }
         ":TriggerInteraction]";
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerInteraction>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerInteraction>::allocate(a1, 4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  __n128 result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction>>(char *result, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0x2000000000;
  BOOL v36 = v38;
  char v37 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 < 1) {
    return result;
  }
  uint64_t v3 = result;
  int v4 = 0;
  unsigned int v5 = result + 8;
  uint64_t v6 = v38;
  memset(v38, 0, sizeof(v38));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4) {
        goto LABEL_36;
      }
      if ((v2 - v4) <= 4) {
        break;
      }
      int v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      unint64_t v9 = *(void *)&v3[8 * (v7 >> 1)];
      unint64_t v10 = *(void *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(void *)&v3[8 * v4] = v9;
        *(void *)&v3[8 * v8] = v10;
        unint64_t v9 = v10;
        unint64_t v10 = *(void *)&v3[8 * v4];
      }
      unint64_t v11 = *(void *)&v3[8 * v2];
      if (v11 >= v10)
      {
        unint64_t v10 = *(void *)&v3[8 * v2];
      }
      else
      {
        *(void *)&v3[8 * v4] = v11;
        *(void *)&v3[8 * v2] = v10;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(void *)&v3[8 * v8] = v10;
        *(void *)&v3[8 * v2] = v9;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      uint64_t v12 = v2 - 1;
      *(void *)&v3[8 * v8] = *(void *)&v3[8 * v12];
      *(void *)&v3[8 * v12] = v9;
      int v13 = v4;
      int v14 = v2 - 1;
      while (1)
      {
        unint64_t v15 = &v3[8 * v13];
        do
        {
          unint64_t v17 = *((void *)v15 + 1);
          v15 += 8;
          unint64_t v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        uint64_t v18 = &v3[8 * v14];
        do
        {
          unint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          unint64_t v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14) {
          break;
        }
        *(void *)unint64_t v15 = v19;
        *(void *)uint64_t v18 = v16;
        unint64_t v9 = *(void *)&v3[8 * v12];
      }
      *(void *)unint64_t v15 = v9;
      *(void *)&v3[8 * v12] = v16;
      unsigned int v21 = v35;
      unsigned int v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          __n128 result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        uint64_t v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        int v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          __n128 result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        uint64_t v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        int v4 = v13 + 1;
      }
    }
    uint64_t v25 = v4;
    int v26 = v4 + 1;
    BOOL v27 = &v5[8 * v4];
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v25++;
      int v30 = v29;
      do
      {
        if (*(void *)&v27[8 * v28] < *(void *)&v3[8 * v30]) {
          int v30 = v26 + v28;
        }
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != v29)
      {
        uint64_t v31 = *(void *)&v3[8 * v30];
        *(void *)&v3[8 * v30] = *(void *)&v3[8 * v29];
        *(void *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    int v32 = v35;
    if (!v35) {
      break;
    }
    LODWORD(v35) = v35 - 1;
    int v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    int v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37) {
    BOOL v33 = v6 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33) {
    return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    __n128 result = physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction>::allocate(result, 8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  void *v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    __n128 result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction>::getName() [T = physx::Sc::S"
  }
         "hapeInteraction]";
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction>::allocate(a1, 4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  __n128 result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport>>(char *result, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0x2000000000;
  BOOL v36 = v38;
  char v37 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 < 1) {
    return result;
  }
  uint64_t v3 = result;
  int v4 = 0;
  unsigned int v5 = result + 8;
  uint64_t v6 = v38;
  memset(v38, 0, sizeof(v38));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4) {
        goto LABEL_36;
      }
      if ((v2 - v4) <= 4) {
        break;
      }
      int v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      unint64_t v9 = *(void *)&v3[8 * (v7 >> 1)];
      unint64_t v10 = *(void *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(void *)&v3[8 * v4] = v9;
        *(void *)&v3[8 * v8] = v10;
        unint64_t v9 = v10;
        unint64_t v10 = *(void *)&v3[8 * v4];
      }
      unint64_t v11 = *(void *)&v3[8 * v2];
      if (v11 >= v10)
      {
        unint64_t v10 = *(void *)&v3[8 * v2];
      }
      else
      {
        *(void *)&v3[8 * v4] = v11;
        *(void *)&v3[8 * v2] = v10;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(void *)&v3[8 * v8] = v10;
        *(void *)&v3[8 * v2] = v9;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      uint64_t v12 = v2 - 1;
      *(void *)&v3[8 * v8] = *(void *)&v3[8 * v12];
      *(void *)&v3[8 * v12] = v9;
      int v13 = v4;
      int v14 = v2 - 1;
      while (1)
      {
        unint64_t v15 = &v3[8 * v13];
        do
        {
          unint64_t v17 = *((void *)v15 + 1);
          v15 += 8;
          unint64_t v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        uint64_t v18 = &v3[8 * v14];
        do
        {
          unint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          unint64_t v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14) {
          break;
        }
        *(void *)unint64_t v15 = v19;
        *(void *)uint64_t v18 = v16;
        unint64_t v9 = *(void *)&v3[8 * v12];
      }
      *(void *)unint64_t v15 = v9;
      *(void *)&v3[8 * v12] = v16;
      unsigned int v21 = v35;
      unsigned int v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          __n128 result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        uint64_t v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        int v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          __n128 result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        uint64_t v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        int v4 = v13 + 1;
      }
    }
    uint64_t v25 = v4;
    int v26 = v4 + 1;
    BOOL v27 = &v5[8 * v4];
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v25++;
      int v30 = v29;
      do
      {
        if (*(void *)&v27[8 * v28] < *(void *)&v3[8 * v30]) {
          int v30 = v26 + v28;
        }
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != v29)
      {
        uint64_t v31 = *(void *)&v3[8 * v30];
        *(void *)&v3[8 * v30] = *(void *)&v3[8 * v29];
        *(void *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    int v32 = v35;
    if (!v35) {
      break;
    }
    LODWORD(v35) = v35 - 1;
    int v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    int v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37) {
    BOOL v33 = v6 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33) {
    return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    __n128 result = physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport>::allocate(8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  void *v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    __n128 result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport>::allocate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport>::getName() [T = physx::Sc::"
    }
           "ActorPairReport]";
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v6 + 24) + 16);
    return v8(v6 + 24, v5, v7, a2, a3);
  }
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport>::allocate(4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  __n128 result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPair>>(char *result, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0x2000000000;
  BOOL v36 = v38;
  char v37 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 < 1) {
    return result;
  }
  uint64_t v3 = result;
  int v4 = 0;
  uint64_t v5 = result + 8;
  uint64_t v6 = v38;
  memset(v38, 0, sizeof(v38));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4) {
        goto LABEL_36;
      }
      if ((v2 - v4) <= 4) {
        break;
      }
      int v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      unint64_t v9 = *(void *)&v3[8 * (v7 >> 1)];
      unint64_t v10 = *(void *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(void *)&v3[8 * v4] = v9;
        *(void *)&v3[8 * v8] = v10;
        unint64_t v9 = v10;
        unint64_t v10 = *(void *)&v3[8 * v4];
      }
      unint64_t v11 = *(void *)&v3[8 * v2];
      if (v11 >= v10)
      {
        unint64_t v10 = *(void *)&v3[8 * v2];
      }
      else
      {
        *(void *)&v3[8 * v4] = v11;
        *(void *)&v3[8 * v2] = v10;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(void *)&v3[8 * v8] = v10;
        *(void *)&v3[8 * v2] = v9;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      uint64_t v12 = v2 - 1;
      *(void *)&v3[8 * v8] = *(void *)&v3[8 * v12];
      *(void *)&v3[8 * v12] = v9;
      int v13 = v4;
      int v14 = v2 - 1;
      while (1)
      {
        unint64_t v15 = &v3[8 * v13];
        do
        {
          unint64_t v17 = *((void *)v15 + 1);
          v15 += 8;
          unint64_t v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        uint64_t v18 = &v3[8 * v14];
        do
        {
          unint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          unint64_t v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14) {
          break;
        }
        *(void *)unint64_t v15 = v19;
        *(void *)uint64_t v18 = v16;
        unint64_t v9 = *(void *)&v3[8 * v12];
      }
      *(void *)unint64_t v15 = v9;
      *(void *)&v3[8 * v12] = v16;
      unsigned int v21 = v35;
      unsigned int v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          __n128 result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPair>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        uint64_t v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        int v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          __n128 result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPair>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        uint64_t v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        int v4 = v13 + 1;
      }
    }
    uint64_t v25 = v4;
    int v26 = v4 + 1;
    BOOL v27 = &v5[8 * v4];
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v25++;
      int v30 = v29;
      do
      {
        if (*(void *)&v27[8 * v28] < *(void *)&v3[8 * v30]) {
          int v30 = v26 + v28;
        }
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != v29)
      {
        uint64_t v31 = *(void *)&v3[8 * v30];
        *(void *)&v3[8 * v30] = *(void *)&v3[8 * v29];
        *(void *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    int v32 = v35;
    if (!v35) {
      break;
    }
    LODWORD(v35) = v35 - 1;
    int v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    int v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37) {
    BOOL v33 = v6 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33) {
    return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPair>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    __n128 result = physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPair>::allocate(8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  void *v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    __n128 result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPair>::allocate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPair>::getName() [T = physx::Sc::ActorPair]";
    }
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v6 + 24) + 16);
    return v8(v6 + 24, v5, v7, a2, a3);
  }
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPair>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPair>::allocate(4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  __n128 result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

void physx::Sc::TriggerContactTask::~TriggerContactTask(physx::Sc::TriggerContactTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Sc::TriggerContactTask::getName(physx::Sc::TriggerContactTask *this)
{
  return "ScNPhaseCore.triggerInteractionWork";
}

uint64_t physx::Sc::TriggerContactTask::runInternal(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v25 = *MEMORY[0x263EF8340];
  memset(v24, 0, 140);
  for (uint64_t i = 36; i != 2596; i += 40)
    __src[i] = 0;
  for (uint64_t j = 0; j != 768; j += 12)
  {
    int v4 = &v22[j];
    *((_WORD *)v4 + 4) = -1;
    *(void *)int v4 = -1;
  }
  memset(v21, 0, sizeof(v21));
  if (*(_DWORD *)(this + 48))
  {
    unint64_t v5 = 0;
    int v6 = 0;
    signed int v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(*(void *)(v1 + 40) + 8 * v5);
      if (v8) {
        uint64_t v9 = v8 - 8;
      }
      else {
        uint64_t v9 = 0;
      }
      this = physx::Sc::findTriggerContacts(v9, 0, 0, (uint64_t)&__src[40 * v6], (uint64_t)&v22[12 * v6], (uint64_t)v24);
      int v10 = this;
      __int16 v11 = *(_WORD *)(v9 + 76);
      if ((v11 & 0x20) != 0)
      {
        *(_WORD *)(v9 + 76) = v11 & 0xFFDF;
        this = isOneActorActive((physx::Sc::TriggerInteraction *)v9);
        char v12 = *(unsigned char *)(v9 + 37);
        if (this)
        {
          *(unsigned char *)(v9 + 37) = v12 | 0x20;
        }
        else
        {
          *(unsigned char *)(v9 + 37) = v12 & 0xDF;
          *((void *)v21 + v7++) = v9;
        }
      }
      v6 += v10;
      ++v5;
    }
    while (v5 < *(unsigned int *)(v1 + 48));
    if (v6)
    {
      unint64_t v19 = 0;
      __dst = 0;
      int v13 = *(pthread_mutex_t ***)(v1 + 56);
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
        pthread_mutex_lock(*v13);
      }
      physx::Sc::Scene::reserveTriggerReportBufferSpace(*(void *)(v1 + 80), v6, &__dst, &v19);
      memcpy(__dst, __src, (40 * v6));
      this = (uint64_t)memcpy(v19, v22, (12 * v6));
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
        this = pthread_mutex_unlock(*v13);
      }
    }
    if (v7) {
      this = (uint64_t)memcpy((void *)(*(void *)(v1 + 64)+ 8 * (int)(atomic_fetch_add(*(atomic_uint *volatile *)(v1 + 72), v7) + v7)- 8 * v7), v21, (8 * v7));
    }
  }
  uint64_t v14 = 0;
  uint64_t v15 = *(void *)(*(void *)(v1 + 80) + 4256) + 16;
  unint64_t v16 = v24;
  do
  {
    for (uint64_t k = 0; k != 28; k += 4)
    {
      unsigned int v18 = *(_DWORD *)((char *)v16 + k);
      if (v18) {
        atomic_fetch_add((atomic_uint *volatile)(v15 + k), v18);
      }
    }
    ++v14;
    v15 += 28;
    unint64_t v16 = (_OWORD *)((char *)v16 + 28);
  }
  while (v14 != 5);
  return this;
}

void physx::Cm::BitMapBase<physx::shdfnd::VirtualAllocator>::extend(uint64_t a1, int a2)
{
  unsigned int v2 = (a2 + 31) >> 5;
  if (v2 > (*(_DWORD *)(a1 + 8) & 0x7FFFFFFFu))
  {
    int v4 = (char *)(*(uint64_t (**)(void, void, const char *, uint64_t))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), 4 * v2, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmBitMap.h", 438);
    unint64_t v5 = v4;
    int v6 = *(_DWORD *)(a1 + 8);
    if (*(void *)a1)
    {
      memcpy(v4, *(const void **)a1, (4 * v6));
      int v6 = *(_DWORD *)(a1 + 8);
      if ((v6 & 0x80000000) == 0)
      {
        if (*(void *)a1)
        {
          (*(void (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
          int v6 = *(_DWORD *)(a1 + 8);
        }
      }
    }
    bzero(&v5[4 * (v6 & 0x7FFFFFFF)], 4 * (v2 - v6));
    *(void *)a1 = v5;
    *(_DWORD *)(a1 + 8) = v2;
  }
}

uint64_t physx::shdfnd::Array<physx::Dy::ArticulationLink,physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationLink>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    __n128 result = physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationLink>::allocate(result, 40 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v4 = result;
  }
  else
  {
    uint64_t v4 = 0;
  }
  unsigned int v5 = *(_DWORD *)(v3 + 8);
  int v6 = *(long long **)v3;
  if (v5)
  {
    unint64_t v7 = v4 + 40 * v5;
    unint64_t v8 = v4;
    do
    {
      long long v9 = *v6;
      long long v10 = v6[1];
      *(void *)(v8 + 32) = *((void *)v6 + 4);
      *(_OWORD *)unint64_t v8 = v9;
      *(_OWORD *)(v8 + 16) = v10;
      v8 += 40;
      int v6 = (long long *)((char *)v6 + 40);
    }
    while (v8 < v7);
    int v6 = *(long long **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6) {
    __n128 result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationLink>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    unint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationLink>::getName() [T = physx::Dy::A"
  }
         "rticulationLink]";
  else {
    unint64_t v8 = "<allocation names disabled>";
  }
  long long v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::Array<physx::Sc::ArticulationJointSim *,physx::shdfnd::ReflectionAllocator<physx::Sc::ArticulationJointSim *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unsigned int v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ArticulationJointSim *>::getName() [T = phys"
    }
           "x::Sc::ArticulationJointSim *]";
    else {
      unsigned int v5 = "<allocation names disabled>";
    }
    __n128 result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    int v6 = (void *)result;
  }
  else
  {
    int v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  unint64_t v8 = *(uint64_t **)v3;
  if (v7)
  {
    unint64_t v9 = (unint64_t)&v6[v7];
    long long v10 = v6;
    do
    {
      uint64_t v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    unint64_t v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8) {
    __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::BodySim *,physx::shdfnd::ReflectionAllocator<physx::Sc::BodySim *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    __n128 result = physx::shdfnd::ReflectionAllocator<physx::Sc::BodySim *>::allocate(result, 8 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v4 = (void *)result;
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(unsigned int *)(v3 + 8);
  int v6 = *(uint64_t **)v3;
  if (v5)
  {
    unint64_t v7 = (unint64_t)&v4[v5];
    unint64_t v8 = v4;
    do
    {
      uint64_t v9 = *v6++;
      *v8++ = v9;
    }
    while ((unint64_t)v8 < v7);
    int v6 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6) {
    __n128 result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Sc::BodySim *>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    unint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::BodySim *>::getName() [T = physx::Sc::BodySim *]";
  }
  else {
    unint64_t v8 = "<allocation names disabled>";
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::Array<physx::Dy::ArticulationLoopConstraint,physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationLoopConstraint>>::growAndPushBack(uint64_t a1, _OWORD *a2)
{
  int v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationLoopConstraint>::getName() [T = "
    }
           "physx::Dy::ArticulationLoopConstraint]";
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24) + 16))(v6 + 24, 16 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  if (v9)
  {
    unint64_t v10 = v8 + 16 * v9;
    uint64_t v11 = *(long long **)a1;
    char v12 = (_OWORD *)v8;
    do
    {
      long long v13 = *v11++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v10);
    uint64_t v14 = *(unsigned int *)(a1 + 8);
  }
  else
  {
    uint64_t v14 = 0;
  }
  *(_OWORD *)(v8 + 16 * v14) = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && *(void *)a1) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)a1 = v8;
  uint64_t v15 = *(unsigned int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v15 + 1;
  *(_DWORD *)(a1 + 12) = v5;
  return v8 + 16 * v15;
}

uint64_t physx::shdfnd::Array<physx::Sc::BodySim *,physx::shdfnd::ReflectionAllocator<physx::Sc::BodySim *>>::growAndPushBack(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5) {
    uint64_t v6 = physx::shdfnd::ReflectionAllocator<physx::Sc::BodySim *>::allocate(a1, 8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  uint64_t v8 = (void *)(v6 + 8 * v7);
  if (v7)
  {
    uint64_t v9 = *(uint64_t **)a1;
    unint64_t v10 = (void *)v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  void *v8 = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && *(void *)a1)
  {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    uint64_t v7 = *(unsigned int *)(a1 + 8);
  }
  *(void *)a1 = v6;
  *(_DWORD *)(a1 + 8) = v7 + 1;
  *(_DWORD *)(a1 + 12) = v5;
  return v6 + 8 * v7;
}

uint64_t physx::shdfnd::Array<physx::Sc::ArticulationJointSim *,physx::shdfnd::ReflectionAllocator<physx::Sc::ArticulationJointSim *>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ArticulationJointSim *>::getName() [T = phys"
    }
           "x::Sc::ArticulationJointSim *]";
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    __n128 result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = (void *)result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  unint64_t v10 = &v8[v9];
  if (v9)
  {
    uint64_t v11 = *(uint64_t **)v3;
    char v12 = v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  void *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::PoolBase<physx::Sc::SimStateData,physx::shdfnd::ReflectionAllocator<physx::Sc::SimStateData>>::allocateSlab(uint64_t a1)
{
  uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sc::SimStateData>::allocate(a1, *(unsigned int *)(a1 + 552), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
  unint64_t v3 = result;
  uint64_t v8 = result;
  uint64_t v4 = *(unsigned int *)(a1 + 536);
  if ((*(_DWORD *)(a1 + 540) & 0x7FFFFFFFu) <= v4)
  {
    uint64_t result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::SimStateData>>>::growAndPushBack(a1 + 8, &v8);
  }
  else
  {
    *(void *)(*(void *)(a1 + 528) + 8 * v4) = result;
    *(_DWORD *)(a1 + 536) = v4 + 1;
  }
  unint64_t v5 = v3 + ((unint64_t)*(unsigned int *)(a1 + 544) << 6) - 64;
  if (v5 >= v3)
  {
    unint64_t v6 = *(void *)(a1 + 560);
    uint64_t v7 = (unint64_t *)(v3 + ((unint64_t)*(unsigned int *)(a1 + 544) << 6) - 64);
    do
    {
      *uint64_t v7 = v6;
      v7 -= 8;
      unint64_t v6 = v5;
      unint64_t v5 = (unint64_t)v7;
    }
    while ((unint64_t)v7 >= v3);
    *(void *)(a1 + 560) = v7 + 8;
  }
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Sc::SimStateData>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::SimStateData>::getName() [T = physx::Sc::SimStateData]";
  }
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::SimStateData>>>::growAndPushBack(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = (8 * v5);
    if (v6 <= 0x200 && *(unsigned char *)(a1 + 512) == 0)
    {
      *(unsigned char *)(a1 + 512) = 1;
      uint64_t v8 = a1;
    }
    else
    {
      uint64_t v8 = physx::shdfnd::ReflectionAllocator<physx::Sc::SimStateData>::allocate(a1, v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 528);
  unint64_t v10 = (void *)(v8 + 8 * v9);
  if (v9)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 520);
    char v12 = (void *)v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  void *v10 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    uint64_t v14 = *(void *)(a1 + 520);
    if (v14 == a1)
    {
      *(unsigned char *)(a1 + 512) = 0;
    }
    else if (v14)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      uint64_t v9 = *(unsigned int *)(a1 + 528);
    }
  }
  *(void *)(a1 + 520) = v8;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v9 + 1;
  return v8 + 8 * v9;
}

uint64_t physx::Cm::DelegateTask<physx::Sc::NPhaseCore,&physx::Sc::NPhaseCore::mergeProcessedTriggerInteractions>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Sc::NPhaseCore,&physx::Sc::NPhaseCore::mergeProcessedTriggerInteractions>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

void *physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sc::BodyPairKey const,physx::Sc::ActorPair *>,physx::Sc::BodyPairKey,physx::shdfnd::Hash<physx::Sc::BodyPairKey>,physx::shdfnd::internal::HashMapBase<physx::Sc::BodyPairKey,physx::Sc::ActorPair *,physx::shdfnd::Hash<physx::Sc::BodyPairKey>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3 = a2;
  a3.i32[0] = a2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    unsigned int v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    unsigned int v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    unsigned int v3 = (v7 | HIWORD(v7)) + 1;
  }
  int v8 = *(_DWORD *)(a1 + 32);
  unsigned int v9 = (float)(*(float *)(a1 + 40) * (float)v3);
  uint64_t v10 = ((-4 * (v3 + v9)) & 0xC) + 4 * (v3 + v9);
  if (v10 + 16 * v9) {
    uint64_t v11 = (char *)(*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v10 + 16 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else {
    uint64_t v11 = 0;
  }
  char v12 = &v11[4 * v3];
  uint64_t v13 = &v11[v10];
  uint64_t result = memset(v11, 255, 4 * v3);
  if (*(_DWORD *)(a1 + 52))
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    do
    {
      unint64_t v17 = (unsigned __int16 *)(*(void *)(a1 + 8) + v15);
      int v18 = *v17 | (*((_DWORD *)v17 + 1) << 16);
      unsigned int v19 = 9 * ((v18 + ~(v18 << 15)) ^ ((v18 + ~(v18 << 15)) >> 10));
      unsigned int v20 = (v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11);
      unsigned int v21 = (v20 ^ HIWORD(v20)) & (v3 - 1);
      *(_DWORD *)&v12[4 * v16] = *(_DWORD *)&v11[4 * v21];
      *(_DWORD *)&v11[4 * v21] = v16;
      unsigned int v22 = &v13[v15];
      *(void *)unsigned int v22 = *(void *)v17;
      *((void *)v22 + 1) = *((void *)v17 + 1);
      ++v16;
      v15 += 16;
    }
    while (v16 < *(unsigned int *)(a1 + 52));
  }
  if (*(void *)a1) {
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 24) = v11;
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v3;
  if (*(_DWORD *)(a1 + 44) == -1) {
    *(_DWORD *)(a1 + 44) = v8;
  }
  return result;
}

void *physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sc::ElementSimKey const,physx::Sc::ElementSimInteraction *>,physx::Sc::ElementSimKey,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::internal::HashMapBase<physx::Sc::ElementSimKey,physx::Sc::ElementSimInteraction *,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3 = a2;
  a3.i32[0] = a2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    unsigned int v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    unsigned int v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    unsigned int v3 = (v7 | HIWORD(v7)) + 1;
  }
  int v8 = *(_DWORD *)(a1 + 32);
  unsigned int v9 = (float)(*(float *)(a1 + 40) * (float)v3);
  uint64_t v10 = ((-4 * (v3 + v9)) & 0xC) + 4 * (v3 + v9);
  uint64_t v11 = v10 + 24 * v9;
  if (v11) {
    char v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v11, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  }
  else {
    char v12 = 0;
  }
  uint64_t v13 = &v12[4 * v3];
  uint64_t v14 = &v12[v10];
  uint64_t result = memset(v12, 255, 4 * v3);
  if (*(_DWORD *)(a1 + 52))
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    do
    {
      uint64_t v18 = *(void *)(a1 + 8) + v16;
      unsigned int v19 = (*(_DWORD *)(v18 + 8) << 14) & 0xFFFF0000 | (unsigned __int16)(*(_DWORD *)v18 >> 2);
      unsigned int v20 = 9 * ((v19 + ~(v19 << 15)) ^ ((v19 + ~(v19 << 15)) >> 10));
      unsigned int v21 = (v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11);
      unsigned int v22 = (v21 ^ HIWORD(v21)) & (v3 - 1);
      *(_DWORD *)&v13[4 * v17] = *(_DWORD *)&v12[4 * v22];
      *(_DWORD *)&v12[4 * v22] = v17;
      uint64_t v23 = &v14[v16];
      *(_OWORD *)uint64_t v23 = *(_OWORD *)v18;
      *((void *)v23 + 2) = *(void *)(v18 + 16);
      ++v17;
      v16 += 24;
    }
    while (v17 < *(unsigned int *)(a1 + 52));
  }
  if (*(void *)a1) {
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)(a1 + 16) = v13;
  *(void *)(a1 + 24) = v12;
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v14;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v3;
  if (*(_DWORD *)(a1 + 44) == -1) {
    *(_DWORD *)(a1 + 44) = v8;
  }
  return result;
}

void *physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sc::ElementSimKey const,physx::Sc::ElementSimInteraction *>,physx::Sc::ElementSimKey,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::internal::HashMapBase<physx::Sc::ElementSimKey,physx::Sc::ElementSimInteraction *,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(int32x2_t *a1, void *a2, unsigned char *a3, int8x8_t a4)
{
  unsigned int v6 = a1[4].u32[1];
  if (!v6)
  {
    unsigned int v11 = 0;
    goto LABEL_10;
  }
  uint64_t v7 = a2[1];
  unsigned int v8 = (v7 << 14) & 0xFFFF0000 | (unsigned __int16)(*a2 >> 2);
  unsigned int v9 = 9 * ((v8 + ~(v8 << 15)) ^ ((v8 + ~(v8 << 15)) >> 10));
  unsigned int v10 = (v9 ^ (v9 >> 6)) + ~((v9 ^ (v9 >> 6)) << 11);
  unsigned int v11 = (v10 ^ HIWORD(v10)) & (v6 - 1);
  uint64_t v12 = *(unsigned int *)(*(void *)&a1[3] + 4 * v11);
  if (v12 == -1)
  {
LABEL_10:
    *a3 = 0;
    if (a1[6].i32[1] == a1[4].i32[0])
    {
      if (v6) {
        unsigned int v15 = 2 * v6;
      }
      else {
        unsigned int v15 = 16;
      }
      if (v6 < v15)
      {
        physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sc::ElementSimKey const,physx::Sc::ElementSimInteraction *>,physx::Sc::ElementSimKey,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::internal::HashMapBase<physx::Sc::ElementSimKey,physx::Sc::ElementSimInteraction *,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)a1, v15, a4);
        unsigned int v6 = a1[4].u32[1];
      }
      unsigned int v16 = (*((_DWORD *)a2 + 2) << 14) & 0xFFFF0000 | (unsigned __int16)(*(_DWORD *)a2 >> 2);
      unsigned int v17 = 9 * ((v16 + ~(v16 << 15)) ^ ((v16 + ~(v16 << 15)) >> 10));
      unsigned int v11 = (((v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11)) ^ (((v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11)) >> 16)) & (v6 - 1);
    }
    uint64_t v18 = a1[5].u32[1];
    a1[5].i32[1] = v18 + 1;
    int32x2_t v19 = a1[3];
    int32x2_t v20 = a1[1];
    *(_DWORD *)(*(void *)&a1[2] + 4 * v18) = *(_DWORD *)(*(void *)&v19 + 4 * v11);
    *(_DWORD *)(*(void *)&v19 + 4 * v11) = v18;
    a1[6] = vadd_s32(a1[6], (int32x2_t)0x100000001);
    return (void *)(*(void *)&v20 + 24 * v18);
  }
  while (1)
  {
    uint64_t result = (void *)(*(void *)&a1[1] + 24 * v12);
    if (*result == *a2 && result[1] == v7) {
      break;
    }
    uint64_t v12 = *(unsigned int *)(*(void *)&a1[2] + 4 * v12);
    if (v12 == -1) {
      goto LABEL_10;
    }
  }
  *a3 = 1;
  return result;
}

uint64_t physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sc::ElementSimKey const,physx::Sc::ElementSimInteraction *>,physx::Sc::ElementSimKey,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::internal::HashMapBase<physx::Sc::ElementSimKey,physx::Sc::ElementSimInteraction *,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(uint64_t a1, uint64_t *a2)
{
  if (!*(_DWORD *)(a1 + 52)) {
    return 0;
  }
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  unsigned int v4 = (v3 << 14) & 0xFFFF0000 | (unsigned __int16)(*a2 >> 2);
  unsigned int v5 = 9 * ((v4 + ~(v4 << 15)) ^ ((v4 + ~(v4 << 15)) >> 10));
  unsigned int v6 = (_DWORD *)(*(void *)(a1 + 24)
                + 4
                * ((((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) ^ (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) >> 16)) & (*(_DWORD *)(a1 + 36) - 1)));
  uint64_t v7 = *v6;
  if (v7 == -1) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  unsigned int v10 = (void *)(v8 + 24 * v7);
  if (*v10 != v2 || v10[1] != v3)
  {
    while (1)
    {
      uint64_t v12 = v7;
      uint64_t v7 = *(unsigned int *)(v9 + 4 * v7);
      if (v7 == -1) {
        return 0;
      }
      unsigned int v10 = (void *)(v8 + 24 * v7);
      if (*v10 == v2 && v10[1] == v3)
      {
        unsigned int v6 = (_DWORD *)(v9 + 4 * v12);
        break;
      }
    }
  }
  *unsigned int v6 = *(_DWORD *)(v9 + 4 * v7);
  unsigned int v14 = *(_DWORD *)(a1 + 52) - 1;
  ++*(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 52) = v14;
  if (v7 != v14)
  {
    uint64_t v15 = v8 + 24 * v14;
    *(_OWORD *)unsigned int v10 = *(_OWORD *)v15;
    *(void *)(v8 + 24 * v7 + 16) = *(void *)(v15 + 16);
    uint64_t v17 = *(void *)(a1 + 8);
    uint64_t v16 = *(void *)(a1 + 16);
    *(_DWORD *)(v16 + 4 * v7) = *(_DWORD *)(v16 + 4 * *(unsigned int *)(a1 + 52));
    LODWORD(v15) = (*(_DWORD *)(v17 + 24 * v7 + 8) << 14) & 0xFFFF0000 | (unsigned __int16)(*(_DWORD *)(v17 + 24 * v7) >> 2);
    LODWORD(v15) = 9 * ((v15 + ~(v15 << 15)) ^ ((v15 + ~(v15 << 15)) >> 10));
    LODWORD(v15) = (v15 ^ (v15 >> 6)) + ~((v15 ^ (v15 >> 6)) << 11);
    uint64_t v18 = (_DWORD *)(*(void *)(a1 + 24) + 4 * ((v15 ^ WORD1(v15)) & (*(_DWORD *)(a1 + 36) - 1)));
    uint64_t v19 = *(unsigned int *)(a1 + 52);
    uint64_t v20 = *v18;
    if (v20 != v19)
    {
      do
      {
        uint64_t v21 = v20;
        uint64_t v20 = *(unsigned int *)(v16 + 4 * v20);
      }
      while (v20 != v19);
      uint64_t v18 = (_DWORD *)(v16 + 4 * v21);
    }
    *uint64_t v18 = v7;
  }
  --*(_DWORD *)(a1 + 44);
  return 1;
}

uint64_t physx::shdfnd::PoolBase<physx::Sc::ShapeInteraction,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction>>::allocateSlab(uint64_t a1)
{
  uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction>::allocate(a1, *(unsigned int *)(a1 + 552), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
  unint64_t v3 = result;
  uint64_t v8 = result;
  uint64_t v4 = *(unsigned int *)(a1 + 536);
  if ((*(_DWORD *)(a1 + 540) & 0x7FFFFFFFu) <= v4)
  {
    uint64_t result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction>>>::growAndPushBack(a1 + 8, &v8);
  }
  else
  {
    *(void *)(*(void *)(a1 + 528) + 8 * v4) = result;
    *(_DWORD *)(a1 + 536) = v4 + 1;
  }
  unint64_t v5 = v3 + 104 * *(unsigned int *)(a1 + 544) - 104;
  if (v5 >= v3)
  {
    unint64_t v6 = *(void *)(a1 + 560);
    uint64_t v7 = (unint64_t *)(v3 + 104 * *(unsigned int *)(a1 + 544) - 104);
    do
    {
      *uint64_t v7 = v6;
      v7 -= 13;
      unint64_t v6 = v5;
      unint64_t v5 = (unint64_t)v7;
    }
    while ((unint64_t)v7 >= v3);
    *(void *)(a1 + 560) = v7 + 13;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction>>>::growAndPushBack(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = (8 * v5);
    if (v6 <= 0x200 && *(unsigned char *)(a1 + 512) == 0)
    {
      *(unsigned char *)(a1 + 512) = 1;
      uint64_t v8 = a1;
    }
    else
    {
      uint64_t v8 = physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction>::allocate(a1, v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 528);
  unsigned int v10 = (void *)(v8 + 8 * v9);
  if (v9)
  {
    unsigned int v11 = *(uint64_t **)(a1 + 520);
    uint64_t v12 = (void *)v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  void *v10 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    uint64_t v14 = *(void *)(a1 + 520);
    if (v14 == a1)
    {
      *(unsigned char *)(a1 + 512) = 0;
    }
    else if (v14)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      uint64_t v9 = *(unsigned int *)(a1 + 528);
    }
  }
  *(void *)(a1 + 520) = v8;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v9 + 1;
  return v8 + 8 * v9;
}

uint64_t physx::shdfnd::PoolBase<physx::Sc::TriggerInteraction,physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerInteraction>>::allocateSlab(uint64_t a1)
{
  uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerInteraction>::allocate(a1, *(unsigned int *)(a1 + 552), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
  unint64_t v3 = result;
  uint64_t v8 = result;
  uint64_t v4 = *(unsigned int *)(a1 + 536);
  if ((*(_DWORD *)(a1 + 540) & 0x7FFFFFFFu) <= v4)
  {
    uint64_t result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerInteraction>>>::growAndPushBack(a1 + 8, &v8);
  }
  else
  {
    *(void *)(*(void *)(a1 + 528) + 8 * v4) = result;
    *(_DWORD *)(a1 + 536) = v4 + 1;
  }
  unint64_t v5 = v3 + 80 * *(unsigned int *)(a1 + 544) - 80;
  if (v5 >= v3)
  {
    unint64_t v6 = *(void *)(a1 + 560);
    uint64_t v7 = (unint64_t *)(v3 + 80 * *(unsigned int *)(a1 + 544) - 80);
    do
    {
      *uint64_t v7 = v6;
      v7 -= 10;
      unint64_t v6 = v5;
      unint64_t v5 = (unint64_t)v7;
    }
    while ((unint64_t)v7 >= v3);
    *(void *)(a1 + 560) = v7 + 10;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerInteraction>>>::growAndPushBack(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = (8 * v5);
    if (v6 <= 0x200 && *(unsigned char *)(a1 + 512) == 0)
    {
      *(unsigned char *)(a1 + 512) = 1;
      uint64_t v8 = a1;
    }
    else
    {
      uint64_t v8 = physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerInteraction>::allocate(a1, v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 528);
  unsigned int v10 = (void *)(v8 + 8 * v9);
  if (v9)
  {
    unsigned int v11 = *(uint64_t **)(a1 + 520);
    uint64_t v12 = (void *)v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  void *v10 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    uint64_t v14 = *(void *)(a1 + 520);
    if (v14 == a1)
    {
      *(unsigned char *)(a1 + 512) = 0;
    }
    else if (v14)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      uint64_t v9 = *(unsigned int *)(a1 + 528);
    }
  }
  *(void *)(a1 + 520) = v8;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v9 + 1;
  return v8 + 8 * v9;
}

uint64_t physx::shdfnd::PoolBase<physx::Sc::ElementInteractionMarker,physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker>>::allocateSlab(uint64_t a1)
{
  uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker>::allocate(a1, *(unsigned int *)(a1 + 552), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
  unint64_t v3 = result;
  uint64_t v8 = result;
  uint64_t v4 = *(unsigned int *)(a1 + 536);
  if ((*(_DWORD *)(a1 + 540) & 0x7FFFFFFFu) <= v4)
  {
    uint64_t result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker>>>::growAndPushBack(a1 + 8, &v8);
  }
  else
  {
    *(void *)(*(void *)(a1 + 528) + 8 * v4) = result;
    *(_DWORD *)(a1 + 536) = v4 + 1;
  }
  unint64_t v5 = v3 + ((unint64_t)*(unsigned int *)(a1 + 544) << 6) - 64;
  if (v5 >= v3)
  {
    unint64_t v6 = *(void *)(a1 + 560);
    uint64_t v7 = (unint64_t *)(v3 + ((unint64_t)*(unsigned int *)(a1 + 544) << 6) - 64);
    do
    {
      *uint64_t v7 = v6;
      v7 -= 8;
      unint64_t v6 = v5;
      unint64_t v5 = (unint64_t)v7;
    }
    while ((unint64_t)v7 >= v3);
    *(void *)(a1 + 560) = v7 + 8;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker>>>::growAndPushBack(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = (8 * v5);
    if (v6 <= 0x200 && *(unsigned char *)(a1 + 512) == 0)
    {
      *(unsigned char *)(a1 + 512) = 1;
      uint64_t v8 = a1;
    }
    else
    {
      uint64_t v8 = physx::shdfnd::ReflectionAllocator<physx::Sc::ElementInteractionMarker>::allocate(a1, v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 528);
  unsigned int v10 = (void *)(v8 + 8 * v9);
  if (v9)
  {
    unsigned int v11 = *(uint64_t **)(a1 + 520);
    uint64_t v12 = (void *)v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  void *v10 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    uint64_t v14 = *(void *)(a1 + 520);
    if (v14 == a1)
    {
      *(unsigned char *)(a1 + 512) = 0;
    }
    else if (v14)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      uint64_t v9 = *(unsigned int *)(a1 + 528);
    }
  }
  *(void *)(a1 + 520) = v8;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v9 + 1;
  return v8 + 8 * v9;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPair>>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = (8 * v5);
    if (result <= 0x200 && *(unsigned char *)(v3 + 512) == 0)
    {
      *(unsigned char *)(v3 + 512) = 1;
      uint64_t v7 = (void *)v3;
    }
    else
    {
      uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPair>::allocate(result, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
      uint64_t v7 = (void *)result;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(unsigned int *)(v3 + 528);
  uint64_t v9 = &v7[v8];
  if (v8)
  {
    unsigned int v10 = *(uint64_t **)(v3 + 520);
    unsigned int v11 = v7;
    do
    {
      uint64_t v12 = *v10++;
      *v11++ = v12;
    }
    while (v11 < v9);
  }
  void *v9 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    uint64_t v13 = *(void *)(v3 + 520);
    if (v13 == v3)
    {
      *(unsigned char *)(v3 + 512) = 0;
    }
    else if (v13)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      LODWORD(v8) = *(_DWORD *)(v3 + 528);
    }
  }
  *(void *)(v3 + 520) = v7;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v8 + 1;
  return result;
}

uint64_t physx::shdfnd::PoolBase<physx::Sc::ActorPairReport,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport>>::allocateSlab(uint64_t a1)
{
  uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport>::allocate(*(unsigned int *)(a1 + 552), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
  unint64_t v3 = result;
  uint64_t v8 = result;
  uint64_t v4 = *(unsigned int *)(a1 + 536);
  if ((*(_DWORD *)(a1 + 540) & 0x7FFFFFFFu) <= v4)
  {
    uint64_t result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport>>>::growAndPushBack(a1 + 8, &v8);
  }
  else
  {
    *(void *)(*(void *)(a1 + 528) + 8 * v4) = result;
    *(_DWORD *)(a1 + 536) = v4 + 1;
  }
  unint64_t v5 = v3 + 32 * *(unsigned int *)(a1 + 544) - 32;
  if (v5 >= v3)
  {
    unint64_t v6 = *(void *)(a1 + 560);
    uint64_t v7 = (unint64_t *)(v3 + 32 * *(unsigned int *)(a1 + 544) - 32);
    do
    {
      *uint64_t v7 = v6;
      v7 -= 4;
      unint64_t v6 = v5;
      unint64_t v5 = (unint64_t)v7;
    }
    while ((unint64_t)v7 >= v3);
    *(void *)(a1 + 560) = v7 + 4;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport>>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = (8 * v5);
    if (result <= 0x200 && *(unsigned char *)(v3 + 512) == 0)
    {
      *(unsigned char *)(v3 + 512) = 1;
      uint64_t v7 = (void *)v3;
    }
    else
    {
      uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport>::allocate(result, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
      uint64_t v7 = (void *)result;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(unsigned int *)(v3 + 528);
  uint64_t v9 = &v7[v8];
  if (v8)
  {
    unsigned int v10 = *(uint64_t **)(v3 + 520);
    unsigned int v11 = v7;
    do
    {
      uint64_t v12 = *v10++;
      *v11++ = v12;
    }
    while (v11 < v9);
  }
  void *v9 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    uint64_t v13 = *(void *)(v3 + 520);
    if (v13 == v3)
    {
      *(unsigned char *)(v3 + 512) = 0;
    }
    else if (v13)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      LODWORD(v8) = *(_DWORD *)(v3 + 528);
    }
  }
  *(void *)(v3 + 520) = v7;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v8 + 1;
  return result;
}

void *physx::shdfnd::internal::HashBase<physx::Sc::Interaction *,physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::internal::HashSetBase<physx::Sc::Interaction *,physx::shdfnd::Hash<physx::Sc::Interaction *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::clear(void *result)
{
  int v1 = *((_DWORD *)result + 9);
  if (v1)
  {
    uint64_t v2 = result;
    if (*((_DWORD *)result + 13))
    {
      uint64_t result = memset(*((void **)result + 3), 255, (4 * v1));
      uint64_t v3 = v2[2];
      uint64_t v4 = (*((_DWORD *)v2 + 8) - 1);
      if (*((_DWORD *)v2 + 8) == 1)
      {
        uint64_t v12 = 0;
      }
      else
      {
        _X10 = v3 + 128;
        int v6 = 1;
        do
        {
          __asm { PRFM            #0, [X10] }
          *(_DWORD *)(_X10 - 128) = v6++;
          _X10 += 4;
          --v4;
        }
        while (v4);
        uint64_t v12 = (*((_DWORD *)v2 + 8) - 1);
      }
      *(_DWORD *)(v3 + 4 * v12) = -1;
      *((_DWORD *)v2 + 11) = 0;
      *((_DWORD *)v2 + 13) = 0;
    }
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxTriggerPair,physx::shdfnd::ReflectionAllocator<physx::PxTriggerPair>>::growAndPushBack(uint64_t result, long long *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::PxTriggerPair>::allocate(result, 40 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  unsigned int v7 = *(_DWORD *)(v3 + 8);
  if (v7)
  {
    unint64_t v8 = v6 + 40 * v7;
    uint64_t v9 = *(long long **)v3;
    unint64_t v10 = v6;
    do
    {
      long long v11 = *v9;
      long long v12 = v9[1];
      *(_DWORD *)(v10 + 32) = *((_DWORD *)v9 + 8);
      *(_OWORD *)unint64_t v10 = v11;
      *(_OWORD *)(v10 + 16) = v12;
      *(unsigned char *)(v10 + 36) = *((unsigned char *)v9 + 36);
      v10 += 40;
      uint64_t v9 = (long long *)((char *)v9 + 40);
    }
    while (v10 < v8);
    unsigned int v13 = *(_DWORD *)(v3 + 8);
  }
  else
  {
    unsigned int v13 = 0;
  }
  uint64_t v14 = v6 + 40 * v13;
  long long v15 = *a2;
  long long v16 = a2[1];
  *(_DWORD *)(v14 + 32) = *((_DWORD *)a2 + 8);
  *(_OWORD *)uint64_t v14 = v15;
  *(_OWORD *)(v14 + 16) = v16;
  *(unsigned char *)(v14 + 36) = *((unsigned char *)a2 + 36);
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v6;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::PxTriggerPair>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    unint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxTriggerPair>::getName() [T = physx::PxTriggerPair]";
  }
  else {
    unint64_t v8 = "<allocation names disabled>";
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::Array<physx::Sc::TriggerPairExtraData,physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerPairExtraData>>::growAndPushBack(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerPairExtraData>::allocate(result, 12 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  unsigned int v7 = *(_DWORD *)(v3 + 8);
  if (v7)
  {
    unint64_t v8 = v6 + 12 * v7;
    uint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9;
      *(_DWORD *)(v10 + 8) = *((_DWORD *)v9 + 2);
      *(void *)unint64_t v10 = v11;
      v10 += 12;
      uint64_t v9 = (uint64_t *)((char *)v9 + 12);
    }
    while (v10 < v8);
    unsigned int v12 = *(_DWORD *)(v3 + 8);
  }
  else
  {
    unsigned int v12 = 0;
  }
  uint64_t v13 = v6 + 12 * v12;
  uint64_t v14 = *a2;
  *(_DWORD *)(v13 + 8) = *((_DWORD *)a2 + 2);
  *(void *)uint64_t v13 = v14;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v6;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerPairExtraData>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    unint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::TriggerPairExtraData>::getName() [T = physx::S"
  }
         "c::TriggerPairExtraData]";
  else {
    unint64_t v8 = "<allocation names disabled>";
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sc::BodyPairKey const,physx::Sc::ActorPair *>,physx::Sc::BodyPairKey,physx::shdfnd::Hash<physx::Sc::BodyPairKey>,physx::shdfnd::internal::HashMapBase<physx::Sc::BodyPairKey,physx::Sc::ActorPair *,physx::shdfnd::Hash<physx::Sc::BodyPairKey>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(uint64_t a1, int *a2)
{
  if (!*(_DWORD *)(a1 + 52)) {
    return 0;
  }
  int v2 = *a2;
  int v3 = a2[1];
  int v4 = (unsigned __int16)*a2 | ((unsigned __int16)v3 << 16);
  unsigned int v5 = 9 * ((v4 + ~(v4 << 15)) ^ ((v4 + ~(v4 << 15)) >> 10));
  uint64_t v6 = (_DWORD *)(*(void *)(a1 + 24)
                + 4
                * ((((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) ^ (((v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11)) >> 16)) & (*(_DWORD *)(a1 + 36) - 1)));
  uint64_t v7 = *v6;
  if (v7 == -1) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  unint64_t v10 = (_DWORD *)(v8 + 16 * v7);
  if (*v10 != v2 || v10[1] != v3)
  {
    while (1)
    {
      uint64_t v12 = v7;
      uint64_t v7 = *(unsigned int *)(v9 + 4 * v7);
      if (v7 == -1) {
        return 0;
      }
      unint64_t v10 = (_DWORD *)(v8 + 16 * v7);
      if (*v10 == v2 && v10[1] == v3)
      {
        uint64_t v6 = (_DWORD *)(v9 + 4 * v12);
        break;
      }
    }
  }
  *uint64_t v6 = *(_DWORD *)(v9 + 4 * v7);
  unsigned int v14 = *(_DWORD *)(a1 + 52) - 1;
  ++*(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 52) = v14;
  if (v7 != v14)
  {
    long long v15 = (uint64_t *)(v8 + 16 * v14);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    *(void *)unint64_t v10 = v17;
    uint64_t v18 = v8 + 16 * v7;
    uint64_t v20 = *(void *)(a1 + 8);
    uint64_t v19 = *(void *)(a1 + 16);
    LODWORD(v17) = *(_DWORD *)(v19 + 4 * *(unsigned int *)(a1 + 52));
    *(void *)(v18 + 8) = v16;
    *(_DWORD *)(v19 + 4 * v7) = v17;
    LODWORD(v18) = *(unsigned __int16 *)(v20 + 16 * v7) | (*(_DWORD *)(v20 + 16 * v7 + 4) << 16);
    LODWORD(v18) = 9 * ((v18 + ~(v18 << 15)) ^ ((v18 + ~(v18 << 15)) >> 10));
    LODWORD(v18) = (v18 ^ (v18 >> 6)) + ~((v18 ^ (v18 >> 6)) << 11);
    uint64_t v21 = (_DWORD *)(*(void *)(a1 + 24) + 4 * ((v18 ^ WORD1(v18)) & (*(_DWORD *)(a1 + 36) - 1)));
    uint64_t v22 = *(unsigned int *)(a1 + 52);
    uint64_t v23 = *v21;
    if (v23 != v22)
    {
      do
      {
        uint64_t v24 = v23;
        uint64_t v23 = *(unsigned int *)(v19 + 4 * v23);
      }
      while (v23 != v22);
      uint64_t v21 = (_DWORD *)(v19 + 4 * v24);
    }
    *uint64_t v21 = v7;
  }
  --*(_DWORD *)(a1 + 44);
  return 1;
}

uint64_t physx::shdfnd::Array<physx::Sc::ActorPairReport *,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport *>>::resize(uint64_t result, unsigned int a2, void *a3)
{
  uint64_t v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2) {
    uint64_t result = physx::shdfnd::Array<physx::Sc::ActorPairReport *,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport *>>::recreate(result, a2);
  }
  uint64_t v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    unint64_t v7 = *(void *)v5 + 8 * a2;
    uint64_t v8 = (void *)(*(void *)v5 + 8 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::ActorPairReport *,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport *>::allocate(result, 8 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    int v4 = (void *)result;
  }
  else
  {
    int v4 = 0;
  }
  uint64_t v5 = *(unsigned int *)(v3 + 8);
  uint64_t v6 = *(uint64_t **)v3;
  if (v5)
  {
    unint64_t v7 = (unint64_t)&v4[v5];
    uint64_t v8 = v4;
    do
    {
      uint64_t v9 = *v6++;
      *v8++ = v9;
    }
    while ((unint64_t)v8 < v7);
    uint64_t v6 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport *>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairReport *>::getName() [T = physx::Sc::"
  }
         "ActorPairReport *]";
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::Array<physx::Sc::ShapeInteraction *,physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction *>>::growAndPushBack(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5) {
    uint64_t v6 = physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction *>::allocate(a1, 8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  uint64_t v8 = (void *)(v6 + 8 * v7);
  if (v7)
  {
    uint64_t v9 = *(uint64_t **)a1;
    unint64_t v10 = (void *)v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  void *v8 = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && *(void *)a1)
  {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    uint64_t v7 = *(unsigned int *)(a1 + 8);
  }
  *(void *)a1 = v6;
  *(_DWORD *)(a1 + 8) = v7 + 1;
  *(_DWORD *)(a1 + 12) = v5;
  return v6 + 8 * v7;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction *>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ShapeInteraction *>::getName() [T = physx::Sc:"
  }
         ":ShapeInteraction *]";
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::PoolBase<physx::Sc::ActorPairContactReportData,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairContactReportData>>::allocateSlab(uint64_t a1)
{
  uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairContactReportData>::allocate(a1, *(unsigned int *)(a1 + 552), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
  unint64_t v3 = result;
  uint64_t v8 = result;
  uint64_t v4 = *(unsigned int *)(a1 + 536);
  if ((*(_DWORD *)(a1 + 540) & 0x7FFFFFFFu) <= v4)
  {
    uint64_t result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairContactReportData>>>::growAndPushBack(a1 + 8, &v8);
  }
  else
  {
    *(void *)(*(void *)(a1 + 528) + 8 * v4) = result;
    *(_DWORD *)(a1 + 536) = v4 + 1;
  }
  unint64_t v5 = v3 + 40 * *(unsigned int *)(a1 + 544) - 40;
  if (v5 >= v3)
  {
    unint64_t v6 = *(void *)(a1 + 560);
    uint64_t v7 = (unint64_t *)(v3 + 40 * *(unsigned int *)(a1 + 544) - 40);
    do
    {
      *uint64_t v7 = v6;
      v7 -= 5;
      unint64_t v6 = v5;
      unint64_t v5 = (unint64_t)v7;
    }
    while ((unint64_t)v7 >= v3);
    *(void *)(a1 + 560) = v7 + 5;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairContactReportData>>>::growAndPushBack(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = (8 * v5);
    if (v6 <= 0x200 && *(unsigned char *)(a1 + 512) == 0)
    {
      *(unsigned char *)(a1 + 512) = 1;
      uint64_t v8 = a1;
    }
    else
    {
      uint64_t v8 = physx::shdfnd::ReflectionAllocator<physx::Sc::ActorPairContactReportData>::allocate(a1, v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 528);
  unint64_t v10 = (void *)(v8 + 8 * v9);
  if (v9)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 520);
    uint64_t v12 = (void *)v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  void *v10 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    uint64_t v14 = *(void *)(a1 + 520);
    if (v14 == a1)
    {
      *(unsigned char *)(a1 + 512) = 0;
    }
    else if (v14)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      uint64_t v9 = *(unsigned int *)(a1 + 528);
    }
  }
  *(void *)(a1 + 520) = v8;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v9 + 1;
  return v8 + 8 * v9;
}

physx::Sc::ConstraintSim *physx::Sc::ConstraintCore::setFlags(physx::Sc::ConstraintSim *result, __int16 *a2, int8x8_t a3)
{
  int v3 = *(unsigned __int16 *)result;
  int v4 = (unsigned __int16)*a2;
  int v5 = v3 & 0x400 | v4;
  *a2 = v3 & 0x400 | v4;
  if (v5 != v3)
  {
    *(_WORD *)uint64_t result = v5;
    uint64_t result = (physx::Sc::ConstraintSim *)*((void *)result + 10);
    if (result)
    {
      __int16 v7 = v3;
      __int16 v6 = *a2;
      return physx::Sc::ConstraintSim::postFlagChange(result, &v7, &v6, a3);
    }
  }
  return result;
}

physx::Sc::ConstraintSim *physx::Sc::ConstraintSim::postFlagChange(physx::Sc::ConstraintSim *result, _WORD *a2, __int16 *a3, int8x8_t a4)
{
  int v4 = result;
  __int16 v5 = *a3;
  *((_WORD *)result + 5) = *a3;
  int v6 = *a2 & 6;
  int v7 = v5 & 6;
  if (v7) {
    BOOL v8 = v6 == 0;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8)
  {
    uint64_t v14 = *((void *)result + 13);
    uint64_t v15 = *((void *)result + 14);
    if (v14 && !*(void *)(v14 + 200) || v15 && !*(void *)(v15 + 200))
    {
      uint64_t v18 = *(int32x2_t **)(*((void *)result + 10) + 2056);
      return (physx::Sc::ConstraintSim *)physx::Sc::ConstraintProjectionManager::addToPendingGroupUpdates(v18, v4, a4);
    }
    else
    {
      uint64_t v16 = *(int32x2_t **)(*((void *)result + 10) + 2056);
      if (v14) {
        uint64_t v17 = *(void **)(v14 + 200);
      }
      else {
        uint64_t v17 = *(void **)(v15 + 200);
      }
      return (physx::Sc::ConstraintSim *)physx::Sc::ConstraintGroupNode::markForProjectionTreeRebuild(v17, v16, a4);
    }
  }
  else
  {
    if (v7) {
      BOOL v9 = 1;
    }
    else {
      BOOL v9 = v6 == 0;
    }
    if (!v9)
    {
      if (*((unsigned char *)result + 120))
      {
        uint64_t v19 = *(void *)(*((void *)result + 10) + 2056) + 576;
        uint64_t v20 = v4;
        uint64_t result = (physx::Sc::ConstraintSim *)physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v19, (uint64_t *)&v20);
        *((unsigned char *)v4 + 120) &= ~1u;
      }
      else
      {
        uint64_t v10 = *((void *)result + 13);
        if (v10 && (uint64_t v11 = *(void *)(v10 + 200)) != 0
          || (v12 = *((void *)result + 14)) != 0 && (uint64_t v11 = *(void *)(v12 + 200)) != 0)
        {
          uint64_t v13 = *(int32x2_t **)(*((void *)result + 10) + 2056);
          return (physx::Sc::ConstraintSim *)physx::Sc::ConstraintProjectionManager::invalidateGroup(v13, v11, 0, a4);
        }
      }
    }
  }
  return result;
}

float32x2_t physx::Sc::ConstraintSim::getForce(uint64_t a1, float32x2_t *a2, float32x2_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 80);
  float v4 = *(float *)(v3 + 1988);
  __int16 v5 = (float32x2_t *)(*(void *)(*(void *)(v3 + 1888) + 232) + 32 * *(unsigned int *)(a1 + 72));
  float32_t v6 = v4 * v5[1].f32[0];
  *a2 = vmul_n_f32(*v5, v4);
  a2[1].f32[0] = v6;
  float32_t v7 = v4 * v5[3].f32[0];
  float32x2_t result = vmul_n_f32(v5[2], v4);
  *a3 = result;
  a3[1].f32[0] = v7;
  return result;
}

physx::Sc::ConstraintInteraction *physx::Sc::ConstraintSim::postBodiesChange(physx::Sc::ConstraintSim *a1, uint64_t a2, uint64_t a3, int8x8_t a4)
{
  if (a2 && *(unsigned char *)(a2 + 13))
  {
    float32_t v7 = *(physx::Sc::RigidSim **)a2;
    if (!a3) {
      goto LABEL_8;
    }
  }
  else
  {
    float32_t v7 = 0;
    if (!a3) {
      goto LABEL_8;
    }
  }
  if (*(unsigned char *)(a3 + 13))
  {
    BOOL v8 = *(physx::Sc::RigidSim **)a3;
    goto LABEL_9;
  }
LABEL_8:
  BOOL v8 = 0;
LABEL_9:
  BOOL v9 = *(int32x2_t **)(*((void *)a1 + 10) + 2056);
  if ((**((_WORD **)a1 + 11) & 6) != 0)
  {
    if ((*((unsigned char *)a1 + 120) & 1) == 0) {
      physx::Sc::ConstraintProjectionManager::addToPendingGroupUpdates(*(int32x2_t **)(*((void *)a1 + 10) + 2056), a1, a4);
    }
  }
  else
  {
    if (v7)
    {
      uint64_t v10 = *((void *)v7 + 25);
      if (v10) {
        physx::Sc::ConstraintProjectionManager::invalidateGroup(*(int32x2_t **)(*((void *)a1 + 10) + 2056), v10, a1, a4);
      }
    }
    if (v8)
    {
      uint64_t v11 = *((void *)v8 + 25);
      if (v11) {
        physx::Sc::ConstraintProjectionManager::invalidateGroup(v9, v11, a1, a4);
      }
    }
  }
  uint64_t v12 = (char *)v7 + 96;
  if (!v7) {
    uint64_t v12 = 0;
  }
  uint64_t v13 = (char *)v8 + 96;
  if (!v8) {
    uint64_t v13 = 0;
  }
  *((void *)a1 + 5) = v12;
  *((void *)a1 + 6) = v13;
  if (v7) {
    uint64_t v14 = *((void *)v7 + 17);
  }
  else {
    uint64_t v14 = 0;
  }
  *((void *)a1 + 7) = v14;
  if (v8) {
    uint64_t v15 = *((void *)v8 + 17);
  }
  else {
    uint64_t v15 = 0;
  }
  *((void *)a1 + 8) = v15;
  *((void *)a1 + 13) = v7;
  *((void *)a1 + 14) = v8;
  uint64_t v16 = *((void *)a1 + 10);
  uint64_t v17 = *(void *)(v16 + 4360);
  uint64_t v18 = (physx::Sc::RigidSim **)(v16 + 4304);
  if (a2) {
    uint64_t v19 = (physx::Sc::RigidSim **)a2;
  }
  else {
    uint64_t v19 = v18;
  }
  uint64_t v20 = *v19;
  if (a3) {
    uint64_t v18 = (physx::Sc::RigidSim **)a3;
  }
  uint64_t v21 = *v18;
  uint64_t v22 = *(physx::Sc::ConstraintInteraction **)(v17 + 560);
  if (!v22)
  {
    physx::shdfnd::PoolBase<physx::Sc::ConstraintInteraction,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintInteraction>>::allocateSlab(v17);
    uint64_t v22 = *(physx::Sc::ConstraintInteraction **)(v17 + 560);
  }
  *(void *)(v17 + 560) = *(void *)v22;
  ++*(_DWORD *)(v17 + 548);
  float32x2_t result = physx::Sc::ConstraintInteraction::ConstraintInteraction(v22, a1, v20, v21);
  *((void *)a1 + 12) = result;
  return result;
}

uint64_t physx::Sc::ConstraintSim::setConstantsLL(void **this, void *a2)
{
  memcpy(this[4], a2, *((unsigned __int16 *)this + 4));
  uint64_t v3 = this[13];
  if (!v3) {
    uint64_t v3 = this[14];
  }
  float v4 = *(uint64_t (**)(void))(**(void **)(v3[9] + 1904) + 96);
  return v4();
}

uint64_t physx::Sc::ConstraintSim::setBreakForceLL(uint64_t this, double a2, float a3)
{
  float v4 = *(float *)&a2;
  uint64_t v5 = this;
  char v6 = *(unsigned char *)(this + 120);
  LODWORD(a2) = 2139095039;
  if (v4 >= 3.4028e38 && a3 >= 3.4028e38) {
    int v7 = 0;
  }
  else {
    int v7 = 2;
  }
  if (v7 != (v6 & 2))
  {
    if (v4 >= 3.4028e38 && a3 >= 3.4028e38)
    {
      if ((*(unsigned char *)(this + 120) & 4) != 0)
      {
        uint64_t v8 = *(void *)(this + 80);
        uint64_t v10 = this;
        this = physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v8 + 2232, &v10);
        *(unsigned char *)(v10 + 120) &= ~4u;
        char v6 = *(unsigned char *)(v5 + 120);
      }
      *(unsigned char *)(v5 + 120) = v6 & 0xFD;
    }
    else
    {
      *(unsigned char *)(this + 120) = v6 | 2;
      BOOL v9 = *(physx::Sc::ConstraintInteraction **)(this + 96);
      if ((*((unsigned char *)v9 + 29) & 0x20) != 0) {
        this = (uint64_t)physx::Sc::Scene::addActiveBreakableConstraint(*(int32x2_t **)(this + 80), (physx::Sc::ConstraintSim *)this, v9, *(int8x8_t *)&a2);
      }
    }
  }
  *(float *)uint64_t v5 = v4;
  *(float *)(v5 + 4) = a3;
  return this;
}

void *physx::Sc::ConstraintSim::preBodiesChange(void *this, int8x8_t a2)
{
  int v2 = this;
  uint64_t v3 = this[13];
  if (v3 && (uint64_t v4 = *(void *)(v3 + 200)) != 0 || (v5 = this[14]) != 0 && (uint64_t v4 = *(void *)(v5 + 200)) != 0) {
    this = (void *)physx::Sc::ConstraintProjectionManager::invalidateGroup(*(int32x2_t **)(this[10] + 2056), v4, (physx::Sc::ConstraintSim *)this, a2);
  }
  if ((v2[15] & 8) == 0) {
    this = (void *)physx::Sc::ConstraintInteraction::destroy((physx::Sc::ConstraintInteraction *)v2[12]);
  }
  char v6 = (void *)v2[12];
  if (v6)
  {
    uint64_t v7 = *(void *)(v2[10] + 4360);
    --*(_DWORD *)(v7 + 548);
    *char v6 = *(void *)(v7 + 560);
    *(void *)(v7 + 560) = v6;
  }
  v2[12] = 0;
  return this;
}

void *physx::Sc::ConstraintGroupNode::markForProjectionTreeRebuild(void *this, int32x2_t *a2, int8x8_t a3)
{
  uint64_t v3 = this[1];
  uint64_t v4 = *(void *)(v3 + 8);
  if (v4 != v3)
  {
    int v5 = 0;
    do
    {
      uint64_t v3 = v4;
      uint64_t v4 = *(void *)(v4 + 8);
      --v5;
    }
    while (v3 != v4);
    if (v5)
    {
      do
      {
        char v6 = (void *)this[1];
        this[1] = v3;
        this = v6;
      }
      while (!__CFADD__(v5++, 1));
    }
  }
  if ((*(unsigned char *)(v3 + 88) & 4) == 0) {
    return physx::Sc::ConstraintProjectionManager::addToPendingTreeUpdates(a2, v3, a3);
  }
  return this;
}

void *physx::Sc::ConstraintProjectionManager::addToPendingTreeUpdates(int32x2_t *a1, uint64_t a2, int8x8_t a3)
{
  uint64_t v5 = a2;
  char v6 = 0;
  float32x2_t result = (void *)physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(a1 + 79, &v5, &v6, a3);
  if (!v6) {
    *float32x2_t result = v5;
  }
  *(unsigned char *)(a2 + 88) |= 4u;
  return result;
}

physx::Sc::ConstraintInteraction *physx::Sc::ConstraintInteraction::ConstraintInteraction(physx::Sc::ConstraintInteraction *this, physx::Sc::ConstraintSim *a2, physx::Sc::RigidSim *a3, physx::Sc::RigidSim *a4)
{
  *(void *)this = a3;
  *((void *)this + 1) = a4;
  *((void *)this + 2) = -1;
  *((_DWORD *)this + 6) = -1;
  *((_WORD *)this + 14) = 516;
  *((unsigned char *)this + 30) = 0;
  *((void *)this + 4) = a2;
  physx::Sc::activateInteraction(this, 0, a3, (int8x8_t)-1);
  physx::Sc::ActorSim::registerInteractionInActor(*(physx::Sc::ActorSim **)this, this);
  physx::Sc::ActorSim::registerInteractionInActor(*((physx::Sc::ActorSim **)this + 1), this);
  uint64_t v5 = *((void *)this + 4);
  uint64_t v7 = *(void *)(v5 + 104);
  uint64_t v6 = *(void *)(v5 + 112);
  if (v7)
  {
    *(_WORD *)(v7 + 180) |= 0x100u;
    ++*(_DWORD *)(*(void *)(v7 + 136) + 148);
  }
  if (v6)
  {
    *(_WORD *)(v6 + 180) |= 0x100u;
    ++*(_DWORD *)(*(void *)(v6 + 136) + 148);
  }
  if (!v7)
  {
    uint64_t v8 = 4294967168;
    if (v6) {
      goto LABEL_7;
    }
LABEL_9:
    int v9 = -128;
    goto LABEL_10;
  }
  uint64_t v8 = *(unsigned int *)(v7 + 176);
  if (!v6) {
    goto LABEL_9;
  }
LABEL_7:
  int v9 = *(_DWORD *)(v6 + 176);
LABEL_10:
  *((_DWORD *)this + 10) = physx::IG::SimpleIslandManager::addConstraint(*(void *)(*(void *)(*(void *)this + 72) + 1880), v5, v8, v9, (uint64_t)this);
  return this;
}

uint64_t physx::Sc::ConstraintInteraction::destroy(physx::Sc::ConstraintInteraction *this)
{
  physx::Sc::Interaction::setClean(this, 1);
  uint64_t v2 = *(void *)(*(void *)this + 72);
  if ((~*(unsigned __int8 *)(*((void *)this + 4) + 120) & 6) == 0)
  {
    uint64_t v14 = *((void *)this + 4);
    physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v2 + 2232, &v14);
    *(unsigned char *)(v14 + 120) &= ~4u;
  }
  unsigned int v3 = *((_DWORD *)this + 10);
  if (v3 != -1) {
    physx::IG::SimpleIslandManager::removeConnection(*(void *)(v2 + 1880), v3);
  }
  *((_DWORD *)this + 10) = -1;
  physx::Sc::ActorSim::unregisterInteractionFromActor(*(void *)this, this);
  uint64_t result = physx::Sc::ActorSim::unregisterInteractionFromActor(*((void *)this + 1), this);
  uint64_t v5 = *((void *)this + 4);
  uint64_t v7 = *(void *)(v5 + 104);
  uint64_t v6 = *(void *)(v5 + 112);
  if (!v7)
  {
LABEL_9:
    if (!v6) {
      goto LABEL_17;
    }
    goto LABEL_12;
  }
  int v8 = *(_DWORD *)(v7 + 52);
  int v9 = *(uint64_t **)(v7 + 40);
  --*(_DWORD *)(*(void *)(v7 + 136) + 148);
  while (v8)
  {
    --v8;
    uint64_t v10 = *v9++;
    if (*(unsigned char *)(v10 + 28) == 4) {
      goto LABEL_9;
    }
  }
  *(_WORD *)(v7 + 180) &= ~0x100u;
  if (v6)
  {
LABEL_12:
    int v11 = *(_DWORD *)(v6 + 52);
    uint64_t v12 = *(uint64_t **)(v6 + 40);
    --*(_DWORD *)(*(void *)(v6 + 136) + 148);
    while (v11)
    {
      --v11;
      uint64_t v13 = *v12++;
      if (*(unsigned char *)(v13 + 28) == 4) {
        goto LABEL_17;
      }
    }
    *(_WORD *)(v6 + 180) &= ~0x100u;
  }
LABEL_17:
  *((unsigned char *)this + 29) &= ~0x20u;
  return result;
}

uint64_t physx::Sc::ConstraintInteraction::onActivate_(physx::Sc::ConstraintInteraction *this, void *a2, int8x8_t a3)
{
  uint64_t v3 = *((void *)this + 4);
  uint64_t v5 = *(void *)(v3 + 104);
  uint64_t v4 = *(void *)(v3 + 112);
  if (v5)
  {
    BOOL v6 = *(_DWORD *)(v5 + 184) < 0xFFFFFFFE;
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    BOOL v6 = 1;
    if (v4)
    {
LABEL_3:
      BOOL v7 = *(_DWORD *)(v4 + 184) < 0xFFFFFFFE;
      if (!v5) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  BOOL v7 = 1;
  if (v5) {
LABEL_4:
  }
    LODWORD(v5) = (*(unsigned char *)(*(void *)(v5 + 80) + 44) & 1) == 0;
LABEL_5:
  if (v4) {
    LODWORD(v4) = (*(unsigned char *)(*(void *)(v4 + 80) + 44) & 1) == 0;
  }
  uint64_t v8 = (v6 || v7) & (v5 | v4);
  if (v8 == 1)
  {
    *((unsigned char *)this + 29) |= 0x20u;
    if ((*(unsigned char *)(v3 + 120) & 6) == 2) {
      physx::Sc::Scene::addActiveBreakableConstraint(*(int32x2_t **)(*(void *)this + 72), (physx::Sc::ConstraintSim *)v3, this, a3);
    }
  }
  return v8;
}

uint64_t physx::Sc::ConstraintInteraction::onDeactivate_(physx::Sc::ConstraintInteraction *this)
{
  uint64_t v2 = *((void *)this + 4);
  uint64_t v4 = *(void *)(v2 + 104);
  uint64_t v3 = *(void *)(v2 + 112);
  if (v4)
  {
    BOOL v5 = (*(unsigned char *)(*(void *)(v4 + 80) + 44) & 1) == 0;
    if (v3) {
      goto LABEL_3;
    }
  }
  else
  {
    BOOL v5 = 0;
    if (v3)
    {
LABEL_3:
      BOOL v6 = (*(unsigned char *)(*(void *)(v3 + 80) + 44) & 1) == 0;
      if (!v4) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
  BOOL v6 = 0;
  if (!v4)
  {
LABEL_8:
    if (!v3 || *(_DWORD *)(v3 + 184) > 0xFFFFFFFD) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }
LABEL_7:
  if (*(_DWORD *)(v4 + 184) >= 0xFFFFFFFE) {
    goto LABEL_8;
  }
LABEL_10:
  if (v5 || v6) {
    return 0;
  }
LABEL_12:
  if ((~*(unsigned __int8 *)(v2 + 120) & 6) == 0)
  {
    uint64_t v8 = *(void *)(*(void *)this + 72);
    uint64_t v9 = *((void *)this + 4);
    physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v8 + 2232, &v9);
    *(unsigned char *)(v9 + 120) &= ~4u;
  }
  *((unsigned char *)this + 29) &= ~0x20u;
  return 1;
}

physx::Sc::ConstraintProjectionManager *physx::Sc::ConstraintProjectionManager::ConstraintProjectionManager(physx::Sc::ConstraintProjectionManager *this)
{
  *((void *)this + 68) = 0x4000000000;
  *((unsigned char *)this + 528) = 1;
  *((void *)this + 67) = (char *)this + 16;
  *((void *)this + 69) = 32;
  *((_DWORD *)this + 140) = 3072;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *((void *)this + 77) = -3233808384;
  *((void *)this + 78) = 0;
  physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)this + 576, 0x40u, 0);
  *((void *)this + 83) = 0;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *((void *)this + 84) = -3233808384;
  *((void *)this + 85) = 0;
  physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)this + 632, 0x40u, 0);
  return this;
}

void *physx::Sc::ConstraintProjectionManager::addToPendingGroupUpdates(int32x2_t *this, physx::Sc::ConstraintSim *a2, int8x8_t a3)
{
  BOOL v5 = a2;
  char v6 = 0;
  uint64_t result = (void *)physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(this + 72, &v5, &v6, a3);
  if (!v6) {
    *uint64_t result = v5;
  }
  *((unsigned char *)a2 + 120) |= 1u;
  return result;
}

uint64_t physx::Sc::ConstraintProjectionManager::addToGroup(uint64_t this, physx::Sc::BodySim *a2, physx::Sc::BodySim *a3, physx::Sc::ConstraintSim *a4)
{
  uint64_t v5 = this;
  uint64_t v6 = *((void *)a2 + 25);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 8);
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8 != v7)
    {
      int v9 = 0;
      do
      {
        uint64_t v7 = v8;
        uint64_t v8 = *(void *)(v8 + 8);
        --v9;
      }
      while (v7 != v8);
      if (v9)
      {
        do
        {
          uint64_t v10 = *(void *)(v6 + 8);
          *(void *)(v6 + 8) = v7;
          uint64_t v6 = v10;
          BOOL v11 = __CFADD__(v9++, 1);
        }
        while (!v11);
      }
    }
    if (*(void *)(v7 + 40)) {
      this = physx::Sc::ConstraintProjectionTree::purgeProjectionTrees(v7);
    }
    if (!a3) {
      return this;
    }
LABEL_15:
    uint64_t v13 = *((void *)a3 + 25);
    if (v13)
    {
      uint64_t v14 = *(void *)(v13 + 8);
      uint64_t v15 = *(void *)(v14 + 8);
      if (v15 != v14)
      {
        int v16 = 0;
        do
        {
          uint64_t v14 = v15;
          uint64_t v15 = *(void *)(v15 + 8);
          --v16;
        }
        while (v14 != v15);
        if (v16)
        {
          do
          {
            uint64_t v17 = *(void *)(v13 + 8);
            *(void *)(v13 + 8) = v14;
            uint64_t v13 = v17;
            BOOL v11 = __CFADD__(v16++, 1);
          }
          while (!v11);
        }
      }
      if (*(void *)(v14 + 40)) {
        this = physx::Sc::ConstraintProjectionTree::purgeProjectionTrees(v14);
      }
    }
    else
    {
      uint64_t v14 = *(void *)(v5 + 568);
      if (!v14)
      {
        this = physx::shdfnd::PoolBase<physx::Sc::ConstraintGroupNode,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintGroupNode>>::allocateSlab(v5 + 8);
        uint64_t v14 = *(void *)(v5 + 568);
      }
      *(void *)(v5 + 568) = *(void *)v14;
      ++*(_DWORD *)(v5 + 556);
      *(void *)uint64_t v14 = a3;
      *(void *)(v14 + 8) = v14;
      *(void *)(v14 + 16) = v14;
      *(_DWORD *)(v14 + 24) = 0;
      *(_OWORD *)(v14 + 73) = 0u;
      *(_OWORD *)(v14 + 48) = 0u;
      *(_OWORD *)(v14 + 64) = 0u;
      *(_OWORD *)(v14 + 32) = 0u;
      *((void *)a3 + 25) = v14;
    }
    if (v7 != v14)
    {
      unsigned int v18 = *(_DWORD *)(v14 + 24);
      if (*(_DWORD *)(v7 + 24) <= v18)
      {
        *(_DWORD *)(v14 + 24) = v18 + 1;
        uint64_t v19 = v14;
      }
      else
      {
        uint64_t v19 = v7;
        uint64_t v7 = v14;
      }
      *(void *)(v7 + 8) = v19;
      *(void *)(*(void *)(v19 + 16) + 32) = v7;
      *(void *)(v19 + 16) = *(void *)(v7 + 16);
    }
    return this;
  }
  uint64_t v7 = *(void *)(this + 568);
  if (!v7)
  {
    this = physx::shdfnd::PoolBase<physx::Sc::ConstraintGroupNode,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintGroupNode>>::allocateSlab(this + 8);
    uint64_t v7 = *(void *)(v5 + 568);
  }
  *(void *)(v5 + 568) = *(void *)v7;
  ++*(_DWORD *)(v5 + 556);
  *(void *)uint64_t v7 = a2;
  *(void *)(v7 + 8) = v7;
  *(void *)(v7 + 16) = v7;
  *(_DWORD *)(v7 + 24) = 0;
  *(_OWORD *)(v7 + 73) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *((void *)a2 + 25) = v7;
  if (a3) {
    goto LABEL_15;
  }
  return this;
}

int32x2_t *physx::Sc::ConstraintProjectionManager::markConnectedConstraintsForUpdate(int32x2_t *this, physx::Sc::BodySim *a2, physx::Sc::ConstraintSim *a3, int8x8_t a4)
{
  int v4 = *((_DWORD *)a2 + 13);
  if (v4)
  {
    uint64_t v6 = this;
    uint64_t v7 = (uint64_t *)*((void *)a2 + 5);
    do
    {
      uint64_t v9 = *v7++;
      uint64_t v8 = v9;
      if (*(unsigned char *)(v9 + 28) == 4)
      {
        uint64_t v10 = *(void *)(v8 + 32);
        if ((physx::Sc::ConstraintSim *)v10 != a3
          && (**(_WORD **)(v10 + 88) & 6) != 0
          && *(_DWORD *)(*(void *)(*(void *)(*(void *)(v10 + 80) + 1888) + 232)
                       + 32 * *(unsigned int *)(v10 + 72)
                       + 12) == 0
          && (*(unsigned char *)(v10 + 120) & 1) == 0)
        {
          this = (int32x2_t *)physx::Sc::ConstraintProjectionManager::addToPendingGroupUpdates(v6, (physx::Sc::ConstraintSim *)v10, a4);
        }
      }
      --v4;
    }
    while (v4);
  }
  return this;
}

uint64_t physx::Sc::ConstraintProjectionManager::processPendingUpdates(uint64_t this, physx::PxcScratchAllocator *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = this;
  uint64_t v10 = *(unsigned int *)(this + 684);
  if (v10)
  {
    BOOL v11 = *(uint64_t **)(this + 640);
    do
    {
      uint64_t v12 = *v11;
      *(unsigned char *)(v12 + 88) = *(unsigned char *)(*v11 + 88) & 0xFB;
      if (*(void *)(v12 + 40)) {
        physx::Sc::ConstraintProjectionTree::purgeProjectionTrees(v12);
      }
      this = physx::Sc::ConstraintProjectionTree::buildProjectionTrees(v12, a2, a3, a4, a5, a6, a7, a8);
      ++v11;
      --v10;
    }
    while (v10);
    int v13 = *(_DWORD *)(v9 + 668);
    if (v13 && *(_DWORD *)(v9 + 684))
    {
      this = (uint64_t)memset(*(void **)(v9 + 656), 255, (4 * v13));
      uint64_t v14 = *(void *)(v9 + 648);
      uint64_t v15 = (*(_DWORD *)(v9 + 664) - 1);
      if (*(_DWORD *)(v9 + 664) == 1)
      {
        uint64_t v23 = 0;
      }
      else
      {
        _X10 = v14 + 128;
        int v17 = 1;
        do
        {
          __asm { PRFM            #0, [X10] }
          *(_DWORD *)(_X10 - 128) = v17++;
          _X10 += 4;
          --v15;
        }
        while (v15);
        uint64_t v23 = (*(_DWORD *)(v9 + 664) - 1);
      }
      *(_DWORD *)(v14 + 4 * v23) = -1;
      *(_DWORD *)(v9 + 676) = 0;
      *(_DWORD *)(v9 + 684) = 0;
    }
  }
  uint64_t v96 = *(unsigned int *)(v9 + 628);
  if (!v96) {
    return this;
  }
  uint64_t v24 = physx::PxcScratchAllocator::alloc((pthread_mutex_t **)a2, 528, 1);
  if (v24)
  {
    *(void *)uint64_t v24 = 0;
    *(_DWORD *)(v24 + 8) = 0;
  }
  uint64_t v26 = 0;
  unsigned int v94 = (_DWORD *)v24;
  uint64_t v95 = *(void *)(v9 + 584);
  uint64_t v27 = v24;
  do
  {
    uint64_t v28 = *(void *)(v95 + 8 * v26);
    *(unsigned char *)(v28 + 120) &= ~1u;
    uint64_t v29 = *(void *)(v28 + 104);
    if (v29)
    {
      if (!*(void *)(v29 + 200))
      {
        int v30 = *(_DWORD *)(v29 + 52);
        if (v30)
        {
          uint64_t v31 = *(uint64_t **)(v29 + 40);
          do
          {
            uint64_t v33 = *v31++;
            uint64_t v32 = v33;
            if (*(unsigned char *)(v33 + 28) == 4)
            {
              uint64_t v34 = *(void *)(v32 + 32);
              if (v34 != v28 && (*(unsigned char *)(v34 + 120) & 1) == 0 && v27)
              {
                uint64_t v35 = *(unsigned int *)(v27 + 8);
                if (v35 > 0x3F)
                {
                  uint64_t v36 = physx::PxcScratchAllocator::alloc((pthread_mutex_t **)a2, 528, 1);
                  if (v36)
                  {
                    *(void *)uint64_t v36 = 0;
                    *(void *)(v36 + 16) = v34;
                    *(void *)uint64_t v27 = v36;
                    uint64_t v27 = v36;
                    *(_DWORD *)(v36 + 8) = 1;
                  }
                }
                else
                {
                  *(void *)(v27 + 8 * v35 + 16) = v34;
                  *(_DWORD *)(v27 + 8) = v35 + 1;
                }
              }
            }
            --v30;
          }
          while (v30);
        }
      }
    }
    uint64_t v37 = *(void *)(v28 + 112);
    if (!v37)
    {
      BOOL v46 = 0;
      uint64_t v45 = *(void *)(v28 + 104);
      goto LABEL_48;
    }
    if (!*(void *)(v37 + 200))
    {
      int v38 = *(_DWORD *)(v37 + 52);
      if (v38)
      {
        uint64_t v39 = *(uint64_t **)(v37 + 40);
        do
        {
          uint64_t v41 = *v39++;
          uint64_t v40 = v41;
          if (*(unsigned char *)(v41 + 28) == 4)
          {
            uint64_t v42 = *(void *)(v40 + 32);
            if (v42 != v28 && (*(unsigned char *)(v42 + 120) & 1) == 0 && v27)
            {
              uint64_t v43 = *(unsigned int *)(v27 + 8);
              if (v43 > 0x3F)
              {
                uint64_t v44 = physx::PxcScratchAllocator::alloc((pthread_mutex_t **)a2, 528, 1);
                if (v44)
                {
                  *(void *)uint64_t v44 = 0;
                  *(void *)(v44 + 16) = v42;
                  *(void *)uint64_t v27 = v44;
                  uint64_t v27 = v44;
                  *(_DWORD *)(v44 + 8) = 1;
                }
              }
              else
              {
                *(void *)(v27 + 8 * v43 + 16) = v42;
                *(_DWORD *)(v27 + 8) = v43 + 1;
              }
            }
          }
          --v38;
        }
        while (v38);
        uint64_t v37 = *(void *)(v28 + 112);
      }
    }
    uint64_t v45 = *(void *)(v28 + 104);
    if (v45)
    {
      BOOL v46 = (physx::Sc::BodySim *)v37;
LABEL_48:
      uint64_t v37 = v45;
      goto LABEL_49;
    }
    BOOL v46 = 0;
    if (!v37) {
      goto LABEL_48;
    }
LABEL_49:
    physx::Sc::ConstraintProjectionManager::addToGroup(v9, (physx::Sc::BodySim *)v37, v46, v25);
    ++v26;
  }
  while (v26 != v96);
  if (v94)
  {
    unsigned int v53 = v94;
    if (v94[2]) {
      goto LABEL_56;
    }
LABEL_55:
    unsigned int v53 = *(_DWORD **)v53;
    if (v53)
    {
LABEL_56:
      uint64_t v54 = v53 + 4;
      uint64_t v55 = 1;
      while (1)
      {
        uint64_t v56 = *(void *)v54;
        *(unsigned char *)(v56 + 120) = *(unsigned char *)(*(void *)v54 + 120) & 0xFE;
        uint64_t v57 = *(void *)(v56 + 104);
        if (v57)
        {
          if (!*(void *)(v57 + 200))
          {
            int v58 = *(_DWORD *)(v57 + 52);
            if (v58)
            {
              uint64_t v59 = *(uint64_t **)(v57 + 40);
              do
              {
                uint64_t v61 = *v59++;
                uint64_t v60 = v61;
                if (*(unsigned char *)(v61 + 28) == 4)
                {
                  uint64_t v62 = *(void *)(v60 + 32);
                  if (v62 != v56 && (*(unsigned char *)(v62 + 120) & 1) == 0 && v27)
                  {
                    uint64_t v63 = *(unsigned int *)(v27 + 8);
                    if (v63 > 0x3F)
                    {
                      uint64_t v64 = physx::PxcScratchAllocator::alloc((pthread_mutex_t **)a2, 528, 1);
                      if (v64)
                      {
                        *(void *)uint64_t v64 = 0;
                        *(void *)(v64 + 16) = v62;
                        *(void *)uint64_t v27 = v64;
                        uint64_t v27 = v64;
                        *(_DWORD *)(v64 + 8) = 1;
                      }
                    }
                    else
                    {
                      *(void *)(v27 + 8 * v63 + 16) = v62;
                      *(_DWORD *)(v27 + 8) = v63 + 1;
                    }
                  }
                }
                --v58;
              }
              while (v58);
            }
          }
        }
        uint64_t v65 = *(void *)(v56 + 112);
        if (!v65) {
          break;
        }
        if (!*(void *)(v65 + 200))
        {
          int v66 = *(_DWORD *)(v65 + 52);
          if (v66)
          {
            atomic_uint v67 = *(uint64_t **)(v65 + 40);
            do
            {
              uint64_t v69 = *v67++;
              uint64_t v68 = v69;
              if (*(unsigned char *)(v69 + 28) == 4)
              {
                uint64_t v70 = *(void *)(v68 + 32);
                if (v70 != v56 && (*(unsigned char *)(v70 + 120) & 1) == 0 && v27)
                {
                  uint64_t v71 = *(unsigned int *)(v27 + 8);
                  if (v71 > 0x3F)
                  {
                    uint64_t v72 = physx::PxcScratchAllocator::alloc((pthread_mutex_t **)a2, 528, 1);
                    if (v72)
                    {
                      *(void *)uint64_t v72 = 0;
                      *(void *)(v72 + 16) = v70;
                      *(void *)uint64_t v27 = v72;
                      uint64_t v27 = v72;
                      *(_DWORD *)(v72 + 8) = 1;
                    }
                  }
                  else
                  {
                    *(void *)(v27 + 8 * v71 + 16) = v70;
                    *(_DWORD *)(v27 + 8) = v71 + 1;
                  }
                }
              }
              --v66;
            }
            while (v66);
            uint64_t v65 = *(void *)(v56 + 112);
          }
        }
        uint64_t v73 = *(void *)(v56 + 104);
        if (v73)
        {
          unsigned int v74 = (physx::Sc::BodySim *)v65;
LABEL_87:
          uint64_t v65 = v73;
          goto LABEL_88;
        }
        unsigned int v74 = 0;
        if (!v65) {
          goto LABEL_87;
        }
LABEL_88:
        physx::Sc::ConstraintProjectionManager::addToGroup(v9, (physx::Sc::BodySim *)v65, v74, v25);
        if (v53[2] <= v55) {
          goto LABEL_55;
        }
        uint64_t v75 = &v53[2 * v55];
        uint64_t v55 = (v55 + 1);
        uint64_t v54 = v75 + 4;
      }
      unsigned int v74 = 0;
      uint64_t v73 = *(void *)(v56 + 104);
      goto LABEL_87;
    }
  }
  uint64_t v76 = 0;
  unsigned __int32 v77 = v94;
  do
  {
    uint64_t v78 = *(void *)(v95 + 8 * v76);
    uint64_t v79 = *(void *)(v78 + 104);
    if (!v79) {
      uint64_t v79 = *(void *)(v78 + 112);
    }
    uint64_t v80 = *(void *)(v79 + 200);
    this = *(void *)(v80 + 8);
    uint64_t v81 = *(void *)(this + 8);
    if (v81 != this)
    {
      int v82 = 0;
      do
      {
        this = v81;
        int v83 = v82;
        uint64_t v81 = *(void *)(v81 + 8);
        ++v82;
      }
      while (this != v81);
      if (v82)
      {
        int v84 = ~v83;
        do
        {
          uint64_t v85 = *(void *)(v80 + 8);
          *(void *)(v80 + 8) = this;
          uint64_t v80 = v85;
        }
        while (!__CFADD__(v84++, 1));
      }
    }
    if (!*(void *)(this + 40)) {
      this = physx::Sc::ConstraintProjectionTree::buildProjectionTrees(this, v47, v48, (uint64_t)v25, v49, v50, v51, v52);
    }
    ++v76;
  }
  while (v76 != v96);
  int v86 = *(_DWORD *)(v9 + 612);
  if (v86 && *(_DWORD *)(v9 + 628))
  {
    this = (uint64_t)memset(*(void **)(v9 + 600), 255, (4 * v86));
    uint64_t v87 = *(void *)(v9 + 592);
    uint64_t v88 = (*(_DWORD *)(v9 + 608) - 1);
    if (*(_DWORD *)(v9 + 608) == 1)
    {
      uint64_t v92 = 0;
    }
    else
    {
      _X10 = v87 + 128;
      int v90 = 1;
      do
      {
        __asm { PRFM            #0, [X10] }
        *(_DWORD *)(_X10 - 128) = v90++;
        _X10 += 4;
        --v88;
      }
      while (v88);
      uint64_t v92 = (*(_DWORD *)(v9 + 608) - 1);
    }
    *(_DWORD *)(v87 + 4 * v92) = -1;
    *(_DWORD *)(v9 + 620) = 0;
    *(_DWORD *)(v9 + 628) = 0;
  }
  if (v94)
  {
    do
    {
      uint64_t v93 = (void *)*v77;
      this = physx::PxcScratchAllocator::free((uint64_t)a2, (unint64_t)v77);
      unsigned __int32 v77 = v93;
    }
    while (v93);
  }
  return this;
}

uint64_t physx::Sc::ConstraintProjectionManager::invalidateGroup(int32x2_t *this, uint64_t a2, physx::Sc::ConstraintSim *a3, int8x8_t a4)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(v6 + 8);
  if (v7 != v6)
  {
    int v8 = 0;
    do
    {
      uint64_t v6 = v7;
      uint64_t v7 = *(void *)(v7 + 8);
      --v8;
    }
    while (v6 != v7);
    if (v8)
    {
      do
      {
        uint64_t v9 = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = v6;
        a2 = v9;
      }
      while (!__CFADD__(v8++, 1));
    }
  }
  if ((*(unsigned char *)(v6 + 88) & 4) != 0)
  {
    uint64_t v13 = v6;
    physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)&this[79], &v13);
    *(unsigned char *)(v6 + 88) &= ~4u;
  }
  do
  {
    uint64_t result = (uint64_t)physx::Sc::ConstraintProjectionManager::markConnectedConstraintsForUpdate(this, *(physx::Sc::BodySim **)v6, a3, a4);
    *(void *)(*(void *)v6 + 200) = 0;
    uint64_t v12 = *(void *)(v6 + 32);
    if (*(void *)(v6 + 40)) {
      uint64_t result = physx::Sc::ConstraintProjectionTree::purgeProjectionTrees(v6);
    }
    --this[69].i32[1];
    *(int32x2_t *)uint64_t v6 = this[71];
    this[71] = (int32x2_t)v6;
    uint64_t v6 = v12;
  }
  while (v12);
  return result;
}

uint64_t physx::Sc::ConstraintProjectionTree::buildProjectionTrees(uint64_t this, physx::Sc::ConstraintGroupNode *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = this;
  unsigned int v9 = 0;
  uint64_t v134 = *MEMORY[0x263EF8340];
  uint64_t v132 = 0x4000000000;
  v130[1536] = 1;
  uint64_t v131 = v130;
  uint64_t v10 = this;
  do
  {
    uint64_t v11 = *(void *)v10;
    char v12 = *(unsigned char *)(v10 + 88);
    if (*(unsigned char *)(*(void *)(*(void *)v10 + 80) + 44))
    {
      *(unsigned char *)(v10 + 88) = v12 | 1;
      goto LABEL_42;
    }
    *(unsigned char *)(v10 + 88) = v12 & 0xFE;
    LODWORD(v125) = 0;
    long long v124 = (unint64_t)v10;
    int v13 = *(_DWORD *)(v11 + 52);
    if (!v13) {
      goto LABEL_39;
    }
    uint64_t v14 = 0;
    unsigned int v15 = 0;
    int v16 = *(uint64_t **)(v11 + 40);
    int v17 = 402653184;
    do
    {
      uint64_t v19 = *v16++;
      uint64_t v18 = v19;
      if (*(unsigned char *)(v19 + 28) != 4) {
        goto LABEL_32;
      }
      uint64_t v20 = *(void *)(v18 + 32);
      uint64_t v21 = *(void *)(v20 + 104);
      if (v21 == v11)
      {
        int v22 = **(unsigned __int16 **)(v20 + 88) & (((*(unsigned __int8 *)(v20 + 120) >> 3) & 1) - 1) & 2;
        this = **(unsigned __int16 **)(v20 + 88) & (((*(unsigned __int8 *)(v20 + 120) >> 3) & 1) - 1) & 4;
        uint64_t v21 = *(void *)(v20 + 112);
        if (!v21) {
          goto LABEL_18;
        }
      }
      else
      {
        int v22 = **(unsigned __int16 **)(v20 + 88) & (((*(unsigned __int8 *)(v20 + 120) >> 3) & 1) - 1) & 4;
        this = **(unsigned __int16 **)(v20 + 88) & (((*(unsigned __int8 *)(v20 + 120) >> 3) & 1) - 1) & 2;
        if (!v21) {
          goto LABEL_18;
        }
      }
      if ((*(unsigned char *)(*(void *)(v21 + 80) + 44) & 1) == 0)
      {
        if (v22) {
          BOOL v23 = this == 0;
        }
        else {
          BOOL v23 = 1;
        }
        if (v23)
        {
          if (this)
          {
            int v17 = 0;
            v15 &= 0xE7FFFFFF;
          }
          else
          {
            if (!v22) {
              goto LABEL_31;
            }
            v15 |= v17 & 0x18000000 | 0x80000000;
          }
        }
        else
        {
          v17 &= ~0x10000000u;
          v15 &= ~0x10000000u;
        }
        ++v9;
LABEL_31:
        ++v15;
        goto LABEL_32;
      }
LABEL_18:
      if (this)
      {
        v15 &= 0xE7FFFFFF;
        int v17 = 0;
        ++v9;
        unsigned int v24 = 0x80000000;
      }
      else
      {
        unsigned int v24 = 0;
      }
      if (v21) {
        int v25 = 0x20000000;
      }
      else {
        int v25 = 0x40000000;
      }
      unsigned int v26 = v24 | v25;
      if (v26 > v15 || v14 == 0) {
        uint64_t v14 = v20;
      }
      v15 |= v26;
LABEL_32:
      --v13;
    }
    while (v13);
    LODWORD(v125) = v15;
    *((void *)&v124 + 1) = v14;
    if (v15 >> 28 >= 9) {
      *(unsigned char *)(v10 + 88) = v12 | 1;
    }
LABEL_39:
    if ((HIDWORD(v132) & 0x7FFFFFFFu) <= v132)
    {
      this = physx::shdfnd::Array<physx::Sc::BodyRank,physx::shdfnd::InlineAllocator<1536u,physx::shdfnd::ReflectionAllocator<physx::Sc::BodyRank>>>::growAndPushBack((uint64_t)v130, &v124);
    }
    else
    {
      uint64_t v28 = &v131[24 * v132];
      *(_OWORD *)uint64_t v28 = v124;
      *((void *)v28 + 2) = v125;
      LODWORD(v132) = v132 + 1;
    }
LABEL_42:
    uint64_t v10 = *(void *)(v10 + 32);
  }
  while (v10);
  char v29 = *(unsigned char *)(v8 + 88) & 7;
  char v30 = v29 | 8;
  if (!v9) {
    char v30 = *(unsigned char *)(v8 + 88) & 7;
  }
  if (v9 >= 5) {
    char v30 = v29 | 0x10;
  }
  if (v9 >= 0x11) {
    char v30 = v29 | 0x20;
  }
  char v31 = v29 | 0x40;
  if (v9 < 0x41) {
    char v31 = v30;
  }
  *(unsigned char *)(v8 + 88) = v31;
  if (v132)
  {
    uint64_t v32 = v131;
    uint64_t v127 = 0x2000000000;
    uint64_t v128 = v133;
    char v129 = 0;
    int v33 = v132 - 1;
    if ((int)v132 - 1 >= 1)
    {
      int v34 = 0;
      uint64_t v35 = v133;
      memset(v133, 0, 128);
      while (1)
      {
        if (v33 <= v34) {
          goto LABEL_86;
        }
        if ((v33 - v34) <= 4)
        {
          uint64_t v72 = v34;
          int v73 = v34 + 1;
          uint64_t v74 = (uint64_t)&v32[24 * v34 + 40];
          do
          {
            uint64_t v75 = 0;
            uint64_t v76 = v72++;
            unsigned __int32 v77 = (unsigned int *)v74;
            int v78 = v76;
            do
            {
              unsigned int v79 = *v77;
              v77 += 6;
              if (v79 > *(_DWORD *)&v32[24 * v78 + 16]) {
                int v78 = v73 + v75;
              }
              ++v75;
            }
            while (v76 + v75 < v33);
            if (v78 != v76)
            {
              uint64_t v80 = &v32[24 * v78];
              uint64_t v81 = &v32[24 * v76];
              uint64_t v82 = *((void *)v80 + 2);
              long long v83 = *(_OWORD *)v80;
              uint64_t v84 = *((void *)v81 + 2);
              *(_OWORD *)uint64_t v80 = *(_OWORD *)v81;
              *((void *)v80 + 2) = v84;
              *(_OWORD *)uint64_t v81 = v83;
              *((void *)v81 + 2) = v82;
            }
            ++v73;
            v74 += 24;
          }
          while (v72 != v33);
LABEL_86:
          int v85 = v127;
          if (!v127)
          {
            if (v129) {
              BOOL v86 = v35 == 0;
            }
            else {
              BOOL v86 = 1;
            }
            if (!v86) {
              (*(void (**)(uint64_t, unsigned char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v35);
            }
            break;
          }
          LODWORD(v127) = v127 - 1;
          int v33 = *(_DWORD *)&v35[4 * (v85 - 1)];
          LODWORD(v127) = v85 - 2;
          int v34 = *(_DWORD *)&v35[4 * (v85 - 2)];
        }
        else
        {
          int v36 = v34 + v33;
          if (v34 + v33 < 0 != __OFADD__(v34, v33)) {
            ++v36;
          }
          uint64_t v37 = &v32[24 * (v36 >> 1)];
          int v38 = &v32[24 * v34];
          unsigned int v39 = *((_DWORD *)v38 + 4);
          if (*((_DWORD *)v37 + 4) > v39)
          {
            uint64_t v40 = *((void *)v38 + 2);
            long long v41 = *(_OWORD *)v38;
            uint64_t v42 = *((void *)v37 + 2);
            *(_OWORD *)int v38 = *(_OWORD *)v37;
            *((void *)v38 + 2) = v42;
            *(_OWORD *)uint64_t v37 = v41;
            *((void *)v37 + 2) = v40;
            unsigned int v39 = *((_DWORD *)v38 + 4);
          }
          uint64_t v43 = &v32[24 * v33];
          unsigned int v44 = *((_DWORD *)v43 + 4);
          if (v44 > v39)
          {
            uint64_t v45 = *((void *)v38 + 2);
            long long v46 = *(_OWORD *)v38;
            uint64_t v47 = *((void *)v43 + 2);
            *(_OWORD *)int v38 = *(_OWORD *)v43;
            *((void *)v38 + 2) = v47;
            *(_OWORD *)uint64_t v43 = v46;
            *((void *)v43 + 2) = v45;
            unsigned int v44 = *((_DWORD *)v43 + 4);
          }
          if (v44 > *((_DWORD *)v37 + 4))
          {
            uint64_t v48 = *((void *)v37 + 2);
            long long v49 = *(_OWORD *)v37;
            uint64_t v50 = *((void *)v43 + 2);
            *(_OWORD *)uint64_t v37 = *(_OWORD *)v43;
            *((void *)v37 + 2) = v50;
            *(_OWORD *)uint64_t v43 = v49;
            *((void *)v43 + 2) = v48;
          }
          uint64_t v51 = v33 - 1;
          uint64_t v52 = &v32[24 * v51];
          uint64_t v53 = *((void *)v37 + 2);
          long long v54 = *(_OWORD *)v37;
          uint64_t v55 = *((void *)v52 + 2);
          *(_OWORD *)uint64_t v37 = *(_OWORD *)v52;
          *((void *)v37 + 2) = v55;
          *(_OWORD *)uint64_t v52 = v54;
          *((void *)v52 + 2) = v53;
          int v56 = v34;
          while (1)
          {
            unsigned int v57 = *((_DWORD *)v52 + 4);
            int v58 = &v32[24 * v56];
            do
            {
              unsigned int v59 = *((_DWORD *)v58 + 10);
              v58 += 24;
              ++v56;
            }
            while (v59 > v57);
            uint64_t v60 = &v32[24 * (int)v51];
            do
            {
              unsigned int v61 = *((_DWORD *)v60 - 2);
              v60 -= 24;
              LODWORD(v51) = v51 - 1;
            }
            while (v57 > v61);
            if (v56 >= (int)v51) {
              break;
            }
            uint64_t v62 = *((void *)v58 + 2);
            long long v63 = *(_OWORD *)v58;
            uint64_t v64 = *((void *)v60 + 2);
            *(_OWORD *)int v58 = *(_OWORD *)v60;
            *((void *)v58 + 2) = v64;
            *(_OWORD *)uint64_t v60 = v63;
            *((void *)v60 + 2) = v62;
          }
          uint64_t v65 = *((void *)v58 + 2);
          long long v66 = *(_OWORD *)v58;
          uint64_t v67 = *((void *)v52 + 2);
          *(_OWORD *)int v58 = *(_OWORD *)v52;
          *((void *)v58 + 2) = v67;
          *(_OWORD *)uint64_t v52 = v66;
          *((void *)v52 + 2) = v65;
          int v68 = v127;
          unsigned int v69 = HIDWORD(v127) - 1;
          if (v56 - v34 >= v33 - v56)
          {
            if (v127 >= v69)
            {
              physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::BodyRank>>::grow((uint64_t)v126);
              int v68 = v127;
              uint64_t v35 = v128;
            }
            LODWORD(v127) = v68 + 1;
            *(_DWORD *)&v35[4 * v68] = v56 + 1;
            uint64_t v71 = v127;
            LODWORD(v127) = v127 + 1;
            *(_DWORD *)&v35[4 * v71] = v33;
            int v33 = v56 - 1;
          }
          else
          {
            if (v127 >= v69)
            {
              physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::BodyRank>>::grow((uint64_t)v126);
              int v68 = v127;
              uint64_t v35 = v128;
            }
            LODWORD(v127) = v68 + 1;
            *(_DWORD *)&v35[4 * v68] = v34;
            uint64_t v70 = v127;
            LODWORD(v127) = v127 + 1;
            *(_DWORD *)&v35[4 * v70] = v56 - 1;
            int v34 = v56 + 1;
          }
        }
      }
    }
    if (v132
      && (uint64_t v87 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                 + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * v132, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScConstraintProjectionTree.cpp", 262)) != 0)
    {
      uint64_t v88 = (void *)v87;
      uint64_t v122 = v8;
      int v123 = (void *)v87;
      int v89 = 0;
      LODWORD(v90) = 0;
      int v91 = 0;
      char v92 = 1;
      unsigned int v93 = -1879048192;
      unsigned int v94 = v132;
      do
      {
        char v95 = v92;
        if (v90 < v94)
        {
          uint64_t v96 = v94;
          uint64_t v97 = v90;
          uint64_t v98 = 24 * v90;
          unsigned int v99 = v88;
          while (1)
          {
            unsigned int v100 = &v131[v98];
            unsigned int v101 = *(_DWORD *)&v131[v98 + 16];
            if (v101 < v93) {
              break;
            }
            uint64_t v103 = (void *)*v100;
            uint64_t v102 = v100[1];
            *(void *)(*v100 + 80) = v102;
            if ((v101 & 0x60000000) != 0)
            {
              *unsigned int v99 = v103;
              uint64_t v104 = 1;
            }
            else
            {
              uint64_t v104 = physx::Sc::ConstraintProjectionTree::projectionTreeBuildStep(v103, v102, v99);
            }
            v99 += v104;
            v103[6] = v89;
            ++v97;
            v98 += 24;
            int v89 = v103;
            if (v96 == v97)
            {
              LODWORD(v90) = v96;
              int v89 = v103;
              goto LABEL_105;
            }
          }
          LODWORD(v90) = v97;
LABEL_105:
          uint64_t v88 = v123;
          if (v123 != v99)
          {
            uint64_t v105 = (void **)v123;
            do
            {
              atomic_uint v106 = *v105++;
              v99 += physx::Sc::ConstraintProjectionTree::projectionTreeBuildStep(v106, v106[10], v99);
            }
            while (v105 != v99);
          }
        }
        unint64_t v90 = (v90 + v91);
        unsigned int v107 = v132;
        if (v90 >= v132)
        {
          int v91 = 0;
          unsigned int v94 = v90;
        }
        else
        {
          int v91 = 0;
          uint64_t v108 = 24 * v90;
          unint64_t v109 = v90;
          unsigned int v94 = v90;
          do
          {
            uint64_t v110 = v131;
            long long v111 = &v131[v108];
            if (*(_DWORD *)&v131[v108 + 16] >> 27 < 0x11u) {
              break;
            }
            if (*(unsigned char *)(*v111 + 88))
            {
              ++v91;
            }
            else
            {
              *(unsigned char *)(*v111 + 88) |= 1u;
              long long v112 = &v110[24 * v94];
              long long v113 = *(_OWORD *)v111;
              *((void *)v112 + 2) = v111[2];
              *(_OWORD *)long long v112 = v113;
              ++v94;
              unsigned int v107 = v132;
            }
            ++v109;
            v108 += 24;
          }
          while (v109 < v107);
        }
        char v92 = 0;
        unsigned int v93 = -2013265920;
      }
      while ((v95 & 1) != 0);
      if (v90 >= v107)
      {
        float v116 = v89;
        uint64_t v114 = v122;
      }
      else
      {
        uint64_t v114 = v122;
        do
        {
          uint64_t v115 = v131;
          float v116 = *(void **)&v131[24 * v90];
          if (v116[11])
          {
            float v116 = v89;
          }
          else
          {
            *((unsigned char *)v116 + 88) |= 1u;
            int v117 = physx::Sc::ConstraintProjectionTree::projectionTreeBuildStep(v116, *(void *)&v115[24 * v90 + 8], v88);
            if (v117)
            {
              unsigned int v118 = (void **)v123;
              int v119 = &v123[v117];
              do
              {
                int v120 = *v118++;
                v119 += physx::Sc::ConstraintProjectionTree::projectionTreeBuildStep(v120, v120[10], v119);
              }
              while (v118 != v119);
            }
            v116[6] = v89;
            unsigned int v107 = v132;
            int v89 = v116;
            uint64_t v88 = v123;
          }
          ++v90;
        }
        while (v90 < v107);
      }
      *(void *)(v114 + 40) = v116;
      this = (*(uint64_t (**)(uint64_t, void *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v88);
    }
    else
    {
      this = physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScConstraintProjectionTree.cpp", 405, "Allocating projection node queue failed!", a6, a7, a8, v121);
    }
  }
  if ((v132 & 0x8000000000000000) == 0 && (v132 & 0x7FFFFFFF00000000) != 0 && v131 != v130 && v131) {
    return (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return this;
}

uint64_t physx::Sc::ConstraintProjectionTree::projectionTreeBuildStep(void *a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 52);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(uint64_t **)(v3 + 40);
    while (1)
    {
      uint64_t v8 = *v6++;
      uint64_t v7 = v8;
      if (*(unsigned char *)(v8 + 28) == 4)
      {
        uint64_t v9 = *(void *)(v7 + 32);
        if (v9 != a2)
        {
          uint64_t v10 = *(void *)(v9 + 104);
          if (v10 == v3)
          {
            int v11 = **(unsigned __int16 **)(v9 + 88) & (((*(unsigned __int8 *)(v9 + 120) >> 3) & 1) - 1) & 2;
            int v12 = **(unsigned __int16 **)(v9 + 88) & (((*(unsigned __int8 *)(v9 + 120) >> 3) & 1) - 1) & 4;
            uint64_t v10 = *(void *)(v9 + 112);
            if (v10)
            {
LABEL_9:
              if ((*(unsigned char *)(*(void *)(v10 + 80) + 44) & 1) == 0)
              {
                if (v12) {
                  BOOL v13 = v11 == 0;
                }
                else {
                  BOOL v13 = 0;
                }
                if (!v13)
                {
                  uint64_t v14 = *(void *)(v10 + 200);
                  char v15 = *(unsigned char *)(v14 + 88);
                  if ((v15 & 1) == 0)
                  {
                    *a3++ = v14;
                    *(void *)(v14 + 72) = a1[8];
                    *(void *)(v14 + 80) = v9;
                    a1[8] = v14;
                    *(void *)(v14 + 56) = a1;
                    *(unsigned char *)(v14 + 88) = v15 | 1;
                    uint64_t v5 = (v5 + 1);
                  }
                }
              }
            }
          }
          else
          {
            int v11 = **(unsigned __int16 **)(v9 + 88) & (((*(unsigned __int8 *)(v9 + 120) >> 3) & 1) - 1) & 4;
            int v12 = **(unsigned __int16 **)(v9 + 88) & (((*(unsigned __int8 *)(v9 + 120) >> 3) & 1) - 1) & 2;
            if (v10) {
              goto LABEL_9;
            }
          }
        }
      }
      if (!--v4) {
        return v5;
      }
    }
  }
  return 0;
}

uint64_t physx::Sc::ConstraintProjectionTree::purgeProjectionTrees(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  do
  {
    uint64_t v2 = v1;
    uint64_t v1 = *(void *)(v1 + 48);
    do
    {
      uint64_t v3 = *(void *)(v2 + 64);
      if (!v3)
      {
        uint64_t v3 = *(void *)(v2 + 56);
        uint64_t v4 = *(void *)(v2 + 72);
        if (v3) {
          *(void *)(v3 + 64) = 0;
        }
        *(_OWORD *)(v2 + 72) = 0uLL;
        *(_OWORD *)(v2 + 56) = 0uLL;
        *(_OWORD *)(v2 + 40) = 0uLL;
        if (v4) {
          uint64_t v3 = v4;
        }
      }
      uint64_t v2 = v3;
    }
    while (v3);
  }
  while (v1);
  *(void *)(result + 40) = 0;
  return result;
}

void *physx::Sc::ConstraintProjectionTree::projectPoseForTree(void *result, uint64_t a2)
{
  uint64_t v3 = v25;
  v25[0] = *result;
  v25[1] = v25;
  v25[2] = v25;
  int v26 = 0;
  v29[0] = 0;
  *(_OWORD *)((char *)&v29[1] + 1) = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  v29[1] = result;
  long long v4 = xmmword_23435FBB0;
  if (!result) {
    goto LABEL_25;
  }
  while (1)
  {
LABEL_2:
    uint64_t v3 = result;
    uint64_t v5 = result[10];
    if (v5)
    {
      if (((uint64_t v6 = *(void *)(v5 + 104)) != 0 && (*(unsigned char *)(*(void *)(v6 + 80) + 44) & 1) == 0
         || (uint64_t v7 = *(void *)(v5 + 112)) != 0 && (*(unsigned char *)(*(void *)(v7 + 80) + 44) & 1) == 0)
        && (**(_WORD **)(v5 + 88) & 6) != 0
        && *(_DWORD *)(*(void *)(*(void *)(*(void *)(v5 + 80) + 1888) + 232)
                     + 32 * *(unsigned int *)(v5 + 72)
                     + 12) == 0)
      {
        uint64_t v9 = *(void *)(v5 + 40);
        float32x2_t v10 = 0;
        __int32 v11 = 0;
        __int32 v12 = 0;
        long long v13 = v4;
        float32x2_t v14 = 0;
        if (v9)
        {
          uint64_t v15 = *(void *)(v9 + 40);
          long long v13 = *(_OWORD *)v15;
          float32x2_t v14 = *(float32x2_t *)(v15 + 16);
          __int32 v12 = *(_DWORD *)(v15 + 24);
        }
        uint64_t v16 = *result;
        uint64_t v17 = *(void *)(v5 + 112);
        uint64_t v18 = *(void *)(v5 + 48);
        long long v34 = v13;
        float32x2_t v35 = v14;
        long long v19 = v4;
        __int32 v36 = v12;
        if (v18)
        {
          uint64_t v20 = *(void *)(v18 + 40);
          long long v19 = *(_OWORD *)v20;
          float32x2_t v10 = *(float32x2_t *)(v20 + 16);
          __int32 v11 = *(_DWORD *)(v20 + 24);
        }
        long long v31 = v19;
        float32x2_t v32 = v10;
        __int32 v33 = v11;
        (*(void (**)(void, long long *, long long *, BOOL))(v5 + 24))(*(void *)(v5 + 32), &v34, &v31, v17 == v16);
        if (v17 == v16)
        {
          BOOL v23 = *(float32x2_t **)(v18 + 40);
          constrainMotion(v23, (float32x2_t *)&v31);
          *(_OWORD *)v23->f32 = v31;
          v23[2] = v32;
          v23[3].i32[0] = v33;
          uint64_t v22 = *(void *)(v5 + 112);
        }
        else
        {
          uint64_t v21 = *(float32x2_t **)(v9 + 40);
          constrainMotion(v21, (float32x2_t *)&v34);
          *(_OWORD *)v21->f32 = v34;
          float32x4_t v21[2] = v35;
          v21[3].i32[0] = v36;
          uint64_t v22 = *(void *)(v5 + 104);
        }
        uint64_t v30 = v22;
        uint64_t v24 = *(unsigned int *)(a2 + 8);
        if ((*(_DWORD *)(a2 + 12) & 0x7FFFFFFFu) <= v24)
        {
          physx::shdfnd::Array<physx::Sc::BodySim *,physx::shdfnd::ReflectionAllocator<physx::Sc::BodySim *>>::growAndPushBack(a2, &v30);
        }
        else
        {
          *(void *)(*(void *)a2 + 8 * v24) = v22;
          *(_DWORD *)(a2 + 8) = v24 + 1;
        }
        long long v4 = xmmword_23435FBB0;
      }
    }
    uint64_t result = (void *)v3[8];
    if (!result)
    {
      uint64_t result = (void *)v3[9];
      if (!result) {
        break;
      }
    }
  }
LABEL_25:
  while (1)
  {
    uint64_t v3 = (void *)v3[7];
    if (!v3) {
      return result;
    }
    uint64_t result = (void *)v3[9];
    if (result) {
      goto LABEL_2;
    }
  }
}

uint64_t physx::Sc::ConstraintSim::ConstraintSim(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a1 + 80) = a5;
  *(void *)(a1 + 88) = a2;
  *(void *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  if (a3 && *(unsigned char *)(a3 + 13)) {
    float32x2_t v10 = *(physx::Sc::RigidSim **)a3;
  }
  else {
    float32x2_t v10 = 0;
  }
  *(void *)(a1 + 104) = v10;
  if (a4 && *(unsigned char *)(a4 + 13)) {
    __int32 v11 = *(physx::Sc::RigidSim **)a4;
  }
  else {
    __int32 v11 = 0;
  }
  *(void *)(a1 + 112) = v11;
  uint64_t v12 = *(void *)(a5 + 4272);
  int v13 = *(_DWORD *)(v12 + 24);
  if (v13)
  {
    int v14 = v13 - 1;
    unsigned int v15 = *(_DWORD *)(*(void *)(v12 + 16) + 4 * (v13 - 1));
    *(_DWORD *)(v12 + 24) = v14;
  }
  else
  {
    unsigned int v15 = *(_DWORD *)(v12 + 8);
    *(_DWORD *)(v12 + 8) = v15 + 1;
  }
  *(_DWORD *)(a1 + 72) = v15;
  uint64_t v16 = *(void *)(a5 + 1888);
  if ((*(_DWORD *)(v16 + 244) & 0x7FFFFFFFu) - 1 < v15)
  {
    physx::shdfnd::Array<physx::Dy::ConstraintWriteback,physx::shdfnd::VirtualAllocator>::recreate(v16 + 224, 2 * *(_DWORD *)(v16 + 244));
    unsigned int v15 = *(_DWORD *)(a1 + 72);
  }
  if (*(_DWORD *)(v16 + 240) <= v15 + 1) {
    unsigned int v17 = v15 + 1;
  }
  else {
    unsigned int v17 = *(_DWORD *)(v16 + 240);
  }
  memset(v43, 0, sizeof(v43));
  physx::shdfnd::Array<physx::Dy::ConstraintWriteback,physx::shdfnd::VirtualAllocator>::resize(v16 + 224, v17, (uint64_t)v43);
  uint64_t v18 = *(void *)(v16 + 232) + 32 * *(unsigned int *)(a1 + 72);
  *(void *)uint64_t v18 = 0;
  *(void *)(v18 + 8) = 0;
  *(_DWORD *)(v18 + 24) = 0;
  *(void *)(v18 + 16) = 0;
  uint64_t v19 = *(void *)(a1 + 88);
  size_t v20 = *(unsigned int *)(v19 + 64);
  ConstraintBlocuint64_t k = physx::Sc::Scene::allocateConstraintBlock(*(physx::Sc::Scene **)(a1 + 80), *(_DWORD *)(v19 + 64));
  if (ConstraintBlock)
  {
    int v25 = ConstraintBlock;
    bzero(ConstraintBlock, v20);
    *(_DWORD *)a1 = *(_DWORD *)(v19 + 68);
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(v19 + 72);
    *(_WORD *)(a1 + 10) = *(_WORD *)v19;
    *(_WORD *)(a1 + 8) = v20;
    int8x16_t v26 = vextq_s8(*(int8x16_t *)(v19 + 40), *(int8x16_t *)(v19 + 40), 8uLL);
    *(int8x16_t *)(a1 + 16) = v26;
    uint64_t v28 = *(void *)(a1 + 104);
    uint64_t v27 = *(void *)(a1 + 112);
    uint64_t v29 = v28 + 96;
    if (!v28) {
      uint64_t v29 = 0;
    }
    *(void *)(a1 + 32) = v25;
    *(void *)(a1 + 40) = v29;
    uint64_t v30 = v27 + 96;
    if (!v27) {
      uint64_t v30 = 0;
    }
    *(void *)(a1 + 48) = v30;
    if (v28) {
      uint64_t v28 = *(void *)(v28 + 136);
    }
    *(void *)(a1 + 56) = v28;
    if (v27) {
      uint64_t v27 = *(void *)(v27 + 136);
    }
    *(void *)(a1 + 64) = v27;
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(v19 + 76);
    v26.i32[0] = *(_DWORD *)(a2 + 68);
    if (*(float *)v26.i32 < 3.4028e38 || (v26.i32[0] = *(_DWORD *)(a2 + 72), *(float *)v26.i32 < 3.4028e38)) {
      *(unsigned char *)(a1 + 120) |= 2u;
    }
    *(void *)(a2 + 80) = a1;
    long long v31 = *(int32x2_t **)(a5 + 2056);
    if ((**(_WORD **)(a1 + 88) & 6) == 0
      || *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 80) + 1888) + 232)
                   + 32 * *(unsigned int *)(a1 + 72)
                   + 12))
    {
      uint64_t v32 = *(void *)(a1 + 104);
      uint64_t v33 = *(void *)(a1 + 112);
      if (v32)
      {
        uint64_t v34 = *(void *)(v32 + 200);
        if (v34) {
          physx::Sc::ConstraintProjectionManager::invalidateGroup(*(int32x2_t **)(a5 + 2056), v34, (physx::Sc::ConstraintSim *)a1, *(int8x8_t *)v26.i8);
        }
      }
      if (v33)
      {
        uint64_t v35 = *(void *)(v33 + 200);
        if (v35) {
          physx::Sc::ConstraintProjectionManager::invalidateGroup(v31, v35, (physx::Sc::ConstraintSim *)a1, *(int8x8_t *)v26.i8);
        }
      }
    }
    else
    {
      physx::Sc::ConstraintProjectionManager::addToPendingGroupUpdates(*(int32x2_t **)(a5 + 2056), (physx::Sc::ConstraintSim *)a1, *(int8x8_t *)v26.i8);
    }
    uint64_t v36 = *(void *)(*(void *)(a1 + 80) + 4360);
    uint64_t v37 = (physx::Sc::RigidSim **)(a5 + 4304);
    if (a3) {
      int v38 = (physx::Sc::RigidSim **)a3;
    }
    else {
      int v38 = (physx::Sc::RigidSim **)(a5 + 4304);
    }
    unsigned int v39 = *v38;
    if (a4) {
      uint64_t v37 = (physx::Sc::RigidSim **)a4;
    }
    uint64_t v40 = *v37;
    long long v41 = *(physx::Sc::ConstraintInteraction **)(v36 + 560);
    if (!v41)
    {
      physx::shdfnd::PoolBase<physx::Sc::ConstraintInteraction,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintInteraction>>::allocateSlab(*(void *)(*(void *)(a1 + 80) + 4360));
      long long v41 = *(physx::Sc::ConstraintInteraction **)(v36 + 560);
    }
    *(void *)(v36 + 560) = *(void *)v41;
    ++*(_DWORD *)(v36 + 548);
    *(void *)(a1 + 96) = physx::Sc::ConstraintInteraction::ConstraintInteraction(v41, (physx::Sc::ConstraintSim *)a1, v39, v40);
  }
  else
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScConstraintSim.cpp", 127, "Constraint: could not allocate low-level resources.", v22, v23, v24, v43[0]);
  }
  return a1;
}

uint64_t physx::shdfnd::Array<physx::Dy::ConstraintWriteback,physx::shdfnd::VirtualAllocator>::resize(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = result;
  if ((*(_DWORD *)(result + 20) & 0x7FFFFFFFu) < a2) {
    uint64_t result = physx::shdfnd::Array<physx::Dy::ConstraintWriteback,physx::shdfnd::VirtualAllocator>::recreate(result, a2);
  }
  uint64_t v6 = *(unsigned int *)(v5 + 16);
  if (v6 < a2)
  {
    uint64_t v7 = *(void *)(v5 + 8);
    unint64_t v8 = v7 + 32 * v6;
    do
    {
      *(void *)unint64_t v8 = *(void *)a3;
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(v8 + 12) = *(_DWORD *)(a3 + 12);
      *(void *)(v8 + 16) = *(void *)(a3 + 16);
      *(_DWORD *)(v8 + 24) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(v8 + 28) = *(_DWORD *)(a3 + 28);
      v8 += 32;
    }
    while (v8 < v7 + 32 * (unint64_t)a2);
  }
  *(_DWORD *)(v5 + 16) = a2;
  return result;
}

void physx::Sc::ConstraintSim::~ConstraintSim(physx::Sc::ConstraintSim *this)
{
  char v2 = *((unsigned char *)this + 120);
  if (v2)
  {
    uint64_t v3 = *(void *)(*((void *)this + 10) + 2056) + 576;
    __int32 v11 = this;
    physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v3, (uint64_t *)&v11);
    char v2 = *((unsigned char *)this + 120) & 0xFE;
    *((unsigned char *)this + 120) = v2;
  }
  if ((v2 & 8) == 0) {
    physx::Sc::ConstraintInteraction::destroy(*((physx::Sc::ConstraintInteraction **)this + 12));
  }
  uint64_t v4 = *(void *)(*((void *)this + 10) + 4272);
  unint64_t v5 = *((unsigned int *)this + 18);
  int v12 = v5;
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v4 + 32, v5 + 1);
  *(_DWORD *)(*(void *)(v4 + 32) + ((v5 >> 3) & 0x1FFFFFFC)) |= 1 << v5;
  uint64_t v6 = *(unsigned int *)(v4 + 56);
  if ((*(_DWORD *)(v4 + 60) & 0x7FFFFFFFu) <= v6)
  {
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v4 + 48, &v12);
  }
  else
  {
    *(_DWORD *)(*(void *)(v4 + 48) + 4 * v6) = v5;
    ++*(_DWORD *)(v4 + 56);
  }
  uint64_t v7 = *((void *)this + 10);
  unint64_t v8 = (void *)*((void *)this + 12);
  if (v8)
  {
    uint64_t v9 = *(void *)(v7 + 4360);
    --*(_DWORD *)(v9 + 548);
    void *v8 = *(void *)(v9 + 560);
    *(void *)(v9 + 560) = v8;
  }
  float32x2_t v10 = (void *)*((void *)this + 4);
  if (v10) {
    physx::Sc::Scene::deallocateConstraintBlock(v7, v10, *((unsigned __int16 *)this + 4));
  }
  *(void *)(*((void *)this + 11) + 80) = 0;
}

void *physx::Sc::ConstraintSim::checkMaxForceExceeded(physx::Sc::ConstraintSim *this)
{
  uint64_t result = (void *)*((void *)this + 10);
  if (*(_DWORD *)(*(void *)(result[236] + 232) + 32 * *((unsigned int *)this + 18) + 12))
  {
    *((unsigned char *)this + 120) |= 8u;
    physx::Sc::Scene::addBrokenConstraint((uint64_t)result, *((void *)this + 11));
    uint64_t v3 = (physx::Sc::ConstraintInteraction *)*((void *)this + 12);
    **((_WORD **)this + 11) |= 1u;
    physx::Sc::ConstraintInteraction::destroy(v3);
    unint64_t v5 = (uint64_t *)*((void *)this + 12);
    uint64_t v7 = *v5;
    uint64_t v6 = v5[1];
    if (*(_DWORD *)(v7 + 52) >= *(_DWORD *)(v6 + 52)) {
      unint64_t v8 = (void *)v6;
    }
    else {
      unint64_t v8 = (void *)v7;
    }
    return physx::Sc::ActorSim::setActorsInteractionsDirty(v8, 1, 0, 1, v4);
  }
  return result;
}

void constrainMotion(float32x2_t *a1, float32x2_t *a2)
{
  unsigned int v2 = a1[19].u8[6];
  if (a1[19].i8[6])
  {
    float32x2_t v4 = a1[2];
    float v5 = a1[3].f32[0];
    float v6 = a1->f32[0];
    float v7 = a1->f32[1];
    float v8 = a1[1].f32[0];
    float v9 = a1[1].f32[1];
    float v10 = a2->f32[1];
    float v12 = a2[1].f32[0];
    float v11 = a2[1].f32[1];
    float v13 = (float)((float)((float)(v9 * a2->f32[0]) - (float)(v11 * a1->f32[0])) - (float)(v10 * v8)) + (float)(v7 * v12);
    float v14 = (float)((float)((float)(v9 * v10) - (float)(v11 * v7)) - (float)(v12 * a1->f32[0])) + (float)(v8 * a2->f32[0]);
    float v15 = (float)((float)((float)(v9 * v12) - (float)(v11 * v8)) - (float)(a2->f32[0] * v7)) + (float)(a1->f32[0] * v10);
    float v16 = (float)((float)((float)(a1->f32[0] * a2->f32[0]) + (float)(v11 * v9)) + (float)(v10 * v7)) + (float)(v12 * v8);
    if (v16 < 0.0)
    {
      float v13 = -v13;
      float v14 = -v14;
      float v15 = -v15;
      float v16 = -v16;
    }
    int8x8_t v17 = (int8x8_t)vsub_f32(a2[2], v4);
    float v18 = a2[3].f32[0] - v5;
    float v19 = (float)((float)(v14 * v14) + (float)(v13 * v13)) + (float)(v15 * v15);
    float v20 = 1.0;
    float v21 = 0.0;
    float v22 = 0.0;
    float v23 = 0.0;
    if (v19 >= 1.0e-16)
    {
      float v24 = 1.0 / sqrtf(v19);
      float v20 = v13 * v24;
      float v21 = v14 * v24;
      float v22 = v15 * v24;
      if (fabsf(v16) >= 0.00000001)
      {
        float32x2_t v52 = a1[2];
        float v51 = a1[3].f32[0];
        int8x8_t v50 = v17;
        float v49 = a2[3].f32[0] - v5;
        float v25 = atan2f(v19 * v24, v16);
        float v18 = v49;
        int8x8_t v17 = v50;
        float v5 = v51;
        float32x2_t v4 = v52;
        float v23 = v25 + v25;
      }
      else
      {
        float v23 = 3.1416;
      }
    }
    float v26 = v20 * v23;
    float v27 = v21 * v23;
    float v28 = v22 * v23;
    int32x2_t v29 = (int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v2), (int8x8_t)0x200000001);
    if ((v2 & 4) != 0) {
      float v30 = 0.0;
    }
    else {
      float v30 = v18;
    }
    if ((v2 & 8) != 0) {
      float v31 = 0.0;
    }
    else {
      float v31 = v26;
    }
    if ((v2 & 0x10) != 0) {
      float v32 = 0.0;
    }
    else {
      float v32 = v27;
    }
    if ((v2 & 0x20) != 0) {
      float v33 = 0.0;
    }
    else {
      float v33 = v28;
    }
    a2[2] = vadd_f32(v4, (float32x2_t)vand_s8(v17, (int8x8_t)vceqz_s32(v29)));
    a2[3].f32[0] = v5 + v30;
    float v34 = (float)((float)(v32 * v32) + (float)(v31 * v31)) + (float)(v33 * v33);
    if (v34 != 0.0)
    {
      float v35 = sqrtf(v34);
      __float2 v36 = __sincosf_stret(v35 * 0.5);
      float v37 = v31 * (float)(v36.__sinval / v35);
      float v38 = v32 * (float)(v36.__sinval / v35);
      float v39 = v33 * (float)(v36.__sinval / v35);
      float v40 = (float)((float)((float)(v9 * v37) + (float)(v6 * 0.0)) + (float)(v38 * v8)) + (float)((float)-v7 * v39);
      float v41 = (float)((float)((float)(v9 * v38) + (float)(v7 * 0.0)) + (float)(v39 * v6)) + (float)((float)-v8 * v37);
      float v42 = (float)((float)((float)(v9 * v39) + (float)(v8 * 0.0)) + (float)(v37 * v7)) + (float)((float)-v6 * v38);
      float v43 = (float)((float)((float)(v9 * 0.0) - (float)(v37 * v6)) - (float)(v38 * v7)) - (float)(v39 * v8);
      float v44 = (float)(v6 * v36.__cosval) + v40;
      float v45 = (float)(v7 * v36.__cosval) + v41;
      float v46 = (float)(v8 * v36.__cosval) + v42;
      float v47 = (float)(v9 * v36.__cosval) + v43;
      float v48 = sqrtf((float)((float)((float)(v45 * v45) + (float)(v44 * v44)) + (float)(v46 * v46)) + (float)(v47 * v47));
      float v6 = v44 / v48;
      float v7 = v45 / v48;
      float v8 = v46 / v48;
      float v9 = v47 / v48;
    }
    a2->f32[0] = v6;
    a2->f32[1] = v7;
    a2[1].f32[0] = v8;
    a2[1].f32[1] = v9;
  }
}

void *physx::Sc::ConstraintSim::visualize(void *result, uint64_t a2)
{
  uint64_t v2 = result[11];
  if ((*(_WORD *)v2 & 0x10) == 0) {
    return result;
  }
  uint64_t v4 = result[5];
  uint64_t v3 = result[6];
  long long v29 = xmmword_23435FBB0;
  uint64_t v30 = 0;
  int v31 = 0;
  if (!v4)
  {
    float v5 = &v29;
    if (v3) {
      goto LABEL_4;
    }
LABEL_6:
    float v6 = &v29;
    goto LABEL_7;
  }
  float v5 = *(long long **)(v4 + 40);
  if (!v3) {
    goto LABEL_6;
  }
LABEL_4:
  float v6 = *(long long **)(v3 + 40);
LABEL_7:
  uint64_t v7 = result[10];
  float v8 = *(float *)(v7 + 4656);
  uint64_t v9 = *(void *)(v7 + 1840);
  float v10 = v8 * *(float *)(v9 + 1872);
  float v11 = v8 * *(float *)(v9 + 1876);
  memset(v17, 0, sizeof(v17));
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v18 = 0x3F80000000000000;
  int v21 = 1065353216;
  uint64_t v23 = 0;
  uint64_t v22 = 0;
  int v24 = 1065353216;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  int v27 = 1065353216;
  uint64_t v28 = a2;
  float v13 = &unk_26E725838;
  float v14 = v10;
  float v15 = v11;
  float v16 = v17;
  if (v11 == 0.0) {
    uint64_t v12 = v10 != 0.0;
  }
  else {
    uint64_t v12 = (v10 != 0.0) | 2u;
  }
  return (void *)(*(uint64_t (**)(void **, void, long long *, long long *, uint64_t))(v2 + 56))(&v13, result[4], v5, v6, v12);
}

void physx::Sc::ElementInteractionMarker::~ElementInteractionMarker(physx::Sc::ElementInteractionMarker *this)
{
  *(void *)this = &unk_26E7258B0;
  uint64_t v2 = (void *)((char *)this + 8);
  if (*((_DWORD *)this + 6) != -1)
  {
    uint64_t v3 = *(void *)(*((void *)this + 1) + 72);
    physx::Sc::Scene::unregisterInteraction(v3, (uint64_t)v2);
    uint64_t v4 = *(void *)(v3 + 3992) + 3704;
    unint64_t v5 = *((void *)this + 5);
    unint64_t v6 = *((void *)this + 6);
    if (v5 <= v6) {
      uint64_t v7 = *((void *)this + 5);
    }
    else {
      uint64_t v7 = *((void *)this + 6);
    }
    if (v5 <= v6) {
      unint64_t v5 = *((void *)this + 6);
    }
    v8[0] = v7;
    v8[1] = v5;
    physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Sc::ElementSimKey const,physx::Sc::ElementSimInteraction *>,physx::Sc::ElementSimKey,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::internal::HashMapBase<physx::Sc::ElementSimKey,physx::Sc::ElementSimInteraction *,physx::shdfnd::Hash<physx::Sc::ElementSimKey>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v4, v8);
  }
  physx::Sc::ActorSim::unregisterInteractionFromActor(*((void *)this + 1), v2);
  physx::Sc::ActorSim::unregisterInteractionFromActor(*((void *)this + 2), v2);
}

{
  uint64_t v1;
  void (*v2)(void);
  uint64_t vars8;

  physx::Sc::ElementInteractionMarker::~ElementInteractionMarker(this);
  if (v1)
  {
    uint64_t v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

physx::Sc::ElementSim *physx::Sc::ElementSim::ElementSim(physx::Sc::ElementSim *this, physx::Sc::ActorSim *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = a2;
  *((_DWORD *)this + 4) &= ~0x80000000;
  uint64_t v4 = *((void *)a2 + 9);
  uint64_t v5 = *(void *)(v4 + 4296);
  int v6 = *(_DWORD *)(v5 + 24);
  if (v6)
  {
    int v7 = v6 - 1;
    int v8 = *(_DWORD *)(*(void *)(v5 + 16) + 4 * (v6 - 1));
    *(_DWORD *)(v5 + 24) = v7;
  }
  else
  {
    int v8 = *(_DWORD *)(v5 + 8);
    *(_DWORD *)(v5 + 8) = v8 + 1;
  }
  *((_DWORD *)this + 4) = *((_DWORD *)this + 4) & 0x80000000 | v8 & 0x7FFFFFFF;
  uint64_t v9 = *(void *)(v4 + 2064);
  unsigned int v10 = (v8 & 0x7FFFFFFF) + 1;
  unsigned int v11 = *(_DWORD *)(v9 + 20) & 0x7FFFFFFF;
  if (v10 >= v11)
  {
    unsigned int v12 = v10 | (v10 >> 1) | ((v10 | (v10 >> 1)) >> 2);
    unsigned int v13 = v12 | (v12 >> 4) | ((v12 | (v12 >> 4)) >> 8);
    unsigned int v14 = (v13 | HIWORD(v13)) + 1;
    if (v11 < v14) {
      physx::shdfnd::Array<physx::PxBounds3,physx::shdfnd::VirtualAllocator>::recreate(v9, (v13 | HIWORD(v13)) + 1);
    }
    *(_DWORD *)(v9 + 16) = v14;
  }
  *(void *)this = *((void *)a2 + 7);
  *((void *)a2 + 7) = this;
  ++*((_DWORD *)a2 + 16);
  return this;
}

void physx::Sc::ElementSim::~ElementSim(physx::Sc::ElementSim *this)
{
  uint64_t v2 = *(void *)(*(void *)(*((void *)this + 1) + 72) + 4296);
  unint64_t v3 = *((unsigned int *)this + 4);
  int v10 = v3 & 0x7FFFFFFF;
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v2 + 32, (v3 & 0x7FFFFFFF) + 1);
  *(_DWORD *)(*(void *)(v2 + 32) + ((v3 >> 3) & 0xFFFFFFC)) |= 1 << v3;
  uint64_t v4 = *(unsigned int *)(v2 + 56);
  if ((*(_DWORD *)(v2 + 60) & 0x7FFFFFFFu) <= v4)
  {
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v2 + 48, &v10);
  }
  else
  {
    *(_DWORD *)(*(void *)(v2 + 48) + 4 * v4) = v3 & 0x7FFFFFFF;
    ++*(_DWORD *)(v2 + 56);
  }
  uint64_t v5 = 0;
  uint64_t v6 = *((void *)this + 1);
  int v7 = (physx::Sc::ElementSim *)(v6 + 56);
  int v8 = (physx::Sc::ElementSim *)(v6 + 56);
  while (1)
  {
    int v8 = *(physx::Sc::ElementSim **)v8;
    if (!v8) {
      break;
    }
    uint64_t v9 = v5;
    uint64_t v5 = v8;
    if (v8 == this)
    {
      if (v9) {
        int v7 = v9;
      }
      *(void *)int v7 = *(void *)this;
      --*(_DWORD *)(v6 + 64);
      return;
    }
  }
}

void *physx::Sc::ElementSim::setElementInteractionsDirty(void *result, char a2, int a3, int8x8_t a4)
{
  uint64_t v4 = result[1];
  uint64_t v5 = *(unsigned int *)(v4 + 52);
  if (v5)
  {
    int v8 = result;
    uint64_t v9 = *(void *)(v4 + 40);
    int v10 = (uint64_t *)(v9 + 8 * v5);
    unsigned int v11 = (uint64_t *)(v9 + 8);
    uint64_t v12 = 8 * v5;
    while (1)
    {
      uint64_t v13 = *(v11 - 1);
      if ((*(unsigned char *)(v13 + 29) & 1) != 0 && (*(void **)(v13 + 32) == result || *(void **)(v13 + 40) == result)) {
        break;
      }
      ++v11;
      v12 -= 8;
      if (!v12) {
        return result;
      }
    }
    while (1)
    {
      int v16 = *(unsigned __int8 *)(v13 + 29);
      if ((v16 & a3) != 0)
      {
        *(unsigned char *)(v13 + 30) |= a2;
        if ((v16 & 8) == 0)
        {
          uint64_t result = physx::Sc::NPhaseCore::addToDirtyInteractionList(*(int32x2_t **)(*(void *)(*(void *)v13 + 72) + 3992), (physx::Sc::Interaction *)v13, a4);
          *(unsigned char *)(v13 + 29) |= 8u;
        }
      }
      if (v11 == v10) {
        break;
      }
      unsigned int v14 = v11;
      while (1)
      {
        uint64_t v15 = *v14++;
        uint64_t v13 = v15;
        if ((*(unsigned char *)(v15 + 29) & 1) != 0 && (*(void **)(v13 + 32) == v8 || *(void **)(v13 + 40) == v8)) {
          break;
        }
        unsigned int v11 = v14;
        if (v14 == v10) {
          return result;
        }
      }
      ++v11;
    }
  }
  return result;
}

uint64_t physx::Sc::ElementSim::addToAABBMgr(uint64_t a1, int a2, int a3, float a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(v11 + 72);
  int v13 = *(_DWORD *)(*(void *)(v11 + 80) + 8) & 0xFFFFFF;
  if (v13 == 0xFFFFFF) {
    unsigned int v14 = -1;
  }
  else {
    unsigned int v14 = v13;
  }
  uint64_t result = physx::Bp::AABBManager::addBounds(*(physx::Bp::AABBManager **)(v12 + 1848), *(_DWORD *)(a1 + 16) & 0x7FFFFFFF, a2, a1, v14, a3 != 0, a4);
  if (result)
  {
    *(_DWORD *)(a1 + 16) |= 0x80000000;
    ++*(_DWORD *)(*(void *)(v12 + 4256) + 8);
  }
  else
  {
    uint64_t v19 = physx::shdfnd::Foundation::mInstance;
    return physx::shdfnd::Foundation::error(v19, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScElementSim.cpp", 113, "Unable to create broadphase entity because only 32768 shapes are supported", v16, v17, v18, a10);
  }
  return result;
}

void physx::Sc::ElementSim::removeFromAABBMgr(physx::Sc::ElementSim *this)
{
  uint64_t v2 = *(void *)(*((void *)this + 1) + 72);
  physx::Bp::AABBManager::removeBounds(*(void *)(v2 + 1848), *((_DWORD *)this + 4) & 0x7FFFFFFF);
  uint64_t v3 = *(void *)(v2 + 1848);
  unint64_t v4 = *((unsigned int *)this + 4);
  physx::Cm::BitMapBase<physx::shdfnd::VirtualAllocator>::extend(v3 + 224, (v4 & 0x7FFFFFFF) + 1);
  *(_DWORD *)(*(void *)(v3 + 224) + ((v4 >> 3) & 0xFFFFFFC)) &= ~(1 << v4);
  *((_DWORD *)this + 4) &= ~0x80000000;
  ++*(_DWORD *)(*(void *)(v2 + 4256) + 12);
}

uint64_t physx::shdfnd::PoolBase<physx::Sc::ConstraintGroupNode,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintGroupNode>>::allocateSlab(uint64_t a1)
{
  uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintGroupNode>::allocate(a1, *(unsigned int *)(a1 + 552), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
  unint64_t v3 = result;
  uint64_t v8 = result;
  uint64_t v4 = *(unsigned int *)(a1 + 536);
  if ((*(_DWORD *)(a1 + 540) & 0x7FFFFFFFu) <= v4)
  {
    uint64_t result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintGroupNode>>>::growAndPushBack(a1 + 8, &v8);
  }
  else
  {
    *(void *)(*(void *)(a1 + 528) + 8 * v4) = result;
    *(_DWORD *)(a1 + 536) = v4 + 1;
  }
  unint64_t v5 = v3 + 96 * *(unsigned int *)(a1 + 544) - 96;
  if (v5 >= v3)
  {
    unint64_t v6 = *(void *)(a1 + 560);
    int v7 = (unint64_t *)(v3 + 96 * *(unsigned int *)(a1 + 544) - 96);
    do
    {
      *int v7 = v6;
      v7 -= 12;
      unint64_t v6 = v5;
      unint64_t v5 = (unint64_t)v7;
    }
    while ((unint64_t)v7 >= v3);
    *(void *)(a1 + 560) = v7 + 12;
  }
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintGroupNode>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintGroupNode>::getName() [T = physx::Sc"
  }
         "::ConstraintGroupNode]";
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintGroupNode>>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = (8 * v5);
    if (v6 <= 0x200 && *(unsigned char *)(result + 512) == 0) {
      *(unsigned char *)(result + 512) = 1;
    }
    else {
      uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintGroupNode>::allocate(result, v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    }
    uint64_t v8 = (void *)result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 528);
  int v10 = &v8[v9];
  if (v9)
  {
    uint64_t v11 = *(uint64_t **)(v3 + 520);
    uint64_t v12 = v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  void *v10 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    uint64_t v14 = *(void *)(v3 + 520);
    if (v14 == v3)
    {
      *(unsigned char *)(v3 + 512) = 0;
    }
    else if (v14)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      LODWORD(v9) = *(_DWORD *)(v3 + 528);
    }
  }
  *(void *)(v3 + 520) = v8;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v9 + 1;
  return result;
}

void physx::Cm::ConstraintImmediateVisualizer::~ConstraintImmediateVisualizer(physx::Cm::ConstraintImmediateVisualizer *this)
{
}

uint64_t physx::Cm::ConstraintImmediateVisualizer::visualizeJointFrames(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return physx::Cm::visualizeJointFrames(*(void *)(a1 + 16), a2, a3, *(float *)(a1 + 8));
}

uint64_t physx::Cm::ConstraintImmediateVisualizer::visualizeLinearLimit(uint64_t a1, uint64_t a2, uint64_t a3, int a4, float a5, double a6, double a7, double a8, double a9, float32x4_t a10)
{
  return physx::Cm::visualizeLinearLimit(*(void *)(a1 + 16), a2, *(float *)(a1 + 12), a5, a7, a8, a9, a10, a3, a4);
}

uint64_t physx::Cm::ConstraintImmediateVisualizer::visualizeAngularLimit(uint64_t a1, uint64_t a2, int a3, float a4, float a5)
{
  return physx::Cm::visualizeAngularLimit(*(void *)(a1 + 16), a2, a3, *(float *)(a1 + 12), a4, a5);
}

uint64_t physx::Cm::ConstraintImmediateVisualizer::visualizeLimitCone(uint64_t a1, uint64_t a2, int a3, float a4, float a5)
{
  return physx::Cm::visualizeLimitCone(*(void *)(a1 + 16), a2, a3, *(float *)(a1 + 12), a4, a5);
}

uint64_t physx::Cm::ConstraintImmediateVisualizer::visualizeDoubleCone(uint64_t a1, uint64_t a2, int a3, float a4)
{
  return physx::Cm::visualizeDoubleCone(*(void *)(a1 + 16), a2, a3, *(float *)(a1 + 12), a4);
}

float physx::Cm::ConstraintImmediateVisualizer::visualizeLine(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = *(void *)(a1 + 16);
  *(_DWORD *)(v6 + 4) = a4;
  uint64_t v7 = *(void *)(v6 + 104);
  unsigned int v8 = *(_DWORD *)(v7 + 32);
  unsigned int v9 = *(_DWORD *)(v7 + 36) & 0x7FFFFFFF;
  unsigned int v10 = v8 + 1;
  if (v8 + 1 > v9)
  {
    unsigned int v11 = 2 * *(_DWORD *)(v7 + 36);
    if (!v9) {
      unsigned int v11 = 2;
    }
    if (v10 <= v11) {
      unsigned int v12 = v11;
    }
    else {
      unsigned int v12 = v10;
    }
    physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::recreate(v7 + 24, v12);
    unsigned int v8 = *(_DWORD *)(v7 + 32);
    a4 = *(_DWORD *)(v6 + 4);
  }
  uint64_t v13 = *(void *)(v7 + 24) + 32 * v8;
  *(_DWORD *)(v7 + 32) = v10;
  *(void *)uint64_t v13 = *(void *)a2;
  *(_DWORD *)(v13 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(v13 + 16) = *(void *)a3;
  float result = *(float *)(a3 + 8);
  *(float *)(v13 + 24) = result;
  *(_DWORD *)(v13 + 28) = a4;
  *(_DWORD *)(v13 + 12) = a4;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxBounds3,physx::shdfnd::VirtualAllocator>::recreate(uint64_t result, int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    float result = (*(uint64_t (**)(void))(**(void **)result + 16))();
    int v4 = (void *)result;
  }
  else
  {
    int v4 = 0;
  }
  unsigned int v5 = *(_DWORD *)(v3 + 16);
  uint64_t v6 = *(void *)(v3 + 8);
  if (v5)
  {
    unint64_t v7 = (unint64_t)&v4[3 * v5];
    unsigned int v8 = *(void **)(v3 + 8);
    unsigned int v9 = v4;
    do
    {
      void *v9 = *v8;
      v9[1] = v8[1];
      v9[2] = v8[2];
      v9 += 3;
      v8 += 3;
    }
    while ((unint64_t)v9 < v7);
  }
  if ((*(_DWORD *)(v3 + 20) & 0x80000000) == 0 && v6) {
    float result = (*(uint64_t (**)(void))(**(void **)v3 + 24))();
  }
  *(void *)(v3 + 8) = v4;
  *(_DWORD *)(v3 + 20) = a2;
  return result;
}

void *physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3 = a2;
  a3.i32[0] = a2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    unsigned int v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    unsigned int v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    unsigned int v3 = (v7 | HIWORD(v7)) + 1;
  }
  int v8 = *(_DWORD *)(a1 + 32);
  unsigned int v9 = (float)(*(float *)(a1 + 40) * (float)v3);
  uint64_t v10 = ((-4 * (v3 + v9)) & 0xC) + 4 * (v3 + v9);
  if (v10 + 8 * v9) {
    unsigned int v11 = (char *)(*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v10 + 8 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else {
    unsigned int v11 = 0;
  }
  unsigned int v12 = &v11[4 * v3];
  uint64_t v13 = &v11[v10];
  float result = memset(v11, 255, 4 * v3);
  if (*(_DWORD *)(a1 + 52))
  {
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(void *)(*(void *)(a1 + 8) + 8 * v15);
      unint64_t v17 = (~(v16 << 32) + v16) ^ ((unint64_t)(~(v16 << 32) + v16) >> 22);
      unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
      unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
      LODWORD(v19) = (v3 - 1) & ((v19 >> 31) ^ v19);
      *(_DWORD *)&v12[4 * v15] = *(_DWORD *)&v11[4 * v19];
      *(_DWORD *)&v11[4 * v19] = v15;
      *(void *)&v13[8 * v15++] = v16;
    }
    while (v15 < *(unsigned int *)(a1 + 52));
  }
  if (*(void *)a1) {
    float result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 24) = v11;
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v3;
  if (*(_DWORD *)(a1 + 44) == -1) {
    *(_DWORD *)(a1 + 44) = v8;
  }
  return result;
}

uint64_t physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(int32x2_t *a1, void *a2, unsigned char *a3, int8x8_t a4)
{
  unsigned int v6 = a1[4].u32[1];
  if (!v6)
  {
    unsigned int v10 = 0;
    goto LABEL_8;
  }
  unint64_t v7 = ~(*a2 << 32) + *a2;
  unint64_t v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  unsigned int v10 = (v6 - 1) & ((v9 >> 31) ^ v9);
  uint64_t v11 = *(unsigned int *)(*(void *)&a1[3] + 4 * v10);
  if (v11 == -1)
  {
LABEL_8:
    *a3 = 0;
    if (a1[6].i32[1] == a1[4].i32[0])
    {
      if (v6) {
        unsigned int v13 = 2 * v6;
      }
      else {
        unsigned int v13 = 16;
      }
      if (v6 < v13)
      {
        physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)a1, v13, a4);
        unsigned int v6 = a1[4].u32[1];
      }
      unint64_t v14 = ~(*a2 << 32) + *a2;
      unint64_t v15 = 9
          * (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) ^ (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) >> 8));
      unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      unsigned int v10 = (v6 - 1) & ((v16 >> 31) ^ v16);
    }
    uint64_t v17 = a1[5].u32[1];
    a1[5].i32[1] = v17 + 1;
    int32x2_t v18 = a1[3];
    int32x2_t v19 = a1[1];
    *(_DWORD *)(*(void *)&a1[2] + 4 * v17) = *(_DWORD *)(*(void *)&v18 + 4 * v10);
    *(_DWORD *)(*(void *)&v18 + 4 * v10) = v17;
    a1[6] = vadd_s32(a1[6], (int32x2_t)0x100000001);
    return *(void *)&v19 + 8 * v17;
  }
  int32x2_t v12 = a1[1];
  while (*(void *)(*(void *)&v12 + 8 * v11) != *a2)
  {
    uint64_t v11 = *(unsigned int *)(*(void *)&a1[2] + 4 * v11);
    if (v11 == -1) {
      goto LABEL_8;
    }
  }
  uint64_t result = *(void *)&v12 + 8 * v11;
  *a3 = 1;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Sc::BodyRank>::allocate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::BodyRank>::getName() [T = physx::Sc::BodyRank]";
    }
    else {
      unint64_t v7 = "<allocation names disabled>";
    }
    unint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v6 + 24) + 16);
    return v8(v6 + 24, v5, v7, a2, a3);
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::BodyRank,physx::shdfnd::InlineAllocator<1536u,physx::shdfnd::ReflectionAllocator<physx::Sc::BodyRank>>>::growAndPushBack(uint64_t result, long long *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 1556);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = (24 * v5);
    if (result <= 0x600 && *(unsigned char *)(v3 + 1536) == 0)
    {
      *(unsigned char *)(v3 + 1536) = 1;
      uint64_t v7 = v3;
    }
    else
    {
      uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sc::BodyRank>::allocate(result, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
      uint64_t v7 = result;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  unsigned int v8 = *(_DWORD *)(v3 + 1552);
  if (v8)
  {
    unint64_t v9 = v7 + 24 * v8;
    unsigned int v10 = *(long long **)(v3 + 1544);
    unint64_t v11 = v7;
    do
    {
      long long v12 = *v10;
      *(void *)(v11 + 16) = *((void *)v10 + 2);
      *(_OWORD *)unint64_t v11 = v12;
      v11 += 24;
      unsigned int v10 = (long long *)((char *)v10 + 24);
    }
    while (v11 < v9);
    unsigned int v13 = *(_DWORD *)(v3 + 1552);
  }
  else
  {
    unsigned int v13 = 0;
  }
  uint64_t v14 = v7 + 24 * v13;
  long long v15 = *a2;
  *(void *)(v14 + 16) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v14 = v15;
  if ((*(_DWORD *)(v3 + 1556) & 0x80000000) == 0)
  {
    uint64_t v16 = *(void *)(v3 + 1544);
    if (v16 == v3)
    {
      *(unsigned char *)(v3 + 1536) = 0;
    }
    else if (v16)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  *(void *)(v3 + 1544) = v7;
  *(_DWORD *)(v3 + 1556) = v5;
  ++*(_DWORD *)(v3 + 1552);
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Sc::BodyRank>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::Sc::BodyRank>::allocate(4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  uint64_t result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Dy::ConstraintWriteback,physx::shdfnd::VirtualAllocator>::recreate(uint64_t result, int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)result + 16))();
    uint64_t v4 = result;
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(unsigned int *)(v3 + 16);
  uint64_t v6 = *(void *)(v3 + 8);
  if (v5)
  {
    unint64_t v7 = v4 + 32 * v5;
    uint64_t v8 = *(void *)(v3 + 8);
    unint64_t v9 = v4;
    do
    {
      *(void *)unint64_t v9 = *(void *)v8;
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(v8 + 8);
      *(_DWORD *)(v9 + 12) = *(_DWORD *)(v8 + 12);
      *(void *)(v9 + 16) = *(void *)(v8 + 16);
      *(_DWORD *)(v9 + 24) = *(_DWORD *)(v8 + 24);
      *(_DWORD *)(v9 + 28) = *(_DWORD *)(v8 + 28);
      v9 += 32;
      v8 += 32;
    }
    while (v9 < v7);
  }
  if ((*(_DWORD *)(v3 + 20) & 0x80000000) == 0 && v6) {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)v3 + 24))();
  }
  *(void *)(v3 + 8) = v4;
  *(_DWORD *)(v3 + 20) = a2;
  return result;
}

uint64_t physx::shdfnd::PoolBase<physx::Sc::ConstraintInteraction,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintInteraction>>::allocateSlab(uint64_t a1)
{
  uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintInteraction>::allocate(a1, *(unsigned int *)(a1 + 552), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
  unint64_t v3 = result;
  uint64_t v8 = result;
  uint64_t v4 = *(unsigned int *)(a1 + 536);
  if ((*(_DWORD *)(a1 + 540) & 0x7FFFFFFFu) <= v4)
  {
    uint64_t result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintInteraction>>>::growAndPushBack(a1 + 8, &v8);
  }
  else
  {
    *(void *)(*(void *)(a1 + 528) + 8 * v4) = result;
    *(_DWORD *)(a1 + 536) = v4 + 1;
  }
  unint64_t v5 = v3 + 48 * *(unsigned int *)(a1 + 544) - 48;
  if (v5 >= v3)
  {
    unint64_t v6 = *(void *)(a1 + 560);
    unint64_t v7 = (unint64_t *)(v3 + 48 * *(unsigned int *)(a1 + 544) - 48);
    do
    {
      *unint64_t v7 = v6;
      v7 -= 6;
      unint64_t v6 = v5;
      unint64_t v5 = (unint64_t)v7;
    }
    while ((unint64_t)v7 >= v3);
    *(void *)(a1 + 560) = v7 + 6;
  }
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintInteraction>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintInteraction>::getName() [T = physx::"
  }
         "Sc::ConstraintInteraction]";
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintInteraction>>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = (8 * v5);
    if (v6 <= 0x200 && *(unsigned char *)(result + 512) == 0) {
      *(unsigned char *)(result + 512) = 1;
    }
    else {
      uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintInteraction>::allocate(result, v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    }
    uint64_t v8 = (void *)result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 528);
  unsigned int v10 = &v8[v9];
  if (v9)
  {
    unint64_t v11 = *(uint64_t **)(v3 + 520);
    long long v12 = v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  void *v10 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    uint64_t v14 = *(void *)(v3 + 520);
    if (v14 == v3)
    {
      *(unsigned char *)(v3 + 512) = 0;
    }
    else if (v14)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      LODWORD(v9) = *(_DWORD *)(v3 + 528);
    }
  }
  *(void *)(v3 + 520) = v8;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v9 + 1;
  return result;
}

uint64_t physx::Sc::Scene::addShape(uint64_t a1, physx::Sc::RigidSim *a2, physx::Sc::ShapeCore *a3, void *a4)
{
  uint64_t v8 = *(void *)(a1 + 4312);
  unsigned int v9 = *(_DWORD *)(v8 + 8);
  uint64_t v10 = *(void *)(v8 + 16);
  unint64_t v11 = (uint64_t *)(v10 + 24 * v9);
  long long v12 = (uint64_t *)v11[1];
  if (v12)
  {
    v11[1] = *v12;
LABEL_3:
    physx::Sc::ShapeSim::ShapeSim((physx::Sc::ShapeSim *)v12, a2, a3);
    goto LABEL_4;
  }
  uint64_t v17 = v10 + 24 * v9;
  int v20 = *(_DWORD *)(v17 + 16);
  int32x2_t v19 = (_DWORD *)(v17 + 16);
  int v18 = v20;
  if (v20 != *(_DWORD *)v8)
  {
    int v21 = *(_DWORD *)(v8 + 4);
    *int32x2_t v19 = v18 + 1;
    uint64_t v22 = *v11;
    if (v22)
    {
      long long v12 = (uint64_t *)(v22 + (v18 * v21));
      goto LABEL_3;
    }
  }
  long long v12 = physx::Cm::PreallocatingRegionManager::searchForMemory((physx::Cm::PreallocatingRegionManager *)v8);
  if (v12) {
    goto LABEL_3;
  }
LABEL_4:
  uint64_t v13 = a1 + 4 * *((int *)a3 + 18);
  ++*(_DWORD *)(v13 + 4676);
  (*(void (**)(void, uint64_t *, void))(**(void **)(a1 + 1904) + 32))(*(void *)(a1 + 1904), v12 + 3, *((unsigned int *)v12 + 16));
  if (a4)
  {
    uint64_t v14 = (void *)(*(void *)(*(void *)(a1 + 2064) + 8) + 24 * (v12[2] & 0x7FFFFFFF));
    *a4 = *v14;
    a4[1] = v14[1];
    a4[2] = v14[2];
  }
  long long v15 = *(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 1840) + 1776) + 88);
  return v15();
}

void physx::Sc::RigidCore::removeShapeFromScene(physx::Sc::RigidCore *this, physx::Sc::ShapeCore *a2, int a3)
{
  uint64_t v3 = *(void *)this;
  if (*(void *)this)
  {
    int v4 = (physx::Sc::ShapeCore **)(v3 + 56);
    while (1)
    {
      int v4 = (physx::Sc::ShapeCore **)*v4;
      if (!v4) {
        break;
      }
      if (v4[7] == a2) {
        goto LABEL_8;
      }
    }
    int v4 = (physx::Sc::ShapeCore **)1;
LABEL_8:
    physx::Sc::Scene::removeShape(*(physx::Sc::Scene **)(v3 + 72), (physx::Sc::ShapeSim *)v4, a3);
  }
}

void physx::Sc::Scene::removeShape(physx::Sc::Scene *this, physx::Sc::ShapeSim *a2, int a3)
{
  (*(void (**)(void, uint64_t))(**(void **)(*((void *)this + 230) + 1776) + 96))(*(void *)(*((void *)this + 230) + 1776), *((void *)a2 + 7) + 32);
  (*(void (**)(void, void))(**((void **)this + 238) + 40))(*((void *)this + 238), *((unsigned int *)a2 + 16));
  uint64_t v6 = (char *)this + 4 * *(int *)(*((void *)a2 + 7) + 72);
  --*((_DWORD *)v6 + 1169);
  physx::Sc::ShapeSim::removeFromBroadPhase(a2, a3);
  uint64_t v7 = (physx::Cm::PreallocatingRegionManager *)*((void *)this + 539);
  physx::Sc::ShapeSim::~ShapeSim(a2);
  physx::Cm::PreallocatingRegionManager::deallocateMemory(v7, (unsigned __int8 *)a2);
}

void physx::Sc::RigidCore::onShapeChange(void *a1, uint64_t a2, int *a3, char *a4, int a5, int8x8_t a6)
{
  if (*a1)
  {
    uint64_t v9 = *a1 + 56;
    while (1)
    {
      uint64_t v9 = *(void *)v9;
      if (!v9) {
        break;
      }
      if (*(void *)(v9 + 56) == a2) {
        goto LABEL_7;
      }
    }
    uint64_t v9 = 1;
LABEL_7:
    int v10 = *a3;
    if (*a3)
    {
      physx::Sc::ShapeSim::onVolumeOrTransformChange((physx::Sc::ShapeSim *)v9, a5);
      int v10 = *a3;
      if ((*a3 & 2) == 0)
      {
LABEL_9:
        if ((v10 & 0x80) == 0) {
          goto LABEL_14;
        }
        goto LABEL_13;
      }
    }
    else if ((v10 & 2) == 0)
    {
      goto LABEL_9;
    }
    physx::Sc::ElementSim::setElementInteractionsDirty((void *)v9, 2, 1, a6);
    int v10 = *a3;
    if ((*a3 & 0x80) == 0) {
      goto LABEL_14;
    }
LABEL_13:
    if ((*(_DWORD *)(v9 + 16) & 0x80000000) != 0)
    {
      physx::Sc::ShapeSim::reinsertBroadPhase((physx::Sc::ShapeSim *)v9);
      int v10 = *a3;
      if ((*a3 & 4) == 0)
      {
LABEL_15:
        if ((v10 & 8) == 0) {
          goto LABEL_16;
        }
        goto LABEL_23;
      }
LABEL_22:
      physx::Sc::ShapeSim::onVolumeOrTransformChange((physx::Sc::ShapeSim *)v9, a5);
      int v10 = *a3;
      if ((*a3 & 8) == 0)
      {
LABEL_16:
        if ((v10 & 0x40) == 0) {
          goto LABEL_17;
        }
        goto LABEL_24;
      }
LABEL_23:
      physx::Sc::ElementSim::setElementInteractionsDirty((void *)v9, 1, 4, a6);
      int v10 = *a3;
      if ((*a3 & 0x40) == 0)
      {
LABEL_17:
        if ((v10 & 0x10) == 0) {
          goto LABEL_18;
        }
        goto LABEL_25;
      }
LABEL_24:
      char v11 = *a4;
      physx::Sc::ShapeSim::onFlagChange(v9, &v11);
      int v10 = *a3;
      if ((*a3 & 0x10) == 0)
      {
LABEL_18:
        if ((v10 & 0x20) == 0) {
          return;
        }
        goto LABEL_19;
      }
LABEL_25:
      physx::Sc::ShapeSim::onContactOffsetChange((physx::Sc::ShapeSim *)v9);
      if ((*a3 & 0x20) == 0) {
        return;
      }
LABEL_19:
      physx::Sc::ElementSim::setElementInteractionsDirty((void *)v9, 16, 1, a6);
      return;
    }
LABEL_14:
    if ((v10 & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }
}

uint64_t physx::Sc::RigidSim::RigidSim(uint64_t result, uint64_t a2, void *a3)
{
  *(_DWORD *)(result + 64) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 72) = a2;
  *(void *)(result + 80) = a3;
  *a3 = result;
  *(void *)uint64_t result = &unk_26E725910;
  uint64_t v3 = *(void *)(a2 + 4288);
  int v4 = *(_DWORD *)(v3 + 24);
  if (v4)
  {
    int v5 = v4 - 1;
    int v6 = *(_DWORD *)(*(void *)(v3 + 16) + 4 * (v4 - 1));
    *(_DWORD *)(v3 + 24) = v5;
  }
  else
  {
    int v6 = *(_DWORD *)(v3 + 8);
    *(_DWORD *)(v3 + 8) = v6 + 1;
  }
  *(_DWORD *)(result + 88) = v6;
  return result;
}

void physx::Sc::RigidSim::~RigidSim(physx::Sc::RigidSim *this)
{
  *(void *)this = &unk_26E725910;
  uint64_t v2 = *(void *)(*((void *)this + 9) + 4288);
  unint64_t v3 = *((unsigned int *)this + 22);
  int v5 = v3;
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v2 + 32, v3 + 1);
  *(_DWORD *)(*(void *)(v2 + 32) + ((v3 >> 3) & 0x1FFFFFFC)) |= 1 << v3;
  uint64_t v4 = *(unsigned int *)(v2 + 56);
  if ((*(_DWORD *)(v2 + 60) & 0x7FFFFFFFu) <= v4)
  {
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v2 + 48, &v5);
  }
  else
  {
    *(_DWORD *)(*(void *)(v2 + 48) + 4 * v4) = v3;
    ++*(_DWORD *)(v2 + 56);
  }
  *(void *)this = &unk_26E7256A0;
  physx::Cm::OwnedArray<physx::Sc::Interaction *,physx::Sc::ActorSim,unsigned int,&physx::Sc::ActorSim::reallocInteractions>::releaseMem((uint64_t)this + 40, (uint64_t)this);
}

{
  uint64_t v1;
  void (*v2)(void);
  uint64_t vars8;

  physx::Sc::RigidSim::~RigidSim(this);
  if (v1)
  {
    uint64_t v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

uint64_t physx::Sc::RigidSim::notifyShapesOfTransformChange(physx::Sc::RigidSim *this)
{
  for (uint64_t i = (physx::Sc::ShapeSim *)*((void *)this + 7); i; uint64_t i = *(physx::Sc::ShapeSim **)i)
    physx::Sc::ShapeSim::markBoundsForUpdate(i, 0);
  return notifyActorInteractionsOfTransformChange((uint64_t)this);
}

uint64_t physx::Sc::Scene::Scene(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 4152;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                        + 16))(physx::shdfnd::Foundation::mInstance + 24, 4119, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/api/include/PxsMaterialManager.h", 51);
  if (v7)
  {
    unint64_t v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF0;
    *(void *)(v8 - 8) = v8 - v7;
  }
  else
  {
    unint64_t v8 = 0;
  }
  uint64_t v9 = 0;
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + 8) = 128;
  unint64_t v10 = v8 + 24;
  do
  {
    *(_WORD *)(v10 + v9) = -1;
    v9 += 32;
  }
  while (v9 != 4096);
  *(void *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 672) = 0x4000000000;
  *(unsigned char *)(a1 + 656) = 1;
  *(void *)(a1 + 664) = a1 + 144;
  *(void *)(a1 + 680) = 32;
  *(_DWORD *)(a1 + 688) = 2048;
  *(void *)(a1 + 696) = 0;
  *(void *)(a1 + 1240) = 0x4000000000;
  *(unsigned char *)(a1 + 1224) = 1;
  *(void *)(a1 + 1232) = a1 + 712;
  *(void *)(a1 + 1248) = 32;
  *(_DWORD *)(a1 + 1256) = 4096;
  *(void *)(a1 + 1264) = 0;
  *(void *)(a1 + 1808) = 0x4000000000;
  *(unsigned char *)(a1 + 1792) = 1;
  *(void *)(a1 + 1800) = a1 + 1280;
  *(void *)(a1 + 1816) = 32;
  *(_DWORD *)(a1 + 1824) = 0x2000;
  *(_OWORD *)(a1 + 1920) = 0u;
  *(_OWORD *)(a1 + 1936) = 0u;
  *(_OWORD *)(a1 + 1832) = 0u;
  *(_DWORD *)(a1 + 1964) = 1;
  *(void *)(a1 + 1984) = 0;
  *(_OWORD *)(a1 + 1968) = 0u;
  *(_DWORD *)(a1 + 1992) = 1;
  *(_OWORD *)(a1 + 1996) = 0u;
  *(_OWORD *)(a1 + 2012) = 0u;
  *(_OWORD *)(a1 + 2024) = 0u;
  *(void *)(a1 + 2040) = -3233808384;
  *(void *)(a1 + 2048) = 0;
  physx::shdfnd::internal::HashBase<physx::Sc::ArticulationCore *,physx::Sc::ArticulationCore *,physx::shdfnd::Hash<physx::Sc::ArticulationCore *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ArticulationCore *,physx::shdfnd::Hash<physx::Sc::ArticulationCore *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 2000, 0x40u, 0);
  *(_DWORD *)(a1 + 2152) = 0;
  *(_OWORD *)(a1 + 2160) = 0u;
  *(_OWORD *)(a1 + 2176) = 0u;
  *(void *)(a1 + 2192) = 0;
  *(_OWORD *)(a1 + 2096) = 0u;
  *(_OWORD *)(a1 + 2112) = 0u;
  *(_OWORD *)(a1 + 2128) = 0u;
  *(void *)(a1 + 2200) = -3233808384;
  *(void *)(a1 + 2208) = 0;
  physx::shdfnd::internal::HashBase<physx::Sc::ArticulationCore *,physx::Sc::ArticulationCore *,physx::shdfnd::Hash<physx::Sc::ArticulationCore *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ArticulationCore *,physx::shdfnd::Hash<physx::Sc::ArticulationCore *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 2160, 0x40u, 0);
  *(void *)(a1 + 2264) = 0;
  *(_OWORD *)(a1 + 2232) = 0u;
  *(_OWORD *)(a1 + 2248) = 0u;
  *(_OWORD *)(a1 + 2216) = 0u;
  *(void *)(a1 + 2272) = -3233808384;
  *(void *)(a1 + 2280) = 0;
  physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 2232, 0x40u, 0);
  *(void *)(a1 + 2824) = 0x4000000000;
  *(unsigned char *)(a1 + 2808) = 1;
  *(void *)(a1 + 2816) = a1 + 2296;
  *(void *)(a1 + 2832) = 64;
  *(_DWORD *)(a1 + 2840) = 0x2000;
  *(void *)(a1 + 2848) = 0;
  *(void *)(a1 + 3392) = 0x4000000000;
  *(unsigned char *)(a1 + 3376) = 1;
  *(void *)(a1 + 3384) = a1 + 2864;
  *(void *)(a1 + 3400) = 32;
  *(_DWORD *)(a1 + 3408) = 0x2000;
  *(void *)(a1 + 3416) = 0;
  *(void *)(a1 + 3960) = 0x4000000000;
  *(unsigned char *)(a1 + 3944) = 1;
  *(void *)(a1 + 3952) = a1 + 3432;
  *(void *)(a1 + 3968) = 21;
  *(_DWORD *)(a1 + 3976) = 0x2000;
  *(_OWORD *)(a1 + 3984) = 0u;
  *(void *)(a1 + 4032) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 4040) = 0u;
  *(_OWORD *)(a1 + 4056) = 0u;
  *(void *)(a1 + 4072) = 0;
  *(void *)(a1 + 4080) = -3233808384;
  *(void *)(a1 + 4088) = 0;
  physx::shdfnd::internal::HashBase<physx::Sc::ArticulationCore *,physx::Sc::ArticulationCore *,physx::shdfnd::Hash<physx::Sc::ArticulationCore *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ArticulationCore *,physx::shdfnd::Hash<physx::Sc::ArticulationCore *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 4040, 0x40u, 0);
  *(void *)(a1 + 4128) = 0;
  *(_OWORD *)(a1 + 4112) = 0u;
  *(_OWORD *)(a1 + 4096) = 0u;
  *(void *)(a1 + 4136) = -3233808384;
  *(void *)(a1 + 4144) = 0;
  physx::shdfnd::internal::HashBase<physx::Sc::ArticulationCore *,physx::Sc::ArticulationCore *,physx::shdfnd::Hash<physx::Sc::ArticulationCore *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ArticulationCore *,physx::shdfnd::Hash<physx::Sc::ArticulationCore *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 4096, 0x40u, 0);
  *(unsigned char *)(v6 + 2) = (*(_DWORD *)(a2 + 152) & 0x400) != 0;
  *(_DWORD *)(a1 + 4264) = 0;
  *(_OWORD *)(a1 + 4160) = 0u;
  *(_OWORD *)(a1 + 4176) = 0u;
  *(_OWORD *)(a1 + 4192) = 0u;
  *(_OWORD *)(a1 + 4208) = 0u;
  *(_OWORD *)(a1 + 4224) = 0u;
  *(_OWORD *)(a1 + 4240) = 0u;
  *(_DWORD *)(a1 + 4268) = *(_DWORD *)(a2 + 152);
  *(void *)(a1 + 4304) = 0;
  *(void *)(a1 + 4416) = 0;
  *(_DWORD *)(a1 + 4424) = 0;
  *(_DWORD *)(a1 + 4656) = 0;
  *(unsigned char *)(v6 + 508) = 0;
  *(void *)(a1 + 4664) = 0;
  *(_DWORD *)(a1 + 4672) = 0;
  *(_OWORD *)(a1 + 4728) = 0u;
  *(_DWORD *)(a1 + 4408) = 0;
  *(_OWORD *)(a1 + 4376) = 0u;
  *(_OWORD *)(a1 + 4392) = 0u;
  *(_OWORD *)(a1 + 4508) = 0u;
  *(_OWORD *)(a1 + 4496) = 0u;
  *(_OWORD *)(a1 + 4480) = 0u;
  *(_OWORD *)(a1 + 4464) = 0u;
  *(_OWORD *)(a1 + 4448) = 0u;
  *(_OWORD *)(a1 + 4432) = 0u;
  *(_DWORD *)(a1 + 4744) = 0;
  *(void *)(a1 + 4720) = a3;
  *(void *)(a1 + 4712) = &unk_26E7260E0;
  *(void *)(a1 + 4752) = a1;
  *(void *)(a1 + 4760) = "ScScene.secondPassNarrowPhase";
  *(_OWORD *)(a1 + 4776) = 0u;
  *(void *)(a1 + 4768) = &unk_26E726230;
  *(_DWORD *)(a1 + 4792) = 0;
  *(void *)(a1 + 4800) = "ScScene.postNarrowPhase";
  *(void *)(a1 + 4856) = 0x400000000;
  *(unsigned char *)(v6 + 688) = 1;
  *(void *)(a1 + 4848) = a1 + 4808;
  *(void *)(a1 + 4912) = 0x400000000;
  *(unsigned char *)(v6 + 744) = 1;
  *(void *)(a1 + 4904) = a1 + 4864;
  *(unsigned char *)(v6 + 768) = 0;
  uint64_t v11 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    long long v12 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  }
  else {
    long long v12 = "<allocation names disabled>";
  }
  uint64_t v13 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v11 + 24) + 16))(v11 + 24, 72, v12, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(void *)(a1 + 4928) = v13;
  physx::shdfnd::MutexImpl::MutexImpl(v13);
  *(void *)(a1 + 4776) = a3;
  *(void *)(a1 + 4768) = &unk_26E726170;
  *(void *)(a1 + 4936) = a1;
  *(_OWORD *)(a1 + 4952) = 0u;
  *(void *)(a1 + 4944) = &unk_26E726230;
  *(_DWORD *)(a1 + 4968) = 0;
  *(void *)(a1 + 4976) = "ScScene.finalizationPhase";
  *(void *)(a1 + 5032) = 0x400000000;
  *(unsigned char *)(v6 + 864) = 1;
  *(void *)(a1 + 5024) = a1 + 4984;
  *(void *)(a1 + 5088) = 0x400000000;
  *(unsigned char *)(v6 + 920) = 1;
  *(void *)(a1 + 5080) = a1 + 5040;
  *(unsigned char *)(v6 + 944) = 0;
  uint64_t v14 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    long long v15 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  }
  else {
    long long v15 = "<allocation names disabled>";
  }
  uint64_t v16 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v14 + 24) + 16))(v14 + 24, 72, v15, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(void *)(a1 + 5104) = v16;
  physx::shdfnd::MutexImpl::MutexImpl(v16);
  *(void *)(a1 + 4952) = a3;
  *(void *)(a1 + 4944) = &unk_26E726288;
  *(void *)(a1 + 5112) = a1;
  *(_OWORD *)(a1 + 5136) = 0u;
  *(_DWORD *)(a1 + 5152) = 0;
  *(void *)(a1 + 5128) = a3;
  *(void *)(a1 + 5120) = &unk_26E726318;
  *(void *)(a1 + 5160) = a1;
  *(void *)(a1 + 5168) = "ScScene.updateCCDMultiPass";
  *(_OWORD *)(a1 + 5296) = 0u;
  *(_OWORD *)(a1 + 5176) = 0u;
  *(_OWORD *)(a1 + 5192) = 0u;
  *(_OWORD *)(a1 + 5208) = 0u;
  *(_OWORD *)(a1 + 5224) = 0u;
  *(_OWORD *)(a1 + 5240) = 0u;
  *(_OWORD *)(a1 + 5256) = 0u;
  *(_DWORD *)(a1 + 5312) = 0;
  *(void *)(a1 + 5288) = a3;
  *(void *)(a1 + 5280) = &unk_26E7263A8;
  *(void *)(a1 + 5320) = a1;
  *(void *)(a1 + 5328) = "ScScene.afterIntegration";
  *(_OWORD *)(a1 + 5352) = 0u;
  *(_DWORD *)(a1 + 5368) = 0;
  *(void *)(a1 + 5344) = a3;
  *(void *)(a1 + 5336) = &unk_26E726438;
  *(void *)(a1 + 5376) = a1;
  *(void *)(a1 + 5384) = "ScScene.constraintProjection";
  *(_OWORD *)(a1 + 5408) = 0u;
  *(_DWORD *)(a1 + 5424) = 0;
  *(void *)(a1 + 5400) = a3;
  *(void *)(a1 + 5392) = &unk_26E7264C8;
  *(void *)(a1 + 5432) = a1;
  *(void *)(a1 + 5440) = "ScScene.postSolver";
  *(_OWORD *)(a1 + 5464) = 0u;
  *(_DWORD *)(a1 + 5480) = 0;
  *(void *)(a1 + 5456) = a3;
  *(void *)(a1 + 5448) = &unk_26E726558;
  *(void *)(a1 + 5488) = a1;
  *(void *)(a1 + 5496) = "ScScene.rigidBodySolver";
  *(_OWORD *)(a1 + 5520) = 0u;
  *(_DWORD *)(a1 + 5536) = 0;
  *(void *)(a1 + 5512) = a3;
  *(void *)(a1 + 5504) = &unk_26E7265E8;
  *(void *)(a1 + 5544) = a1;
  *(void *)(a1 + 5552) = "ScScene.updateBodiesAndShapes";
  *(_OWORD *)(a1 + 5576) = 0u;
  *(_DWORD *)(a1 + 5592) = 0;
  *(void *)(a1 + 5568) = a3;
  *(void *)(a1 + 5560) = &unk_26E726678;
  *(void *)(a1 + 5600) = a1;
  *(void *)(a1 + 5608) = "ScScene.updateSimulationController";
  *(_OWORD *)(a1 + 5632) = 0u;
  *(_DWORD *)(a1 + 5648) = 0;
  *(void *)(a1 + 5624) = a3;
  *(void *)(a1 + 5616) = &unk_26E726708;
  *(void *)(a1 + 5656) = a1;
  *(void *)(a1 + 5664) = "ScScene.updateDynamics";
  *(_OWORD *)(a1 + 5688) = 0u;
  *(_DWORD *)(a1 + 5704) = 0;
  *(void *)(a1 + 5680) = a3;
  *(void *)(a1 + 5672) = &unk_26E726798;
  *(void *)(a1 + 5712) = a1;
  *(void *)(a1 + 5720) = "ScScene.processLostContact";
  *(_OWORD *)(a1 + 5744) = 0u;
  *(_DWORD *)(a1 + 5760) = 0;
  *(void *)(a1 + 5736) = a3;
  *(void *)(a1 + 5728) = &unk_26E726828;
  *(void *)(a1 + 5768) = a1;
  *(void *)(a1 + 5776) = "ScScene.processLostContact2";
  *(_OWORD *)(a1 + 5800) = 0u;
  *(_DWORD *)(a1 + 5816) = 0;
  *(void *)(a1 + 5792) = a3;
  *(void *)(a1 + 5784) = &unk_26E7268B8;
  *(void *)(a1 + 5824) = a1;
  *(void *)(a1 + 5832) = "ScScene.processLostContact3";
  *(_OWORD *)(a1 + 5856) = 0u;
  *(_DWORD *)(a1 + 5872) = 0;
  *(void *)(a1 + 5848) = a3;
  *(void *)(a1 + 5840) = &unk_26E726948;
  *(void *)(a1 + 5880) = a1;
  *(void *)(a1 + 5888) = "ScScene.destroyManagers";
  *(_OWORD *)(a1 + 5912) = 0u;
  *(_DWORD *)(a1 + 5928) = 0;
  *(void *)(a1 + 5904) = a3;
  *(void *)(a1 + 5896) = &unk_26E7269D8;
  *(void *)(a1 + 5936) = a1;
  *(void *)(a1 + 5944) = "ScScene.lostTouchReports";
  *(_OWORD *)(a1 + 5968) = 0u;
  *(_DWORD *)(a1 + 5984) = 0;
  *(void *)(a1 + 5960) = a3;
  *(void *)(a1 + 5952) = &unk_26E726A68;
  *(void *)(a1 + 5992) = a1;
  *(void *)(a1 + 6000) = "ScScene.unregisterInteractions";
  *(_OWORD *)(a1 + 6024) = 0u;
  *(_DWORD *)(a1 + 6040) = 0;
  *(void *)(a1 + 6016) = a3;
  *(void *)(a1 + 6008) = &unk_26E726AF8;
  *(void *)(a1 + 6048) = a1;
  *(void *)(a1 + 6056) = "ScScene.processNpLostTouchTask";
  *(_OWORD *)(a1 + 6080) = 0u;
  *(_DWORD *)(a1 + 6096) = 0;
  *(void *)(a1 + 6072) = a3;
  *(void *)(a1 + 6064) = &unk_26E726B88;
  *(void *)(a1 + 6104) = a1;
  *(void *)(a1 + 6112) = "ScScene.processNPLostTouchEvents";
  *(_OWORD *)(a1 + 6136) = 0u;
  *(_DWORD *)(a1 + 6152) = 0;
  *(void *)(a1 + 6128) = a3;
  *(void *)(a1 + 6120) = &unk_26E726C18;
  *(void *)(a1 + 6160) = a1;
  *(void *)(a1 + 6168) = "ScScene.postThirdPassIslandGenTask";
  *(_OWORD *)(a1 + 6192) = 0u;
  *(_DWORD *)(a1 + 6208) = 0;
  *(void *)(a1 + 6184) = a3;
  *(void *)(a1 + 6176) = &unk_26E726CA8;
  *(void *)(a1 + 6216) = a1;
  *(void *)(a1 + 6224) = "ScScene.postIslandGen";
  *(_OWORD *)(a1 + 6248) = 0u;
  *(_DWORD *)(a1 + 6264) = 0;
  *(void *)(a1 + 6240) = a3;
  *(void *)(a1 + 6232) = &unk_26E726D38;
  *(void *)(a1 + 6272) = a1;
  *(void *)(a1 + 6280) = "ScScene.islandGen";
  *(_OWORD *)(a1 + 6304) = 0u;
  *(_DWORD *)(a1 + 6320) = 0;
  *(void *)(a1 + 6296) = a3;
  *(void *)(a1 + 6288) = &unk_26E726DC8;
  *(void *)(a1 + 6328) = a1;
  *(void *)(a1 + 6336) = "ScScene.preRigidBodyNarrowPhase";
  *(_OWORD *)(a1 + 6360) = 0u;
  *(_DWORD *)(a1 + 6376) = 0;
  *(void *)(a1 + 6352) = a3;
  *(void *)(a1 + 6344) = &unk_26E726E58;
  *(void *)(a1 + 6384) = a1;
  *(void *)(a1 + 6392) = "ScScene.setEdgesConnectedTask";
  *(_OWORD *)(a1 + 6416) = 0u;
  *(_DWORD *)(a1 + 6432) = 0;
  *(void *)(a1 + 6408) = a3;
  *(void *)(a1 + 6400) = &unk_26E726EE8;
  *(void *)(a1 + 6440) = a1;
  *(void *)(a1 + 6448) = "ScScene.fetchPatchEventsTask";
  *(_OWORD *)(a1 + 6472) = 0u;
  *(_DWORD *)(a1 + 6488) = 0;
  *(void *)(a1 + 6464) = a3;
  *(void *)(a1 + 6456) = &unk_26E726F78;
  *(void *)(a1 + 6496) = a1;
  *(void *)(a1 + 6504) = "ScScene.processLostSolverPatchesTask";
  *(_OWORD *)(a1 + 6528) = 0u;
  *(_DWORD *)(a1 + 6544) = 0;
  *(void *)(a1 + 6520) = a3;
  *(void *)(a1 + 6512) = &unk_26E727008;
  *(void *)(a1 + 6552) = a1;
  *(void *)(a1 + 6560) = "ScScene.rigidBodyNarrowPhase";
  *(_OWORD *)(a1 + 6584) = 0u;
  *(_DWORD *)(a1 + 6600) = 0;
  *(void *)(a1 + 6576) = a3;
  *(void *)(a1 + 6568) = &unk_26E727098;
  *(void *)(a1 + 6608) = a1;
  *(void *)(a1 + 6616) = "ScScene.unblockNarrowPhase";
  *(_OWORD *)(a1 + 6640) = 0u;
  *(_DWORD *)(a1 + 6656) = 0;
  *(void *)(a1 + 6632) = a3;
  *(void *)(a1 + 6624) = &unk_26E727128;
  *(void *)(a1 + 6664) = a1;
  *(void *)(a1 + 6672) = "ScScene.postBroadPhase";
  *(_OWORD *)(a1 + 6696) = 0u;
  *(_DWORD *)(a1 + 6712) = 0;
  *(void *)(a1 + 6688) = a3;
  *(void *)(a1 + 6680) = &unk_26E7271B8;
  *(void *)(a1 + 6720) = a1;
  *(void *)(a1 + 6728) = "ScScene.postBroadPhaseCont";
  *(_OWORD *)(a1 + 6752) = 0u;
  *(_DWORD *)(a1 + 6768) = 0;
  *(void *)(a1 + 6744) = a3;
  *(void *)(a1 + 6736) = &unk_26E727248;
  *(void *)(a1 + 6776) = a1;
  *(void *)(a1 + 6784) = "ScScene.postBroadPhase2";
  *(_OWORD *)(a1 + 6800) = 0u;
  *(void *)(a1 + 6792) = &unk_26E726230;
  *(_DWORD *)(a1 + 6816) = 0;
  *(void *)(a1 + 6824) = "ScScene.postBroadPhase3";
  *(void *)(a1 + 6880) = 0x400000000;
  *(unsigned char *)(v6 + 2712) = 1;
  *(void *)(a1 + 6872) = a1 + 6832;
  *(void *)(a1 + 6936) = 0x400000000;
  *(unsigned char *)(v6 + 2768) = 1;
  *(void *)(a1 + 6928) = a1 + 6888;
  *(unsigned char *)(v6 + 2792) = 0;
  uint64_t v17 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    int v18 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  }
  else {
    int v18 = "<allocation names disabled>";
  }
  int32x2_t v19 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v17 + 24) + 16))(v17 + 24, 72, v18, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(void *)(a1 + 6952) = v19;
  physx::shdfnd::MutexImpl::MutexImpl(v19);
  *(void *)(a1 + 6800) = a3;
  *(void *)(a1 + 6792) = &unk_26E7272D8;
  *(void *)(a1 + 6960) = a1;
  *(void *)(a1 + 6984) = 0;
  *(void *)(a1 + 6992) = 0;
  *(_DWORD *)(a1 + 7000) = 0;
  *(void *)(a1 + 6976) = a3;
  *(void *)(a1 + 6968) = &unk_26E727368;
  *(void *)(a1 + 7008) = a1;
  *(void *)(a1 + 7016) = "ScScene.preallocateContactManagers";
  *(void *)(a1 + 7040) = 0;
  *(void *)(a1 + 7048) = 0;
  *(_DWORD *)(a1 + 7056) = 0;
  *(void *)(a1 + 7032) = a3;
  *(void *)(a1 + 7024) = &unk_26E7273F8;
  *(void *)(a1 + 7064) = a1;
  *(void *)(a1 + 7072) = "ScScene.islandInsertion";
  *(void *)(a1 + 7096) = 0;
  *(void *)(a1 + 7104) = 0;
  *(_DWORD *)(a1 + 7112) = 0;
  *(void *)(a1 + 7088) = a3;
  *(void *)(a1 + 7080) = &unk_26E727488;
  *(void *)(a1 + 7120) = a1;
  *(void *)(a1 + 7128) = "ScScene.registerContactManagers";
  *(_OWORD *)(a1 + 7152) = 0u;
  *(_DWORD *)(a1 + 7168) = 0;
  *(void *)(a1 + 7144) = a3;
  *(void *)(a1 + 7136) = &unk_26E727518;
  *(void *)(a1 + 7176) = a1;
  *(void *)(a1 + 7184) = "ScScene.registerInteractions";
  *(_OWORD *)(a1 + 7208) = 0u;
  *(_DWORD *)(a1 + 7224) = 0;
  *(void *)(a1 + 7200) = a3;
  *(void *)(a1 + 7192) = &unk_26E7275A8;
  *(void *)(a1 + 7232) = a1;
  *(void *)(a1 + 7240) = "ScScene.registerSceneInteractions";
  *(_OWORD *)(a1 + 7264) = 0u;
  *(_DWORD *)(a1 + 7280) = 0;
  *(void *)(a1 + 7256) = a3;
  *(void *)(a1 + 7248) = &unk_26E727638;
  *(void *)(a1 + 7288) = a1;
  *(void *)(a1 + 7296) = "ScScene.broadPhase";
  *(_OWORD *)(a1 + 7320) = 0u;
  *(_DWORD *)(a1 + 7336) = 0;
  *(void *)(a1 + 7312) = a3;
  *(void *)(a1 + 7304) = &unk_26E7276C8;
  *(void *)(a1 + 7344) = a1;
  *(void *)(a1 + 7352) = "ScScene.advanceStep";
  *(_OWORD *)(a1 + 7376) = 0u;
  *(_DWORD *)(a1 + 7392) = 0;
  *(void *)(a1 + 7368) = a3;
  *(void *)(a1 + 7360) = &unk_26E727758;
  *(void *)(a1 + 7400) = a1;
  *(void *)(a1 + 7408) = "ScScene.collideStep";
  physx::Cm::FlushPool::FlushPool((physx::Cm::FlushPool *)(a1 + 7416), 0x4000u);
  *(_WORD *)(v6 + 3320) = 0;
  *(_OWORD *)(a1 + 7476) = 0u;
  *(_OWORD *)(a1 + 7492) = 0u;
  *(_OWORD *)(a1 + 7508) = 0u;
  *(_DWORD *)(a1 + 7524) = 0;
  *(_DWORD *)(a1 + 7528) = 1061158912;
  *(_DWORD *)(a1 + 7532) = -1;
  *(void *)(a1 + 7536) = 0;
  physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 7488, 0x40u, 0);
  *(void *)(a1 + 7632) = 0;
  *(_DWORD *)(a1 + 7640) = 0;
  *(_DWORD *)(a1 + 1876) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 7544) = 0u;
  *(_OWORD *)(a1 + 7560) = 0u;
  *(_OWORD *)(a1 + 7576) = 0u;
  *(_OWORD *)(a1 + 7592) = 0u;
  *(_OWORD *)(a1 + 7608) = 0u;
  *(_DWORD *)(a1 + 7624) = 0;
  uint64_t v20 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    int v21 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::SimStats>::getName() [T = physx::Sc::SimStats]";
  }
  else {
    int v21 = "<allocation names disabled>";
  }
  uint64_t v22 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v20 + 24) + 16))(v20 + 24, 156, v21, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 645);
  *uint64_t v22 = 0u;
  v22[1] = 0u;
  v22[2] = 0u;
  v22[3] = 0u;
  v22[4] = 0u;
  v22[5] = 0u;
  v22[6] = 0u;
  v22[7] = 0u;
  v22[8] = 0u;
  *(_OWORD *)((char *)v22 + 140) = 0u;
  *(void *)(a1 + 4256) = v22;
  uint64_t v23 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    int v24 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ObjectIDTracker>::getName() [T = physx::Sc::ObjectIDTracker]";
  }
  else {
    int v24 = "<allocation names disabled>";
  }
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v23 + 24) + 16))(v23 + 24, 64, v24, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 646);
  *(_DWORD *)(v25 + 8) = 0;
  *(void *)(v25 + 48) = 0;
  *(void *)(v25 + 56) = 0;
  *(void *)(v25 + 16) = 0;
  *(void *)(v25 + 24) = 0;
  *(void *)(v25 + 32) = 0;
  *(_DWORD *)(v25 + 40) = 0;
  *(void *)(a1 + 4272) = v25;
  uint64_t v26 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    int v27 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ObjectIDTracker>::getName() [T = physx::Sc::ObjectIDTracker]";
  }
  else {
    int v27 = "<allocation names disabled>";
  }
  uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v26 + 24) + 16))(v26 + 24, 64, v27, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 647);
  *(_DWORD *)(v28 + 8) = 0;
  *(void *)(v28 + 48) = 0;
  *(void *)(v28 + 56) = 0;
  *(void *)(v28 + 16) = 0;
  *(void *)(v28 + 24) = 0;
  *(void *)(v28 + 32) = 0;
  *(_DWORD *)(v28 + 40) = 0;
  *(void *)(a1 + 4280) = v28;
  uint64_t v29 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v30 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ObjectIDTracker>::getName() [T = physx::Sc::ObjectIDTracker]";
  }
  else {
    uint64_t v30 = "<allocation names disabled>";
  }
  uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v29 + 24) + 16))(v29 + 24, 64, v30, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 648);
  *(_DWORD *)(v31 + 8) = 0;
  *(void *)(v31 + 48) = 0;
  *(void *)(v31 + 56) = 0;
  *(void *)(v31 + 16) = 0;
  *(void *)(v31 + 24) = 0;
  *(void *)(v31 + 32) = 0;
  *(_DWORD *)(v31 + 40) = 0;
  *(void *)(a1 + 4288) = v31;
  uint64_t v32 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    float v33 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ObjectIDTracker>::getName() [T = physx::Sc::ObjectIDTracker]";
  }
  else {
    float v33 = "<allocation names disabled>";
  }
  uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v32 + 24) + 16))(v32 + 24, 64, v33, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 649);
  *(_DWORD *)(v34 + 8) = 0;
  *(void *)(v34 + 48) = 0;
  *(void *)(v34 + 56) = 0;
  *(void *)(v34 + 16) = 0;
  *(void *)(v34 + 24) = 0;
  *(void *)(v34 + 32) = 0;
  *(_DWORD *)(v34 + 40) = 0;
  *(void *)(a1 + 4296) = v34;
  float v35 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 16, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 651);
  *(void *)(a1 + 2144) = v35;
  *float v35 = 0;
  v35[1] = 0;
  uint64_t v36 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    float v37 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::PreallocatingPool<physx::Sc::StaticSim>>::get"
  }
          "Name() [T = physx::Cm::PreallocatingPool<physx::Sc::StaticSim>]";
  else {
    float v37 = "<allocation names disabled>";
  }
  float v38 = (physx::Cm::PreallocatingRegionManager *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v36 + 24) + 16))(v36 + 24, 48, v37, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 654);
  *(void *)(a1 + 4320) = physx::Cm::PreallocatingRegionManager::PreallocatingRegionManager(v38, 0x60u, (uint64_t)"StaticSim", v39);
  uint64_t v40 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    float v41 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::PreallocatingPool<physx::Sc::BodySim>>::getNa"
  }
          "me() [T = physx::Cm::PreallocatingPool<physx::Sc::BodySim>]";
  else {
    float v41 = "<allocation names disabled>";
  }
  float v42 = (physx::Cm::PreallocatingRegionManager *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v40 + 24) + 16))(v40 + 24, 48, v41, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 655);
  *(void *)(a1 + 4328) = physx::Cm::PreallocatingRegionManager::PreallocatingRegionManager(v42, 0xD0u, (uint64_t)"BodySim", v43);
  uint64_t v44 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    float v45 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::PreallocatingPool<physx::Sc::ShapeSim>>::getN"
  }
          "ame() [T = physx::Cm::PreallocatingPool<physx::Sc::ShapeSim>]";
  else {
    float v45 = "<allocation names disabled>";
  }
  float v46 = (physx::Cm::PreallocatingRegionManager *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v44 + 24) + 16))(v44 + 24, 48, v45, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 656);
  *(void *)(a1 + 4312) = physx::Cm::PreallocatingRegionManager::PreallocatingRegionManager(v46, 0x48u, (uint64_t)"ShapeSim", v47);
  uint64_t v48 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    float v49 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::Pool<physx::Sc::ConstraintSim>>::getName("
  }
          ") [T = physx::shdfnd::Pool<physx::Sc::ConstraintSim>]";
  else {
    float v49 = "<allocation names disabled>";
  }
  uint64_t v50 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v48 + 24) + 16))(v48 + 24, 568, v49, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 657);
  *(void *)(v50 + 536) = 0x4000000000;
  *(unsigned char *)(v50 + 520) = 1;
  *(void *)(v50 + 528) = v50 + 8;
  *(void *)(v50 + 544) = 32;
  *(_DWORD *)(v50 + 552) = 4096;
  *(void *)(v50 + 560) = 0;
  *(void *)(a1 + 4336) = v50;
  uint64_t v51 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    float32x2_t v52 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::Pool<physx::Sc::ConstraintInteraction>>::"
  }
          "getName() [T = physx::shdfnd::Pool<physx::Sc::ConstraintInteraction>]";
  else {
    float32x2_t v52 = "<allocation names disabled>";
  }
  uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v51 + 24) + 16))(v51 + 24, 568, v52, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 658);
  *(void *)(v53 + 536) = 0x4000000000;
  *(unsigned char *)(v53 + 520) = 1;
  *(void *)(v53 + 528) = v53 + 8;
  *(void *)(v53 + 544) = 32;
  *(_DWORD *)(v53 + 552) = 1536;
  *(void *)(v53 + 560) = 0;
  *(void *)(a1 + 4360) = v53;
  uint64_t v54 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v55 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::LLArticulationPool>::getName() [T = physx::Sc"
  }
          "::LLArticulationPool]";
  else {
    uint64_t v55 = "<allocation names disabled>";
  }
  uint64_t v56 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v54 + 24) + 16))(v54 + 24, 568, v55, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 659);
  *(void *)(v56 + 536) = 0x4000000000;
  *(unsigned char *)(v56 + 520) = 1;
  *(void *)(v56 + 528) = v56 + 8;
  *(void *)(v56 + 544) = 32;
  *(_DWORD *)(v56 + 552) = 10240;
  *(void *)(v56 + 560) = 0;
  *(void *)(a1 + 4344) = v56;
  uint64_t v57 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    int v58 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::LLArticulationRCPool>::getName() [T = physx::"
  }
          "Sc::LLArticulationRCPool]";
  else {
    int v58 = "<allocation names disabled>";
  }
  uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v57 + 24) + 16))(v57 + 24, 568, v58, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 660);
  *(void *)(v59 + 536) = 0x4000000000;
  *(unsigned char *)(v59 + 520) = 1;
  *(void *)(v59 + 528) = v59 + 8;
  *(void *)(v59 + 544) = 32;
  *(_DWORD *)(v59 + 552) = 28672;
  *(void *)(v59 + 560) = 0;
  *(void *)(a1 + 4352) = v59;
  uint64_t v60 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    unsigned int v61 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::Pool<physx::Sc::SimStateData>>::getName()"
  }
          " [T = physx::shdfnd::Pool<physx::Sc::SimStateData>]";
  else {
    unsigned int v61 = "<allocation names disabled>";
  }
  uint64_t v62 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v60 + 24) + 16))(v60 + 24, 568, v61, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 662);
  *(void *)(v62 + 536) = 0x4000000000;
  *(unsigned char *)(v62 + 520) = 1;
  *(void *)(v62 + 528) = v62 + 8;
  *(void *)(v62 + 544) = 32;
  *(_DWORD *)(v62 + 552) = 2048;
  *(void *)(v62 + 560) = 0;
  *(void *)(a1 + 4368) = v62;
  uint64_t v63 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v64 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Client>::getName() [T = physx::Sc::Client]";
  }
  else {
    uint64_t v64 = "<allocation names disabled>";
  }
  uint64_t v65 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v63 + 24) + 16))(v63 + 24, 1, v64, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 664);
  uint64_t v145 = v65;
  uint64_t v66 = *(unsigned int *)(a1 + 4168);
  if ((*(_DWORD *)(a1 + 4172) & 0x7FFFFFFFu) <= v66)
  {
    physx::shdfnd::Array<physx::Sc::Client *,physx::shdfnd::ReflectionAllocator<physx::Sc::Client *>>::growAndPushBack(a1 + 4160, &v145);
  }
  else
  {
    *(void *)(*(void *)(a1 + 4160) + 8 * v66) = v65;
    *(_DWORD *)(a1 + 4168) = v66 + 1;
  }
  uint64_t v67 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    int v68 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintProjectionManager>::getName() [T = "
  }
          "physx::Sc::ConstraintProjectionManager]";
  else {
    int v68 = "<allocation names disabled>";
  }
  unsigned int v69 = (physx::Sc::ConstraintProjectionManager *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v67 + 24) + 16))(v67 + 24, 688, v68, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 665);
  *(void *)(a1 + 2056) = physx::Sc::ConstraintProjectionManager::ConstraintProjectionManager(v69);
  uint64_t v70 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v71 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::SqBoundsManager>::getName() [T = physx::Sc::SqBoundsManager]";
  }
  else {
    uint64_t v71 = "<allocation names disabled>";
  }
  uint64_t v72 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v70 + 24) + 16))(v70 + 24, 64, v71, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 667);
  *uint64_t v72 = 0u;
  v72[1] = 0u;
  float32x4_t v72[2] = 0u;
  v72[3] = 0u;
  *(void *)(a1 + 2088) = v72;
  uint64_t v73 = (*(uint64_t (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 8))(physx::shdfnd::Foundation::mInstance);
  *(void *)(a1 + 7456) = physx::PxTaskManager::createTaskManager(v73, *(void *)(a2 + 160));
  *(void *)(a1 + 7464) = *(void *)(a2 + 168);
  *(void *)(a1 + 4684) = 0;
  *(void *)(a1 + 4692) = 0;
  *(void *)(a1 + 4676) = 0;
  *(_DWORD *)(a1 + 4700) = 0;
  *(unsigned char *)(v6 + 3321) = 0;
  uint64_t v74 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v75 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsContext>::getName() [T = physx::PxsContext]";
  }
  else {
    uint64_t v75 = "<allocation names disabled>";
  }
  uint64_t v76 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v74 + 24) + 16))(v74 + 24, 2624, v75, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 710);
  uint64_t v77 = physx::PxsContext::PxsContext(v76, (int32x2_t *)a2, *(void *)(a1 + 7456), a1 + 7416, *(void *)(a1 + 7464), a3);
  *(void *)(a1 + 1840) = v77;
  if (!v77)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 714, "Failed to create context!", v78, v79, v80, v144);
    return a1;
  }
  *(void *)(v77 + 424) = a1;
  *(void *)(a1 + 1896) = 0;
  uint64_t v81 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 24, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/software/src/PxsDefaultMemoryManager.cpp", 71);
  v81[1] = 0;
  v81[2] = 0;
  *uint64_t v81 = &unk_26E722DA8;
  *(void *)(a1 + 1896) = v81;
  if (*(_DWORD *)(a2 + 80) == 3) {
    int v82 = 2;
  }
  else {
    int v82 = *(_DWORD *)(a2 + 80);
  }
  *(void *)(a1 + 1856) = physx::Bp::BroadPhase::create(v82, *(unsigned int *)(a2 + 120), *(_DWORD *)(a2 + 124), *(_DWORD *)(a2 + 104), *(_DWORD *)(a2 + 108), a3);
  uint64_t v83 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 1896) + 16))(*(void *)(a1 + 1896), *(unsigned int *)(a2 + 296));
  uint64_t v145 = v83;
  uint64_t v84 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    int v85 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::BoundsArray>::getName() [T = physx::Bp::BoundsArray]";
  }
  else {
    int v85 = "<allocation names disabled>";
  }
  BOOL v86 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v84 + 24) + 16))(v84 + 24, 32, v85, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 774);
  v86[1] = 0;
  v86[2] = 0;
  *BOOL v86 = v83;
  *(void *)(a1 + 2064) = v86;
  uint64_t v87 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 24, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 776);
  v87[1] = 0;
  v87[2] = 0;
  *uint64_t v87 = v83;
  *(void *)(a1 + 2072) = v87;
  *(unsigned char *)(a1 + 2080) = 0;
  unsigned int v88 = *(_DWORD *)(a1 + 4268);
  int v89 = (v88 >> 14) & 1;
  unint64_t v90 = (physx::IG::SimpleIslandManager *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 1680, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 782);
  *(void *)(a1 + 1880) = physx::IG::SimpleIslandManager::SimpleIslandManager(v90, v89, a3);
  uint64_t v91 = *(void *)(a1 + 1840);
  uint64_t v92 = v91 + 40;
  uint64_t v93 = *(void *)(v91 + 1920);
  uint64_t v94 = v91 + 1936;
  uint64_t v95 = *(void *)(v91 + 1912);
  uint64_t v96 = (uint64_t)v90 + 224;
  char v97 = *(unsigned char *)(v6 + 2) != 0;
  if (*(_DWORD *)(a2 + 132)) {
    uint64_t v98 = physx::Dy::DynamicsTGSContext::create(v92, v91, v93, v94, v95, v83, a1, v96, *(float *)(a2 + 300), a3, v97, v89, (v88 & 8) != 0);
  }
  else {
    uint64_t v98 = physx::Dy::DynamicsContext::create(v92, v91, v93, v94, v95, v83, a1, v96, *(float *)(a2 + 216), a3, v97, v89, (v88 & 8) != 0, (*(_DWORD *)(a2 + 152) & 0x8000) != 0);
  }
  *(void *)(a1 + 1888) = v98;
  unsigned int v100 = *(physx::PxsNphaseImplementationContext **)(a1 + 1840);
  *((void *)v100 + 222) = physx::PxsNphaseImplementationContext::create(v100, (physx::PxsContext *)(*(void *)(a1 + 1880) + 224), v99);
  unsigned int v101 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 16, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 805);
  *unsigned int v101 = &unk_26E725938;
  v101[1] = a1;
  *(void *)(a1 + 1912) = v101;
  uint64_t v102 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 16, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScSimulationController.cpp", 37);
  *uint64_t v102 = &unk_26E727BF8;
  v102[1] = v101;
  *(void *)(a1 + 1904) = v102;
  uint64_t v103 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v104 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::AABBManager>::getName() [T = physx::Bp::AABBManager]";
  }
  else {
    uint64_t v104 = "<allocation names disabled>";
  }
  uint64_t v105 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v103 + 24) + 16))(v103 + 24, 800, v104, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 808);
  uint64_t v107 = physx::Bp::AABBManager::AABBManager(v105, *(void *)(a1 + 1856), *(void *)(a1 + 2064), *(void *)(a1 + 2072), v106, *(_DWORD *)(a2 + 108) + *(_DWORD *)(a2 + 104), &v145, a3, *(_DWORD *)(a2 + 72), *(_DWORD *)(a2 + 76));
  *(void *)(a1 + 1848) = v107;
  int v108 = *(_DWORD *)(a2 + 100);
  if (v108) {
    physx::Cm::BitMapBase<physx::shdfnd::VirtualAllocator>::extend(v107 + 224, ((2 * v108) & 0xFFFFFF00) + 256);
  }
  uint64_t v109 = *(void *)(a1 + 1840);
  uint64_t v110 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, 32, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/software/src/PxsContext.cpp", 186);
  *(void *)(v110 + 8) = 0;
  *(void *)(v110 + 16) = 0;
  *(void *)uint64_t v110 = v83;
  *(unsigned char *)(v110 + 28) = 1;
  *(_DWORD *)(v110 + 24) = 0;
  *(void *)(v109 + 2592) = v110;
  uint64_t v111 = *(void *)(a1 + 1840);
  *(void *)(v111 + 2600) = *(void *)(a1 + 2072);
  *(void *)(a1 + 1864) = physx::PxsCCDContext::create(v111, *(void *)(*(void *)(a1 + 1888) + 8), *(void *)(v111 + 1776), *(float *)(a2 + 228));
  uint64_t v112 = *(void *)(a1 + 1888);
  *(void *)(v112 + 140) = *(void *)(a2 + 200);
  *(_DWORD *)(v112 + 124) = *(_DWORD *)(a2 + 140);
  *(int32x2_t *)(v112 + 128) = vrev64_s32(*(int32x2_t *)(a2 + 144));
  float v113 = *(float *)physx::Sc::Physics::mInstance;
  *(float *)(v112 + 136) = *(float *)physx::Sc::Physics::mInstance * 0.025;
  uint64_t v114 = *(void *)(a1 + 1840);
  *(float *)(v114 + 288) = v113 * 0.01;
  *(float *)(v114 + 292) = v113;
  *(float *)(v112 + 120) = -*(float *)(a2 + 136);
  uint64_t v115 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    float v116 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::StaticCore>::getName() [T = physx::Sc::StaticCore]";
  }
  else {
    float v116 = "<allocation names disabled>";
  }
  uint64_t v117 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v115 + 24) + 16))(v115 + 24, 48, v116, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 887);
  *(void *)uint64_t v117 = 0;
  *(_DWORD *)(v117 + 8) = 0xFFFFFF;
  *(_WORD *)(v117 + 12) = 1;
  *(unsigned char *)(v117 + 14) = 0;
  *(unsigned char *)(v117 + 45) = 0;
  *(_WORD *)(v117 + 46) = 0;
  *(_OWORD *)(v117 + 16) = xmmword_23435FBB0;
  *(void *)(v117 + 32) = 0;
  *(void *)(v117 + 37) = 0;
  uint64_t v118 = *(void *)(a1 + 4320);
  unsigned int v119 = *(_DWORD *)(v118 + 8);
  uint64_t v120 = *(void *)(v118 + 16);
  char v121 = (uint64_t *)(v120 + 24 * v119);
  uint64_t v122 = (uint64_t *)v121[1];
  if (v122)
  {
    v121[1] = *v122;
  }
  else
  {
    uint64_t v136 = v120 + 24 * v119;
    int v139 = *(_DWORD *)(v136 + 16);
    unsigned int v138 = (_DWORD *)(v136 + 16);
    int v137 = v139;
    if (v139 == *(_DWORD *)v118 || (v140 = *(_DWORD *)(v118 + 4), *unsigned int v138 = v137 + 1, (v141 = *v121) == 0))
    {
      uint64_t v122 = physx::Cm::PreallocatingRegionManager::searchForMemory((physx::Cm::PreallocatingRegionManager *)v118);
      if (!v122) {
        goto LABEL_91;
      }
    }
    else
    {
      uint64_t v122 = (uint64_t *)(v141 + (v137 * v140));
    }
  }
  uint64_t v122 = (uint64_t *)physx::Sc::RigidSim::RigidSim((uint64_t)v122, a1, (void *)v117);
  *uint64_t v122 = (uint64_t)&unk_26E7277E8;
LABEL_91:
  *(void *)(a1 + 4304) = v122;
  uint64_t v123 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    long long v124 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::NPhaseCore>::getName() [T = physx::Sc::NPhaseCore]";
  }
  else {
    long long v124 = "<allocation names disabled>";
  }
  uint64_t v125 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v123 + 24) + 16))(v123 + 24, 3776, v124, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 891);
  *(void *)(a1 + 3992) = physx::Sc::NPhaseCore::NPhaseCore(v125, a1, a2);
  int v126 = -2;
  for (uint64_t i = 1132; i != 1164; ++i)
  {
    *(_DWORD *)(a1 + 4 * i) = ~v126;
    v126 *= 2;
  }
  *(_WORD *)uint64_t v6 = 257;
  long long v128 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 1920) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 1936) = v128;
  *(void *)(a1 + 4248) = *(void *)(a2 + 88);
  *(void *)(a1 + 1952) = *(void *)a2;
  *(_DWORD *)(a1 + 1960) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 1964) = 1;
  *(_DWORD *)(*(void *)(a1 + 1888) + 148) = *(_DWORD *)(a2 + 128);
  int v129 = *(_DWORD *)(a2 + 152);
  uint64_t v130 = *(void *)(a1 + 1840);
  *(unsigned char *)(v130 + 2584) = (v129 & 0x40) != 0;
  *(unsigned char *)(v130 + 2585) = (v129 & 0x100) == 0;
  physx::Sc::Scene::setSimulationEventCallback(a1, *(void *)(a2 + 16));
  uint64_t v131 = *(void *)(a1 + 1840);
  *(void *)(v131 + 1768) = *(void *)(a2 + 24);
  (*(void (**)(void))(**(void **)(v131 + 1776) + 176))(*(void *)(v131 + 1776));
  uint64_t v132 = *(void *)(a1 + 1864);
  *(void *)(v132 + 168) = *(void *)(a2 + 32);
  *(_DWORD *)(v132 + 436) = *(_DWORD *)(a2 + 224);
  int v133 = *(const void **)(a2 + 40);
  if (v133)
  {
    if (*(_DWORD *)(a2 + 48))
    {
      uint64_t v134 = (void *)(*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, *(unsigned int *)(a2 + 48), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/simulationcontroller/src/ScScene.cpp", 923);
      int v133 = *(const void **)(a2 + 40);
      size_t v135 = *(unsigned int *)(a2 + 48);
    }
    else
    {
      size_t v135 = 0;
      uint64_t v134 = 0;
    }
    *(void *)(a1 + 4000) = v134;
    memcpy(v134, v133, v135);
    int v142 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 4008) = v142;
    *(_DWORD *)(a1 + 4012) = v142;
  }
  else
  {
    *(_OWORD *)(a1 + 4000) = 0u;
  }
  *(_OWORD *)(a1 + 4016) = *(_OWORD *)(a2 + 56);
  return a1;
}

uint64_t physx::Sc::Scene::setSimulationEventCallback(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    if (!*(void *)(result + 4240))
    {
      uint64_t v2 = *(unsigned int *)(result + 4092);
      if (v2)
      {
        unint64_t v3 = *(uint64_t **)(result + 4048);
        do
        {
          uint64_t v4 = *v3++;
          *(_WORD *)(*(void *)v4 + 180) |= 0x40u;
          --v2;
        }
        while (v2);
      }
    }
  }
  *(void *)(result + 4240) = a2;
  return result;
}

uint64_t (***physx::Sc::Scene::release(physx::Sc::Scene *this))(void)
{
  ++*((_DWORD *)this + 498);
  *((_DWORD *)this + 556) = 0;
  uint64_t v2 = *((void *)this + 499);
  if (v2)
  {
    physx::Sc::NPhaseCore::~NPhaseCore(*((physx::Sc::NPhaseCore **)this + 499));
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2);
  }
  *((void *)this + 499) = 0;
  if (*((void *)this + 500)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 500) = 0;
  uint64_t v3 = *((void *)this + 538);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 80);
    int v5 = (physx::Cm::PreallocatingRegionManager *)*((void *)this + 540);
    (**(void (***)(void))v3)(*((void *)this + 538));
    physx::Cm::PreallocatingRegionManager::deallocateMemory(v5, (unsigned __int8 *)v3);
    if (v4) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v4);
    }
  }
  physx::Sc::Scene::postReportsCleanup(this);
  uint64_t v6 = *((void *)this + 230);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 1784);
    if (v7)
    {
      (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
      uint64_t v6 = *((void *)this + 230);
      *(void *)(v6 + 1784) = 0;
    }
    uint64_t v8 = *(void *)(v6 + 1776);
    if (v8)
    {
      (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
      *(void *)(*((void *)this + 230) + 1776) = 0;
    }
  }
  uint64_t v9 = *((void *)this + 257);
  if (v9)
  {
    if (*(void *)(v9 + 632)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    if (*(void *)(v9 + 576)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    if (*(_DWORD *)(v9 + 556))
    {
      uint64_t v131 = 0;
      uint64_t v132 = 0;
      uint64_t v10 = *(void *)(v9 + 568);
      if (v10)
      {
        do
        {
          uint64_t v130 = v10;
          int v11 = v132;
          if ((HIDWORD(v132) & 0x7FFFFFFFu) <= v132)
          {
            physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintGroupNode>>::growAndPushBack((uint64_t)&v131, &v130);
          }
          else
          {
            *(void *)&v131[8 * v132] = v10;
            LODWORD(v132) = v11 + 1;
          }
          uint64_t v10 = **(void **)(v9 + 568);
          *(void *)(v9 + 568) = v10;
        }
        while (v10);
        long long v12 = v131;
        int v13 = v132;
      }
      else
      {
        int v13 = 0;
        long long v12 = 0;
      }
      physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintGroupNode>>(v12, v13);
      physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintGroupNode>>(*(char **)(v9 + 536), *(_DWORD *)(v9 + 544));
      if ((v132 & 0x8000000000000000) == 0 && (v132 & 0x7FFFFFFF00000000) != 0 && v131) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
    }
    uint64_t v14 = *(unsigned int *)(v9 + 544);
    if (v14)
    {
      long long v15 = *(void **)(v9 + 536);
      uint64_t v16 = 8 * v14;
      do
      {
        if (*v15) {
          (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        }
        ++v15;
        v16 -= 8;
      }
      while (v16);
    }
    int v17 = *(_DWORD *)(v9 + 548);
    if ((v17 & 0x80000000) == 0 && (v17 & 0x7FFFFFFF) != 0)
    {
      uint64_t v18 = *(void *)(v9 + 536);
      if (v18 == v9 + 16)
      {
        *(unsigned char *)(v9 + 528) = 0;
      }
      else if (v18)
      {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v9);
  }
  *((void *)this + 257) = 0;
  uint64_t v19 = *((void *)this + 261);
  if (v19)
  {
    int v20 = *(_DWORD *)(v19 + 60);
    if ((v20 & 0x80000000) == 0 && (v20 & 0x7FFFFFFF) != 0 && *(void *)(v19 + 48) != 0) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    int v22 = *(_DWORD *)(v19 + 44);
    if ((v22 & 0x80000000) == 0 && (v22 & 0x7FFFFFFF) != 0 && *(void *)(v19 + 32) != 0) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    int v24 = *(_DWORD *)(v19 + 28);
    if ((v24 & 0x80000000) == 0 && (v24 & 0x7FFFFFFF) != 0 && *(void *)(v19 + 16) != 0) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    int v26 = *(_DWORD *)(v19 + 12);
    if ((v26 & 0x80000000) == 0 && (v26 & 0x7FFFFFFF) != 0 && *(void *)v19) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v19);
  }
  *((void *)this + 261) = 0;
  uint64_t v27 = *((void *)this + 258);
  if (v27)
  {
    int v28 = *(_DWORD *)(v27 + 20);
    if ((v28 & 0x80000000) == 0 && (v28 & 0x7FFFFFFF) != 0 && *(void *)(v27 + 8) != 0) {
      (*(void (**)(void))(**(void **)v27 + 24))();
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v27);
  }
  *((void *)this + 258) = 0;
  unint64_t v30 = *((unsigned int *)this + 1042);
  if (v30)
  {
    for (unint64_t i = 0; i < v30; ++i)
    {
      uint64_t v32 = *((void *)this + 520);
      if (*(void *)(v32 + 8 * i))
      {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        uint64_t v32 = *((void *)this + 520);
        unint64_t v30 = *((unsigned int *)this + 1042);
      }
      *(void *)(v32 + 8 * i) = 0;
    }
  }
  uint64_t v33 = *((void *)this + 545);
  if (v33)
  {
    if (*(_DWORD *)(v33 + 548))
    {
      uint64_t v131 = 0;
      uint64_t v132 = 0;
      uint64_t v34 = *(void *)(v33 + 560);
      if (v34)
      {
        do
        {
          uint64_t v130 = v34;
          int v35 = v132;
          if ((HIDWORD(v132) & 0x7FFFFFFFu) <= v132)
          {
            physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintInteraction>>::growAndPushBack((uint64_t)&v131, &v130);
          }
          else
          {
            *(void *)&v131[8 * v132] = v34;
            LODWORD(v132) = v35 + 1;
          }
          uint64_t v34 = **(void **)(v33 + 560);
          *(void *)(v33 + 560) = v34;
        }
        while (v34);
        uint64_t v36 = v131;
        int v37 = v132;
      }
      else
      {
        int v37 = 0;
        uint64_t v36 = 0;
      }
      physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintInteraction>>(v36, v37);
      physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintInteraction>>(*(char **)(v33 + 528), *(_DWORD *)(v33 + 536));
      if ((v132 & 0x8000000000000000) == 0 && (v132 & 0x7FFFFFFF00000000) != 0 && v131) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
    }
    uint64_t v38 = *(unsigned int *)(v33 + 536);
    if (v38)
    {
      float v39 = *(void **)(v33 + 528);
      uint64_t v40 = 8 * v38;
      do
      {
        if (*v39) {
          (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        }
        ++v39;
        v40 -= 8;
      }
      while (v40);
    }
    int v41 = *(_DWORD *)(v33 + 540);
    if ((v41 & 0x80000000) == 0 && (v41 & 0x7FFFFFFF) != 0)
    {
      uint64_t v42 = *(void *)(v33 + 528);
      if (v42 == v33 + 8)
      {
        *(unsigned char *)(v33 + 520) = 0;
      }
      else if (v42)
      {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v33);
  }
  uint64_t v43 = *((void *)this + 542);
  if (v43)
  {
    if (*(_DWORD *)(v43 + 548))
    {
      uint64_t v131 = 0;
      uint64_t v132 = 0;
      uint64_t v44 = *(void *)(v43 + 560);
      if (v44)
      {
        do
        {
          uint64_t v130 = v44;
          int v45 = v132;
          if ((HIDWORD(v132) & 0x7FFFFFFFu) <= v132)
          {
            physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintSim>>::growAndPushBack((uint64_t)&v131, &v130);
          }
          else
          {
            *(void *)&v131[8 * v132] = v44;
            LODWORD(v132) = v45 + 1;
          }
          uint64_t v44 = **(void **)(v43 + 560);
          *(void *)(v43 + 560) = v44;
        }
        while (v44);
        float v46 = v131;
        int v47 = v132;
      }
      else
      {
        int v47 = 0;
        float v46 = 0;
      }
      physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintSim>>(v46, v47);
      physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::ConstraintSim>>(*(char **)(v43 + 528), *(_DWORD *)(v43 + 536));
      uint64_t v48 = *(unsigned int *)(v43 + 536);
      float v49 = (physx::Sc::ConstraintSim **)v131;
      if (v48)
      {
        uint64_t v50 = *(physx::Sc::ConstraintSim ***)(v43 + 528);
        uint64_t v51 = &v50[v48];
        do
        {
          uint64_t v52 = *(unsigned int *)(v43 + 544);
          if (v52)
          {
            uint64_t v53 = *v50;
            uint64_t v54 = v52 << 7;
            do
            {
              if (v49 != (physx::Sc::ConstraintSim **)&v131[8 * v132] && v53 == *v49) {
                ++v49;
              }
              else {
                physx::Sc::ConstraintSim::~ConstraintSim(v53);
              }
              uint64_t v53 = (physx::Sc::ConstraintSim *)((char *)v53 + 128);
              v54 -= 128;
            }
            while (v54);
          }
          ++v50;
        }
        while (v50 != v51);
        float v49 = (physx::Sc::ConstraintSim **)v131;
      }
      if ((v132 & 0x8000000000000000) == 0 && (v132 & 0x7FFFFFFF00000000) != 0 && v49 != 0) {
        (*(void (**)(uint64_t, physx::Sc::ConstraintSim **))(*(void *)(physx::shdfnd::Foundation::mInstance
      }
                                                                                 + 24)
                                                                     + 24))(physx::shdfnd::Foundation::mInstance + 24, v49);
    }
    uint64_t v56 = *(unsigned int *)(v43 + 536);
    if (v56)
    {
      uint64_t v57 = *(void **)(v43 + 528);
      uint64_t v58 = 8 * v56;
      do
      {
        if (*v57) {
          (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        }
        ++v57;
        v58 -= 8;
      }
      while (v58);
    }
    int v59 = *(_DWORD *)(v43 + 540);
    if ((v59 & 0x80000000) == 0 && (v59 & 0x7FFFFFFF) != 0)
    {
      uint64_t v60 = *(void *)(v43 + 528);
      if (v60 == v43 + 8)
      {
        *(unsigned char *)(v43 + 520) = 0;
      }
      else if (v60)
      {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v43);
  }
  uint64_t v61 = *((void *)this + 546);
  if (v61)
  {
    if (*(_DWORD *)(v61 + 548))
    {
      uint64_t v131 = 0;
      uint64_t v132 = 0;
      uint64_t v62 = *(void *)(v61 + 560);
      if (v62)
      {
        do
        {
          uint64_t v130 = v62;
          int v63 = v132;
          if ((HIDWORD(v132) & 0x7FFFFFFFu) <= v132)
          {
            physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::SimStateData>>::growAndPushBack((uint64_t)&v131, &v130);
          }
          else
          {
            *(void *)&v131[8 * v132] = v62;
            LODWORD(v132) = v63 + 1;
          }
          uint64_t v62 = **(void **)(v61 + 560);
          *(void *)(v61 + 560) = v62;
        }
        while (v62);
        uint64_t v64 = v131;
        int v65 = v132;
      }
      else
      {
        int v65 = 0;
        uint64_t v64 = 0;
      }
      physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::SimStateData>>(v64, v65);
      physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::SimStateData>>(*(char **)(v61 + 528), *(_DWORD *)(v61 + 536));
      if ((v132 & 0x8000000000000000) == 0 && (v132 & 0x7FFFFFFF00000000) != 0 && v131) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
    }
    uint64_t v66 = *(unsigned int *)(v61 + 536);
    if (v66)
    {
      uint64_t v67 = *(void **)(v61 + 528);
      uint64_t v68 = 8 * v66;
      do
      {
        if (*v67) {
          (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        }
        ++v67;
        v68 -= 8;
      }
      while (v68);
    }
    int v69 = *(_DWORD *)(v61 + 540);
    if ((v69 & 0x80000000) == 0 && (v69 & 0x7FFFFFFF) != 0)
    {
      uint64_t v70 = *(void *)(v61 + 528);
      if (v70 == v61 + 8)
      {
        *(unsigned char *)(v61 + 520) = 0;
      }
      else if (v70)
      {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v61);
  }
  uint64_t v71 = *((void *)this + 540);
  if (v71)
  {
    physx::Cm::PreallocatingRegionManager::~PreallocatingRegionManager(*((physx::Cm::PreallocatingRegionManager **)this
                                                                       + 540));
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v71);
  }
  uint64_t v72 = *((void *)this + 539);
  if (v72)
  {
    physx::Cm::PreallocatingRegionManager::~PreallocatingRegionManager(*((physx::Cm::PreallocatingRegionManager **)this
                                                                       + 539));
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v72);
  }
  uint64_t v73 = *((void *)this + 541);
  if (v73)
  {
    physx::Cm::PreallocatingRegionManager::~PreallocatingRegionManager(*((physx::Cm::PreallocatingRegionManager **)this
                                                                       + 541));
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v73);
  }
  uint64_t v74 = *((void *)this + 543);
  if (v74)
  {
    if (*(_DWORD *)(v74 + 548))
    {
      uint64_t v131 = 0;
      uint64_t v132 = 0;
      uint64_t v75 = *(void *)(v74 + 560);
      if (v75)
      {
        do
        {
          uint64_t v130 = v75;
          int v76 = v132;
          if ((HIDWORD(v132) & 0x7FFFFFFFu) <= v132)
          {
            physx::shdfnd::Array<void *,physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>>::growAndPushBack((unint64_t)&v131, &v130);
          }
          else
          {
            *(void *)&v131[8 * v132] = v75;
            LODWORD(v132) = v76 + 1;
          }
          uint64_t v75 = **(void **)(v74 + 560);
          *(void *)(v74 + 560) = v75;
        }
        while (v75);
        uint64_t v77 = (uint64_t)v131;
        int v78 = v132;
      }
      else
      {
        int v78 = 0;
        uint64_t v77 = 0;
      }
      physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>>(v77, v78);
      physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>>(*(void *)(v74 + 528), *(_DWORD *)(v74 + 536));
      uint64_t v79 = *(unsigned int *)(v74 + 536);
      if (v79)
      {
        uint64_t v80 = *(void **)(v74 + 528);
        uint64_t v81 = &v80[v79];
        int v82 = v131;
        do
        {
          uint64_t v83 = *(unsigned int *)(v74 + 544);
          if (v83)
          {
            uint64_t v84 = (void (***)(void))*v80;
            uint64_t v85 = 320 * v83;
            BOOL v86 = (void (***)(void))*v80;
            do
            {
              if (v82 != &v131[8 * v132] && v86 == *(void (****)(void))v82) {
                v82 += 8;
              }
              else {
                (**v86)(v86);
              }
              v86 += 40;
              v84 += 40;
              v85 -= 320;
            }
            while (v85);
          }
          ++v80;
        }
        while (v80 != v81);
      }
      if ((v132 & 0x8000000000000000) == 0 && (v132 & 0x7FFFFFFF00000000) != 0 && v131) {
        (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, &v131[-*((void *)v131 - 1)]);
      }
    }
    uint64_t v87 = *(char **)(v74 + 528);
    uint64_t v88 = *(unsigned int *)(v74 + 536);
    if (v88)
    {
      uint64_t v89 = 8 * v88;
      do
      {
        if (*(void *)v87) {
          (*(void (**)(uint64_t, void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, *(void *)v87 - *(void *)(*(void *)v87 - 8));
        }
        v87 += 8;
        v89 -= 8;
      }
      while (v89);
      uint64_t v87 = *(char **)(v74 + 528);
    }
    int v90 = *(_DWORD *)(v74 + 540);
    if ((v90 & 0x80000000) == 0 && (v90 & 0x7FFFFFFF) != 0)
    {
      if (v87 == (char *)(v74 + 8))
      {
        *(unsigned char *)(v74 + 520) = 0;
      }
      else if (v87)
      {
        (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, &v87[-*((void *)v87 - 1)]);
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v74);
  }
  uint64_t v91 = *((void *)this + 544);
  if (v91)
  {
    if (*(_DWORD *)(v91 + 548))
    {
      uint64_t v131 = 0;
      uint64_t v132 = 0;
      uint64_t v92 = *(void *)(v91 + 560);
      if (v92)
      {
        do
        {
          uint64_t v130 = v92;
          int v93 = v132;
          if ((HIDWORD(v132) & 0x7FFFFFFFu) <= v132)
          {
            physx::shdfnd::Array<void *,physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>>::growAndPushBack((unint64_t)&v131, &v130);
          }
          else
          {
            *(void *)&v131[8 * v132] = v92;
            LODWORD(v132) = v93 + 1;
          }
          uint64_t v92 = **(void **)(v91 + 560);
          *(void *)(v91 + 560) = v92;
        }
        while (v92);
        uint64_t v94 = (uint64_t)v131;
        int v95 = v132;
      }
      else
      {
        int v95 = 0;
        uint64_t v94 = 0;
      }
      physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>>(v94, v95);
      physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::AlignedAllocator<64u,physx::shdfnd::NonTrackingAllocator>>(*(void *)(v91 + 528), *(_DWORD *)(v91 + 536));
      uint64_t v96 = *(unsigned int *)(v91 + 536);
      if (v96)
      {
        char v97 = *(void **)(v91 + 528);
        uint64_t v98 = &v97[v96];
        unsigned int v99 = v131;
        do
        {
          uint64_t v100 = *(unsigned int *)(v91 + 544);
          if (v100)
          {
            unsigned int v101 = (void (***)(void))*v97;
            uint64_t v102 = 896 * v100;
            uint64_t v103 = (void (***)(void))*v97;
            do
            {
              if (v99 != &v131[8 * v132] && v103 == *(void (****)(void))v99) {
                v99 += 8;
              }
              else {
                (**v103)(v103);
              }
              v103 += 112;
              v101 += 112;
              v102 -= 896;
            }
            while (v102);
          }
          ++v97;
        }
        while (v97 != v98);
      }
      if ((v132 & 0x8000000000000000) == 0 && (v132 & 0x7FFFFFFF00000000) != 0 && v131) {
        (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, &v131[-*((void *)v131 - 1)]);
      }
    }
    uint64_t v104 = *(char **)(v91 + 528);
    uint64_t v105 = *(unsigned int *)(v91 + 536);
    if (v105)
    {
      uint64_t v106 = 8 * v105;
      do
      {
        if (*(void *)v104) {
          (*(void (**)(uint64_t, void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, *(void *)v104 - *(void *)(*(void *)v104 - 8));
        }
        v104 += 8;
        v106 -= 8;
      }
      while (v106);
      uint64_t v104 = *(char **)(v91 + 528);
    }
    int v107 = *(_DWORD *)(v91 + 540);
    if ((v107 & 0x80000000) == 0 && (v107 & 0x7FFFFFFF) != 0)
    {
      if (v104 == (char *)(v91 + 8))
      {
        *(unsigned char *)(v91 + 520) = 0;
      }
      else if (v104)
      {
        (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, &v104[-*((void *)v104 - 1)]);
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v91);
  }
  uint64_t v108 = *((void *)this + 268);
  int v109 = *(_DWORD *)(v108 + 12);
  if (v109 < 0
    || ((v109 & 0x7FFFFFFF) != 0 ? (BOOL v110 = *(void *)v108 == 0) : (BOOL v110 = 1),
        v110
     || ((*(void (**)(uint64_t, void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, *(void *)v108), *((void *)this + 268))))
  {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  uint64_t v111 = *((void *)this + 537);
  if (v111)
  {
    int v112 = *(_DWORD *)(v111 + 60);
    if ((v112 & 0x80000000) == 0 && (v112 & 0x7FFFFFFF) != 0 && *(void *)(v111 + 48) != 0) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    if (*(void *)(v111 + 32) && (*(_DWORD *)(v111 + 40) & 0x80000000) == 0) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *(void *)(v111 + 32) = 0;
    int v114 = *(_DWORD *)(v111 + 28);
    if ((v114 & 0x80000000) == 0 && (v114 & 0x7FFFFFFF) != 0 && *(void *)(v111 + 16)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v111);
  }
  uint64_t v115 = *((void *)this + 536);
  if (v115)
  {
    int v116 = *(_DWORD *)(v115 + 60);
    if ((v116 & 0x80000000) == 0 && (v116 & 0x7FFFFFFF) != 0 && *(void *)(v115 + 48) != 0) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    if (*(void *)(v115 + 32) && (*(_DWORD *)(v115 + 40) & 0x80000000) == 0) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *(void *)(v115 + 32) = 0;
    int v118 = *(_DWORD *)(v115 + 28);
    if ((v118 & 0x80000000) == 0 && (v118 & 0x7FFFFFFF) != 0 && *(void *)(v115 + 16)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v115);
  }
  uint64_t v119 = *((void *)this + 535);
  if (v119)
  {
    int v120 = *(_DWORD *)(v119 + 60);
    if ((v120 & 0x80000000) == 0 && (v120 & 0x7FFFFFFF) != 0 && *(void *)(v119 + 48)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    if (*(void *)(v119 + 32) && (*(_DWORD *)(v119 + 40) & 0x80000000) == 0) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *(void *)(v119 + 32) = 0;
    int v121 = *(_DWORD *)(v119 + 28);
    if ((v121 & 0x80000000) == 0 && (v121 & 0x7FFFFFFF) != 0 && *(void *)(v119 + 16)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v119);
  }
  uint64_t v122 = *((void *)this + 534);
  if (v122)
  {
    int v123 = *(_DWORD *)(v122 + 60);
    if ((v123 & 0x80000000) == 0 && (v123 & 0x7FFFFFFF) != 0 && *(void *)(v122 + 48)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    if (*(void *)(v122 + 32) && (*(_DWORD *)(v122 + 40) & 0x80000000) == 0) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *(void *)(v122 + 32) = 0;
    int v124 = *(_DWORD *)(v122 + 28);
    if ((v124 & 0x80000000) == 0 && (v124 & 0x7FFFFFFF) != 0 && *(void *)(v122 + 16)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v122);
  }
  if (*((void *)this + 532)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  physx::Bp::AABBManager::destroy(*((physx::Bp::AABBManager **)this + 231));
  (*(void (**)(void))(**((void **)this + 232) + 80))(*((void *)this + 232));
  (*(void (**)(void))(**((void **)this + 239) + 16))(*((void *)this + 239));
  if (*((void *)this + 239)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  (***((void (****)(void))this + 238))(*((void *)this + 238));
  if (*((void *)this + 238)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  (***((void (****)(void))this + 236))(*((void *)this + 236));
  physx::PxsCCDContext::destroy(*((pthread_mutex_t ***)this + 233));
  physx::IG::SimpleIslandManager::~SimpleIslandManager(*((physx::IG::SimpleIslandManager **)this + 235));
  if (*((void *)this + 235)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  uint64_t v125 = *((void *)this + 932);
  if (v125) {
    (*(void (**)(uint64_t))(*(void *)v125 + 80))(v125);
  }
  uint64_t v126 = *((void *)this + 230);
  if (v126)
  {
    physx::PxsContext::~PxsContext(*((physx::PxsContext **)this + 230));
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v126);
    *((void *)this + 230) = 0;
  }
  uint64_t v127 = (void *)*((void *)this + 259);
  int v128 = *((_DWORD *)v127 + 5);
  if (v128 < 0
    || (v128 & 0x7FFFFFFF) == 0
    || !v127[1]
    || ((*(void (**)(void, void))(*(void *)*v127 + 24))(*v127, v127[1]), *((void *)this + 259)))
  {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  uint64_t result = (uint64_t (***)(void))*((void *)this + 237);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*((void *)this + 237)) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance
    }
                                                                                                + 24)
                                                                                    + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((void *)this + 237) = 0;
  }
  return result;
}

void physx::Sc::Scene::postReportsCleanup(physx::Sc::Scene *this)
{
  uint64_t v2 = *((void *)this + 535);
  uint64_t v3 = v2;
  if (*(_DWORD *)(v2 + 56))
  {
    unint64_t v4 = 0;
    do
      physx::Cm::IDPoolBase<physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>>::freeID(v2 + 8, *(_DWORD *)(*(void *)(v2 + 48) + 4 * v4++));
    while (v4 < *(unsigned int *)(v2 + 56));
    uint64_t v3 = *((void *)this + 535);
  }
  *(_DWORD *)(v2 + 56) = 0;
  bzero(*(void **)(v3 + 32), (4 * *(_DWORD *)(v3 + 40)));
  uint64_t v5 = *((void *)this + 536);
  uint64_t v6 = v5;
  if (*(_DWORD *)(v5 + 56))
  {
    unint64_t v7 = 0;
    do
      physx::Cm::IDPoolBase<physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>>::freeID(v5 + 8, *(_DWORD *)(*(void *)(v5 + 48) + 4 * v7++));
    while (v7 < *(unsigned int *)(v5 + 56));
    uint64_t v6 = *((void *)this + 536);
  }
  *(_DWORD *)(v5 + 56) = 0;
  bzero(*(void **)(v6 + 32), (4 * *(_DWORD *)(v6 + 40)));
  uint64_t v8 = *((void *)this + 534);
  uint64_t v9 = v8;
  if (*(_DWORD *)(v8 + 56))
  {
    unint64_t v10 = 0;
    do
      physx::Cm::IDPoolBase<physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>>::freeID(v8 + 8, *(_DWORD *)(*(void *)(v8 + 48) + 4 * v10++));
    while (v10 < *(unsigned int *)(v8 + 56));
    uint64_t v9 = *((void *)this + 534);
  }
  *(_DWORD *)(v8 + 56) = 0;
  int v11 = *(void **)(v9 + 32);
  size_t v12 = (4 * *(_DWORD *)(v9 + 40));
  bzero(v11, v12);
}

uint64_t *physx::Sc::Scene::preAllocate(physx::Sc::Scene *this, unsigned int a2, unsigned int a3, int a4, int a5)
{
  if (a3 <= 0x40) {
    unsigned int v10 = 64;
  }
  else {
    unsigned int v10 = a3;
  }
  if ((*((_DWORD *)this + 11) & 0x7FFFFFFFu) < v10) {
    physx::shdfnd::Array<physx::Sc::BodyCore *,physx::shdfnd::ReflectionAllocator<physx::Sc::BodyCore *>>::recreate((uint64_t)this + 32, v10);
  }
  physx::Cm::PreallocatingRegionManager::preAllocate(*((uint64_t **)this + 540), a2);
  physx::Cm::PreallocatingRegionManager::preAllocate(*((uint64_t **)this + 541), a3);
  int v11 = (uint64_t *)*((void *)this + 539);
  return physx::Cm::PreallocatingRegionManager::preAllocate(v11, a5 + a4);
}

uint64_t physx::Sc::Scene::addToActiveBodyList(uint64_t this, physx::Sc::BodySim *a2)
{
  uint64_t v3 = this;
  unint64_t v4 = (uint64_t *)(this + 32);
  unsigned int v5 = *(_DWORD *)(this + 40);
  uint64_t v6 = *((void *)a2 + 10);
  uint64_t v11 = v6;
  if ((*(unsigned char *)(v6 + 44) & 1) != 0
    && (uint64_t v7 = *(unsigned int *)(this + 48), *(_DWORD *)(this + 48) = v7 + 1, v7 != v5))
  {
    uint64_t v8 = *v4;
    uint64_t v9 = *(void *)(*v4 + 8 * v7);
    uint64_t v11 = v9;
    *(_DWORD *)(*(void *)v9 + 184) = v5;
    *(void *)(v8 + 8 * v7) = v6;
    uint64_t v6 = v9;
  }
  else
  {
    LODWORD(v7) = v5;
  }
  if ((*((_WORD *)a2 + 90) & 0x1000) != 0)
  {
    uint64_t v10 = *(unsigned int *)(this + 64);
    if ((*(_DWORD *)(this + 68) & 0x7FFFFFFFu) <= v10)
    {
      this = physx::shdfnd::Array<physx::Sc::BodyCore *,physx::shdfnd::ReflectionAllocator<physx::Sc::BodyCore *>>::growAndPushBack(this + 56, &v11);
      unsigned int v5 = *(_DWORD *)(v3 + 40);
    }
    else
    {
      *(void *)(*(void *)(this + 56) + 8 * v10) = v6;
      *(_DWORD *)(this + 64) = v10 + 1;
    }
    *((_DWORD *)a2 + 47) = v10;
  }
  *((_DWORD *)a2 + 46) = v7;
  if ((*(_DWORD *)(v3 + 44) & 0x7FFFFFFFu) <= v5) {
    return physx::shdfnd::Array<physx::Sc::BodyCore *,physx::shdfnd::ReflectionAllocator<physx::Sc::BodyCore *>>::growAndPushBack((uint64_t)v4, &v11);
  }
  *(void *)(*(void *)(v3 + 32) + 8 * v5) = v11;
  *(_DWORD *)(v3 + 40) = v5 + 1;
  return this;
}

uint64_t physx::Sc::Scene::removeFromActiveBodyList(uint64_t this, physx::Sc::BodySim *a2)
{
  uint64_t v2 = *((unsigned int *)a2 + 46);
  *((_DWORD *)a2 + 46) = -2;
  int v3 = *(_DWORD *)(this + 40);
  unsigned int v4 = *(_DWORD *)(this + 48);
  if (v2 < v4)
  {
    unsigned int v5 = v4 - 1;
    *(_DWORD *)(this + 48) = v4 - 1;
    if (v3 != v4 && v2 < v5)
    {
      uint64_t v7 = *(void *)(this + 32);
      uint64_t v8 = *(void *)(v7 + 8 * v5);
      *(_DWORD *)(*(void *)v8 + 184) = v2;
      *(void *)(v7 + 8 * v2) = v8;
      LODWORD(v2) = v5;
    }
  }
  unsigned int v9 = v3 - 1;
  if ((*((_WORD *)a2 + 90) & 0x1000) != 0)
  {
    uint64_t v10 = *((unsigned int *)a2 + 47);
    *((_DWORD *)a2 + 47) = -2;
    unsigned int v11 = *(_DWORD *)(this + 64) - 1;
    if (v10 != v11)
    {
      uint64_t v12 = *(void *)(this + 56);
      uint64_t v13 = *(void *)(v12 + 8 * v11);
      *(void *)(v12 + 8 * v10) = v13;
      *(_DWORD *)(*(void *)v13 + 188) = v10;
    }
    *(_DWORD *)(this + 64) = v11;
  }
  if (v2 != v9)
  {
    uint64_t v14 = *(void *)(this + 32);
    uint64_t v15 = *(void *)(v14 + 8 * v9);
    *(void *)(v14 + 8 * v2) = v15;
    *(_DWORD *)(*(void *)v15 + 184) = v2;
  }
  *(_DWORD *)(this + 40) = v9;
  return this;
}

uint64_t physx::Sc::Scene::registerInteraction(uint64_t this, physx::Sc::Interaction *a2, int a3)
{
  uint64_t v5 = this;
  int v21 = a2;
  uint64_t v6 = *((unsigned __int8 *)a2 + 28);
  uint64_t v7 = this + 16 * v6;
  int v9 = *(_DWORD *)(v7 + 84);
  uint64_t v8 = (_DWORD *)(v7 + 84);
  uint64_t v10 = v8 - 3;
  uint64_t v12 = v8 - 1;
  uint64_t v11 = *(v8 - 1);
  *((_DWORD *)a2 + 4) = v11;
  unsigned int v13 = v9 & 0x7FFFFFFF;
  if ((v9 & 0x7FFFFFFF) != 0)
  {
    unsigned int v14 = v11;
  }
  else
  {
    this = physx::shdfnd::Array<physx::Sc::Interaction *,physx::shdfnd::ReflectionAllocator<physx::Sc::Interaction *>>::recreate((uint64_t)(v8 - 3), 0x40u);
    unsigned int v14 = *v12;
    unsigned int v13 = *v8 & 0x7FFFFFFF;
  }
  if (v13 <= v14)
  {
    this = physx::shdfnd::Array<physx::Sc::Interaction *,physx::shdfnd::ReflectionAllocator<physx::Sc::Interaction *>>::growAndPushBack((uint64_t)(v8 - 3), &v21);
    if (!a3) {
      return this;
    }
  }
  else
  {
    *(void *)(*v10 + 8 * v14) = a2;
    unsigned int *v12 = v14 + 1;
    if (!a3) {
      return this;
    }
  }
  uint64_t v15 = v5 + 4 * v6;
  unsigned int v18 = *(_DWORD *)(v15 + 120);
  uint64_t v16 = (_DWORD *)(v15 + 120);
  uint64_t v17 = v18;
  if (v11 > v18)
  {
    uint64_t v19 = *(void *)(*v10 + 8 * v11);
    uint64_t v20 = *(void *)(*v10 + 8 * v17);
    *(void *)(*v10 + 8 * v11) = v20;
    *(void *)(*v10 + 8 * v17) = v19;
    *(_DWORD *)(v19 + 16) = v17;
    *(_DWORD *)(v20 + 16) = v11;
    LODWORD(v17) = *v16;
  }
  *uint64_t v16 = v17 + 1;
  return this;
}